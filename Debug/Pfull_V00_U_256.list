
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801e7f0  0801e7f0  000197f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .myBufSectionEEPROM 00000094  0803f000  0803f000  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         00017bc8  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       000002dc  08017c88  08017c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08017f64  08017f64  00022094  2**0
                  CONTENTS
  8 .ARM          00000008  08017f64  08017f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08017f6c  08017f6c  00022094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  08017f6c  08017f6c  00018f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000004  08017f70  08017f70  00018f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         000002b4  20000000  08017f74  00019000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 13 .bss          00000de8  200002b4  08018228  000192b4  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2000109c  08018228  0001a09c  2**0
                  ALLOC
 15 .ARM.attributes 00000028  00000000  00000000  00022094  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002dc2f  00000000  00000000  000220bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005d65  00000000  00000000  0004fceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001f28  00000000  00000000  00055a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000018d4  00000000  00000000  00057978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00021315  00000000  00000000  0005924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002d402  00000000  00000000  0007a561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000cceff  00000000  00000000  000a7963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  00174862  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00006f44  00000000  00000000  001748a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000084  00000000  00000000  0017b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002b4 	.word	0x200002b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08017c60 	.word	0x08017c60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002b8 	.word	0x200002b8
 8000104:	08017c60 	.word	0x08017c60

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__clzsi2>:
 8000404:	211c      	movs	r1, #28
 8000406:	2301      	movs	r3, #1
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	4298      	cmp	r0, r3
 800040c:	d301      	bcc.n	8000412 <__clzsi2+0xe>
 800040e:	0c00      	lsrs	r0, r0, #16
 8000410:	3910      	subs	r1, #16
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	4298      	cmp	r0, r3
 8000416:	d301      	bcc.n	800041c <__clzsi2+0x18>
 8000418:	0a00      	lsrs	r0, r0, #8
 800041a:	3908      	subs	r1, #8
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	4298      	cmp	r0, r3
 8000420:	d301      	bcc.n	8000426 <__clzsi2+0x22>
 8000422:	0900      	lsrs	r0, r0, #4
 8000424:	3904      	subs	r1, #4
 8000426:	a202      	add	r2, pc, #8	@ (adr r2, 8000430 <__clzsi2+0x2c>)
 8000428:	5c10      	ldrb	r0, [r2, r0]
 800042a:	1840      	adds	r0, r0, r1
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	02020304 	.word	0x02020304
 8000434:	01010101 	.word	0x01010101
	...

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	0008      	movs	r0, r1
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	@ (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	@ (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	ffffff9d 	.word	0xffffff9d
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__udivmoddi4>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	4657      	mov	r7, sl
 8000484:	464e      	mov	r6, r9
 8000486:	4645      	mov	r5, r8
 8000488:	46de      	mov	lr, fp
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	0004      	movs	r4, r0
 800048e:	000d      	movs	r5, r1
 8000490:	4692      	mov	sl, r2
 8000492:	4699      	mov	r9, r3
 8000494:	b083      	sub	sp, #12
 8000496:	428b      	cmp	r3, r1
 8000498:	d830      	bhi.n	80004fc <__udivmoddi4+0x7c>
 800049a:	d02d      	beq.n	80004f8 <__udivmoddi4+0x78>
 800049c:	4649      	mov	r1, r9
 800049e:	4650      	mov	r0, sl
 80004a0:	f000 f8ba 	bl	8000618 <__clzdi2>
 80004a4:	0029      	movs	r1, r5
 80004a6:	0006      	movs	r6, r0
 80004a8:	0020      	movs	r0, r4
 80004aa:	f000 f8b5 	bl	8000618 <__clzdi2>
 80004ae:	1a33      	subs	r3, r6, r0
 80004b0:	4698      	mov	r8, r3
 80004b2:	3b20      	subs	r3, #32
 80004b4:	d434      	bmi.n	8000520 <__udivmoddi4+0xa0>
 80004b6:	469b      	mov	fp, r3
 80004b8:	4653      	mov	r3, sl
 80004ba:	465a      	mov	r2, fp
 80004bc:	4093      	lsls	r3, r2
 80004be:	4642      	mov	r2, r8
 80004c0:	001f      	movs	r7, r3
 80004c2:	4653      	mov	r3, sl
 80004c4:	4093      	lsls	r3, r2
 80004c6:	001e      	movs	r6, r3
 80004c8:	42af      	cmp	r7, r5
 80004ca:	d83b      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d100      	bne.n	80004d2 <__udivmoddi4+0x52>
 80004d0:	e079      	b.n	80005c6 <__udivmoddi4+0x146>
 80004d2:	465b      	mov	r3, fp
 80004d4:	1ba4      	subs	r4, r4, r6
 80004d6:	41bd      	sbcs	r5, r7
 80004d8:	2b00      	cmp	r3, #0
 80004da:	da00      	bge.n	80004de <__udivmoddi4+0x5e>
 80004dc:	e076      	b.n	80005cc <__udivmoddi4+0x14c>
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	465a      	mov	r2, fp
 80004ea:	4093      	lsls	r3, r2
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	4642      	mov	r2, r8
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	e029      	b.n	800054c <__udivmoddi4+0xcc>
 80004f8:	4282      	cmp	r2, r0
 80004fa:	d9cf      	bls.n	800049c <__udivmoddi4+0x1c>
 80004fc:	2200      	movs	r2, #0
 80004fe:	2300      	movs	r3, #0
 8000500:	9200      	str	r2, [sp, #0]
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <__udivmoddi4+0x8e>
 800050a:	601c      	str	r4, [r3, #0]
 800050c:	605d      	str	r5, [r3, #4]
 800050e:	9800      	ldr	r0, [sp, #0]
 8000510:	9901      	ldr	r1, [sp, #4]
 8000512:	b003      	add	sp, #12
 8000514:	bcf0      	pop	{r4, r5, r6, r7}
 8000516:	46bb      	mov	fp, r7
 8000518:	46b2      	mov	sl, r6
 800051a:	46a9      	mov	r9, r5
 800051c:	46a0      	mov	r8, r4
 800051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000520:	4642      	mov	r2, r8
 8000522:	469b      	mov	fp, r3
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	4652      	mov	r2, sl
 800052a:	40da      	lsrs	r2, r3
 800052c:	4641      	mov	r1, r8
 800052e:	0013      	movs	r3, r2
 8000530:	464a      	mov	r2, r9
 8000532:	408a      	lsls	r2, r1
 8000534:	0017      	movs	r7, r2
 8000536:	4642      	mov	r2, r8
 8000538:	431f      	orrs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d9c3      	bls.n	80004cc <__udivmoddi4+0x4c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	4643      	mov	r3, r8
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0d8      	beq.n	8000504 <__udivmoddi4+0x84>
 8000552:	07fb      	lsls	r3, r7, #31
 8000554:	0872      	lsrs	r2, r6, #1
 8000556:	431a      	orrs	r2, r3
 8000558:	4646      	mov	r6, r8
 800055a:	087b      	lsrs	r3, r7, #1
 800055c:	e00e      	b.n	800057c <__udivmoddi4+0xfc>
 800055e:	42ab      	cmp	r3, r5
 8000560:	d101      	bne.n	8000566 <__udivmoddi4+0xe6>
 8000562:	42a2      	cmp	r2, r4
 8000564:	d80c      	bhi.n	8000580 <__udivmoddi4+0x100>
 8000566:	1aa4      	subs	r4, r4, r2
 8000568:	419d      	sbcs	r5, r3
 800056a:	2001      	movs	r0, #1
 800056c:	1924      	adds	r4, r4, r4
 800056e:	416d      	adcs	r5, r5
 8000570:	2100      	movs	r1, #0
 8000572:	3e01      	subs	r6, #1
 8000574:	1824      	adds	r4, r4, r0
 8000576:	414d      	adcs	r5, r1
 8000578:	2e00      	cmp	r6, #0
 800057a:	d006      	beq.n	800058a <__udivmoddi4+0x10a>
 800057c:	42ab      	cmp	r3, r5
 800057e:	d9ee      	bls.n	800055e <__udivmoddi4+0xde>
 8000580:	3e01      	subs	r6, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2e00      	cmp	r6, #0
 8000588:	d1f8      	bne.n	800057c <__udivmoddi4+0xfc>
 800058a:	9800      	ldr	r0, [sp, #0]
 800058c:	9901      	ldr	r1, [sp, #4]
 800058e:	465b      	mov	r3, fp
 8000590:	1900      	adds	r0, r0, r4
 8000592:	4169      	adcs	r1, r5
 8000594:	2b00      	cmp	r3, #0
 8000596:	db24      	blt.n	80005e2 <__udivmoddi4+0x162>
 8000598:	002b      	movs	r3, r5
 800059a:	465a      	mov	r2, fp
 800059c:	4644      	mov	r4, r8
 800059e:	40d3      	lsrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db2a      	blt.n	8000604 <__udivmoddi4+0x184>
 80005ae:	0026      	movs	r6, r4
 80005b0:	409e      	lsls	r6, r3
 80005b2:	0033      	movs	r3, r6
 80005b4:	0026      	movs	r6, r4
 80005b6:	4647      	mov	r7, r8
 80005b8:	40be      	lsls	r6, r7
 80005ba:	0032      	movs	r2, r6
 80005bc:	1a80      	subs	r0, r0, r2
 80005be:	4199      	sbcs	r1, r3
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	9101      	str	r1, [sp, #4]
 80005c4:	e79e      	b.n	8000504 <__udivmoddi4+0x84>
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	d8bc      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80005ca:	e782      	b.n	80004d2 <__udivmoddi4+0x52>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	9100      	str	r1, [sp, #0]
 80005d8:	9201      	str	r2, [sp, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	40da      	lsrs	r2, r3
 80005de:	9201      	str	r2, [sp, #4]
 80005e0:	e785      	b.n	80004ee <__udivmoddi4+0x6e>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	002a      	movs	r2, r5
 80005ea:	4646      	mov	r6, r8
 80005ec:	409a      	lsls	r2, r3
 80005ee:	0023      	movs	r3, r4
 80005f0:	40f3      	lsrs	r3, r6
 80005f2:	4644      	mov	r4, r8
 80005f4:	4313      	orrs	r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	40e2      	lsrs	r2, r4
 80005fa:	001c      	movs	r4, r3
 80005fc:	465b      	mov	r3, fp
 80005fe:	0015      	movs	r5, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	dad4      	bge.n	80005ae <__udivmoddi4+0x12e>
 8000604:	4642      	mov	r2, r8
 8000606:	002f      	movs	r7, r5
 8000608:	2320      	movs	r3, #32
 800060a:	0026      	movs	r6, r4
 800060c:	4097      	lsls	r7, r2
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	40de      	lsrs	r6, r3
 8000612:	003b      	movs	r3, r7
 8000614:	4333      	orrs	r3, r6
 8000616:	e7cd      	b.n	80005b4 <__udivmoddi4+0x134>

08000618 <__clzdi2>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2900      	cmp	r1, #0
 800061c:	d103      	bne.n	8000626 <__clzdi2+0xe>
 800061e:	f7ff fef1 	bl	8000404 <__clzsi2>
 8000622:	3020      	adds	r0, #32
 8000624:	e002      	b.n	800062c <__clzdi2+0x14>
 8000626:	0008      	movs	r0, r1
 8000628:	f7ff feec 	bl	8000404 <__clzsi2>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)

08000630 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"


//-------------------------------------------------------
static void MacStringtoHex(){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 8000636:	1cfb      	adds	r3, r7, #3
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 800063c:	1cbb      	adds	r3, r7, #2
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	e0d8      	b.n	8000800 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3302      	adds	r3, #2
 8000652:	4a70      	ldr	r2, [pc, #448]	@ (8000814 <MacStringtoHex+0x1e4>)
 8000654:	5cd3      	ldrb	r3, [r2, r3]
 8000656:	2b30      	cmp	r3, #48	@ 0x30
 8000658:	d102      	bne.n	8000660 <MacStringtoHex+0x30>
			tempregister = 0x00;
 800065a:	1cfb      	adds	r3, r7, #3
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3302      	adds	r3, #2
 8000664:	4a6b      	ldr	r2, [pc, #428]	@ (8000814 <MacStringtoHex+0x1e4>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	2b31      	cmp	r3, #49	@ 0x31
 800066a:	d102      	bne.n	8000672 <MacStringtoHex+0x42>
			tempregister = 0x01;
 800066c:	1cfb      	adds	r3, r7, #3
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3302      	adds	r3, #2
 8000676:	4a67      	ldr	r2, [pc, #412]	@ (8000814 <MacStringtoHex+0x1e4>)
 8000678:	5cd3      	ldrb	r3, [r2, r3]
 800067a:	2b32      	cmp	r3, #50	@ 0x32
 800067c:	d102      	bne.n	8000684 <MacStringtoHex+0x54>
			tempregister = 0x02;
 800067e:	1cfb      	adds	r3, r7, #3
 8000680:	2202      	movs	r2, #2
 8000682:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3302      	adds	r3, #2
 8000688:	4a62      	ldr	r2, [pc, #392]	@ (8000814 <MacStringtoHex+0x1e4>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	2b33      	cmp	r3, #51	@ 0x33
 800068e:	d102      	bne.n	8000696 <MacStringtoHex+0x66>
			tempregister = 0x03;
 8000690:	1cfb      	adds	r3, r7, #3
 8000692:	2203      	movs	r2, #3
 8000694:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3302      	adds	r3, #2
 800069a:	4a5e      	ldr	r2, [pc, #376]	@ (8000814 <MacStringtoHex+0x1e4>)
 800069c:	5cd3      	ldrb	r3, [r2, r3]
 800069e:	2b34      	cmp	r3, #52	@ 0x34
 80006a0:	d102      	bne.n	80006a8 <MacStringtoHex+0x78>
			tempregister = 0x04;
 80006a2:	1cfb      	adds	r3, r7, #3
 80006a4:	2204      	movs	r2, #4
 80006a6:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3302      	adds	r3, #2
 80006ac:	4a59      	ldr	r2, [pc, #356]	@ (8000814 <MacStringtoHex+0x1e4>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	2b35      	cmp	r3, #53	@ 0x35
 80006b2:	d102      	bne.n	80006ba <MacStringtoHex+0x8a>
			tempregister = 0x05;
 80006b4:	1cfb      	adds	r3, r7, #3
 80006b6:	2205      	movs	r2, #5
 80006b8:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3302      	adds	r3, #2
 80006be:	4a55      	ldr	r2, [pc, #340]	@ (8000814 <MacStringtoHex+0x1e4>)
 80006c0:	5cd3      	ldrb	r3, [r2, r3]
 80006c2:	2b36      	cmp	r3, #54	@ 0x36
 80006c4:	d102      	bne.n	80006cc <MacStringtoHex+0x9c>
			tempregister = 0x06;
 80006c6:	1cfb      	adds	r3, r7, #3
 80006c8:	2206      	movs	r2, #6
 80006ca:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3302      	adds	r3, #2
 80006d0:	4a50      	ldr	r2, [pc, #320]	@ (8000814 <MacStringtoHex+0x1e4>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	2b37      	cmp	r3, #55	@ 0x37
 80006d6:	d102      	bne.n	80006de <MacStringtoHex+0xae>
			tempregister = 0x07;
 80006d8:	1cfb      	adds	r3, r7, #3
 80006da:	2207      	movs	r2, #7
 80006dc:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3302      	adds	r3, #2
 80006e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000814 <MacStringtoHex+0x1e4>)
 80006e4:	5cd3      	ldrb	r3, [r2, r3]
 80006e6:	2b38      	cmp	r3, #56	@ 0x38
 80006e8:	d102      	bne.n	80006f0 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 80006ea:	1cfb      	adds	r3, r7, #3
 80006ec:	2208      	movs	r2, #8
 80006ee:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3302      	adds	r3, #2
 80006f4:	4a47      	ldr	r2, [pc, #284]	@ (8000814 <MacStringtoHex+0x1e4>)
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	2b39      	cmp	r3, #57	@ 0x39
 80006fa:	d102      	bne.n	8000702 <MacStringtoHex+0xd2>
			tempregister = 0x09;
 80006fc:	1cfb      	adds	r3, r7, #3
 80006fe:	2209      	movs	r2, #9
 8000700:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3302      	adds	r3, #2
 8000706:	4a43      	ldr	r2, [pc, #268]	@ (8000814 <MacStringtoHex+0x1e4>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	2b41      	cmp	r3, #65	@ 0x41
 800070c:	d102      	bne.n	8000714 <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 800070e:	1cfb      	adds	r3, r7, #3
 8000710:	220a      	movs	r2, #10
 8000712:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3302      	adds	r3, #2
 8000718:	4a3e      	ldr	r2, [pc, #248]	@ (8000814 <MacStringtoHex+0x1e4>)
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	2b42      	cmp	r3, #66	@ 0x42
 800071e:	d102      	bne.n	8000726 <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 8000720:	1cfb      	adds	r3, r7, #3
 8000722:	220b      	movs	r2, #11
 8000724:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3302      	adds	r3, #2
 800072a:	4a3a      	ldr	r2, [pc, #232]	@ (8000814 <MacStringtoHex+0x1e4>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
 800072e:	2b43      	cmp	r3, #67	@ 0x43
 8000730:	d102      	bne.n	8000738 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 8000732:	1cfb      	adds	r3, r7, #3
 8000734:	220c      	movs	r2, #12
 8000736:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3302      	adds	r3, #2
 800073c:	4a35      	ldr	r2, [pc, #212]	@ (8000814 <MacStringtoHex+0x1e4>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	2b44      	cmp	r3, #68	@ 0x44
 8000742:	d102      	bne.n	800074a <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8000744:	1cfb      	adds	r3, r7, #3
 8000746:	220d      	movs	r2, #13
 8000748:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3302      	adds	r3, #2
 800074e:	4a31      	ldr	r2, [pc, #196]	@ (8000814 <MacStringtoHex+0x1e4>)
 8000750:	5cd3      	ldrb	r3, [r2, r3]
 8000752:	2b45      	cmp	r3, #69	@ 0x45
 8000754:	d102      	bne.n	800075c <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8000756:	1cfb      	adds	r3, r7, #3
 8000758:	220e      	movs	r2, #14
 800075a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3302      	adds	r3, #2
 8000760:	4a2c      	ldr	r2, [pc, #176]	@ (8000814 <MacStringtoHex+0x1e4>)
 8000762:	5cd3      	ldrb	r3, [r2, r3]
 8000764:	2b46      	cmp	r3, #70	@ 0x46
 8000766:	d102      	bne.n	800076e <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8000768:	1cfb      	adds	r3, r7, #3
 800076a:	220f      	movs	r2, #15
 800076c:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	4013      	ands	r3, r2
 8000774:	d105      	bne.n	8000782 <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 8000776:	1cbb      	adds	r3, r7, #2
 8000778:	1cfa      	adds	r2, r7, #3
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e03b      	b.n	80007fa <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 8000782:	1cbb      	adds	r3, r7, #2
 8000784:	1cb9      	adds	r1, r7, #2
 8000786:	1cfa      	adds	r2, r7, #3
 8000788:	7809      	ldrb	r1, [r1, #0]
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	430a      	orrs	r2, r1
 800078e:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d005      	beq.n	80007a2 <MacStringtoHex+0x172>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b05      	cmp	r3, #5
 800079a:	d002      	beq.n	80007a2 <MacStringtoHex+0x172>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b09      	cmp	r3, #9
 80007a0:	d105      	bne.n	80007ae <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 80007a2:	1cbb      	adds	r3, r7, #2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	003b      	movs	r3, r7
 80007aa:	0212      	lsls	r2, r2, #8
 80007ac:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d005      	beq.n	80007c0 <MacStringtoHex+0x190>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	d002      	beq.n	80007c0 <MacStringtoHex+0x190>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0b      	cmp	r3, #11
 80007be:	d107      	bne.n	80007d0 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 80007c0:	1cbb      	adds	r3, r7, #2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b299      	uxth	r1, r3
 80007c6:	003b      	movs	r3, r7
 80007c8:	003a      	movs	r2, r7
 80007ca:	8812      	ldrh	r2, [r2, #0]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d103      	bne.n	80007de <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MacStringtoHex+0x1e8>)
 80007d8:	003a      	movs	r2, r7
 80007da:	8812      	ldrh	r2, [r2, #0]
 80007dc:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d103      	bne.n	80007ec <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MacStringtoHex+0x1e8>)
 80007e6:	003a      	movs	r2, r7
 80007e8:	8812      	ldrh	r2, [r2, #0]
 80007ea:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b0b      	cmp	r3, #11
 80007f0:	d103      	bne.n	80007fa <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MacStringtoHex+0x1e8>)
 80007f4:	003a      	movs	r2, r7
 80007f6:	8812      	ldrh	r2, [r2, #0]
 80007f8:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3301      	adds	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dc00      	bgt.n	8000808 <MacStringtoHex+0x1d8>
 8000806:	e722      	b.n	800064e <MacStringtoHex+0x1e>
		}
	}
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000d1c 	.word	0x20000d1c
 8000818:	2000008c 	.word	0x2000008c

0800081c <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	603a      	str	r2, [r7, #0]
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	1c02      	adds	r2, r0, #0
 8000828:	801a      	strh	r2, [r3, #0]
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	1c0a      	adds	r2, r1, #0
 800082e:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 8000830:	210d      	movs	r1, #13
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 8000838:	200f      	movs	r0, #15
 800083a:	183b      	adds	r3, r7, r0
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 8000840:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	1dba      	adds	r2, r7, #6
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d84b      	bhi.n	80008e4 <ReadHoldingRegistersFunctionRev+0xc8>
 800084c:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	1d3a      	adds	r2, r7, #4
 8000852:	8812      	ldrh	r2, [r2, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d345      	bcc.n	80008e4 <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 8000858:	183b      	adds	r3, r7, r0
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	b2da      	uxtb	r2, r3
 800086e:	187b      	adds	r3, r7, r1
 8000870:	3201      	adds	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 8000874:	187b      	adds	r3, r7, r1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d32d      	bcc.n	80008de <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 8000882:	210e      	movs	r1, #14
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	e017      	b.n	80008c2 <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 8000892:	240e      	movs	r4, #14
 8000894:	193b      	adds	r3, r7, r4
 8000896:	7818      	ldrb	r0, [r3, #0]
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	001a      	movs	r2, r3
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	1ad2      	subs	r2, r2, r3
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	0019      	movs	r1, r3
 80008b4:	f001 f83a 	bl	800192c <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	3201      	adds	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	230e      	movs	r3, #14
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <ReadHoldingRegistersFunctionRev+0xdc>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d3df      	bcc.n	8000892 <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <ReadHoldingRegistersFunctionRev+0xe0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 f846 	bl	8001968 <ModbusSlaveTransaction>
 80008dc:	e002      	b.n	80008e4 <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 80008de:	2003      	movs	r0, #3
 80008e0:	f001 f96a 	bl	8001bb8 <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 80008e4:	230f      	movs	r3, #15
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b005      	add	sp, #20
 80008f0:	bd90      	pop	{r4, r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	200002d2 	.word	0x200002d2
 80008f8:	200002d4 	.word	0x200002d4
 80008fc:	20000320 	.word	0x20000320

08000900 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 800090c:	4b75      	ldr	r3, [pc, #468]	@ (8000ae4 <ModbusMap+0x1e4>)
 800090e:	78da      	ldrb	r2, [r3, #3]
 8000910:	4b75      	ldr	r3, [pc, #468]	@ (8000ae8 <ModbusMap+0x1e8>)
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	4313      	orrs	r3, r2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b73      	ldr	r3, [pc, #460]	@ (8000ae8 <ModbusMap+0x1e8>)
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	4313      	orrs	r3, r2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2201      	movs	r2, #1
 8000922:	4053      	eors	r3, r2
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 800092a:	4b70      	ldr	r3, [pc, #448]	@ (8000aec <ModbusMap+0x1ec>)
 800092c:	2200      	movs	r2, #0
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	e016      	b.n	8000960 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 8000932:	4b6d      	ldr	r3, [pc, #436]	@ (8000ae8 <ModbusMap+0x1e8>)
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 800093a:	4b6c      	ldr	r3, [pc, #432]	@ (8000aec <ModbusMap+0x1ec>)
 800093c:	2201      	movs	r2, #1
 800093e:	801a      	strh	r2, [r3, #0]
 8000940:	e00e      	b.n	8000960 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 8000942:	4b69      	ldr	r3, [pc, #420]	@ (8000ae8 <ModbusMap+0x1e8>)
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 800094a:	4b68      	ldr	r3, [pc, #416]	@ (8000aec <ModbusMap+0x1ec>)
 800094c:	2202      	movs	r2, #2
 800094e:	801a      	strh	r2, [r3, #0]
 8000950:	e006      	b.n	8000960 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 8000952:	4b64      	ldr	r3, [pc, #400]	@ (8000ae4 <ModbusMap+0x1e4>)
 8000954:	78db      	ldrb	r3, [r3, #3]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 800095a:	4b64      	ldr	r3, [pc, #400]	@ (8000aec <ModbusMap+0x1ec>)
 800095c:	2206      	movs	r2, #6
 800095e:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 8000960:	4b63      	ldr	r3, [pc, #396]	@ (8000af0 <ModbusMap+0x1f0>)
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	001a      	movs	r2, r3
 8000966:	4b61      	ldr	r3, [pc, #388]	@ (8000aec <ModbusMap+0x1ec>)
 8000968:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 800096a:	4b62      	ldr	r3, [pc, #392]	@ (8000af4 <ModbusMap+0x1f4>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	001a      	movs	r2, r3
 8000970:	4b5e      	ldr	r3, [pc, #376]	@ (8000aec <ModbusMap+0x1ec>)
 8000972:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 8000974:	4b5e      	ldr	r3, [pc, #376]	@ (8000af0 <ModbusMap+0x1f0>)
 8000976:	789b      	ldrb	r3, [r3, #2]
 8000978:	001a      	movs	r2, r3
 800097a:	4b5c      	ldr	r3, [pc, #368]	@ (8000aec <ModbusMap+0x1ec>)
 800097c:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 800097e:	4b5c      	ldr	r3, [pc, #368]	@ (8000af0 <ModbusMap+0x1f0>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	001a      	movs	r2, r3
 8000984:	4b59      	ldr	r3, [pc, #356]	@ (8000aec <ModbusMap+0x1ec>)
 8000986:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8000988:	4b57      	ldr	r3, [pc, #348]	@ (8000ae8 <ModbusMap+0x1e8>)
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	001a      	movs	r2, r3
 800098e:	4b57      	ldr	r3, [pc, #348]	@ (8000aec <ModbusMap+0x1ec>)
 8000990:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 8000992:	4b56      	ldr	r3, [pc, #344]	@ (8000aec <ModbusMap+0x1ec>)
 8000994:	2200      	movs	r2, #0
 8000996:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8000998:	4b54      	ldr	r3, [pc, #336]	@ (8000aec <ModbusMap+0x1ec>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d103      	bne.n	80009a8 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 80009a0:	4b52      	ldr	r3, [pc, #328]	@ (8000aec <ModbusMap+0x1ec>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	81da      	strh	r2, [r3, #14]
 80009a6:	e002      	b.n	80009ae <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 80009a8:	4b50      	ldr	r3, [pc, #320]	@ (8000aec <ModbusMap+0x1ec>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 80009ae:	4b4e      	ldr	r3, [pc, #312]	@ (8000ae8 <ModbusMap+0x1e8>)
 80009b0:	785b      	ldrb	r3, [r3, #1]
 80009b2:	001a      	movs	r2, r3
 80009b4:	4b4d      	ldr	r3, [pc, #308]	@ (8000aec <ModbusMap+0x1ec>)
 80009b6:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 80009b8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae8 <ModbusMap+0x1e8>)
 80009ba:	789b      	ldrb	r3, [r3, #2]
 80009bc:	001a      	movs	r2, r3
 80009be:	4b4b      	ldr	r3, [pc, #300]	@ (8000aec <ModbusMap+0x1ec>)
 80009c0:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 80009c2:	4b4a      	ldr	r3, [pc, #296]	@ (8000aec <ModbusMap+0x1ec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 80009c8:	4b48      	ldr	r3, [pc, #288]	@ (8000aec <ModbusMap+0x1ec>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 80009ce:	4b45      	ldr	r3, [pc, #276]	@ (8000ae4 <ModbusMap+0x1e4>)
 80009d0:	78db      	ldrb	r3, [r3, #3]
 80009d2:	001a      	movs	r2, r3
 80009d4:	4b45      	ldr	r3, [pc, #276]	@ (8000aec <ModbusMap+0x1ec>)
 80009d6:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 80009d8:	4b44      	ldr	r3, [pc, #272]	@ (8000aec <ModbusMap+0x1ec>)
 80009da:	2200      	movs	r2, #0
 80009dc:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 80009de:	4b46      	ldr	r3, [pc, #280]	@ (8000af8 <ModbusMap+0x1f8>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4a45      	ldr	r2, [pc, #276]	@ (8000afc <ModbusMap+0x1fc>)
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <ModbusMap+0x200>)
 80009f0:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 80009f2:	4b44      	ldr	r3, [pc, #272]	@ (8000b04 <ModbusMap+0x204>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4a43      	ldr	r2, [pc, #268]	@ (8000b08 <ModbusMap+0x208>)
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b3f      	ldr	r3, [pc, #252]	@ (8000b00 <ModbusMap+0x200>)
 8000a04:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 8000a06:	4b41      	ldr	r3, [pc, #260]	@ (8000b0c <ModbusMap+0x20c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	1c1a      	adds	r2, r3, #0
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	18db      	adds	r3, r3, r3
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b3a      	ldr	r3, [pc, #232]	@ (8000b00 <ModbusMap+0x200>)
 8000a16:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 8000a18:	4b39      	ldr	r3, [pc, #228]	@ (8000b00 <ModbusMap+0x200>)
 8000a1a:	22dc      	movs	r2, #220	@ 0xdc
 8000a1c:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b10 <ModbusMap+0x210>)
 8000a20:	79db      	ldrb	r3, [r3, #7]
 8000a22:	001a      	movs	r2, r3
 8000a24:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <ModbusMap+0x214>)
 8000a26:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 8000a28:	4b39      	ldr	r3, [pc, #228]	@ (8000b10 <ModbusMap+0x210>)
 8000a2a:	799b      	ldrb	r3, [r3, #6]
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <ModbusMap+0x214>)
 8000a30:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 8000a32:	4b37      	ldr	r3, [pc, #220]	@ (8000b10 <ModbusMap+0x210>)
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	001a      	movs	r2, r3
 8000a38:	4b36      	ldr	r3, [pc, #216]	@ (8000b14 <ModbusMap+0x214>)
 8000a3a:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 8000a3c:	4b34      	ldr	r3, [pc, #208]	@ (8000b10 <ModbusMap+0x210>)
 8000a3e:	789a      	ldrb	r2, [r3, #2]
 8000a40:	4b33      	ldr	r3, [pc, #204]	@ (8000b10 <ModbusMap+0x210>)
 8000a42:	78db      	ldrb	r3, [r3, #3]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <ModbusMap+0x214>)
 8000a4c:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 8000a4e:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <ModbusMap+0x214>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 8000a54:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <ModbusMap+0x210>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <ModbusMap+0x210>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	001a      	movs	r2, r3
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <ModbusMap+0x214>)
 8000a64:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <ModbusMap+0x218>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <ModbusMap+0x214>)
 8000a6e:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8000a70:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <ModbusMap+0x218>)
 8000a72:	799b      	ldrb	r3, [r3, #6]
 8000a74:	001a      	movs	r2, r3
 8000a76:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <ModbusMap+0x214>)
 8000a78:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 8000a7a:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <ModbusMap+0x210>)
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <ModbusMap+0x210>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	001a      	movs	r2, r3
 8000a88:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <ModbusMap+0x214>)
 8000a8a:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 8000a8c:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <ModbusMap+0x21c>)
 8000a8e:	4a24      	ldr	r2, [pc, #144]	@ (8000b20 <ModbusMap+0x220>)
 8000a90:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <ModbusMap+0x21c>)
 8000a94:	4a23      	ldr	r2, [pc, #140]	@ (8000b24 <ModbusMap+0x224>)
 8000a96:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8000a98:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <ModbusMap+0x21c>)
 8000a9a:	22ff      	movs	r2, #255	@ 0xff
 8000a9c:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 8000a9e:	f7ff fdc7 	bl	8000630 <MacStringtoHex>


    DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <ModbusMap+0x228>)
 8000aa4:	227b      	movs	r2, #123	@ 0x7b
 8000aa6:	5c9b      	ldrb	r3, [r3, r2]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4a1e      	ldr	r2, [pc, #120]	@ (8000b28 <ModbusMap+0x228>)
 8000aae:	217c      	movs	r1, #124	@ 0x7c
 8000ab0:	5c52      	ldrb	r2, [r2, r1]
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <ModbusMap+0x22c>)
 8000ab8:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 8000aba:	f001 f931 	bl	8001d20 <ModbusSlavePool>
 8000abe:	0002      	movs	r2, r0
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <ModbusMap+0x1d0>
 8000acc:	f000 fe49 	bl	8001762 <ModbusMap+0xe62>
	    asm ("nop");
 8000ad0:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <ModbusMap+0x230>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d02c      	beq.n	8000b34 <ModbusMap+0x234>
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d100      	bne.n	8000ae0 <ModbusMap+0x1e0>
 8000ade:	e17d      	b.n	8000ddc <ModbusMap+0x4dc>
 8000ae0:	f000 fe02 	bl	80016e8 <ModbusMap+0xde8>
 8000ae4:	20000ab4 	.word	0x20000ab4
 8000ae8:	20000b78 	.word	0x20000b78
 8000aec:	20000054 	.word	0x20000054
 8000af0:	20000ae0 	.word	0x20000ae0
 8000af4:	20000b1c 	.word	0x20000b1c
 8000af8:	20000aec 	.word	0x20000aec
 8000afc:	20000aed 	.word	0x20000aed
 8000b00:	20000070 	.word	0x20000070
 8000b04:	20000aee 	.word	0x20000aee
 8000b08:	20000aef 	.word	0x20000aef
 8000b0c:	20000b0a 	.word	0x20000b0a
 8000b10:	20000ac4 	.word	0x20000ac4
 8000b14:	20000078 	.word	0x20000078
 8000b18:	20000abc 	.word	0x20000abc
 8000b1c:	2000008c 	.word	0x2000008c
 8000b20:	ffffb4a2 	.word	0xffffb4a2
 8000b24:	ffffeb4f 	.word	0xffffeb4f
 8000b28:	0803f000 	.word	0x0803f000
 8000b2c:	20000094 	.word	0x20000094
 8000b30:	20000320 	.word	0x20000320
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 8000b34:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 8000b36:	4bd6      	ldr	r3, [pc, #856]	@ (8000e90 <ModbusMap+0x590>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	801a      	strh	r2, [r3, #0]
					if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
 8000b3c:	4bd5      	ldr	r3, [pc, #852]	@ (8000e94 <ModbusMap+0x594>)
 8000b3e:	2252      	movs	r2, #82	@ 0x52
 8000b40:	5c9b      	ldrb	r3, [r3, r2]
 8000b42:	2b20      	cmp	r3, #32
 8000b44:	d102      	bne.n	8000b4c <ModbusMap+0x24c>
					PNU_0x3002 = 1;
 8000b46:	4bd2      	ldr	r3, [pc, #840]	@ (8000e90 <ModbusMap+0x590>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	801a      	strh	r2, [r3, #0]

					PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
 8000b4c:	4bd1      	ldr	r3, [pc, #836]	@ (8000e94 <ModbusMap+0x594>)
 8000b4e:	785b      	ldrb	r3, [r3, #1]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4acf      	ldr	r2, [pc, #828]	@ (8000e94 <ModbusMap+0x594>)
 8000b56:	7892      	ldrb	r2, [r2, #2]
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4bce      	ldr	r3, [pc, #824]	@ (8000e98 <ModbusMap+0x598>)
 8000b5e:	801a      	strh	r2, [r3, #0]

					PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
 8000b60:	4bcc      	ldr	r3, [pc, #816]	@ (8000e94 <ModbusMap+0x594>)
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4aca      	ldr	r2, [pc, #808]	@ (8000e94 <ModbusMap+0x594>)
 8000b6a:	7912      	ldrb	r2, [r2, #4]
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4bca      	ldr	r3, [pc, #808]	@ (8000e9c <ModbusMap+0x59c>)
 8000b72:	801a      	strh	r2, [r3, #0]

					PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
 8000b74:	4bc7      	ldr	r3, [pc, #796]	@ (8000e94 <ModbusMap+0x594>)
 8000b76:	2272      	movs	r2, #114	@ 0x72
 8000b78:	5c9b      	ldrb	r3, [r3, r2]
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	4bc8      	ldr	r3, [pc, #800]	@ (8000ea0 <ModbusMap+0x5a0>)
 8000b7e:	801a      	strh	r2, [r3, #0]

				  PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
 8000b80:	4bc4      	ldr	r3, [pc, #784]	@ (8000e94 <ModbusMap+0x594>)
 8000b82:	2249      	movs	r2, #73	@ 0x49
 8000b84:	5c9b      	ldrb	r3, [r3, r2]
 8000b86:	001a      	movs	r2, r3
 8000b88:	4bc6      	ldr	r3, [pc, #792]	@ (8000ea4 <ModbusMap+0x5a4>)
 8000b8a:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 8000b8c:	4ac6      	ldr	r2, [pc, #792]	@ (8000ea8 <ModbusMap+0x5a8>)
 8000b8e:	230e      	movs	r3, #14
 8000b90:	33ff      	adds	r3, #255	@ 0xff
 8000b92:	0019      	movs	r1, r3
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fe3f 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <ModbusMap+0x2a6>
 8000ba2:	f000 fda5 	bl	80016f0 <ModbusMap+0xdf0>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 8000ba6:	4ac1      	ldr	r2, [pc, #772]	@ (8000eac <ModbusMap+0x5ac>)
 8000ba8:	49c1      	ldr	r1, [pc, #772]	@ (8000eb0 <ModbusMap+0x5b0>)
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fe34 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <ModbusMap+0x2bc>
 8000bb8:	f000 fd9c 	bl	80016f4 <ModbusMap+0xdf4>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 8000bbc:	4abd      	ldr	r2, [pc, #756]	@ (8000eb4 <ModbusMap+0x5b4>)
 8000bbe:	2382      	movs	r3, #130	@ 0x82
 8000bc0:	0099      	lsls	r1, r3, #2
 8000bc2:	2380      	movs	r3, #128	@ 0x80
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fe28 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <ModbusMap+0x2d4>
 8000bd0:	f000 fd92 	bl	80016f8 <ModbusMap+0xdf8>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 8000bd4:	4ab8      	ldr	r2, [pc, #736]	@ (8000eb8 <ModbusMap+0x5b8>)
 8000bd6:	49b9      	ldr	r1, [pc, #740]	@ (8000ebc <ModbusMap+0x5bc>)
 8000bd8:	23c0      	movs	r3, #192	@ 0xc0
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fe1d 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <ModbusMap+0x2ea>
 8000be6:	f000 fd89 	bl	80016fc <ModbusMap+0xdfc>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 8000bea:	4ab5      	ldr	r2, [pc, #724]	@ (8000ec0 <ModbusMap+0x5c0>)
 8000bec:	23c4      	movs	r3, #196	@ 0xc4
 8000bee:	0099      	lsls	r1, r3, #2
 8000bf0:	23c4      	movs	r3, #196	@ 0xc4
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fe11 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <ModbusMap+0x302>
 8000bfe:	f000 fd7f 	bl	8001700 <ModbusMap+0xe00>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 8000c02:	4bb0      	ldr	r3, [pc, #704]	@ (8000ec4 <ModbusMap+0x5c4>)
 8000c04:	001a      	movs	r2, r3
 8000c06:	2110      	movs	r1, #16
 8000c08:	2010      	movs	r0, #16
 8000c0a:	f7ff fe07 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d001      	beq.n	8000c16 <ModbusMap+0x316>
 8000c12:	f000 fd77 	bl	8001704 <ModbusMap+0xe04>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 8000c16:	4aac      	ldr	r2, [pc, #688]	@ (8000ec8 <ModbusMap+0x5c8>)
 8000c18:	23c0      	movs	r3, #192	@ 0xc0
 8000c1a:	0199      	lsls	r1, r3, #6
 8000c1c:	23c0      	movs	r3, #192	@ 0xc0
 8000c1e:	019b      	lsls	r3, r3, #6
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fdfb 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <ModbusMap+0x32e>
 8000c2a:	f000 fd6d 	bl	8001708 <ModbusMap+0xe08>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 8000c2e:	4b98      	ldr	r3, [pc, #608]	@ (8000e90 <ModbusMap+0x590>)
 8000c30:	49a6      	ldr	r1, [pc, #664]	@ (8000ecc <ModbusMap+0x5cc>)
 8000c32:	48a6      	ldr	r0, [pc, #664]	@ (8000ecc <ModbusMap+0x5cc>)
 8000c34:	001a      	movs	r2, r3
 8000c36:	f7ff fdf1 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <ModbusMap+0x342>
 8000c3e:	f000 fd65 	bl	800170c <ModbusMap+0xe0c>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8000c42:	4b95      	ldr	r3, [pc, #596]	@ (8000e98 <ModbusMap+0x598>)
 8000c44:	49a2      	ldr	r1, [pc, #648]	@ (8000ed0 <ModbusMap+0x5d0>)
 8000c46:	48a2      	ldr	r0, [pc, #648]	@ (8000ed0 <ModbusMap+0x5d0>)
 8000c48:	001a      	movs	r2, r3
 8000c4a:	f7ff fde7 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <ModbusMap+0x356>
 8000c52:	f000 fd5d 	bl	8001710 <ModbusMap+0xe10>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 8000c56:	4b91      	ldr	r3, [pc, #580]	@ (8000e9c <ModbusMap+0x59c>)
 8000c58:	499e      	ldr	r1, [pc, #632]	@ (8000ed4 <ModbusMap+0x5d4>)
 8000c5a:	489e      	ldr	r0, [pc, #632]	@ (8000ed4 <ModbusMap+0x5d4>)
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	f7ff fddd 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <ModbusMap+0x36a>
 8000c66:	f000 fd55 	bl	8001714 <ModbusMap+0xe14>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 8000c6a:	4b9b      	ldr	r3, [pc, #620]	@ (8000ed8 <ModbusMap+0x5d8>)
 8000c6c:	499b      	ldr	r1, [pc, #620]	@ (8000edc <ModbusMap+0x5dc>)
 8000c6e:	489b      	ldr	r0, [pc, #620]	@ (8000edc <ModbusMap+0x5dc>)
 8000c70:	001a      	movs	r2, r3
 8000c72:	f7ff fdd3 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <ModbusMap+0x37e>
 8000c7a:	f000 fd4d 	bl	8001718 <ModbusMap+0xe18>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 8000c7e:	4b98      	ldr	r3, [pc, #608]	@ (8000ee0 <ModbusMap+0x5e0>)
 8000c80:	4998      	ldr	r1, [pc, #608]	@ (8000ee4 <ModbusMap+0x5e4>)
 8000c82:	4898      	ldr	r0, [pc, #608]	@ (8000ee4 <ModbusMap+0x5e4>)
 8000c84:	001a      	movs	r2, r3
 8000c86:	f7ff fdc9 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <ModbusMap+0x392>
 8000c8e:	f000 fd45 	bl	800171c <ModbusMap+0xe1c>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 8000c92:	4b95      	ldr	r3, [pc, #596]	@ (8000ee8 <ModbusMap+0x5e8>)
 8000c94:	4995      	ldr	r1, [pc, #596]	@ (8000eec <ModbusMap+0x5ec>)
 8000c96:	4895      	ldr	r0, [pc, #596]	@ (8000eec <ModbusMap+0x5ec>)
 8000c98:	001a      	movs	r2, r3
 8000c9a:	f7ff fdbf 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <ModbusMap+0x3a6>
 8000ca2:	f000 fd3d 	bl	8001720 <ModbusMap+0xe20>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 8000ca6:	4b92      	ldr	r3, [pc, #584]	@ (8000ef0 <ModbusMap+0x5f0>)
 8000ca8:	4992      	ldr	r1, [pc, #584]	@ (8000ef4 <ModbusMap+0x5f4>)
 8000caa:	4892      	ldr	r0, [pc, #584]	@ (8000ef4 <ModbusMap+0x5f4>)
 8000cac:	001a      	movs	r2, r3
 8000cae:	f7ff fdb5 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <ModbusMap+0x3ba>
 8000cb6:	f000 fd35 	bl	8001724 <ModbusMap+0xe24>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 8000cba:	4b8f      	ldr	r3, [pc, #572]	@ (8000ef8 <ModbusMap+0x5f8>)
 8000cbc:	498f      	ldr	r1, [pc, #572]	@ (8000efc <ModbusMap+0x5fc>)
 8000cbe:	488f      	ldr	r0, [pc, #572]	@ (8000efc <ModbusMap+0x5fc>)
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	f7ff fdab 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <ModbusMap+0x3ce>
 8000cca:	f000 fd2d 	bl	8001728 <ModbusMap+0xe28>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 8000cce:	4b8c      	ldr	r3, [pc, #560]	@ (8000f00 <ModbusMap+0x600>)
 8000cd0:	498c      	ldr	r1, [pc, #560]	@ (8000f04 <ModbusMap+0x604>)
 8000cd2:	488c      	ldr	r0, [pc, #560]	@ (8000f04 <ModbusMap+0x604>)
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	f7ff fda1 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <ModbusMap+0x3e2>
 8000cde:	f000 fd25 	bl	800172c <ModbusMap+0xe2c>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 8000ce2:	4b89      	ldr	r3, [pc, #548]	@ (8000f08 <ModbusMap+0x608>)
 8000ce4:	4989      	ldr	r1, [pc, #548]	@ (8000f0c <ModbusMap+0x60c>)
 8000ce6:	4889      	ldr	r0, [pc, #548]	@ (8000f0c <ModbusMap+0x60c>)
 8000ce8:	001a      	movs	r2, r3
 8000cea:	f7ff fd97 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <ModbusMap+0x3f6>
 8000cf2:	f000 fd1d 	bl	8001730 <ModbusMap+0xe30>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 8000cf6:	4b86      	ldr	r3, [pc, #536]	@ (8000f10 <ModbusMap+0x610>)
 8000cf8:	4986      	ldr	r1, [pc, #536]	@ (8000f14 <ModbusMap+0x614>)
 8000cfa:	4886      	ldr	r0, [pc, #536]	@ (8000f14 <ModbusMap+0x614>)
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	f7ff fd8d 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <ModbusMap+0x40a>
 8000d06:	f000 fd15 	bl	8001734 <ModbusMap+0xe34>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 8000d0a:	4b83      	ldr	r3, [pc, #524]	@ (8000f18 <ModbusMap+0x618>)
 8000d0c:	4983      	ldr	r1, [pc, #524]	@ (8000f1c <ModbusMap+0x61c>)
 8000d0e:	4883      	ldr	r0, [pc, #524]	@ (8000f1c <ModbusMap+0x61c>)
 8000d10:	001a      	movs	r2, r3
 8000d12:	f7ff fd83 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <ModbusMap+0x41e>
 8000d1a:	f000 fd0d 	bl	8001738 <ModbusMap+0xe38>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 8000d1e:	4b80      	ldr	r3, [pc, #512]	@ (8000f20 <ModbusMap+0x620>)
 8000d20:	4980      	ldr	r1, [pc, #512]	@ (8000f24 <ModbusMap+0x624>)
 8000d22:	4880      	ldr	r0, [pc, #512]	@ (8000f24 <ModbusMap+0x624>)
 8000d24:	001a      	movs	r2, r3
 8000d26:	f7ff fd79 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <ModbusMap+0x432>
 8000d2e:	f000 fd05 	bl	800173c <ModbusMap+0xe3c>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8000d32:	4b7d      	ldr	r3, [pc, #500]	@ (8000f28 <ModbusMap+0x628>)
 8000d34:	497d      	ldr	r1, [pc, #500]	@ (8000f2c <ModbusMap+0x62c>)
 8000d36:	487d      	ldr	r0, [pc, #500]	@ (8000f2c <ModbusMap+0x62c>)
 8000d38:	001a      	movs	r2, r3
 8000d3a:	f7ff fd6f 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <ModbusMap+0x446>
 8000d42:	f000 fcfd 	bl	8001740 <ModbusMap+0xe40>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 8000d46:	4b56      	ldr	r3, [pc, #344]	@ (8000ea0 <ModbusMap+0x5a0>)
 8000d48:	4979      	ldr	r1, [pc, #484]	@ (8000f30 <ModbusMap+0x630>)
 8000d4a:	4879      	ldr	r0, [pc, #484]	@ (8000f30 <ModbusMap+0x630>)
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	f7ff fd65 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <ModbusMap+0x45a>
 8000d56:	f000 fcf5 	bl	8001744 <ModbusMap+0xe44>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 8000d5a:	4b52      	ldr	r3, [pc, #328]	@ (8000ea4 <ModbusMap+0x5a4>)
 8000d5c:	4975      	ldr	r1, [pc, #468]	@ (8000f34 <ModbusMap+0x634>)
 8000d5e:	4875      	ldr	r0, [pc, #468]	@ (8000f34 <ModbusMap+0x634>)
 8000d60:	001a      	movs	r2, r3
 8000d62:	f7ff fd5b 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <ModbusMap+0x46e>
 8000d6a:	f000 fced 	bl	8001748 <ModbusMap+0xe48>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 8000d6e:	4b72      	ldr	r3, [pc, #456]	@ (8000f38 <ModbusMap+0x638>)
 8000d70:	4972      	ldr	r1, [pc, #456]	@ (8000f3c <ModbusMap+0x63c>)
 8000d72:	4872      	ldr	r0, [pc, #456]	@ (8000f3c <ModbusMap+0x63c>)
 8000d74:	001a      	movs	r2, r3
 8000d76:	f7ff fd51 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <ModbusMap+0x482>
 8000d7e:	f000 fce5 	bl	800174c <ModbusMap+0xe4c>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 8000d82:	4b6f      	ldr	r3, [pc, #444]	@ (8000f40 <ModbusMap+0x640>)
 8000d84:	496f      	ldr	r1, [pc, #444]	@ (8000f44 <ModbusMap+0x644>)
 8000d86:	486f      	ldr	r0, [pc, #444]	@ (8000f44 <ModbusMap+0x644>)
 8000d88:	001a      	movs	r2, r3
 8000d8a:	f7ff fd47 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <ModbusMap+0x496>
 8000d92:	f000 fcdd 	bl	8001750 <ModbusMap+0xe50>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 8000d96:	4b6c      	ldr	r3, [pc, #432]	@ (8000f48 <ModbusMap+0x648>)
 8000d98:	496c      	ldr	r1, [pc, #432]	@ (8000f4c <ModbusMap+0x64c>)
 8000d9a:	486c      	ldr	r0, [pc, #432]	@ (8000f4c <ModbusMap+0x64c>)
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	f7ff fd3d 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <ModbusMap+0x4aa>
 8000da6:	f000 fcd5 	bl	8001754 <ModbusMap+0xe54>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 8000daa:	4b69      	ldr	r3, [pc, #420]	@ (8000f50 <ModbusMap+0x650>)
 8000dac:	4969      	ldr	r1, [pc, #420]	@ (8000f54 <ModbusMap+0x654>)
 8000dae:	4869      	ldr	r0, [pc, #420]	@ (8000f54 <ModbusMap+0x654>)
 8000db0:	001a      	movs	r2, r3
 8000db2:	f7ff fd33 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <ModbusMap+0x4be>
 8000dba:	f000 fccd 	bl	8001758 <ModbusMap+0xe58>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8000dbe:	4b66      	ldr	r3, [pc, #408]	@ (8000f58 <ModbusMap+0x658>)
 8000dc0:	4966      	ldr	r1, [pc, #408]	@ (8000f5c <ModbusMap+0x65c>)
 8000dc2:	4866      	ldr	r0, [pc, #408]	@ (8000f5c <ModbusMap+0x65c>)
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	f7ff fd29 	bl	800081c <ReadHoldingRegistersFunctionRev>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <ModbusMap+0x4d2>
 8000dce:	f000 fcc5 	bl	800175c <ModbusMap+0xe5c>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f000 fef0 	bl	8001bb8 <ModbusSlaveExceptionTransaction>
				}
				break;
 8000dd8:	f000 fcc3 	bl	8001762 <ModbusMap+0xe62>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 8000ddc:	4b60      	ldr	r3, [pc, #384]	@ (8000f60 <ModbusMap+0x660>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	23c0      	movs	r3, #192	@ 0xc0
 8000de2:	019b      	lsls	r3, r3, #6
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d310      	bcc.n	8000e0a <ModbusMap+0x50a>
 8000de8:	4b5d      	ldr	r3, [pc, #372]	@ (8000f60 <ModbusMap+0x660>)
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	23c0      	movs	r3, #192	@ 0xc0
 8000dee:	019b      	lsls	r3, r3, #6
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d80a      	bhi.n	8000e0a <ModbusMap+0x50a>
					PNU_0x3000 = lowByte(_u16WriteVal);
 8000df4:	4b5b      	ldr	r3, [pc, #364]	@ (8000f64 <ModbusMap+0x664>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <ModbusMap+0x5c8>)
 8000dfe:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8000e00:	4b59      	ldr	r3, [pc, #356]	@ (8000f68 <ModbusMap+0x668>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 fdaf 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 8000e0a:	4b55      	ldr	r3, [pc, #340]	@ (8000f60 <ModbusMap+0x660>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	4a57      	ldr	r2, [pc, #348]	@ (8000f6c <ModbusMap+0x66c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d800      	bhi.n	8000e16 <ModbusMap+0x516>
 8000e14:	e0b6      	b.n	8000f84 <ModbusMap+0x684>
 8000e16:	4b52      	ldr	r3, [pc, #328]	@ (8000f60 <ModbusMap+0x660>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ecc <ModbusMap+0x5cc>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d900      	bls.n	8000e22 <ModbusMap+0x522>
 8000e20:	e0b0      	b.n	8000f84 <ModbusMap+0x684>
					PNU_0x3002 = lowByte(_u16WriteVal);
 8000e22:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <ModbusMap+0x664>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	001a      	movs	r2, r3
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <ModbusMap+0x590>)
 8000e2c:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <ModbusMap+0x590>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d113      	bne.n	8000e5e <ModbusMap+0x55e>
						if((uint16_t) (eePlantilla[eeescala] == 32)){
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <ModbusMap+0x594>)
 8000e38:	2252      	movs	r2, #82	@ 0x52
 8000e3a:	5c9b      	ldrb	r3, [r3, r2]
 8000e3c:	2b20      	cmp	r3, #32
 8000e3e:	d101      	bne.n	8000e44 <ModbusMap+0x544>
							asm ("nop");
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	e00c      	b.n	8000e5e <ModbusMap+0x55e>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 8000e44:	4b4a      	ldr	r3, [pc, #296]	@ (8000f70 <ModbusMap+0x670>)
 8000e46:	2220      	movs	r2, #32
 8000e48:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 8000e4a:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <ModbusMap+0x670>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	001a      	movs	r2, r3
 8000e50:	4b48      	ldr	r3, [pc, #288]	@ (8000f74 <ModbusMap+0x674>)
 8000e52:	0019      	movs	r1, r3
 8000e54:	0010      	movs	r0, r2
 8000e56:	f003 fd97 	bl	8004988 <wreeprom>
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	e7fd      	b.n	8000e5a <ModbusMap+0x55a>
						}
					}
					if (PNU_0x3002 == 0){
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <ModbusMap+0x590>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <ModbusMap+0x568>
 8000e66:	e088      	b.n	8000f7a <ModbusMap+0x67a>
						if((uint16_t) (eePlantilla[eeescala] == 32)){
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <ModbusMap+0x594>)
 8000e6a:	2252      	movs	r2, #82	@ 0x52
 8000e6c:	5c9b      	ldrb	r3, [r3, r2]
 8000e6e:	2b20      	cmp	r3, #32
 8000e70:	d000      	beq.n	8000e74 <ModbusMap+0x574>
 8000e72:	e081      	b.n	8000f78 <ModbusMap+0x678>
							waux = 0;//mov			waux,#0;	/ Carga
 8000e74:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <ModbusMap+0x670>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f70 <ModbusMap+0x670>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	001a      	movs	r2, r3
 8000e80:	4b3c      	ldr	r3, [pc, #240]	@ (8000f74 <ModbusMap+0x674>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f003 fd7f 	bl	8004988 <wreeprom>
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	e7fd      	b.n	8000e8a <ModbusMap+0x58a>
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	20000a70 	.word	0x20000a70
 8000e94:	0803f000 	.word	0x0803f000
 8000e98:	20000098 	.word	0x20000098
 8000e9c:	2000009a 	.word	0x2000009a
 8000ea0:	200000ae 	.word	0x200000ae
 8000ea4:	200000b0 	.word	0x200000b0
 8000ea8:	20000054 	.word	0x20000054
 8000eac:	20000070 	.word	0x20000070
 8000eb0:	00002003 	.word	0x00002003
 8000eb4:	20000078 	.word	0x20000078
 8000eb8:	2000008c 	.word	0x2000008c
 8000ebc:	00000302 	.word	0x00000302
 8000ec0:	20000094 	.word	0x20000094
 8000ec4:	20000a6e 	.word	0x20000a6e
 8000ec8:	20000096 	.word	0x20000096
 8000ecc:	00003002 	.word	0x00003002
 8000ed0:	00003004 	.word	0x00003004
 8000ed4:	00003006 	.word	0x00003006
 8000ed8:	2000009c 	.word	0x2000009c
 8000edc:	00003008 	.word	0x00003008
 8000ee0:	20000a72 	.word	0x20000a72
 8000ee4:	0000300a 	.word	0x0000300a
 8000ee8:	2000009e 	.word	0x2000009e
 8000eec:	0000300c 	.word	0x0000300c
 8000ef0:	20000a74 	.word	0x20000a74
 8000ef4:	0000300e 	.word	0x0000300e
 8000ef8:	200000a0 	.word	0x200000a0
 8000efc:	00003010 	.word	0x00003010
 8000f00:	200000a2 	.word	0x200000a2
 8000f04:	00003012 	.word	0x00003012
 8000f08:	200000a4 	.word	0x200000a4
 8000f0c:	00003014 	.word	0x00003014
 8000f10:	200000a6 	.word	0x200000a6
 8000f14:	00003016 	.word	0x00003016
 8000f18:	200000a8 	.word	0x200000a8
 8000f1c:	00003018 	.word	0x00003018
 8000f20:	200000aa 	.word	0x200000aa
 8000f24:	0000301a 	.word	0x0000301a
 8000f28:	200000ac 	.word	0x200000ac
 8000f2c:	0000301c 	.word	0x0000301c
 8000f30:	0000301e 	.word	0x0000301e
 8000f34:	00003104 	.word	0x00003104
 8000f38:	200000b2 	.word	0x200000b2
 8000f3c:	00003106 	.word	0x00003106
 8000f40:	200000b4 	.word	0x200000b4
 8000f44:	00003108 	.word	0x00003108
 8000f48:	200000b6 	.word	0x200000b6
 8000f4c:	0000310a 	.word	0x0000310a
 8000f50:	200000b8 	.word	0x200000b8
 8000f54:	0000310c 	.word	0x0000310c
 8000f58:	200000ba 	.word	0x200000ba
 8000f5c:	0000310e 	.word	0x0000310e
 8000f60:	200002d6 	.word	0x200002d6
 8000f64:	200002d8 	.word	0x200002d8
 8000f68:	20000320 	.word	0x20000320
 8000f6c:	00003001 	.word	0x00003001
 8000f70:	20000a92 	.word	0x20000a92
 8000f74:	0803f052 	.word	0x0803f052
						}
						else{
							asm ("nop");
 8000f78:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8000f7a:	4bc2      	ldr	r3, [pc, #776]	@ (8001284 <ModbusMap+0x984>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 fcf2 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 8000f84:	4bc0      	ldr	r3, [pc, #768]	@ (8001288 <ModbusMap+0x988>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	4ac0      	ldr	r2, [pc, #768]	@ (800128c <ModbusMap+0x98c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d926      	bls.n	8000fdc <ModbusMap+0x6dc>
 8000f8e:	4bbe      	ldr	r3, [pc, #760]	@ (8001288 <ModbusMap+0x988>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	4abf      	ldr	r2, [pc, #764]	@ (8001290 <ModbusMap+0x990>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d821      	bhi.n	8000fdc <ModbusMap+0x6dc>
					PNU_0x3004 = _u16WriteVal;
 8000f98:	4bbe      	ldr	r3, [pc, #760]	@ (8001294 <ModbusMap+0x994>)
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	4bbe      	ldr	r3, [pc, #760]	@ (8001298 <ModbusMap+0x998>)
 8000f9e:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8000fa0:	4bbd      	ldr	r3, [pc, #756]	@ (8001298 <ModbusMap+0x998>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4bbc      	ldr	r3, [pc, #752]	@ (800129c <ModbusMap+0x99c>)
 8000fac:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 8000fae:	4bba      	ldr	r3, [pc, #744]	@ (8001298 <ModbusMap+0x998>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4bba      	ldr	r3, [pc, #744]	@ (80012a0 <ModbusMap+0x9a0>)
 8000fb6:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 8000fb8:	4bb8      	ldr	r3, [pc, #736]	@ (800129c <ModbusMap+0x99c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	4bb9      	ldr	r3, [pc, #740]	@ (80012a4 <ModbusMap+0x9a4>)
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	0010      	movs	r0, r2
 8000fc4:	f003 fce0 	bl	8004988 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 8000fc8:	4bb5      	ldr	r3, [pc, #724]	@ (80012a0 <ModbusMap+0x9a0>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4bb6      	ldr	r3, [pc, #728]	@ (80012a8 <ModbusMap+0x9a8>)
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0010      	movs	r0, r2
 8000fd4:	f003 fcd8 	bl	8004988 <wreeprom>

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	e7fd      	b.n	8000fd8 <ModbusMap+0x6d8>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 8000fdc:	4baa      	ldr	r3, [pc, #680]	@ (8001288 <ModbusMap+0x988>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	4ab2      	ldr	r2, [pc, #712]	@ (80012ac <ModbusMap+0x9ac>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d926      	bls.n	8001034 <ModbusMap+0x734>
 8000fe6:	4ba8      	ldr	r3, [pc, #672]	@ (8001288 <ModbusMap+0x988>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	4ab1      	ldr	r2, [pc, #708]	@ (80012b0 <ModbusMap+0x9b0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d821      	bhi.n	8001034 <ModbusMap+0x734>
					PNU_0x3006 = _u16WriteVal;
 8000ff0:	4ba8      	ldr	r3, [pc, #672]	@ (8001294 <ModbusMap+0x994>)
 8000ff2:	881a      	ldrh	r2, [r3, #0]
 8000ff4:	4baf      	ldr	r3, [pc, #700]	@ (80012b4 <ModbusMap+0x9b4>)
 8000ff6:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 8000ff8:	4bae      	ldr	r3, [pc, #696]	@ (80012b4 <ModbusMap+0x9b4>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4ba6      	ldr	r3, [pc, #664]	@ (800129c <ModbusMap+0x99c>)
 8001004:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 8001006:	4bab      	ldr	r3, [pc, #684]	@ (80012b4 <ModbusMap+0x9b4>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4ba4      	ldr	r3, [pc, #656]	@ (80012a0 <ModbusMap+0x9a0>)
 800100e:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8001010:	4ba2      	ldr	r3, [pc, #648]	@ (800129c <ModbusMap+0x99c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	001a      	movs	r2, r3
 8001016:	4ba8      	ldr	r3, [pc, #672]	@ (80012b8 <ModbusMap+0x9b8>)
 8001018:	0019      	movs	r1, r3
 800101a:	0010      	movs	r0, r2
 800101c:	f003 fcb4 	bl	8004988 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 8001020:	4b9f      	ldr	r3, [pc, #636]	@ (80012a0 <ModbusMap+0x9a0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4ba5      	ldr	r3, [pc, #660]	@ (80012bc <ModbusMap+0x9bc>)
 8001028:	0019      	movs	r1, r3
 800102a:	0010      	movs	r0, r2
 800102c:	f003 fcac 	bl	8004988 <wreeprom>
			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	e7fd      	b.n	8001030 <ModbusMap+0x730>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 8001034:	4b94      	ldr	r3, [pc, #592]	@ (8001288 <ModbusMap+0x988>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	4aa1      	ldr	r2, [pc, #644]	@ (80012c0 <ModbusMap+0x9c0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d90f      	bls.n	800105e <ModbusMap+0x75e>
 800103e:	4b92      	ldr	r3, [pc, #584]	@ (8001288 <ModbusMap+0x988>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	4aa0      	ldr	r2, [pc, #640]	@ (80012c4 <ModbusMap+0x9c4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d80a      	bhi.n	800105e <ModbusMap+0x75e>
					PNU_0x3008 = lowByte(_u16WriteVal);
 8001048:	4b92      	ldr	r3, [pc, #584]	@ (8001294 <ModbusMap+0x994>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	001a      	movs	r2, r3
 8001050:	4b9d      	ldr	r3, [pc, #628]	@ (80012c8 <ModbusMap+0x9c8>)
 8001052:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001054:	4b8b      	ldr	r3, [pc, #556]	@ (8001284 <ModbusMap+0x984>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fc85 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 800105e:	4b8a      	ldr	r3, [pc, #552]	@ (8001288 <ModbusMap+0x988>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	4a9a      	ldr	r2, [pc, #616]	@ (80012cc <ModbusMap+0x9cc>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d90f      	bls.n	8001088 <ModbusMap+0x788>
 8001068:	4b87      	ldr	r3, [pc, #540]	@ (8001288 <ModbusMap+0x988>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	4a98      	ldr	r2, [pc, #608]	@ (80012d0 <ModbusMap+0x9d0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d80a      	bhi.n	8001088 <ModbusMap+0x788>
					PNU_0x300A = lowByte(_u16WriteVal);
 8001072:	4b88      	ldr	r3, [pc, #544]	@ (8001294 <ModbusMap+0x994>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	001a      	movs	r2, r3
 800107a:	4b96      	ldr	r3, [pc, #600]	@ (80012d4 <ModbusMap+0x9d4>)
 800107c:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800107e:	4b81      	ldr	r3, [pc, #516]	@ (8001284 <ModbusMap+0x984>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fc70 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 8001088:	4b7f      	ldr	r3, [pc, #508]	@ (8001288 <ModbusMap+0x988>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	4a92      	ldr	r2, [pc, #584]	@ (80012d8 <ModbusMap+0x9d8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d90f      	bls.n	80010b2 <ModbusMap+0x7b2>
 8001092:	4b7d      	ldr	r3, [pc, #500]	@ (8001288 <ModbusMap+0x988>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4a91      	ldr	r2, [pc, #580]	@ (80012dc <ModbusMap+0x9dc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d80a      	bhi.n	80010b2 <ModbusMap+0x7b2>
					PNU_0x300C = lowByte(_u16WriteVal);
 800109c:	4b7d      	ldr	r3, [pc, #500]	@ (8001294 <ModbusMap+0x994>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	001a      	movs	r2, r3
 80010a4:	4b8e      	ldr	r3, [pc, #568]	@ (80012e0 <ModbusMap+0x9e0>)
 80010a6:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80010a8:	4b76      	ldr	r3, [pc, #472]	@ (8001284 <ModbusMap+0x984>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 fc5b 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 80010b2:	4b75      	ldr	r3, [pc, #468]	@ (8001288 <ModbusMap+0x988>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	4a8b      	ldr	r2, [pc, #556]	@ (80012e4 <ModbusMap+0x9e4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d90f      	bls.n	80010dc <ModbusMap+0x7dc>
 80010bc:	4b72      	ldr	r3, [pc, #456]	@ (8001288 <ModbusMap+0x988>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	4a89      	ldr	r2, [pc, #548]	@ (80012e8 <ModbusMap+0x9e8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d80a      	bhi.n	80010dc <ModbusMap+0x7dc>
					PNU_0x300E = lowByte(_u16WriteVal);
 80010c6:	4b73      	ldr	r3, [pc, #460]	@ (8001294 <ModbusMap+0x994>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	001a      	movs	r2, r3
 80010ce:	4b87      	ldr	r3, [pc, #540]	@ (80012ec <ModbusMap+0x9ec>)
 80010d0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80010d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001284 <ModbusMap+0x984>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fc46 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 80010dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001288 <ModbusMap+0x988>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	4a83      	ldr	r2, [pc, #524]	@ (80012f0 <ModbusMap+0x9f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d90f      	bls.n	8001106 <ModbusMap+0x806>
 80010e6:	4b68      	ldr	r3, [pc, #416]	@ (8001288 <ModbusMap+0x988>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4a82      	ldr	r2, [pc, #520]	@ (80012f4 <ModbusMap+0x9f4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d80a      	bhi.n	8001106 <ModbusMap+0x806>
					PNU_0x3010 = lowByte(_u16WriteVal);
 80010f0:	4b68      	ldr	r3, [pc, #416]	@ (8001294 <ModbusMap+0x994>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	001a      	movs	r2, r3
 80010f8:	4b7f      	ldr	r3, [pc, #508]	@ (80012f8 <ModbusMap+0x9f8>)
 80010fa:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80010fc:	4b61      	ldr	r3, [pc, #388]	@ (8001284 <ModbusMap+0x984>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	0018      	movs	r0, r3
 8001102:	f000 fc31 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 8001106:	4b60      	ldr	r3, [pc, #384]	@ (8001288 <ModbusMap+0x988>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	4a7c      	ldr	r2, [pc, #496]	@ (80012fc <ModbusMap+0x9fc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d90f      	bls.n	8001130 <ModbusMap+0x830>
 8001110:	4b5d      	ldr	r3, [pc, #372]	@ (8001288 <ModbusMap+0x988>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4a7a      	ldr	r2, [pc, #488]	@ (8001300 <ModbusMap+0xa00>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d80a      	bhi.n	8001130 <ModbusMap+0x830>
					PNU_0x3012 = lowByte(_u16WriteVal);
 800111a:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <ModbusMap+0x994>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	001a      	movs	r2, r3
 8001122:	4b78      	ldr	r3, [pc, #480]	@ (8001304 <ModbusMap+0xa04>)
 8001124:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001126:	4b57      	ldr	r3, [pc, #348]	@ (8001284 <ModbusMap+0x984>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fc1c 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 8001130:	4b55      	ldr	r3, [pc, #340]	@ (8001288 <ModbusMap+0x988>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4a74      	ldr	r2, [pc, #464]	@ (8001308 <ModbusMap+0xa08>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d90f      	bls.n	800115a <ModbusMap+0x85a>
 800113a:	4b53      	ldr	r3, [pc, #332]	@ (8001288 <ModbusMap+0x988>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	4a73      	ldr	r2, [pc, #460]	@ (800130c <ModbusMap+0xa0c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d80a      	bhi.n	800115a <ModbusMap+0x85a>
					PNU_0x3014 = lowByte(_u16WriteVal);
 8001144:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <ModbusMap+0x994>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	001a      	movs	r2, r3
 800114c:	4b70      	ldr	r3, [pc, #448]	@ (8001310 <ModbusMap+0xa10>)
 800114e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001150:	4b4c      	ldr	r3, [pc, #304]	@ (8001284 <ModbusMap+0x984>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	0018      	movs	r0, r3
 8001156:	f000 fc07 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 800115a:	4b4b      	ldr	r3, [pc, #300]	@ (8001288 <ModbusMap+0x988>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	4a6d      	ldr	r2, [pc, #436]	@ (8001314 <ModbusMap+0xa14>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d90f      	bls.n	8001184 <ModbusMap+0x884>
 8001164:	4b48      	ldr	r3, [pc, #288]	@ (8001288 <ModbusMap+0x988>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	4a6b      	ldr	r2, [pc, #428]	@ (8001318 <ModbusMap+0xa18>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d80a      	bhi.n	8001184 <ModbusMap+0x884>
					PNU_0x3016 = lowByte(_u16WriteVal);
 800116e:	4b49      	ldr	r3, [pc, #292]	@ (8001294 <ModbusMap+0x994>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	001a      	movs	r2, r3
 8001176:	4b69      	ldr	r3, [pc, #420]	@ (800131c <ModbusMap+0xa1c>)
 8001178:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800117a:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <ModbusMap+0x984>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	0018      	movs	r0, r3
 8001180:	f000 fbf2 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 8001184:	4b40      	ldr	r3, [pc, #256]	@ (8001288 <ModbusMap+0x988>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	4a65      	ldr	r2, [pc, #404]	@ (8001320 <ModbusMap+0xa20>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d90f      	bls.n	80011ae <ModbusMap+0x8ae>
 800118e:	4b3e      	ldr	r3, [pc, #248]	@ (8001288 <ModbusMap+0x988>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	4a64      	ldr	r2, [pc, #400]	@ (8001324 <ModbusMap+0xa24>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d80a      	bhi.n	80011ae <ModbusMap+0x8ae>
					PNU_0x3018 = lowByte(_u16WriteVal);
 8001198:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <ModbusMap+0x994>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	001a      	movs	r2, r3
 80011a0:	4b61      	ldr	r3, [pc, #388]	@ (8001328 <ModbusMap+0xa28>)
 80011a2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80011a4:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <ModbusMap+0x984>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 fbdd 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 80011ae:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <ModbusMap+0x988>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	4a5e      	ldr	r2, [pc, #376]	@ (800132c <ModbusMap+0xa2c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d90f      	bls.n	80011d8 <ModbusMap+0x8d8>
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <ModbusMap+0x988>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4a5c      	ldr	r2, [pc, #368]	@ (8001330 <ModbusMap+0xa30>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d80a      	bhi.n	80011d8 <ModbusMap+0x8d8>
					PNU_0x301A = lowByte(_u16WriteVal);
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <ModbusMap+0x994>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	001a      	movs	r2, r3
 80011ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001334 <ModbusMap+0xa34>)
 80011cc:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80011ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <ModbusMap+0x984>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 fbc8 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <ModbusMap+0x988>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	4a56      	ldr	r2, [pc, #344]	@ (8001338 <ModbusMap+0xa38>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d90f      	bls.n	8001202 <ModbusMap+0x902>
 80011e2:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <ModbusMap+0x988>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	4a55      	ldr	r2, [pc, #340]	@ (800133c <ModbusMap+0xa3c>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d80a      	bhi.n	8001202 <ModbusMap+0x902>
					PNU_0x301C = lowByte(_u16WriteVal);
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <ModbusMap+0x994>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	001a      	movs	r2, r3
 80011f4:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <ModbusMap+0xa40>)
 80011f6:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80011f8:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <ModbusMap+0x984>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 fbb3 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <ModbusMap+0x988>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	4a4f      	ldr	r2, [pc, #316]	@ (8001344 <ModbusMap+0xa44>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d919      	bls.n	8001240 <ModbusMap+0x940>
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <ModbusMap+0x988>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4a4d      	ldr	r2, [pc, #308]	@ (8001348 <ModbusMap+0xa48>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d814      	bhi.n	8001240 <ModbusMap+0x940>
					PNU_0x301E = lowByte(_u16WriteVal);
 8001216:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <ModbusMap+0x994>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	001a      	movs	r2, r3
 800121e:	4b4b      	ldr	r3, [pc, #300]	@ (800134c <ModbusMap+0xa4c>)
 8001220:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 8001222:	4b4a      	ldr	r3, [pc, #296]	@ (800134c <ModbusMap+0xa4c>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <ModbusMap+0x99c>)
 800122a:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <ModbusMap+0x99c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	001a      	movs	r2, r3
 8001232:	4b47      	ldr	r3, [pc, #284]	@ (8001350 <ModbusMap+0xa50>)
 8001234:	0019      	movs	r1, r3
 8001236:	0010      	movs	r0, r2
 8001238:	f003 fba6 	bl	8004988 <wreeprom>

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 800123c:	46c0      	nop			@ (mov r8, r8)
 800123e:	e7fd      	b.n	800123c <ModbusMap+0x93c>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <ModbusMap+0x988>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <ModbusMap+0xa54>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d800      	bhi.n	800124c <ModbusMap+0x94c>
 800124a:	e08b      	b.n	8001364 <ModbusMap+0xa64>
 800124c:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <ModbusMap+0x988>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	4a41      	ldr	r2, [pc, #260]	@ (8001358 <ModbusMap+0xa58>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d900      	bls.n	8001258 <ModbusMap+0x958>
 8001256:	e085      	b.n	8001364 <ModbusMap+0xa64>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <ModbusMap+0x994>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	001a      	movs	r2, r3
 8001260:	4b3e      	ldr	r3, [pc, #248]	@ (800135c <ModbusMap+0xa5c>)
 8001262:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8001264:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <ModbusMap+0xa5c>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <ModbusMap+0x99c>)
 800126c:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <ModbusMap+0x99c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	001a      	movs	r2, r3
 8001274:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <ModbusMap+0xa60>)
 8001276:	0019      	movs	r1, r3
 8001278:	0010      	movs	r0, r2
 800127a:	f003 fb85 	bl	8004988 <wreeprom>

			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	e7fd      	b.n	800127e <ModbusMap+0x97e>
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	20000320 	.word	0x20000320
 8001288:	200002d6 	.word	0x200002d6
 800128c:	00003003 	.word	0x00003003
 8001290:	00003004 	.word	0x00003004
 8001294:	200002d8 	.word	0x200002d8
 8001298:	20000098 	.word	0x20000098
 800129c:	20000a92 	.word	0x20000a92
 80012a0:	20000a93 	.word	0x20000a93
 80012a4:	0803f001 	.word	0x0803f001
 80012a8:	0803f002 	.word	0x0803f002
 80012ac:	00003005 	.word	0x00003005
 80012b0:	00003006 	.word	0x00003006
 80012b4:	2000009a 	.word	0x2000009a
 80012b8:	0803f003 	.word	0x0803f003
 80012bc:	0803f004 	.word	0x0803f004
 80012c0:	00003007 	.word	0x00003007
 80012c4:	00003008 	.word	0x00003008
 80012c8:	2000009c 	.word	0x2000009c
 80012cc:	00003009 	.word	0x00003009
 80012d0:	0000300a 	.word	0x0000300a
 80012d4:	20000a72 	.word	0x20000a72
 80012d8:	0000300b 	.word	0x0000300b
 80012dc:	0000300c 	.word	0x0000300c
 80012e0:	2000009e 	.word	0x2000009e
 80012e4:	0000300d 	.word	0x0000300d
 80012e8:	0000300e 	.word	0x0000300e
 80012ec:	20000a74 	.word	0x20000a74
 80012f0:	0000300f 	.word	0x0000300f
 80012f4:	00003010 	.word	0x00003010
 80012f8:	200000a0 	.word	0x200000a0
 80012fc:	00003011 	.word	0x00003011
 8001300:	00003012 	.word	0x00003012
 8001304:	200000a2 	.word	0x200000a2
 8001308:	00003013 	.word	0x00003013
 800130c:	00003014 	.word	0x00003014
 8001310:	200000a4 	.word	0x200000a4
 8001314:	00003015 	.word	0x00003015
 8001318:	00003016 	.word	0x00003016
 800131c:	200000a6 	.word	0x200000a6
 8001320:	00003017 	.word	0x00003017
 8001324:	00003018 	.word	0x00003018
 8001328:	200000a8 	.word	0x200000a8
 800132c:	00003019 	.word	0x00003019
 8001330:	0000301a 	.word	0x0000301a
 8001334:	200000aa 	.word	0x200000aa
 8001338:	0000301b 	.word	0x0000301b
 800133c:	0000301c 	.word	0x0000301c
 8001340:	200000ac 	.word	0x200000ac
 8001344:	0000301d 	.word	0x0000301d
 8001348:	0000301e 	.word	0x0000301e
 800134c:	200000ae 	.word	0x200000ae
 8001350:	0803f072 	.word	0x0803f072
 8001354:	00003103 	.word	0x00003103
 8001358:	00003104 	.word	0x00003104
 800135c:	200000b0 	.word	0x200000b0
 8001360:	0803f049 	.word	0x0803f049
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8001364:	4bb7      	ldr	r3, [pc, #732]	@ (8001644 <ModbusMap+0xd44>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	4ab7      	ldr	r2, [pc, #732]	@ (8001648 <ModbusMap+0xd48>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d90f      	bls.n	800138e <ModbusMap+0xa8e>
 800136e:	4bb5      	ldr	r3, [pc, #724]	@ (8001644 <ModbusMap+0xd44>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4ab6      	ldr	r2, [pc, #728]	@ (800164c <ModbusMap+0xd4c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d80a      	bhi.n	800138e <ModbusMap+0xa8e>
					PNU_0x3106 = lowByte(_u16WriteVal);
 8001378:	4bb5      	ldr	r3, [pc, #724]	@ (8001650 <ModbusMap+0xd50>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	001a      	movs	r2, r3
 8001380:	4bb4      	ldr	r3, [pc, #720]	@ (8001654 <ModbusMap+0xd54>)
 8001382:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001384:	4bb4      	ldr	r3, [pc, #720]	@ (8001658 <ModbusMap+0xd58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	0018      	movs	r0, r3
 800138a:	f000 faed 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 800138e:	4bad      	ldr	r3, [pc, #692]	@ (8001644 <ModbusMap+0xd44>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	4ab2      	ldr	r2, [pc, #712]	@ (800165c <ModbusMap+0xd5c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d90f      	bls.n	80013b8 <ModbusMap+0xab8>
 8001398:	4baa      	ldr	r3, [pc, #680]	@ (8001644 <ModbusMap+0xd44>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	4ab0      	ldr	r2, [pc, #704]	@ (8001660 <ModbusMap+0xd60>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d80a      	bhi.n	80013b8 <ModbusMap+0xab8>
					PNU_0x3108 = lowByte(_u16WriteVal);
 80013a2:	4bab      	ldr	r3, [pc, #684]	@ (8001650 <ModbusMap+0xd50>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	001a      	movs	r2, r3
 80013aa:	4bae      	ldr	r3, [pc, #696]	@ (8001664 <ModbusMap+0xd64>)
 80013ac:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80013ae:	4baa      	ldr	r3, [pc, #680]	@ (8001658 <ModbusMap+0xd58>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fad8 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 80013b8:	4ba2      	ldr	r3, [pc, #648]	@ (8001644 <ModbusMap+0xd44>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	4aaa      	ldr	r2, [pc, #680]	@ (8001668 <ModbusMap+0xd68>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d90f      	bls.n	80013e2 <ModbusMap+0xae2>
 80013c2:	4ba0      	ldr	r3, [pc, #640]	@ (8001644 <ModbusMap+0xd44>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	4aa9      	ldr	r2, [pc, #676]	@ (800166c <ModbusMap+0xd6c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d80a      	bhi.n	80013e2 <ModbusMap+0xae2>
					PNU_0x310A = lowByte(_u16WriteVal);
 80013cc:	4ba0      	ldr	r3, [pc, #640]	@ (8001650 <ModbusMap+0xd50>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	001a      	movs	r2, r3
 80013d4:	4ba6      	ldr	r3, [pc, #664]	@ (8001670 <ModbusMap+0xd70>)
 80013d6:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80013d8:	4b9f      	ldr	r3, [pc, #636]	@ (8001658 <ModbusMap+0xd58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 fac3 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 80013e2:	4b98      	ldr	r3, [pc, #608]	@ (8001644 <ModbusMap+0xd44>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4aa3      	ldr	r2, [pc, #652]	@ (8001674 <ModbusMap+0xd74>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d90f      	bls.n	800140c <ModbusMap+0xb0c>
 80013ec:	4b95      	ldr	r3, [pc, #596]	@ (8001644 <ModbusMap+0xd44>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4aa1      	ldr	r2, [pc, #644]	@ (8001678 <ModbusMap+0xd78>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d80a      	bhi.n	800140c <ModbusMap+0xb0c>
					PNU_0x310C = lowByte(_u16WriteVal);
 80013f6:	4b96      	ldr	r3, [pc, #600]	@ (8001650 <ModbusMap+0xd50>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	001a      	movs	r2, r3
 80013fe:	4b9f      	ldr	r3, [pc, #636]	@ (800167c <ModbusMap+0xd7c>)
 8001400:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001402:	4b95      	ldr	r3, [pc, #596]	@ (8001658 <ModbusMap+0xd58>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	0018      	movs	r0, r3
 8001408:	f000 faae 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 800140c:	4b8d      	ldr	r3, [pc, #564]	@ (8001644 <ModbusMap+0xd44>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	4a9b      	ldr	r2, [pc, #620]	@ (8001680 <ModbusMap+0xd80>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d90f      	bls.n	8001436 <ModbusMap+0xb36>
 8001416:	4b8b      	ldr	r3, [pc, #556]	@ (8001644 <ModbusMap+0xd44>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	4a9a      	ldr	r2, [pc, #616]	@ (8001684 <ModbusMap+0xd84>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d80a      	bhi.n	8001436 <ModbusMap+0xb36>
					PNU_0x310E = lowByte(_u16WriteVal);
 8001420:	4b8b      	ldr	r3, [pc, #556]	@ (8001650 <ModbusMap+0xd50>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	001a      	movs	r2, r3
 8001428:	4b97      	ldr	r3, [pc, #604]	@ (8001688 <ModbusMap+0xd88>)
 800142a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800142c:	4b8a      	ldr	r3, [pc, #552]	@ (8001658 <ModbusMap+0xd58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	0018      	movs	r0, r3
 8001432:	f000 fa99 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 8001436:	4b83      	ldr	r3, [pc, #524]	@ (8001644 <ModbusMap+0xd44>)
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	23c8      	movs	r3, #200	@ 0xc8
 800143c:	019b      	lsls	r3, r3, #6
 800143e:	429a      	cmp	r2, r3
 8001440:	d310      	bcc.n	8001464 <ModbusMap+0xb64>
 8001442:	4b80      	ldr	r3, [pc, #512]	@ (8001644 <ModbusMap+0xd44>)
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	23c8      	movs	r3, #200	@ 0xc8
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	429a      	cmp	r2, r3
 800144c:	d80a      	bhi.n	8001464 <ModbusMap+0xb64>
					PNU_0x3200 = lowByte(_u16WriteVal);
 800144e:	4b80      	ldr	r3, [pc, #512]	@ (8001650 <ModbusMap+0xd50>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	001a      	movs	r2, r3
 8001456:	4b8d      	ldr	r3, [pc, #564]	@ (800168c <ModbusMap+0xd8c>)
 8001458:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800145a:	4b7f      	ldr	r3, [pc, #508]	@ (8001658 <ModbusMap+0xd58>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0018      	movs	r0, r3
 8001460:	f000 fa82 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8001464:	4b77      	ldr	r3, [pc, #476]	@ (8001644 <ModbusMap+0xd44>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	4a89      	ldr	r2, [pc, #548]	@ (8001690 <ModbusMap+0xd90>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d90f      	bls.n	800148e <ModbusMap+0xb8e>
 800146e:	4b75      	ldr	r3, [pc, #468]	@ (8001644 <ModbusMap+0xd44>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	4a88      	ldr	r2, [pc, #544]	@ (8001694 <ModbusMap+0xd94>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d80a      	bhi.n	800148e <ModbusMap+0xb8e>
					PNU_0x3202 = lowByte(_u16WriteVal);
 8001478:	4b75      	ldr	r3, [pc, #468]	@ (8001650 <ModbusMap+0xd50>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	001a      	movs	r2, r3
 8001480:	4b85      	ldr	r3, [pc, #532]	@ (8001698 <ModbusMap+0xd98>)
 8001482:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001484:	4b74      	ldr	r3, [pc, #464]	@ (8001658 <ModbusMap+0xd58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	0018      	movs	r0, r3
 800148a:	f000 fa6d 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 800148e:	4b6d      	ldr	r3, [pc, #436]	@ (8001644 <ModbusMap+0xd44>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4a82      	ldr	r2, [pc, #520]	@ (800169c <ModbusMap+0xd9c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d90f      	bls.n	80014b8 <ModbusMap+0xbb8>
 8001498:	4b6a      	ldr	r3, [pc, #424]	@ (8001644 <ModbusMap+0xd44>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	4a80      	ldr	r2, [pc, #512]	@ (80016a0 <ModbusMap+0xda0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d80a      	bhi.n	80014b8 <ModbusMap+0xbb8>
					PNU_0x3204 = lowByte(_u16WriteVal);
 80014a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001650 <ModbusMap+0xd50>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	001a      	movs	r2, r3
 80014aa:	4b7e      	ldr	r3, [pc, #504]	@ (80016a4 <ModbusMap+0xda4>)
 80014ac:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80014ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001658 <ModbusMap+0xd58>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 fa58 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 80014b8:	4b62      	ldr	r3, [pc, #392]	@ (8001644 <ModbusMap+0xd44>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4a7a      	ldr	r2, [pc, #488]	@ (80016a8 <ModbusMap+0xda8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d90f      	bls.n	80014e2 <ModbusMap+0xbe2>
 80014c2:	4b60      	ldr	r3, [pc, #384]	@ (8001644 <ModbusMap+0xd44>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4a79      	ldr	r2, [pc, #484]	@ (80016ac <ModbusMap+0xdac>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d80a      	bhi.n	80014e2 <ModbusMap+0xbe2>
					PNU_0x3206 = lowByte(_u16WriteVal);
 80014cc:	4b60      	ldr	r3, [pc, #384]	@ (8001650 <ModbusMap+0xd50>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	001a      	movs	r2, r3
 80014d4:	4b76      	ldr	r3, [pc, #472]	@ (80016b0 <ModbusMap+0xdb0>)
 80014d6:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80014d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001658 <ModbusMap+0xd58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	0018      	movs	r0, r3
 80014de:	f000 fa43 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 80014e2:	4b58      	ldr	r3, [pc, #352]	@ (8001644 <ModbusMap+0xd44>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	4a73      	ldr	r2, [pc, #460]	@ (80016b4 <ModbusMap+0xdb4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d90f      	bls.n	800150c <ModbusMap+0xc0c>
 80014ec:	4b55      	ldr	r3, [pc, #340]	@ (8001644 <ModbusMap+0xd44>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	4a71      	ldr	r2, [pc, #452]	@ (80016b8 <ModbusMap+0xdb8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d80a      	bhi.n	800150c <ModbusMap+0xc0c>
					PNU_0x3208 = lowByte(_u16WriteVal);
 80014f6:	4b56      	ldr	r3, [pc, #344]	@ (8001650 <ModbusMap+0xd50>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	001a      	movs	r2, r3
 80014fe:	4b6f      	ldr	r3, [pc, #444]	@ (80016bc <ModbusMap+0xdbc>)
 8001500:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001502:	4b55      	ldr	r3, [pc, #340]	@ (8001658 <ModbusMap+0xd58>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	f000 fa2e 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 800150c:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <ModbusMap+0xd44>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4a6b      	ldr	r2, [pc, #428]	@ (80016c0 <ModbusMap+0xdc0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d90f      	bls.n	8001536 <ModbusMap+0xc36>
 8001516:	4b4b      	ldr	r3, [pc, #300]	@ (8001644 <ModbusMap+0xd44>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	4a6a      	ldr	r2, [pc, #424]	@ (80016c4 <ModbusMap+0xdc4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d80a      	bhi.n	8001536 <ModbusMap+0xc36>
					PNU_0x320A = lowByte(_u16WriteVal);
 8001520:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <ModbusMap+0xd50>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	001a      	movs	r2, r3
 8001528:	4b67      	ldr	r3, [pc, #412]	@ (80016c8 <ModbusMap+0xdc8>)
 800152a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800152c:	4b4a      	ldr	r3, [pc, #296]	@ (8001658 <ModbusMap+0xd58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	0018      	movs	r0, r3
 8001532:	f000 fa19 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 8001536:	4b43      	ldr	r3, [pc, #268]	@ (8001644 <ModbusMap+0xd44>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	4a64      	ldr	r2, [pc, #400]	@ (80016cc <ModbusMap+0xdcc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d90f      	bls.n	8001560 <ModbusMap+0xc60>
 8001540:	4b40      	ldr	r3, [pc, #256]	@ (8001644 <ModbusMap+0xd44>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	4a62      	ldr	r2, [pc, #392]	@ (80016d0 <ModbusMap+0xdd0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d80a      	bhi.n	8001560 <ModbusMap+0xc60>
					PNU_0x320C = lowByte(_u16WriteVal);
 800154a:	4b41      	ldr	r3, [pc, #260]	@ (8001650 <ModbusMap+0xd50>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	001a      	movs	r2, r3
 8001552:	4b60      	ldr	r3, [pc, #384]	@ (80016d4 <ModbusMap+0xdd4>)
 8001554:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001556:	4b40      	ldr	r3, [pc, #256]	@ (8001658 <ModbusMap+0xd58>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	0018      	movs	r0, r3
 800155c:	f000 fa04 	bl	8001968 <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8001560:	4b38      	ldr	r3, [pc, #224]	@ (8001644 <ModbusMap+0xd44>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	2b2f      	cmp	r3, #47	@ 0x2f
 8001566:	d91a      	bls.n	800159e <ModbusMap+0xc9e>
 8001568:	4b36      	ldr	r3, [pc, #216]	@ (8001644 <ModbusMap+0xd44>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	2b30      	cmp	r3, #48	@ 0x30
 800156e:	d816      	bhi.n	800159e <ModbusMap+0xc9e>

					if (_u16WriteVal == 1){
 8001570:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <ModbusMap+0xd50>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d104      	bne.n	8001582 <ModbusMap+0xc82>
						if(flagsa[3]){
 8001578:	4b57      	ldr	r3, [pc, #348]	@ (80016d8 <ModbusMap+0xdd8>)
 800157a:	78db      	ldrb	r3, [r3, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d000      	beq.n	8001582 <ModbusMap+0xc82>
							asm ("nop");
 8001580:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 8001582:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <ModbusMap+0xd50>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d104      	bne.n	8001594 <ModbusMap+0xc94>
						if(flagsa[3]){
 800158a:	4b53      	ldr	r3, [pc, #332]	@ (80016d8 <ModbusMap+0xdd8>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d100      	bne.n	8001594 <ModbusMap+0xc94>

						}
						else{
							asm ("nop");
 8001592:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001594:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <ModbusMap+0xd58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	0018      	movs	r0, r3
 800159a:	f000 f9e5 	bl	8001968 <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 800159e:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <ModbusMap+0xd44>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	2b30      	cmp	r3, #48	@ 0x30
 80015a4:	d922      	bls.n	80015ec <ModbusMap+0xcec>
 80015a6:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <ModbusMap+0xd44>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	2b31      	cmp	r3, #49	@ 0x31
 80015ac:	d81e      	bhi.n	80015ec <ModbusMap+0xcec>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <ModbusMap+0xd50>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10c      	bne.n	80015d0 <ModbusMap+0xcd0>
						if(GPIOR0[1]){
 80015b6:	4b49      	ldr	r3, [pc, #292]	@ (80016dc <ModbusMap+0xddc>)
 80015b8:	785b      	ldrb	r3, [r3, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <ModbusMap+0xcc2>
							asm ("nop");
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	e006      	b.n	80015d0 <ModbusMap+0xcd0>
						}
						else{
							flags_accMenu |=0x01;
 80015c2:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <ModbusMap+0xde0>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b44      	ldr	r3, [pc, #272]	@ (80016e0 <ModbusMap+0xde0>)
 80015ce:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <ModbusMap+0xd50>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d104      	bne.n	80015e2 <ModbusMap+0xce2>
						if(GPIOR0[1]){
 80015d8:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <ModbusMap+0xddc>)
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d100      	bne.n	80015e2 <ModbusMap+0xce2>
						}
						else{
							asm ("nop");
 80015e0:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <ModbusMap+0xd58>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 f9be 	bl	8001968 <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <ModbusMap+0xd44>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	2b31      	cmp	r3, #49	@ 0x31
 80015f2:	d800      	bhi.n	80015f6 <ModbusMap+0xcf6>
 80015f4:	e0b4      	b.n	8001760 <ModbusMap+0xe60>
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <ModbusMap+0xd44>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	2b32      	cmp	r3, #50	@ 0x32
 80015fc:	d900      	bls.n	8001600 <ModbusMap+0xd00>
 80015fe:	e0af      	b.n	8001760 <ModbusMap+0xe60>

					if (_u16WriteVal == 1){
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <ModbusMap+0xd50>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <ModbusMap+0xd1a>
						if(GPIOR0[2]){
 8001608:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <ModbusMap+0xddc>)
 800160a:	789b      	ldrb	r3, [r3, #2]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <ModbusMap+0xd14>
							asm ("nop");
 8001610:	46c0      	nop			@ (mov r8, r8)
 8001612:	e002      	b.n	800161a <ModbusMap+0xd1a>
						}
						else{
							flagsb[0] = 1;
 8001614:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <ModbusMap+0xde4>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <ModbusMap+0xd50>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <ModbusMap+0xd36>
						if(GPIOR0[2]){
 8001622:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <ModbusMap+0xddc>)
 8001624:	789b      	ldrb	r3, [r3, #2]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <ModbusMap+0xd34>
							asm ("nop");
 800162a:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 800162c:	4b2d      	ldr	r3, [pc, #180]	@ (80016e4 <ModbusMap+0xde4>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e000      	b.n	8001636 <ModbusMap+0xd36>

						}
						else{
							asm ("nop");
 8001634:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <ModbusMap+0xd58>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0018      	movs	r0, r3
 800163c:	f000 f994 	bl	8001968 <ModbusSlaveTransaction>
				}
			break;
 8001640:	e08e      	b.n	8001760 <ModbusMap+0xe60>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	200002d6 	.word	0x200002d6
 8001648:	00003105 	.word	0x00003105
 800164c:	00003106 	.word	0x00003106
 8001650:	200002d8 	.word	0x200002d8
 8001654:	200000b2 	.word	0x200000b2
 8001658:	20000320 	.word	0x20000320
 800165c:	00003107 	.word	0x00003107
 8001660:	00003108 	.word	0x00003108
 8001664:	200000b4 	.word	0x200000b4
 8001668:	00003109 	.word	0x00003109
 800166c:	0000310a 	.word	0x0000310a
 8001670:	200000b6 	.word	0x200000b6
 8001674:	0000310b 	.word	0x0000310b
 8001678:	0000310c 	.word	0x0000310c
 800167c:	200000b8 	.word	0x200000b8
 8001680:	0000310d 	.word	0x0000310d
 8001684:	0000310e 	.word	0x0000310e
 8001688:	200000ba 	.word	0x200000ba
 800168c:	20000a76 	.word	0x20000a76
 8001690:	00003201 	.word	0x00003201
 8001694:	00003202 	.word	0x00003202
 8001698:	20000a78 	.word	0x20000a78
 800169c:	00003203 	.word	0x00003203
 80016a0:	00003204 	.word	0x00003204
 80016a4:	20000a7a 	.word	0x20000a7a
 80016a8:	00003205 	.word	0x00003205
 80016ac:	00003206 	.word	0x00003206
 80016b0:	20000a7c 	.word	0x20000a7c
 80016b4:	00003207 	.word	0x00003207
 80016b8:	00003208 	.word	0x00003208
 80016bc:	20000a7e 	.word	0x20000a7e
 80016c0:	00003209 	.word	0x00003209
 80016c4:	0000320a 	.word	0x0000320a
 80016c8:	20000a80 	.word	0x20000a80
 80016cc:	0000320b 	.word	0x0000320b
 80016d0:	0000320c 	.word	0x0000320c
 80016d4:	20000a82 	.word	0x20000a82
 80016d8:	20000ab4 	.word	0x20000ab4
 80016dc:	20000ae0 	.word	0x20000ae0
 80016e0:	20000b8c 	.word	0x20000b8c
 80016e4:	20000b24 	.word	0x20000b24
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 80016e8:	2001      	movs	r0, #1
 80016ea:	f000 fa65 	bl	8001bb8 <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 80016ee:	e038      	b.n	8001762 <ModbusMap+0xe62>
				  break;
 80016f0:	46c0      	nop			@ (mov r8, r8)
 80016f2:	e036      	b.n	8001762 <ModbusMap+0xe62>
					break;
 80016f4:	46c0      	nop			@ (mov r8, r8)
 80016f6:	e034      	b.n	8001762 <ModbusMap+0xe62>
					break;
 80016f8:	46c0      	nop			@ (mov r8, r8)
 80016fa:	e032      	b.n	8001762 <ModbusMap+0xe62>
					break;
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	e030      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	e02e      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	e02c      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	e02a      	b.n	8001762 <ModbusMap+0xe62>
					break;
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	e028      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	e026      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	e024      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	e022      	b.n	8001762 <ModbusMap+0xe62>
					break;
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	e020      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001720:	46c0      	nop			@ (mov r8, r8)
 8001722:	e01e      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001724:	46c0      	nop			@ (mov r8, r8)
 8001726:	e01c      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001728:	46c0      	nop			@ (mov r8, r8)
 800172a:	e01a      	b.n	8001762 <ModbusMap+0xe62>
					break;
 800172c:	46c0      	nop			@ (mov r8, r8)
 800172e:	e018      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	e016      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	e014      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	e012      	b.n	8001762 <ModbusMap+0xe62>
					break;
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	e010      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001740:	46c0      	nop			@ (mov r8, r8)
 8001742:	e00e      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001744:	46c0      	nop			@ (mov r8, r8)
 8001746:	e00c      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	e00a      	b.n	8001762 <ModbusMap+0xe62>
					break;
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	e008      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001750:	46c0      	nop			@ (mov r8, r8)
 8001752:	e006      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	e004      	b.n	8001762 <ModbusMap+0xe62>
					break;
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	e002      	b.n	8001762 <ModbusMap+0xe62>
					break;
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	e000      	b.n	8001762 <ModbusMap+0xe62>
			break;
 8001760:	46c0      	nop			@ (mov r8, r8)
}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)

0800176c <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	221e      	movs	r2, #30
 800177c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	881a      	ldrh	r2, [r3, #0]
 8001782:	4929      	ldr	r1, [pc, #164]	@ (8001828 <serialEvent_RS485+0xbc>)
 8001784:	4b29      	ldr	r3, [pc, #164]	@ (800182c <serialEvent_RS485+0xc0>)
 8001786:	0018      	movs	r0, r3
 8001788:	f014 fdb2 	bl	80162f0 <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <serialEvent_RS485+0xc4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	1cbb      	adds	r3, r7, #2
 8001794:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8001796:	1cba      	adds	r2, r7, #2
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d23c      	bcs.n	800181c <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <serialEvent_RS485+0xc8>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2210      	movs	r2, #16
 80017a8:	4013      	ands	r3, r2
 80017aa:	d037      	beq.n	800181c <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80017ac:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 80017ae:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <serialEvent_RS485+0xc0>)
 80017b0:	0018      	movs	r0, r3
 80017b2:	f014 fe09 	bl	80163c8 <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <serialEvent_RS485+0xc8>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2210      	movs	r2, #16
 80017bc:	4013      	ands	r3, r2
 80017be:	d003      	beq.n	80017c8 <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <serialEvent_RS485+0xc0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2210      	movs	r2, #16
 80017c6:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 80017c8:	1dbb      	adds	r3, r7, #6
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e00c      	b.n	80017ea <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 80017d0:	1dbb      	adds	r3, r7, #6
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	1dbb      	adds	r3, r7, #6
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4913      	ldr	r1, [pc, #76]	@ (8001828 <serialEvent_RS485+0xbc>)
 80017da:	5c89      	ldrb	r1, [r1, r2]
 80017dc:	4a16      	ldr	r2, [pc, #88]	@ (8001838 <serialEvent_RS485+0xcc>)
 80017de:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	1dbb      	adds	r3, r7, #6
 80017e6:	3201      	adds	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	1cbb      	adds	r3, r7, #2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	211e      	movs	r1, #30
 80017f4:	1acb      	subs	r3, r1, r3
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ea      	bcc.n	80017d0 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <serialEvent_RS485+0xcc>)
 8001800:	2100      	movs	r1, #0
 8001802:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b2d9      	uxtb	r1, r3
 800180a:	1cbb      	adds	r3, r7, #2
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	1a8a      	subs	r2, r1, r2
 8001814:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <serialEvent_RS485+0xd0>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	781b      	ldrb	r3, [r3, #0]
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000a30 	.word	0x20000a30
 800182c:	20000628 	.word	0x20000628
 8001830:	2000077c 	.word	0x2000077c
 8001834:	40004c00 	.word	0x40004c00
 8001838:	20000a50 	.word	0x20000a50
 800183c:	200002d0 	.word	0x200002d0

08001840 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	000a      	movs	r2, r1
 800184a:	1cfb      	adds	r3, r7, #3
 800184c:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 800184e:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 8001850:	1cfb      	adds	r3, r7, #3
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <SerializeDMAArray_RS485+0x38>)
 8001858:	0018      	movs	r0, r3
 800185a:	f016 f9f7 	bl	8017c4c <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 800185e:	1cfb      	adds	r3, r7, #3
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b29a      	uxth	r2, r3
 8001864:	4904      	ldr	r1, [pc, #16]	@ (8001878 <SerializeDMAArray_RS485+0x38>)
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SerializeDMAArray_RS485+0x3c>)
 8001868:	0018      	movs	r0, r3
 800186a:	f014 fcaf 	bl	80161cc <HAL_UART_Transmit_DMA>

}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	20000a10 	.word	0x20000a10
 800187c:	20000628 	.word	0x20000628

08001880 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	0002      	movs	r2, r0
 8001888:	1dbb      	adds	r3, r7, #6
 800188a:	801a      	strh	r2, [r3, #0]
 800188c:	1d7b      	adds	r3, r7, #5
 800188e:	1c0a      	adds	r2, r1, #0
 8001890:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 8001892:	1d7b      	adds	r3, r7, #5
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b299      	uxth	r1, r3
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	1dba      	adds	r2, r7, #6
 800189c:	8812      	ldrh	r2, [r2, #0]
 800189e:	404a      	eors	r2, r1
 80018a0:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e015      	b.n	80018d4 <crc16_update+0x54>
{
if (crc & 1)
 80018a8:	1dbb      	adds	r3, r7, #6
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d008      	beq.n	80018c4 <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 80018b2:	1dbb      	adds	r3, r7, #6
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	1dbb      	adds	r3, r7, #6
 80018bc:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <crc16_update+0x68>)
 80018be:	404a      	eors	r2, r1
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	e004      	b.n	80018ce <crc16_update+0x4e>
else
  crc = (crc >> 1);
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	1dba      	adds	r2, r7, #6
 80018c8:	8812      	ldrh	r2, [r2, #0]
 80018ca:	0852      	lsrs	r2, r2, #1
 80018cc:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	dde6      	ble.n	80018a8 <crc16_update+0x28>
}

return crc;
 80018da:	1dbb      	adds	r3, r7, #6
 80018dc:	881b      	ldrh	r3, [r3, #0]
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	ffffa001 	.word	0xffffa001

080018ec <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	0002      	movs	r2, r0
 8001900:	1dfb      	adds	r3, r7, #7
 8001902:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <ModbusMaster_begin+0x28>)
 8001906:	1dfa      	adds	r2, r7, #7
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <ModbusMaster_begin+0x2c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <ModbusMaster_begin+0x30>)
 8001914:	2200      	movs	r2, #0
 8001916:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002d1 	.word	0x200002d1
 8001924:	2000031c 	.word	0x2000031c
 8001928:	2000031e 	.word	0x2000031e

0800192c <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	0002      	movs	r2, r0
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	1c0a      	adds	r2, r1, #0
 800193c:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b1f      	cmp	r3, #31
 8001944:	d808      	bhi.n	8001958 <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <ModbusSlave_setTransmitBuffer+0x38>)
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	1d39      	adds	r1, r7, #4
 8001950:	8809      	ldrh	r1, [r1, #0]
 8001952:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 8001954:	2300      	movs	r3, #0
 8001956:	e000      	b.n	800195a <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 8001958:	2302      	movs	r3, #2
  }
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b002      	add	sp, #8
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	200002dc 	.word	0x200002dc

08001968 <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	b0c5      	sub	sp, #276	@ 0x114
 800196c:	af00      	add	r7, sp, #0
 800196e:	0002      	movs	r2, r0
 8001970:	4b88      	ldr	r3, [pc, #544]	@ (8001b94 <ModbusSlaveTransaction+0x22c>)
 8001972:	2588      	movs	r5, #136	@ 0x88
 8001974:	006d      	lsls	r5, r5, #1
 8001976:	195b      	adds	r3, r3, r5
 8001978:	19db      	adds	r3, r3, r7
 800197a:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 800197c:	2410      	movs	r4, #16
 800197e:	34ff      	adds	r4, #255	@ 0xff
 8001980:	193b      	adds	r3, r7, r4
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 8001986:	4b84      	ldr	r3, [pc, #528]	@ (8001b98 <ModbusSlaveTransaction+0x230>)
 8001988:	2201      	movs	r2, #1
 800198a:	2104      	movs	r1, #4
 800198c:	0018      	movs	r0, r3
 800198e:	f00e fe80 	bl	8010692 <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 8001992:	0020      	movs	r0, r4
 8001994:	183b      	adds	r3, r7, r0
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	183a      	adds	r2, r7, r0
 800199a:	1c59      	adds	r1, r3, #1
 800199c:	7011      	strb	r1, [r2, #0]
 800199e:	001a      	movs	r2, r3
 80019a0:	4b7e      	ldr	r3, [pc, #504]	@ (8001b9c <ModbusSlaveTransaction+0x234>)
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 80019a6:	195b      	adds	r3, r3, r5
 80019a8:	19db      	adds	r3, r3, r7
 80019aa:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80019ac:	183b      	adds	r3, r7, r0
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	183a      	adds	r2, r7, r0
 80019b2:	1c59      	adds	r1, r3, #1
 80019b4:	7011      	strb	r1, [r2, #0]
 80019b6:	001a      	movs	r2, r3
 80019b8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ba4 <ModbusSlaveTransaction+0x23c>)
 80019ba:	7819      	ldrb	r1, [r3, #0]
 80019bc:	4b78      	ldr	r3, [pc, #480]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 80019be:	195b      	adds	r3, r3, r5
 80019c0:	19db      	adds	r3, r3, r7
 80019c2:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 80019c4:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <ModbusSlaveTransaction+0x22c>)
 80019c6:	195b      	adds	r3, r3, r5
 80019c8:	19db      	adds	r3, r3, r7
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	dc02      	bgt.n	80019d6 <ModbusSlaveTransaction+0x6e>
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	da03      	bge.n	80019dc <ModbusSlaveTransaction+0x74>
 80019d4:	e077      	b.n	8001ac6 <ModbusSlaveTransaction+0x15e>
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d04f      	beq.n	8001a7a <ModbusSlaveTransaction+0x112>
 80019da:	e074      	b.n	8001ac6 <ModbusSlaveTransaction+0x15e>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 80019dc:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <ModbusSlaveTransaction+0x240>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	0059      	lsls	r1, r3, #1
 80019e2:	2210      	movs	r2, #16
 80019e4:	32ff      	adds	r2, #255	@ 0xff
 80019e6:	18bb      	adds	r3, r7, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	18ba      	adds	r2, r7, r2
 80019ec:	1c58      	adds	r0, r3, #1
 80019ee:	7010      	strb	r0, [r2, #0]
 80019f0:	001a      	movs	r2, r3
 80019f2:	b2c9      	uxtb	r1, r1
 80019f4:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 80019f6:	2088      	movs	r0, #136	@ 0x88
 80019f8:	0040      	lsls	r0, r0, #1
 80019fa:	181b      	adds	r3, r3, r0
 80019fc:	19db      	adds	r3, r3, r7
 80019fe:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8001a00:	2387      	movs	r3, #135	@ 0x87
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e02c      	b.n	8001a66 <ModbusSlaveTransaction+0xfe>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 8001a0c:	2487      	movs	r4, #135	@ 0x87
 8001a0e:	0064      	lsls	r4, r4, #1
 8001a10:	193b      	adds	r3, r7, r4
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	4b65      	ldr	r3, [pc, #404]	@ (8001bac <ModbusSlaveTransaction+0x244>)
 8001a16:	0052      	lsls	r2, r2, #1
 8001a18:	5ad3      	ldrh	r3, [r2, r3]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	2510      	movs	r5, #16
 8001a20:	35ff      	adds	r5, #255	@ 0xff
 8001a22:	197b      	adds	r3, r7, r5
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	197a      	adds	r2, r7, r5
 8001a28:	1c58      	adds	r0, r3, #1
 8001a2a:	7010      	strb	r0, [r2, #0]
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	b2c9      	uxtb	r1, r1
 8001a30:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 8001a32:	2688      	movs	r6, #136	@ 0x88
 8001a34:	0076      	lsls	r6, r6, #1
 8001a36:	199b      	adds	r3, r3, r6
 8001a38:	19db      	adds	r3, r3, r7
 8001a3a:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	4b5a      	ldr	r3, [pc, #360]	@ (8001bac <ModbusSlaveTransaction+0x244>)
 8001a42:	0052      	lsls	r2, r2, #1
 8001a44:	5ad1      	ldrh	r1, [r2, r3]
 8001a46:	197b      	adds	r3, r7, r5
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	197a      	adds	r2, r7, r5
 8001a4c:	1c58      	adds	r0, r3, #1
 8001a4e:	7010      	strb	r0, [r2, #0]
 8001a50:	001a      	movs	r2, r3
 8001a52:	b2c9      	uxtb	r1, r1
 8001a54:	4b52      	ldr	r3, [pc, #328]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 8001a56:	199b      	adds	r3, r3, r6
 8001a58:	19db      	adds	r3, r3, r7
 8001a5a:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	3201      	adds	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <ModbusSlaveTransaction+0x240>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2287      	movs	r2, #135	@ 0x87
 8001a6e:	0052      	lsls	r2, r2, #1
 8001a70:	18ba      	adds	r2, r7, r2
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d3c9      	bcc.n	8001a0c <ModbusSlaveTransaction+0xa4>
      }
		break;
 8001a78:	e025      	b.n	8001ac6 <ModbusSlaveTransaction+0x15e>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 8001a7a:	2387      	movs	r3, #135	@ 0x87
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e018      	b.n	8001ab8 <ModbusSlaveTransaction+0x150>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 8001a86:	2487      	movs	r4, #135	@ 0x87
 8001a88:	0064      	lsls	r4, r4, #1
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	2110      	movs	r1, #16
 8001a90:	31ff      	adds	r1, #255	@ 0xff
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	1879      	adds	r1, r7, r1
 8001a98:	1c58      	adds	r0, r3, #1
 8001a9a:	7008      	strb	r0, [r1, #0]
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	4b44      	ldr	r3, [pc, #272]	@ (8001bb0 <ModbusSlaveTransaction+0x248>)
 8001aa0:	5c9a      	ldrb	r2, [r3, r2]
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 8001aa4:	2088      	movs	r0, #136	@ 0x88
 8001aa6:	0040      	lsls	r0, r0, #1
 8001aa8:	181b      	adds	r3, r3, r0
 8001aaa:	19db      	adds	r3, r3, r7
 8001aac:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	3201      	adds	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	2387      	movs	r3, #135	@ 0x87
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d9e0      	bls.n	8001a86 <ModbusSlaveTransaction+0x11e>
			}
		break;
 8001ac4:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 8001ac6:	2386      	movs	r3, #134	@ 0x86
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2201      	movs	r2, #1
 8001ace:	4252      	negs	r2, r2
 8001ad0:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8001ad2:	2387      	movs	r3, #135	@ 0x87
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e019      	b.n	8001b12 <ModbusSlaveTransaction+0x1aa>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 8001ade:	2587      	movs	r5, #135	@ 0x87
 8001ae0:	006d      	lsls	r5, r5, #1
 8001ae2:	197b      	adds	r3, r7, r5
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 8001ae8:	2188      	movs	r1, #136	@ 0x88
 8001aea:	0049      	lsls	r1, r1, #1
 8001aec:	1852      	adds	r2, r2, r1
 8001aee:	19d2      	adds	r2, r2, r7
 8001af0:	5cd2      	ldrb	r2, [r2, r3]
 8001af2:	2386      	movs	r3, #134	@ 0x86
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	18fc      	adds	r4, r7, r3
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	0011      	movs	r1, r2
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff febe 	bl	8001880 <crc16_update>
 8001b04:	0003      	movs	r3, r0
 8001b06:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8001b08:	197b      	adds	r3, r7, r5
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	197b      	adds	r3, r7, r5
 8001b0e:	3201      	adds	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	2387      	movs	r3, #135	@ 0x87
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	18fa      	adds	r2, r7, r3
 8001b18:	2010      	movs	r0, #16
 8001b1a:	30ff      	adds	r0, #255	@ 0xff
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d3db      	bcc.n	8001ade <ModbusSlaveTransaction+0x176>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 8001b26:	183b      	adds	r3, r7, r0
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	183a      	adds	r2, r7, r0
 8001b2c:	1c59      	adds	r1, r3, #1
 8001b2e:	7011      	strb	r1, [r2, #0]
 8001b30:	001a      	movs	r2, r3
 8001b32:	2486      	movs	r4, #134	@ 0x86
 8001b34:	0064      	lsls	r4, r4, #1
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b2d9      	uxtb	r1, r3
 8001b3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 8001b3e:	2588      	movs	r5, #136	@ 0x88
 8001b40:	006d      	lsls	r5, r5, #1
 8001b42:	195b      	adds	r3, r3, r5
 8001b44:	19db      	adds	r3, r3, r7
 8001b46:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 8001b48:	193b      	adds	r3, r7, r4
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b299      	uxth	r1, r3
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	0004      	movs	r4, r0
 8001b56:	183a      	adds	r2, r7, r0
 8001b58:	1c58      	adds	r0, r3, #1
 8001b5a:	7010      	strb	r0, [r2, #0]
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	b2c9      	uxtb	r1, r1
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 8001b62:	195b      	adds	r3, r3, r5
 8001b64:	19db      	adds	r3, r3, r7
 8001b66:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba0 <ModbusSlaveTransaction+0x238>)
 8001b6e:	1952      	adds	r2, r2, r5
 8001b70:	19d2      	adds	r2, r2, r7
 8001b72:	2100      	movs	r1, #0
 8001b74:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	0011      	movs	r1, r2
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fe5d 	bl	8001840 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 8001b86:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <ModbusSlaveTransaction+0x24c>)
 8001b88:	2246      	movs	r2, #70	@ 0x46
 8001b8a:	801a      	strh	r2, [r3, #0]


}
 8001b8c:	46c0      	nop			@ (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b045      	add	sp, #276	@ 0x114
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b94:	fffffef7 	.word	0xfffffef7
 8001b98:	50000800 	.word	0x50000800
 8001b9c:	200002d1 	.word	0x200002d1
 8001ba0:	fffffefc 	.word	0xfffffefc
 8001ba4:	20000320 	.word	0x20000320
 8001ba8:	200002d4 	.word	0x200002d4
 8001bac:	200002dc 	.word	0x200002dc
 8001bb0:	20000a50 	.word	0x20000a50
 8001bb4:	20000fee 	.word	0x20000fee

08001bb8 <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b0c4      	sub	sp, #272	@ 0x110
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	4b51      	ldr	r3, [pc, #324]	@ (8001d08 <ModbusSlaveExceptionTransaction+0x150>)
 8001bc2:	2588      	movs	r5, #136	@ 0x88
 8001bc4:	006d      	lsls	r5, r5, #1
 8001bc6:	195b      	adds	r3, r3, r5
 8001bc8:	19db      	adds	r3, r3, r7
 8001bca:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8001bcc:	240c      	movs	r4, #12
 8001bce:	34ff      	adds	r4, #255	@ 0xff
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 8001bd6:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	@ (8001d0c <ModbusSlaveExceptionTransaction+0x154>)
 8001bda:	2214      	movs	r2, #20
 8001bdc:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 8001bde:	4b4c      	ldr	r3, [pc, #304]	@ (8001d10 <ModbusSlaveExceptionTransaction+0x158>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	2104      	movs	r1, #4
 8001be4:	0018      	movs	r0, r3
 8001be6:	f00e fd54 	bl	8010692 <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	193a      	adds	r2, r7, r4
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	7011      	strb	r1, [r2, #0]
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <ModbusSlaveExceptionTransaction+0x15c>)
 8001bf8:	7819      	ldrb	r1, [r3, #0]
 8001bfa:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <ModbusSlaveExceptionTransaction+0x160>)
 8001bfc:	195b      	adds	r3, r3, r5
 8001bfe:	19db      	adds	r3, r3, r7
 8001c00:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8001c02:	4b46      	ldr	r3, [pc, #280]	@ (8001d1c <ModbusSlaveExceptionTransaction+0x164>)
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	1939      	adds	r1, r7, r4
 8001c0c:	1c58      	adds	r0, r3, #1
 8001c0e:	7008      	strb	r0, [r1, #0]
 8001c10:	0019      	movs	r1, r3
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	425b      	negs	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d18 <ModbusSlaveExceptionTransaction+0x160>)
 8001c1c:	195b      	adds	r3, r3, r5
 8001c1e:	19db      	adds	r3, r3, r7
 8001c20:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	193a      	adds	r2, r7, r4
 8001c28:	1c59      	adds	r1, r3, #1
 8001c2a:	7011      	strb	r1, [r2, #0]
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <ModbusSlaveExceptionTransaction+0x160>)
 8001c30:	195b      	adds	r3, r3, r5
 8001c32:	19db      	adds	r3, r3, r7
 8001c34:	4a34      	ldr	r2, [pc, #208]	@ (8001d08 <ModbusSlaveExceptionTransaction+0x150>)
 8001c36:	1952      	adds	r2, r2, r5
 8001c38:	19d2      	adds	r2, r2, r7
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 8001c3e:	2386      	movs	r3, #134	@ 0x86
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2201      	movs	r2, #1
 8001c46:	4252      	negs	r2, r2
 8001c48:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	33ff      	adds	r3, #255	@ 0xff
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	e019      	b.n	8001c8a <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 8001c56:	2510      	movs	r5, #16
 8001c58:	35ff      	adds	r5, #255	@ 0xff
 8001c5a:	197b      	adds	r3, r7, r5
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d18 <ModbusSlaveExceptionTransaction+0x160>)
 8001c60:	2188      	movs	r1, #136	@ 0x88
 8001c62:	0049      	lsls	r1, r1, #1
 8001c64:	1852      	adds	r2, r2, r1
 8001c66:	19d2      	adds	r2, r2, r7
 8001c68:	5cd2      	ldrb	r2, [r2, r3]
 8001c6a:	2386      	movs	r3, #134	@ 0x86
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	18fc      	adds	r4, r7, r3
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	0011      	movs	r1, r2
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff fe02 	bl	8001880 <crc16_update>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8001c80:	197b      	adds	r3, r7, r5
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	197b      	adds	r3, r7, r5
 8001c86:	3201      	adds	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	33ff      	adds	r3, #255	@ 0xff
 8001c8e:	18fa      	adds	r2, r7, r3
 8001c90:	200c      	movs	r0, #12
 8001c92:	30ff      	adds	r0, #255	@ 0xff
 8001c94:	183b      	adds	r3, r7, r0
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3db      	bcc.n	8001c56 <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	183a      	adds	r2, r7, r0
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	7011      	strb	r1, [r2, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	2486      	movs	r4, #134	@ 0x86
 8001cac:	0064      	lsls	r4, r4, #1
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b2d9      	uxtb	r1, r3
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <ModbusSlaveExceptionTransaction+0x160>)
 8001cb6:	2588      	movs	r5, #136	@ 0x88
 8001cb8:	006d      	lsls	r5, r5, #1
 8001cba:	195b      	adds	r3, r3, r5
 8001cbc:	19db      	adds	r3, r3, r7
 8001cbe:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	b299      	uxth	r1, r3
 8001cc8:	183b      	adds	r3, r7, r0
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	0004      	movs	r4, r0
 8001cce:	183a      	adds	r2, r7, r0
 8001cd0:	1c58      	adds	r0, r3, #1
 8001cd2:	7010      	strb	r0, [r2, #0]
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	b2c9      	uxtb	r1, r1
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <ModbusSlaveExceptionTransaction+0x160>)
 8001cda:	195b      	adds	r3, r3, r5
 8001cdc:	19db      	adds	r3, r3, r7
 8001cde:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <ModbusSlaveExceptionTransaction+0x160>)
 8001ce6:	1952      	adds	r2, r2, r5
 8001ce8:	19d2      	adds	r2, r2, r7
 8001cea:	2100      	movs	r1, #0
 8001cec:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8001cee:	193b      	adds	r3, r7, r4
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff fda1 	bl	8001840 <SerializeDMAArray_RS485>

}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b044      	add	sp, #272	@ 0x110
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	fffffef7 	.word	0xfffffef7
 8001d0c:	20000ff0 	.word	0x20000ff0
 8001d10:	50000800 	.word	0x50000800
 8001d14:	200002d1 	.word	0x200002d1
 8001d18:	fffffef8 	.word	0xfffffef8
 8001d1c:	20000320 	.word	0x20000320

08001d20 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b0c2      	sub	sp, #264	@ 0x108
 8001d24:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 8001d26:	1cfb      	adds	r3, r7, #3
 8001d28:	33ff      	adds	r3, #255	@ 0xff
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	33ff      	adds	r3, #255	@ 0xff
 8001d32:	22ff      	movs	r2, #255	@ 0xff
 8001d34:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 8001d36:	1cfc      	adds	r4, r7, #3
 8001d38:	34ff      	adds	r4, #255	@ 0xff
 8001d3a:	f7ff fd17 	bl	800176c <serialEvent_RS485>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 8001d42:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 8001d44:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 8001d46:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb0 <ModbusSlavePool+0x190>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d100      	bne.n	8001d50 <ModbusSlavePool+0x30>
 8001d4e:	e0a8      	b.n	8001ea2 <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 8001d50:	4b57      	ldr	r3, [pc, #348]	@ (8001eb0 <ModbusSlavePool+0x190>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	33ff      	adds	r3, #255	@ 0xff
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8001d5e:	4b55      	ldr	r3, [pc, #340]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	4b55      	ldr	r3, [pc, #340]	@ (8001eb8 <ModbusSlavePool+0x198>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d000      	beq.n	8001d6c <ModbusSlavePool+0x4c>
 8001d6a:	e091      	b.n	8001e90 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8001d6c:	4b51      	ldr	r3, [pc, #324]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001d6e:	785a      	ldrb	r2, [r3, #1]
 8001d70:	4b52      	ldr	r3, [pc, #328]	@ (8001ebc <ModbusSlavePool+0x19c>)
 8001d72:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 8001d74:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	001a      	movs	r2, r3
 8001d7a:	237f      	movs	r3, #127	@ 0x7f
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	4a4f      	ldr	r2, [pc, #316]	@ (8001ebc <ModbusSlavePool+0x19c>)
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	33ff      	adds	r3, #255	@ 0xff
 8001d8a:	22e1      	movs	r2, #225	@ 0xe1
 8001d8c:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 8001d8e:	1d7b      	adds	r3, r7, #5
 8001d90:	33ff      	adds	r3, #255	@ 0xff
 8001d92:	2201      	movs	r2, #1
 8001d94:	4252      	negs	r2, r2
 8001d96:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8001d98:	2308      	movs	r3, #8
 8001d9a:	33ff      	adds	r3, #255	@ 0xff
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e015      	b.n	8001dd0 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 8001da4:	2508      	movs	r5, #8
 8001da6:	35ff      	adds	r5, #255	@ 0xff
 8001da8:	197b      	adds	r3, r7, r5
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4a41      	ldr	r2, [pc, #260]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001dae:	5cd2      	ldrb	r2, [r2, r3]
 8001db0:	1d7c      	adds	r4, r7, #5
 8001db2:	34ff      	adds	r4, #255	@ 0xff
 8001db4:	1d7b      	adds	r3, r7, #5
 8001db6:	33ff      	adds	r3, #255	@ 0xff
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	0011      	movs	r1, r2
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff fd5f 	bl	8001880 <crc16_update>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8001dc6:	197b      	adds	r3, r7, r5
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	197b      	adds	r3, r7, r5
 8001dcc:	3201      	adds	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	33ff      	adds	r3, #255	@ 0xff
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	1cfb      	adds	r3, r7, #3
 8001dda:	33ff      	adds	r3, #255	@ 0xff
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3b02      	subs	r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbdf      	blt.n	8001da4 <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	33ff      	adds	r3, #255	@ 0xff
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11d      	bne.n	8001e2a <ModbusSlavePool+0x10a>
 8001dee:	1d7b      	adds	r3, r7, #5
 8001df0:	33ff      	adds	r3, #255	@ 0xff
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	1cfb      	adds	r3, r7, #3
 8001df8:	33ff      	adds	r3, #255	@ 0xff
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3b02      	subs	r3, #2
 8001dfe:	492d      	ldr	r1, [pc, #180]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e00:	5ccb      	ldrb	r3, [r1, r3]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d10d      	bne.n	8001e22 <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 8001e06:	1d7b      	adds	r3, r7, #5
 8001e08:	33ff      	adds	r3, #255	@ 0xff
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	1cfb      	adds	r3, r7, #3
 8001e14:	33ff      	adds	r3, #255	@ 0xff
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4926      	ldr	r1, [pc, #152]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d003      	beq.n	8001e2a <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	33ff      	adds	r3, #255	@ 0xff
 8001e26:	22e3      	movs	r2, #227	@ 0xe3
 8001e28:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 8001e2a:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <ModbusSlavePool+0x19c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d019      	beq.n	8001e66 <ModbusSlavePool+0x146>
 8001e32:	dc36      	bgt.n	8001ea2 <ModbusSlavePool+0x182>
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	dc34      	bgt.n	8001ea2 <ModbusSlavePool+0x182>
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	db31      	blt.n	8001ea0 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e3e:	789b      	ldrb	r3, [r3, #2]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e46:	78d2      	ldrb	r2, [r2, #3]
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <ModbusSlavePool+0x1a0>)
 8001e4e:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4a16      	ldr	r2, [pc, #88]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e5a:	7952      	ldrb	r2, [r2, #5]
 8001e5c:	189b      	adds	r3, r3, r2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <ModbusSlavePool+0x1a4>)
 8001e62:	801a      	strh	r2, [r3, #0]
				break;
 8001e64:	e01d      	b.n	8001ea2 <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8001e66:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e70:	78d2      	ldrb	r2, [r2, #3]
 8001e72:	189b      	adds	r3, r3, r2
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <ModbusSlavePool+0x1a8>)
 8001e78:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e7c:	791b      	ldrb	r3, [r3, #4]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <ModbusSlavePool+0x194>)
 8001e84:	7952      	ldrb	r2, [r2, #5]
 8001e86:	189b      	adds	r3, r3, r2
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <ModbusSlavePool+0x1ac>)
 8001e8c:	801a      	strh	r2, [r3, #0]
				break;
 8001e8e:	e008      	b.n	8001ea2 <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	33ff      	adds	r3, #255	@ 0xff
 8001e94:	22e0      	movs	r2, #224	@ 0xe0
 8001e96:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <ModbusSlavePool+0x1b0>)
 8001e9a:	2214      	movs	r2, #20
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	e000      	b.n	8001ea2 <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 8001ea0:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	33ff      	adds	r3, #255	@ 0xff
 8001ea6:	781b      	ldrb	r3, [r3, #0]
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b042      	add	sp, #264	@ 0x108
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	200002d0 	.word	0x200002d0
 8001eb4:	20000a50 	.word	0x20000a50
 8001eb8:	200002d1 	.word	0x200002d1
 8001ebc:	20000320 	.word	0x20000320
 8001ec0:	200002d2 	.word	0x200002d2
 8001ec4:	200002d4 	.word	0x200002d4
 8001ec8:	200002d6 	.word	0x200002d6
 8001ecc:	200002d8 	.word	0x200002d8
 8001ed0:	20000ff0 	.word	0x20000ff0

08001ed4 <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <AtParsing_Ble+0x3c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00c      	beq.n	8001f06 <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <AtParsing_Ble+0x3c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <AtParsing_Ble+0x40>)
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f015 fe6d 	bl	8017bd8 <strstr>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d001      	beq.n	8001f06 <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 8001f06:	697b      	ldr	r3, [r7, #20]
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b006      	add	sp, #24
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000322 	.word	0x20000322
 8001f14:	20000980 	.word	0x20000980

08001f18 <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
		asm ("nop");
 8001f20:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7fe f8ef 	bl	8000108 <strlen>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	240e      	movs	r4, #14
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <SerializeString_Ble+0x40>)
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f015 fe86 	bl	8017c4c <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	881a      	ldrh	r2, [r3, #0]
 8001f44:	4904      	ldr	r1, [pc, #16]	@ (8001f58 <SerializeString_Ble+0x40>)
 8001f46:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SerializeString_Ble+0x44>)
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f014 f93f 	bl	80161cc <HAL_UART_Transmit_DMA>
}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b005      	add	sp, #20
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	20000860 	.word	0x20000860
 8001f5c:	20000594 	.word	0x20000594

08001f60 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	000a      	movs	r2, r1
 8001f6a:	1cfb      	adds	r3, r7, #3
 8001f6c:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8001f6e:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8001f70:	210e      	movs	r1, #14
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	1cfa      	adds	r2, r7, #3
 8001f76:	7812      	ldrb	r2, [r2, #0]
 8001f78:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 8001f7a:	000c      	movs	r4, r1
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	881a      	ldrh	r2, [r3, #0]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <SerializeString2+0x40>)
 8001f84:	0018      	movs	r0, r3
 8001f86:	f015 fe61 	bl	8017c4c <memcpy>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	881a      	ldrh	r2, [r3, #0]
 8001f8e:	4904      	ldr	r1, [pc, #16]	@ (8001fa0 <SerializeString2+0x40>)
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <SerializeString2+0x44>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f014 f91a 	bl	80161cc <HAL_UART_Transmit_DMA>
}
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b005      	add	sp, #20
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	20000860 	.word	0x20000860
 8001fa4:	20000594 	.word	0x20000594

08001fa8 <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2290      	movs	r2, #144	@ 0x90
 8001fb2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	4929      	ldr	r1, [pc, #164]	@ (8002060 <serialEvent_Ble+0xb8>)
 8001fba:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <serialEvent_Ble+0xbc>)
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f014 f997 	bl	80162f0 <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <serialEvent_Ble+0xc0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	1cbb      	adds	r3, r7, #2
 8001fca:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8001fcc:	1cba      	adds	r2, r7, #2
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	8812      	ldrh	r2, [r2, #0]
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d23f      	bcs.n	8002058 <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 8001fd8:	4b24      	ldr	r3, [pc, #144]	@ (800206c <serialEvent_Ble+0xc4>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d03a      	beq.n	8002058 <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 8001fe2:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8001fe4:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <serialEvent_Ble+0xc0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	1cbb      	adds	r3, r7, #2
 8001fec:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8001fee:	003b      	movs	r3, r7
 8001ff0:	1d39      	adds	r1, r7, #4
 8001ff2:	1cba      	adds	r2, r7, #2
 8001ff4:	8809      	ldrh	r1, [r1, #0]
 8001ff6:	8812      	ldrh	r2, [r2, #0]
 8001ff8:	1a8a      	subs	r2, r1, r2
 8001ffa:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <serialEvent_Ble+0xbc>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f014 f9e2 	bl	80163c8 <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <serialEvent_Ble+0xc4>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2210      	movs	r2, #16
 800200a:	4013      	ands	r3, r2
 800200c:	d003      	beq.n	8002016 <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <serialEvent_Ble+0xbc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2210      	movs	r2, #16
 8002014:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e00c      	b.n	8002038 <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	490e      	ldr	r1, [pc, #56]	@ (8002060 <serialEvent_Ble+0xb8>)
 8002028:	5c89      	ldrb	r1, [r1, r2]
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <serialEvent_Ble+0xc8>)
 800202c:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	3201      	adds	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	1dfb      	adds	r3, r7, #7
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	1cbb      	adds	r3, r7, #2
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	2190      	movs	r1, #144	@ 0x90
 8002042:	1acb      	subs	r3, r1, r3
 8002044:	429a      	cmp	r2, r3
 8002046:	d3ea      	bcc.n	800201e <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <serialEvent_Ble+0xc8>)
 800204e:	2100      	movs	r1, #0
 8002050:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <serialEvent_Ble+0xcc>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
			}

		}
}
 8002058:	46c0      	nop			@ (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200008f0 	.word	0x200008f0
 8002064:	20000594 	.word	0x20000594
 8002068:	200006bc 	.word	0x200006bc
 800206c:	40004400 	.word	0x40004400
 8002070:	20000980 	.word	0x20000980
 8002074:	20000322 	.word	0x20000322

08002078 <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 800208a:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <SendATreply_Ble+0x74>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4053      	eors	r3, r2
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00c      	beq.n	80020b2 <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 8002098:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <SendATreply_Ble+0x74>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 800209e:	f004 fca3 	bl	80069e8 <millis>
 80020a2:	0003      	movs	r3, r0
 80020a4:	001a      	movs	r2, r3
 80020a6:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <SendATreply_Ble+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff ff33 	bl	8001f18 <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 80020b2:	f7ff ff79 	bl	8001fa8 <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff ff09 	bl	8001ed4 <AtParsing_Ble>
 80020c2:	0003      	movs	r3, r0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 80020c6:	f004 fc8f 	bl	80069e8 <millis>
 80020ca:	0003      	movs	r3, r0
 80020cc:	001a      	movs	r2, r3
 80020ce:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <SendATreply_Ble+0x78>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d802      	bhi.n	80020e0 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 80020da:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <SendATreply_Ble+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b00a      	add	sp, #40	@ 0x28
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	20000321 	.word	0x20000321
 80020f0:	20000324 	.word	0x20000324

080020f4 <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	if (eePlantilla[eeFlagBLE] == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <SetUpBluetooth_Ble+0x34>)
 80020fa:	2261      	movs	r2, #97	@ 0x61
 80020fc:	5c9b      	ldrb	r3, [r3, r2]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <SetUpBluetooth_Ble+0x14>
		ConfigBLE_Ble ();
 8002102:	f000 f819 	bl	8002138 <ConfigBLE_Ble>
			BluetoothState = 2;
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
		}
	}
}
 8002106:	e00c      	b.n	8002122 <SetUpBluetooth_Ble+0x2e>
		if (tick_1s == 1){
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <SetUpBluetooth_Ble+0x38>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <SetUpBluetooth_Ble+0x2e>
			BluetoothState = 2;
 8002110:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <SetUpBluetooth_Ble+0x3c>)
 8002112:	2202      	movs	r2, #2
 8002114:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <SetUpBluetooth_Ble+0x40>)
 8002118:	2200      	movs	r2, #0
 800211a:	2140      	movs	r1, #64	@ 0x40
 800211c:	0018      	movs	r0, r3
 800211e:	f00e fab8 	bl	8010692 <HAL_GPIO_WritePin>
}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	0803f000 	.word	0x0803f000
 800212c:	20000843 	.word	0x20000843
 8002130:	20000050 	.word	0x20000050
 8002134:	50000800 	.word	0x50000800

08002138 <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 800213e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <ConfigBLE_Ble+0x174>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 8002146:	4b5a      	ldr	r3, [pc, #360]	@ (80022b0 <ConfigBLE_Ble+0x178>)
 8002148:	2200      	movs	r2, #0
 800214a:	2140      	movs	r1, #64	@ 0x40
 800214c:	0018      	movs	r0, r3
 800214e:	f00e faa0 	bl	8010692 <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8002152:	4b58      	ldr	r3, [pc, #352]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d900      	bls.n	800215c <ConfigBLE_Ble+0x24>
 800215a:	e093      	b.n	8002284 <ConfigBLE_Ble+0x14c>
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	4b56      	ldr	r3, [pc, #344]	@ (80022b8 <ConfigBLE_Ble+0x180>)
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	469f      	mov	pc, r3
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8002166:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	001a      	movs	r2, r3
 800216c:	4953      	ldr	r1, [pc, #332]	@ (80022bc <ConfigBLE_Ble+0x184>)
 800216e:	4854      	ldr	r0, [pc, #336]	@ (80022c0 <ConfigBLE_Ble+0x188>)
 8002170:	23fa      	movs	r3, #250	@ 0xfa
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	f7ff ff7e 	bl	8002078 <SendATreply_Ble>
 800217c:	0002      	movs	r2, r0
 800217e:	4b4d      	ldr	r3, [pc, #308]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d000      	beq.n	8002188 <ConfigBLE_Ble+0x50>
 8002186:	e085      	b.n	8002294 <ConfigBLE_Ble+0x15c>
				WaitSerAnsw_Ble_func(5);
 8002188:	2005      	movs	r0, #5
 800218a:	f000 fb77 	bl	800287c <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 800218e:	e081      	b.n	8002294 <ConfigBLE_Ble+0x15c>
//--------------------------------------
		case 2:			//  Manuel,   Retardo tonto por el pin PWRC
			asm ("nop");
 8002190:	46c0      	nop			@ (mov r8, r8)

			if (SendATreply_Ble("","",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8002192:	4b48      	ldr	r3, [pc, #288]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	001a      	movs	r2, r3
 8002198:	494a      	ldr	r1, [pc, #296]	@ (80022c4 <ConfigBLE_Ble+0x18c>)
 800219a:	484a      	ldr	r0, [pc, #296]	@ (80022c4 <ConfigBLE_Ble+0x18c>)
 800219c:	23fa      	movs	r3, #250	@ 0xfa
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	f7ff ff68 	bl	8002078 <SendATreply_Ble>
 80021a8:	0002      	movs	r2, r0
 80021aa:	4b42      	ldr	r3, [pc, #264]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d103      	bne.n	80021ba <ConfigBLE_Ble+0x82>
				WaitSerAnsw_Ble_func(3);
 80021b2:	2003      	movs	r0, #3
 80021b4:	f000 fb62 	bl	800287c <WaitSerAnsw_Ble_func>
//				ParamItem = 3;
			}
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
				ParamItem = 3;
			}
			break;
 80021b8:	e06e      	b.n	8002298 <ConfigBLE_Ble+0x160>
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
 80021ba:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <ConfigBLE_Ble+0x190>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4053      	eors	r3, r2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d067      	beq.n	8002298 <ConfigBLE_Ble+0x160>
				ParamItem = 3;
 80021c8:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 80021ca:	2203      	movs	r2, #3
 80021cc:	601a      	str	r2, [r3, #0]
			break;
 80021ce:	e063      	b.n	8002298 <ConfigBLE_Ble+0x160>
//--------------------------------------
		case 3:			//  Manuel,   Cambia el Baud
			asm ("nop");
 80021d0:	46c0      	nop			@ (mov r8, r8)

			if (SendATreply_Ble("AT+BAUD\r\n","+BAUD=8",ParamItem,0,4000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	001a      	movs	r2, r3
 80021d8:	493c      	ldr	r1, [pc, #240]	@ (80022cc <ConfigBLE_Ble+0x194>)
 80021da:	483d      	ldr	r0, [pc, #244]	@ (80022d0 <ConfigBLE_Ble+0x198>)
 80021dc:	23fa      	movs	r3, #250	@ 0xfa
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2300      	movs	r3, #0
 80021e4:	f7ff ff48 	bl	8002078 <SendATreply_Ble>
 80021e8:	0002      	movs	r2, r0
 80021ea:	4b32      	ldr	r3, [pc, #200]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d103      	bne.n	80021fa <ConfigBLE_Ble+0xc2>
				WaitSerAnsw_Ble_func(5);
 80021f2:	2005      	movs	r0, #5
 80021f4:	f000 fb42 	bl	800287c <WaitSerAnsw_Ble_func>
//				ParamItem = 5;
			}
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
				ParamItem = 4;
			}
			break;
 80021f8:	e050      	b.n	800229c <ConfigBLE_Ble+0x164>
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
 80021fa:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <ConfigBLE_Ble+0x190>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	4053      	eors	r3, r2
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d049      	beq.n	800229c <ConfigBLE_Ble+0x164>
				ParamItem = 4;
 8002208:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 800220a:	2204      	movs	r2, #4
 800220c:	601a      	str	r2, [r3, #0]
			break;
 800220e:	e045      	b.n	800229c <ConfigBLE_Ble+0x164>
	  case 4:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("AT+BAUD8\r\n","+BAUD=8",ParamItem,0,3000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8002210:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	001a      	movs	r2, r3
 8002216:	492d      	ldr	r1, [pc, #180]	@ (80022cc <ConfigBLE_Ble+0x194>)
 8002218:	482e      	ldr	r0, [pc, #184]	@ (80022d4 <ConfigBLE_Ble+0x19c>)
 800221a:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <ConfigBLE_Ble+0x1a0>)
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	f7ff ff2a 	bl	8002078 <SendATreply_Ble>
 8002224:	0002      	movs	r2, r0
 8002226:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d10b      	bne.n	8002246 <ConfigBLE_Ble+0x10e>
				WaitSerAnsw_Ble_func(1);
 800222e:	2001      	movs	r0, #1
 8002230:	f000 fb24 	bl	800287c <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 1;
				BaudRateTest = 8;
 8002234:	4b29      	ldr	r3, [pc, #164]	@ (80022dc <ConfigBLE_Ble+0x1a4>)
 8002236:	2208      	movs	r2, #8
 8002238:	601a      	str	r2, [r3, #0]
				ChangeBaud_Ble (115200);
 800223a:	23e1      	movs	r3, #225	@ 0xe1
 800223c:	025b      	lsls	r3, r3, #9
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f852 	bl	80022e8 <ChangeBaud_Ble>
			}
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
				ParamItem = 1;
			}
			break;
 8002244:	e02c      	b.n	80022a0 <ConfigBLE_Ble+0x168>
			else if (!WaitSerAnsw_Ble){			// ya expiro el tiempo de haber mandado el comando   "+++"
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <ConfigBLE_Ble+0x190>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4053      	eors	r3, r2
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d025      	beq.n	80022a0 <ConfigBLE_Ble+0x168>
				ParamItem = 1;
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]
			break;
 800225a:	e021      	b.n	80022a0 <ConfigBLE_Ble+0x168>
	  case 5:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 800225c:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	001a      	movs	r2, r3
 8002262:	4916      	ldr	r1, [pc, #88]	@ (80022bc <ConfigBLE_Ble+0x184>)
 8002264:	481e      	ldr	r0, [pc, #120]	@ (80022e0 <ConfigBLE_Ble+0x1a8>)
 8002266:	23fa      	movs	r3, #250	@ 0xfa
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	f7ff ff03 	bl	8002078 <SendATreply_Ble>
 8002272:	0002      	movs	r2, r0
 8002274:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <ConfigBLE_Ble+0x17c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d113      	bne.n	80022a4 <ConfigBLE_Ble+0x16c>
				WaitSerAnsw_Ble_func(6);
 800227c:	2006      	movs	r0, #6
 800227e:	f000 fafd 	bl	800287c <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8002282:	e00f      	b.n	80022a4 <ConfigBLE_Ble+0x16c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <ConfigBLE_Ble+0x1ac>)
 8002286:	2202      	movs	r2, #2
 8002288:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 faf6 	bl	800287c <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8002290:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8002292:	e008      	b.n	80022a6 <ConfigBLE_Ble+0x16e>
			break;
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	e006      	b.n	80022a6 <ConfigBLE_Ble+0x16e>
			break;
 8002298:	46c0      	nop			@ (mov r8, r8)
 800229a:	e004      	b.n	80022a6 <ConfigBLE_Ble+0x16e>
			break;
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	e002      	b.n	80022a6 <ConfigBLE_Ble+0x16e>
			break;
 80022a0:	46c0      	nop			@ (mov r8, r8)
 80022a2:	e000      	b.n	80022a6 <ConfigBLE_Ble+0x16e>
			break;
 80022a4:	46c0      	nop			@ (mov r8, r8)
	}
}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000843 	.word	0x20000843
 80022b0:	50000800 	.word	0x50000800
 80022b4:	20000000 	.word	0x20000000
 80022b8:	08017d58 	.word	0x08017d58
 80022bc:	08017c88 	.word	0x08017c88
 80022c0:	08017c94 	.word	0x08017c94
 80022c4:	08017ca0 	.word	0x08017ca0
 80022c8:	20000321 	.word	0x20000321
 80022cc:	08017ca4 	.word	0x08017ca4
 80022d0:	08017cac 	.word	0x08017cac
 80022d4:	08017cb8 	.word	0x08017cb8
 80022d8:	00000bb8 	.word	0x00000bb8
 80022dc:	20000004 	.word	0x20000004
 80022e0:	08017cc4 	.word	0x08017cc4
 80022e4:	20000050 	.word	0x20000050

080022e8 <ChangeBaud_Ble>:
void ChangeBaud_Ble (uint32_t USART2_BAUDRATE){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /*
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
 80022f0:	46c0      	nop			@ (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <GetParamBluetooth_Ble>:
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af02      	add	r7, sp, #8
	uint8_t i =0;
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8002304:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <GetParamBluetooth_Ble+0xa0>)
 8002306:	2200      	movs	r2, #0
 8002308:	2140      	movs	r1, #64	@ 0x40
 800230a:	0018      	movs	r0, r3
 800230c:	f00e f9c1 	bl	8010692 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8002310:	4b22      	ldr	r3, [pc, #136]	@ (800239c <GetParamBluetooth_Ble+0xa4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d002      	beq.n	800231e <GetParamBluetooth_Ble+0x26>
 8002318:	2b02      	cmp	r3, #2
 800231a:	d033      	beq.n	8002384 <GetParamBluetooth_Ble+0x8c>
		 break;
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
	 break;
	}
}
 800231c:	e037      	b.n	800238e <GetParamBluetooth_Ble+0x96>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 800231e:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <GetParamBluetooth_Ble+0xa4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	001a      	movs	r2, r3
 8002324:	491e      	ldr	r1, [pc, #120]	@ (80023a0 <GetParamBluetooth_Ble+0xa8>)
 8002326:	481f      	ldr	r0, [pc, #124]	@ (80023a4 <GetParamBluetooth_Ble+0xac>)
 8002328:	23fa      	movs	r3, #250	@ 0xfa
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2300      	movs	r3, #0
 8002330:	f7ff fea2 	bl	8002078 <SendATreply_Ble>
 8002334:	0002      	movs	r2, r0
 8002336:	4b19      	ldr	r3, [pc, #100]	@ (800239c <GetParamBluetooth_Ble+0xa4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d126      	bne.n	800238c <GetParamBluetooth_Ble+0x94>
			 foo = strchr(SerialAnswBLE,'=');
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <GetParamBluetooth_Ble+0xb0>)
 8002340:	213d      	movs	r1, #61	@ 0x3d
 8002342:	0018      	movs	r0, r3
 8002344:	f015 fc3a 	bl	8017bbc <strchr>
 8002348:	0003      	movs	r3, r0
 800234a:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e00f      	b.n	8002374 <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	18d2      	adds	r2, r2, r3
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3302      	adds	r3, #2
 8002364:	7811      	ldrb	r1, [r2, #0]
 8002366:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <GetParamBluetooth_Ble+0xb4>)
 8002368:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	3201      	adds	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b0b      	cmp	r3, #11
 800237a:	d9eb      	bls.n	8002354 <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 800237c:	4b07      	ldr	r3, [pc, #28]	@ (800239c <GetParamBluetooth_Ble+0xa4>)
 800237e:	2202      	movs	r2, #2
 8002380:	601a      	str	r2, [r3, #0]
		 break;
 8002382:	e003      	b.n	800238c <GetParamBluetooth_Ble+0x94>
		 BluetoothState = 3;
 8002384:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <GetParamBluetooth_Ble+0xb8>)
 8002386:	2203      	movs	r2, #3
 8002388:	701a      	strb	r2, [r3, #0]
	 break;
 800238a:	e000      	b.n	800238e <GetParamBluetooth_Ble+0x96>
		 break;
 800238c:	46c0      	nop			@ (mov r8, r8)
}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	50000800 	.word	0x50000800
 800239c:	20000000 	.word	0x20000000
 80023a0:	08017ce0 	.word	0x08017ce0
 80023a4:	08017cec 	.word	0x08017cec
 80023a8:	20000980 	.word	0x20000980
 80023ac:	20000d1c 	.word	0x20000d1c
 80023b0:	20000050 	.word	0x20000050

080023b4 <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
    asm ("nop");
 80023ba:	46c0      	nop			@ (mov r8, r8)

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 80023bc:	4b55      	ldr	r3, [pc, #340]	@ (8002514 <TransmitReceive_Ble+0x160>)
 80023be:	2200      	movs	r2, #0
 80023c0:	2140      	movs	r1, #64	@ 0x40
 80023c2:	0018      	movs	r0, r3
 80023c4:	f00e f965 	bl	8010692 <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 80023c8:	f7ff fdee 	bl	8001fa8 <serialEvent_Ble>
	if (receivecomplete_Ble){
 80023cc:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <TransmitReceive_Ble+0x164>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d100      	bne.n	80023d6 <TransmitReceive_Ble+0x22>
 80023d4:	e1b9      	b.n	800274a <TransmitReceive_Ble+0x396>
		 receivecomplete_Ble = 0;
 80023d6:	4b50      	ldr	r3, [pc, #320]	@ (8002518 <TransmitReceive_Ble+0x164>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 80023dc:	4b4f      	ldr	r3, [pc, #316]	@ (800251c <TransmitReceive_Ble+0x168>)
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <TransmitReceive_Ble+0x36>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 80023e4:	4b4d      	ldr	r3, [pc, #308]	@ (800251c <TransmitReceive_Ble+0x168>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 80023ea:	494d      	ldr	r1, [pc, #308]	@ (8002520 <TransmitReceive_Ble+0x16c>)
 80023ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002524 <TransmitReceive_Ble+0x170>)
 80023ee:	2202      	movs	r2, #2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f015 fbcd 	bl	8017b90 <memcmp>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d102      	bne.n	8002400 <TransmitReceive_Ble+0x4c>
			 codeTX = 0x21;
 80023fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002528 <TransmitReceive_Ble+0x174>)
 80023fc:	2221      	movs	r2, #33	@ 0x21
 80023fe:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 8002400:	494a      	ldr	r1, [pc, #296]	@ (800252c <TransmitReceive_Ble+0x178>)
 8002402:	4b48      	ldr	r3, [pc, #288]	@ (8002524 <TransmitReceive_Ble+0x170>)
 8002404:	2202      	movs	r2, #2
 8002406:	0018      	movs	r0, r3
 8002408:	f015 fbc2 	bl	8017b90 <memcmp>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d102      	bne.n	8002416 <TransmitReceive_Ble+0x62>
			 codeTX = 0x5C;
 8002410:	4b45      	ldr	r3, [pc, #276]	@ (8002528 <TransmitReceive_Ble+0x174>)
 8002412:	225c      	movs	r2, #92	@ 0x5c
 8002414:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 8002416:	4946      	ldr	r1, [pc, #280]	@ (8002530 <TransmitReceive_Ble+0x17c>)
 8002418:	4b42      	ldr	r3, [pc, #264]	@ (8002524 <TransmitReceive_Ble+0x170>)
 800241a:	2202      	movs	r2, #2
 800241c:	0018      	movs	r0, r3
 800241e:	f015 fbb7 	bl	8017b90 <memcmp>
 8002422:	1e03      	subs	r3, r0, #0
 8002424:	d102      	bne.n	800242c <TransmitReceive_Ble+0x78>
			 codeTX = 0x80;
 8002426:	4b40      	ldr	r3, [pc, #256]	@ (8002528 <TransmitReceive_Ble+0x174>)
 8002428:	2280      	movs	r2, #128	@ 0x80
 800242a:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 800242c:	4941      	ldr	r1, [pc, #260]	@ (8002534 <TransmitReceive_Ble+0x180>)
 800242e:	4b3d      	ldr	r3, [pc, #244]	@ (8002524 <TransmitReceive_Ble+0x170>)
 8002430:	2202      	movs	r2, #2
 8002432:	0018      	movs	r0, r3
 8002434:	f015 fbac 	bl	8017b90 <memcmp>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d102      	bne.n	8002442 <TransmitReceive_Ble+0x8e>
			 codeTX = 0x3D;
 800243c:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <TransmitReceive_Ble+0x174>)
 800243e:	223d      	movs	r2, #61	@ 0x3d
 8002440:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 8002442:	493d      	ldr	r1, [pc, #244]	@ (8002538 <TransmitReceive_Ble+0x184>)
 8002444:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <TransmitReceive_Ble+0x170>)
 8002446:	2202      	movs	r2, #2
 8002448:	0018      	movs	r0, r3
 800244a:	f015 fba1 	bl	8017b90 <memcmp>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d106      	bne.n	8002460 <TransmitReceive_Ble+0xac>
			 timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
 8002452:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <TransmitReceive_Ble+0x188>)
 8002454:	22ff      	movs	r2, #255	@ 0xff
 8002456:	701a      	strb	r2, [r3, #0]

			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 8002458:	f000 fa26 	bl	80028a8 <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 800245c:	f000 fa32 	bl	80028c4 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 8002460:	4937      	ldr	r1, [pc, #220]	@ (8002540 <TransmitReceive_Ble+0x18c>)
 8002462:	4b30      	ldr	r3, [pc, #192]	@ (8002524 <TransmitReceive_Ble+0x170>)
 8002464:	2202      	movs	r2, #2
 8002466:	0018      	movs	r0, r3
 8002468:	f015 fb92 	bl	8017b90 <memcmp>
 800246c:	1e03      	subs	r3, r0, #0
 800246e:	d112      	bne.n	8002496 <TransmitReceive_Ble+0xe2>
		    asm ("nop");
 8002470:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 8002472:	4b34      	ldr	r3, [pc, #208]	@ (8002544 <TransmitReceive_Ble+0x190>)
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <TransmitReceive_Ble+0x194>)
 8002478:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 800247a:	4b33      	ldr	r3, [pc, #204]	@ (8002548 <TransmitReceive_Ble+0x194>)
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	4b33      	ldr	r3, [pc, #204]	@ (800254c <TransmitReceive_Ble+0x198>)
 8002480:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 8002482:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <TransmitReceive_Ble+0x19c>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002488:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <TransmitReceive_Ble+0x19c>)
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	4b2f      	ldr	r3, [pc, #188]	@ (800254c <TransmitReceive_Ble+0x198>)
 800248e:	0011      	movs	r1, r2
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff fd65 	bl	8001f60 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 8002496:	492f      	ldr	r1, [pc, #188]	@ (8002554 <TransmitReceive_Ble+0x1a0>)
 8002498:	4b22      	ldr	r3, [pc, #136]	@ (8002524 <TransmitReceive_Ble+0x170>)
 800249a:	2202      	movs	r2, #2
 800249c:	0018      	movs	r0, r3
 800249e:	f015 fb77 	bl	8017b90 <memcmp>
 80024a2:	1e03      	subs	r3, r0, #0
 80024a4:	d16c      	bne.n	8002580 <TransmitReceive_Ble+0x1cc>
			uint8_t foo,foo2;
		    asm ("nop");
 80024a6:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 80024a8:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <TransmitReceive_Ble+0x194>)
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	1dfb      	adds	r3, r7, #7
 80024ae:	210f      	movs	r1, #15
 80024b0:	400a      	ands	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b0b      	cmp	r3, #11
 80024ba:	d905      	bls.n	80024c8 <TransmitReceive_Ble+0x114>
			  foo = PasswordALG & (~0xF8);
 80024bc:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <TransmitReceive_Ble+0x194>)
 80024be:	781a      	ldrb	r2, [r3, #0]
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	2107      	movs	r1, #7
 80024c4:	400a      	ands	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	3302      	adds	r3, #2
 80024ce:	4a22      	ldr	r2, [pc, #136]	@ (8002558 <TransmitReceive_Ble+0x1a4>)
 80024d0:	5cd2      	ldrb	r2, [r2, r3]
 80024d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002548 <TransmitReceive_Ble+0x194>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	3a01      	subs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <TransmitReceive_Ble+0x170>)
 80024e2:	789b      	ldrb	r3, [r3, #2]
 80024e4:	1dba      	adds	r2, r7, #6
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d139      	bne.n	8002560 <TransmitReceive_Ble+0x1ac>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <TransmitReceive_Ble+0x1a8>)
 80024ee:	2272      	movs	r2, #114	@ 0x72
 80024f0:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <TransmitReceive_Ble+0x198>)
 80024f4:	22f1      	movs	r2, #241	@ 0xf1
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <TransmitReceive_Ble+0x198>)
 80024fa:	223d      	movs	r2, #61	@ 0x3d
 80024fc:	705a      	strb	r2, [r3, #1]
 80024fe:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <TransmitReceive_Ble+0x19c>)
 8002500:	2202      	movs	r2, #2
 8002502:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <TransmitReceive_Ble+0x19c>)
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	4b10      	ldr	r3, [pc, #64]	@ (800254c <TransmitReceive_Ble+0x198>)
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff fd27 	bl	8001f60 <SerializeString2>
 8002512:	e035      	b.n	8002580 <TransmitReceive_Ble+0x1cc>
 8002514:	50000800 	.word	0x50000800
 8002518:	20000322 	.word	0x20000322
 800251c:	20000e18 	.word	0x20000e18
 8002520:	08017cf8 	.word	0x08017cf8
 8002524:	20000980 	.word	0x20000980
 8002528:	20000d60 	.word	0x20000d60
 800252c:	08017cfc 	.word	0x08017cfc
 8002530:	08017d00 	.word	0x08017d00
 8002534:	08017d04 	.word	0x08017d04
 8002538:	08017d08 	.word	0x08017d08
 800253c:	20000e23 	.word	0x20000e23
 8002540:	08017d0c 	.word	0x08017d0c
 8002544:	20000331 	.word	0x20000331
 8002548:	20000330 	.word	0x20000330
 800254c:	20000d74 	.word	0x20000d74
 8002550:	20000d6e 	.word	0x20000d6e
 8002554:	08017d10 	.word	0x08017d10
 8002558:	20000d1c 	.word	0x20000d1c
 800255c:	20000332 	.word	0x20000332
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 8002560:	4b8d      	ldr	r3, [pc, #564]	@ (8002798 <TransmitReceive_Ble+0x3e4>)
 8002562:	22f1      	movs	r2, #241	@ 0xf1
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	4b8c      	ldr	r3, [pc, #560]	@ (8002798 <TransmitReceive_Ble+0x3e4>)
 8002568:	223e      	movs	r2, #62	@ 0x3e
 800256a:	705a      	strb	r2, [r3, #1]
 800256c:	4b8b      	ldr	r3, [pc, #556]	@ (800279c <TransmitReceive_Ble+0x3e8>)
 800256e:	2202      	movs	r2, #2
 8002570:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002572:	4b8a      	ldr	r3, [pc, #552]	@ (800279c <TransmitReceive_Ble+0x3e8>)
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	4b88      	ldr	r3, [pc, #544]	@ (8002798 <TransmitReceive_Ble+0x3e4>)
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f7ff fcf0 	bl	8001f60 <SerializeString2>
			}
		}

		if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
 8002580:	4b87      	ldr	r3, [pc, #540]	@ (80027a0 <TransmitReceive_Ble+0x3ec>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b72      	cmp	r3, #114	@ 0x72
 8002586:	d004      	beq.n	8002592 <TransmitReceive_Ble+0x1de>
 8002588:	4b86      	ldr	r3, [pc, #536]	@ (80027a4 <TransmitReceive_Ble+0x3f0>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d100      	bne.n	8002592 <TransmitReceive_Ble+0x1de>
 8002590:	e0db      	b.n	800274a <TransmitReceive_Ble+0x396>

		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 8002592:	4985      	ldr	r1, [pc, #532]	@ (80027a8 <TransmitReceive_Ble+0x3f4>)
 8002594:	4b85      	ldr	r3, [pc, #532]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002596:	2202      	movs	r2, #2
 8002598:	0018      	movs	r0, r3
 800259a:	f015 faf9 	bl	8017b90 <memcmp>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d102      	bne.n	80025a8 <TransmitReceive_Ble+0x1f4>
			 codeTX = 0x60;
 80025a2:	4b83      	ldr	r3, [pc, #524]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80025a4:	2260      	movs	r2, #96	@ 0x60
 80025a6:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 80025a8:	4982      	ldr	r1, [pc, #520]	@ (80027b4 <TransmitReceive_Ble+0x400>)
 80025aa:	4b80      	ldr	r3, [pc, #512]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80025ac:	2202      	movs	r2, #2
 80025ae:	0018      	movs	r0, r3
 80025b0:	f015 faee 	bl	8017b90 <memcmp>
 80025b4:	1e03      	subs	r3, r0, #0
 80025b6:	d102      	bne.n	80025be <TransmitReceive_Ble+0x20a>
			 codeTX = 0x61;
 80025b8:	4b7d      	ldr	r3, [pc, #500]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80025ba:	2261      	movs	r2, #97	@ 0x61
 80025bc:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 80025be:	497e      	ldr	r1, [pc, #504]	@ (80027b8 <TransmitReceive_Ble+0x404>)
 80025c0:	4b7a      	ldr	r3, [pc, #488]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f015 fae3 	bl	8017b90 <memcmp>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d102      	bne.n	80025d4 <TransmitReceive_Ble+0x220>
			 codeTX = 0x53;
 80025ce:	4b78      	ldr	r3, [pc, #480]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80025d0:	2253      	movs	r2, #83	@ 0x53
 80025d2:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 80025d4:	4979      	ldr	r1, [pc, #484]	@ (80027bc <TransmitReceive_Ble+0x408>)
 80025d6:	4b75      	ldr	r3, [pc, #468]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80025d8:	2202      	movs	r2, #2
 80025da:	0018      	movs	r0, r3
 80025dc:	f015 fad8 	bl	8017b90 <memcmp>
 80025e0:	1e03      	subs	r3, r0, #0
 80025e2:	d102      	bne.n	80025ea <TransmitReceive_Ble+0x236>
			 codeTX = 0x50;
 80025e4:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80025e6:	2250      	movs	r2, #80	@ 0x50
 80025e8:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 80025ea:	4975      	ldr	r1, [pc, #468]	@ (80027c0 <TransmitReceive_Ble+0x40c>)
 80025ec:	4b6f      	ldr	r3, [pc, #444]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80025ee:	2202      	movs	r2, #2
 80025f0:	0018      	movs	r0, r3
 80025f2:	f015 facd 	bl	8017b90 <memcmp>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d102      	bne.n	8002600 <TransmitReceive_Ble+0x24c>
			 codeTX = 0x51;
 80025fa:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80025fc:	2251      	movs	r2, #81	@ 0x51
 80025fe:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8002600:	4970      	ldr	r1, [pc, #448]	@ (80027c4 <TransmitReceive_Ble+0x410>)
 8002602:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002604:	2202      	movs	r2, #2
 8002606:	0018      	movs	r0, r3
 8002608:	f015 fac2 	bl	8017b90 <memcmp>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d102      	bne.n	8002616 <TransmitReceive_Ble+0x262>
			 codeTX = 0x46;
 8002610:	4b67      	ldr	r3, [pc, #412]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002612:	2246      	movs	r2, #70	@ 0x46
 8002614:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8002616:	496c      	ldr	r1, [pc, #432]	@ (80027c8 <TransmitReceive_Ble+0x414>)
 8002618:	4b64      	ldr	r3, [pc, #400]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 800261a:	2202      	movs	r2, #2
 800261c:	0018      	movs	r0, r3
 800261e:	f015 fab7 	bl	8017b90 <memcmp>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d102      	bne.n	800262c <TransmitReceive_Ble+0x278>
			 codeTX = 0x49;
 8002626:	4b62      	ldr	r3, [pc, #392]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002628:	2249      	movs	r2, #73	@ 0x49
 800262a:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 800262c:	4967      	ldr	r1, [pc, #412]	@ (80027cc <TransmitReceive_Ble+0x418>)
 800262e:	4b5f      	ldr	r3, [pc, #380]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002630:	2202      	movs	r2, #2
 8002632:	0018      	movs	r0, r3
 8002634:	f015 faac 	bl	8017b90 <memcmp>
 8002638:	1e03      	subs	r3, r0, #0
 800263a:	d102      	bne.n	8002642 <TransmitReceive_Ble+0x28e>
			 codeTX = 0x4A;
 800263c:	4b5c      	ldr	r3, [pc, #368]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 800263e:	224a      	movs	r2, #74	@ 0x4a
 8002640:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 8002642:	4963      	ldr	r1, [pc, #396]	@ (80027d0 <TransmitReceive_Ble+0x41c>)
 8002644:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002646:	2202      	movs	r2, #2
 8002648:	0018      	movs	r0, r3
 800264a:	f015 faa1 	bl	8017b90 <memcmp>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d102      	bne.n	8002658 <TransmitReceive_Ble+0x2a4>
			 codeTX = 0x54;
 8002652:	4b57      	ldr	r3, [pc, #348]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002654:	2254      	movs	r2, #84	@ 0x54
 8002656:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8002658:	495e      	ldr	r1, [pc, #376]	@ (80027d4 <TransmitReceive_Ble+0x420>)
 800265a:	4b54      	ldr	r3, [pc, #336]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 800265c:	2202      	movs	r2, #2
 800265e:	0018      	movs	r0, r3
 8002660:	f015 fa96 	bl	8017b90 <memcmp>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d102      	bne.n	800266e <TransmitReceive_Ble+0x2ba>
	   		 codeTX = 0x80;
 8002668:	4b51      	ldr	r3, [pc, #324]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 800266a:	2280      	movs	r2, #128	@ 0x80
 800266c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 800266e:	495a      	ldr	r1, [pc, #360]	@ (80027d8 <TransmitReceive_Ble+0x424>)
 8002670:	4b4e      	ldr	r3, [pc, #312]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002672:	2202      	movs	r2, #2
 8002674:	0018      	movs	r0, r3
 8002676:	f015 fa8b 	bl	8017b90 <memcmp>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d102      	bne.n	8002684 <TransmitReceive_Ble+0x2d0>
	   		 codeTX = 0x3D;
 800267e:	4b4c      	ldr	r3, [pc, #304]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002680:	223d      	movs	r2, #61	@ 0x3d
 8002682:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 8002684:	4955      	ldr	r1, [pc, #340]	@ (80027dc <TransmitReceive_Ble+0x428>)
 8002686:	4b49      	ldr	r3, [pc, #292]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002688:	2202      	movs	r2, #2
 800268a:	0018      	movs	r0, r3
 800268c:	f015 fa80 	bl	8017b90 <memcmp>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d102      	bne.n	800269a <TransmitReceive_Ble+0x2e6>
			 codeTX = 0x55;
 8002694:	4b46      	ldr	r3, [pc, #280]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002696:	2255      	movs	r2, #85	@ 0x55
 8002698:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 800269a:	4951      	ldr	r1, [pc, #324]	@ (80027e0 <TransmitReceive_Ble+0x42c>)
 800269c:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 800269e:	2202      	movs	r2, #2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f015 fa75 	bl	8017b90 <memcmp>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d102      	bne.n	80026b0 <TransmitReceive_Ble+0x2fc>
	   		 codeTX = 0x56;
 80026aa:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80026ac:	2256      	movs	r2, #86	@ 0x56
 80026ae:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 80026b0:	494c      	ldr	r1, [pc, #304]	@ (80027e4 <TransmitReceive_Ble+0x430>)
 80026b2:	4b3e      	ldr	r3, [pc, #248]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80026b4:	2202      	movs	r2, #2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f015 fa6a 	bl	8017b90 <memcmp>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d102      	bne.n	80026c6 <TransmitReceive_Ble+0x312>
	   		 codeTX = 0x57;
 80026c0:	4b3b      	ldr	r3, [pc, #236]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80026c2:	2257      	movs	r2, #87	@ 0x57
 80026c4:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 80026c6:	4948      	ldr	r1, [pc, #288]	@ (80027e8 <TransmitReceive_Ble+0x434>)
 80026c8:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80026ca:	2202      	movs	r2, #2
 80026cc:	0018      	movs	r0, r3
 80026ce:	f015 fa5f 	bl	8017b90 <memcmp>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d102      	bne.n	80026dc <TransmitReceive_Ble+0x328>
	   		 codeTX = 0x58;
 80026d6:	4b36      	ldr	r3, [pc, #216]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80026d8:	2258      	movs	r2, #88	@ 0x58
 80026da:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 80026dc:	4943      	ldr	r1, [pc, #268]	@ (80027ec <TransmitReceive_Ble+0x438>)
 80026de:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80026e0:	2202      	movs	r2, #2
 80026e2:	0018      	movs	r0, r3
 80026e4:	f015 fa54 	bl	8017b90 <memcmp>
 80026e8:	1e03      	subs	r3, r0, #0
 80026ea:	d102      	bne.n	80026f2 <TransmitReceive_Ble+0x33e>
	   		 codeTX = 0x59;
 80026ec:	4b30      	ldr	r3, [pc, #192]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 80026ee:	2259      	movs	r2, #89	@ 0x59
 80026f0:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 80026f2:	493f      	ldr	r1, [pc, #252]	@ (80027f0 <TransmitReceive_Ble+0x43c>)
 80026f4:	4b2d      	ldr	r3, [pc, #180]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 80026f6:	2202      	movs	r2, #2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f015 fa49 	bl	8017b90 <memcmp>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d102      	bne.n	8002708 <TransmitReceive_Ble+0x354>
	    	 codeTX = 0x5A;
 8002702:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002704:	225a      	movs	r2, #90	@ 0x5a
 8002706:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 8002708:	493a      	ldr	r1, [pc, #232]	@ (80027f4 <TransmitReceive_Ble+0x440>)
 800270a:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 800270c:	2202      	movs	r2, #2
 800270e:	0018      	movs	r0, r3
 8002710:	f015 fa3e 	bl	8017b90 <memcmp>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d102      	bne.n	800271e <TransmitReceive_Ble+0x36a>
	   		 codeTX = 0x5B;
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 800271a:	225b      	movs	r2, #91	@ 0x5b
 800271c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 800271e:	4936      	ldr	r1, [pc, #216]	@ (80027f8 <TransmitReceive_Ble+0x444>)
 8002720:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002722:	2202      	movs	r2, #2
 8002724:	0018      	movs	r0, r3
 8002726:	f015 fa33 	bl	8017b90 <memcmp>
 800272a:	1e03      	subs	r3, r0, #0
 800272c:	d102      	bne.n	8002734 <TransmitReceive_Ble+0x380>
		 	 codeTX = 0x5C;
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002730:	225c      	movs	r2, #92	@ 0x5c
 8002732:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8002734:	4931      	ldr	r1, [pc, #196]	@ (80027fc <TransmitReceive_Ble+0x448>)
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <TransmitReceive_Ble+0x3f8>)
 8002738:	2202      	movs	r2, #2
 800273a:	0018      	movs	r0, r3
 800273c:	f015 fa28 	bl	8017b90 <memcmp>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d102      	bne.n	800274a <TransmitReceive_Ble+0x396>
			  codeTX = 0x5F;
 8002744:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <TransmitReceive_Ble+0x3fc>)
 8002746:	225f      	movs	r2, #95	@ 0x5f
 8002748:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 800274a:	f004 f94d 	bl	80069e8 <millis>
 800274e:	0003      	movs	r3, r0
 8002750:	001a      	movs	r2, r3
 8002752:	4b2b      	ldr	r3, [pc, #172]	@ (8002800 <TransmitReceive_Ble+0x44c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b07      	cmp	r3, #7
 800275a:	d918      	bls.n	800278e <TransmitReceive_Ble+0x3da>
		TestMessMilis = millis();
 800275c:	f004 f944 	bl	80069e8 <millis>
 8002760:	0003      	movs	r3, r0
 8002762:	001a      	movs	r2, r3
 8002764:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <TransmitReceive_Ble+0x44c>)
 8002766:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <TransmitReceive_Ble+0x450>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b55      	cmp	r3, #85	@ 0x55
 800276e:	d102      	bne.n	8002776 <TransmitReceive_Ble+0x3c2>
		    asm ("nop");
 8002770:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 8002772:	f007 fff7 	bl	800a764 <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 8002776:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <TransmitReceive_Ble+0x450>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b55      	cmp	r3, #85	@ 0x55
 800277c:	d107      	bne.n	800278e <TransmitReceive_Ble+0x3da>
		    asm ("nop");
 800277e:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <TransmitReceive_Ble+0x3e8>)
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <TransmitReceive_Ble+0x3e4>)
 8002786:	0011      	movs	r1, r2
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff fbe9 	bl	8001f60 <SerializeString2>
		}
	}

}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	20000d74 	.word	0x20000d74
 800279c:	20000d6e 	.word	0x20000d6e
 80027a0:	20000332 	.word	0x20000332
 80027a4:	20000e23 	.word	0x20000e23
 80027a8:	08017d14 	.word	0x08017d14
 80027ac:	20000980 	.word	0x20000980
 80027b0:	20000d60 	.word	0x20000d60
 80027b4:	08017d18 	.word	0x08017d18
 80027b8:	08017d1c 	.word	0x08017d1c
 80027bc:	08017d20 	.word	0x08017d20
 80027c0:	08017d24 	.word	0x08017d24
 80027c4:	08017d28 	.word	0x08017d28
 80027c8:	08017d2c 	.word	0x08017d2c
 80027cc:	08017d30 	.word	0x08017d30
 80027d0:	08017d34 	.word	0x08017d34
 80027d4:	08017d00 	.word	0x08017d00
 80027d8:	08017d04 	.word	0x08017d04
 80027dc:	08017d38 	.word	0x08017d38
 80027e0:	08017d3c 	.word	0x08017d3c
 80027e4:	08017d40 	.word	0x08017d40
 80027e8:	08017d44 	.word	0x08017d44
 80027ec:	08017d48 	.word	0x08017d48
 80027f0:	08017d4c 	.word	0x08017d4c
 80027f4:	08017d50 	.word	0x08017d50
 80027f8:	08017cfc 	.word	0x08017cfc
 80027fc:	08017d54 	.word	0x08017d54
 8002800:	2000032c 	.word	0x2000032c
 8002804:	20000d55 	.word	0x20000d55

08002808 <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 800280c:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <Read_Inpunts_ble+0x60>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d026      	beq.n	8002862 <Read_Inpunts_ble+0x5a>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4a14      	ldr	r2, [pc, #80]	@ (800286c <Read_Inpunts_ble+0x64>)
 800281a:	0019      	movs	r1, r3
 800281c:	0010      	movs	r0, r2
 800281e:	f00d ff1b 	bl	8010658 <HAL_GPIO_ReadPin>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d014      	beq.n	8002850 <Read_Inpunts_ble+0x48>
				{
					if (CntDebInp1 <= 50)
 8002826:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <Read_Inpunts_ble+0x68>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b32      	cmp	r3, #50	@ 0x32
 800282c:	d805      	bhi.n	800283a <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <Read_Inpunts_ble+0x68>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <Read_Inpunts_ble+0x68>)
 8002838:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 800283a:	4b0d      	ldr	r3, [pc, #52]	@ (8002870 <Read_Inpunts_ble+0x68>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b32      	cmp	r3, #50	@ 0x32
 8002840:	d10f      	bne.n	8002862 <Read_Inpunts_ble+0x5a>
						{
							device_conected = 1;
 8002842:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <Read_Inpunts_ble+0x6c>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <Read_Inpunts_ble+0x68>)
 800284a:	2233      	movs	r2, #51	@ 0x33
 800284c:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;				// contador debounce Boton 1
					device_conected = 0;
					DevLock = 0;    //RGM_29/NOV/2023     //RM_20240304 Para agregar PASSWORD de seguridad BLE
				}
		}
}
 800284e:	e008      	b.n	8002862 <Read_Inpunts_ble+0x5a>
					CntDebInp1 = 0;				// contador debounce Boton 1
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <Read_Inpunts_ble+0x68>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
					device_conected = 0;
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <Read_Inpunts_ble+0x6c>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
					DevLock = 0;    //RGM_29/NOV/2023     //RM_20240304 Para agregar PASSWORD de seguridad BLE
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <Read_Inpunts_ble+0x70>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000840 	.word	0x20000840
 800286c:	50000400 	.word	0x50000400
 8002870:	20000328 	.word	0x20000328
 8002874:	20000844 	.word	0x20000844
 8002878:	20000332 	.word	0x20000332

0800287c <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	0002      	movs	r2, r0
 8002884:	1dfb      	adds	r3, r7, #7
 8002886:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <WaitSerAnsw_Ble_func+0x24>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <WaitSerAnsw_Ble_func+0x28>)
 8002894:	601a      	str	r2, [r3, #0]
}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b002      	add	sp, #8
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	20000321 	.word	0x20000321
 80028a4:	20000000 	.word	0x20000000

080028a8 <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <grabacion_exitosa_handshake+0x18>)
 80028ae:	22f1      	movs	r2, #241	@ 0xf1
 80028b0:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 80028b2:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <grabacion_exitosa_handshake+0x18>)
 80028b4:	223d      	movs	r2, #61	@ 0x3d
 80028b6:	705a      	strb	r2, [r3, #1]
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	20000d1c 	.word	0x20000d1c

080028c4 <manda_transmision>:

void manda_transmision (void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <manda_transmision+0x34>)
 80028ca:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <manda_transmision+0x38>)
 80028cc:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 80028ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <manda_transmision+0x3c>)
 80028d0:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <manda_transmision+0x38>)
 80028d2:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <manda_transmision+0x40>)
 80028d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002908 <manda_transmision+0x44>)
 80028d8:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <manda_transmision+0x48>)
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <manda_transmision+0x4c>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <manda_transmision+0x50>)
 80028e8:	2255      	movs	r2, #85	@ 0x55
 80028ea:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <manda_transmision+0x54>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]

}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000d50 	.word	0x20000d50
 80028fc:	20000d1c 	.word	0x20000d1c
 8002900:	20000d48 	.word	0x20000d48
 8002904:	20000d4c 	.word	0x20000d4c
 8002908:	20000d1d 	.word	0x20000d1d
 800290c:	20000d6c 	.word	0x20000d6c
 8002910:	20000d58 	.word	0x20000d58
 8002914:	20000d55 	.word	0x20000d55
 8002918:	20000d60 	.word	0x20000d60

0800291c <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 8002920:	4b40      	ldr	r3, [pc, #256]	@ (8002a24 <main10+0x108>)
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 8002928:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <main10+0x10c>)
 800292a:	2201      	movs	r2, #1
 800292c:	2108      	movs	r1, #8
 800292e:	0018      	movs	r0, r3
 8002930:	f00d feaf 	bl	8010692 <HAL_GPIO_WritePin>
 8002934:	e005      	b.n	8002942 <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 8002936:	4b3c      	ldr	r3, [pc, #240]	@ (8002a28 <main10+0x10c>)
 8002938:	2200      	movs	r2, #0
 800293a:	2108      	movs	r1, #8
 800293c:	0018      	movs	r0, r3
 800293e:	f00d fea8 	bl	8010692 <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 8002942:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <main10+0x108>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	0099      	lsls	r1, r3, #2
 800294e:	23a0      	movs	r3, #160	@ 0xa0
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	2201      	movs	r2, #1
 8002954:	0018      	movs	r0, r3
 8002956:	f00d fe9c 	bl	8010692 <HAL_GPIO_WritePin>
 800295a:	e007      	b.n	800296c <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	0099      	lsls	r1, r3, #2
 8002960:	23a0      	movs	r3, #160	@ 0xa0
 8002962:	05db      	lsls	r3, r3, #23
 8002964:	2200      	movs	r2, #0
 8002966:	0018      	movs	r0, r3
 8002968:	f00d fe93 	bl	8010692 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 800296c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <main10+0x108>)
 800296e:	789b      	ldrb	r3, [r3, #2]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	482b      	ldr	r0, [pc, #172]	@ (8002a28 <main10+0x10c>)
 800297a:	2201      	movs	r2, #1
 800297c:	0019      	movs	r1, r3
 800297e:	f00d fe88 	bl	8010692 <HAL_GPIO_WritePin>
 8002982:	e006      	b.n	8002992 <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4827      	ldr	r0, [pc, #156]	@ (8002a28 <main10+0x10c>)
 800298a:	2200      	movs	r2, #0
 800298c:	0019      	movs	r1, r3
 800298e:	f00d fe80 	bl	8010692 <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 8002992:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <main10+0x108>)
 8002994:	791b      	ldrb	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	0059      	lsls	r1, r3, #1
 800299e:	23a0      	movs	r3, #160	@ 0xa0
 80029a0:	05db      	lsls	r3, r3, #23
 80029a2:	2201      	movs	r2, #1
 80029a4:	0018      	movs	r0, r3
 80029a6:	f00d fe74 	bl	8010692 <HAL_GPIO_WritePin>
 80029aa:	e007      	b.n	80029bc <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	0059      	lsls	r1, r3, #1
 80029b0:	23a0      	movs	r3, #160	@ 0xa0
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	2200      	movs	r2, #0
 80029b6:	0018      	movs	r0, r3
 80029b8:	f00d fe6b 	bl	8010692 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <main10+0x110>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <main10+0x110>)
 80029c6:	701a      	strb	r2, [r3, #0]
		if(portX[rel_fn] && (cntproc & 0x01))
 80029c8:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <main10+0x108>)
 80029ca:	78db      	ldrb	r3, [r3, #3]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <main10+0xd2>
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <main10+0x110>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	001a      	movs	r2, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	d008      	beq.n	80029ee <main10+0xd2>
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	00d9      	lsls	r1, r3, #3
 80029e0:	23a0      	movs	r3, #160	@ 0xa0
 80029e2:	05db      	lsls	r3, r3, #23
 80029e4:	2201      	movs	r2, #1
 80029e6:	0018      	movs	r0, r3
 80029e8:	f00d fe53 	bl	8010692 <HAL_GPIO_WritePin>
 80029ec:	e007      	b.n	80029fe <main10+0xe2>
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	00d9      	lsls	r1, r3, #3
 80029f2:	23a0      	movs	r3, #160	@ 0xa0
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	2200      	movs	r2, #0
 80029f8:	0018      	movs	r0, r3
 80029fa:	f00d fe4a 	bl	8010692 <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <main10+0x114>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <main10+0x114>)
 8002a08:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <main10+0x114>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b27      	cmp	r3, #39	@ 0x27
 8002a10:	d904      	bls.n	8002a1c <main10+0x100>
        asm ("nop");
 8002a12:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 8002a14:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <main10+0x114>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	20000a94 	.word	0x20000a94
 8002a28:	50000800 	.word	0x50000800
 8002a2c:	20000a87 	.word	0x20000a87
 8002a30:	20000afa 	.word	0x20000afa

08002a34 <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 8002a38:	4b46      	ldr	r3, [pc, #280]	@ (8002b54 <retardoDeActuadores+0x120>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4053      	eors	r3, r2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d114      	bne.n	8002a70 <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 8002a46:	4b44      	ldr	r3, [pc, #272]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002a48:	785b      	ldrb	r3, [r3, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 8002a4e:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4053      	eors	r3, r2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10e      	bne.n	8002a7a <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	705a      	strb	r2, [r3, #1]
 8002a62:	e000      	b.n	8002a66 <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 8002a64:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 8002a66:	4b3d      	ldr	r3, [pc, #244]	@ (8002b5c <retardoDeActuadores+0x128>)
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f001 fe90 	bl	800478e <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 8002a6e:	e005      	b.n	8002a7c <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 8002a70:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[0] = 1;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 8002a72:	4b39      	ldr	r3, [pc, #228]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e000      	b.n	8002a7c <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 8002a7a:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 8002a7c:	4b35      	ldr	r3, [pc, #212]	@ (8002b54 <retardoDeActuadores+0x120>)
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4053      	eors	r3, r2
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d114      	bne.n	8002ab4 <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 8002a8a:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002a8c:	789b      	ldrb	r3, [r3, #2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 8002a92:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4053      	eors	r3, r2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10e      	bne.n	8002abe <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	709a      	strb	r2, [r3, #2]
 8002aa6:	e000      	b.n	8002aaa <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 8002aa8:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <retardoDeActuadores+0x12c>)
 8002aac:	0018      	movs	r0, r3
 8002aae:	f001 fe6e 	bl	800478e <decwreg>
			goto	revisa_ret_ventilador;		//
 8002ab2:	e005      	b.n	8002ac0 <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 8002ab4:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 8002ab6:	4b28      	ldr	r3, [pc, #160]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	709a      	strb	r2, [r3, #2]
 8002abc:	e000      	b.n	8002ac0 <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 8002abe:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 8002ac0:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <retardoDeActuadores+0x130>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4053      	eors	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d114      	bne.n	8002af8 <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4053      	eors	r3, r2
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10e      	bne.n	8002b02 <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	70da      	strb	r2, [r3, #3]
 8002aea:	e000      	b.n	8002aee <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 8002aec:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 8002aee:	4b1e      	ldr	r3, [pc, #120]	@ (8002b68 <retardoDeActuadores+0x134>)
 8002af0:	0018      	movs	r0, r3
 8002af2:	f001 fe4c 	bl	800478e <decwreg>
			goto	revisa_ret_lampara;		//
 8002af6:	e005      	b.n	8002b04 <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 8002af8:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 8002afa:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	70da      	strb	r2, [r3, #3]
 8002b00:	e000      	b.n	8002b04 <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 8002b02:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 8002b04:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <retardoDeActuadores+0x120>)
 8002b06:	789b      	ldrb	r3, [r3, #2]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4053      	eors	r3, r2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d114      	bne.n	8002b3c <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 8002b12:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002b14:	791b      	ldrb	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4053      	eors	r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10e      	bne.n	8002b46 <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	711a      	strb	r2, [r3, #4]
 8002b2e:	e000      	b.n	8002b32 <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 8002b30:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <retardoDeActuadores+0x138>)
 8002b34:	0018      	movs	r0, r3
 8002b36:	f001 fe2a 	bl	800478e <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 8002b3a:	e005      	b.n	8002b48 <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 8002b3c:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	711a      	strb	r2, [r3, #4]
 8002b44:	e000      	b.n	8002b48 <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 8002b46:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <retardoDeActuadores+0x124>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000ae0 	.word	0x20000ae0
 8002b58:	20000b98 	.word	0x20000b98
 8002b5c:	20000b92 	.word	0x20000b92
 8002b60:	20000b93 	.word	0x20000b93
 8002b64:	20000b1c 	.word	0x20000b1c
 8002b68:	20000b94 	.word	0x20000b94
 8002b6c:	20000b95 	.word	0x20000b95

08002b70 <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
    asm ("nop");
 8002b74:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 8002b76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 8002b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <calculando_tiempo_UNIX+0x138>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	2203      	movs	r2, #3
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <calculando_tiempo_UNIX+0x2e>
 8002b8a:	4b48      	ldr	r3, [pc, #288]	@ (8002cac <calculando_tiempo_UNIX+0x13c>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d905      	bls.n	8002b9e <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 8002b92:	4b44      	ldr	r3, [pc, #272]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a46      	ldr	r2, [pc, #280]	@ (8002cb0 <calculando_tiempo_UNIX+0x140>)
 8002b98:	189a      	adds	r2, r3, r2
 8002b9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002b9c:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 8002b9e:	4b43      	ldr	r3, [pc, #268]	@ (8002cac <calculando_tiempo_UNIX+0x13c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d013      	beq.n	8002bce <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 8002ba6:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <calculando_tiempo_UNIX+0x13c>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	1e5a      	subs	r2, r3, #1
 8002bac:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <calculando_tiempo_UNIX+0x144>)
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	58d2      	ldr	r2, [r2, r3]
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	011a      	lsls	r2, r3, #4
 8002bba:	1ad2      	subs	r2, r2, r3
 8002bbc:	0113      	lsls	r3, r2, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	01db      	lsls	r3, r3, #7
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	4b37      	ldr	r3, [pc, #220]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	18d2      	adds	r2, r2, r3
 8002bca:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002bcc:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 8002bce:	4b36      	ldr	r3, [pc, #216]	@ (8002ca8 <calculando_tiempo_UNIX+0x138>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	4a39      	ldr	r2, [pc, #228]	@ (8002cb8 <calculando_tiempo_UNIX+0x148>)
 8002bd4:	189a      	adds	r2, r3, r2
 8002bd6:	0013      	movs	r3, r2
 8002bd8:	025b      	lsls	r3, r3, #9
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	189b      	adds	r3, r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	189b      	adds	r3, r3, r2
 8002be4:	011a      	lsls	r2, r3, #4
 8002be6:	1ad2      	subs	r2, r2, r3
 8002be8:	01d3      	lsls	r3, r2, #7
 8002bea:	001a      	movs	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	001a      	movs	r2, r3
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	18d2      	adds	r2, r2, r3
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002bf8:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <calculando_tiempo_UNIX+0x138>)
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8002cbc <calculando_tiempo_UNIX+0x14c>)
 8002c00:	4694      	mov	ip, r2
 8002c02:	4463      	add	r3, ip
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da00      	bge.n	8002c0a <calculando_tiempo_UNIX+0x9a>
 8002c08:	3303      	adds	r3, #3
 8002c0a:	109b      	asrs	r3, r3, #2
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <calculando_tiempo_UNIX+0x150>)
 8002c10:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 8002c12:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc0 <calculando_tiempo_UNIX+0x150>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	001a      	movs	r2, r3
 8002c18:	0013      	movs	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	189b      	adds	r3, r3, r2
 8002c1e:	011a      	lsls	r2, r3, #4
 8002c20:	1ad2      	subs	r2, r2, r3
 8002c22:	0113      	lsls	r3, r2, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	01db      	lsls	r3, r3, #7
 8002c28:	001a      	movs	r2, r3
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	18d2      	adds	r2, r2, r3
 8002c30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c32:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 8002c34:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <calculando_tiempo_UNIX+0x154>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	1e5a      	subs	r2, r3, #1
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	011a      	lsls	r2, r3, #4
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	0113      	lsls	r3, r2, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	01db      	lsls	r3, r3, #7
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	18d2      	adds	r2, r2, r3
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c54:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 8002c56:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <calculando_tiempo_UNIX+0x158>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	0013      	movs	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	011a      	lsls	r2, r3, #4
 8002c64:	1ad2      	subs	r2, r2, r3
 8002c66:	0113      	lsls	r3, r2, #4
 8002c68:	001a      	movs	r2, r3
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	18d2      	adds	r2, r2, r3
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c72:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 8002c74:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <calculando_tiempo_UNIX+0x15c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	001a      	movs	r2, r3
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	001a      	movs	r2, r3
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	18d2      	adds	r2, r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c8c:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 8002c8e:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <calculando_tiempo_UNIX+0x160>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	001a      	movs	r2, r3
 8002c94:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	18d2      	adds	r2, r2, r3
 8002c9a:	4b02      	ldr	r3, [pc, #8]	@ (8002ca4 <calculando_tiempo_UNIX+0x134>)
 8002c9c:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000fd4 	.word	0x20000fd4
 8002ca8:	20000fcc 	.word	0x20000fcc
 8002cac:	20000fce 	.word	0x20000fce
 8002cb0:	00015180 	.word	0x00015180
 8002cb4:	200001bc 	.word	0x200001bc
 8002cb8:	fffff84e 	.word	0xfffff84e
 8002cbc:	fffff84f 	.word	0xfffff84f
 8002cc0:	20000fd8 	.word	0x20000fd8
 8002cc4:	20000fcf 	.word	0x20000fcf
 8002cc8:	20000fd0 	.word	0x20000fd0
 8002ccc:	20000fd1 	.word	0x20000fd1
 8002cd0:	20000fd2 	.word	0x20000fd2

08002cd4 <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;


//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	000a      	movs	r2, r1
 8002cde:	1cfb      	adds	r3, r7, #3
 8002ce0:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 8002ce2:	230e      	movs	r3, #14
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 8002cea:	230d      	movs	r3, #13
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e011      	b.n	8002d18 <prom8m1b+0x44>
		foo += array[i];
 8002cf4:	200d      	movs	r0, #13
 8002cf6:	183b      	adds	r3, r7, r0
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	0019      	movs	r1, r3
 8002d02:	220e      	movs	r2, #14
 8002d04:	18bb      	adds	r3, r7, r2
 8002d06:	18ba      	adds	r2, r7, r2
 8002d08:	8812      	ldrh	r2, [r2, #0]
 8002d0a:	188a      	adds	r2, r1, r2
 8002d0c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 8002d0e:	183b      	adds	r3, r7, r0
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	183b      	adds	r3, r7, r0
 8002d14:	3201      	adds	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	230d      	movs	r3, #13
 8002d1a:	18fa      	adds	r2, r7, r3
 8002d1c:	1cfb      	adds	r3, r7, #3
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3e6      	bcc.n	8002cf4 <prom8m1b+0x20>
	}
	foo /=  prom;
 8002d26:	240e      	movs	r4, #14
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	881a      	ldrh	r2, [r3, #0]
 8002d2c:	1cfb      	adds	r3, r7, #3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	0019      	movs	r1, r3
 8002d32:	0010      	movs	r0, r2
 8002d34:	f7fd fa7a 	bl	800022c <__divsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	801a      	strh	r2, [r3, #0]
	return foo;
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	881b      	ldrh	r3, [r3, #0]
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b005      	add	sp, #20
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 8002d52:	4bdc      	ldr	r3, [pc, #880]	@ (80030c4 <prog_param+0x378>)
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4053      	eors	r3, r2
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d133      	bne.n	8002dc8 <prog_param+0x7c>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 8002d60:	4bd9      	ldr	r3, [pc, #868]	@ (80030c8 <prog_param+0x37c>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 8002d66:	4bd9      	ldr	r3, [pc, #868]	@ (80030cc <prog_param+0x380>)
 8002d68:	2214      	movs	r2, #20
 8002d6a:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 8002d6c:	4bd8      	ldr	r3, [pc, #864]	@ (80030d0 <prog_param+0x384>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 8002d72:	4bd8      	ldr	r3, [pc, #864]	@ (80030d4 <prog_param+0x388>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8002d78:	230f      	movs	r3, #15
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e00a      	b.n	8002d98 <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 8002d82:	200f      	movs	r0, #15
 8002d84:	183b      	adds	r3, r7, r0
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4ad3      	ldr	r2, [pc, #844]	@ (80030d8 <prog_param+0x38c>)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 8002d8e:	183b      	adds	r3, r7, r0
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	3201      	adds	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	230f      	movs	r3, #15
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b07      	cmp	r3, #7
 8002da0:	d9ef      	bls.n	8002d82 <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
 8002da2:	4bce      	ldr	r3, [pc, #824]	@ (80030dc <prog_param+0x390>)
 8002da4:	60bb      	str	r3, [r7, #8]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 8002da6:	4bce      	ldr	r3, [pc, #824]	@ (80030e0 <prog_param+0x394>)
 8002da8:	607b      	str	r3, [r7, #4]

		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = *X;	//ld (Y), A
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	701a      	strb	r2, [r3, #0]
		X++;//incw X
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	3301      	adds	r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
		Y++;//incw Y
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	607b      	str	r3, [r7, #4]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4bc8      	ldr	r3, [pc, #800]	@ (80030e4 <prog_param+0x398>)
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d802      	bhi.n	8002dcc <prog_param+0x80>
			goto copy_eeprom;//jrule copy_eeprom
 8002dc6:	e7f0      	b.n	8002daa <prog_param+0x5e>
			goto no_set_prog;
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	e000      	b.n	8002dce <prog_param+0x82>
		}

no_set_prog:
 8002dcc:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 8002dce:	4bbe      	ldr	r3, [pc, #760]	@ (80030c8 <prog_param+0x37c>)
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <prog_param+0x8e>
 8002dd6:	f000 fc21 	bl	800361c <prog_param+0x8d0>
			goto ask_btn_prsd;
 8002dda:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 8002ddc:	1cfb      	adds	r3, r7, #3
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e00d      	b.n	8002e00 <prog_param+0xb4>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 8002de4:	1cfb      	adds	r3, r7, #3
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4abf      	ldr	r2, [pc, #764]	@ (80030e8 <prog_param+0x39c>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4053      	eors	r3, r2
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <prog_param+0xc4>
	for(uint8_t k=0; k<8; k++){
 8002df6:	1cfb      	adds	r3, r7, #3
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	1cfb      	adds	r3, r7, #3
 8002dfc:	3201      	adds	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	1cfb      	adds	r3, r7, #3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b07      	cmp	r3, #7
 8002e06:	d9ed      	bls.n	8002de4 <prog_param+0x98>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 8002e08:	4bb0      	ldr	r3, [pc, #704]	@ (80030cc <prog_param+0x380>)
 8002e0a:	2214      	movs	r2, #20
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e000      	b.n	8002e12 <prog_param+0xc6>
			goto no_btn_pres; //jreq no_btn_pres
 8002e10:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 8002e12:	4bae      	ldr	r3, [pc, #696]	@ (80030cc <prog_param+0x380>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <prog_param+0xd2>
 8002e1a:	f000 fbea 	bl	80035f2 <prog_param+0x8a6>
			goto no_exp_tmp;//jrne	no_exp_tmp
 8002e1e:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 8002e20:	4ba9      	ldr	r3, [pc, #676]	@ (80030c8 <prog_param+0x37c>)
 8002e22:	789b      	ldrb	r3, [r3, #2]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4053      	eors	r3, r2
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d114      	bne.n	8002e58 <prog_param+0x10c>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 8002e2e:	4ba6      	ldr	r3, [pc, #664]	@ (80030c8 <prog_param+0x37c>)
 8002e30:	791b      	ldrb	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d100      	bne.n	8002e38 <prog_param+0xec>
 8002e36:	e265      	b.n	8003304 <prog_param+0x5b8>
			goto jmp_nv2Menu2;
 8002e38:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 8002e3a:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8002e3c:	4bab      	ldr	r3, [pc, #684]	@ (80030ec <prog_param+0x3a0>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2207      	movs	r2, #7
 8002e42:	4013      	ands	r3, r2
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4baa      	ldr	r3, [pc, #680]	@ (80030f0 <prog_param+0x3a4>)
 8002e48:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 8002e4a:	4ba9      	ldr	r3, [pc, #676]	@ (80030f0 <prog_param+0x3a4>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d901      	bls.n	8002e56 <prog_param+0x10a>
 8002e52:	f000 fbbc 	bl	80035ce <prog_param+0x882>
 8002e56:	e2fd      	b.n	8003454 <prog_param+0x708>
			goto noMenu2;
 8002e58:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 8002e5a:	4b9b      	ldr	r3, [pc, #620]	@ (80030c8 <prog_param+0x37c>)
 8002e5c:	78db      	ldrb	r3, [r3, #3]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4053      	eors	r3, r2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d100      	bne.n	8002e6a <prog_param+0x11e>
 8002e68:	e0cc      	b.n	8003004 <prog_param+0x2b8>
			goto sel_param;
 8002e6a:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 8002e6c:	4b9e      	ldr	r3, [pc, #632]	@ (80030e8 <prog_param+0x39c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 8002e72:	4b9d      	ldr	r3, [pc, #628]	@ (80030e8 <prog_param+0x39c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 8002e78:	4b96      	ldr	r3, [pc, #600]	@ (80030d4 <prog_param+0x388>)
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80030f0 <prog_param+0x3a4>)
 8002e7e:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 8002e80:	4b9c      	ldr	r3, [pc, #624]	@ (80030f4 <prog_param+0x3a8>)
 8002e82:	2209      	movs	r2, #9
 8002e84:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 8002e86:	4b9c      	ldr	r3, [pc, #624]	@ (80030f8 <prog_param+0x3ac>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 8002e8c:	f000 fbd2 	bl	8003634 <md_dif_math>
		param = wreg;		//mov param,wreg
 8002e90:	4b9a      	ldr	r3, [pc, #616]	@ (80030fc <prog_param+0x3b0>)
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	4b8f      	ldr	r3, [pc, #572]	@ (80030d4 <prog_param+0x388>)
 8002e96:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 8002e98:	4b8e      	ldr	r3, [pc, #568]	@ (80030d4 <prog_param+0x388>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4b93      	ldr	r3, [pc, #588]	@ (80030f0 <prog_param+0x3a4>)
 8002ea4:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8002ea6:	4b92      	ldr	r3, [pc, #584]	@ (80030f0 <prog_param+0x3a4>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b09      	cmp	r3, #9
 8002eac:	d840      	bhi.n	8002f30 <prog_param+0x1e4>
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	4b93      	ldr	r3, [pc, #588]	@ (8003100 <prog_param+0x3b4>)
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 8002eb8:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 8002eba:	2125      	movs	r1, #37	@ 0x25
 8002ebc:	2005      	movs	r0, #5
 8002ebe:	f001 fd71 	bl	80049a4 <op_menu>
		goto ask_enter;//jra ask_enter
 8002ec2:	e03a      	b.n	8002f3a <prog_param+0x1ee>
			case 1: goto opc01m01;
 8002ec4:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	200d      	movs	r0, #13
 8002eca:	f001 fd6b 	bl	80049a4 <op_menu>
		goto ask_enter; // jra ask_enter
 8002ece:	e034      	b.n	8002f3a <prog_param+0x1ee>
			case 2: goto opc02m01;
 8002ed0:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8002ed2:	210a      	movs	r1, #10
 8002ed4:	2020      	movs	r0, #32
 8002ed6:	f001 fd65 	bl	80049a4 <op_menu>
		goto ask_enter;//jra ask_enter
 8002eda:	e02e      	b.n	8002f3a <prog_param+0x1ee>
			case 3: goto opc03m01;
 8002edc:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 8002ede:	210b      	movs	r1, #11
 8002ee0:	2020      	movs	r0, #32
 8002ee2:	f001 fd5f 	bl	80049a4 <op_menu>
		goto ask_enter;//jra ask_enter
 8002ee6:	e028      	b.n	8002f3a <prog_param+0x1ee>
			case 4: goto opc04m01;
 8002ee8:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8002eea:	210f      	movs	r1, #15
 8002eec:	2000      	movs	r0, #0
 8002eee:	f001 fd59 	bl	80049a4 <op_menu>
		goto ask_enter;//jra	ask_enter
 8002ef2:	e022      	b.n	8002f3a <prog_param+0x1ee>
			case 5: goto opc05m01;
 8002ef4:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 8002ef6:	2105      	movs	r1, #5
 8002ef8:	2025      	movs	r0, #37	@ 0x25
 8002efa:	f001 fd53 	bl	80049a4 <op_menu>
		goto ask_enter;//jra ask_enter
 8002efe:	e01c      	b.n	8002f3a <prog_param+0x1ee>
			case 6: goto opc06m01;
 8002f00:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 8002f02:	2127      	movs	r1, #39	@ 0x27
 8002f04:	200f      	movs	r0, #15
 8002f06:	f001 fd4d 	bl	80049a4 <op_menu>
		goto ask_enter;//jra ask_enter
 8002f0a:	e016      	b.n	8002f3a <prog_param+0x1ee>
			case 7: goto opc07m01;
 8002f0c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 8002f0e:	210a      	movs	r1, #10
 8002f10:	200f      	movs	r0, #15
 8002f12:	f001 fd47 	bl	80049a4 <op_menu>
		goto ask_enter;//jra	ask_enter
 8002f16:	e010      	b.n	8002f3a <prog_param+0x1ee>
			case 8: goto opc08m01;
 8002f18:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8002f1a:	210e      	movs	r1, #14
 8002f1c:	2005      	movs	r0, #5
 8002f1e:	f001 fd41 	bl	80049a4 <op_menu>
		goto ask_enter;//jra ask_enter
 8002f22:	e00a      	b.n	8002f3a <prog_param+0x1ee>
			case 9: goto opc09m01;
 8002f24:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 8002f26:	210e      	movs	r1, #14
 8002f28:	201f      	movs	r0, #31
 8002f2a:	f001 fd3b 	bl	80049a4 <op_menu>
		goto ask_enter;//jra	ask_enter
 8002f2e:	e004      	b.n	8002f3a <prog_param+0x1ee>
			default: goto opcNA;
 8002f30:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8002f32:	2126      	movs	r1, #38	@ 0x26
 8002f34:	2026      	movs	r0, #38	@ 0x26
 8002f36:	f001 fd35 	bl	80049a4 <op_menu>
		datled_clear();
 8002f3a:	f001 fd4d 	bl	80049d8 <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80030e8 <prog_param+0x39c>)
 8002f40:	789b      	ldrb	r3, [r3, #2]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4053      	eors	r3, r2
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d157      	bne.n	8002ffc <prog_param+0x2b0>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 8002f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80030c8 <prog_param+0x37c>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 8002f52:	4b60      	ldr	r3, [pc, #384]	@ (80030d4 <prog_param+0x388>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b09      	cmp	r3, #9
 8002f58:	d100      	bne.n	8002f5c <prog_param+0x210>
 8002f5a:	e34c      	b.n	80035f6 <prog_param+0x8aa>
			goto ask_set_prog;//jrne ask_set_prog
 8002f5c:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 8002f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80030d4 <prog_param+0x388>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d14c      	bne.n	8003000 <prog_param+0x2b4>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 8002f66:	4b5c      	ldr	r3, [pc, #368]	@ (80030d8 <prog_param+0x38c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4053      	eors	r3, r2
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d103      	bne.n	8002f7c <prog_param+0x230>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 8002f74:	4b63      	ldr	r3, [pc, #396]	@ (8003104 <prog_param+0x3b8>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <prog_param+0x232>
			goto no_desh_forz;
 8002f7c:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 8002f7e:	4b56      	ldr	r3, [pc, #344]	@ (80030d8 <prog_param+0x38c>)
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4053      	eors	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d12f      	bne.n	8002fec <prog_param+0x2a0>
		flags_menu[1] = 0; //bres flags_menu,#1
 8002f8c:	4b52      	ldr	r3, [pc, #328]	@ (80030d8 <prog_param+0x38c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 8002f92:	4b53      	ldr	r3, [pc, #332]	@ (80030e0 <prog_param+0x394>)
 8002f94:	2239      	movs	r2, #57	@ 0x39
 8002f96:	5c9a      	ldrb	r2, [r3, r2]
 8002f98:	4b51      	ldr	r3, [pc, #324]	@ (80030e0 <prog_param+0x394>)
 8002f9a:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 8002f9c:	4b50      	ldr	r3, [pc, #320]	@ (80030e0 <prog_param+0x394>)
 8002f9e:	223a      	movs	r2, #58	@ 0x3a
 8002fa0:	5c9a      	ldrb	r2, [r3, r2]
 8002fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80030e0 <prog_param+0x394>)
 8002fa4:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 8002fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80030e0 <prog_param+0x394>)
 8002fa8:	223b      	movs	r2, #59	@ 0x3b
 8002faa:	5c9a      	ldrb	r2, [r3, r2]
 8002fac:	4b4c      	ldr	r3, [pc, #304]	@ (80030e0 <prog_param+0x394>)
 8002fae:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80030e0 <prog_param+0x394>)
 8002fb2:	223c      	movs	r2, #60	@ 0x3c
 8002fb4:	5c9a      	ldrb	r2, [r3, r2]
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80030e0 <prog_param+0x394>)
 8002fb8:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 8002fba:	4b49      	ldr	r3, [pc, #292]	@ (80030e0 <prog_param+0x394>)
 8002fbc:	223d      	movs	r2, #61	@ 0x3d
 8002fbe:	5c99      	ldrb	r1, [r3, r2]
 8002fc0:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <prog_param+0x394>)
 8002fc2:	222d      	movs	r2, #45	@ 0x2d
 8002fc4:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 8002fc6:	4b46      	ldr	r3, [pc, #280]	@ (80030e0 <prog_param+0x394>)
 8002fc8:	223e      	movs	r2, #62	@ 0x3e
 8002fca:	5c99      	ldrb	r1, [r3, r2]
 8002fcc:	4b44      	ldr	r3, [pc, #272]	@ (80030e0 <prog_param+0x394>)
 8002fce:	222e      	movs	r2, #46	@ 0x2e
 8002fd0:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8002fd2:	4b43      	ldr	r3, [pc, #268]	@ (80030e0 <prog_param+0x394>)
 8002fd4:	223f      	movs	r2, #63	@ 0x3f
 8002fd6:	5c99      	ldrb	r1, [r3, r2]
 8002fd8:	4b41      	ldr	r3, [pc, #260]	@ (80030e0 <prog_param+0x394>)
 8002fda:	222f      	movs	r2, #47	@ 0x2f
 8002fdc:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 8002fde:	4b40      	ldr	r3, [pc, #256]	@ (80030e0 <prog_param+0x394>)
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	5c99      	ldrb	r1, [r3, r2]
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80030e0 <prog_param+0x394>)
 8002fe6:	2230      	movs	r2, #48	@ 0x30
 8002fe8:	5499      	strb	r1, [r3, r2]
 8002fea:	e000      	b.n	8002fee <prog_param+0x2a2>
			goto no_def_param;
 8002fec:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 8002fee:	4b46      	ldr	r3, [pc, #280]	@ (8003108 <prog_param+0x3bc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 8002ff4:	4b45      	ldr	r3, [pc, #276]	@ (800310c <prog_param+0x3c0>)
 8002ff6:	22aa      	movs	r2, #170	@ 0xaa
 8002ff8:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 8002ffa:	e2ff      	b.n	80035fc <prog_param+0x8b0>
			goto fin_sel_param;
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	e30e      	b.n	800361e <prog_param+0x8d2>
			goto fin_sel_param; //jrne fin_sel_param
 8003000:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 8003002:	e30c      	b.n	800361e <prog_param+0x8d2>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 8003004:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 8003006:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <prog_param+0x388>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	220f      	movs	r2, #15
 800300c:	4013      	ands	r3, r2
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b37      	ldr	r3, [pc, #220]	@ (80030f0 <prog_param+0x3a4>)
 8003012:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8003014:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <prog_param+0x3a4>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b09      	cmp	r3, #9
 800301a:	d900      	bls.n	800301e <prog_param+0x2d2>
 800301c:	e12f      	b.n	800327e <prog_param+0x532>
 800301e:	009a      	lsls	r2, r3, #2
 8003020:	4b3b      	ldr	r3, [pc, #236]	@ (8003110 <prog_param+0x3c4>)
 8003022:	18d3      	adds	r3, r2, r3
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 8003028:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 800302a:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <prog_param+0x3c8>)
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fbdb 	bl	80037e8 <TwoByteInArrayToWord>
 8003032:	0003      	movs	r3, r0
 8003034:	001c      	movs	r4, r3
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <prog_param+0x3cc>)
 8003038:	0018      	movs	r0, r3
 800303a:	f000 fbd5 	bl	80037e8 <TwoByteInArrayToWord>
 800303e:	0003      	movs	r3, r0
 8003040:	001d      	movs	r5, r3
 8003042:	4b36      	ldr	r3, [pc, #216]	@ (800311c <prog_param+0x3d0>)
 8003044:	0018      	movs	r0, r3
 8003046:	f000 fbcf 	bl	80037e8 <TwoByteInArrayToWord>
 800304a:	0003      	movs	r3, r0
 800304c:	001a      	movs	r2, r3
 800304e:	2302      	movs	r3, #2
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2301      	movs	r3, #1
 8003054:	0029      	movs	r1, r5
 8003056:	0020      	movs	r0, r4
 8003058:	f001 fcf8 	bl	8004a4c <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 800305c:	e114      	b.n	8003288 <prog_param+0x53c>
			case 1: goto opc01m01nv2;
 800305e:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 8003060:	4b2f      	ldr	r3, [pc, #188]	@ (8003120 <prog_param+0x3d4>)
 8003062:	0018      	movs	r0, r3
 8003064:	f000 fbc0 	bl	80037e8 <TwoByteInArrayToWord>
 8003068:	0003      	movs	r3, r0
 800306a:	001a      	movs	r2, r3
 800306c:	2304      	movs	r3, #4
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2303      	movs	r3, #3
 8003072:	2100      	movs	r1, #0
 8003074:	2063      	movs	r0, #99	@ 0x63
 8003076:	f001 fce9 	bl	8004a4c <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 800307a:	e105      	b.n	8003288 <prog_param+0x53c>
			case 2: goto opc02m01nv2;
 800307c:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 800307e:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <prog_param+0x3c8>)
 8003080:	0018      	movs	r0, r3
 8003082:	f000 fbb1 	bl	80037e8 <TwoByteInArrayToWord>
 8003086:	0003      	movs	r3, r0
 8003088:	3396      	adds	r3, #150	@ 0x96
 800308a:	001c      	movs	r4, r3
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <prog_param+0x3d0>)
 800308e:	0018      	movs	r0, r3
 8003090:	f000 fbaa 	bl	80037e8 <TwoByteInArrayToWord>
 8003094:	0003      	movs	r3, r0
 8003096:	001d      	movs	r5, r3
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <prog_param+0x3d4>)
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fba4 	bl	80037e8 <TwoByteInArrayToWord>
 80030a0:	0003      	movs	r3, r0
 80030a2:	18eb      	adds	r3, r5, r3
 80030a4:	330a      	adds	r3, #10
 80030a6:	001d      	movs	r5, r3
 80030a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <prog_param+0x3d8>)
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fb9c 	bl	80037e8 <TwoByteInArrayToWord>
 80030b0:	0003      	movs	r3, r0
 80030b2:	001a      	movs	r2, r3
 80030b4:	232e      	movs	r3, #46	@ 0x2e
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	232d      	movs	r3, #45	@ 0x2d
 80030ba:	0029      	movs	r1, r5
 80030bc:	0020      	movs	r0, r4
 80030be:	f001 fcc5 	bl	8004a4c <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 80030c2:	e0e1      	b.n	8003288 <prog_param+0x53c>
 80030c4:	20000b54 	.word	0x20000b54
 80030c8:	20000b24 	.word	0x20000b24
 80030cc:	20000aae 	.word	0x20000aae
 80030d0:	20000b3c 	.word	0x20000b3c
 80030d4:	20000b3b 	.word	0x20000b3b
 80030d8:	20000b84 	.word	0x20000b84
 80030dc:	0803f000 	.word	0x0803f000
 80030e0:	2000013c 	.word	0x2000013c
 80030e4:	200001bb 	.word	0x200001bb
 80030e8:	20000b2c 	.word	0x20000b2c
 80030ec:	20000b3a 	.word	0x20000b3a
 80030f0:	2000083c 	.word	0x2000083c
 80030f4:	20000b3e 	.word	0x20000b3e
 80030f8:	20000b40 	.word	0x20000b40
 80030fc:	20000a93 	.word	0x20000a93
 8003100:	08017d70 	.word	0x08017d70
 8003104:	20000b8c 	.word	0x20000b8c
 8003108:	20000ba0 	.word	0x20000ba0
 800310c:	20000b9f 	.word	0x20000b9f
 8003110:	08017d98 	.word	0x08017d98
 8003114:	2000014b 	.word	0x2000014b
 8003118:	20000149 	.word	0x20000149
 800311c:	2000013d 	.word	0x2000013d
 8003120:	2000013f 	.word	0x2000013f
 8003124:	20000169 	.word	0x20000169
			case 3: goto opc03m01nv2;
 8003128:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 800312a:	4bd8      	ldr	r3, [pc, #864]	@ (800348c <prog_param+0x740>)
 800312c:	0018      	movs	r0, r3
 800312e:	f000 fb5b 	bl	80037e8 <TwoByteInArrayToWord>
 8003132:	0003      	movs	r3, r0
 8003134:	3b0a      	subs	r3, #10
 8003136:	001c      	movs	r4, r3
 8003138:	4bd5      	ldr	r3, [pc, #852]	@ (8003490 <prog_param+0x744>)
 800313a:	0018      	movs	r0, r3
 800313c:	f000 fb54 	bl	80037e8 <TwoByteInArrayToWord>
 8003140:	0003      	movs	r3, r0
 8003142:	3b96      	subs	r3, #150	@ 0x96
 8003144:	001d      	movs	r5, r3
 8003146:	4bd3      	ldr	r3, [pc, #844]	@ (8003494 <prog_param+0x748>)
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fb4d 	bl	80037e8 <TwoByteInArrayToWord>
 800314e:	0003      	movs	r3, r0
 8003150:	001a      	movs	r2, r3
 8003152:	2330      	movs	r3, #48	@ 0x30
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	232f      	movs	r3, #47	@ 0x2f
 8003158:	0029      	movs	r1, r5
 800315a:	0020      	movs	r0, r4
 800315c:	f001 fc76 	bl	8004a4c <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 8003160:	e092      	b.n	8003288 <prog_param+0x53c>
			case 4: goto opc04m01nv2;
 8003162:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 8003164:	4bcc      	ldr	r3, [pc, #816]	@ (8003498 <prog_param+0x74c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <prog_param+0x42a>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 800316c:	4bca      	ldr	r3, [pc, #808]	@ (8003498 <prog_param+0x74c>)
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00c      	beq.n	800318e <prog_param+0x442>
				goto toggle_opc04m01nv2;
 8003174:	e000      	b.n	8003178 <prog_param+0x42c>
				goto toggle_opc04m01nv2;
 8003176:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 8003178:	4bc8      	ldr	r3, [pc, #800]	@ (800349c <prog_param+0x750>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2201      	movs	r2, #1
 800317e:	4053      	eors	r3, r2
 8003180:	b2db      	uxtb	r3, r3
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	4193      	sbcs	r3, r2
 8003186:	b2da      	uxtb	r2, r3
 8003188:	4bc4      	ldr	r3, [pc, #784]	@ (800349c <prog_param+0x750>)
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e000      	b.n	8003190 <prog_param+0x444>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 800318e:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8003190:	2101      	movs	r1, #1
 8003192:	2028      	movs	r0, #40	@ 0x28
 8003194:	f001 fc06 	bl	80049a4 <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 8003198:	4bc0      	ldr	r3, [pc, #768]	@ (800349c <prog_param+0x750>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	4053      	eors	r3, r2
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <prog_param+0x464>
			op_menu (0x00, 0x1D);
 80031a6:	211d      	movs	r1, #29
 80031a8:	2000      	movs	r0, #0
 80031aa:	f001 fbfb 	bl	80049a4 <op_menu>
 80031ae:	e000      	b.n	80031b2 <prog_param+0x466>
				goto dpy2_opc04m01nv2;
 80031b0:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 80031b2:	f001 fc11 	bl	80049d8 <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 80031b6:	e067      	b.n	8003288 <prog_param+0x53c>
			case 5: goto opc05m01nv2;
 80031b8:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 80031ba:	2105      	movs	r1, #5
 80031bc:	2025      	movs	r0, #37	@ 0x25
 80031be:	f001 fbf1 	bl	80049a4 <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 80031c2:	4bb7      	ldr	r3, [pc, #732]	@ (80034a0 <prog_param+0x754>)
 80031c4:	2263      	movs	r2, #99	@ 0x63
 80031c6:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 80031c8:	4bb6      	ldr	r3, [pc, #728]	@ (80034a4 <prog_param+0x758>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 80031ce:	4bb6      	ldr	r3, [pc, #728]	@ (80034a8 <prog_param+0x75c>)
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	4bb6      	ldr	r3, [pc, #728]	@ (80034ac <prog_param+0x760>)
 80031d4:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 80031d6:	f000 fa2d 	bl	8003634 <md_dif_math>
			key = wreg;//	mov	key,wreg
 80031da:	4bb5      	ldr	r3, [pc, #724]	@ (80034b0 <prog_param+0x764>)
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	4bb2      	ldr	r3, [pc, #712]	@ (80034a8 <prog_param+0x75c>)
 80031e0:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 80031e2:	f000 fd35 	bl	8003c50 <soloent1>
			datled_clear();
 80031e6:	f001 fbf7 	bl	80049d8 <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 80031ea:	e04d      	b.n	8003288 <prog_param+0x53c>
			case 6: goto opc06m01nv2;
 80031ec:	46c0      	nop			@ (mov r8, r8)
			op_menu (eePlantilla[eeversion1], eePlantilla[eeversion2] / 10);
 80031ee:	4bb1      	ldr	r3, [pc, #708]	@ (80034b4 <prog_param+0x768>)
 80031f0:	227b      	movs	r2, #123	@ 0x7b
 80031f2:	5c9c      	ldrb	r4, [r3, r2]
 80031f4:	4baf      	ldr	r3, [pc, #700]	@ (80034b4 <prog_param+0x768>)
 80031f6:	227c      	movs	r2, #124	@ 0x7c
 80031f8:	5c9b      	ldrb	r3, [r3, r2]
 80031fa:	210a      	movs	r1, #10
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7fc ff8b 	bl	8000118 <__udivsi3>
 8003202:	0003      	movs	r3, r0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	0019      	movs	r1, r3
 8003208:	0020      	movs	r0, r4
 800320a:	f001 fbcb 	bl	80049a4 <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 800320e:	e03b      	b.n	8003288 <prog_param+0x53c>
			case 7: goto opc07m01nv2;
 8003210:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 8003212:	4ba1      	ldr	r3, [pc, #644]	@ (8003498 <prog_param+0x74c>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <prog_param+0x4d8>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 800321a:	4b9f      	ldr	r3, [pc, #636]	@ (8003498 <prog_param+0x74c>)
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00c      	beq.n	800323c <prog_param+0x4f0>
			   goto toggle_opc07m01nv2;
 8003222:	e000      	b.n	8003226 <prog_param+0x4da>
			   goto toggle_opc07m01nv2;
 8003224:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 8003226:	4b9d      	ldr	r3, [pc, #628]	@ (800349c <prog_param+0x750>)
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	2201      	movs	r2, #1
 800322c:	4053      	eors	r3, r2
 800322e:	b2db      	uxtb	r3, r3
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	4193      	sbcs	r3, r2
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b99      	ldr	r3, [pc, #612]	@ (800349c <prog_param+0x750>)
 8003238:	705a      	strb	r2, [r3, #1]
 800323a:	e000      	b.n	800323e <prog_param+0x4f2>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 800323c:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 800323e:	2101      	movs	r1, #1
 8003240:	2028      	movs	r0, #40	@ 0x28
 8003242:	f001 fbaf 	bl	80049a4 <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8003246:	4b95      	ldr	r3, [pc, #596]	@ (800349c <prog_param+0x750>)
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	2201      	movs	r2, #1
 800324c:	4053      	eors	r3, r2
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <prog_param+0x512>
			op_menu (0x00, 0x1D);
 8003254:	211d      	movs	r1, #29
 8003256:	2000      	movs	r0, #0
 8003258:	f001 fba4 	bl	80049a4 <op_menu>
 800325c:	e000      	b.n	8003260 <prog_param+0x514>
				goto dpy2_opc07m01nv2;
 800325e:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8003260:	f001 fbba 	bl	80049d8 <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8003264:	e010      	b.n	8003288 <prog_param+0x53c>
			case 8: goto opc08m01nv2;
 8003266:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8003268:	210e      	movs	r1, #14
 800326a:	2005      	movs	r0, #5
 800326c:	f001 fb9a 	bl	80049a4 <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8003270:	e00a      	b.n	8003288 <prog_param+0x53c>
			case 9: goto opc09m01nv2;
 8003272:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8003274:	210e      	movs	r1, #14
 8003276:	201f      	movs	r0, #31
 8003278:	f001 fb94 	bl	80049a4 <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 800327c:	e004      	b.n	8003288 <prog_param+0x53c>
			default: goto opcNAnv2;
 800327e:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8003280:	2126      	movs	r1, #38	@ 0x26
 8003282:	2026      	movs	r0, #38	@ 0x26
 8003284:	f001 fb8e 	bl	80049a4 <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8003288:	4b83      	ldr	r3, [pc, #524]	@ (8003498 <prog_param+0x74c>)
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	2201      	movs	r2, #1
 800328e:	4053      	eors	r3, r2
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d12e      	bne.n	80032f4 <prog_param+0x5a8>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8003296:	4b88      	ldr	r3, [pc, #544]	@ (80034b8 <prog_param+0x76c>)
 8003298:	2200      	movs	r2, #0
 800329a:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 800329c:	4b87      	ldr	r3, [pc, #540]	@ (80034bc <prog_param+0x770>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d129      	bne.n	80032f8 <prog_param+0x5ac>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 80032a4:	4b86      	ldr	r3, [pc, #536]	@ (80034c0 <prog_param+0x774>)
 80032a6:	2273      	movs	r2, #115	@ 0x73
 80032a8:	5c9a      	ldrb	r2, [r3, r2]
 80032aa:	4b7f      	ldr	r3, [pc, #508]	@ (80034a8 <prog_param+0x75c>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d124      	bne.n	80032fc <prog_param+0x5b0>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 80032b2:	497a      	ldr	r1, [pc, #488]	@ (800349c <prog_param+0x750>)
 80032b4:	4880      	ldr	r0, [pc, #512]	@ (80034b8 <prog_param+0x76c>)
 80032b6:	2303      	movs	r3, #3
 80032b8:	2202      	movs	r2, #2
 80032ba:	f006 ffdb 	bl	800a274 <Bset_Clear_trfst>
			param2 = 0;//clr param2
 80032be:	4b81      	ldr	r3, [pc, #516]	@ (80034c4 <prog_param+0x778>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 80032c4:	4b7c      	ldr	r3, [pc, #496]	@ (80034b8 <prog_param+0x76c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	4053      	eors	r3, r2
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <prog_param+0x58e>
			flags_menu[3] = 1;//bset flags_menu,#3
 80032d2:	4b72      	ldr	r3, [pc, #456]	@ (800349c <prog_param+0x750>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	70da      	strb	r2, [r3, #3]
 80032d8:	e000      	b.n	80032dc <prog_param+0x590>
				goto noSetFlagLU;
 80032da:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 80032dc:	4b6f      	ldr	r3, [pc, #444]	@ (800349c <prog_param+0x750>)
 80032de:	2200      	movs	r2, #0
 80032e0:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 80032e2:	4b77      	ldr	r3, [pc, #476]	@ (80034c0 <prog_param+0x774>)
 80032e4:	2252      	movs	r2, #82	@ 0x52
 80032e6:	5c9b      	ldrb	r3, [r3, r2]
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d109      	bne.n	8003300 <prog_param+0x5b4>
			flags_menu[4] = 1;//	bset flags_menu,#4
 80032ec:	4b6b      	ldr	r3, [pc, #428]	@ (800349c <prog_param+0x750>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 80032f2:	e194      	b.n	800361e <prog_param+0x8d2>
				goto no_enter_nv2;
 80032f4:	46c0      	nop			@ (mov r8, r8)
 80032f6:	e192      	b.n	800361e <prog_param+0x8d2>
				goto no_enter_nv2;//jrne no_enter_nv2;
 80032f8:	46c0      	nop			@ (mov r8, r8)
 80032fa:	e190      	b.n	800361e <prog_param+0x8d2>
				goto no_enter_nv2;//jrne no_enter_nv2
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	e18e      	b.n	800361e <prog_param+0x8d2>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8003300:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8003302:	e18c      	b.n	800361e <prog_param+0x8d2>
		goto menu2; //jp menu2
 8003304:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8003306:	4964      	ldr	r1, [pc, #400]	@ (8003498 <prog_param+0x74c>)
 8003308:	4863      	ldr	r0, [pc, #396]	@ (8003498 <prog_param+0x74c>)
 800330a:	2305      	movs	r3, #5
 800330c:	2201      	movs	r2, #1
 800330e:	f006 ffcc 	bl	800a2aa <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8003312:	4b6c      	ldr	r3, [pc, #432]	@ (80034c4 <prog_param+0x778>)
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	4b65      	ldr	r3, [pc, #404]	@ (80034ac <prog_param+0x760>)
 8003318:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 800331a:	4b61      	ldr	r3, [pc, #388]	@ (80034a0 <prog_param+0x754>)
 800331c:	2204      	movs	r2, #4
 800331e:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8003320:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <prog_param+0x758>)
 8003322:	2200      	movs	r2, #0
 8003324:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8003326:	f000 f985 	bl	8003634 <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 800332a:	4b61      	ldr	r3, [pc, #388]	@ (80034b0 <prog_param+0x764>)
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	4b65      	ldr	r3, [pc, #404]	@ (80034c4 <prog_param+0x778>)
 8003330:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8003332:	4b64      	ldr	r3, [pc, #400]	@ (80034c4 <prog_param+0x778>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2207      	movs	r2, #7
 8003338:	4013      	ands	r3, r2
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b5b      	ldr	r3, [pc, #364]	@ (80034ac <prog_param+0x760>)
 800333e:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8003340:	4b5a      	ldr	r3, [pc, #360]	@ (80034ac <prog_param+0x760>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d822      	bhi.n	800338e <prog_param+0x642>
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	4b5f      	ldr	r3, [pc, #380]	@ (80034c8 <prog_param+0x77c>)
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 8003352:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8003354:	210f      	movs	r1, #15
 8003356:	2000      	movs	r0, #0
 8003358:	f001 fb24 	bl	80049a4 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 800335c:	e01c      	b.n	8003398 <prog_param+0x64c>
			case 1: goto opc01m02;
 800335e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8003360:	2127      	movs	r1, #39	@ 0x27
 8003362:	2011      	movs	r0, #17
 8003364:	f001 fb1e 	bl	80049a4 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8003368:	e016      	b.n	8003398 <prog_param+0x64c>
			case 2: goto opc02m02;
 800336a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 800336c:	211d      	movs	r1, #29
 800336e:	2027      	movs	r0, #39	@ 0x27
 8003370:	f001 fb18 	bl	80049a4 <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 8003374:	e010      	b.n	8003398 <prog_param+0x64c>
			case 3: goto opc03m02;
 8003376:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8003378:	210e      	movs	r1, #14
 800337a:	2005      	movs	r0, #5
 800337c:	f001 fb12 	bl	80049a4 <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8003380:	e00a      	b.n	8003398 <prog_param+0x64c>
			case 4: goto opc04m02;
 8003382:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 8003384:	210e      	movs	r1, #14
 8003386:	201f      	movs	r0, #31
 8003388:	f001 fb0c 	bl	80049a4 <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 800338c:	e004      	b.n	8003398 <prog_param+0x64c>
			default: goto opcNA_m02;
 800338e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8003390:	2126      	movs	r1, #38	@ 0x26
 8003392:	2026      	movs	r0, #38	@ 0x26
 8003394:	f001 fb06 	bl	80049a4 <op_menu>
		datled_clear();
 8003398:	f001 fb1e 	bl	80049d8 <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 800339c:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <prog_param+0x74c>)
 800339e:	789b      	ldrb	r3, [r3, #2]
 80033a0:	2201      	movs	r2, #1
 80033a2:	4053      	eors	r3, r2
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d150      	bne.n	800344c <prog_param+0x700>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 80033aa:	4b43      	ldr	r3, [pc, #268]	@ (80034b8 <prog_param+0x76c>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 80033b0:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <prog_param+0x778>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d100      	bne.n	80033ba <prog_param+0x66e>
 80033b8:	e11f      	b.n	80035fa <prog_param+0x8ae>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 80033ba:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 80033bc:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <prog_param+0x778>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d145      	bne.n	8003450 <prog_param+0x704>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 80033c4:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <prog_param+0x76c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 80033ca:	4b34      	ldr	r3, [pc, #208]	@ (800349c <prog_param+0x750>)
 80033cc:	78db      	ldrb	r3, [r3, #3]
 80033ce:	2201      	movs	r2, #1
 80033d0:	4053      	eors	r3, r2
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <prog_param+0x694>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 80033d8:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <prog_param+0x76c>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e000      	b.n	80033e2 <prog_param+0x696>
			goto noOnLuz;
 80033e0:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 80033e2:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <prog_param+0x750>)
 80033e4:	789b      	ldrb	r3, [r3, #2]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4053      	eors	r3, r2
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <prog_param+0x6ac>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 80033f0:	4b36      	ldr	r3, [pc, #216]	@ (80034cc <prog_param+0x780>)
 80033f2:	2278      	movs	r2, #120	@ 0x78
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e000      	b.n	80033fa <prog_param+0x6ae>
			goto noOffManto;
 80033f8:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 80033fa:	4b35      	ldr	r3, [pc, #212]	@ (80034d0 <prog_param+0x784>)
 80033fc:	2252      	movs	r2, #82	@ 0x52
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 8003402:	4b26      	ldr	r3, [pc, #152]	@ (800349c <prog_param+0x750>)
 8003404:	791b      	ldrb	r3, [r3, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	4053      	eors	r3, r2
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <prog_param+0x6ce>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 8003410:	4b2f      	ldr	r3, [pc, #188]	@ (80034d0 <prog_param+0x784>)
 8003412:	2252      	movs	r2, #82	@ 0x52
 8003414:	2120      	movs	r1, #32
 8003416:	5499      	strb	r1, [r3, r2]
 8003418:	e000      	b.n	800341c <prog_param+0x6d0>
			goto noFahrenheitFlagDpy;
 800341a:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == eePlantilla [eeescala] ){//	cp A,eeescala
 800341c:	4b2c      	ldr	r3, [pc, #176]	@ (80034d0 <prog_param+0x784>)
 800341e:	2252      	movs	r2, #82	@ 0x52
 8003420:	5c9a      	ldrb	r2, [r3, r2]
 8003422:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <prog_param+0x768>)
 8003424:	2152      	movs	r1, #82	@ 0x52
 8003426:	5c5b      	ldrb	r3, [r3, r1]
 8003428:	429a      	cmp	r2, r3
 800342a:	d00d      	beq.n	8003448 <prog_param+0x6fc>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 800342c:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <prog_param+0x784>)
 800342e:	2252      	movs	r2, #82	@ 0x52
 8003430:	5c9a      	ldrb	r2, [r3, r2]
 8003432:	4b28      	ldr	r3, [pc, #160]	@ (80034d4 <prog_param+0x788>)
 8003434:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 8003436:	4b27      	ldr	r3, [pc, #156]	@ (80034d4 <prog_param+0x788>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	001a      	movs	r2, r3
 800343c:	4b26      	ldr	r3, [pc, #152]	@ (80034d8 <prog_param+0x78c>)
 800343e:	0019      	movs	r1, r3
 8003440:	0010      	movs	r0, r2
 8003442:	f001 faa1 	bl	8004988 <wreeprom>
		 goto cancel_prog; //jp cancel_prog
 8003446:	e0d9      	b.n	80035fc <prog_param+0x8b0>
			goto noCambiaEscala;//	jreq noCambiaEscala
 8003448:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 800344a:	e0d7      	b.n	80035fc <prog_param+0x8b0>
			goto fin_menu2;
 800344c:	46c0      	nop			@ (mov r8, r8)
 800344e:	e0e6      	b.n	800361e <prog_param+0x8d2>
			goto fin_menu2;//	jrne fin_menu2;
 8003450:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8003452:	e0e4      	b.n	800361e <prog_param+0x8d2>
			switch(STM8_A)
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	4b21      	ldr	r3, [pc, #132]	@ (80034dc <prog_param+0x790>)
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 800345e:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 8003460:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <prog_param+0x74c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <prog_param+0x726>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <prog_param+0x74c>)
 800346a:	791b      	ldrb	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d037      	beq.n	80034e0 <prog_param+0x794>
				goto toggle_opc00m02nv2;
 8003470:	e000      	b.n	8003474 <prog_param+0x728>
				goto toggle_opc00m02nv2;
 8003472:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <prog_param+0x750>)
 8003476:	789b      	ldrb	r3, [r3, #2]
 8003478:	001a      	movs	r2, r3
 800347a:	2302      	movs	r3, #2
 800347c:	4053      	eors	r3, r2
 800347e:	1e5a      	subs	r2, r3, #1
 8003480:	4193      	sbcs	r3, r2
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b05      	ldr	r3, [pc, #20]	@ (800349c <prog_param+0x750>)
 8003486:	709a      	strb	r2, [r3, #2]
 8003488:	e02b      	b.n	80034e2 <prog_param+0x796>
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	2000013d 	.word	0x2000013d
 8003490:	20000149 	.word	0x20000149
 8003494:	2000016b 	.word	0x2000016b
 8003498:	20000b2c 	.word	0x20000b2c
 800349c:	20000b84 	.word	0x20000b84
 80034a0:	20000b3e 	.word	0x20000b3e
 80034a4:	20000b40 	.word	0x20000b40
 80034a8:	20000b3c 	.word	0x20000b3c
 80034ac:	2000083c 	.word	0x2000083c
 80034b0:	20000a93 	.word	0x20000a93
 80034b4:	0803f000 	.word	0x0803f000
 80034b8:	20000b24 	.word	0x20000b24
 80034bc:	20000b3b 	.word	0x20000b3b
 80034c0:	200000bc 	.word	0x200000bc
 80034c4:	20000b3a 	.word	0x20000b3a
 80034c8:	08017dc0 	.word	0x08017dc0
 80034cc:	20000b8d 	.word	0x20000b8d
 80034d0:	2000013c 	.word	0x2000013c
 80034d4:	20000a92 	.word	0x20000a92
 80034d8:	0803f052 	.word	0x0803f052
 80034dc:	08017dd4 	.word	0x08017dd4
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 80034e0:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 80034e2:	2101      	movs	r1, #1
 80034e4:	2028      	movs	r0, #40	@ 0x28
 80034e6:	f001 fa5d 	bl	80049a4 <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 80034ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003628 <prog_param+0x8dc>)
 80034ec:	789b      	ldrb	r3, [r3, #2]
 80034ee:	2201      	movs	r2, #1
 80034f0:	4053      	eors	r3, r2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <prog_param+0x7b6>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 80034f8:	211d      	movs	r1, #29
 80034fa:	2000      	movs	r0, #0
 80034fc:	f001 fa52 	bl	80049a4 <op_menu>
 8003500:	e000      	b.n	8003504 <prog_param+0x7b8>
				goto dpy2_opc00m02nv2;
 8003502:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 8003504:	f001 fa68 	bl	80049d8 <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 8003508:	e066      	b.n	80035d8 <prog_param+0x88c>
				case 1:  goto opc01m02nv2;
 800350a:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 800350c:	4b47      	ldr	r3, [pc, #284]	@ (800362c <prog_param+0x8e0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <prog_param+0x7d2>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 8003514:	4b45      	ldr	r3, [pc, #276]	@ (800362c <prog_param+0x8e0>)
 8003516:	791b      	ldrb	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <prog_param+0x7ea>
				goto toggle_opc01m02nv2;
 800351c:	e000      	b.n	8003520 <prog_param+0x7d4>
				goto toggle_opc01m02nv2;
 800351e:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 8003520:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <prog_param+0x8dc>)
 8003522:	78db      	ldrb	r3, [r3, #3]
 8003524:	2201      	movs	r2, #1
 8003526:	4053      	eors	r3, r2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	4193      	sbcs	r3, r2
 800352e:	b2da      	uxtb	r2, r3
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <prog_param+0x8dc>)
 8003532:	70da      	strb	r2, [r3, #3]
 8003534:	e000      	b.n	8003538 <prog_param+0x7ec>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8003536:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8003538:	210f      	movs	r1, #15
 800353a:	2000      	movs	r0, #0
 800353c:	f001 fa32 	bl	80049a4 <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <prog_param+0x8dc>)
 8003542:	78db      	ldrb	r3, [r3, #3]
 8003544:	2201      	movs	r2, #1
 8003546:	4053      	eors	r3, r2
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <prog_param+0x80c>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 800354e:	211d      	movs	r1, #29
 8003550:	2000      	movs	r0, #0
 8003552:	f001 fa27 	bl	80049a4 <op_menu>
 8003556:	e000      	b.n	800355a <prog_param+0x80e>
				goto dpy2_opc01m02nv2;
 8003558:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 800355a:	f001 fa3d 	bl	80049d8 <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 800355e:	e03b      	b.n	80035d8 <prog_param+0x88c>
				case 2:  goto opc02m02nv2;
 8003560:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 8003562:	4b32      	ldr	r3, [pc, #200]	@ (800362c <prog_param+0x8e0>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <prog_param+0x828>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 800356a:	4b30      	ldr	r3, [pc, #192]	@ (800362c <prog_param+0x8e0>)
 800356c:	791b      	ldrb	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <prog_param+0x840>
			   goto toggle_opc02m02nv2;
 8003572:	e000      	b.n	8003576 <prog_param+0x82a>
			   goto toggle_opc02m02nv2;
 8003574:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8003576:	4b2c      	ldr	r3, [pc, #176]	@ (8003628 <prog_param+0x8dc>)
 8003578:	791b      	ldrb	r3, [r3, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	4053      	eors	r3, r2
 800357e:	b2db      	uxtb	r3, r3
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	4193      	sbcs	r3, r2
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <prog_param+0x8dc>)
 8003588:	711a      	strb	r2, [r3, #4]
 800358a:	e000      	b.n	800358e <prog_param+0x842>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 800358c:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 800358e:	210c      	movs	r1, #12
 8003590:	2029      	movs	r0, #41	@ 0x29
 8003592:	f001 fa07 	bl	80049a4 <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8003596:	4b24      	ldr	r3, [pc, #144]	@ (8003628 <prog_param+0x8dc>)
 8003598:	791b      	ldrb	r3, [r3, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	4053      	eors	r3, r2
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <prog_param+0x862>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 80035a4:	210f      	movs	r1, #15
 80035a6:	2029      	movs	r0, #41	@ 0x29
 80035a8:	f001 f9fc 	bl	80049a4 <op_menu>
 80035ac:	e000      	b.n	80035b0 <prog_param+0x864>
				  goto dpy2_opc02m02nv2;
 80035ae:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 80035b0:	f001 fa12 	bl	80049d8 <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 80035b4:	e010      	b.n	80035d8 <prog_param+0x88c>
				case 3:  goto opc03m02nv2;
 80035b6:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 80035b8:	210e      	movs	r1, #14
 80035ba:	2005      	movs	r0, #5
 80035bc:	f001 f9f2 	bl	80049a4 <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 80035c0:	e00a      	b.n	80035d8 <prog_param+0x88c>
				case 4:  goto opc04m02nv2;
 80035c2:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 80035c4:	210e      	movs	r1, #14
 80035c6:	201f      	movs	r0, #31
 80035c8:	f001 f9ec 	bl	80049a4 <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 80035cc:	e004      	b.n	80035d8 <prog_param+0x88c>
				default: goto opcNAm02nv2;
 80035ce:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 80035d0:	2126      	movs	r1, #38	@ 0x26
 80035d2:	2026      	movs	r0, #38	@ 0x26
 80035d4:	f001 f9e6 	bl	80049a4 <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 80035d8:	4b14      	ldr	r3, [pc, #80]	@ (800362c <prog_param+0x8e0>)
 80035da:	789b      	ldrb	r3, [r3, #2]
 80035dc:	2201      	movs	r2, #1
 80035de:	4053      	eors	r3, r2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <prog_param+0x8a2>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 80035e6:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <prog_param+0x8e4>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 80035ec:	e017      	b.n	800361e <prog_param+0x8d2>
			goto no_enter_m02nv2;
 80035ee:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 80035f0:	e015      	b.n	800361e <prog_param+0x8d2>
		goto cancel_prog;
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	e002      	b.n	80035fc <prog_param+0x8b0>
		goto cancel_prog;//jp cancel_prog;
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	e000      	b.n	80035fc <prog_param+0x8b0>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 80035fa:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 80035fc:	490c      	ldr	r1, [pc, #48]	@ (8003630 <prog_param+0x8e4>)
 80035fe:	480c      	ldr	r0, [pc, #48]	@ (8003630 <prog_param+0x8e4>)
 8003600:	2303      	movs	r3, #3
 8003602:	2201      	movs	r2, #1
 8003604:	f006 fe51 	bl	800a2aa <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 8003608:	4909      	ldr	r1, [pc, #36]	@ (8003630 <prog_param+0x8e4>)
 800360a:	4809      	ldr	r0, [pc, #36]	@ (8003630 <prog_param+0x8e4>)
 800360c:	2302      	movs	r3, #2
 800360e:	2205      	movs	r2, #5
 8003610:	f006 fe4b 	bl	800a2aa <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 8003614:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <prog_param+0x8e4>)
 8003616:	2200      	movs	r2, #0
 8003618:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 800361a:	e000      	b.n	800361e <prog_param+0x8d2>
		goto fin_prog_param; //jp fin_prog_param
 800361c:	46c0      	nop			@ (mov r8, r8)
}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bdb0      	pop	{r4, r5, r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	20000b84 	.word	0x20000b84
 800362c:	20000b2c 	.word	0x20000b2c
 8003630:	20000b24 	.word	0x20000b24

08003634 <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <md_dif_math+0x20>)
 800363a:	2201      	movs	r2, #1
 800363c:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <md_dif_math+0x24>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	001a      	movs	r2, r3
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <md_dif_math+0x28>)
 8003646:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8003648:	f000 f80a 	bl	8003660 <md_signfrac_math>
}
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	20000b24 	.word	0x20000b24
 8003658:	2000083c 	.word	0x2000083c
 800365c:	2000083e 	.word	0x2000083e

08003660 <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8003664:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <md_signfrac_math+0x134>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d121      	bne.n	80036b0 <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 800366c:	4b49      	ldr	r3, [pc, #292]	@ (8003794 <md_signfrac_math+0x134>)
 800366e:	791b      	ldrb	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d14f      	bne.n	8003714 <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8003674:	4b48      	ldr	r3, [pc, #288]	@ (8003798 <md_signfrac_math+0x138>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d117      	bne.n	80036ac <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 800367c:	4b46      	ldr	r3, [pc, #280]	@ (8003798 <md_signfrac_math+0x138>)
 800367e:	2219      	movs	r2, #25
 8003680:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 8003682:	4b46      	ldr	r3, [pc, #280]	@ (800379c <md_signfrac_math+0x13c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 800368a:	4b43      	ldr	r3, [pc, #268]	@ (8003798 <md_signfrac_math+0x138>)
 800368c:	220a      	movs	r2, #10
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e000      	b.n	8003694 <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 8003692:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8003694:	4b3f      	ldr	r3, [pc, #252]	@ (8003794 <md_signfrac_math+0x134>)
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 800369c:	4b3d      	ldr	r3, [pc, #244]	@ (8003794 <md_signfrac_math+0x134>)
 800369e:	795b      	ldrb	r3, [r3, #5]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d139      	bne.n	8003718 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 80036a4:	4b3d      	ldr	r3, [pc, #244]	@ (800379c <md_signfrac_math+0x13c>)
 80036a6:	2205      	movs	r2, #5
 80036a8:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 80036aa:	e067      	b.n	800377c <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 80036ac:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 80036ae:	e065      	b.n	800377c <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	e000      	b.n	80036b6 <md_signfrac_math+0x56>
				goto inc_sf;
 80036b4:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 80036b6:	4b3a      	ldr	r3, [pc, #232]	@ (80037a0 <md_signfrac_math+0x140>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b21a      	sxth	r2, r3
 80036bc:	4b39      	ldr	r3, [pc, #228]	@ (80037a4 <md_signfrac_math+0x144>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b21b      	sxth	r3, r3
 80036c2:	429a      	cmp	r2, r3
 80036c4:	db04      	blt.n	80036d0 <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 80036c6:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <md_signfrac_math+0x148>)
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	4b35      	ldr	r3, [pc, #212]	@ (80037a0 <md_signfrac_math+0x140>)
 80036cc:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 80036ce:	e052      	b.n	8003776 <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 80036d0:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 80036d2:	4b36      	ldr	r3, [pc, #216]	@ (80037ac <md_signfrac_math+0x14c>)
 80036d4:	799b      	ldrb	r3, [r3, #6]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 80036da:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <md_signfrac_math+0x140>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b21b      	sxth	r3, r3
 80036e0:	2b63      	cmp	r3, #99	@ 0x63
 80036e2:	dc0d      	bgt.n	8003700 <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 80036e4:	4b2e      	ldr	r3, [pc, #184]	@ (80037a0 <md_signfrac_math+0x140>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	3364      	adds	r3, #100	@ 0x64
 80036ec:	db0a      	blt.n	8003704 <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 80036ee:	e000      	b.n	80036f2 <md_signfrac_math+0x92>
				goto inc_simple_ent;
 80036f0:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 80036f2:	4b2b      	ldr	r3, [pc, #172]	@ (80037a0 <md_signfrac_math+0x140>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	4b29      	ldr	r3, [pc, #164]	@ (80037a0 <md_signfrac_math+0x140>)
 80036fc:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80036fe:	e03a      	b.n	8003776 <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	e000      	b.n	8003706 <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 8003704:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 8003706:	4b26      	ldr	r3, [pc, #152]	@ (80037a0 <md_signfrac_math+0x140>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	330a      	adds	r3, #10
 800370c:	b29a      	uxth	r2, r3
 800370e:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <md_signfrac_math+0x140>)
 8003710:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 8003712:	e030      	b.n	8003776 <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 8003714:	46c0      	nop			@ (mov r8, r8)
 8003716:	e000      	b.n	800371a <md_signfrac_math+0xba>
				goto dec_sf;
 8003718:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 800371a:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <md_signfrac_math+0x140>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b21a      	sxth	r2, r3
 8003720:	4b21      	ldr	r3, [pc, #132]	@ (80037a8 <md_signfrac_math+0x148>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b21b      	sxth	r3, r3
 8003726:	429a      	cmp	r2, r3
 8003728:	dc04      	bgt.n	8003734 <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 800372a:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <md_signfrac_math+0x144>)
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	4b1c      	ldr	r3, [pc, #112]	@ (80037a0 <md_signfrac_math+0x140>)
 8003730:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8003732:	e020      	b.n	8003776 <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8003734:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8003736:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <md_signfrac_math+0x14c>)
 8003738:	799b      	ldrb	r3, [r3, #6]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <md_signfrac_math+0x140>)
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b21b      	sxth	r3, r3
 8003744:	2b64      	cmp	r3, #100	@ 0x64
 8003746:	dc0d      	bgt.n	8003764 <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8003748:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <md_signfrac_math+0x140>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b21b      	sxth	r3, r3
 800374e:	3363      	adds	r3, #99	@ 0x63
 8003750:	db0a      	blt.n	8003768 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 8003752:	e000      	b.n	8003756 <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8003754:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8003756:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <md_signfrac_math+0x140>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <md_signfrac_math+0x140>)
 8003760:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8003762:	e008      	b.n	8003776 <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	e000      	b.n	800376a <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8003768:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <md_signfrac_math+0x140>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	3b0a      	subs	r3, #10
 8003770:	b29a      	uxth	r2, r3
 8003772:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <md_signfrac_math+0x140>)
 8003774:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8003776:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <md_signfrac_math+0x150>)
 8003778:	221e      	movs	r2, #30
 800377a:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 800377c:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <md_signfrac_math+0x14c>)
 800377e:	2200      	movs	r2, #0
 8003780:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 8003782:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <md_signfrac_math+0x140>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <md_signfrac_math+0x154>)
 800378a:	701a      	strb	r2, [r3, #0]
			//ret
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	20000b2c 	.word	0x20000b2c
 8003798:	20000b5e 	.word	0x20000b5e
 800379c:	20000aaf 	.word	0x20000aaf
 80037a0:	2000083e 	.word	0x2000083e
 80037a4:	20000b3e 	.word	0x20000b3e
 80037a8:	20000b40 	.word	0x20000b40
 80037ac:	20000b24 	.word	0x20000b24
 80037b0:	20000aae 	.word	0x20000aae
 80037b4:	20000a93 	.word	0x20000a93

080037b8 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 80037be:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <tdev_to_Word+0x28>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <tdev_to_Word+0x2c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	0019      	movs	r1, r3
 80037cc:	1dbb      	adds	r3, r7, #6
 80037ce:	1852      	adds	r2, r2, r1
 80037d0:	801a      	strh	r2, [r3, #0]
	return	foo;
 80037d2:	1dbb      	adds	r3, r7, #6
 80037d4:	881b      	ldrh	r3, [r3, #0]
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	20000aec 	.word	0x20000aec
 80037e4:	20000aed 	.word	0x20000aed

080037e8 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3301      	adds	r3, #1
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	0019      	movs	r1, r3
 8003800:	200e      	movs	r0, #14
 8003802:	183b      	adds	r3, r7, r0
 8003804:	1852      	adds	r2, r2, r1
 8003806:	801a      	strh	r2, [r3, #0]
	return	 foo;
 8003808:	183b      	adds	r3, r7, r0
 800380a:	881b      	ldrh	r3, [r3, #0]
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b004      	add	sp, #16
 8003812:	bd80      	pop	{r7, pc}

08003814 <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
    asm ("nop");
 8003818:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 800381a:	46c0      	nop			@ (mov r8, r8)

}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <Load_ret2+0x1c>)
 800382a:	2249      	movs	r2, #73	@ 0x49
 800382c:	5c9b      	ldrb	r3, [r3, r2]
 800382e:	001a      	movs	r2, r3
 8003830:	233c      	movs	r3, #60	@ 0x3c
 8003832:	4353      	muls	r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	4b03      	ldr	r3, [pc, #12]	@ (8003844 <Load_ret2+0x20>)
 8003838:	801a      	strh	r2, [r3, #0]
}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200000bc 	.word	0x200000bc
 8003844:	20000aa2 	.word	0x20000aa2

08003848 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 800384c:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <ldadaptivo+0x34>)
 800384e:	2246      	movs	r2, #70	@ 0x46
 8003850:	5c9b      	ldrb	r3, [r3, r2]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	b2da      	uxtb	r2, r3
 8003856:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <ldadaptivo+0x38>)
 8003858:	701a      	strb	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <ldadaptivo+0x34>)
 800385c:	2256      	movs	r2, #86	@ 0x56
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	001a      	movs	r2, r3
 8003862:	4b07      	ldr	r3, [pc, #28]	@ (8003880 <ldadaptivo+0x38>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	08db      	lsrs	r3, r3, #3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	4353      	muls	r3, r2
 800386c:	b29a      	uxth	r2, r3
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <ldadaptivo+0x3c>)
 8003870:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 8003872:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 8003874:	46c0      	nop			@ (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	200000bc 	.word	0x200000bc
 8003880:	20000af2 	.word	0x20000af2
 8003884:	20000af8 	.word	0x20000af8

08003888 <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 800388e:	1dbb      	adds	r3, r7, #6
 8003890:	2200      	movs	r2, #0
 8003892:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 8003894:	1dbb      	adds	r3, r7, #6
 8003896:	4a0e      	ldr	r2, [pc, #56]	@ (80038d0 <blink_640+0x48>)
 8003898:	8812      	ldrh	r2, [r2, #0]
 800389a:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 800389c:	1dba      	adds	r2, r7, #6
 800389e:	1dbb      	adds	r3, r7, #6
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	18db      	adds	r3, r3, r3
 80038a4:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 80038a6:	1dba      	adds	r2, r7, #6
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	18db      	adds	r3, r3, r3
 80038ae:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 80038b0:	1dbb      	adds	r3, r7, #6
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <blink_640+0x4c>)
 80038b8:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <blink_640+0x50>)
 80038c6:	701a      	strb	r2, [r3, #0]
}
 80038c8:	46c0      	nop			@ (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000a8a 	.word	0x20000a8a
 80038d4:	20000a92 	.word	0x20000a92
 80038d8:	20000a93 	.word	0x20000a93

080038dc <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <sp_dpy+0x14>)
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f000 f8af 	bl	8003a48 <convadec_math>
								//			//ret	;
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000ae8 	.word	0x20000ae8

080038f4 <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 80038fa:	1dbb      	adds	r3, r7, #6
 80038fc:	2200      	movs	r2, #0
 80038fe:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 8003900:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <dif_dpy+0x2c>)
 8003902:	8819      	ldrh	r1, [r3, #0]
 8003904:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <dif_dpy+0x30>)
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	1a8a      	subs	r2, r1, r2
 800390c:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 800390e:	1dbb      	adds	r3, r7, #6
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	0018      	movs	r0, r3
 8003914:	f000 f898 	bl	8003a48 <convadec_math>
									// ret ;
}
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000aea 	.word	0x20000aea
 8003924:	20000ae8 	.word	0x20000ae8

08003928 <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <minbrake_load+0x2c>)
 800392e:	2265      	movs	r2, #101	@ 0x65
 8003930:	5c9a      	ldrb	r2, [r3, r2]
 8003932:	4b09      	ldr	r3, [pc, #36]	@ (8003958 <minbrake_load+0x30>)
 8003934:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 8003936:	f000 f99f 	bl	8003c78 <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <minbrake_load+0x34>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	b29b      	uxth	r3, r3
 8003942:	4a07      	ldr	r2, [pc, #28]	@ (8003960 <minbrake_load+0x38>)
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	189b      	adds	r3, r3, r2
 8003948:	b29a      	uxth	r2, r3
 800394a:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <minbrake_load+0x3c>)
 800394c:	801a      	strh	r2, [r3, #0]
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	200000bc 	.word	0x200000bc
 8003958:	20000a93 	.word	0x20000a93
 800395c:	20000a85 	.word	0x20000a85
 8003960:	20000a86 	.word	0x20000a86
 8003964:	20000a9e 	.word	0x20000a9e

08003968 <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 800396e:	1dbb      	adds	r3, r7, #6
 8003970:	2200      	movs	r2, #0
 8003972:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 8003974:	1dbb      	adds	r3, r7, #6
 8003976:	4a31      	ldr	r2, [pc, #196]	@ (8003a3c <desptdv_math+0xd4>)
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 800397c:	4b30      	ldr	r3, [pc, #192]	@ (8003a40 <desptdv_math+0xd8>)
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff ff32 	bl	80037e8 <TwoByteInArrayToWord>
 8003984:	0003      	movs	r3, r0
 8003986:	0019      	movs	r1, r3
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	1dba      	adds	r2, r7, #6
 800398c:	8812      	ldrh	r2, [r2, #0]
 800398e:	188a      	adds	r2, r1, r2
 8003990:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 8003992:	4b2c      	ldr	r3, [pc, #176]	@ (8003a44 <desptdv_math+0xdc>)
 8003994:	2252      	movs	r2, #82	@ 0x52
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	2b20      	cmp	r3, #32
 800399a:	d145      	bne.n	8003a28 <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 800399c:	1dbb      	adds	r3, r7, #6
 800399e:	2200      	movs	r2, #0
 80039a0:	5e9b      	ldrsh	r3, [r3, r2]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da22      	bge.n	80039ec <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 80039a6:	1dbb      	adds	r3, r7, #6
 80039a8:	1dba      	adds	r2, r7, #6
 80039aa:	8812      	ldrh	r2, [r2, #0]
 80039ac:	4252      	negs	r2, r2
 80039ae:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 80039b0:	1dbb      	adds	r3, r7, #6
 80039b2:	1dba      	adds	r2, r7, #6
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	0852      	lsrs	r2, r2, #1
 80039b8:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80039ba:	1dba      	adds	r2, r7, #6
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	1c19      	adds	r1, r3, #0
 80039c2:	00c9      	lsls	r1, r1, #3
 80039c4:	18cb      	adds	r3, r1, r3
 80039c6:	18db      	adds	r3, r3, r3
 80039c8:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80039ca:	1dbc      	adds	r4, r7, #6
 80039cc:	1dbb      	adds	r3, r7, #6
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	2105      	movs	r1, #5
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fc fba0 	bl	8000118 <__udivsi3>
 80039d8:	0003      	movs	r3, r0
 80039da:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 80039dc:	1dbb      	adds	r3, r7, #6
 80039de:	1dba      	adds	r2, r7, #6
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	21a0      	movs	r1, #160	@ 0xa0
 80039e4:	0049      	lsls	r1, r1, #1
 80039e6:	1a8a      	subs	r2, r1, r2
 80039e8:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 80039ea:	e01e      	b.n	8003a2a <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 80039ec:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1dba      	adds	r2, r7, #6
 80039f2:	8812      	ldrh	r2, [r2, #0]
 80039f4:	0852      	lsrs	r2, r2, #1
 80039f6:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80039f8:	1dba      	adds	r2, r7, #6
 80039fa:	1dbb      	adds	r3, r7, #6
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	1c19      	adds	r1, r3, #0
 8003a00:	00c9      	lsls	r1, r1, #3
 8003a02:	18cb      	adds	r3, r1, r3
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 8003a08:	1dbc      	adds	r4, r7, #6
 8003a0a:	1dbb      	adds	r3, r7, #6
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	2105      	movs	r1, #5
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fc fb81 	bl	8000118 <__udivsi3>
 8003a16:	0003      	movs	r3, r0
 8003a18:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 8003a1a:	1dbb      	adds	r3, r7, #6
 8003a1c:	1dba      	adds	r2, r7, #6
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	3241      	adds	r2, #65	@ 0x41
 8003a22:	32ff      	adds	r2, #255	@ 0xff
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	e000      	b.n	8003a2a <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 8003a28:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 8003a2a:	1dbb      	adds	r3, r7, #6
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 f80a 	bl	8003a48 <convadec_math>

}
 8003a34:	46c0      	nop			@ (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b003      	add	sp, #12
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	20000af0 	.word	0x20000af0
 8003a40:	200000c1 	.word	0x200000c1
 8003a44:	200000bc 	.word	0x200000bc

08003a48 <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	0002      	movs	r2, r0
 8003a50:	1dbb      	adds	r3, r7, #6
 8003a52:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 8003a54:	f000 face 	bl	8003ff4 <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 8003a58:	230f      	movs	r3, #15
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 8003a60:	230e      	movs	r3, #14
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 8003a68:	1dbb      	adds	r3, r7, #6
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	5e9b      	ldrsh	r3, [r3, r2]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	da08      	bge.n	8003a84 <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 8003a72:	1dbb      	adds	r3, r7, #6
 8003a74:	1dba      	adds	r2, r7, #6
 8003a76:	8812      	ldrh	r2, [r2, #0]
 8003a78:	4252      	negs	r2, r2
 8003a7a:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 8003a7c:	4b45      	ldr	r3, [pc, #276]	@ (8003b94 <convadec_math+0x14c>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	705a      	strb	r2, [r3, #1]
 8003a82:	e000      	b.n	8003a86 <convadec_math+0x3e>
			goto conv_temper_positiva;
 8003a84:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 8003a86:	1dbb      	adds	r3, r7, #6
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	210a      	movs	r1, #10
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7fc fbc9 	bl	8000224 <__aeabi_uidivmod>
 8003a92:	000b      	movs	r3, r1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	230e      	movs	r3, #14
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 8003a9c:	1dbb      	adds	r3, r7, #6
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	210a      	movs	r1, #10
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7fc fb38 	bl	8000118 <__udivsi3>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	230f      	movs	r3, #15
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 8003ab2:	4b38      	ldr	r3, [pc, #224]	@ (8003b94 <convadec_math+0x14c>)
 8003ab4:	785b      	ldrb	r3, [r3, #1]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4053      	eors	r3, r2
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 8003ac0:	4b35      	ldr	r3, [pc, #212]	@ (8003b98 <convadec_math+0x150>)
 8003ac2:	2223      	movs	r2, #35	@ 0x23
 8003ac4:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 8003ac6:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <convadec_math+0x154>)
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2201      	movs	r2, #1
 8003acc:	4053      	eors	r3, r2
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d103      	bne.n	8003adc <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 8003ad4:	4b30      	ldr	r3, [pc, #192]	@ (8003b98 <convadec_math+0x150>)
 8003ad6:	2264      	movs	r2, #100	@ 0x64
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e000      	b.n	8003ade <convadec_math+0x96>
			goto cp_25;
 8003adc:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 8003ade:	4b2e      	ldr	r3, [pc, #184]	@ (8003b98 <convadec_math+0x150>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	18ba      	adds	r2, r7, r2
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d318      	bcc.n	8003b1e <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 8003aec:	e03d      	b.n	8003b6a <convadec_math+0x122>
			goto conv_signo_positivo;
 8003aee:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 8003af0:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <convadec_math+0x150>)
 8003af2:	2263      	movs	r2, #99	@ 0x63
 8003af4:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 8003af6:	4b29      	ldr	r3, [pc, #164]	@ (8003b9c <convadec_math+0x154>)
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	2201      	movs	r2, #1
 8003afc:	4053      	eors	r3, r2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 8003b04:	4b24      	ldr	r3, [pc, #144]	@ (8003b98 <convadec_math+0x150>)
 8003b06:	2264      	movs	r2, #100	@ 0x64
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e000      	b.n	8003b0e <convadec_math+0xc6>
			goto cp_99;
 8003b0c:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 8003b0e:	4b22      	ldr	r3, [pc, #136]	@ (8003b98 <convadec_math+0x150>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	220f      	movs	r2, #15
 8003b14:	18ba      	adds	r2, r7, r2
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d225      	bcs.n	8003b68 <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 8003b1c:	e000      	b.n	8003b20 <convadec_math+0xd8>
		goto     convad10;
 8003b1e:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8003b20:	210f      	movs	r1, #15
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b09      	cmp	r3, #9
 8003b28:	d80d      	bhi.n	8003b46 <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 8003b2a:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 8003b2c:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <convadec_math+0x14c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 8003b32:	230e      	movs	r3, #14
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	0011      	movs	r1, r2
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f000 ff30 	bl	80049a4 <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 8003b44:	e021      	b.n	8003b8a <convadec_math+0x142>
			goto soloent;
 8003b46:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 8003b48:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <convadec_math+0x150>)
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	18ba      	adds	r2, r7, r2
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8003b52:	f000 f891 	bl	8003c78 <BaBentre10_math>
		op_menu (waux,wreg);
 8003b56:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <convadec_math+0x158>)
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <convadec_math+0x150>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	0019      	movs	r1, r3
 8003b60:	0010      	movs	r0, r2
 8003b62:	f000 ff1f 	bl	80049a4 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8003b66:	e010      	b.n	8003b8a <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 8003b68:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <convadec_math+0x15c>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	001a      	movs	r2, r3
 8003b72:	2320      	movs	r3, #32
 8003b74:	4013      	ands	r3, r2
 8003b76:	d102      	bne.n	8003b7e <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 8003b78:	f000 fa3c 	bl	8003ff4 <offdpy>
		goto	finconvad;
 8003b7c:	e005      	b.n	8003b8a <convadec_math+0x142>
			goto convadec_j02;
 8003b7e:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 8003b80:	2111      	movs	r1, #17
 8003b82:	2010      	movs	r0, #16
 8003b84:	f000 ff0e 	bl	80049a4 <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000acc 	.word	0x20000acc
 8003b98:	20000a93 	.word	0x20000a93
 8003b9c:	20000b24 	.word	0x20000b24
 8003ba0:	20000a92 	.word	0x20000a92
 8003ba4:	20000a8a 	.word	0x20000a8a

08003ba8 <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	0002      	movs	r2, r0
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8003bbc:	1dfb      	adds	r3, r7, #7
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b09      	cmp	r3, #9
 8003bc2:	d80c      	bhi.n	8003bde <convad10+0x36>
			goto soloent;
		}
fraccion:
 8003bc4:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 8003bc6:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <convad10+0x60>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	1dfb      	adds	r3, r7, #7
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	0011      	movs	r1, r2
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 fee4 	bl	80049a4 <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 8003bdc:	e00f      	b.n	8003bfe <convad10+0x56>
			goto soloent;
 8003bde:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c0c <convad10+0x64>)
 8003be2:	1dfa      	adds	r2, r7, #7
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8003be8:	f000 f846 	bl	8003c78 <BaBentre10_math>
		op_menu (waux,wreg);
 8003bec:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <convad10+0x68>)
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <convad10+0x64>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	0010      	movs	r0, r2
 8003bf8:	f000 fed4 	bl	80049a4 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8003bfc:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b004      	add	sp, #16
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	20000acc 	.word	0x20000acc
 8003c0c:	20000a93 	.word	0x20000a93
 8003c10:	20000a92 	.word	0x20000a92

08003c14 <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 8003c20:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <soloent+0x34>)
 8003c22:	1dfa      	adds	r2, r7, #7
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8003c28:	f000 f826 	bl	8003c78 <BaBentre10_math>
		op_menu (waux,wreg);
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <soloent+0x38>)
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <soloent+0x34>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	0019      	movs	r1, r3
 8003c36:	0010      	movs	r0, r2
 8003c38:	f000 feb4 	bl	80049a4 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8003c3c:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b002      	add	sp, #8
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	20000a93 	.word	0x20000a93
 8003c4c:	20000a92 	.word	0x20000a92

08003c50 <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 8003c54:	f000 f810 	bl	8003c78 <BaBentre10_math>
		op_menu (waux,wreg);
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <soloent1+0x20>)
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <soloent1+0x24>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	0019      	movs	r1, r3
 8003c62:	0010      	movs	r0, r2
 8003c64:	f000 fe9e 	bl	80049a4 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8003c68:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000a92 	.word	0x20000a92
 8003c74:	20000a93 	.word	0x20000a93

08003c78 <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(){
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 8003c7c:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <BaBentre10_math+0x4c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 8003c82:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <BaBentre10_math+0x50>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	001a      	movs	r2, r3
 8003c88:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <BaBentre10_math+0x54>)
 8003c8a:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <BaBentre10_math+0x54>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	210a      	movs	r1, #10
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fc fac5 	bl	8000224 <__aeabi_uidivmod>
 8003c9a:	000b      	movs	r3, r1
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <BaBentre10_math+0x50>)
 8003ca0:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <BaBentre10_math+0x54>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	210a      	movs	r1, #10
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fc fa34 	bl	8000118 <__udivsi3>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <BaBentre10_math+0x4c>)
 8003cb6:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 8003cb8:	f000 f80a 	bl	8003cd0 <conv60_6_math>
}
 8003cbc:	46c0      	nop			@ (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	20000a92 	.word	0x20000a92
 8003cc8:	20000a93 	.word	0x20000a93
 8003ccc:	2000083e 	.word	0x2000083e

08003cd0 <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math () {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 8003cd6:	1dbb      	adds	r3, r7, #6
 8003cd8:	2200      	movs	r2, #0
 8003cda:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <conv60_6_math+0x54>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	1dba      	adds	r2, r7, #6
 8003ce2:	1c19      	adds	r1, r3, #0
 8003ce4:	1c0b      	adds	r3, r1, #0
 8003ce6:	18db      	adds	r3, r3, r3
 8003ce8:	185b      	adds	r3, r3, r1
 8003cea:	18db      	adds	r3, r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 8003cee:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <conv60_6_math+0x58>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	233c      	movs	r3, #60	@ 0x3c
 8003cf6:	4353      	muls	r3, r2
 8003cf8:	b299      	uxth	r1, r3
 8003cfa:	1dbb      	adds	r3, r7, #6
 8003cfc:	1dba      	adds	r2, r7, #6
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	188a      	adds	r2, r1, r2
 8003d02:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 8003d04:	1dbb      	adds	r3, r7, #6
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b07      	ldr	r3, [pc, #28]	@ (8003d2c <conv60_6_math+0x5c>)
 8003d10:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 8003d12:	1dbb      	adds	r3, r7, #6
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <conv60_6_math+0x60>)
 8003d1a:	701a      	strb	r2, [r3, #0]
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000a93 	.word	0x20000a93
 8003d28:	20000a92 	.word	0x20000a92
 8003d2c:	20000a85 	.word	0x20000a85
 8003d30:	20000a86 	.word	0x20000a86

08003d34 <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 8003d3a:	4ba3      	ldr	r3, [pc, #652]	@ (8003fc8 <fallas+0x294>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 8003d40:	4ba2      	ldr	r3, [pc, #648]	@ (8003fcc <fallas+0x298>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 8003d48:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 8003d4a:	e138      	b.n	8003fbe <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 8003d4c:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 8003d4e:	4b9f      	ldr	r3, [pc, #636]	@ (8003fcc <fallas+0x298>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d003      	beq.n	8003d5e <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 8003d56:	4b9e      	ldr	r3, [pc, #632]	@ (8003fd0 <fallas+0x29c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	715a      	strb	r2, [r3, #5]
 8003d5c:	e000      	b.n	8003d60 <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 8003d5e:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 8003d60:	2300      	movs	r3, #0
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e014      	b.n	8003d90 <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 8003d66:	4a9b      	ldr	r2, [pc, #620]	@ (8003fd4 <fallas+0x2a0>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	499a      	ldr	r1, [pc, #616]	@ (8003fd8 <fallas+0x2a4>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	18cb      	adds	r3, r1, r3
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4998      	ldr	r1, [pc, #608]	@ (8003fdc <fallas+0x2a8>)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	18cb      	adds	r3, r1, r3
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <fallas+0x66>
		for(int k=0; k<8;k++){
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b07      	cmp	r3, #7
 8003d94:	dde7      	ble.n	8003d66 <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 8003d96:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8003d98:	e7d7      	b.n	8003d4a <fallas+0x16>
				goto fallas12;//jrne fallas12
 8003d9a:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8003d9c:	4b90      	ldr	r3, [pc, #576]	@ (8003fe0 <fallas+0x2ac>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d12c      	bne.n	8003dfe <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 8003da4:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd0 <fallas+0x29c>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;//bset flagsBuzzer,#0
 8003daa:	4b87      	ldr	r3, [pc, #540]	@ (8003fc8 <fallas+0x294>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
	    waux = 0x1F;//mov waux,#$1F;
 8003db0:	4b8c      	ldr	r3, [pc, #560]	@ (8003fe4 <fallas+0x2b0>)
 8003db2:	221f      	movs	r2, #31
 8003db4:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 8003db6:	4b87      	ldr	r3, [pc, #540]	@ (8003fd4 <fallas+0x2a0>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4053      	eors	r3, r2
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <fallas+0xa4>
	       	goto fallas_j00;
 8003dc4:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 8003dc6:	4b83      	ldr	r3, [pc, #524]	@ (8003fd4 <fallas+0x2a0>)
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d019      	beq.n	8003e02 <fallas+0xce>
	       	goto fallas_j01;
 8003dce:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    waux = 0x1F;//mov waux,#$1F
 8003dd0:	4b84      	ldr	r3, [pc, #528]	@ (8003fe4 <fallas+0x2b0>)
 8003dd2:	221f      	movs	r2, #31
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e000      	b.n	8003dda <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 8003dd8:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 8003dda:	f000 fb1d 	bl	8004418 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 8003dde:	f000 fb37 	bl	8004450 <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 8003de2:	f000 fdf9 	bl	80049d8 <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		wreg = 0x13;//mov wreg,#$13;
 8003de6:	4b80      	ldr	r3, [pc, #512]	@ (8003fe8 <fallas+0x2b4>)
 8003de8:	2213      	movs	r2, #19
 8003dea:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 8003dec:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe4 <fallas+0x2b0>)
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe8 <fallas+0x2b4>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	0019      	movs	r1, r3
 8003df6:	0010      	movs	r0, r2
 8003df8:	f000 fdd4 	bl	80049a4 <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 8003dfc:	e0df      	b.n	8003fbe <fallas+0x28a>
	       	goto fallas16;//
 8003dfe:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 8003e00:	e0dd      	b.n	8003fbe <fallas+0x28a>
	    goto fallas20;//jra fallas20
 8003e02:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 8003e04:	4b73      	ldr	r3, [pc, #460]	@ (8003fd4 <fallas+0x2a0>)
 8003e06:	79db      	ldrb	r3, [r3, #7]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	4053      	eors	r3, r2
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 8003e12:	2201      	movs	r2, #1
 8003e14:	2127      	movs	r1, #39	@ 0x27
 8003e16:	201f      	movs	r0, #31
 8003e18:	f000 fdec 	bl	80049f4 <wreg_waux_conf>
 8003e1c:	e000      	b.n	8003e20 <fallas+0xec>
			goto fallas_j07;
 8003e1e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 8003e20:	4b6c      	ldr	r3, [pc, #432]	@ (8003fd4 <fallas+0x2a0>)
 8003e22:	799b      	ldrb	r3, [r3, #6]
 8003e24:	2201      	movs	r2, #1
 8003e26:	4053      	eors	r3, r2
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 8003e2e:	2201      	movs	r2, #1
 8003e30:	2127      	movs	r1, #39	@ 0x27
 8003e32:	2026      	movs	r0, #38	@ 0x26
 8003e34:	f000 fdde 	bl	80049f4 <wreg_waux_conf>
 8003e38:	e000      	b.n	8003e3c <fallas+0x108>
			goto fallas_j08;
 8003e3a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 8003e3c:	4b66      	ldr	r3, [pc, #408]	@ (8003fd8 <fallas+0x2a4>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2201      	movs	r2, #1
 8003e42:	4053      	eors	r3, r2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	212f      	movs	r1, #47	@ 0x2f
 8003e4e:	200e      	movs	r0, #14
 8003e50:	f000 fdd0 	bl	80049f4 <wreg_waux_conf>
 8003e54:	e000      	b.n	8003e58 <fallas+0x124>
			goto fallas_j08b;
 8003e56:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 8003e58:	4b60      	ldr	r3, [pc, #384]	@ (8003fdc <fallas+0x2a8>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4053      	eors	r3, r2
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 8003e66:	2201      	movs	r2, #1
 8003e68:	210a      	movs	r1, #10
 8003e6a:	200b      	movs	r0, #11
 8003e6c:	f000 fdc2 	bl	80049f4 <wreg_waux_conf>
 8003e70:	e000      	b.n	8003e74 <fallas+0x140>
			goto fallas_j08c;
 8003e72:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 8003e74:	4b57      	ldr	r3, [pc, #348]	@ (8003fd4 <fallas+0x2a0>)
 8003e76:	795b      	ldrb	r3, [r3, #5]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 8003e7c:	4b56      	ldr	r3, [pc, #344]	@ (8003fd8 <fallas+0x2a4>)
 8003e7e:	79db      	ldrb	r3, [r3, #7]
 8003e80:	2201      	movs	r2, #1
 8003e82:	4053      	eors	r3, r2
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8003e8a:	e000      	b.n	8003e8e <fallas+0x15a>
			goto fallas_j01c;
 8003e8c:	46c0      	nop			@ (mov r8, r8)
		wreg_waux_conf(0x1F, 0x13, 1);
 8003e8e:	2201      	movs	r2, #1
 8003e90:	2113      	movs	r1, #19
 8003e92:	201f      	movs	r0, #31
 8003e94:	f000 fdae 	bl	80049f4 <wreg_waux_conf>
 8003e98:	e000      	b.n	8003e9c <fallas+0x168>
			goto fallas_j02c;
 8003e9a:	46c0      	nop			@ (mov r8, r8)
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8003e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8003fd8 <fallas+0x2a4>)
 8003e9e:	791b      	ldrb	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 8003ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8003fd8 <fallas+0x2a4>)
 8003ea6:	795b      	ldrb	r3, [r3, #5]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4053      	eors	r3, r2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 8003eb2:	e000      	b.n	8003eb6 <fallas+0x182>
	       	  goto fallas_j01b;
 8003eb4:	46c0      	nop			@ (mov r8, r8)
		wreg_waux_conf(0x1F, 0x13, 1);
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	2113      	movs	r1, #19
 8003eba:	201f      	movs	r0, #31
 8003ebc:	f000 fd9a 	bl	80049f4 <wreg_waux_conf>
 8003ec0:	e000      	b.n	8003ec4 <fallas+0x190>
	       	  goto fallas_j02b;
 8003ec2:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 8003ec4:	4b43      	ldr	r3, [pc, #268]	@ (8003fd4 <fallas+0x2a0>)
 8003ec6:	789b      	ldrb	r3, [r3, #2]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 8003ecc:	4b41      	ldr	r3, [pc, #260]	@ (8003fd4 <fallas+0x2a0>)
 8003ece:	78db      	ldrb	r3, [r3, #3]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4053      	eors	r3, r2
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 8003eda:	e000      	b.n	8003ede <fallas+0x1aa>
			goto fallas_j03;
 8003edc:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 8003ede:	2201      	movs	r2, #1
 8003ee0:	2113      	movs	r1, #19
 8003ee2:	201f      	movs	r0, #31
 8003ee4:	f000 fd86 	bl	80049f4 <wreg_waux_conf>
 8003ee8:	e000      	b.n	8003eec <fallas+0x1b8>
			goto fallas_j04;
 8003eea:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 8003eec:	4b39      	ldr	r3, [pc, #228]	@ (8003fd4 <fallas+0x2a0>)
 8003eee:	791b      	ldrb	r3, [r3, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4053      	eors	r3, r2
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 8003efa:	2201      	movs	r2, #1
 8003efc:	211e      	movs	r1, #30
 8003efe:	201f      	movs	r0, #31
 8003f00:	f000 fd78 	bl	80049f4 <wreg_waux_conf>
 8003f04:	e000      	b.n	8003f08 <fallas+0x1d4>
			goto fallas_j06;
 8003f06:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 8003f08:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <fallas+0x2a4>)
 8003f0a:	799b      	ldrb	r3, [r3, #6]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	4053      	eors	r3, r2
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 8003f16:	2201      	movs	r2, #1
 8003f18:	210a      	movs	r1, #10
 8003f1a:	201f      	movs	r0, #31
 8003f1c:	f000 fd6a 	bl	80049f4 <wreg_waux_conf>
 8003f20:	e000      	b.n	8003f24 <fallas+0x1f0>
			goto fallas_j06a;
 8003f22:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 8003f24:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd8 <fallas+0x2a4>)
 8003f26:	789b      	ldrb	r3, [r3, #2]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4053      	eors	r3, r2
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 8003f32:	2201      	movs	r2, #1
 8003f34:	210c      	movs	r1, #12
 8003f36:	2020      	movs	r0, #32
 8003f38:	f000 fd5c 	bl	80049f4 <wreg_waux_conf>
 8003f3c:	e000      	b.n	8003f40 <fallas+0x20c>
			goto fallas_j04b;
 8003f3e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 8003f40:	4b25      	ldr	r3, [pc, #148]	@ (8003fd8 <fallas+0x2a4>)
 8003f42:	78db      	ldrb	r3, [r3, #3]
 8003f44:	2201      	movs	r2, #1
 8003f46:	4053      	eors	r3, r2
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 8003f4e:	2201      	movs	r2, #1
 8003f50:	210b      	movs	r1, #11
 8003f52:	2020      	movs	r0, #32
 8003f54:	f000 fd4e 	bl	80049f4 <wreg_waux_conf>
 8003f58:	e000      	b.n	8003f5c <fallas+0x228>
			goto fallas_j04c;
 8003f5a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <fallas+0x2a4>)
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	2201      	movs	r2, #1
 8003f62:	4053      	eors	r3, r2
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	210c      	movs	r1, #12
 8003f6e:	201f      	movs	r0, #31
 8003f70:	f000 fd40 	bl	80049f4 <wreg_waux_conf>
 8003f74:	e000      	b.n	8003f78 <fallas+0x244>
			goto fallas_j06b;
 8003f76:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 8003f78:	4b14      	ldr	r3, [pc, #80]	@ (8003fcc <fallas+0x298>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d00c      	beq.n	8003f9a <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 8003f80:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <fallas+0x2b8>)
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	4a19      	ldr	r2, [pc, #100]	@ (8003ff0 <fallas+0x2bc>)
 8003f8c:	215a      	movs	r1, #90	@ 0x5a
 8003f8e:	5c52      	ldrb	r2, [r2, r1]
 8003f90:	4013      	ands	r3, r2
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d111      	bne.n	8003fbc <fallas+0x288>
			goto parpadeo2a;
 8003f98:	e000      	b.n	8003f9c <fallas+0x268>
			goto parpadeo2a;
 8003f9a:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8003f9c:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 8003f9e:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <fallas+0x2b4>)
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <fallas+0x2b0>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	0010      	movs	r0, r2
 8003faa:	f000 fcfb 	bl	80049a4 <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 8003fae:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <fallas+0x29c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <fallas+0x29c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	705a      	strb	r2, [r3, #1]
 8003fba:	e000      	b.n	8003fbe <fallas+0x28a>
		goto finfallas;
 8003fbc:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000ed4 	.word	0x20000ed4
 8003fcc:	20000ad4 	.word	0x20000ad4
 8003fd0:	20000acc 	.word	0x20000acc
 8003fd4:	20000ac4 	.word	0x20000ac4
 8003fd8:	20000abc 	.word	0x20000abc
 8003fdc:	20000fe4 	.word	0x20000fe4
 8003fe0:	20000b14 	.word	0x20000b14
 8003fe4:	20000a92 	.word	0x20000a92
 8003fe8:	20000a93 	.word	0x20000a93
 8003fec:	20000a8a 	.word	0x20000a8a
 8003ff0:	200000bc 	.word	0x200000bc

08003ff4 <offdpy>:
void offdpy (){				//	offdpy:
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 8003ff8:	211f      	movs	r1, #31
 8003ffa:	201f      	movs	r0, #31
 8003ffc:	f000 fcd2 	bl	80049a4 <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <offdpy+0x20>)
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 8004006:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <offdpy+0x20>)
 8004008:	2200      	movs	r2, #0
 800400a:	705a      	strb	r2, [r3, #1]
}
 800400c:	46c0      	nop			@ (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	20000acc 	.word	0x20000acc

08004018 <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401a:	b0ad      	sub	sp, #180	@ 0xb4
 800401c:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 800401e:	4bba      	ldr	r3, [pc, #744]	@ (8004308 <ram_reserved+0x2f0>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2baa      	cmp	r3, #170	@ 0xaa
 8004024:	d000      	beq.n	8004028 <ram_reserved+0x10>
 8004026:	e162      	b.n	80042ee <ram_reserved+0x2d6>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 8004028:	46c0      	nop			@ (mov r8, r8)

			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 800402a:	4bb8      	ldr	r3, [pc, #736]	@ (800430c <ram_reserved+0x2f4>)
 800402c:	0018      	movs	r0, r3
 800402e:	f00e fd03 	bl	8012a38 <HAL_IWDG_Refresh>
			// Para realizar una sobreescritura en la Flash, es necesario borrar la pagina antes
			// CGM 04/12/2024

			uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
 8004032:	4bb7      	ldr	r3, [pc, #732]	@ (8004310 <ram_reserved+0x2f8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	22f8      	movs	r2, #248	@ 0xf8
 8004038:	0612      	lsls	r2, r2, #24
 800403a:	4694      	mov	ip, r2
 800403c:	4463      	add	r3, ip
 800403e:	22a4      	movs	r2, #164	@ 0xa4
 8004040:	18b9      	adds	r1, r7, r2
 8004042:	600b      	str	r3, [r1, #0]
			if(VarAux_ % 2048 == 0){
 8004044:	18bb      	adds	r3, r7, r2
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	055b      	lsls	r3, r3, #21
 800404a:	0d5b      	lsrs	r3, r3, #21
 800404c:	d130      	bne.n	80040b0 <ram_reserved+0x98>
				uint32_t numberPage = VarAux_/2048; 		// Number the Page
 800404e:	18bb      	adds	r3, r7, r2
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	0adb      	lsrs	r3, r3, #11
 8004054:	25a0      	movs	r5, #160	@ 0xa0
 8004056:	197a      	adds	r2, r7, r5
 8004058:	6013      	str	r3, [r2, #0]
				uint32_t Error_ = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	2294      	movs	r2, #148	@ 0x94
 800405e:	18ba      	adds	r2, r7, r2
 8004060:	6013      	str	r3, [r2, #0]
				FLASH_EraseInitTypeDef pEraseInit = {0};
 8004062:	2484      	movs	r4, #132	@ 0x84
 8004064:	193b      	adds	r3, r7, r4
 8004066:	0018      	movs	r0, r3
 8004068:	2310      	movs	r3, #16
 800406a:	001a      	movs	r2, r3
 800406c:	2100      	movs	r1, #0
 800406e:	f013 fd9d 	bl	8017bac <memset>
				pEraseInit.NbPages = 1;
 8004072:	0021      	movs	r1, r4
 8004074:	187a      	adds	r2, r7, r1
 8004076:	2301      	movs	r3, #1
 8004078:	60d3      	str	r3, [r2, #12]
				pEraseInit.Page = numberPage;
 800407a:	187a      	adds	r2, r7, r1
 800407c:	197b      	adds	r3, r7, r5
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6093      	str	r3, [r2, #8]
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004082:	187a      	adds	r2, r7, r1
 8004084:	2302      	movs	r3, #2
 8004086:	6013      	str	r3, [r2, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	f00b fda7 	bl	800fbdc <HAL_FLASH_Unlock>
 800408e:	1e03      	subs	r3, r0, #0
 8004090:	d1fb      	bne.n	800408a <ram_reserved+0x72>
				HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8004092:	2314      	movs	r3, #20
 8004094:	2280      	movs	r2, #128	@ 0x80
 8004096:	189b      	adds	r3, r3, r2
 8004098:	19da      	adds	r2, r3, r7
 800409a:	2384      	movs	r3, #132	@ 0x84
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	0011      	movs	r1, r2
 80040a0:	0018      	movs	r0, r3
 80040a2:	f00b fe8f 	bl	800fdc4 <HAL_FLASHEx_Erase>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	f00b fdbc 	bl	800fc24 <HAL_FLASH_Lock>
 80040ac:	1e03      	subs	r3, r0, #0
 80040ae:	d1fb      	bne.n	80040a8 <ram_reserved+0x90>
			}
			AddressDestination = (uint64_t *) dirPointer;
 80040b0:	4b97      	ldr	r3, [pc, #604]	@ (8004310 <ram_reserved+0x2f8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	22ac      	movs	r2, #172	@ 0xac
 80040b6:	18ba      	adds	r2, r7, r2
 80040b8:	6013      	str	r3, [r2, #0]
			//while( HAL_FLASH_Unlock() !=  HAL_OK );
			// Graba 128 Bytes de FLASH
			for(uint8_t i = 0; i < 16 ; i++ ){
 80040ba:	232b      	movs	r3, #43	@ 0x2b
 80040bc:	2280      	movs	r2, #128	@ 0x80
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	19da      	adds	r2, r3, r7
 80040c2:	2300      	movs	r3, #0
 80040c4:	7013      	strb	r3, [r2, #0]
 80040c6:	e108      	b.n	80042da <ram_reserved+0x2c2>
			   	// Data = (uint32_t)(*dataPointer);

				Data  	 =  (uint64_t)(*dataPointer);						dataPointer++;
 80040c8:	4b92      	ldr	r3, [pc, #584]	@ (8004314 <ram_reserved+0x2fc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2498      	movs	r4, #152	@ 0x98
 80040d0:	193a      	adds	r2, r7, r4
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	2300      	movs	r3, #0
 80040d6:	229c      	movs	r2, #156	@ 0x9c
 80040d8:	18ba      	adds	r2, r7, r2
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004314 <ram_reserved+0x2fc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004314 <ram_reserved+0x2fc>)
 80040e4:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer))	<<8;				dataPointer++;
 80040e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004314 <ram_reserved+0x2fc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ee:	2300      	movs	r3, #0
 80040f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040f6:	000b      	movs	r3, r1
 80040f8:	0e1b      	lsrs	r3, r3, #24
 80040fa:	0010      	movs	r0, r2
 80040fc:	0200      	lsls	r0, r0, #8
 80040fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8004100:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004102:	4318      	orrs	r0, r3
 8004104:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8004106:	000b      	movs	r3, r1
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800410c:	193b      	adds	r3, r7, r4
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8004114:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004116:	1812      	adds	r2, r2, r0
 8004118:	414b      	adcs	r3, r1
 800411a:	1939      	adds	r1, r7, r4
 800411c:	600a      	str	r2, [r1, #0]
 800411e:	604b      	str	r3, [r1, #4]
 8004120:	4b7c      	ldr	r3, [pc, #496]	@ (8004314 <ram_reserved+0x2fc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	4b7b      	ldr	r3, [pc, #492]	@ (8004314 <ram_reserved+0x2fc>)
 8004128:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer)) 	<<16;				dataPointer++;
 800412a:	4b7a      	ldr	r3, [pc, #488]	@ (8004314 <ram_reserved+0x2fc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	663b      	str	r3, [r7, #96]	@ 0x60
 8004132:	2300      	movs	r3, #0
 8004134:	667b      	str	r3, [r7, #100]	@ 0x64
 8004136:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004138:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800413a:	000b      	movs	r3, r1
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	0010      	movs	r0, r2
 8004140:	0400      	lsls	r0, r0, #16
 8004142:	6778      	str	r0, [r7, #116]	@ 0x74
 8004144:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004146:	4318      	orrs	r0, r3
 8004148:	6778      	str	r0, [r7, #116]	@ 0x74
 800414a:	000b      	movs	r3, r1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004150:	193b      	adds	r3, r7, r4
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004158:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800415a:	1812      	adds	r2, r2, r0
 800415c:	414b      	adcs	r3, r1
 800415e:	0021      	movs	r1, r4
 8004160:	1938      	adds	r0, r7, r4
 8004162:	6002      	str	r2, [r0, #0]
 8004164:	6043      	str	r3, [r0, #4]
 8004166:	4b6b      	ldr	r3, [pc, #428]	@ (8004314 <ram_reserved+0x2fc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	4b69      	ldr	r3, [pc, #420]	@ (8004314 <ram_reserved+0x2fc>)
 800416e:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<24;			   	dataPointer++;
 8004170:	4b68      	ldr	r3, [pc, #416]	@ (8004314 <ram_reserved+0x2fc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004178:	2300      	movs	r3, #0
 800417a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800417c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800417e:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8004180:	001a      	movs	r2, r3
 8004182:	0a12      	lsrs	r2, r2, #8
 8004184:	657a      	str	r2, [r7, #84]	@ 0x54
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	653b      	str	r3, [r7, #80]	@ 0x50
 800418a:	000c      	movs	r4, r1
 800418c:	187b      	adds	r3, r7, r1
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004194:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004196:	1812      	adds	r2, r2, r0
 8004198:	414b      	adcs	r3, r1
 800419a:	0021      	movs	r1, r4
 800419c:	1878      	adds	r0, r7, r1
 800419e:	6002      	str	r2, [r0, #0]
 80041a0:	6043      	str	r3, [r0, #4]
 80041a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004314 <ram_reserved+0x2fc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004314 <ram_reserved+0x2fc>)
 80041aa:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<32;			   	dataPointer++;
 80041ac:	4b59      	ldr	r3, [pc, #356]	@ (8004314 <ram_reserved+0x2fc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b4:	2300      	movs	r3, #0
 80041b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ba:	001b      	movs	r3, r3
 80041bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041be:	2300      	movs	r3, #0
 80041c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041c2:	000c      	movs	r4, r1
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80041cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041ce:	1812      	adds	r2, r2, r0
 80041d0:	414b      	adcs	r3, r1
 80041d2:	0021      	movs	r1, r4
 80041d4:	1878      	adds	r0, r7, r1
 80041d6:	6002      	str	r2, [r0, #0]
 80041d8:	6043      	str	r3, [r0, #4]
 80041da:	4b4e      	ldr	r3, [pc, #312]	@ (8004314 <ram_reserved+0x2fc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004314 <ram_reserved+0x2fc>)
 80041e2:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<40;			   	dataPointer++;
 80041e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004314 <ram_reserved+0x2fc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041ec:	2300      	movs	r3, #0
 80041ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f6:	2300      	movs	r3, #0
 80041f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041fa:	000c      	movs	r4, r1
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004204:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004206:	1812      	adds	r2, r2, r0
 8004208:	414b      	adcs	r3, r1
 800420a:	0021      	movs	r1, r4
 800420c:	1878      	adds	r0, r7, r1
 800420e:	6002      	str	r2, [r0, #0]
 8004210:	6043      	str	r3, [r0, #4]
 8004212:	4b40      	ldr	r3, [pc, #256]	@ (8004314 <ram_reserved+0x2fc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <ram_reserved+0x2fc>)
 800421a:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<48;			   	dataPointer++;
 800421c:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <ram_reserved+0x2fc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
 800422e:	2300      	movs	r3, #0
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	000c      	movs	r4, r1
 8004234:	187b      	adds	r3, r7, r1
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	6a38      	ldr	r0, [r7, #32]
 800423c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800423e:	1812      	adds	r2, r2, r0
 8004240:	414b      	adcs	r3, r1
 8004242:	0021      	movs	r1, r4
 8004244:	1878      	adds	r0, r7, r1
 8004246:	6002      	str	r2, [r0, #0]
 8004248:	6043      	str	r3, [r0, #4]
 800424a:	4b32      	ldr	r3, [pc, #200]	@ (8004314 <ram_reserved+0x2fc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	4b30      	ldr	r3, [pc, #192]	@ (8004314 <ram_reserved+0x2fc>)
 8004252:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<56;			   	dataPointer++;
 8004254:	4b2f      	ldr	r3, [pc, #188]	@ (8004314 <ram_reserved+0x2fc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	000c      	movs	r4, r1
 800426c:	187b      	adds	r3, r7, r1
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	6938      	ldr	r0, [r7, #16]
 8004274:	6979      	ldr	r1, [r7, #20]
 8004276:	1812      	adds	r2, r2, r0
 8004278:	414b      	adcs	r3, r1
 800427a:	1939      	adds	r1, r7, r4
 800427c:	600a      	str	r2, [r1, #0]
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <ram_reserved+0x2fc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <ram_reserved+0x2fc>)
 8004288:	601a      	str	r2, [r3, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	f00b fca6 	bl	800fbdc <HAL_FLASH_Unlock>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d1fb      	bne.n	800428c <ram_reserved+0x274>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) AddressDestination, Data);
 8004294:	23ac      	movs	r3, #172	@ 0xac
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	2398      	movs	r3, #152	@ 0x98
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2001      	movs	r0, #1
 80042a4:	f00b fc4c 	bl	800fb40 <HAL_FLASH_Program>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 80042a8:	46c0      	nop			@ (mov r8, r8)
 80042aa:	f00b fcbb 	bl	800fc24 <HAL_FLASH_Lock>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d1fb      	bne.n	80042aa <ram_reserved+0x292>
				AddressDestination++;
 80042b2:	22ac      	movs	r2, #172	@ 0xac
 80042b4:	18bb      	adds	r3, r7, r2
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	18ba      	adds	r2, r7, r2
 80042bc:	6013      	str	r3, [r2, #0]
				//if(AddressDestination>=0x801d000)
				//	break;
//				while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, AddressDestination, Data) !=  HAL_OK );		// HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			   	//dirPointer +=4;
				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
 80042be:	4b13      	ldr	r3, [pc, #76]	@ (800430c <ram_reserved+0x2f4>)
 80042c0:	0018      	movs	r0, r3
 80042c2:	f00e fbb9 	bl	8012a38 <HAL_IWDG_Refresh>


				asm ("nop");
 80042c6:	46c0      	nop			@ (mov r8, r8)
			for(uint8_t i = 0; i < 16 ; i++ ){
 80042c8:	222b      	movs	r2, #43	@ 0x2b
 80042ca:	2180      	movs	r1, #128	@ 0x80
 80042cc:	1853      	adds	r3, r2, r1
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	1852      	adds	r2, r2, r1
 80042d4:	19d2      	adds	r2, r2, r7
 80042d6:	3301      	adds	r3, #1
 80042d8:	7013      	strb	r3, [r2, #0]
 80042da:	232b      	movs	r3, #43	@ 0x2b
 80042dc:	2280      	movs	r2, #128	@ 0x80
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	19db      	adds	r3, r3, r7
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b0f      	cmp	r3, #15
 80042e6:	d800      	bhi.n	80042ea <ram_reserved+0x2d2>
 80042e8:	e6ee      	b.n	80040c8 <ram_reserved+0xb0>
//			LD				A,cntByteLoaded											;	Si el contador apuntador ya es 63 entonces espera a que la grabacion se ejecute
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			asm ("nop");
 80042ea:	46c0      	nop			@ (mov r8, r8)
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 80042ec:	e086      	b.n	80043fc <ram_reserved+0x3e4>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 80042ee:	46c0      	nop			@ (mov r8, r8)
//check_bit_enable:																											;	Si la EEPROM no esta desbloqueada entonces repite la llave
//												BTJF			FLASH_IAPSR,#3,PROG_eepr_mode
//MEM_UNLOCKED1:

GRABA_SIG:
			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 80042f0:	4b06      	ldr	r3, [pc, #24]	@ (800430c <ram_reserved+0x2f4>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f00e fba0 	bl	8012a38 <HAL_IWDG_Refresh>
//			;CP				A,#$3F															;	Si no entonces ve a cargar el siguiente dato
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_SIG

			// Graba 128 Bytes  de Data Memory
			for(uint8_t i = 0; i < 32 ; i++ ){
 80042f8:	232a      	movs	r3, #42	@ 0x2a
 80042fa:	2280      	movs	r2, #128	@ 0x80
 80042fc:	189b      	adds	r3, r3, r2
 80042fe:	19db      	adds	r3, r3, r7
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e072      	b.n	80043ec <ram_reserved+0x3d4>
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	20000cc8 	.word	0x20000cc8
 800430c:	200004b8 	.word	0x200004b8
 8004310:	20000ccc 	.word	0x20000ccc
 8004314:	20000cd0 	.word	0x20000cd0
				AddressDestination = dirPointer;
 8004318:	4b3c      	ldr	r3, [pc, #240]	@ (800440c <ram_reserved+0x3f4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	22ac      	movs	r2, #172	@ 0xac
 800431e:	18ba      	adds	r2, r7, r2
 8004320:	6013      	str	r3, [r2, #0]
			   	// Data = (uint32_t)(*dataPointer);

				Data  =  (uint32_t)(*dataPointer);						dataPointer++;
 8004322:	4b3b      	ldr	r3, [pc, #236]	@ (8004410 <ram_reserved+0x3f8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2198      	movs	r1, #152	@ 0x98
 800432a:	187a      	adds	r2, r7, r1
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	229c      	movs	r2, #156	@ 0x9c
 8004332:	18ba      	adds	r2, r7, r2
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4b36      	ldr	r3, [pc, #216]	@ (8004410 <ram_reserved+0x3f8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <ram_reserved+0x3f8>)
 800433e:	601a      	str	r2, [r3, #0]
				Data  += ((uint32_t)(*dataPointer)) <<8;				dataPointer++;
 8004340:	4b33      	ldr	r3, [pc, #204]	@ (8004410 <ram_reserved+0x3f8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	001c      	movs	r4, r3
 800434a:	2300      	movs	r3, #0
 800434c:	001d      	movs	r5, r3
 800434e:	187b      	adds	r3, r7, r1
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	1912      	adds	r2, r2, r4
 8004356:	416b      	adcs	r3, r5
 8004358:	1878      	adds	r0, r7, r1
 800435a:	6002      	str	r2, [r0, #0]
 800435c:	6043      	str	r3, [r0, #4]
 800435e:	4b2c      	ldr	r3, [pc, #176]	@ (8004410 <ram_reserved+0x3f8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	4b2a      	ldr	r3, [pc, #168]	@ (8004410 <ram_reserved+0x3f8>)
 8004366:	601a      	str	r2, [r3, #0]
				Data  += ((uint32_t)(*dataPointer)) <<16;				dataPointer++;
 8004368:	4b29      	ldr	r3, [pc, #164]	@ (8004410 <ram_reserved+0x3f8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	000e      	movs	r6, r1
 8004378:	187b      	adds	r3, r7, r1
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68b8      	ldr	r0, [r7, #8]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	1812      	adds	r2, r2, r0
 8004384:	414b      	adcs	r3, r1
 8004386:	0031      	movs	r1, r6
 8004388:	1878      	adds	r0, r7, r1
 800438a:	6002      	str	r2, [r0, #0]
 800438c:	6043      	str	r3, [r0, #4]
 800438e:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <ram_reserved+0x3f8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	4b1e      	ldr	r3, [pc, #120]	@ (8004410 <ram_reserved+0x3f8>)
 8004396:	601a      	str	r2, [r3, #0]
				Data  += ((uint32_t)(*dataPointer))  <<24;			   	dataPointer++;
 8004398:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <ram_reserved+0x3f8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	061b      	lsls	r3, r3, #24
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	000e      	movs	r6, r1
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	6838      	ldr	r0, [r7, #0]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	1812      	adds	r2, r2, r0
 80043b4:	414b      	adcs	r3, r1
 80043b6:	19b9      	adds	r1, r7, r6
 80043b8:	600a      	str	r2, [r1, #0]
 80043ba:	604b      	str	r3, [r1, #4]
 80043bc:	4b14      	ldr	r3, [pc, #80]	@ (8004410 <ram_reserved+0x3f8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <ram_reserved+0x3f8>)
 80043c4:	601a      	str	r2, [r3, #0]

//				while( HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, AddressDestination, Data) !=  HAL_OK );		// HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			   	dirPointer +=4;
 80043c6:	4b11      	ldr	r3, [pc, #68]	@ (800440c <ram_reserved+0x3f4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1d1a      	adds	r2, r3, #4
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <ram_reserved+0x3f4>)
 80043ce:	601a      	str	r2, [r3, #0]
				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
 80043d0:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <ram_reserved+0x3fc>)
 80043d2:	0018      	movs	r0, r3
 80043d4:	f00e fb30 	bl	8012a38 <HAL_IWDG_Refresh>
				asm ("nop");
 80043d8:	46c0      	nop			@ (mov r8, r8)
			for(uint8_t i = 0; i < 32 ; i++ ){
 80043da:	212a      	movs	r1, #42	@ 0x2a
 80043dc:	2080      	movs	r0, #128	@ 0x80
 80043de:	180b      	adds	r3, r1, r0
 80043e0:	19db      	adds	r3, r3, r7
 80043e2:	781a      	ldrb	r2, [r3, #0]
 80043e4:	180b      	adds	r3, r1, r0
 80043e6:	19db      	adds	r3, r3, r7
 80043e8:	3201      	adds	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	232a      	movs	r3, #42	@ 0x2a
 80043ee:	2280      	movs	r2, #128	@ 0x80
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b1f      	cmp	r3, #31
 80043f8:	d98e      	bls.n	8004318 <ram_reserved+0x300>
			}



WAIT_FOR_GRAB_0:
 80043fa:	46c0      	nop			@ (mov r8, r8)

WAIT_FOR_GRAB:
			HAL_IWDG_Refresh( &hiwdg );		//MOV				IWDG_KR,#$AA
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <ram_reserved+0x3fc>)
 80043fe:	0018      	movs	r0, r3
 8004400:	f00e fb1a 	bl	8012a38 <HAL_IWDG_Refresh>
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b02d      	add	sp, #180	@ 0xb4
 800440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440c:	20000ccc 	.word	0x20000ccc
 8004410:	20000cd0 	.word	0x20000cd0
 8004414:	200004b8 	.word	0x200004b8

08004418 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 800441e:	1dbb      	adds	r3, r7, #6
 8004420:	2200      	movs	r2, #0
 8004422:	801a      	strh	r2, [r3, #0]
	foo = eePlantilla[eetiempoAhorro1]*360;		//	mov			wreg,eetiempoAhorro1;	/ Toma el tiempo para entrar a Ahorro1
 8004424:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <load_tiempoAhorro1+0x30>)
 8004426:	226f      	movs	r2, #111	@ 0x6f
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	0019      	movs	r1, r3
 800442c:	1dbb      	adds	r3, r7, #6
 800442e:	22b4      	movs	r2, #180	@ 0xb4
 8004430:	0052      	lsls	r2, r2, #1
 8004432:	434a      	muls	r2, r1
 8004434:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 8004436:	4b05      	ldr	r3, [pc, #20]	@ (800444c <load_tiempoAhorro1+0x34>)
 8004438:	1dba      	adds	r2, r7, #6
 800443a:	8812      	ldrh	r2, [r2, #0]
 800443c:	801a      	strh	r2, [r3, #0]
}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b002      	add	sp, #8
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	0803f000 	.word	0x0803f000
 800444c:	20000b6c 	.word	0x20000b6c

08004450 <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 8004456:	1dbb      	adds	r3, r7, #6
 8004458:	2200      	movs	r2, #0
 800445a:	801a      	strh	r2, [r3, #0]
		foo = eePlantilla[eetiempoAhorro2]*360;		//	mov			wreg,eetiempoAhorro2;	/ Toma el tiempo para entrar a Ahorro2
 800445c:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <load_tiempoAhorro2+0x30>)
 800445e:	2270      	movs	r2, #112	@ 0x70
 8004460:	5c9b      	ldrb	r3, [r3, r2]
 8004462:	0019      	movs	r1, r3
 8004464:	1dbb      	adds	r3, r7, #6
 8004466:	22b4      	movs	r2, #180	@ 0xb4
 8004468:	0052      	lsls	r2, r2, #1
 800446a:	434a      	muls	r2, r1
 800446c:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 800446e:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <load_tiempoAhorro2+0x34>)
 8004470:	1dba      	adds	r2, r7, #6
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	801a      	strh	r2, [r3, #0]
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	0803f000 	.word	0x0803f000
 8004484:	20000b6e 	.word	0x20000b6e

08004488 <load_timeNoct>:

void load_timeNoct(){
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	cntNoct_H = eePlantilla[eetimeNoct] * 60;
 800448c:	4b05      	ldr	r3, [pc, #20]	@ (80044a4 <load_timeNoct+0x1c>)
 800448e:	224b      	movs	r2, #75	@ 0x4b
 8004490:	5c9b      	ldrb	r3, [r3, r2]
 8004492:	001a      	movs	r2, r3
 8004494:	233c      	movs	r3, #60	@ 0x3c
 8004496:	4353      	muls	r3, r2
 8004498:	b29a      	uxth	r2, r3
 800449a:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <load_timeNoct+0x20>)
 800449c:	801a      	strh	r2, [r3, #0]
}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	0803f000 	.word	0x0803f000
 80044a8:	20000b80 	.word	0x20000b80

080044ac <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 80044b2:	4b16      	ldr	r3, [pc, #88]	@ (800450c <load_next_buffer+0x60>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <load_next_buffer+0x64>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	01db      	lsls	r3, r3, #7
 80044be:	b29a      	uxth	r2, r3
 80044c0:	4b14      	ldr	r3, [pc, #80]	@ (8004514 <load_next_buffer+0x68>)
 80044c2:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 80044c4:	4b14      	ldr	r3, [pc, #80]	@ (8004518 <load_next_buffer+0x6c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a12      	ldr	r2, [pc, #72]	@ (8004514 <load_next_buffer+0x68>)
 80044ca:	8812      	ldrh	r2, [r2, #0]
 80044cc:	189b      	adds	r3, r3, r2
 80044ce:	607b      	str	r3, [r7, #4]
	wreg = 0;
 80044d0:	4b12      	ldr	r3, [pc, #72]	@ (800451c <load_next_buffer+0x70>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	701a      	strb	r2, [r3, #0]
	point_X++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
	point_Y++;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	603b      	str	r3, [r7, #0]
	wreg++;
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <load_next_buffer+0x70>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <load_next_buffer+0x70>)
 80044f4:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 80044f6:	4b09      	ldr	r3, [pc, #36]	@ (800451c <load_next_buffer+0x70>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db00      	blt.n	8004502 <load_next_buffer+0x56>
		goto load_next_buffer_01;
 8004500:	e7e9      	b.n	80044d6 <load_next_buffer+0x2a>
	}
    asm ("nop");
 8004502:	46c0      	nop			@ (mov r8, r8)
}
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b002      	add	sp, #8
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000ce0 	.word	0x20000ce0
 8004510:	20000cd6 	.word	0x20000cd6
 8004514:	2000083e 	.word	0x2000083e
 8004518:	20000cdc 	.word	0x20000cdc
 800451c:	20000a93 	.word	0x20000a93

08004520 <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
		//		ldw		X,cntReg
		//		ldw		resulh,X

		uint32_t *point_X;
		point_X = (uint32_t) (cntRegPNT);
 8004526:	4b17      	ldr	r3, [pc, #92]	@ (8004584 <save_cntReg+0x64>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	607b      	str	r3, [r7, #4]

		waux = highByte(cntReg);			//		mov		waux,resulh;
 800452c:	4b16      	ldr	r3, [pc, #88]	@ (8004588 <save_cntReg+0x68>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	b29b      	uxth	r3, r3
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4b15      	ldr	r3, [pc, #84]	@ (800458c <save_cntReg+0x6c>)
 8004538:	701a      	strb	r2, [r3, #0]
		//		ldw		X,cntRegPNT;
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 800453a:	4b14      	ldr	r3, [pc, #80]	@ (800458c <save_cntReg+0x6c>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	001a      	movs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0019      	movs	r1, r3
 8004544:	0010      	movs	r0, r2
 8004546:	f000 fa1f 	bl	8004988 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//  	MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800454a:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <save_cntReg+0x70>)
 800454c:	0018      	movs	r0, r3
 800454e:	f00e fa73 	bl	8012a38 <HAL_IWDG_Refresh>
		//
		waux = lowByte(cntReg);		// 		mov		waux,resull;
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <save_cntReg+0x68>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <save_cntReg+0x6c>)
 800455a:	701a      	strb	r2, [r3, #0]
		point_X++;  // cntRegPNT++;						//		incw	X
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	607b      	str	r3, [r7, #4]
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 8004562:	4b0a      	ldr	r3, [pc, #40]	@ (800458c <save_cntReg+0x6c>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	001a      	movs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0019      	movs	r1, r3
 800456c:	0010      	movs	r0, r2
 800456e:	f000 fa0b 	bl	8004988 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004572:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <save_cntReg+0x70>)
 8004574:	0018      	movs	r0, r3
 8004576:	f00e fa5f 	bl	8012a38 <HAL_IWDG_Refresh>
		//
//		ret
}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	20000f7c 	.word	0x20000f7c
 8004588:	20000f7a 	.word	0x20000f7a
 800458c:	20000a92 	.word	0x20000a92
 8004590:	200004b8 	.word	0x200004b8

08004594 <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 8004598:	4b25      	ldr	r3, [pc, #148]	@ (8004630 <save_timeUNIX+0x9c>)
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	b29b      	uxth	r3, r3
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b24      	ldr	r3, [pc, #144]	@ (8004634 <save_timeUNIX+0xa0>)
 80045a4:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 80045a6:	4b23      	ldr	r3, [pc, #140]	@ (8004634 <save_timeUNIX+0xa0>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	001a      	movs	r2, r3
 80045ac:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <save_timeUNIX+0xa4>)
 80045ae:	0019      	movs	r1, r3
 80045b0:	0010      	movs	r0, r2
 80045b2:	f000 f9e9 	bl	8004988 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 80045b6:	4b21      	ldr	r3, [pc, #132]	@ (800463c <save_timeUNIX+0xa8>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f00e fa3d 	bl	8012a38 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 80045be:	4b1c      	ldr	r3, [pc, #112]	@ (8004630 <save_timeUNIX+0x9c>)
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004634 <save_timeUNIX+0xa0>)
 80045c6:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 80045c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004634 <save_timeUNIX+0xa0>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	001a      	movs	r2, r3
 80045ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004640 <save_timeUNIX+0xac>)
 80045d0:	0019      	movs	r1, r3
 80045d2:	0010      	movs	r0, r2
 80045d4:	f000 f9d8 	bl	8004988 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 80045d8:	4b18      	ldr	r3, [pc, #96]	@ (800463c <save_timeUNIX+0xa8>)
 80045da:	0018      	movs	r0, r3
 80045dc:	f00e fa2c 	bl	8012a38 <HAL_IWDG_Refresh>


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 80045e0:	4b18      	ldr	r3, [pc, #96]	@ (8004644 <save_timeUNIX+0xb0>)
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b12      	ldr	r3, [pc, #72]	@ (8004634 <save_timeUNIX+0xa0>)
 80045ec:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 80045ee:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <save_timeUNIX+0xa0>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	001a      	movs	r2, r3
 80045f4:	4b14      	ldr	r3, [pc, #80]	@ (8004648 <save_timeUNIX+0xb4>)
 80045f6:	0019      	movs	r1, r3
 80045f8:	0010      	movs	r0, r2
 80045fa:	f000 f9c5 	bl	8004988 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 80045fe:	4b0f      	ldr	r3, [pc, #60]	@ (800463c <save_timeUNIX+0xa8>)
 8004600:	0018      	movs	r0, r3
 8004602:	f00e fa19 	bl	8012a38 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8004606:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <save_timeUNIX+0xb0>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <save_timeUNIX+0xa0>)
 800460e:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <save_timeUNIX+0xa0>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	001a      	movs	r2, r3
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <save_timeUNIX+0xb8>)
 8004618:	0019      	movs	r1, r3
 800461a:	0010      	movs	r0, r2
 800461c:	f000 f9b4 	bl	8004988 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <save_timeUNIX+0xa8>)
 8004622:	0018      	movs	r0, r3
 8004624:	f00e fa08 	bl	8012a38 <HAL_IWDG_Refresh>

}
 8004628:	46c0      	nop			@ (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	20000cec 	.word	0x20000cec
 8004634:	20000a92 	.word	0x20000a92
 8004638:	0803f084 	.word	0x0803f084
 800463c:	200004b8 	.word	0x200004b8
 8004640:	0803f085 	.word	0x0803f085
 8004644:	20000cee 	.word	0x20000cee
 8004648:	0803f086 	.word	0x0803f086
 800464c:	0803f087 	.word	0x0803f087

08004650 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	000a      	movs	r2, r1
 800465a:	1cfb      	adds	r3, r7, #3
 800465c:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 800465e:	e011      	b.n	8004684 <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8004660:	210f      	movs	r1, #15
 8004662:	187b      	adds	r3, r7, r1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 800466a:	187b      	adds	r3, r7, r1
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	0018      	movs	r0, r3
 8004670:	f000 f860 	bl	8004734 <build_chksum>
		*point_X++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3301      	adds	r3, #1
 8004678:	607b      	str	r3, [r7, #4]
		waux--;
 800467a:	1cfb      	adds	r3, r7, #3
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	1cfb      	adds	r3, r7, #3
 8004680:	3a01      	subs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]
	while (waux){
 8004684:	1cfb      	adds	r3, r7, #3
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e9      	bne.n	8004660 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b004      	add	sp, #16
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <ld_alarmDelay+0x1c>)
 800469e:	224e      	movs	r2, #78	@ 0x4e
 80046a0:	5c9b      	ldrb	r3, [r3, r2]
 80046a2:	001a      	movs	r2, r3
 80046a4:	233c      	movs	r3, #60	@ 0x3c
 80046a6:	4353      	muls	r3, r2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	4b03      	ldr	r3, [pc, #12]	@ (80046b8 <ld_alarmDelay+0x20>)
 80046ac:	801a      	strh	r2, [r3, #0]
}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200000bc 	.word	0x200000bc
 80046b8:	20000edc 	.word	0x20000edc

080046bc <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	e007      	b.n	80046d8 <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 80046c8:	4a07      	ldr	r2, [pc, #28]	@ (80046e8 <clean_buffer+0x2c>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	18d3      	adds	r3, r2, r3
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3301      	adds	r3, #1
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b7f      	cmp	r3, #127	@ 0x7f
 80046dc:	ddf4      	ble.n	80046c8 <clean_buffer+0xc>
	}
}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000bc8 	.word	0x20000bc8

080046ec <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e00c      	b.n	8004716 <copyVector+0x2a>
		*dstY = *srcX;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	701a      	strb	r2, [r3, #0]
		srcX++;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3301      	adds	r3, #1
 8004708:	607b      	str	r3, [r7, #4]
		dstY++;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <copyVector+0x44>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	001a      	movs	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4293      	cmp	r3, r2
 8004720:	dbec      	blt.n	80046fc <copyVector+0x10>
	}
	wreg = 0;
 8004722:	4b03      	ldr	r3, [pc, #12]	@ (8004730 <copyVector+0x44>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
}
 8004728:	46c0      	nop			@ (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000a93 	.word	0x20000a93

08004734 <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	0002      	movs	r2, r0
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8004740:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 8004742:	1dfb      	adds	r3, r7, #7
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <build_chksum+0x24>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	18d2      	adds	r2, r2, r3
 800474c:	4b02      	ldr	r3, [pc, #8]	@ (8004758 <build_chksum+0x24>)
 800474e:	601a      	str	r2, [r3, #0]
}
 8004750:	46c0      	nop			@ (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000d70 	.word	0x20000d70

0800475c <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 8004760:	f7ff fc5a 	bl	8004018 <ram_reserved>
Return_RAM:

}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <decword+0x1c>
		(*decwreg_Reg)--;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	801a      	strh	r2, [r3, #0]
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b002      	add	sp, #8
 800478c:	bd80      	pop	{r7, pc}

0800478e <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <decwreg+0x1c>
		(*decwreg_Reg)--;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	701a      	strb	r2, [r3, #0]
}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 80047ba:	4b40      	ldr	r3, [pc, #256]	@ (80048bc <buildmode+0x108>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 80047c0:	4b3f      	ldr	r3, [pc, #252]	@ (80048c0 <buildmode+0x10c>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 80047c8:	4b3c      	ldr	r3, [pc, #240]	@ (80048bc <buildmode+0x108>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2201      	movs	r2, #1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4b3a      	ldr	r3, [pc, #232]	@ (80048bc <buildmode+0x108>)
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	e000      	b.n	80047da <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 80047d8:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 80047da:	1dbb      	adds	r3, r7, #6
 80047dc:	2200      	movs	r2, #0
 80047de:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 80047e0:	4b38      	ldr	r3, [pc, #224]	@ (80048c4 <buildmode+0x110>)
 80047e2:	2223      	movs	r2, #35	@ 0x23
 80047e4:	5c9b      	ldrb	r3, [r3, r2]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	4a36      	ldr	r2, [pc, #216]	@ (80048c4 <buildmode+0x110>)
 80047ec:	2124      	movs	r1, #36	@ 0x24
 80047ee:	5c52      	ldrb	r2, [r2, r1]
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	1dbb      	adds	r3, r7, #6
 80047f6:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 80047f8:	4b33      	ldr	r3, [pc, #204]	@ (80048c8 <buildmode+0x114>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4a32      	ldr	r2, [pc, #200]	@ (80048cc <buildmode+0x118>)
 8004802:	7812      	ldrb	r2, [r2, #0]
 8004804:	189b      	adds	r3, r3, r2
 8004806:	b29a      	uxth	r2, r3
 8004808:	4b31      	ldr	r3, [pc, #196]	@ (80048d0 <buildmode+0x11c>)
 800480a:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 800480c:	4b30      	ldr	r3, [pc, #192]	@ (80048d0 <buildmode+0x11c>)
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b21b      	sxth	r3, r3
 8004812:	1dba      	adds	r2, r7, #6
 8004814:	2100      	movs	r1, #0
 8004816:	5e52      	ldrsh	r2, [r2, r1]
 8004818:	429a      	cmp	r2, r3
 800481a:	dc07      	bgt.n	800482c <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <buildmode+0x108>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2202      	movs	r2, #2
 8004822:	4313      	orrs	r3, r2
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4b25      	ldr	r3, [pc, #148]	@ (80048bc <buildmode+0x108>)
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e000      	b.n	800482e <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 800482c:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 800482e:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <buildmode+0x110>)
 8004830:	2259      	movs	r2, #89	@ 0x59
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d025      	beq.n	8004884 <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 8004838:	4b26      	ldr	r3, [pc, #152]	@ (80048d4 <buildmode+0x120>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	b29b      	uxth	r3, r3
 8004840:	4a25      	ldr	r2, [pc, #148]	@ (80048d8 <buildmode+0x124>)
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	189b      	adds	r3, r3, r2
 8004846:	b29a      	uxth	r2, r3
 8004848:	4b21      	ldr	r3, [pc, #132]	@ (80048d0 <buildmode+0x11c>)
 800484a:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 800484c:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <buildmode+0x110>)
 800484e:	2221      	movs	r2, #33	@ 0x21
 8004850:	5c9b      	ldrb	r3, [r3, r2]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	b29b      	uxth	r3, r3
 8004856:	4a1b      	ldr	r2, [pc, #108]	@ (80048c4 <buildmode+0x110>)
 8004858:	2122      	movs	r1, #34	@ 0x22
 800485a:	5c52      	ldrb	r2, [r2, r1]
 800485c:	189b      	adds	r3, r3, r2
 800485e:	b29a      	uxth	r2, r3
 8004860:	1dbb      	adds	r3, r7, #6
 8004862:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8004864:	4b1a      	ldr	r3, [pc, #104]	@ (80048d0 <buildmode+0x11c>)
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b21b      	sxth	r3, r3
 800486a:	1dba      	adds	r2, r7, #6
 800486c:	2100      	movs	r1, #0
 800486e:	5e52      	ldrsh	r2, [r2, r1]
 8004870:	429a      	cmp	r2, r3
 8004872:	dc09      	bgt.n	8004888 <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 8004874:	4b11      	ldr	r3, [pc, #68]	@ (80048bc <buildmode+0x108>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2210      	movs	r2, #16
 800487a:	4313      	orrs	r3, r2
 800487c:	b2da      	uxtb	r2, r3
 800487e:	4b0f      	ldr	r3, [pc, #60]	@ (80048bc <buildmode+0x108>)
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e002      	b.n	800488a <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 8004884:	46c0      	nop			@ (mov r8, r8)
 8004886:	e000      	b.n	800488a <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 8004888:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 800488a:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <buildmode+0x128>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	4053      	eors	r3, r2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d108      	bne.n	80048aa <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 8004898:	4b08      	ldr	r3, [pc, #32]	@ (80048bc <buildmode+0x108>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2280      	movs	r2, #128	@ 0x80
 800489e:	4252      	negs	r2, r2
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <buildmode+0x108>)
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e000      	b.n	80048ac <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 80048aa:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 80048ac:	4b03      	ldr	r3, [pc, #12]	@ (80048bc <buildmode+0x108>)
 80048ae:	781a      	ldrb	r2, [r3, #0]
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <buildmode+0x12c>)
 80048b2:	701a      	strb	r2, [r3, #0]

}
 80048b4:	46c0      	nop			@ (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000a92 	.word	0x20000a92
 80048c0:	20000af6 	.word	0x20000af6
 80048c4:	200000bc 	.word	0x200000bc
 80048c8:	20000aec 	.word	0x20000aec
 80048cc:	20000aed 	.word	0x20000aed
 80048d0:	2000083e 	.word	0x2000083e
 80048d4:	20000aee 	.word	0x20000aee
 80048d8:	20000aef 	.word	0x20000aef
 80048dc:	20000ab4 	.word	0x20000ab4
 80048e0:	20000a90 	.word	0x20000a90

080048e4 <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 80048ea:	4b22      	ldr	r3, [pc, #136]	@ (8004974 <memodriver+0x90>)
 80048ec:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 80048ee:	4b22      	ldr	r3, [pc, #136]	@ (8004978 <memodriver+0x94>)
 80048f0:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 80048f2:	4b22      	ldr	r3, [pc, #136]	@ (800497c <memodriver+0x98>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2baa      	cmp	r3, #170	@ 0xaa
 80048f8:	d115      	bne.n	8004926 <memodriver+0x42>
				goto  loaddat;
			}
grabmemo:
 80048fa:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 80048fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <memodriver+0x90>)
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	4b1f      	ldr	r3, [pc, #124]	@ (8004980 <memodriver+0x9c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d01c      	beq.n	8004942 <memodriver+0x5e>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 8004908:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <memodriver+0x9c>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	001a      	movs	r2, r3
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <memodriver+0xa0>)
 8004910:	5c9b      	ldrb	r3, [r3, r2]
 8004912:	0018      	movs	r0, r3
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <memodriver+0x9c>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	001a      	movs	r2, r3
 800491a:	4b17      	ldr	r3, [pc, #92]	@ (8004978 <memodriver+0x94>)
 800491c:	18d3      	adds	r3, r2, r3
 800491e:	0019      	movs	r1, r3
 8004920:	f000 f832 	bl	8004988 <wreeprom>
			goto nextdat;
 8004924:	e00e      	b.n	8004944 <memodriver+0x60>
				goto  loaddat;
 8004926:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
 8004928:	4b15      	ldr	r3, [pc, #84]	@ (8004980 <memodriver+0x9c>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	001a      	movs	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	189a      	adds	r2, r3, r2
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <memodriver+0x9c>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	0019      	movs	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	185b      	adds	r3, r3, r1
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	e000      	b.n	8004944 <memodriver+0x60>
				goto nextdat;
 8004942:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <memodriver+0x9c>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <memodriver+0x9c>)
 800494e:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <memodriver+0x9c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b25b      	sxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	da06      	bge.n	8004968 <memodriver+0x84>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <memodriver+0x98>)
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <memodriver+0x9c>)
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 8004966:	e000      	b.n	800496a <memodriver+0x86>
				goto finmemodr;
 8004968:	46c0      	nop			@ (mov r8, r8)
}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	46bd      	mov	sp, r7
 800496e:	b002      	add	sp, #8
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	200000bc 	.word	0x200000bc
 8004978:	0803f000 	.word	0x0803f000
 800497c:	20000b9f 	.word	0x20000b9f
 8004980:	20000ba0 	.word	0x20000ba0
 8004984:	2000013c 	.word	0x2000013c

08004988 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	0002      	movs	r2, r0
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();

}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	0002      	movs	r2, r0
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	1dbb      	adds	r3, r7, #6
 80049b2:	1c0a      	adds	r2, r1, #0
 80049b4:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <op_menu+0x2c>)
 80049b8:	1dfa      	adds	r2, r7, #7
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 80049be:	4b05      	ldr	r3, [pc, #20]	@ (80049d4 <op_menu+0x30>)
 80049c0:	1dba      	adds	r2, r7, #6
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	701a      	strb	r2, [r3, #0]
}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	20000a8f 	.word	0x20000a8f
 80049d4:	20000a8e 	.word	0x20000a8e

080049d8 <datled_clear>:

void datled_clear()
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <datled_clear+0x18>)
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 80049e2:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <datled_clear+0x18>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	705a      	strb	r2, [r3, #1]
}
 80049e8:	46c0      	nop			@ (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	20000acc 	.word	0x20000acc

080049f4 <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	0004      	movs	r4, r0
 80049fc:	0008      	movs	r0, r1
 80049fe:	0011      	movs	r1, r2
 8004a00:	1dfb      	adds	r3, r7, #7
 8004a02:	1c22      	adds	r2, r4, #0
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	1dbb      	adds	r3, r7, #6
 8004a08:	1c02      	adds	r2, r0, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	1d7b      	adds	r3, r7, #5
 8004a0e:	1c0a      	adds	r2, r1, #0
 8004a10:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 8004a12:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <wreg_waux_conf+0x4c>)
 8004a14:	1dfa      	adds	r2, r7, #7
 8004a16:	7812      	ldrb	r2, [r2, #0]
 8004a18:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a44 <wreg_waux_conf+0x50>)
 8004a1c:	1dba      	adds	r2, r7, #6
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 8004a22:	1d7b      	adds	r3, r7, #5
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 8004a2a:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <wreg_waux_conf+0x54>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 8004a30:	e002      	b.n	8004a38 <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 8004a32:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <wreg_waux_conf+0x54>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	20000a93 	.word	0x20000a93
 8004a44:	20000a92 	.word	0x20000a92
 8004a48:	20000ed4 	.word	0x20000ed4

08004a4c <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 8004a4c:	b5b0      	push	{r4, r5, r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	0005      	movs	r5, r0
 8004a54:	000c      	movs	r4, r1
 8004a56:	0010      	movs	r0, r2
 8004a58:	0019      	movs	r1, r3
 8004a5a:	1dbb      	adds	r3, r7, #6
 8004a5c:	1c2a      	adds	r2, r5, #0
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	1c22      	adds	r2, r4, #0
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	1cbb      	adds	r3, r7, #2
 8004a68:	1c02      	adds	r2, r0, #0
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	1c7b      	adds	r3, r7, #1
 8004a6e:	1c0a      	adds	r2, r1, #0
 8004a70:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 8004a72:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <opc_nv+0x78>)
 8004a74:	1dba      	adds	r2, r7, #6
 8004a76:	8812      	ldrh	r2, [r2, #0]
 8004a78:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <opc_nv+0x7c>)
 8004a7c:	1d3a      	adds	r2, r7, #4
 8004a7e:	8812      	ldrh	r2, [r2, #0]
 8004a80:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 8004a82:	4b12      	ldr	r3, [pc, #72]	@ (8004acc <opc_nv+0x80>)
 8004a84:	1cba      	adds	r2, r7, #2
 8004a86:	8812      	ldrh	r2, [r2, #0]
 8004a88:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 8004a8a:	f7fe fde9 	bl	8003660 <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004acc <opc_nv+0x80>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	1c7b      	adds	r3, r7, #1
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b2d1      	uxtb	r1, r2
 8004a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad0 <opc_nv+0x84>)
 8004a9e:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <opc_nv+0x80>)
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	2318      	movs	r3, #24
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2d1      	uxtb	r1, r2
 8004aac:	4a08      	ldr	r2, [pc, #32]	@ (8004ad0 <opc_nv+0x84>)
 8004aae:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 8004ab0:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <opc_nv+0x80>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fe ffc7 	bl	8003a48 <convadec_math>

}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b002      	add	sp, #8
 8004ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	20000b3e 	.word	0x20000b3e
 8004ac8:	20000b40 	.word	0x20000b40
 8004acc:	2000083e 	.word	0x2000083e
 8004ad0:	2000013c 	.word	0x2000013c

08004ad4 <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 8004ada:	4b79      	ldr	r3, [pc, #484]	@ (8004cc0 <comunicacion+0x1ec>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4b77      	ldr	r3, [pc, #476]	@ (8004cc0 <comunicacion+0x1ec>)
 8004ae4:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 8004ae6:	4b76      	ldr	r3, [pc, #472]	@ (8004cc0 <comunicacion+0x1ec>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2bff      	cmp	r3, #255	@ 0xff
 8004aec:	d103      	bne.n	8004af6 <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 8004aee:	4b75      	ldr	r3, [pc, #468]	@ (8004cc4 <comunicacion+0x1f0>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8004af4:	e0dd      	b.n	8004cb2 <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 8004af6:	4b72      	ldr	r3, [pc, #456]	@ (8004cc0 <comunicacion+0x1ec>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2bfe      	cmp	r3, #254	@ 0xfe
 8004afc:	d103      	bne.n	8004b06 <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 8004afe:	4b71      	ldr	r3, [pc, #452]	@ (8004cc4 <comunicacion+0x1f0>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8004b04:	e0d5      	b.n	8004cb2 <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 8004b06:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc0 <comunicacion+0x1ec>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d000      	beq.n	8004b10 <comunicacion+0x3c>
 8004b0e:	e0cd      	b.n	8004cac <comunicacion+0x1d8>
			goto comu_01;
 8004b10:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 8004b12:	4b6b      	ldr	r3, [pc, #428]	@ (8004cc0 <comunicacion+0x1ec>)
 8004b14:	2205      	movs	r2, #5
 8004b16:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 8004b18:	4b6b      	ldr	r3, [pc, #428]	@ (8004cc8 <comunicacion+0x1f4>)
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f00c f9dd 	bl	8010eda <HAL_I2C_GetState>
 8004b20:	0003      	movs	r3, r0
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d000      	beq.n	8004b28 <comunicacion+0x54>
 8004b26:	e0ae      	b.n	8004c86 <comunicacion+0x1b2>
				countResetI2C = 0;
 8004b28:	4b68      	ldr	r3, [pc, #416]	@ (8004ccc <comunicacion+0x1f8>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 8004b2e:	4b68      	ldr	r3, [pc, #416]	@ (8004cd0 <comunicacion+0x1fc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 8004b34:	4b66      	ldr	r3, [pc, #408]	@ (8004cd0 <comunicacion+0x1fc>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8004b3a:	230f      	movs	r3, #15
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e00a      	b.n	8004b5a <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 8004b44:	200f      	movs	r0, #15
 8004b46:	183b      	adds	r3, r7, r0
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4a62      	ldr	r2, [pc, #392]	@ (8004cd4 <comunicacion+0x200>)
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8004b50:	183b      	adds	r3, r7, r0
 8004b52:	781a      	ldrb	r2, [r3, #0]
 8004b54:	183b      	adds	r3, r7, r0
 8004b56:	3201      	adds	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	230f      	movs	r3, #15
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b06      	cmp	r3, #6
 8004b62:	d9ef      	bls.n	8004b44 <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 8004b64:	4b5b      	ldr	r3, [pc, #364]	@ (8004cd4 <comunicacion+0x200>)
 8004b66:	2207      	movs	r2, #7
 8004b68:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 8004b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd4 <comunicacion+0x200>)
 8004b6c:	2209      	movs	r2, #9
 8004b6e:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 8004b70:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <comunicacion+0x204>)
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	4b57      	ldr	r3, [pc, #348]	@ (8004cd4 <comunicacion+0x200>)
 8004b76:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 8004b78:	4b58      	ldr	r3, [pc, #352]	@ (8004cdc <comunicacion+0x208>)
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	4b55      	ldr	r3, [pc, #340]	@ (8004cd4 <comunicacion+0x200>)
 8004b7e:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 8004b80:	4b54      	ldr	r3, [pc, #336]	@ (8004cd4 <comunicacion+0x200>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 8004b86:	230e      	movs	r3, #14
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e015      	b.n	8004bbc <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 8004b90:	4b50      	ldr	r3, [pc, #320]	@ (8004cd4 <comunicacion+0x200>)
 8004b92:	791a      	ldrb	r2, [r3, #4]
 8004b94:	200e      	movs	r0, #14
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	4951      	ldr	r1, [pc, #324]	@ (8004ce0 <comunicacion+0x20c>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	183b      	adds	r3, r7, r0
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4099      	lsls	r1, r3
 8004ba6:	000b      	movs	r3, r1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b49      	ldr	r3, [pc, #292]	@ (8004cd4 <comunicacion+0x200>)
 8004bb0:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 8004bb2:	183b      	adds	r3, r7, r0
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	183b      	adds	r3, r7, r0
 8004bb8:	3201      	adds	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	230e      	movs	r3, #14
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b07      	cmp	r3, #7
 8004bc4:	d9e4      	bls.n	8004b90 <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 8004bc6:	4b43      	ldr	r3, [pc, #268]	@ (8004cd4 <comunicacion+0x200>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 8004bcc:	4b41      	ldr	r3, [pc, #260]	@ (8004cd4 <comunicacion+0x200>)
 8004bce:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2106      	movs	r1, #6
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7ff fd3b 	bl	8004650 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 8004bda:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <comunicacion+0x1fc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd4 <comunicacion+0x200>)
 8004be2:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 8004be4:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd0 <comunicacion+0x1fc>)
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 8004bea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce4 <comunicacion+0x210>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d034      	beq.n	8004c5c <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 8004bf2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ce8 <comunicacion+0x214>)
 8004bf4:	4834      	ldr	r0, [pc, #208]	@ (8004cc8 <comunicacion+0x1f4>)
 8004bf6:	2309      	movs	r3, #9
 8004bf8:	2154      	movs	r1, #84	@ 0x54
 8004bfa:	f00b ff9d 	bl	8010b38 <HAL_I2C_Master_Receive_DMA>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d123      	bne.n	8004c4a <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 8004c02:	230d      	movs	r3, #13
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e015      	b.n	8004c38 <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 8004c0c:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <comunicacion+0x214>)
 8004c0e:	799b      	ldrb	r3, [r3, #6]
 8004c10:	001a      	movs	r2, r3
 8004c12:	200d      	movs	r0, #13
 8004c14:	183b      	adds	r3, r7, r0
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	411a      	asrs	r2, r3
 8004c1a:	0013      	movs	r3, r2
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	401a      	ands	r2, r3
 8004c20:	183b      	adds	r3, r7, r0
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	1e51      	subs	r1, r2, #1
 8004c26:	418a      	sbcs	r2, r1
 8004c28:	b2d1      	uxtb	r1, r2
 8004c2a:	4a30      	ldr	r2, [pc, #192]	@ (8004cec <comunicacion+0x218>)
 8004c2c:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 8004c2e:	183b      	adds	r3, r7, r0
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	3201      	adds	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	230d      	movs	r3, #13
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b07      	cmp	r3, #7
 8004c40:	d9e4      	bls.n	8004c0c <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 8004c42:	4b28      	ldr	r3, [pc, #160]	@ (8004ce4 <comunicacion+0x210>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	e033      	b.n	8004cb2 <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc8 <comunicacion+0x1f4>)
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f00b fe3d 	bl	80108cc <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 8004c52:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc8 <comunicacion+0x1f4>)
 8004c54:	0018      	movs	r0, r3
 8004c56:	f00b fd93 	bl	8010780 <HAL_I2C_Init>
 8004c5a:	e02a      	b.n	8004cb2 <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <comunicacion+0x200>)
 8004c5e:	481a      	ldr	r0, [pc, #104]	@ (8004cc8 <comunicacion+0x1f4>)
 8004c60:	2307      	movs	r3, #7
 8004c62:	2154      	movs	r1, #84	@ 0x54
 8004c64:	f00b fe62 	bl	801092c <HAL_I2C_Master_Transmit_DMA>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d103      	bne.n	8004c74 <comunicacion+0x1a0>
					  FlagTx= 1;
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce4 <comunicacion+0x210>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	e01e      	b.n	8004cb2 <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8004c74:	4b14      	ldr	r3, [pc, #80]	@ (8004cc8 <comunicacion+0x1f4>)
 8004c76:	0018      	movs	r0, r3
 8004c78:	f00b fe28 	bl	80108cc <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 8004c7c:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <comunicacion+0x1f4>)
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f00b fd7e 	bl	8010780 <HAL_I2C_Init>
 8004c84:	e015      	b.n	8004cb2 <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 8004c86:	4b11      	ldr	r3, [pc, #68]	@ (8004ccc <comunicacion+0x1f8>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ccc <comunicacion+0x1f8>)
 8004c90:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 8004c92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <comunicacion+0x1f8>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <comunicacion+0x1f4>)
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f00b fe15 	bl	80108cc <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <comunicacion+0x1f4>)
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f00b fd6b 	bl	8010780 <HAL_I2C_Init>
 8004caa:	e002      	b.n	8004cb2 <comunicacion+0x1de>
		goto fin_comu;
 8004cac:	46c0      	nop			@ (mov r8, r8)
 8004cae:	e000      	b.n	8004cb2 <comunicacion+0x1de>
				}
			}
fin_comu:
 8004cb0:	46c0      	nop			@ (mov r8, r8)
	detecta();
 8004cb2:	f000 f81d 	bl	8004cf0 <detecta>


}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b004      	add	sp, #16
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	20000bb4 	.word	0x20000bb4
 8004cc4:	20000a94 	.word	0x20000a94
 8004cc8:	200003a4 	.word	0x200003a4
 8004ccc:	20000ff2 	.word	0x20000ff2
 8004cd0:	20000d70 	.word	0x20000d70
 8004cd4:	20000008 	.word	0x20000008
 8004cd8:	20000bb5 	.word	0x20000bb5
 8004cdc:	20000bb6 	.word	0x20000bb6
 8004ce0:	20000bb8 	.word	0x20000bb8
 8004ce4:	20000333 	.word	0x20000333
 8004ce8:	20000334 	.word	0x20000334
 8004cec:	20000bc0 	.word	0x20000bc0

08004cf0 <detecta>:

void detecta(void){
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 8004cf6:	4bb0      	ldr	r3, [pc, #704]	@ (8004fb8 <detecta+0x2c8>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <detecta+0x12>
 8004cfe:	f000 fc33 	bl	8005568 <detecta+0x878>
		goto dete03;
 8004d02:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 8004d04:	4bad      	ldr	r3, [pc, #692]	@ (8004fbc <detecta+0x2cc>)
 8004d06:	225b      	movs	r2, #91	@ 0x5b
 8004d08:	5c9b      	ldrb	r3, [r3, r2]
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d004      	beq.n	8004d1c <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 8004d12:	f7ff fb81 	bl	8004418 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8004d16:	f7ff fb9b 	bl	8004450 <load_tiempoAhorro2>
	goto closedoor_b;
 8004d1a:	e1cc      	b.n	80050b6 <detecta+0x3c6>
		goto detectaPuerta;
 8004d1c:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 8004d1e:	4ba7      	ldr	r3, [pc, #668]	@ (8004fbc <detecta+0x2cc>)
 8004d20:	2253      	movs	r2, #83	@ 0x53
 8004d22:	5c9b      	ldrb	r3, [r3, r2]
 8004d24:	001a      	movs	r2, r3
 8004d26:	2308      	movs	r3, #8
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d045      	beq.n	8004db8 <detecta+0xc8>
		goto detecta_j01;
 8004d2c:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 8004d2e:	1dfb      	adds	r3, r7, #7
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e03a      	b.n	8004dac <detecta+0xbc>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 8004d36:	1dfb      	adds	r3, r7, #7
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	4ba1      	ldr	r3, [pc, #644]	@ (8004fc0 <detecta+0x2d0>)
 8004d3c:	0092      	lsls	r2, r2, #2
 8004d3e:	58d0      	ldr	r0, [r2, r3]
 8004d40:	1dfb      	adds	r3, r7, #7
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	4a9f      	ldr	r2, [pc, #636]	@ (8004fc4 <detecta+0x2d4>)
 8004d46:	5cd3      	ldrb	r3, [r2, r3]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	f00b fca1 	bl	8010692 <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 8004d50:	1dbb      	adds	r3, r7, #6
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	e013      	b.n	8004d80 <detecta+0x90>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8004d58:	1dbb      	adds	r3, r7, #6
 8004d5a:	781a      	ldrb	r2, [r3, #0]
 8004d5c:	4b98      	ldr	r3, [pc, #608]	@ (8004fc0 <detecta+0x2d0>)
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	58d0      	ldr	r0, [r2, r3]
 8004d62:	1dbb      	adds	r3, r7, #6
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	4a97      	ldr	r2, [pc, #604]	@ (8004fc4 <detecta+0x2d4>)
 8004d68:	5cd3      	ldrb	r3, [r2, r3]
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	f00b fc74 	bl	8010658 <HAL_GPIO_ReadPin>
 8004d70:	1e03      	subs	r3, r0, #0
 8004d72:	d100      	bne.n	8004d76 <detecta+0x86>
 8004d74:	e1ce      	b.n	8005114 <detecta+0x424>
		for(uint8_t Px = 0; Px < 5; Px++){
 8004d76:	1dbb      	adds	r3, r7, #6
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	1dbb      	adds	r3, r7, #6
 8004d7c:	3201      	adds	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	1dbb      	adds	r3, r7, #6
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d9e7      	bls.n	8004d58 <detecta+0x68>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	4b8c      	ldr	r3, [pc, #560]	@ (8004fc0 <detecta+0x2d0>)
 8004d8e:	0092      	lsls	r2, r2, #2
 8004d90:	58d0      	ldr	r0, [r2, r3]
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	4a8b      	ldr	r2, [pc, #556]	@ (8004fc4 <detecta+0x2d4>)
 8004d98:	5cd3      	ldrb	r3, [r2, r3]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	f00b fc78 	bl	8010692 <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 8004da2:	1dfb      	adds	r3, r7, #7
 8004da4:	781a      	ldrb	r2, [r3, #0]
 8004da6:	1dfb      	adds	r3, r7, #7
 8004da8:	3201      	adds	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	1dfb      	adds	r3, r7, #7
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d9c0      	bls.n	8004d36 <detecta+0x46>
	}
	goto detecta_j02;
 8004db4:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 8004db6:	e174      	b.n	80050a2 <detecta+0x3b2>
	goto switch_no;
 8004db8:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 8004dba:	4b83      	ldr	r3, [pc, #524]	@ (8004fc8 <detecta+0x2d8>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	425a      	negs	r2, r3
 8004dc0:	4153      	adcs	r3, r2
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	4b81      	ldr	r3, [pc, #516]	@ (8004fcc <detecta+0x2dc>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <detecta+0x124>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8004dce:	4b80      	ldr	r3, [pc, #512]	@ (8004fd0 <detecta+0x2e0>)
 8004dd0:	6858      	ldr	r0, [r3, #4]
 8004dd2:	4b80      	ldr	r3, [pc, #512]	@ (8004fd4 <detecta+0x2e4>)
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	0019      	movs	r1, r3
 8004dda:	f00b fc5a 	bl	8010692 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8004dde:	200a      	movs	r0, #10
 8004de0:	f009 f81a 	bl	800de18 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 8004de4:	4b76      	ldr	r3, [pc, #472]	@ (8004fc0 <detecta+0x2d0>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b76      	ldr	r3, [pc, #472]	@ (8004fc4 <detecta+0x2d4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	0019      	movs	r1, r3
 8004dee:	0010      	movs	r0, r2
 8004df0:	f00b fc32 	bl	8010658 <HAL_GPIO_ReadPin>
 8004df4:	1e03      	subs	r3, r0, #0
 8004df6:	d002      	beq.n	8004dfe <detecta+0x10e>
			FlagPuertaX[4] = 1;// Puerta Abierta
 8004df8:	4b77      	ldr	r3, [pc, #476]	@ (8004fd8 <detecta+0x2e8>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8004dfe:	4b74      	ldr	r3, [pc, #464]	@ (8004fd0 <detecta+0x2e0>)
 8004e00:	6858      	ldr	r0, [r3, #4]
 8004e02:	4b74      	ldr	r3, [pc, #464]	@ (8004fd4 <detecta+0x2e4>)
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2201      	movs	r2, #1
 8004e08:	0019      	movs	r1, r3
 8004e0a:	f00b fc42 	bl	8010692 <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 8004e0e:	4b6f      	ldr	r3, [pc, #444]	@ (8004fcc <detecta+0x2dc>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 8004e14:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc8 <detecta+0x2d8>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b0a      	cmp	r3, #10
 8004e1a:	d000      	beq.n	8004e1e <detecta+0x12e>
 8004e1c:	e083      	b.n	8004f26 <detecta+0x236>
		for(uint8_t Px = 0; Px < 5; Px++){
 8004e1e:	1d7b      	adds	r3, r7, #5
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e048      	b.n	8004eb8 <detecta+0x1c8>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8004e26:	1d7b      	adds	r3, r7, #5
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	4b65      	ldr	r3, [pc, #404]	@ (8004fc0 <detecta+0x2d0>)
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	58d0      	ldr	r0, [r2, r3]
 8004e30:	1d7b      	adds	r3, r7, #5
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	4a63      	ldr	r2, [pc, #396]	@ (8004fc4 <detecta+0x2d4>)
 8004e36:	5cd3      	ldrb	r3, [r2, r3]
 8004e38:	0019      	movs	r1, r3
 8004e3a:	f00b fc0d 	bl	8010658 <HAL_GPIO_ReadPin>
 8004e3e:	1e03      	subs	r3, r0, #0
 8004e40:	d00f      	beq.n	8004e62 <detecta+0x172>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 8004e42:	4b66      	ldr	r3, [pc, #408]	@ (8004fdc <detecta+0x2ec>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	001a      	movs	r2, r3
 8004e48:	0013      	movs	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	189a      	adds	r2, r3, r2
 8004e4e:	1d7b      	adds	r3, r7, #5
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	18d3      	adds	r3, r2, r3
 8004e54:	4a62      	ldr	r2, [pc, #392]	@ (8004fe0 <detecta+0x2f0>)
 8004e56:	5cd2      	ldrb	r2, [r2, r3]
 8004e58:	3201      	adds	r2, #1
 8004e5a:	b2d1      	uxtb	r1, r2
 8004e5c:	4a60      	ldr	r2, [pc, #384]	@ (8004fe0 <detecta+0x2f0>)
 8004e5e:	54d1      	strb	r1, [r2, r3]
 8004e60:	e025      	b.n	8004eae <detecta+0x1be>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8004e62:	1d7b      	adds	r3, r7, #5
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	4b56      	ldr	r3, [pc, #344]	@ (8004fc0 <detecta+0x2d0>)
 8004e68:	0092      	lsls	r2, r2, #2
 8004e6a:	58d0      	ldr	r0, [r2, r3]
 8004e6c:	1d7b      	adds	r3, r7, #5
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4a54      	ldr	r2, [pc, #336]	@ (8004fc4 <detecta+0x2d4>)
 8004e72:	5cd3      	ldrb	r3, [r2, r3]
 8004e74:	0019      	movs	r1, r3
 8004e76:	f00b fbef 	bl	8010658 <HAL_GPIO_ReadPin>
 8004e7a:	1e03      	subs	r3, r0, #0
 8004e7c:	d117      	bne.n	8004eae <detecta+0x1be>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 8004e7e:	4b57      	ldr	r3, [pc, #348]	@ (8004fdc <detecta+0x2ec>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	001a      	movs	r2, r3
 8004e84:	0013      	movs	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	189a      	adds	r2, r3, r2
 8004e8a:	1d7b      	adds	r3, r7, #5
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	18d3      	adds	r3, r2, r3
 8004e90:	4a51      	ldr	r2, [pc, #324]	@ (8004fd8 <detecta+0x2e8>)
 8004e92:	2100      	movs	r1, #0
 8004e94:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 8004e96:	4b51      	ldr	r3, [pc, #324]	@ (8004fdc <detecta+0x2ec>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	0013      	movs	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	189a      	adds	r2, r3, r2
 8004ea2:	1d7b      	adds	r3, r7, #5
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	18d3      	adds	r3, r2, r3
 8004ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8004fe0 <detecta+0x2f0>)
 8004eaa:	2100      	movs	r1, #0
 8004eac:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 8004eae:	1d7b      	adds	r3, r7, #5
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	1d7b      	adds	r3, r7, #5
 8004eb4:	3201      	adds	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	1d7b      	adds	r3, r7, #5
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d9b2      	bls.n	8004e26 <detecta+0x136>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 8004ec0:	4b46      	ldr	r3, [pc, #280]	@ (8004fdc <detecta+0x2ec>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	001a      	movs	r2, r3
 8004ec6:	4b42      	ldr	r3, [pc, #264]	@ (8004fd0 <detecta+0x2e0>)
 8004ec8:	0092      	lsls	r2, r2, #2
 8004eca:	58d0      	ldr	r0, [r2, r3]
 8004ecc:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <detecta+0x2ec>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	001a      	movs	r2, r3
 8004ed2:	4b40      	ldr	r3, [pc, #256]	@ (8004fd4 <detecta+0x2e4>)
 8004ed4:	5c9b      	ldrb	r3, [r3, r2]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	0019      	movs	r1, r3
 8004eda:	f00b fbda 	bl	8010692 <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 8004ede:	4b3f      	ldr	r3, [pc, #252]	@ (8004fdc <detecta+0x2ec>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d805      	bhi.n	8004ef2 <detecta+0x202>
			countMPx++;
 8004ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8004fdc <detecta+0x2ec>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	3301      	adds	r3, #1
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4b3b      	ldr	r3, [pc, #236]	@ (8004fdc <detecta+0x2ec>)
 8004ef0:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 8004ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fdc <detecta+0x2ec>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d102      	bne.n	8004f00 <detecta+0x210>
			countMPx = 0;
 8004efa:	4b38      	ldr	r3, [pc, #224]	@ (8004fdc <detecta+0x2ec>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 8004f00:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <detecta+0x2ec>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	001a      	movs	r2, r3
 8004f06:	4b32      	ldr	r3, [pc, #200]	@ (8004fd0 <detecta+0x2e0>)
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	58d0      	ldr	r0, [r2, r3]
 8004f0c:	4b33      	ldr	r3, [pc, #204]	@ (8004fdc <detecta+0x2ec>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	001a      	movs	r2, r3
 8004f12:	4b30      	ldr	r3, [pc, #192]	@ (8004fd4 <detecta+0x2e4>)
 8004f14:	5c9b      	ldrb	r3, [r3, r2]
 8004f16:	2201      	movs	r2, #1
 8004f18:	0019      	movs	r1, r3
 8004f1a:	f00b fbba 	bl	8010692 <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <detecta+0x2d8>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e009      	b.n	8004f3a <detecta+0x24a>
	}else if(countWaitPuerta < 10){
 8004f26:	4b28      	ldr	r3, [pc, #160]	@ (8004fc8 <detecta+0x2d8>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b09      	cmp	r3, #9
 8004f2c:	d805      	bhi.n	8004f3a <detecta+0x24a>
		countWaitPuerta++;
 8004f2e:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <detecta+0x2d8>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	4b24      	ldr	r3, [pc, #144]	@ (8004fc8 <detecta+0x2d8>)
 8004f38:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e0a5      	b.n	800508e <detecta+0x39e>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8004f42:	1cfb      	adds	r3, r7, #3
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e097      	b.n	800507a <detecta+0x38a>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 8004f4a:	1d3b      	adds	r3, r7, #4
 8004f4c:	781a      	ldrb	r2, [r3, #0]
 8004f4e:	0013      	movs	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	189a      	adds	r2, r3, r2
 8004f54:	1cfb      	adds	r3, r7, #3
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	18d3      	adds	r3, r2, r3
 8004f5a:	4a21      	ldr	r2, [pc, #132]	@ (8004fe0 <detecta+0x2f0>)
 8004f5c:	5cd3      	ldrb	r3, [r2, r3]
 8004f5e:	1e5a      	subs	r2, r3, #1
 8004f60:	4193      	sbcs	r3, r2
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <detecta+0x2d8>)
 8004f66:	7819      	ldrb	r1, [r3, #0]
 8004f68:	2009      	movs	r0, #9
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	4288      	cmp	r0, r1
 8004f6e:	415b      	adcs	r3, r3
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	4013      	ands	r3, r2
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d100      	bne.n	8004f7c <detecta+0x28c>
 8004f7a:	e079      	b.n	8005070 <detecta+0x380>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8004f7c:	1cfb      	adds	r3, r7, #3
 8004f7e:	781a      	ldrb	r2, [r3, #0]
 8004f80:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc0 <detecta+0x2d0>)
 8004f82:	0092      	lsls	r2, r2, #2
 8004f84:	58d0      	ldr	r0, [r2, r3]
 8004f86:	1cfb      	adds	r3, r7, #3
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc4 <detecta+0x2d4>)
 8004f8c:	5cd3      	ldrb	r3, [r2, r3]
 8004f8e:	0019      	movs	r1, r3
 8004f90:	f00b fb62 	bl	8010658 <HAL_GPIO_ReadPin>
 8004f94:	1e03      	subs	r3, r0, #0
 8004f96:	d025      	beq.n	8004fe4 <detecta+0x2f4>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 8004f98:	1d3b      	adds	r3, r7, #4
 8004f9a:	781a      	ldrb	r2, [r3, #0]
 8004f9c:	0013      	movs	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	189a      	adds	r2, r3, r2
 8004fa2:	1cfb      	adds	r3, r7, #3
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	18d3      	adds	r3, r2, r3
 8004fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe0 <detecta+0x2f0>)
 8004faa:	5cd2      	ldrb	r2, [r2, r3]
 8004fac:	3201      	adds	r2, #1
 8004fae:	b2d1      	uxtb	r1, r2
 8004fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe0 <detecta+0x2f0>)
 8004fb2:	54d1      	strb	r1, [r2, r3]
 8004fb4:	e03a      	b.n	800502c <detecta+0x33c>
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	20000ad4 	.word	0x20000ad4
 8004fbc:	200000bc 	.word	0x200000bc
 8004fc0:	200001ec 	.word	0x200001ec
 8004fc4:	20000200 	.word	0x20000200
 8004fc8:	2000101c 	.word	0x2000101c
 8004fcc:	2000021c 	.word	0x2000021c
 8004fd0:	20000208 	.word	0x20000208
 8004fd4:	20000218 	.word	0x20000218
 8004fd8:	20000ff4 	.word	0x20000ff4
 8004fdc:	2000101d 	.word	0x2000101d
 8004fe0:	20001008 	.word	0x20001008
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8004fe4:	1cfb      	adds	r3, r7, #3
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	4bcd      	ldr	r3, [pc, #820]	@ (8005320 <detecta+0x630>)
 8004fea:	0092      	lsls	r2, r2, #2
 8004fec:	58d0      	ldr	r0, [r2, r3]
 8004fee:	1cfb      	adds	r3, r7, #3
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	4acc      	ldr	r2, [pc, #816]	@ (8005324 <detecta+0x634>)
 8004ff4:	5cd3      	ldrb	r3, [r2, r3]
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	f00b fb2e 	bl	8010658 <HAL_GPIO_ReadPin>
 8004ffc:	1e03      	subs	r3, r0, #0
 8004ffe:	d115      	bne.n	800502c <detecta+0x33c>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	781a      	ldrb	r2, [r3, #0]
 8005004:	0013      	movs	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	189a      	adds	r2, r3, r2
 800500a:	1cfb      	adds	r3, r7, #3
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	4ac5      	ldr	r2, [pc, #788]	@ (8005328 <detecta+0x638>)
 8005012:	2100      	movs	r1, #0
 8005014:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	0013      	movs	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	189a      	adds	r2, r3, r2
 8005020:	1cfb      	adds	r3, r7, #3
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	18d3      	adds	r3, r2, r3
 8005026:	4ac1      	ldr	r2, [pc, #772]	@ (800532c <detecta+0x63c>)
 8005028:	2100      	movs	r1, #0
 800502a:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	0013      	movs	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	189a      	adds	r2, r3, r2
 8005036:	1cfb      	adds	r3, r7, #3
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	18d3      	adds	r3, r2, r3
 800503c:	4abb      	ldr	r2, [pc, #748]	@ (800532c <detecta+0x63c>)
 800503e:	5cd3      	ldrb	r3, [r2, r3]
 8005040:	2b0a      	cmp	r3, #10
 8005042:	d115      	bne.n	8005070 <detecta+0x380>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	0013      	movs	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	189a      	adds	r2, r3, r2
 800504e:	1cfb      	adds	r3, r7, #3
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	18d3      	adds	r3, r2, r3
 8005054:	4ab4      	ldr	r2, [pc, #720]	@ (8005328 <detecta+0x638>)
 8005056:	2101      	movs	r1, #1
 8005058:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	0013      	movs	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	189a      	adds	r2, r3, r2
 8005064:	1cfb      	adds	r3, r7, #3
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	18d3      	adds	r3, r2, r3
 800506a:	4ab0      	ldr	r2, [pc, #704]	@ (800532c <detecta+0x63c>)
 800506c:	2100      	movs	r1, #0
 800506e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8005070:	1cfb      	adds	r3, r7, #3
 8005072:	781a      	ldrb	r2, [r3, #0]
 8005074:	1cfb      	adds	r3, r7, #3
 8005076:	3201      	adds	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	1cfb      	adds	r3, r7, #3
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b04      	cmp	r3, #4
 8005080:	d800      	bhi.n	8005084 <detecta+0x394>
 8005082:	e762      	b.n	8004f4a <detecta+0x25a>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8005084:	1d3b      	adds	r3, r7, #4
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	3201      	adds	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d800      	bhi.n	8005098 <detecta+0x3a8>
 8005096:	e754      	b.n	8004f42 <detecta+0x252>
			}
		}
	}


	if(FlagPuertaX[4]){
 8005098:	4ba3      	ldr	r3, [pc, #652]	@ (8005328 <detecta+0x638>)
 800509a:	791b      	ldrb	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d13b      	bne.n	8005118 <detecta+0x428>
		goto opendoor;
	}
	goto detecta_j03;
 80050a0:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 80050a2:	4ba3      	ldr	r3, [pc, #652]	@ (8005330 <detecta+0x640>)
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff fb72 	bl	800478e <decwreg>
	if(debdoor == 0){
 80050aa:	4ba1      	ldr	r3, [pc, #644]	@ (8005330 <detecta+0x640>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d000      	beq.n	80050b4 <detecta+0x3c4>
 80050b2:	e0a5      	b.n	8005200 <detecta+0x510>
		goto closedoor_b;
 80050b4:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 80050b6:	4b9f      	ldr	r3, [pc, #636]	@ (8005334 <detecta+0x644>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 80050bc:	4b9e      	ldr	r3, [pc, #632]	@ (8005338 <detecta+0x648>)
 80050be:	2248      	movs	r2, #72	@ 0x48
 80050c0:	5c9a      	ldrb	r2, [r3, r2]
 80050c2:	4b9e      	ldr	r3, [pc, #632]	@ (800533c <detecta+0x64c>)
 80050c4:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 80050c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005340 <detecta+0x650>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 80050cc:	f7fe fbaa 	bl	8003824 <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 80050d0:	4b9c      	ldr	r3, [pc, #624]	@ (8005344 <detecta+0x654>)
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d100      	bne.n	80050da <detecta+0x3ea>
 80050d8:	e094      	b.n	8005204 <detecta+0x514>
		goto detecta_j04;
 80050da:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 80050dc:	4b99      	ldr	r3, [pc, #612]	@ (8005344 <detecta+0x654>)
 80050de:	2200      	movs	r2, #0
 80050e0:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 80050e2:	4b98      	ldr	r3, [pc, #608]	@ (8005344 <detecta+0x654>)
 80050e4:	78db      	ldrb	r3, [r3, #3]
 80050e6:	2201      	movs	r2, #1
 80050e8:	4053      	eors	r3, r2
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d100      	bne.n	80050f2 <detecta+0x402>
 80050f0:	e08a      	b.n	8005208 <detecta+0x518>
		goto det_j04;
 80050f2:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 80050f4:	f7ff f9c8 	bl	8004488 <load_timeNoct>
	durdhh=0;
 80050f8:	4b93      	ldr	r3, [pc, #588]	@ (8005348 <detecta+0x658>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
	durdhl=0;
 80050fe:	4b93      	ldr	r3, [pc, #588]	@ (800534c <detecta+0x65c>)
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 8005104:	4b8f      	ldr	r3, [pc, #572]	@ (8005344 <detecta+0x654>)
 8005106:	2201      	movs	r2, #1
 8005108:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 800510a:	4b91      	ldr	r3, [pc, #580]	@ (8005350 <detecta+0x660>)
 800510c:	2201      	movs	r2, #1
 800510e:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 8005110:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 8005112:	e05e      	b.n	80051d2 <detecta+0x4e2>
				goto opendoor;
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	e000      	b.n	800511a <detecta+0x42a>
		goto opendoor;
 8005118:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 800511a:	4b85      	ldr	r3, [pc, #532]	@ (8005330 <detecta+0x640>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	b25b      	sxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	db06      	blt.n	8005132 <detecta+0x442>
	debdoor++;
 8005124:	4b82      	ldr	r3, [pc, #520]	@ (8005330 <detecta+0x640>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	4b80      	ldr	r3, [pc, #512]	@ (8005330 <detecta+0x640>)
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e000      	b.n	8005134 <detecta+0x444>
		goto noinc;
 8005132:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 8005134:	4b7e      	ldr	r3, [pc, #504]	@ (8005330 <detecta+0x640>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b25b      	sxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	da29      	bge.n	8005192 <detecta+0x4a2>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 800513e:	4b7d      	ldr	r3, [pc, #500]	@ (8005334 <detecta+0x644>)
 8005140:	2201      	movs	r2, #1
 8005142:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 8005144:	4b83      	ldr	r3, [pc, #524]	@ (8005354 <detecta+0x664>)
 8005146:	2205      	movs	r2, #5
 8005148:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 800514a:	4b7b      	ldr	r3, [pc, #492]	@ (8005338 <detecta+0x648>)
 800514c:	224f      	movs	r2, #79	@ 0x4f
 800514e:	5c9a      	ldrb	r2, [r3, r2]
 8005150:	4b81      	ldr	r3, [pc, #516]	@ (8005358 <detecta+0x668>)
 8005152:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 8005154:	4b81      	ldr	r3, [pc, #516]	@ (800535c <detecta+0x66c>)
 8005156:	2205      	movs	r2, #5
 8005158:	701a      	strb	r2, [r3, #0]
	if(eePlantilla[eetimepaf] != 0){ // // Se cambio a variable EEPROM porque no hay un refresco pronto en la RAM
 800515a:	4b81      	ldr	r3, [pc, #516]	@ (8005360 <detecta+0x670>)
 800515c:	2248      	movs	r2, #72	@ 0x48
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <detecta+0x47c>
	cnt_pta_fan=99;
 8005164:	4b75      	ldr	r3, [pc, #468]	@ (800533c <detecta+0x64c>)
 8005166:	2263      	movs	r2, #99	@ 0x63
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	e000      	b.n	800516e <detecta+0x47e>
		goto no_ld_timepaf;
 800516c:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 800516e:	4b75      	ldr	r3, [pc, #468]	@ (8005344 <detecta+0x654>)
 8005170:	78db      	ldrb	r3, [r3, #3]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00f      	beq.n	8005196 <detecta+0x4a6>
		goto detecta_j05;
 8005176:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 8005178:	4b7a      	ldr	r3, [pc, #488]	@ (8005364 <detecta+0x674>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 800517e:	4b71      	ldr	r3, [pc, #452]	@ (8005344 <detecta+0x654>)
 8005180:	2200      	movs	r2, #0
 8005182:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 8005184:	4b72      	ldr	r3, [pc, #456]	@ (8005350 <detecta+0x660>)
 8005186:	2200      	movs	r2, #0
 8005188:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 800518a:	4b77      	ldr	r3, [pc, #476]	@ (8005368 <detecta+0x678>)
 800518c:	2200      	movs	r2, #0
 800518e:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 8005190:	e01f      	b.n	80051d2 <detecta+0x4e2>
		goto revnocman;
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	e000      	b.n	8005198 <detecta+0x4a8>
	goto revnocman;
 8005196:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 8005198:	4b74      	ldr	r3, [pc, #464]	@ (800536c <detecta+0x67c>)
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d113      	bne.n	80051c8 <detecta+0x4d8>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 80051a0:	4b66      	ldr	r3, [pc, #408]	@ (800533c <detecta+0x64c>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <detecta+0x4ca>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 80051a8:	4b63      	ldr	r3, [pc, #396]	@ (8005338 <detecta+0x648>)
 80051aa:	2249      	movs	r2, #73	@ 0x49
 80051ac:	5c9b      	ldrb	r3, [r3, r2]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <detecta+0x4ce>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 80051b2:	4b63      	ldr	r3, [pc, #396]	@ (8005340 <detecta+0x650>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 80051b8:	e00b      	b.n	80051d2 <detecta+0x4e2>
		goto cancelAlarmPA;
 80051ba:	46c0      	nop			@ (mov r8, r8)
 80051bc:	e000      	b.n	80051c0 <detecta+0x4d0>
		goto cancelAlarmPA;
 80051be:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 80051c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005340 <detecta+0x650>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	711a      	strb	r2, [r3, #4]
 80051c6:	e004      	b.n	80051d2 <detecta+0x4e2>
		goto ahorro_off;
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	e002      	b.n	80051d2 <detecta+0x4e2>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	e000      	b.n	80051d2 <detecta+0x4e2>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 80051d0:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 80051d2:	4b58      	ldr	r3, [pc, #352]	@ (8005334 <detecta+0x644>)
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2201      	movs	r2, #1
 80051d8:	4053      	eors	r3, r2
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <detecta+0x4f8>
	cntdpysp=0xF0;
 80051e0:	4b63      	ldr	r3, [pc, #396]	@ (8005370 <detecta+0x680>)
 80051e2:	22f0      	movs	r2, #240	@ 0xf0
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e000      	b.n	80051ea <detecta+0x4fa>
		goto ahorro_off_00;
 80051e8:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 80051ea:	4b52      	ldr	r3, [pc, #328]	@ (8005334 <detecta+0x644>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 80051f0:	4b50      	ldr	r3, [pc, #320]	@ (8005334 <detecta+0x644>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 80051f6:	f7ff f90f 	bl	8004418 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 80051fa:	f7ff f929 	bl	8004450 <load_tiempoAhorro2>
	goto fin_detecta;
 80051fe:	e047      	b.n	8005290 <detecta+0x5a0>
		goto revbotones;
 8005200:	46c0      	nop			@ (mov r8, r8)
 8005202:	e002      	b.n	800520a <detecta+0x51a>
	goto revbotones;
 8005204:	46c0      	nop			@ (mov r8, r8)
 8005206:	e000      	b.n	800520a <detecta+0x51a>
	goto revbotones;
 8005208:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 800520a:	4b4a      	ldr	r3, [pc, #296]	@ (8005334 <detecta+0x644>)
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10c      	bne.n	800522c <detecta+0x53c>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 8005212:	f7fe fad1 	bl	80037b8 <tdev_to_Word>
 8005216:	0003      	movs	r3, r0
 8005218:	b21c      	sxth	r4, r3
 800521a:	4b56      	ldr	r3, [pc, #344]	@ (8005374 <detecta+0x684>)
 800521c:	0018      	movs	r0, r3
 800521e:	f7fe fae3 	bl	80037e8 <TwoByteInArrayToWord>
 8005222:	0003      	movs	r3, r0
 8005224:	b21b      	sxth	r3, r3
 8005226:	429c      	cmp	r4, r3
 8005228:	dad0      	bge.n	80051cc <detecta+0x4dc>
ask_ahorro:
 800522a:	e000      	b.n	800522e <detecta+0x53e>
		goto ask_ahorro;
 800522c:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 800522e:	4b41      	ldr	r3, [pc, #260]	@ (8005334 <detecta+0x644>)
 8005230:	79db      	ldrb	r3, [r3, #7]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0cc      	beq.n	80051d0 <detecta+0x4e0>
		goto ask_time_ahorro;
 8005236:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 8005238:	4b4f      	ldr	r3, [pc, #316]	@ (8005378 <detecta+0x688>)
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <detecta+0x562>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 8005240:	f7ff f906 	bl	8004450 <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 8005244:	4b3b      	ldr	r3, [pc, #236]	@ (8005334 <detecta+0x644>)
 8005246:	2200      	movs	r2, #0
 8005248:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 800524a:	4b3a      	ldr	r3, [pc, #232]	@ (8005334 <detecta+0x644>)
 800524c:	2200      	movs	r2, #0
 800524e:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8005250:	e01e      	b.n	8005290 <detecta+0x5a0>
		goto modoAhorro1_ON;
 8005252:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8005254:	4b37      	ldr	r3, [pc, #220]	@ (8005334 <detecta+0x644>)
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <detecta+0x574>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 800525c:	4b44      	ldr	r3, [pc, #272]	@ (8005370 <detecta+0x680>)
 800525e:	22f0      	movs	r2, #240	@ 0xf0
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e000      	b.n	8005266 <detecta+0x576>
		goto modoAhorro1_ON_2;
 8005264:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8005266:	4b33      	ldr	r3, [pc, #204]	@ (8005334 <detecta+0x644>)
 8005268:	2201      	movs	r2, #1
 800526a:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 800526c:	4b43      	ldr	r3, [pc, #268]	@ (800537c <detecta+0x68c>)
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10c      	bne.n	800528e <detecta+0x59e>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8005274:	4b2f      	ldr	r3, [pc, #188]	@ (8005334 <detecta+0x644>)
 8005276:	789b      	ldrb	r3, [r3, #2]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d103      	bne.n	8005284 <detecta+0x594>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 800527c:	4b3c      	ldr	r3, [pc, #240]	@ (8005370 <detecta+0x680>)
 800527e:	22f0      	movs	r2, #240	@ 0xf0
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e000      	b.n	8005286 <detecta+0x596>
		goto modoAhorro1_ON_3;
 8005284:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8005286:	4b2b      	ldr	r3, [pc, #172]	@ (8005334 <detecta+0x644>)
 8005288:	2201      	movs	r2, #1
 800528a:	709a      	strb	r2, [r3, #2]
 800528c:	e000      	b.n	8005290 <detecta+0x5a0>
		goto fin_detecta;
 800528e:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8005290:	1cbb      	adds	r3, r7, #2
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e013      	b.n	80052c0 <detecta+0x5d0>
		btn_pr[k] = 0;
 8005298:	1cbb      	adds	r3, r7, #2
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	4a38      	ldr	r2, [pc, #224]	@ (8005380 <detecta+0x690>)
 800529e:	2100      	movs	r1, #0
 80052a0:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 80052a2:	1cbb      	adds	r3, r7, #2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	4a37      	ldr	r2, [pc, #220]	@ (8005384 <detecta+0x694>)
 80052a8:	2100      	movs	r1, #0
 80052aa:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 80052ac:	1cbb      	adds	r3, r7, #2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	4a35      	ldr	r2, [pc, #212]	@ (8005388 <detecta+0x698>)
 80052b2:	2100      	movs	r1, #0
 80052b4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 80052b6:	1cbb      	adds	r3, r7, #2
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	1cbb      	adds	r3, r7, #2
 80052bc:	3201      	adds	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	1cbb      	adds	r3, r7, #2
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b07      	cmp	r3, #7
 80052c6:	d9e7      	bls.n	8005298 <detecta+0x5a8>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 80052c8:	4b26      	ldr	r3, [pc, #152]	@ (8005364 <detecta+0x674>)
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d117      	bne.n	8005300 <detecta+0x610>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 80052d0:	4b2e      	ldr	r3, [pc, #184]	@ (800538c <detecta+0x69c>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	4053      	eors	r3, r2
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d112      	bne.n	8005304 <detecta+0x614>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 80052de:	4b2b      	ldr	r3, [pc, #172]	@ (800538c <detecta+0x69c>)
 80052e0:	789b      	ldrb	r3, [r3, #2]
 80052e2:	2201      	movs	r2, #1
 80052e4:	4053      	eors	r3, r2
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10d      	bne.n	8005308 <detecta+0x618>
		goto no2btn;
	}
	if(deb_2btn!=0){
 80052ec:	4b28      	ldr	r3, [pc, #160]	@ (8005390 <detecta+0x6a0>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <detecta+0x60c>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 80052f4:	4b24      	ldr	r3, [pc, #144]	@ (8005388 <detecta+0x698>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 80052fa:	e13e      	b.n	800557a <detecta+0x88a>
		goto findet_jp;
 80052fc:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 80052fe:	e13c      	b.n	800557a <detecta+0x88a>
		goto no2btn;
 8005300:	46c0      	nop			@ (mov r8, r8)
 8005302:	e002      	b.n	800530a <detecta+0x61a>
		goto no2btn;
 8005304:	46c0      	nop			@ (mov r8, r8)
 8005306:	e000      	b.n	800530a <detecta+0x61a>
		goto no2btn;
 8005308:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 800530a:	4b21      	ldr	r3, [pc, #132]	@ (8005390 <detecta+0x6a0>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b95      	cmp	r3, #149	@ 0x95
 8005310:	d840      	bhi.n	8005394 <detecta+0x6a4>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8005312:	4b1f      	ldr	r3, [pc, #124]	@ (8005390 <detecta+0x6a0>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	3303      	adds	r3, #3
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4b1d      	ldr	r3, [pc, #116]	@ (8005390 <detecta+0x6a0>)
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	e03a      	b.n	8005396 <detecta+0x6a6>
 8005320:	200001ec 	.word	0x200001ec
 8005324:	20000200 	.word	0x20000200
 8005328:	20000ff4 	.word	0x20000ff4
 800532c:	20001008 	.word	0x20001008
 8005330:	20000afd 	.word	0x20000afd
 8005334:	20000b78 	.word	0x20000b78
 8005338:	200000bc 	.word	0x200000bc
 800533c:	20000b63 	.word	0x20000b63
 8005340:	20000ac4 	.word	0x20000ac4
 8005344:	20000ab4 	.word	0x20000ab4
 8005348:	20000af4 	.word	0x20000af4
 800534c:	20000af3 	.word	0x20000af3
 8005350:	20000acc 	.word	0x20000acc
 8005354:	20000fa2 	.word	0x20000fa2
 8005358:	20000fec 	.word	0x20000fec
 800535c:	20000aa6 	.word	0x20000aa6
 8005360:	0803f000 	.word	0x0803f000
 8005364:	20000b24 	.word	0x20000b24
 8005368:	20000b80 	.word	0x20000b80
 800536c:	20000aa2 	.word	0x20000aa2
 8005370:	20000afe 	.word	0x20000afe
 8005374:	200000e5 	.word	0x200000e5
 8005378:	20000b6c 	.word	0x20000b6c
 800537c:	20000b6e 	.word	0x20000b6e
 8005380:	20000b2c 	.word	0x20000b2c
 8005384:	20000ad8 	.word	0x20000ad8
 8005388:	20000b54 	.word	0x20000b54
 800538c:	20000bc0 	.word	0x20000bc0
 8005390:	20000b52 	.word	0x20000b52
		goto ask_btn2_f3;
 8005394:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8005396:	4b9e      	ldr	r3, [pc, #632]	@ (8005610 <detecta+0x920>)
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d114      	bne.n	80053c8 <detecta+0x6d8>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 800539e:	4b9d      	ldr	r3, [pc, #628]	@ (8005614 <detecta+0x924>)
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	2201      	movs	r2, #1
 80053a4:	4053      	eors	r3, r2
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <detecta+0x6dc>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 80053ac:	4b9a      	ldr	r3, [pc, #616]	@ (8005618 <detecta+0x928>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d117      	bne.n	80053e4 <detecta+0x6f4>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 80053b4:	4b99      	ldr	r3, [pc, #612]	@ (800561c <detecta+0x92c>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 80053ba:	4b99      	ldr	r3, [pc, #612]	@ (8005620 <detecta+0x930>)
 80053bc:	2200      	movs	r2, #0
 80053be:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 80053c0:	4b95      	ldr	r3, [pc, #596]	@ (8005618 <detecta+0x928>)
 80053c2:	221e      	movs	r2, #30
 80053c4:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 80053c6:	e79a      	b.n	80052fe <detecta+0x60e>
		goto noBtn2F3;
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	e000      	b.n	80053ce <detecta+0x6de>
		goto noBtn2F3;
 80053cc:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 80053ce:	4b92      	ldr	r3, [pc, #584]	@ (8005618 <detecta+0x928>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b1d      	cmp	r3, #29
 80053d4:	d808      	bhi.n	80053e8 <detecta+0x6f8>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 80053d6:	4b90      	ldr	r3, [pc, #576]	@ (8005618 <detecta+0x928>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4b8e      	ldr	r3, [pc, #568]	@ (8005618 <detecta+0x928>)
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e002      	b.n	80053ea <detecta+0x6fa>
		goto ask_btn1;
 80053e4:	46c0      	nop			@ (mov r8, r8)
 80053e6:	e000      	b.n	80053ea <detecta+0x6fa>
		goto ask_btn1;
 80053e8:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 80053ea:	4b8a      	ldr	r3, [pc, #552]	@ (8005614 <detecta+0x924>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2201      	movs	r2, #1
 80053f0:	4053      	eors	r3, r2
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d12a      	bne.n	800544e <detecta+0x75e>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 80053f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005624 <detecta+0x934>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <detecta+0x71e>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 8005400:	4b89      	ldr	r3, [pc, #548]	@ (8005628 <detecta+0x938>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8005406:	4b89      	ldr	r3, [pc, #548]	@ (800562c <detecta+0x93c>)
 8005408:	2214      	movs	r2, #20
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	e000      	b.n	8005410 <detecta+0x720>
		goto ask_btn1_sec;
 800540e:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 8005410:	4b7f      	ldr	r3, [pc, #508]	@ (8005610 <detecta+0x920>)
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2201      	movs	r2, #1
 8005416:	4053      	eors	r3, r2
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <detecta+0x73e>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 800541e:	4b84      	ldr	r3, [pc, #528]	@ (8005630 <detecta+0x940>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b6e      	cmp	r3, #110	@ 0x6e
 8005424:	d822      	bhi.n	800546c <detecta+0x77c>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8005426:	4b80      	ldr	r3, [pc, #512]	@ (8005628 <detecta+0x938>)
 8005428:	2201      	movs	r2, #1
 800542a:	705a      	strb	r2, [r3, #1]
	goto findet;
 800542c:	e0a5      	b.n	800557a <detecta+0x88a>
		goto func_sec_norm_btn1;
 800542e:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 8005430:	4b80      	ldr	r3, [pc, #512]	@ (8005634 <detecta+0x944>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11b      	bne.n	8005470 <detecta+0x780>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8005438:	4b7d      	ldr	r3, [pc, #500]	@ (8005630 <detecta+0x940>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d119      	bne.n	8005474 <detecta+0x784>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 8005440:	4b79      	ldr	r3, [pc, #484]	@ (8005628 <detecta+0x938>)
 8005442:	2201      	movs	r2, #1
 8005444:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8005446:	4b7b      	ldr	r3, [pc, #492]	@ (8005634 <detecta+0x944>)
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 800544c:	e095      	b.n	800557a <detecta+0x88a>
		goto no_btn1;
 800544e:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 8005450:	4b78      	ldr	r3, [pc, #480]	@ (8005634 <detecta+0x944>)
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 8005456:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <detecta+0x940>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b95      	cmp	r3, #149	@ 0x95
 800545c:	d80c      	bhi.n	8005478 <detecta+0x788>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 800545e:	4b74      	ldr	r3, [pc, #464]	@ (8005630 <detecta+0x940>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	3303      	adds	r3, #3
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b72      	ldr	r3, [pc, #456]	@ (8005630 <detecta+0x940>)
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e006      	b.n	800547a <detecta+0x78a>
		goto ask_btn2;
 800546c:	46c0      	nop			@ (mov r8, r8)
 800546e:	e004      	b.n	800547a <detecta+0x78a>
		goto ask_btn2;
 8005470:	46c0      	nop			@ (mov r8, r8)
 8005472:	e002      	b.n	800547a <detecta+0x78a>
		goto ask_btn2;
 8005474:	46c0      	nop			@ (mov r8, r8)
 8005476:	e000      	b.n	800547a <detecta+0x78a>
		goto ask_btn2;
 8005478:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 800547a:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <detecta+0x924>)
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	2201      	movs	r2, #1
 8005480:	4053      	eors	r3, r2
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11a      	bne.n	80054be <detecta+0x7ce>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 8005488:	4b66      	ldr	r3, [pc, #408]	@ (8005624 <detecta+0x934>)
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <detecta+0x7ae>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 8005490:	4b65      	ldr	r3, [pc, #404]	@ (8005628 <detecta+0x938>)
 8005492:	2201      	movs	r2, #1
 8005494:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 8005496:	4b65      	ldr	r3, [pc, #404]	@ (800562c <detecta+0x93c>)
 8005498:	2214      	movs	r2, #20
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	e000      	b.n	80054a0 <detecta+0x7b0>
		goto ask_btn2_sec;
 800549e:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 80054a0:	4b64      	ldr	r3, [pc, #400]	@ (8005634 <detecta+0x944>)
 80054a2:	789b      	ldrb	r3, [r3, #2]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d119      	bne.n	80054dc <detecta+0x7ec>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 80054a8:	4b63      	ldr	r3, [pc, #396]	@ (8005638 <detecta+0x948>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d117      	bne.n	80054e0 <detecta+0x7f0>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 80054b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005628 <detecta+0x938>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 80054b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005634 <detecta+0x944>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	709a      	strb	r2, [r3, #2]
	goto findet;
 80054bc:	e05d      	b.n	800557a <detecta+0x88a>
		goto no_btn2;
 80054be:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 80054c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005634 <detecta+0x944>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 80054c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005638 <detecta+0x948>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b95      	cmp	r3, #149	@ 0x95
 80054cc:	d80a      	bhi.n	80054e4 <detecta+0x7f4>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 80054ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005638 <detecta+0x948>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	3303      	adds	r3, #3
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b58      	ldr	r3, [pc, #352]	@ (8005638 <detecta+0x948>)
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e004      	b.n	80054e6 <detecta+0x7f6>
		goto ask_btn3;
 80054dc:	46c0      	nop			@ (mov r8, r8)
 80054de:	e002      	b.n	80054e6 <detecta+0x7f6>
		goto ask_btn3;
 80054e0:	46c0      	nop			@ (mov r8, r8)
 80054e2:	e000      	b.n	80054e6 <detecta+0x7f6>
		goto ask_btn3;
 80054e4:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 80054e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005614 <detecta+0x924>)
 80054e8:	789b      	ldrb	r3, [r3, #2]
 80054ea:	2201      	movs	r2, #1
 80054ec:	4053      	eors	r3, r2
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d12a      	bne.n	800554a <detecta+0x85a>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 80054f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005624 <detecta+0x934>)
 80054f6:	789b      	ldrb	r3, [r3, #2]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <detecta+0x81a>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 80054fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005628 <detecta+0x938>)
 80054fe:	2201      	movs	r2, #1
 8005500:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 8005502:	4b4a      	ldr	r3, [pc, #296]	@ (800562c <detecta+0x93c>)
 8005504:	2214      	movs	r2, #20
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e000      	b.n	800550c <detecta+0x81c>
		goto ask_btn3_sec;
 800550a:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 800550c:	4b40      	ldr	r3, [pc, #256]	@ (8005610 <detecta+0x920>)
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2201      	movs	r2, #1
 8005512:	4053      	eors	r3, r2
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d107      	bne.n	800552a <detecta+0x83a>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 800551a:	4b48      	ldr	r3, [pc, #288]	@ (800563c <detecta+0x94c>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b6e      	cmp	r3, #110	@ 0x6e
 8005520:	d824      	bhi.n	800556c <detecta+0x87c>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 8005522:	4b41      	ldr	r3, [pc, #260]	@ (8005628 <detecta+0x938>)
 8005524:	2201      	movs	r2, #1
 8005526:	715a      	strb	r2, [r3, #5]
	goto findet;
 8005528:	e027      	b.n	800557a <detecta+0x88a>
		goto func_sec_norm_btn3;
 800552a:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 800552c:	4b41      	ldr	r3, [pc, #260]	@ (8005634 <detecta+0x944>)
 800552e:	791b      	ldrb	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11d      	bne.n	8005570 <detecta+0x880>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8005534:	4b41      	ldr	r3, [pc, #260]	@ (800563c <detecta+0x94c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11b      	bne.n	8005574 <detecta+0x884>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 800553c:	4b3a      	ldr	r3, [pc, #232]	@ (8005628 <detecta+0x938>)
 800553e:	2201      	movs	r2, #1
 8005540:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 8005542:	4b3c      	ldr	r3, [pc, #240]	@ (8005634 <detecta+0x944>)
 8005544:	2201      	movs	r2, #1
 8005546:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8005548:	e017      	b.n	800557a <detecta+0x88a>
		goto no_btn3;
 800554a:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 800554c:	4b39      	ldr	r3, [pc, #228]	@ (8005634 <detecta+0x944>)
 800554e:	2200      	movs	r2, #0
 8005550:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 8005552:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <detecta+0x94c>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b95      	cmp	r3, #149	@ 0x95
 8005558:	d80e      	bhi.n	8005578 <detecta+0x888>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 800555a:	4b38      	ldr	r3, [pc, #224]	@ (800563c <detecta+0x94c>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	3303      	adds	r3, #3
 8005560:	b2da      	uxtb	r2, r3
 8005562:	4b36      	ldr	r3, [pc, #216]	@ (800563c <detecta+0x94c>)
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e008      	b.n	800557a <detecta+0x88a>
	goto findet;
 8005568:	46c0      	nop			@ (mov r8, r8)
 800556a:	e006      	b.n	800557a <detecta+0x88a>
		goto ask_btn4;
 800556c:	46c0      	nop			@ (mov r8, r8)
 800556e:	e004      	b.n	800557a <detecta+0x88a>
		goto ask_btn4;
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	e002      	b.n	800557a <detecta+0x88a>
		goto ask_btn4;
 8005574:	46c0      	nop			@ (mov r8, r8)
 8005576:	e000      	b.n	800557a <detecta+0x88a>
		goto ask_btn4;
 8005578:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 800557a:	1c7b      	adds	r3, r7, #1
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	e00c      	b.n	800559c <detecta+0x8ac>
		Botones_COPY[k] = Botones_T[k];
 8005582:	1c7b      	adds	r3, r7, #1
 8005584:	781a      	ldrb	r2, [r3, #0]
 8005586:	1c7b      	adds	r3, r7, #1
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	4922      	ldr	r1, [pc, #136]	@ (8005614 <detecta+0x924>)
 800558c:	5c89      	ldrb	r1, [r1, r2]
 800558e:	4a25      	ldr	r2, [pc, #148]	@ (8005624 <detecta+0x934>)
 8005590:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 8005592:	1c7b      	adds	r3, r7, #1
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	1c7b      	adds	r3, r7, #1
 8005598:	3201      	adds	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	1c7b      	adds	r3, r7, #1
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	d9ee      	bls.n	8005582 <detecta+0x892>
	if(!flagsb[f_prog]){
 80055a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <detecta+0x920>)
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2201      	movs	r2, #1
 80055aa:	4053      	eors	r3, r2
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d11a      	bne.n	80055e8 <detecta+0x8f8>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 80055b2:	003b      	movs	r3, r7
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e011      	b.n	80055de <detecta+0x8ee>
		btn_pr[k] = botonst[k];
 80055ba:	003b      	movs	r3, r7
 80055bc:	781a      	ldrb	r2, [r3, #0]
 80055be:	003b      	movs	r3, r7
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	4919      	ldr	r1, [pc, #100]	@ (8005628 <detecta+0x938>)
 80055c4:	5c89      	ldrb	r1, [r1, r2]
 80055c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005640 <detecta+0x950>)
 80055c8:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 80055ca:	003b      	movs	r3, r7
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4a16      	ldr	r2, [pc, #88]	@ (8005628 <detecta+0x938>)
 80055d0:	2100      	movs	r1, #0
 80055d2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 80055d4:	003b      	movs	r3, r7
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	003b      	movs	r3, r7
 80055da:	3201      	adds	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	003b      	movs	r3, r7
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b07      	cmp	r3, #7
 80055e4:	d9e9      	bls.n	80055ba <detecta+0x8ca>
	}

det_j18:
 80055e6:	e000      	b.n	80055ea <detecta+0x8fa>
		goto det_j18;
 80055e8:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 80055ea:	4b16      	ldr	r3, [pc, #88]	@ (8005644 <detecta+0x954>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	4053      	eors	r3, r2
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <detecta+0x916>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <detecta+0x938>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 80055fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <detecta+0x938>)
 8005600:	2200      	movs	r2, #0
 8005602:	711a      	strb	r2, [r3, #4]

det_j19:

}
 8005604:	e000      	b.n	8005608 <detecta+0x918>
		goto det_j19;
 8005606:	46c0      	nop			@ (mov r8, r8)
}
 8005608:	46c0      	nop			@ (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b003      	add	sp, #12
 800560e:	bd90      	pop	{r4, r7, pc}
 8005610:	20000b24 	.word	0x20000b24
 8005614:	20000bc0 	.word	0x20000bc0
 8005618:	20000fe0 	.word	0x20000fe0
 800561c:	20000b54 	.word	0x20000b54
 8005620:	20000b78 	.word	0x20000b78
 8005624:	20000b44 	.word	0x20000b44
 8005628:	20000ad8 	.word	0x20000ad8
 800562c:	20000fd9 	.word	0x20000fd9
 8005630:	20000b4c 	.word	0x20000b4c
 8005634:	20000b0c 	.word	0x20000b0c
 8005638:	20000b4d 	.word	0x20000b4d
 800563c:	20000b4e 	.word	0x20000b4e
 8005640:	20000b2c 	.word	0x20000b2c
 8005644:	20000fe4 	.word	0x20000fe4

08005648 <display>:





void display (void){
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0

    asm ("nop");
 800564e:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 8005650:	4bc5      	ldr	r3, [pc, #788]	@ (8005968 <display+0x320>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d100      	bne.n	800565a <display+0x12>
 8005658:	e08f      	b.n	800577a <display+0x132>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 800565a:	4bc4      	ldr	r3, [pc, #784]	@ (800596c <display+0x324>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <display+0x36>
		goto display_00;
	}
	if(flagsTX [7] == 0){
 8005662:	4bc3      	ldr	r3, [pc, #780]	@ (8005970 <display+0x328>)
 8005664:	79db      	ldrb	r3, [r3, #7]
 8005666:	2201      	movs	r2, #1
 8005668:	4053      	eors	r3, r2
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d108      	bne.n	8005682 <display+0x3a>
		goto display_00;
	}
	op_menu (0x0B, 0x11);
 8005670:	2111      	movs	r1, #17
 8005672:	200b      	movs	r0, #11
 8005674:	f7ff f996 	bl	80049a4 <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 8005678:	f7ff f9ae 	bl	80049d8 <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 800567c:	e01f      	b.n	80056be <display+0x76>
		goto display_00;
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	e000      	b.n	8005684 <display+0x3c>
		goto display_00;
 8005682:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(eeEstado1, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8005684:	4bbb      	ldr	r3, [pc, #748]	@ (8005974 <display+0x32c>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	001a      	movs	r2, r3
 800568a:	2301      	movs	r3, #1
 800568c:	4013      	ands	r3, r2
 800568e:	d106      	bne.n	800569e <display+0x56>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 8005690:	2110      	movs	r1, #16
 8005692:	2011      	movs	r0, #17
 8005694:	f7ff f986 	bl	80049a4 <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 8005698:	f7ff f99e 	bl	80049d8 <datled_clear>
 800569c:	e000      	b.n	80056a0 <display+0x58>
		goto display_00b;
 800569e:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 80056a0:	4bb5      	ldr	r3, [pc, #724]	@ (8005978 <display+0x330>)
 80056a2:	78db      	ldrb	r3, [r3, #3]
 80056a4:	2201      	movs	r2, #1
 80056a6:	4053      	eors	r3, r2
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <display+0x74>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 80056ae:	211d      	movs	r1, #29
 80056b0:	201f      	movs	r0, #31
 80056b2:	f7ff f977 	bl	80049a4 <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 80056b6:	f7ff f98f 	bl	80049d8 <datled_clear>
 80056ba:	e000      	b.n	80056be <display+0x76>
		goto display_01;
 80056bc:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 80056be:	4baf      	ldr	r3, [pc, #700]	@ (800597c <display+0x334>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d05b      	beq.n	800577e <display+0x136>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 80056c6:	4bad      	ldr	r3, [pc, #692]	@ (800597c <display+0x334>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80056cc:	d900      	bls.n	80056d0 <display+0x88>
 80056ce:	e0a1      	b.n	8005814 <display+0x1cc>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 80056d0:	4baa      	ldr	r3, [pc, #680]	@ (800597c <display+0x334>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b31      	cmp	r3, #49	@ 0x31
 80056d6:	d800      	bhi.n	80056da <display+0x92>
 80056d8:	e09e      	b.n	8005818 <display+0x1d0>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 80056da:	f7ff f97d 	bl	80049d8 <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 80056de:	4ba8      	ldr	r3, [pc, #672]	@ (8005980 <display+0x338>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d110      	bne.n	8005708 <display+0xc0>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 80056e6:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 80056e8:	2110      	movs	r1, #16
 80056ea:	2011      	movs	r0, #17
 80056ec:	f7ff f95a 	bl	80049a4 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(eeEstado1, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 80056f0:	4ba0      	ldr	r3, [pc, #640]	@ (8005974 <display+0x32c>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	001a      	movs	r2, r3
 80056f6:	2301      	movs	r3, #1
 80056f8:	4013      	ands	r3, r2
 80056fa:	d003      	beq.n	8005704 <display+0xbc>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 80056fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005984 <display+0x33c>)
 80056fe:	2201      	movs	r2, #1
 8005700:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8005702:	e0a2      	b.n	800584a <display+0x202>
		goto msg1_01;
 8005704:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 8005706:	e0a0      	b.n	800584a <display+0x202>
		goto askMsg2; //jrne		askMsg2
 8005708:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 800570a:	4b9d      	ldr	r3, [pc, #628]	@ (8005980 <display+0x338>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d110      	bne.n	8005734 <display+0xec>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8005712:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 8005714:	2101      	movs	r1, #1
 8005716:	2011      	movs	r0, #17
 8005718:	f7ff f944 	bl	80049a4 <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(eeEstado1, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 800571c:	4b95      	ldr	r3, [pc, #596]	@ (8005974 <display+0x32c>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	001a      	movs	r2, r3
 8005722:	2304      	movs	r3, #4
 8005724:	4013      	ands	r3, r2
 8005726:	d003      	beq.n	8005730 <display+0xe8>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 8005728:	4b97      	ldr	r3, [pc, #604]	@ (8005988 <display+0x340>)
 800572a:	2202      	movs	r2, #2
 800572c:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 800572e:	e08c      	b.n	800584a <display+0x202>
		goto	msg2_01;
 8005730:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 8005732:	e08a      	b.n	800584a <display+0x202>
		goto askMsg3; //jrne		askMsg3
 8005734:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 8005736:	4b92      	ldr	r3, [pc, #584]	@ (8005980 <display+0x338>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d110      	bne.n	8005760 <display+0x118>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 800573e:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 8005740:	2100      	movs	r1, #0
 8005742:	2011      	movs	r0, #17
 8005744:	f7ff f92e 	bl	80049a4 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(eeEstado1, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 8005748:	4b8a      	ldr	r3, [pc, #552]	@ (8005974 <display+0x32c>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	001a      	movs	r2, r3
 800574e:	2340      	movs	r3, #64	@ 0x40
 8005750:	4013      	ands	r3, r2
 8005752:	d103      	bne.n	800575c <display+0x114>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 8005754:	4b8b      	ldr	r3, [pc, #556]	@ (8005984 <display+0x33c>)
 8005756:	2201      	movs	r2, #1
 8005758:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 800575a:	e076      	b.n	800584a <display+0x202>
		goto msg3_01;
 800575c:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 800575e:	e074      	b.n	800584a <display+0x202>
		goto askMsg4;  //jrne askMsg4
 8005760:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 8005762:	4b87      	ldr	r3, [pc, #540]	@ (8005980 <display+0x338>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b04      	cmp	r3, #4
 8005768:	d105      	bne.n	8005776 <display+0x12e>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 800576a:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 800576c:	211d      	movs	r1, #29
 800576e:	201f      	movs	r0, #31
 8005770:	f7ff f918 	bl	80049a4 <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 8005774:	e069      	b.n	800584a <display+0x202>
		goto askMsg5;  //jrne		askMsg5
 8005776:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 8005778:	e067      	b.n	800584a <display+0x202>
		goto display_02;
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	e000      	b.n	8005780 <display+0x138>
		goto display_02;//jreq		display_02;
 800577e:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 8005780:	f7fd fae4 	bl	8002d4c <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 8005784:	4b78      	ldr	r3, [pc, #480]	@ (8005968 <display+0x320>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d018      	beq.n	80057be <display+0x176>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 800578c:	4b7f      	ldr	r3, [pc, #508]	@ (800598c <display+0x344>)
 800578e:	79db      	ldrb	r3, [r3, #7]
 8005790:	2201      	movs	r2, #1
 8005792:	4053      	eors	r3, r2
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d113      	bne.n	80057c2 <display+0x17a>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 800579a:	210a      	movs	r1, #10
 800579c:	200a      	movs	r0, #10
 800579e:	f7ff f901 	bl	80049a4 <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 80057a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005990 <display+0x348>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	001a      	movs	r2, r3
 80057aa:	2340      	movs	r3, #64	@ 0x40
 80057ac:	4013      	ands	r3, r2
 80057ae:	d104      	bne.n	80057ba <display+0x172>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 80057b0:	211f      	movs	r1, #31
 80057b2:	201f      	movs	r0, #31
 80057b4:	f7ff f8f6 	bl	80049a4 <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 80057b8:	e047      	b.n	800584a <display+0x202>
    	goto blk_aa;
 80057ba:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 80057bc:	e045      	b.n	800584a <display+0x202>
    	goto display_norm3; //jreq		display_norm3;
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	e000      	b.n	80057c4 <display+0x17c>
    	goto display_norm3;
 80057c2:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 80057c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005978 <display+0x330>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2201      	movs	r2, #1
 80057ca:	4053      	eors	r3, r2
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d02c      	beq.n	800582c <display+0x1e4>
    	  goto display_j00;
 80057d2:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 80057d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005994 <display+0x34c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <display+0x1c8>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 80057dc:	4b6d      	ldr	r3, [pc, #436]	@ (8005994 <display+0x34c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80057e2:	d81b      	bhi.n	800581c <display+0x1d4>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 80057e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005994 <display+0x34c>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b95      	cmp	r3, #149	@ 0x95
 80057ea:	d902      	bls.n	80057f2 <display+0x1aa>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 80057ec:	f7fe f876 	bl	80038dc <sp_dpy>
      	  goto dpy07;
 80057f0:	e02b      	b.n	800584a <display+0x202>
    	  goto dpydif;//jrult dpydif
 80057f2:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 80057f4:	4b67      	ldr	r3, [pc, #412]	@ (8005994 <display+0x34c>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b63      	cmp	r3, #99	@ 0x63
 80057fa:	d811      	bhi.n	8005820 <display+0x1d8>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 80057fc:	4b65      	ldr	r3, [pc, #404]	@ (8005994 <display+0x34c>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b31      	cmp	r3, #49	@ 0x31
 8005802:	d90f      	bls.n	8005824 <display+0x1dc>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 8005804:	f7fe f876 	bl	80038f4 <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 8005808:	4b5e      	ldr	r3, [pc, #376]	@ (8005984 <display+0x33c>)
 800580a:	2200      	movs	r2, #0
 800580c:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 800580e:	e01c      	b.n	800584a <display+0x202>
    	  goto dpy02;//jreq		dpy02;
 8005810:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 8005812:	e00c      	b.n	800582e <display+0x1e6>
		goto dpy03; //************** ?
 8005814:	46c0      	nop			@ (mov r8, r8)
 8005816:	e006      	b.n	8005826 <display+0x1de>
		goto dpy03;
 8005818:	46c0      	nop			@ (mov r8, r8)
 800581a:	e004      	b.n	8005826 <display+0x1de>
    	  goto dpy03;//jruge		dpy03;
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	e002      	b.n	8005826 <display+0x1de>
    	 goto dpy03;//jruge		dpy03;
 8005820:	46c0      	nop			@ (mov r8, r8)
 8005822:	e000      	b.n	8005826 <display+0x1de>
    	 goto dpy03;//jrult		dpy03;
 8005824:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 8005826:	f7fe fbe5 	bl	8003ff4 <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 800582a:	e00e      	b.n	800584a <display+0x202>
      goto dpy06;//jra dpy06;
 800582c:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 800582e:	4b57      	ldr	r3, [pc, #348]	@ (800598c <display+0x344>)
 8005830:	78db      	ldrb	r3, [r3, #3]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <display+0x1fc>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 8005836:	4b58      	ldr	r3, [pc, #352]	@ (8005998 <display+0x350>)
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d104      	bne.n	8005848 <display+0x200>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 800583e:	f7fe fa79 	bl	8003d34 <fallas>
 8005842:	e002      	b.n	800584a <display+0x202>
	   goto dpy07;
 8005844:	46c0      	nop			@ (mov r8, r8)
 8005846:	e000      	b.n	800584a <display+0x202>
	   goto dpy07;
 8005848:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 800584a:	4b54      	ldr	r3, [pc, #336]	@ (800599c <display+0x354>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	001a      	movs	r2, r3
 8005850:	4b53      	ldr	r3, [pc, #332]	@ (80059a0 <display+0x358>)
 8005852:	5c9a      	ldrb	r2, [r3, r2]
 8005854:	4b53      	ldr	r3, [pc, #332]	@ (80059a4 <display+0x35c>)
 8005856:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 8005858:	4b4b      	ldr	r3, [pc, #300]	@ (8005988 <display+0x340>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	001a      	movs	r2, r3
 800585e:	4b50      	ldr	r3, [pc, #320]	@ (80059a0 <display+0x358>)
 8005860:	5c9a      	ldrb	r2, [r3, r2]
 8005862:	4b51      	ldr	r3, [pc, #324]	@ (80059a8 <display+0x360>)
 8005864:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 8005866:	230f      	movs	r3, #15
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e011      	b.n	8005894 <display+0x24c>
			if(trefst[k] ){ //tnz  trefst ***************??
 8005870:	210f      	movs	r1, #15
 8005872:	187b      	adds	r3, r7, r1
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	4a4d      	ldr	r2, [pc, #308]	@ (80059ac <display+0x364>)
 8005878:	5cd3      	ldrb	r3, [r2, r3]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d113      	bne.n	80058a6 <display+0x25e>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 800587e:	187b      	adds	r3, r7, r1
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4a4b      	ldr	r2, [pc, #300]	@ (80059b0 <display+0x368>)
 8005884:	5cd3      	ldrb	r3, [r2, r3]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <display+0x262>
		for(uint8_t k=0; k<8; k++){
 800588a:	187b      	adds	r3, r7, r1
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	187b      	adds	r3, r7, r1
 8005890:	3201      	adds	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	230f      	movs	r3, #15
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b07      	cmp	r3, #7
 800589c:	d9e8      	bls.n	8005870 <display+0x228>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 800589e:	4b45      	ldr	r3, [pc, #276]	@ (80059b4 <display+0x36c>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 80058a4:	e00d      	b.n	80058c2 <display+0x27a>
				goto ask_snooze; //jrne	ask_snooze
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	e000      	b.n	80058ac <display+0x264>
				goto ask_snooze;  //jrne	ask_snooze
 80058aa:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 80058ac:	4b42      	ldr	r3, [pc, #264]	@ (80059b8 <display+0x370>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	4053      	eors	r3, r2
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <display+0x278>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 80058ba:	f7fe feed 	bl	8004698 <ld_alarmDelay>
 80058be:	e000      	b.n	80058c2 <display+0x27a>
			goto noLoadSnooze;
 80058c0:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 80058c2:	4b3c      	ldr	r3, [pc, #240]	@ (80059b4 <display+0x36c>)
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <display+0x28a>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 80058ca:	4b3c      	ldr	r3, [pc, #240]	@ (80059bc <display+0x374>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e000      	b.n	80058d4 <display+0x28c>
			goto no_snooze;//jreq no_snooze
 80058d2:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 80058d4:	4b3a      	ldr	r3, [pc, #232]	@ (80059c0 <display+0x378>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <display+0x2b2>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 80058dc:	4b37      	ldr	r3, [pc, #220]	@ (80059bc <display+0x374>)
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <display+0x2ae>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 80058e4:	4b37      	ldr	r3, [pc, #220]	@ (80059c4 <display+0x37c>)
 80058e6:	2104      	movs	r1, #4
 80058e8:	0018      	movs	r0, r3
 80058ea:	f00f fc8d 	bl	8015208 <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 80058ee:	4b33      	ldr	r3, [pc, #204]	@ (80059bc <display+0x374>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 80058f4:	e184      	b.n	8005c00 <display+0x5b8>
			goto jp_termina_buzzer;
 80058f6:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 80058f8:	e182      	b.n	8005c00 <display+0x5b8>
			goto noBtnBuzz; //jreq noBtnBuzz
 80058fa:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 80058fc:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <display+0x374>)
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2201      	movs	r2, #1
 8005902:	4053      	eors	r3, r2
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d113      	bne.n	8005932 <display+0x2ea>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 800590a:	4b2f      	ldr	r3, [pc, #188]	@ (80059c8 <display+0x380>)
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 8005910:	4b2e      	ldr	r3, [pc, #184]	@ (80059cc <display+0x384>)
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8005916:	4b2b      	ldr	r3, [pc, #172]	@ (80059c4 <display+0x37c>)
 8005918:	2104      	movs	r1, #4
 800591a:	0018      	movs	r0, r3
 800591c:	f00f fd56 	bl	80153cc <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 8005920:	4b2b      	ldr	r3, [pc, #172]	@ (80059d0 <display+0x388>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	4a2b      	ldr	r2, [pc, #172]	@ (80059d4 <display+0x38c>)
 8005926:	4694      	mov	ip, r2
 8005928:	4463      	add	r3, ip
 800592a:	b29a      	uxth	r2, r3
 800592c:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <display+0x390>)
 800592e:	801a      	strh	r2, [r3, #0]
 8005930:	e000      	b.n	8005934 <display+0x2ec>
			goto noBtnBuzz_01;
 8005932:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 8005934:	4b21      	ldr	r3, [pc, #132]	@ (80059bc <display+0x374>)
 8005936:	2200      	movs	r2, #0
 8005938:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 800593a:	4b20      	ldr	r3, [pc, #128]	@ (80059bc <display+0x374>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d14c      	bne.n	80059dc <display+0x394>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 8005942:	4b21      	ldr	r3, [pc, #132]	@ (80059c8 <display+0x380>)
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 8005948:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <display+0x384>)
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 800594e:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <display+0x37c>)
 8005950:	2104      	movs	r1, #4
 8005952:	0018      	movs	r0, r3
 8005954:	f00f fd3a 	bl	80153cc <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 8005958:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <display+0x388>)
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	3364      	adds	r3, #100	@ 0x64
 800595e:	b29a      	uxth	r2, r3
 8005960:	4b1d      	ldr	r3, [pc, #116]	@ (80059d8 <display+0x390>)
 8005962:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 8005964:	e14c      	b.n	8005c00 <display+0x5b8>
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	20000ad4 	.word	0x20000ad4
 800596c:	20000fe4 	.word	0x20000fe4
 8005970:	20000d58 	.word	0x20000d58
 8005974:	0803f083 	.word	0x0803f083
 8005978:	20000ab4 	.word	0x20000ab4
 800597c:	20000fa0 	.word	0x20000fa0
 8005980:	20000fa1 	.word	0x20000fa1
 8005984:	20000acc 	.word	0x20000acc
 8005988:	20000a8e 	.word	0x20000a8e
 800598c:	20000b14 	.word	0x20000b14
 8005990:	20000a8a 	.word	0x20000a8a
 8005994:	20000afe 	.word	0x20000afe
 8005998:	20000b24 	.word	0x20000b24
 800599c:	20000a8f 	.word	0x20000a8f
 80059a0:	20000010 	.word	0x20000010
 80059a4:	20000bb5 	.word	0x20000bb5
 80059a8:	20000bb6 	.word	0x20000bb6
 80059ac:	20000ac4 	.word	0x20000ac4
 80059b0:	20000abc 	.word	0x20000abc
 80059b4:	20000edc 	.word	0x20000edc
 80059b8:	20000ad8 	.word	0x20000ad8
 80059bc:	20000ed4 	.word	0x20000ed4
 80059c0:	20000fd9 	.word	0x20000fd9
 80059c4:	200004fc 	.word	0x200004fc
 80059c8:	20000ecc 	.word	0x20000ecc
 80059cc:	20000ec4 	.word	0x20000ec4
 80059d0:	20000ec0 	.word	0x20000ec0
 80059d4:	00001388 	.word	0x00001388
 80059d8:	20000ec2 	.word	0x20000ec2
			goto buzzer_0;
 80059dc:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 80059de:	4bca      	ldr	r3, [pc, #808]	@ (8005d08 <display+0x6c0>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 80059e4:	4bc9      	ldr	r3, [pc, #804]	@ (8005d0c <display+0x6c4>)
 80059e6:	79db      	ldrb	r3, [r3, #7]
 80059e8:	2201      	movs	r2, #1
 80059ea:	4053      	eors	r3, r2
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <display+0x3b2>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 80059f2:	4bc5      	ldr	r3, [pc, #788]	@ (8005d08 <display+0x6c0>)
 80059f4:	2202      	movs	r2, #2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	e000      	b.n	80059fc <display+0x3b4>
			goto buzzer_activado_04;
 80059fa:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 80059fc:	4bc3      	ldr	r3, [pc, #780]	@ (8005d0c <display+0x6c4>)
 80059fe:	799b      	ldrb	r3, [r3, #6]
 8005a00:	2201      	movs	r2, #1
 8005a02:	4053      	eors	r3, r2
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <display+0x3ca>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8005a0a:	4bbf      	ldr	r3, [pc, #764]	@ (8005d08 <display+0x6c0>)
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	e000      	b.n	8005a14 <display+0x3cc>
			goto buzzer_activado_05;
 8005a12:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 8005a14:	4bbe      	ldr	r3, [pc, #760]	@ (8005d10 <display+0x6c8>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4053      	eors	r3, r2
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d103      	bne.n	8005a2a <display+0x3e2>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8005a22:	4bb9      	ldr	r3, [pc, #740]	@ (8005d08 <display+0x6c0>)
 8005a24:	2202      	movs	r2, #2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e000      	b.n	8005a2c <display+0x3e4>
			goto buzzer_activado_08;
 8005a2a:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 8005a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8005d14 <display+0x6cc>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	4053      	eors	r3, r2
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <display+0x3fa>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8005a3a:	4bb3      	ldr	r3, [pc, #716]	@ (8005d08 <display+0x6c0>)
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e000      	b.n	8005a44 <display+0x3fc>
			goto buzzer_activado_01;
 8005a42:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 8005a44:	4bb3      	ldr	r3, [pc, #716]	@ (8005d14 <display+0x6cc>)
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4053      	eors	r3, r2
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <display+0x412>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 8005a52:	4bad      	ldr	r3, [pc, #692]	@ (8005d08 <display+0x6c0>)
 8005a54:	2203      	movs	r2, #3
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e000      	b.n	8005a5c <display+0x414>
			goto buzzer_activado_02;
 8005a5a:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 8005a5c:	4bad      	ldr	r3, [pc, #692]	@ (8005d14 <display+0x6cc>)
 8005a5e:	789b      	ldrb	r3, [r3, #2]
 8005a60:	2201      	movs	r2, #1
 8005a62:	4053      	eors	r3, r2
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <display+0x42a>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8005a6a:	4ba7      	ldr	r3, [pc, #668]	@ (8005d08 <display+0x6c0>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e000      	b.n	8005a74 <display+0x42c>
			goto buzzer_activado_03;
 8005a72:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 8005a74:	4ba6      	ldr	r3, [pc, #664]	@ (8005d10 <display+0x6c8>)
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	4053      	eors	r3, r2
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <display+0x442>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8005a82:	4ba1      	ldr	r3, [pc, #644]	@ (8005d08 <display+0x6c0>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	e000      	b.n	8005a8c <display+0x444>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 8005a8a:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 8005a8c:	230e      	movs	r3, #14
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8005a94:	230d      	movs	r3, #13
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e015      	b.n	8005aca <display+0x482>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 8005a9e:	200d      	movs	r0, #13
 8005aa0:	183b      	adds	r3, r7, r0
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	4a99      	ldr	r2, [pc, #612]	@ (8005d0c <display+0x6c4>)
 8005aa6:	5cd3      	ldrb	r3, [r2, r3]
 8005aa8:	001a      	movs	r2, r3
 8005aaa:	183b      	adds	r3, r7, r0
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	0013      	movs	r3, r2
 8005ab2:	b2d9      	uxtb	r1, r3
 8005ab4:	220e      	movs	r2, #14
 8005ab6:	18bb      	adds	r3, r7, r2
 8005ab8:	18ba      	adds	r2, r7, r2
 8005aba:	7812      	ldrb	r2, [r2, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8005ac0:	183b      	adds	r3, r7, r0
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	183b      	adds	r3, r7, r0
 8005ac6:	3201      	adds	r2, #1
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	230d      	movs	r3, #13
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b07      	cmp	r3, #7
 8005ad2:	d9e4      	bls.n	8005a9e <display+0x456>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 8005ad4:	230e      	movs	r3, #14
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	223f      	movs	r2, #63	@ 0x3f
 8005adc:	4013      	ands	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <display+0x4a0>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8005ae0:	4b89      	ldr	r3, [pc, #548]	@ (8005d08 <display+0x6c0>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e000      	b.n	8005aea <display+0x4a2>
			goto buzzer_activado_06;
 8005ae8:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 8005aea:	230e      	movs	r3, #14
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	e013      	b.n	8005b20 <display+0x4d8>
			trefst_aux_ |= trefst2[k]<<k;
 8005af8:	4a87      	ldr	r2, [pc, #540]	@ (8005d18 <display+0x6d0>)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	18d3      	adds	r3, r2, r3
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	001a      	movs	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	409a      	lsls	r2, r3
 8005b06:	0013      	movs	r3, r2
 8005b08:	b25a      	sxtb	r2, r3
 8005b0a:	210e      	movs	r1, #14
 8005b0c:	187b      	adds	r3, r7, r1
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	4313      	orrs	r3, r2
 8005b14:	b25a      	sxtb	r2, r3
 8005b16:	187b      	adds	r3, r7, r1
 8005b18:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b07      	cmp	r3, #7
 8005b24:	dde8      	ble.n	8005af8 <display+0x4b0>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 8005b26:	230e      	movs	r3, #14
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <display+0x4f0>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8005b30:	4b75      	ldr	r3, [pc, #468]	@ (8005d08 <display+0x6c0>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	e000      	b.n	8005b3a <display+0x4f2>
			goto buzzer_activado_07;
 8005b38:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 8005b3a:	4b73      	ldr	r3, [pc, #460]	@ (8005d08 <display+0x6c0>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d85b      	bhi.n	8005bfa <display+0x5b2>
 8005b42:	009a      	lsls	r2, r3, #2
 8005b44:	4b75      	ldr	r3, [pc, #468]	@ (8005d1c <display+0x6d4>)
 8005b46:	18d3      	adds	r3, r2, r3
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 8005b4c:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 8005b4e:	4b74      	ldr	r3, [pc, #464]	@ (8005d20 <display+0x6d8>)
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	3364      	adds	r3, #100	@ 0x64
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	4b73      	ldr	r3, [pc, #460]	@ (8005d24 <display+0x6dc>)
 8005b58:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 8005b5a:	e051      	b.n	8005c00 <display+0x5b8>
			case 1: goto buzzer_etapa_1;
 8005b5c:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 8005b5e:	4b72      	ldr	r3, [pc, #456]	@ (8005d28 <display+0x6e0>)
 8005b60:	22fa      	movs	r2, #250	@ 0xfa
 8005b62:	0052      	lsls	r2, r2, #1
 8005b64:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 8005b66:	4b71      	ldr	r3, [pc, #452]	@ (8005d2c <display+0x6e4>)
 8005b68:	22fa      	movs	r2, #250	@ 0xfa
 8005b6a:	0052      	lsls	r2, r2, #1
 8005b6c:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8005b6e:	e012      	b.n	8005b96 <display+0x54e>
			case 2: goto buzzer_etapa_2;
 8005b70:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 8005b72:	4b6d      	ldr	r3, [pc, #436]	@ (8005d28 <display+0x6e0>)
 8005b74:	22fa      	movs	r2, #250	@ 0xfa
 8005b76:	0052      	lsls	r2, r2, #1
 8005b78:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 8005b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8005d2c <display+0x6e4>)
 8005b7c:	4a6c      	ldr	r2, [pc, #432]	@ (8005d30 <display+0x6e8>)
 8005b7e:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8005b80:	e009      	b.n	8005b96 <display+0x54e>
			case 3: goto buzzer_etapa_3;
 8005b82:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 8005b84:	4b68      	ldr	r3, [pc, #416]	@ (8005d28 <display+0x6e0>)
 8005b86:	22fa      	movs	r2, #250	@ 0xfa
 8005b88:	0052      	lsls	r2, r2, #1
 8005b8a:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 8005b8c:	4b67      	ldr	r3, [pc, #412]	@ (8005d2c <display+0x6e4>)
 8005b8e:	4a69      	ldr	r2, [pc, #420]	@ (8005d34 <display+0x6ec>)
 8005b90:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8005b92:	e000      	b.n	8005b96 <display+0x54e>
			case 4: goto buzzer_etapa_4;
 8005b94:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 8005b96:	4b62      	ldr	r3, [pc, #392]	@ (8005d20 <display+0x6d8>)
 8005b98:	881a      	ldrh	r2, [r3, #0]
 8005b9a:	4b62      	ldr	r3, [pc, #392]	@ (8005d24 <display+0x6dc>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d12d      	bne.n	8005bfe <display+0x5b6>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 8005ba2:	4b65      	ldr	r3, [pc, #404]	@ (8005d38 <display+0x6f0>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4053      	eors	r3, r2
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	1e5a      	subs	r2, r3, #1
 8005bae:	4193      	sbcs	r3, r2
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4b61      	ldr	r3, [pc, #388]	@ (8005d38 <display+0x6f0>)
 8005bb4:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 8005bb6:	4b60      	ldr	r3, [pc, #384]	@ (8005d38 <display+0x6f0>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10e      	bne.n	8005bdc <display+0x594>
			goto buzzer_on;
		}
buzzer_off:
 8005bbe:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8005bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8005d3c <display+0x6f4>)
 8005bc2:	2104      	movs	r1, #4
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f00f fc01 	bl	80153cc <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 8005bca:	4b55      	ldr	r3, [pc, #340]	@ (8005d20 <display+0x6d8>)
 8005bcc:	881a      	ldrh	r2, [r3, #0]
 8005bce:	4b57      	ldr	r3, [pc, #348]	@ (8005d2c <display+0x6e4>)
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	18d3      	adds	r3, r2, r3
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	4b53      	ldr	r3, [pc, #332]	@ (8005d24 <display+0x6dc>)
 8005bd8:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 8005bda:	e011      	b.n	8005c00 <display+0x5b8>
			goto buzzer_on;
 8005bdc:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 8005bde:	4b57      	ldr	r3, [pc, #348]	@ (8005d3c <display+0x6f4>)
 8005be0:	2104      	movs	r1, #4
 8005be2:	0018      	movs	r0, r3
 8005be4:	f00f fb10 	bl	8015208 <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 8005be8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d20 <display+0x6d8>)
 8005bea:	881a      	ldrh	r2, [r3, #0]
 8005bec:	4b4e      	ldr	r3, [pc, #312]	@ (8005d28 <display+0x6e0>)
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	18d3      	adds	r3, r2, r3
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8005d24 <display+0x6dc>)
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	e002      	b.n	8005c00 <display+0x5b8>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	e000      	b.n	8005c00 <display+0x5b8>
			goto termina_buzzer;//jrne    termina_buzzer
 8005bfe:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 8005c00:	1dfb      	adds	r3, r7, #7
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e009      	b.n	8005c1c <display+0x5d4>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 8005c08:	1dfb      	adds	r3, r7, #7
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8005d40 <display+0x6f8>)
 8005c0e:	2101      	movs	r1, #1
 8005c10:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 8005c12:	1dfb      	adds	r3, r7, #7
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	1dfb      	adds	r3, r7, #7
 8005c18:	3201      	adds	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	1dfb      	adds	r3, r7, #7
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b07      	cmp	r3, #7
 8005c22:	d9f1      	bls.n	8005c08 <display+0x5c0>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 8005c24:	4b47      	ldr	r3, [pc, #284]	@ (8005d44 <display+0x6fc>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4053      	eors	r3, r2
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <display+0x5f0>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 8005c32:	4b43      	ldr	r3, [pc, #268]	@ (8005d40 <display+0x6f8>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 8005c38:	4b42      	ldr	r3, [pc, #264]	@ (8005d44 <display+0x6fc>)
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4053      	eors	r3, r2
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <display+0x604>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 8005c46:	4b3e      	ldr	r3, [pc, #248]	@ (8005d40 <display+0x6f8>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 8005c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d44 <display+0x6fc>)
 8005c4e:	789b      	ldrb	r3, [r3, #2]
 8005c50:	2201      	movs	r2, #1
 8005c52:	4053      	eors	r3, r2
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <display+0x618>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 8005c5a:	4b39      	ldr	r3, [pc, #228]	@ (8005d40 <display+0x6f8>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 8005c60:	4b38      	ldr	r3, [pc, #224]	@ (8005d44 <display+0x6fc>)
 8005c62:	78db      	ldrb	r3, [r3, #3]
 8005c64:	2201      	movs	r2, #1
 8005c66:	4053      	eors	r3, r2
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <display+0x62c>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 8005c6e:	4b34      	ldr	r3, [pc, #208]	@ (8005d40 <display+0x6f8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 8005c74:	4b33      	ldr	r3, [pc, #204]	@ (8005d44 <display+0x6fc>)
 8005c76:	79db      	ldrb	r3, [r3, #7]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	4053      	eors	r3, r2
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <display+0x640>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 8005c82:	4b2f      	ldr	r3, [pc, #188]	@ (8005d40 <display+0x6f8>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 8005c88:	4b2e      	ldr	r3, [pc, #184]	@ (8005d44 <display+0x6fc>)
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4053      	eors	r3, r2
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <display+0x654>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 8005c96:	4b2a      	ldr	r3, [pc, #168]	@ (8005d40 <display+0x6f8>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 8005c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8005d48 <display+0x700>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d803      	bhi.n	8005cac <display+0x664>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 8005ca4:	4b26      	ldr	r3, [pc, #152]	@ (8005d40 <display+0x6f8>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 8005caa:	e056      	b.n	8005d5a <display+0x712>
		goto	clt_ledInd;
 8005cac:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 8005cae:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <display+0x6f8>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 8005cb4:	4b23      	ldr	r3, [pc, #140]	@ (8005d44 <display+0x6fc>)
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d117      	bne.n	8005cec <display+0x6a4>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 8005cbc:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <display+0x704>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01d      	beq.n	8005d00 <display+0x6b8>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 8005cc4:	4b22      	ldr	r3, [pc, #136]	@ (8005d50 <display+0x708>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4053      	eors	r3, r2
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d118      	bne.n	8005d04 <display+0x6bc>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 8005cd2:	4b20      	ldr	r3, [pc, #128]	@ (8005d54 <display+0x70c>)
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	001a      	movs	r2, r3
 8005cda:	2320      	movs	r3, #32
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d001      	beq.n	8005ce4 <display+0x69c>
	    asm ("nop");
 8005ce0:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 8005ce2:	e03a      	b.n	8005d5a <display+0x712>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 8005ce4:	4b16      	ldr	r3, [pc, #88]	@ (8005d40 <display+0x6f8>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 8005cea:	e036      	b.n	8005d5a <display+0x712>
		goto	blink_dia;
 8005cec:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 8005cee:	4b19      	ldr	r3, [pc, #100]	@ (8005d54 <display+0x70c>)
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db2f      	blt.n	8005d58 <display+0x710>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 8005cf8:	4b11      	ldr	r3, [pc, #68]	@ (8005d40 <display+0x6f8>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	709a      	strb	r2, [r3, #2]
 8005cfe:	e02c      	b.n	8005d5a <display+0x712>
		goto	no_blk;
 8005d00:	46c0      	nop			@ (mov r8, r8)
 8005d02:	e02a      	b.n	8005d5a <display+0x712>
		goto	no_blk;
 8005d04:	46c0      	nop			@ (mov r8, r8)
 8005d06:	e028      	b.n	8005d5a <display+0x712>
 8005d08:	20000ec4 	.word	0x20000ec4
 8005d0c:	20000ac4 	.word	0x20000ac4
 8005d10:	20000fe4 	.word	0x20000fe4
 8005d14:	20000ee0 	.word	0x20000ee0
 8005d18:	20000abc 	.word	0x20000abc
 8005d1c:	08017de8 	.word	0x08017de8
 8005d20:	20000ec0 	.word	0x20000ec0
 8005d24:	20000ec2 	.word	0x20000ec2
 8005d28:	20000ec6 	.word	0x20000ec6
 8005d2c:	20000ec8 	.word	0x20000ec8
 8005d30:	00007530 	.word	0x00007530
 8005d34:	00003a98 	.word	0x00003a98
 8005d38:	20000ecc 	.word	0x20000ecc
 8005d3c:	200004fc 	.word	0x200004fc
 8005d40:	20000bb8 	.word	0x20000bb8
 8005d44:	20000acc 	.word	0x20000acc
 8005d48:	20000ad4 	.word	0x20000ad4
 8005d4c:	20000b63 	.word	0x20000b63
 8005d50:	20000b78 	.word	0x20000b78
 8005d54:	20000a8a 	.word	0x20000a8a
		goto	display_j11;
 8005d58:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 8005d5a:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (eeEstado1 & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8005d5c:	4b08      	ldr	r3, [pc, #32]	@ (8005d80 <display+0x738>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	001a      	movs	r2, r3
 8005d62:	2301      	movs	r3, #1
 8005d64:	4013      	ands	r3, r2
 8005d66:	d104      	bne.n	8005d72 <display+0x72a>
		goto	refriON;
	}
refriOFF_2:
 8005d68:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <display+0x73c>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 8005d70:	e000      	b.n	8005d74 <display+0x72c>
		goto	refriON;
 8005d72:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 8005d74:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b004      	add	sp, #16
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	0803f083 	.word	0x0803f083
 8005d84:	20000bb8 	.word	0x20000bb8

08005d88 <inicio>:
#include "main.h"
#include "customMain.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 8005d8e:	4ba7      	ldr	r3, [pc, #668]	@ (800602c <inicio+0x2a4>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 8005d94:	4ba5      	ldr	r3, [pc, #660]	@ (800602c <inicio+0x2a4>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 8005d9a:	4ba5      	ldr	r3, [pc, #660]	@ (8006030 <inicio+0x2a8>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 8005da0:	4ba4      	ldr	r3, [pc, #656]	@ (8006034 <inicio+0x2ac>)
 8005da2:	2281      	movs	r2, #129	@ 0x81
 8005da4:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 8005da6:	4ba4      	ldr	r3, [pc, #656]	@ (8006038 <inicio+0x2b0>)
 8005da8:	2278      	movs	r2, #120	@ 0x78
 8005daa:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8005dac:	4ba3      	ldr	r3, [pc, #652]	@ (800603c <inicio+0x2b4>)
 8005dae:	2204      	movs	r2, #4
 8005db0:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8005db2:	4ba3      	ldr	r3, [pc, #652]	@ (8006040 <inicio+0x2b8>)
 8005db4:	22c5      	movs	r2, #197	@ 0xc5
 8005db6:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8005db8:	4ba2      	ldr	r3, [pc, #648]	@ (8006044 <inicio+0x2bc>)
 8005dba:	22a4      	movs	r2, #164	@ 0xa4
 8005dbc:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8005dbe:	4ba2      	ldr	r3, [pc, #648]	@ (8006048 <inicio+0x2c0>)
 8005dc0:	220f      	movs	r2, #15
 8005dc2:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8005dc4:	1cfb      	adds	r3, r7, #3
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e009      	b.n	8005de0 <inicio+0x58>
		cruze_por_cero[k] = 0;
 8005dcc:	1cfb      	adds	r3, r7, #3
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	4a9e      	ldr	r2, [pc, #632]	@ (800604c <inicio+0x2c4>)
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8005dd6:	1cfb      	adds	r3, r7, #3
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	1cfb      	adds	r3, r7, #3
 8005ddc:	3201      	adds	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	1cfb      	adds	r3, r7, #3
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d9f1      	bls.n	8005dcc <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 8005de8:	4b99      	ldr	r3, [pc, #612]	@ (8006050 <inicio+0x2c8>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 8005dee:	4b99      	ldr	r3, [pc, #612]	@ (8006054 <inicio+0x2cc>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
 8005df4:	4b98      	ldr	r3, [pc, #608]	@ (8006058 <inicio+0x2d0>)
 8005df6:	2257      	movs	r2, #87	@ 0x57
 8005df8:	5c99      	ldrb	r1, [r3, r2]
 8005dfa:	4b98      	ldr	r3, [pc, #608]	@ (800605c <inicio+0x2d4>)
 8005dfc:	2257      	movs	r2, #87	@ 0x57
 8005dfe:	5499      	strb	r1, [r3, r2]

	voltl = 110;
 8005e00:	4b97      	ldr	r3, [pc, #604]	@ (8006060 <inicio+0x2d8>)
 8005e02:	226e      	movs	r2, #110	@ 0x6e
 8005e04:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 8005e06:	4b95      	ldr	r3, [pc, #596]	@ (800605c <inicio+0x2d4>)
 8005e08:	2257      	movs	r2, #87	@ 0x57
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d103      	bne.n	8005e18 <inicio+0x90>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 8005e10:	4b93      	ldr	r3, [pc, #588]	@ (8006060 <inicio+0x2d8>)
 8005e12:	22d2      	movs	r2, #210	@ 0xd2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e000      	b.n	8005e1a <inicio+0x92>
		goto no_ini_210;
 8005e18:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 8005e1a:	4b92      	ldr	r3, [pc, #584]	@ (8006064 <inicio+0x2dc>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 8005e20:	4b90      	ldr	r3, [pc, #576]	@ (8006064 <inicio+0x2dc>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 8005e26:	4b8f      	ldr	r3, [pc, #572]	@ (8006064 <inicio+0x2dc>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 8005e2c:	4b8e      	ldr	r3, [pc, #568]	@ (8006068 <inicio+0x2e0>)
 8005e2e:	2296      	movs	r2, #150	@ 0x96
 8005e30:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 8005e32:	4b8e      	ldr	r3, [pc, #568]	@ (800606c <inicio+0x2e4>)
 8005e34:	2296      	movs	r2, #150	@ 0x96
 8005e36:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 8005e38:	4b8d      	ldr	r3, [pc, #564]	@ (8006070 <inicio+0x2e8>)
 8005e3a:	2296      	movs	r2, #150	@ 0x96
 8005e3c:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 8005e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006074 <inicio+0x2ec>)
 8005e40:	2296      	movs	r2, #150	@ 0x96
 8005e42:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 8005e44:	4b85      	ldr	r3, [pc, #532]	@ (800605c <inicio+0x2d4>)
 8005e46:	22aa      	movs	r2, #170	@ 0xaa
 8005e48:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 8005e4a:	4b84      	ldr	r3, [pc, #528]	@ (800605c <inicio+0x2d4>)
 8005e4c:	2241      	movs	r2, #65	@ 0x41
 8005e4e:	2166      	movs	r1, #102	@ 0x66
 8005e50:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 8005e52:	4b82      	ldr	r3, [pc, #520]	@ (800605c <inicio+0x2d4>)
 8005e54:	227f      	movs	r2, #127	@ 0x7f
 8005e56:	21cc      	movs	r1, #204	@ 0xcc
 8005e58:	5499      	strb	r1, [r3, r2]

	cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
 8005e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006058 <inicio+0x2d0>)
 8005e5c:	2248      	movs	r2, #72	@ 0x48
 8005e5e:	5c9a      	ldrb	r2, [r3, r2]
 8005e60:	4b85      	ldr	r3, [pc, #532]	@ (8006078 <inicio+0x2f0>)
 8005e62:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 8005e64:	f7fe fad8 	bl	8004418 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 8005e68:	f7fe faf2 	bl	8004450 <load_tiempoAhorro2>

//	;/ Inicializa los registros de tiempo UNIX

	timeSeconds_HW = (uint16_t)(eeTimeUnix1 * 256) + (uint16_t)(eeTimeUnix2);		//	ldw		X,eeTimeUnix1
 8005e6c:	4b83      	ldr	r3, [pc, #524]	@ (800607c <inicio+0x2f4>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4a82      	ldr	r2, [pc, #520]	@ (8006080 <inicio+0x2f8>)
 8005e76:	7812      	ldrb	r2, [r2, #0]
 8005e78:	189b      	adds	r3, r3, r2
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	4b81      	ldr	r3, [pc, #516]	@ (8006084 <inicio+0x2fc>)
 8005e7e:	801a      	strh	r2, [r3, #0]
																											//	ldw		timeSeconds_HW,X
	timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
 8005e80:	4b81      	ldr	r3, [pc, #516]	@ (8006088 <inicio+0x300>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	4a80      	ldr	r2, [pc, #512]	@ (800608c <inicio+0x304>)
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	189b      	adds	r3, r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	4b7f      	ldr	r3, [pc, #508]	@ (8006090 <inicio+0x308>)
 8005e92:	801a      	strh	r2, [r3, #0]
																											//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 8005e94:	4b7f      	ldr	r3, [pc, #508]	@ (8006094 <inicio+0x30c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 8005e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006098 <inicio+0x310>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 8005ea0:	4b7e      	ldr	r3, [pc, #504]	@ (800609c <inicio+0x314>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 8005ea6:	4b7e      	ldr	r3, [pc, #504]	@ (80060a0 <inicio+0x318>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 8005eac:	4b7d      	ldr	r3, [pc, #500]	@ (80060a4 <inicio+0x31c>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	70da      	strb	r2, [r3, #3]


	timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
 8005eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80060a8 <inicio+0x320>)
 8005eb4:	220f      	movs	r2, #15
 8005eb6:	701a      	strb	r2, [r3, #0]
							//	ldw		X,#300;
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 8005eb8:	4b7c      	ldr	r3, [pc, #496]	@ (80060ac <inicio+0x324>)
 8005eba:	2296      	movs	r2, #150	@ 0x96
 8005ebc:	0052      	lsls	r2, r2, #1
 8005ebe:	801a      	strh	r2, [r3, #0]
//	;---  Obteniendo dirección de la última muestra tomada en el logger de datos


	point_X = &dataLogger[127];			// ; carga inicio de logger de datos
 8005ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80060b0 <inicio+0x328>)
 8005ec2:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	4b7a      	ldr	r3, [pc, #488]	@ (80060b4 <inicio+0x32c>)
 8005eca:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;						//
 8005ecc:	4b79      	ldr	r3, [pc, #484]	@ (80060b4 <inicio+0x32c>)
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	4b79      	ldr	r3, [pc, #484]	@ (80060b8 <inicio+0x330>)
 8005ed2:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8005ed4:	4b79      	ldr	r3, [pc, #484]	@ (80060bc <inicio+0x334>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]

checkNextDataBlock:
	if(point_X != &dataLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4b78      	ldr	r3, [pc, #480]	@ (80060c0 <inicio+0x338>)
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d103      	bne.n	8005eea <inicio+0x162>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
	}
	waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8005ee2:	4b76      	ldr	r3, [pc, #472]	@ (80060bc <inicio+0x334>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
	goto  lastDataBlockFound;
 8005ee8:	e015      	b.n	8005f16 <inicio+0x18e>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
 8005eea:	46c0      	nop			@ (mov r8, r8)
checkNextDataBlock_01:
	waux++;								//; incrementa contador de bloques revisados
 8005eec:	4b73      	ldr	r3, [pc, #460]	@ (80060bc <inicio+0x334>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	4b71      	ldr	r3, [pc, #452]	@ (80060bc <inicio+0x334>)
 8005ef6:	701a      	strb	r2, [r3, #0]
	point_X += 128;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3380      	adds	r3, #128	@ 0x80
 8005efc:	607b      	str	r3, [r7, #4]
	STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	4b6c      	ldr	r3, [pc, #432]	@ (80060b4 <inicio+0x32c>)
 8005f04:	701a      	strb	r2, [r3, #0]
	if(STM8_A == wreg){
 8005f06:	4b6b      	ldr	r3, [pc, #428]	@ (80060b4 <inicio+0x32c>)
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80060b8 <inicio+0x330>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d100      	bne.n	8005f14 <inicio+0x18c>
		goto checkNextDataBlock;		//; sí, continua buscando hasta encontrar diferencia
 8005f12:	e7e2      	b.n	8005eda <inicio+0x152>
	}
lastDataBlockFound:
 8005f14:	46c0      	nop			@ (mov r8, r8)
	cntBlockDATA = waux;				//; inicializa contador con el bloque encontrado.
 8005f16:	4b69      	ldr	r3, [pc, #420]	@ (80060bc <inicio+0x334>)
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80060c4 <inicio+0x33c>)
 8005f1c:	701a      	strb	r2, [r3, #0]

	point_X = (cntBlockDATA * 128) + &dataLogger[0] ;	//;	Carga el tamaño de los bloques (128 bytes) y Multiplicalos
 8005f1e:	4b69      	ldr	r3, [pc, #420]	@ (80060c4 <inicio+0x33c>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	01db      	lsls	r3, r3, #7
 8005f24:	001a      	movs	r2, r3
 8005f26:	4b68      	ldr	r3, [pc, #416]	@ (80060c8 <inicio+0x340>)
 8005f28:	18d3      	adds	r3, r2, r3
 8005f2a:	607b      	str	r3, [r7, #4]
	point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	337e      	adds	r3, #126	@ 0x7e
 8005f30:	607b      	str	r3, [r7, #4]

	cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	781a      	ldrb	r2, [r3, #0]
 8005f36:	4b65      	ldr	r3, [pc, #404]	@ (80060cc <inicio+0x344>)
 8005f38:	701a      	strb	r2, [r3, #0]

	dirBuffer = &data_buffer[0];
 8005f3a:	4b65      	ldr	r3, [pc, #404]	@ (80060d0 <inicio+0x348>)
 8005f3c:	4a65      	ldr	r2, [pc, #404]	@ (80060d4 <inicio+0x34c>)
 8005f3e:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 8005f40:	4b65      	ldr	r3, [pc, #404]	@ (80060d8 <inicio+0x350>)
 8005f42:	4a61      	ldr	r2, [pc, #388]	@ (80060c8 <inicio+0x340>)
 8005f44:	601a      	str	r2, [r3, #0]
	cntBlockFlash = cntBlockDATA;
 8005f46:	4b5f      	ldr	r3, [pc, #380]	@ (80060c4 <inicio+0x33c>)
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	4b53      	ldr	r3, [pc, #332]	@ (8006098 <inicio+0x310>)
 8005f4c:	701a      	strb	r2, [r3, #0]
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 8005f4e:	f7fe faad 	bl	80044ac <load_next_buffer>


//	;---  Obteniendo dirección de la última muestra tomada en el logger de eventos

	point_X = &eventLogger[127];			// ; carga inicio de logger de eventos
 8005f52:	4b62      	ldr	r3, [pc, #392]	@ (80060dc <inicio+0x354>)
 8005f54:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	4b56      	ldr	r3, [pc, #344]	@ (80060b4 <inicio+0x32c>)
 8005f5c:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;					//
 8005f5e:	4b55      	ldr	r3, [pc, #340]	@ (80060b4 <inicio+0x32c>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b55      	ldr	r3, [pc, #340]	@ (80060b8 <inicio+0x330>)
 8005f64:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8005f66:	4b55      	ldr	r3, [pc, #340]	@ (80060bc <inicio+0x334>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]

checkNextEventBlock:
		if(point_X != &eventLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80060e0 <inicio+0x358>)
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d103      	bne.n	8005f7c <inicio+0x1f4>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
		}
		waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8005f74:	4b51      	ldr	r3, [pc, #324]	@ (80060bc <inicio+0x334>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
		goto  lastEventBlockFound;
 8005f7a:	e015      	b.n	8005fa8 <inicio+0x220>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
 8005f7c:	46c0      	nop			@ (mov r8, r8)
checkNextEventBlock_01:
		waux++;								//; incrementa contador de bloques revisados
 8005f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80060bc <inicio+0x334>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	4b4d      	ldr	r3, [pc, #308]	@ (80060bc <inicio+0x334>)
 8005f88:	701a      	strb	r2, [r3, #0]
		point_X += 128;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3380      	adds	r3, #128	@ 0x80
 8005f8e:	607b      	str	r3, [r7, #4]
		STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	781a      	ldrb	r2, [r3, #0]
 8005f94:	4b47      	ldr	r3, [pc, #284]	@ (80060b4 <inicio+0x32c>)
 8005f96:	701a      	strb	r2, [r3, #0]
		if(STM8_A == wreg){					// ;	son iguales ?
 8005f98:	4b46      	ldr	r3, [pc, #280]	@ (80060b4 <inicio+0x32c>)
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	4b46      	ldr	r3, [pc, #280]	@ (80060b8 <inicio+0x330>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d100      	bne.n	8005fa6 <inicio+0x21e>
			goto checkNextEventBlock;		//; sí, continua buscando hasta encontrar diferencia
 8005fa4:	e7e2      	b.n	8005f6c <inicio+0x1e4>
		}
lastEventBlockFound:
 8005fa6:	46c0      	nop			@ (mov r8, r8)
		cntBlockEVENT = waux;				//; inicializa contador con el bloque encontrado.
 8005fa8:	4b44      	ldr	r3, [pc, #272]	@ (80060bc <inicio+0x334>)
 8005faa:	781a      	ldrb	r2, [r3, #0]
 8005fac:	4b4d      	ldr	r3, [pc, #308]	@ (80060e4 <inicio+0x35c>)
 8005fae:	701a      	strb	r2, [r3, #0]

		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8005fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80060e4 <inicio+0x35c>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	01db      	lsls	r3, r3, #7
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80060e8 <inicio+0x360>)
 8005fba:	18d3      	adds	r3, r2, r3
 8005fbc:	607b      	str	r3, [r7, #4]
		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	337e      	adds	r3, #126	@ 0x7e
 8005fc2:	607b      	str	r3, [r7, #4]

		cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	4b48      	ldr	r3, [pc, #288]	@ (80060ec <inicio+0x364>)
 8005fca:	701a      	strb	r2, [r3, #0]

		dirBuffer = &event_buffer[0];
 8005fcc:	4b40      	ldr	r3, [pc, #256]	@ (80060d0 <inicio+0x348>)
 8005fce:	4a48      	ldr	r2, [pc, #288]	@ (80060f0 <inicio+0x368>)
 8005fd0:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 8005fd2:	4b41      	ldr	r3, [pc, #260]	@ (80060d8 <inicio+0x350>)
 8005fd4:	4a44      	ldr	r2, [pc, #272]	@ (80060e8 <inicio+0x360>)
 8005fd6:	601a      	str	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;
 8005fd8:	4b42      	ldr	r3, [pc, #264]	@ (80060e4 <inicio+0x35c>)
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8006098 <inicio+0x310>)
 8005fde:	701a      	strb	r2, [r3, #0]
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 8005fe0:	f7fe fa64 	bl	80044ac <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 8005fe4:	4b43      	ldr	r3, [pc, #268]	@ (80060f4 <inicio+0x36c>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 8005fea:	4b42      	ldr	r3, [pc, #264]	@ (80060f4 <inicio+0x36c>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	719a      	strb	r2, [r3, #6]
		if(!GetRegFlagState(eeEstado1, est1Lamp)){
 8005ff0:	4b41      	ldr	r3, [pc, #260]	@ (80060f8 <inicio+0x370>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d003      	beq.n	8006004 <inicio+0x27c>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 8005ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80060f4 <inicio+0x36c>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	719a      	strb	r2, [r3, #6]
 8006002:	e000      	b.n	8006006 <inicio+0x27e>
			goto initLampOFF;
 8006004:	46c0      	nop			@ (mov r8, r8)
initLampOFF:

		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 8006006:	4b3d      	ldr	r3, [pc, #244]	@ (80060fc <inicio+0x374>)
 8006008:	2200      	movs	r2, #0
 800600a:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(eeEstado1, est1LockDr)){
 800600c:	4b3a      	ldr	r3, [pc, #232]	@ (80060f8 <inicio+0x370>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	001a      	movs	r2, r3
 8006012:	2340      	movs	r3, #64	@ 0x40
 8006014:	4013      	ands	r3, r2
 8006016:	d003      	beq.n	8006020 <inicio+0x298>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 8006018:	4b38      	ldr	r3, [pc, #224]	@ (80060fc <inicio+0x374>)
 800601a:	2201      	movs	r2, #1
 800601c:	705a      	strb	r2, [r3, #1]
initLockDrOFF:

	//jp	end_init
}
 800601e:	e000      	b.n	8006022 <inicio+0x29a>
			goto initLockDrOFF;
 8006020:	46c0      	nop			@ (mov r8, r8)
}
 8006022:	46c0      	nop			@ (mov r8, r8)
 8006024:	46bd      	mov	sp, r7
 8006026:	b002      	add	sp, #8
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	20000ab4 	.word	0x20000ab4
 8006030:	20000a89 	.word	0x20000a89
 8006034:	20000b06 	.word	0x20000b06
 8006038:	20000b07 	.word	0x20000b07
 800603c:	20000b93 	.word	0x20000b93
 8006040:	20000b94 	.word	0x20000b94
 8006044:	20000b92 	.word	0x20000b92
 8006048:	20000b95 	.word	0x20000b95
 800604c:	20000b98 	.word	0x20000b98
 8006050:	20000b9d 	.word	0x20000b9d
 8006054:	20000b9e 	.word	0x20000b9e
 8006058:	0803f000 	.word	0x0803f000
 800605c:	200000bc 	.word	0x200000bc
 8006060:	20000b0a 	.word	0x20000b0a
 8006064:	20000b24 	.word	0x20000b24
 8006068:	20000b4c 	.word	0x20000b4c
 800606c:	20000b4d 	.word	0x20000b4d
 8006070:	20000b4e 	.word	0x20000b4e
 8006074:	20000b4f 	.word	0x20000b4f
 8006078:	20000b63 	.word	0x20000b63
 800607c:	0803f084 	.word	0x0803f084
 8006080:	0803f085 	.word	0x0803f085
 8006084:	20000cec 	.word	0x20000cec
 8006088:	0803f086 	.word	0x0803f086
 800608c:	0803f087 	.word	0x0803f087
 8006090:	20000cee 	.word	0x20000cee
 8006094:	20000cd4 	.word	0x20000cd4
 8006098:	20000cd6 	.word	0x20000cd6
 800609c:	20000cd7 	.word	0x20000cd7
 80060a0:	20000cd8 	.word	0x20000cd8
 80060a4:	20000e04 	.word	0x20000e04
 80060a8:	20000e76 	.word	0x20000e76
 80060ac:	20000e88 	.word	0x20000e88
 80060b0:	0803c07f 	.word	0x0803c07f
 80060b4:	2000083c 	.word	0x2000083c
 80060b8:	20000a93 	.word	0x20000a93
 80060bc:	20000a92 	.word	0x20000a92
 80060c0:	0803efff 	.word	0x0803efff
 80060c4:	20000ce9 	.word	0x20000ce9
 80060c8:	0803c000 	.word	0x0803c000
 80060cc:	20000ce8 	.word	0x20000ce8
 80060d0:	20000ce0 	.word	0x20000ce0
 80060d4:	20000bc8 	.word	0x20000bc8
 80060d8:	20000cdc 	.word	0x20000cdc
 80060dc:	0803707f 	.word	0x0803707f
 80060e0:	0803bfff 	.word	0x0803bfff
 80060e4:	20000ceb 	.word	0x20000ceb
 80060e8:	08037000 	.word	0x08037000
 80060ec:	20000cea 	.word	0x20000cea
 80060f0:	20000c48 	.word	0x20000c48
 80060f4:	20000b78 	.word	0x20000b78
 80060f8:	0803f083 	.word	0x0803f083
 80060fc:	20000ae0 	.word	0x20000ae0

08006100 <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 8006104:	4b1f      	ldr	r3, [pc, #124]	@ (8006184 <timeBCD_to_UNIX+0x84>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	0018      	movs	r0, r3
 800610a:	f000 f853 	bl	80061b4 <BCDtoByte>
 800610e:	0003      	movs	r3, r0
 8006110:	22fa      	movs	r2, #250	@ 0xfa
 8006112:	00d2      	lsls	r2, r2, #3
 8006114:	4694      	mov	ip, r2
 8006116:	4463      	add	r3, ip
 8006118:	b29a      	uxth	r2, r3
 800611a:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <timeBCD_to_UNIX+0x88>)
 800611c:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 800611e:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <timeBCD_to_UNIX+0x8c>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	221f      	movs	r2, #31
 8006124:	4013      	ands	r3, r2
 8006126:	b2db      	uxtb	r3, r3
 8006128:	0018      	movs	r0, r3
 800612a:	f000 f843 	bl	80061b4 <BCDtoByte>
 800612e:	0003      	movs	r3, r0
 8006130:	001a      	movs	r2, r3
 8006132:	4b17      	ldr	r3, [pc, #92]	@ (8006190 <timeBCD_to_UNIX+0x90>)
 8006134:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 8006136:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <timeBCD_to_UNIX+0x94>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	0018      	movs	r0, r3
 800613c:	f000 f83a 	bl	80061b4 <BCDtoByte>
 8006140:	0003      	movs	r3, r0
 8006142:	001a      	movs	r2, r3
 8006144:	4b14      	ldr	r3, [pc, #80]	@ (8006198 <timeBCD_to_UNIX+0x98>)
 8006146:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 8006148:	4b14      	ldr	r3, [pc, #80]	@ (800619c <timeBCD_to_UNIX+0x9c>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	0018      	movs	r0, r3
 800614e:	f000 f831 	bl	80061b4 <BCDtoByte>
 8006152:	0003      	movs	r3, r0
 8006154:	001a      	movs	r2, r3
 8006156:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <timeBCD_to_UNIX+0xa0>)
 8006158:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 800615a:	4b12      	ldr	r3, [pc, #72]	@ (80061a4 <timeBCD_to_UNIX+0xa4>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	0018      	movs	r0, r3
 8006160:	f000 f828 	bl	80061b4 <BCDtoByte>
 8006164:	0003      	movs	r3, r0
 8006166:	001a      	movs	r2, r3
 8006168:	4b0f      	ldr	r3, [pc, #60]	@ (80061a8 <timeBCD_to_UNIX+0xa8>)
 800616a:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 800616c:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <timeBCD_to_UNIX+0xac>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	0018      	movs	r0, r3
 8006172:	f000 f81f 	bl	80061b4 <BCDtoByte>
 8006176:	0003      	movs	r3, r0
 8006178:	001a      	movs	r2, r3
 800617a:	4b0d      	ldr	r3, [pc, #52]	@ (80061b0 <timeBCD_to_UNIX+0xb0>)
 800617c:	701a      	strb	r2, [r3, #0]
}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000fac 	.word	0x20000fac
 8006188:	20000fcc 	.word	0x20000fcc
 800618c:	20000fad 	.word	0x20000fad
 8006190:	20000fce 	.word	0x20000fce
 8006194:	20000fae 	.word	0x20000fae
 8006198:	20000fcf 	.word	0x20000fcf
 800619c:	20000faf 	.word	0x20000faf
 80061a0:	20000fd0 	.word	0x20000fd0
 80061a4:	20000fb0 	.word	0x20000fb0
 80061a8:	20000fd1 	.word	0x20000fd1
 80061ac:	20000fb1 	.word	0x20000fb1
 80061b0:	20000fd2 	.word	0x20000fd2

080061b4 <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	0002      	movs	r2, r0
 80061bc:	1dfb      	adds	r3, r7, #7
 80061be:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 80061c0:	1dfb      	adds	r3, r7, #7
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	220f      	movs	r2, #15
 80061c6:	4013      	ands	r3, r2
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	1dfb      	adds	r3, r7, #7
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	1c19      	adds	r1, r3, #0
 80061d4:	0089      	lsls	r1, r1, #2
 80061d6:	18cb      	adds	r3, r1, r3
 80061d8:	18db      	adds	r3, r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	b2db      	uxtb	r3, r3

}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b002      	add	sp, #8
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <logger>:





void logger (void){
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 80061ec:	4bbb      	ldr	r3, [pc, #748]	@ (80064dc <logger+0x2f4>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d800      	bhi.n	80061f6 <logger+0xe>
 80061f4:	e288      	b.n	8006708 <logger+0x520>
			goto logger_01;//jruge	logger_01;
 80061f6:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 80061f8:	4bb9      	ldr	r3, [pc, #740]	@ (80064e0 <logger+0x2f8>)
 80061fa:	79db      	ldrb	r3, [r3, #7]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d118      	bne.n	8006232 <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 8006200:	4bb8      	ldr	r3, [pc, #736]	@ (80064e4 <logger+0x2fc>)
 8006202:	2257      	movs	r2, #87	@ 0x57
 8006204:	5c9b      	ldrb	r3, [r3, r2]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d005      	beq.n	8006216 <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 800620a:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 800620c:	4bb6      	ldr	r3, [pc, #728]	@ (80064e8 <logger+0x300>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b45      	cmp	r3, #69	@ 0x45
 8006212:	d90a      	bls.n	800622a <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 8006214:	e005      	b.n	8006222 <logger+0x3a>
			goto chk_220;//jreq	chk_220
 8006216:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 8006218:	4bb3      	ldr	r3, [pc, #716]	@ (80064e8 <logger+0x300>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2ba9      	cmp	r3, #169	@ 0xa9
 800621e:	d906      	bls.n	800622e <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 8006220:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 8006222:	4baf      	ldr	r3, [pc, #700]	@ (80064e0 <logger+0x2f8>)
 8006224:	2201      	movs	r2, #1
 8006226:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8006228:	e273      	b.n	8006712 <logger+0x52a>
		goto voltArranFAIL;//jra	voltArranFAIL
 800622a:	46c0      	nop			@ (mov r8, r8)
 800622c:	e271      	b.n	8006712 <logger+0x52a>
		goto voltArranFAIL;//jra voltArranFAIL
 800622e:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8006230:	e26f      	b.n	8006712 <logger+0x52a>
			goto voltFlagOK;
 8006232:	46c0      	nop			@ (mov r8, r8)
voltFlagOK:
//;-----------------------------------------------------------
//; Unicamente trabajo logger cuando no hay conexión al servidor
		if(!flagsWIFI[f_serverConnect]){//btjf flagsWIFI,#f_serverConnect,serverDown
 8006234:	4bad      	ldr	r3, [pc, #692]	@ (80064ec <logger+0x304>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2201      	movs	r2, #1
 800623a:	4053      	eors	r3, r2
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d100      	bne.n	8006244 <logger+0x5c>
 8006242:	e263      	b.n	800670c <logger+0x524>
	       	goto serverDown;
 8006244:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8006246:	4ba6      	ldr	r3, [pc, #664]	@ (80064e0 <logger+0x2f8>)
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	4053      	eors	r3, r2
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d100      	bne.n	8006256 <logger+0x6e>
 8006254:	e25c      	b.n	8006710 <logger+0x528>
			goto door_event;
 8006256:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8006258:	4ba5      	ldr	r3, [pc, #660]	@ (80064f0 <logger+0x308>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d136      	bne.n	80062ce <logger+0xe6>
			goto ask_DE_end;
		}
ask_DE_start:
 8006260:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8006262:	4ba4      	ldr	r3, [pc, #656]	@ (80064f4 <logger+0x30c>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d068      	beq.n	800633c <logger+0x154>
			goto ask_DE_start_01;
 800626a:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 800626c:	4ba2      	ldr	r3, [pc, #648]	@ (80064f8 <logger+0x310>)
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	b29b      	uxth	r3, r3
 8006274:	b2da      	uxtb	r2, r3
 8006276:	4ba1      	ldr	r3, [pc, #644]	@ (80064fc <logger+0x314>)
 8006278:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 800627a:	4b9f      	ldr	r3, [pc, #636]	@ (80064f8 <logger+0x310>)
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b2da      	uxtb	r2, r3
 8006280:	4b9e      	ldr	r3, [pc, #632]	@ (80064fc <logger+0x314>)
 8006282:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8006284:	4b9e      	ldr	r3, [pc, #632]	@ (8006500 <logger+0x318>)
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	b29b      	uxth	r3, r3
 800628c:	b2da      	uxtb	r2, r3
 800628e:	4b9b      	ldr	r3, [pc, #620]	@ (80064fc <logger+0x314>)
 8006290:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8006292:	4b9b      	ldr	r3, [pc, #620]	@ (8006500 <logger+0x318>)
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	4b98      	ldr	r3, [pc, #608]	@ (80064fc <logger+0x314>)
 800629a:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 800629c:	4b97      	ldr	r3, [pc, #604]	@ (80064fc <logger+0x314>)
 800629e:	2201      	movs	r2, #1
 80062a0:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 80062a2:	4b98      	ldr	r3, [pc, #608]	@ (8006504 <logger+0x31c>)
 80062a4:	781a      	ldrb	r2, [r3, #0]
 80062a6:	4b95      	ldr	r3, [pc, #596]	@ (80064fc <logger+0x314>)
 80062a8:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 80062aa:	4b97      	ldr	r3, [pc, #604]	@ (8006508 <logger+0x320>)
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	4b93      	ldr	r3, [pc, #588]	@ (80064fc <logger+0x314>)
 80062b0:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 80062b2:	4b8d      	ldr	r3, [pc, #564]	@ (80064e8 <logger+0x300>)
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	4b91      	ldr	r3, [pc, #580]	@ (80064fc <logger+0x314>)
 80062b8:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 80062ba:	4b8d      	ldr	r3, [pc, #564]	@ (80064f0 <logger+0x308>)
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 80062c0:	4b88      	ldr	r3, [pc, #544]	@ (80064e4 <logger+0x2fc>)
 80062c2:	2250      	movs	r2, #80	@ 0x50
 80062c4:	5c9b      	ldrb	r3, [r3, r2]
 80062c6:	001a      	movs	r2, r3
 80062c8:	4b90      	ldr	r3, [pc, #576]	@ (800650c <logger+0x324>)
 80062ca:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 80062cc:	e039      	b.n	8006342 <logger+0x15a>
			goto ask_DE_end;
 80062ce:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 80062d0:	4b88      	ldr	r3, [pc, #544]	@ (80064f4 <logger+0x30c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d133      	bne.n	8006340 <logger+0x158>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 80062d8:	4b8c      	ldr	r3, [pc, #560]	@ (800650c <logger+0x324>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <logger+0x100>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 80062e0:	4b83      	ldr	r3, [pc, #524]	@ (80064f0 <logger+0x308>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 80062e6:	e02c      	b.n	8006342 <logger+0x15a>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 80062e8:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 80062ea:	4b83      	ldr	r3, [pc, #524]	@ (80064f8 <logger+0x310>)
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	4b81      	ldr	r3, [pc, #516]	@ (80064fc <logger+0x314>)
 80062f6:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 80062f8:	4b7f      	ldr	r3, [pc, #508]	@ (80064f8 <logger+0x310>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	4b7f      	ldr	r3, [pc, #508]	@ (80064fc <logger+0x314>)
 8006300:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8006302:	4b7f      	ldr	r3, [pc, #508]	@ (8006500 <logger+0x318>)
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	b29b      	uxth	r3, r3
 800630a:	b2da      	uxtb	r2, r3
 800630c:	4b7b      	ldr	r3, [pc, #492]	@ (80064fc <logger+0x314>)
 800630e:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8006310:	4b7b      	ldr	r3, [pc, #492]	@ (8006500 <logger+0x318>)
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	4b79      	ldr	r3, [pc, #484]	@ (80064fc <logger+0x314>)
 8006318:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 800631a:	4b7d      	ldr	r3, [pc, #500]	@ (8006510 <logger+0x328>)
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	4b77      	ldr	r3, [pc, #476]	@ (80064fc <logger+0x314>)
 8006320:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8006322:	4b7c      	ldr	r3, [pc, #496]	@ (8006514 <logger+0x32c>)
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	4b75      	ldr	r3, [pc, #468]	@ (80064fc <logger+0x314>)
 8006328:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 800632a:	4b7b      	ldr	r3, [pc, #492]	@ (8006518 <logger+0x330>)
 800632c:	4a7b      	ldr	r2, [pc, #492]	@ (800651c <logger+0x334>)
 800632e:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8006330:	f000 fa3a 	bl	80067a8 <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8006334:	4b6e      	ldr	r3, [pc, #440]	@ (80064f0 <logger+0x308>)
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 800633a:	e002      	b.n	8006342 <logger+0x15a>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 800633c:	46c0      	nop			@ (mov r8, r8)
 800633e:	e000      	b.n	8006342 <logger+0x15a>
			goto comp_event;
 8006340:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8006342:	4b6b      	ldr	r3, [pc, #428]	@ (80064f0 <logger+0x308>)
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d130      	bne.n	80063ac <logger+0x1c4>
			goto ask_CE_end;
		}
ask_CE_start:
 800634a:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 800634c:	4b74      	ldr	r3, [pc, #464]	@ (8006520 <logger+0x338>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d05a      	beq.n	800640a <logger+0x222>
			goto ask_CE_start_01;
 8006354:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8006356:	4b68      	ldr	r3, [pc, #416]	@ (80064f8 <logger+0x310>)
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	b2da      	uxtb	r2, r3
 8006360:	4b70      	ldr	r3, [pc, #448]	@ (8006524 <logger+0x33c>)
 8006362:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8006364:	4b64      	ldr	r3, [pc, #400]	@ (80064f8 <logger+0x310>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b6e      	ldr	r3, [pc, #440]	@ (8006524 <logger+0x33c>)
 800636c:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 800636e:	4b64      	ldr	r3, [pc, #400]	@ (8006500 <logger+0x318>)
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	b29b      	uxth	r3, r3
 8006376:	b2da      	uxtb	r2, r3
 8006378:	4b6a      	ldr	r3, [pc, #424]	@ (8006524 <logger+0x33c>)
 800637a:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 800637c:	4b60      	ldr	r3, [pc, #384]	@ (8006500 <logger+0x318>)
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	4b68      	ldr	r3, [pc, #416]	@ (8006524 <logger+0x33c>)
 8006384:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8006386:	4b67      	ldr	r3, [pc, #412]	@ (8006524 <logger+0x33c>)
 8006388:	2202      	movs	r2, #2
 800638a:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 800638c:	4b5d      	ldr	r3, [pc, #372]	@ (8006504 <logger+0x31c>)
 800638e:	781a      	ldrb	r2, [r3, #0]
 8006390:	4b64      	ldr	r3, [pc, #400]	@ (8006524 <logger+0x33c>)
 8006392:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8006394:	4b5c      	ldr	r3, [pc, #368]	@ (8006508 <logger+0x320>)
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	4b62      	ldr	r3, [pc, #392]	@ (8006524 <logger+0x33c>)
 800639a:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 800639c:	4b52      	ldr	r3, [pc, #328]	@ (80064e8 <logger+0x300>)
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	4b60      	ldr	r3, [pc, #384]	@ (8006524 <logger+0x33c>)
 80063a2:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 80063a4:	4b52      	ldr	r3, [pc, #328]	@ (80064f0 <logger+0x308>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 80063aa:	e031      	b.n	8006410 <logger+0x228>
			goto ask_CE_end;
 80063ac:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 80063ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006520 <logger+0x338>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d12b      	bne.n	800640e <logger+0x226>
			goto desh_event;
		}
comp_event_end:
 80063b6:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 80063b8:	4b4f      	ldr	r3, [pc, #316]	@ (80064f8 <logger+0x310>)
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	b29b      	uxth	r3, r3
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	4b58      	ldr	r3, [pc, #352]	@ (8006524 <logger+0x33c>)
 80063c4:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 80063c6:	4b4c      	ldr	r3, [pc, #304]	@ (80064f8 <logger+0x310>)
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	4b55      	ldr	r3, [pc, #340]	@ (8006524 <logger+0x33c>)
 80063ce:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 80063d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006500 <logger+0x318>)
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	4b52      	ldr	r3, [pc, #328]	@ (8006524 <logger+0x33c>)
 80063dc:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 80063de:	4b48      	ldr	r3, [pc, #288]	@ (8006500 <logger+0x318>)
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b4f      	ldr	r3, [pc, #316]	@ (8006524 <logger+0x33c>)
 80063e6:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 80063e8:	4b49      	ldr	r3, [pc, #292]	@ (8006510 <logger+0x328>)
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006524 <logger+0x33c>)
 80063ee:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 80063f0:	4b48      	ldr	r3, [pc, #288]	@ (8006514 <logger+0x32c>)
 80063f2:	781a      	ldrb	r2, [r3, #0]
 80063f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006524 <logger+0x33c>)
 80063f6:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 80063f8:	4b47      	ldr	r3, [pc, #284]	@ (8006518 <logger+0x330>)
 80063fa:	4a4b      	ldr	r2, [pc, #300]	@ (8006528 <logger+0x340>)
 80063fc:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 80063fe:	f000 f9d3 	bl	80067a8 <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 8006402:	4b3b      	ldr	r3, [pc, #236]	@ (80064f0 <logger+0x308>)
 8006404:	2200      	movs	r2, #0
 8006406:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8006408:	e002      	b.n	8006410 <logger+0x228>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	e000      	b.n	8006410 <logger+0x228>
			goto desh_event;
 800640e:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8006410:	4b37      	ldr	r3, [pc, #220]	@ (80064f0 <logger+0x308>)
 8006412:	789b      	ldrb	r3, [r3, #2]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d12f      	bne.n	8006478 <logger+0x290>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8006418:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 800641a:	4b30      	ldr	r3, [pc, #192]	@ (80064dc <logger+0x2f4>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b03      	cmp	r3, #3
 8006420:	d159      	bne.n	80064d6 <logger+0x2ee>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8006422:	4b35      	ldr	r3, [pc, #212]	@ (80064f8 <logger+0x310>)
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	b29b      	uxth	r3, r3
 800642a:	b2da      	uxtb	r2, r3
 800642c:	4b3f      	ldr	r3, [pc, #252]	@ (800652c <logger+0x344>)
 800642e:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 8006430:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <logger+0x310>)
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	4b3d      	ldr	r3, [pc, #244]	@ (800652c <logger+0x344>)
 8006438:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 800643a:	4b31      	ldr	r3, [pc, #196]	@ (8006500 <logger+0x318>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	b29b      	uxth	r3, r3
 8006442:	b2da      	uxtb	r2, r3
 8006444:	4b39      	ldr	r3, [pc, #228]	@ (800652c <logger+0x344>)
 8006446:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8006448:	4b2d      	ldr	r3, [pc, #180]	@ (8006500 <logger+0x318>)
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	4b37      	ldr	r3, [pc, #220]	@ (800652c <logger+0x344>)
 8006450:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 8006452:	4b36      	ldr	r3, [pc, #216]	@ (800652c <logger+0x344>)
 8006454:	2203      	movs	r2, #3
 8006456:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 8006458:	4b2a      	ldr	r3, [pc, #168]	@ (8006504 <logger+0x31c>)
 800645a:	781a      	ldrb	r2, [r3, #0]
 800645c:	4b33      	ldr	r3, [pc, #204]	@ (800652c <logger+0x344>)
 800645e:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 8006460:	4b29      	ldr	r3, [pc, #164]	@ (8006508 <logger+0x320>)
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	4b31      	ldr	r3, [pc, #196]	@ (800652c <logger+0x344>)
 8006466:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 8006468:	4b1f      	ldr	r3, [pc, #124]	@ (80064e8 <logger+0x300>)
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	4b2f      	ldr	r3, [pc, #188]	@ (800652c <logger+0x344>)
 800646e:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 8006470:	4b1f      	ldr	r3, [pc, #124]	@ (80064f0 <logger+0x308>)
 8006472:	2201      	movs	r2, #1
 8006474:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 8006476:	e05e      	b.n	8006536 <logger+0x34e>
			goto ask_DhE_end;
 8006478:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 800647a:	4b18      	ldr	r3, [pc, #96]	@ (80064dc <logger+0x2f4>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b03      	cmp	r3, #3
 8006480:	d058      	beq.n	8006534 <logger+0x34c>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 8006482:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8006484:	4b1c      	ldr	r3, [pc, #112]	@ (80064f8 <logger+0x310>)
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	b29b      	uxth	r3, r3
 800648c:	b2da      	uxtb	r2, r3
 800648e:	4b27      	ldr	r3, [pc, #156]	@ (800652c <logger+0x344>)
 8006490:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 8006492:	4b19      	ldr	r3, [pc, #100]	@ (80064f8 <logger+0x310>)
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	4b24      	ldr	r3, [pc, #144]	@ (800652c <logger+0x344>)
 800649a:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 800649c:	4b18      	ldr	r3, [pc, #96]	@ (8006500 <logger+0x318>)
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	0a1b      	lsrs	r3, r3, #8
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	4b21      	ldr	r3, [pc, #132]	@ (800652c <logger+0x344>)
 80064a8:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <logger+0x318>)
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	4b1e      	ldr	r3, [pc, #120]	@ (800652c <logger+0x344>)
 80064b2:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 80064b4:	4b16      	ldr	r3, [pc, #88]	@ (8006510 <logger+0x328>)
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	4b1c      	ldr	r3, [pc, #112]	@ (800652c <logger+0x344>)
 80064ba:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 80064bc:	4b15      	ldr	r3, [pc, #84]	@ (8006514 <logger+0x32c>)
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	4b1a      	ldr	r3, [pc, #104]	@ (800652c <logger+0x344>)
 80064c2:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 80064c4:	4b14      	ldr	r3, [pc, #80]	@ (8006518 <logger+0x330>)
 80064c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006530 <logger+0x348>)
 80064c8:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 80064ca:	f000 f96d 	bl	80067a8 <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 80064ce:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <logger+0x308>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 80064d4:	e02f      	b.n	8006536 <logger+0x34e>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	e02d      	b.n	8006536 <logger+0x34e>
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	20000ad4 	.word	0x20000ad4
 80064e0:	20000d40 	.word	0x20000d40
 80064e4:	200000bc 	.word	0x200000bc
 80064e8:	20000b0a 	.word	0x20000b0a
 80064ec:	20000e8c 	.word	0x20000e8c
 80064f0:	20000e04 	.word	0x20000e04
 80064f4:	20000b78 	.word	0x20000b78
 80064f8:	20000cec 	.word	0x20000cec
 80064fc:	20000e28 	.word	0x20000e28
 8006500:	20000cee 	.word	0x20000cee
 8006504:	20000aec 	.word	0x20000aec
 8006508:	20000aed 	.word	0x20000aed
 800650c:	20000e14 	.word	0x20000e14
 8006510:	20000aee 	.word	0x20000aee
 8006514:	20000aef 	.word	0x20000aef
 8006518:	20000ce4 	.word	0x20000ce4
 800651c:	20000e2c 	.word	0x20000e2c
 8006520:	20000ae0 	.word	0x20000ae0
 8006524:	20000e3c 	.word	0x20000e3c
 8006528:	20000e40 	.word	0x20000e40
 800652c:	20000e50 	.word	0x20000e50
 8006530:	20000e54 	.word	0x20000e54
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 8006534:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 8006536:	4b78      	ldr	r3, [pc, #480]	@ (8006718 <logger+0x530>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d14c      	bne.n	80065d8 <logger+0x3f0>
			goto alarm_event;//	jrne	alarm_event
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 800653e:	4b77      	ldr	r3, [pc, #476]	@ (800671c <logger+0x534>)
 8006540:	78db      	ldrb	r3, [r3, #3]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d04a      	beq.n	80065dc <logger+0x3f4>
			goto power_event_end;
 8006546:	46c0      	nop			@ (mov r8, r8)
		}
		goto alarm_event;//	jra		alarm_event
power_event_end:
		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
 8006548:	4b75      	ldr	r3, [pc, #468]	@ (8006720 <logger+0x538>)
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	4b75      	ldr	r3, [pc, #468]	@ (8006724 <logger+0x53c>)
 800654e:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
 8006550:	4b75      	ldr	r3, [pc, #468]	@ (8006728 <logger+0x540>)
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	4b73      	ldr	r3, [pc, #460]	@ (8006724 <logger+0x53c>)
 8006556:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
 8006558:	4b74      	ldr	r3, [pc, #464]	@ (800672c <logger+0x544>)
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	4b71      	ldr	r3, [pc, #452]	@ (8006724 <logger+0x53c>)
 800655e:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 8006560:	4b73      	ldr	r3, [pc, #460]	@ (8006730 <logger+0x548>)
 8006562:	781a      	ldrb	r2, [r3, #0]
 8006564:	4b6f      	ldr	r3, [pc, #444]	@ (8006724 <logger+0x53c>)
 8006566:	71da      	strb	r2, [r3, #7]
		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 8006568:	4b6e      	ldr	r3, [pc, #440]	@ (8006724 <logger+0x53c>)
 800656a:	2204      	movs	r2, #4
 800656c:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 800656e:	4b71      	ldr	r3, [pc, #452]	@ (8006734 <logger+0x54c>)
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	4b6c      	ldr	r3, [pc, #432]	@ (8006724 <logger+0x53c>)
 8006574:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 8006576:	4b70      	ldr	r3, [pc, #448]	@ (8006738 <logger+0x550>)
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	4b6a      	ldr	r3, [pc, #424]	@ (8006724 <logger+0x53c>)
 800657c:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 800657e:	4b6f      	ldr	r3, [pc, #444]	@ (800673c <logger+0x554>)
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	4b68      	ldr	r3, [pc, #416]	@ (8006724 <logger+0x53c>)
 8006584:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8006586:	4b6e      	ldr	r3, [pc, #440]	@ (8006740 <logger+0x558>)
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b29b      	uxth	r3, r3
 800658e:	b2da      	uxtb	r2, r3
 8006590:	4b64      	ldr	r3, [pc, #400]	@ (8006724 <logger+0x53c>)
 8006592:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 8006594:	4b6a      	ldr	r3, [pc, #424]	@ (8006740 <logger+0x558>)
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b62      	ldr	r3, [pc, #392]	@ (8006724 <logger+0x53c>)
 800659c:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 800659e:	4b69      	ldr	r3, [pc, #420]	@ (8006744 <logger+0x55c>)
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	4b5e      	ldr	r3, [pc, #376]	@ (8006724 <logger+0x53c>)
 80065aa:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 80065ac:	4b65      	ldr	r3, [pc, #404]	@ (8006744 <logger+0x55c>)
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006724 <logger+0x53c>)
 80065b4:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 80065b6:	4b64      	ldr	r3, [pc, #400]	@ (8006748 <logger+0x560>)
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	4b5a      	ldr	r3, [pc, #360]	@ (8006724 <logger+0x53c>)
 80065bc:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 80065be:	4b63      	ldr	r3, [pc, #396]	@ (800674c <logger+0x564>)
 80065c0:	781a      	ldrb	r2, [r3, #0]
 80065c2:	4b58      	ldr	r3, [pc, #352]	@ (8006724 <logger+0x53c>)
 80065c4:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 80065c6:	4b62      	ldr	r3, [pc, #392]	@ (8006750 <logger+0x568>)
 80065c8:	4a62      	ldr	r2, [pc, #392]	@ (8006754 <logger+0x56c>)
 80065ca:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 80065cc:	f000 f8ec 	bl	80067a8 <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 80065d0:	4b52      	ldr	r3, [pc, #328]	@ (800671c <logger+0x534>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	70da      	strb	r2, [r3, #3]
		goto alarm_event;//jra alarm_event;	/continúa
 80065d6:	e002      	b.n	80065de <logger+0x3f6>
			goto alarm_event;//	jrne	alarm_event
 80065d8:	46c0      	nop			@ (mov r8, r8)
 80065da:	e000      	b.n	80065de <logger+0x3f6>
		goto alarm_event;//	jra		alarm_event
 80065dc:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 80065de:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 80065e0:	4b5d      	ldr	r3, [pc, #372]	@ (8006758 <logger+0x570>)
 80065e2:	795b      	ldrb	r3, [r3, #5]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <logger+0x40a>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 80065e8:	4b5c      	ldr	r3, [pc, #368]	@ (800675c <logger+0x574>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <logger+0x40e>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 80065f0:	e000      	b.n	80065f4 <logger+0x40c>
			goto jmp_fin_logger;
 80065f2:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 80065f4:	e08d      	b.n	8006712 <logger+0x52a>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 80065f6:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 80065f8:	4b59      	ldr	r3, [pc, #356]	@ (8006760 <logger+0x578>)
 80065fa:	2251      	movs	r2, #81	@ 0x51
 80065fc:	5c9b      	ldrb	r3, [r3, r2]
 80065fe:	001a      	movs	r2, r3
 8006600:	233c      	movs	r3, #60	@ 0x3c
 8006602:	4353      	muls	r3, r2
 8006604:	b29a      	uxth	r2, r3
 8006606:	4b55      	ldr	r3, [pc, #340]	@ (800675c <logger+0x574>)
 8006608:	801a      	strh	r2, [r3, #0]

        //DEBUG***********DEBUG---------DEBUG
        cntLogger_H = 120;  // valor de prueba a cada 10 segundos tomar muestras
 800660a:	4b54      	ldr	r3, [pc, #336]	@ (800675c <logger+0x574>)
 800660c:	2278      	movs	r2, #120	@ 0x78
 800660e:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 8006610:	4b4b      	ldr	r3, [pc, #300]	@ (8006740 <logger+0x558>)
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	b29b      	uxth	r3, r3
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b52      	ldr	r3, [pc, #328]	@ (8006764 <logger+0x57c>)
 800661c:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 800661e:	4b48      	ldr	r3, [pc, #288]	@ (8006740 <logger+0x558>)
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	4b4f      	ldr	r3, [pc, #316]	@ (8006764 <logger+0x57c>)
 8006626:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 8006628:	4b46      	ldr	r3, [pc, #280]	@ (8006744 <logger+0x55c>)
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	b29b      	uxth	r3, r3
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b4c      	ldr	r3, [pc, #304]	@ (8006764 <logger+0x57c>)
 8006634:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 8006636:	4b43      	ldr	r3, [pc, #268]	@ (8006744 <logger+0x55c>)
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	4b49      	ldr	r3, [pc, #292]	@ (8006764 <logger+0x57c>)
 800663e:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 8006640:	4b3c      	ldr	r3, [pc, #240]	@ (8006734 <logger+0x54c>)
 8006642:	781a      	ldrb	r2, [r3, #0]
 8006644:	4b47      	ldr	r3, [pc, #284]	@ (8006764 <logger+0x57c>)
 8006646:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 8006648:	4b3b      	ldr	r3, [pc, #236]	@ (8006738 <logger+0x550>)
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	4b45      	ldr	r3, [pc, #276]	@ (8006764 <logger+0x57c>)
 800664e:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 8006650:	4b3d      	ldr	r3, [pc, #244]	@ (8006748 <logger+0x560>)
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	4b43      	ldr	r3, [pc, #268]	@ (8006764 <logger+0x57c>)
 8006656:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 8006658:	4b3c      	ldr	r3, [pc, #240]	@ (800674c <logger+0x564>)
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	4b41      	ldr	r3, [pc, #260]	@ (8006764 <logger+0x57c>)
 800665e:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 8006660:	4b36      	ldr	r3, [pc, #216]	@ (800673c <logger+0x554>)
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	4b3f      	ldr	r3, [pc, #252]	@ (8006764 <logger+0x57c>)
 8006666:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 8006668:	4b3f      	ldr	r3, [pc, #252]	@ (8006768 <logger+0x580>)
 800666a:	4a40      	ldr	r2, [pc, #256]	@ (800676c <logger+0x584>)
 800666c:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 800666e:	4b38      	ldr	r3, [pc, #224]	@ (8006750 <logger+0x568>)
 8006670:	4a3c      	ldr	r2, [pc, #240]	@ (8006764 <logger+0x57c>)
 8006672:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 8006674:	4b3e      	ldr	r3, [pc, #248]	@ (8006770 <logger+0x588>)
 8006676:	4a3f      	ldr	r2, [pc, #252]	@ (8006774 <logger+0x58c>)
 8006678:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 800667a:	4b3f      	ldr	r3, [pc, #252]	@ (8006778 <logger+0x590>)
 800667c:	2260      	movs	r2, #96	@ 0x60
 800667e:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 8006680:	4b3e      	ldr	r3, [pc, #248]	@ (800677c <logger+0x594>)
 8006682:	2209      	movs	r2, #9
 8006684:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 8006686:	4b3e      	ldr	r3, [pc, #248]	@ (8006780 <logger+0x598>)
 8006688:	781a      	ldrb	r2, [r3, #0]
 800668a:	4b3e      	ldr	r3, [pc, #248]	@ (8006784 <logger+0x59c>)
 800668c:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 800668e:	4b3e      	ldr	r3, [pc, #248]	@ (8006788 <logger+0x5a0>)
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	4b3e      	ldr	r3, [pc, #248]	@ (800678c <logger+0x5a4>)
 8006694:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 8006696:	4b39      	ldr	r3, [pc, #228]	@ (800677c <logger+0x594>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	0019      	movs	r1, r3
 800669c:	2080      	movs	r0, #128	@ 0x80
 800669e:	f7f9 fdc5 	bl	800022c <__divsi3>
 80066a2:	0003      	movs	r3, r0
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	4b3a      	ldr	r3, [pc, #232]	@ (8006790 <logger+0x5a8>)
 80066a8:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 80066aa:	4b39      	ldr	r3, [pc, #228]	@ (8006790 <logger+0x5a8>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	4a33      	ldr	r2, [pc, #204]	@ (800677c <logger+0x594>)
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	4353      	muls	r3, r2
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	4b37      	ldr	r3, [pc, #220]	@ (8006794 <logger+0x5ac>)
 80066b8:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         cntRegDATA++;	//incw	X
 80066ba:	4b37      	ldr	r3, [pc, #220]	@ (8006798 <logger+0x5b0>)
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	4b35      	ldr	r3, [pc, #212]	@ (8006798 <logger+0x5b0>)
 80066c4:	801a      	strh	r2, [r3, #0]
         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 80066c6:	4b34      	ldr	r3, [pc, #208]	@ (8006798 <logger+0x5b0>)
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	4b34      	ldr	r3, [pc, #208]	@ (800679c <logger+0x5b4>)
 80066cc:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 80066ce:	4b34      	ldr	r3, [pc, #208]	@ (80067a0 <logger+0x5b8>)
 80066d0:	4a34      	ldr	r2, [pc, #208]	@ (80067a4 <logger+0x5bc>)
 80066d2:	601a      	str	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 80066d4:	f000 f8dc 	bl	8006890 <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 80066d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006784 <logger+0x59c>)
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	4b28      	ldr	r3, [pc, #160]	@ (8006780 <logger+0x598>)
 80066de:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 80066e0:	4b2a      	ldr	r3, [pc, #168]	@ (800678c <logger+0x5a4>)
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	4b28      	ldr	r3, [pc, #160]	@ (8006788 <logger+0x5a0>)
 80066e6:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 80066e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006758 <logger+0x570>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	4053      	eors	r3, r2
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <logger+0x51c>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 80066f6:	4b18      	ldr	r3, [pc, #96]	@ (8006758 <logger+0x570>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 80066fc:	4b16      	ldr	r3, [pc, #88]	@ (8006758 <logger+0x570>)
 80066fe:	2201      	movs	r2, #1
 8006700:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 8006702:	e006      	b.n	8006712 <logger+0x52a>
        	 	 goto noFullLoggerDATA;
 8006704:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 8006706:	e004      	b.n	8006712 <logger+0x52a>
		goto fin_logger; //jp fin_logger
 8006708:	46c0      	nop			@ (mov r8, r8)
 800670a:	e002      	b.n	8006712 <logger+0x52a>
	    goto fin_logger; //fin_logger
 800670c:	46c0      	nop			@ (mov r8, r8)
 800670e:	e000      	b.n	8006712 <logger+0x52a>
		goto fin_logger; // jp fin_logger
 8006710:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000fda 	.word	0x20000fda
 800671c:	20000e04 	.word	0x20000e04
 8006720:	0803f084 	.word	0x0803f084
 8006724:	20000e64 	.word	0x20000e64
 8006728:	0803f085 	.word	0x0803f085
 800672c:	0803f086 	.word	0x0803f086
 8006730:	0803f087 	.word	0x0803f087
 8006734:	20000aec 	.word	0x20000aec
 8006738:	20000aed 	.word	0x20000aed
 800673c:	20000b0a 	.word	0x20000b0a
 8006740:	20000cec 	.word	0x20000cec
 8006744:	20000cee 	.word	0x20000cee
 8006748:	20000aee 	.word	0x20000aee
 800674c:	20000aef 	.word	0x20000aef
 8006750:	20000ce4 	.word	0x20000ce4
 8006754:	20000e68 	.word	0x20000e68
 8006758:	20000d40 	.word	0x20000d40
 800675c:	20000cd4 	.word	0x20000cd4
 8006760:	200000bc 	.word	0x200000bc
 8006764:	20000cf0 	.word	0x20000cf0
 8006768:	20000ce0 	.word	0x20000ce0
 800676c:	20000bc8 	.word	0x20000bc8
 8006770:	20000cdc 	.word	0x20000cdc
 8006774:	0803c000 	.word	0x0803c000
 8006778:	20000cd9 	.word	0x20000cd9
 800677c:	20000cda 	.word	0x20000cda
 8006780:	20000ce9 	.word	0x20000ce9
 8006784:	20000cd6 	.word	0x20000cd6
 8006788:	20000ce8 	.word	0x20000ce8
 800678c:	20000cd7 	.word	0x20000cd7
 8006790:	2000083c 	.word	0x2000083c
 8006794:	20000a93 	.word	0x20000a93
 8006798:	20000f76 	.word	0x20000f76
 800679c:	20000f7a 	.word	0x20000f7a
 80067a0:	20000f7c 	.word	0x20000f7c
 80067a4:	0803f090 	.word	0x0803f090

080067a8 <load_event>:
void load_event(){
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 80067ac:	4b27      	ldr	r3, [pc, #156]	@ (800684c <load_event+0xa4>)
 80067ae:	4a28      	ldr	r2, [pc, #160]	@ (8006850 <load_event+0xa8>)
 80067b0:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 80067b2:	4b28      	ldr	r3, [pc, #160]	@ (8006854 <load_event+0xac>)
 80067b4:	4a28      	ldr	r2, [pc, #160]	@ (8006858 <load_event+0xb0>)
 80067b6:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 80067b8:	4b28      	ldr	r3, [pc, #160]	@ (800685c <load_event+0xb4>)
 80067ba:	22a0      	movs	r2, #160	@ 0xa0
 80067bc:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 80067be:	4b28      	ldr	r3, [pc, #160]	@ (8006860 <load_event+0xb8>)
 80067c0:	220e      	movs	r2, #14
 80067c2:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 80067c4:	4b27      	ldr	r3, [pc, #156]	@ (8006864 <load_event+0xbc>)
 80067c6:	781a      	ldrb	r2, [r3, #0]
 80067c8:	4b27      	ldr	r3, [pc, #156]	@ (8006868 <load_event+0xc0>)
 80067ca:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 80067cc:	4b27      	ldr	r3, [pc, #156]	@ (800686c <load_event+0xc4>)
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	4b27      	ldr	r3, [pc, #156]	@ (8006870 <load_event+0xc8>)
 80067d2:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 80067d4:	4b22      	ldr	r3, [pc, #136]	@ (8006860 <load_event+0xb8>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	0019      	movs	r1, r3
 80067da:	2080      	movs	r0, #128	@ 0x80
 80067dc:	f7f9 fd26 	bl	800022c <__divsi3>
 80067e0:	0003      	movs	r3, r0
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	4b23      	ldr	r3, [pc, #140]	@ (8006874 <load_event+0xcc>)
 80067e6:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 80067e8:	4b22      	ldr	r3, [pc, #136]	@ (8006874 <load_event+0xcc>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006860 <load_event+0xb8>)
 80067ee:	7812      	ldrb	r2, [r2, #0]
 80067f0:	4353      	muls	r3, r2
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	4b20      	ldr	r3, [pc, #128]	@ (8006878 <load_event+0xd0>)
 80067f6:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 80067f8:	4b20      	ldr	r3, [pc, #128]	@ (800687c <load_event+0xd4>)
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	4b1e      	ldr	r3, [pc, #120]	@ (800687c <load_event+0xd4>)
 8006802:	801a      	strh	r2, [r3, #0]
		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 8006804:	4b1d      	ldr	r3, [pc, #116]	@ (800687c <load_event+0xd4>)
 8006806:	881a      	ldrh	r2, [r3, #0]
 8006808:	4b1d      	ldr	r3, [pc, #116]	@ (8006880 <load_event+0xd8>)
 800680a:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800680c:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <load_event+0xdc>)
 800680e:	4a1e      	ldr	r2, [pc, #120]	@ (8006888 <load_event+0xe0>)
 8006810:	601a      	str	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 8006812:	f000 f83d 	bl	8006890 <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 8006816:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <load_event+0xc0>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b12      	ldr	r3, [pc, #72]	@ (8006864 <load_event+0xbc>)
 800681c:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 800681e:	4b14      	ldr	r3, [pc, #80]	@ (8006870 <load_event+0xc8>)
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	4b12      	ldr	r3, [pc, #72]	@ (800686c <load_event+0xc4>)
 8006824:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 8006826:	4b19      	ldr	r3, [pc, #100]	@ (800688c <load_event+0xe4>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2201      	movs	r2, #1
 800682c:	4053      	eors	r3, r2
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <load_event+0x9a>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 8006834:	4b15      	ldr	r3, [pc, #84]	@ (800688c <load_event+0xe4>)
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 800683a:	4b14      	ldr	r3, [pc, #80]	@ (800688c <load_event+0xe4>)
 800683c:	2201      	movs	r2, #1
 800683e:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 8006840:	e000      	b.n	8006844 <load_event+0x9c>
			goto noFullLoggerEVENT;
 8006842:	46c0      	nop			@ (mov r8, r8)
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	20000ce0 	.word	0x20000ce0
 8006850:	20000c48 	.word	0x20000c48
 8006854:	20000cdc 	.word	0x20000cdc
 8006858:	08037000 	.word	0x08037000
 800685c:	20000cd9 	.word	0x20000cd9
 8006860:	20000cda 	.word	0x20000cda
 8006864:	20000ceb 	.word	0x20000ceb
 8006868:	20000cd6 	.word	0x20000cd6
 800686c:	20000cea 	.word	0x20000cea
 8006870:	20000cd7 	.word	0x20000cd7
 8006874:	2000083c 	.word	0x2000083c
 8006878:	20000a93 	.word	0x20000a93
 800687c:	20000f78 	.word	0x20000f78
 8006880:	20000f7a 	.word	0x20000f7a
 8006884:	20000f7c 	.word	0x20000f7c
 8006888:	0803f092 	.word	0x0803f092
 800688c:	20000d40 	.word	0x20000d40

08006890 <load_buffer_logger>:

void load_buffer_logger(){
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 8006896:	4b45      	ldr	r3, [pc, #276]	@ (80069ac <load_buffer_logger+0x11c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 800689c:	4b44      	ldr	r3, [pc, #272]	@ (80069b0 <load_buffer_logger+0x120>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 80068a2:	4b44      	ldr	r3, [pc, #272]	@ (80069b4 <load_buffer_logger+0x124>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	001a      	movs	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	189b      	adds	r3, r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 80068ae:	4b42      	ldr	r3, [pc, #264]	@ (80069b8 <load_buffer_logger+0x128>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 80068c8:	4b3b      	ldr	r3, [pc, #236]	@ (80069b8 <load_buffer_logger+0x128>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	4b39      	ldr	r3, [pc, #228]	@ (80069b8 <load_buffer_logger+0x128>)
 80068d2:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 80068d4:	4b37      	ldr	r3, [pc, #220]	@ (80069b4 <load_buffer_logger+0x124>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	4b35      	ldr	r3, [pc, #212]	@ (80069b4 <load_buffer_logger+0x124>)
 80068de:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 80068e0:	4b34      	ldr	r3, [pc, #208]	@ (80069b4 <load_buffer_logger+0x124>)
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	4b35      	ldr	r3, [pc, #212]	@ (80069bc <load_buffer_logger+0x12c>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d352      	bcc.n	8006992 <load_buffer_logger+0x102>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 80068ec:	4b30      	ldr	r3, [pc, #192]	@ (80069b0 <load_buffer_logger+0x120>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	337f      	adds	r3, #127	@ 0x7f
 80068f2:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	4b31      	ldr	r3, [pc, #196]	@ (80069c0 <load_buffer_logger+0x130>)
 80068fa:	701a      	strb	r2, [r3, #0]
		STM8_A++;   //inc	A;	/ incrementa el byte
 80068fc:	4b30      	ldr	r3, [pc, #192]	@ (80069c0 <load_buffer_logger+0x130>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	b2da      	uxtb	r2, r3
 8006904:	4b2e      	ldr	r3, [pc, #184]	@ (80069c0 <load_buffer_logger+0x130>)
 8006906:	701a      	strb	r2, [r3, #0]
		*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
 8006908:	4b2d      	ldr	r3, [pc, #180]	@ (80069c0 <load_buffer_logger+0x130>)
 800690a:	781a      	ldrb	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	701a      	strb	r2, [r3, #0]
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3b01      	subs	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 800691c:	4b29      	ldr	r3, [pc, #164]	@ (80069c4 <load_buffer_logger+0x134>)
 800691e:	22aa      	movs	r2, #170	@ 0xaa
 8006920:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 8006922:	4b29      	ldr	r3, [pc, #164]	@ (80069c8 <load_buffer_logger+0x138>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	01db      	lsls	r3, r3, #7
 8006928:	b29a      	uxth	r2, r3
 800692a:	4b28      	ldr	r3, [pc, #160]	@ (80069cc <load_buffer_logger+0x13c>)
 800692c:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 800692e:	4b28      	ldr	r3, [pc, #160]	@ (80069d0 <load_buffer_logger+0x140>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a26      	ldr	r2, [pc, #152]	@ (80069cc <load_buffer_logger+0x13c>)
 8006934:	8812      	ldrh	r2, [r2, #0]
 8006936:	189a      	adds	r2, r3, r2
 8006938:	4b26      	ldr	r3, [pc, #152]	@ (80069d4 <load_buffer_logger+0x144>)
 800693a:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 800693c:	4b1c      	ldr	r3, [pc, #112]	@ (80069b0 <load_buffer_logger+0x120>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4b25      	ldr	r3, [pc, #148]	@ (80069d8 <load_buffer_logger+0x148>)
 8006942:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	607b      	str	r3, [r7, #4]

		GRABA_BLOCK();		//call	GRABA_BLOCK
 8006948:	f7fd ff08 	bl	800475c <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 800694c:	f7fd fe22 	bl	8004594 <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 8006950:	f7fd fde6 	bl	8004520 <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 8006954:	4b1c      	ldr	r3, [pc, #112]	@ (80069c8 <load_buffer_logger+0x138>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	b2da      	uxtb	r2, r3
 800695c:	4b1a      	ldr	r3, [pc, #104]	@ (80069c8 <load_buffer_logger+0x138>)
 800695e:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 8006960:	4b19      	ldr	r3, [pc, #100]	@ (80069c8 <load_buffer_logger+0x138>)
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	4b1d      	ldr	r3, [pc, #116]	@ (80069dc <load_buffer_logger+0x14c>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d306      	bcc.n	800697a <load_buffer_logger+0xea>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 800696c:	4b16      	ldr	r3, [pc, #88]	@ (80069c8 <load_buffer_logger+0x138>)
 800696e:	2200      	movs	r2, #0
 8006970:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 8006972:	4b1b      	ldr	r3, [pc, #108]	@ (80069e0 <load_buffer_logger+0x150>)
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	e000      	b.n	800697c <load_buffer_logger+0xec>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 800697a:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 800697c:	f7fd fd96 	bl	80044ac <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <load_buffer_logger+0x120>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 800698a:	4b0a      	ldr	r3, [pc, #40]	@ (80069b4 <load_buffer_logger+0x124>)
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	e000      	b.n	8006994 <load_buffer_logger+0x104>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 8006992:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 8006994:	4b08      	ldr	r3, [pc, #32]	@ (80069b8 <load_buffer_logger+0x128>)
 8006996:	781a      	ldrb	r2, [r3, #0]
 8006998:	4b12      	ldr	r3, [pc, #72]	@ (80069e4 <load_buffer_logger+0x154>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d200      	bcs.n	80069a2 <load_buffer_logger+0x112>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 80069a0:	e788      	b.n	80068b4 <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 80069a2:	46c0      	nop			@ (mov r8, r8)

}
 80069a4:	46c0      	nop			@ (mov r8, r8)
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b004      	add	sp, #16
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000ce4 	.word	0x20000ce4
 80069b0:	20000ce0 	.word	0x20000ce0
 80069b4:	20000cd7 	.word	0x20000cd7
 80069b8:	20000cd8 	.word	0x20000cd8
 80069bc:	20000a93 	.word	0x20000a93
 80069c0:	2000083c 	.word	0x2000083c
 80069c4:	20000cc8 	.word	0x20000cc8
 80069c8:	20000cd6 	.word	0x20000cd6
 80069cc:	2000083e 	.word	0x2000083e
 80069d0:	20000cdc 	.word	0x20000cdc
 80069d4:	20000ccc 	.word	0x20000ccc
 80069d8:	20000cd0 	.word	0x20000cd0
 80069dc:	20000cd9 	.word	0x20000cd9
 80069e0:	20000d40 	.word	0x20000d40
 80069e4:	20000cda 	.word	0x20000cda

080069e8 <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0

    return timemilis;
 80069ec:	4b02      	ldr	r3, [pc, #8]	@ (80069f8 <millis+0x10>)
 80069ee:	681b      	ldr	r3, [r3, #0]
}
 80069f0:	0018      	movs	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	20000848 	.word	0x20000848

080069fc <configura_perif_2>:

	HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);
}

void configura_perif_2(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 8006a00:	f000 fee6 	bl	80077d0 <MX_GPIO_Init>
	  MX_DMA_Init();
 8006a04:	f000 febe 	bl	8007784 <MX_DMA_Init>
	  MX_ADC1_Init();
 8006a08:	f000 faf2 	bl	8006ff0 <MX_ADC1_Init>
	  MX_I2C1_Init();
 8006a0c:	f000 fc82 	bl	8007314 <MX_I2C1_Init>
	  MX_TIM3_Init();
 8006a10:	f000 fd5a 	bl	80074c8 <MX_TIM3_Init>
	  MX_TIM6_Init();
 8006a14:	f000 fdd8 	bl	80075c8 <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 8006a18:	f000 fe16 	bl	8007648 <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 8006a1c:	f000 fe62 	bl	80076e4 <MX_USART4_UART_Init>
	  //MX_IWDG_Init();

}
 8006a20:	46c0      	nop			@ (mov r8, r8)
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 8006a2c:	4b21      	ldr	r3, [pc, #132]	@ (8006ab4 <check_Tick_1ms+0x8c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	4b20      	ldr	r3, [pc, #128]	@ (8006ab4 <check_Tick_1ms+0x8c>)
 8006a34:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)			// contador prescala 1ms =
 8006a36:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab4 <check_Tick_1ms+0x8c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	dd0f      	ble.n	8006a5e <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 8006a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab4 <check_Tick_1ms+0x8c>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;								// Manuel, levanta flag 1ms
 8006a44:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab8 <check_Tick_1ms+0x90>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 8006a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006abc <check_Tick_1ms+0x94>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	4b1a      	ldr	r3, [pc, #104]	@ (8006abc <check_Tick_1ms+0x94>)
 8006a52:	601a      	str	r2, [r3, #0]
						timemilis++;			// variable contadora de milisegundos
 8006a54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <check_Tick_1ms+0x98>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	4b19      	ldr	r3, [pc, #100]	@ (8006ac0 <check_Tick_1ms+0x98>)
 8006a5c:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)					// contador prescala 10ms
 8006a5e:	4b17      	ldr	r3, [pc, #92]	@ (8006abc <check_Tick_1ms+0x94>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b09      	cmp	r3, #9
 8006a64:	dd0a      	ble.n	8006a7c <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 8006a66:	4b15      	ldr	r3, [pc, #84]	@ (8006abc <check_Tick_1ms+0x94>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
						tick_10ms =1;								// flag base de tiempo 10ms
 8006a6c:	4b15      	ldr	r3, [pc, #84]	@ (8006ac4 <check_Tick_1ms+0x9c>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 8006a72:	4b15      	ldr	r3, [pc, #84]	@ (8006ac8 <check_Tick_1ms+0xa0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	4b13      	ldr	r3, [pc, #76]	@ (8006ac8 <check_Tick_1ms+0xa0>)
 8006a7a:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)				// contador prescala 100ms
 8006a7c:	4b12      	ldr	r3, [pc, #72]	@ (8006ac8 <check_Tick_1ms+0xa0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b09      	cmp	r3, #9
 8006a82:	dd0a      	ble.n	8006a9a <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 8006a84:	4b10      	ldr	r3, [pc, #64]	@ (8006ac8 <check_Tick_1ms+0xa0>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
						tick_100ms =1;								// flag base de tiempo 100ms
 8006a8a:	4b10      	ldr	r3, [pc, #64]	@ (8006acc <check_Tick_1ms+0xa4>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 8006a90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <check_Tick_1ms+0xa8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad0 <check_Tick_1ms+0xa8>)
 8006a98:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)					// contador prescala 1s
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <check_Tick_1ms+0xa8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	dd05      	ble.n	8006aae <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <check_Tick_1ms+0xa8>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad4 <check_Tick_1ms+0xac>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 8006aae:	46c0      	nop			@ (mov r8, r8)
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	2000084c 	.word	0x2000084c
 8006ab8:	20000840 	.word	0x20000840
 8006abc:	20000850 	.word	0x20000850
 8006ac0:	20000848 	.word	0x20000848
 8006ac4:	20000841 	.word	0x20000841
 8006ac8:	20000854 	.word	0x20000854
 8006acc:	20000842 	.word	0x20000842
 8006ad0:	20000858 	.word	0x20000858
 8006ad4:	20000843 	.word	0x20000843

08006ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	timeRstBLE = 1;
 8006ade:	4bd4      	ldr	r3, [pc, #848]	@ (8006e30 <main+0x358>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]
	inicio ();
 8006ae4:	f7ff f950 	bl	8005d88 <inicio>
	ProcesosC = 6;
 8006ae8:	4bd2      	ldr	r3, [pc, #840]	@ (8006e34 <main+0x35c>)
 8006aea:	2206      	movs	r2, #6
 8006aec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006aee:	f007 f918 	bl	800dd22 <HAL_Init>

  /* USER CODE BEGIN Init */
  configura_perif_2();
 8006af2:	f7ff ff83 	bl	80069fc <configura_perif_2>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006af6:	f000 fa2f 	bl	8006f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006afa:	f000 fe69 	bl	80077d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006afe:	f000 fe41 	bl	8007784 <MX_DMA_Init>
  MX_ADC1_Init();
 8006b02:	f000 fa75 	bl	8006ff0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8006b06:	f000 fc05 	bl	8007314 <MX_I2C1_Init>
  MX_IWDG_Init();
 8006b0a:	f000 fc45 	bl	8007398 <MX_IWDG_Init>
  MX_RTC_Init();
 8006b0e:	f000 fc65 	bl	80073dc <MX_RTC_Init>
  MX_TIM3_Init();
 8006b12:	f000 fcd9 	bl	80074c8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8006b16:	f000 fd57 	bl	80075c8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8006b1a:	f000 fd95 	bl	8007648 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8006b1e:	f000 fde1 	bl	80076e4 <MX_USART4_UART_Init>
  MX_FLASH_Init();
 8006b22:	f000 fbb1 	bl	8007288 <MX_FLASH_Init>
  /* USER CODE BEGIN 2 */
  Modbus_ModbusSalave ();
 8006b26:	f7fa fee1 	bl	80018ec <Modbus_ModbusSalave>
  ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
 8006b2a:	4bc3      	ldr	r3, [pc, #780]	@ (8006e38 <main+0x360>)
 8006b2c:	2272      	movs	r2, #114	@ 0x72
 8006b2e:	5c9b      	ldrb	r3, [r3, r2]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7fa fee1 	bl	80018f8 <ModbusMaster_begin>
  TR485_Trasnmiting = 0;					//17-DIC-2021		El dispositivo inicialmente escucha
 8006b36:	4bc1      	ldr	r3, [pc, #772]	@ (8006e3c <main+0x364>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 8006b3c:	4bc0      	ldr	r3, [pc, #768]	@ (8006e40 <main+0x368>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2104      	movs	r1, #4
 8006b42:	0018      	movs	r0, r3
 8006b44:	f009 fda5 	bl	8010692 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 8006b48:	4bbe      	ldr	r3, [pc, #760]	@ (8006e44 <main+0x36c>)
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	701a      	strb	r2, [r3, #0]
  timeRstBLE = 8;
 8006b4e:	4bb8      	ldr	r3, [pc, #736]	@ (8006e30 <main+0x358>)
 8006b50:	2208      	movs	r2, #8
 8006b52:	701a      	strb	r2, [r3, #0]
  BluetoothState = 1;
 8006b54:	4bbb      	ldr	r3, [pc, #748]	@ (8006e44 <main+0x36c>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 8006b5a:	4bbb      	ldr	r3, [pc, #748]	@ (8006e48 <main+0x370>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2120      	movs	r1, #32
 8006b60:	0018      	movs	r0, r3
 8006b62:	f009 fd96 	bl	8010692 <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8006b66:	2007      	movs	r0, #7
 8006b68:	f008 fbb7 	bl	800f2da <HAL_NVIC_DisableIRQ>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8006b6c:	4bb7      	ldr	r3, [pc, #732]	@ (8006e4c <main+0x374>)
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f00e fa46 	bl	8015000 <HAL_RTCEx_DeactivateWakeUpTimer>

  //HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM   JTA eliminar buzer inicial
  while(Count_Test2 < 130000)
 8006b74:	e00e      	b.n	8006b94 <main+0xbc>
  {
		Count_Test2++;//  eliminar JTA buzzer
 8006b76:	4bb6      	ldr	r3, [pc, #728]	@ (8006e50 <main+0x378>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	4bb4      	ldr	r3, [pc, #720]	@ (8006e50 <main+0x378>)
 8006b7e:	601a      	str	r2, [r3, #0]
		if(Count_Test2 == 129999 ) //eliminar JTA buzzer
 8006b80:	4bb3      	ldr	r3, [pc, #716]	@ (8006e50 <main+0x378>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4ab3      	ldr	r2, [pc, #716]	@ (8006e54 <main+0x37c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d104      	bne.n	8006b94 <main+0xbc>
		{
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2); //eliminar JTA buzzer
 8006b8a:	4bb3      	ldr	r3, [pc, #716]	@ (8006e58 <main+0x380>)
 8006b8c:	2104      	movs	r1, #4
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f00e fc1c 	bl	80153cc <HAL_TIM_PWM_Stop>
  while(Count_Test2 < 130000)
 8006b94:	4bae      	ldr	r3, [pc, #696]	@ (8006e50 <main+0x378>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4aae      	ldr	r2, [pc, #696]	@ (8006e54 <main+0x37c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d9eb      	bls.n	8006b76 <main+0x9e>
			//Count_Test2 = 255;//eliminar JTA buzzer
		}
  }
  Count_Test2 = 0;
 8006b9e:	4bac      	ldr	r3, [pc, #688]	@ (8006e50 <main+0x378>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

  asm ("nop");
 8006ba4:	46c0      	nop			@ (mov r8, r8)

  for (int i = 0; i < 1000; i++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	e009      	b.n	8006bc0 <main+0xe8>
  {
	  HAL_Delay (1);
 8006bac:	2001      	movs	r0, #1
 8006bae:	f007 f933 	bl	800de18 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8006bb2:	4baa      	ldr	r3, [pc, #680]	@ (8006e5c <main+0x384>)
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f00b ff3f 	bl	8012a38 <HAL_IWDG_Refresh>
  for (int i = 0; i < 1000; i++)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	607b      	str	r3, [r7, #4]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	23fa      	movs	r3, #250	@ 0xfa
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	dbf0      	blt.n	8006bac <main+0xd4>


  while (1)
  {

testTimmingProcess:
 8006bca:	46c0      	nop			@ (mov r8, r8)
	ProcesosC++;
 8006bcc:	4b99      	ldr	r3, [pc, #612]	@ (8006e34 <main+0x35c>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	4b97      	ldr	r3, [pc, #604]	@ (8006e34 <main+0x35c>)
 8006bd6:	701a      	strb	r2, [r3, #0]
    while ( !(TIM6->SR & 0x0001) ){
 8006bd8:	e000      	b.n	8006bdc <main+0x104>
		// Espera hasta que se cumpla el overflow del timer 6
		// 125 us
		asm ("nop");
 8006bda:	46c0      	nop			@ (mov r8, r8)
    while ( !(TIM6->SR & 0x0001) ){
 8006bdc:	4ba0      	ldr	r3, [pc, #640]	@ (8006e60 <main+0x388>)
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2201      	movs	r2, #1
 8006be2:	4013      	ands	r3, r2
 8006be4:	d0f9      	beq.n	8006bda <main+0x102>
	}
	// Borra bandera de overflow
	TIM6->SR &= ~TIM_SR_UIF;
 8006be6:	4b9e      	ldr	r3, [pc, #632]	@ (8006e60 <main+0x388>)
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	4b9d      	ldr	r3, [pc, #628]	@ (8006e60 <main+0x388>)
 8006bec:	2101      	movs	r1, #1
 8006bee:	438a      	bics	r2, r1
 8006bf0:	611a      	str	r2, [r3, #16]
	HAL_IWDG_Refresh( &hiwdg );
 8006bf2:	4b9a      	ldr	r3, [pc, #616]	@ (8006e5c <main+0x384>)
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f00b ff1f 	bl	8012a38 <HAL_IWDG_Refresh>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);	 //28-May-2024: Salida IO6 toogle test
 8006bfa:	4b93      	ldr	r3, [pc, #588]	@ (8006e48 <main+0x370>)
 8006bfc:	2104      	movs	r1, #4
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f009 fd64 	bl	80106cc <HAL_GPIO_TogglePin>
  	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 8006c04:	4b97      	ldr	r3, [pc, #604]	@ (8006e64 <main+0x38c>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	4b95      	ldr	r3, [pc, #596]	@ (8006e64 <main+0x38c>)
 8006c0e:	701a      	strb	r2, [r3, #0]
      asm ("nop");
 8006c10:	46c0      	nop			@ (mov r8, r8)


    main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 8006c12:	f7fb fe83 	bl	800291c <main10>

    //muestreo();

  	if(StateSleep == 0x55){
 8006c16:	4b94      	ldr	r3, [pc, #592]	@ (8006e68 <main+0x390>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b55      	cmp	r3, #85	@ 0x55
 8006c1c:	d101      	bne.n	8006c22 <main+0x14a>
  		// C: Pendiente a Adaptar
  		//;Restablece el Tiempo RTC
  		asm ("nop");
 8006c1e:	46c0      	nop			@ (mov r8, r8)
  		asm ("nop");
 8006c20:	46c0      	nop			@ (mov r8, r8)
  	}

  	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 8006c22:	f7fb ff07 	bl	8002a34 <retardoDeActuadores>

  	asm ("nop");
 8006c26:	46c0      	nop			@ (mov r8, r8)
  	// procesa la base de tiempo para C y modbus
  	check_Tick_1ms();
 8006c28:	f7ff fefe 	bl	8006a28 <check_Tick_1ms>

  	/*
  	Falta parte por insertar
  	 */
  	if(timeRstBLE){
 8006c2c:	4b80      	ldr	r3, [pc, #512]	@ (8006e30 <main+0x358>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <main+0x170>
  		/* USART Disable */
  		// USART_Cmd(USART2, DISABLE);
        HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 8006c34:	4b82      	ldr	r3, [pc, #520]	@ (8006e40 <main+0x368>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	2140      	movs	r1, #64	@ 0x40
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f009 fd29 	bl	8010692 <HAL_GPIO_WritePin>
        //GPIOC->BSRR = GPIO_BSRR_BS_6;
  		BluetoothState = 1;
 8006c40:	4b80      	ldr	r3, [pc, #512]	@ (8006e44 <main+0x36c>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e018      	b.n	8006c7a <main+0x1a2>
  	}
  	else{
  		/* USART Enable */
  		// USART_Cmd(USART2, ENABLE);
  		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 8006c48:	4b7d      	ldr	r3, [pc, #500]	@ (8006e40 <main+0x368>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2140      	movs	r1, #64	@ 0x40
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f009 fd1f 	bl	8010692 <HAL_GPIO_WritePin>
  		//GPIOC->BSRR = GPIO_BSRR_BR_6;

  		// State Machine Bluetooth    10-MAR-2022
  		switch(BluetoothState){
 8006c54:	4b7b      	ldr	r3, [pc, #492]	@ (8006e44 <main+0x36c>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d00b      	beq.n	8006c74 <main+0x19c>
 8006c5c:	dc0d      	bgt.n	8006c7a <main+0x1a2>
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d002      	beq.n	8006c68 <main+0x190>
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d003      	beq.n	8006c6e <main+0x196>
 8006c66:	e008      	b.n	8006c7a <main+0x1a2>
  			case 1:
  				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 8006c68:	f7fb fa44 	bl	80020f4 <SetUpBluetooth_Ble>
 8006c6c:	e005      	b.n	8006c7a <main+0x1a2>
  			case 2:
  				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 8006c6e:	f7fb fb43 	bl	80022f8 <GetParamBluetooth_Ble>
 8006c72:	e002      	b.n	8006c7a <main+0x1a2>
  			case 3:
  				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 8006c74:	f7fb fb9e 	bl	80023b4 <TransmitReceive_Ble>
 8006c78:	46c0      	nop			@ (mov r8, r8)
  		}
  	}

  	Read_Inpunts_ble();				// 14-Mar-2022
 8006c7a:	f7fb fdc5 	bl	8002808 <Read_Inpunts_ble>

  	if (device_conected){
 8006c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e6c <main+0x394>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d014      	beq.n	8006cb0 <main+0x1d8>
  		//ContadorDebugger++;
  		// #pragma asm
  		if(!flagsTX [7])
 8006c86:	4b7a      	ldr	r3, [pc, #488]	@ (8006e70 <main+0x398>)
 8006c88:	79db      	ldrb	r3, [r3, #7]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4053      	eors	r3, r2
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <main+0x1c2>
  			timeOutRst = 241;				// carga time out de resetcon 60 segundos
 8006c94:	4b77      	ldr	r3, [pc, #476]	@ (8006e74 <main+0x39c>)
 8006c96:	22f1      	movs	r2, #241	@ 0xf1
 8006c98:	701a      	strb	r2, [r3, #0]
  		flagsTX [7] = 1;							// levanta bandera de dispositivo conectado
 8006c9a:	4b75      	ldr	r3, [pc, #468]	@ (8006e70 <main+0x398>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	71da      	strb	r2, [r3, #7]

  		if(flagsLogger2 [2])
 8006ca0:	4b75      	ldr	r3, [pc, #468]	@ (8006e78 <main+0x3a0>)
 8006ca2:	789b      	ldrb	r3, [r3, #2]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d037      	beq.n	8006d18 <main+0x240>
  			flagsTX [7] = 0;
 8006ca8:	4b71      	ldr	r3, [pc, #452]	@ (8006e70 <main+0x398>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	71da      	strb	r2, [r3, #7]
 8006cae:	e033      	b.n	8006d18 <main+0x240>
  	}
  	else{
  		if(flagsTX [7]){				// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
 8006cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e70 <main+0x398>)
 8006cb2:	79db      	ldrb	r3, [r3, #7]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02c      	beq.n	8006d12 <main+0x23a>
  			keyTx = 0;// en caso de desconexion cancela toda transmisión
 8006cb8:	4b70      	ldr	r3, [pc, #448]	@ (8006e7c <main+0x3a4>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
  			//flagsTX = 0;
  			for(uint8_t i = 0; i < 8 ; i++ )
 8006cbe:	1cfb      	adds	r3, r7, #3
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e009      	b.n	8006cda <main+0x202>
  				flagsTX [i] = 0;
 8006cc6:	1cfb      	adds	r3, r7, #3
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	4a69      	ldr	r2, [pc, #420]	@ (8006e70 <main+0x398>)
 8006ccc:	2100      	movs	r1, #0
 8006cce:	54d1      	strb	r1, [r2, r3]
  			for(uint8_t i = 0; i < 8 ; i++ )
 8006cd0:	1cfb      	adds	r3, r7, #3
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	1cfb      	adds	r3, r7, #3
 8006cd6:	3201      	adds	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	1cfb      	adds	r3, r7, #3
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	d9f1      	bls.n	8006cc6 <main+0x1ee>
  			// flagsRxFirm = 0;
  			for(uint8_t i = 0; i < 8 ; i++ )
 8006ce2:	1cbb      	adds	r3, r7, #2
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e009      	b.n	8006cfe <main+0x226>
  				flagsRxFirm [i] = 0;
 8006cea:	1cbb      	adds	r3, r7, #2
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	4a64      	ldr	r2, [pc, #400]	@ (8006e80 <main+0x3a8>)
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	54d1      	strb	r1, [r2, r3]
  			for(uint8_t i = 0; i < 8 ; i++ )
 8006cf4:	1cbb      	adds	r3, r7, #2
 8006cf6:	781a      	ldrb	r2, [r3, #0]
 8006cf8:	1cbb      	adds	r3, r7, #2
 8006cfa:	3201      	adds	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	1cbb      	adds	r3, r7, #2
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b07      	cmp	r3, #7
 8006d04:	d9f1      	bls.n	8006cea <main+0x212>
  			flagsLogger [4] = 0;				// permite loggeo de eventos
 8006d06:	4b5f      	ldr	r3, [pc, #380]	@ (8006e84 <main+0x3ac>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	711a      	strb	r2, [r3, #4]
  			flagsLogger [5] = 0;				// permite loggeo de datos
 8006d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8006e84 <main+0x3ac>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	715a      	strb	r2, [r3, #5]
  		}
  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
 8006d12:	4b57      	ldr	r3, [pc, #348]	@ (8006e70 <main+0x398>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	71da      	strb	r2, [r3, #7]
  	}

  	if(tick_1s){
 8006d18:	4b5b      	ldr	r3, [pc, #364]	@ (8006e88 <main+0x3b0>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d006      	beq.n	8006d2e <main+0x256>
  	  asm ("nop");
 8006d20:	46c0      	nop			@ (mov r8, r8)
  	  Count_Test++;
 8006d22:	4b5a      	ldr	r3, [pc, #360]	@ (8006e8c <main+0x3b4>)
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	4b58      	ldr	r3, [pc, #352]	@ (8006e8c <main+0x3b4>)
 8006d2c:	801a      	strh	r2, [r3, #0]
  	    //  *** Prueba de activacion de rele compresor
  	    //portX[rel_co] =  portX[rel_co] 1;
  	    //  *** Prueba de activacion de rele compresor
  	}

  	if(tick_1ms == 1){
 8006d2e:	4b58      	ldr	r3, [pc, #352]	@ (8006e90 <main+0x3b8>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <main+0x26a>
  		// tiempo para rutina buzzer
  		// #pragma asm
  		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 8006d36:	4b57      	ldr	r3, [pc, #348]	@ (8006e94 <main+0x3bc>)
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	4b55      	ldr	r3, [pc, #340]	@ (8006e94 <main+0x3bc>)
 8006d40:	801a      	strh	r2, [r3, #0]
  		// prescalaI2c++;
  	}

  		  		HAL_RTC_GetTime (&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 8006d42:	4955      	ldr	r1, [pc, #340]	@ (8006e98 <main+0x3c0>)
 8006d44:	4b41      	ldr	r3, [pc, #260]	@ (8006e4c <main+0x374>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	0018      	movs	r0, r3
 8006d4a:	f00d fec7 	bl	8014adc <HAL_RTC_GetTime>
  		  		HAL_RTC_GetDate (&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 8006d4e:	4953      	ldr	r1, [pc, #332]	@ (8006e9c <main+0x3c4>)
 8006d50:	4b3e      	ldr	r3, [pc, #248]	@ (8006e4c <main+0x374>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	0018      	movs	r0, r3
 8006d56:	f00d ffcb 	bl	8014cf0 <HAL_RTC_GetDate>
  		  		timeBCD_year = hRtcDate.Year;
 8006d5a:	4b50      	ldr	r3, [pc, #320]	@ (8006e9c <main+0x3c4>)
 8006d5c:	78da      	ldrb	r2, [r3, #3]
 8006d5e:	4b50      	ldr	r3, [pc, #320]	@ (8006ea0 <main+0x3c8>)
 8006d60:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_month = hRtcDate.Month;
 8006d62:	4b4e      	ldr	r3, [pc, #312]	@ (8006e9c <main+0x3c4>)
 8006d64:	785a      	ldrb	r2, [r3, #1]
 8006d66:	4b4f      	ldr	r3, [pc, #316]	@ (8006ea4 <main+0x3cc>)
 8006d68:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_day = hRtcDate.Date;
 8006d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8006e9c <main+0x3c4>)
 8006d6c:	789a      	ldrb	r2, [r3, #2]
 8006d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8006ea8 <main+0x3d0>)
 8006d70:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_hour = hRtcTime.Hours;
 8006d72:	4b49      	ldr	r3, [pc, #292]	@ (8006e98 <main+0x3c0>)
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	4b4d      	ldr	r3, [pc, #308]	@ (8006eac <main+0x3d4>)
 8006d78:	701a      	strb	r2, [r3, #0]
    	  		timeBCD_min = hRtcTime.Minutes;
 8006d7a:	4b47      	ldr	r3, [pc, #284]	@ (8006e98 <main+0x3c0>)
 8006d7c:	785a      	ldrb	r2, [r3, #1]
 8006d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8006eb0 <main+0x3d8>)
 8006d80:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_sec = hRtcTime.Seconds;
 8006d82:	4b45      	ldr	r3, [pc, #276]	@ (8006e98 <main+0x3c0>)
 8006d84:	789a      	ldrb	r2, [r3, #2]
 8006d86:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb4 <main+0x3dc>)
 8006d88:	701a      	strb	r2, [r3, #0]


  		  		timeBCD_to_UNIX();
 8006d8a:	f7ff f9b9 	bl	8006100 <timeBCD_to_UNIX>
  		  		//------------------------------------------------------------------------------------------
  		  		calculando_tiempo_UNIX ();
 8006d8e:	f7fb feef 	bl	8002b70 <calculando_tiempo_UNIX>
//------------------------------------------------------------------------------------------
  		  		if(!flagsTime[f_timeConfigRTC]){
 8006d92:	4b49      	ldr	r3, [pc, #292]	@ (8006eb8 <main+0x3e0>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2201      	movs	r2, #1
 8006d98:	4053      	eors	r3, r2
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d119      	bne.n	8006dd4 <main+0x2fc>
  		  			goto noActTime;
  		  		}

  		  		timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 8006da0:	4b46      	ldr	r3, [pc, #280]	@ (8006ebc <main+0x3e4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	4b45      	ldr	r3, [pc, #276]	@ (8006ec0 <main+0x3e8>)
 8006daa:	801a      	strh	r2, [r3, #0]
  		  		timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 8006dac:	4b43      	ldr	r3, [pc, #268]	@ (8006ebc <main+0x3e4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	4b44      	ldr	r3, [pc, #272]	@ (8006ec4 <main+0x3ec>)
 8006db4:	801a      	strh	r2, [r3, #0]

  		  		if(timeBCD_sec_ANT == timeBCD_sec){
 8006db6:	4b44      	ldr	r3, [pc, #272]	@ (8006ec8 <main+0x3f0>)
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb4 <main+0x3dc>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d00a      	beq.n	8006dd8 <main+0x300>
  		  			goto no_inc_cnt_sec;
  		  		}
  		  		timeBCD_sec_ANT = timeBCD_sec;
 8006dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8006eb4 <main+0x3dc>)
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	4b40      	ldr	r3, [pc, #256]	@ (8006ec8 <main+0x3f0>)
 8006dc8:	701a      	strb	r2, [r3, #0]
  		  		decword(&cntLogger_H);
 8006dca:	4b40      	ldr	r3, [pc, #256]	@ (8006ecc <main+0x3f4>)
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f7fd fccc 	bl	800476a <decword>
 8006dd2:	e002      	b.n	8006dda <main+0x302>
  		  			goto noActTime;
 8006dd4:	46c0      	nop			@ (mov r8, r8)
 8006dd6:	e000      	b.n	8006dda <main+0x302>
  		  			goto no_inc_cnt_sec;
 8006dd8:	46c0      	nop			@ (mov r8, r8)
  		  no_inc_cnt_sec:
  		  noActTime:
		  asm ("nop");
 8006dda:	46c0      	nop			@ (mov r8, r8)

  	  	switch(ProcesosC)
 8006ddc:	4b15      	ldr	r3, [pc, #84]	@ (8006e34 <main+0x35c>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b07      	cmp	r3, #7
 8006de2:	d900      	bls.n	8006de6 <main+0x30e>
 8006de4:	e096      	b.n	8006f14 <main+0x43c>
 8006de6:	009a      	lsls	r2, r3, #2
 8006de8:	4b39      	ldr	r3, [pc, #228]	@ (8006ed0 <main+0x3f8>)
 8006dea:	18d3      	adds	r3, r2, r3
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	469f      	mov	pc, r3
  	  	{
  	  		case 0:
  	  			comunicacion();
 8006df0:	f7fd fe70 	bl	8004ad4 <comunicacion>
  	  			break;		// ASM: Pendiente a traducir
 8006df4:	e092      	b.n	8006f1c <main+0x444>
  	  		case 1:
  	  			voltmetro();
 8006df6:	f006 fd81 	bl	800d8fc <voltmetro>
  	  			break;		// ASM: Pendiente a traducir
 8006dfa:	e08f      	b.n	8006f1c <main+0x444>
  	  		case 2:
  	  			temper();
 8006dfc:	f002 fb32 	bl	8009464 <temper>
  	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 8006e00:	e08c      	b.n	8006f1c <main+0x444>
  	  		case 3:
  	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
  	  //				 asm ("nop");
  	  //			}
  	  			if(USART4->ISR & USART_ISR_TC){
 8006e02:	4b34      	ldr	r3, [pc, #208]	@ (8006ed4 <main+0x3fc>)
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	2240      	movs	r2, #64	@ 0x40
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d005      	beq.n	8006e18 <main+0x340>
  	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 8006e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <main+0x368>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2104      	movs	r1, #4
 8006e12:	0018      	movs	r0, r3
 8006e14:	f009 fc3d 	bl	8010692 <HAL_GPIO_WritePin>
  	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
  	  			}
  	  			ModbusMap ();
 8006e18:	f7f9 fd72 	bl	8000900 <ModbusMap>
  	  			noctar ();
 8006e1c:	f000 fda2 	bl	8007964 <noctar>
  	  			break;		// ASM: Pendiente a traducir
 8006e20:	e07c      	b.n	8006f1c <main+0x444>
  	  		case 4:
  	  			refrigera();
 8006e22:	f000 fda5 	bl	8007970 <refrigera>
  	  			break;		// ASM: Pendiente a traducir
 8006e26:	e079      	b.n	8006f1c <main+0x444>
  	  		case 5:
  	  			display();
 8006e28:	f7fe fc0e 	bl	8005648 <display>
  	  			break;		// ASM: Pendiente a traducir
 8006e2c:	e076      	b.n	8006f1c <main+0x444>
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	20000e24 	.word	0x20000e24
 8006e34:	2000085c 	.word	0x2000085c
 8006e38:	0803f000 	.word	0x0803f000
 8006e3c:	20000845 	.word	0x20000845
 8006e40:	50000800 	.word	0x50000800
 8006e44:	20000050 	.word	0x20000050
 8006e48:	50000400 	.word	0x50000400
 8006e4c:	200004cc 	.word	0x200004cc
 8006e50:	20001020 	.word	0x20001020
 8006e54:	0001fbcf 	.word	0x0001fbcf
 8006e58:	200004fc 	.word	0x200004fc
 8006e5c:	200004b8 	.word	0x200004b8
 8006e60:	40001000 	.word	0x40001000
 8006e64:	20000331 	.word	0x20000331
 8006e68:	2000085d 	.word	0x2000085d
 8006e6c:	20000844 	.word	0x20000844
 8006e70:	20000d58 	.word	0x20000d58
 8006e74:	20000e21 	.word	0x20000e21
 8006e78:	20000eb8 	.word	0x20000eb8
 8006e7c:	20000d55 	.word	0x20000d55
 8006e80:	20000e18 	.word	0x20000e18
 8006e84:	20000d40 	.word	0x20000d40
 8006e88:	20000843 	.word	0x20000843
 8006e8c:	20000a6e 	.word	0x20000a6e
 8006e90:	20000840 	.word	0x20000840
 8006e94:	20000ec0 	.word	0x20000ec0
 8006e98:	20000fb4 	.word	0x20000fb4
 8006e9c:	20000fc8 	.word	0x20000fc8
 8006ea0:	20000fac 	.word	0x20000fac
 8006ea4:	20000fad 	.word	0x20000fad
 8006ea8:	20000fae 	.word	0x20000fae
 8006eac:	20000faf 	.word	0x20000faf
 8006eb0:	20000fb0 	.word	0x20000fb0
 8006eb4:	20000fb1 	.word	0x20000fb1
 8006eb8:	20000fa4 	.word	0x20000fa4
 8006ebc:	20000fd4 	.word	0x20000fd4
 8006ec0:	20000cec 	.word	0x20000cec
 8006ec4:	20000cee 	.word	0x20000cee
 8006ec8:	20001025 	.word	0x20001025
 8006ecc:	20000cd4 	.word	0x20000cd4
 8006ed0:	08017dfc 	.word	0x08017dfc
 8006ed4:	40004c00 	.word	0x40004c00
  	  		case 6:
  	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 8006ed8:	f003 fa02 	bl	800a2e0 <tiempo>
  	  			if(bandera_act_fw_j == 0)    //Parche
 8006edc:	4b16      	ldr	r3, [pc, #88]	@ (8006f38 <main+0x460>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4053      	eors	r3, r2
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <main+0x416>
  	  			{
  	  				logger ();				// ASM: Pendiente a traducir
 8006eea:	f7ff f97d 	bl	80061e8 <logger>
  	  			}
 	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 8006eee:	f003 fd3b 	bl	800a968 <tx_control>
//
  	  			if ( keyWrFirm == 0xAA){
 8006ef2:	4b12      	ldr	r3, [pc, #72]	@ (8006f3c <main+0x464>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2baa      	cmp	r3, #170	@ 0xaa
 8006ef8:	d10f      	bne.n	8006f1a <main+0x442>
  	  			    asm ("nop");
 8006efa:	46c0      	nop			@ (mov r8, r8)
  	  				if	( keyTx == 00 )	{
 8006efc:	4b10      	ldr	r3, [pc, #64]	@ (8006f40 <main+0x468>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <main+0x442>
  	  				    asm ("nop");
 8006f04:	46c0      	nop			@ (mov r8, r8)
// 	  					bootloader();
  	  				}
  	  			}
  	  			break;		// ASM: Pendiente a traducir
 8006f06:	e008      	b.n	8006f1a <main+0x442>
  	  		case 7:
  	  			watch();
 8006f08:	f006 fe40 	bl	800db8c <watch>
  	  			ProcesosC = 255;
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f44 <main+0x46c>)
 8006f0e:	22ff      	movs	r2, #255	@ 0xff
 8006f10:	701a      	strb	r2, [r3, #0]
  	  			break;		// ASM: Pendiente a traducir
 8006f12:	e003      	b.n	8006f1c <main+0x444>
  	  		default:
  	  		    asm ("nop");
 8006f14:	46c0      	nop			@ (mov r8, r8)
  	  			for (;;)      ;// Watch dog Reset
 8006f16:	46c0      	nop			@ (mov r8, r8)
 8006f18:	e7fd      	b.n	8006f16 <main+0x43e>
  	  			break;		// ASM: Pendiente a traducir
 8006f1a:	46c0      	nop			@ (mov r8, r8)
  	  		break;

  	  	}

	  	// clear time flags
	  	tick_1ms = 0;						// flag base de tiempo 1ms
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <main+0x470>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
	  	tick_10ms = 0;					// flag base de tiempo 10ms
 8006f22:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <main+0x474>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
	  	tick_100ms = 0;					// flag base de tiempo 100ms
 8006f28:	4b09      	ldr	r3, [pc, #36]	@ (8006f50 <main+0x478>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
	  	tick_1s = 0;						// flag base de tiempo 1s
 8006f2e:	4b09      	ldr	r3, [pc, #36]	@ (8006f54 <main+0x47c>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
  {
 8006f34:	e64a      	b.n	8006bcc <main+0xf4>
 8006f36:	46c0      	nop			@ (mov r8, r8)
 8006f38:	20001024 	.word	0x20001024
 8006f3c:	20000e20 	.word	0x20000e20
 8006f40:	20000d55 	.word	0x20000d55
 8006f44:	2000085c 	.word	0x2000085c
 8006f48:	20000840 	.word	0x20000840
 8006f4c:	20000841 	.word	0x20000841
 8006f50:	20000842 	.word	0x20000842
 8006f54:	20000843 	.word	0x20000843

08006f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b099      	sub	sp, #100	@ 0x64
 8006f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f5e:	2414      	movs	r4, #20
 8006f60:	193b      	adds	r3, r7, r4
 8006f62:	0018      	movs	r0, r3
 8006f64:	234c      	movs	r3, #76	@ 0x4c
 8006f66:	001a      	movs	r2, r3
 8006f68:	2100      	movs	r1, #0
 8006f6a:	f010 fe1f 	bl	8017bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f6e:	1d3b      	adds	r3, r7, #4
 8006f70:	0018      	movs	r0, r3
 8006f72:	2310      	movs	r3, #16
 8006f74:	001a      	movs	r2, r3
 8006f76:	2100      	movs	r1, #0
 8006f78:	f010 fe18 	bl	8017bac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f7c:	2380      	movs	r3, #128	@ 0x80
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	0018      	movs	r0, r3
 8006f82:	f00b fd69 	bl	8012a58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8006f86:	0021      	movs	r1, r4
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	2218      	movs	r2, #24
 8006f8c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006f8e:	187b      	adds	r3, r7, r1
 8006f90:	2201      	movs	r2, #1
 8006f92:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	2201      	movs	r2, #1
 8006f98:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006f9a:	187b      	adds	r3, r7, r1
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8006fa0:	187b      	adds	r3, r7, r1
 8006fa2:	2280      	movs	r2, #128	@ 0x80
 8006fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006fa6:	187b      	adds	r3, r7, r1
 8006fa8:	2200      	movs	r2, #0
 8006faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006fac:	187b      	adds	r3, r7, r1
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f00b fdbe 	bl	8012b30 <HAL_RCC_OscConfig>
 8006fb4:	1e03      	subs	r3, r0, #0
 8006fb6:	d001      	beq.n	8006fbc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8006fb8:	f000 fcce 	bl	8007958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006fbc:	1d3b      	adds	r3, r7, #4
 8006fbe:	2207      	movs	r2, #7
 8006fc0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006fce:	1d3b      	adds	r3, r7, #4
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006fd4:	1d3b      	adds	r3, r7, #4
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f00c f9d3 	bl	8013384 <HAL_RCC_ClockConfig>
 8006fde:	1e03      	subs	r3, r0, #0
 8006fe0:	d001      	beq.n	8006fe6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006fe2:	f000 fcb9 	bl	8007958 <Error_Handler>
  }
}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	b019      	add	sp, #100	@ 0x64
 8006fec:	bd90      	pop	{r4, r7, pc}
	...

08006ff0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	@ 0x28
 8006ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	  /* Deshabilita watch dogs */
//	  ADC1->TR = 0xFFF0000;
	  ADC1 -> AWD1TR = 0xFFF0000;
 8006ff6:	4b95      	ldr	r3, [pc, #596]	@ (800724c <MX_ADC1_Init+0x25c>)
 8006ff8:	4a95      	ldr	r2, [pc, #596]	@ (8007250 <MX_ADC1_Init+0x260>)
 8006ffa:	621a      	str	r2, [r3, #32]
      ADC1 -> AWD2TR = 0xFFF0000;
 8006ffc:	4b93      	ldr	r3, [pc, #588]	@ (800724c <MX_ADC1_Init+0x25c>)
 8006ffe:	4a94      	ldr	r2, [pc, #592]	@ (8007250 <MX_ADC1_Init+0x260>)
 8007000:	625a      	str	r2, [r3, #36]	@ 0x24

	  /* Habilitar el reloj para ADC1 */
	  RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 8007002:	4b94      	ldr	r3, [pc, #592]	@ (8007254 <MX_ADC1_Init+0x264>)
 8007004:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007006:	4b93      	ldr	r3, [pc, #588]	@ (8007254 <MX_ADC1_Init+0x264>)
 8007008:	2180      	movs	r1, #128	@ 0x80
 800700a:	0349      	lsls	r1, r1, #13
 800700c:	430a      	orrs	r2, r1
 800700e:	661a      	str	r2, [r3, #96]	@ 0x60
//	  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	  /* Habilitar el reloj para GPIOC */
	  RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8007010:	4b90      	ldr	r3, [pc, #576]	@ (8007254 <MX_ADC1_Init+0x264>)
 8007012:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007014:	4b8f      	ldr	r3, [pc, #572]	@ (8007254 <MX_ADC1_Init+0x264>)
 8007016:	2104      	movs	r1, #4
 8007018:	430a      	orrs	r2, r1
 800701a:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOA */
	  RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 800701c:	4b8d      	ldr	r3, [pc, #564]	@ (8007254 <MX_ADC1_Init+0x264>)
 800701e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007020:	4b8c      	ldr	r3, [pc, #560]	@ (8007254 <MX_ADC1_Init+0x264>)
 8007022:	2101      	movs	r1, #1
 8007024:	430a      	orrs	r2, r1
 8007026:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOB */
	  RCC->IOPENR |= RCC_IOPENR_GPIOEEN;
 8007028:	4b8a      	ldr	r3, [pc, #552]	@ (8007254 <MX_ADC1_Init+0x264>)
 800702a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800702c:	4b89      	ldr	r3, [pc, #548]	@ (8007254 <MX_ADC1_Init+0x264>)
 800702e:	2110      	movs	r1, #16
 8007030:	430a      	orrs	r2, r1
 8007032:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Configurar PC0 y PC1 en modo analógico */
	  GPIOC->MODER |= (GPIO_MODER_MODE0 | GPIO_MODER_MODE1);  // 11: Modo analógico
 8007034:	4b88      	ldr	r3, [pc, #544]	@ (8007258 <MX_ADC1_Init+0x268>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b87      	ldr	r3, [pc, #540]	@ (8007258 <MX_ADC1_Init+0x268>)
 800703a:	210f      	movs	r1, #15
 800703c:	430a      	orrs	r2, r1
 800703e:	601a      	str	r2, [r3, #0]
	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1); // 00: Sin pull-up/pull-down
 8007040:	4b85      	ldr	r3, [pc, #532]	@ (8007258 <MX_ADC1_Init+0x268>)
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	4b84      	ldr	r3, [pc, #528]	@ (8007258 <MX_ADC1_Init+0x268>)
 8007046:	210f      	movs	r1, #15
 8007048:	438a      	bics	r2, r1
 800704a:	60da      	str	r2, [r3, #12]

	  /* Configurar PA5, PA6 y PA7 en modo analógico */
	  GPIOA->MODER |= (GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 800704c:	23a0      	movs	r3, #160	@ 0xa0
 800704e:	05db      	lsls	r3, r3, #23
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	23a0      	movs	r3, #160	@ 0xa0
 8007054:	05db      	lsls	r3, r3, #23
 8007056:	21fc      	movs	r1, #252	@ 0xfc
 8007058:	0209      	lsls	r1, r1, #8
 800705a:	430a      	orrs	r2, r1
 800705c:	601a      	str	r2, [r3, #0]
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 800705e:	23a0      	movs	r3, #160	@ 0xa0
 8007060:	05db      	lsls	r3, r3, #23
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	23a0      	movs	r3, #160	@ 0xa0
 8007066:	05db      	lsls	r3, r3, #23
 8007068:	497c      	ldr	r1, [pc, #496]	@ (800725c <MX_ADC1_Init+0x26c>)
 800706a:	400a      	ands	r2, r1
 800706c:	60da      	str	r2, [r3, #12]

	  /* Configurar PB1 en modo analógico */
	  GPIOB->MODER |= GPIO_MODER_MODE1;
 800706e:	4b7c      	ldr	r3, [pc, #496]	@ (8007260 <MX_ADC1_Init+0x270>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b7b      	ldr	r3, [pc, #492]	@ (8007260 <MX_ADC1_Init+0x270>)
 8007074:	210c      	movs	r1, #12
 8007076:	430a      	orrs	r2, r1
 8007078:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD1;
 800707a:	4b79      	ldr	r3, [pc, #484]	@ (8007260 <MX_ADC1_Init+0x270>)
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	4b78      	ldr	r3, [pc, #480]	@ (8007260 <MX_ADC1_Init+0x270>)
 8007080:	210c      	movs	r1, #12
 8007082:	438a      	bics	r2, r1
 8007084:	60da      	str	r2, [r3, #12]

	  ADC1->CFGR2 = 0xC0000000;
 8007086:	4b71      	ldr	r3, [pc, #452]	@ (800724c <MX_ADC1_Init+0x25c>)
 8007088:	22c0      	movs	r2, #192	@ 0xc0
 800708a:	0612      	lsls	r2, r2, #24
 800708c:	611a      	str	r2, [r3, #16]

	  ADC1->CFGR1 = 0x8;
 800708e:	4b6f      	ldr	r3, [pc, #444]	@ (800724c <MX_ADC1_Init+0x25c>)
 8007090:	2208      	movs	r2, #8
 8007092:	60da      	str	r2, [r3, #12]

	  ADC1->CR = 0x10000000;
 8007094:	4b6d      	ldr	r3, [pc, #436]	@ (800724c <MX_ADC1_Init+0x25c>)
 8007096:	2280      	movs	r2, #128	@ 0x80
 8007098:	0552      	lsls	r2, r2, #21
 800709a:	609a      	str	r2, [r3, #8]

	  ADC1->CHSELR = ADC_CHSELR_CHSEL9 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL14 |
 800709c:	4b6b      	ldr	r3, [pc, #428]	@ (800724c <MX_ADC1_Init+0x25c>)
 800709e:	4a71      	ldr	r2, [pc, #452]	@ (8007264 <MX_ADC1_Init+0x274>)
 80070a0:	629a      	str	r2, [r3, #40]	@ 0x28
	                 ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1;

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070a2:	231c      	movs	r3, #28
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	0018      	movs	r0, r3
 80070a8:	230c      	movs	r3, #12
 80070aa:	001a      	movs	r2, r3
 80070ac:	2100      	movs	r1, #0
 80070ae:	f010 fd7d 	bl	8017bac <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80070b2:	1d3b      	adds	r3, r7, #4
 80070b4:	0018      	movs	r0, r3
 80070b6:	2318      	movs	r3, #24
 80070b8:	001a      	movs	r2, r3
 80070ba:	2100      	movs	r1, #0
 80070bc:	f010 fd76 	bl	8017bac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80070c0:	4b69      	ldr	r3, [pc, #420]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070c2:	4a62      	ldr	r2, [pc, #392]	@ (800724c <MX_ADC1_Init+0x25c>)
 80070c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80070c6:	4b68      	ldr	r3, [pc, #416]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070c8:	22c0      	movs	r2, #192	@ 0xc0
 80070ca:	0612      	lsls	r2, r2, #24
 80070cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80070ce:	4b66      	ldr	r3, [pc, #408]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070d0:	2208      	movs	r2, #8
 80070d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070d4:	4b64      	ldr	r3, [pc, #400]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80070da:	4b63      	ldr	r3, [pc, #396]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070dc:	2280      	movs	r2, #128	@ 0x80
 80070de:	0612      	lsls	r2, r2, #24
 80070e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070e2:	4b61      	ldr	r3, [pc, #388]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070e4:	2204      	movs	r2, #4
 80070e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80070e8:	4b5f      	ldr	r3, [pc, #380]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80070ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80070f4:	4b5c      	ldr	r3, [pc, #368]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80070fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007268 <MX_ADC1_Init+0x278>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007100:	4b59      	ldr	r3, [pc, #356]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007102:	2220      	movs	r2, #32
 8007104:	2100      	movs	r1, #0
 8007106:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007108:	4b57      	ldr	r3, [pc, #348]	@ (8007268 <MX_ADC1_Init+0x278>)
 800710a:	2200      	movs	r2, #0
 800710c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800710e:	4b56      	ldr	r3, [pc, #344]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007110:	2200      	movs	r2, #0
 8007112:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007114:	4b54      	ldr	r3, [pc, #336]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007116:	222c      	movs	r2, #44	@ 0x2c
 8007118:	2100      	movs	r1, #0
 800711a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800711c:	4b52      	ldr	r3, [pc, #328]	@ (8007268 <MX_ADC1_Init+0x278>)
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8007122:	4b51      	ldr	r3, [pc, #324]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007124:	2200      	movs	r2, #0
 8007126:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8007128:	4b4f      	ldr	r3, [pc, #316]	@ (8007268 <MX_ADC1_Init+0x278>)
 800712a:	223c      	movs	r2, #60	@ 0x3c
 800712c:	2100      	movs	r1, #0
 800712e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8007130:	4b4d      	ldr	r3, [pc, #308]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007132:	2280      	movs	r2, #128	@ 0x80
 8007134:	0592      	lsls	r2, r2, #22
 8007136:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007138:	4b4b      	ldr	r3, [pc, #300]	@ (8007268 <MX_ADC1_Init+0x278>)
 800713a:	0018      	movs	r0, r3
 800713c:	f007 f896 	bl	800e26c <HAL_ADC_Init>
 8007140:	1e03      	subs	r3, r0, #0
 8007142:	d001      	beq.n	8007148 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8007144:	f000 fc08 	bl	8007958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007148:	211c      	movs	r1, #28
 800714a:	187b      	adds	r3, r7, r1
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007150:	187b      	adds	r3, r7, r1
 8007152:	2201      	movs	r2, #1
 8007154:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007156:	187a      	adds	r2, r7, r1
 8007158:	4b43      	ldr	r3, [pc, #268]	@ (8007268 <MX_ADC1_Init+0x278>)
 800715a:	0011      	movs	r1, r2
 800715c:	0018      	movs	r0, r3
 800715e:	f007 fa2d 	bl	800e5bc <HAL_ADC_ConfigChannel>
 8007162:	1e03      	subs	r3, r0, #0
 8007164:	d001      	beq.n	800716a <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8007166:	f000 fbf7 	bl	8007958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800716a:	211c      	movs	r1, #28
 800716c:	187b      	adds	r3, r7, r1
 800716e:	4a3f      	ldr	r2, [pc, #252]	@ (800726c <MX_ADC1_Init+0x27c>)
 8007170:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007172:	187a      	adds	r2, r7, r1
 8007174:	4b3c      	ldr	r3, [pc, #240]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007176:	0011      	movs	r1, r2
 8007178:	0018      	movs	r0, r3
 800717a:	f007 fa1f 	bl	800e5bc <HAL_ADC_ConfigChannel>
 800717e:	1e03      	subs	r3, r0, #0
 8007180:	d001      	beq.n	8007186 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8007182:	f000 fbe9 	bl	8007958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007186:	211c      	movs	r1, #28
 8007188:	187b      	adds	r3, r7, r1
 800718a:	4a39      	ldr	r2, [pc, #228]	@ (8007270 <MX_ADC1_Init+0x280>)
 800718c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800718e:	187a      	adds	r2, r7, r1
 8007190:	4b35      	ldr	r3, [pc, #212]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007192:	0011      	movs	r1, r2
 8007194:	0018      	movs	r0, r3
 8007196:	f007 fa11 	bl	800e5bc <HAL_ADC_ConfigChannel>
 800719a:	1e03      	subs	r3, r0, #0
 800719c:	d001      	beq.n	80071a2 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 800719e:	f000 fbdb 	bl	8007958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80071a2:	211c      	movs	r1, #28
 80071a4:	187b      	adds	r3, r7, r1
 80071a6:	4a33      	ldr	r2, [pc, #204]	@ (8007274 <MX_ADC1_Init+0x284>)
 80071a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071aa:	187a      	adds	r2, r7, r1
 80071ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007268 <MX_ADC1_Init+0x278>)
 80071ae:	0011      	movs	r1, r2
 80071b0:	0018      	movs	r0, r3
 80071b2:	f007 fa03 	bl	800e5bc <HAL_ADC_ConfigChannel>
 80071b6:	1e03      	subs	r3, r0, #0
 80071b8:	d001      	beq.n	80071be <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 80071ba:	f000 fbcd 	bl	8007958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80071be:	211c      	movs	r1, #28
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007278 <MX_ADC1_Init+0x288>)
 80071c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071c6:	187a      	adds	r2, r7, r1
 80071c8:	4b27      	ldr	r3, [pc, #156]	@ (8007268 <MX_ADC1_Init+0x278>)
 80071ca:	0011      	movs	r1, r2
 80071cc:	0018      	movs	r0, r3
 80071ce:	f007 f9f5 	bl	800e5bc <HAL_ADC_ConfigChannel>
 80071d2:	1e03      	subs	r3, r0, #0
 80071d4:	d001      	beq.n	80071da <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 80071d6:	f000 fbbf 	bl	8007958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80071da:	211c      	movs	r1, #28
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	4a27      	ldr	r2, [pc, #156]	@ (800727c <MX_ADC1_Init+0x28c>)
 80071e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071e2:	187a      	adds	r2, r7, r1
 80071e4:	4b20      	ldr	r3, [pc, #128]	@ (8007268 <MX_ADC1_Init+0x278>)
 80071e6:	0011      	movs	r1, r2
 80071e8:	0018      	movs	r0, r3
 80071ea:	f007 f9e7 	bl	800e5bc <HAL_ADC_ConfigChannel>
 80071ee:	1e03      	subs	r3, r0, #0
 80071f0:	d001      	beq.n	80071f6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80071f2:	f000 fbb1 	bl	8007958 <Error_Handler>
  }

  /** Configure the WatchDogs 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 80071f6:	1d3b      	adds	r3, r7, #4
 80071f8:	4a21      	ldr	r2, [pc, #132]	@ (8007280 <MX_ADC1_Init+0x290>)
 80071fa:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80071fc:	1d3b      	adds	r3, r7, #4
 80071fe:	22c0      	movs	r2, #192	@ 0xc0
 8007200:	0412      	lsls	r2, r2, #16
 8007202:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8007204:	1d3a      	adds	r2, r7, #4
 8007206:	4b18      	ldr	r3, [pc, #96]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007208:	0011      	movs	r1, r2
 800720a:	0018      	movs	r0, r3
 800720c:	f007 fb42 	bl	800e894 <HAL_ADC_AnalogWDGConfig>
 8007210:	1e03      	subs	r3, r0, #0
 8007212:	d001      	beq.n	8007218 <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8007214:	f000 fba0 	bl	8007958 <Error_Handler>
  }

  /** Configure the WatchDogs 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 8007218:	1d3b      	adds	r3, r7, #4
 800721a:	4a1a      	ldr	r2, [pc, #104]	@ (8007284 <MX_ADC1_Init+0x294>)
 800721c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800721e:	1d3a      	adds	r2, r7, #4
 8007220:	4b11      	ldr	r3, [pc, #68]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007222:	0011      	movs	r1, r2
 8007224:	0018      	movs	r0, r3
 8007226:	f007 fb35 	bl	800e894 <HAL_ADC_AnalogWDGConfig>
 800722a:	1e03      	subs	r3, r0, #0
 800722c:	d001      	beq.n	8007232 <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 800722e:	f000 fb93 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <MX_ADC1_Init+0x278>)
 8007236:	0018      	movs	r0, r3
 8007238:	f007 fe62 	bl	800ef00 <HAL_ADCEx_Calibration_Start>
 800723c:	1e03      	subs	r3, r0, #0
 800723e:	d1f9      	bne.n	8007234 <MX_ADC1_Init+0x244>

  /* USER CODE END ADC1_Init 2 */

}
 8007240:	46c0      	nop			@ (mov r8, r8)
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	46bd      	mov	sp, r7
 8007246:	b00a      	add	sp, #40	@ 0x28
 8007248:	bd80      	pop	{r7, pc}
 800724a:	46c0      	nop			@ (mov r8, r8)
 800724c:	40012400 	.word	0x40012400
 8007250:	0fff0000 	.word	0x0fff0000
 8007254:	40021000 	.word	0x40021000
 8007258:	50000800 	.word	0x50000800
 800725c:	ffff03ff 	.word	0xffff03ff
 8007260:	50000400 	.word	0x50000400
 8007264:	00044603 	.word	0x00044603
 8007268:	20000340 	.word	0x20000340
 800726c:	04000002 	.word	0x04000002
 8007270:	24000200 	.word	0x24000200
 8007274:	28000400 	.word	0x28000400
 8007278:	38004000 	.word	0x38004000
 800727c:	48040000 	.word	0x48040000
 8007280:	0017ffff 	.word	0x0017ffff
 8007284:	0027ffff 	.word	0x0027ffff

08007288 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b090      	sub	sp, #64	@ 0x40
 800728c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FLASH_Init 0 */

  /* USER CODE END FLASH_Init 0 */

  FLASH_OBProgramInitTypeDef pOBInit = {0};
 800728e:	1d3b      	adds	r3, r7, #4
 8007290:	0018      	movs	r0, r3
 8007292:	233c      	movs	r3, #60	@ 0x3c
 8007294:	001a      	movs	r2, r3
 8007296:	2100      	movs	r1, #0
 8007298:	f010 fc88 	bl	8017bac <memset>

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 800729c:	f008 fc9e 	bl	800fbdc <HAL_FLASH_Unlock>
 80072a0:	1e03      	subs	r3, r0, #0
 80072a2:	d001      	beq.n	80072a8 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80072a4:	f000 fb58 	bl	8007958 <Error_Handler>
  }

  /* Option Bytes settings */

  if (HAL_FLASH_OB_Unlock() != HAL_OK)
 80072a8:	f008 fcd8 	bl	800fc5c <HAL_FLASH_OB_Unlock>
 80072ac:	1e03      	subs	r3, r0, #0
 80072ae:	d001      	beq.n	80072b4 <MX_FLASH_Init+0x2c>
  {
    Error_Handler();
 80072b0:	f000 fb52 	bl	8007958 <Error_Handler>
  }
  pOBInit.OptionType = OPTIONBYTE_WRP;
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
  pOBInit.WRPArea = OB_WRPAREA_ZONE_A;
 80072ba:	1d3b      	adds	r3, r7, #4
 80072bc:	2201      	movs	r2, #1
 80072be:	605a      	str	r2, [r3, #4]
  pOBInit.WRPStartOffset = 0;
 80072c0:	1d3b      	adds	r3, r7, #4
 80072c2:	2200      	movs	r2, #0
 80072c4:	609a      	str	r2, [r3, #8]
  pOBInit.WRPEndOffset = 31;
 80072c6:	1d3b      	adds	r3, r7, #4
 80072c8:	221f      	movs	r2, #31
 80072ca:	60da      	str	r2, [r3, #12]
  if (HAL_FLASHEx_OBProgram(&pOBInit) != HAL_OK)
 80072cc:	1d3b      	adds	r3, r7, #4
 80072ce:	0018      	movs	r0, r3
 80072d0:	f008 fde6 	bl	800fea0 <HAL_FLASHEx_OBProgram>
 80072d4:	1e03      	subs	r3, r0, #0
 80072d6:	d001      	beq.n	80072dc <MX_FLASH_Init+0x54>
  {
    Error_Handler();
 80072d8:	f000 fb3e 	bl	8007958 <Error_Handler>
  }
  pOBInit.WRPArea = OB_WRPAREA_ZONE_B;
 80072dc:	1d3b      	adds	r3, r7, #4
 80072de:	2202      	movs	r2, #2
 80072e0:	605a      	str	r2, [r3, #4]
  if (HAL_FLASHEx_OBProgram(&pOBInit) != HAL_OK)
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	0018      	movs	r0, r3
 80072e6:	f008 fddb 	bl	800fea0 <HAL_FLASHEx_OBProgram>
 80072ea:	1e03      	subs	r3, r0, #0
 80072ec:	d001      	beq.n	80072f2 <MX_FLASH_Init+0x6a>
  {
    Error_Handler();
 80072ee:	f000 fb33 	bl	8007958 <Error_Handler>
  }
  if (HAL_FLASH_OB_Lock() != HAL_OK)
 80072f2:	f008 fcdb 	bl	800fcac <HAL_FLASH_OB_Lock>
 80072f6:	1e03      	subs	r3, r0, #0
 80072f8:	d001      	beq.n	80072fe <MX_FLASH_Init+0x76>
  {
    Error_Handler();
 80072fa:	f000 fb2d 	bl	8007958 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80072fe:	f008 fc91 	bl	800fc24 <HAL_FLASH_Lock>
 8007302:	1e03      	subs	r3, r0, #0
 8007304:	d001      	beq.n	800730a <MX_FLASH_Init+0x82>
  {
    Error_Handler();
 8007306:	f000 fb27 	bl	8007958 <Error_Handler>
  /* USER CODE BEGIN FLASH_Init 2 */


  /* USER CODE END FLASH_Init 2 */

}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b010      	add	sp, #64	@ 0x40
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007318:	4b1c      	ldr	r3, [pc, #112]	@ (800738c <MX_I2C1_Init+0x78>)
 800731a:	4a1d      	ldr	r2, [pc, #116]	@ (8007390 <MX_I2C1_Init+0x7c>)
 800731c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 800731e:	4b1b      	ldr	r3, [pc, #108]	@ (800738c <MX_I2C1_Init+0x78>)
 8007320:	4a1c      	ldr	r2, [pc, #112]	@ (8007394 <MX_I2C1_Init+0x80>)
 8007322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007324:	4b19      	ldr	r3, [pc, #100]	@ (800738c <MX_I2C1_Init+0x78>)
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800732a:	4b18      	ldr	r3, [pc, #96]	@ (800738c <MX_I2C1_Init+0x78>)
 800732c:	2201      	movs	r2, #1
 800732e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007330:	4b16      	ldr	r3, [pc, #88]	@ (800738c <MX_I2C1_Init+0x78>)
 8007332:	2200      	movs	r2, #0
 8007334:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007336:	4b15      	ldr	r3, [pc, #84]	@ (800738c <MX_I2C1_Init+0x78>)
 8007338:	2200      	movs	r2, #0
 800733a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800733c:	4b13      	ldr	r3, [pc, #76]	@ (800738c <MX_I2C1_Init+0x78>)
 800733e:	2200      	movs	r2, #0
 8007340:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007342:	4b12      	ldr	r3, [pc, #72]	@ (800738c <MX_I2C1_Init+0x78>)
 8007344:	2200      	movs	r2, #0
 8007346:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007348:	4b10      	ldr	r3, [pc, #64]	@ (800738c <MX_I2C1_Init+0x78>)
 800734a:	2200      	movs	r2, #0
 800734c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800734e:	4b0f      	ldr	r3, [pc, #60]	@ (800738c <MX_I2C1_Init+0x78>)
 8007350:	0018      	movs	r0, r3
 8007352:	f009 fa15 	bl	8010780 <HAL_I2C_Init>
 8007356:	1e03      	subs	r3, r0, #0
 8007358:	d001      	beq.n	800735e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800735a:	f000 fafd 	bl	8007958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800735e:	2380      	movs	r3, #128	@ 0x80
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	4b0a      	ldr	r3, [pc, #40]	@ (800738c <MX_I2C1_Init+0x78>)
 8007364:	0011      	movs	r1, r2
 8007366:	0018      	movs	r0, r3
 8007368:	f00b fa44 	bl	80127f4 <HAL_I2CEx_ConfigAnalogFilter>
 800736c:	1e03      	subs	r3, r0, #0
 800736e:	d001      	beq.n	8007374 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8007370:	f000 faf2 	bl	8007958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <MX_I2C1_Init+0x78>)
 8007376:	2100      	movs	r1, #0
 8007378:	0018      	movs	r0, r3
 800737a:	f00b fa87 	bl	801288c <HAL_I2CEx_ConfigDigitalFilter>
 800737e:	1e03      	subs	r3, r0, #0
 8007380:	d001      	beq.n	8007386 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8007382:	f000 fae9 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007386:	46c0      	nop			@ (mov r8, r8)
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	200003a4 	.word	0x200003a4
 8007390:	40005400 	.word	0x40005400
 8007394:	201060ff 	.word	0x201060ff

08007398 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800739c:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <MX_IWDG_Init+0x3c>)
 800739e:	4a0e      	ldr	r2, [pc, #56]	@ (80073d8 <MX_IWDG_Init+0x40>)
 80073a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 80073a2:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <MX_IWDG_Init+0x3c>)
 80073a4:	2208      	movs	r2, #8
 80073a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	@ (80073d4 <MX_IWDG_Init+0x3c>)
 80073aa:	22fa      	movs	r2, #250	@ 0xfa
 80073ac:	0112      	lsls	r2, r2, #4
 80073ae:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 80073b0:	4b08      	ldr	r3, [pc, #32]	@ (80073d4 <MX_IWDG_Init+0x3c>)
 80073b2:	22fa      	movs	r2, #250	@ 0xfa
 80073b4:	0112      	lsls	r2, r2, #4
 80073b6:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 80073b8:	4b06      	ldr	r3, [pc, #24]	@ (80073d4 <MX_IWDG_Init+0x3c>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80073be:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <MX_IWDG_Init+0x3c>)
 80073c0:	0018      	movs	r0, r3
 80073c2:	f00b faaf 	bl	8012924 <HAL_IWDG_Init>
 80073c6:	1e03      	subs	r3, r0, #0
 80073c8:	d001      	beq.n	80073ce <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 80073ca:	f000 fac5 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80073ce:	46c0      	nop			@ (mov r8, r8)
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	200004b8 	.word	0x200004b8
 80073d8:	40003000 	.word	0x40003000

080073dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	0018      	movs	r0, r3
 80073e6:	2314      	movs	r3, #20
 80073e8:	001a      	movs	r2, r3
 80073ea:	2100      	movs	r1, #0
 80073ec:	f010 fbde 	bl	8017bac <memset>
  RTC_DateTypeDef sDate = {0};
 80073f0:	003b      	movs	r3, r7
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80073f6:	4b32      	ldr	r3, [pc, #200]	@ (80074c0 <MX_RTC_Init+0xe4>)
 80073f8:	4a32      	ldr	r2, [pc, #200]	@ (80074c4 <MX_RTC_Init+0xe8>)
 80073fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80073fc:	4b30      	ldr	r3, [pc, #192]	@ (80074c0 <MX_RTC_Init+0xe4>)
 80073fe:	2200      	movs	r2, #0
 8007400:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007402:	4b2f      	ldr	r3, [pc, #188]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007404:	227f      	movs	r2, #127	@ 0x7f
 8007406:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007408:	4b2d      	ldr	r3, [pc, #180]	@ (80074c0 <MX_RTC_Init+0xe4>)
 800740a:	22ff      	movs	r2, #255	@ 0xff
 800740c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800740e:	4b2c      	ldr	r3, [pc, #176]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007410:	2200      	movs	r2, #0
 8007412:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007414:	4b2a      	ldr	r3, [pc, #168]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007416:	2200      	movs	r2, #0
 8007418:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800741a:	4b29      	ldr	r3, [pc, #164]	@ (80074c0 <MX_RTC_Init+0xe4>)
 800741c:	2200      	movs	r2, #0
 800741e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007420:	4b27      	ldr	r3, [pc, #156]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007422:	2280      	movs	r2, #128	@ 0x80
 8007424:	05d2      	lsls	r2, r2, #23
 8007426:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8007428:	4b25      	ldr	r3, [pc, #148]	@ (80074c0 <MX_RTC_Init+0xe4>)
 800742a:	2200      	movs	r2, #0
 800742c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800742e:	4b24      	ldr	r3, [pc, #144]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007430:	2200      	movs	r2, #0
 8007432:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007434:	4b22      	ldr	r3, [pc, #136]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007436:	0018      	movs	r0, r3
 8007438:	f00d f9ea 	bl	8014810 <HAL_RTC_Init>
 800743c:	1e03      	subs	r3, r0, #0
 800743e:	d001      	beq.n	8007444 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8007440:	f000 fa8a 	bl	8007958 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8007444:	1d3b      	adds	r3, r7, #4
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	2200      	movs	r2, #0
 800744e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8007450:	1d3b      	adds	r3, r7, #4
 8007452:	2200      	movs	r2, #0
 8007454:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007456:	1d3b      	adds	r3, r7, #4
 8007458:	2200      	movs	r2, #0
 800745a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800745c:	1d3b      	adds	r3, r7, #4
 800745e:	2200      	movs	r2, #0
 8007460:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007462:	1d39      	adds	r1, r7, #4
 8007464:	4b16      	ldr	r3, [pc, #88]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007466:	2201      	movs	r2, #1
 8007468:	0018      	movs	r0, r3
 800746a:	f00d fa77 	bl	801495c <HAL_RTC_SetTime>
 800746e:	1e03      	subs	r3, r0, #0
 8007470:	d001      	beq.n	8007476 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8007472:	f000 fa71 	bl	8007958 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007476:	003b      	movs	r3, r7
 8007478:	2201      	movs	r2, #1
 800747a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800747c:	003b      	movs	r3, r7
 800747e:	2201      	movs	r2, #1
 8007480:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8007482:	003b      	movs	r3, r7
 8007484:	2201      	movs	r2, #1
 8007486:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8007488:	003b      	movs	r3, r7
 800748a:	2200      	movs	r2, #0
 800748c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800748e:	0039      	movs	r1, r7
 8007490:	4b0b      	ldr	r3, [pc, #44]	@ (80074c0 <MX_RTC_Init+0xe4>)
 8007492:	2201      	movs	r2, #1
 8007494:	0018      	movs	r0, r3
 8007496:	f00d fb85 	bl	8014ba4 <HAL_RTC_SetDate>
 800749a:	1e03      	subs	r3, r0, #0
 800749c:	d001      	beq.n	80074a2 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800749e:	f000 fa5b 	bl	8007958 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80074a2:	2380      	movs	r3, #128	@ 0x80
 80074a4:	0199      	lsls	r1, r3, #6
 80074a6:	4806      	ldr	r0, [pc, #24]	@ (80074c0 <MX_RTC_Init+0xe4>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	2200      	movs	r2, #0
 80074ac:	f00d fd06 	bl	8014ebc <HAL_RTCEx_SetWakeUpTimer_IT>
 80074b0:	1e03      	subs	r3, r0, #0
 80074b2:	d001      	beq.n	80074b8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80074b4:	f000 fa50 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80074b8:	46c0      	nop			@ (mov r8, r8)
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b006      	add	sp, #24
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	200004cc 	.word	0x200004cc
 80074c4:	40002800 	.word	0x40002800

080074c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	@ 0x38
 80074cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074ce:	2328      	movs	r3, #40	@ 0x28
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	0018      	movs	r0, r3
 80074d4:	2310      	movs	r3, #16
 80074d6:	001a      	movs	r2, r3
 80074d8:	2100      	movs	r1, #0
 80074da:	f010 fb67 	bl	8017bac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074de:	231c      	movs	r3, #28
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	0018      	movs	r0, r3
 80074e4:	230c      	movs	r3, #12
 80074e6:	001a      	movs	r2, r3
 80074e8:	2100      	movs	r1, #0
 80074ea:	f010 fb5f 	bl	8017bac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80074ee:	003b      	movs	r3, r7
 80074f0:	0018      	movs	r0, r3
 80074f2:	231c      	movs	r3, #28
 80074f4:	001a      	movs	r2, r3
 80074f6:	2100      	movs	r1, #0
 80074f8:	f010 fb58 	bl	8017bac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80074fc:	4b30      	ldr	r3, [pc, #192]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 80074fe:	4a31      	ldr	r2, [pc, #196]	@ (80075c4 <MX_TIM3_Init+0xfc>)
 8007500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007502:	4b2f      	ldr	r3, [pc, #188]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 8007504:	2200      	movs	r2, #0
 8007506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007508:	4b2d      	ldr	r3, [pc, #180]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 800750a:	2200      	movs	r2, #0
 800750c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 800750e:	4b2c      	ldr	r3, [pc, #176]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 8007510:	22fa      	movs	r2, #250	@ 0xfa
 8007512:	0112      	lsls	r2, r2, #4
 8007514:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007516:	4b2a      	ldr	r3, [pc, #168]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 8007518:	2200      	movs	r2, #0
 800751a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800751c:	4b28      	ldr	r3, [pc, #160]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 800751e:	2200      	movs	r2, #0
 8007520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007522:	4b27      	ldr	r3, [pc, #156]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 8007524:	0018      	movs	r0, r3
 8007526:	f00d fdb7 	bl	8015098 <HAL_TIM_Base_Init>
 800752a:	1e03      	subs	r3, r0, #0
 800752c:	d001      	beq.n	8007532 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800752e:	f000 fa13 	bl	8007958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007532:	2128      	movs	r1, #40	@ 0x28
 8007534:	187b      	adds	r3, r7, r1
 8007536:	2280      	movs	r2, #128	@ 0x80
 8007538:	0152      	lsls	r2, r2, #5
 800753a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800753c:	187a      	adds	r2, r7, r1
 800753e:	4b20      	ldr	r3, [pc, #128]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 8007540:	0011      	movs	r1, r2
 8007542:	0018      	movs	r0, r3
 8007544:	f00e f8c8 	bl	80156d8 <HAL_TIM_ConfigClockSource>
 8007548:	1e03      	subs	r3, r0, #0
 800754a:	d001      	beq.n	8007550 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800754c:	f000 fa04 	bl	8007958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007550:	4b1b      	ldr	r3, [pc, #108]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 8007552:	0018      	movs	r0, r3
 8007554:	f00d fdf8 	bl	8015148 <HAL_TIM_PWM_Init>
 8007558:	1e03      	subs	r3, r0, #0
 800755a:	d001      	beq.n	8007560 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800755c:	f000 f9fc 	bl	8007958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007560:	211c      	movs	r1, #28
 8007562:	187b      	adds	r3, r7, r1
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007568:	187b      	adds	r3, r7, r1
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800756e:	187a      	adds	r2, r7, r1
 8007570:	4b13      	ldr	r3, [pc, #76]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 8007572:	0011      	movs	r1, r2
 8007574:	0018      	movs	r0, r3
 8007576:	f00e fd65 	bl	8016044 <HAL_TIMEx_MasterConfigSynchronization>
 800757a:	1e03      	subs	r3, r0, #0
 800757c:	d001      	beq.n	8007582 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800757e:	f000 f9eb 	bl	8007958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007582:	003b      	movs	r3, r7
 8007584:	2260      	movs	r2, #96	@ 0x60
 8007586:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 8007588:	003b      	movs	r3, r7
 800758a:	22fa      	movs	r2, #250	@ 0xfa
 800758c:	00d2      	lsls	r2, r2, #3
 800758e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007590:	003b      	movs	r3, r7
 8007592:	2200      	movs	r2, #0
 8007594:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007596:	003b      	movs	r3, r7
 8007598:	2200      	movs	r2, #0
 800759a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800759c:	0039      	movs	r1, r7
 800759e:	4b08      	ldr	r3, [pc, #32]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 80075a0:	2204      	movs	r2, #4
 80075a2:	0018      	movs	r0, r3
 80075a4:	f00d ff98 	bl	80154d8 <HAL_TIM_PWM_ConfigChannel>
 80075a8:	1e03      	subs	r3, r0, #0
 80075aa:	d001      	beq.n	80075b0 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 80075ac:	f000 f9d4 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80075b0:	4b03      	ldr	r3, [pc, #12]	@ (80075c0 <MX_TIM3_Init+0xf8>)
 80075b2:	0018      	movs	r0, r3
 80075b4:	f001 fcee 	bl	8008f94 <HAL_TIM_MspPostInit>

}
 80075b8:	46c0      	nop			@ (mov r8, r8)
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b00e      	add	sp, #56	@ 0x38
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200004fc 	.word	0x200004fc
 80075c4:	40000400 	.word	0x40000400

080075c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075ce:	1d3b      	adds	r3, r7, #4
 80075d0:	0018      	movs	r0, r3
 80075d2:	230c      	movs	r3, #12
 80075d4:	001a      	movs	r2, r3
 80075d6:	2100      	movs	r1, #0
 80075d8:	f010 fae8 	bl	8017bac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80075dc:	4b18      	ldr	r3, [pc, #96]	@ (8007640 <MX_TIM6_Init+0x78>)
 80075de:	4a19      	ldr	r2, [pc, #100]	@ (8007644 <MX_TIM6_Init+0x7c>)
 80075e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 80075e2:	4b17      	ldr	r3, [pc, #92]	@ (8007640 <MX_TIM6_Init+0x78>)
 80075e4:	221f      	movs	r2, #31
 80075e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075e8:	4b15      	ldr	r3, [pc, #84]	@ (8007640 <MX_TIM6_Init+0x78>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 125;
 80075ee:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <MX_TIM6_Init+0x78>)
 80075f0:	227d      	movs	r2, #125	@ 0x7d
 80075f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075f4:	4b12      	ldr	r3, [pc, #72]	@ (8007640 <MX_TIM6_Init+0x78>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80075fa:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <MX_TIM6_Init+0x78>)
 80075fc:	0018      	movs	r0, r3
 80075fe:	f00d fd4b 	bl	8015098 <HAL_TIM_Base_Init>
 8007602:	1e03      	subs	r3, r0, #0
 8007604:	d001      	beq.n	800760a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8007606:	f000 f9a7 	bl	8007958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800760a:	1d3b      	adds	r3, r7, #4
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007610:	1d3b      	adds	r3, r7, #4
 8007612:	2200      	movs	r2, #0
 8007614:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007616:	1d3a      	adds	r2, r7, #4
 8007618:	4b09      	ldr	r3, [pc, #36]	@ (8007640 <MX_TIM6_Init+0x78>)
 800761a:	0011      	movs	r1, r2
 800761c:	0018      	movs	r0, r3
 800761e:	f00e fd11 	bl	8016044 <HAL_TIMEx_MasterConfigSynchronization>
 8007622:	1e03      	subs	r3, r0, #0
 8007624:	d001      	beq.n	800762a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8007626:	f000 f997 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 800762a:	4b06      	ldr	r3, [pc, #24]	@ (8007644 <MX_TIM6_Init+0x7c>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b05      	ldr	r3, [pc, #20]	@ (8007644 <MX_TIM6_Init+0x7c>)
 8007630:	2101      	movs	r1, #1
 8007632:	430a      	orrs	r2, r1
 8007634:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	b004      	add	sp, #16
 800763c:	bd80      	pop	{r7, pc}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	20000548 	.word	0x20000548
 8007644:	40001000 	.word	0x40001000

08007648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800764c:	4b23      	ldr	r3, [pc, #140]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 800764e:	4a24      	ldr	r2, [pc, #144]	@ (80076e0 <MX_USART2_UART_Init+0x98>)
 8007650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007652:	4b22      	ldr	r3, [pc, #136]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 8007654:	22e1      	movs	r2, #225	@ 0xe1
 8007656:	0252      	lsls	r2, r2, #9
 8007658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800765a:	4b20      	ldr	r3, [pc, #128]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 800765c:	2200      	movs	r2, #0
 800765e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007660:	4b1e      	ldr	r3, [pc, #120]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 8007662:	2200      	movs	r2, #0
 8007664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007666:	4b1d      	ldr	r3, [pc, #116]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 8007668:	2200      	movs	r2, #0
 800766a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800766c:	4b1b      	ldr	r3, [pc, #108]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 800766e:	220c      	movs	r2, #12
 8007670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007672:	4b1a      	ldr	r3, [pc, #104]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 8007674:	2200      	movs	r2, #0
 8007676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007678:	4b18      	ldr	r3, [pc, #96]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 800767a:	2200      	movs	r2, #0
 800767c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800767e:	4b17      	ldr	r3, [pc, #92]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 8007680:	2200      	movs	r2, #0
 8007682:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007684:	4b15      	ldr	r3, [pc, #84]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 8007686:	2200      	movs	r2, #0
 8007688:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800768a:	4b14      	ldr	r3, [pc, #80]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 800768c:	2200      	movs	r2, #0
 800768e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007690:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 8007692:	0018      	movs	r0, r3
 8007694:	f00e fd44 	bl	8016120 <HAL_UART_Init>
 8007698:	1e03      	subs	r3, r0, #0
 800769a:	d001      	beq.n	80076a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800769c:	f000 f95c 	bl	8007958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80076a0:	4b0e      	ldr	r3, [pc, #56]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 80076a2:	2100      	movs	r1, #0
 80076a4:	0018      	movs	r0, r3
 80076a6:	f010 f993 	bl	80179d0 <HAL_UARTEx_SetTxFifoThreshold>
 80076aa:	1e03      	subs	r3, r0, #0
 80076ac:	d001      	beq.n	80076b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80076ae:	f000 f953 	bl	8007958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80076b2:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 80076b4:	2100      	movs	r1, #0
 80076b6:	0018      	movs	r0, r3
 80076b8:	f010 f9ca 	bl	8017a50 <HAL_UARTEx_SetRxFifoThreshold>
 80076bc:	1e03      	subs	r3, r0, #0
 80076be:	d001      	beq.n	80076c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80076c0:	f000 f94a 	bl	8007958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <MX_USART2_UART_Init+0x94>)
 80076c6:	0018      	movs	r0, r3
 80076c8:	f010 f948 	bl	801795c <HAL_UARTEx_DisableFifoMode>
 80076cc:	1e03      	subs	r3, r0, #0
 80076ce:	d001      	beq.n	80076d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80076d0:	f000 f942 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80076d4:	46c0      	nop			@ (mov r8, r8)
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	46c0      	nop			@ (mov r8, r8)
 80076dc:	20000594 	.word	0x20000594
 80076e0:	40004400 	.word	0x40004400

080076e4 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80076e8:	4b24      	ldr	r3, [pc, #144]	@ (800777c <MX_USART4_UART_Init+0x98>)
 80076ea:	4a25      	ldr	r2, [pc, #148]	@ (8007780 <MX_USART4_UART_Init+0x9c>)
 80076ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80076ee:	4b23      	ldr	r3, [pc, #140]	@ (800777c <MX_USART4_UART_Init+0x98>)
 80076f0:	2296      	movs	r2, #150	@ 0x96
 80076f2:	0212      	lsls	r2, r2, #8
 80076f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80076f6:	4b21      	ldr	r3, [pc, #132]	@ (800777c <MX_USART4_UART_Init+0x98>)
 80076f8:	2280      	movs	r2, #128	@ 0x80
 80076fa:	0152      	lsls	r2, r2, #5
 80076fc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80076fe:	4b1f      	ldr	r3, [pc, #124]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007700:	2200      	movs	r2, #0
 8007702:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8007704:	4b1d      	ldr	r3, [pc, #116]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007706:	2280      	movs	r2, #128	@ 0x80
 8007708:	00d2      	lsls	r2, r2, #3
 800770a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800770c:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <MX_USART4_UART_Init+0x98>)
 800770e:	220c      	movs	r2, #12
 8007710:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007712:	4b1a      	ldr	r3, [pc, #104]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007714:	2200      	movs	r2, #0
 8007716:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007718:	4b18      	ldr	r3, [pc, #96]	@ (800777c <MX_USART4_UART_Init+0x98>)
 800771a:	2200      	movs	r2, #0
 800771c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800771e:	4b17      	ldr	r3, [pc, #92]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007720:	2200      	movs	r2, #0
 8007722:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007724:	4b15      	ldr	r3, [pc, #84]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007726:	2200      	movs	r2, #0
 8007728:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800772a:	4b14      	ldr	r3, [pc, #80]	@ (800777c <MX_USART4_UART_Init+0x98>)
 800772c:	2200      	movs	r2, #0
 800772e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007730:	4b12      	ldr	r3, [pc, #72]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007732:	0018      	movs	r0, r3
 8007734:	f00e fcf4 	bl	8016120 <HAL_UART_Init>
 8007738:	1e03      	subs	r3, r0, #0
 800773a:	d001      	beq.n	8007740 <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 800773c:	f000 f90c 	bl	8007958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007740:	4b0e      	ldr	r3, [pc, #56]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007742:	2100      	movs	r1, #0
 8007744:	0018      	movs	r0, r3
 8007746:	f010 f943 	bl	80179d0 <HAL_UARTEx_SetTxFifoThreshold>
 800774a:	1e03      	subs	r3, r0, #0
 800774c:	d001      	beq.n	8007752 <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 800774e:	f000 f903 	bl	8007958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007752:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007754:	2100      	movs	r1, #0
 8007756:	0018      	movs	r0, r3
 8007758:	f010 f97a 	bl	8017a50 <HAL_UARTEx_SetRxFifoThreshold>
 800775c:	1e03      	subs	r3, r0, #0
 800775e:	d001      	beq.n	8007764 <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 8007760:	f000 f8fa 	bl	8007958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007764:	4b05      	ldr	r3, [pc, #20]	@ (800777c <MX_USART4_UART_Init+0x98>)
 8007766:	0018      	movs	r0, r3
 8007768:	f010 f8f8 	bl	801795c <HAL_UARTEx_DisableFifoMode>
 800776c:	1e03      	subs	r3, r0, #0
 800776e:	d001      	beq.n	8007774 <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 8007770:	f000 f8f2 	bl	8007958 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007774:	46c0      	nop			@ (mov r8, r8)
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	20000628 	.word	0x20000628
 8007780:	40004c00 	.word	0x40004c00

08007784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800778a:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <MX_DMA_Init+0x48>)
 800778c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800778e:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <MX_DMA_Init+0x48>)
 8007790:	2101      	movs	r1, #1
 8007792:	430a      	orrs	r2, r1
 8007794:	649a      	str	r2, [r3, #72]	@ 0x48
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <MX_DMA_Init+0x48>)
 8007798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800779a:	2201      	movs	r2, #1
 800779c:	4013      	ands	r3, r2
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80077a2:	2200      	movs	r2, #0
 80077a4:	2100      	movs	r1, #0
 80077a6:	200a      	movs	r0, #10
 80077a8:	f007 fd72 	bl	800f290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80077ac:	200a      	movs	r0, #10
 80077ae:	f007 fd84 	bl	800f2ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 80077b2:	2200      	movs	r2, #0
 80077b4:	2100      	movs	r1, #0
 80077b6:	200b      	movs	r0, #11
 80077b8:	f007 fd6a 	bl	800f290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 80077bc:	200b      	movs	r0, #11
 80077be:	f007 fd7c 	bl	800f2ba <HAL_NVIC_EnableIRQ>

}
 80077c2:	46c0      	nop			@ (mov r8, r8)
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b002      	add	sp, #8
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			@ (mov r8, r8)
 80077cc:	40021000 	.word	0x40021000

080077d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b089      	sub	sp, #36	@ 0x24
 80077d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077d6:	240c      	movs	r4, #12
 80077d8:	193b      	adds	r3, r7, r4
 80077da:	0018      	movs	r0, r3
 80077dc:	2314      	movs	r3, #20
 80077de:	001a      	movs	r2, r3
 80077e0:	2100      	movs	r1, #0
 80077e2:	f010 f9e3 	bl	8017bac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077e6:	4b56      	ldr	r3, [pc, #344]	@ (8007940 <MX_GPIO_Init+0x170>)
 80077e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077ea:	4b55      	ldr	r3, [pc, #340]	@ (8007940 <MX_GPIO_Init+0x170>)
 80077ec:	2104      	movs	r1, #4
 80077ee:	430a      	orrs	r2, r1
 80077f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80077f2:	4b53      	ldr	r3, [pc, #332]	@ (8007940 <MX_GPIO_Init+0x170>)
 80077f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f6:	2204      	movs	r2, #4
 80077f8:	4013      	ands	r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077fe:	4b50      	ldr	r3, [pc, #320]	@ (8007940 <MX_GPIO_Init+0x170>)
 8007800:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007802:	4b4f      	ldr	r3, [pc, #316]	@ (8007940 <MX_GPIO_Init+0x170>)
 8007804:	2101      	movs	r1, #1
 8007806:	430a      	orrs	r2, r1
 8007808:	64da      	str	r2, [r3, #76]	@ 0x4c
 800780a:	4b4d      	ldr	r3, [pc, #308]	@ (8007940 <MX_GPIO_Init+0x170>)
 800780c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800780e:	2201      	movs	r2, #1
 8007810:	4013      	ands	r3, r2
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007816:	4b4a      	ldr	r3, [pc, #296]	@ (8007940 <MX_GPIO_Init+0x170>)
 8007818:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800781a:	4b49      	ldr	r3, [pc, #292]	@ (8007940 <MX_GPIO_Init+0x170>)
 800781c:	2102      	movs	r1, #2
 800781e:	430a      	orrs	r2, r1
 8007820:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007822:	4b47      	ldr	r3, [pc, #284]	@ (8007940 <MX_GPIO_Init+0x170>)
 8007824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007826:	2202      	movs	r2, #2
 8007828:	4013      	ands	r3, r2
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800782e:	4945      	ldr	r1, [pc, #276]	@ (8007944 <MX_GPIO_Init+0x174>)
 8007830:	4b45      	ldr	r3, [pc, #276]	@ (8007948 <MX_GPIO_Init+0x178>)
 8007832:	2200      	movs	r2, #0
 8007834:	0018      	movs	r0, r3
 8007836:	f008 ff2c 	bl	8010692 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800783a:	4944      	ldr	r1, [pc, #272]	@ (800794c <MX_GPIO_Init+0x17c>)
 800783c:	4b44      	ldr	r3, [pc, #272]	@ (8007950 <MX_GPIO_Init+0x180>)
 800783e:	2200      	movs	r2, #0
 8007840:	0018      	movs	r0, r3
 8007842:	f008 ff26 	bl	8010692 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8007846:	23f0      	movs	r3, #240	@ 0xf0
 8007848:	0119      	lsls	r1, r3, #4
 800784a:	23a0      	movs	r3, #160	@ 0xa0
 800784c:	05db      	lsls	r3, r3, #23
 800784e:	2200      	movs	r2, #0
 8007850:	0018      	movs	r0, r3
 8007852:	f008 ff1e 	bl	8010692 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 8007856:	193b      	adds	r3, r7, r4
 8007858:	4a3a      	ldr	r2, [pc, #232]	@ (8007944 <MX_GPIO_Init+0x174>)
 800785a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800785c:	193b      	adds	r3, r7, r4
 800785e:	2201      	movs	r2, #1
 8007860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007862:	193b      	adds	r3, r7, r4
 8007864:	2200      	movs	r2, #0
 8007866:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007868:	193b      	adds	r3, r7, r4
 800786a:	2200      	movs	r2, #0
 800786c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800786e:	193b      	adds	r3, r7, r4
 8007870:	4a35      	ldr	r2, [pc, #212]	@ (8007948 <MX_GPIO_Init+0x178>)
 8007872:	0019      	movs	r1, r3
 8007874:	0010      	movs	r0, r2
 8007876:	f008 fc9b 	bl	80101b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5;
 800787a:	193b      	adds	r3, r7, r4
 800787c:	4a33      	ldr	r2, [pc, #204]	@ (800794c <MX_GPIO_Init+0x17c>)
 800787e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007880:	193b      	adds	r3, r7, r4
 8007882:	2201      	movs	r2, #1
 8007884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	193b      	adds	r3, r7, r4
 8007888:	2200      	movs	r2, #0
 800788a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800788c:	193b      	adds	r3, r7, r4
 800788e:	2200      	movs	r2, #0
 8007890:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007892:	193b      	adds	r3, r7, r4
 8007894:	4a2e      	ldr	r2, [pc, #184]	@ (8007950 <MX_GPIO_Init+0x180>)
 8007896:	0019      	movs	r1, r3
 8007898:	0010      	movs	r0, r2
 800789a:	f008 fc89 	bl	80101b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_4;
 800789e:	193b      	adds	r3, r7, r4
 80078a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007954 <MX_GPIO_Init+0x184>)
 80078a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078a4:	193b      	adds	r3, r7, r4
 80078a6:	2200      	movs	r2, #0
 80078a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078aa:	193b      	adds	r3, r7, r4
 80078ac:	2200      	movs	r2, #0
 80078ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b0:	193b      	adds	r3, r7, r4
 80078b2:	4a27      	ldr	r2, [pc, #156]	@ (8007950 <MX_GPIO_Init+0x180>)
 80078b4:	0019      	movs	r1, r3
 80078b6:	0010      	movs	r0, r2
 80078b8:	f008 fc7a 	bl	80101b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80078bc:	0021      	movs	r1, r4
 80078be:	187b      	adds	r3, r7, r1
 80078c0:	22f0      	movs	r2, #240	@ 0xf0
 80078c2:	0112      	lsls	r2, r2, #4
 80078c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078c6:	000c      	movs	r4, r1
 80078c8:	193b      	adds	r3, r7, r4
 80078ca:	2201      	movs	r2, #1
 80078cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ce:	193b      	adds	r3, r7, r4
 80078d0:	2200      	movs	r2, #0
 80078d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d4:	193b      	adds	r3, r7, r4
 80078d6:	2200      	movs	r2, #0
 80078d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078da:	193a      	adds	r2, r7, r4
 80078dc:	23a0      	movs	r3, #160	@ 0xa0
 80078de:	05db      	lsls	r3, r3, #23
 80078e0:	0011      	movs	r1, r2
 80078e2:	0018      	movs	r0, r3
 80078e4:	f008 fc64 	bl	80101b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80078e8:	0021      	movs	r1, r4
 80078ea:	187b      	adds	r3, r7, r1
 80078ec:	2280      	movs	r2, #128	@ 0x80
 80078ee:	0212      	lsls	r2, r2, #8
 80078f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80078f2:	187b      	adds	r3, r7, r1
 80078f4:	2288      	movs	r2, #136	@ 0x88
 80078f6:	0352      	lsls	r2, r2, #13
 80078f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fa:	187b      	adds	r3, r7, r1
 80078fc:	2200      	movs	r2, #0
 80078fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007900:	187a      	adds	r2, r7, r1
 8007902:	23a0      	movs	r3, #160	@ 0xa0
 8007904:	05db      	lsls	r3, r3, #23
 8007906:	0011      	movs	r1, r2
 8007908:	0018      	movs	r0, r3
 800790a:	f008 fc51 	bl	80101b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	2007      	movs	r0, #7
 8007914:	f007 fcbc 	bl	800f290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007918:	2007      	movs	r0, #7
 800791a:	f007 fcce 	bl	800f2ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 800791e:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <MX_GPIO_Init+0x180>)
 8007920:	2201      	movs	r2, #1
 8007922:	2108      	movs	r1, #8
 8007924:	0018      	movs	r0, r3
 8007926:	f008 feb4 	bl	8010692 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 800792a:	2380      	movs	r3, #128	@ 0x80
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	4a06      	ldr	r2, [pc, #24]	@ (8007948 <MX_GPIO_Init+0x178>)
 8007930:	0019      	movs	r1, r3
 8007932:	0010      	movs	r0, r2
 8007934:	f008 feca 	bl	80106cc <HAL_GPIO_TogglePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8007938:	46c0      	nop			@ (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b009      	add	sp, #36	@ 0x24
 800793e:	bd90      	pop	{r4, r7, pc}
 8007940:	40021000 	.word	0x40021000
 8007944:	0000074c 	.word	0x0000074c
 8007948:	50000800 	.word	0x50000800
 800794c:	0000042c 	.word	0x0000042c
 8007950:	50000400 	.word	0x50000400
 8007954:	00005810 	.word	0x00005810

08007958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800795c:	b672      	cpsid	i
}
 800795e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007960:	46c0      	nop			@ (mov r8, r8)
 8007962:	e7fd      	b.n	8007960 <Error_Handler+0x8>

08007964 <noctar>:


void noctar (void){
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0

	asm ("nop");
 8007968:	46c0      	nop			@ (mov r8, r8)

}
 800796a:	46c0      	nop			@ (mov r8, r8)
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"



void refrigera (void){
 8007970:	b590      	push	{r4, r7, lr}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e00c      	b.n	8007996 <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 800797c:	4adb      	ldr	r2, [pc, #876]	@ (8007cec <refrigera+0x37c>)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	18d3      	adds	r3, r2, r3
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 8007986:	4ada      	ldr	r2, [pc, #872]	@ (8007cf0 <refrigera+0x380>)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	18d3      	adds	r3, r2, r3
 800798c:	2200      	movs	r2, #0
 800798e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b07      	cmp	r3, #7
 800799a:	ddef      	ble.n	800797c <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 800799c:	4bd5      	ldr	r3, [pc, #852]	@ (8007cf4 <refrigera+0x384>)
 800799e:	2253      	movs	r2, #83	@ 0x53
 80079a0:	5c9a      	ldrb	r2, [r3, r2]
 80079a2:	4bd5      	ldr	r3, [pc, #852]	@ (8007cf8 <refrigera+0x388>)
 80079a4:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 80079a6:	4bd4      	ldr	r3, [pc, #848]	@ (8007cf8 <refrigera+0x388>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	001a      	movs	r2, r3
 80079ac:	2301      	movs	r3, #1
 80079ae:	4013      	ands	r3, r2
 80079b0:	d003      	beq.n	80079ba <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 80079b2:	4bce      	ldr	r3, [pc, #824]	@ (8007cec <refrigera+0x37c>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	70da      	strb	r2, [r3, #3]
 80079b8:	e000      	b.n	80079bc <refrigera+0x4c>
					goto refrigera_j00;
 80079ba:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 80079bc:	4bce      	ldr	r3, [pc, #824]	@ (8007cf8 <refrigera+0x388>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	001a      	movs	r2, r3
 80079c2:	2302      	movs	r3, #2
 80079c4:	4013      	ands	r3, r2
 80079c6:	d003      	beq.n	80079d0 <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 80079c8:	4bc8      	ldr	r3, [pc, #800]	@ (8007cec <refrigera+0x37c>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	711a      	strb	r2, [r3, #4]
 80079ce:	e000      	b.n	80079d2 <refrigera+0x62>
					goto refrigera_j01;
 80079d0:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 80079d2:	4bc8      	ldr	r3, [pc, #800]	@ (8007cf4 <refrigera+0x384>)
 80079d4:	2262      	movs	r2, #98	@ 0x62
 80079d6:	5c9a      	ldrb	r2, [r3, r2]
 80079d8:	4bc7      	ldr	r3, [pc, #796]	@ (8007cf8 <refrigera+0x388>)
 80079da:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 80079dc:	f7fc f94c 	bl	8003c78 <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 80079e0:	4bc4      	ldr	r3, [pc, #784]	@ (8007cf4 <refrigera+0x384>)
 80079e2:	2257      	movs	r2, #87	@ 0x57
 80079e4:	5c9b      	ldrb	r3, [r3, r2]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d11e      	bne.n	8007a28 <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 80079ea:	4bc2      	ldr	r3, [pc, #776]	@ (8007cf4 <refrigera+0x384>)
 80079ec:	2243      	movs	r2, #67	@ 0x43
 80079ee:	5c9b      	ldrb	r3, [r3, r2]
 80079f0:	3364      	adds	r3, #100	@ 0x64
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	4bc1      	ldr	r3, [pc, #772]	@ (8007cfc <refrigera+0x38c>)
 80079f6:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 80079f8:	4bc0      	ldr	r3, [pc, #768]	@ (8007cfc <refrigera+0x38c>)
 80079fa:	781a      	ldrb	r2, [r3, #0]
 80079fc:	4bc0      	ldr	r3, [pc, #768]	@ (8007d00 <refrigera+0x390>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	18d3      	adds	r3, r2, r3
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	4bbf      	ldr	r3, [pc, #764]	@ (8007d04 <refrigera+0x394>)
 8007a06:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 8007a08:	4bba      	ldr	r3, [pc, #744]	@ (8007cf4 <refrigera+0x384>)
 8007a0a:	2244      	movs	r2, #68	@ 0x44
 8007a0c:	5c9b      	ldrb	r3, [r3, r2]
 8007a0e:	3b38      	subs	r3, #56	@ 0x38
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4bbd      	ldr	r3, [pc, #756]	@ (8007d08 <refrigera+0x398>)
 8007a14:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 8007a16:	4bbc      	ldr	r3, [pc, #752]	@ (8007d08 <refrigera+0x398>)
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	4bb7      	ldr	r3, [pc, #732]	@ (8007cf8 <refrigera+0x388>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	4bba      	ldr	r3, [pc, #744]	@ (8007d0c <refrigera+0x39c>)
 8007a24:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 8007a26:	e021      	b.n	8007a6c <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 8007a28:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 8007a2a:	4bb2      	ldr	r3, [pc, #712]	@ (8007cf4 <refrigera+0x384>)
 8007a2c:	2257      	movs	r2, #87	@ 0x57
 8007a2e:	5c9b      	ldrb	r3, [r3, r2]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d11f      	bne.n	8007a74 <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 8007a34:	4baf      	ldr	r3, [pc, #700]	@ (8007cf4 <refrigera+0x384>)
 8007a36:	2242      	movs	r2, #66	@ 0x42
 8007a38:	5c9a      	ldrb	r2, [r3, r2]
 8007a3a:	4bb0      	ldr	r3, [pc, #704]	@ (8007cfc <refrigera+0x38c>)
 8007a3c:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 8007a3e:	4baf      	ldr	r3, [pc, #700]	@ (8007cfc <refrigera+0x38c>)
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	4baf      	ldr	r3, [pc, #700]	@ (8007d00 <refrigera+0x390>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	18d3      	adds	r3, r2, r3
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	4bae      	ldr	r3, [pc, #696]	@ (8007d04 <refrigera+0x394>)
 8007a4c:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 8007a4e:	4ba9      	ldr	r3, [pc, #676]	@ (8007cf4 <refrigera+0x384>)
 8007a50:	2243      	movs	r2, #67	@ 0x43
 8007a52:	5c9b      	ldrb	r3, [r3, r2]
 8007a54:	3364      	adds	r3, #100	@ 0x64
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4bab      	ldr	r3, [pc, #684]	@ (8007d08 <refrigera+0x398>)
 8007a5a:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 8007a5c:	4baa      	ldr	r3, [pc, #680]	@ (8007d08 <refrigera+0x398>)
 8007a5e:	781a      	ldrb	r2, [r3, #0]
 8007a60:	4ba5      	ldr	r3, [pc, #660]	@ (8007cf8 <refrigera+0x388>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	4ba8      	ldr	r3, [pc, #672]	@ (8007d0c <refrigera+0x39c>)
 8007a6a:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 8007a6c:	4b9f      	ldr	r3, [pc, #636]	@ (8007cec <refrigera+0x37c>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	719a      	strb	r2, [r3, #6]
 8007a72:	e000      	b.n	8007a76 <refrigera+0x106>
					goto refrige05;//jrne refrige05
 8007a74:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 8007a76:	4b9e      	ldr	r3, [pc, #632]	@ (8007cf0 <refrigera+0x380>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	705a      	strb	r2, [r3, #1]

				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 8007a7c:	4b9d      	ldr	r3, [pc, #628]	@ (8007cf4 <refrigera+0x384>)
 8007a7e:	2255      	movs	r2, #85	@ 0x55
 8007a80:	2100      	movs	r1, #0
 8007a82:	5499      	strb	r1, [r3, r2]

              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 8007a84:	4ba2      	ldr	r3, [pc, #648]	@ (8007d10 <refrigera+0x3a0>)
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7fb feae 	bl	80037e8 <TwoByteInArrayToWord>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	4ba0      	ldr	r3, [pc, #640]	@ (8007d14 <refrigera+0x3a4>)
 8007a92:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 8007a94:	4ba0      	ldr	r3, [pc, #640]	@ (8007d18 <refrigera+0x3a8>)
 8007a96:	0018      	movs	r0, r3
 8007a98:	f7fb fea6 	bl	80037e8 <TwoByteInArrayToWord>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8007d14 <refrigera+0x3a4>)
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	18d3      	adds	r3, r2, r3
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	4b9c      	ldr	r3, [pc, #624]	@ (8007d1c <refrigera+0x3ac>)
 8007aaa:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 8007aac:	4b9c      	ldr	r3, [pc, #624]	@ (8007d20 <refrigera+0x3b0>)
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4053      	eors	r3, r2
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d137      	bne.n	8007b2a <refrigera+0x1ba>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 8007aba:	4b9a      	ldr	r3, [pc, #616]	@ (8007d24 <refrigera+0x3b4>)
 8007abc:	0018      	movs	r0, r3
 8007abe:	f7fb fe93 	bl	80037e8 <TwoByteInArrayToWord>
 8007ac2:	0003      	movs	r3, r0
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	4b93      	ldr	r3, [pc, #588]	@ (8007d14 <refrigera+0x3a4>)
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	18d3      	adds	r3, r2, r3
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	4b91      	ldr	r3, [pc, #580]	@ (8007d14 <refrigera+0x3a4>)
 8007ad0:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 8007ad2:	4b94      	ldr	r3, [pc, #592]	@ (8007d24 <refrigera+0x3b4>)
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f7fb fe87 	bl	80037e8 <TwoByteInArrayToWord>
 8007ada:	0003      	movs	r3, r0
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	4b8f      	ldr	r3, [pc, #572]	@ (8007d1c <refrigera+0x3ac>)
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	18d3      	adds	r3, r2, r3
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8007d1c <refrigera+0x3ac>)
 8007ae8:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 8007aea:	4b8d      	ldr	r3, [pc, #564]	@ (8007d20 <refrigera+0x3b0>)
 8007aec:	789b      	ldrb	r3, [r3, #2]
 8007aee:	2201      	movs	r2, #1
 8007af0:	4053      	eors	r3, r2
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d11a      	bne.n	8007b2e <refrigera+0x1be>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 8007af8:	4b8b      	ldr	r3, [pc, #556]	@ (8007d28 <refrigera+0x3b8>)
 8007afa:	0018      	movs	r0, r3
 8007afc:	f7fb fe74 	bl	80037e8 <TwoByteInArrayToWord>
 8007b00:	0003      	movs	r3, r0
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	4b83      	ldr	r3, [pc, #524]	@ (8007d14 <refrigera+0x3a4>)
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	18d3      	adds	r3, r2, r3
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	4b81      	ldr	r3, [pc, #516]	@ (8007d14 <refrigera+0x3a4>)
 8007b0e:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 8007b10:	4b85      	ldr	r3, [pc, #532]	@ (8007d28 <refrigera+0x3b8>)
 8007b12:	0018      	movs	r0, r3
 8007b14:	f7fb fe68 	bl	80037e8 <TwoByteInArrayToWord>
 8007b18:	0003      	movs	r3, r0
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8007d1c <refrigera+0x3ac>)
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	18d3      	adds	r3, r2, r3
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	4b7d      	ldr	r3, [pc, #500]	@ (8007d1c <refrigera+0x3ac>)
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	e002      	b.n	8007b30 <refrigera+0x1c0>
					goto no_ahorro1;
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	e000      	b.n	8007b30 <refrigera+0x1c0>
					goto no_ahorro1;
 8007b2e:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 8007b30:	4b7e      	ldr	r3, [pc, #504]	@ (8007d2c <refrigera+0x3bc>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	001a      	movs	r2, r3
 8007b36:	2302      	movs	r3, #2
 8007b38:	4013      	ands	r3, r2
 8007b3a:	d133      	bne.n	8007ba4 <refrigera+0x234>
					goto refrigera_j04;
 8007b3c:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 8007b3e:	f7fc fa59 	bl	8003ff4 <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 8007b42:	230b      	movs	r3, #11
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
 8007b4a:	e00a      	b.n	8007b62 <refrigera+0x1f2>
					datled[k] = 0;
 8007b4c:	200b      	movs	r0, #11
 8007b4e:	183b      	adds	r3, r7, r0
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	4a77      	ldr	r2, [pc, #476]	@ (8007d30 <refrigera+0x3c0>)
 8007b54:	2100      	movs	r1, #0
 8007b56:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 8007b58:	183b      	adds	r3, r7, r0
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	183b      	adds	r3, r7, r0
 8007b5e:	3201      	adds	r2, #1
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	230b      	movs	r3, #11
 8007b64:	18fb      	adds	r3, r7, r3
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b06      	cmp	r3, #6
 8007b6a:	d9ef      	bls.n	8007b4c <refrigera+0x1dc>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 8007b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8007d2c <refrigera+0x3bc>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	001a      	movs	r2, r3
 8007b72:	2301      	movs	r3, #1
 8007b74:	4013      	ands	r3, r2
 8007b76:	d100      	bne.n	8007b7a <refrigera+0x20a>
 8007b78:	e1e2      	b.n	8007f40 <refrigera+0x5d0>
					goto refrigera_j05;
 8007b7a:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 8007b7c:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 8007b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8007d34 <refrigera+0x3c4>)
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	4b5d      	ldr	r3, [pc, #372]	@ (8007cf8 <refrigera+0x388>)
 8007b84:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 8007b86:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf8 <refrigera+0x388>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007d38 <refrigera+0x3c8>)
 8007b8e:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 8007b90:	f7fb fe7a 	bl	8003888 <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 8007b94:	4b58      	ldr	r3, [pc, #352]	@ (8007cf8 <refrigera+0x388>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <refrigera+0x230>
 8007b9c:	f000 fb76 	bl	800828c <refrigera+0x91c>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 8007ba0:	f000 fb78 	bl	8008294 <refrigera+0x924>
				goto refrige10;
 8007ba4:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 8007ba6:	f7fb fedf 	bl	8003968 <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 8007baa:	4961      	ldr	r1, [pc, #388]	@ (8007d30 <refrigera+0x3c0>)
 8007bac:	4860      	ldr	r0, [pc, #384]	@ (8007d30 <refrigera+0x3c0>)
 8007bae:	2303      	movs	r3, #3
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	f002 fb7a 	bl	800a2aa <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 8007bb6:	4b61      	ldr	r3, [pc, #388]	@ (8007d3c <refrigera+0x3cc>)
 8007bb8:	791b      	ldrb	r3, [r3, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4053      	eors	r3, r2
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d129      	bne.n	8007c18 <refrigera+0x2a8>
            cntMsgCmd = 250;
 8007bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8007d40 <refrigera+0x3d0>)
 8007bc6:	22fa      	movs	r2, #250	@ 0xfa
 8007bc8:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 8007bca:	4b5e      	ldr	r3, [pc, #376]	@ (8007d44 <refrigera+0x3d4>)
 8007bcc:	2203      	movs	r2, #3
 8007bce:	701a      	strb	r2, [r3, #0]
            waux = eeEstado1;
 8007bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8007d48 <refrigera+0x3d8>)
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8007d00 <refrigera+0x390>)
 8007bd6:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 8007bd8:	4b49      	ldr	r3, [pc, #292]	@ (8007d00 <refrigera+0x390>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2240      	movs	r2, #64	@ 0x40
 8007bde:	4393      	bics	r3, r2
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	4b47      	ldr	r3, [pc, #284]	@ (8007d00 <refrigera+0x390>)
 8007be4:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 8007be6:	4b59      	ldr	r3, [pc, #356]	@ (8007d4c <refrigera+0x3dc>)
 8007be8:	799b      	ldrb	r3, [r3, #6]
 8007bea:	2201      	movs	r2, #1
 8007bec:	4053      	eors	r3, r2
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d107      	bne.n	8007c04 <refrigera+0x294>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 8007bf4:	4b42      	ldr	r3, [pc, #264]	@ (8007d00 <refrigera+0x390>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2240      	movs	r2, #64	@ 0x40
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	4b40      	ldr	r3, [pc, #256]	@ (8007d00 <refrigera+0x390>)
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	e000      	b.n	8007c06 <refrigera+0x296>
            	goto func_lock_01;
 8007c04:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 8007c06:	4b3e      	ldr	r3, [pc, #248]	@ (8007d00 <refrigera+0x390>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	001a      	movs	r2, r3
 8007c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8007d48 <refrigera+0x3d8>)
 8007c0e:	0019      	movs	r1, r3
 8007c10:	0010      	movs	r0, r2
 8007c12:	f7fc feb9 	bl	8004988 <wreeprom>
 8007c16:	e000      	b.n	8007c1a <refrigera+0x2aa>
            	goto no_Func_Lock;
 8007c18:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 8007c1a:	4b48      	ldr	r3, [pc, #288]	@ (8007d3c <refrigera+0x3cc>)
 8007c1c:	789b      	ldrb	r3, [r3, #2]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4053      	eors	r3, r2
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d133      	bne.n	8007c90 <refrigera+0x320>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 8007c28:	4b45      	ldr	r3, [pc, #276]	@ (8007d40 <refrigera+0x3d0>)
 8007c2a:	22fa      	movs	r2, #250	@ 0xfa
 8007c2c:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 8007c2e:	4b45      	ldr	r3, [pc, #276]	@ (8007d44 <refrigera+0x3d4>)
 8007c30:	2202      	movs	r2, #2
 8007c32:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 8007c34:	4b3a      	ldr	r3, [pc, #232]	@ (8007d20 <refrigera+0x3b0>)
 8007c36:	799b      	ldrb	r3, [r3, #6]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4053      	eors	r3, r2
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	1e5a      	subs	r2, r3, #1
 8007c40:	4193      	sbcs	r3, r2
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	4b36      	ldr	r3, [pc, #216]	@ (8007d20 <refrigera+0x3b0>)
 8007c46:	719a      	strb	r2, [r3, #6]
               waux = eeEstado1;
 8007c48:	4b3f      	ldr	r3, [pc, #252]	@ (8007d48 <refrigera+0x3d8>)
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8007d00 <refrigera+0x390>)
 8007c4e:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 8007c50:	4b2b      	ldr	r3, [pc, #172]	@ (8007d00 <refrigera+0x390>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2204      	movs	r2, #4
 8007c56:	4393      	bics	r3, r2
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b29      	ldr	r3, [pc, #164]	@ (8007d00 <refrigera+0x390>)
 8007c5c:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 8007c5e:	4b30      	ldr	r3, [pc, #192]	@ (8007d20 <refrigera+0x3b0>)
 8007c60:	799b      	ldrb	r3, [r3, #6]
 8007c62:	2201      	movs	r2, #1
 8007c64:	4053      	eors	r3, r2
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d107      	bne.n	8007c7c <refrigera+0x30c>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 8007c6c:	4b24      	ldr	r3, [pc, #144]	@ (8007d00 <refrigera+0x390>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2204      	movs	r2, #4
 8007c72:	4313      	orrs	r3, r2
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	4b22      	ldr	r3, [pc, #136]	@ (8007d00 <refrigera+0x390>)
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	e000      	b.n	8007c7e <refrigera+0x30e>
            	   goto refrigera_j06d;
 8007c7c:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 8007c7e:	4b20      	ldr	r3, [pc, #128]	@ (8007d00 <refrigera+0x390>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	001a      	movs	r2, r3
 8007c84:	4b30      	ldr	r3, [pc, #192]	@ (8007d48 <refrigera+0x3d8>)
 8007c86:	0019      	movs	r1, r3
 8007c88:	0010      	movs	r0, r2
 8007c8a:	f7fc fe7d 	bl	8004988 <wreeprom>
 8007c8e:	e000      	b.n	8007c92 <refrigera+0x322>
            	   goto refrigera_j06c;
 8007c90:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 8007c92:	4b23      	ldr	r3, [pc, #140]	@ (8007d20 <refrigera+0x3b0>)
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d121      	bne.n	8007cde <refrigera+0x36e>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 8007c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d50 <refrigera+0x3e0>)
 8007c9c:	78db      	ldrb	r3, [r3, #3]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d11f      	bne.n	8007ce2 <refrigera+0x372>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 8007ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8007d54 <refrigera+0x3e4>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	4053      	eors	r3, r2
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d11a      	bne.n	8007ce6 <refrigera+0x376>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 8007cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8007d20 <refrigera+0x3b0>)
 8007cb2:	799b      	ldrb	r3, [r3, #6]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <refrigera+0x360>
                if(retLampOff != 0){ //tnz retLampOff
 8007cb8:	4b27      	ldr	r3, [pc, #156]	@ (8007d58 <refrigera+0x3e8>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <refrigera+0x364>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 8007cc0:	4b17      	ldr	r3, [pc, #92]	@ (8007d20 <refrigera+0x3b0>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	4053      	eors	r3, r2
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d146      	bne.n	8007d5c <refrigera+0x3ec>
refrigera_j06a:
 8007cce:	e002      	b.n	8007cd6 <refrigera+0x366>
                	goto refrigera_j06a;
 8007cd0:	46c0      	nop			@ (mov r8, r8)
 8007cd2:	e000      	b.n	8007cd6 <refrigera+0x366>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 8007cd4:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 8007cd6:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <refrigera+0x37c>)
 8007cd8:	2201      	movs	r2, #1
 8007cda:	709a      	strb	r2, [r3, #2]
 8007cdc:	e03f      	b.n	8007d5e <refrigera+0x3ee>
                	goto refrigera_j06;
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	e03d      	b.n	8007d5e <refrigera+0x3ee>
                	goto refrigera_j06;
 8007ce2:	46c0      	nop			@ (mov r8, r8)
 8007ce4:	e03b      	b.n	8007d5e <refrigera+0x3ee>
                	goto refrigera_j06;
 8007ce6:	46c0      	nop			@ (mov r8, r8)
 8007ce8:	e039      	b.n	8007d5e <refrigera+0x3ee>
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	20000ae0 	.word	0x20000ae0
 8007cf0:	20000b1c 	.word	0x20000b1c
 8007cf4:	200000bc 	.word	0x200000bc
 8007cf8:	20000a93 	.word	0x20000a93
 8007cfc:	20000b60 	.word	0x20000b60
 8007d00:	20000a92 	.word	0x20000a92
 8007d04:	20000b62 	.word	0x20000b62
 8007d08:	20000b5f 	.word	0x20000b5f
 8007d0c:	20000b61 	.word	0x20000b61
 8007d10:	200000bd 	.word	0x200000bd
 8007d14:	20000ae8 	.word	0x20000ae8
 8007d18:	200000bf 	.word	0x200000bf
 8007d1c:	20000aea 	.word	0x20000aea
 8007d20:	20000b78 	.word	0x20000b78
 8007d24:	200000d7 	.word	0x200000d7
 8007d28:	200000d9 	.word	0x200000d9
 8007d2c:	20000ad4 	.word	0x20000ad4
 8007d30:	20000acc 	.word	0x20000acc
 8007d34:	20000aa8 	.word	0x20000aa8
 8007d38:	20000af6 	.word	0x20000af6
 8007d3c:	20000ad8 	.word	0x20000ad8
 8007d40:	20000fa0 	.word	0x20000fa0
 8007d44:	20000fa1 	.word	0x20000fa1
 8007d48:	0803f083 	.word	0x0803f083
 8007d4c:	20000f80 	.word	0x20000f80
 8007d50:	20000ab4 	.word	0x20000ab4
 8007d54:	20000b24 	.word	0x20000b24
 8007d58:	20000fa2 	.word	0x20000fa2
                	goto refrigera_j06;
 8007d5c:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 8007d5e:	4bd4      	ldr	r3, [pc, #848]	@ (80080b0 <refrigera+0x740>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	001a      	movs	r2, r3
 8007d64:	2301      	movs	r3, #1
 8007d66:	4013      	ands	r3, r2
 8007d68:	d101      	bne.n	8007d6e <refrigera+0x3fe>
 8007d6a:	f000 fc00 	bl	800856e <refrigera+0xbfe>
                	goto refrigera_j07;
 8007d6e:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 8007d70:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 8007d72:	49d0      	ldr	r1, [pc, #832]	@ (80080b4 <refrigera+0x744>)
 8007d74:	48cf      	ldr	r0, [pc, #828]	@ (80080b4 <refrigera+0x744>)
 8007d76:	2307      	movs	r3, #7
 8007d78:	2203      	movs	r2, #3
 8007d7a:	f002 fa7b 	bl	800a274 <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 8007d7e:	4bce      	ldr	r3, [pc, #824]	@ (80080b8 <refrigera+0x748>)
 8007d80:	2259      	movs	r2, #89	@ 0x59
 8007d82:	5c9b      	ldrb	r3, [r3, r2]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d001      	beq.n	8007d8c <refrigera+0x41c>
 8007d88:	f000 fe34 	bl	80089f4 <refrigera+0x1084>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 8007d8c:	f000 fe42 	bl	8008a14 <refrigera+0x10a4>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 8007d90:	4bca      	ldr	r3, [pc, #808]	@ (80080bc <refrigera+0x74c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	801a      	strh	r2, [r3, #0]
				goto finref;
 8007d96:	e05b      	b.n	8007e50 <refrigera+0x4e0>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 8007d98:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 8007d9a:	4bc7      	ldr	r3, [pc, #796]	@ (80080b8 <refrigera+0x748>)
 8007d9c:	2264      	movs	r2, #100	@ 0x64
 8007d9e:	5c9a      	ldrb	r2, [r3, r2]
 8007da0:	4bc7      	ldr	r3, [pc, #796]	@ (80080c0 <refrigera+0x750>)
 8007da2:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 8007da4:	f7fb ff68 	bl	8003c78 <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 8007da8:	4bc6      	ldr	r3, [pc, #792]	@ (80080c4 <refrigera+0x754>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	001a      	movs	r2, r3
 8007dae:	233c      	movs	r3, #60	@ 0x3c
 8007db0:	4353      	muls	r3, r2
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	4bc4      	ldr	r3, [pc, #784]	@ (80080c8 <refrigera+0x758>)
 8007db6:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 8007db8:	4bc1      	ldr	r3, [pc, #772]	@ (80080c0 <refrigera+0x750>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	001a      	movs	r2, r3
 8007dbe:	233c      	movs	r3, #60	@ 0x3c
 8007dc0:	4353      	muls	r3, r2
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	4bc1      	ldr	r3, [pc, #772]	@ (80080cc <refrigera+0x75c>)
 8007dc6:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 8007dc8:	f7fb fdae 	bl	8003928 <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 8007dcc:	4bb8      	ldr	r3, [pc, #736]	@ (80080b0 <refrigera+0x740>)
 8007dce:	2202      	movs	r2, #2
 8007dd0:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 8007dd2:	e03a      	b.n	8007e4a <refrigera+0x4da>
				retvent = 20;
 8007dd4:	4bbe      	ldr	r3, [pc, #760]	@ (80080d0 <refrigera+0x760>)
 8007dd6:	2214      	movs	r2, #20
 8007dd8:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 8007dda:	4bbe      	ldr	r3, [pc, #760]	@ (80080d4 <refrigera+0x764>)
 8007ddc:	2232      	movs	r2, #50	@ 0x32
 8007dde:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 8007de0:	4bb3      	ldr	r3, [pc, #716]	@ (80080b0 <refrigera+0x740>)
 8007de2:	2202      	movs	r2, #2
 8007de4:	701a      	strb	r2, [r3, #0]
				goto todh20;
 8007de6:	e030      	b.n	8007e4a <refrigera+0x4da>
                  goto todh; //jp todh
 8007de8:	46c0      	nop			@ (mov r8, r8)
 8007dea:	e000      	b.n	8007dee <refrigera+0x47e>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 8007dec:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 8007dee:	4bba      	ldr	r3, [pc, #744]	@ (80080d8 <refrigera+0x768>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 8007df4:	f7fb fd28 	bl	8003848 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 8007df8:	4baf      	ldr	r3, [pc, #700]	@ (80080b8 <refrigera+0x748>)
 8007dfa:	2247      	movs	r2, #71	@ 0x47
 8007dfc:	5c9a      	ldrb	r2, [r3, r2]
 8007dfe:	4bb0      	ldr	r3, [pc, #704]	@ (80080c0 <refrigera+0x750>)
 8007e00:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 8007e02:	4bad      	ldr	r3, [pc, #692]	@ (80080b8 <refrigera+0x748>)
 8007e04:	2255      	movs	r2, #85	@ 0x55
 8007e06:	5c9b      	ldrb	r3, [r3, r2]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d102      	bne.n	8007e12 <refrigera+0x4a2>
				BaBentre10_math();					//call BaBentre10_math
 8007e0c:	f7fb ff34 	bl	8003c78 <BaBentre10_math>
				goto todh2;
 8007e10:	e014      	b.n	8007e3c <refrigera+0x4cc>
					goto todh1;
 8007e12:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 8007e14:	4baa      	ldr	r3, [pc, #680]	@ (80080c0 <refrigera+0x750>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	001a      	movs	r2, r3
 8007e1a:	233c      	movs	r3, #60	@ 0x3c
 8007e1c:	4353      	muls	r3, r2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	4bae      	ldr	r3, [pc, #696]	@ (80080dc <refrigera+0x76c>)
 8007e22:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 8007e24:	4bad      	ldr	r3, [pc, #692]	@ (80080dc <refrigera+0x76c>)
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	0a1b      	lsrs	r3, r3, #8
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	4bac      	ldr	r3, [pc, #688]	@ (80080e0 <refrigera+0x770>)
 8007e30:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 8007e32:	4baa      	ldr	r3, [pc, #680]	@ (80080dc <refrigera+0x76c>)
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	4baa      	ldr	r3, [pc, #680]	@ (80080e4 <refrigera+0x774>)
 8007e3a:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 8007e3c:	4ba9      	ldr	r3, [pc, #676]	@ (80080e4 <refrigera+0x774>)
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	4ba9      	ldr	r3, [pc, #676]	@ (80080e8 <refrigera+0x778>)
 8007e42:	701a      	strb	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 8007e44:	4b9a      	ldr	r3, [pc, #616]	@ (80080b0 <refrigera+0x740>)
 8007e46:	2203      	movs	r2, #3
 8007e48:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 8007e4a:	4ba8      	ldr	r3, [pc, #672]	@ (80080ec <refrigera+0x77c>)
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 8007e50:	4ba7      	ldr	r3, [pc, #668]	@ (80080f0 <refrigera+0x780>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <refrigera+0x4f0>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 8007e58:	4b96      	ldr	r3, [pc, #600]	@ (80080b4 <refrigera+0x744>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	709a      	strb	r2, [r3, #2]
 8007e5e:	e000      	b.n	8007e62 <refrigera+0x4f2>
                	goto refrigera_j11;
 8007e60:	46c0      	nop			@ (mov r8, r8)
                if(!GetRegFlagState(eeEstado1,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 8007e62:	4ba4      	ldr	r3, [pc, #656]	@ (80080f4 <refrigera+0x784>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	001a      	movs	r2, r3
 8007e68:	2340      	movs	r3, #64	@ 0x40
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <refrigera+0x506>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 8007e6e:	4ba0      	ldr	r3, [pc, #640]	@ (80080f0 <refrigera+0x780>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	705a      	strb	r2, [r3, #1]
 8007e74:	e000      	b.n	8007e78 <refrigera+0x508>
                	goto refrigeraLockDrOFF;
 8007e76:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 8007e78:	4b9f      	ldr	r3, [pc, #636]	@ (80080f8 <refrigera+0x788>)
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00f      	beq.n	8007ea0 <refrigera+0x530>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 8007e80:	4b9b      	ldr	r3, [pc, #620]	@ (80080f0 <refrigera+0x780>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 8007e86:	4b9a      	ldr	r3, [pc, #616]	@ (80080f0 <refrigera+0x780>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 8007e8c:	4b9b      	ldr	r3, [pc, #620]	@ (80080fc <refrigera+0x78c>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 8007e92:	4988      	ldr	r1, [pc, #544]	@ (80080b4 <refrigera+0x744>)
 8007e94:	4887      	ldr	r0, [pc, #540]	@ (80080b4 <refrigera+0x744>)
 8007e96:	2307      	movs	r3, #7
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f002 fa06 	bl	800a2aa <Bclear_Clear_trfst>
               goto endNoct;
 8007e9e:	e01b      	b.n	8007ed8 <refrigera+0x568>
            	   goto endNocturno;
 8007ea0:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 8007ea2:	4b97      	ldr	r3, [pc, #604]	@ (8008100 <refrigera+0x790>)
 8007ea4:	78db      	ldrb	r3, [r3, #3]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4053      	eors	r3, r2
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d112      	bne.n	8007ed6 <refrigera+0x566>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 8007eb0:	4993      	ldr	r1, [pc, #588]	@ (8008100 <refrigera+0x790>)
 8007eb2:	4894      	ldr	r0, [pc, #592]	@ (8008104 <refrigera+0x794>)
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f002 f9dc 	bl	800a274 <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 8007ebc:	497d      	ldr	r1, [pc, #500]	@ (80080b4 <refrigera+0x744>)
 8007ebe:	4892      	ldr	r0, [pc, #584]	@ (8008108 <refrigera+0x798>)
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f002 f9d6 	bl	800a274 <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 8007ec8:	4b90      	ldr	r3, [pc, #576]	@ (800810c <refrigera+0x79c>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 8007ece:	4b90      	ldr	r3, [pc, #576]	@ (8008110 <refrigera+0x7a0>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	e000      	b.n	8007ed8 <refrigera+0x568>
            	  goto endNoct;
 8007ed6:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState (eeEstado1, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 8007ed8:	4b86      	ldr	r3, [pc, #536]	@ (80080f4 <refrigera+0x784>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	001a      	movs	r2, r3
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	d118      	bne.n	8007f16 <refrigera+0x5a6>
refriOFF:
 8007ee4:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 8007ee6:	f000 fe07 	bl	8008af8 <st_refri>
           for(uint8_t k=0; k<8; k++){
 8007eea:	230a      	movs	r3, #10
 8007eec:	18fb      	adds	r3, r7, r3
 8007eee:	2200      	movs	r2, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	e00a      	b.n	8007f0a <refrigera+0x59a>
        	   datled[k] = 0;
 8007ef4:	200a      	movs	r0, #10
 8007ef6:	183b      	adds	r3, r7, r0
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4a6e      	ldr	r2, [pc, #440]	@ (80080b4 <refrigera+0x744>)
 8007efc:	2100      	movs	r1, #0
 8007efe:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 8007f00:	183b      	adds	r3, r7, r0
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	183b      	adds	r3, r7, r0
 8007f06:	3201      	adds	r2, #1
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b07      	cmp	r3, #7
 8007f12:	d9ef      	bls.n	8007ef4 <refrigera+0x584>
refriON:
 8007f14:	e000      	b.n	8007f18 <refrigera+0x5a8>
            	 goto refriON;
 8007f16:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 8007f18:	4b7e      	ldr	r3, [pc, #504]	@ (8008114 <refrigera+0x7a4>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4053      	eors	r3, r2
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <refrigera+0x5ca>
         st_refri();
 8007f26:	f000 fde7 	bl	8008af8 <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 8007f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8008118 <refrigera+0x7a8>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 8007f30:	4b75      	ldr	r3, [pc, #468]	@ (8008108 <refrigera+0x798>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 8007f36:	f000 fda3 	bl	8008a80 <refrigera+0x1110>
        	 goto ac_OK;
 8007f3a:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 8007f3c:	f000 fda0 	bl	8008a80 <refrigera+0x1110>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 8007f40:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 8007f42:	4b76      	ldr	r3, [pc, #472]	@ (800811c <refrigera+0x7ac>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 8007f48:	f7fb fc64 	bl	8003814 <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 8007f4c:	f7fb fc6a 	bl	8003824 <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 8007f50:	4973      	ldr	r1, [pc, #460]	@ (8008120 <refrigera+0x7b0>)
 8007f52:	4873      	ldr	r0, [pc, #460]	@ (8008120 <refrigera+0x7b0>)
 8007f54:	2307      	movs	r3, #7
 8007f56:	2206      	movs	r2, #6
 8007f58:	f002 f9a7 	bl	800a2aa <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 8007f5c:	4b71      	ldr	r3, [pc, #452]	@ (8008124 <refrigera+0x7b4>)
 8007f5e:	2202      	movs	r2, #2
 8007f60:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 8007f62:	4b57      	ldr	r3, [pc, #348]	@ (80080c0 <refrigera+0x750>)
 8007f64:	2205      	movs	r2, #5
 8007f66:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 8007f68:	4b6c      	ldr	r3, [pc, #432]	@ (800811c <refrigera+0x7ac>)
 8007f6a:	799b      	ldrb	r3, [r3, #6]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	4053      	eors	r3, r2
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <refrigera+0x60e>
          wreg = 0x01;
 8007f76:	4b52      	ldr	r3, [pc, #328]	@ (80080c0 <refrigera+0x750>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	e000      	b.n	8007f80 <refrigera+0x610>
        	  goto no_change_time;
 8007f7e:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 8007f80:	4b4f      	ldr	r3, [pc, #316]	@ (80080c0 <refrigera+0x750>)
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	4b52      	ldr	r3, [pc, #328]	@ (80080d0 <refrigera+0x760>)
 8007f86:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 8007f88:	4b4d      	ldr	r3, [pc, #308]	@ (80080c0 <refrigera+0x750>)
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	4b66      	ldr	r3, [pc, #408]	@ (8008128 <refrigera+0x7b8>)
 8007f8e:	701a      	strb	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 8007f90:	f7fb fc7a 	bl	8003888 <blink_640>
			if(cntblkh < 100){//cpw X,#100
 8007f94:	4b49      	ldr	r3, [pc, #292]	@ (80080bc <refrigera+0x74c>)
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	2b63      	cmp	r3, #99	@ 0x63
 8007f9a:	d928      	bls.n	8007fee <refrigera+0x67e>
			if(cntblkh <= 250){
 8007f9c:	4b47      	ldr	r3, [pc, #284]	@ (80080bc <refrigera+0x74c>)
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	2bfa      	cmp	r3, #250	@ 0xfa
 8007fa2:	d92c      	bls.n	8007ffe <refrigera+0x68e>
			if(cntblkh < 300){
 8007fa4:	4b45      	ldr	r3, [pc, #276]	@ (80080bc <refrigera+0x74c>)
 8007fa6:	881a      	ldrh	r2, [r3, #0]
 8007fa8:	2396      	movs	r3, #150	@ 0x96
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d320      	bcc.n	8007ff2 <refrigera+0x682>
			if(cntblkh < 450){
 8007fb0:	4b42      	ldr	r3, [pc, #264]	@ (80080bc <refrigera+0x74c>)
 8007fb2:	881a      	ldrh	r2, [r3, #0]
 8007fb4:	23e1      	movs	r3, #225	@ 0xe1
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d347      	bcc.n	800804c <refrigera+0x6dc>
			if(cntblkh < 500){
 8007fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80080bc <refrigera+0x74c>)
 8007fbe:	881a      	ldrh	r2, [r3, #0]
 8007fc0:	23fa      	movs	r3, #250	@ 0xfa
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d316      	bcc.n	8007ff6 <refrigera+0x686>
			if(cntblkh < 650){
 8007fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80080bc <refrigera+0x74c>)
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	4a57      	ldr	r2, [pc, #348]	@ (800812c <refrigera+0x7bc>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d800      	bhi.n	8007fd4 <refrigera+0x664>
 8007fd2:	e0d7      	b.n	8008184 <refrigera+0x814>
			if(cntblkh < 700){
 8007fd4:	4b39      	ldr	r3, [pc, #228]	@ (80080bc <refrigera+0x74c>)
 8007fd6:	881a      	ldrh	r2, [r3, #0]
 8007fd8:	23af      	movs	r3, #175	@ 0xaf
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d30c      	bcc.n	8007ffa <refrigera+0x68a>
			if(cntblkh < 850){
 8007fe0:	4b36      	ldr	r3, [pc, #216]	@ (80080bc <refrigera+0x74c>)
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	4a52      	ldr	r2, [pc, #328]	@ (8008130 <refrigera+0x7c0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d800      	bhi.n	8007fec <refrigera+0x67c>
 8007fea:	e0e6      	b.n	80081ba <refrigera+0x84a>
indi_off:
 8007fec:	e006      	b.n	8007ffc <refrigera+0x68c>
				goto indi_off; //jrult	indi_off
 8007fee:	46c0      	nop			@ (mov r8, r8)
 8007ff0:	e0fe      	b.n	80081f0 <refrigera+0x880>
				goto indi_off; //rult indi_off
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	e0fc      	b.n	80081f0 <refrigera+0x880>
				goto indi_off; //rult indi_off
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	e0fa      	b.n	80081f0 <refrigera+0x880>
				goto indi_off; //rult indi_off
 8007ffa:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 8007ffc:	e0f8      	b.n	80081f0 <refrigera+0x880>
				goto Indi_int; //jrule	Indi_int
 8007ffe:	46c0      	nop			@ (mov r8, r8)
             soloent (Plantilla [interdh]);	//call soloent		;	/ Muestra interdeshielo en horas
 8008000:	4b2d      	ldr	r3, [pc, #180]	@ (80080b8 <refrigera+0x748>)
 8008002:	2246      	movs	r2, #70	@ 0x46
 8008004:	5c9b      	ldrb	r3, [r3, r2]
 8008006:	0018      	movs	r0, r3
 8008008:	f7fb fe04 	bl	8003c14 <soloent>
             op_menu (eePlantilla [eeD1_Msg1], eePlantilla [eeD2_Msg1]);
 800800c:	4b49      	ldr	r3, [pc, #292]	@ (8008134 <refrigera+0x7c4>)
 800800e:	225f      	movs	r2, #95	@ 0x5f
 8008010:	5c9a      	ldrb	r2, [r3, r2]
 8008012:	4b48      	ldr	r3, [pc, #288]	@ (8008134 <refrigera+0x7c4>)
 8008014:	2160      	movs	r1, #96	@ 0x60
 8008016:	5c5b      	ldrb	r3, [r3, r1]
 8008018:	0019      	movs	r1, r3
 800801a:	0010      	movs	r0, r2
 800801c:	f7fc fcc2 	bl	80049a4 <op_menu>
             for(uint8_t k=0; k<8; k++){
 8008020:	2309      	movs	r3, #9
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	e00a      	b.n	8008040 <refrigera+0x6d0>
            	 datled[k] = 0;
 800802a:	2009      	movs	r0, #9
 800802c:	183b      	adds	r3, r7, r0
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	4a20      	ldr	r2, [pc, #128]	@ (80080b4 <refrigera+0x744>)
 8008032:	2100      	movs	r1, #0
 8008034:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 8008036:	183b      	adds	r3, r7, r0
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	183b      	adds	r3, r7, r0
 800803c:	3201      	adds	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	2309      	movs	r3, #9
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b07      	cmp	r3, #7
 8008048:	d9ef      	bls.n	800802a <refrigera+0x6ba>
             goto defindi;
 800804a:	e0d1      	b.n	80081f0 <refrigera+0x880>
				goto Indi_time;//rult Indi_time
 800804c:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla[dhmode] != 1 ){  /// ¿El deshielo es por gas caliente?
 800804e:	4b1a      	ldr	r3, [pc, #104]	@ (80080b8 <refrigera+0x748>)
 8008050:	2255      	movs	r2, #85	@ 0x55
 8008052:	5c9b      	ldrb	r3, [r3, r2]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d109      	bne.n	800806c <refrigera+0x6fc>
            soloent(Plantilla[timedh]);		//call soloent
 8008058:	4b17      	ldr	r3, [pc, #92]	@ (80080b8 <refrigera+0x748>)
 800805a:	2247      	movs	r2, #71	@ 0x47
 800805c:	5c9b      	ldrb	r3, [r3, r2]
 800805e:	0018      	movs	r0, r3
 8008060:	f7fb fdd8 	bl	8003c14 <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 8008064:	4b13      	ldr	r3, [pc, #76]	@ (80080b4 <refrigera+0x744>)
 8008066:	2201      	movs	r2, #1
 8008068:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800806a:	e0c1      	b.n	80081f0 <refrigera+0x880>
            	goto indica45;
 800806c:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800806e:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <refrigera+0x748>)
 8008070:	2247      	movs	r2, #71	@ 0x47
 8008072:	5c9b      	ldrb	r3, [r3, r2]
 8008074:	0018      	movs	r0, r3
 8008076:	f7fb fd97 	bl	8003ba8 <convad10>
            if(eePlantilla[eeprotype] == 1){//cp A,#1
 800807a:	4b2e      	ldr	r3, [pc, #184]	@ (8008134 <refrigera+0x7c4>)
 800807c:	2257      	movs	r2, #87	@ 0x57
 800807e:	5c9b      	ldrb	r3, [r3, r2]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d00c      	beq.n	800809e <refrigera+0x72e>
            if(eePlantilla[eeprotype] == 2){
 8008084:	4b2b      	ldr	r3, [pc, #172]	@ (8008134 <refrigera+0x7c4>)
 8008086:	2257      	movs	r2, #87	@ 0x57
 8008088:	5c9b      	ldrb	r3, [r3, r2]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d054      	beq.n	8008138 <refrigera+0x7c8>
indica_na:
 800808e:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 8008090:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <refrigera+0x750>)
 8008092:	2226      	movs	r2, #38	@ 0x26
 8008094:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 8008096:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <refrigera+0x754>)
 8008098:	2226      	movs	r2, #38	@ 0x26
 800809a:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800809c:	e054      	b.n	8008148 <refrigera+0x7d8>
            	goto indica_110v; //jreq indica_110v
 800809e:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <refrigera+0x750>)
 80080a2:	221f      	movs	r2, #31
 80080a4:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 80080a6:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <refrigera+0x754>)
 80080a8:	220b      	movs	r2, #11
 80080aa:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 80080ac:	e04c      	b.n	8008148 <refrigera+0x7d8>
 80080ae:	46c0      	nop			@ (mov r8, r8)
 80080b0:	20000ad4 	.word	0x20000ad4
 80080b4:	20000acc 	.word	0x20000acc
 80080b8:	200000bc 	.word	0x200000bc
 80080bc:	20000a8a 	.word	0x20000a8a
 80080c0:	20000a93 	.word	0x20000a93
 80080c4:	20000a92 	.word	0x20000a92
 80080c8:	20000b36 	.word	0x20000b36
 80080cc:	20000b38 	.word	0x20000b38
 80080d0:	20000aa6 	.word	0x20000aa6
 80080d4:	20000a9e 	.word	0x20000a9e
 80080d8:	20000aa9 	.word	0x20000aa9
 80080dc:	2000083e 	.word	0x2000083e
 80080e0:	20000a85 	.word	0x20000a85
 80080e4:	20000a86 	.word	0x20000a86
 80080e8:	20000af4 	.word	0x20000af4
 80080ec:	20000aa7 	.word	0x20000aa7
 80080f0:	20000ae0 	.word	0x20000ae0
 80080f4:	0803f083 	.word	0x0803f083
 80080f8:	20000b80 	.word	0x20000b80
 80080fc:	20000b1c 	.word	0x20000b1c
 8008100:	20000ab4 	.word	0x20000ab4
 8008104:	20000b24 	.word	0x20000b24
 8008108:	20000b78 	.word	0x20000b78
 800810c:	20000b6c 	.word	0x20000b6c
 8008110:	20000b6e 	.word	0x20000b6e
 8008114:	20000fe4 	.word	0x20000fe4
 8008118:	20000e24 	.word	0x20000e24
 800811c:	20000b14 	.word	0x20000b14
 8008120:	20000ac4 	.word	0x20000ac4
 8008124:	20000aaa 	.word	0x20000aaa
 8008128:	20000af2 	.word	0x20000af2
 800812c:	00000289 	.word	0x00000289
 8008130:	00000351 	.word	0x00000351
 8008134:	0803f000 	.word	0x0803f000
            	goto indica_220v; //jreq indica_220v
 8008138:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800813a:	4baf      	ldr	r3, [pc, #700]	@ (80083f8 <refrigera+0xa88>)
 800813c:	221f      	movs	r2, #31
 800813e:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 8008140:	4bae      	ldr	r3, [pc, #696]	@ (80083fc <refrigera+0xa8c>)
 8008142:	220a      	movs	r2, #10
 8008144:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 8008146:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 8008148:	4bab      	ldr	r3, [pc, #684]	@ (80083f8 <refrigera+0xa88>)
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	4bab      	ldr	r3, [pc, #684]	@ (80083fc <refrigera+0xa8c>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	0019      	movs	r1, r3
 8008152:	0010      	movs	r0, r2
 8008154:	f7fc fc26 	bl	80049a4 <op_menu>
             for(uint8_t k=0; k<8; k++){
 8008158:	2308      	movs	r3, #8
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	e00a      	b.n	8008178 <refrigera+0x808>
            	 datled[k] = 0;
 8008162:	2008      	movs	r0, #8
 8008164:	183b      	adds	r3, r7, r0
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	4aa5      	ldr	r2, [pc, #660]	@ (8008400 <refrigera+0xa90>)
 800816a:	2100      	movs	r1, #0
 800816c:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800816e:	183b      	adds	r3, r7, r0
 8008170:	781a      	ldrb	r2, [r3, #0]
 8008172:	183b      	adds	r3, r7, r0
 8008174:	3201      	adds	r2, #1
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	2308      	movs	r3, #8
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b07      	cmp	r3, #7
 8008180:	d9ef      	bls.n	8008162 <refrigera+0x7f2>
             goto defindi;
 8008182:	e035      	b.n	80081f0 <refrigera+0x880>
				goto Indi_sp; //rult Indi_sp
 8008184:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 8008186:	f7fb fba9 	bl	80038dc <sp_dpy>
			soloent(versionFirm1);		//call soloent
 800818a:	4b9e      	ldr	r3, [pc, #632]	@ (8008404 <refrigera+0xa94>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	0018      	movs	r0, r3
 8008190:	f7fb fd40 	bl	8003c14 <soloent>
			for(uint8_t k=0; k<8; k++){
 8008194:	1dfb      	adds	r3, r7, #7
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	e009      	b.n	80081b0 <refrigera+0x840>
				datled[k] = 0;
 800819c:	1dfb      	adds	r3, r7, #7
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	4a97      	ldr	r2, [pc, #604]	@ (8008400 <refrigera+0xa90>)
 80081a2:	2100      	movs	r1, #0
 80081a4:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 80081a6:	1dfb      	adds	r3, r7, #7
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	1dfb      	adds	r3, r7, #7
 80081ac:	3201      	adds	r2, #1
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	1dfb      	adds	r3, r7, #7
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b07      	cmp	r3, #7
 80081b6:	d9f1      	bls.n	800819c <refrigera+0x82c>
			goto defindi;
 80081b8:	e01a      	b.n	80081f0 <refrigera+0x880>
				goto Indi_dif; //rult Indi_dif
 80081ba:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 80081bc:	f7fb fb9a 	bl	80038f4 <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 80081c0:	4b91      	ldr	r3, [pc, #580]	@ (8008408 <refrigera+0xa98>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	0018      	movs	r0, r3
 80081c6:	f7fb fd25 	bl	8003c14 <soloent>
            for(uint8_t k=0; k<8; k++){
 80081ca:	1dbb      	adds	r3, r7, #6
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e009      	b.n	80081e6 <refrigera+0x876>
            	datled[k] = 0;
 80081d2:	1dbb      	adds	r3, r7, #6
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4a8a      	ldr	r2, [pc, #552]	@ (8008400 <refrigera+0xa90>)
 80081d8:	2100      	movs	r1, #0
 80081da:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 80081dc:	1dbb      	adds	r3, r7, #6
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	1dbb      	adds	r3, r7, #6
 80081e2:	3201      	adds	r2, #1
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	1dbb      	adds	r3, r7, #6
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b07      	cmp	r3, #7
 80081ec:	d9f1      	bls.n	80081d2 <refrigera+0x862>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 80081ee:	46c0      	nop			@ (mov r8, r8)
 80081f0:	f7fc fae0 	bl	80047b4 <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 80081f4:	4b85      	ldr	r3, [pc, #532]	@ (800840c <refrigera+0xa9c>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	db2a      	blt.n	8008254 <refrigera+0x8e4>
        	   goto indica_j00;
 80081fe:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 8008200:	4b83      	ldr	r3, [pc, #524]	@ (8008410 <refrigera+0xaa0>)
 8008202:	2259      	movs	r2, #89	@ 0x59
 8008204:	5c9b      	ldrb	r3, [r3, r2]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d104      	bne.n	8008214 <refrigera+0x8a4>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800820a:	4b82      	ldr	r3, [pc, #520]	@ (8008414 <refrigera+0xaa4>)
 800820c:	791b      	ldrb	r3, [r3, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01c      	beq.n	800824c <refrigera+0x8dc>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 8008212:	e018      	b.n	8008246 <refrigera+0x8d6>
            	goto indica_j00b;
 8008214:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 8008216:	4b80      	ldr	r3, [pc, #512]	@ (8008418 <refrigera+0xaa8>)
 8008218:	78db      	ldrb	r3, [r3, #3]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10e      	bne.n	800823c <refrigera+0x8cc>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 800821e:	4b7e      	ldr	r3, [pc, #504]	@ (8008418 <refrigera+0xaa8>)
 8008220:	789b      	ldrb	r3, [r3, #2]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <refrigera+0x8d0>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 8008226:	4b7b      	ldr	r3, [pc, #492]	@ (8008414 <refrigera+0xaa4>)
 8008228:	791b      	ldrb	r3, [r3, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <refrigera+0x8d4>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 800822e:	4b77      	ldr	r3, [pc, #476]	@ (800840c <refrigera+0xa9c>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	001a      	movs	r2, r3
 8008234:	2310      	movs	r3, #16
 8008236:	4013      	ands	r3, r2
 8008238:	d00a      	beq.n	8008250 <refrigera+0x8e0>
indica_j01:		ldadaptivo();	// call ldadaptivo
 800823a:	e004      	b.n	8008246 <refrigera+0x8d6>
            	 goto indica_j01;
 800823c:	46c0      	nop			@ (mov r8, r8)
 800823e:	e002      	b.n	8008246 <refrigera+0x8d6>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 8008240:	46c0      	nop			@ (mov r8, r8)
 8008242:	e000      	b.n	8008246 <refrigera+0x8d6>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 8008244:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 8008246:	f7fb faff 	bl	8003848 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800824a:	e5c3      	b.n	8007dd4 <refrigera+0x464>
            goto indica_j02;
 800824c:	46c0      	nop			@ (mov r8, r8)
 800824e:	e5c1      	b.n	8007dd4 <refrigera+0x464>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 8008250:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 8008252:	e5bf      	b.n	8007dd4 <refrigera+0x464>
           goto defind10;				/// No, pregunta por otro modo
 8008254:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 8008256:	4b71      	ldr	r3, [pc, #452]	@ (800841c <refrigera+0xaac>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d112      	bne.n	8008284 <refrigera+0x914>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 800825e:	4b6e      	ldr	r3, [pc, #440]	@ (8008418 <refrigera+0xaa8>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d010      	beq.n	8008288 <refrigera+0x918>
            	 goto indica_j04;
 8008266:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 8008268:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 800826a:	4b6d      	ldr	r3, [pc, #436]	@ (8008420 <refrigera+0xab0>)
 800826c:	2211      	movs	r2, #17
 800826e:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 8008270:	4b6c      	ldr	r3, [pc, #432]	@ (8008424 <refrigera+0xab4>)
 8008272:	2208      	movs	r2, #8
 8008274:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 8008276:	4b6c      	ldr	r3, [pc, #432]	@ (8008428 <refrigera+0xab8>)
 8008278:	2201      	movs	r2, #1
 800827a:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 800827c:	4b6b      	ldr	r3, [pc, #428]	@ (800842c <refrigera+0xabc>)
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e585      	b.n	8007d90 <refrigera+0x420>
            	 goto finindi;
 8008284:	46c0      	nop			@ (mov r8, r8)
 8008286:	e5e3      	b.n	8007e50 <refrigera+0x4e0>
             goto finindi;
 8008288:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 800828a:	e5e1      	b.n	8007e50 <refrigera+0x4e0>
            fauto[7] = 1;						//bset		fauto,#7
 800828c:	4b68      	ldr	r3, [pc, #416]	@ (8008430 <refrigera+0xac0>)
 800828e:	2201      	movs	r2, #1
 8008290:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 8008292:	e155      	b.n	8008540 <refrigera+0xbd0>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 8008294:	4b66      	ldr	r3, [pc, #408]	@ (8008430 <refrigera+0xac0>)
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d150      	bne.n	800833e <refrigera+0x9ce>
			wreg = num_ver;			//;		/ Versión del Firmware
 800829c:	4b56      	ldr	r3, [pc, #344]	@ (80083f8 <refrigera+0xa88>)
 800829e:	2205      	movs	r2, #5
 80082a0:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 80082a2:	f7fb fcd5 	bl	8003c50 <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 80082a6:	4b56      	ldr	r3, [pc, #344]	@ (8008400 <refrigera+0xa90>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 80082ac:	4b60      	ldr	r3, [pc, #384]	@ (8008430 <refrigera+0xac0>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 80082b2:	4b5b      	ldr	r3, [pc, #364]	@ (8008420 <refrigera+0xab0>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b10      	cmp	r3, #16
 80082b8:	d90c      	bls.n	80082d4 <refrigera+0x964>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 80082ba:	4b5e      	ldr	r3, [pc, #376]	@ (8008434 <refrigera+0xac4>)
 80082bc:	2110      	movs	r1, #16
 80082be:	0018      	movs	r0, r3
 80082c0:	f008 f9ca 	bl	8010658 <HAL_GPIO_ReadPin>
 80082c4:	1e03      	subs	r3, r0, #0
 80082c6:	d003      	beq.n	80082d0 <refrigera+0x960>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 80082c8:	4b53      	ldr	r3, [pc, #332]	@ (8008418 <refrigera+0xaa8>)
 80082ca:	2201      	movs	r2, #1
 80082cc:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 80082ce:	e020      	b.n	8008312 <refrigera+0x9a2>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 80082d0:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 80082d2:	e135      	b.n	8008540 <refrigera+0xbd0>
        	   goto door_det; //jrule door_det
 80082d4:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 80082d6:	4b52      	ldr	r3, [pc, #328]	@ (8008420 <refrigera+0xab0>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b0d      	cmp	r3, #13
 80082dc:	d915      	bls.n	800830a <refrigera+0x99a>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 80082de:	4b48      	ldr	r3, [pc, #288]	@ (8008400 <refrigera+0xa90>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 80082e4:	4b53      	ldr	r3, [pc, #332]	@ (8008434 <refrigera+0xac4>)
 80082e6:	2110      	movs	r1, #16
 80082e8:	0018      	movs	r0, r3
 80082ea:	f008 f9b5 	bl	8010658 <HAL_GPIO_ReadPin>
 80082ee:	1e03      	subs	r3, r0, #0
 80082f0:	d009      	beq.n	8008306 <refrigera+0x996>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 80082f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008430 <refrigera+0xac0>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 80082f8:	4b41      	ldr	r3, [pc, #260]	@ (8008400 <refrigera+0xa90>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 80082fe:	4b4e      	ldr	r3, [pc, #312]	@ (8008438 <refrigera+0xac8>)
 8008300:	2200      	movs	r2, #0
 8008302:	705a      	strb	r2, [r3, #1]
			goto defap;
 8008304:	e11c      	b.n	8008540 <refrigera+0xbd0>
            	goto no_det_door;				//	¿La puerta está abierta?
 8008306:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 8008308:	e11a      	b.n	8008540 <refrigera+0xbd0>
            	goto do_sec;
 800830a:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 800830c:	4b48      	ldr	r3, [pc, #288]	@ (8008430 <refrigera+0xac0>)
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 8008312:	2300      	movs	r3, #0
 8008314:	603b      	str	r3, [r7, #0]
 8008316:	e00e      	b.n	8008336 <refrigera+0x9c6>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 8008318:	4a3f      	ldr	r2, [pc, #252]	@ (8008418 <refrigera+0xaa8>)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	18d3      	adds	r3, r2, r3
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10e      	bne.n	8008342 <refrigera+0x9d2>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 8008324:	4a45      	ldr	r2, [pc, #276]	@ (800843c <refrigera+0xacc>)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	18d3      	adds	r3, r2, r3
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <refrigera+0x9d6>
			for(int k=0;k<8;k++){
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	3301      	adds	r3, #1
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b07      	cmp	r3, #7
 800833a:	dded      	ble.n	8008318 <refrigera+0x9a8>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 800833c:	e084      	b.n	8008448 <refrigera+0xad8>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 800833e:	46c0      	nop			@ (mov r8, r8)
 8008340:	e004      	b.n	800834c <refrigera+0x9dc>
           		   goto fail_det;//jrne fail_det
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	e002      	b.n	800834c <refrigera+0x9dc>
           		   goto fail_det; //jrne fail_det
 8008346:	46c0      	nop			@ (mov r8, r8)
 8008348:	e000      	b.n	800834c <refrigera+0x9dc>
				goto fail_det;
 800834a:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 800834c:	210a      	movs	r1, #10
 800834e:	200a      	movs	r0, #10
 8008350:	f7fc fb28 	bl	80049a4 <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 8008354:	4b3a      	ldr	r3, [pc, #232]	@ (8008440 <refrigera+0xad0>)
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b2db      	uxtb	r3, r3
 800835a:	001a      	movs	r2, r3
 800835c:	2340      	movs	r3, #64	@ 0x40
 800835e:	4013      	ands	r3, r2
 8008360:	d104      	bne.n	800836c <refrigera+0x9fc>
			op_menu (0x1F, 0X1F);
 8008362:	211f      	movs	r1, #31
 8008364:	201f      	movs	r0, #31
 8008366:	f7fc fb1d 	bl	80049a4 <op_menu>
 800836a:	e000      	b.n	800836e <refrigera+0x9fe>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 800836c:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 800836e:	4b30      	ldr	r3, [pc, #192]	@ (8008430 <refrigera+0xac0>)
 8008370:	2201      	movs	r2, #1
 8008372:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 8008374:	4b2e      	ldr	r3, [pc, #184]	@ (8008430 <refrigera+0xac0>)
 8008376:	2201      	movs	r2, #1
 8008378:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 800837a:	4b27      	ldr	r3, [pc, #156]	@ (8008418 <refrigera+0xaa8>)
 800837c:	79db      	ldrb	r3, [r3, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d107      	bne.n	8008392 <refrigera+0xa22>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 8008382:	4b25      	ldr	r3, [pc, #148]	@ (8008418 <refrigera+0xaa8>)
 8008384:	799b      	ldrb	r3, [r3, #6]
 8008386:	2201      	movs	r2, #1
 8008388:	4053      	eors	r3, r2
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d131      	bne.n	80083f4 <refrigera+0xa84>
dpy_volt_f:
 8008390:	e000      	b.n	8008394 <refrigera+0xa24>
        	   goto dpy_volt_f;
 8008392:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 8008394:	4b26      	ldr	r3, [pc, #152]	@ (8008430 <refrigera+0xac0>)
 8008396:	2200      	movs	r2, #0
 8008398:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 800839a:	4b22      	ldr	r3, [pc, #136]	@ (8008424 <refrigera+0xab4>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	001a      	movs	r2, r3
 80083a0:	2301      	movs	r3, #1
 80083a2:	4013      	ands	r3, r2
 80083a4:	d103      	bne.n	80083ae <refrigera+0xa3e>
              fauto[3] = 1;					//bset		fauto,#3
 80083a6:	4b22      	ldr	r3, [pc, #136]	@ (8008430 <refrigera+0xac0>)
 80083a8:	2201      	movs	r2, #1
 80083aa:	70da      	strb	r2, [r3, #3]
 80083ac:	e000      	b.n	80083b0 <refrigera+0xa40>
            	  goto no_dpy_f;
 80083ae:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 80083b0:	4b24      	ldr	r3, [pc, #144]	@ (8008444 <refrigera+0xad4>)
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	4b10      	ldr	r3, [pc, #64]	@ (80083f8 <refrigera+0xa88>)
 80083b6:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 80083b8:	4b0f      	ldr	r3, [pc, #60]	@ (80083f8 <refrigera+0xa88>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b63      	cmp	r3, #99	@ 0x63
 80083be:	d910      	bls.n	80083e2 <refrigera+0xa72>
				wreg = wreg - 100;
 80083c0:	4b0d      	ldr	r3, [pc, #52]	@ (80083f8 <refrigera+0xa88>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	3b64      	subs	r3, #100	@ 0x64
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	4b0b      	ldr	r3, [pc, #44]	@ (80083f8 <refrigera+0xa88>)
 80083ca:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <refrigera+0xa88>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b63      	cmp	r3, #99	@ 0x63
 80083d2:	d908      	bls.n	80083e6 <refrigera+0xa76>
				wreg = wreg - 100;
 80083d4:	4b08      	ldr	r3, [pc, #32]	@ (80083f8 <refrigera+0xa88>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	3b64      	subs	r3, #100	@ 0x64
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	4b06      	ldr	r3, [pc, #24]	@ (80083f8 <refrigera+0xa88>)
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e002      	b.n	80083e8 <refrigera+0xa78>
					goto under_100_f; //jrult under_100_f
 80083e2:	46c0      	nop			@ (mov r8, r8)
 80083e4:	e000      	b.n	80083e8 <refrigera+0xa78>
					goto under_100_f;
 80083e6:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 80083e8:	f7fb fc32 	bl	8003c50 <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 80083ec:	4b04      	ldr	r3, [pc, #16]	@ (8008400 <refrigera+0xa90>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 80083f2:	e0a5      	b.n	8008540 <refrigera+0xbd0>
        	   goto no_dpy_volt_f;
 80083f4:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 80083f6:	e0a3      	b.n	8008540 <refrigera+0xbd0>
 80083f8:	20000a93 	.word	0x20000a93
 80083fc:	20000a92 	.word	0x20000a92
 8008400:	20000acc 	.word	0x20000acc
 8008404:	0801e7f0 	.word	0x0801e7f0
 8008408:	0801e7f1 	.word	0x0801e7f1
 800840c:	20000a90 	.word	0x20000a90
 8008410:	200000bc 	.word	0x200000bc
 8008414:	20000ae0 	.word	0x20000ae0
 8008418:	20000ac4 	.word	0x20000ac4
 800841c:	20000a91 	.word	0x20000a91
 8008420:	20000aa8 	.word	0x20000aa8
 8008424:	20000b64 	.word	0x20000b64
 8008428:	20000ad4 	.word	0x20000ad4
 800842c:	20000a89 	.word	0x20000a89
 8008430:	20000b14 	.word	0x20000b14
 8008434:	50000400 	.word	0x50000400
 8008438:	20000b1c 	.word	0x20000b1c
 800843c:	20000abc 	.word	0x20000abc
 8008440:	20000a8a 	.word	0x20000a8a
 8008444:	20000b0a 	.word	0x20000b0a
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 8008448:	4bc7      	ldr	r3, [pc, #796]	@ (8008768 <refrigera+0xdf8>)
 800844a:	789b      	ldrb	r3, [r3, #2]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d100      	bne.n	8008452 <refrigera+0xae2>
 8008450:	e77b      	b.n	800834a <refrigera+0x9da>
					goto on_compres;
 8008452:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 8008454:	4bc5      	ldr	r3, [pc, #788]	@ (800876c <refrigera+0xdfc>)
 8008456:	2201      	movs	r2, #1
 8008458:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 800845a:	4bc5      	ldr	r3, [pc, #788]	@ (8008770 <refrigera+0xe00>)
 800845c:	2201      	movs	r2, #1
 800845e:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 8008460:	4bc4      	ldr	r3, [pc, #784]	@ (8008774 <refrigera+0xe04>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b0b      	cmp	r3, #11
 8008466:	d864      	bhi.n	8008532 <refrigera+0xbc2>
            	 	 goto on_desh;
 8008468:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 800846a:	4bc0      	ldr	r3, [pc, #768]	@ (800876c <refrigera+0xdfc>)
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 8008470:	49bf      	ldr	r1, [pc, #764]	@ (8008770 <refrigera+0xe00>)
 8008472:	48bf      	ldr	r0, [pc, #764]	@ (8008770 <refrigera+0xe00>)
 8008474:	2302      	movs	r3, #2
 8008476:	2203      	movs	r2, #3
 8008478:	f001 fefc 	bl	800a274 <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 800847c:	4bbb      	ldr	r3, [pc, #748]	@ (800876c <refrigera+0xdfc>)
 800847e:	2201      	movs	r2, #1
 8008480:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 8008482:	4bbb      	ldr	r3, [pc, #748]	@ (8008770 <refrigera+0xe00>)
 8008484:	2201      	movs	r2, #1
 8008486:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 8008488:	4bba      	ldr	r3, [pc, #744]	@ (8008774 <refrigera+0xe04>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b09      	cmp	r3, #9
 800848e:	d852      	bhi.n	8008536 <refrigera+0xbc6>
            		goto on_vent;//jrule on_vent
 8008490:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 8008492:	4bb6      	ldr	r3, [pc, #728]	@ (800876c <refrigera+0xdfc>)
 8008494:	2200      	movs	r2, #0
 8008496:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 8008498:	49b5      	ldr	r1, [pc, #724]	@ (8008770 <refrigera+0xe00>)
 800849a:	48b5      	ldr	r0, [pc, #724]	@ (8008770 <refrigera+0xe00>)
 800849c:	2303      	movs	r3, #3
 800849e:	2207      	movs	r2, #7
 80084a0:	f001 fee8 	bl	800a274 <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 80084a4:	4bb4      	ldr	r3, [pc, #720]	@ (8008778 <refrigera+0xe08>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 80084aa:	4bb2      	ldr	r3, [pc, #712]	@ (8008774 <refrigera+0xe04>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b07      	cmp	r3, #7
 80084b0:	d843      	bhi.n	800853a <refrigera+0xbca>
					goto on_lamp; //jrule	on_lamp
 80084b2:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 80084b4:	4bb0      	ldr	r3, [pc, #704]	@ (8008778 <refrigera+0xe08>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 80084ba:	49ad      	ldr	r1, [pc, #692]	@ (8008770 <refrigera+0xe00>)
 80084bc:	48ac      	ldr	r0, [pc, #688]	@ (8008770 <refrigera+0xe00>)
 80084be:	2307      	movs	r3, #7
 80084c0:	2204      	movs	r2, #4
 80084c2:	f001 fed7 	bl	800a274 <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 80084c6:	4ba9      	ldr	r3, [pc, #676]	@ (800876c <refrigera+0xdfc>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 80084cc:	4ba9      	ldr	r3, [pc, #676]	@ (8008774 <refrigera+0xe04>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	d834      	bhi.n	800853e <refrigera+0xbce>
					goto dpy_volt; //jrule	dpy_volt
 80084d4:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 80084d6:	4ba5      	ldr	r3, [pc, #660]	@ (800876c <refrigera+0xdfc>)
 80084d8:	2200      	movs	r2, #0
 80084da:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 80084dc:	4ba4      	ldr	r3, [pc, #656]	@ (8008770 <refrigera+0xe00>)
 80084de:	2200      	movs	r2, #0
 80084e0:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 80084e2:	4ba6      	ldr	r3, [pc, #664]	@ (800877c <refrigera+0xe0c>)
 80084e4:	781a      	ldrb	r2, [r3, #0]
 80084e6:	4ba6      	ldr	r3, [pc, #664]	@ (8008780 <refrigera+0xe10>)
 80084e8:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 80084ea:	4ba5      	ldr	r3, [pc, #660]	@ (8008780 <refrigera+0xe10>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b63      	cmp	r3, #99	@ 0x63
 80084f0:	d910      	bls.n	8008514 <refrigera+0xba4>
				wreg = wreg - 100;
 80084f2:	4ba3      	ldr	r3, [pc, #652]	@ (8008780 <refrigera+0xe10>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	3b64      	subs	r3, #100	@ 0x64
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4ba1      	ldr	r3, [pc, #644]	@ (8008780 <refrigera+0xe10>)
 80084fc:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 80084fe:	4ba0      	ldr	r3, [pc, #640]	@ (8008780 <refrigera+0xe10>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b63      	cmp	r3, #99	@ 0x63
 8008504:	d908      	bls.n	8008518 <refrigera+0xba8>
				wreg = wreg - 100;
 8008506:	4b9e      	ldr	r3, [pc, #632]	@ (8008780 <refrigera+0xe10>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	3b64      	subs	r3, #100	@ 0x64
 800850c:	b2da      	uxtb	r2, r3
 800850e:	4b9c      	ldr	r3, [pc, #624]	@ (8008780 <refrigera+0xe10>)
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e002      	b.n	800851a <refrigera+0xbaa>
					goto under_100; //jrult	under_100
 8008514:	46c0      	nop			@ (mov r8, r8)
 8008516:	e000      	b.n	800851a <refrigera+0xbaa>
					goto under_100;
 8008518:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 800851a:	f7fb fb99 	bl	8003c50 <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 800851e:	4b94      	ldr	r3, [pc, #592]	@ (8008770 <refrigera+0xe00>)
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 8008524:	4b90      	ldr	r3, [pc, #576]	@ (8008768 <refrigera+0xdf8>)
 8008526:	2201      	movs	r2, #1
 8008528:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 800852a:	4b8f      	ldr	r3, [pc, #572]	@ (8008768 <refrigera+0xdf8>)
 800852c:	2200      	movs	r2, #0
 800852e:	71da      	strb	r2, [r3, #7]
 8008530:	e006      	b.n	8008540 <refrigera+0xbd0>
             	 goto defap;
 8008532:	46c0      	nop			@ (mov r8, r8)
 8008534:	e004      	b.n	8008540 <refrigera+0xbd0>
            	goto defap;
 8008536:	46c0      	nop			@ (mov r8, r8)
 8008538:	e002      	b.n	8008540 <refrigera+0xbd0>
				goto defap;
 800853a:	46c0      	nop			@ (mov r8, r8)
 800853c:	e000      	b.n	8008540 <refrigera+0xbd0>
				goto defap;
 800853e:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 8008540:	f7fc f938 	bl	80047b4 <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 8008544:	4b8f      	ldr	r3, [pc, #572]	@ (8008784 <refrigera+0xe14>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	001a      	movs	r2, r3
 800854a:	2301      	movs	r3, #1
 800854c:	4013      	ands	r3, r2
 800854e:	d00c      	beq.n	800856a <refrigera+0xbfa>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 8008550:	46c0      	nop			@ (mov r8, r8)
 8008552:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 8008554:	4b8c      	ldr	r3, [pc, #560]	@ (8008788 <refrigera+0xe18>)
 8008556:	2201      	movs	r2, #1
 8008558:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 800855a:	4b8c      	ldr	r3, [pc, #560]	@ (800878c <refrigera+0xe1c>)
 800855c:	2202      	movs	r2, #2
 800855e:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 8008560:	4b8b      	ldr	r3, [pc, #556]	@ (8008790 <refrigera+0xe20>)
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 8008566:	f7ff fc13 	bl	8007d90 <refrigera+0x420>
					goto finap;
 800856a:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 800856c:	e470      	b.n	8007e50 <refrigera+0x4e0>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 800856e:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 8008570:	4b7f      	ldr	r3, [pc, #508]	@ (8008770 <refrigera+0xe00>)
 8008572:	2200      	movs	r2, #0
 8008574:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 8008576:	4b87      	ldr	r3, [pc, #540]	@ (8008794 <refrigera+0xe24>)
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d000      	beq.n	8008580 <refrigera+0xc10>
 800857e:	e060      	b.n	8008642 <refrigera+0xcd2>
					goto ask_door_fan; //jreq ask_door_fan
 8008580:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 8008582:	4b85      	ldr	r3, [pc, #532]	@ (8008798 <refrigera+0xe28>)
 8008584:	225b      	movs	r2, #91	@ 0x5b
 8008586:	5c9b      	ldrb	r3, [r3, r2]
 8008588:	001a      	movs	r2, r3
 800858a:	2302      	movs	r3, #2
 800858c:	4013      	ands	r3, r2
 800858e:	d108      	bne.n	80085a2 <refrigera+0xc32>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 8008590:	4b82      	ldr	r3, [pc, #520]	@ (800879c <refrigera+0xe2c>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d006      	beq.n	80085a6 <refrigera+0xc36>
               if(retvent == 0){ //tnz retvent
 8008598:	4b81      	ldr	r3, [pc, #516]	@ (80087a0 <refrigera+0xe30>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d152      	bne.n	8008646 <refrigera+0xcd6>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 80085a0:	e002      	b.n	80085a8 <refrigera+0xc38>
            	   goto ask_fan_on;
 80085a2:	46c0      	nop			@ (mov r8, r8)
 80085a4:	e000      	b.n	80085a8 <refrigera+0xc38>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 80085a6:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 80085a8:	4b7e      	ldr	r3, [pc, #504]	@ (80087a4 <refrigera+0xe34>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2201      	movs	r2, #1
 80085ae:	4053      	eors	r3, r2
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d104      	bne.n	80085c0 <refrigera+0xc50>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 80085b6:	4b7c      	ldr	r3, [pc, #496]	@ (80087a8 <refrigera+0xe38>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d033      	beq.n	8008626 <refrigera+0xcb6>
					goto fan_off; //jrne fan_off
 80085be:	e047      	b.n	8008650 <refrigera+0xce0>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 80085c0:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 80085c2:	4b75      	ldr	r3, [pc, #468]	@ (8008798 <refrigera+0xe28>)
 80085c4:	2268      	movs	r2, #104	@ 0x68
 80085c6:	5c9a      	ldrb	r2, [r3, r2]
 80085c8:	4b6d      	ldr	r3, [pc, #436]	@ (8008780 <refrigera+0xe10>)
 80085ca:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 80085cc:	f7fb fb54 	bl	8003c78 <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 80085d0:	4b76      	ldr	r3, [pc, #472]	@ (80087ac <refrigera+0xe3c>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d038      	beq.n	800864a <refrigera+0xcda>
					goto ciclof_00;					// No, pregunta por parte baja
 80085d8:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 80085da:	4b69      	ldr	r3, [pc, #420]	@ (8008780 <refrigera+0xe10>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d023      	beq.n	800862a <refrigera+0xcba>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 80085e2:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 80085e4:	4b6f      	ldr	r3, [pc, #444]	@ (80087a4 <refrigera+0xe34>)
 80085e6:	78db      	ldrb	r3, [r3, #3]
 80085e8:	2201      	movs	r2, #1
 80085ea:	4053      	eors	r3, r2
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00e      	beq.n	8008610 <refrigera+0xca0>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 80085f2:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 80085f4:	4b6e      	ldr	r3, [pc, #440]	@ (80087b0 <refrigera+0xe40>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d128      	bne.n	800864e <refrigera+0xcde>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 80085fc:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 80085fe:	4b6d      	ldr	r3, [pc, #436]	@ (80087b4 <refrigera+0xe44>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d113      	bne.n	800862e <refrigera+0xcbe>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 8008606:	4b69      	ldr	r3, [pc, #420]	@ (80087ac <refrigera+0xe3c>)
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	4b6a      	ldr	r3, [pc, #424]	@ (80087b4 <refrigera+0xe44>)
 800860c:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 800860e:	e011      	b.n	8008634 <refrigera+0xcc4>
				goto ciclo_on;					/// Si, ciclo de encendido
 8008610:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 8008612:	4b68      	ldr	r3, [pc, #416]	@ (80087b4 <refrigera+0xe44>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <refrigera+0xcc2>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 800861a:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 800861c:	4b58      	ldr	r3, [pc, #352]	@ (8008780 <refrigera+0xe10>)
 800861e:	781a      	ldrb	r2, [r3, #0]
 8008620:	4b63      	ldr	r3, [pc, #396]	@ (80087b0 <refrigera+0xe40>)
 8008622:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 8008624:	e014      	b.n	8008650 <refrigera+0xce0>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 8008626:	46c0      	nop			@ (mov r8, r8)
 8008628:	e004      	b.n	8008634 <refrigera+0xcc4>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	e002      	b.n	8008634 <refrigera+0xcc4>
					goto fan_on; //jrne fan_on
 800862e:	46c0      	nop			@ (mov r8, r8)
 8008630:	e000      	b.n	8008634 <refrigera+0xcc4>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 8008632:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 8008634:	4b50      	ldr	r3, [pc, #320]	@ (8008778 <refrigera+0xe08>)
 8008636:	2201      	movs	r2, #1
 8008638:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 800863a:	4b4d      	ldr	r3, [pc, #308]	@ (8008770 <refrigera+0xe00>)
 800863c:	2201      	movs	r2, #1
 800863e:	71da      	strb	r2, [r3, #7]
 8008640:	e006      	b.n	8008650 <refrigera+0xce0>
				goto fan_off;
 8008642:	46c0      	nop			@ (mov r8, r8)
 8008644:	e004      	b.n	8008650 <refrigera+0xce0>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 8008646:	46c0      	nop			@ (mov r8, r8)
 8008648:	e002      	b.n	8008650 <refrigera+0xce0>
				goto fan_off;							// Si, manten apagado el ventilador
 800864a:	46c0      	nop			@ (mov r8, r8)
 800864c:	e000      	b.n	8008650 <refrigera+0xce0>
				goto fan_off;						// No, manten apagado el ventilador
 800864e:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 8008650:	4b59      	ldr	r3, [pc, #356]	@ (80087b8 <refrigera+0xe48>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	001a      	movs	r2, r3
 8008656:	4b59      	ldr	r3, [pc, #356]	@ (80087bc <refrigera+0xe4c>)
 8008658:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 800865a:	4b59      	ldr	r3, [pc, #356]	@ (80087c0 <refrigera+0xe50>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d107      	bne.n	8008672 <refrigera+0xd02>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 8008662:	4b57      	ldr	r3, [pc, #348]	@ (80087c0 <refrigera+0xe50>)
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2201      	movs	r2, #1
 8008668:	4053      	eors	r3, r2
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <refrigera+0xd08>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 8008670:	e000      	b.n	8008674 <refrigera+0xd04>
            	   goto control_j02;
 8008672:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 8008674:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 8008676:	e029      	b.n	80086cc <refrigera+0xd5c>
            	   goto control_j03;
 8008678:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 800867a:	4b52      	ldr	r3, [pc, #328]	@ (80087c4 <refrigera+0xe54>)
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d13a      	bne.n	80086f8 <refrigera+0xd88>
ctl13:
 8008682:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 8008684:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 8008686:	f7fb f897 	bl	80037b8 <tdev_to_Word>
 800868a:	0003      	movs	r3, r0
 800868c:	b21a      	sxth	r2, r3
 800868e:	4b4e      	ldr	r3, [pc, #312]	@ (80087c8 <refrigera+0xe58>)
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b21b      	sxth	r3, r3
 8008694:	429a      	cmp	r2, r3
 8008696:	db09      	blt.n	80086ac <refrigera+0xd3c>
ctl15:			//	ld			A,tminstopl;
 8008698:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 800869a:	4b4c      	ldr	r3, [pc, #304]	@ (80087cc <refrigera+0xe5c>)
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d12c      	bne.n	80086fc <refrigera+0xd8c>
				if(drp_comph != 0){
 80086a2:	4b4b      	ldr	r3, [pc, #300]	@ (80087d0 <refrigera+0xe60>)
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01e      	beq.n	80086e8 <refrigera+0xd78>
					goto defctl;
 80086aa:	e02c      	b.n	8008706 <refrigera+0xd96>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 80086ac:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 80086ae:	f7fb f883 	bl	80037b8 <tdev_to_Word>
 80086b2:	0003      	movs	r3, r0
 80086b4:	b21a      	sxth	r2, r3
 80086b6:	4b47      	ldr	r3, [pc, #284]	@ (80087d4 <refrigera+0xe64>)
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b21b      	sxth	r3, r3
 80086bc:	429a      	cmp	r2, r3
 80086be:	dc0d      	bgt.n	80086dc <refrigera+0xd6c>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 80086c0:	492b      	ldr	r1, [pc, #172]	@ (8008770 <refrigera+0xe00>)
 80086c2:	4845      	ldr	r0, [pc, #276]	@ (80087d8 <refrigera+0xe68>)
 80086c4:	2306      	movs	r3, #6
 80086c6:	2207      	movs	r2, #7
 80086c8:	f001 fdd4 	bl	800a274 <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 80086cc:	4b35      	ldr	r3, [pc, #212]	@ (80087a4 <refrigera+0xe34>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d015      	beq.n	8008700 <refrigera+0xd90>
					goto control_j04;
 80086d4:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 80086d6:	f7fb f927 	bl	8003928 <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 80086da:	e014      	b.n	8008706 <refrigera+0xd96>
					goto equal;
 80086dc:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 80086de:	4b31      	ldr	r3, [pc, #196]	@ (80087a4 <refrigera+0xe34>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00e      	beq.n	8008704 <refrigera+0xd94>
					goto control_j05;
 80086e6:	e000      	b.n	80086ea <refrigera+0xd7a>
				goto on_comp;						// Enciende el compresor
 80086e8:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 80086ea:	4b20      	ldr	r3, [pc, #128]	@ (800876c <refrigera+0xdfc>)
 80086ec:	2201      	movs	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 80086f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008770 <refrigera+0xe00>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	709a      	strb	r2, [r3, #2]
				goto defctl;
 80086f6:	e006      	b.n	8008706 <refrigera+0xd96>
             		 goto defctl;
 80086f8:	46c0      	nop			@ (mov r8, r8)
 80086fa:	e004      	b.n	8008706 <refrigera+0xd96>
					goto defctl;					// No, espera
 80086fc:	46c0      	nop			@ (mov r8, r8)
 80086fe:	e002      	b.n	8008706 <refrigera+0xd96>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 8008700:	46c0      	nop			@ (mov r8, r8)
 8008702:	e000      	b.n	8008706 <refrigera+0xd96>
        		goto defctl;
 8008704:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 8008706:	4b24      	ldr	r3, [pc, #144]	@ (8008798 <refrigera+0xe28>)
 8008708:	224d      	movs	r2, #77	@ 0x4d
 800870a:	2100      	movs	r1, #0
 800870c:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 800870e:	4b22      	ldr	r3, [pc, #136]	@ (8008798 <refrigera+0xe28>)
 8008710:	224d      	movs	r2, #77	@ 0x4d
 8008712:	5c9b      	ldrb	r3, [r3, r2]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d100      	bne.n	800871a <refrigera+0xdaa>
 8008718:	e0e7      	b.n	80088ea <refrigera+0xf7a>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800871a:	4b22      	ldr	r3, [pc, #136]	@ (80087a4 <refrigera+0xe34>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d162      	bne.n	80087e8 <refrigera+0xe78>
				STM8_16_X = Plantilla[timeDefi] *60;
 8008722:	4b1d      	ldr	r3, [pc, #116]	@ (8008798 <refrigera+0xe28>)
 8008724:	224d      	movs	r2, #77	@ 0x4d
 8008726:	5c9b      	ldrb	r3, [r3, r2]
 8008728:	001a      	movs	r2, r3
 800872a:	233c      	movs	r3, #60	@ 0x3c
 800872c:	4353      	muls	r3, r2
 800872e:	b29a      	uxth	r2, r3
 8008730:	4b2a      	ldr	r3, [pc, #168]	@ (80087dc <refrigera+0xe6c>)
 8008732:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 8008734:	4b29      	ldr	r3, [pc, #164]	@ (80087dc <refrigera+0xe6c>)
 8008736:	881a      	ldrh	r2, [r3, #0]
 8008738:	4b29      	ldr	r3, [pc, #164]	@ (80087e0 <refrigera+0xe70>)
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d006      	beq.n	800874e <refrigera+0xdde>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 8008740:	4b15      	ldr	r3, [pc, #84]	@ (8008798 <refrigera+0xe28>)
 8008742:	2259      	movs	r2, #89	@ 0x59
 8008744:	5c9b      	ldrb	r3, [r3, r2]
 8008746:	2b03      	cmp	r3, #3
 8008748:	d000      	beq.n	800874c <refrigera+0xddc>
 800874a:	e075      	b.n	8008838 <refrigera+0xec8>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 800874c:	e09d      	b.n	800888a <refrigera+0xf1a>
					goto loadDefiCnts;
 800874e:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 8008750:	4b22      	ldr	r3, [pc, #136]	@ (80087dc <refrigera+0xe6c>)
 8008752:	881a      	ldrh	r2, [r3, #0]
 8008754:	4b22      	ldr	r3, [pc, #136]	@ (80087e0 <refrigera+0xe70>)
 8008756:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 8008758:	4b20      	ldr	r3, [pc, #128]	@ (80087dc <refrigera+0xe6c>)
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	4b20      	ldr	r3, [pc, #128]	@ (80087e4 <refrigera+0xe74>)
 8008762:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 8008764:	e0c6      	b.n	80088f4 <refrigera+0xf84>
 8008766:	46c0      	nop			@ (mov r8, r8)
 8008768:	20000b14 	.word	0x20000b14
 800876c:	20000ae0 	.word	0x20000ae0
 8008770:	20000acc 	.word	0x20000acc
 8008774:	20000aa8 	.word	0x20000aa8
 8008778:	20000b1c 	.word	0x20000b1c
 800877c:	20000b0a 	.word	0x20000b0a
 8008780:	20000a93 	.word	0x20000a93
 8008784:	20000a90 	.word	0x20000a90
 8008788:	20000ab4 	.word	0x20000ab4
 800878c:	20000a89 	.word	0x20000a89
 8008790:	20000ad4 	.word	0x20000ad4
 8008794:	20000b38 	.word	0x20000b38
 8008798:	200000bc 	.word	0x200000bc
 800879c:	20000b63 	.word	0x20000b63
 80087a0:	20000aa6 	.word	0x20000aa6
 80087a4:	20000a94 	.word	0x20000a94
 80087a8:	20000ab0 	.word	0x20000ab0
 80087ac:	20000a92 	.word	0x20000a92
 80087b0:	20000b35 	.word	0x20000b35
 80087b4:	20000b34 	.word	0x20000b34
 80087b8:	20000af2 	.word	0x20000af2
 80087bc:	20000af6 	.word	0x20000af6
 80087c0:	20000ac4 	.word	0x20000ac4
 80087c4:	20000abc 	.word	0x20000abc
 80087c8:	20000aea 	.word	0x20000aea
 80087cc:	20000a9e 	.word	0x20000a9e
 80087d0:	20000b36 	.word	0x20000b36
 80087d4:	20000ae8 	.word	0x20000ae8
 80087d8:	20000b78 	.word	0x20000b78
 80087dc:	2000083e 	.word	0x2000083e
 80087e0:	20000b72 	.word	0x20000b72
 80087e4:	20000b76 	.word	0x20000b76
					goto chkTimeDefi;
 80087e8:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 80087ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008a88 <refrigera+0x1118>)
 80087ec:	2259      	movs	r2, #89	@ 0x59
 80087ee:	5c9b      	ldrb	r3, [r3, r2]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d03c      	beq.n	800886e <refrigera+0xefe>
chkTimeDefi_1s:
 80087f4:	46c0      	nop			@ (mov r8, r8)
 80087f6:	e002      	b.n	80087fe <refrigera+0xe8e>
                	   goto chkTimeDefi_1s;
 80087f8:	46c0      	nop			@ (mov r8, r8)
 80087fa:	e000      	b.n	80087fe <refrigera+0xe8e>
                	   goto chkTimeDefi_1s;
 80087fc:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 80087fe:	4ba3      	ldr	r3, [pc, #652]	@ (8008a8c <refrigera+0x111c>)
 8008800:	791b      	ldrb	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d000      	beq.n	8008808 <refrigera+0xe98>
 8008806:	e067      	b.n	80088d8 <refrigera+0xf68>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 8008808:	4ba0      	ldr	r3, [pc, #640]	@ (8008a8c <refrigera+0x111c>)
 800880a:	795b      	ldrb	r3, [r3, #5]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d000      	beq.n	8008812 <refrigera+0xea2>
 8008810:	e064      	b.n	80088dc <refrigera+0xf6c>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 8008812:	4b9f      	ldr	r3, [pc, #636]	@ (8008a90 <refrigera+0x1120>)
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	4b9f      	ldr	r3, [pc, #636]	@ (8008a94 <refrigera+0x1124>)
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d106      	bne.n	800882c <refrigera+0xebc>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800881e:	f7fa ffcb 	bl	80037b8 <tdev_to_Word>
 8008822:	0003      	movs	r3, r0
 8008824:	b29a      	uxth	r2, r3
 8008826:	4b9c      	ldr	r3, [pc, #624]	@ (8008a98 <refrigera+0x1128>)
 8008828:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 800882a:	e063      	b.n	80088f4 <refrigera+0xf84>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 800882c:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800882e:	4b98      	ldr	r3, [pc, #608]	@ (8008a90 <refrigera+0x1120>)
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d15b      	bne.n	80088ee <refrigera+0xf7e>
chkTimeDefi_1s_02:
 8008836:	e000      	b.n	800883a <refrigera+0xeca>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 8008838:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 800883a:	4b97      	ldr	r3, [pc, #604]	@ (8008a98 <refrigera+0x1128>)
 800883c:	881a      	ldrh	r2, [r3, #0]
 800883e:	4b97      	ldr	r3, [pc, #604]	@ (8008a9c <refrigera+0x112c>)
 8008840:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 8008842:	4b96      	ldr	r3, [pc, #600]	@ (8008a9c <refrigera+0x112c>)
 8008844:	881c      	ldrh	r4, [r3, #0]
 8008846:	f7fa ffb7 	bl	80037b8 <tdev_to_Word>
 800884a:	0003      	movs	r3, r0
 800884c:	b29b      	uxth	r3, r3
 800884e:	1ae3      	subs	r3, r4, r3
 8008850:	b29a      	uxth	r2, r3
 8008852:	4b92      	ldr	r3, [pc, #584]	@ (8008a9c <refrigera+0x112c>)
 8008854:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 8008856:	4b92      	ldr	r3, [pc, #584]	@ (8008aa0 <refrigera+0x1130>)
 8008858:	0018      	movs	r0, r3
 800885a:	f7fa ffc5 	bl	80037e8 <TwoByteInArrayToWord>
 800885e:	0003      	movs	r3, r0
 8008860:	b21a      	sxth	r2, r3
 8008862:	4b8e      	ldr	r3, [pc, #568]	@ (8008a9c <refrigera+0x112c>)
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b21b      	sxth	r3, r3
 8008868:	429a      	cmp	r2, r3
 800886a:	dc28      	bgt.n	80088be <refrigera+0xf4e>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 800886c:	e039      	b.n	80088e2 <refrigera+0xf72>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 800886e:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 8008870:	4b86      	ldr	r3, [pc, #536]	@ (8008a8c <refrigera+0x111c>)
 8008872:	791b      	ldrb	r3, [r3, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1bf      	bne.n	80087f8 <refrigera+0xe88>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 8008878:	4b84      	ldr	r3, [pc, #528]	@ (8008a8c <refrigera+0x111c>)
 800887a:	795b      	ldrb	r3, [r3, #5]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1bd      	bne.n	80087fc <refrigera+0xe8c>
                   if(cntDefi_H != 1){ //cpw X,#1
 8008880:	4b83      	ldr	r3, [pc, #524]	@ (8008a90 <refrigera+0x1120>)
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d134      	bne.n	80088f2 <refrigera+0xf82>
chkTimeDefi_3s_01:
 8008888:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 800888a:	f7fa ff95 	bl	80037b8 <tdev_to_Word>
 800888e:	0003      	movs	r3, r0
 8008890:	b29a      	uxth	r2, r3
 8008892:	4b82      	ldr	r3, [pc, #520]	@ (8008a9c <refrigera+0x112c>)
 8008894:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 8008896:	4b81      	ldr	r3, [pc, #516]	@ (8008a9c <refrigera+0x112c>)
 8008898:	881a      	ldrh	r2, [r3, #0]
 800889a:	4b82      	ldr	r3, [pc, #520]	@ (8008aa4 <refrigera+0x1134>)
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	4b7e      	ldr	r3, [pc, #504]	@ (8008a9c <refrigera+0x112c>)
 80088a4:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 80088a6:	4b7e      	ldr	r3, [pc, #504]	@ (8008aa0 <refrigera+0x1130>)
 80088a8:	0018      	movs	r0, r3
 80088aa:	f7fa ff9d 	bl	80037e8 <TwoByteInArrayToWord>
 80088ae:	0003      	movs	r3, r0
 80088b0:	b21a      	sxth	r2, r3
 80088b2:	4b7a      	ldr	r3, [pc, #488]	@ (8008a9c <refrigera+0x112c>)
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	429a      	cmp	r2, r3
 80088ba:	dd11      	ble.n	80088e0 <refrigera+0xf70>
alarmDefi:
 80088bc:	e000      	b.n	80088c0 <refrigera+0xf50>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 80088be:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 80088c0:	4b72      	ldr	r3, [pc, #456]	@ (8008a8c <refrigera+0x111c>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 80088c6:	4b78      	ldr	r3, [pc, #480]	@ (8008aa8 <refrigera+0x1138>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	701a      	strb	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 80088cc:	4b76      	ldr	r3, [pc, #472]	@ (8008aa8 <refrigera+0x1138>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	001a      	movs	r2, r3
 80088d2:	4b76      	ldr	r3, [pc, #472]	@ (8008aac <refrigera+0x113c>)
 80088d4:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 80088d6:	e00d      	b.n	80088f4 <refrigera+0xf84>
                	  goto noAlarmDefi;
 80088d8:	46c0      	nop			@ (mov r8, r8)
 80088da:	e002      	b.n	80088e2 <refrigera+0xf72>
                	  goto noAlarmDefi;
 80088dc:	46c0      	nop			@ (mov r8, r8)
 80088de:	e000      	b.n	80088e2 <refrigera+0xf72>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 80088e0:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 80088e2:	4b6a      	ldr	r3, [pc, #424]	@ (8008a8c <refrigera+0x111c>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	719a      	strb	r2, [r3, #6]
 80088e8:	e004      	b.n	80088f4 <refrigera+0xf84>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 80088ea:	46c0      	nop			@ (mov r8, r8)
 80088ec:	e002      	b.n	80088f4 <refrigera+0xf84>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 80088ee:	46c0      	nop			@ (mov r8, r8)
 80088f0:	e000      	b.n	80088f4 <refrigera+0xf84>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 80088f2:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 80088f4:	f7fa ff60 	bl	80037b8 <tdev_to_Word>
 80088f8:	0003      	movs	r3, r0
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	4b67      	ldr	r3, [pc, #412]	@ (8008a9c <refrigera+0x112c>)
 80088fe:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 8008900:	4b6b      	ldr	r3, [pc, #428]	@ (8008ab0 <refrigera+0x1140>)
 8008902:	0018      	movs	r0, r3
 8008904:	f7fa ff70 	bl	80037e8 <TwoByteInArrayToWord>
 8008908:	0003      	movs	r3, r0
 800890a:	b21a      	sxth	r2, r3
 800890c:	4b63      	ldr	r3, [pc, #396]	@ (8008a9c <refrigera+0x112c>)
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	b21b      	sxth	r3, r3
 8008912:	429a      	cmp	r2, r3
 8008914:	dc02      	bgt.n	800891c <refrigera+0xfac>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 8008916:	f7fa ff97 	bl	8003848 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 800891a:	e058      	b.n	80089ce <refrigera+0x105e>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 800891c:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800891e:	4b5a      	ldr	r3, [pc, #360]	@ (8008a88 <refrigera+0x1118>)
 8008920:	2259      	movs	r2, #89	@ 0x59
 8008922:	5c9b      	ldrb	r3, [r3, r2]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d03c      	beq.n	80089a2 <refrigera+0x1032>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 8008928:	4b62      	ldr	r3, [pc, #392]	@ (8008ab4 <refrigera+0x1144>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	b29b      	uxth	r3, r3
 8008930:	4a61      	ldr	r2, [pc, #388]	@ (8008ab8 <refrigera+0x1148>)
 8008932:	7812      	ldrb	r2, [r2, #0]
 8008934:	189b      	adds	r3, r3, r2
 8008936:	b29a      	uxth	r2, r3
 8008938:	4b58      	ldr	r3, [pc, #352]	@ (8008a9c <refrigera+0x112c>)
 800893a:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 800893c:	4b5f      	ldr	r3, [pc, #380]	@ (8008abc <refrigera+0x114c>)
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d130      	bne.n	80089a6 <refrigera+0x1036>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 8008944:	4b5d      	ldr	r3, [pc, #372]	@ (8008abc <refrigera+0x114c>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d12e      	bne.n	80089aa <refrigera+0x103a>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 800894c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ac0 <refrigera+0x1150>)
 800894e:	0018      	movs	r0, r3
 8008950:	f7fa ff4a 	bl	80037e8 <TwoByteInArrayToWord>
 8008954:	0003      	movs	r3, r0
 8008956:	b21a      	sxth	r2, r3
 8008958:	4b50      	ldr	r3, [pc, #320]	@ (8008a9c <refrigera+0x112c>)
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b21b      	sxth	r3, r3
 800895e:	429a      	cmp	r2, r3
 8008960:	dd25      	ble.n	80089ae <refrigera+0x103e>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 8008962:	4b58      	ldr	r3, [pc, #352]	@ (8008ac4 <refrigera+0x1154>)
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	4a57      	ldr	r2, [pc, #348]	@ (8008ac8 <refrigera+0x1158>)
 800896c:	7812      	ldrb	r2, [r2, #0]
 800896e:	189b      	adds	r3, r3, r2
 8008970:	b29a      	uxth	r2, r3
 8008972:	4b4a      	ldr	r3, [pc, #296]	@ (8008a9c <refrigera+0x112c>)
 8008974:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 8008976:	4b51      	ldr	r3, [pc, #324]	@ (8008abc <refrigera+0x114c>)
 8008978:	78db      	ldrb	r3, [r3, #3]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d119      	bne.n	80089b2 <refrigera+0x1042>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 800897e:	4b4f      	ldr	r3, [pc, #316]	@ (8008abc <refrigera+0x114c>)
 8008980:	789b      	ldrb	r3, [r3, #2]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d117      	bne.n	80089b6 <refrigera+0x1046>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 8008986:	4b51      	ldr	r3, [pc, #324]	@ (8008acc <refrigera+0x115c>)
 8008988:	0018      	movs	r0, r3
 800898a:	f7fa ff2d 	bl	80037e8 <TwoByteInArrayToWord>
 800898e:	0003      	movs	r3, r0
 8008990:	b21a      	sxth	r2, r3
 8008992:	4b42      	ldr	r3, [pc, #264]	@ (8008a9c <refrigera+0x112c>)
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b21b      	sxth	r3, r3
 8008998:	429a      	cmp	r2, r3
 800899a:	dd01      	ble.n	80089a0 <refrigera+0x1030>
 800899c:	f7ff fa24 	bl	8007de8 <refrigera+0x478>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 80089a0:	e00a      	b.n	80089b8 <refrigera+0x1048>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	e008      	b.n	80089b8 <refrigera+0x1048>
                	  goto noDeshXTemp;
 80089a6:	46c0      	nop			@ (mov r8, r8)
 80089a8:	e006      	b.n	80089b8 <refrigera+0x1048>
                	  goto noDeshXTemp;
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	e004      	b.n	80089b8 <refrigera+0x1048>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 80089ae:	46c0      	nop			@ (mov r8, r8)
 80089b0:	e002      	b.n	80089b8 <refrigera+0x1048>
                	  goto noDeshXTemp;
 80089b2:	46c0      	nop			@ (mov r8, r8)
 80089b4:	e000      	b.n	80089b8 <refrigera+0x1048>
                	  goto noDeshXTemp;
 80089b6:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 80089b8:	f7fb fefc 	bl	80047b4 <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 80089bc:	4b44      	ldr	r3, [pc, #272]	@ (8008ad0 <refrigera+0x1160>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	001a      	movs	r2, r3
 80089c2:	2301      	movs	r3, #1
 80089c4:	4013      	ands	r3, r2
 80089c6:	d001      	beq.n	80089cc <refrigera+0x105c>
 80089c8:	f7ff fa10 	bl	8007dec <refrigera+0x47c>
            	   goto control_j06;
 80089cc:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 80089ce:	4b41      	ldr	r3, [pc, #260]	@ (8008ad4 <refrigera+0x1164>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d108      	bne.n	80089e8 <refrigera+0x1078>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 80089d6:	4b40      	ldr	r3, [pc, #256]	@ (8008ad8 <refrigera+0x1168>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d007      	beq.n	80089ee <refrigera+0x107e>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 80089de:	4b3e      	ldr	r3, [pc, #248]	@ (8008ad8 <refrigera+0x1168>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 80089e4:	f7ff fa03 	bl	8007dee <refrigera+0x47e>
					goto finctl; //jrne	finctl;
 80089e8:	46c0      	nop			@ (mov r8, r8)
 80089ea:	f7ff fa31 	bl	8007e50 <refrigera+0x4e0>
            		goto control_j07;
 80089ee:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 80089f0:	f7ff fa2e 	bl	8007e50 <refrigera+0x4e0>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 80089f4:	4b24      	ldr	r3, [pc, #144]	@ (8008a88 <refrigera+0x1118>)
 80089f6:	2255      	movs	r2, #85	@ 0x55
 80089f8:	5c9b      	ldrb	r3, [r3, r2]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d103      	bne.n	8008a06 <refrigera+0x1096>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 80089fe:	4b37      	ldr	r3, [pc, #220]	@ (8008adc <refrigera+0x116c>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e000      	b.n	8008a08 <refrigera+0x1098>
					goto deshie20;				/// No
 8008a06:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 8008a08:	4b1f      	ldr	r3, [pc, #124]	@ (8008a88 <refrigera+0x1118>)
 8008a0a:	2255      	movs	r2, #85	@ 0x55
 8008a0c:	5c9b      	ldrb	r3, [r3, r2]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d114      	bne.n	8008a3c <refrigera+0x10cc>
deshXvent:
 8008a12:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 8008a14:	4b1c      	ldr	r3, [pc, #112]	@ (8008a88 <refrigera+0x1118>)
 8008a16:	225b      	movs	r2, #91	@ 0x5b
 8008a18:	5c9b      	ldrb	r3, [r3, r2]
 8008a1a:	001a      	movs	r2, r3
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d104      	bne.n	8008a2c <refrigera+0x10bc>
				if(retvent != 0){ //tnz retvent
 8008a22:	4b2f      	ldr	r3, [pc, #188]	@ (8008ae0 <refrigera+0x1170>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10d      	bne.n	8008a46 <refrigera+0x10d6>
deshie24:
 8008a2a:	e000      	b.n	8008a2e <refrigera+0x10be>
					goto deshie24;
 8008a2c:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 8008a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ae4 <refrigera+0x1174>)
 8008a30:	2201      	movs	r2, #1
 8008a32:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 8008a34:	4b2c      	ldr	r3, [pc, #176]	@ (8008ae8 <refrigera+0x1178>)
 8008a36:	2201      	movs	r2, #1
 8008a38:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 8008a3a:	e005      	b.n	8008a48 <refrigera+0x10d8>
					goto deshie25;				//;		/ No, acciona el deshielo
 8008a3c:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 8008a3e:	4b27      	ldr	r3, [pc, #156]	@ (8008adc <refrigera+0x116c>)
 8008a40:	2201      	movs	r2, #1
 8008a42:	705a      	strb	r2, [r3, #1]
 8008a44:	e000      	b.n	8008a48 <refrigera+0x10d8>
					goto deshie30; //jrne		deshie30;		/ No, espera
 8008a46:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 8008a48:	4b28      	ldr	r3, [pc, #160]	@ (8008aec <refrigera+0x117c>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a88 <refrigera+0x1118>)
 8008a50:	224c      	movs	r2, #76	@ 0x4c
 8008a52:	5c9a      	ldrb	r2, [r3, r2]
 8008a54:	4b26      	ldr	r3, [pc, #152]	@ (8008af0 <refrigera+0x1180>)
 8008a56:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 8008a58:	4b26      	ldr	r3, [pc, #152]	@ (8008af4 <refrigera+0x1184>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	001a      	movs	r2, r3
 8008a5e:	4b13      	ldr	r3, [pc, #76]	@ (8008aac <refrigera+0x113c>)
 8008a60:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 8008a62:	f7fb fea7 	bl	80047b4 <buildmode>
				 if((0x13 & modo ) == 0){
 8008a66:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad0 <refrigera+0x1160>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2213      	movs	r2, #19
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <refrigera+0x1108>
 8008a74:	f7ff f990 	bl	8007d98 <refrigera+0x428>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 8008a78:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 8008a7a:	46c0      	nop			@ (mov r8, r8)
 8008a7c:	f7ff f9e8 	bl	8007e50 <refrigera+0x4e0>


main_refrigera:


}
 8008a80:	46c0      	nop			@ (mov r8, r8)
 8008a82:	46bd      	mov	sp, r7
 8008a84:	b005      	add	sp, #20
 8008a86:	bd90      	pop	{r4, r7, pc}
 8008a88:	200000bc 	.word	0x200000bc
 8008a8c:	20000abc 	.word	0x20000abc
 8008a90:	20000b72 	.word	0x20000b72
 8008a94:	20000b76 	.word	0x20000b76
 8008a98:	20000b74 	.word	0x20000b74
 8008a9c:	2000083e 	.word	0x2000083e
 8008aa0:	200000ef 	.word	0x200000ef
 8008aa4:	20000b90 	.word	0x20000b90
 8008aa8:	20000af2 	.word	0x20000af2
 8008aac:	20000af6 	.word	0x20000af6
 8008ab0:	200000cf 	.word	0x200000cf
 8008ab4:	20000aec 	.word	0x20000aec
 8008ab8:	20000aed 	.word	0x20000aed
 8008abc:	20000ac4 	.word	0x20000ac4
 8008ac0:	200000d3 	.word	0x200000d3
 8008ac4:	20000aee 	.word	0x20000aee
 8008ac8:	20000aef 	.word	0x20000aef
 8008acc:	200000d1 	.word	0x200000d1
 8008ad0:	20000a90 	.word	0x20000a90
 8008ad4:	20000aa7 	.word	0x20000aa7
 8008ad8:	20000b8c 	.word	0x20000b8c
 8008adc:	20000ae0 	.word	0x20000ae0
 8008ae0:	20000aa6 	.word	0x20000aa6
 8008ae4:	20000b1c 	.word	0x20000b1c
 8008ae8:	20000acc 	.word	0x20000acc
 8008aec:	20000a91 	.word	0x20000a91
 8008af0:	20000b03 	.word	0x20000b03
 8008af4:	20000af4 	.word	0x20000af4

08008af8 <st_refri>:

void st_refri (void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 8008afc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <st_refri+0x30>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <st_refri+0x30>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 8008b08:	4b07      	ldr	r3, [pc, #28]	@ (8008b28 <st_refri+0x30>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 8008b0e:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <st_refri+0x34>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 8008b14:	f7fa ff08 	bl	8003928 <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 8008b18:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <st_refri+0x38>)
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 8008b1e:	f7fa fe93 	bl	8003848 <ldadaptivo>
}
 8008b22:	46c0      	nop			@ (mov r8, r8)
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000ae0 	.word	0x20000ae0
 8008b2c:	20000b1c 	.word	0x20000b1c
 8008b30:	20000ad4 	.word	0x20000ad4

08008b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b78 <HAL_MspInit+0x44>)
 8008b3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b78 <HAL_MspInit+0x44>)
 8008b40:	2180      	movs	r1, #128	@ 0x80
 8008b42:	0549      	lsls	r1, r1, #21
 8008b44:	430a      	orrs	r2, r1
 8008b46:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b48:	4b0b      	ldr	r3, [pc, #44]	@ (8008b78 <HAL_MspInit+0x44>)
 8008b4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b4c:	2380      	movs	r3, #128	@ 0x80
 8008b4e:	055b      	lsls	r3, r3, #21
 8008b50:	4013      	ands	r3, r2
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b56:	4b08      	ldr	r3, [pc, #32]	@ (8008b78 <HAL_MspInit+0x44>)
 8008b58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b5a:	4b07      	ldr	r3, [pc, #28]	@ (8008b78 <HAL_MspInit+0x44>)
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	661a      	str	r2, [r3, #96]	@ 0x60
 8008b62:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <HAL_MspInit+0x44>)
 8008b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b66:	2201      	movs	r2, #1
 8008b68:	4013      	ands	r3, r2
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b6e:	46c0      	nop			@ (mov r8, r8)
 8008b70:	46bd      	mov	sp, r7
 8008b72:	b002      	add	sp, #8
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	46c0      	nop			@ (mov r8, r8)
 8008b78:	40021000 	.word	0x40021000

08008b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008b7c:	b590      	push	{r4, r7, lr}
 8008b7e:	b09d      	sub	sp, #116	@ 0x74
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b84:	235c      	movs	r3, #92	@ 0x5c
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	0018      	movs	r0, r3
 8008b8a:	2314      	movs	r3, #20
 8008b8c:	001a      	movs	r2, r3
 8008b8e:	2100      	movs	r1, #0
 8008b90:	f00f f80c 	bl	8017bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b94:	2418      	movs	r4, #24
 8008b96:	193b      	adds	r3, r7, r4
 8008b98:	0018      	movs	r0, r3
 8008b9a:	2344      	movs	r3, #68	@ 0x44
 8008b9c:	001a      	movs	r2, r3
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	f00f f804 	bl	8017bac <memset>
  if(hadc->Instance==ADC1)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8008c98 <HAL_ADC_MspInit+0x11c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d16f      	bne.n	8008c8e <HAL_ADC_MspInit+0x112>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008bae:	193b      	adds	r3, r7, r4
 8008bb0:	2280      	movs	r2, #128	@ 0x80
 8008bb2:	01d2      	lsls	r2, r2, #7
 8008bb4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8008bb6:	193b      	adds	r3, r7, r4
 8008bb8:	2200      	movs	r2, #0
 8008bba:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008bbc:	193b      	adds	r3, r7, r4
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f00a fdf6 	bl	80137b0 <HAL_RCCEx_PeriphCLKConfig>
 8008bc4:	1e03      	subs	r3, r0, #0
 8008bc6:	d001      	beq.n	8008bcc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8008bc8:	f7fe fec6 	bl	8007958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008bcc:	4b33      	ldr	r3, [pc, #204]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008bce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008bd0:	4b32      	ldr	r3, [pc, #200]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008bd2:	2180      	movs	r1, #128	@ 0x80
 8008bd4:	0349      	lsls	r1, r1, #13
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	661a      	str	r2, [r3, #96]	@ 0x60
 8008bda:	4b30      	ldr	r3, [pc, #192]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008bdc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008bde:	2380      	movs	r3, #128	@ 0x80
 8008be0:	035b      	lsls	r3, r3, #13
 8008be2:	4013      	ands	r3, r2
 8008be4:	617b      	str	r3, [r7, #20]
 8008be6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008be8:	4b2c      	ldr	r3, [pc, #176]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008bea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bec:	4b2b      	ldr	r3, [pc, #172]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008bee:	2104      	movs	r1, #4
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008bf4:	4b29      	ldr	r3, [pc, #164]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bf8:	2204      	movs	r2, #4
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c00:	4b26      	ldr	r3, [pc, #152]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008c02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c04:	4b25      	ldr	r3, [pc, #148]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008c06:	2101      	movs	r1, #1
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008c0c:	4b23      	ldr	r3, [pc, #140]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c10:	2201      	movs	r2, #1
 8008c12:	4013      	ands	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c18:	4b20      	ldr	r3, [pc, #128]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008c1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008c1e:	2102      	movs	r1, #2
 8008c20:	430a      	orrs	r2, r1
 8008c22:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008c24:	4b1d      	ldr	r3, [pc, #116]	@ (8008c9c <HAL_ADC_MspInit+0x120>)
 8008c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c28:	2202      	movs	r2, #2
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	60bb      	str	r3, [r7, #8]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN9
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PB1     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008c30:	245c      	movs	r4, #92	@ 0x5c
 8008c32:	193b      	adds	r3, r7, r4
 8008c34:	2203      	movs	r2, #3
 8008c36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c38:	193b      	adds	r3, r7, r4
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c3e:	193b      	adds	r3, r7, r4
 8008c40:	2200      	movs	r2, #0
 8008c42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c44:	193b      	adds	r3, r7, r4
 8008c46:	4a16      	ldr	r2, [pc, #88]	@ (8008ca0 <HAL_ADC_MspInit+0x124>)
 8008c48:	0019      	movs	r1, r3
 8008c4a:	0010      	movs	r0, r2
 8008c4c:	f007 fab0 	bl	80101b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008c50:	193b      	adds	r3, r7, r4
 8008c52:	22e0      	movs	r2, #224	@ 0xe0
 8008c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c56:	193b      	adds	r3, r7, r4
 8008c58:	2203      	movs	r2, #3
 8008c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5c:	193b      	adds	r3, r7, r4
 8008c5e:	2200      	movs	r2, #0
 8008c60:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c62:	193a      	adds	r2, r7, r4
 8008c64:	23a0      	movs	r3, #160	@ 0xa0
 8008c66:	05db      	lsls	r3, r3, #23
 8008c68:	0011      	movs	r1, r2
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	f007 faa0 	bl	80101b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008c70:	193b      	adds	r3, r7, r4
 8008c72:	2202      	movs	r2, #2
 8008c74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c76:	193b      	adds	r3, r7, r4
 8008c78:	2203      	movs	r2, #3
 8008c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7c:	193b      	adds	r3, r7, r4
 8008c7e:	2200      	movs	r2, #0
 8008c80:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c82:	193b      	adds	r3, r7, r4
 8008c84:	4a07      	ldr	r2, [pc, #28]	@ (8008ca4 <HAL_ADC_MspInit+0x128>)
 8008c86:	0019      	movs	r1, r3
 8008c88:	0010      	movs	r0, r2
 8008c8a:	f007 fa91 	bl	80101b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8008c8e:	46c0      	nop			@ (mov r8, r8)
 8008c90:	46bd      	mov	sp, r7
 8008c92:	b01d      	add	sp, #116	@ 0x74
 8008c94:	bd90      	pop	{r4, r7, pc}
 8008c96:	46c0      	nop			@ (mov r8, r8)
 8008c98:	40012400 	.word	0x40012400
 8008c9c:	40021000 	.word	0x40021000
 8008ca0:	50000800 	.word	0x50000800
 8008ca4:	50000400 	.word	0x50000400

08008ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ca8:	b590      	push	{r4, r7, lr}
 8008caa:	b09b      	sub	sp, #108	@ 0x6c
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb0:	2354      	movs	r3, #84	@ 0x54
 8008cb2:	18fb      	adds	r3, r7, r3
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	2314      	movs	r3, #20
 8008cb8:	001a      	movs	r2, r3
 8008cba:	2100      	movs	r1, #0
 8008cbc:	f00e ff76 	bl	8017bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008cc0:	2410      	movs	r4, #16
 8008cc2:	193b      	adds	r3, r7, r4
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	2344      	movs	r3, #68	@ 0x44
 8008cc8:	001a      	movs	r2, r3
 8008cca:	2100      	movs	r1, #0
 8008ccc:	f00e ff6e 	bl	8017bac <memset>
  if(hi2c->Instance==I2C1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a50      	ldr	r2, [pc, #320]	@ (8008e18 <HAL_I2C_MspInit+0x170>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d000      	beq.n	8008cdc <HAL_I2C_MspInit+0x34>
 8008cda:	e098      	b.n	8008e0e <HAL_I2C_MspInit+0x166>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008cdc:	193b      	adds	r3, r7, r4
 8008cde:	2220      	movs	r2, #32
 8008ce0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008ce2:	193b      	adds	r3, r7, r4
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008ce8:	193b      	adds	r3, r7, r4
 8008cea:	0018      	movs	r0, r3
 8008cec:	f00a fd60 	bl	80137b0 <HAL_RCCEx_PeriphCLKConfig>
 8008cf0:	1e03      	subs	r3, r0, #0
 8008cf2:	d001      	beq.n	8008cf8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8008cf4:	f7fe fe30 	bl	8007958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cf8:	4b48      	ldr	r3, [pc, #288]	@ (8008e1c <HAL_I2C_MspInit+0x174>)
 8008cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cfc:	4b47      	ldr	r3, [pc, #284]	@ (8008e1c <HAL_I2C_MspInit+0x174>)
 8008cfe:	2102      	movs	r1, #2
 8008d00:	430a      	orrs	r2, r1
 8008d02:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008d04:	4b45      	ldr	r3, [pc, #276]	@ (8008e1c <HAL_I2C_MspInit+0x174>)
 8008d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d08:	2202      	movs	r2, #2
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008d10:	2154      	movs	r1, #84	@ 0x54
 8008d12:	187b      	adds	r3, r7, r1
 8008d14:	22c0      	movs	r2, #192	@ 0xc0
 8008d16:	0092      	lsls	r2, r2, #2
 8008d18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d1a:	187b      	adds	r3, r7, r1
 8008d1c:	2212      	movs	r2, #18
 8008d1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d20:	187b      	adds	r3, r7, r1
 8008d22:	2200      	movs	r2, #0
 8008d24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d26:	187b      	adds	r3, r7, r1
 8008d28:	2203      	movs	r2, #3
 8008d2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008d2c:	187b      	adds	r3, r7, r1
 8008d2e:	2204      	movs	r2, #4
 8008d30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d32:	187b      	adds	r3, r7, r1
 8008d34:	4a3a      	ldr	r2, [pc, #232]	@ (8008e20 <HAL_I2C_MspInit+0x178>)
 8008d36:	0019      	movs	r1, r3
 8008d38:	0010      	movs	r0, r2
 8008d3a:	f007 fa39 	bl	80101b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d3e:	4b37      	ldr	r3, [pc, #220]	@ (8008e1c <HAL_I2C_MspInit+0x174>)
 8008d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d42:	4b36      	ldr	r3, [pc, #216]	@ (8008e1c <HAL_I2C_MspInit+0x174>)
 8008d44:	2180      	movs	r1, #128	@ 0x80
 8008d46:	0389      	lsls	r1, r1, #14
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d4c:	4b33      	ldr	r3, [pc, #204]	@ (8008e1c <HAL_I2C_MspInit+0x174>)
 8008d4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d50:	2380      	movs	r3, #128	@ 0x80
 8008d52:	039b      	lsls	r3, r3, #14
 8008d54:	4013      	ands	r3, r2
 8008d56:	60bb      	str	r3, [r7, #8]
 8008d58:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8008d5a:	4b32      	ldr	r3, [pc, #200]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d5c:	4a32      	ldr	r2, [pc, #200]	@ (8008e28 <HAL_I2C_MspInit+0x180>)
 8008d5e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8008d60:	4b30      	ldr	r3, [pc, #192]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d62:	2209      	movs	r2, #9
 8008d64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d66:	4b2f      	ldr	r3, [pc, #188]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d72:	4b2c      	ldr	r3, [pc, #176]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d74:	2280      	movs	r2, #128	@ 0x80
 8008d76:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d78:	4b2a      	ldr	r3, [pc, #168]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d7e:	4b29      	ldr	r3, [pc, #164]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008d84:	4b27      	ldr	r3, [pc, #156]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008d8a:	4b26      	ldr	r3, [pc, #152]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8008d90:	4b24      	ldr	r3, [pc, #144]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008d92:	0018      	movs	r0, r3
 8008d94:	f006 fabe 	bl	800f314 <HAL_DMA_Init>
 8008d98:	1e03      	subs	r3, r0, #0
 8008d9a:	d001      	beq.n	8008da0 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 8008d9c:	f7fe fddc 	bl	8007958 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a20      	ldr	r2, [pc, #128]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008da4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008da6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e24 <HAL_I2C_MspInit+0x17c>)
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8008dac:	4b1f      	ldr	r3, [pc, #124]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dae:	4a20      	ldr	r2, [pc, #128]	@ (8008e30 <HAL_I2C_MspInit+0x188>)
 8008db0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8008db2:	4b1e      	ldr	r3, [pc, #120]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008db4:	220a      	movs	r2, #10
 8008db6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008db8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dba:	2210      	movs	r2, #16
 8008dbc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008dc4:	4b19      	ldr	r3, [pc, #100]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dc6:	2280      	movs	r2, #128	@ 0x80
 8008dc8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008dca:	4b18      	ldr	r3, [pc, #96]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008dd0:	4b16      	ldr	r3, [pc, #88]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008dd6:	4b15      	ldr	r3, [pc, #84]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008ddc:	4b13      	ldr	r3, [pc, #76]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008de2:	4b12      	ldr	r3, [pc, #72]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008de4:	0018      	movs	r0, r3
 8008de6:	f006 fa95 	bl	800f314 <HAL_DMA_Init>
 8008dea:	1e03      	subs	r3, r0, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 8008dee:	f7fe fdb3 	bl	8007958 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a0d      	ldr	r2, [pc, #52]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008df6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008df8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e2c <HAL_I2C_MspInit+0x184>)
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2100      	movs	r1, #0
 8008e02:	2017      	movs	r0, #23
 8008e04:	f006 fa44 	bl	800f290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8008e08:	2017      	movs	r0, #23
 8008e0a:	f006 fa56 	bl	800f2ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b01b      	add	sp, #108	@ 0x6c
 8008e14:	bd90      	pop	{r4, r7, pc}
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	40005400 	.word	0x40005400
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	50000400 	.word	0x50000400
 8008e24:	200003f8 	.word	0x200003f8
 8008e28:	40020080 	.word	0x40020080
 8008e2c:	20000458 	.word	0x20000458
 8008e30:	4002006c 	.word	0x4002006c

08008e34 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a13      	ldr	r2, [pc, #76]	@ (8008e90 <HAL_I2C_MspDeInit+0x5c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d120      	bne.n	8008e88 <HAL_I2C_MspDeInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008e46:	4b13      	ldr	r3, [pc, #76]	@ (8008e94 <HAL_I2C_MspDeInit+0x60>)
 8008e48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008e4a:	4b12      	ldr	r3, [pc, #72]	@ (8008e94 <HAL_I2C_MspDeInit+0x60>)
 8008e4c:	4912      	ldr	r1, [pc, #72]	@ (8008e98 <HAL_I2C_MspDeInit+0x64>)
 8008e4e:	400a      	ands	r2, r1
 8008e50:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8008e52:	2380      	movs	r3, #128	@ 0x80
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	4a11      	ldr	r2, [pc, #68]	@ (8008e9c <HAL_I2C_MspDeInit+0x68>)
 8008e58:	0019      	movs	r1, r3
 8008e5a:	0010      	movs	r0, r2
 8008e5c:	f007 fb1c 	bl	8010498 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8008e60:	2380      	movs	r3, #128	@ 0x80
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4a0d      	ldr	r2, [pc, #52]	@ (8008e9c <HAL_I2C_MspDeInit+0x68>)
 8008e66:	0019      	movs	r1, r3
 8008e68:	0010      	movs	r0, r2
 8008e6a:	f007 fb15 	bl	8010498 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e72:	0018      	movs	r0, r3
 8008e74:	f006 fafa 	bl	800f46c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f006 faf5 	bl	800f46c <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8008e82:	2017      	movs	r0, #23
 8008e84:	f006 fa29 	bl	800f2da <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008e88:	46c0      	nop			@ (mov r8, r8)
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b002      	add	sp, #8
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40005400 	.word	0x40005400
 8008e94:	40021000 	.word	0x40021000
 8008e98:	ffdfffff 	.word	0xffdfffff
 8008e9c:	50000400 	.word	0x50000400

08008ea0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b095      	sub	sp, #84	@ 0x54
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008ea8:	240c      	movs	r4, #12
 8008eaa:	193b      	adds	r3, r7, r4
 8008eac:	0018      	movs	r0, r3
 8008eae:	2344      	movs	r3, #68	@ 0x44
 8008eb0:	001a      	movs	r2, r3
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	f00e fe7a 	bl	8017bac <memset>
  if(hrtc->Instance==RTC)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8008f28 <HAL_RTC_MspInit+0x88>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d12e      	bne.n	8008f20 <HAL_RTC_MspInit+0x80>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008ec2:	193b      	adds	r3, r7, r4
 8008ec4:	2280      	movs	r2, #128	@ 0x80
 8008ec6:	0212      	lsls	r2, r2, #8
 8008ec8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008eca:	193b      	adds	r3, r7, r4
 8008ecc:	2280      	movs	r2, #128	@ 0x80
 8008ece:	0092      	lsls	r2, r2, #2
 8008ed0:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008ed2:	193b      	adds	r3, r7, r4
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f00a fc6b 	bl	80137b0 <HAL_RCCEx_PeriphCLKConfig>
 8008eda:	1e03      	subs	r3, r0, #0
 8008edc:	d001      	beq.n	8008ee2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8008ede:	f7fe fd3b 	bl	8007958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008ee2:	4a12      	ldr	r2, [pc, #72]	@ (8008f2c <HAL_RTC_MspInit+0x8c>)
 8008ee4:	2390      	movs	r3, #144	@ 0x90
 8008ee6:	58d3      	ldr	r3, [r2, r3]
 8008ee8:	4910      	ldr	r1, [pc, #64]	@ (8008f2c <HAL_RTC_MspInit+0x8c>)
 8008eea:	2280      	movs	r2, #128	@ 0x80
 8008eec:	0212      	lsls	r2, r2, #8
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	2290      	movs	r2, #144	@ 0x90
 8008ef2:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8008f2c <HAL_RTC_MspInit+0x8c>)
 8008ef6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <HAL_RTC_MspInit+0x8c>)
 8008efa:	2180      	movs	r1, #128	@ 0x80
 8008efc:	00c9      	lsls	r1, r1, #3
 8008efe:	430a      	orrs	r2, r1
 8008f00:	659a      	str	r2, [r3, #88]	@ 0x58
 8008f02:	4b0a      	ldr	r3, [pc, #40]	@ (8008f2c <HAL_RTC_MspInit+0x8c>)
 8008f04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f06:	2380      	movs	r3, #128	@ 0x80
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8008f10:	2200      	movs	r2, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	2002      	movs	r0, #2
 8008f16:	f006 f9bb 	bl	800f290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8008f1a:	2002      	movs	r0, #2
 8008f1c:	f006 f9cd 	bl	800f2ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8008f20:	46c0      	nop			@ (mov r8, r8)
 8008f22:	46bd      	mov	sp, r7
 8008f24:	b015      	add	sp, #84	@ 0x54
 8008f26:	bd90      	pop	{r4, r7, pc}
 8008f28:	40002800 	.word	0x40002800
 8008f2c:	40021000 	.word	0x40021000

08008f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a12      	ldr	r2, [pc, #72]	@ (8008f88 <HAL_TIM_Base_MspInit+0x58>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d10c      	bne.n	8008f5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008f42:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <HAL_TIM_Base_MspInit+0x5c>)
 8008f44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f46:	4b11      	ldr	r3, [pc, #68]	@ (8008f8c <HAL_TIM_Base_MspInit+0x5c>)
 8008f48:	2102      	movs	r1, #2
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8008f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f8c <HAL_TIM_Base_MspInit+0x5c>)
 8008f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f52:	2202      	movs	r2, #2
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8008f5a:	e010      	b.n	8008f7e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a0b      	ldr	r2, [pc, #44]	@ (8008f90 <HAL_TIM_Base_MspInit+0x60>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d10b      	bne.n	8008f7e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008f66:	4b09      	ldr	r3, [pc, #36]	@ (8008f8c <HAL_TIM_Base_MspInit+0x5c>)
 8008f68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f6a:	4b08      	ldr	r3, [pc, #32]	@ (8008f8c <HAL_TIM_Base_MspInit+0x5c>)
 8008f6c:	2110      	movs	r1, #16
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	659a      	str	r2, [r3, #88]	@ 0x58
 8008f72:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <HAL_TIM_Base_MspInit+0x5c>)
 8008f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f76:	2210      	movs	r2, #16
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60bb      	str	r3, [r7, #8]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
}
 8008f7e:	46c0      	nop			@ (mov r8, r8)
 8008f80:	46bd      	mov	sp, r7
 8008f82:	b004      	add	sp, #16
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	46c0      	nop			@ (mov r8, r8)
 8008f88:	40000400 	.word	0x40000400
 8008f8c:	40021000 	.word	0x40021000
 8008f90:	40001000 	.word	0x40001000

08008f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b089      	sub	sp, #36	@ 0x24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f9c:	240c      	movs	r4, #12
 8008f9e:	193b      	adds	r3, r7, r4
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	2314      	movs	r3, #20
 8008fa4:	001a      	movs	r2, r3
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	f00e fe00 	bl	8017bac <memset>
  if(htim->Instance==TIM3)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a14      	ldr	r2, [pc, #80]	@ (8009004 <HAL_TIM_MspPostInit+0x70>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d121      	bne.n	8008ffa <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fb6:	4b14      	ldr	r3, [pc, #80]	@ (8009008 <HAL_TIM_MspPostInit+0x74>)
 8008fb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fba:	4b13      	ldr	r3, [pc, #76]	@ (8009008 <HAL_TIM_MspPostInit+0x74>)
 8008fbc:	2104      	movs	r1, #4
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008fc2:	4b11      	ldr	r3, [pc, #68]	@ (8009008 <HAL_TIM_MspPostInit+0x74>)
 8008fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60bb      	str	r3, [r7, #8]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008fce:	0021      	movs	r1, r4
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	2280      	movs	r2, #128	@ 0x80
 8008fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fd6:	187b      	adds	r3, r7, r1
 8008fd8:	2202      	movs	r2, #2
 8008fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fdc:	187b      	adds	r3, r7, r1
 8008fde:	2200      	movs	r2, #0
 8008fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fe2:	187b      	adds	r3, r7, r1
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008fe8:	187b      	adds	r3, r7, r1
 8008fea:	2202      	movs	r2, #2
 8008fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	4a06      	ldr	r2, [pc, #24]	@ (800900c <HAL_TIM_MspPostInit+0x78>)
 8008ff2:	0019      	movs	r1, r3
 8008ff4:	0010      	movs	r0, r2
 8008ff6:	f007 f8db 	bl	80101b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008ffa:	46c0      	nop			@ (mov r8, r8)
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	b009      	add	sp, #36	@ 0x24
 8009000:	bd90      	pop	{r4, r7, pc}
 8009002:	46c0      	nop			@ (mov r8, r8)
 8009004:	40000400 	.word	0x40000400
 8009008:	40021000 	.word	0x40021000
 800900c:	50000800 	.word	0x50000800

08009010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b09d      	sub	sp, #116	@ 0x74
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009018:	235c      	movs	r3, #92	@ 0x5c
 800901a:	18fb      	adds	r3, r7, r3
 800901c:	0018      	movs	r0, r3
 800901e:	2314      	movs	r3, #20
 8009020:	001a      	movs	r2, r3
 8009022:	2100      	movs	r1, #0
 8009024:	f00e fdc2 	bl	8017bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009028:	2418      	movs	r4, #24
 800902a:	193b      	adds	r3, r7, r4
 800902c:	0018      	movs	r0, r3
 800902e:	2344      	movs	r3, #68	@ 0x44
 8009030:	001a      	movs	r2, r3
 8009032:	2100      	movs	r1, #0
 8009034:	f00e fdba 	bl	8017bac <memset>
  if(huart->Instance==USART2)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4aa0      	ldr	r2, [pc, #640]	@ (80092c0 <HAL_UART_MspInit+0x2b0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d000      	beq.n	8009044 <HAL_UART_MspInit+0x34>
 8009042:	e09a      	b.n	800917a <HAL_UART_MspInit+0x16a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009044:	193b      	adds	r3, r7, r4
 8009046:	2202      	movs	r2, #2
 8009048:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800904a:	193b      	adds	r3, r7, r4
 800904c:	2200      	movs	r2, #0
 800904e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009050:	193b      	adds	r3, r7, r4
 8009052:	0018      	movs	r0, r3
 8009054:	f00a fbac 	bl	80137b0 <HAL_RCCEx_PeriphCLKConfig>
 8009058:	1e03      	subs	r3, r0, #0
 800905a:	d001      	beq.n	8009060 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800905c:	f7fe fc7c 	bl	8007958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009060:	4b98      	ldr	r3, [pc, #608]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 8009062:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009064:	4b97      	ldr	r3, [pc, #604]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 8009066:	2180      	movs	r1, #128	@ 0x80
 8009068:	0289      	lsls	r1, r1, #10
 800906a:	430a      	orrs	r2, r1
 800906c:	659a      	str	r2, [r3, #88]	@ 0x58
 800906e:	4b95      	ldr	r3, [pc, #596]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 8009070:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009072:	2380      	movs	r3, #128	@ 0x80
 8009074:	029b      	lsls	r3, r3, #10
 8009076:	4013      	ands	r3, r2
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800907c:	4b91      	ldr	r3, [pc, #580]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 800907e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009080:	4b90      	ldr	r3, [pc, #576]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 8009082:	2101      	movs	r1, #1
 8009084:	430a      	orrs	r2, r1
 8009086:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009088:	4b8e      	ldr	r3, [pc, #568]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 800908a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908c:	2201      	movs	r2, #1
 800908e:	4013      	ands	r3, r2
 8009090:	613b      	str	r3, [r7, #16]
 8009092:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009094:	215c      	movs	r1, #92	@ 0x5c
 8009096:	187b      	adds	r3, r7, r1
 8009098:	220c      	movs	r2, #12
 800909a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800909c:	187b      	adds	r3, r7, r1
 800909e:	2202      	movs	r2, #2
 80090a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a2:	187b      	adds	r3, r7, r1
 80090a4:	2200      	movs	r2, #0
 80090a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090a8:	187b      	adds	r3, r7, r1
 80090aa:	2200      	movs	r2, #0
 80090ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80090ae:	187b      	adds	r3, r7, r1
 80090b0:	2207      	movs	r2, #7
 80090b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090b4:	187a      	adds	r2, r7, r1
 80090b6:	23a0      	movs	r3, #160	@ 0xa0
 80090b8:	05db      	lsls	r3, r3, #23
 80090ba:	0011      	movs	r1, r2
 80090bc:	0018      	movs	r0, r3
 80090be:	f007 f877 	bl	80101b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80090c2:	4b81      	ldr	r3, [pc, #516]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090c4:	4a81      	ldr	r2, [pc, #516]	@ (80092cc <HAL_UART_MspInit+0x2bc>)
 80090c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80090c8:	4b7f      	ldr	r3, [pc, #508]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090ca:	2247      	movs	r2, #71	@ 0x47
 80090cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80090ce:	4b7e      	ldr	r3, [pc, #504]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80090d4:	4b7c      	ldr	r3, [pc, #496]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090da:	4b7b      	ldr	r3, [pc, #492]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090dc:	2280      	movs	r2, #128	@ 0x80
 80090de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80090e0:	4b79      	ldr	r3, [pc, #484]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80090e6:	4b78      	ldr	r3, [pc, #480]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80090ec:	4b76      	ldr	r3, [pc, #472]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80090f2:	4b75      	ldr	r3, [pc, #468]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80090f8:	4b73      	ldr	r3, [pc, #460]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 80090fa:	0018      	movs	r0, r3
 80090fc:	f006 f90a 	bl	800f314 <HAL_DMA_Init>
 8009100:	1e03      	subs	r3, r0, #0
 8009102:	d001      	beq.n	8009108 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8009104:	f7fe fc28 	bl	8007958 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2180      	movs	r1, #128	@ 0x80
 800910c:	4a6e      	ldr	r2, [pc, #440]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 800910e:	505a      	str	r2, [r3, r1]
 8009110:	4b6d      	ldr	r3, [pc, #436]	@ (80092c8 <HAL_UART_MspInit+0x2b8>)
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8009116:	4b6e      	ldr	r3, [pc, #440]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009118:	4a6e      	ldr	r2, [pc, #440]	@ (80092d4 <HAL_UART_MspInit+0x2c4>)
 800911a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800911c:	4b6c      	ldr	r3, [pc, #432]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 800911e:	2248      	movs	r2, #72	@ 0x48
 8009120:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009122:	4b6b      	ldr	r3, [pc, #428]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009124:	2210      	movs	r2, #16
 8009126:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009128:	4b69      	ldr	r3, [pc, #420]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 800912a:	2200      	movs	r2, #0
 800912c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800912e:	4b68      	ldr	r3, [pc, #416]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009130:	2280      	movs	r2, #128	@ 0x80
 8009132:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009134:	4b66      	ldr	r3, [pc, #408]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009136:	2200      	movs	r2, #0
 8009138:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800913a:	4b65      	ldr	r3, [pc, #404]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 800913c:	2200      	movs	r2, #0
 800913e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009140:	4b63      	ldr	r3, [pc, #396]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009142:	2200      	movs	r2, #0
 8009144:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009146:	4b62      	ldr	r3, [pc, #392]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009148:	2200      	movs	r2, #0
 800914a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800914c:	4b60      	ldr	r3, [pc, #384]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 800914e:	0018      	movs	r0, r3
 8009150:	f006 f8e0 	bl	800f314 <HAL_DMA_Init>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d001      	beq.n	800915c <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8009158:	f7fe fbfe 	bl	8007958 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a5c      	ldr	r2, [pc, #368]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009160:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009162:	4b5b      	ldr	r3, [pc, #364]	@ (80092d0 <HAL_UART_MspInit+0x2c0>)
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8009168:	2200      	movs	r2, #0
 800916a:	2100      	movs	r1, #0
 800916c:	201c      	movs	r0, #28
 800916e:	f006 f88f 	bl	800f290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8009172:	201c      	movs	r0, #28
 8009174:	f006 f8a1 	bl	800f2ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8009178:	e09e      	b.n	80092b8 <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a56      	ldr	r2, [pc, #344]	@ (80092d8 <HAL_UART_MspInit+0x2c8>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d000      	beq.n	8009186 <HAL_UART_MspInit+0x176>
 8009184:	e098      	b.n	80092b8 <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 8009186:	2118      	movs	r1, #24
 8009188:	187b      	adds	r3, r7, r1
 800918a:	2280      	movs	r2, #128	@ 0x80
 800918c:	0292      	lsls	r2, r2, #10
 800918e:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009190:	187b      	adds	r3, r7, r1
 8009192:	0018      	movs	r0, r3
 8009194:	f00a fb0c 	bl	80137b0 <HAL_RCCEx_PeriphCLKConfig>
 8009198:	1e03      	subs	r3, r0, #0
 800919a:	d001      	beq.n	80091a0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800919c:	f7fe fbdc 	bl	8007958 <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 80091a0:	4b48      	ldr	r3, [pc, #288]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 80091a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80091a4:	4b47      	ldr	r3, [pc, #284]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 80091a6:	2180      	movs	r1, #128	@ 0x80
 80091a8:	0309      	lsls	r1, r1, #12
 80091aa:	430a      	orrs	r2, r1
 80091ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80091ae:	4b45      	ldr	r3, [pc, #276]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 80091b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80091b2:	2380      	movs	r3, #128	@ 0x80
 80091b4:	031b      	lsls	r3, r3, #12
 80091b6:	4013      	ands	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091bc:	4b41      	ldr	r3, [pc, #260]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 80091be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091c0:	4b40      	ldr	r3, [pc, #256]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 80091c2:	2101      	movs	r1, #1
 80091c4:	430a      	orrs	r2, r1
 80091c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80091c8:	4b3e      	ldr	r3, [pc, #248]	@ (80092c4 <HAL_UART_MspInit+0x2b4>)
 80091ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091cc:	2201      	movs	r2, #1
 80091ce:	4013      	ands	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]
 80091d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80091d4:	215c      	movs	r1, #92	@ 0x5c
 80091d6:	187b      	adds	r3, r7, r1
 80091d8:	2203      	movs	r2, #3
 80091da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091dc:	187b      	adds	r3, r7, r1
 80091de:	2202      	movs	r2, #2
 80091e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e2:	187b      	adds	r3, r7, r1
 80091e4:	2200      	movs	r2, #0
 80091e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091e8:	187b      	adds	r3, r7, r1
 80091ea:	2200      	movs	r2, #0
 80091ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 80091ee:	187b      	adds	r3, r7, r1
 80091f0:	2208      	movs	r2, #8
 80091f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091f4:	187a      	adds	r2, r7, r1
 80091f6:	23a0      	movs	r3, #160	@ 0xa0
 80091f8:	05db      	lsls	r3, r3, #23
 80091fa:	0011      	movs	r1, r2
 80091fc:	0018      	movs	r0, r3
 80091fe:	f006 ffd7 	bl	80101b0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8009202:	4b36      	ldr	r3, [pc, #216]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 8009204:	4a36      	ldr	r2, [pc, #216]	@ (80092e0 <HAL_UART_MspInit+0x2d0>)
 8009206:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8009208:	4b34      	ldr	r3, [pc, #208]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 800920a:	224b      	movs	r2, #75	@ 0x4b
 800920c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800920e:	4b33      	ldr	r3, [pc, #204]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 8009210:	2200      	movs	r2, #0
 8009212:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009214:	4b31      	ldr	r3, [pc, #196]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 8009216:	2200      	movs	r2, #0
 8009218:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800921a:	4b30      	ldr	r3, [pc, #192]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 800921c:	2280      	movs	r2, #128	@ 0x80
 800921e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009220:	4b2e      	ldr	r3, [pc, #184]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 8009222:	2200      	movs	r2, #0
 8009224:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009226:	4b2d      	ldr	r3, [pc, #180]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 8009228:	2200      	movs	r2, #0
 800922a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800922c:	4b2b      	ldr	r3, [pc, #172]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 800922e:	2200      	movs	r2, #0
 8009230:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009232:	4b2a      	ldr	r3, [pc, #168]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 8009234:	2200      	movs	r2, #0
 8009236:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009238:	4b28      	ldr	r3, [pc, #160]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 800923a:	0018      	movs	r0, r3
 800923c:	f006 f86a 	bl	800f314 <HAL_DMA_Init>
 8009240:	1e03      	subs	r3, r0, #0
 8009242:	d001      	beq.n	8009248 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8009244:	f7fe fb88 	bl	8007958 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2180      	movs	r1, #128	@ 0x80
 800924c:	4a23      	ldr	r2, [pc, #140]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 800924e:	505a      	str	r2, [r3, r1]
 8009250:	4b22      	ldr	r3, [pc, #136]	@ (80092dc <HAL_UART_MspInit+0x2cc>)
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 8009256:	4b23      	ldr	r3, [pc, #140]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 8009258:	4a23      	ldr	r2, [pc, #140]	@ (80092e8 <HAL_UART_MspInit+0x2d8>)
 800925a:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800925c:	4b21      	ldr	r3, [pc, #132]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 800925e:	224c      	movs	r2, #76	@ 0x4c
 8009260:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009262:	4b20      	ldr	r3, [pc, #128]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 8009264:	2210      	movs	r2, #16
 8009266:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009268:	4b1e      	ldr	r3, [pc, #120]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 800926a:	2200      	movs	r2, #0
 800926c:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800926e:	4b1d      	ldr	r3, [pc, #116]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 8009270:	2280      	movs	r2, #128	@ 0x80
 8009272:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009274:	4b1b      	ldr	r3, [pc, #108]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 8009276:	2200      	movs	r2, #0
 8009278:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800927a:	4b1a      	ldr	r3, [pc, #104]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 800927c:	2200      	movs	r2, #0
 800927e:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009280:	4b18      	ldr	r3, [pc, #96]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 8009282:	2200      	movs	r2, #0
 8009284:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009286:	4b17      	ldr	r3, [pc, #92]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 8009288:	2200      	movs	r2, #0
 800928a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800928c:	4b15      	ldr	r3, [pc, #84]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 800928e:	0018      	movs	r0, r3
 8009290:	f006 f840 	bl	800f314 <HAL_DMA_Init>
 8009294:	1e03      	subs	r3, r0, #0
 8009296:	d001      	beq.n	800929c <HAL_UART_MspInit+0x28c>
      Error_Handler();
 8009298:	f7fe fb5e 	bl	8007958 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a11      	ldr	r2, [pc, #68]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 80092a0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80092a2:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <HAL_UART_MspInit+0x2d4>)
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 80092a8:	2200      	movs	r2, #0
 80092aa:	2100      	movs	r1, #0
 80092ac:	201e      	movs	r0, #30
 80092ae:	f005 ffef 	bl	800f290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 80092b2:	201e      	movs	r0, #30
 80092b4:	f006 f801 	bl	800f2ba <HAL_NVIC_EnableIRQ>
}
 80092b8:	46c0      	nop			@ (mov r8, r8)
 80092ba:	46bd      	mov	sp, r7
 80092bc:	b01d      	add	sp, #116	@ 0x74
 80092be:	bd90      	pop	{r4, r7, pc}
 80092c0:	40004400 	.word	0x40004400
 80092c4:	40021000 	.word	0x40021000
 80092c8:	200006bc 	.word	0x200006bc
 80092cc:	40020058 	.word	0x40020058
 80092d0:	2000071c 	.word	0x2000071c
 80092d4:	40020044 	.word	0x40020044
 80092d8:	40004c00 	.word	0x40004c00
 80092dc:	2000077c 	.word	0x2000077c
 80092e0:	4002001c 	.word	0x4002001c
 80092e4:	200007dc 	.word	0x200007dc
 80092e8:	40020030 	.word	0x40020030

080092ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80092f0:	46c0      	nop			@ (mov r8, r8)
 80092f2:	e7fd      	b.n	80092f0 <NMI_Handler+0x4>

080092f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80092f8:	46c0      	nop			@ (mov r8, r8)
 80092fa:	e7fd      	b.n	80092f8 <HardFault_Handler+0x4>

080092fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009300:	46c0      	nop			@ (mov r8, r8)
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800930a:	46c0      	nop			@ (mov r8, r8)
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009314:	f004 fd66 	bl	800dde4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009318:	46c0      	nop			@ (mov r8, r8)
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8009324:	4b03      	ldr	r3, [pc, #12]	@ (8009334 <RTC_TAMP_IRQHandler+0x14>)
 8009326:	0018      	movs	r0, r3
 8009328:	f00b fe94 	bl	8015054 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800932c:	46c0      	nop			@ (mov r8, r8)
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	46c0      	nop			@ (mov r8, r8)
 8009334:	200004cc 	.word	0x200004cc

08009338 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800933c:	2380      	movs	r3, #128	@ 0x80
 800933e:	021b      	lsls	r3, r3, #8
 8009340:	0018      	movs	r0, r3
 8009342:	f007 f9df 	bl	8010704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8009346:	46c0      	nop			@ (mov r8, r8)
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8009350:	4b05      	ldr	r3, [pc, #20]	@ (8009368 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8009352:	0018      	movs	r0, r3
 8009354:	f006 fa70 	bl	800f838 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8009358:	4b04      	ldr	r3, [pc, #16]	@ (800936c <DMA1_Channel2_3_IRQHandler+0x20>)
 800935a:	0018      	movs	r0, r3
 800935c:	f006 fa6c 	bl	800f838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009360:	46c0      	nop			@ (mov r8, r8)
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	46c0      	nop			@ (mov r8, r8)
 8009368:	2000077c 	.word	0x2000077c
 800936c:	200007dc 	.word	0x200007dc

08009370 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009374:	4b09      	ldr	r3, [pc, #36]	@ (800939c <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 8009376:	0018      	movs	r0, r3
 8009378:	f006 fa5e 	bl	800f838 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800937c:	4b08      	ldr	r3, [pc, #32]	@ (80093a0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 800937e:	0018      	movs	r0, r3
 8009380:	f006 fa5a 	bl	800f838 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009384:	4b07      	ldr	r3, [pc, #28]	@ (80093a4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 8009386:	0018      	movs	r0, r3
 8009388:	f006 fa56 	bl	800f838 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800938c:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 800938e:	0018      	movs	r0, r3
 8009390:	f006 fa52 	bl	800f838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 8009394:	46c0      	nop			@ (mov r8, r8)
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	46c0      	nop			@ (mov r8, r8)
 800939c:	2000071c 	.word	0x2000071c
 80093a0:	200006bc 	.word	0x200006bc
 80093a4:	20000458 	.word	0x20000458
 80093a8:	200003f8 	.word	0x200003f8

080093ac <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80093b0:	4b09      	ldr	r3, [pc, #36]	@ (80093d8 <I2C1_IRQHandler+0x2c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	23e0      	movs	r3, #224	@ 0xe0
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	4013      	ands	r3, r2
 80093bc:	d004      	beq.n	80093c8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80093be:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <I2C1_IRQHandler+0x2c>)
 80093c0:	0018      	movs	r0, r3
 80093c2:	f007 fcd9 	bl	8010d78 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80093c6:	e003      	b.n	80093d0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80093c8:	4b03      	ldr	r3, [pc, #12]	@ (80093d8 <I2C1_IRQHandler+0x2c>)
 80093ca:	0018      	movs	r0, r3
 80093cc:	f007 fcba 	bl	8010d44 <HAL_I2C_EV_IRQHandler>
}
 80093d0:	46c0      	nop			@ (mov r8, r8)
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	46c0      	nop			@ (mov r8, r8)
 80093d8:	200003a4 	.word	0x200003a4

080093dc <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80093e0:	4b03      	ldr	r3, [pc, #12]	@ (80093f0 <USART2_LPUART2_IRQHandler+0x14>)
 80093e2:	0018      	movs	r0, r3
 80093e4:	f00d f8a4 	bl	8016530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80093e8:	46c0      	nop			@ (mov r8, r8)
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	46c0      	nop			@ (mov r8, r8)
 80093f0:	20000594 	.word	0x20000594

080093f4 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80093f8:	4b03      	ldr	r3, [pc, #12]	@ (8009408 <USART4_LPUART3_IRQHandler+0x14>)
 80093fa:	0018      	movs	r0, r3
 80093fc:	f00d f898 	bl	8016530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 8009400:	46c0      	nop			@ (mov r8, r8)
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	46c0      	nop			@ (mov r8, r8)
 8009408:	20000628 	.word	0x20000628

0800940c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009412:	4b12      	ldr	r3, [pc, #72]	@ (800945c <SystemInit+0x50>)
 8009414:	2280      	movs	r2, #128	@ 0x80
 8009416:	0512      	lsls	r2, r2, #20
 8009418:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800941a:	4a11      	ldr	r2, [pc, #68]	@ (8009460 <SystemInit+0x54>)
 800941c:	2380      	movs	r3, #128	@ 0x80
 800941e:	58d3      	ldr	r3, [r2, r3]
 8009420:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8009422:	4b0f      	ldr	r3, [pc, #60]	@ (8009460 <SystemInit+0x54>)
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	2380      	movs	r3, #128	@ 0x80
 800942c:	025b      	lsls	r3, r3, #9
 800942e:	4013      	ands	r3, r2
 8009430:	d010      	beq.n	8009454 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	22ff      	movs	r2, #255	@ 0xff
 8009436:	4013      	ands	r3, r2
 8009438:	2bcc      	cmp	r3, #204	@ 0xcc
 800943a:	d00b      	beq.n	8009454 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	22ff      	movs	r2, #255	@ 0xff
 8009440:	4013      	ands	r3, r2
 8009442:	2baa      	cmp	r3, #170	@ 0xaa
 8009444:	d006      	beq.n	8009454 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8009446:	4b06      	ldr	r3, [pc, #24]	@ (8009460 <SystemInit+0x54>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b05      	ldr	r3, [pc, #20]	@ (8009460 <SystemInit+0x54>)
 800944c:	2180      	movs	r1, #128	@ 0x80
 800944e:	02c9      	lsls	r1, r1, #11
 8009450:	430a      	orrs	r2, r1
 8009452:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8009454:	46c0      	nop			@ (mov r8, r8)
 8009456:	46bd      	mov	sp, r7
 8009458:	b002      	add	sp, #8
 800945a:	bd80      	pop	{r7, pc}
 800945c:	e000ed00 	.word	0xe000ed00
 8009460:	40022000 	.word	0x40022000

08009464 <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0


	cnttemp++;
 800946a:	4bbb      	ldr	r3, [pc, #748]	@ (8009758 <temper+0x2f4>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	3301      	adds	r3, #1
 8009470:	b2da      	uxtb	r2, r3
 8009472:	4bb9      	ldr	r3, [pc, #740]	@ (8009758 <temper+0x2f4>)
 8009474:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 8009476:	4bb8      	ldr	r3, [pc, #736]	@ (8009758 <temper+0x2f4>)
 8009478:	781a      	ldrb	r2, [r3, #0]
 800947a:	4bb8      	ldr	r3, [pc, #736]	@ (800975c <temper+0x2f8>)
 800947c:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 800947e:	4bb7      	ldr	r3, [pc, #732]	@ (800975c <temper+0x2f8>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b31      	cmp	r3, #49	@ 0x31
 8009484:	d801      	bhi.n	800948a <temper+0x26>
 8009486:	f000 fcb7 	bl	8009df8 <temper+0x994>
		goto tempe05;  // Sí no tomes muestras
 800948a:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 800948c:	4bb4      	ldr	r3, [pc, #720]	@ (8009760 <temper+0x2fc>)
 800948e:	0018      	movs	r0, r3
 8009490:	f7fb f97d 	bl	800478e <decwreg>
		decwreg(&retcncfe);
 8009494:	4bb3      	ldr	r3, [pc, #716]	@ (8009764 <temper+0x300>)
 8009496:	0018      	movs	r0, r3
 8009498:	f7fb f979 	bl	800478e <decwreg>
		decwreg(&retcncfr);
 800949c:	4bb2      	ldr	r3, [pc, #712]	@ (8009768 <temper+0x304>)
 800949e:	0018      	movs	r0, r3
 80094a0:	f7fb f975 	bl	800478e <decwreg>
		decwreg(&retcncfc);
 80094a4:	4bb1      	ldr	r3, [pc, #708]	@ (800976c <temper+0x308>)
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7fb f971 	bl	800478e <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 80094ac:	4baa      	ldr	r3, [pc, #680]	@ (8009758 <temper+0x2f4>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 80094b2:	4baf      	ldr	r3, [pc, #700]	@ (8009770 <temper+0x30c>)
 80094b4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80094b6:	4bae      	ldr	r3, [pc, #696]	@ (8009770 <temper+0x30c>)
 80094b8:	2280      	movs	r2, #128	@ 0x80
 80094ba:	01d2      	lsls	r2, r2, #7
 80094bc:	400a      	ands	r2, r1
 80094be:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 80094c0:	4bab      	ldr	r3, [pc, #684]	@ (8009770 <temper+0x30c>)
 80094c2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80094c4:	4baa      	ldr	r3, [pc, #680]	@ (8009770 <temper+0x30c>)
 80094c6:	2280      	movs	r2, #128	@ 0x80
 80094c8:	00d2      	lsls	r2, r2, #3
 80094ca:	400a      	ands	r2, r1
 80094cc:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 80094ce:	4ba8      	ldr	r3, [pc, #672]	@ (8009770 <temper+0x30c>)
 80094d0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80094d2:	4ba7      	ldr	r3, [pc, #668]	@ (8009770 <temper+0x30c>)
 80094d4:	2280      	movs	r2, #128	@ 0x80
 80094d6:	02d2      	lsls	r2, r2, #11
 80094d8:	400a      	ands	r2, r1
 80094da:	629a      	str	r2, [r3, #40]	@ 0x28

				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 80094dc:	4ba4      	ldr	r3, [pc, #656]	@ (8009770 <temper+0x30c>)
 80094de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094e0:	4ba3      	ldr	r3, [pc, #652]	@ (8009770 <temper+0x30c>)
 80094e2:	2101      	movs	r1, #1
 80094e4:	430a      	orrs	r2, r1
 80094e6:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 80094e8:	f000 fe3e 	bl	800a168 <capturaAD>
//lookshort_S4:
		Y_A();
 80094ec:	f000 feac 	bl	800a248 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 80094f0:	4b9a      	ldr	r3, [pc, #616]	@ (800975c <temper+0x2f8>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d005      	beq.n	8009504 <temper+0xa0>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 80094f8:	4b9e      	ldr	r3, [pc, #632]	@ (8009774 <temper+0x310>)
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	4a9e      	ldr	r2, [pc, #632]	@ (8009778 <temper+0x314>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d808      	bhi.n	8009514 <temper+0xb0>
			goto lookopen_S04;          // No, revise límite inferior
 8009502:	e010      	b.n	8009526 <temper+0xc2>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 8009504:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 8009506:	4b9b      	ldr	r3, [pc, #620]	@ (8009774 <temper+0x310>)
 8009508:	881a      	ldrh	r2, [r3, #0]
 800950a:	23e2      	movs	r3, #226	@ 0xe2
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	429a      	cmp	r2, r3
 8009510:	d308      	bcc.n	8009524 <temper+0xc0>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 8009512:	e000      	b.n	8009516 <temper+0xb2>
		goto sens_short_S04;
 8009514:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 8009516:	4999      	ldr	r1, [pc, #612]	@ (800977c <temper+0x318>)
 8009518:	4899      	ldr	r0, [pc, #612]	@ (8009780 <temper+0x31c>)
 800951a:	2307      	movs	r3, #7
 800951c:	2205      	movs	r2, #5
 800951e:	f000 fea9 	bl	800a274 <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 8009522:	e01c      	b.n	800955e <temper+0xfa>
			goto lookopen_S04;          // No, revise límite inferior
 8009524:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 8009526:	4b97      	ldr	r3, [pc, #604]	@ (8009784 <temper+0x320>)
 8009528:	781a      	ldrb	r2, [r3, #0]
 800952a:	4b8c      	ldr	r3, [pc, #560]	@ (800975c <temper+0x2f8>)
 800952c:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800952e:	4b8b      	ldr	r3, [pc, #556]	@ (800975c <temper+0x2f8>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d004      	beq.n	8009540 <temper+0xdc>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 8009536:	4b8f      	ldr	r3, [pc, #572]	@ (8009774 <temper+0x310>)
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	2b2a      	cmp	r3, #42	@ 0x2a
 800953c:	d908      	bls.n	8009550 <temper+0xec>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800953e:	e013      	b.n	8009568 <temper+0x104>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 8009540:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 8009542:	4b8c      	ldr	r3, [pc, #560]	@ (8009774 <temper+0x310>)
 8009544:	881a      	ldrh	r2, [r3, #0]
 8009546:	23d7      	movs	r3, #215	@ 0xd7
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	429a      	cmp	r2, r3
 800954c:	d20b      	bcs.n	8009566 <temper+0x102>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 800954e:	e000      	b.n	8009552 <temper+0xee>
		goto sens_open_S04;
 8009550:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 8009552:	498b      	ldr	r1, [pc, #556]	@ (8009780 <temper+0x31c>)
 8009554:	4889      	ldr	r0, [pc, #548]	@ (800977c <temper+0x318>)
 8009556:	2305      	movs	r3, #5
 8009558:	2207      	movs	r2, #7
 800955a:	f000 fe8b 	bl	800a274 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 800955e:	4b83      	ldr	r3, [pc, #524]	@ (800976c <temper+0x308>)
 8009560:	220f      	movs	r2, #15
 8009562:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 8009564:	e010      	b.n	8009588 <temper+0x124>
			goto sens_ok_S04;     // Sí, indica sensor OK
 8009566:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 8009568:	4b80      	ldr	r3, [pc, #512]	@ (800976c <temper+0x308>)
 800956a:	781a      	ldrb	r2, [r3, #0]
 800956c:	4b7b      	ldr	r3, [pc, #492]	@ (800975c <temper+0x2f8>)
 800956e:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 8009570:	4b7a      	ldr	r3, [pc, #488]	@ (800975c <temper+0x2f8>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <temper+0x122>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 8009578:	4980      	ldr	r1, [pc, #512]	@ (800977c <temper+0x318>)
 800957a:	4881      	ldr	r0, [pc, #516]	@ (8009780 <temper+0x31c>)
 800957c:	2307      	movs	r3, #7
 800957e:	2205      	movs	r2, #5
 8009580:	f000 fe93 	bl	800a2aa <Bclear_Clear_trfst>
 8009584:	e000      	b.n	8009588 <temper+0x124>
			goto tempeLoad_s04;
 8009586:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 8009588:	4b7f      	ldr	r3, [pc, #508]	@ (8009788 <temper+0x324>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	001a      	movs	r2, r3
 800958e:	4b7f      	ldr	r3, [pc, #508]	@ (800978c <temper+0x328>)
 8009590:	8819      	ldrh	r1, [r3, #0]
 8009592:	4b7f      	ldr	r3, [pc, #508]	@ (8009790 <temper+0x32c>)
 8009594:	0052      	lsls	r2, r2, #1
 8009596:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 8009598:	4b75      	ldr	r3, [pc, #468]	@ (8009770 <temper+0x30c>)
 800959a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800959c:	4b74      	ldr	r3, [pc, #464]	@ (8009770 <temper+0x30c>)
 800959e:	2280      	movs	r2, #128	@ 0x80
 80095a0:	00d2      	lsls	r2, r2, #3
 80095a2:	400a      	ands	r2, r1
 80095a4:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 80095a6:	4b72      	ldr	r3, [pc, #456]	@ (8009770 <temper+0x30c>)
 80095a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095aa:	4b71      	ldr	r3, [pc, #452]	@ (8009770 <temper+0x30c>)
 80095ac:	2101      	movs	r1, #1
 80095ae:	400a      	ands	r2, r1
 80095b0:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 80095b2:	4b6f      	ldr	r3, [pc, #444]	@ (8009770 <temper+0x30c>)
 80095b4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80095b6:	4b6e      	ldr	r3, [pc, #440]	@ (8009770 <temper+0x30c>)
 80095b8:	2280      	movs	r2, #128	@ 0x80
 80095ba:	02d2      	lsls	r2, r2, #11
 80095bc:	400a      	ands	r2, r1
 80095be:	629a      	str	r2, [r3, #40]	@ 0x28

			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 80095c0:	4b6b      	ldr	r3, [pc, #428]	@ (8009770 <temper+0x30c>)
 80095c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095c4:	4b6a      	ldr	r3, [pc, #424]	@ (8009770 <temper+0x30c>)
 80095c6:	2180      	movs	r1, #128	@ 0x80
 80095c8:	02c9      	lsls	r1, r1, #11
 80095ca:	430a      	orrs	r2, r1
 80095cc:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 80095ce:	f000 fdcb 	bl	800a168 <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 80095d2:	f000 fe39 	bl	800a248 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 80095d6:	4b61      	ldr	r3, [pc, #388]	@ (800975c <temper+0x2f8>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d005      	beq.n	80095ea <temper+0x186>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 80095de:	4b65      	ldr	r3, [pc, #404]	@ (8009774 <temper+0x310>)
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	4a6c      	ldr	r2, [pc, #432]	@ (8009794 <temper+0x330>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d808      	bhi.n	80095fa <temper+0x196>
		goto lookopen_S03;      // No, revise límite inferior
 80095e8:	e010      	b.n	800960c <temper+0x1a8>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 80095ea:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 80095ec:	4b61      	ldr	r3, [pc, #388]	@ (8009774 <temper+0x310>)
 80095ee:	881a      	ldrh	r2, [r3, #0]
 80095f0:	23e2      	movs	r3, #226	@ 0xe2
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d308      	bcc.n	800960a <temper+0x1a6>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 80095f8:	e000      	b.n	80095fc <temper+0x198>
	goto sens_short_S03;
 80095fa:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 80095fc:	495f      	ldr	r1, [pc, #380]	@ (800977c <temper+0x318>)
 80095fe:	485f      	ldr	r0, [pc, #380]	@ (800977c <temper+0x318>)
 8009600:	2305      	movs	r3, #5
 8009602:	2204      	movs	r2, #4
 8009604:	f000 fe36 	bl	800a274 <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 8009608:	e01c      	b.n	8009644 <temper+0x1e0>
			goto lookopen_S03; // No, revise límite inferior
 800960a:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 800960c:	4b5d      	ldr	r3, [pc, #372]	@ (8009784 <temper+0x320>)
 800960e:	781a      	ldrb	r2, [r3, #0]
 8009610:	4b52      	ldr	r3, [pc, #328]	@ (800975c <temper+0x2f8>)
 8009612:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 8009614:	4b51      	ldr	r3, [pc, #324]	@ (800975c <temper+0x2f8>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d004      	beq.n	8009626 <temper+0x1c2>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 800961c:	4b55      	ldr	r3, [pc, #340]	@ (8009774 <temper+0x310>)
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	2b2a      	cmp	r3, #42	@ 0x2a
 8009622:	d908      	bls.n	8009636 <temper+0x1d2>
			goto sens_ok_S03;      // Sí, indica sensor OK
 8009624:	e013      	b.n	800964e <temper+0x1ea>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 8009626:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 8009628:	4b52      	ldr	r3, [pc, #328]	@ (8009774 <temper+0x310>)
 800962a:	881a      	ldrh	r2, [r3, #0]
 800962c:	23d7      	movs	r3, #215	@ 0xd7
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	429a      	cmp	r2, r3
 8009632:	d20b      	bcs.n	800964c <temper+0x1e8>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 8009634:	e000      	b.n	8009638 <temper+0x1d4>
		goto sens_open_S03;
 8009636:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 8009638:	4950      	ldr	r1, [pc, #320]	@ (800977c <temper+0x318>)
 800963a:	4850      	ldr	r0, [pc, #320]	@ (800977c <temper+0x318>)
 800963c:	2304      	movs	r3, #4
 800963e:	2205      	movs	r2, #5
 8009640:	f000 fe18 	bl	800a274 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 8009644:	4b48      	ldr	r3, [pc, #288]	@ (8009768 <temper+0x304>)
 8009646:	220f      	movs	r2, #15
 8009648:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 800964a:	e010      	b.n	800966e <temper+0x20a>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800964c:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 800964e:	4b46      	ldr	r3, [pc, #280]	@ (8009768 <temper+0x304>)
 8009650:	781a      	ldrb	r2, [r3, #0]
 8009652:	4b42      	ldr	r3, [pc, #264]	@ (800975c <temper+0x2f8>)
 8009654:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 8009656:	4b41      	ldr	r3, [pc, #260]	@ (800975c <temper+0x2f8>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <temper+0x208>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800965e:	4947      	ldr	r1, [pc, #284]	@ (800977c <temper+0x318>)
 8009660:	4846      	ldr	r0, [pc, #280]	@ (800977c <temper+0x318>)
 8009662:	2305      	movs	r3, #5
 8009664:	2204      	movs	r2, #4
 8009666:	f000 fe20 	bl	800a2aa <Bclear_Clear_trfst>
 800966a:	e000      	b.n	800966e <temper+0x20a>
			goto tempeLoad_s03;
 800966c:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800966e:	4b46      	ldr	r3, [pc, #280]	@ (8009788 <temper+0x324>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	001a      	movs	r2, r3
 8009674:	4b45      	ldr	r3, [pc, #276]	@ (800978c <temper+0x328>)
 8009676:	8819      	ldrh	r1, [r3, #0]
 8009678:	4b47      	ldr	r3, [pc, #284]	@ (8009798 <temper+0x334>)
 800967a:	0052      	lsls	r2, r2, #1
 800967c:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

		        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800967e:	4b3c      	ldr	r3, [pc, #240]	@ (8009770 <temper+0x30c>)
 8009680:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009682:	4b3b      	ldr	r3, [pc, #236]	@ (8009770 <temper+0x30c>)
 8009684:	2280      	movs	r2, #128	@ 0x80
 8009686:	01d2      	lsls	r2, r2, #7
 8009688:	400a      	ands	r2, r1
 800968a:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800968c:	4b38      	ldr	r3, [pc, #224]	@ (8009770 <temper+0x30c>)
 800968e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009690:	4b37      	ldr	r3, [pc, #220]	@ (8009770 <temper+0x30c>)
 8009692:	2101      	movs	r1, #1
 8009694:	400a      	ands	r2, r1
 8009696:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 8009698:	4b35      	ldr	r3, [pc, #212]	@ (8009770 <temper+0x30c>)
 800969a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800969c:	4b34      	ldr	r3, [pc, #208]	@ (8009770 <temper+0x30c>)
 800969e:	2280      	movs	r2, #128	@ 0x80
 80096a0:	02d2      	lsls	r2, r2, #11
 80096a2:	400a      	ands	r2, r1
 80096a4:	629a      	str	r2, [r3, #40]	@ 0x28

		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 80096a6:	4b32      	ldr	r3, [pc, #200]	@ (8009770 <temper+0x30c>)
 80096a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096aa:	4b31      	ldr	r3, [pc, #196]	@ (8009770 <temper+0x30c>)
 80096ac:	2180      	movs	r1, #128	@ 0x80
 80096ae:	00c9      	lsls	r1, r1, #3
 80096b0:	430a      	orrs	r2, r1
 80096b2:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 80096b4:	f000 fd58 	bl	800a168 <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 80096b8:	f000 fdc6 	bl	800a248 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 80096bc:	4b27      	ldr	r3, [pc, #156]	@ (800975c <temper+0x2f8>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d005      	beq.n	80096d0 <temper+0x26c>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 80096c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009774 <temper+0x310>)
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	4a32      	ldr	r2, [pc, #200]	@ (8009794 <temper+0x330>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d808      	bhi.n	80096e0 <temper+0x27c>
			goto lookopen;     // No, revise límite inferior
 80096ce:	e010      	b.n	80096f2 <temper+0x28e>
			goto cmp_man_01;   // En autoprueba deja estos límites
 80096d0:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 80096d2:	4b28      	ldr	r3, [pc, #160]	@ (8009774 <temper+0x310>)
 80096d4:	881a      	ldrh	r2, [r3, #0]
 80096d6:	23e2      	movs	r3, #226	@ 0xe2
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	429a      	cmp	r2, r3
 80096dc:	d308      	bcc.n	80096f0 <temper+0x28c>
			goto lookopen;     // No, revise límite inferior

sens_short:
 80096de:	e000      	b.n	80096e2 <temper+0x27e>
		goto sens_short;
 80096e0:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 80096e2:	4927      	ldr	r1, [pc, #156]	@ (8009780 <temper+0x31c>)
 80096e4:	4826      	ldr	r0, [pc, #152]	@ (8009780 <temper+0x31c>)
 80096e6:	2301      	movs	r3, #1
 80096e8:	2200      	movs	r2, #0
 80096ea:	f000 fdc3 	bl	800a274 <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 80096ee:	e01c      	b.n	800972a <temper+0x2c6>
			goto lookopen;     // No, revise límite inferior
 80096f0:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 80096f2:	4b24      	ldr	r3, [pc, #144]	@ (8009784 <temper+0x320>)
 80096f4:	781a      	ldrb	r2, [r3, #0]
 80096f6:	4b19      	ldr	r3, [pc, #100]	@ (800975c <temper+0x2f8>)
 80096f8:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 80096fa:	4b18      	ldr	r3, [pc, #96]	@ (800975c <temper+0x2f8>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d004      	beq.n	800970c <temper+0x2a8>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 8009702:	4b1c      	ldr	r3, [pc, #112]	@ (8009774 <temper+0x310>)
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	2b2a      	cmp	r3, #42	@ 0x2a
 8009708:	d908      	bls.n	800971c <temper+0x2b8>
			goto sens_ok;       // Sí, indica sensor OK
 800970a:	e016      	b.n	800973a <temper+0x2d6>
			goto cmp_man_02;    // En autoprueba deja estos límites
 800970c:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800970e:	4b19      	ldr	r3, [pc, #100]	@ (8009774 <temper+0x310>)
 8009710:	881a      	ldrh	r2, [r3, #0]
 8009712:	23d7      	movs	r3, #215	@ 0xd7
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	429a      	cmp	r2, r3
 8009718:	d20e      	bcs.n	8009738 <temper+0x2d4>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 800971a:	e000      	b.n	800971e <temper+0x2ba>
		goto sens_open;
 800971c:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 800971e:	4918      	ldr	r1, [pc, #96]	@ (8009780 <temper+0x31c>)
 8009720:	4817      	ldr	r0, [pc, #92]	@ (8009780 <temper+0x31c>)
 8009722:	2300      	movs	r3, #0
 8009724:	2201      	movs	r2, #1
 8009726:	f000 fda5 	bl	800a274 <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <temper+0x2fc>)
 800972c:	220f      	movs	r2, #15
 800972e:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 8009730:	4b1a      	ldr	r3, [pc, #104]	@ (800979c <temper+0x338>)
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 8009736:	e034      	b.n	80097a2 <temper+0x33e>
			goto sens_ok;       // Sí, indica sensor OK
 8009738:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 800973a:	4b09      	ldr	r3, [pc, #36]	@ (8009760 <temper+0x2fc>)
 800973c:	781a      	ldrb	r2, [r3, #0]
 800973e:	4b07      	ldr	r3, [pc, #28]	@ (800975c <temper+0x2f8>)
 8009740:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 8009742:	4b06      	ldr	r3, [pc, #24]	@ (800975c <temper+0x2f8>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d12a      	bne.n	80097a0 <temper+0x33c>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800974a:	490d      	ldr	r1, [pc, #52]	@ (8009780 <temper+0x31c>)
 800974c:	480c      	ldr	r0, [pc, #48]	@ (8009780 <temper+0x31c>)
 800974e:	2301      	movs	r3, #1
 8009750:	2200      	movs	r2, #0
 8009752:	f000 fdaa 	bl	800a2aa <Bclear_Clear_trfst>
 8009756:	e024      	b.n	80097a2 <temper+0x33e>
 8009758:	20000afb 	.word	0x20000afb
 800975c:	2000106a 	.word	0x2000106a
 8009760:	20000b00 	.word	0x20000b00
 8009764:	20000b01 	.word	0x20000b01
 8009768:	20000b8e 	.word	0x20000b8e
 800976c:	20000b8f 	.word	0x20000b8f
 8009770:	40012400 	.word	0x40012400
 8009774:	2000106c 	.word	0x2000106c
 8009778:	000003ad 	.word	0x000003ad
 800977c:	20000abc 	.word	0x20000abc
 8009780:	20000ac4 	.word	0x20000ac4
 8009784:	20000ad4 	.word	0x20000ad4
 8009788:	20000afc 	.word	0x20000afc
 800978c:	20000a9c 	.word	0x20000a9c
 8009790:	20001028 	.word	0x20001028
 8009794:	000003b5 	.word	0x000003b5
 8009798:	20001038 	.word	0x20001038
 800979c:	20000b03 	.word	0x20000b03
			goto tempe13;
 80097a0:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 80097a2:	4bcd      	ldr	r3, [pc, #820]	@ (8009ad8 <temper+0x674>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	001a      	movs	r2, r3
 80097a8:	4bcc      	ldr	r3, [pc, #816]	@ (8009adc <temper+0x678>)
 80097aa:	8819      	ldrh	r1, [r3, #0]
 80097ac:	4bcc      	ldr	r3, [pc, #816]	@ (8009ae0 <temper+0x67c>)
 80097ae:	0052      	lsls	r2, r2, #1
 80097b0:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 80097b2:	4bcc      	ldr	r3, [pc, #816]	@ (8009ae4 <temper+0x680>)
 80097b4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80097b6:	4bcb      	ldr	r3, [pc, #812]	@ (8009ae4 <temper+0x680>)
 80097b8:	2280      	movs	r2, #128	@ 0x80
 80097ba:	00d2      	lsls	r2, r2, #3
 80097bc:	400a      	ands	r2, r1
 80097be:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 80097c0:	4bc8      	ldr	r3, [pc, #800]	@ (8009ae4 <temper+0x680>)
 80097c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097c4:	4bc7      	ldr	r3, [pc, #796]	@ (8009ae4 <temper+0x680>)
 80097c6:	2101      	movs	r1, #1
 80097c8:	400a      	ands	r2, r1
 80097ca:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 80097cc:	4bc5      	ldr	r3, [pc, #788]	@ (8009ae4 <temper+0x680>)
 80097ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80097d0:	4bc4      	ldr	r3, [pc, #784]	@ (8009ae4 <temper+0x680>)
 80097d2:	2280      	movs	r2, #128	@ 0x80
 80097d4:	02d2      	lsls	r2, r2, #11
 80097d6:	400a      	ands	r2, r1
 80097d8:	629a      	str	r2, [r3, #40]	@ 0x28

	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 80097da:	4bc2      	ldr	r3, [pc, #776]	@ (8009ae4 <temper+0x680>)
 80097dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097de:	4bc1      	ldr	r3, [pc, #772]	@ (8009ae4 <temper+0x680>)
 80097e0:	2180      	movs	r1, #128	@ 0x80
 80097e2:	01c9      	lsls	r1, r1, #7
 80097e4:	430a      	orrs	r2, r1
 80097e6:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 80097e8:	f000 fcbe 	bl	800a168 <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 80097ec:	f000 fd2c 	bl	800a248 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 80097f0:	4bbd      	ldr	r3, [pc, #756]	@ (8009ae8 <temper+0x684>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d005      	beq.n	8009804 <temper+0x3a0>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 80097f8:	4bbc      	ldr	r3, [pc, #752]	@ (8009aec <temper+0x688>)
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	4abc      	ldr	r2, [pc, #752]	@ (8009af0 <temper+0x68c>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d808      	bhi.n	8009814 <temper+0x3b0>
		goto lookopene;    // No, revise límite inferior
 8009802:	e010      	b.n	8009826 <temper+0x3c2>
		goto cmp_man_03;   // En autoprueba deja estos límites
 8009804:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 8009806:	4bb9      	ldr	r3, [pc, #740]	@ (8009aec <temper+0x688>)
 8009808:	881a      	ldrh	r2, [r3, #0]
 800980a:	23e2      	movs	r3, #226	@ 0xe2
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	429a      	cmp	r2, r3
 8009810:	d308      	bcc.n	8009824 <temper+0x3c0>
		goto lookopene;    // No, revise límite inferior

senshorte:
 8009812:	e000      	b.n	8009816 <temper+0x3b2>
	goto senshorte;
 8009814:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 8009816:	49b7      	ldr	r1, [pc, #732]	@ (8009af4 <temper+0x690>)
 8009818:	48b6      	ldr	r0, [pc, #728]	@ (8009af4 <temper+0x690>)
 800981a:	2303      	movs	r3, #3
 800981c:	2202      	movs	r2, #2
 800981e:	f000 fd29 	bl	800a274 <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 8009822:	e01c      	b.n	800985e <temper+0x3fa>
		goto lookopene;    // No, revise límite inferior
 8009824:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 8009826:	4bb4      	ldr	r3, [pc, #720]	@ (8009af8 <temper+0x694>)
 8009828:	781a      	ldrb	r2, [r3, #0]
 800982a:	4baf      	ldr	r3, [pc, #700]	@ (8009ae8 <temper+0x684>)
 800982c:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800982e:	4bae      	ldr	r3, [pc, #696]	@ (8009ae8 <temper+0x684>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d004      	beq.n	8009840 <temper+0x3dc>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 8009836:	4bad      	ldr	r3, [pc, #692]	@ (8009aec <temper+0x688>)
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	2b2a      	cmp	r3, #42	@ 0x2a
 800983c:	d908      	bls.n	8009850 <temper+0x3ec>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800983e:	e013      	b.n	8009868 <temper+0x404>
		goto cmp_man_04;   // En autoprueba deja estos límites
 8009840:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 8009842:	4baa      	ldr	r3, [pc, #680]	@ (8009aec <temper+0x688>)
 8009844:	881a      	ldrh	r2, [r3, #0]
 8009846:	23d7      	movs	r3, #215	@ 0xd7
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	429a      	cmp	r2, r3
 800984c:	d20b      	bcs.n	8009866 <temper+0x402>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800984e:	e000      	b.n	8009852 <temper+0x3ee>
	goto sens_opene;
 8009850:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 8009852:	49a8      	ldr	r1, [pc, #672]	@ (8009af4 <temper+0x690>)
 8009854:	48a7      	ldr	r0, [pc, #668]	@ (8009af4 <temper+0x690>)
 8009856:	2302      	movs	r3, #2
 8009858:	2203      	movs	r2, #3
 800985a:	f000 fd0b 	bl	800a274 <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800985e:	4ba7      	ldr	r3, [pc, #668]	@ (8009afc <temper+0x698>)
 8009860:	2214      	movs	r2, #20
 8009862:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 8009864:	e010      	b.n	8009888 <temper+0x424>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 8009866:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 8009868:	4ba4      	ldr	r3, [pc, #656]	@ (8009afc <temper+0x698>)
 800986a:	781a      	ldrb	r2, [r3, #0]
 800986c:	4b9e      	ldr	r3, [pc, #632]	@ (8009ae8 <temper+0x684>)
 800986e:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 8009870:	4b9d      	ldr	r3, [pc, #628]	@ (8009ae8 <temper+0x684>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <temper+0x422>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 8009878:	499e      	ldr	r1, [pc, #632]	@ (8009af4 <temper+0x690>)
 800987a:	489e      	ldr	r0, [pc, #632]	@ (8009af4 <temper+0x690>)
 800987c:	2303      	movs	r3, #3
 800987e:	2202      	movs	r2, #2
 8009880:	f000 fd13 	bl	800a2aa <Bclear_Clear_trfst>
 8009884:	e000      	b.n	8009888 <temper+0x424>
		goto tempe16;
 8009886:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 8009888:	4b9a      	ldr	r3, [pc, #616]	@ (8009af4 <temper+0x690>)
 800988a:	789b      	ldrb	r3, [r3, #2]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d004      	beq.n	800989a <temper+0x436>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 8009890:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 8009892:	4b92      	ldr	r3, [pc, #584]	@ (8009adc <temper+0x678>)
 8009894:	220a      	movs	r2, #10
 8009896:	801a      	strh	r2, [r3, #0]
 8009898:	e000      	b.n	800989c <temper+0x438>
	goto tempe16a;                 // No, revisa temperatura alta
 800989a:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800989c:	4b8e      	ldr	r3, [pc, #568]	@ (8009ad8 <temper+0x674>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	001a      	movs	r2, r3
 80098a2:	4b8e      	ldr	r3, [pc, #568]	@ (8009adc <temper+0x678>)
 80098a4:	8819      	ldrh	r1, [r3, #0]
 80098a6:	4b96      	ldr	r3, [pc, #600]	@ (8009b00 <temper+0x69c>)
 80098a8:	0052      	lsls	r2, r2, #1
 80098aa:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 80098ac:	4b8a      	ldr	r3, [pc, #552]	@ (8009ad8 <temper+0x674>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	4b88      	ldr	r3, [pc, #544]	@ (8009ad8 <temper+0x674>)
 80098b6:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 80098b8:	4b87      	ldr	r3, [pc, #540]	@ (8009ad8 <temper+0x674>)
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	4b8a      	ldr	r3, [pc, #552]	@ (8009ae8 <temper+0x684>)
 80098be:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 80098c0:	4b89      	ldr	r3, [pc, #548]	@ (8009ae8 <temper+0x684>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b07      	cmp	r3, #7
 80098c6:	d800      	bhi.n	80098ca <temper+0x466>
 80098c8:	e298      	b.n	8009dfc <temper+0x998>
			goto tempe17;  // Si, obten el promedio
 80098ca:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 80098cc:	4b8d      	ldr	r3, [pc, #564]	@ (8009b04 <temper+0x6a0>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 80098d2:	1dfb      	adds	r3, r7, #7
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
 80098d8:	e00f      	b.n	80098fa <temper+0x496>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 80098da:	1dfb      	adds	r3, r7, #7
 80098dc:	781a      	ldrb	r2, [r3, #0]
 80098de:	4b8a      	ldr	r3, [pc, #552]	@ (8009b08 <temper+0x6a4>)
 80098e0:	0052      	lsls	r2, r2, #1
 80098e2:	5ad2      	ldrh	r2, [r2, r3]
 80098e4:	4b87      	ldr	r3, [pc, #540]	@ (8009b04 <temper+0x6a0>)
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	18d3      	adds	r3, r2, r3
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	4b85      	ldr	r3, [pc, #532]	@ (8009b04 <temper+0x6a0>)
 80098ee:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 80098f0:	1dfb      	adds	r3, r7, #7
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	1dfb      	adds	r3, r7, #7
 80098f6:	3201      	adds	r2, #1
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	1dfb      	adds	r3, r7, #7
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b07      	cmp	r3, #7
 8009900:	d9eb      	bls.n	80098da <temper+0x476>
	}
	resul = resul / 8;
 8009902:	4b80      	ldr	r3, [pc, #512]	@ (8009b04 <temper+0x6a0>)
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	08db      	lsrs	r3, r3, #3
 8009908:	b29a      	uxth	r2, r3
 800990a:	4b7e      	ldr	r3, [pc, #504]	@ (8009b04 <temper+0x6a0>)
 800990c:	801a      	strh	r2, [r3, #0]
	linealiza();
 800990e:	f000 faf3 	bl	8009ef8 <linealiza>
	X = tempo;
 8009912:	4b7e      	ldr	r3, [pc, #504]	@ (8009b0c <temper+0x6a8>)
 8009914:	881a      	ldrh	r2, [r3, #0]
 8009916:	4b7e      	ldr	r3, [pc, #504]	@ (8009b10 <temper+0x6ac>)
 8009918:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800991a:	4b7d      	ldr	r3, [pc, #500]	@ (8009b10 <temper+0x6ac>)
 800991c:	881a      	ldrh	r2, [r3, #0]
 800991e:	4b7d      	ldr	r3, [pc, #500]	@ (8009b14 <temper+0x6b0>)
 8009920:	801a      	strh	r2, [r3, #0]


	resul = 0;
 8009922:	4b78      	ldr	r3, [pc, #480]	@ (8009b04 <temper+0x6a0>)
 8009924:	2200      	movs	r2, #0
 8009926:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 8009928:	1dbb      	adds	r3, r7, #6
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	e00f      	b.n	8009950 <temper+0x4ec>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 8009930:	1dbb      	adds	r3, r7, #6
 8009932:	781a      	ldrb	r2, [r3, #0]
 8009934:	4b78      	ldr	r3, [pc, #480]	@ (8009b18 <temper+0x6b4>)
 8009936:	0052      	lsls	r2, r2, #1
 8009938:	5ad2      	ldrh	r2, [r2, r3]
 800993a:	4b72      	ldr	r3, [pc, #456]	@ (8009b04 <temper+0x6a0>)
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	18d3      	adds	r3, r2, r3
 8009940:	b29a      	uxth	r2, r3
 8009942:	4b70      	ldr	r3, [pc, #448]	@ (8009b04 <temper+0x6a0>)
 8009944:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 8009946:	1dbb      	adds	r3, r7, #6
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	1dbb      	adds	r3, r7, #6
 800994c:	3201      	adds	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
 8009950:	1dbb      	adds	r3, r7, #6
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b07      	cmp	r3, #7
 8009956:	d9eb      	bls.n	8009930 <temper+0x4cc>
	}
	resul = resul / 8;
 8009958:	4b6a      	ldr	r3, [pc, #424]	@ (8009b04 <temper+0x6a0>)
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	08db      	lsrs	r3, r3, #3
 800995e:	b29a      	uxth	r2, r3
 8009960:	4b68      	ldr	r3, [pc, #416]	@ (8009b04 <temper+0x6a0>)
 8009962:	801a      	strh	r2, [r3, #0]
	linealiza();
 8009964:	f000 fac8 	bl	8009ef8 <linealiza>
	X = tempo;
 8009968:	4b68      	ldr	r3, [pc, #416]	@ (8009b0c <temper+0x6a8>)
 800996a:	881a      	ldrh	r2, [r3, #0]
 800996c:	4b68      	ldr	r3, [pc, #416]	@ (8009b10 <temper+0x6ac>)
 800996e:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 8009970:	4b67      	ldr	r3, [pc, #412]	@ (8009b10 <temper+0x6ac>)
 8009972:	881a      	ldrh	r2, [r3, #0]
 8009974:	4b69      	ldr	r3, [pc, #420]	@ (8009b1c <temper+0x6b8>)
 8009976:	801a      	strh	r2, [r3, #0]


	resul = 0;
 8009978:	4b62      	ldr	r3, [pc, #392]	@ (8009b04 <temper+0x6a0>)
 800997a:	2200      	movs	r2, #0
 800997c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800997e:	1d7b      	adds	r3, r7, #5
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	e00f      	b.n	80099a6 <temper+0x542>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 8009986:	1d7b      	adds	r3, r7, #5
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	4b5d      	ldr	r3, [pc, #372]	@ (8009b00 <temper+0x69c>)
 800998c:	0052      	lsls	r2, r2, #1
 800998e:	5ad2      	ldrh	r2, [r2, r3]
 8009990:	4b5c      	ldr	r3, [pc, #368]	@ (8009b04 <temper+0x6a0>)
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	18d3      	adds	r3, r2, r3
 8009996:	b29a      	uxth	r2, r3
 8009998:	4b5a      	ldr	r3, [pc, #360]	@ (8009b04 <temper+0x6a0>)
 800999a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800999c:	1d7b      	adds	r3, r7, #5
 800999e:	781a      	ldrb	r2, [r3, #0]
 80099a0:	1d7b      	adds	r3, r7, #5
 80099a2:	3201      	adds	r2, #1
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	1d7b      	adds	r3, r7, #5
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b07      	cmp	r3, #7
 80099ac:	d9eb      	bls.n	8009986 <temper+0x522>
	}
	resul = resul / 8;
 80099ae:	4b55      	ldr	r3, [pc, #340]	@ (8009b04 <temper+0x6a0>)
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	08db      	lsrs	r3, r3, #3
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	4b53      	ldr	r3, [pc, #332]	@ (8009b04 <temper+0x6a0>)
 80099b8:	801a      	strh	r2, [r3, #0]
	linealiza();
 80099ba:	f000 fa9d 	bl	8009ef8 <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 80099be:	4b53      	ldr	r3, [pc, #332]	@ (8009b0c <temper+0x6a8>)
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	4b56      	ldr	r3, [pc, #344]	@ (8009b20 <temper+0x6bc>)
 80099c6:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 80099c8:	4b50      	ldr	r3, [pc, #320]	@ (8009b0c <temper+0x6a8>)
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	0a1b      	lsrs	r3, r3, #8
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	4b54      	ldr	r3, [pc, #336]	@ (8009b24 <temper+0x6c0>)
 80099d4:	701a      	strb	r2, [r3, #0]

	resul = 0;
 80099d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009b04 <temper+0x6a0>)
 80099d8:	2200      	movs	r2, #0
 80099da:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 80099dc:	1d3b      	adds	r3, r7, #4
 80099de:	2200      	movs	r2, #0
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	e00f      	b.n	8009a04 <temper+0x5a0>
	{
		resul = resul + tambram[i];    // Calcula el promedio
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	781a      	ldrb	r2, [r3, #0]
 80099e8:	4b3d      	ldr	r3, [pc, #244]	@ (8009ae0 <temper+0x67c>)
 80099ea:	0052      	lsls	r2, r2, #1
 80099ec:	5ad2      	ldrh	r2, [r2, r3]
 80099ee:	4b45      	ldr	r3, [pc, #276]	@ (8009b04 <temper+0x6a0>)
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	18d3      	adds	r3, r2, r3
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	4b43      	ldr	r3, [pc, #268]	@ (8009b04 <temper+0x6a0>)
 80099f8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 80099fa:	1d3b      	adds	r3, r7, #4
 80099fc:	781a      	ldrb	r2, [r3, #0]
 80099fe:	1d3b      	adds	r3, r7, #4
 8009a00:	3201      	adds	r2, #1
 8009a02:	701a      	strb	r2, [r3, #0]
 8009a04:	1d3b      	adds	r3, r7, #4
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b07      	cmp	r3, #7
 8009a0a:	d9eb      	bls.n	80099e4 <temper+0x580>
	}
	resul = resul / 8;
 8009a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8009b04 <temper+0x6a0>)
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	08db      	lsrs	r3, r3, #3
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	4b3b      	ldr	r3, [pc, #236]	@ (8009b04 <temper+0x6a0>)
 8009a16:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 8009a18:	4b43      	ldr	r3, [pc, #268]	@ (8009b28 <temper+0x6c4>)
 8009a1a:	881a      	ldrh	r2, [r3, #0]
 8009a1c:	4b33      	ldr	r3, [pc, #204]	@ (8009aec <temper+0x688>)
 8009a1e:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 8009a20:	4b32      	ldr	r3, [pc, #200]	@ (8009aec <temper+0x688>)
 8009a22:	881a      	ldrh	r2, [r3, #0]
 8009a24:	4b37      	ldr	r3, [pc, #220]	@ (8009b04 <temper+0x6a0>)
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8009aec <temper+0x688>)
 8009a2e:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 8009a30:	4b2e      	ldr	r3, [pc, #184]	@ (8009aec <temper+0x688>)
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d100      	bne.n	8009a3a <temper+0x5d6>
 8009a38:	e0ab      	b.n	8009b92 <temper+0x72e>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 8009a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8009aec <temper+0x688>)
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	b21b      	sxth	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	da18      	bge.n	8009a76 <temper+0x612>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 8009a44:	4b29      	ldr	r3, [pc, #164]	@ (8009aec <temper+0x688>)
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	4b27      	ldr	r3, [pc, #156]	@ (8009aec <temper+0x688>)
 8009a4e:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 8009a50:	4b26      	ldr	r3, [pc, #152]	@ (8009aec <temper+0x688>)
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d028      	beq.n	8009aaa <temper+0x646>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 8009a58:	4b2a      	ldr	r3, [pc, #168]	@ (8009b04 <temper+0x6a0>)
 8009a5a:	881a      	ldrh	r2, [r3, #0]
 8009a5c:	4b23      	ldr	r3, [pc, #140]	@ (8009aec <temper+0x688>)
 8009a5e:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 8009a60:	4b22      	ldr	r3, [pc, #136]	@ (8009aec <temper+0x688>)
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	4b20      	ldr	r3, [pc, #128]	@ (8009aec <temper+0x688>)
 8009a6a:	801a      	strh	r2, [r3, #0]
	resul = Y;
 8009a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8009aec <temper+0x688>)
 8009a6e:	881a      	ldrh	r2, [r3, #0]
 8009a70:	4b24      	ldr	r3, [pc, #144]	@ (8009b04 <temper+0x6a0>)
 8009a72:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 8009a74:	e076      	b.n	8009b64 <temper+0x700>
		goto tempe25b;            //La diferencia de promedios es positiva?
 8009a76:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 8009a78:	4b1c      	ldr	r3, [pc, #112]	@ (8009aec <temper+0x688>)
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	4b1a      	ldr	r3, [pc, #104]	@ (8009aec <temper+0x688>)
 8009a82:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 8009a84:	4b19      	ldr	r3, [pc, #100]	@ (8009aec <temper+0x688>)
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d010      	beq.n	8009aae <temper+0x64a>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 8009a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b04 <temper+0x6a0>)
 8009a8e:	881a      	ldrh	r2, [r3, #0]
 8009a90:	4b16      	ldr	r3, [pc, #88]	@ (8009aec <temper+0x688>)
 8009a92:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 8009a94:	4b15      	ldr	r3, [pc, #84]	@ (8009aec <temper+0x688>)
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	4b13      	ldr	r3, [pc, #76]	@ (8009aec <temper+0x688>)
 8009a9e:	801a      	strh	r2, [r3, #0]
		resul = Y;
 8009aa0:	4b12      	ldr	r3, [pc, #72]	@ (8009aec <temper+0x688>)
 8009aa2:	881a      	ldrh	r2, [r3, #0]
 8009aa4:	4b17      	ldr	r3, [pc, #92]	@ (8009b04 <temper+0x6a0>)
 8009aa6:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 8009aa8:	e05c      	b.n	8009b64 <temper+0x700>
		goto vesiestab;  		  // Si, revisa estabilidad
 8009aaa:	46c0      	nop			@ (mov r8, r8)
 8009aac:	e000      	b.n	8009ab0 <temper+0x64c>
			goto vesiestab;       // Si, revisa estabilidad
 8009aae:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 8009ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8009b2c <temper+0x6c8>)
 8009ab2:	881a      	ldrh	r2, [r3, #0]
 8009ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8009aec <temper+0x688>)
 8009ab6:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8009aec <temper+0x688>)
 8009aba:	881a      	ldrh	r2, [r3, #0]
 8009abc:	4b11      	ldr	r3, [pc, #68]	@ (8009b04 <temper+0x6a0>)
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	4b09      	ldr	r3, [pc, #36]	@ (8009aec <temper+0x688>)
 8009ac6:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 8009ac8:	4b08      	ldr	r3, [pc, #32]	@ (8009aec <temper+0x688>)
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d031      	beq.n	8009b34 <temper+0x6d0>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 8009ad0:	4b17      	ldr	r3, [pc, #92]	@ (8009b30 <temper+0x6cc>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
		goto noestab;
 8009ad6:	e034      	b.n	8009b42 <temper+0x6de>
 8009ad8:	20000afc 	.word	0x20000afc
 8009adc:	20000a9c 	.word	0x20000a9c
 8009ae0:	20001048 	.word	0x20001048
 8009ae4:	40012400 	.word	0x40012400
 8009ae8:	2000106a 	.word	0x2000106a
 8009aec:	2000106c 	.word	0x2000106c
 8009af0:	000003b5 	.word	0x000003b5
 8009af4:	20000ac4 	.word	0x20000ac4
 8009af8:	20000ad4 	.word	0x20000ad4
 8009afc:	20000b01 	.word	0x20000b01
 8009b00:	20001058 	.word	0x20001058
 8009b04:	20001070 	.word	0x20001070
 8009b08:	20001028 	.word	0x20001028
 8009b0c:	20001072 	.word	0x20001072
 8009b10:	2000106e 	.word	0x2000106e
 8009b14:	20000fdc 	.word	0x20000fdc
 8009b18:	20001038 	.word	0x20001038
 8009b1c:	20000b90 	.word	0x20000b90
 8009b20:	20000aef 	.word	0x20000aef
 8009b24:	20000aee 	.word	0x20000aee
 8009b28:	20001076 	.word	0x20001076
 8009b2c:	20001078 	.word	0x20001078
 8009b30:	20000b02 	.word	0x20000b02
			goto estable;  // El nuevo dato es igual a último?
 8009b34:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 8009b36:	4bc9      	ldr	r3, [pc, #804]	@ (8009e5c <temper+0x9f8>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	4bc7      	ldr	r3, [pc, #796]	@ (8009e5c <temper+0x9f8>)
 8009b40:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 8009b42:	4bc7      	ldr	r3, [pc, #796]	@ (8009e60 <temper+0x9fc>)
 8009b44:	881a      	ldrh	r2, [r3, #0]
 8009b46:	4bc7      	ldr	r3, [pc, #796]	@ (8009e64 <temper+0xa00>)
 8009b48:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 8009b4a:	4bc6      	ldr	r3, [pc, #792]	@ (8009e64 <temper+0xa00>)
 8009b4c:	881a      	ldrh	r2, [r3, #0]
 8009b4e:	4bc6      	ldr	r3, [pc, #792]	@ (8009e68 <temper+0xa04>)
 8009b50:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 8009b52:	4bc2      	ldr	r3, [pc, #776]	@ (8009e5c <temper+0x9f8>)
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	4bc5      	ldr	r3, [pc, #788]	@ (8009e6c <temper+0xa08>)
 8009b58:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 8009b5a:	4bc4      	ldr	r3, [pc, #784]	@ (8009e6c <temper+0xa08>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b0e      	cmp	r3, #14
 8009b60:	d920      	bls.n	8009ba4 <temper+0x740>
			goto tempe29;

tempe26:
 8009b62:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 8009b64:	4bbe      	ldr	r3, [pc, #760]	@ (8009e60 <temper+0x9fc>)
 8009b66:	881a      	ldrh	r2, [r3, #0]
 8009b68:	4bc1      	ldr	r3, [pc, #772]	@ (8009e70 <temper+0xa0c>)
 8009b6a:	801a      	strh	r2, [r3, #0]
		promant = X;
 8009b6c:	4bc0      	ldr	r3, [pc, #768]	@ (8009e70 <temper+0xa0c>)
 8009b6e:	881a      	ldrh	r2, [r3, #0]
 8009b70:	4bc0      	ldr	r3, [pc, #768]	@ (8009e74 <temper+0xa10>)
 8009b72:	801a      	strh	r2, [r3, #0]
		linealiza();
 8009b74:	f000 f9c0 	bl	8009ef8 <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 8009b78:	4bbf      	ldr	r3, [pc, #764]	@ (8009e78 <temper+0xa14>)
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	4bbf      	ldr	r3, [pc, #764]	@ (8009e7c <temper+0xa18>)
 8009b80:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 8009b82:	4bbd      	ldr	r3, [pc, #756]	@ (8009e78 <temper+0xa14>)
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	0a1b      	lsrs	r3, r3, #8
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	4bbc      	ldr	r3, [pc, #752]	@ (8009e80 <temper+0xa1c>)
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	e000      	b.n	8009b94 <temper+0x730>
		goto tempe27;                //nota1: checar comparaciones
 8009b92:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 8009b94:	4bb7      	ldr	r3, [pc, #732]	@ (8009e74 <temper+0xa10>)
 8009b96:	881a      	ldrh	r2, [r3, #0]
 8009b98:	4bb3      	ldr	r3, [pc, #716]	@ (8009e68 <temper+0xa04>)
 8009b9a:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 8009b9c:	4baf      	ldr	r3, [pc, #700]	@ (8009e5c <temper+0x9f8>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	e000      	b.n	8009ba6 <temper+0x742>
			goto tempe29;
 8009ba4:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 8009ba6:	f7f9 fe07 	bl	80037b8 <tdev_to_Word>
 8009baa:	0003      	movs	r3, r0
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	4bb0      	ldr	r3, [pc, #704]	@ (8009e70 <temper+0xa0c>)
 8009bb0:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 8009bb2:	4baf      	ldr	r3, [pc, #700]	@ (8009e70 <temper+0xa0c>)
 8009bb4:	881a      	ldrh	r2, [r3, #0]
 8009bb6:	4bb3      	ldr	r3, [pc, #716]	@ (8009e84 <temper+0xa20>)
 8009bb8:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 8009bba:	4bb3      	ldr	r3, [pc, #716]	@ (8009e88 <temper+0xa24>)
 8009bbc:	2259      	movs	r2, #89	@ 0x59
 8009bbe:	5c9a      	ldrb	r2, [r3, r2]
 8009bc0:	4baa      	ldr	r3, [pc, #680]	@ (8009e6c <temper+0xa08>)
 8009bc2:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 8009bc4:	4ba9      	ldr	r3, [pc, #676]	@ (8009e6c <temper+0xa08>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d91d      	bls.n	8009c08 <temper+0x7a4>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 8009bcc:	4bae      	ldr	r3, [pc, #696]	@ (8009e88 <temper+0xa24>)
 8009bce:	2253      	movs	r2, #83	@ 0x53
 8009bd0:	5c9b      	ldrb	r3, [r3, r2]
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da19      	bge.n	8009c0c <temper+0x7a8>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 8009bd8:	4bac      	ldr	r3, [pc, #688]	@ (8009e8c <temper+0xa28>)
 8009bda:	791b      	ldrb	r3, [r3, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d107      	bne.n	8009bf0 <temper+0x78c>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 8009be0:	4baa      	ldr	r3, [pc, #680]	@ (8009e8c <temper+0xa28>)
 8009be2:	795b      	ldrb	r3, [r3, #5]
 8009be4:	2201      	movs	r2, #1
 8009be6:	4053      	eors	r3, r2
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <temper+0x790>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 8009bee:	e000      	b.n	8009bf2 <temper+0x78e>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 8009bf0:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 8009bf2:	e00c      	b.n	8009c0e <temper+0x7aa>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 8009bf4:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 8009bf6:	4ba6      	ldr	r3, [pc, #664]	@ (8009e90 <temper+0xa2c>)
 8009bf8:	881a      	ldrh	r2, [r3, #0]
 8009bfa:	4b9d      	ldr	r3, [pc, #628]	@ (8009e70 <temper+0xa0c>)
 8009bfc:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 8009bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8009e70 <temper+0xa0c>)
 8009c00:	881a      	ldrh	r2, [r3, #0]
 8009c02:	4ba0      	ldr	r3, [pc, #640]	@ (8009e84 <temper+0xa20>)
 8009c04:	801a      	strh	r2, [r3, #0]
 8009c06:	e002      	b.n	8009c0e <temper+0x7aa>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 8009c08:	46c0      	nop			@ (mov r8, r8)
 8009c0a:	e000      	b.n	8009c0e <temper+0x7aa>
			goto tempe26a;
 8009c0c:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 8009c0e:	4ba1      	ldr	r3, [pc, #644]	@ (8009e94 <temper+0xa30>)
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d014      	beq.n	8009c40 <temper+0x7dc>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 8009c16:	4b9f      	ldr	r3, [pc, #636]	@ (8009e94 <temper+0xa30>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b08      	cmp	r3, #8
 8009c1c:	d800      	bhi.n	8009c20 <temper+0x7bc>
 8009c1e:	e073      	b.n	8009d08 <temper+0x8a4>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 8009c20:	4b93      	ldr	r3, [pc, #588]	@ (8009e70 <temper+0xa0c>)
 8009c22:	4a9d      	ldr	r2, [pc, #628]	@ (8009e98 <temper+0xa34>)
 8009c24:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 8009c26:	4b92      	ldr	r3, [pc, #584]	@ (8009e70 <temper+0xa0c>)
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	0a1b      	lsrs	r3, r3, #8
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	4b93      	ldr	r3, [pc, #588]	@ (8009e80 <temper+0xa1c>)
 8009c32:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 8009c34:	4b8e      	ldr	r3, [pc, #568]	@ (8009e70 <temper+0xa0c>)
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	4b90      	ldr	r3, [pc, #576]	@ (8009e7c <temper+0xa18>)
 8009c3c:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 8009c3e:	e09c      	b.n	8009d7a <temper+0x916>
			goto tempe30;              // Si
 8009c40:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 8009c42:	4b96      	ldr	r3, [pc, #600]	@ (8009e9c <temper+0xa38>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2201      	movs	r2, #1
 8009c48:	4053      	eors	r3, r2
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d05d      	beq.n	8009d0c <temper+0x8a8>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 8009c50:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 8009c52:	4b93      	ldr	r3, [pc, #588]	@ (8009ea0 <temper+0xa3c>)
 8009c54:	881a      	ldrh	r2, [r3, #0]
 8009c56:	4b83      	ldr	r3, [pc, #524]	@ (8009e64 <temper+0xa00>)
 8009c58:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 8009c5a:	4b82      	ldr	r3, [pc, #520]	@ (8009e64 <temper+0xa00>)
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	4b89      	ldr	r3, [pc, #548]	@ (8009e84 <temper+0xa20>)
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	4b7f      	ldr	r3, [pc, #508]	@ (8009e64 <temper+0xa00>)
 8009c68:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 8009c6a:	4b7e      	ldr	r3, [pc, #504]	@ (8009e64 <temper+0xa00>)
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d100      	bne.n	8009c74 <temper+0x810>
 8009c72:	e07f      	b.n	8009d74 <temper+0x910>
			goto tempe40;
		else if (!(GetRegFlagState(Y, 15)))//else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 8009c74:	4b7b      	ldr	r3, [pc, #492]	@ (8009e64 <temper+0xa00>)
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	b21b      	sxth	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da48      	bge.n	8009d10 <temper+0x8ac>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 8009c7e:	4b82      	ldr	r3, [pc, #520]	@ (8009e88 <temper+0xa24>)
 8009c80:	2254      	movs	r2, #84	@ 0x54
 8009c82:	5c9a      	ldrb	r2, [r3, r2]
 8009c84:	4b79      	ldr	r3, [pc, #484]	@ (8009e6c <temper+0xa08>)
 8009c86:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 8009c88:	4b78      	ldr	r3, [pc, #480]	@ (8009e6c <temper+0xa08>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d041      	beq.n	8009d14 <temper+0x8b0>
			goto tempe39;
		A = A << 1;
 8009c90:	4b76      	ldr	r3, [pc, #472]	@ (8009e6c <temper+0xa08>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	18db      	adds	r3, r3, r3
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	4b74      	ldr	r3, [pc, #464]	@ (8009e6c <temper+0xa08>)
 8009c9a:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 8009c9c:	4b81      	ldr	r3, [pc, #516]	@ (8009ea4 <temper+0xa40>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	4b7f      	ldr	r3, [pc, #508]	@ (8009ea4 <temper+0xa40>)
 8009ca6:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 8009ca8:	4b70      	ldr	r3, [pc, #448]	@ (8009e6c <temper+0xa08>)
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	4b7d      	ldr	r3, [pc, #500]	@ (8009ea4 <temper+0xa40>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d900      	bls.n	8009cb6 <temper+0x852>
 8009cb4:	e065      	b.n	8009d82 <temper+0x91e>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 8009cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8009e64 <temper+0xa00>)
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	425b      	negs	r3, r3
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	4b69      	ldr	r3, [pc, #420]	@ (8009e64 <temper+0xa00>)
 8009cc0:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 8009cc2:	4b68      	ldr	r3, [pc, #416]	@ (8009e64 <temper+0xa00>)
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	2b0a      	cmp	r3, #10
 8009cc8:	d90e      	bls.n	8009ce8 <temper+0x884>
			goto tempe37b;

		X = tDisplay_w;
 8009cca:	4b6e      	ldr	r3, [pc, #440]	@ (8009e84 <temper+0xa20>)
 8009ccc:	881a      	ldrh	r2, [r3, #0]
 8009cce:	4b68      	ldr	r3, [pc, #416]	@ (8009e70 <temper+0xa0c>)
 8009cd0:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 8009cd2:	4b67      	ldr	r3, [pc, #412]	@ (8009e70 <temper+0xa0c>)
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	3b0a      	subs	r3, #10
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	4b65      	ldr	r3, [pc, #404]	@ (8009e70 <temper+0xa0c>)
 8009cdc:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 8009cde:	4b64      	ldr	r3, [pc, #400]	@ (8009e70 <temper+0xa0c>)
 8009ce0:	881a      	ldrh	r2, [r3, #0]
 8009ce2:	4b71      	ldr	r3, [pc, #452]	@ (8009ea8 <temper+0xa44>)
 8009ce4:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 8009ce6:	e021      	b.n	8009d2c <temper+0x8c8>
			goto tempe37b;
 8009ce8:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 8009cea:	4b6d      	ldr	r3, [pc, #436]	@ (8009ea0 <temper+0xa3c>)
 8009cec:	881a      	ldrh	r2, [r3, #0]
 8009cee:	4b60      	ldr	r3, [pc, #384]	@ (8009e70 <temper+0xa0c>)
 8009cf0:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 8009cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8009e70 <temper+0xa0c>)
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8009e70 <temper+0xa0c>)
 8009cfc:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 8009cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8009e70 <temper+0xa0c>)
 8009d00:	881a      	ldrh	r2, [r3, #0]
 8009d02:	4b69      	ldr	r3, [pc, #420]	@ (8009ea8 <temper+0xa44>)
 8009d04:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 8009d06:	e011      	b.n	8009d2c <temper+0x8c8>
			goto tempe39;              // Si, cargalo al display
 8009d08:	46c0      	nop			@ (mov r8, r8)
 8009d0a:	e004      	b.n	8009d16 <temper+0x8b2>
		goto tempe39;
 8009d0c:	46c0      	nop			@ (mov r8, r8)
 8009d0e:	e002      	b.n	8009d16 <temper+0x8b2>
			goto tempe39;      // La diferencia es positiva?
 8009d10:	46c0      	nop			@ (mov r8, r8)
 8009d12:	e000      	b.n	8009d16 <temper+0x8b2>
			goto tempe39;
 8009d14:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 8009d16:	4b5b      	ldr	r3, [pc, #364]	@ (8009e84 <temper+0xa20>)
 8009d18:	881a      	ldrh	r2, [r3, #0]
 8009d1a:	4b55      	ldr	r3, [pc, #340]	@ (8009e70 <temper+0xa0c>)
 8009d1c:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 8009d1e:	4b54      	ldr	r3, [pc, #336]	@ (8009e70 <temper+0xa0c>)
 8009d20:	881a      	ldrh	r2, [r3, #0]
 8009d22:	4b61      	ldr	r3, [pc, #388]	@ (8009ea8 <temper+0xa44>)
 8009d24:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 8009d26:	4b61      	ldr	r3, [pc, #388]	@ (8009eac <temper+0xa48>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]

// manuel_math_change ............................. filtro digital
tempe39a:
		A = cnthold;
 8009d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8009eac <temper+0xa48>)
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	4b4e      	ldr	r3, [pc, #312]	@ (8009e6c <temper+0xa08>)
 8009d32:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 8009d34:	4b4d      	ldr	r3, [pc, #308]	@ (8009e6c <temper+0xa08>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d011      	beq.n	8009d60 <temper+0x8fc>
			goto tempe39b;            // Si, carga el dato a tdevdpy
		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 8009d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009eb0 <temper+0xa4c>)
 8009d3e:	881a      	ldrh	r2, [r3, #0]
 8009d40:	4b48      	ldr	r3, [pc, #288]	@ (8009e64 <temper+0xa00>)
 8009d42:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 8009d44:	4b47      	ldr	r3, [pc, #284]	@ (8009e64 <temper+0xa00>)
 8009d46:	881a      	ldrh	r2, [r3, #0]
 8009d48:	4b57      	ldr	r3, [pc, #348]	@ (8009ea8 <temper+0xa44>)
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	4b44      	ldr	r3, [pc, #272]	@ (8009e64 <temper+0xa00>)
 8009d52:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 8009d54:	4b43      	ldr	r3, [pc, #268]	@ (8009e64 <temper+0xa00>)
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	b21b      	sxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	db0c      	blt.n	8009d78 <temper+0x914>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 8009d5e:	e000      	b.n	8009d62 <temper+0x8fe>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 8009d60:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 8009d62:	4b51      	ldr	r3, [pc, #324]	@ (8009ea8 <temper+0xa44>)
 8009d64:	881a      	ldrh	r2, [r3, #0]
 8009d66:	4b42      	ldr	r3, [pc, #264]	@ (8009e70 <temper+0xa0c>)
 8009d68:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 8009d6a:	4b41      	ldr	r3, [pc, #260]	@ (8009e70 <temper+0xa0c>)
 8009d6c:	881a      	ldrh	r2, [r3, #0]
 8009d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8009ea0 <temper+0xa3c>)
 8009d70:	801a      	strh	r2, [r3, #0]
 8009d72:	e002      	b.n	8009d7a <temper+0x916>
			goto tempe40;
 8009d74:	46c0      	nop			@ (mov r8, r8)
 8009d76:	e000      	b.n	8009d7a <temper+0x916>
			goto tempe40;             // Si, congela el display en limsup
 8009d78:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 8009d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8009ea4 <temper+0xa40>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e000      	b.n	8009d84 <temper+0x920>
			goto tempe50;
 8009d82:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 8009d84:	4b4b      	ldr	r3, [pc, #300]	@ (8009eb4 <temper+0xa50>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 8009d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8009eb8 <temper+0xa54>)
 8009d8c:	78db      	ldrb	r3, [r3, #3]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4053      	eors	r3, r2
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10f      	bne.n	8009db8 <temper+0x954>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 8009d98:	4b35      	ldr	r3, [pc, #212]	@ (8009e70 <temper+0xa0c>)
 8009d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8009e98 <temper+0xa34>)
 8009d9c:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 8009d9e:	4b34      	ldr	r3, [pc, #208]	@ (8009e70 <temper+0xa0c>)
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	4b45      	ldr	r3, [pc, #276]	@ (8009ebc <temper+0xa58>)
 8009da6:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 8009da8:	4b31      	ldr	r3, [pc, #196]	@ (8009e70 <temper+0xa0c>)
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	0a1b      	lsrs	r3, r3, #8
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	4b43      	ldr	r3, [pc, #268]	@ (8009ec0 <temper+0xa5c>)
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	e000      	b.n	8009dba <temper+0x956>
			goto tempe52;
 8009db8:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 8009dba:	4b34      	ldr	r3, [pc, #208]	@ (8009e8c <temper+0xa28>)
 8009dbc:	795b      	ldrb	r3, [r3, #5]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	4053      	eors	r3, r2
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d107      	bne.n	8009dd8 <temper+0x974>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 8009dc8:	4b29      	ldr	r3, [pc, #164]	@ (8009e70 <temper+0xa0c>)
 8009dca:	4a33      	ldr	r2, [pc, #204]	@ (8009e98 <temper+0xa34>)
 8009dcc:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 8009dce:	4b28      	ldr	r3, [pc, #160]	@ (8009e70 <temper+0xa0c>)
 8009dd0:	881a      	ldrh	r2, [r3, #0]
 8009dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8009e90 <temper+0xa2c>)
 8009dd4:	801a      	strh	r2, [r3, #0]
 8009dd6:	e000      	b.n	8009dda <temper+0x976>
			goto tempe53;
 8009dd8:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 8009dda:	4b2c      	ldr	r3, [pc, #176]	@ (8009e8c <temper+0xa28>)
 8009ddc:	79db      	ldrb	r3, [r3, #7]
 8009dde:	2201      	movs	r2, #1
 8009de0:	4053      	eors	r3, r2
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10b      	bne.n	8009e00 <temper+0x99c>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 8009de8:	4b21      	ldr	r3, [pc, #132]	@ (8009e70 <temper+0xa0c>)
 8009dea:	4a2b      	ldr	r2, [pc, #172]	@ (8009e98 <temper+0xa34>)
 8009dec:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 8009dee:	4b20      	ldr	r3, [pc, #128]	@ (8009e70 <temper+0xa0c>)
 8009df0:	881a      	ldrh	r2, [r3, #0]
 8009df2:	4b34      	ldr	r3, [pc, #208]	@ (8009ec4 <temper+0xa60>)
 8009df4:	801a      	strh	r2, [r3, #0]
 8009df6:	e004      	b.n	8009e02 <temper+0x99e>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 8009df8:	46c0      	nop			@ (mov r8, r8)
 8009dfa:	e002      	b.n	8009e02 <temper+0x99e>
			goto fintemp;
 8009dfc:	46c0      	nop			@ (mov r8, r8)
 8009dfe:	e000      	b.n	8009e02 <temper+0x99e>
			goto fintemp;
 8009e00:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 8009e02:	4b31      	ldr	r3, [pc, #196]	@ (8009ec8 <temper+0xa64>)
 8009e04:	781a      	ldrb	r2, [r3, #0]
 8009e06:	4b19      	ldr	r3, [pc, #100]	@ (8009e6c <temper+0xa08>)
 8009e08:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 8009e0a:	4b18      	ldr	r3, [pc, #96]	@ (8009e6c <temper+0xa08>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d064      	beq.n	8009edc <temper+0xa78>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 8009e12:	4b1d      	ldr	r3, [pc, #116]	@ (8009e88 <temper+0xa24>)
 8009e14:	2259      	movs	r2, #89	@ 0x59
 8009e16:	5c9a      	ldrb	r2, [r3, r2]
 8009e18:	4b14      	ldr	r3, [pc, #80]	@ (8009e6c <temper+0xa08>)
 8009e1a:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 8009e1c:	4b13      	ldr	r3, [pc, #76]	@ (8009e6c <temper+0xa08>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d05d      	beq.n	8009ee0 <temper+0xa7c>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 8009e24:	4b11      	ldr	r3, [pc, #68]	@ (8009e6c <temper+0xa08>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d04f      	beq.n	8009ecc <temper+0xa68>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 8009e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e6c <temper+0xa08>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d00b      	beq.n	8009e4c <temper+0x9e8>
			goto clrRetFail;
		if (A != 1)
 8009e34:	4b0d      	ldr	r3, [pc, #52]	@ (8009e6c <temper+0xa08>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d153      	bne.n	8009ee4 <temper+0xa80>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 8009e3c:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 8009e3e:	491e      	ldr	r1, [pc, #120]	@ (8009eb8 <temper+0xa54>)
 8009e40:	481d      	ldr	r0, [pc, #116]	@ (8009eb8 <temper+0xa54>)
 8009e42:	2303      	movs	r3, #3
 8009e44:	2202      	movs	r2, #2
 8009e46:	f000 fa30 	bl	800a2aa <Bclear_Clear_trfst>
 8009e4a:	e000      	b.n	8009e4e <temper+0x9ea>
			goto clrRetFail;
 8009e4c:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 8009e4e:	490f      	ldr	r1, [pc, #60]	@ (8009e8c <temper+0xa28>)
 8009e50:	480e      	ldr	r0, [pc, #56]	@ (8009e8c <temper+0xa28>)
 8009e52:	2305      	movs	r3, #5
 8009e54:	2204      	movs	r2, #4
 8009e56:	f000 fa28 	bl	800a2aa <Bclear_Clear_trfst>
 8009e5a:	e038      	b.n	8009ece <temper+0xa6a>
 8009e5c:	20000b02 	.word	0x20000b02
 8009e60:	20001070 	.word	0x20001070
 8009e64:	2000106c 	.word	0x2000106c
 8009e68:	20001078 	.word	0x20001078
 8009e6c:	2000106a 	.word	0x2000106a
 8009e70:	2000106e 	.word	0x2000106e
 8009e74:	20001076 	.word	0x20001076
 8009e78:	20001072 	.word	0x20001072
 8009e7c:	20000aed 	.word	0x20000aed
 8009e80:	20000aec 	.word	0x20000aec
 8009e84:	20000fde 	.word	0x20000fde
 8009e88:	200000bc 	.word	0x200000bc
 8009e8c:	20000abc 	.word	0x20000abc
 8009e90:	20000b90 	.word	0x20000b90
 8009e94:	20000b00 	.word	0x20000b00
 8009e98:	fffffe34 	.word	0xfffffe34
 8009e9c:	20000ab4 	.word	0x20000ab4
 8009ea0:	20000af0 	.word	0x20000af0
 8009ea4:	20000aff 	.word	0x20000aff
 8009ea8:	20001074 	.word	0x20001074
 8009eac:	20000b03 	.word	0x20000b03
 8009eb0:	20000aea 	.word	0x20000aea
 8009eb4:	20000afc 	.word	0x20000afc
 8009eb8:	20000ac4 	.word	0x20000ac4
 8009ebc:	20000aef 	.word	0x20000aef
 8009ec0:	20000aee 	.word	0x20000aee
 8009ec4:	20000fdc 	.word	0x20000fdc
 8009ec8:	20000ad4 	.word	0x20000ad4
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 8009ecc:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 8009ece:	4908      	ldr	r1, [pc, #32]	@ (8009ef0 <temper+0xa8c>)
 8009ed0:	4808      	ldr	r0, [pc, #32]	@ (8009ef4 <temper+0xa90>)
 8009ed2:	2307      	movs	r3, #7
 8009ed4:	2205      	movs	r2, #5
 8009ed6:	f000 f9e8 	bl	800a2aa <Bclear_Clear_trfst>
 8009eda:	e004      	b.n	8009ee6 <temper+0xa82>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 8009edc:	46c0      	nop			@ (mov r8, r8)
 8009ede:	e002      	b.n	8009ee6 <temper+0xa82>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 8009ee0:	46c0      	nop			@ (mov r8, r8)
 8009ee2:	e000      	b.n	8009ee6 <temper+0xa82>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 8009ee4:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 8009ee6:	46c0      	nop			@ (mov r8, r8)




}
 8009ee8:	46c0      	nop			@ (mov r8, r8)
 8009eea:	46bd      	mov	sp, r7
 8009eec:	b002      	add	sp, #8
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000abc 	.word	0x20000abc
 8009ef4:	20000ac4 	.word	0x20000ac4

08009ef8 <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	af00      	add	r7, sp, #0
	tempo = 0;
 8009efc:	4b57      	ldr	r3, [pc, #348]	@ (800a05c <linealiza+0x164>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	801a      	strh	r2, [r3, #0]
	Y = resul;
 8009f02:	4b57      	ldr	r3, [pc, #348]	@ (800a060 <linealiza+0x168>)
 8009f04:	881a      	ldrh	r2, [r3, #0]
 8009f06:	4b57      	ldr	r3, [pc, #348]	@ (800a064 <linealiza+0x16c>)
 8009f08:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 8009f0a:	4b56      	ldr	r3, [pc, #344]	@ (800a064 <linealiza+0x16c>)
 8009f0c:	881a      	ldrh	r2, [r3, #0]
 8009f0e:	4b56      	ldr	r3, [pc, #344]	@ (800a068 <linealiza+0x170>)
 8009f10:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 8009f12:	4b55      	ldr	r3, [pc, #340]	@ (800a068 <linealiza+0x170>)
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	4a55      	ldr	r2, [pc, #340]	@ (800a06c <linealiza+0x174>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d80e      	bhi.n	8009f3a <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 8009f1c:	4b52      	ldr	r3, [pc, #328]	@ (800a068 <linealiza+0x170>)
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	4a53      	ldr	r2, [pc, #332]	@ (800a070 <linealiza+0x178>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d810      	bhi.n	8009f48 <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 8009f26:	4b50      	ldr	r3, [pc, #320]	@ (800a068 <linealiza+0x170>)
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	4a52      	ldr	r2, [pc, #328]	@ (800a074 <linealiza+0x17c>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d812      	bhi.n	8009f56 <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 8009f30:	4b4d      	ldr	r3, [pc, #308]	@ (800a068 <linealiza+0x170>)
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	2bca      	cmp	r3, #202	@ 0xca
 8009f36:	d91c      	bls.n	8009f72 <linealiza+0x7a>
		goto lil_principal;
 8009f38:	e015      	b.n	8009f66 <linealiza+0x6e>
		goto wise_hot_3;
 8009f3a:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 8009f3c:	4b4e      	ldr	r3, [pc, #312]	@ (800a078 <linealiza+0x180>)
 8009f3e:	0019      	movs	r1, r3
 8009f40:	2053      	movs	r0, #83	@ 0x53
 8009f42:	f000 f94d 	bl	800a1e0 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 8009f46:	e01b      	b.n	8009f80 <linealiza+0x88>
		goto wise_hot_2;
 8009f48:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 8009f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800a07c <linealiza+0x184>)
 8009f4c:	0019      	movs	r1, r3
 8009f4e:	2034      	movs	r0, #52	@ 0x34
 8009f50:	f000 f946 	bl	800a1e0 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 8009f54:	e014      	b.n	8009f80 <linealiza+0x88>
		goto wise_hot_1;
 8009f56:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 8009f58:	2393      	movs	r3, #147	@ 0x93
 8009f5a:	01db      	lsls	r3, r3, #7
 8009f5c:	0019      	movs	r1, r3
 8009f5e:	201d      	movs	r0, #29
 8009f60:	f000 f93e 	bl	800a1e0 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 8009f64:	e00c      	b.n	8009f80 <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 8009f66:	4b46      	ldr	r3, [pc, #280]	@ (800a080 <linealiza+0x188>)
 8009f68:	0019      	movs	r1, r3
 8009f6a:	2013      	movs	r0, #19
 8009f6c:	f000 f938 	bl	800a1e0 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 8009f70:	e006      	b.n	8009f80 <linealiza+0x88>
		goto curva_fria;
 8009f72:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 8009f74:	23de      	movs	r3, #222	@ 0xde
 8009f76:	019b      	lsls	r3, r3, #6
 8009f78:	0019      	movs	r1, r3
 8009f7a:	201e      	movs	r0, #30
 8009f7c:	f000 f930 	bl	800a1e0 <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 8009f80:	4b36      	ldr	r3, [pc, #216]	@ (800a05c <linealiza+0x164>)
 8009f82:	881a      	ldrh	r2, [r3, #0]
 8009f84:	4b3f      	ldr	r3, [pc, #252]	@ (800a084 <linealiza+0x18c>)
 8009f86:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 8009f88:	4b3e      	ldr	r3, [pc, #248]	@ (800a084 <linealiza+0x18c>)
 8009f8a:	881a      	ldrh	r2, [r3, #0]
 8009f8c:	4b35      	ldr	r3, [pc, #212]	@ (800a064 <linealiza+0x16c>)
 8009f8e:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 8009f90:	4b34      	ldr	r3, [pc, #208]	@ (800a064 <linealiza+0x16c>)
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b21b      	sxth	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	da05      	bge.n	8009fa6 <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 8009f9a:	4b3a      	ldr	r3, [pc, #232]	@ (800a084 <linealiza+0x18c>)
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	425b      	negs	r3, r3
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	4b38      	ldr	r3, [pc, #224]	@ (800a084 <linealiza+0x18c>)
 8009fa4:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 8009fa6:	4b37      	ldr	r3, [pc, #220]	@ (800a084 <linealiza+0x18c>)
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	4b35      	ldr	r3, [pc, #212]	@ (800a088 <linealiza+0x190>)
 8009fb2:	701a      	strb	r2, [r3, #0]
	waux = A;
 8009fb4:	4b34      	ldr	r3, [pc, #208]	@ (800a088 <linealiza+0x190>)
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	4b34      	ldr	r3, [pc, #208]	@ (800a08c <linealiza+0x194>)
 8009fba:	701a      	strb	r2, [r3, #0]
	A = 10;
 8009fbc:	4b32      	ldr	r3, [pc, #200]	@ (800a088 <linealiza+0x190>)
 8009fbe:	220a      	movs	r2, #10
 8009fc0:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 8009fc2:	4b30      	ldr	r3, [pc, #192]	@ (800a084 <linealiza+0x18c>)
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	001a      	movs	r2, r3
 8009fca:	4b2f      	ldr	r3, [pc, #188]	@ (800a088 <linealiza+0x190>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	4353      	muls	r3, r2
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	4b2c      	ldr	r3, [pc, #176]	@ (800a084 <linealiza+0x18c>)
 8009fd4:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 8009fd6:	4b2b      	ldr	r3, [pc, #172]	@ (800a084 <linealiza+0x18c>)
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	0a1b      	lsrs	r3, r3, #8
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	4b29      	ldr	r3, [pc, #164]	@ (800a088 <linealiza+0x190>)
 8009fe2:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 8009fe4:	4b27      	ldr	r3, [pc, #156]	@ (800a084 <linealiza+0x18c>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	801a      	strh	r2, [r3, #0]
	X = A;
 8009fea:	4b27      	ldr	r3, [pc, #156]	@ (800a088 <linealiza+0x190>)
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	001a      	movs	r2, r3
 8009ff0:	4b24      	ldr	r3, [pc, #144]	@ (800a084 <linealiza+0x18c>)
 8009ff2:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 8009ff4:	4b23      	ldr	r3, [pc, #140]	@ (800a084 <linealiza+0x18c>)
 8009ff6:	881a      	ldrh	r2, [r3, #0]
 8009ff8:	4b18      	ldr	r3, [pc, #96]	@ (800a05c <linealiza+0x164>)
 8009ffa:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 8009ffc:	4b23      	ldr	r3, [pc, #140]	@ (800a08c <linealiza+0x194>)
 8009ffe:	781a      	ldrb	r2, [r3, #0]
 800a000:	4b21      	ldr	r3, [pc, #132]	@ (800a088 <linealiza+0x190>)
 800a002:	701a      	strb	r2, [r3, #0]
	X = A;
 800a004:	4b20      	ldr	r3, [pc, #128]	@ (800a088 <linealiza+0x190>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	001a      	movs	r2, r3
 800a00a:	4b1e      	ldr	r3, [pc, #120]	@ (800a084 <linealiza+0x18c>)
 800a00c:	801a      	strh	r2, [r3, #0]

	A = 10;
 800a00e:	4b1e      	ldr	r3, [pc, #120]	@ (800a088 <linealiza+0x190>)
 800a010:	220a      	movs	r2, #10
 800a012:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800a014:	4b1b      	ldr	r3, [pc, #108]	@ (800a084 <linealiza+0x18c>)
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	001a      	movs	r2, r3
 800a01c:	4b1a      	ldr	r3, [pc, #104]	@ (800a088 <linealiza+0x190>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	4353      	muls	r3, r2
 800a022:	b29a      	uxth	r2, r3
 800a024:	4b17      	ldr	r3, [pc, #92]	@ (800a084 <linealiza+0x18c>)
 800a026:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800a028:	4b16      	ldr	r3, [pc, #88]	@ (800a084 <linealiza+0x18c>)
 800a02a:	881a      	ldrh	r2, [r3, #0]
 800a02c:	4b0b      	ldr	r3, [pc, #44]	@ (800a05c <linealiza+0x164>)
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	18d3      	adds	r3, r2, r3
 800a032:	b29a      	uxth	r2, r3
 800a034:	4b13      	ldr	r3, [pc, #76]	@ (800a084 <linealiza+0x18c>)
 800a036:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800a038:	4b0a      	ldr	r3, [pc, #40]	@ (800a064 <linealiza+0x16c>)
 800a03a:	881b      	ldrh	r3, [r3, #0]
 800a03c:	b21b      	sxth	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	da05      	bge.n	800a04e <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800a042:	4b10      	ldr	r3, [pc, #64]	@ (800a084 <linealiza+0x18c>)
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	425b      	negs	r3, r3
 800a048:	b29a      	uxth	r2, r3
 800a04a:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <linealiza+0x18c>)
 800a04c:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800a04e:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <linealiza+0x18c>)
 800a050:	881a      	ldrh	r2, [r3, #0]
 800a052:	4b02      	ldr	r3, [pc, #8]	@ (800a05c <linealiza+0x164>)
 800a054:	801a      	strh	r2, [r3, #0]
}
 800a056:	46c0      	nop			@ (mov r8, r8)
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	20001072 	.word	0x20001072
 800a060:	20001070 	.word	0x20001070
 800a064:	2000106c 	.word	0x2000106c
 800a068:	20001068 	.word	0x20001068
 800a06c:	0000038d 	.word	0x0000038d
 800a070:	00000339 	.word	0x00000339
 800a074:	000002aa 	.word	0x000002aa
 800a078:	0000ffff 	.word	0x0000ffff
 800a07c:	000093cc 	.word	0x000093cc
 800a080:	00002ecc 	.word	0x00002ecc
 800a084:	2000106e 	.word	0x2000106e
 800a088:	2000106a 	.word	0x2000106a
 800a08c:	20000a92 	.word	0x20000a92

0800a090 <mult1x2>:

void mult1x2(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800a094:	4b2f      	ldr	r3, [pc, #188]	@ (800a154 <mult1x2+0xc4>)
 800a096:	881a      	ldrh	r2, [r3, #0]
 800a098:	4b2f      	ldr	r3, [pc, #188]	@ (800a158 <mult1x2+0xc8>)
 800a09a:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800a09c:	4b2e      	ldr	r3, [pc, #184]	@ (800a158 <mult1x2+0xc8>)
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	0a1b      	lsrs	r3, r3, #8
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	4b2d      	ldr	r3, [pc, #180]	@ (800a15c <mult1x2+0xcc>)
 800a0a8:	701a      	strb	r2, [r3, #0]
	Y = A;
 800a0aa:	4b2c      	ldr	r3, [pc, #176]	@ (800a15c <mult1x2+0xcc>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	001a      	movs	r2, r3
 800a0b0:	4b28      	ldr	r3, [pc, #160]	@ (800a154 <mult1x2+0xc4>)
 800a0b2:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800a0b4:	4b2a      	ldr	r3, [pc, #168]	@ (800a160 <mult1x2+0xd0>)
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	4b28      	ldr	r3, [pc, #160]	@ (800a15c <mult1x2+0xcc>)
 800a0ba:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800a0bc:	4b27      	ldr	r3, [pc, #156]	@ (800a15c <mult1x2+0xcc>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	001a      	movs	r2, r3
 800a0c2:	4b24      	ldr	r3, [pc, #144]	@ (800a154 <mult1x2+0xc4>)
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	4353      	muls	r3, r2
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	4b22      	ldr	r3, [pc, #136]	@ (800a154 <mult1x2+0xc4>)
 800a0cc:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800a0ce:	4b21      	ldr	r3, [pc, #132]	@ (800a154 <mult1x2+0xc4>)
 800a0d0:	881a      	ldrh	r2, [r3, #0]
 800a0d2:	4b24      	ldr	r3, [pc, #144]	@ (800a164 <mult1x2+0xd4>)
 800a0d4:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800a0d6:	4b20      	ldr	r3, [pc, #128]	@ (800a158 <mult1x2+0xc8>)
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	4b1f      	ldr	r3, [pc, #124]	@ (800a15c <mult1x2+0xcc>)
 800a0de:	701a      	strb	r2, [r3, #0]
	Y = A;
 800a0e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a15c <mult1x2+0xcc>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	001a      	movs	r2, r3
 800a0e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a154 <mult1x2+0xc4>)
 800a0e8:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800a0ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a160 <mult1x2+0xd0>)
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a15c <mult1x2+0xcc>)
 800a0f0:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800a0f2:	4b1a      	ldr	r3, [pc, #104]	@ (800a15c <mult1x2+0xcc>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	001a      	movs	r2, r3
 800a0f8:	4b16      	ldr	r3, [pc, #88]	@ (800a154 <mult1x2+0xc4>)
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	4353      	muls	r3, r2
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	4b14      	ldr	r3, [pc, #80]	@ (800a154 <mult1x2+0xc4>)
 800a102:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800a104:	4b13      	ldr	r3, [pc, #76]	@ (800a154 <mult1x2+0xc4>)
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	4b14      	ldr	r3, [pc, #80]	@ (800a15c <mult1x2+0xcc>)
 800a10c:	701a      	strb	r2, [r3, #0]
	resul = A;
 800a10e:	4b13      	ldr	r3, [pc, #76]	@ (800a15c <mult1x2+0xcc>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	001a      	movs	r2, r3
 800a114:	4b10      	ldr	r3, [pc, #64]	@ (800a158 <mult1x2+0xc8>)
 800a116:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800a118:	4b0e      	ldr	r3, [pc, #56]	@ (800a154 <mult1x2+0xc4>)
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	0a1b      	lsrs	r3, r3, #8
 800a11e:	b29b      	uxth	r3, r3
 800a120:	b2da      	uxtb	r2, r3
 800a122:	4b0e      	ldr	r3, [pc, #56]	@ (800a15c <mult1x2+0xcc>)
 800a124:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800a126:	4b0f      	ldr	r3, [pc, #60]	@ (800a164 <mult1x2+0xd4>)
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	4b0b      	ldr	r3, [pc, #44]	@ (800a15c <mult1x2+0xcc>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	18d3      	adds	r3, r2, r3
 800a132:	b2da      	uxtb	r2, r3
 800a134:	4b09      	ldr	r3, [pc, #36]	@ (800a15c <mult1x2+0xcc>)
 800a136:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800a138:	4b08      	ldr	r3, [pc, #32]	@ (800a15c <mult1x2+0xcc>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	021b      	lsls	r3, r3, #8
 800a13e:	b29a      	uxth	r2, r3
 800a140:	4b05      	ldr	r3, [pc, #20]	@ (800a158 <mult1x2+0xc8>)
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	18d3      	adds	r3, r2, r3
 800a146:	b29a      	uxth	r2, r3
 800a148:	4b03      	ldr	r3, [pc, #12]	@ (800a158 <mult1x2+0xc8>)
 800a14a:	801a      	strh	r2, [r3, #0]
}
 800a14c:	46c0      	nop			@ (mov r8, r8)
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	46c0      	nop			@ (mov r8, r8)
 800a154:	2000106c 	.word	0x2000106c
 800a158:	20001070 	.word	0x20001070
 800a15c:	2000106a 	.word	0x2000106a
 800a160:	20000a93 	.word	0x20000a93
 800a164:	20001074 	.word	0x20001074

0800a168 <capturaAD>:

void capturaAD (void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800a16e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d8 <capturaAD+0x70>)
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	4b19      	ldr	r3, [pc, #100]	@ (800a1d8 <capturaAD+0x70>)
 800a174:	2101      	movs	r1, #1
 800a176:	430a      	orrs	r2, r1
 800a178:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800a17a:	4b17      	ldr	r3, [pc, #92]	@ (800a1d8 <capturaAD+0x70>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b16      	ldr	r3, [pc, #88]	@ (800a1d8 <capturaAD+0x70>)
 800a180:	211c      	movs	r1, #28
 800a182:	430a      	orrs	r2, r1
 800a184:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800a186:	4b14      	ldr	r3, [pc, #80]	@ (800a1d8 <capturaAD+0x70>)
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	4b13      	ldr	r3, [pc, #76]	@ (800a1d8 <capturaAD+0x70>)
 800a18c:	2104      	movs	r1, #4
 800a18e:	430a      	orrs	r2, r1
 800a190:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800a192:	46c0      	nop			@ (mov r8, r8)
 800a194:	4b10      	ldr	r3, [pc, #64]	@ (800a1d8 <capturaAD+0x70>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2204      	movs	r2, #4
 800a19a:	4013      	ands	r3, r2
 800a19c:	d0fa      	beq.n	800a194 <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800a19e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <capturaAD+0x70>)
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d8 <capturaAD+0x70>)
 800a1a4:	210c      	movs	r1, #12
 800a1a6:	438a      	bics	r2, r1
 800a1a8:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 250; i++)
 800a1aa:	1dfb      	adds	r3, r7, #7
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	e009      	b.n	800a1c6 <capturaAD+0x5e>

	adcramh = ADC1->DR;
 800a1b2:	4b09      	ldr	r3, [pc, #36]	@ (800a1d8 <capturaAD+0x70>)
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	4b08      	ldr	r3, [pc, #32]	@ (800a1dc <capturaAD+0x74>)
 800a1ba:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i < 250; i++)
 800a1bc:	1dfb      	adds	r3, r7, #7
 800a1be:	781a      	ldrb	r2, [r3, #0]
 800a1c0:	1dfb      	adds	r3, r7, #7
 800a1c2:	3201      	adds	r2, #1
 800a1c4:	701a      	strb	r2, [r3, #0]
 800a1c6:	1dfb      	adds	r3, r7, #7
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2bf9      	cmp	r3, #249	@ 0xf9
 800a1cc:	d9f1      	bls.n	800a1b2 <capturaAD+0x4a>
}
 800a1ce:	46c0      	nop			@ (mov r8, r8)
 800a1d0:	46c0      	nop			@ (mov r8, r8)
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	b002      	add	sp, #8
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	40012400 	.word	0x40012400
 800a1dc:	20000a9c 	.word	0x20000a9c

0800a1e0 <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	0002      	movs	r2, r0
 800a1e8:	1dfb      	adds	r3, r7, #7
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	1d3b      	adds	r3, r7, #4
 800a1ee:	1c0a      	adds	r2, r1, #0
 800a1f0:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800a1f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a230 <wise_hot_rep+0x50>)
 800a1f4:	1dfa      	adds	r2, r7, #7
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800a1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a234 <wise_hot_rep+0x54>)
 800a1fc:	881a      	ldrh	r2, [r3, #0]
 800a1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a238 <wise_hot_rep+0x58>)
 800a200:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800a202:	f7ff ff45 	bl	800a090 <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800a206:	4b0d      	ldr	r3, [pc, #52]	@ (800a23c <wise_hot_rep+0x5c>)
 800a208:	881a      	ldrh	r2, [r3, #0]
 800a20a:	4b0d      	ldr	r3, [pc, #52]	@ (800a240 <wise_hot_rep+0x60>)
 800a20c:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800a20e:	4b0c      	ldr	r3, [pc, #48]	@ (800a240 <wise_hot_rep+0x60>)
 800a210:	881a      	ldrh	r2, [r3, #0]
 800a212:	1d3b      	adds	r3, r7, #4
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	b29a      	uxth	r2, r3
 800a21a:	4b09      	ldr	r3, [pc, #36]	@ (800a240 <wise_hot_rep+0x60>)
 800a21c:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800a21e:	4b08      	ldr	r3, [pc, #32]	@ (800a240 <wise_hot_rep+0x60>)
 800a220:	881a      	ldrh	r2, [r3, #0]
 800a222:	4b08      	ldr	r3, [pc, #32]	@ (800a244 <wise_hot_rep+0x64>)
 800a224:	801a      	strh	r2, [r3, #0]
}
 800a226:	46c0      	nop			@ (mov r8, r8)
 800a228:	46bd      	mov	sp, r7
 800a22a:	b002      	add	sp, #8
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	46c0      	nop			@ (mov r8, r8)
 800a230:	20000a93 	.word	0x20000a93
 800a234:	20001068 	.word	0x20001068
 800a238:	2000106c 	.word	0x2000106c
 800a23c:	20001070 	.word	0x20001070
 800a240:	2000106e 	.word	0x2000106e
 800a244:	20001072 	.word	0x20001072

0800a248 <Y_A>:

void Y_A (void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
	Y = adcramh;
 800a24c:	4b05      	ldr	r3, [pc, #20]	@ (800a264 <Y_A+0x1c>)
 800a24e:	881a      	ldrh	r2, [r3, #0]
 800a250:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <Y_A+0x20>)
 800a252:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <Y_A+0x24>)
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	4b05      	ldr	r3, [pc, #20]	@ (800a270 <Y_A+0x28>)
 800a25a:	701a      	strb	r2, [r3, #0]
}
 800a25c:	46c0      	nop			@ (mov r8, r8)
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	46c0      	nop			@ (mov r8, r8)
 800a264:	20000a9c 	.word	0x20000a9c
 800a268:	2000106c 	.word	0x2000106c
 800a26c:	20000ad4 	.word	0x20000ad4
 800a270:	2000106a 	.word	0x2000106a

0800a274 <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	0019      	movs	r1, r3
 800a280:	1dfb      	adds	r3, r7, #7
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	1dbb      	adds	r3, r7, #6
 800a286:	1c0a      	adds	r2, r1, #0
 800a288:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800a28a:	1dfb      	adds	r3, r7, #7
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	18d3      	adds	r3, r2, r3
 800a292:	2201      	movs	r2, #1
 800a294:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800a296:	1dbb      	adds	r3, r7, #6
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	18d3      	adds	r3, r2, r3
 800a29e:	2200      	movs	r2, #0
 800a2a0:	701a      	strb	r2, [r3, #0]
}
 800a2a2:	46c0      	nop			@ (mov r8, r8)
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	b004      	add	sp, #16
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	0019      	movs	r1, r3
 800a2b6:	1dfb      	adds	r3, r7, #7
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	1dbb      	adds	r3, r7, #6
 800a2bc:	1c0a      	adds	r2, r1, #0
 800a2be:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800a2c0:	1dfb      	adds	r3, r7, #7
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	18d3      	adds	r3, r2, r3
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800a2cc:	1dbb      	adds	r3, r7, #6
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	18d3      	adds	r3, r2, r3
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
}
 800a2d8:	46c0      	nop			@ (mov r8, r8)
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b004      	add	sp, #16
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0

    asm ("nop");
 800a2e4:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800a2e6:	4bd1      	ldr	r3, [pc, #836]	@ (800a62c <tiempo+0x34c>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b07      	cmp	r3, #7
 800a2ec:	d900      	bls.n	800a2f0 <tiempo+0x10>
 800a2ee:	e194      	b.n	800a61a <tiempo+0x33a>
			goto tiempo10;				//	jrult		tiempo10;
 800a2f0:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800a2f2:	4bcf      	ldr	r3, [pc, #828]	@ (800a630 <tiempo+0x350>)
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	4bcd      	ldr	r3, [pc, #820]	@ (800a630 <tiempo+0x350>)
 800a2fc:	801a      	strh	r2, [r3, #0]

			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800a2fe:	4bcd      	ldr	r3, [pc, #820]	@ (800a634 <tiempo+0x354>)
 800a300:	0018      	movs	r0, r3
 800a302:	f7fa fa44 	bl	800478e <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800a306:	4bcc      	ldr	r3, [pc, #816]	@ (800a638 <tiempo+0x358>)
 800a308:	0018      	movs	r0, r3
 800a30a:	f7fa fa40 	bl	800478e <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800a30e:	4bcb      	ldr	r3, [pc, #812]	@ (800a63c <tiempo+0x35c>)
 800a310:	0018      	movs	r0, r3
 800a312:	f7fa fa3c 	bl	800478e <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800a316:	4bca      	ldr	r3, [pc, #808]	@ (800a640 <tiempo+0x360>)
 800a318:	0018      	movs	r0, r3
 800a31a:	f7fa fa38 	bl	800478e <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800a31e:	4bc9      	ldr	r3, [pc, #804]	@ (800a644 <tiempo+0x364>)
 800a320:	0018      	movs	r0, r3
 800a322:	f7fa fa34 	bl	800478e <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800a326:	4bc8      	ldr	r3, [pc, #800]	@ (800a648 <tiempo+0x368>)
 800a328:	0018      	movs	r0, r3
 800a32a:	f7fa fa30 	bl	800478e <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800a32e:	4bc7      	ldr	r3, [pc, #796]	@ (800a64c <tiempo+0x36c>)
 800a330:	0018      	movs	r0, r3
 800a332:	f7fa fa2c 	bl	800478e <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800a336:	4bc6      	ldr	r3, [pc, #792]	@ (800a650 <tiempo+0x370>)
 800a338:	0018      	movs	r0, r3
 800a33a:	f7fa fa28 	bl	800478e <decwreg>

		       cntcent++;					//	Una centésima más
 800a33e:	4bc5      	ldr	r3, [pc, #788]	@ (800a654 <tiempo+0x374>)
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	b2da      	uxtb	r2, r3
 800a346:	4bc3      	ldr	r3, [pc, #780]	@ (800a654 <tiempo+0x374>)
 800a348:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800a34a:	4bc2      	ldr	r3, [pc, #776]	@ (800a654 <tiempo+0x374>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	001a      	movs	r2, r3
 800a350:	2301      	movs	r3, #1
 800a352:	4013      	ands	r3, r2
 800a354:	d01c      	beq.n	800a390 <tiempo+0xb0>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800a356:	4bc0      	ldr	r3, [pc, #768]	@ (800a658 <tiempo+0x378>)
 800a358:	0018      	movs	r0, r3
 800a35a:	f7fa fa18 	bl	800478e <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800a35e:	4bbf      	ldr	r3, [pc, #764]	@ (800a65c <tiempo+0x37c>)
 800a360:	0018      	movs	r0, r3
 800a362:	f7fa fa14 	bl	800478e <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800a366:	4bbe      	ldr	r3, [pc, #760]	@ (800a660 <tiempo+0x380>)
 800a368:	0018      	movs	r0, r3
 800a36a:	f7fa fa10 	bl	800478e <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800a36e:	4bbd      	ldr	r3, [pc, #756]	@ (800a664 <tiempo+0x384>)
 800a370:	0018      	movs	r0, r3
 800a372:	f7fa fa0c 	bl	800478e <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800a376:	4bbc      	ldr	r3, [pc, #752]	@ (800a668 <tiempo+0x388>)
 800a378:	0018      	movs	r0, r3
 800a37a:	f7fa fa08 	bl	800478e <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800a37e:	4bbb      	ldr	r3, [pc, #748]	@ (800a66c <tiempo+0x38c>)
 800a380:	0018      	movs	r0, r3
 800a382:	f7fa fa04 	bl	800478e <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800a386:	4bba      	ldr	r3, [pc, #744]	@ (800a670 <tiempo+0x390>)
 800a388:	0018      	movs	r0, r3
 800a38a:	f7fa fa00 	bl	800478e <decwreg>
 800a38e:	e000      	b.n	800a392 <tiempo+0xb2>
			        goto no_dec_deb;
 800a390:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800a392:	4bb0      	ldr	r3, [pc, #704]	@ (800a654 <tiempo+0x374>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	2b63      	cmp	r3, #99	@ 0x63
 800a398:	d800      	bhi.n	800a39c <tiempo+0xbc>
 800a39a:	e140      	b.n	800a61e <tiempo+0x33e>
		        	goto tiempo12;			//;jruge		tiempo12
 800a39c:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;					//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800a39e:	4bad      	ldr	r3, [pc, #692]	@ (800a654 <tiempo+0x374>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	701a      	strb	r2, [r3, #0]
				if (flagsTime [f_timeConfigRTC]){ //btjt salta si es = 1--- flagsTime,#f_timeConfigRTC,noIncTime; ***********************
 800a3a4:	4bb3      	ldr	r3, [pc, #716]	@ (800a674 <tiempo+0x394>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d110      	bne.n	800a3ce <tiempo+0xee>
					goto	noIncTime;
				}
				timeSeconds_LW++;				// Incrementa parte baja del tiempo UNIX
 800a3ac:	4bb2      	ldr	r3, [pc, #712]	@ (800a678 <tiempo+0x398>)
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	4bb0      	ldr	r3, [pc, #704]	@ (800a678 <tiempo+0x398>)
 800a3b6:	801a      	strh	r2, [r3, #0]
    		    if(timeSeconds_LW){  			//JRNE		no_inc_timeH;			/ Hubo overflow ?
 800a3b8:	4baf      	ldr	r3, [pc, #700]	@ (800a678 <tiempo+0x398>)
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d108      	bne.n	800a3d2 <tiempo+0xf2>
    		    	goto no_inc_timeH;			//
    		    }
    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
 800a3c0:	4bae      	ldr	r3, [pc, #696]	@ (800a67c <tiempo+0x39c>)
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	4bac      	ldr	r3, [pc, #688]	@ (800a67c <tiempo+0x39c>)
 800a3ca:	801a      	strh	r2, [r3, #0]
 800a3cc:	e002      	b.n	800a3d4 <tiempo+0xf4>
					goto	noIncTime;
 800a3ce:	46c0      	nop			@ (mov r8, r8)
 800a3d0:	e000      	b.n	800a3d4 <tiempo+0xf4>
    		    	goto no_inc_timeH;			//
 800a3d2:	46c0      	nop			@ (mov r8, r8)
no_inc_timeH:

noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800a3d4:	4baa      	ldr	r3, [pc, #680]	@ (800a680 <tiempo+0x3a0>)
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f7fa f9c7 	bl	800476a <decword>
		    	decwreg(&timeTxTWF);
 800a3dc:	4ba9      	ldr	r3, [pc, #676]	@ (800a684 <tiempo+0x3a4>)
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f7fa f9d5 	bl	800478e <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800a3e4:	4ba8      	ldr	r3, [pc, #672]	@ (800a688 <tiempo+0x3a8>)
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	f7fa f9bf 	bl	800476a <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800a3ec:	4ba7      	ldr	r3, [pc, #668]	@ (800a68c <tiempo+0x3ac>)
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	f7fa f9cd 	bl	800478e <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800a3f4:	4ba6      	ldr	r3, [pc, #664]	@ (800a690 <tiempo+0x3b0>)
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f7fa f9c9 	bl	800478e <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800a3fc:	4ba5      	ldr	r3, [pc, #660]	@ (800a694 <tiempo+0x3b4>)
 800a3fe:	0018      	movs	r0, r3
 800a400:	f7fa f9c5 	bl	800478e <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800a404:	4ba4      	ldr	r3, [pc, #656]	@ (800a698 <tiempo+0x3b8>)
 800a406:	0018      	movs	r0, r3
 800a408:	f7fa f9c1 	bl	800478e <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800a40c:	4ba3      	ldr	r3, [pc, #652]	@ (800a69c <tiempo+0x3bc>)
 800a40e:	0018      	movs	r0, r3
 800a410:	f7fa f9bd 	bl	800478e <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800a414:	4ba2      	ldr	r3, [pc, #648]	@ (800a6a0 <tiempo+0x3c0>)
 800a416:	0018      	movs	r0, r3
 800a418:	f7fa f9b9 	bl	800478e <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800a41c:	4ba1      	ldr	r3, [pc, #644]	@ (800a6a4 <tiempo+0x3c4>)
 800a41e:	0018      	movs	r0, r3
 800a420:	f7fa f9a3 	bl	800476a <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800a424:	4ba0      	ldr	r3, [pc, #640]	@ (800a6a8 <tiempo+0x3c8>)
 800a426:	0018      	movs	r0, r3
 800a428:	f7fa f9b1 	bl	800478e <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800a42c:	4b9f      	ldr	r3, [pc, #636]	@ (800a6ac <tiempo+0x3cc>)
 800a42e:	0018      	movs	r0, r3
 800a430:	f7fa f9ad 	bl	800478e <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800a434:	4b9e      	ldr	r3, [pc, #632]	@ (800a6b0 <tiempo+0x3d0>)
 800a436:	0018      	movs	r0, r3
 800a438:	f7fa f9a9 	bl	800478e <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800a43c:	4b9d      	ldr	r3, [pc, #628]	@ (800a6b4 <tiempo+0x3d4>)
 800a43e:	0018      	movs	r0, r3
 800a440:	f7fa f9a5 	bl	800478e <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800a444:	4b9c      	ldr	r3, [pc, #624]	@ (800a6b8 <tiempo+0x3d8>)
 800a446:	0018      	movs	r0, r3
 800a448:	f7fa f9a1 	bl	800478e <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800a44c:	4b9b      	ldr	r3, [pc, #620]	@ (800a6bc <tiempo+0x3dc>)
 800a44e:	0018      	movs	r0, r3
 800a450:	f7fa f99d 	bl	800478e <decwreg>
		    	decwreg(&valflvl);//
 800a454:	4b9a      	ldr	r3, [pc, #616]	@ (800a6c0 <tiempo+0x3e0>)
 800a456:	0018      	movs	r0, r3
 800a458:	f7fa f999 	bl	800478e <decwreg>
		    	decwreg(&valfhvl);//
 800a45c:	4b99      	ldr	r3, [pc, #612]	@ (800a6c4 <tiempo+0x3e4>)
 800a45e:	0018      	movs	r0, r3
 800a460:	f7fa f995 	bl	800478e <decwreg>
		    	decwreg(&cnt_prog);//
 800a464:	4b98      	ldr	r3, [pc, #608]	@ (800a6c8 <tiempo+0x3e8>)
 800a466:	0018      	movs	r0, r3
 800a468:	f7fa f991 	bl	800478e <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800a46c:	4b97      	ldr	r3, [pc, #604]	@ (800a6cc <tiempo+0x3ec>)
 800a46e:	0018      	movs	r0, r3
 800a470:	f7fa f98d 	bl	800478e <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800a474:	4b96      	ldr	r3, [pc, #600]	@ (800a6d0 <tiempo+0x3f0>)
 800a476:	0018      	movs	r0, r3
 800a478:	f7fa f989 	bl	800478e <decwreg>
		    	decwreg(&End_sec);//
 800a47c:	4b95      	ldr	r3, [pc, #596]	@ (800a6d4 <tiempo+0x3f4>)
 800a47e:	0018      	movs	r0, r3
 800a480:	f7fa f985 	bl	800478e <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800a484:	4b94      	ldr	r3, [pc, #592]	@ (800a6d8 <tiempo+0x3f8>)
 800a486:	0018      	movs	r0, r3
 800a488:	f7fa f96f 	bl	800476a <decword>

		    	decwreg(&timeOutRst);
 800a48c:	4b93      	ldr	r3, [pc, #588]	@ (800a6dc <tiempo+0x3fc>)
 800a48e:	0018      	movs	r0, r3
 800a490:	f7fa f97d 	bl	800478e <decwreg>
		    	decwreg(&timeOutRx);
 800a494:	4b92      	ldr	r3, [pc, #584]	@ (800a6e0 <tiempo+0x400>)
 800a496:	0018      	movs	r0, r3
 800a498:	f7fa f979 	bl	800478e <decwreg>
		    	decwreg(&timeRstBLE);
 800a49c:	4b91      	ldr	r3, [pc, #580]	@ (800a6e4 <tiempo+0x404>)
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f7fa f975 	bl	800478e <decwreg>
		    	decword(&cntLogger_H);			// decrementra contador de logger
 800a4a4:	4b90      	ldr	r3, [pc, #576]	@ (800a6e8 <tiempo+0x408>)
 800a4a6:	0018      	movs	r0, r3
 800a4a8:	f7fa f95f 	bl	800476a <decword>
		    	decwreg(&cntInitTx);
 800a4ac:	4b8f      	ldr	r3, [pc, #572]	@ (800a6ec <tiempo+0x40c>)
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	f7fa f96d 	bl	800478e <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800a4b4:	4b8e      	ldr	r3, [pc, #568]	@ (800a6f0 <tiempo+0x410>)
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f7fa f957 	bl	800476a <decword>

		    	decword(&t_ahorro1_H);
 800a4bc:	4b8d      	ldr	r3, [pc, #564]	@ (800a6f4 <tiempo+0x414>)
 800a4be:	0018      	movs	r0, r3
 800a4c0:	f7fa f953 	bl	800476a <decword>
		    	decword(&t_ahorro2_H);
 800a4c4:	4b8c      	ldr	r3, [pc, #560]	@ (800a6f8 <tiempo+0x418>)
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f7fa f94f 	bl	800476a <decword>
		    	decword(&cntNoct_H);
 800a4cc:	4b8b      	ldr	r3, [pc, #556]	@ (800a6fc <tiempo+0x41c>)
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	f7fa f94b 	bl	800476a <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800a4d4:	4b76      	ldr	r3, [pc, #472]	@ (800a6b0 <tiempo+0x3d0>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	001a      	movs	r2, r3
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4013      	ands	r3, r2
 800a4de:	d104      	bne.n	800a4ea <tiempo+0x20a>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800a4e0:	4b87      	ldr	r3, [pc, #540]	@ (800a700 <tiempo+0x420>)
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	f7fa f953 	bl	800478e <decwreg>
 800a4e8:	e000      	b.n	800a4ec <tiempo+0x20c>
		    		goto no_dec2;
 800a4ea:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800a4ec:	4b85      	ldr	r3, [pc, #532]	@ (800a704 <tiempo+0x424>)
 800a4ee:	0018      	movs	r0, r3
 800a4f0:	f7fa f93b 	bl	800476a <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800a4f4:	4b84      	ldr	r3, [pc, #528]	@ (800a708 <tiempo+0x428>)
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f7fa f937 	bl	800476a <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800a4fc:	4b83      	ldr	r3, [pc, #524]	@ (800a70c <tiempo+0x42c>)
 800a4fe:	0018      	movs	r0, r3
 800a500:	f7fa f933 	bl	800476a <decword>
		    	decword(&drp_fanh);
 800a504:	4b82      	ldr	r3, [pc, #520]	@ (800a710 <tiempo+0x430>)
 800a506:	0018      	movs	r0, r3
 800a508:	f7fa f92f 	bl	800476a <decword>
		    	decword(&drp_comph);
 800a50c:	4b81      	ldr	r3, [pc, #516]	@ (800a714 <tiempo+0x434>)
 800a50e:	0018      	movs	r0, r3
 800a510:	f7fa f92b 	bl	800476a <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800a514:	4b80      	ldr	r3, [pc, #512]	@ (800a718 <tiempo+0x438>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	001a      	movs	r2, r3
 800a51a:	4b80      	ldr	r3, [pc, #512]	@ (800a71c <tiempo+0x43c>)
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d204      	bcs.n	800a52c <tiempo+0x24c>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800a522:	4b7f      	ldr	r3, [pc, #508]	@ (800a720 <tiempo+0x440>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d006      	beq.n	800a538 <tiempo+0x258>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800a52a:	e000      	b.n	800a52e <tiempo+0x24e>
		    		goto tiempo_17;
 800a52c:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800a52e:	4b7a      	ldr	r3, [pc, #488]	@ (800a718 <tiempo+0x438>)
 800a530:	0018      	movs	r0, r3
 800a532:	f7fa f91a 	bl	800476a <decword>
 800a536:	e000      	b.n	800a53a <tiempo+0x25a>
	        	goto tiempo20; //jra tiempo20
 800a538:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800a53a:	4b7a      	ldr	r3, [pc, #488]	@ (800a724 <tiempo+0x444>)
 800a53c:	0018      	movs	r0, r3
 800a53e:	f7fa f914 	bl	800476a <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800a542:	4b79      	ldr	r3, [pc, #484]	@ (800a728 <tiempo+0x448>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	3301      	adds	r3, #1
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	4b77      	ldr	r3, [pc, #476]	@ (800a728 <tiempo+0x448>)
 800a54c:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800a54e:	4b76      	ldr	r3, [pc, #472]	@ (800a728 <tiempo+0x448>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b3b      	cmp	r3, #59	@ 0x3b
 800a554:	d907      	bls.n	800a566 <tiempo+0x286>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800a556:	4b74      	ldr	r3, [pc, #464]	@ (800a728 <tiempo+0x448>)
 800a558:	2200      	movs	r2, #0
 800a55a:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800a55c:	4b73      	ldr	r3, [pc, #460]	@ (800a72c <tiempo+0x44c>)
 800a55e:	0018      	movs	r0, r3
 800a560:	f7fa f915 	bl	800478e <decwreg>
 800a564:	e000      	b.n	800a568 <tiempo+0x288>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800a566:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
 800a568:	2380      	movs	r3, #128	@ 0x80
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	4a70      	ldr	r2, [pc, #448]	@ (800a730 <tiempo+0x450>)
 800a56e:	0019      	movs	r1, r3
 800a570:	0010      	movs	r0, r2
 800a572:	f006 f8ab 	bl	80106cc <HAL_GPIO_TogglePin>
				if(GetRegFlagState(cntseg, 3)){
 800a576:	4b6f      	ldr	r3, [pc, #444]	@ (800a734 <tiempo+0x454>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	001a      	movs	r2, r3
 800a57c:	2308      	movs	r3, #8
 800a57e:	4013      	ands	r3, r2
 800a580:	d001      	beq.n	800a586 <tiempo+0x2a6>
					asm ("nop");
 800a582:	46c0      	nop			@ (mov r8, r8)
 800a584:	e000      	b.n	800a588 <tiempo+0x2a8>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800a586:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800a588:	4b6a      	ldr	r3, [pc, #424]	@ (800a734 <tiempo+0x454>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	3301      	adds	r3, #1
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	4b68      	ldr	r3, [pc, #416]	@ (800a734 <tiempo+0x454>)
 800a592:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800a594:	4b67      	ldr	r3, [pc, #412]	@ (800a734 <tiempo+0x454>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b08      	cmp	r3, #8
 800a59a:	d903      	bls.n	800a5a4 <tiempo+0x2c4>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800a59c:	4b66      	ldr	r3, [pc, #408]	@ (800a738 <tiempo+0x458>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
 800a5a2:	e000      	b.n	800a5a6 <tiempo+0x2c6>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800a5a4:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800a5a6:	4b63      	ldr	r3, [pc, #396]	@ (800a734 <tiempo+0x454>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	2310      	movs	r3, #16
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	d003      	beq.n	800a5ba <tiempo+0x2da>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800a5b2:	4b61      	ldr	r3, [pc, #388]	@ (800a738 <tiempo+0x458>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	71da      	strb	r2, [r3, #7]
 800a5b8:	e000      	b.n	800a5bc <tiempo+0x2dc>
					goto	tiempo_j01;		// Ya son 16 segundos?
 800a5ba:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800a5bc:	4b5d      	ldr	r3, [pc, #372]	@ (800a734 <tiempo+0x454>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b3b      	cmp	r3, #59	@ 0x3b
 800a5c2:	d92e      	bls.n	800a622 <tiempo+0x342>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800a5c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a734 <tiempo+0x454>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800a5ca:	4b5c      	ldr	r3, [pc, #368]	@ (800a73c <tiempo+0x45c>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800a5d0:	4b5b      	ldr	r3, [pc, #364]	@ (800a740 <tiempo+0x460>)
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	f7fa f8db 	bl	800478e <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800a5d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a744 <tiempo+0x464>)
 800a5da:	0018      	movs	r0, r3
 800a5dc:	f7fa f8d7 	bl	800478e <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800a5e0:	4b59      	ldr	r3, [pc, #356]	@ (800a748 <tiempo+0x468>)
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f7fa f8d3 	bl	800478e <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800a5e8:	4b58      	ldr	r3, [pc, #352]	@ (800a74c <tiempo+0x46c>)
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	f7fa f8cf 	bl	800478e <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800a5f0:	4b57      	ldr	r3, [pc, #348]	@ (800a750 <tiempo+0x470>)
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f7fa f8cb 	bl	800478e <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800a5f8:	4b56      	ldr	r3, [pc, #344]	@ (800a754 <tiempo+0x474>)
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f7fa f8b5 	bl	800476a <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800a600:	4b55      	ldr	r3, [pc, #340]	@ (800a758 <tiempo+0x478>)
 800a602:	0018      	movs	r0, r3
 800a604:	f7fa f8b1 	bl	800476a <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800a608:	4b54      	ldr	r3, [pc, #336]	@ (800a75c <tiempo+0x47c>)
 800a60a:	0018      	movs	r0, r3
 800a60c:	f7fa f8ad 	bl	800476a <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800a610:	4b53      	ldr	r3, [pc, #332]	@ (800a760 <tiempo+0x480>)
 800a612:	0018      	movs	r0, r3
 800a614:	f7fa f8bb 	bl	800478e <decwreg>
	    		 goto fintiem;
 800a618:	e004      	b.n	800a624 <tiempo+0x344>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	e002      	b.n	800a624 <tiempo+0x344>
		        goto fintiem;
 800a61e:	46c0      	nop			@ (mov r8, r8)
 800a620:	e000      	b.n	800a624 <tiempo+0x344>
					goto fintiem;				//jrult fintiem
 800a622:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800a624:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20000afa 	.word	0x20000afa
 800a630:	20000a8a 	.word	0x20000a8a
 800a634:	20000fa0 	.word	0x20000fa0
 800a638:	20000fd9 	.word	0x20000fd9
 800a63c:	20000afe 	.word	0x20000afe
 800a640:	20000b05 	.word	0x20000b05
 800a644:	20000b5c 	.word	0x20000b5c
 800a648:	20000b5d 	.word	0x20000b5d
 800a64c:	20000b5e 	.word	0x20000b5e
 800a650:	20000b70 	.word	0x20000b70
 800a654:	20000a88 	.word	0x20000a88
 800a658:	20000b4c 	.word	0x20000b4c
 800a65c:	20000b4d 	.word	0x20000b4d
 800a660:	20000b4e 	.word	0x20000b4e
 800a664:	20000b4f 	.word	0x20000b4f
 800a668:	20000b50 	.word	0x20000b50
 800a66c:	20000b51 	.word	0x20000b51
 800a670:	20000b52 	.word	0x20000b52
 800a674:	20000fa4 	.word	0x20000fa4
 800a678:	20000cee 	.word	0x20000cee
 800a67c:	20000cec 	.word	0x20000cec
 800a680:	20000e14 	.word	0x20000e14
 800a684:	20000e76 	.word	0x20000e76
 800a688:	20000e88 	.word	0x20000e88
 800a68c:	20000eb6 	.word	0x20000eb6
 800a690:	20000eb7 	.word	0x20000eb7
 800a694:	20000fa2 	.word	0x20000fa2
 800a698:	20000fda 	.word	0x20000fda
 800a69c:	20000e23 	.word	0x20000e23
 800a6a0:	20000fe0 	.word	0x20000fe0
 800a6a4:	20000edc 	.word	0x20000edc
 800a6a8:	20000aa6 	.word	0x20000aa6
 800a6ac:	20000aa7 	.word	0x20000aa7
 800a6b0:	20000aa8 	.word	0x20000aa8
 800a6b4:	20000aa9 	.word	0x20000aa9
 800a6b8:	20000aaa 	.word	0x20000aaa
 800a6bc:	20000aab 	.word	0x20000aab
 800a6c0:	20000aac 	.word	0x20000aac
 800a6c4:	20000aad 	.word	0x20000aad
 800a6c8:	20000aae 	.word	0x20000aae
 800a6cc:	20000aaf 	.word	0x20000aaf
 800a6d0:	20000ab0 	.word	0x20000ab0
 800a6d4:	20000ab1 	.word	0x20000ab1
 800a6d8:	20000b72 	.word	0x20000b72
 800a6dc:	20000e21 	.word	0x20000e21
 800a6e0:	20000e22 	.word	0x20000e22
 800a6e4:	20000e24 	.word	0x20000e24
 800a6e8:	20000cd4 	.word	0x20000cd4
 800a6ec:	20000d56 	.word	0x20000d56
 800a6f0:	20000e8a 	.word	0x20000e8a
 800a6f4:	20000b6c 	.word	0x20000b6c
 800a6f8:	20000b6e 	.word	0x20000b6e
 800a6fc:	20000b80 	.word	0x20000b80
 800a700:	20000b64 	.word	0x20000b64
 800a704:	20000aa4 	.word	0x20000aa4
 800a708:	20000a9e 	.word	0x20000a9e
 800a70c:	20000aa2 	.word	0x20000aa2
 800a710:	20000b38 	.word	0x20000b38
 800a714:	20000b36 	.word	0x20000b36
 800a718:	20000af2 	.word	0x20000af2
 800a71c:	20000af8 	.word	0x20000af8
 800a720:	20000a94 	.word	0x20000a94
 800a724:	20000af4 	.word	0x20000af4
 800a728:	20000a91 	.word	0x20000a91
 800a72c:	20000b03 	.word	0x20000b03
 800a730:	50000400 	.word	0x50000400
 800a734:	20000a89 	.word	0x20000a89
 800a738:	20000ab4 	.word	0x20000ab4
 800a73c:	20000b14 	.word	0x20000b14
 800a740:	20000b63 	.word	0x20000b63
 800a744:	20000b34 	.word	0x20000b34
 800a748:	20000b35 	.word	0x20000b35
 800a74c:	20000b04 	.word	0x20000b04
 800a750:	20000b07 	.word	0x20000b07
 800a754:	20000aa0 	.word	0x20000aa0
 800a758:	20000b68 	.word	0x20000b68
 800a75c:	20000b6a 	.word	0x20000b6a
 800a760:	20000b8d 	.word	0x20000b8d

0800a764 <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800a76a:	4b6f      	ldr	r3, [pc, #444]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a76c:	789b      	ldrb	r3, [r3, #2]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d023      	beq.n	800a7ba <tx_buffer_prep+0x56>
			goto	tx_header;
 800a772:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800a774:	4b6d      	ldr	r3, [pc, #436]	@ (800a92c <tx_buffer_prep+0x1c8>)
 800a776:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800a778:	4b6d      	ldr	r3, [pc, #436]	@ (800a930 <tx_buffer_prep+0x1cc>)
 800a77a:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	4b6c      	ldr	r3, [pc, #432]	@ (800a934 <tx_buffer_prep+0x1d0>)
 800a782:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800a784:	4b6b      	ldr	r3, [pc, #428]	@ (800a934 <tx_buffer_prep+0x1d0>)
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800a78c:	4b69      	ldr	r3, [pc, #420]	@ (800a934 <tx_buffer_prep+0x1d0>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	0018      	movs	r0, r3
 800a792:	f7f9 ffcf 	bl	8004734 <build_chksum>
	    	point_X++;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3301      	adds	r3, #1
 800a79a:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	4b64      	ldr	r3, [pc, #400]	@ (800a938 <tx_buffer_prep+0x1d4>)
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d800      	bhi.n	800a7ac <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800a7aa:	e7e7      	b.n	800a77c <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800a7ac:	4b63      	ldr	r3, [pc, #396]	@ (800a93c <tx_buffer_prep+0x1d8>)
 800a7ae:	2208      	movs	r2, #8
 800a7b0:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800a7b2:	4b5d      	ldr	r3, [pc, #372]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800a7b8:	e0b1      	b.n	800a91e <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800a7ba:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800a7bc:	4b5a      	ldr	r3, [pc, #360]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	4053      	eors	r3, r2
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d107      	bne.n	800a7da <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800a7ca:	4b57      	ldr	r3, [pc, #348]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a7cc:	785b      	ldrb	r3, [r3, #1]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4053      	eors	r3, r2
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d140      	bne.n	800a85a <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800a7d8:	e000      	b.n	800a7dc <tx_buffer_prep+0x78>
			goto	notest;
 800a7da:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800a7dc:	4b58      	ldr	r3, [pc, #352]	@ (800a940 <tx_buffer_prep+0x1dc>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4b58      	ldr	r3, [pc, #352]	@ (800a944 <tx_buffer_prep+0x1e0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d33a      	bcc.n	800a85e <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800a7e8:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800a7ea:	4b4f      	ldr	r3, [pc, #316]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a7ec:	78db      	ldrb	r3, [r3, #3]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d122      	bne.n	800a838 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800a7f2:	4b4f      	ldr	r3, [pc, #316]	@ (800a930 <tx_buffer_prep+0x1cc>)
 800a7f4:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800a7f6:	4b54      	ldr	r3, [pc, #336]	@ (800a948 <tx_buffer_prep+0x1e4>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800a7fc:	4b53      	ldr	r3, [pc, #332]	@ (800a94c <tx_buffer_prep+0x1e8>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	0e1b      	lsrs	r3, r3, #24
 800a802:	b2da      	uxtb	r2, r3
 800a804:	4b4a      	ldr	r3, [pc, #296]	@ (800a930 <tx_buffer_prep+0x1cc>)
 800a806:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800a808:	4b50      	ldr	r3, [pc, #320]	@ (800a94c <tx_buffer_prep+0x1e8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	0c1b      	lsrs	r3, r3, #16
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	4b47      	ldr	r3, [pc, #284]	@ (800a930 <tx_buffer_prep+0x1cc>)
 800a812:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800a814:	4b4d      	ldr	r3, [pc, #308]	@ (800a94c <tx_buffer_prep+0x1e8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	0a1b      	lsrs	r3, r3, #8
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	4b44      	ldr	r3, [pc, #272]	@ (800a930 <tx_buffer_prep+0x1cc>)
 800a81e:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800a820:	4b4a      	ldr	r3, [pc, #296]	@ (800a94c <tx_buffer_prep+0x1e8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	b2da      	uxtb	r2, r3
 800a826:	4b42      	ldr	r3, [pc, #264]	@ (800a930 <tx_buffer_prep+0x1cc>)
 800a828:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800a82a:	4b44      	ldr	r3, [pc, #272]	@ (800a93c <tx_buffer_prep+0x1d8>)
 800a82c:	2204      	movs	r2, #4
 800a82e:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800a830:	4b3d      	ldr	r3, [pc, #244]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a832:	2201      	movs	r2, #1
 800a834:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800a836:	e072      	b.n	800a91e <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800a838:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800a83a:	4b45      	ldr	r3, [pc, #276]	@ (800a950 <tx_buffer_prep+0x1ec>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800a840:	4b39      	ldr	r3, [pc, #228]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a842:	2200      	movs	r2, #0
 800a844:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800a846:	4b38      	ldr	r3, [pc, #224]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a848:	2200      	movs	r2, #0
 800a84a:	701a      	strb	r2, [r3, #0]
		flagsLogger [4] = 0;				// permite loggeo de eventos
 800a84c:	4b41      	ldr	r3, [pc, #260]	@ (800a954 <tx_buffer_prep+0x1f0>)
 800a84e:	2200      	movs	r2, #0
 800a850:	711a      	strb	r2, [r3, #4]
		flagsLogger [5] = 0;				// permite loggeo de datos
 800a852:	4b40      	ldr	r3, [pc, #256]	@ (800a954 <tx_buffer_prep+0x1f0>)
 800a854:	2200      	movs	r2, #0
 800a856:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800a858:	e061      	b.n	800a91e <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	e000      	b.n	800a860 <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800a85e:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800a860:	4b37      	ldr	r3, [pc, #220]	@ (800a940 <tx_buffer_prep+0x1dc>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800a866:	4b32      	ldr	r3, [pc, #200]	@ (800a930 <tx_buffer_prep+0x1cc>)
 800a868:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800a86a:	4b37      	ldr	r3, [pc, #220]	@ (800a948 <tx_buffer_prep+0x1e4>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	4b2f      	ldr	r3, [pc, #188]	@ (800a934 <tx_buffer_prep+0x1d0>)
 800a876:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800a878:	4b37      	ldr	r3, [pc, #220]	@ (800a958 <tx_buffer_prep+0x1f4>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d111      	bne.n	800a8a4 <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800a880:	4b34      	ldr	r3, [pc, #208]	@ (800a954 <tx_buffer_prep+0x1f0>)
 800a882:	791b      	ldrb	r3, [r3, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d107      	bne.n	800a898 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800a888:	4b32      	ldr	r3, [pc, #200]	@ (800a954 <tx_buffer_prep+0x1f0>)
 800a88a:	795b      	ldrb	r3, [r3, #5]
 800a88c:	2201      	movs	r2, #1
 800a88e:	4053      	eors	r3, r2
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d108      	bne.n	800a8a8 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800a896:	e000      	b.n	800a89a <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800a898:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781a      	ldrb	r2, [r3, #0]
 800a89e:	4b25      	ldr	r3, [pc, #148]	@ (800a934 <tx_buffer_prep+0x1d0>)
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	e002      	b.n	800a8aa <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800a8a4:	46c0      	nop			@ (mov r8, r8)
 800a8a6:	e000      	b.n	800a8aa <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800a8a8:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800a8aa:	4b22      	ldr	r3, [pc, #136]	@ (800a934 <tx_buffer_prep+0x1d0>)
 800a8ac:	781a      	ldrb	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800a8be:	4b22      	ldr	r3, [pc, #136]	@ (800a948 <tx_buffer_prep+0x1e4>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	4b20      	ldr	r3, [pc, #128]	@ (800a948 <tx_buffer_prep+0x1e4>)
 800a8c8:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800a8ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a934 <tx_buffer_prep+0x1d0>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	f7f9 ff30 	bl	8004734 <build_chksum>

		if(!flagsTX [0]){
 800a8d4:	4b14      	ldr	r3, [pc, #80]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	4053      	eors	r3, r2
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10b      	bne.n	800a8fa <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800a8e2:	4b1e      	ldr	r3, [pc, #120]	@ (800a95c <tx_buffer_prep+0x1f8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d108      	bne.n	800a8fe <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800a8ec:	4b1c      	ldr	r3, [pc, #112]	@ (800a960 <tx_buffer_prep+0x1fc>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <tx_buffer_prep+0x1c4>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	705a      	strb	r2, [r3, #1]
 800a8f8:	e002      	b.n	800a900 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800a8fa:	46c0      	nop			@ (mov r8, r8)
 800a8fc:	e000      	b.n	800a900 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800a8fe:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800a900:	4b11      	ldr	r3, [pc, #68]	@ (800a948 <tx_buffer_prep+0x1e4>)
 800a902:	781a      	ldrb	r2, [r3, #0]
 800a904:	4b17      	ldr	r3, [pc, #92]	@ (800a964 <tx_buffer_prep+0x200>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d200      	bcs.n	800a90e <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800a90c:	e7b0      	b.n	800a870 <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800a90e:	4b0c      	ldr	r3, [pc, #48]	@ (800a940 <tx_buffer_prep+0x1dc>)
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800a914:	4b13      	ldr	r3, [pc, #76]	@ (800a964 <tx_buffer_prep+0x200>)
 800a916:	781a      	ldrb	r2, [r3, #0]
 800a918:	4b08      	ldr	r3, [pc, #32]	@ (800a93c <tx_buffer_prep+0x1d8>)
 800a91a:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800a91c:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800a91e:	46c0      	nop			@ (mov r8, r8)
 800a920:	46bd      	mov	sp, r7
 800a922:	b002      	add	sp, #8
 800a924:	bd80      	pop	{r7, pc}
 800a926:	46c0      	nop			@ (mov r8, r8)
 800a928:	20000d58 	.word	0x20000d58
 800a92c:	20000d14 	.word	0x20000d14
 800a930:	20000d74 	.word	0x20000d74
 800a934:	2000083c 	.word	0x2000083c
 800a938:	20000d1b 	.word	0x20000d1b
 800a93c:	20000d6e 	.word	0x20000d6e
 800a940:	20000d50 	.word	0x20000d50
 800a944:	20000d4c 	.word	0x20000d4c
 800a948:	20000d54 	.word	0x20000d54
 800a94c:	20000d70 	.word	0x20000d70
 800a950:	20000d55 	.word	0x20000d55
 800a954:	20000d40 	.word	0x20000d40
 800a958:	20000e18 	.word	0x20000e18
 800a95c:	20000d68 	.word	0x20000d68
 800a960:	20000d64 	.word	0x20000d64
 800a964:	20000d6c 	.word	0x20000d6c

0800a968 <tx_control>:
uint32_t    direccion_fw = 0x8018800;
uint32_t    direccion_borrado = 0x8018800;

uint32_t   chksum_to_compare = 0;

void tx_control(void){
 800a968:	b580      	push	{r7, lr}
 800a96a:	b090      	sub	sp, #64	@ 0x40
 800a96c:	af00      	add	r7, sp, #0
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800a96e:	4bd9      	ldr	r3, [pc, #868]	@ (800acd4 <tx_control+0x36c>)
 800a970:	781a      	ldrb	r2, [r3, #0]
 800a972:	4bd9      	ldr	r3, [pc, #868]	@ (800acd8 <tx_control+0x370>)
 800a974:	795b      	ldrb	r3, [r3, #5]
 800a976:	4313      	orrs	r3, r2
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	4bd7      	ldr	r3, [pc, #860]	@ (800acd8 <tx_control+0x370>)
 800a97c:	791b      	ldrb	r3, [r3, #4]
 800a97e:	4313      	orrs	r3, r2
 800a980:	b2da      	uxtb	r2, r3
 800a982:	4bd6      	ldr	r3, [pc, #856]	@ (800acdc <tx_control+0x374>)
 800a984:	78db      	ldrb	r3, [r3, #3]
 800a986:	4313      	orrs	r3, r2
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4bd4      	ldr	r3, [pc, #848]	@ (800acdc <tx_control+0x374>)
 800a98c:	791b      	ldrb	r3, [r3, #4]
 800a98e:	4313      	orrs	r3, r2
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d000      	beq.n	800a998 <tx_control+0x30>
 800a996:	e075      	b.n	800aa84 <tx_control+0x11c>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800a998:	4bd1      	ldr	r3, [pc, #836]	@ (800ace0 <tx_control+0x378>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d16b      	bne.n	800aa78 <tx_control+0x110>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800a9a0:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800a9a2:	4bd0      	ldr	r3, [pc, #832]	@ (800ace4 <tx_control+0x37c>)
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d000      	beq.n	800a9ac <tx_control+0x44>
 800a9aa:	e077      	b.n	800aa9c <tx_control+0x134>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800a9ac:	4bce      	ldr	r3, [pc, #824]	@ (800ace8 <tx_control+0x380>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d146      	bne.n	800aa42 <tx_control+0xda>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800a9b4:	4bcc      	ldr	r3, [pc, #816]	@ (800ace8 <tx_control+0x380>)
 800a9b6:	221e      	movs	r2, #30
 800a9b8:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800a9ba:	4bcc      	ldr	r3, [pc, #816]	@ (800acec <tx_control+0x384>)
 800a9bc:	2240      	movs	r2, #64	@ 0x40
 800a9be:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800a9c0:	4bca      	ldr	r3, [pc, #808]	@ (800acec <tx_control+0x384>)
 800a9c2:	22f8      	movs	r2, #248	@ 0xf8
 800a9c4:	705a      	strb	r2, [r3, #1]
		bufferTxControl[2] = eeLat1;	//ldw X,eeLat1
 800a9c6:	4bca      	ldr	r3, [pc, #808]	@ (800acf0 <tx_control+0x388>)
 800a9c8:	781a      	ldrb	r2, [r3, #0]
 800a9ca:	4bc8      	ldr	r3, [pc, #800]	@ (800acec <tx_control+0x384>)
 800a9cc:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = eeLat2;	//ldw bufferTxControl+2,X
 800a9ce:	4bc9      	ldr	r3, [pc, #804]	@ (800acf4 <tx_control+0x38c>)
 800a9d0:	781a      	ldrb	r2, [r3, #0]
 800a9d2:	4bc6      	ldr	r3, [pc, #792]	@ (800acec <tx_control+0x384>)
 800a9d4:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = eeLat3;	//ldw X,eeLat3
 800a9d6:	4bc8      	ldr	r3, [pc, #800]	@ (800acf8 <tx_control+0x390>)
 800a9d8:	781a      	ldrb	r2, [r3, #0]
 800a9da:	4bc4      	ldr	r3, [pc, #784]	@ (800acec <tx_control+0x384>)
 800a9dc:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = eeLat4;	//ldw bufferTxControl+4,X
 800a9de:	4bc7      	ldr	r3, [pc, #796]	@ (800acfc <tx_control+0x394>)
 800a9e0:	781a      	ldrb	r2, [r3, #0]
 800a9e2:	4bc2      	ldr	r3, [pc, #776]	@ (800acec <tx_control+0x384>)
 800a9e4:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
 800a9e6:	4bc6      	ldr	r3, [pc, #792]	@ (800ad00 <tx_control+0x398>)
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	4bc0      	ldr	r3, [pc, #768]	@ (800acec <tx_control+0x384>)
 800a9ec:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
 800a9ee:	4bc5      	ldr	r3, [pc, #788]	@ (800ad04 <tx_control+0x39c>)
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	4bbe      	ldr	r3, [pc, #760]	@ (800acec <tx_control+0x384>)
 800a9f4:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
 800a9f6:	4bc4      	ldr	r3, [pc, #784]	@ (800ad08 <tx_control+0x3a0>)
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	4bbc      	ldr	r3, [pc, #752]	@ (800acec <tx_control+0x384>)
 800a9fc:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X
 800a9fe:	4bc3      	ldr	r3, [pc, #780]	@ (800ad0c <tx_control+0x3a4>)
 800aa00:	781a      	ldrb	r2, [r3, #0]
 800aa02:	4bba      	ldr	r3, [pc, #744]	@ (800acec <tx_control+0x384>)
 800aa04:	725a      	strb	r2, [r3, #9]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800aa06:	4bc2      	ldr	r3, [pc, #776]	@ (800ad10 <tx_control+0x3a8>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800aa0c:	4bb7      	ldr	r3, [pc, #732]	@ (800acec <tx_control+0x384>)
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pointTx = point_X;				// ldw		pointTx,X
 800aa10:	4bc0      	ldr	r3, [pc, #768]	@ (800ad14 <tx_control+0x3ac>)
 800aa12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa14:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800aa16:	4bc0      	ldr	r3, [pc, #768]	@ (800ad18 <tx_control+0x3b0>)
 800aa18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa1a:	601a      	str	r2, [r3, #0]

		pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
 800aa1c:	4bbf      	ldr	r3, [pc, #764]	@ (800ad1c <tx_control+0x3b4>)
 800aa1e:	4ac0      	ldr	r2, [pc, #768]	@ (800ad20 <tx_control+0x3b8>)
 800aa20:	601a      	str	r2, [r3, #0]
    										// ldw		pointEndTx,X
		blockSizeTX = 10;						// mov		blockSizeTX,#10
 800aa22:	4bc0      	ldr	r3, [pc, #768]	@ (800ad24 <tx_control+0x3bc>)
 800aa24:	220a      	movs	r2, #10
 800aa26:	701a      	strb	r2, [r3, #0]

		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800aa28:	4bbf      	ldr	r3, [pc, #764]	@ (800ad28 <tx_control+0x3c0>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800aa2e:	4bb8      	ldr	r3, [pc, #736]	@ (800ad10 <tx_control+0x3a8>)
 800aa30:	2201      	movs	r2, #1
 800aa32:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800aa34:	4bab      	ldr	r3, [pc, #684]	@ (800ace4 <tx_control+0x37c>)
 800aa36:	2255      	movs	r2, #85	@ 0x55
 800aa38:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800aa3a:	4ba9      	ldr	r3, [pc, #676]	@ (800ace0 <tx_control+0x378>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800aa40:	e02f      	b.n	800aaa2 <tx_control+0x13a>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800aa42:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800aa44:	4ba6      	ldr	r3, [pc, #664]	@ (800ace0 <tx_control+0x378>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b80      	cmp	r3, #128	@ 0x80
 800aa4a:	d00e      	beq.n	800aa6a <tx_control+0x102>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800aa4c:	4bb7      	ldr	r3, [pc, #732]	@ (800ad2c <tx_control+0x3c4>)
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d125      	bne.n	800aaa0 <tx_control+0x138>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800aa54:	4bb6      	ldr	r3, [pc, #728]	@ (800ad30 <tx_control+0x3c8>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800aa5a:	4bb6      	ldr	r3, [pc, #728]	@ (800ad34 <tx_control+0x3cc>)
 800aa5c:	2205      	movs	r2, #5
 800aa5e:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800aa60:	4bb2      	ldr	r3, [pc, #712]	@ (800ad2c <tx_control+0x3c4>)
 800aa62:	2296      	movs	r2, #150	@ 0x96
 800aa64:	0052      	lsls	r2, r2, #1
 800aa66:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800aa68:	e01b      	b.n	800aaa2 <tx_control+0x13a>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800aa6a:	46c0      	nop			@ (mov r8, r8)
 800aa6c:	e000      	b.n	800aa70 <tx_control+0x108>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800aa6e:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800aa70:	4b9b      	ldr	r3, [pc, #620]	@ (800ace0 <tx_control+0x378>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	e000      	b.n	800aa7a <tx_control+0x112>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800aa78:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800aa7a:	4b99      	ldr	r3, [pc, #612]	@ (800ace0 <tx_control+0x378>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b80      	cmp	r3, #128	@ 0x80
 800aa80:	d0f5      	beq.n	800aa6e <tx_control+0x106>
		}

rx_tokenWiFi_02:
 800aa82:	e000      	b.n	800aa86 <tx_control+0x11e>
			goto rx_tokenWiFi_02;
 800aa84:	46c0      	nop			@ (mov r8, r8)

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800aa86:	4b98      	ldr	r3, [pc, #608]	@ (800ace8 <tx_control+0x380>)
 800aa88:	221e      	movs	r2, #30
 800aa8a:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800aa8c:	4ba8      	ldr	r3, [pc, #672]	@ (800ad30 <tx_control+0x3c8>)
 800aa8e:	2201      	movs	r2, #1
 800aa90:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
 800aa92:	4ba6      	ldr	r3, [pc, #664]	@ (800ad2c <tx_control+0x3c4>)
 800aa94:	2296      	movs	r2, #150	@ 0x96
 800aa96:	0052      	lsls	r2, r2, #1
 800aa98:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800aa9a:	e002      	b.n	800aaa2 <tx_control+0x13a>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800aa9c:	46c0      	nop			@ (mov r8, r8)
 800aa9e:	e000      	b.n	800aaa2 <tx_control+0x13a>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800aaa0:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800aaa2:	4ba3      	ldr	r3, [pc, #652]	@ (800ad30 <tx_control+0x3c8>)
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <tx_control+0x146>
 800aaaa:	f001 fe3d 	bl	800c728 <tx_control+0x1dc0>
			goto tokenWiFi_OK;
 800aaae:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800aab0:	4b8a      	ldr	r3, [pc, #552]	@ (800acdc <tx_control+0x374>)
 800aab2:	78db      	ldrb	r3, [r3, #3]
 800aab4:	2201      	movs	r2, #1
 800aab6:	4053      	eors	r3, r2
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <tx_control+0x15a>
 800aabe:	f000 fc5e 	bl	800b37e <tx_control+0xa16>
			goto tx_control_00;
 800aac2:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800aac4:	4b85      	ldr	r3, [pc, #532]	@ (800acdc <tx_control+0x374>)
 800aac6:	791b      	ldrb	r3, [r3, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	4053      	eors	r3, r2
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <tx_control+0x16e>
 800aad2:	f000 fc56 	bl	800b382 <tx_control+0xa1a>
			goto tx_control_00b;
 800aad6:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800aad8:	4b7e      	ldr	r3, [pc, #504]	@ (800acd4 <tx_control+0x36c>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2201      	movs	r2, #1
 800aade:	4053      	eors	r3, r2
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d136      	bne.n	800ab54 <tx_control+0x1ec>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800aae6:	4b94      	ldr	r3, [pc, #592]	@ (800ad38 <tx_control+0x3d0>)
 800aae8:	22f1      	movs	r2, #241	@ 0xf1
 800aaea:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800aaec:	4b8f      	ldr	r3, [pc, #572]	@ (800ad2c <tx_control+0x3c4>)
 800aaee:	2296      	movs	r2, #150	@ 0x96
 800aaf0:	0052      	lsls	r2, r2, #1
 800aaf2:	801a      	strh	r2, [r3, #0]

		if(timeOutRx != 0){//tnz timeOutRx
 800aaf4:	4b91      	ldr	r3, [pc, #580]	@ (800ad3c <tx_control+0x3d4>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d118      	bne.n	800ab2e <tx_control+0x1c6>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800aafc:	2337      	movs	r3, #55	@ 0x37
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
 800ab04:	e00a      	b.n	800ab1c <tx_control+0x1b4>
			flagsRxFirm [i]= 0;
 800ab06:	2037      	movs	r0, #55	@ 0x37
 800ab08:	183b      	adds	r3, r7, r0
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	4a71      	ldr	r2, [pc, #452]	@ (800acd4 <tx_control+0x36c>)
 800ab0e:	2100      	movs	r1, #0
 800ab10:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800ab12:	183b      	adds	r3, r7, r0
 800ab14:	781a      	ldrb	r2, [r3, #0]
 800ab16:	183b      	adds	r3, r7, r0
 800ab18:	3201      	adds	r2, #1
 800ab1a:	701a      	strb	r2, [r3, #0]
 800ab1c:	2337      	movs	r3, #55	@ 0x37
 800ab1e:	18fb      	adds	r3, r7, r3
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	2b07      	cmp	r3, #7
 800ab24:	d9ef      	bls.n	800ab06 <tx_control+0x19e>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800ab26:	4b6e      	ldr	r3, [pc, #440]	@ (800ace0 <tx_control+0x378>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800ab2c:	e013      	b.n	800ab56 <tx_control+0x1ee>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800ab2e:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800ab30:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800ab32:	4b69      	ldr	r3, [pc, #420]	@ (800acd8 <tx_control+0x370>)
 800ab34:	2201      	movs	r2, #1
 800ab36:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800ab38:	4b67      	ldr	r3, [pc, #412]	@ (800acd8 <tx_control+0x370>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800ab3e:	4b65      	ldr	r3, [pc, #404]	@ (800acd4 <tx_control+0x36c>)
 800ab40:	78db      	ldrb	r3, [r3, #3]
 800ab42:	2201      	movs	r2, #1
 800ab44:	4053      	eors	r3, r2
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <tx_control+0x1e8>
 800ab4c:	f001 f8c5 	bl	800bcda <tx_control+0x1372>
				goto rx_firmware01;
 800ab50:	f000 ffd7 	bl	800bb02 <tx_control+0x119a>
			goto ask_tx_control_01;
 800ab54:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800ab56:	4b62      	ldr	r3, [pc, #392]	@ (800ace0 <tx_control+0x378>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b21      	cmp	r3, #33	@ 0x21
 800ab5c:	d131      	bne.n	800abc2 <tx_control+0x25a>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800ab5e:	4b76      	ldr	r3, [pc, #472]	@ (800ad38 <tx_control+0x3d0>)
 800ab60:	22f1      	movs	r2, #241	@ 0xf1
 800ab62:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800ab64:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800ab66:	4b76      	ldr	r3, [pc, #472]	@ (800ad40 <tx_control+0x3d8>)
 800ab68:	22f1      	movs	r2, #241	@ 0xf1
 800ab6a:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800ab6c:	4b74      	ldr	r3, [pc, #464]	@ (800ad40 <tx_control+0x3d8>)
 800ab6e:	223f      	movs	r2, #63	@ 0x3f
 800ab70:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800ab72:	4b74      	ldr	r3, [pc, #464]	@ (800ad44 <tx_control+0x3dc>)
 800ab74:	781a      	ldrb	r2, [r3, #0]
 800ab76:	4b72      	ldr	r3, [pc, #456]	@ (800ad40 <tx_control+0x3d8>)
 800ab78:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800ab7a:	4b73      	ldr	r3, [pc, #460]	@ (800ad48 <tx_control+0x3e0>)
 800ab7c:	781a      	ldrb	r2, [r3, #0]
 800ab7e:	4b70      	ldr	r3, [pc, #448]	@ (800ad40 <tx_control+0x3d8>)
 800ab80:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800ab82:	4b72      	ldr	r3, [pc, #456]	@ (800ad4c <tx_control+0x3e4>)
 800ab84:	781a      	ldrb	r2, [r3, #0]
 800ab86:	4b6e      	ldr	r3, [pc, #440]	@ (800ad40 <tx_control+0x3d8>)
 800ab88:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800ab8a:	4b71      	ldr	r3, [pc, #452]	@ (800ad50 <tx_control+0x3e8>)
 800ab8c:	227d      	movs	r2, #125	@ 0x7d
 800ab8e:	5c9a      	ldrb	r2, [r3, r2]
 800ab90:	4b6b      	ldr	r3, [pc, #428]	@ (800ad40 <tx_control+0x3d8>)
 800ab92:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800ab94:	4b6e      	ldr	r3, [pc, #440]	@ (800ad50 <tx_control+0x3e8>)
 800ab96:	227e      	movs	r2, #126	@ 0x7e
 800ab98:	5c9a      	ldrb	r2, [r3, r2]
 800ab9a:	4b69      	ldr	r3, [pc, #420]	@ (800ad40 <tx_control+0x3d8>)
 800ab9c:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800ab9e:	4b6d      	ldr	r3, [pc, #436]	@ (800ad54 <tx_control+0x3ec>)
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	4b67      	ldr	r3, [pc, #412]	@ (800ad40 <tx_control+0x3d8>)
 800aba4:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800aba6:	4b6c      	ldr	r3, [pc, #432]	@ (800ad58 <tx_control+0x3f0>)
 800aba8:	781a      	ldrb	r2, [r3, #0]
 800abaa:	4b65      	ldr	r3, [pc, #404]	@ (800ad40 <tx_control+0x3d8>)
 800abac:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800abae:	4b64      	ldr	r3, [pc, #400]	@ (800ad40 <tx_control+0x3d8>)
 800abb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800abb2:	4b4e      	ldr	r3, [pc, #312]	@ (800acec <tx_control+0x384>)
 800abb4:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800abb6:	2336      	movs	r3, #54	@ 0x36
 800abb8:	18fb      	adds	r3, r7, r3
 800abba:	2200      	movs	r2, #0
 800abbc:	701a      	strb	r2, [r3, #0]
 800abbe:	f000 fc01 	bl	800b3c4 <tx_control+0xa5c>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800abc2:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800abc4:	4b45      	ldr	r3, [pc, #276]	@ (800acdc <tx_control+0x374>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d148      	bne.n	800ac5e <tx_control+0x2f6>
		if(codeTX != 0x60){//	cp	A,#$60
 800abcc:	4b44      	ldr	r3, [pc, #272]	@ (800ace0 <tx_control+0x378>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b60      	cmp	r3, #96	@ 0x60
 800abd2:	d11f      	bne.n	800ac14 <tx_control+0x2ac>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800abd4:	4b58      	ldr	r3, [pc, #352]	@ (800ad38 <tx_control+0x3d0>)
 800abd6:	22f1      	movs	r2, #241	@ 0xf1
 800abd8:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800abda:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800abdc:	4b5f      	ldr	r3, [pc, #380]	@ (800ad5c <tx_control+0x3f4>)
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	4b5f      	ldr	r3, [pc, #380]	@ (800ad60 <tx_control+0x3f8>)
 800abe2:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800abe4:	4b5f      	ldr	r3, [pc, #380]	@ (800ad64 <tx_control+0x3fc>)
 800abe6:	781a      	ldrb	r2, [r3, #0]
 800abe8:	4b5f      	ldr	r3, [pc, #380]	@ (800ad68 <tx_control+0x400>)
 800abea:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800abec:	4b5f      	ldr	r3, [pc, #380]	@ (800ad6c <tx_control+0x404>)
 800abee:	2203      	movs	r2, #3
 800abf0:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800abf2:	4b5f      	ldr	r3, [pc, #380]	@ (800ad70 <tx_control+0x408>)
 800abf4:	4a5f      	ldr	r2, [pc, #380]	@ (800ad74 <tx_control+0x40c>)
 800abf6:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800abf8:	4b5f      	ldr	r3, [pc, #380]	@ (800ad78 <tx_control+0x410>)
 800abfa:	4a60      	ldr	r2, [pc, #384]	@ (800ad7c <tx_control+0x414>)
 800abfc:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800abfe:	4b36      	ldr	r3, [pc, #216]	@ (800acd8 <tx_control+0x370>)
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2201      	movs	r2, #1
 800ac04:	4053      	eors	r3, r2
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <tx_control+0x2a8>
 800ac0c:	f000 fc21 	bl	800b452 <tx_control+0xaea>
			goto noFullFlagTXDATA;
 800ac10:	f000 fc22 	bl	800b458 <tx_control+0xaf0>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800ac14:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800ac16:	4b32      	ldr	r3, [pc, #200]	@ (800ace0 <tx_control+0x378>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b61      	cmp	r3, #97	@ 0x61
 800ac1c:	d121      	bne.n	800ac62 <tx_control+0x2fa>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800ac1e:	4b46      	ldr	r3, [pc, #280]	@ (800ad38 <tx_control+0x3d0>)
 800ac20:	22f1      	movs	r2, #241	@ 0xf1
 800ac22:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800ac24:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800ac26:	4b56      	ldr	r3, [pc, #344]	@ (800ad80 <tx_control+0x418>)
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	4b4d      	ldr	r3, [pc, #308]	@ (800ad60 <tx_control+0x3f8>)
 800ac2c:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800ac2e:	4b55      	ldr	r3, [pc, #340]	@ (800ad84 <tx_control+0x41c>)
 800ac30:	781a      	ldrb	r2, [r3, #0]
 800ac32:	4b4d      	ldr	r3, [pc, #308]	@ (800ad68 <tx_control+0x400>)
 800ac34:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800ac36:	4b4d      	ldr	r3, [pc, #308]	@ (800ad6c <tx_control+0x404>)
 800ac38:	220a      	movs	r2, #10
 800ac3a:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800ac3c:	4b4c      	ldr	r3, [pc, #304]	@ (800ad70 <tx_control+0x408>)
 800ac3e:	4a52      	ldr	r2, [pc, #328]	@ (800ad88 <tx_control+0x420>)
 800ac40:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800ac42:	4b4d      	ldr	r3, [pc, #308]	@ (800ad78 <tx_control+0x410>)
 800ac44:	4a51      	ldr	r2, [pc, #324]	@ (800ad8c <tx_control+0x424>)
 800ac46:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800ac48:	4b23      	ldr	r3, [pc, #140]	@ (800acd8 <tx_control+0x370>)
 800ac4a:	789b      	ldrb	r3, [r3, #2]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	4053      	eors	r3, r2
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d101      	bne.n	800ac5a <tx_control+0x2f2>
 800ac56:	f000 fc49 	bl	800b4ec <tx_control+0xb84>
			goto noFullFlagTXEVENT;
 800ac5a:	f000 fc4a 	bl	800b4f2 <tx_control+0xb8a>
			goto ask_tx_control_04;
 800ac5e:	46c0      	nop			@ (mov r8, r8)
 800ac60:	e000      	b.n	800ac64 <tx_control+0x2fc>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800ac62:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800ac64:	4b1e      	ldr	r3, [pc, #120]	@ (800ace0 <tx_control+0x378>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b53      	cmp	r3, #83	@ 0x53
 800ac6a:	d000      	beq.n	800ac6e <tx_control+0x306>
 800ac6c:	e0a0      	b.n	800adb0 <tx_control+0x448>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800ac6e:	4b32      	ldr	r3, [pc, #200]	@ (800ad38 <tx_control+0x3d0>)
 800ac70:	22f1      	movs	r2, #241	@ 0xf1
 800ac72:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800ac74:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800ac76:	4b46      	ldr	r3, [pc, #280]	@ (800ad90 <tx_control+0x428>)
 800ac78:	781a      	ldrb	r2, [r3, #0]
 800ac7a:	4b46      	ldr	r3, [pc, #280]	@ (800ad94 <tx_control+0x42c>)
 800ac7c:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800ac7e:	4b46      	ldr	r3, [pc, #280]	@ (800ad98 <tx_control+0x430>)
 800ac80:	781a      	ldrb	r2, [r3, #0]
 800ac82:	4b44      	ldr	r3, [pc, #272]	@ (800ad94 <tx_control+0x42c>)
 800ac84:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800ac86:	4b45      	ldr	r3, [pc, #276]	@ (800ad9c <tx_control+0x434>)
 800ac88:	781a      	ldrb	r2, [r3, #0]
 800ac8a:	4b42      	ldr	r3, [pc, #264]	@ (800ad94 <tx_control+0x42c>)
 800ac8c:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800ac8e:	4b44      	ldr	r3, [pc, #272]	@ (800ada0 <tx_control+0x438>)
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	4b40      	ldr	r3, [pc, #256]	@ (800ad94 <tx_control+0x42c>)
 800ac94:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800ac96:	4b43      	ldr	r3, [pc, #268]	@ (800ada4 <tx_control+0x43c>)
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	0a1b      	lsrs	r3, r3, #8
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	4b3c      	ldr	r3, [pc, #240]	@ (800ad94 <tx_control+0x42c>)
 800aca2:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800aca4:	4b3f      	ldr	r3, [pc, #252]	@ (800ada4 <tx_control+0x43c>)
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	4b3a      	ldr	r3, [pc, #232]	@ (800ad94 <tx_control+0x42c>)
 800acac:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800acae:	4b3e      	ldr	r3, [pc, #248]	@ (800ada8 <tx_control+0x440>)
 800acb0:	781a      	ldrb	r2, [r3, #0]
 800acb2:	4b38      	ldr	r3, [pc, #224]	@ (800ad94 <tx_control+0x42c>)
 800acb4:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800acb6:	4b37      	ldr	r3, [pc, #220]	@ (800ad94 <tx_control+0x42c>)
 800acb8:	2200      	movs	r2, #0
 800acba:	71da      	strb	r2, [r3, #7]
		if (!GPIOR0 [f_comp])											// compresor activo ?
 800acbc:	4b3b      	ldr	r3, [pc, #236]	@ (800adac <tx_control+0x444>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	2201      	movs	r2, #1
 800acc2:	4053      	eors	r3, r2
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <tx_control+0x366>
 800acca:	f000 fcac 	bl	800b626 <tx_control+0xcbe>
 800acce:	f000 fca3 	bl	800b618 <tx_control+0xcb0>
 800acd2:	46c0      	nop			@ (mov r8, r8)
 800acd4:	20000e18 	.word	0x20000e18
 800acd8:	20000d40 	.word	0x20000d40
 800acdc:	20000e8c 	.word	0x20000e8c
 800ace0:	20000d60 	.word	0x20000d60
 800ace4:	20000d55 	.word	0x20000d55
 800ace8:	20000e76 	.word	0x20000e76
 800acec:	20000ee4 	.word	0x20000ee4
 800acf0:	0803f088 	.word	0x0803f088
 800acf4:	0803f089 	.word	0x0803f089
 800acf8:	0803f08a 	.word	0x0803f08a
 800acfc:	0803f08b 	.word	0x0803f08b
 800ad00:	0803f08c 	.word	0x0803f08c
 800ad04:	0803f08d 	.word	0x0803f08d
 800ad08:	0803f08e 	.word	0x0803f08e
 800ad0c:	0803f08f 	.word	0x0803f08f
 800ad10:	20000d58 	.word	0x20000d58
 800ad14:	20000d50 	.word	0x20000d50
 800ad18:	20000d48 	.word	0x20000d48
 800ad1c:	20000d4c 	.word	0x20000d4c
 800ad20:	20000eee 	.word	0x20000eee
 800ad24:	20000d6c 	.word	0x20000d6c
 800ad28:	20000d70 	.word	0x20000d70
 800ad2c:	20000e88 	.word	0x20000e88
 800ad30:	20000e80 	.word	0x20000e80
 800ad34:	20000e24 	.word	0x20000e24
 800ad38:	20000e21 	.word	0x20000e21
 800ad3c:	20000e22 	.word	0x20000e22
 800ad40:	20000d1c 	.word	0x20000d1c
 800ad44:	0801e7f4 	.word	0x0801e7f4
 800ad48:	0801e7f0 	.word	0x0801e7f0
 800ad4c:	0801e7f1 	.word	0x0801e7f1
 800ad50:	200000bc 	.word	0x200000bc
 800ad54:	0801e7f3 	.word	0x0801e7f3
 800ad58:	0801e7f2 	.word	0x0801e7f2
 800ad5c:	20000ce9 	.word	0x20000ce9
 800ad60:	20000cd6 	.word	0x20000cd6
 800ad64:	20000ce8 	.word	0x20000ce8
 800ad68:	20000cd7 	.word	0x20000cd7
 800ad6c:	20000d6d 	.word	0x20000d6d
 800ad70:	20000ce0 	.word	0x20000ce0
 800ad74:	20000bc8 	.word	0x20000bc8
 800ad78:	20000cdc 	.word	0x20000cdc
 800ad7c:	0803c000 	.word	0x0803c000
 800ad80:	20000ceb 	.word	0x20000ceb
 800ad84:	20000cea 	.word	0x20000cea
 800ad88:	20000c48 	.word	0x20000c48
 800ad8c:	08037000 	.word	0x08037000
 800ad90:	20000aec 	.word	0x20000aec
 800ad94:	20000d34 	.word	0x20000d34
 800ad98:	20000aed 	.word	0x20000aed
 800ad9c:	20000aee 	.word	0x20000aee
 800ada0:	20000aef 	.word	0x20000aef
 800ada4:	20000b90 	.word	0x20000b90
 800ada8:	20000b0a 	.word	0x20000b0a
 800adac:	20000ae0 	.word	0x20000ae0
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800adb0:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800adb2:	4be5      	ldr	r3, [pc, #916]	@ (800b148 <tx_control+0x7e0>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b51      	cmp	r3, #81	@ 0x51
 800adb8:	d125      	bne.n	800ae06 <tx_control+0x49e>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800adba:	4be4      	ldr	r3, [pc, #912]	@ (800b14c <tx_control+0x7e4>)
 800adbc:	22f1      	movs	r2, #241	@ 0xf1
 800adbe:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800adc0:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800adc2:	4be3      	ldr	r3, [pc, #908]	@ (800b150 <tx_control+0x7e8>)
 800adc4:	227b      	movs	r2, #123	@ 0x7b
 800adc6:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800adc8:	4be1      	ldr	r3, [pc, #900]	@ (800b150 <tx_control+0x7e8>)
 800adca:	227c      	movs	r2, #124	@ 0x7c
 800adcc:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800adce:	4be0      	ldr	r3, [pc, #896]	@ (800b150 <tx_control+0x7e8>)
 800add0:	2200      	movs	r2, #0
 800add2:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800add4:	4bde      	ldr	r3, [pc, #888]	@ (800b150 <tx_control+0x7e8>)
 800add6:	2200      	movs	r2, #0
 800add8:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800adda:	4bdd      	ldr	r3, [pc, #884]	@ (800b150 <tx_control+0x7e8>)
 800addc:	2200      	movs	r2, #0
 800adde:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800ade0:	4bdb      	ldr	r3, [pc, #876]	@ (800b150 <tx_control+0x7e8>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800ade6:	4bda      	ldr	r3, [pc, #872]	@ (800b150 <tx_control+0x7e8>)
 800ade8:	2204      	movs	r2, #4
 800adea:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800adec:	4bd8      	ldr	r3, [pc, #864]	@ (800b150 <tx_control+0x7e8>)
 800adee:	2280      	movs	r2, #128	@ 0x80
 800adf0:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800adf2:	4bd7      	ldr	r3, [pc, #860]	@ (800b150 <tx_control+0x7e8>)
 800adf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[0];	 //
 800adf6:	4bd7      	ldr	r3, [pc, #860]	@ (800b154 <tx_control+0x7ec>)
 800adf8:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 8 ; i++ )
 800adfa:	232c      	movs	r3, #44	@ 0x2c
 800adfc:	18fb      	adds	r3, r7, r3
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	f000 fd65 	bl	800b8d0 <tx_control+0xf68>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800ae06:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800ae08:	4bcf      	ldr	r3, [pc, #828]	@ (800b148 <tx_control+0x7e0>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b50      	cmp	r3, #80	@ 0x50
 800ae0e:	d10f      	bne.n	800ae30 <tx_control+0x4c8>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800ae10:	4bce      	ldr	r3, [pc, #824]	@ (800b14c <tx_control+0x7e4>)
 800ae12:	22f1      	movs	r2, #241	@ 0xf1
 800ae14:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800ae16:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == eePlantilla[eeversion1]){
 800ae18:	4bcf      	ldr	r3, [pc, #828]	@ (800b158 <tx_control+0x7f0>)
 800ae1a:	227d      	movs	r2, #125	@ 0x7d
 800ae1c:	5c9a      	ldrb	r2, [r3, r2]
 800ae1e:	4bcf      	ldr	r3, [pc, #828]	@ (800b15c <tx_control+0x7f4>)
 800ae20:	217b      	movs	r1, #123	@ 0x7b
 800ae22:	5c5b      	ldrb	r3, [r3, r1]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d001      	beq.n	800ae2c <tx_control+0x4c4>
 800ae28:	f000 fe43 	bl	800bab2 <tx_control+0x114a>
				goto 	verifica_version2;		//jreq	verifica_version2
 800ae2c:	f000 fde0 	bl	800b9f0 <tx_control+0x1088>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800ae30:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800ae32:	4bc5      	ldr	r3, [pc, #788]	@ (800b148 <tx_control+0x7e0>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b46      	cmp	r3, #70	@ 0x46
 800ae38:	d126      	bne.n	800ae88 <tx_control+0x520>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800ae3a:	4bc4      	ldr	r3, [pc, #784]	@ (800b14c <tx_control+0x7e4>)
 800ae3c:	22f1      	movs	r2, #241	@ 0xf1
 800ae3e:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800ae40:	46c0      	nop			@ (mov r8, r8)
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800ae42:	4bc7      	ldr	r3, [pc, #796]	@ (800b160 <tx_control+0x7f8>)
 800ae44:	22f1      	movs	r2, #241	@ 0xf1
 800ae46:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X03;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800ae48:	4bc5      	ldr	r3, [pc, #788]	@ (800b160 <tx_control+0x7f8>)
 800ae4a:	2203      	movs	r2, #3
 800ae4c:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800ae4e:	4bc5      	ldr	r3, [pc, #788]	@ (800b164 <tx_control+0x7fc>)
 800ae50:	2201      	movs	r2, #1
 800ae52:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800ae54:	4bc4      	ldr	r3, [pc, #784]	@ (800b168 <tx_control+0x800>)
 800ae56:	4ac2      	ldr	r2, [pc, #776]	@ (800b160 <tx_control+0x7f8>)
 800ae58:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800ae5a:	4bc4      	ldr	r3, [pc, #784]	@ (800b16c <tx_control+0x804>)
 800ae5c:	4ac0      	ldr	r2, [pc, #768]	@ (800b160 <tx_control+0x7f8>)
 800ae5e:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800ae60:	4bc3      	ldr	r3, [pc, #780]	@ (800b170 <tx_control+0x808>)
 800ae62:	4ac4      	ldr	r2, [pc, #784]	@ (800b174 <tx_control+0x80c>)
 800ae64:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800ae66:	4bc4      	ldr	r3, [pc, #784]	@ (800b178 <tx_control+0x810>)
 800ae68:	2202      	movs	r2, #2
 800ae6a:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800ae6c:	4bc3      	ldr	r3, [pc, #780]	@ (800b17c <tx_control+0x814>)
 800ae6e:	2201      	movs	r2, #1
 800ae70:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800ae72:	4bc3      	ldr	r3, [pc, #780]	@ (800b180 <tx_control+0x818>)
 800ae74:	2255      	movs	r2, #85	@ 0x55
 800ae76:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800ae78:	4bb3      	ldr	r3, [pc, #716]	@ (800b148 <tx_control+0x7e0>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800ae7e:	4bc1      	ldr	r3, [pc, #772]	@ (800b184 <tx_control+0x81c>)
 800ae80:	2205      	movs	r2, #5
 800ae82:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800ae84:	f001 fc53 	bl	800c72e <tx_control+0x1dc6>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800ae88:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800ae8a:	4baf      	ldr	r3, [pc, #700]	@ (800b148 <tx_control+0x7e0>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b54      	cmp	r3, #84	@ 0x54
 800ae90:	d10a      	bne.n	800aea8 <tx_control+0x540>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800ae92:	4bae      	ldr	r3, [pc, #696]	@ (800b14c <tx_control+0x7e4>)
 800ae94:	22f1      	movs	r2, #241	@ 0xf1
 800ae96:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800ae98:	46c0      	nop			@ (mov r8, r8)
//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:


			clean_buffer();	//	call	clean_buffer
 800ae9a:	f7f9 fc0f 	bl	80046bc <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800ae9e:	4bba      	ldr	r3, [pc, #744]	@ (800b188 <tx_control+0x820>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	701a      	strb	r2, [r3, #0]
 800aea4:	f000 ffd0 	bl	800be48 <tx_control+0x14e0>
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800aea8:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800aeaa:	4ba7      	ldr	r3, [pc, #668]	@ (800b148 <tx_control+0x7e0>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b55      	cmp	r3, #85	@ 0x55
 800aeb0:	d105      	bne.n	800aebe <tx_control+0x556>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800aeb2:	4ba6      	ldr	r3, [pc, #664]	@ (800b14c <tx_control+0x7e4>)
 800aeb4:	22f0      	movs	r2, #240	@ 0xf0
 800aeb6:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800aeb8:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800aeba:	f001 fc38 	bl	800c72e <tx_control+0x1dc6>
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800aebe:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800aec0:	4ba1      	ldr	r3, [pc, #644]	@ (800b148 <tx_control+0x7e0>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b56      	cmp	r3, #86	@ 0x56
 800aec6:	d132      	bne.n	800af2e <tx_control+0x5c6>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800aec8:	4ba0      	ldr	r3, [pc, #640]	@ (800b14c <tx_control+0x7e4>)
 800aeca:	22f0      	movs	r2, #240	@ 0xf0
 800aecc:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800aece:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800aed0:	4bae      	ldr	r3, [pc, #696]	@ (800b18c <tx_control+0x824>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800aed6:	4bae      	ldr	r3, [pc, #696]	@ (800b190 <tx_control+0x828>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800aedc:	4bad      	ldr	r3, [pc, #692]	@ (800b194 <tx_control+0x82c>)
 800aede:	2206      	movs	r2, #6
 800aee0:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800aee2:	4b9d      	ldr	r3, [pc, #628]	@ (800b158 <tx_control+0x7f0>)
 800aee4:	2106      	movs	r1, #6
 800aee6:	0018      	movs	r0, r3
 800aee8:	f7f9 fbb2 	bl	8004650 <buildChksumBloq>
			chksum_to_compare = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800aef0:	4b99      	ldr	r3, [pc, #612]	@ (800b158 <tx_control+0x7f0>)
 800aef2:	799b      	ldrb	r3, [r3, #6]
 800aef4:	061b      	lsls	r3, r3, #24
 800aef6:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800aef8:	4b97      	ldr	r3, [pc, #604]	@ (800b158 <tx_control+0x7f0>)
 800aefa:	79db      	ldrb	r3, [r3, #7]
 800aefc:	041b      	lsls	r3, r3, #16
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	18d3      	adds	r3, r2, r3
 800af02:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800af04:	4b94      	ldr	r3, [pc, #592]	@ (800b158 <tx_control+0x7f0>)
 800af06:	7a1b      	ldrb	r3, [r3, #8]
 800af08:	021b      	lsls	r3, r3, #8
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	18d3      	adds	r3, r2, r3
 800af0e:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800af10:	4b91      	ldr	r3, [pc, #580]	@ (800b158 <tx_control+0x7f0>)
 800af12:	7a5b      	ldrb	r3, [r3, #9]
 800af14:	001a      	movs	r2, r3
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	189b      	adds	r3, r3, r2
 800af1a:	603b      	str	r3, [r7, #0]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800af1c:	4b9b      	ldr	r3, [pc, #620]	@ (800b18c <tx_control+0x824>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	429a      	cmp	r2, r3
 800af24:	d101      	bne.n	800af2a <tx_control+0x5c2>
 800af26:	f000 fff8 	bl	800bf1a <tx_control+0x15b2>
				goto tx_write_status_error;
 800af2a:	f001 f8a1 	bl	800c070 <tx_control+0x1708>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800af2e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800af30:	4b85      	ldr	r3, [pc, #532]	@ (800b148 <tx_control+0x7e0>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b57      	cmp	r3, #87	@ 0x57
 800af36:	d107      	bne.n	800af48 <tx_control+0x5e0>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800af38:	4b84      	ldr	r3, [pc, #528]	@ (800b14c <tx_control+0x7e4>)
 800af3a:	22f0      	movs	r2, #240	@ 0xf0
 800af3c:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800af3e:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		for(int k=0;k<8;k++)
 800af40:	2300      	movs	r3, #0
 800af42:	61bb      	str	r3, [r7, #24]
 800af44:	f001 f8c3 	bl	800c0ce <tx_control+0x1766>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800af48:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800af4a:	4b7f      	ldr	r3, [pc, #508]	@ (800b148 <tx_control+0x7e0>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	2b58      	cmp	r3, #88	@ 0x58
 800af50:	d132      	bne.n	800afb8 <tx_control+0x650>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800af52:	4b7e      	ldr	r3, [pc, #504]	@ (800b14c <tx_control+0x7e4>)
 800af54:	22f0      	movs	r2, #240	@ 0xf0
 800af56:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800af58:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800af5a:	4b8c      	ldr	r3, [pc, #560]	@ (800b18c <tx_control+0x824>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800af60:	4b8b      	ldr	r3, [pc, #556]	@ (800b190 <tx_control+0x828>)
 800af62:	2200      	movs	r2, #0
 800af64:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800af66:	4b8b      	ldr	r3, [pc, #556]	@ (800b194 <tx_control+0x82c>)
 800af68:	2206      	movs	r2, #6
 800af6a:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800af6c:	4b7a      	ldr	r3, [pc, #488]	@ (800b158 <tx_control+0x7f0>)
 800af6e:	2106      	movs	r1, #6
 800af70:	0018      	movs	r0, r3
 800af72:	f7f9 fb6d 	bl	8004650 <buildChksumBloq>
		chksum_to_compare = 0;
 800af76:	2300      	movs	r3, #0
 800af78:	603b      	str	r3, [r7, #0]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800af7a:	4b77      	ldr	r3, [pc, #476]	@ (800b158 <tx_control+0x7f0>)
 800af7c:	799b      	ldrb	r3, [r3, #6]
 800af7e:	061b      	lsls	r3, r3, #24
 800af80:	603b      	str	r3, [r7, #0]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800af82:	4b75      	ldr	r3, [pc, #468]	@ (800b158 <tx_control+0x7f0>)
 800af84:	79db      	ldrb	r3, [r3, #7]
 800af86:	041b      	lsls	r3, r3, #16
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	18d3      	adds	r3, r2, r3
 800af8c:	603b      	str	r3, [r7, #0]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800af8e:	4b72      	ldr	r3, [pc, #456]	@ (800b158 <tx_control+0x7f0>)
 800af90:	7a1b      	ldrb	r3, [r3, #8]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	18d3      	adds	r3, r2, r3
 800af98:	603b      	str	r3, [r7, #0]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800af9a:	4b6f      	ldr	r3, [pc, #444]	@ (800b158 <tx_control+0x7f0>)
 800af9c:	7a5b      	ldrb	r3, [r3, #9]
 800af9e:	001a      	movs	r2, r3
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	189b      	adds	r3, r3, r2
 800afa4:	603b      	str	r3, [r7, #0]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800afa6:	4b79      	ldr	r3, [pc, #484]	@ (800b18c <tx_control+0x824>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	429a      	cmp	r2, r3
 800afae:	d101      	bne.n	800afb4 <tx_control+0x64c>
 800afb0:	f001 f9ed 	bl	800c38e <tx_control+0x1a26>
			goto tx_write_status_error;
 800afb4:	f001 f85c 	bl	800c070 <tx_control+0x1708>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800afb8:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800afba:	4b63      	ldr	r3, [pc, #396]	@ (800b148 <tx_control+0x7e0>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b59      	cmp	r3, #89	@ 0x59
 800afc0:	d132      	bne.n	800b028 <tx_control+0x6c0>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800afc2:	4b62      	ldr	r3, [pc, #392]	@ (800b14c <tx_control+0x7e4>)
 800afc4:	22f0      	movs	r2, #240	@ 0xf0
 800afc6:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800afc8:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800afca:	4b70      	ldr	r3, [pc, #448]	@ (800b18c <tx_control+0x824>)
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800afd0:	4b6f      	ldr	r3, [pc, #444]	@ (800b190 <tx_control+0x828>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800afd6:	4b6f      	ldr	r3, [pc, #444]	@ (800b194 <tx_control+0x82c>)
 800afd8:	220a      	movs	r2, #10
 800afda:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800afdc:	4b5e      	ldr	r3, [pc, #376]	@ (800b158 <tx_control+0x7f0>)
 800afde:	210a      	movs	r1, #10
 800afe0:	0018      	movs	r0, r3
 800afe2:	f7f9 fb35 	bl	8004650 <buildChksumBloq>
			chksum_to_compare = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800afea:	4b5b      	ldr	r3, [pc, #364]	@ (800b158 <tx_control+0x7f0>)
 800afec:	7a9b      	ldrb	r3, [r3, #10]
 800afee:	061b      	lsls	r3, r3, #24
 800aff0:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800aff2:	4b59      	ldr	r3, [pc, #356]	@ (800b158 <tx_control+0x7f0>)
 800aff4:	7adb      	ldrb	r3, [r3, #11]
 800aff6:	041b      	lsls	r3, r3, #16
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	18d3      	adds	r3, r2, r3
 800affc:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800affe:	4b56      	ldr	r3, [pc, #344]	@ (800b158 <tx_control+0x7f0>)
 800b000:	7b1b      	ldrb	r3, [r3, #12]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	18d3      	adds	r3, r2, r3
 800b008:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800b00a:	4b53      	ldr	r3, [pc, #332]	@ (800b158 <tx_control+0x7f0>)
 800b00c:	7b5b      	ldrb	r3, [r3, #13]
 800b00e:	001a      	movs	r2, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	189b      	adds	r3, r3, r2
 800b014:	603b      	str	r3, [r7, #0]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800b016:	4b5d      	ldr	r3, [pc, #372]	@ (800b18c <tx_control+0x824>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d101      	bne.n	800b024 <tx_control+0x6bc>
 800b020:	f001 f9d2 	bl	800c3c8 <tx_control+0x1a60>
				goto tx_write_GEO_error;
 800b024:	f001 fa37 	bl	800c496 <tx_control+0x1b2e>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800b028:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800b02a:	4b47      	ldr	r3, [pc, #284]	@ (800b148 <tx_control+0x7e0>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b5a      	cmp	r3, #90	@ 0x5a
 800b030:	d000      	beq.n	800b034 <tx_control+0x6cc>
 800b032:	e0c5      	b.n	800b1c0 <tx_control+0x858>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b034:	4b45      	ldr	r3, [pc, #276]	@ (800b14c <tx_control+0x7e4>)
 800b036:	22f0      	movs	r2, #240	@ 0xf0
 800b038:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800b03a:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800b03c:	4b4e      	ldr	r3, [pc, #312]	@ (800b178 <tx_control+0x810>)
 800b03e:	2208      	movs	r2, #8
 800b040:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800b042:	4b55      	ldr	r3, [pc, #340]	@ (800b198 <tx_control+0x830>)
 800b044:	227c      	movs	r2, #124	@ 0x7c
 800b046:	5c9a      	ldrb	r2, [r3, r2]
 800b048:	4b41      	ldr	r3, [pc, #260]	@ (800b150 <tx_control+0x7e8>)
 800b04a:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800b04c:	4b40      	ldr	r3, [pc, #256]	@ (800b150 <tx_control+0x7e8>)
 800b04e:	2200      	movs	r2, #0
 800b050:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800b052:	4b3f      	ldr	r3, [pc, #252]	@ (800b150 <tx_control+0x7e8>)
 800b054:	2200      	movs	r2, #0
 800b056:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800b058:	4b3d      	ldr	r3, [pc, #244]	@ (800b150 <tx_control+0x7e8>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800b05e:	4b3c      	ldr	r3, [pc, #240]	@ (800b150 <tx_control+0x7e8>)
 800b060:	2201      	movs	r2, #1
 800b062:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800b064:	4b3a      	ldr	r3, [pc, #232]	@ (800b150 <tx_control+0x7e8>)
 800b066:	2206      	movs	r2, #6
 800b068:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800b06a:	4b43      	ldr	r3, [pc, #268]	@ (800b178 <tx_control+0x810>)
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	4b38      	ldr	r3, [pc, #224]	@ (800b150 <tx_control+0x7e8>)
 800b070:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800b072:	4b47      	ldr	r3, [pc, #284]	@ (800b190 <tx_control+0x828>)
 800b074:	2208      	movs	r2, #8
 800b076:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800b078:	4a36      	ldr	r2, [pc, #216]	@ (800b154 <tx_control+0x7ec>)
 800b07a:	4b35      	ldr	r3, [pc, #212]	@ (800b150 <tx_control+0x7e8>)
 800b07c:	0011      	movs	r1, r2
 800b07e:	0018      	movs	r0, r3
 800b080:	f7f9 fb34 	bl	80046ec <copyVector>
			ldw		bufferTxControl+12,X
			ldw		X,eeLong3
			ldw		bufferTxControl+14,X
			*/

			bufferTxControl[8] = eeLat1;
 800b084:	4b45      	ldr	r3, [pc, #276]	@ (800b19c <tx_control+0x834>)
 800b086:	781a      	ldrb	r2, [r3, #0]
 800b088:	4b32      	ldr	r3, [pc, #200]	@ (800b154 <tx_control+0x7ec>)
 800b08a:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = eeLat2;
 800b08c:	4b44      	ldr	r3, [pc, #272]	@ (800b1a0 <tx_control+0x838>)
 800b08e:	781a      	ldrb	r2, [r3, #0]
 800b090:	4b30      	ldr	r3, [pc, #192]	@ (800b154 <tx_control+0x7ec>)
 800b092:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = eeLat3;
 800b094:	4b43      	ldr	r3, [pc, #268]	@ (800b1a4 <tx_control+0x83c>)
 800b096:	781a      	ldrb	r2, [r3, #0]
 800b098:	4b2e      	ldr	r3, [pc, #184]	@ (800b154 <tx_control+0x7ec>)
 800b09a:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = eeLat4;
 800b09c:	4b42      	ldr	r3, [pc, #264]	@ (800b1a8 <tx_control+0x840>)
 800b09e:	781a      	ldrb	r2, [r3, #0]
 800b0a0:	4b2c      	ldr	r3, [pc, #176]	@ (800b154 <tx_control+0x7ec>)
 800b0a2:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= eeLong1;
 800b0a4:	4b41      	ldr	r3, [pc, #260]	@ (800b1ac <tx_control+0x844>)
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	4b2a      	ldr	r3, [pc, #168]	@ (800b154 <tx_control+0x7ec>)
 800b0aa:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= eeLong2;
 800b0ac:	4b40      	ldr	r3, [pc, #256]	@ (800b1b0 <tx_control+0x848>)
 800b0ae:	781a      	ldrb	r2, [r3, #0]
 800b0b0:	4b28      	ldr	r3, [pc, #160]	@ (800b154 <tx_control+0x7ec>)
 800b0b2:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = eeLong3;
 800b0b4:	4b3f      	ldr	r3, [pc, #252]	@ (800b1b4 <tx_control+0x84c>)
 800b0b6:	781a      	ldrb	r2, [r3, #0]
 800b0b8:	4b26      	ldr	r3, [pc, #152]	@ (800b154 <tx_control+0x7ec>)
 800b0ba:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = eeLong4;
 800b0bc:	4b3e      	ldr	r3, [pc, #248]	@ (800b1b8 <tx_control+0x850>)
 800b0be:	781a      	ldrb	r2, [r3, #0]
 800b0c0:	4b24      	ldr	r3, [pc, #144]	@ (800b154 <tx_control+0x7ec>)
 800b0c2:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800b0c4:	4b31      	ldr	r3, [pc, #196]	@ (800b18c <tx_control+0x824>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800b0ca:	4b31      	ldr	r3, [pc, #196]	@ (800b190 <tx_control+0x828>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800b0d0:	4b30      	ldr	r3, [pc, #192]	@ (800b194 <tx_control+0x82c>)
 800b0d2:	2210      	movs	r2, #16
 800b0d4:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800b0d6:	4b2f      	ldr	r3, [pc, #188]	@ (800b194 <tx_control+0x82c>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	001a      	movs	r2, r3
 800b0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b154 <tx_control+0x7ec>)
 800b0de:	0011      	movs	r1, r2
 800b0e0:	0018      	movs	r0, r3
 800b0e2:	f7f9 fab5 	bl	8004650 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800b0e6:	4b29      	ldr	r3, [pc, #164]	@ (800b18c <tx_control+0x824>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	0e1b      	lsrs	r3, r3, #24
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	4b19      	ldr	r3, [pc, #100]	@ (800b154 <tx_control+0x7ec>)
 800b0f0:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800b0f2:	4b26      	ldr	r3, [pc, #152]	@ (800b18c <tx_control+0x824>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	4b16      	ldr	r3, [pc, #88]	@ (800b154 <tx_control+0x7ec>)
 800b0fc:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800b0fe:	4b23      	ldr	r3, [pc, #140]	@ (800b18c <tx_control+0x824>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	b2da      	uxtb	r2, r3
 800b106:	4b13      	ldr	r3, [pc, #76]	@ (800b154 <tx_control+0x7ec>)
 800b108:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800b10a:	4b20      	ldr	r3, [pc, #128]	@ (800b18c <tx_control+0x824>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	4b10      	ldr	r3, [pc, #64]	@ (800b154 <tx_control+0x7ec>)
 800b112:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800b114:	4b14      	ldr	r3, [pc, #80]	@ (800b168 <tx_control+0x800>)
 800b116:	4a0f      	ldr	r2, [pc, #60]	@ (800b154 <tx_control+0x7ec>)
 800b118:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800b11a:	4b14      	ldr	r3, [pc, #80]	@ (800b16c <tx_control+0x804>)
 800b11c:	4a0d      	ldr	r2, [pc, #52]	@ (800b154 <tx_control+0x7ec>)
 800b11e:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800b120:	4b13      	ldr	r3, [pc, #76]	@ (800b170 <tx_control+0x808>)
 800b122:	4a26      	ldr	r2, [pc, #152]	@ (800b1bc <tx_control+0x854>)
 800b124:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800b126:	4b14      	ldr	r3, [pc, #80]	@ (800b178 <tx_control+0x810>)
 800b128:	2214      	movs	r2, #20
 800b12a:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800b12c:	4b13      	ldr	r3, [pc, #76]	@ (800b17c <tx_control+0x814>)
 800b12e:	2200      	movs	r2, #0
 800b130:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800b132:	4b12      	ldr	r3, [pc, #72]	@ (800b17c <tx_control+0x814>)
 800b134:	2201      	movs	r2, #1
 800b136:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800b138:	4b11      	ldr	r3, [pc, #68]	@ (800b180 <tx_control+0x818>)
 800b13a:	2255      	movs	r2, #85	@ 0x55
 800b13c:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800b13e:	4b02      	ldr	r3, [pc, #8]	@ (800b148 <tx_control+0x7e0>)
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800b144:	f001 faf3 	bl	800c72e <tx_control+0x1dc6>
 800b148:	20000d60 	.word	0x20000d60
 800b14c:	20000e21 	.word	0x20000e21
 800b150:	20000d14 	.word	0x20000d14
 800b154:	20000ee4 	.word	0x20000ee4
 800b158:	200008f0 	.word	0x200008f0
 800b15c:	0803f000 	.word	0x0803f000
 800b160:	20000d1c 	.word	0x20000d1c
 800b164:	20000e18 	.word	0x20000e18
 800b168:	20000d50 	.word	0x20000d50
 800b16c:	20000d48 	.word	0x20000d48
 800b170:	20000d4c 	.word	0x20000d4c
 800b174:	20000d1d 	.word	0x20000d1d
 800b178:	20000d6c 	.word	0x20000d6c
 800b17c:	20000d58 	.word	0x20000d58
 800b180:	20000d55 	.word	0x20000d55
 800b184:	20000e22 	.word	0x20000e22
 800b188:	20000e0d 	.word	0x20000e0d
 800b18c:	20000d70 	.word	0x20000d70
 800b190:	20000a93 	.word	0x20000a93
 800b194:	20000a92 	.word	0x20000a92
 800b198:	200000bc 	.word	0x200000bc
 800b19c:	0803f088 	.word	0x0803f088
 800b1a0:	0803f089 	.word	0x0803f089
 800b1a4:	0803f08a 	.word	0x0803f08a
 800b1a8:	0803f08b 	.word	0x0803f08b
 800b1ac:	0803f08c 	.word	0x0803f08c
 800b1b0:	0803f08d 	.word	0x0803f08d
 800b1b4:	0803f08e 	.word	0x0803f08e
 800b1b8:	0803f08f 	.word	0x0803f08f
 800b1bc:	20000ef8 	.word	0x20000ef8
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800b1c0:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800b1c2:	4bf1      	ldr	r3, [pc, #964]	@ (800b588 <tx_control+0xc20>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b5b      	cmp	r3, #91	@ 0x5b
 800b1c8:	d000      	beq.n	800b1cc <tx_control+0x864>
 800b1ca:	e089      	b.n	800b2e0 <tx_control+0x978>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b1cc:	4bef      	ldr	r3, [pc, #956]	@ (800b58c <tx_control+0xc24>)
 800b1ce:	22f0      	movs	r2, #240	@ 0xf0
 800b1d0:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800b1d2:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800b1d4:	4bee      	ldr	r3, [pc, #952]	@ (800b590 <tx_control+0xc28>)
 800b1d6:	2204      	movs	r2, #4
 800b1d8:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800b1da:	4bee      	ldr	r3, [pc, #952]	@ (800b594 <tx_control+0xc2c>)
 800b1dc:	227b      	movs	r2, #123	@ 0x7b
 800b1de:	5c9a      	ldrb	r2, [r3, r2]
 800b1e0:	4bed      	ldr	r3, [pc, #948]	@ (800b598 <tx_control+0xc30>)
 800b1e2:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800b1e4:	4beb      	ldr	r3, [pc, #940]	@ (800b594 <tx_control+0xc2c>)
 800b1e6:	227c      	movs	r2, #124	@ 0x7c
 800b1e8:	5c9a      	ldrb	r2, [r3, r2]
 800b1ea:	4beb      	ldr	r3, [pc, #940]	@ (800b598 <tx_control+0xc30>)
 800b1ec:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800b1ee:	4bea      	ldr	r3, [pc, #936]	@ (800b598 <tx_control+0xc30>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800b1f4:	4be8      	ldr	r3, [pc, #928]	@ (800b598 <tx_control+0xc30>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800b1fa:	4be7      	ldr	r3, [pc, #924]	@ (800b598 <tx_control+0xc30>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800b200:	4be5      	ldr	r3, [pc, #916]	@ (800b598 <tx_control+0xc30>)
 800b202:	2201      	movs	r2, #1
 800b204:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800b206:	4be4      	ldr	r3, [pc, #912]	@ (800b598 <tx_control+0xc30>)
 800b208:	2207      	movs	r2, #7
 800b20a:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800b20c:	4be0      	ldr	r3, [pc, #896]	@ (800b590 <tx_control+0xc28>)
 800b20e:	781a      	ldrb	r2, [r3, #0]
 800b210:	4be1      	ldr	r3, [pc, #900]	@ (800b598 <tx_control+0xc30>)
 800b212:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800b214:	4be1      	ldr	r3, [pc, #900]	@ (800b59c <tx_control+0xc34>)
 800b216:	2201      	movs	r2, #1
 800b218:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800b21a:	4be1      	ldr	r3, [pc, #900]	@ (800b5a0 <tx_control+0xc38>)
 800b21c:	2208      	movs	r2, #8
 800b21e:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800b220:	4ae0      	ldr	r2, [pc, #896]	@ (800b5a4 <tx_control+0xc3c>)
 800b222:	4bdd      	ldr	r3, [pc, #884]	@ (800b598 <tx_control+0xc30>)
 800b224:	0011      	movs	r1, r2
 800b226:	0018      	movs	r0, r3
 800b228:	f7f9 fa60 	bl	80046ec <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800b22c:	4bde      	ldr	r3, [pc, #888]	@ (800b5a8 <tx_control+0xc40>)
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	0a1b      	lsrs	r3, r3, #8
 800b232:	b29b      	uxth	r3, r3
 800b234:	b2da      	uxtb	r2, r3
 800b236:	4bdb      	ldr	r3, [pc, #876]	@ (800b5a4 <tx_control+0xc3c>)
 800b238:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800b23a:	4bdb      	ldr	r3, [pc, #876]	@ (800b5a8 <tx_control+0xc40>)
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	4bd8      	ldr	r3, [pc, #864]	@ (800b5a4 <tx_control+0xc3c>)
 800b242:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800b244:	4bd9      	ldr	r3, [pc, #868]	@ (800b5ac <tx_control+0xc44>)
 800b246:	881b      	ldrh	r3, [r3, #0]
 800b248:	0a1b      	lsrs	r3, r3, #8
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	4bd5      	ldr	r3, [pc, #852]	@ (800b5a4 <tx_control+0xc3c>)
 800b250:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800b252:	4bd6      	ldr	r3, [pc, #856]	@ (800b5ac <tx_control+0xc44>)
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	b2da      	uxtb	r2, r3
 800b258:	4bd2      	ldr	r3, [pc, #840]	@ (800b5a4 <tx_control+0xc3c>)
 800b25a:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800b25c:	4bd4      	ldr	r3, [pc, #848]	@ (800b5b0 <tx_control+0xc48>)
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800b262:	4bcf      	ldr	r3, [pc, #828]	@ (800b5a0 <tx_control+0xc38>)
 800b264:	2200      	movs	r2, #0
 800b266:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800b268:	4bd2      	ldr	r3, [pc, #840]	@ (800b5b4 <tx_control+0xc4c>)
 800b26a:	220c      	movs	r2, #12
 800b26c:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800b26e:	4bd1      	ldr	r3, [pc, #836]	@ (800b5b4 <tx_control+0xc4c>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	001a      	movs	r2, r3
 800b274:	4bcb      	ldr	r3, [pc, #812]	@ (800b5a4 <tx_control+0xc3c>)
 800b276:	0011      	movs	r1, r2
 800b278:	0018      	movs	r0, r3
 800b27a:	f7f9 f9e9 	bl	8004650 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800b27e:	4bcc      	ldr	r3, [pc, #816]	@ (800b5b0 <tx_control+0xc48>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	0e1b      	lsrs	r3, r3, #24
 800b284:	b2da      	uxtb	r2, r3
 800b286:	4bc7      	ldr	r3, [pc, #796]	@ (800b5a4 <tx_control+0xc3c>)
 800b288:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800b28a:	4bc9      	ldr	r3, [pc, #804]	@ (800b5b0 <tx_control+0xc48>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	0c1b      	lsrs	r3, r3, #16
 800b290:	b2da      	uxtb	r2, r3
 800b292:	4bc4      	ldr	r3, [pc, #784]	@ (800b5a4 <tx_control+0xc3c>)
 800b294:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800b296:	4bc6      	ldr	r3, [pc, #792]	@ (800b5b0 <tx_control+0xc48>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	4bc1      	ldr	r3, [pc, #772]	@ (800b5a4 <tx_control+0xc3c>)
 800b2a0:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800b2a2:	4bc3      	ldr	r3, [pc, #780]	@ (800b5b0 <tx_control+0xc48>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	4bbe      	ldr	r3, [pc, #760]	@ (800b5a4 <tx_control+0xc3c>)
 800b2aa:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800b2ac:	4bc2      	ldr	r3, [pc, #776]	@ (800b5b8 <tx_control+0xc50>)
 800b2ae:	4abd      	ldr	r2, [pc, #756]	@ (800b5a4 <tx_control+0xc3c>)
 800b2b0:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800b2b2:	4bc2      	ldr	r3, [pc, #776]	@ (800b5bc <tx_control+0xc54>)
 800b2b4:	4abb      	ldr	r2, [pc, #748]	@ (800b5a4 <tx_control+0xc3c>)
 800b2b6:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800b2b8:	4bc1      	ldr	r3, [pc, #772]	@ (800b5c0 <tx_control+0xc58>)
 800b2ba:	4ac2      	ldr	r2, [pc, #776]	@ (800b5c4 <tx_control+0xc5c>)
 800b2bc:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800b2be:	4bb4      	ldr	r3, [pc, #720]	@ (800b590 <tx_control+0xc28>)
 800b2c0:	2210      	movs	r2, #16
 800b2c2:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800b2c4:	4bb5      	ldr	r3, [pc, #724]	@ (800b59c <tx_control+0xc34>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800b2ca:	4bb4      	ldr	r3, [pc, #720]	@ (800b59c <tx_control+0xc34>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800b2d0:	4bbd      	ldr	r3, [pc, #756]	@ (800b5c8 <tx_control+0xc60>)
 800b2d2:	2255      	movs	r2, #85	@ 0x55
 800b2d4:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800b2d6:	4bac      	ldr	r3, [pc, #688]	@ (800b588 <tx_control+0xc20>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800b2dc:	f001 fa27 	bl	800c72e <tx_control+0x1dc6>
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800b2e0:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800b2e2:	4ba9      	ldr	r3, [pc, #676]	@ (800b588 <tx_control+0xc20>)
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b5c      	cmp	r3, #92	@ 0x5c
 800b2e8:	d132      	bne.n	800b350 <tx_control+0x9e8>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b2ea:	4ba8      	ldr	r3, [pc, #672]	@ (800b58c <tx_control+0xc24>)
 800b2ec:	22f0      	movs	r2, #240	@ 0xf0
 800b2ee:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800b2f0:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800b2f2:	4baf      	ldr	r3, [pc, #700]	@ (800b5b0 <tx_control+0xc48>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800b2f8:	4ba9      	ldr	r3, [pc, #676]	@ (800b5a0 <tx_control+0xc38>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800b2fe:	4bad      	ldr	r3, [pc, #692]	@ (800b5b4 <tx_control+0xc4c>)
 800b300:	220b      	movs	r2, #11
 800b302:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800b304:	4bb1      	ldr	r3, [pc, #708]	@ (800b5cc <tx_control+0xc64>)
 800b306:	210b      	movs	r1, #11
 800b308:	0018      	movs	r0, r3
 800b30a:	f7f9 f9a1 	bl	8004650 <buildChksumBloq>
			chksum_to_compare = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800b312:	4bae      	ldr	r3, [pc, #696]	@ (800b5cc <tx_control+0xc64>)
 800b314:	7adb      	ldrb	r3, [r3, #11]
 800b316:	061b      	lsls	r3, r3, #24
 800b318:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800b31a:	4bac      	ldr	r3, [pc, #688]	@ (800b5cc <tx_control+0xc64>)
 800b31c:	7b1b      	ldrb	r3, [r3, #12]
 800b31e:	041b      	lsls	r3, r3, #16
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	18d3      	adds	r3, r2, r3
 800b324:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800b326:	4ba9      	ldr	r3, [pc, #676]	@ (800b5cc <tx_control+0xc64>)
 800b328:	7b5b      	ldrb	r3, [r3, #13]
 800b32a:	021b      	lsls	r3, r3, #8
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	18d3      	adds	r3, r2, r3
 800b330:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800b332:	4ba6      	ldr	r3, [pc, #664]	@ (800b5cc <tx_control+0xc64>)
 800b334:	7b9b      	ldrb	r3, [r3, #14]
 800b336:	001a      	movs	r2, r3
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	189b      	adds	r3, r3, r2
 800b33c:	603b      	str	r3, [r7, #0]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800b33e:	4b9c      	ldr	r3, [pc, #624]	@ (800b5b0 <tx_control+0xc48>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	429a      	cmp	r2, r3
 800b346:	d101      	bne.n	800b34c <tx_control+0x9e4>
 800b348:	f001 f8c1 	bl	800c4ce <tx_control+0x1b66>
				goto tx_timeBCD_error;
 800b34c:	f001 f992 	bl	800c674 <tx_control+0x1d0c>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800b350:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800b352:	4b8d      	ldr	r3, [pc, #564]	@ (800b588 <tx_control+0xc20>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	2b5f      	cmp	r3, #95	@ 0x5f
 800b358:	d115      	bne.n	800b386 <tx_control+0xa1e>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800b35a:	4b8c      	ldr	r3, [pc, #560]	@ (800b58c <tx_control+0xc24>)
 800b35c:	22f0      	movs	r2, #240	@ 0xf0
 800b35e:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800b360:	46c0      	nop			@ (mov r8, r8)

fin_tx_timeBCD:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_infoReloj:
			typeClock = 0;					// mov		typeClock,#0;				Reloj interno
 800b362:	4b9b      	ldr	r3, [pc, #620]	@ (800b5d0 <tx_control+0xc68>)
 800b364:	2200      	movs	r2, #0
 800b366:	701a      	strb	r2, [r3, #0]
			// ;mov		typeClock,#1;				Reloj con señal de CA
			if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
 800b368:	4b9a      	ldr	r3, [pc, #616]	@ (800b5d4 <tx_control+0xc6c>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2201      	movs	r2, #1
 800b36e:	4053      	eors	r3, r2
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <tx_control+0xa12>
 800b376:	f001 f999 	bl	800c6ac <tx_control+0x1d44>
				goto noCristal;
 800b37a:	f001 f99a 	bl	800c6b2 <tx_control+0x1d4a>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800b37e:	46c0      	nop			@ (mov r8, r8)
 800b380:	e002      	b.n	800b388 <tx_control+0xa20>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800b382:	46c0      	nop			@ (mov r8, r8)
 800b384:	e000      	b.n	800b388 <tx_control+0xa20>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800b386:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800b388:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b


tx_wifi:

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
 800b38a:	2380      	movs	r3, #128	@ 0x80
 800b38c:	015b      	lsls	r3, r3, #5
 800b38e:	4a92      	ldr	r2, [pc, #584]	@ (800b5d8 <tx_control+0xc70>)
 800b390:	0019      	movs	r1, r3
 800b392:	0010      	movs	r0, r2
 800b394:	f005 f960 	bl	8010658 <HAL_GPIO_ReadPin>
 800b398:	1e03      	subs	r3, r0, #0
 800b39a:	d101      	bne.n	800b3a0 <tx_control+0xa38>
 800b39c:	f001 f9ed 	bl	800c77a <tx_control+0x1e12>
			goto tx_wifi_OK;
 800b3a0:	f001 f9fc 	bl	800c79c <tx_control+0x1e34>
	     	point_Y[i] = point_X[i];
 800b3a4:	2036      	movs	r0, #54	@ 0x36
 800b3a6:	183b      	adds	r3, r7, r0
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3ac:	18d2      	adds	r2, r2, r3
 800b3ae:	183b      	adds	r3, r7, r0
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3b4:	18cb      	adds	r3, r1, r3
 800b3b6:	7812      	ldrb	r2, [r2, #0]
 800b3b8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800b3ba:	183b      	adds	r3, r7, r0
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	183b      	adds	r3, r7, r0
 800b3c0:	3201      	adds	r2, #1
 800b3c2:	701a      	strb	r2, [r3, #0]
 800b3c4:	2336      	movs	r3, #54	@ 0x36
 800b3c6:	18fb      	adds	r3, r7, r3
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b14      	cmp	r3, #20
 800b3cc:	d9ea      	bls.n	800b3a4 <tx_control+0xa3c>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800b3ce:	4b78      	ldr	r3, [pc, #480]	@ (800b5b0 <tx_control+0xc48>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800b3d4:	4b73      	ldr	r3, [pc, #460]	@ (800b5a4 <tx_control+0xc3c>)
 800b3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		buildChksumBloq (point_X, size_handshake);
 800b3d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3da:	2115      	movs	r1, #21
 800b3dc:	0018      	movs	r0, r3
 800b3de:	f7f9 f937 	bl	8004650 <buildChksumBloq>
		asm ("nop");
 800b3e2:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800b3e4:	4b72      	ldr	r3, [pc, #456]	@ (800b5b0 <tx_control+0xc48>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	0e1b      	lsrs	r3, r3, #24
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	4b6d      	ldr	r3, [pc, #436]	@ (800b5a4 <tx_control+0xc3c>)
 800b3ee:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800b3f0:	4b6f      	ldr	r3, [pc, #444]	@ (800b5b0 <tx_control+0xc48>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	0c1b      	lsrs	r3, r3, #16
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	4b6a      	ldr	r3, [pc, #424]	@ (800b5a4 <tx_control+0xc3c>)
 800b3fa:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800b3fc:	4b6c      	ldr	r3, [pc, #432]	@ (800b5b0 <tx_control+0xc48>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	0a1b      	lsrs	r3, r3, #8
 800b402:	b2da      	uxtb	r2, r3
 800b404:	4b67      	ldr	r3, [pc, #412]	@ (800b5a4 <tx_control+0xc3c>)
 800b406:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800b408:	4b69      	ldr	r3, [pc, #420]	@ (800b5b0 <tx_control+0xc48>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	4b65      	ldr	r3, [pc, #404]	@ (800b5a4 <tx_control+0xc3c>)
 800b410:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800b412:	4b69      	ldr	r3, [pc, #420]	@ (800b5b8 <tx_control+0xc50>)
 800b414:	4a63      	ldr	r2, [pc, #396]	@ (800b5a4 <tx_control+0xc3c>)
 800b416:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800b418:	4b68      	ldr	r3, [pc, #416]	@ (800b5bc <tx_control+0xc54>)
 800b41a:	4a62      	ldr	r2, [pc, #392]	@ (800b5a4 <tx_control+0xc3c>)
 800b41c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800b41e:	4b68      	ldr	r3, [pc, #416]	@ (800b5c0 <tx_control+0xc58>)
 800b420:	4a6e      	ldr	r2, [pc, #440]	@ (800b5dc <tx_control+0xc74>)
 800b422:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800b424:	4b5a      	ldr	r3, [pc, #360]	@ (800b590 <tx_control+0xc28>)
 800b426:	2219      	movs	r2, #25
 800b428:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800b42a:	4b5c      	ldr	r3, [pc, #368]	@ (800b59c <tx_control+0xc34>)
 800b42c:	2201      	movs	r2, #1
 800b42e:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800b430:	4b5a      	ldr	r3, [pc, #360]	@ (800b59c <tx_control+0xc34>)
 800b432:	2200      	movs	r2, #0
 800b434:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800b436:	4b5e      	ldr	r3, [pc, #376]	@ (800b5b0 <tx_control+0xc48>)
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800b43c:	4b57      	ldr	r3, [pc, #348]	@ (800b59c <tx_control+0xc34>)
 800b43e:	2201      	movs	r2, #1
 800b440:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800b442:	4b61      	ldr	r3, [pc, #388]	@ (800b5c8 <tx_control+0xc60>)
 800b444:	2255      	movs	r2, #85	@ 0x55
 800b446:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800b448:	4b4f      	ldr	r3, [pc, #316]	@ (800b588 <tx_control+0xc20>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800b44e:	f001 f96e 	bl	800c72e <tx_control+0x1dc6>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800b452:	4b52      	ldr	r3, [pc, #328]	@ (800b59c <tx_control+0xc34>)
 800b454:	2201      	movs	r2, #1
 800b456:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800b458:	4b4d      	ldr	r3, [pc, #308]	@ (800b590 <tx_control+0xc28>)
 800b45a:	2208      	movs	r2, #8
 800b45c:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800b45e:	4b60      	ldr	r3, [pc, #384]	@ (800b5e0 <tx_control+0xc78>)
 800b460:	2201      	movs	r2, #1
 800b462:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800b464:	4b5f      	ldr	r3, [pc, #380]	@ (800b5e4 <tx_control+0xc7c>)
 800b466:	4a60      	ldr	r2, [pc, #384]	@ (800b5e8 <tx_control+0xc80>)
 800b468:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800b46a:	4b60      	ldr	r3, [pc, #384]	@ (800b5ec <tx_control+0xc84>)
 800b46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_X++;		//incw X ******************************************
 800b46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b470:	3301      	adds	r3, #1
 800b472:	63fb      	str	r3, [r7, #60]	@ 0x3c
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800b474:	4b5e      	ldr	r3, [pc, #376]	@ (800b5f0 <tx_control+0xc88>)
 800b476:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b478:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800b47a:	4b5e      	ldr	r3, [pc, #376]	@ (800b5f4 <tx_control+0xc8c>)
 800b47c:	2260      	movs	r2, #96	@ 0x60
 800b47e:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800b480:	4b5d      	ldr	r3, [pc, #372]	@ (800b5f8 <tx_control+0xc90>)
 800b482:	881a      	ldrh	r2, [r3, #0]
 800b484:	4b5d      	ldr	r3, [pc, #372]	@ (800b5fc <tx_control+0xc94>)
 800b486:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800b488:	4b5d      	ldr	r3, [pc, #372]	@ (800b600 <tx_control+0xc98>)
 800b48a:	4a5e      	ldr	r2, [pc, #376]	@ (800b604 <tx_control+0xc9c>)
 800b48c:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800b48e:	f002 f9b5 	bl	800d7fc <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800b492:	4b40      	ldr	r3, [pc, #256]	@ (800b594 <tx_control+0xc2c>)
 800b494:	227b      	movs	r2, #123	@ 0x7b
 800b496:	5c9a      	ldrb	r2, [r3, r2]
 800b498:	4b3f      	ldr	r3, [pc, #252]	@ (800b598 <tx_control+0xc30>)
 800b49a:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800b49c:	4b3d      	ldr	r3, [pc, #244]	@ (800b594 <tx_control+0xc2c>)
 800b49e:	227c      	movs	r2, #124	@ 0x7c
 800b4a0:	5c9a      	ldrb	r2, [r3, r2]
 800b4a2:	4b3d      	ldr	r3, [pc, #244]	@ (800b598 <tx_control+0xc30>)
 800b4a4:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800b4a6:	4b3c      	ldr	r3, [pc, #240]	@ (800b598 <tx_control+0xc30>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800b4ac:	4b3a      	ldr	r3, [pc, #232]	@ (800b598 <tx_control+0xc30>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800b4b2:	4b39      	ldr	r3, [pc, #228]	@ (800b598 <tx_control+0xc30>)
 800b4b4:	2205      	movs	r2, #5
 800b4b6:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800b4b8:	4b37      	ldr	r3, [pc, #220]	@ (800b598 <tx_control+0xc30>)
 800b4ba:	2240      	movs	r2, #64	@ 0x40
 800b4bc:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800b4be:	4b36      	ldr	r3, [pc, #216]	@ (800b598 <tx_control+0xc30>)
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800b4c4:	4b34      	ldr	r3, [pc, #208]	@ (800b598 <tx_control+0xc30>)
 800b4c6:	2209      	movs	r2, #9
 800b4c8:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800b4ca:	4b34      	ldr	r3, [pc, #208]	@ (800b59c <tx_control+0xc34>)
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800b4d0:	4b37      	ldr	r3, [pc, #220]	@ (800b5b0 <tx_control+0xc48>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800b4d6:	4b31      	ldr	r3, [pc, #196]	@ (800b59c <tx_control+0xc34>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800b4dc:	4b3a      	ldr	r3, [pc, #232]	@ (800b5c8 <tx_control+0xc60>)
 800b4de:	2255      	movs	r2, #85	@ 0x55
 800b4e0:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800b4e2:	4b29      	ldr	r3, [pc, #164]	@ (800b588 <tx_control+0xc20>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800b4e8:	f001 f921 	bl	800c72e <tx_control+0x1dc6>
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800b4ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b59c <tx_control+0xc34>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800b4f2:	4b27      	ldr	r3, [pc, #156]	@ (800b590 <tx_control+0xc28>)
 800b4f4:	2208      	movs	r2, #8
 800b4f6:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800b4f8:	4b39      	ldr	r3, [pc, #228]	@ (800b5e0 <tx_control+0xc78>)
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800b4fe:	4b39      	ldr	r3, [pc, #228]	@ (800b5e4 <tx_control+0xc7c>)
 800b500:	4a41      	ldr	r2, [pc, #260]	@ (800b608 <tx_control+0xca0>)
 800b502:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800b504:	4b41      	ldr	r3, [pc, #260]	@ (800b60c <tx_control+0xca4>)
 800b506:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_X++;						//incw	X ******************
 800b508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b50a:	3301      	adds	r3, #1
 800b50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800b50e:	4b38      	ldr	r3, [pc, #224]	@ (800b5f0 <tx_control+0xc88>)
 800b510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b512:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800b514:	4b37      	ldr	r3, [pc, #220]	@ (800b5f4 <tx_control+0xc8c>)
 800b516:	22a0      	movs	r2, #160	@ 0xa0
 800b518:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800b51a:	4b3d      	ldr	r3, [pc, #244]	@ (800b610 <tx_control+0xca8>)
 800b51c:	881a      	ldrh	r2, [r3, #0]
 800b51e:	4b37      	ldr	r3, [pc, #220]	@ (800b5fc <tx_control+0xc94>)
 800b520:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800b522:	4b37      	ldr	r3, [pc, #220]	@ (800b600 <tx_control+0xc98>)
 800b524:	4a3b      	ldr	r2, [pc, #236]	@ (800b614 <tx_control+0xcac>)
 800b526:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800b528:	f002 f968 	bl	800d7fc <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800b52c:	4b19      	ldr	r3, [pc, #100]	@ (800b594 <tx_control+0xc2c>)
 800b52e:	227b      	movs	r2, #123	@ 0x7b
 800b530:	5c9a      	ldrb	r2, [r3, r2]
 800b532:	4b19      	ldr	r3, [pc, #100]	@ (800b598 <tx_control+0xc30>)
 800b534:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800b536:	4b17      	ldr	r3, [pc, #92]	@ (800b594 <tx_control+0xc2c>)
 800b538:	227c      	movs	r2, #124	@ 0x7c
 800b53a:	5c9a      	ldrb	r2, [r3, r2]
 800b53c:	4b16      	ldr	r3, [pc, #88]	@ (800b598 <tx_control+0xc30>)
 800b53e:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800b540:	4b15      	ldr	r3, [pc, #84]	@ (800b598 <tx_control+0xc30>)
 800b542:	2200      	movs	r2, #0
 800b544:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800b546:	4b14      	ldr	r3, [pc, #80]	@ (800b598 <tx_control+0xc30>)
 800b548:	2200      	movs	r2, #0
 800b54a:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800b54c:	4b12      	ldr	r3, [pc, #72]	@ (800b598 <tx_control+0xc30>)
 800b54e:	2205      	movs	r2, #5
 800b550:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800b552:	4b11      	ldr	r3, [pc, #68]	@ (800b598 <tx_control+0xc30>)
 800b554:	22a0      	movs	r2, #160	@ 0xa0
 800b556:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800b558:	4b0f      	ldr	r3, [pc, #60]	@ (800b598 <tx_control+0xc30>)
 800b55a:	2202      	movs	r2, #2
 800b55c:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800b55e:	4b0e      	ldr	r3, [pc, #56]	@ (800b598 <tx_control+0xc30>)
 800b560:	220e      	movs	r2, #14
 800b562:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800b564:	4b0d      	ldr	r3, [pc, #52]	@ (800b59c <tx_control+0xc34>)
 800b566:	2201      	movs	r2, #1
 800b568:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800b56a:	4b11      	ldr	r3, [pc, #68]	@ (800b5b0 <tx_control+0xc48>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800b570:	4b0a      	ldr	r3, [pc, #40]	@ (800b59c <tx_control+0xc34>)
 800b572:	2200      	movs	r2, #0
 800b574:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800b576:	4b14      	ldr	r3, [pc, #80]	@ (800b5c8 <tx_control+0xc60>)
 800b578:	2255      	movs	r2, #85	@ 0x55
 800b57a:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800b57c:	4b02      	ldr	r3, [pc, #8]	@ (800b588 <tx_control+0xc20>)
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800b582:	f001 f8d4 	bl	800c72e <tx_control+0x1dc6>
 800b586:	46c0      	nop			@ (mov r8, r8)
 800b588:	20000d60 	.word	0x20000d60
 800b58c:	20000e21 	.word	0x20000e21
 800b590:	20000d6c 	.word	0x20000d6c
 800b594:	200000bc 	.word	0x200000bc
 800b598:	20000d14 	.word	0x20000d14
 800b59c:	20000d58 	.word	0x20000d58
 800b5a0:	20000a93 	.word	0x20000a93
 800b5a4:	20000ee4 	.word	0x20000ee4
 800b5a8:	20000cec 	.word	0x20000cec
 800b5ac:	20000cee 	.word	0x20000cee
 800b5b0:	20000d70 	.word	0x20000d70
 800b5b4:	20000a92 	.word	0x20000a92
 800b5b8:	20000d50 	.word	0x20000d50
 800b5bc:	20000d48 	.word	0x20000d48
 800b5c0:	20000d4c 	.word	0x20000d4c
 800b5c4:	20000ef4 	.word	0x20000ef4
 800b5c8:	20000d55 	.word	0x20000d55
 800b5cc:	200008f0 	.word	0x200008f0
 800b5d0:	20000fed 	.word	0x20000fed
 800b5d4:	20000fa4 	.word	0x20000fa4
 800b5d8:	50000400 	.word	0x50000400
 800b5dc:	20000efd 	.word	0x20000efd
 800b5e0:	20000d40 	.word	0x20000d40
 800b5e4:	20000d64 	.word	0x20000d64
 800b5e8:	0803c000 	.word	0x0803c000
 800b5ec:	0803efff 	.word	0x0803efff
 800b5f0:	20000d68 	.word	0x20000d68
 800b5f4:	20000cd9 	.word	0x20000cd9
 800b5f8:	20000f76 	.word	0x20000f76
 800b5fc:	20000f7a 	.word	0x20000f7a
 800b600:	20000f7c 	.word	0x20000f7c
 800b604:	0803f090 	.word	0x0803f090
 800b608:	08037000 	.word	0x08037000
 800b60c:	0803bfff 	.word	0x0803bfff
 800b610:	20000f78 	.word	0x20000f78
 800b614:	0803f092 	.word	0x0803f092
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800b618:	4bdf      	ldr	r3, [pc, #892]	@ (800b998 <tx_control+0x1030>)
 800b61a:	79db      	ldrb	r3, [r3, #7]
 800b61c:	2201      	movs	r2, #1
 800b61e:	4313      	orrs	r3, r2
 800b620:	b2da      	uxtb	r2, r3
 800b622:	4bdd      	ldr	r3, [pc, #884]	@ (800b998 <tx_control+0x1030>)
 800b624:	71da      	strb	r2, [r3, #7]
		if (!GPIOR0 [f_dh])												// deshielo activo ?
 800b626:	4bdd      	ldr	r3, [pc, #884]	@ (800b99c <tx_control+0x1034>)
 800b628:	785b      	ldrb	r3, [r3, #1]
 800b62a:	2201      	movs	r2, #1
 800b62c:	4053      	eors	r3, r2
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <tx_control+0xcda>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800b634:	4bd8      	ldr	r3, [pc, #864]	@ (800b998 <tx_control+0x1030>)
 800b636:	79db      	ldrb	r3, [r3, #7]
 800b638:	2202      	movs	r2, #2
 800b63a:	4313      	orrs	r3, r2
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	4bd6      	ldr	r3, [pc, #856]	@ (800b998 <tx_control+0x1030>)
 800b640:	71da      	strb	r2, [r3, #7]
		if (!flagsC[0])													// puerta abierta ?
 800b642:	4bd7      	ldr	r3, [pc, #860]	@ (800b9a0 <tx_control+0x1038>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2201      	movs	r2, #1
 800b648:	4053      	eors	r3, r2
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <tx_control+0xcf6>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800b650:	4bd1      	ldr	r3, [pc, #836]	@ (800b998 <tx_control+0x1030>)
 800b652:	79db      	ldrb	r3, [r3, #7]
 800b654:	2204      	movs	r2, #4
 800b656:	4313      	orrs	r3, r2
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	4bcf      	ldr	r3, [pc, #828]	@ (800b998 <tx_control+0x1030>)
 800b65c:	71da      	strb	r2, [r3, #7]
		if (!flagsC[1])													// Modo ahorro 1 activo ?
 800b65e:	4bd0      	ldr	r3, [pc, #832]	@ (800b9a0 <tx_control+0x1038>)
 800b660:	785b      	ldrb	r3, [r3, #1]
 800b662:	2201      	movs	r2, #1
 800b664:	4053      	eors	r3, r2
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d006      	beq.n	800b67a <tx_control+0xd12>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800b66c:	4bca      	ldr	r3, [pc, #808]	@ (800b998 <tx_control+0x1030>)
 800b66e:	79db      	ldrb	r3, [r3, #7]
 800b670:	2208      	movs	r2, #8
 800b672:	4313      	orrs	r3, r2
 800b674:	b2da      	uxtb	r2, r3
 800b676:	4bc8      	ldr	r3, [pc, #800]	@ (800b998 <tx_control+0x1030>)
 800b678:	71da      	strb	r2, [r3, #7]
		if (!flagsC[2])													// Modo ahorro 1 activo ?
 800b67a:	4bc9      	ldr	r3, [pc, #804]	@ (800b9a0 <tx_control+0x1038>)
 800b67c:	789b      	ldrb	r3, [r3, #2]
 800b67e:	2201      	movs	r2, #1
 800b680:	4053      	eors	r3, r2
 800b682:	b2db      	uxtb	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	d006      	beq.n	800b696 <tx_control+0xd2e>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800b688:	4bc3      	ldr	r3, [pc, #780]	@ (800b998 <tx_control+0x1030>)
 800b68a:	79db      	ldrb	r3, [r3, #7]
 800b68c:	2210      	movs	r2, #16
 800b68e:	4313      	orrs	r3, r2
 800b690:	b2da      	uxtb	r2, r3
 800b692:	4bc1      	ldr	r3, [pc, #772]	@ (800b998 <tx_control+0x1030>)
 800b694:	71da      	strb	r2, [r3, #7]
		if (!flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800b696:	4bc3      	ldr	r3, [pc, #780]	@ (800b9a4 <tx_control+0x103c>)
 800b698:	78db      	ldrb	r3, [r3, #3]
 800b69a:	2201      	movs	r2, #1
 800b69c:	4053      	eors	r3, r2
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d006      	beq.n	800b6b2 <tx_control+0xd4a>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800b6a4:	4bbc      	ldr	r3, [pc, #752]	@ (800b998 <tx_control+0x1030>)
 800b6a6:	79db      	ldrb	r3, [r3, #7]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	4bba      	ldr	r3, [pc, #744]	@ (800b998 <tx_control+0x1030>)
 800b6b0:	71da      	strb	r2, [r3, #7]
		if (!GPIOR1 [f_fan])												// ventilador activo ?
 800b6b2:	4bbd      	ldr	r3, [pc, #756]	@ (800b9a8 <tx_control+0x1040>)
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	4053      	eors	r3, r2
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <tx_control+0xd66>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800b6c0:	4bb5      	ldr	r3, [pc, #724]	@ (800b998 <tx_control+0x1030>)
 800b6c2:	79db      	ldrb	r3, [r3, #7]
 800b6c4:	2240      	movs	r2, #64	@ 0x40
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	4bb3      	ldr	r3, [pc, #716]	@ (800b998 <tx_control+0x1030>)
 800b6cc:	71da      	strb	r2, [r3, #7]
		if (!GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800b6ce:	4bb3      	ldr	r3, [pc, #716]	@ (800b99c <tx_control+0x1034>)
 800b6d0:	789b      	ldrb	r3, [r3, #2]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	4053      	eors	r3, r2
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d007      	beq.n	800b6ec <tx_control+0xd84>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800b6dc:	4bae      	ldr	r3, [pc, #696]	@ (800b998 <tx_control+0x1030>)
 800b6de:	79db      	ldrb	r3, [r3, #7]
 800b6e0:	2280      	movs	r2, #128	@ 0x80
 800b6e2:	4252      	negs	r2, r2
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	4bab      	ldr	r3, [pc, #684]	@ (800b998 <tx_control+0x1030>)
 800b6ea:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800b6ec:	4baa      	ldr	r3, [pc, #680]	@ (800b998 <tx_control+0x1030>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6f6:	e011      	b.n	800b71c <tx_control+0xdb4>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800b6f8:	4ba7      	ldr	r3, [pc, #668]	@ (800b998 <tx_control+0x1030>)
 800b6fa:	7a1a      	ldrb	r2, [r3, #8]
 800b6fc:	49ab      	ldr	r1, [pc, #684]	@ (800b9ac <tx_control+0x1044>)
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b700:	18cb      	adds	r3, r1, r3
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	0019      	movs	r1, r3
 800b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b708:	4099      	lsls	r1, r3
 800b70a:	000b      	movs	r3, r1
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	4313      	orrs	r3, r2
 800b710:	b2da      	uxtb	r2, r3
 800b712:	4ba1      	ldr	r3, [pc, #644]	@ (800b998 <tx_control+0x1030>)
 800b714:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	3301      	adds	r3, #1
 800b71a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71e:	2b07      	cmp	r3, #7
 800b720:	ddea      	ble.n	800b6f8 <tx_control+0xd90>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800b722:	4b9d      	ldr	r3, [pc, #628]	@ (800b998 <tx_control+0x1030>)
 800b724:	7a1b      	ldrb	r3, [r3, #8]
 800b726:	2201      	movs	r2, #1
 800b728:	4393      	bics	r3, r2
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	4b9a      	ldr	r3, [pc, #616]	@ (800b998 <tx_control+0x1030>)
 800b72e:	721a      	strb	r2, [r3, #8]
		Bloque_TiempoReal [alarmas_RT] = trefst;
 800b730:	4b9f      	ldr	r3, [pc, #636]	@ (800b9b0 <tx_control+0x1048>)
 800b732:	b2da      	uxtb	r2, r3
 800b734:	4b98      	ldr	r3, [pc, #608]	@ (800b998 <tx_control+0x1030>)
 800b736:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800b738:	232f      	movs	r3, #47	@ 0x2f
 800b73a:	18fb      	adds	r3, r7, r3
 800b73c:	2200      	movs	r2, #0
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	e017      	b.n	800b772 <tx_control+0xe0a>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800b742:	4b95      	ldr	r3, [pc, #596]	@ (800b998 <tx_control+0x1030>)
 800b744:	7a5b      	ldrb	r3, [r3, #9]
 800b746:	b25a      	sxtb	r2, r3
 800b748:	202f      	movs	r0, #47	@ 0x2f
 800b74a:	183b      	adds	r3, r7, r0
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	4998      	ldr	r1, [pc, #608]	@ (800b9b0 <tx_control+0x1048>)
 800b750:	5ccb      	ldrb	r3, [r1, r3]
 800b752:	0019      	movs	r1, r3
 800b754:	183b      	adds	r3, r7, r0
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	4099      	lsls	r1, r3
 800b75a:	000b      	movs	r3, r1
 800b75c:	b25b      	sxtb	r3, r3
 800b75e:	4313      	orrs	r3, r2
 800b760:	b25b      	sxtb	r3, r3
 800b762:	b2da      	uxtb	r2, r3
 800b764:	4b8c      	ldr	r3, [pc, #560]	@ (800b998 <tx_control+0x1030>)
 800b766:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800b768:	183b      	adds	r3, r7, r0
 800b76a:	781a      	ldrb	r2, [r3, #0]
 800b76c:	183b      	adds	r3, r7, r0
 800b76e:	3201      	adds	r2, #1
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	232f      	movs	r3, #47	@ 0x2f
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b07      	cmp	r3, #7
 800b77a:	d9e2      	bls.n	800b742 <tx_control+0xdda>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800b77c:	4b8d      	ldr	r3, [pc, #564]	@ (800b9b4 <tx_control+0x104c>)
 800b77e:	220a      	movs	r2, #10
 800b780:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800b782:	4b8d      	ldr	r3, [pc, #564]	@ (800b9b8 <tx_control+0x1050>)
 800b784:	227b      	movs	r2, #123	@ 0x7b
 800b786:	5c9a      	ldrb	r2, [r3, r2]
 800b788:	4b8c      	ldr	r3, [pc, #560]	@ (800b9bc <tx_control+0x1054>)
 800b78a:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800b78c:	4b8a      	ldr	r3, [pc, #552]	@ (800b9b8 <tx_control+0x1050>)
 800b78e:	227c      	movs	r2, #124	@ 0x7c
 800b790:	5c9a      	ldrb	r2, [r3, r2]
 800b792:	4b8a      	ldr	r3, [pc, #552]	@ (800b9bc <tx_control+0x1054>)
 800b794:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800b796:	4b89      	ldr	r3, [pc, #548]	@ (800b9bc <tx_control+0x1054>)
 800b798:	2200      	movs	r2, #0
 800b79a:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800b79c:	4b87      	ldr	r3, [pc, #540]	@ (800b9bc <tx_control+0x1054>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800b7a2:	4b86      	ldr	r3, [pc, #536]	@ (800b9bc <tx_control+0x1054>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800b7a8:	4b84      	ldr	r3, [pc, #528]	@ (800b9bc <tx_control+0x1054>)
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800b7ae:	4b83      	ldr	r3, [pc, #524]	@ (800b9bc <tx_control+0x1054>)
 800b7b0:	2203      	movs	r2, #3
 800b7b2:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800b7b4:	4b7f      	ldr	r3, [pc, #508]	@ (800b9b4 <tx_control+0x104c>)
 800b7b6:	781a      	ldrb	r2, [r3, #0]
 800b7b8:	4b80      	ldr	r3, [pc, #512]	@ (800b9bc <tx_control+0x1054>)
 800b7ba:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800b7bc:	4b80      	ldr	r3, [pc, #512]	@ (800b9c0 <tx_control+0x1058>)
 800b7be:	2201      	movs	r2, #1
 800b7c0:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800b7c2:	4b7e      	ldr	r3, [pc, #504]	@ (800b9bc <tx_control+0x1054>)
 800b7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[0];	 //
 800b7c6:	4b7f      	ldr	r3, [pc, #508]	@ (800b9c4 <tx_control+0x105c>)
 800b7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 8 ; i++ )
 800b7ca:	232e      	movs	r3, #46	@ 0x2e
 800b7cc:	18fb      	adds	r3, r7, r3
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	e00f      	b.n	800b7f4 <tx_control+0xe8c>
			point_Y[i] = point_X[i];
 800b7d4:	202e      	movs	r0, #46	@ 0x2e
 800b7d6:	183b      	adds	r3, r7, r0
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7dc:	18d2      	adds	r2, r2, r3
 800b7de:	183b      	adds	r3, r7, r0
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7e4:	18cb      	adds	r3, r1, r3
 800b7e6:	7812      	ldrb	r2, [r2, #0]
 800b7e8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800b7ea:	183b      	adds	r3, r7, r0
 800b7ec:	781a      	ldrb	r2, [r3, #0]
 800b7ee:	183b      	adds	r3, r7, r0
 800b7f0:	3201      	adds	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	232e      	movs	r3, #46	@ 0x2e
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b07      	cmp	r3, #7
 800b7fc:	d9ea      	bls.n	800b7d4 <tx_control+0xe6c>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800b7fe:	4b66      	ldr	r3, [pc, #408]	@ (800b998 <tx_control+0x1030>)
 800b800:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[8];	 //
 800b802:	4b71      	ldr	r3, [pc, #452]	@ (800b9c8 <tx_control+0x1060>)
 800b804:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 10 ; i++ )
 800b806:	232d      	movs	r3, #45	@ 0x2d
 800b808:	18fb      	adds	r3, r7, r3
 800b80a:	2200      	movs	r2, #0
 800b80c:	701a      	strb	r2, [r3, #0]
 800b80e:	e00f      	b.n	800b830 <tx_control+0xec8>
			point_Y[i] = point_X[i];
 800b810:	202d      	movs	r0, #45	@ 0x2d
 800b812:	183b      	adds	r3, r7, r0
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b818:	18d2      	adds	r2, r2, r3
 800b81a:	183b      	adds	r3, r7, r0
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b820:	18cb      	adds	r3, r1, r3
 800b822:	7812      	ldrb	r2, [r2, #0]
 800b824:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800b826:	183b      	adds	r3, r7, r0
 800b828:	781a      	ldrb	r2, [r3, #0]
 800b82a:	183b      	adds	r3, r7, r0
 800b82c:	3201      	adds	r2, #1
 800b82e:	701a      	strb	r2, [r3, #0]
 800b830:	232d      	movs	r3, #45	@ 0x2d
 800b832:	18fb      	adds	r3, r7, r3
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b09      	cmp	r3, #9
 800b838:	d9ea      	bls.n	800b810 <tx_control+0xea8>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800b83a:	4b64      	ldr	r3, [pc, #400]	@ (800b9cc <tx_control+0x1064>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800b840:	4b60      	ldr	r3, [pc, #384]	@ (800b9c4 <tx_control+0x105c>)
 800b842:	63fb      	str	r3, [r7, #60]	@ 0x3c
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800b844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b846:	2112      	movs	r1, #18
 800b848:	0018      	movs	r0, r3
 800b84a:	f7f8 ff01 	bl	8004650 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800b84e:	4b5f      	ldr	r3, [pc, #380]	@ (800b9cc <tx_control+0x1064>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	0e1b      	lsrs	r3, r3, #24
 800b854:	b2da      	uxtb	r2, r3
 800b856:	4b5b      	ldr	r3, [pc, #364]	@ (800b9c4 <tx_control+0x105c>)
 800b858:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800b85a:	4b5c      	ldr	r3, [pc, #368]	@ (800b9cc <tx_control+0x1064>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	0c1b      	lsrs	r3, r3, #16
 800b860:	b2da      	uxtb	r2, r3
 800b862:	4b58      	ldr	r3, [pc, #352]	@ (800b9c4 <tx_control+0x105c>)
 800b864:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800b866:	4b59      	ldr	r3, [pc, #356]	@ (800b9cc <tx_control+0x1064>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	0a1b      	lsrs	r3, r3, #8
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	4b55      	ldr	r3, [pc, #340]	@ (800b9c4 <tx_control+0x105c>)
 800b870:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800b872:	4b56      	ldr	r3, [pc, #344]	@ (800b9cc <tx_control+0x1064>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	b2da      	uxtb	r2, r3
 800b878:	4b52      	ldr	r3, [pc, #328]	@ (800b9c4 <tx_control+0x105c>)
 800b87a:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800b87c:	4b54      	ldr	r3, [pc, #336]	@ (800b9d0 <tx_control+0x1068>)
 800b87e:	4a51      	ldr	r2, [pc, #324]	@ (800b9c4 <tx_control+0x105c>)
 800b880:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800b882:	4b54      	ldr	r3, [pc, #336]	@ (800b9d4 <tx_control+0x106c>)
 800b884:	4a4f      	ldr	r2, [pc, #316]	@ (800b9c4 <tx_control+0x105c>)
 800b886:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800b888:	4b53      	ldr	r3, [pc, #332]	@ (800b9d8 <tx_control+0x1070>)
 800b88a:	4a54      	ldr	r2, [pc, #336]	@ (800b9dc <tx_control+0x1074>)
 800b88c:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800b88e:	4b49      	ldr	r3, [pc, #292]	@ (800b9b4 <tx_control+0x104c>)
 800b890:	2216      	movs	r2, #22
 800b892:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800b894:	4b4a      	ldr	r3, [pc, #296]	@ (800b9c0 <tx_control+0x1058>)
 800b896:	2200      	movs	r2, #0
 800b898:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800b89a:	4b49      	ldr	r3, [pc, #292]	@ (800b9c0 <tx_control+0x1058>)
 800b89c:	2201      	movs	r2, #1
 800b89e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800b8a0:	4b4f      	ldr	r3, [pc, #316]	@ (800b9e0 <tx_control+0x1078>)
 800b8a2:	2255      	movs	r2, #85	@ 0x55
 800b8a4:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800b8a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b9e4 <tx_control+0x107c>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800b8ac:	f000 ff3f 	bl	800c72e <tx_control+0x1dc6>
			point_Y[i] = point_X[i];
 800b8b0:	202c      	movs	r0, #44	@ 0x2c
 800b8b2:	183b      	adds	r3, r7, r0
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b8b8:	18d2      	adds	r2, r2, r3
 800b8ba:	183b      	adds	r3, r7, r0
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8c0:	18cb      	adds	r3, r1, r3
 800b8c2:	7812      	ldrb	r2, [r2, #0]
 800b8c4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800b8c6:	183b      	adds	r3, r7, r0
 800b8c8:	781a      	ldrb	r2, [r3, #0]
 800b8ca:	183b      	adds	r3, r7, r0
 800b8cc:	3201      	adds	r2, #1
 800b8ce:	701a      	strb	r2, [r3, #0]
 800b8d0:	232c      	movs	r3, #44	@ 0x2c
 800b8d2:	18fb      	adds	r3, r7, r3
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b07      	cmp	r3, #7
 800b8d8:	d9ea      	bls.n	800b8b0 <tx_control+0xf48>
		point_X = &eePlantilla[eedato_seg1];	 // ldw		X,#softVersion1
 800b8da:	4b43      	ldr	r3, [pc, #268]	@ (800b9e8 <tx_control+0x1080>)
 800b8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y = &bufferTxControl[8];	 //
 800b8de:	4b3a      	ldr	r3, [pc, #232]	@ (800b9c8 <tx_control+0x1060>)
 800b8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
		for(uint8_t i = 0; i < 128 ; i++ )
 800b8e2:	232b      	movs	r3, #43	@ 0x2b
 800b8e4:	18fb      	adds	r3, r7, r3
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	701a      	strb	r2, [r3, #0]
 800b8ea:	e00f      	b.n	800b90c <tx_control+0xfa4>
			point_Y[i] = point_X[i];
 800b8ec:	202b      	movs	r0, #43	@ 0x2b
 800b8ee:	183b      	adds	r3, r7, r0
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b8f4:	18d2      	adds	r2, r2, r3
 800b8f6:	183b      	adds	r3, r7, r0
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8fc:	18cb      	adds	r3, r1, r3
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800b902:	183b      	adds	r3, r7, r0
 800b904:	781a      	ldrb	r2, [r3, #0]
 800b906:	183b      	adds	r3, r7, r0
 800b908:	3201      	adds	r2, #1
 800b90a:	701a      	strb	r2, [r3, #0]
 800b90c:	232b      	movs	r3, #43	@ 0x2b
 800b90e:	18fb      	adds	r3, r7, r3
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b25b      	sxtb	r3, r3
 800b914:	2b00      	cmp	r3, #0
 800b916:	dae9      	bge.n	800b8ec <tx_control+0xf84>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800b918:	4b2c      	ldr	r3, [pc, #176]	@ (800b9cc <tx_control+0x1064>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800b91e:	4b29      	ldr	r3, [pc, #164]	@ (800b9c4 <tx_control+0x105c>)
 800b920:	63fb      	str	r3, [r7, #60]	@ 0x3c
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800b922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b924:	2188      	movs	r1, #136	@ 0x88
 800b926:	0018      	movs	r0, r3
 800b928:	f7f8 fe92 	bl	8004650 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800b92c:	4b27      	ldr	r3, [pc, #156]	@ (800b9cc <tx_control+0x1064>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	0e1b      	lsrs	r3, r3, #24
 800b932:	b2d9      	uxtb	r1, r3
 800b934:	4b23      	ldr	r3, [pc, #140]	@ (800b9c4 <tx_control+0x105c>)
 800b936:	2288      	movs	r2, #136	@ 0x88
 800b938:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800b93a:	4b24      	ldr	r3, [pc, #144]	@ (800b9cc <tx_control+0x1064>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	0c1b      	lsrs	r3, r3, #16
 800b940:	b2d9      	uxtb	r1, r3
 800b942:	4b20      	ldr	r3, [pc, #128]	@ (800b9c4 <tx_control+0x105c>)
 800b944:	2289      	movs	r2, #137	@ 0x89
 800b946:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800b948:	4b20      	ldr	r3, [pc, #128]	@ (800b9cc <tx_control+0x1064>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	0a1b      	lsrs	r3, r3, #8
 800b94e:	b2d9      	uxtb	r1, r3
 800b950:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c4 <tx_control+0x105c>)
 800b952:	228a      	movs	r2, #138	@ 0x8a
 800b954:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800b956:	4b1d      	ldr	r3, [pc, #116]	@ (800b9cc <tx_control+0x1064>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	b2d9      	uxtb	r1, r3
 800b95c:	4b19      	ldr	r3, [pc, #100]	@ (800b9c4 <tx_control+0x105c>)
 800b95e:	228b      	movs	r2, #139	@ 0x8b
 800b960:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800b962:	4b1b      	ldr	r3, [pc, #108]	@ (800b9d0 <tx_control+0x1068>)
 800b964:	4a17      	ldr	r2, [pc, #92]	@ (800b9c4 <tx_control+0x105c>)
 800b966:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800b968:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d4 <tx_control+0x106c>)
 800b96a:	4a16      	ldr	r2, [pc, #88]	@ (800b9c4 <tx_control+0x105c>)
 800b96c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800b96e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d8 <tx_control+0x1070>)
 800b970:	4a1e      	ldr	r2, [pc, #120]	@ (800b9ec <tx_control+0x1084>)
 800b972:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800b974:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b4 <tx_control+0x104c>)
 800b976:	228c      	movs	r2, #140	@ 0x8c
 800b978:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800b97a:	4b11      	ldr	r3, [pc, #68]	@ (800b9c0 <tx_control+0x1058>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800b980:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c0 <tx_control+0x1058>)
 800b982:	2201      	movs	r2, #1
 800b984:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800b986:	4b16      	ldr	r3, [pc, #88]	@ (800b9e0 <tx_control+0x1078>)
 800b988:	2255      	movs	r2, #85	@ 0x55
 800b98a:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800b98c:	4b15      	ldr	r3, [pc, #84]	@ (800b9e4 <tx_control+0x107c>)
 800b98e:	2200      	movs	r2, #0
 800b990:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800b992:	f000 fecc 	bl	800c72e <tx_control+0x1dc6>
 800b996:	46c0      	nop			@ (mov r8, r8)
 800b998:	20000d34 	.word	0x20000d34
 800b99c:	20000ae0 	.word	0x20000ae0
 800b9a0:	20000b78 	.word	0x20000b78
 800b9a4:	20000ab4 	.word	0x20000ab4
 800b9a8:	20000b1c 	.word	0x20000b1c
 800b9ac:	20000abc 	.word	0x20000abc
 800b9b0:	20000ac4 	.word	0x20000ac4
 800b9b4:	20000d6c 	.word	0x20000d6c
 800b9b8:	200000bc 	.word	0x200000bc
 800b9bc:	20000d14 	.word	0x20000d14
 800b9c0:	20000d58 	.word	0x20000d58
 800b9c4:	20000ee4 	.word	0x20000ee4
 800b9c8:	20000eec 	.word	0x20000eec
 800b9cc:	20000d70 	.word	0x20000d70
 800b9d0:	20000d50 	.word	0x20000d50
 800b9d4:	20000d48 	.word	0x20000d48
 800b9d8:	20000d4c 	.word	0x20000d4c
 800b9dc:	20000efa 	.word	0x20000efa
 800b9e0:	20000d55 	.word	0x20000d55
 800b9e4:	20000d60 	.word	0x20000d60
 800b9e8:	0803f000 	.word	0x0803f000
 800b9ec:	20000f70 	.word	0x20000f70
				goto 	verifica_version2;		//jreq	verifica_version2
 800b9f0:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[126] == eePlantilla[eeversion2]){
 800b9f2:	4be2      	ldr	r3, [pc, #904]	@ (800bd7c <tx_control+0x1414>)
 800b9f4:	227e      	movs	r2, #126	@ 0x7e
 800b9f6:	5c9a      	ldrb	r2, [r3, r2]
 800b9f8:	4be1      	ldr	r3, [pc, #900]	@ (800bd80 <tx_control+0x1418>)
 800b9fa:	217c      	movs	r1, #124	@ 0x7c
 800b9fc:	5c5b      	ldrb	r3, [r3, r1]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d159      	bne.n	800bab6 <tx_control+0x114e>
				goto 	verifica_version3;		//jreq	verifica_version3
 800ba02:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800ba04:	4bdd      	ldr	r3, [pc, #884]	@ (800bd7c <tx_control+0x1414>)
 800ba06:	789b      	ldrb	r3, [r3, #2]
 800ba08:	2baa      	cmp	r3, #170	@ 0xaa
 800ba0a:	d156      	bne.n	800baba <tx_control+0x1152>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800ba0c:	4bdb      	ldr	r3, [pc, #876]	@ (800bd7c <tx_control+0x1414>)
 800ba0e:	2243      	movs	r2, #67	@ 0x43
 800ba10:	5c9b      	ldrb	r3, [r3, r2]
 800ba12:	2b66      	cmp	r3, #102	@ 0x66
 800ba14:	d153      	bne.n	800babe <tx_control+0x1156>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800ba16:	4bd9      	ldr	r3, [pc, #868]	@ (800bd7c <tx_control+0x1414>)
 800ba18:	2281      	movs	r2, #129	@ 0x81
 800ba1a:	5c9b      	ldrb	r3, [r3, r2]
 800ba1c:	2bcc      	cmp	r3, #204	@ 0xcc
 800ba1e:	d150      	bne.n	800bac2 <tx_control+0x115a>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800ba20:	4bd8      	ldr	r3, [pc, #864]	@ (800bd84 <tx_control+0x141c>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800ba26:	4bd5      	ldr	r3, [pc, #852]	@ (800bd7c <tx_control+0x1414>)
 800ba28:	63fb      	str	r3, [r7, #60]	@ 0x3c
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba2c:	2182      	movs	r1, #130	@ 0x82
 800ba2e:	0018      	movs	r0, r3
 800ba30:	f7f8 fe0e 	bl	8004650 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	603b      	str	r3, [r7, #0]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800ba38:	4bd0      	ldr	r3, [pc, #832]	@ (800bd7c <tx_control+0x1414>)
 800ba3a:	2282      	movs	r2, #130	@ 0x82
 800ba3c:	5c9b      	ldrb	r3, [r3, r2]
 800ba3e:	061b      	lsls	r3, r3, #24
 800ba40:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800ba42:	4bce      	ldr	r3, [pc, #824]	@ (800bd7c <tx_control+0x1414>)
 800ba44:	2283      	movs	r2, #131	@ 0x83
 800ba46:	5c9b      	ldrb	r3, [r3, r2]
 800ba48:	041b      	lsls	r3, r3, #16
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	18d3      	adds	r3, r2, r3
 800ba4e:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800ba50:	4bca      	ldr	r3, [pc, #808]	@ (800bd7c <tx_control+0x1414>)
 800ba52:	2284      	movs	r2, #132	@ 0x84
 800ba54:	5c9b      	ldrb	r3, [r3, r2]
 800ba56:	021b      	lsls	r3, r3, #8
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	18d3      	adds	r3, r2, r3
 800ba5c:	603b      	str	r3, [r7, #0]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800ba5e:	4bc7      	ldr	r3, [pc, #796]	@ (800bd7c <tx_control+0x1414>)
 800ba60:	2285      	movs	r2, #133	@ 0x85
 800ba62:	5c9b      	ldrb	r3, [r3, r2]
 800ba64:	001a      	movs	r2, r3
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	189b      	adds	r3, r3, r2
 800ba6a:	603b      	str	r3, [r7, #0]
			if (chksum_32_HW_LW != chksum_to_compare){
 800ba6c:	4bc5      	ldr	r3, [pc, #788]	@ (800bd84 <tx_control+0x141c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d127      	bne.n	800bac6 <tx_control+0x115e>
write_param:
 800ba76:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800ba78:	4bc3      	ldr	r3, [pc, #780]	@ (800bd88 <tx_control+0x1420>)
 800ba7a:	2255      	movs	r2, #85	@ 0x55
 800ba7c:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800ba7e:	4bbf      	ldr	r3, [pc, #764]	@ (800bd7c <tx_control+0x1414>)
 800ba80:	63fb      	str	r3, [r7, #60]	@ 0x3c
			point_X++;
 800ba82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba84:	3301      	adds	r3, #1
 800ba86:	63fb      	str	r3, [r7, #60]	@ 0x3c
			point_X++;
 800ba88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			dataPointer =	point_X;	// LDW		dataPointer,X
 800ba8e:	4bbf      	ldr	r3, [pc, #764]	@ (800bd8c <tx_control+0x1424>)
 800ba90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ba92:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800ba94:	4bbe      	ldr	r3, [pc, #760]	@ (800bd90 <tx_control+0x1428>)
 800ba96:	4aba      	ldr	r2, [pc, #744]	@ (800bd80 <tx_control+0x1418>)
 800ba98:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800ba9a:	f7f8 fe5f 	bl	800475c <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800ba9e:	4bbd      	ldr	r3, [pc, #756]	@ (800bd94 <tx_control+0x142c>)
 800baa0:	22f1      	movs	r2, #241	@ 0xf1
 800baa2:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800baa4:	4bbb      	ldr	r3, [pc, #748]	@ (800bd94 <tx_control+0x142c>)
 800baa6:	223d      	movs	r2, #61	@ 0x3d
 800baa8:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800baaa:	4bbb      	ldr	r3, [pc, #748]	@ (800bd98 <tx_control+0x1430>)
 800baac:	2201      	movs	r2, #1
 800baae:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800bab0:	e010      	b.n	800bad4 <tx_control+0x116c>
			goto	no_writeParam;				//jp		no_writeParam
 800bab2:	46c0      	nop			@ (mov r8, r8)
 800bab4:	e008      	b.n	800bac8 <tx_control+0x1160>
			goto	no_writeParam;				//jp		no_writeParam
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	e006      	b.n	800bac8 <tx_control+0x1160>
				goto	no_writeParam;			//jrne	no_writeParam
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	e004      	b.n	800bac8 <tx_control+0x1160>
				goto	no_writeParam;			//jrne	no_writeParam
 800babe:	46c0      	nop			@ (mov r8, r8)
 800bac0:	e002      	b.n	800bac8 <tx_control+0x1160>
				goto	no_writeParam;			//jrne	no_writeParam
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	e000      	b.n	800bac8 <tx_control+0x1160>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800bac6:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800bac8:	4bb2      	ldr	r3, [pc, #712]	@ (800bd94 <tx_control+0x142c>)
 800baca:	22f1      	movs	r2, #241	@ 0xf1
 800bacc:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800bace:	4bb1      	ldr	r3, [pc, #708]	@ (800bd94 <tx_control+0x142c>)
 800bad0:	223e      	movs	r2, #62	@ 0x3e
 800bad2:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800bad4:	4bb1      	ldr	r3, [pc, #708]	@ (800bd9c <tx_control+0x1434>)
 800bad6:	4aaf      	ldr	r2, [pc, #700]	@ (800bd94 <tx_control+0x142c>)
 800bad8:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800bada:	4bb1      	ldr	r3, [pc, #708]	@ (800bda0 <tx_control+0x1438>)
 800badc:	4aad      	ldr	r2, [pc, #692]	@ (800bd94 <tx_control+0x142c>)
 800bade:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800bae0:	4bb0      	ldr	r3, [pc, #704]	@ (800bda4 <tx_control+0x143c>)
 800bae2:	4ab1      	ldr	r2, [pc, #708]	@ (800bda8 <tx_control+0x1440>)
 800bae4:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800bae6:	4bb1      	ldr	r3, [pc, #708]	@ (800bdac <tx_control+0x1444>)
 800bae8:	2202      	movs	r2, #2
 800baea:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800baec:	4baa      	ldr	r3, [pc, #680]	@ (800bd98 <tx_control+0x1430>)
 800baee:	2201      	movs	r2, #1
 800baf0:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800baf2:	4baf      	ldr	r3, [pc, #700]	@ (800bdb0 <tx_control+0x1448>)
 800baf4:	2255      	movs	r2, #85	@ 0x55
 800baf6:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800baf8:	4bae      	ldr	r3, [pc, #696]	@ (800bdb4 <tx_control+0x144c>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800bafe:	f000 fe16 	bl	800c72e <tx_control+0x1dc6>
				goto rx_firmware01;
 800bb02:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800bb04:	4bac      	ldr	r3, [pc, #688]	@ (800bdb8 <tx_control+0x1450>)
 800bb06:	785b      	ldrb	r3, [r3, #1]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d133      	bne.n	800bb74 <tx_control+0x120c>
rx_numBloqFirm:
 800bb0c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800bb0e:	4ba9      	ldr	r3, [pc, #676]	@ (800bdb4 <tx_control+0x144c>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	2b49      	cmp	r3, #73	@ 0x49
 800bb14:	d000      	beq.n	800bb18 <tx_control+0x11b0>
 800bb16:	e18e      	b.n	800be36 <tx_control+0x14ce>
				goto rx_numBloqFirm_01;
 800bb18:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = RxBuffer_Ble[2];
 800bb1a:	4b98      	ldr	r3, [pc, #608]	@ (800bd7c <tx_control+0x1414>)
 800bb1c:	789a      	ldrb	r2, [r3, #2]
 800bb1e:	4ba7      	ldr	r3, [pc, #668]	@ (800bdbc <tx_control+0x1454>)
 800bb20:	701a      	strb	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800bb22:	4ba7      	ldr	r3, [pc, #668]	@ (800bdc0 <tx_control+0x1458>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800bb28:	4ba6      	ldr	r3, [pc, #664]	@ (800bdc4 <tx_control+0x145c>)
 800bb2a:	22f1      	movs	r2, #241	@ 0xf1
 800bb2c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800bb2e:	4ba5      	ldr	r3, [pc, #660]	@ (800bdc4 <tx_control+0x145c>)
 800bb30:	2207      	movs	r2, #7
 800bb32:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800bb34:	4ba0      	ldr	r3, [pc, #640]	@ (800bdb8 <tx_control+0x1450>)
 800bb36:	2201      	movs	r2, #1
 800bb38:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800bb3a:	4ba3      	ldr	r3, [pc, #652]	@ (800bdc8 <tx_control+0x1460>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800bb40:	4b96      	ldr	r3, [pc, #600]	@ (800bd9c <tx_control+0x1434>)
 800bb42:	4aa0      	ldr	r2, [pc, #640]	@ (800bdc4 <tx_control+0x145c>)
 800bb44:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800bb46:	4b96      	ldr	r3, [pc, #600]	@ (800bda0 <tx_control+0x1438>)
 800bb48:	4a9e      	ldr	r2, [pc, #632]	@ (800bdc4 <tx_control+0x145c>)
 800bb4a:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800bb4c:	4b95      	ldr	r3, [pc, #596]	@ (800bda4 <tx_control+0x143c>)
 800bb4e:	4a9f      	ldr	r2, [pc, #636]	@ (800bdcc <tx_control+0x1464>)
 800bb50:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800bb52:	4b96      	ldr	r3, [pc, #600]	@ (800bdac <tx_control+0x1444>)
 800bb54:	2202      	movs	r2, #2
 800bb56:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800bb58:	4b8f      	ldr	r3, [pc, #572]	@ (800bd98 <tx_control+0x1430>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800bb5e:	4b94      	ldr	r3, [pc, #592]	@ (800bdb0 <tx_control+0x1448>)
 800bb60:	2255      	movs	r2, #85	@ 0x55
 800bb62:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800bb64:	4b93      	ldr	r3, [pc, #588]	@ (800bdb4 <tx_control+0x144c>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;							// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800bb6a:	4b99      	ldr	r3, [pc, #612]	@ (800bdd0 <tx_control+0x1468>)
 800bb6c:	2205      	movs	r2, #5
 800bb6e:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800bb70:	f000 fddd 	bl	800c72e <tx_control+0x1dc6>
				goto rxBloqFirm;
 800bb74:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800bb76:	4b90      	ldr	r3, [pc, #576]	@ (800bdb8 <tx_control+0x1450>)
 800bb78:	789b      	ldrb	r3, [r3, #2]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <tx_control+0x121a>
 800bb7e:	f000 fdd5 	bl	800c72c <tx_control+0x1dc4>
				goto rxBloqFirm_01;
 800bb82:	46c0      	nop			@ (mov r8, r8)
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800bb84:	4b8c      	ldr	r3, [pc, #560]	@ (800bdb8 <tx_control+0x1450>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800bb8a:	4b7e      	ldr	r3, [pc, #504]	@ (800bd84 <tx_control+0x141c>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800bb90:	4b90      	ldr	r3, [pc, #576]	@ (800bdd4 <tx_control+0x146c>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	701a      	strb	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[0]); // call	build_chksum;	/ ve calculando el checksum
 800bb96:	4b79      	ldr	r3, [pc, #484]	@ (800bd7c <tx_control+0x1414>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	f7f8 fdca 	bl	8004734 <build_chksum>
			wreg++;			// inc		wreg
 800bba0:	4b8c      	ldr	r3, [pc, #560]	@ (800bdd4 <tx_control+0x146c>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	3301      	adds	r3, #1
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	4b8a      	ldr	r3, [pc, #552]	@ (800bdd4 <tx_control+0x146c>)
 800bbaa:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800bbac:	4b89      	ldr	r3, [pc, #548]	@ (800bdd4 <tx_control+0x146c>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	b25b      	sxtb	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	db00      	blt.n	800bbb8 <tx_control+0x1250>
				goto load_bloqFirm;
 800bbb6:	e7ee      	b.n	800bb96 <tx_control+0x122e>
			resulh = RxBuffer_Ble[1]; // ld		resulh,a
 800bbb8:	4b70      	ldr	r3, [pc, #448]	@ (800bd7c <tx_control+0x1414>)
 800bbba:	785a      	ldrb	r2, [r3, #1]
 800bbbc:	4b86      	ldr	r3, [pc, #536]	@ (800bdd8 <tx_control+0x1470>)
 800bbbe:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[2]; // ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800bbc0:	4b6e      	ldr	r3, [pc, #440]	@ (800bd7c <tx_control+0x1414>)
 800bbc2:	789a      	ldrb	r2, [r3, #2]
 800bbc4:	4b85      	ldr	r3, [pc, #532]	@ (800bddc <tx_control+0x1474>)
 800bbc6:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[3];// ld		tempo2,a
 800bbc8:	4b6c      	ldr	r3, [pc, #432]	@ (800bd7c <tx_control+0x1414>)
 800bbca:	78da      	ldrb	r2, [r3, #3]
 800bbcc:	4b84      	ldr	r3, [pc, #528]	@ (800bde0 <tx_control+0x1478>)
 800bbce:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[4];// ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800bbd0:	4b6a      	ldr	r3, [pc, #424]	@ (800bd7c <tx_control+0x1414>)
 800bbd2:	791a      	ldrb	r2, [r3, #4]
 800bbd4:	4b83      	ldr	r3, [pc, #524]	@ (800bde4 <tx_control+0x147c>)
 800bbd6:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1))!=((uint16_t)(chksum_32_HW_LW & 0x0000FFFF))){// jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800bbd8:	4b81      	ldr	r3, [pc, #516]	@ (800bde0 <tx_control+0x1478>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	021b      	lsls	r3, r3, #8
 800bbde:	b21a      	sxth	r2, r3
 800bbe0:	4b80      	ldr	r3, [pc, #512]	@ (800bde4 <tx_control+0x147c>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	b21b      	sxth	r3, r3
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	b21a      	sxth	r2, r3
 800bbea:	4b66      	ldr	r3, [pc, #408]	@ (800bd84 <tx_control+0x141c>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	b21b      	sxth	r3, r3
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d141      	bne.n	800bc78 <tx_control+0x1310>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksum_32_HW_LW & 0xFFFF0000)>>16))){ //jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800bbf4:	4b78      	ldr	r3, [pc, #480]	@ (800bdd8 <tx_control+0x1470>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	021b      	lsls	r3, r3, #8
 800bbfa:	b21a      	sxth	r2, r3
 800bbfc:	4b77      	ldr	r3, [pc, #476]	@ (800bddc <tx_control+0x1474>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	b21b      	sxth	r3, r3
 800bc02:	4313      	orrs	r3, r2
 800bc04:	b21a      	sxth	r2, r3
 800bc06:	4b5f      	ldr	r3, [pc, #380]	@ (800bd84 <tx_control+0x141c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	0c1b      	lsrs	r3, r3, #16
 800bc0c:	b21b      	sxth	r3, r3
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d134      	bne.n	800bc7c <tx_control+0x1314>
no_inc_chksumFirm_HW:
 800bc12:	46c0      	nop			@ (mov r8, r8)
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800bc14:	4b6c      	ldr	r3, [pc, #432]	@ (800bdc8 <tx_control+0x1460>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	4b5a      	ldr	r3, [pc, #360]	@ (800bd84 <tx_control+0x141c>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	18d2      	adds	r2, r2, r3
 800bc1e:	4b6a      	ldr	r3, [pc, #424]	@ (800bdc8 <tx_control+0x1460>)
 800bc20:	601a      	str	r2, [r3, #0]
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800bc22:	4b59      	ldr	r3, [pc, #356]	@ (800bd88 <tx_control+0x1420>)
 800bc24:	22aa      	movs	r2, #170	@ 0xaa
 800bc26:	701a      	strb	r2, [r3, #0]
			dataPointer = &RxBuffer_Ble[0];// LDW		dataPointer,X
 800bc28:	4b58      	ldr	r3, [pc, #352]	@ (800bd8c <tx_control+0x1424>)
 800bc2a:	4a54      	ldr	r2, [pc, #336]	@ (800bd7c <tx_control+0x1414>)
 800bc2c:	601a      	str	r2, [r3, #0]
			dirPointer = (128 * cntBloqFirm + eventLogger);// LDW		dirPointer,X
 800bc2e:	4b64      	ldr	r3, [pc, #400]	@ (800bdc0 <tx_control+0x1458>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	01db      	lsls	r3, r3, #7
 800bc34:	001a      	movs	r2, r3
 800bc36:	4b6c      	ldr	r3, [pc, #432]	@ (800bde8 <tx_control+0x1480>)
 800bc38:	18d2      	adds	r2, r2, r3
 800bc3a:	4b55      	ldr	r3, [pc, #340]	@ (800bd90 <tx_control+0x1428>)
 800bc3c:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();// call	GRABA_BLOCK;					/ graba bloque de 128bytes en FLASH
 800bc3e:	f7f8 fd8d 	bl	800475c <GRABA_BLOCK>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800bc42:	4b5f      	ldr	r3, [pc, #380]	@ (800bdc0 <tx_control+0x1458>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	4b5d      	ldr	r3, [pc, #372]	@ (800bdc0 <tx_control+0x1458>)
 800bc4c:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800bc4e:	4b5c      	ldr	r3, [pc, #368]	@ (800bdc0 <tx_control+0x1458>)
 800bc50:	781a      	ldrb	r2, [r3, #0]
 800bc52:	4b5a      	ldr	r3, [pc, #360]	@ (800bdbc <tx_control+0x1454>)
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d103      	bne.n	800bc62 <tx_control+0x12fa>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800bc5a:	4b57      	ldr	r3, [pc, #348]	@ (800bdb8 <tx_control+0x1450>)
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	70da      	strb	r2, [r3, #3]
 800bc60:	e000      	b.n	800bc64 <tx_control+0x12fc>
				goto rxFirm_noComplete ;
 800bc62:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800bc64:	4b57      	ldr	r3, [pc, #348]	@ (800bdc4 <tx_control+0x145c>)
 800bc66:	22f1      	movs	r2, #241	@ 0xf1
 800bc68:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800bc6a:	4b56      	ldr	r3, [pc, #344]	@ (800bdc4 <tx_control+0x145c>)
 800bc6c:	223d      	movs	r2, #61	@ 0x3d
 800bc6e:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800bc70:	4b57      	ldr	r3, [pc, #348]	@ (800bdd0 <tx_control+0x1468>)
 800bc72:	2205      	movs	r2, #5
 800bc74:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800bc76:	e019      	b.n	800bcac <tx_control+0x1344>
				goto no_writeBloqFirm;
 800bc78:	46c0      	nop			@ (mov r8, r8)
 800bc7a:	e000      	b.n	800bc7e <tx_control+0x1316>
				goto no_writeBloqFirm;
 800bc7c:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800bc7e:	4b51      	ldr	r3, [pc, #324]	@ (800bdc4 <tx_control+0x145c>)
 800bc80:	22f1      	movs	r2, #241	@ 0xf1
 800bc82:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800bc84:	4b4f      	ldr	r3, [pc, #316]	@ (800bdc4 <tx_control+0x145c>)
 800bc86:	223e      	movs	r2, #62	@ 0x3e
 800bc88:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc8e:	e007      	b.n	800bca0 <tx_control+0x1338>
				flagsRxFirm[i]=0;
 800bc90:	4a49      	ldr	r2, [pc, #292]	@ (800bdb8 <tx_control+0x1450>)
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc94:	18d3      	adds	r3, r2, r3
 800bc96:	2200      	movs	r2, #0
 800bc98:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	2b07      	cmp	r3, #7
 800bca4:	ddf4      	ble.n	800bc90 <tx_control+0x1328>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800bca6:	4b43      	ldr	r3, [pc, #268]	@ (800bdb4 <tx_control+0x144c>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800bcac:	4b3b      	ldr	r3, [pc, #236]	@ (800bd9c <tx_control+0x1434>)
 800bcae:	4a45      	ldr	r2, [pc, #276]	@ (800bdc4 <tx_control+0x145c>)
 800bcb0:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800bcb2:	4b3b      	ldr	r3, [pc, #236]	@ (800bda0 <tx_control+0x1438>)
 800bcb4:	4a43      	ldr	r2, [pc, #268]	@ (800bdc4 <tx_control+0x145c>)
 800bcb6:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800bcb8:	4b3a      	ldr	r3, [pc, #232]	@ (800bda4 <tx_control+0x143c>)
 800bcba:	4a44      	ldr	r2, [pc, #272]	@ (800bdcc <tx_control+0x1464>)
 800bcbc:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800bcbe:	4b3b      	ldr	r3, [pc, #236]	@ (800bdac <tx_control+0x1444>)
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800bcc4:	4b34      	ldr	r3, [pc, #208]	@ (800bd98 <tx_control+0x1430>)
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800bcca:	4b39      	ldr	r3, [pc, #228]	@ (800bdb0 <tx_control+0x1448>)
 800bccc:	2255      	movs	r2, #85	@ 0x55
 800bcce:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800bcd0:	4b38      	ldr	r3, [pc, #224]	@ (800bdb4 <tx_control+0x144c>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;				// jp		end_tx_control
 800bcd6:	f000 fd2a 	bl	800c72e <tx_control+0x1dc6>
			goto rxChkFirm;				// jp		rxChkFirm;
 800bcda:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800bcdc:	4b36      	ldr	r3, [pc, #216]	@ (800bdb8 <tx_control+0x1450>)
 800bcde:	791b      	ldrb	r3, [r3, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d000      	beq.n	800bce6 <tx_control+0x137e>
 800bce4:	e0aa      	b.n	800be3c <tx_control+0x14d4>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800bce6:	4b33      	ldr	r3, [pc, #204]	@ (800bdb4 <tx_control+0x144c>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b4a      	cmp	r3, #74	@ 0x4a
 800bcec:	d000      	beq.n	800bcf0 <tx_control+0x1388>
 800bcee:	e0a8      	b.n	800be42 <tx_control+0x14da>
			resulh = RxBuffer_Ble[2];	// ld		resulh,a
 800bcf0:	4b22      	ldr	r3, [pc, #136]	@ (800bd7c <tx_control+0x1414>)
 800bcf2:	789a      	ldrb	r2, [r3, #2]
 800bcf4:	4b38      	ldr	r3, [pc, #224]	@ (800bdd8 <tx_control+0x1470>)
 800bcf6:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[3];	// ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800bcf8:	4b20      	ldr	r3, [pc, #128]	@ (800bd7c <tx_control+0x1414>)
 800bcfa:	78da      	ldrb	r2, [r3, #3]
 800bcfc:	4b37      	ldr	r3, [pc, #220]	@ (800bddc <tx_control+0x1474>)
 800bcfe:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[4];// ld		tempo2,a
 800bd00:	4b1e      	ldr	r3, [pc, #120]	@ (800bd7c <tx_control+0x1414>)
 800bd02:	791a      	ldrb	r2, [r3, #4]
 800bd04:	4b36      	ldr	r3, [pc, #216]	@ (800bde0 <tx_control+0x1478>)
 800bd06:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[5]; // ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800bd08:	4b1c      	ldr	r3, [pc, #112]	@ (800bd7c <tx_control+0x1414>)
 800bd0a:	795a      	ldrb	r2, [r3, #5]
 800bd0c:	4b35      	ldr	r3, [pc, #212]	@ (800bde4 <tx_control+0x147c>)
 800bd0e:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1)) != ((uint16_t)(chksumFirm_HW_LW & 0x0000FFFF))){		// jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800bd10:	4b33      	ldr	r3, [pc, #204]	@ (800bde0 <tx_control+0x1478>)
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	021b      	lsls	r3, r3, #8
 800bd16:	b21a      	sxth	r2, r3
 800bd18:	4b32      	ldr	r3, [pc, #200]	@ (800bde4 <tx_control+0x147c>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b21b      	sxth	r3, r3
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	b21a      	sxth	r2, r3
 800bd22:	4b29      	ldr	r3, [pc, #164]	@ (800bdc8 <tx_control+0x1460>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	b21b      	sxth	r3, r3
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d11b      	bne.n	800bd64 <tx_control+0x13fc>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksumFirm_HW_LW & 0xFFFF0000)>>16))){//		jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800bd2c:	4b2a      	ldr	r3, [pc, #168]	@ (800bdd8 <tx_control+0x1470>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	021b      	lsls	r3, r3, #8
 800bd32:	b21a      	sxth	r2, r3
 800bd34:	4b29      	ldr	r3, [pc, #164]	@ (800bddc <tx_control+0x1474>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	b21b      	sxth	r3, r3
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	b21a      	sxth	r2, r3
 800bd3e:	4b22      	ldr	r3, [pc, #136]	@ (800bdc8 <tx_control+0x1460>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	0c1b      	lsrs	r3, r3, #16
 800bd44:	b21b      	sxth	r3, r3
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d10e      	bne.n	800bd68 <tx_control+0x1400>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800bd4a:	4b1e      	ldr	r3, [pc, #120]	@ (800bdc4 <tx_control+0x145c>)
 800bd4c:	22f1      	movs	r2, #241	@ 0xf1
 800bd4e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800bd50:	4b1c      	ldr	r3, [pc, #112]	@ (800bdc4 <tx_control+0x145c>)
 800bd52:	223d      	movs	r2, #61	@ 0x3d
 800bd54:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800bd56:	4b18      	ldr	r3, [pc, #96]	@ (800bdb8 <tx_control+0x1450>)
 800bd58:	2201      	movs	r2, #1
 800bd5a:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800bd5c:	4b1c      	ldr	r3, [pc, #112]	@ (800bdd0 <tx_control+0x1468>)
 800bd5e:	2205      	movs	r2, #5
 800bd60:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800bd62:	e051      	b.n	800be08 <tx_control+0x14a0>
				goto rxFirmErr;
 800bd64:	46c0      	nop			@ (mov r8, r8)
 800bd66:	e000      	b.n	800bd6a <tx_control+0x1402>
				goto rxFirmErr;
 800bd68:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800bd6a:	4b16      	ldr	r3, [pc, #88]	@ (800bdc4 <tx_control+0x145c>)
 800bd6c:	22f1      	movs	r2, #241	@ 0xf1
 800bd6e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800bd70:	4b14      	ldr	r3, [pc, #80]	@ (800bdc4 <tx_control+0x145c>)
 800bd72:	223e      	movs	r2, #62	@ 0x3e
 800bd74:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800bd76:	2300      	movs	r3, #0
 800bd78:	623b      	str	r3, [r7, #32]
 800bd7a:	e03f      	b.n	800bdfc <tx_control+0x1494>
 800bd7c:	200008f0 	.word	0x200008f0
 800bd80:	0803f000 	.word	0x0803f000
 800bd84:	20000d70 	.word	0x20000d70
 800bd88:	20000cc8 	.word	0x20000cc8
 800bd8c:	20000cd0 	.word	0x20000cd0
 800bd90:	20000ccc 	.word	0x20000ccc
 800bd94:	20000d1c 	.word	0x20000d1c
 800bd98:	20000d58 	.word	0x20000d58
 800bd9c:	20000d50 	.word	0x20000d50
 800bda0:	20000d48 	.word	0x20000d48
 800bda4:	20000d4c 	.word	0x20000d4c
 800bda8:	20000d1d 	.word	0x20000d1d
 800bdac:	20000d6c 	.word	0x20000d6c
 800bdb0:	20000d55 	.word	0x20000d55
 800bdb4:	20000d60 	.word	0x20000d60
 800bdb8:	20000e18 	.word	0x20000e18
 800bdbc:	20000e0c 	.word	0x20000e0c
 800bdc0:	20000e0d 	.word	0x20000e0d
 800bdc4:	20000cf0 	.word	0x20000cf0
 800bdc8:	20000e10 	.word	0x20000e10
 800bdcc:	20000cf1 	.word	0x20000cf1
 800bdd0:	20000e22 	.word	0x20000e22
 800bdd4:	20000a93 	.word	0x20000a93
 800bdd8:	20000a85 	.word	0x20000a85
 800bddc:	20000a86 	.word	0x20000a86
 800bde0:	20000a8c 	.word	0x20000a8c
 800bde4:	20000a8d 	.word	0x20000a8d
 800bde8:	08037000 	.word	0x08037000
				flagsRxFirm[i]=0;
 800bdec:	4adf      	ldr	r2, [pc, #892]	@ (800c16c <tx_control+0x1804>)
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	18d3      	adds	r3, r2, r3
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	623b      	str	r3, [r7, #32]
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	2b07      	cmp	r3, #7
 800be00:	ddf4      	ble.n	800bdec <tx_control+0x1484>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800be02:	4bdb      	ldr	r3, [pc, #876]	@ (800c170 <tx_control+0x1808>)
 800be04:	2200      	movs	r2, #0
 800be06:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800be08:	4bda      	ldr	r3, [pc, #872]	@ (800c174 <tx_control+0x180c>)
 800be0a:	4adb      	ldr	r2, [pc, #876]	@ (800c178 <tx_control+0x1810>)
 800be0c:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800be0e:	4bdb      	ldr	r3, [pc, #876]	@ (800c17c <tx_control+0x1814>)
 800be10:	4ad9      	ldr	r2, [pc, #868]	@ (800c178 <tx_control+0x1810>)
 800be12:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800be14:	4bda      	ldr	r3, [pc, #872]	@ (800c180 <tx_control+0x1818>)
 800be16:	4adb      	ldr	r2, [pc, #876]	@ (800c184 <tx_control+0x181c>)
 800be18:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800be1a:	4bdb      	ldr	r3, [pc, #876]	@ (800c188 <tx_control+0x1820>)
 800be1c:	2202      	movs	r2, #2
 800be1e:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800be20:	4bda      	ldr	r3, [pc, #872]	@ (800c18c <tx_control+0x1824>)
 800be22:	2201      	movs	r2, #1
 800be24:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800be26:	4bda      	ldr	r3, [pc, #872]	@ (800c190 <tx_control+0x1828>)
 800be28:	2255      	movs	r2, #85	@ 0x55
 800be2a:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800be2c:	4bd0      	ldr	r3, [pc, #832]	@ (800c170 <tx_control+0x1808>)
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800be32:	f000 fc7c 	bl	800c72e <tx_control+0x1dc6>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800be36:	46c0      	nop			@ (mov r8, r8)
 800be38:	f000 fc79 	bl	800c72e <tx_control+0x1dc6>
				goto end_rx_firmware;
 800be3c:	46c0      	nop			@ (mov r8, r8)
 800be3e:	f000 fc76 	bl	800c72e <tx_control+0x1dc6>
					goto end_rx_firmware;
 800be42:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800be44:	f000 fc73 	bl	800c72e <tx_control+0x1dc6>
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800be48:	4bd2      	ldr	r3, [pc, #840]	@ (800c194 <tx_control+0x182c>)
 800be4a:	22aa      	movs	r2, #170	@ 0xaa
 800be4c:	701a      	strb	r2, [r3, #0]
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800be4e:	4bd2      	ldr	r3, [pc, #840]	@ (800c198 <tx_control+0x1830>)
 800be50:	4ad2      	ldr	r2, [pc, #840]	@ (800c19c <tx_control+0x1834>)
 800be52:	601a      	str	r2, [r3, #0]
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800be54:	4bd2      	ldr	r3, [pc, #840]	@ (800c1a0 <tx_control+0x1838>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	01db      	lsls	r3, r3, #7
 800be5a:	001a      	movs	r2, r3
 800be5c:	4bd1      	ldr	r3, [pc, #836]	@ (800c1a4 <tx_control+0x183c>)
 800be5e:	18d2      	adds	r2, r2, r3
 800be60:	4bd1      	ldr	r3, [pc, #836]	@ (800c1a8 <tx_control+0x1840>)
 800be62:	601a      	str	r2, [r3, #0]
			cntBloqFirm++; // inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800be64:	4bce      	ldr	r3, [pc, #824]	@ (800c1a0 <tx_control+0x1838>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	4bcc      	ldr	r3, [pc, #816]	@ (800c1a0 <tx_control+0x1838>)
 800be6e:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm!= 0){ // jrne	tx_clean_logger_loop
 800be70:	4bcb      	ldr	r3, [pc, #812]	@ (800c1a0 <tx_control+0x1838>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d000      	beq.n	800be7a <tx_control+0x1512>
				goto tx_clean_logger_loop;
 800be78:	e7e6      	b.n	800be48 <tx_control+0x14e0>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800be7a:	4bbf      	ldr	r3, [pc, #764]	@ (800c178 <tx_control+0x1810>)
 800be7c:	22f1      	movs	r2, #241	@ 0xf1
 800be7e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800be80:	4bbd      	ldr	r3, [pc, #756]	@ (800c178 <tx_control+0x1810>)
 800be82:	223d      	movs	r2, #61	@ 0x3d
 800be84:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800be86:	4bc9      	ldr	r3, [pc, #804]	@ (800c1ac <tx_control+0x1844>)
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800be8c:	4bc8      	ldr	r3, [pc, #800]	@ (800c1b0 <tx_control+0x1848>)
 800be8e:	2200      	movs	r2, #0
 800be90:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800be92:	4bc8      	ldr	r3, [pc, #800]	@ (800c1b4 <tx_control+0x184c>)
 800be94:	2200      	movs	r2, #0
 800be96:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800be98:	4bc7      	ldr	r3, [pc, #796]	@ (800c1b8 <tx_control+0x1850>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800be9e:	4bc7      	ldr	r3, [pc, #796]	@ (800c1bc <tx_control+0x1854>)
 800bea0:	4abe      	ldr	r2, [pc, #760]	@ (800c19c <tx_control+0x1834>)
 800bea2:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800bea4:	4bc6      	ldr	r3, [pc, #792]	@ (800c1c0 <tx_control+0x1858>)
 800bea6:	4ac7      	ldr	r2, [pc, #796]	@ (800c1c4 <tx_control+0x185c>)
 800bea8:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800beaa:	4bc1      	ldr	r3, [pc, #772]	@ (800c1b0 <tx_control+0x1848>)
 800beac:	781a      	ldrb	r2, [r3, #0]
 800beae:	4bc6      	ldr	r3, [pc, #792]	@ (800c1c8 <tx_control+0x1860>)
 800beb0:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800beb2:	f7f8 fafb 	bl	80044ac <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800beb6:	4bc1      	ldr	r3, [pc, #772]	@ (800c1bc <tx_control+0x1854>)
 800beb8:	4ac4      	ldr	r2, [pc, #784]	@ (800c1cc <tx_control+0x1864>)
 800beba:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800bebc:	4bc0      	ldr	r3, [pc, #768]	@ (800c1c0 <tx_control+0x1858>)
 800bebe:	4ab9      	ldr	r2, [pc, #740]	@ (800c1a4 <tx_control+0x183c>)
 800bec0:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800bec2:	4bbd      	ldr	r3, [pc, #756]	@ (800c1b8 <tx_control+0x1850>)
 800bec4:	781a      	ldrb	r2, [r3, #0]
 800bec6:	4bc0      	ldr	r3, [pc, #768]	@ (800c1c8 <tx_control+0x1860>)
 800bec8:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800beca:	f7f8 faef 	bl	80044ac <load_next_buffer>
			for(int i = 0; i<8; i++)
 800bece:	2300      	movs	r3, #0
 800bed0:	61fb      	str	r3, [r7, #28]
 800bed2:	e007      	b.n	800bee4 <tx_control+0x157c>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800bed4:	4abe      	ldr	r2, [pc, #760]	@ (800c1d0 <tx_control+0x1868>)
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	18d3      	adds	r3, r2, r3
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	3301      	adds	r3, #1
 800bee2:	61fb      	str	r3, [r7, #28]
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2b07      	cmp	r3, #7
 800bee8:	ddf4      	ble.n	800bed4 <tx_control+0x156c>
			goto ok_clean_logger; //jp		ok_clean_logger
 800beea:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800beec:	4ba1      	ldr	r3, [pc, #644]	@ (800c174 <tx_control+0x180c>)
 800beee:	4aa2      	ldr	r2, [pc, #648]	@ (800c178 <tx_control+0x1810>)
 800bef0:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800bef2:	4ba2      	ldr	r3, [pc, #648]	@ (800c17c <tx_control+0x1814>)
 800bef4:	4aa0      	ldr	r2, [pc, #640]	@ (800c178 <tx_control+0x1810>)
 800bef6:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800bef8:	4ba1      	ldr	r3, [pc, #644]	@ (800c180 <tx_control+0x1818>)
 800befa:	4aa2      	ldr	r2, [pc, #648]	@ (800c184 <tx_control+0x181c>)
 800befc:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800befe:	4ba2      	ldr	r3, [pc, #648]	@ (800c188 <tx_control+0x1820>)
 800bf00:	2202      	movs	r2, #2
 800bf02:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800bf04:	4ba1      	ldr	r3, [pc, #644]	@ (800c18c <tx_control+0x1824>)
 800bf06:	2201      	movs	r2, #1
 800bf08:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800bf0a:	4ba1      	ldr	r3, [pc, #644]	@ (800c190 <tx_control+0x1828>)
 800bf0c:	2255      	movs	r2, #85	@ 0x55
 800bf0e:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800bf10:	4b97      	ldr	r3, [pc, #604]	@ (800c170 <tx_control+0x1808>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800bf16:	f000 fc0a 	bl	800c72e <tx_control+0x1dc6>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800bf1a:	4bae      	ldr	r3, [pc, #696]	@ (800c1d4 <tx_control+0x186c>)
 800bf1c:	789a      	ldrb	r2, [r3, #2]
 800bf1e:	4bae      	ldr	r3, [pc, #696]	@ (800c1d8 <tx_control+0x1870>)
 800bf20:	701a      	strb	r2, [r3, #0]
			waux = eeEstado1; // mov		waux,eeEstado1;				/ carga estados actuales
 800bf22:	4bae      	ldr	r3, [pc, #696]	@ (800c1dc <tx_control+0x1874>)
 800bf24:	781a      	ldrb	r2, [r3, #0]
 800bf26:	4bae      	ldr	r3, [pc, #696]	@ (800c1e0 <tx_control+0x1878>)
 800bf28:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800bf2a:	4bab      	ldr	r3, [pc, #684]	@ (800c1d8 <tx_control+0x1870>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	001a      	movs	r2, r3
 800bf30:	2301      	movs	r3, #1
 800bf32:	4013      	ands	r3, r2
 800bf34:	d00d      	beq.n	800bf52 <tx_control+0x15ea>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800bf36:	4baa      	ldr	r3, [pc, #680]	@ (800c1e0 <tx_control+0x1878>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	4053      	eors	r3, r2
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	4ba7      	ldr	r3, [pc, #668]	@ (800c1e0 <tx_control+0x1878>)
 800bf42:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800bf44:	4ba7      	ldr	r3, [pc, #668]	@ (800c1e4 <tx_control+0x187c>)
 800bf46:	22fa      	movs	r2, #250	@ 0xfa
 800bf48:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800bf4a:	4ba7      	ldr	r3, [pc, #668]	@ (800c1e8 <tx_control+0x1880>)
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	701a      	strb	r2, [r3, #0]
 800bf50:	e000      	b.n	800bf54 <tx_control+0x15ec>
				goto chk_est1_b1;
 800bf52:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800bf54:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800bf56:	4ba0      	ldr	r3, [pc, #640]	@ (800c1d8 <tx_control+0x1870>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	001a      	movs	r2, r3
 800bf5c:	2304      	movs	r3, #4
 800bf5e:	4013      	ands	r3, r2
 800bf60:	d027      	beq.n	800bfb2 <tx_control+0x164a>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800bf62:	4ba2      	ldr	r3, [pc, #648]	@ (800c1ec <tx_control+0x1884>)
 800bf64:	799b      	ldrb	r3, [r3, #6]
 800bf66:	2201      	movs	r2, #1
 800bf68:	4053      	eors	r3, r2
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	1e5a      	subs	r2, r3, #1
 800bf6e:	4193      	sbcs	r3, r2
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	4b9e      	ldr	r3, [pc, #632]	@ (800c1ec <tx_control+0x1884>)
 800bf74:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800bf76:	4b9a      	ldr	r3, [pc, #616]	@ (800c1e0 <tx_control+0x1878>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	2204      	movs	r2, #4
 800bf7c:	4393      	bics	r3, r2
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	4b97      	ldr	r3, [pc, #604]	@ (800c1e0 <tx_control+0x1878>)
 800bf82:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800bf84:	4b99      	ldr	r3, [pc, #612]	@ (800c1ec <tx_control+0x1884>)
 800bf86:	799b      	ldrb	r3, [r3, #6]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	4053      	eors	r3, r2
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d107      	bne.n	800bfa2 <tx_control+0x163a>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800bf92:	4b93      	ldr	r3, [pc, #588]	@ (800c1e0 <tx_control+0x1878>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2204      	movs	r2, #4
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	4b90      	ldr	r3, [pc, #576]	@ (800c1e0 <tx_control+0x1878>)
 800bf9e:	701a      	strb	r2, [r3, #0]
 800bfa0:	e000      	b.n	800bfa4 <tx_control+0x163c>
				goto chk_est1_b2_01;
 800bfa2:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800bfa4:	4b8f      	ldr	r3, [pc, #572]	@ (800c1e4 <tx_control+0x187c>)
 800bfa6:	22fa      	movs	r2, #250	@ 0xfa
 800bfa8:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800bfaa:	4b8f      	ldr	r3, [pc, #572]	@ (800c1e8 <tx_control+0x1880>)
 800bfac:	2202      	movs	r2, #2
 800bfae:	701a      	strb	r2, [r3, #0]
 800bfb0:	e000      	b.n	800bfb4 <tx_control+0x164c>
				goto chk_est1_b3;
 800bfb2:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800bfb4:	4b88      	ldr	r3, [pc, #544]	@ (800c1d8 <tx_control+0x1870>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	001a      	movs	r2, r3
 800bfba:	2308      	movs	r3, #8
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	d019      	beq.n	800bff4 <tx_control+0x168c>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800bfc0:	4b8a      	ldr	r3, [pc, #552]	@ (800c1ec <tx_control+0x1884>)
 800bfc2:	789b      	ldrb	r3, [r3, #2]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <tx_control+0x166e>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800bfc8:	4b89      	ldr	r3, [pc, #548]	@ (800c1f0 <tx_control+0x1888>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800bfce:	4b89      	ldr	r3, [pc, #548]	@ (800c1f4 <tx_control+0x188c>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800bfd4:	e00f      	b.n	800bff6 <tx_control+0x168e>
				goto chk_est1_b3_01;
 800bfd6:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800bfd8:	4b87      	ldr	r3, [pc, #540]	@ (800c1f8 <tx_control+0x1890>)
 800bfda:	22f0      	movs	r2, #240	@ 0xf0
 800bfdc:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800bfde:	4b83      	ldr	r3, [pc, #524]	@ (800c1ec <tx_control+0x1884>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800bfe4:	4b81      	ldr	r3, [pc, #516]	@ (800c1ec <tx_control+0x1884>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800bfea:	f7f8 fa15 	bl	8004418 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800bfee:	f7f8 fa2f 	bl	8004450 <load_tiempoAhorro2>
 800bff2:	e000      	b.n	800bff6 <tx_control+0x168e>
				goto chk_est1_b4;
 800bff4:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800bff6:	4b78      	ldr	r3, [pc, #480]	@ (800c1d8 <tx_control+0x1870>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	001a      	movs	r2, r3
 800bffc:	2310      	movs	r3, #16
 800bffe:	4013      	ands	r3, r2
 800c000:	d003      	beq.n	800c00a <tx_control+0x16a2>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800c002:	4b7e      	ldr	r3, [pc, #504]	@ (800c1fc <tx_control+0x1894>)
 800c004:	2201      	movs	r2, #1
 800c006:	711a      	strb	r2, [r3, #4]
 800c008:	e000      	b.n	800c00c <tx_control+0x16a4>
				goto chk_est1_b5;
 800c00a:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800c00c:	4b72      	ldr	r3, [pc, #456]	@ (800c1d8 <tx_control+0x1870>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	001a      	movs	r2, r3
 800c012:	2320      	movs	r3, #32
 800c014:	4013      	ands	r3, r2
 800c016:	d002      	beq.n	800c01e <tx_control+0x16b6>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800c018:	f7f8 fb3e 	bl	8004698 <ld_alarmDelay>
 800c01c:	e000      	b.n	800c020 <tx_control+0x16b8>
				goto chk_est1_b6;
 800c01e:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800c020:	4b6d      	ldr	r3, [pc, #436]	@ (800c1d8 <tx_control+0x1870>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	001a      	movs	r2, r3
 800c026:	2340      	movs	r3, #64	@ 0x40
 800c028:	4013      	ands	r3, r2
 800c02a:	d00d      	beq.n	800c048 <tx_control+0x16e0>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800c02c:	4b6c      	ldr	r3, [pc, #432]	@ (800c1e0 <tx_control+0x1878>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2240      	movs	r2, #64	@ 0x40
 800c032:	4053      	eors	r3, r2
 800c034:	b2da      	uxtb	r2, r3
 800c036:	4b6a      	ldr	r3, [pc, #424]	@ (800c1e0 <tx_control+0x1878>)
 800c038:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800c03a:	4b6a      	ldr	r3, [pc, #424]	@ (800c1e4 <tx_control+0x187c>)
 800c03c:	22fa      	movs	r2, #250	@ 0xfa
 800c03e:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800c040:	4b69      	ldr	r3, [pc, #420]	@ (800c1e8 <tx_control+0x1880>)
 800c042:	2203      	movs	r2, #3
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	e000      	b.n	800c04a <tx_control+0x16e2>
				goto chk_est1_b7;
 800c048:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800c04a:	4b65      	ldr	r3, [pc, #404]	@ (800c1e0 <tx_control+0x1878>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	001a      	movs	r2, r3
 800c050:	4b62      	ldr	r3, [pc, #392]	@ (800c1dc <tx_control+0x1874>)
 800c052:	0019      	movs	r1, r3
 800c054:	0010      	movs	r0, r2
 800c056:	f7f8 fc97 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg ); 			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800c05a:	4b69      	ldr	r3, [pc, #420]	@ (800c200 <tx_control+0x1898>)
 800c05c:	0018      	movs	r0, r3
 800c05e:	f006 fceb 	bl	8012a38 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800c062:	4b45      	ldr	r3, [pc, #276]	@ (800c178 <tx_control+0x1810>)
 800c064:	22f1      	movs	r2, #241	@ 0xf1
 800c066:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c068:	4b43      	ldr	r3, [pc, #268]	@ (800c178 <tx_control+0x1810>)
 800c06a:	223d      	movs	r2, #61	@ 0x3d
 800c06c:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800c06e:	e005      	b.n	800c07c <tx_control+0x1714>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800c070:	4b41      	ldr	r3, [pc, #260]	@ (800c178 <tx_control+0x1810>)
 800c072:	22f1      	movs	r2, #241	@ 0xf1
 800c074:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c076:	4b40      	ldr	r3, [pc, #256]	@ (800c178 <tx_control+0x1810>)
 800c078:	223d      	movs	r2, #61	@ 0x3d
 800c07a:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800c07c:	4b3d      	ldr	r3, [pc, #244]	@ (800c174 <tx_control+0x180c>)
 800c07e:	4a3e      	ldr	r2, [pc, #248]	@ (800c178 <tx_control+0x1810>)
 800c080:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800c082:	4b3e      	ldr	r3, [pc, #248]	@ (800c17c <tx_control+0x1814>)
 800c084:	4a3c      	ldr	r2, [pc, #240]	@ (800c178 <tx_control+0x1810>)
 800c086:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800c088:	4b3d      	ldr	r3, [pc, #244]	@ (800c180 <tx_control+0x1818>)
 800c08a:	4a3e      	ldr	r2, [pc, #248]	@ (800c184 <tx_control+0x181c>)
 800c08c:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800c08e:	4b3e      	ldr	r3, [pc, #248]	@ (800c188 <tx_control+0x1820>)
 800c090:	2202      	movs	r2, #2
 800c092:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800c094:	4b3d      	ldr	r3, [pc, #244]	@ (800c18c <tx_control+0x1824>)
 800c096:	2201      	movs	r2, #1
 800c098:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c09a:	4b3d      	ldr	r3, [pc, #244]	@ (800c190 <tx_control+0x1828>)
 800c09c:	2255      	movs	r2, #85	@ 0x55
 800c09e:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800c0a0:	4b33      	ldr	r3, [pc, #204]	@ (800c170 <tx_control+0x1808>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800c0a6:	e342      	b.n	800c72e <tx_control+0x1dc6>
			estado1[k] = ((eeEstado1>>k) & 0x1);
 800c0a8:	4b4c      	ldr	r3, [pc, #304]	@ (800c1dc <tx_control+0x1874>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	001a      	movs	r2, r3
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	411a      	asrs	r2, r3
 800c0b2:	0013      	movs	r3, r2
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	4013      	ands	r3, r2
 800c0b8:	1e5a      	subs	r2, r3, #1
 800c0ba:	4193      	sbcs	r3, r2
 800c0bc:	b2d9      	uxtb	r1, r3
 800c0be:	4a4f      	ldr	r2, [pc, #316]	@ (800c1fc <tx_control+0x1894>)
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	18d3      	adds	r3, r2, r3
 800c0c4:	1c0a      	adds	r2, r1, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	61bb      	str	r3, [r7, #24]
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	2b07      	cmp	r3, #7
 800c0d2:	dde9      	ble.n	800c0a8 <tx_control+0x1740>
estado1_b1:
 800c0d4:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800c0d6:	4b49      	ldr	r3, [pc, #292]	@ (800c1fc <tx_control+0x1894>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800c0dc:	4b49      	ldr	r3, [pc, #292]	@ (800c204 <tx_control+0x189c>)
 800c0de:	78db      	ldrb	r3, [r3, #3]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	4053      	eors	r3, r2
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <tx_control+0x178a>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800c0ea:	4b44      	ldr	r3, [pc, #272]	@ (800c1fc <tx_control+0x1894>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	705a      	strb	r2, [r3, #1]
 800c0f0:	e000      	b.n	800c0f4 <tx_control+0x178c>
			goto estado1_b2;
 800c0f2:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800c0f4:	4b41      	ldr	r3, [pc, #260]	@ (800c1fc <tx_control+0x1894>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800c0fa:	4b43      	ldr	r3, [pc, #268]	@ (800c208 <tx_control+0x18a0>)
 800c0fc:	789b      	ldrb	r3, [r3, #2]
 800c0fe:	2201      	movs	r2, #1
 800c100:	4053      	eors	r3, r2
 800c102:	b2db      	uxtb	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d103      	bne.n	800c110 <tx_control+0x17a8>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800c108:	4b3c      	ldr	r3, [pc, #240]	@ (800c1fc <tx_control+0x1894>)
 800c10a:	2201      	movs	r2, #1
 800c10c:	709a      	strb	r2, [r3, #2]
 800c10e:	e000      	b.n	800c112 <tx_control+0x17aa>
			goto estado1_b3;
 800c110:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800c112:	4b3a      	ldr	r3, [pc, #232]	@ (800c1fc <tx_control+0x1894>)
 800c114:	2200      	movs	r2, #0
 800c116:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800c118:	4b34      	ldr	r3, [pc, #208]	@ (800c1ec <tx_control+0x1884>)
 800c11a:	789b      	ldrb	r3, [r3, #2]
 800c11c:	2201      	movs	r2, #1
 800c11e:	4053      	eors	r3, r2
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b00      	cmp	r3, #0
 800c124:	d103      	bne.n	800c12e <tx_control+0x17c6>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800c126:	4b35      	ldr	r3, [pc, #212]	@ (800c1fc <tx_control+0x1894>)
 800c128:	2201      	movs	r2, #1
 800c12a:	70da      	strb	r2, [r3, #3]
 800c12c:	e000      	b.n	800c130 <tx_control+0x17c8>
			goto estado1_b4;
 800c12e:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800c130:	4b32      	ldr	r3, [pc, #200]	@ (800c1fc <tx_control+0x1894>)
 800c132:	2200      	movs	r2, #0
 800c134:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800c136:	4b35      	ldr	r3, [pc, #212]	@ (800c20c <tx_control+0x18a4>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2201      	movs	r2, #1
 800c13c:	4053      	eors	r3, r2
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b00      	cmp	r3, #0
 800c142:	d103      	bne.n	800c14c <tx_control+0x17e4>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800c144:	4b2d      	ldr	r3, [pc, #180]	@ (800c1fc <tx_control+0x1894>)
 800c146:	2201      	movs	r2, #1
 800c148:	715a      	strb	r2, [r3, #5]
 800c14a:	e000      	b.n	800c14e <tx_control+0x17e6>
			goto estado1_b6;
 800c14c:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800c14e:	4b2b      	ldr	r3, [pc, #172]	@ (800c1fc <tx_control+0x1894>)
 800c150:	2200      	movs	r2, #0
 800c152:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800c154:	4b2c      	ldr	r3, [pc, #176]	@ (800c208 <tx_control+0x18a0>)
 800c156:	785b      	ldrb	r3, [r3, #1]
 800c158:	2201      	movs	r2, #1
 800c15a:	4053      	eors	r3, r2
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d156      	bne.n	800c210 <tx_control+0x18a8>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800c162:	4b26      	ldr	r3, [pc, #152]	@ (800c1fc <tx_control+0x1894>)
 800c164:	2201      	movs	r2, #1
 800c166:	719a      	strb	r2, [r3, #6]
 800c168:	e053      	b.n	800c212 <tx_control+0x18aa>
 800c16a:	46c0      	nop			@ (mov r8, r8)
 800c16c:	20000e18 	.word	0x20000e18
 800c170:	20000d60 	.word	0x20000d60
 800c174:	20000d50 	.word	0x20000d50
 800c178:	20000cf0 	.word	0x20000cf0
 800c17c:	20000d48 	.word	0x20000d48
 800c180:	20000d4c 	.word	0x20000d4c
 800c184:	20000cf1 	.word	0x20000cf1
 800c188:	20000d6c 	.word	0x20000d6c
 800c18c:	20000d58 	.word	0x20000d58
 800c190:	20000d55 	.word	0x20000d55
 800c194:	20000cc8 	.word	0x20000cc8
 800c198:	20000cd0 	.word	0x20000cd0
 800c19c:	20000bc8 	.word	0x20000bc8
 800c1a0:	20000e0d 	.word	0x20000e0d
 800c1a4:	08037000 	.word	0x08037000
 800c1a8:	20000ccc 	.word	0x20000ccc
 800c1ac:	20000ce8 	.word	0x20000ce8
 800c1b0:	20000ce9 	.word	0x20000ce9
 800c1b4:	20000cea 	.word	0x20000cea
 800c1b8:	20000ceb 	.word	0x20000ceb
 800c1bc:	20000ce0 	.word	0x20000ce0
 800c1c0:	20000cdc 	.word	0x20000cdc
 800c1c4:	0803c000 	.word	0x0803c000
 800c1c8:	20000cd6 	.word	0x20000cd6
 800c1cc:	20000c48 	.word	0x20000c48
 800c1d0:	20000e04 	.word	0x20000e04
 800c1d4:	200008f0 	.word	0x200008f0
 800c1d8:	20000a93 	.word	0x20000a93
 800c1dc:	0803f083 	.word	0x0803f083
 800c1e0:	20000a92 	.word	0x20000a92
 800c1e4:	20000fa0 	.word	0x20000fa0
 800c1e8:	20000fa1 	.word	0x20000fa1
 800c1ec:	20000b78 	.word	0x20000b78
 800c1f0:	20000b6c 	.word	0x20000b6c
 800c1f4:	20000b6e 	.word	0x20000b6e
 800c1f8:	20000afe 	.word	0x20000afe
 800c1fc:	20000f80 	.word	0x20000f80
 800c200:	200004b8 	.word	0x200004b8
 800c204:	20000ab4 	.word	0x20000ab4
 800c208:	20000ae0 	.word	0x20000ae0
 800c20c:	20000ed4 	.word	0x20000ed4
			goto estado1_b7;
 800c210:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800c212:	4bef      	ldr	r3, [pc, #956]	@ (800c5d0 <tx_control+0x1c68>)
 800c214:	2204      	movs	r2, #4
 800c216:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800c218:	4bee      	ldr	r3, [pc, #952]	@ (800c5d4 <tx_control+0x1c6c>)
 800c21a:	227b      	movs	r2, #123	@ 0x7b
 800c21c:	5c9a      	ldrb	r2, [r3, r2]
 800c21e:	4bee      	ldr	r3, [pc, #952]	@ (800c5d8 <tx_control+0x1c70>)
 800c220:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800c222:	4bec      	ldr	r3, [pc, #944]	@ (800c5d4 <tx_control+0x1c6c>)
 800c224:	227c      	movs	r2, #124	@ 0x7c
 800c226:	5c9a      	ldrb	r2, [r3, r2]
 800c228:	4beb      	ldr	r3, [pc, #940]	@ (800c5d8 <tx_control+0x1c70>)
 800c22a:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800c22c:	4bea      	ldr	r3, [pc, #936]	@ (800c5d8 <tx_control+0x1c70>)
 800c22e:	2200      	movs	r2, #0
 800c230:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800c232:	4be9      	ldr	r3, [pc, #932]	@ (800c5d8 <tx_control+0x1c70>)
 800c234:	2200      	movs	r2, #0
 800c236:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800c238:	4be7      	ldr	r3, [pc, #924]	@ (800c5d8 <tx_control+0x1c70>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800c23e:	4be6      	ldr	r3, [pc, #920]	@ (800c5d8 <tx_control+0x1c70>)
 800c240:	2201      	movs	r2, #1
 800c242:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800c244:	4be4      	ldr	r3, [pc, #912]	@ (800c5d8 <tx_control+0x1c70>)
 800c246:	2205      	movs	r2, #5
 800c248:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800c24a:	4be1      	ldr	r3, [pc, #900]	@ (800c5d0 <tx_control+0x1c68>)
 800c24c:	781a      	ldrb	r2, [r3, #0]
 800c24e:	4be2      	ldr	r3, [pc, #904]	@ (800c5d8 <tx_control+0x1c70>)
 800c250:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800c252:	4be2      	ldr	r3, [pc, #904]	@ (800c5dc <tx_control+0x1c74>)
 800c254:	2201      	movs	r2, #1
 800c256:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800c258:	4be1      	ldr	r3, [pc, #900]	@ (800c5e0 <tx_control+0x1c78>)
 800c25a:	2208      	movs	r2, #8
 800c25c:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800c25e:	4ae1      	ldr	r2, [pc, #900]	@ (800c5e4 <tx_control+0x1c7c>)
 800c260:	4bdd      	ldr	r3, [pc, #884]	@ (800c5d8 <tx_control+0x1c70>)
 800c262:	0011      	movs	r1, r2
 800c264:	0018      	movs	r0, r3
 800c266:	f7f8 fa41 	bl	80046ec <copyVector>
		bufferTxControl[8] = 0;
 800c26a:	4bde      	ldr	r3, [pc, #888]	@ (800c5e4 <tx_control+0x1c7c>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800c270:	4bdc      	ldr	r3, [pc, #880]	@ (800c5e4 <tx_control+0x1c7c>)
 800c272:	2200      	movs	r2, #0
 800c274:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800c276:	4bdb      	ldr	r3, [pc, #876]	@ (800c5e4 <tx_control+0x1c7c>)
 800c278:	2200      	movs	r2, #0
 800c27a:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800c27c:	4bd9      	ldr	r3, [pc, #868]	@ (800c5e4 <tx_control+0x1c7c>)
 800c27e:	2200      	movs	r2, #0
 800c280:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800c282:	2300      	movs	r3, #0
 800c284:	617b      	str	r3, [r7, #20]
 800c286:	e03e      	b.n	800c306 <tx_control+0x199e>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800c288:	4bd6      	ldr	r3, [pc, #856]	@ (800c5e4 <tx_control+0x1c7c>)
 800c28a:	7a1a      	ldrb	r2, [r3, #8]
 800c28c:	49d6      	ldr	r1, [pc, #856]	@ (800c5e8 <tx_control+0x1c80>)
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	18cb      	adds	r3, r1, r3
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	0019      	movs	r1, r3
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	4099      	lsls	r1, r3
 800c29a:	000b      	movs	r3, r1
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	4bd0      	ldr	r3, [pc, #832]	@ (800c5e4 <tx_control+0x1c7c>)
 800c2a4:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800c2a6:	4bcf      	ldr	r3, [pc, #828]	@ (800c5e4 <tx_control+0x1c7c>)
 800c2a8:	7a5a      	ldrb	r2, [r3, #9]
 800c2aa:	49d0      	ldr	r1, [pc, #832]	@ (800c5ec <tx_control+0x1c84>)
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	18cb      	adds	r3, r1, r3
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	0019      	movs	r1, r3
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	4099      	lsls	r1, r3
 800c2b8:	000b      	movs	r3, r1
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	4bc8      	ldr	r3, [pc, #800]	@ (800c5e4 <tx_control+0x1c7c>)
 800c2c2:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800c2c4:	4bc7      	ldr	r3, [pc, #796]	@ (800c5e4 <tx_control+0x1c7c>)
 800c2c6:	7a9a      	ldrb	r2, [r3, #10]
 800c2c8:	49c9      	ldr	r1, [pc, #804]	@ (800c5f0 <tx_control+0x1c88>)
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	18cb      	adds	r3, r1, r3
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	0019      	movs	r1, r3
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	4099      	lsls	r1, r3
 800c2d6:	000b      	movs	r3, r1
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	4bc1      	ldr	r3, [pc, #772]	@ (800c5e4 <tx_control+0x1c7c>)
 800c2e0:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800c2e2:	4bc0      	ldr	r3, [pc, #768]	@ (800c5e4 <tx_control+0x1c7c>)
 800c2e4:	7ada      	ldrb	r2, [r3, #11]
 800c2e6:	49c3      	ldr	r1, [pc, #780]	@ (800c5f4 <tx_control+0x1c8c>)
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	18cb      	adds	r3, r1, r3
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	0019      	movs	r1, r3
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	4099      	lsls	r1, r3
 800c2f4:	000b      	movs	r3, r1
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	4bb9      	ldr	r3, [pc, #740]	@ (800c5e4 <tx_control+0x1c7c>)
 800c2fe:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	3301      	adds	r3, #1
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b07      	cmp	r3, #7
 800c30a:	ddbd      	ble.n	800c288 <tx_control+0x1920>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800c30c:	4bba      	ldr	r3, [pc, #744]	@ (800c5f8 <tx_control+0x1c90>)
 800c30e:	2200      	movs	r2, #0
 800c310:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800c312:	4bb3      	ldr	r3, [pc, #716]	@ (800c5e0 <tx_control+0x1c78>)
 800c314:	2200      	movs	r2, #0
 800c316:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800c318:	4bb8      	ldr	r3, [pc, #736]	@ (800c5fc <tx_control+0x1c94>)
 800c31a:	220c      	movs	r2, #12
 800c31c:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800c31e:	4bb7      	ldr	r3, [pc, #732]	@ (800c5fc <tx_control+0x1c94>)
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	001a      	movs	r2, r3
 800c324:	4baf      	ldr	r3, [pc, #700]	@ (800c5e4 <tx_control+0x1c7c>)
 800c326:	0011      	movs	r1, r2
 800c328:	0018      	movs	r0, r3
 800c32a:	f7f8 f991 	bl	8004650 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800c32e:	4bb2      	ldr	r3, [pc, #712]	@ (800c5f8 <tx_control+0x1c90>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	0e1b      	lsrs	r3, r3, #24
 800c334:	b2da      	uxtb	r2, r3
 800c336:	4bab      	ldr	r3, [pc, #684]	@ (800c5e4 <tx_control+0x1c7c>)
 800c338:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800c33a:	4baf      	ldr	r3, [pc, #700]	@ (800c5f8 <tx_control+0x1c90>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	0c1b      	lsrs	r3, r3, #16
 800c340:	b2da      	uxtb	r2, r3
 800c342:	4ba8      	ldr	r3, [pc, #672]	@ (800c5e4 <tx_control+0x1c7c>)
 800c344:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800c346:	4bac      	ldr	r3, [pc, #688]	@ (800c5f8 <tx_control+0x1c90>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	0a1b      	lsrs	r3, r3, #8
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	4ba5      	ldr	r3, [pc, #660]	@ (800c5e4 <tx_control+0x1c7c>)
 800c350:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800c352:	4ba9      	ldr	r3, [pc, #676]	@ (800c5f8 <tx_control+0x1c90>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	b2da      	uxtb	r2, r3
 800c358:	4ba2      	ldr	r3, [pc, #648]	@ (800c5e4 <tx_control+0x1c7c>)
 800c35a:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800c35c:	4ba8      	ldr	r3, [pc, #672]	@ (800c600 <tx_control+0x1c98>)
 800c35e:	4aa1      	ldr	r2, [pc, #644]	@ (800c5e4 <tx_control+0x1c7c>)
 800c360:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800c362:	4ba8      	ldr	r3, [pc, #672]	@ (800c604 <tx_control+0x1c9c>)
 800c364:	4a9f      	ldr	r2, [pc, #636]	@ (800c5e4 <tx_control+0x1c7c>)
 800c366:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800c368:	4ba7      	ldr	r3, [pc, #668]	@ (800c608 <tx_control+0x1ca0>)
 800c36a:	4aa8      	ldr	r2, [pc, #672]	@ (800c60c <tx_control+0x1ca4>)
 800c36c:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800c36e:	4b98      	ldr	r3, [pc, #608]	@ (800c5d0 <tx_control+0x1c68>)
 800c370:	2210      	movs	r2, #16
 800c372:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800c374:	4b99      	ldr	r3, [pc, #612]	@ (800c5dc <tx_control+0x1c74>)
 800c376:	2200      	movs	r2, #0
 800c378:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800c37a:	4b98      	ldr	r3, [pc, #608]	@ (800c5dc <tx_control+0x1c74>)
 800c37c:	2201      	movs	r2, #1
 800c37e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c380:	4ba3      	ldr	r3, [pc, #652]	@ (800c610 <tx_control+0x1ca8>)
 800c382:	2255      	movs	r2, #85	@ 0x55
 800c384:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800c386:	4ba3      	ldr	r3, [pc, #652]	@ (800c614 <tx_control+0x1cac>)
 800c388:	2200      	movs	r2, #0
 800c38a:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800c38c:	e1cf      	b.n	800c72e <tx_control+0x1dc6>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800c38e:	4ba2      	ldr	r3, [pc, #648]	@ (800c618 <tx_control+0x1cb0>)
 800c390:	22f1      	movs	r2, #241	@ 0xf1
 800c392:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c394:	4ba0      	ldr	r3, [pc, #640]	@ (800c618 <tx_control+0x1cb0>)
 800c396:	223d      	movs	r2, #61	@ 0x3d
 800c398:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800c39a:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800c39c:	4b98      	ldr	r3, [pc, #608]	@ (800c600 <tx_control+0x1c98>)
 800c39e:	4a9e      	ldr	r2, [pc, #632]	@ (800c618 <tx_control+0x1cb0>)
 800c3a0:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800c3a2:	4b98      	ldr	r3, [pc, #608]	@ (800c604 <tx_control+0x1c9c>)
 800c3a4:	4a9c      	ldr	r2, [pc, #624]	@ (800c618 <tx_control+0x1cb0>)
 800c3a6:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800c3a8:	4b97      	ldr	r3, [pc, #604]	@ (800c608 <tx_control+0x1ca0>)
 800c3aa:	4a9c      	ldr	r2, [pc, #624]	@ (800c61c <tx_control+0x1cb4>)
 800c3ac:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800c3ae:	4b88      	ldr	r3, [pc, #544]	@ (800c5d0 <tx_control+0x1c68>)
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800c3b4:	4b89      	ldr	r3, [pc, #548]	@ (800c5dc <tx_control+0x1c74>)
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c3ba:	4b95      	ldr	r3, [pc, #596]	@ (800c610 <tx_control+0x1ca8>)
 800c3bc:	2255      	movs	r2, #85	@ 0x55
 800c3be:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800c3c0:	4b94      	ldr	r3, [pc, #592]	@ (800c614 <tx_control+0x1cac>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800c3c6:	e1b2      	b.n	800c72e <tx_control+0x1dc6>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800c3c8:	4b95      	ldr	r3, [pc, #596]	@ (800c620 <tx_control+0x1cb8>)
 800c3ca:	789b      	ldrb	r3, [r3, #2]
 800c3cc:	001a      	movs	r2, r3
 800c3ce:	4b95      	ldr	r3, [pc, #596]	@ (800c624 <tx_control+0x1cbc>)
 800c3d0:	0019      	movs	r1, r3
 800c3d2:	0010      	movs	r0, r2
 800c3d4:	f7f8 fad8 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );  // MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800c3d8:	4b93      	ldr	r3, [pc, #588]	@ (800c628 <tx_control+0x1cc0>)
 800c3da:	0018      	movs	r0, r3
 800c3dc:	f006 fb2c 	bl	8012a38 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800c3e0:	4b8f      	ldr	r3, [pc, #572]	@ (800c620 <tx_control+0x1cb8>)
 800c3e2:	78db      	ldrb	r3, [r3, #3]
 800c3e4:	001a      	movs	r2, r3
 800c3e6:	4b91      	ldr	r3, [pc, #580]	@ (800c62c <tx_control+0x1cc4>)
 800c3e8:	0019      	movs	r1, r3
 800c3ea:	0010      	movs	r0, r2
 800c3ec:	f7f8 facc 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800c3f0:	4b8d      	ldr	r3, [pc, #564]	@ (800c628 <tx_control+0x1cc0>)
 800c3f2:	0018      	movs	r0, r3
 800c3f4:	f006 fb20 	bl	8012a38 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 800c3f8:	4b89      	ldr	r3, [pc, #548]	@ (800c620 <tx_control+0x1cb8>)
 800c3fa:	791b      	ldrb	r3, [r3, #4]
 800c3fc:	001a      	movs	r2, r3
 800c3fe:	4b8c      	ldr	r3, [pc, #560]	@ (800c630 <tx_control+0x1cc8>)
 800c400:	0019      	movs	r1, r3
 800c402:	0010      	movs	r0, r2
 800c404:	f7f8 fac0 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800c408:	4b87      	ldr	r3, [pc, #540]	@ (800c628 <tx_control+0x1cc0>)
 800c40a:	0018      	movs	r0, r3
 800c40c:	f006 fb14 	bl	8012a38 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 800c410:	4b83      	ldr	r3, [pc, #524]	@ (800c620 <tx_control+0x1cb8>)
 800c412:	795b      	ldrb	r3, [r3, #5]
 800c414:	001a      	movs	r2, r3
 800c416:	4b87      	ldr	r3, [pc, #540]	@ (800c634 <tx_control+0x1ccc>)
 800c418:	0019      	movs	r1, r3
 800c41a:	0010      	movs	r0, r2
 800c41c:	f7f8 fab4 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800c420:	4b81      	ldr	r3, [pc, #516]	@ (800c628 <tx_control+0x1cc0>)
 800c422:	0018      	movs	r0, r3
 800c424:	f006 fb08 	bl	8012a38 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 800c428:	4b7d      	ldr	r3, [pc, #500]	@ (800c620 <tx_control+0x1cb8>)
 800c42a:	799b      	ldrb	r3, [r3, #6]
 800c42c:	001a      	movs	r2, r3
 800c42e:	4b82      	ldr	r3, [pc, #520]	@ (800c638 <tx_control+0x1cd0>)
 800c430:	0019      	movs	r1, r3
 800c432:	0010      	movs	r0, r2
 800c434:	f7f8 faa8 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800c438:	4b7b      	ldr	r3, [pc, #492]	@ (800c628 <tx_control+0x1cc0>)
 800c43a:	0018      	movs	r0, r3
 800c43c:	f006 fafc 	bl	8012a38 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 800c440:	4b77      	ldr	r3, [pc, #476]	@ (800c620 <tx_control+0x1cb8>)
 800c442:	79db      	ldrb	r3, [r3, #7]
 800c444:	001a      	movs	r2, r3
 800c446:	4b7d      	ldr	r3, [pc, #500]	@ (800c63c <tx_control+0x1cd4>)
 800c448:	0019      	movs	r1, r3
 800c44a:	0010      	movs	r0, r2
 800c44c:	f7f8 fa9c 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800c450:	4b75      	ldr	r3, [pc, #468]	@ (800c628 <tx_control+0x1cc0>)
 800c452:	0018      	movs	r0, r3
 800c454:	f006 faf0 	bl	8012a38 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 800c458:	4b71      	ldr	r3, [pc, #452]	@ (800c620 <tx_control+0x1cb8>)
 800c45a:	7a1b      	ldrb	r3, [r3, #8]
 800c45c:	001a      	movs	r2, r3
 800c45e:	4b78      	ldr	r3, [pc, #480]	@ (800c640 <tx_control+0x1cd8>)
 800c460:	0019      	movs	r1, r3
 800c462:	0010      	movs	r0, r2
 800c464:	f7f8 fa90 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800c468:	4b6f      	ldr	r3, [pc, #444]	@ (800c628 <tx_control+0x1cc0>)
 800c46a:	0018      	movs	r0, r3
 800c46c:	f006 fae4 	bl	8012a38 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 800c470:	4b6b      	ldr	r3, [pc, #428]	@ (800c620 <tx_control+0x1cb8>)
 800c472:	7a5b      	ldrb	r3, [r3, #9]
 800c474:	001a      	movs	r2, r3
 800c476:	4b73      	ldr	r3, [pc, #460]	@ (800c644 <tx_control+0x1cdc>)
 800c478:	0019      	movs	r1, r3
 800c47a:	0010      	movs	r0, r2
 800c47c:	f7f8 fa84 	bl	8004988 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800c480:	4b69      	ldr	r3, [pc, #420]	@ (800c628 <tx_control+0x1cc0>)
 800c482:	0018      	movs	r0, r3
 800c484:	f006 fad8 	bl	8012a38 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800c488:	4b63      	ldr	r3, [pc, #396]	@ (800c618 <tx_control+0x1cb0>)
 800c48a:	22f1      	movs	r2, #241	@ 0xf1
 800c48c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c48e:	4b62      	ldr	r3, [pc, #392]	@ (800c618 <tx_control+0x1cb0>)
 800c490:	223d      	movs	r2, #61	@ 0x3d
 800c492:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 800c494:	e005      	b.n	800c4a2 <tx_control+0x1b3a>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800c496:	4b60      	ldr	r3, [pc, #384]	@ (800c618 <tx_control+0x1cb0>)
 800c498:	22f1      	movs	r2, #241	@ 0xf1
 800c49a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800c49c:	4b5e      	ldr	r3, [pc, #376]	@ (800c618 <tx_control+0x1cb0>)
 800c49e:	223e      	movs	r2, #62	@ 0x3e
 800c4a0:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 800c4a2:	4b57      	ldr	r3, [pc, #348]	@ (800c600 <tx_control+0x1c98>)
 800c4a4:	4a5c      	ldr	r2, [pc, #368]	@ (800c618 <tx_control+0x1cb0>)
 800c4a6:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800c4a8:	4b56      	ldr	r3, [pc, #344]	@ (800c604 <tx_control+0x1c9c>)
 800c4aa:	4a5b      	ldr	r2, [pc, #364]	@ (800c618 <tx_control+0x1cb0>)
 800c4ac:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 800c4ae:	4b56      	ldr	r3, [pc, #344]	@ (800c608 <tx_control+0x1ca0>)
 800c4b0:	4a5a      	ldr	r2, [pc, #360]	@ (800c61c <tx_control+0x1cb4>)
 800c4b2:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 800c4b4:	4b46      	ldr	r3, [pc, #280]	@ (800c5d0 <tx_control+0x1c68>)
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 800c4ba:	4b48      	ldr	r3, [pc, #288]	@ (800c5dc <tx_control+0x1c74>)
 800c4bc:	2201      	movs	r2, #1
 800c4be:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c4c0:	4b53      	ldr	r3, [pc, #332]	@ (800c610 <tx_control+0x1ca8>)
 800c4c2:	2255      	movs	r2, #85	@ 0x55
 800c4c4:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 800c4c6:	4b53      	ldr	r3, [pc, #332]	@ (800c614 <tx_control+0x1cac>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800c4cc:	e12f      	b.n	800c72e <tx_control+0x1dc6>
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 800c4ce:	4b54      	ldr	r3, [pc, #336]	@ (800c620 <tx_control+0x1cb8>)
 800c4d0:	789a      	ldrb	r2, [r3, #2]
 800c4d2:	4b5d      	ldr	r3, [pc, #372]	@ (800c648 <tx_control+0x1ce0>)
 800c4d4:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 800c4d6:	4b52      	ldr	r3, [pc, #328]	@ (800c620 <tx_control+0x1cb8>)
 800c4d8:	78da      	ldrb	r2, [r3, #3]
 800c4da:	4b5c      	ldr	r3, [pc, #368]	@ (800c64c <tx_control+0x1ce4>)
 800c4dc:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 800c4de:	4b50      	ldr	r3, [pc, #320]	@ (800c620 <tx_control+0x1cb8>)
 800c4e0:	791a      	ldrb	r2, [r3, #4]
 800c4e2:	4b5b      	ldr	r3, [pc, #364]	@ (800c650 <tx_control+0x1ce8>)
 800c4e4:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 800c4e6:	4b4e      	ldr	r3, [pc, #312]	@ (800c620 <tx_control+0x1cb8>)
 800c4e8:	795a      	ldrb	r2, [r3, #5]
 800c4ea:	4b5a      	ldr	r3, [pc, #360]	@ (800c654 <tx_control+0x1cec>)
 800c4ec:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 800c4ee:	4b4c      	ldr	r3, [pc, #304]	@ (800c620 <tx_control+0x1cb8>)
 800c4f0:	799a      	ldrb	r2, [r3, #6]
 800c4f2:	4b59      	ldr	r3, [pc, #356]	@ (800c658 <tx_control+0x1cf0>)
 800c4f4:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 800c4f6:	4b4a      	ldr	r3, [pc, #296]	@ (800c620 <tx_control+0x1cb8>)
 800c4f8:	79da      	ldrb	r2, [r3, #7]
 800c4fa:	4b58      	ldr	r3, [pc, #352]	@ (800c65c <tx_control+0x1cf4>)
 800c4fc:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 800c4fe:	4b48      	ldr	r3, [pc, #288]	@ (800c620 <tx_control+0x1cb8>)
 800c500:	7a1a      	ldrb	r2, [r3, #8]
 800c502:	4b3e      	ldr	r3, [pc, #248]	@ (800c5fc <tx_control+0x1c94>)
 800c504:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 800c506:	4b3d      	ldr	r3, [pc, #244]	@ (800c5fc <tx_control+0x1c94>)
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	015b      	lsls	r3, r3, #5
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	4b3b      	ldr	r3, [pc, #236]	@ (800c5fc <tx_control+0x1c94>)
 800c510:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 800c512:	4b3a      	ldr	r3, [pc, #232]	@ (800c5fc <tx_control+0x1c94>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	b25b      	sxtb	r3, r3
 800c518:	221f      	movs	r2, #31
 800c51a:	4393      	bics	r3, r2
 800c51c:	b25a      	sxtb	r2, r3
 800c51e:	4b4b      	ldr	r3, [pc, #300]	@ (800c64c <tx_control+0x1ce4>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	b25b      	sxtb	r3, r3
 800c524:	4313      	orrs	r3, r2
 800c526:	b25b      	sxtb	r3, r3
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	4b48      	ldr	r3, [pc, #288]	@ (800c64c <tx_control+0x1ce4>)
 800c52c:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 800c52e:	4b3c      	ldr	r3, [pc, #240]	@ (800c620 <tx_control+0x1cb8>)
 800c530:	7a5a      	ldrb	r2, [r3, #9]
 800c532:	4b32      	ldr	r3, [pc, #200]	@ (800c5fc <tx_control+0x1c94>)
 800c534:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 800c536:	4b47      	ldr	r3, [pc, #284]	@ (800c654 <tx_control+0x1cec>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2240      	movs	r2, #64	@ 0x40
 800c53c:	4393      	bics	r3, r2
 800c53e:	b2da      	uxtb	r2, r3
 800c540:	4b44      	ldr	r3, [pc, #272]	@ (800c654 <tx_control+0x1cec>)
 800c542:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 800c544:	4b40      	ldr	r3, [pc, #256]	@ (800c648 <tx_control+0x1ce0>)
 800c546:	781a      	ldrb	r2, [r3, #0]
 800c548:	4b45      	ldr	r3, [pc, #276]	@ (800c660 <tx_control+0x1cf8>)
 800c54a:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 800c54c:	4b3f      	ldr	r3, [pc, #252]	@ (800c64c <tx_control+0x1ce4>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	221f      	movs	r2, #31
 800c552:	4013      	ands	r3, r2
 800c554:	b2da      	uxtb	r2, r3
 800c556:	4b42      	ldr	r3, [pc, #264]	@ (800c660 <tx_control+0x1cf8>)
 800c558:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 800c55a:	4b3d      	ldr	r3, [pc, #244]	@ (800c650 <tx_control+0x1ce8>)
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	4b40      	ldr	r3, [pc, #256]	@ (800c660 <tx_control+0x1cf8>)
 800c560:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 800c562:	4b3a      	ldr	r3, [pc, #232]	@ (800c64c <tx_control+0x1ce4>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	095b      	lsrs	r3, r3, #5
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	4b3d      	ldr	r3, [pc, #244]	@ (800c660 <tx_control+0x1cf8>)
 800c56c:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 800c56e:	493c      	ldr	r1, [pc, #240]	@ (800c660 <tx_control+0x1cf8>)
 800c570:	4b3c      	ldr	r3, [pc, #240]	@ (800c664 <tx_control+0x1cfc>)
 800c572:	2201      	movs	r2, #1
 800c574:	0018      	movs	r0, r3
 800c576:	f008 fb15 	bl	8014ba4 <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 800c57a:	4b36      	ldr	r3, [pc, #216]	@ (800c654 <tx_control+0x1cec>)
 800c57c:	781a      	ldrb	r2, [r3, #0]
 800c57e:	4b3a      	ldr	r3, [pc, #232]	@ (800c668 <tx_control+0x1d00>)
 800c580:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 800c582:	4b35      	ldr	r3, [pc, #212]	@ (800c658 <tx_control+0x1cf0>)
 800c584:	781a      	ldrb	r2, [r3, #0]
 800c586:	4b38      	ldr	r3, [pc, #224]	@ (800c668 <tx_control+0x1d00>)
 800c588:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 800c58a:	4b34      	ldr	r3, [pc, #208]	@ (800c65c <tx_control+0x1cf4>)
 800c58c:	781a      	ldrb	r2, [r3, #0]
 800c58e:	4b36      	ldr	r3, [pc, #216]	@ (800c668 <tx_control+0x1d00>)
 800c590:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 800c592:	4b23      	ldr	r3, [pc, #140]	@ (800c620 <tx_control+0x1cb8>)
 800c594:	7a5a      	ldrb	r2, [r3, #9]
 800c596:	4b34      	ldr	r3, [pc, #208]	@ (800c668 <tx_control+0x1d00>)
 800c598:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c59a:	4b33      	ldr	r3, [pc, #204]	@ (800c668 <tx_control+0x1d00>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c5a0:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <tx_control+0x1d00>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 800c5a6:	4930      	ldr	r1, [pc, #192]	@ (800c668 <tx_control+0x1d00>)
 800c5a8:	4b2e      	ldr	r3, [pc, #184]	@ (800c664 <tx_control+0x1cfc>)
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	0018      	movs	r0, r3
 800c5ae:	f008 f9d5 	bl	801495c <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 800c5b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c65c <tx_control+0x1cf4>)
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	4b2d      	ldr	r3, [pc, #180]	@ (800c66c <tx_control+0x1d04>)
 800c5b8:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=1;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 800c5ba:	4b2d      	ldr	r3, [pc, #180]	@ (800c670 <tx_control+0x1d08>)
 800c5bc:	2201      	movs	r2, #1
 800c5be:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800c5c0:	4b15      	ldr	r3, [pc, #84]	@ (800c618 <tx_control+0x1cb0>)
 800c5c2:	22f1      	movs	r2, #241	@ 0xf1
 800c5c4:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800c5c6:	4b14      	ldr	r3, [pc, #80]	@ (800c618 <tx_control+0x1cb0>)
 800c5c8:	223d      	movs	r2, #61	@ 0x3d
 800c5ca:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 800c5cc:	e058      	b.n	800c680 <tx_control+0x1d18>
 800c5ce:	46c0      	nop			@ (mov r8, r8)
 800c5d0:	20000d6c 	.word	0x20000d6c
 800c5d4:	200000bc 	.word	0x200000bc
 800c5d8:	20000d14 	.word	0x20000d14
 800c5dc:	20000d58 	.word	0x20000d58
 800c5e0:	20000a93 	.word	0x20000a93
 800c5e4:	20000ee4 	.word	0x20000ee4
 800c5e8:	20000f80 	.word	0x20000f80
 800c5ec:	20000f88 	.word	0x20000f88
 800c5f0:	20000f90 	.word	0x20000f90
 800c5f4:	20000f98 	.word	0x20000f98
 800c5f8:	20000d70 	.word	0x20000d70
 800c5fc:	20000a92 	.word	0x20000a92
 800c600:	20000d50 	.word	0x20000d50
 800c604:	20000d48 	.word	0x20000d48
 800c608:	20000d4c 	.word	0x20000d4c
 800c60c:	20000ef4 	.word	0x20000ef4
 800c610:	20000d55 	.word	0x20000d55
 800c614:	20000d60 	.word	0x20000d60
 800c618:	20000cf0 	.word	0x20000cf0
 800c61c:	20000cf1 	.word	0x20000cf1
 800c620:	200008f0 	.word	0x200008f0
 800c624:	0803f088 	.word	0x0803f088
 800c628:	200004b8 	.word	0x200004b8
 800c62c:	0803f089 	.word	0x0803f089
 800c630:	0803f08a 	.word	0x0803f08a
 800c634:	0803f08b 	.word	0x0803f08b
 800c638:	0803f08c 	.word	0x0803f08c
 800c63c:	0803f08d 	.word	0x0803f08d
 800c640:	0803f08e 	.word	0x0803f08e
 800c644:	0803f08f 	.word	0x0803f08f
 800c648:	20000fac 	.word	0x20000fac
 800c64c:	20000fad 	.word	0x20000fad
 800c650:	20000fae 	.word	0x20000fae
 800c654:	20000faf 	.word	0x20000faf
 800c658:	20000fb0 	.word	0x20000fb0
 800c65c:	20000fb1 	.word	0x20000fb1
 800c660:	20000fc8 	.word	0x20000fc8
 800c664:	200004cc 	.word	0x200004cc
 800c668:	20000fb4 	.word	0x20000fb4
 800c66c:	20001025 	.word	0x20001025
 800c670:	20000fa4 	.word	0x20000fa4
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 800c674:	4be1      	ldr	r3, [pc, #900]	@ (800c9fc <tx_control+0x2094>)
 800c676:	22f1      	movs	r2, #241	@ 0xf1
 800c678:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800c67a:	4be0      	ldr	r3, [pc, #896]	@ (800c9fc <tx_control+0x2094>)
 800c67c:	223e      	movs	r2, #62	@ 0x3e
 800c67e:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 800c680:	4bdf      	ldr	r3, [pc, #892]	@ (800ca00 <tx_control+0x2098>)
 800c682:	4ade      	ldr	r2, [pc, #888]	@ (800c9fc <tx_control+0x2094>)
 800c684:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800c686:	4bdf      	ldr	r3, [pc, #892]	@ (800ca04 <tx_control+0x209c>)
 800c688:	4adc      	ldr	r2, [pc, #880]	@ (800c9fc <tx_control+0x2094>)
 800c68a:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 800c68c:	4bde      	ldr	r3, [pc, #888]	@ (800ca08 <tx_control+0x20a0>)
 800c68e:	4adf      	ldr	r2, [pc, #892]	@ (800ca0c <tx_control+0x20a4>)
 800c690:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 800c692:	4bdf      	ldr	r3, [pc, #892]	@ (800ca10 <tx_control+0x20a8>)
 800c694:	2202      	movs	r2, #2
 800c696:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 800c698:	4bde      	ldr	r3, [pc, #888]	@ (800ca14 <tx_control+0x20ac>)
 800c69a:	2201      	movs	r2, #1
 800c69c:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c69e:	4bde      	ldr	r3, [pc, #888]	@ (800ca18 <tx_control+0x20b0>)
 800c6a0:	2255      	movs	r2, #85	@ 0x55
 800c6a2:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800c6a4:	4bdd      	ldr	r3, [pc, #884]	@ (800ca1c <tx_control+0x20b4>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800c6aa:	e040      	b.n	800c72e <tx_control+0x1dc6>
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800c6ac:	4bdc      	ldr	r3, [pc, #880]	@ (800ca20 <tx_control+0x20b8>)
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	701a      	strb	r2, [r3, #0]
			pointTx = &typeClock ;				// ldw		pointTx,X
 800c6b2:	4bd3      	ldr	r3, [pc, #844]	@ (800ca00 <tx_control+0x2098>)
 800c6b4:	4ada      	ldr	r2, [pc, #872]	@ (800ca20 <tx_control+0x20b8>)
 800c6b6:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800c6b8:	4bd2      	ldr	r3, [pc, #840]	@ (800ca04 <tx_control+0x209c>)
 800c6ba:	4ad9      	ldr	r2, [pc, #868]	@ (800ca20 <tx_control+0x20b8>)
 800c6bc:	601a      	str	r2, [r3, #0]
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800c6be:	4bd1      	ldr	r3, [pc, #836]	@ (800ca04 <tx_control+0x209c>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	4bd0      	ldr	r3, [pc, #832]	@ (800ca08 <tx_control+0x20a0>)
 800c6c6:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800c6c8:	4bd1      	ldr	r3, [pc, #836]	@ (800ca10 <tx_control+0x20a8>)
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800c6ce:	4bd5      	ldr	r3, [pc, #852]	@ (800ca24 <tx_control+0x20bc>)
 800c6d0:	227b      	movs	r2, #123	@ 0x7b
 800c6d2:	5c9a      	ldrb	r2, [r3, r2]
 800c6d4:	4bd4      	ldr	r3, [pc, #848]	@ (800ca28 <tx_control+0x20c0>)
 800c6d6:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800c6d8:	4bd2      	ldr	r3, [pc, #840]	@ (800ca24 <tx_control+0x20bc>)
 800c6da:	227c      	movs	r2, #124	@ 0x7c
 800c6dc:	5c9a      	ldrb	r2, [r3, r2]
 800c6de:	4bd2      	ldr	r3, [pc, #840]	@ (800ca28 <tx_control+0x20c0>)
 800c6e0:	705a      	strb	r2, [r3, #1]
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800c6e2:	4bd1      	ldr	r3, [pc, #836]	@ (800ca28 <tx_control+0x20c0>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800c6e8:	4bcf      	ldr	r3, [pc, #828]	@ (800ca28 <tx_control+0x20c0>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	70da      	strb	r2, [r3, #3]
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800c6ee:	4bce      	ldr	r3, [pc, #824]	@ (800ca28 <tx_control+0x20c0>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800c6f4:	4bcc      	ldr	r3, [pc, #816]	@ (800ca28 <tx_control+0x20c0>)
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	715a      	strb	r2, [r3, #5]
			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800c6fa:	4bcb      	ldr	r3, [pc, #812]	@ (800ca28 <tx_control+0x20c0>)
 800c6fc:	2209      	movs	r2, #9
 800c6fe:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800c700:	4bc3      	ldr	r3, [pc, #780]	@ (800ca10 <tx_control+0x20a8>)
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	4bc8      	ldr	r3, [pc, #800]	@ (800ca28 <tx_control+0x20c0>)
 800c706:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800c708:	4bc2      	ldr	r3, [pc, #776]	@ (800ca14 <tx_control+0x20ac>)
 800c70a:	2201      	movs	r2, #1
 800c70c:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800c70e:	4bc7      	ldr	r3, [pc, #796]	@ (800ca2c <tx_control+0x20c4>)
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800c714:	4bbf      	ldr	r3, [pc, #764]	@ (800ca14 <tx_control+0x20ac>)
 800c716:	2200      	movs	r2, #0
 800c718:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c71a:	4bbf      	ldr	r3, [pc, #764]	@ (800ca18 <tx_control+0x20b0>)
 800c71c:	2255      	movs	r2, #85	@ 0x55
 800c71e:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800c720:	4bbe      	ldr	r3, [pc, #760]	@ (800ca1c <tx_control+0x20b4>)
 800c722:	2200      	movs	r2, #0
 800c724:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800c726:	e002      	b.n	800c72e <tx_control+0x1dc6>
		goto end_tx_control;//	jp end_tx_control
 800c728:	46c0      	nop			@ (mov r8, r8)
 800c72a:	e000      	b.n	800c72e <tx_control+0x1dc6>
			goto end_tx_control;		//jp		end_tx_control
 800c72c:	46c0      	nop			@ (mov r8, r8)
		if (!keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 800c72e:	4bba      	ldr	r3, [pc, #744]	@ (800ca18 <tx_control+0x20b0>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d01b      	beq.n	800c76e <tx_control+0x1e06>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 800c736:	4bbe      	ldr	r3, [pc, #760]	@ (800ca30 <tx_control+0x20c8>)
 800c738:	791b      	ldrb	r3, [r3, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	4053      	eors	r3, r2
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b00      	cmp	r3, #0
 800c742:	d103      	bne.n	800c74c <tx_control+0x1de4>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 800c744:	4bbb      	ldr	r3, [pc, #748]	@ (800ca34 <tx_control+0x20cc>)
 800c746:	22aa      	movs	r2, #170	@ 0xaa
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	e000      	b.n	800c74e <tx_control+0x1de6>
			goto ask_resetLoopTx;
 800c74c:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 800c74e:	4bba      	ldr	r3, [pc, #744]	@ (800ca38 <tx_control+0x20d0>)
 800c750:	791b      	ldrb	r3, [r3, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <tx_control+0x1e02>
resetLoopTx:
 800c756:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 800c758:	4bae      	ldr	r3, [pc, #696]	@ (800ca14 <tx_control+0x20ac>)
 800c75a:	795b      	ldrb	r3, [r3, #5]
 800c75c:	2201      	movs	r2, #1
 800c75e:	4053      	eors	r3, r2
 800c760:	b2db      	uxtb	r3, r3
 800c762:	2b00      	cmp	r3, #0
 800c764:	d106      	bne.n	800c774 <tx_control+0x1e0c>
		asm ("nop");
 800c766:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 800c768:	e7f6      	b.n	800c758 <tx_control+0x1df0>
		asm ("nop");
 800c76a:	46c0      	nop			@ (mov r8, r8)
 800c76c:	e7fd      	b.n	800c76a <tx_control+0x1e02>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 800c76e:	46c0      	nop			@ (mov r8, r8)
 800c770:	f001 f821 	bl	800d7b6 <tx_control+0x2e4e>
			goto no_resetLoopTx;
 800c774:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 800c776:	f001 f81e 	bl	800d7b6 <tx_control+0x2e4e>
		}
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 800c77a:	4bb0      	ldr	r3, [pc, #704]	@ (800ca3c <tx_control+0x20d4>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 800c780:	4bae      	ldr	r3, [pc, #696]	@ (800ca3c <tx_control+0x20d4>)
 800c782:	2200      	movs	r2, #0
 800c784:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 800c786:	4bad      	ldr	r3, [pc, #692]	@ (800ca3c <tx_control+0x20d4>)
 800c788:	2200      	movs	r2, #0
 800c78a:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 800c78c:	4bab      	ldr	r3, [pc, #684]	@ (800ca3c <tx_control+0x20d4>)
 800c78e:	2200      	movs	r2, #0
 800c790:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 800c792:	4baa      	ldr	r3, [pc, #680]	@ (800ca3c <tx_control+0x20d4>)
 800c794:	2200      	movs	r2, #0
 800c796:	711a      	strb	r2, [r3, #4]
		goto end_tx_wifi;// jp			end_tx_wifi
 800c798:	f001 f80b 	bl	800d7b2 <tx_control+0x2e4a>

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 800c79c:	4ba7      	ldr	r3, [pc, #668]	@ (800ca3c <tx_control+0x20d4>)
 800c79e:	2201      	movs	r2, #1
 800c7a0:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 800c7a2:	4ba3      	ldr	r3, [pc, #652]	@ (800ca30 <tx_control+0x20c8>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	4053      	eors	r3, r2
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <tx_control+0x1e4c>
 800c7b0:	f000 ffef 	bl	800d792 <tx_control+0x2e2a>
			goto tx_wifi_OK_01;
 800c7b4:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 800c7b6:	4b98      	ldr	r3, [pc, #608]	@ (800ca18 <tx_control+0x20b0>)
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <tx_control+0x1e5a>
 800c7be:	f000 ffeb 	bl	800d798 <tx_control+0x2e30>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 800c7c2:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		if(!flagsWIFI[f_timeLoggerSend]){
 800c7c4:	4b9d      	ldr	r3, [pc, #628]	@ (800ca3c <tx_control+0x20d4>)
 800c7c6:	785b      	ldrb	r3, [r3, #1]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	4053      	eors	r3, r2
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d100      	bne.n	800c7d4 <tx_control+0x1e6c>
 800c7d2:	e1d3      	b.n	800cb7c <tx_control+0x2214>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 800c7d4:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 800c7d6:	4b99      	ldr	r3, [pc, #612]	@ (800ca3c <tx_control+0x20d4>)
 800c7d8:	78db      	ldrb	r3, [r3, #3]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d000      	beq.n	800c7e0 <tx_control+0x1e78>
 800c7de:	e0ad      	b.n	800c93c <tx_control+0x1fd4>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 800c7e0:	4b96      	ldr	r3, [pc, #600]	@ (800ca3c <tx_control+0x20d4>)
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	70da      	strb	r2, [r3, #3]

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 800c7e6:	4b96      	ldr	r3, [pc, #600]	@ (800ca40 <tx_control+0x20d8>)
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	4b96      	ldr	r3, [pc, #600]	@ (800ca44 <tx_control+0x20dc>)
 800c7ec:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 800c7ee:	4b96      	ldr	r3, [pc, #600]	@ (800ca48 <tx_control+0x20e0>)
 800c7f0:	781a      	ldrb	r2, [r3, #0]
 800c7f2:	4b96      	ldr	r3, [pc, #600]	@ (800ca4c <tx_control+0x20e4>)
 800c7f4:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 800c7f6:	4b96      	ldr	r3, [pc, #600]	@ (800ca50 <tx_control+0x20e8>)
 800c7f8:	4a96      	ldr	r2, [pc, #600]	@ (800ca54 <tx_control+0x20ec>)
 800c7fa:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 800c7fc:	4b96      	ldr	r3, [pc, #600]	@ (800ca58 <tx_control+0x20f0>)
 800c7fe:	4a97      	ldr	r2, [pc, #604]	@ (800ca5c <tx_control+0x20f4>)
 800c800:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 800c802:	4b93      	ldr	r3, [pc, #588]	@ (800ca50 <tx_control+0x20e8>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	337e      	adds	r3, #126	@ 0x7e
 800c808:	4a90      	ldr	r2, [pc, #576]	@ (800ca4c <tx_control+0x20e4>)
 800c80a:	7812      	ldrb	r2, [r2, #0]
 800c80c:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800c80e:	4b94      	ldr	r3, [pc, #592]	@ (800ca60 <tx_control+0x20f8>)
 800c810:	22aa      	movs	r2, #170	@ 0xaa
 800c812:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 800c814:	4b90      	ldr	r3, [pc, #576]	@ (800ca58 <tx_control+0x20f0>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a8a      	ldr	r2, [pc, #552]	@ (800ca44 <tx_control+0x20dc>)
 800c81a:	7812      	ldrb	r2, [r2, #0]
 800c81c:	01d2      	lsls	r2, r2, #7
 800c81e:	189a      	adds	r2, r3, r2
 800c820:	4b90      	ldr	r3, [pc, #576]	@ (800ca64 <tx_control+0x20fc>)
 800c822:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800c824:	4b8a      	ldr	r3, [pc, #552]	@ (800ca50 <tx_control+0x20e8>)
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	4b8f      	ldr	r3, [pc, #572]	@ (800ca68 <tx_control+0x2100>)
 800c82a:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800c82c:	f7f7 ff96 	bl	800475c <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 800c830:	4b8e      	ldr	r3, [pc, #568]	@ (800ca6c <tx_control+0x2104>)
 800c832:	881a      	ldrh	r2, [r3, #0]
 800c834:	4b8e      	ldr	r3, [pc, #568]	@ (800ca70 <tx_control+0x2108>)
 800c836:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 800c838:	4b8e      	ldr	r3, [pc, #568]	@ (800ca74 <tx_control+0x210c>)
 800c83a:	4a8f      	ldr	r2, [pc, #572]	@ (800ca78 <tx_control+0x2110>)
 800c83c:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800c83e:	f7f7 fe6f 	bl	8004520 <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 800c842:	f7f7 fea7 	bl	8004594 <save_timeUNIX>

		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800c846:	4b8d      	ldr	r3, [pc, #564]	@ (800ca7c <tx_control+0x2114>)
 800c848:	2240      	movs	r2, #64	@ 0x40
 800c84a:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 800c84c:	4b8b      	ldr	r3, [pc, #556]	@ (800ca7c <tx_control+0x2114>)
 800c84e:	2285      	movs	r2, #133	@ 0x85
 800c850:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
 800c852:	4b8b      	ldr	r3, [pc, #556]	@ (800ca80 <tx_control+0x2118>)
 800c854:	227b      	movs	r2, #123	@ 0x7b
 800c856:	5c9a      	ldrb	r2, [r3, r2]
 800c858:	4b88      	ldr	r3, [pc, #544]	@ (800ca7c <tx_control+0x2114>)
 800c85a:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = eePlantilla[eeversion2];
 800c85c:	4b88      	ldr	r3, [pc, #544]	@ (800ca80 <tx_control+0x2118>)
 800c85e:	227c      	movs	r2, #124	@ 0x7c
 800c860:	5c9a      	ldrb	r2, [r3, r2]
 800c862:	4b86      	ldr	r3, [pc, #536]	@ (800ca7c <tx_control+0x2114>)
 800c864:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 800c866:	4b87      	ldr	r3, [pc, #540]	@ (800ca84 <tx_control+0x211c>)
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	0a1b      	lsrs	r3, r3, #8
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	4b82      	ldr	r3, [pc, #520]	@ (800ca7c <tx_control+0x2114>)
 800c872:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800c874:	4b83      	ldr	r3, [pc, #524]	@ (800ca84 <tx_control+0x211c>)
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b80      	ldr	r3, [pc, #512]	@ (800ca7c <tx_control+0x2114>)
 800c87c:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 800c87e:	4b82      	ldr	r3, [pc, #520]	@ (800ca88 <tx_control+0x2120>)
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	0a1b      	lsrs	r3, r3, #8
 800c884:	b29b      	uxth	r3, r3
 800c886:	b2da      	uxtb	r2, r3
 800c888:	4b7c      	ldr	r3, [pc, #496]	@ (800ca7c <tx_control+0x2114>)
 800c88a:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800c88c:	4b7e      	ldr	r3, [pc, #504]	@ (800ca88 <tx_control+0x2120>)
 800c88e:	881b      	ldrh	r3, [r3, #0]
 800c890:	b2da      	uxtb	r2, r3
 800c892:	4b7a      	ldr	r3, [pc, #488]	@ (800ca7c <tx_control+0x2114>)
 800c894:	71da      	strb	r2, [r3, #7]
		// ldw		X,eeLong1
		//ldw		bufferWifiTx+12,X
		//ldw		X,eeLong3
		//ldw		bufferWifiTx+14,X

		bufferWifiTx[8] = eeLat1;
 800c896:	4b7d      	ldr	r3, [pc, #500]	@ (800ca8c <tx_control+0x2124>)
 800c898:	781a      	ldrb	r2, [r3, #0]
 800c89a:	4b78      	ldr	r3, [pc, #480]	@ (800ca7c <tx_control+0x2114>)
 800c89c:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = eeLat2;
 800c89e:	4b7c      	ldr	r3, [pc, #496]	@ (800ca90 <tx_control+0x2128>)
 800c8a0:	781a      	ldrb	r2, [r3, #0]
 800c8a2:	4b76      	ldr	r3, [pc, #472]	@ (800ca7c <tx_control+0x2114>)
 800c8a4:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = eeLat3;
 800c8a6:	4b7b      	ldr	r3, [pc, #492]	@ (800ca94 <tx_control+0x212c>)
 800c8a8:	781a      	ldrb	r2, [r3, #0]
 800c8aa:	4b74      	ldr	r3, [pc, #464]	@ (800ca7c <tx_control+0x2114>)
 800c8ac:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = eeLat4;
 800c8ae:	4b7a      	ldr	r3, [pc, #488]	@ (800ca98 <tx_control+0x2130>)
 800c8b0:	781a      	ldrb	r2, [r3, #0]
 800c8b2:	4b72      	ldr	r3, [pc, #456]	@ (800ca7c <tx_control+0x2114>)
 800c8b4:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = eeLong1;
 800c8b6:	4b79      	ldr	r3, [pc, #484]	@ (800ca9c <tx_control+0x2134>)
 800c8b8:	781a      	ldrb	r2, [r3, #0]
 800c8ba:	4b70      	ldr	r3, [pc, #448]	@ (800ca7c <tx_control+0x2114>)
 800c8bc:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = eeLong2;
 800c8be:	4b78      	ldr	r3, [pc, #480]	@ (800caa0 <tx_control+0x2138>)
 800c8c0:	781a      	ldrb	r2, [r3, #0]
 800c8c2:	4b6e      	ldr	r3, [pc, #440]	@ (800ca7c <tx_control+0x2114>)
 800c8c4:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = eeLong3;
 800c8c6:	4b77      	ldr	r3, [pc, #476]	@ (800caa4 <tx_control+0x213c>)
 800c8c8:	781a      	ldrb	r2, [r3, #0]
 800c8ca:	4b6c      	ldr	r3, [pc, #432]	@ (800ca7c <tx_control+0x2114>)
 800c8cc:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = eeLong4;
 800c8ce:	4b76      	ldr	r3, [pc, #472]	@ (800caa8 <tx_control+0x2140>)
 800c8d0:	781a      	ldrb	r2, [r3, #0]
 800c8d2:	4b6a      	ldr	r3, [pc, #424]	@ (800ca7c <tx_control+0x2114>)
 800c8d4:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800c8d6:	4b4a      	ldr	r3, [pc, #296]	@ (800ca00 <tx_control+0x2098>)
 800c8d8:	4a68      	ldr	r2, [pc, #416]	@ (800ca7c <tx_control+0x2114>)
 800c8da:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800c8dc:	4b49      	ldr	r3, [pc, #292]	@ (800ca04 <tx_control+0x209c>)
 800c8de:	4a67      	ldr	r2, [pc, #412]	@ (800ca7c <tx_control+0x2114>)
 800c8e0:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 800c8e2:	4b49      	ldr	r3, [pc, #292]	@ (800ca08 <tx_control+0x20a0>)
 800c8e4:	4a71      	ldr	r2, [pc, #452]	@ (800caac <tx_control+0x2144>)
 800c8e6:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 800c8e8:	4b49      	ldr	r3, [pc, #292]	@ (800ca10 <tx_control+0x20a8>)
 800c8ea:	2210      	movs	r2, #16
 800c8ec:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800c8ee:	4b49      	ldr	r3, [pc, #292]	@ (800ca14 <tx_control+0x20ac>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800c8f4:	4b4d      	ldr	r3, [pc, #308]	@ (800ca2c <tx_control+0x20c4>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800c8fa:	4b46      	ldr	r3, [pc, #280]	@ (800ca14 <tx_control+0x20ac>)
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 800c900:	4b45      	ldr	r3, [pc, #276]	@ (800ca18 <tx_control+0x20b0>)
 800c902:	2255      	movs	r2, #85	@ 0x55
 800c904:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800c906:	4b45      	ldr	r3, [pc, #276]	@ (800ca1c <tx_control+0x20b4>)
 800c908:	2200      	movs	r2, #0
 800c90a:	701a      	strb	r2, [r3, #0]
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 800c90c:	4b4c      	ldr	r3, [pc, #304]	@ (800ca40 <tx_control+0x20d8>)
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	4b67      	ldr	r3, [pc, #412]	@ (800cab0 <tx_control+0x2148>)
 800c912:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 800c914:	4b4c      	ldr	r3, [pc, #304]	@ (800ca48 <tx_control+0x20e0>)
 800c916:	781a      	ldrb	r2, [r3, #0]
 800c918:	4b66      	ldr	r3, [pc, #408]	@ (800cab4 <tx_control+0x214c>)
 800c91a:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 800c91c:	4b66      	ldr	r3, [pc, #408]	@ (800cab8 <tx_control+0x2150>)
 800c91e:	2200      	movs	r2, #0
 800c920:	801a      	strh	r2, [r3, #0]
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800c922:	4b66      	ldr	r3, [pc, #408]	@ (800cabc <tx_control+0x2154>)
 800c924:	2203      	movs	r2, #3
 800c926:	701a      	strb	r2, [r3, #0]

		//; Indica cuantos registros se loggearon para mandar unicamente esa cantidad de registros
		// ldw		X,eeCntRegDATA
		// tnzw	X;										/ se logearon registros ?
		if(eeCntRegDATA==0){
 800c928:	4b53      	ldr	r3, [pc, #332]	@ (800ca78 <tx_control+0x2110>)
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d02c      	beq.n	800c98a <tx_control+0x2022>
			goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		}
		numRegTx = eeCntRegDATA;// ldw		numRegTx,X
 800c930:	4b51      	ldr	r3, [pc, #324]	@ (800ca78 <tx_control+0x2110>)
 800c932:	881a      	ldrh	r2, [r3, #0]
 800c934:	4b62      	ldr	r3, [pc, #392]	@ (800cac0 <tx_control+0x2158>)
 800c936:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 800c938:	f000 ff3b 	bl	800d7b2 <tx_control+0x2e4a>
			goto tx_wifi_timeLogger_01;
 800c93c:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 800c93e:	4b37      	ldr	r3, [pc, #220]	@ (800ca1c <tx_control+0x20b4>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b3d      	cmp	r3, #61	@ 0x3d
 800c944:	d00b      	beq.n	800c95e <tx_control+0x1ff6>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 800c946:	4b5d      	ldr	r3, [pc, #372]	@ (800cabc <tx_control+0x2154>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d104      	bne.n	800c958 <tx_control+0x1ff0>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 800c94e:	4b3b      	ldr	r3, [pc, #236]	@ (800ca3c <tx_control+0x20d4>)
 800c950:	2200      	movs	r2, #0
 800c952:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 800c954:	f000 ff2d 	bl	800d7b2 <tx_control+0x2e4a>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 800c958:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 800c95a:	f000 ff2a 	bl	800d7b2 <tx_control+0x2e4a>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 800c95e:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800c960:	4b56      	ldr	r3, [pc, #344]	@ (800cabc <tx_control+0x2154>)
 800c962:	2203      	movs	r2, #3
 800c964:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 800c966:	4b56      	ldr	r3, [pc, #344]	@ (800cac0 <tx_control+0x2158>)
 800c968:	881a      	ldrh	r2, [r3, #0]
 800c96a:	4b53      	ldr	r3, [pc, #332]	@ (800cab8 <tx_control+0x2150>)
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d317      	bcc.n	800c9a2 <tx_control+0x203a>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
		 }

		// clrw	X
		cntRegDATA = 0;// ldw		cntRegDATA,X
 800c972:	4b3e      	ldr	r3, [pc, #248]	@ (800ca6c <tx_control+0x2104>)
 800c974:	2200      	movs	r2, #0
 800c976:	801a      	strh	r2, [r3, #0]
		cntReg = 0;// ldw		cntReg,X
 800c978:	4b3d      	ldr	r3, [pc, #244]	@ (800ca70 <tx_control+0x2108>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 800c97e:	4b3d      	ldr	r3, [pc, #244]	@ (800ca74 <tx_control+0x210c>)
 800c980:	4a3d      	ldr	r2, [pc, #244]	@ (800ca78 <tx_control+0x2110>)
 800c982:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800c984:	f7f7 fdcc 	bl	8004520 <save_cntReg>
 800c988:	e000      	b.n	800c98c <tx_control+0x2024>
			goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
 800c98a:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_END:
		//; indica que ya es enviaron todos los paquetes
		flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
 800c98c:	4b2b      	ldr	r3, [pc, #172]	@ (800ca3c <tx_control+0x20d4>)
 800c98e:	2201      	movs	r2, #1
 800c990:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 800c992:	4b2a      	ldr	r3, [pc, #168]	@ (800ca3c <tx_control+0x20d4>)
 800c994:	2200      	movs	r2, #0
 800c996:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 800c998:	4b4a      	ldr	r3, [pc, #296]	@ (800cac4 <tx_control+0x215c>)
 800c99a:	220a      	movs	r2, #10
 800c99c:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 800c99e:	f000 ff08 	bl	800d7b2 <tx_control+0x2e4a>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 800c9a2:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 800c9a4:	4b35      	ldr	r3, [pc, #212]	@ (800ca7c <tx_control+0x2114>)
 800c9a6:	2240      	movs	r2, #64	@ 0x40
 800c9a8:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 800c9aa:	4b34      	ldr	r3, [pc, #208]	@ (800ca7c <tx_control+0x2114>)
 800c9ac:	2283      	movs	r2, #131	@ 0x83
 800c9ae:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800c9b0:	4b32      	ldr	r3, [pc, #200]	@ (800ca7c <tx_control+0x2114>)
 800c9b2:	2203      	movs	r2, #3
 800c9b4:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
 800c9b6:	4b32      	ldr	r3, [pc, #200]	@ (800ca80 <tx_control+0x2118>)
 800c9b8:	227b      	movs	r2, #123	@ 0x7b
 800c9ba:	5c9a      	ldrb	r2, [r3, r2]
 800c9bc:	4b2f      	ldr	r3, [pc, #188]	@ (800ca7c <tx_control+0x2114>)
 800c9be:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = eePlantilla[eeversion2];
 800c9c0:	4b2f      	ldr	r3, [pc, #188]	@ (800ca80 <tx_control+0x2118>)
 800c9c2:	227c      	movs	r2, #124	@ 0x7c
 800c9c4:	5c9a      	ldrb	r2, [r3, r2]
 800c9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800ca7c <tx_control+0x2114>)
 800c9c8:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 800c9ca:	4b3a      	ldr	r3, [pc, #232]	@ (800cab4 <tx_control+0x214c>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d000      	beq.n	800c9d4 <tx_control+0x206c>
 800c9d2:	e079      	b.n	800cac8 <tx_control+0x2160>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 800c9d4:	4b37      	ldr	r3, [pc, #220]	@ (800cab4 <tx_control+0x214c>)
 800c9d6:	227e      	movs	r2, #126	@ 0x7e
 800c9d8:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 800c9da:	4b35      	ldr	r3, [pc, #212]	@ (800cab0 <tx_control+0x2148>)
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d103      	bne.n	800c9ea <tx_control+0x2082>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 800c9e2:	4b33      	ldr	r3, [pc, #204]	@ (800cab0 <tx_control+0x2148>)
 800c9e4:	2260      	movs	r2, #96	@ 0x60
 800c9e6:	701a      	strb	r2, [r3, #0]
 800c9e8:	e000      	b.n	800c9ec <tx_control+0x2084>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 800c9ea:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 800c9ec:	4b30      	ldr	r3, [pc, #192]	@ (800cab0 <tx_control+0x2148>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	4b2e      	ldr	r3, [pc, #184]	@ (800cab0 <tx_control+0x2148>)
 800c9f6:	701a      	strb	r2, [r3, #0]
 800c9f8:	e067      	b.n	800caca <tx_control+0x2162>
 800c9fa:	46c0      	nop			@ (mov r8, r8)
 800c9fc:	20000cf0 	.word	0x20000cf0
 800ca00:	20000d50 	.word	0x20000d50
 800ca04:	20000d48 	.word	0x20000d48
 800ca08:	20000d4c 	.word	0x20000d4c
 800ca0c:	20000cf1 	.word	0x20000cf1
 800ca10:	20000d6c 	.word	0x20000d6c
 800ca14:	20000d58 	.word	0x20000d58
 800ca18:	20000d55 	.word	0x20000d55
 800ca1c:	20000d60 	.word	0x20000d60
 800ca20:	20000fed 	.word	0x20000fed
 800ca24:	200000bc 	.word	0x200000bc
 800ca28:	20000d14 	.word	0x20000d14
 800ca2c:	20000d70 	.word	0x20000d70
 800ca30:	20000e18 	.word	0x20000e18
 800ca34:	20000e20 	.word	0x20000e20
 800ca38:	20000f80 	.word	0x20000f80
 800ca3c:	20000e8c 	.word	0x20000e8c
 800ca40:	20000ce9 	.word	0x20000ce9
 800ca44:	20000cd6 	.word	0x20000cd6
 800ca48:	20000ce8 	.word	0x20000ce8
 800ca4c:	20000cd7 	.word	0x20000cd7
 800ca50:	20000ce0 	.word	0x20000ce0
 800ca54:	20000bc8 	.word	0x20000bc8
 800ca58:	20000cdc 	.word	0x20000cdc
 800ca5c:	0803c000 	.word	0x0803c000
 800ca60:	20000cc8 	.word	0x20000cc8
 800ca64:	20000ccc 	.word	0x20000ccc
 800ca68:	20000cd0 	.word	0x20000cd0
 800ca6c:	20000f76 	.word	0x20000f76
 800ca70:	20000f7a 	.word	0x20000f7a
 800ca74:	20000f7c 	.word	0x20000f7c
 800ca78:	0803f090 	.word	0x0803f090
 800ca7c:	20000e94 	.word	0x20000e94
 800ca80:	0803f000 	.word	0x0803f000
 800ca84:	20000cec 	.word	0x20000cec
 800ca88:	20000cee 	.word	0x20000cee
 800ca8c:	0803f088 	.word	0x0803f088
 800ca90:	0803f089 	.word	0x0803f089
 800ca94:	0803f08a 	.word	0x0803f08a
 800ca98:	0803f08b 	.word	0x0803f08b
 800ca9c:	0803f08c 	.word	0x0803f08c
 800caa0:	0803f08d 	.word	0x0803f08d
 800caa4:	0803f08e 	.word	0x0803f08e
 800caa8:	0803f08f 	.word	0x0803f08f
 800caac:	20000ea4 	.word	0x20000ea4
 800cab0:	20000eb2 	.word	0x20000eb2
 800cab4:	20000eb3 	.word	0x20000eb3
 800cab8:	20000eb4 	.word	0x20000eb4
 800cabc:	20000eb6 	.word	0x20000eb6
 800cac0:	20000f74 	.word	0x20000f74
 800cac4:	20000eb7 	.word	0x20000eb7
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 800cac8:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 800caca:	4bea      	ldr	r3, [pc, #936]	@ (800ce74 <tx_control+0x250c>)
 800cacc:	63bb      	str	r3, [r7, #56]	@ 0x38
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 800cace:	4bea      	ldr	r3, [pc, #936]	@ (800ce78 <tx_control+0x2510>)
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	01db      	lsls	r3, r3, #7
 800cad4:	4ae9      	ldr	r2, [pc, #932]	@ (800ce7c <tx_control+0x2514>)
 800cad6:	7812      	ldrb	r2, [r2, #0]
 800cad8:	189a      	adds	r2, r3, r2
 800cada:	4be9      	ldr	r3, [pc, #932]	@ (800ce80 <tx_control+0x2518>)
 800cadc:	18d3      	adds	r3, r2, r3
 800cade:	63fb      	str	r3, [r7, #60]	@ 0x3c
		wreg = 0;// clr		wreg
 800cae0:	4be8      	ldr	r3, [pc, #928]	@ (800ce84 <tx_control+0x251c>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 800cae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cae8:	3b01      	subs	r3, #1
 800caea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y--;// decw	Y;											/ decrementa apuntadores
 800caec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caee:	3b01      	subs	r3, #1
 800caf0:	63bb      	str	r3, [r7, #56]	@ 0x38
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 800caf2:	4be2      	ldr	r3, [pc, #904]	@ (800ce7c <tx_control+0x2514>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	4be0      	ldr	r3, [pc, #896]	@ (800ce7c <tx_control+0x2514>)
 800cafc:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 800cafe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cb00:	2380      	movs	r3, #128	@ 0x80
 800cb02:	025b      	lsls	r3, r3, #9
 800cb04:	5cd2      	ldrb	r2, [r2, r3]
 800cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb08:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 800cb0a:	4bde      	ldr	r3, [pc, #888]	@ (800ce84 <tx_control+0x251c>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	4bdc      	ldr	r3, [pc, #880]	@ (800ce84 <tx_control+0x251c>)
 800cb14:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 800cb16:	4bdb      	ldr	r3, [pc, #876]	@ (800ce84 <tx_control+0x251c>)
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	2b08      	cmp	r3, #8
 800cb1c:	d800      	bhi.n	800cb20 <tx_control+0x21b8>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 800cb1e:	e7e2      	b.n	800cae6 <tx_control+0x217e>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 800cb20:	4bd9      	ldr	r3, [pc, #868]	@ (800ce88 <tx_control+0x2520>)
 800cb22:	7b5a      	ldrb	r2, [r3, #13]
 800cb24:	4bd9      	ldr	r3, [pc, #868]	@ (800ce8c <tx_control+0x2524>)
 800cb26:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 800cb28:	4bd7      	ldr	r3, [pc, #860]	@ (800ce88 <tx_control+0x2520>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 800cb2e:	4bd7      	ldr	r3, [pc, #860]	@ (800ce8c <tx_control+0x2524>)
 800cb30:	781a      	ldrb	r2, [r3, #0]
 800cb32:	4bd5      	ldr	r3, [pc, #852]	@ (800ce88 <tx_control+0x2520>)
 800cb34:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800cb36:	4bd6      	ldr	r3, [pc, #856]	@ (800ce90 <tx_control+0x2528>)
 800cb38:	4ad3      	ldr	r2, [pc, #844]	@ (800ce88 <tx_control+0x2520>)
 800cb3a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800cb3c:	4bd5      	ldr	r3, [pc, #852]	@ (800ce94 <tx_control+0x252c>)
 800cb3e:	4ad2      	ldr	r2, [pc, #840]	@ (800ce88 <tx_control+0x2520>)
 800cb40:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 800cb42:	4bd5      	ldr	r3, [pc, #852]	@ (800ce98 <tx_control+0x2530>)
 800cb44:	4ad5      	ldr	r2, [pc, #852]	@ (800ce9c <tx_control+0x2534>)
 800cb46:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 800cb48:	4bd5      	ldr	r3, [pc, #852]	@ (800cea0 <tx_control+0x2538>)
 800cb4a:	220f      	movs	r2, #15
 800cb4c:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800cb4e:	4bd5      	ldr	r3, [pc, #852]	@ (800cea4 <tx_control+0x253c>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800cb54:	4bd4      	ldr	r3, [pc, #848]	@ (800cea8 <tx_control+0x2540>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800cb5a:	4bd2      	ldr	r3, [pc, #840]	@ (800cea4 <tx_control+0x253c>)
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800cb60:	4bd2      	ldr	r3, [pc, #840]	@ (800ceac <tx_control+0x2544>)
 800cb62:	2255      	movs	r2, #85	@ 0x55
 800cb64:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800cb66:	4bd2      	ldr	r3, [pc, #840]	@ (800ceb0 <tx_control+0x2548>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 800cb6c:	4bd1      	ldr	r3, [pc, #836]	@ (800ceb4 <tx_control+0x254c>)
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	4bcf      	ldr	r3, [pc, #828]	@ (800ceb4 <tx_control+0x254c>)
 800cb76:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 800cb78:	f000 fe1b 	bl	800d7b2 <tx_control+0x2e4a>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 800cb7c:	46c0      	nop			@ (mov r8, r8)
		// ;===========================================================
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		if(!flagsWIFI[f_eventLoggerSend]){
 800cb7e:	4bce      	ldr	r3, [pc, #824]	@ (800ceb8 <tx_control+0x2550>)
 800cb80:	789b      	ldrb	r3, [r3, #2]
 800cb82:	2201      	movs	r2, #1
 800cb84:	4053      	eors	r3, r2
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d100      	bne.n	800cb8e <tx_control+0x2226>
 800cb8c:	e1d6      	b.n	800cf3c <tx_control+0x25d4>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 800cb8e:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger:
		//;------------------------------------------------------------
		//;------------- Espera retardo para comenzar con rutina Tx logger eventos
		//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi==0){
 800cb90:	4bca      	ldr	r3, [pc, #808]	@ (800cebc <tx_control+0x2554>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <tx_control+0x2234>
 800cb98:	f000 fe01 	bl	800d79e <tx_control+0x2e36>
			goto tx_wifi_eventDelayAsk;// jreq	tx_wifi_eventDelayAsk
 800cb9c:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 800cb9e:	4bc6      	ldr	r3, [pc, #792]	@ (800ceb8 <tx_control+0x2550>)
 800cba0:	791b      	ldrb	r3, [r3, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d000      	beq.n	800cba8 <tx_control+0x2240>
 800cba6:	e0ac      	b.n	800cd02 <tx_control+0x239a>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 800cba8:	4bc3      	ldr	r3, [pc, #780]	@ (800ceb8 <tx_control+0x2550>)
 800cbaa:	2201      	movs	r2, #1
 800cbac:	711a      	strb	r2, [r3, #4]

		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800cbae:	4bc4      	ldr	r3, [pc, #784]	@ (800cec0 <tx_control+0x2558>)
 800cbb0:	781a      	ldrb	r2, [r3, #0]
 800cbb2:	4bc4      	ldr	r3, [pc, #784]	@ (800cec4 <tx_control+0x255c>)
 800cbb4:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 800cbb6:	4bc4      	ldr	r3, [pc, #784]	@ (800cec8 <tx_control+0x2560>)
 800cbb8:	781a      	ldrb	r2, [r3, #0]
 800cbba:	4bc4      	ldr	r3, [pc, #784]	@ (800cecc <tx_control+0x2564>)
 800cbbc:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 800cbbe:	4bc4      	ldr	r3, [pc, #784]	@ (800ced0 <tx_control+0x2568>)
 800cbc0:	4ac4      	ldr	r2, [pc, #784]	@ (800ced4 <tx_control+0x256c>)
 800cbc2:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 800cbc4:	4bc4      	ldr	r3, [pc, #784]	@ (800ced8 <tx_control+0x2570>)
 800cbc6:	4ac5      	ldr	r2, [pc, #788]	@ (800cedc <tx_control+0x2574>)
 800cbc8:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 800cbca:	4bc0      	ldr	r3, [pc, #768]	@ (800cecc <tx_control+0x2564>)
 800cbcc:	7819      	ldrb	r1, [r3, #0]
 800cbce:	4bc1      	ldr	r3, [pc, #772]	@ (800ced4 <tx_control+0x256c>)
 800cbd0:	227e      	movs	r2, #126	@ 0x7e
 800cbd2:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800cbd4:	4bc2      	ldr	r3, [pc, #776]	@ (800cee0 <tx_control+0x2578>)
 800cbd6:	22aa      	movs	r2, #170	@ 0xaa
 800cbd8:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 800cbda:	4bbf      	ldr	r3, [pc, #764]	@ (800ced8 <tx_control+0x2570>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4ab9      	ldr	r2, [pc, #740]	@ (800cec4 <tx_control+0x255c>)
 800cbe0:	7812      	ldrb	r2, [r2, #0]
 800cbe2:	01d2      	lsls	r2, r2, #7
 800cbe4:	189a      	adds	r2, r3, r2
 800cbe6:	4bbf      	ldr	r3, [pc, #764]	@ (800cee4 <tx_control+0x257c>)
 800cbe8:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800cbea:	4bb9      	ldr	r3, [pc, #740]	@ (800ced0 <tx_control+0x2568>)
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	4bbe      	ldr	r3, [pc, #760]	@ (800cee8 <tx_control+0x2580>)
 800cbf0:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800cbf2:	f7f7 fdb3 	bl	800475c <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 800cbf6:	4bbd      	ldr	r3, [pc, #756]	@ (800ceec <tx_control+0x2584>)
 800cbf8:	881a      	ldrh	r2, [r3, #0]
 800cbfa:	4bbd      	ldr	r3, [pc, #756]	@ (800cef0 <tx_control+0x2588>)
 800cbfc:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 800cbfe:	4bbd      	ldr	r3, [pc, #756]	@ (800cef4 <tx_control+0x258c>)
 800cc00:	4abd      	ldr	r2, [pc, #756]	@ (800cef8 <tx_control+0x2590>)
 800cc02:	601a      	str	r2, [r3, #0]
		save_cntReg();		// call	save_cntReg
 800cc04:	f7f7 fc8c 	bl	8004520 <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 800cc08:	f7f7 fcc4 	bl	8004594 <save_timeUNIX>

		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800cc0c:	4b9e      	ldr	r3, [pc, #632]	@ (800ce88 <tx_control+0x2520>)
 800cc0e:	2240      	movs	r2, #64	@ 0x40
 800cc10:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 800cc12:	4b9d      	ldr	r3, [pc, #628]	@ (800ce88 <tx_control+0x2520>)
 800cc14:	2286      	movs	r2, #134	@ 0x86
 800cc16:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
 800cc18:	4bb8      	ldr	r3, [pc, #736]	@ (800cefc <tx_control+0x2594>)
 800cc1a:	227b      	movs	r2, #123	@ 0x7b
 800cc1c:	5c9a      	ldrb	r2, [r3, r2]
 800cc1e:	4b9a      	ldr	r3, [pc, #616]	@ (800ce88 <tx_control+0x2520>)
 800cc20:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = eePlantilla[eeversion2];
 800cc22:	4bb6      	ldr	r3, [pc, #728]	@ (800cefc <tx_control+0x2594>)
 800cc24:	227c      	movs	r2, #124	@ 0x7c
 800cc26:	5c9a      	ldrb	r2, [r3, r2]
 800cc28:	4b97      	ldr	r3, [pc, #604]	@ (800ce88 <tx_control+0x2520>)
 800cc2a:	70da      	strb	r2, [r3, #3]

		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 800cc2c:	4bb4      	ldr	r3, [pc, #720]	@ (800cf00 <tx_control+0x2598>)
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	0a1b      	lsrs	r3, r3, #8
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	4b94      	ldr	r3, [pc, #592]	@ (800ce88 <tx_control+0x2520>)
 800cc38:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800cc3a:	4bb1      	ldr	r3, [pc, #708]	@ (800cf00 <tx_control+0x2598>)
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	4b91      	ldr	r3, [pc, #580]	@ (800ce88 <tx_control+0x2520>)
 800cc42:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 800cc44:	4baf      	ldr	r3, [pc, #700]	@ (800cf04 <tx_control+0x259c>)
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	0a1b      	lsrs	r3, r3, #8
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	4b8e      	ldr	r3, [pc, #568]	@ (800ce88 <tx_control+0x2520>)
 800cc50:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800cc52:	4bac      	ldr	r3, [pc, #688]	@ (800cf04 <tx_control+0x259c>)
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	b2da      	uxtb	r2, r3
 800cc58:	4b8b      	ldr	r3, [pc, #556]	@ (800ce88 <tx_control+0x2520>)
 800cc5a:	71da      	strb	r2, [r3, #7]
		ldw		bufferWifiTx+10,X
		ldw		X,eeLong1
		ldw		bufferWifiTx+12,X
		ldw		X,eeLong3
		ldw		bufferWifiTx+14,X*/
		bufferWifiTx[8] = eeLat1;
 800cc5c:	4baa      	ldr	r3, [pc, #680]	@ (800cf08 <tx_control+0x25a0>)
 800cc5e:	781a      	ldrb	r2, [r3, #0]
 800cc60:	4b89      	ldr	r3, [pc, #548]	@ (800ce88 <tx_control+0x2520>)
 800cc62:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = eeLat2;
 800cc64:	4ba9      	ldr	r3, [pc, #676]	@ (800cf0c <tx_control+0x25a4>)
 800cc66:	781a      	ldrb	r2, [r3, #0]
 800cc68:	4b87      	ldr	r3, [pc, #540]	@ (800ce88 <tx_control+0x2520>)
 800cc6a:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = eeLat3;
 800cc6c:	4ba8      	ldr	r3, [pc, #672]	@ (800cf10 <tx_control+0x25a8>)
 800cc6e:	781a      	ldrb	r2, [r3, #0]
 800cc70:	4b85      	ldr	r3, [pc, #532]	@ (800ce88 <tx_control+0x2520>)
 800cc72:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = eeLat4;
 800cc74:	4ba7      	ldr	r3, [pc, #668]	@ (800cf14 <tx_control+0x25ac>)
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	4b83      	ldr	r3, [pc, #524]	@ (800ce88 <tx_control+0x2520>)
 800cc7a:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = eeLong1;
 800cc7c:	4ba6      	ldr	r3, [pc, #664]	@ (800cf18 <tx_control+0x25b0>)
 800cc7e:	781a      	ldrb	r2, [r3, #0]
 800cc80:	4b81      	ldr	r3, [pc, #516]	@ (800ce88 <tx_control+0x2520>)
 800cc82:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = eeLong2;
 800cc84:	4ba5      	ldr	r3, [pc, #660]	@ (800cf1c <tx_control+0x25b4>)
 800cc86:	781a      	ldrb	r2, [r3, #0]
 800cc88:	4b7f      	ldr	r3, [pc, #508]	@ (800ce88 <tx_control+0x2520>)
 800cc8a:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = eeLong3;
 800cc8c:	4ba4      	ldr	r3, [pc, #656]	@ (800cf20 <tx_control+0x25b8>)
 800cc8e:	781a      	ldrb	r2, [r3, #0]
 800cc90:	4b7d      	ldr	r3, [pc, #500]	@ (800ce88 <tx_control+0x2520>)
 800cc92:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = eeLong4;
 800cc94:	4ba3      	ldr	r3, [pc, #652]	@ (800cf24 <tx_control+0x25bc>)
 800cc96:	781a      	ldrb	r2, [r3, #0]
 800cc98:	4b7b      	ldr	r3, [pc, #492]	@ (800ce88 <tx_control+0x2520>)
 800cc9a:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800cc9c:	4b7c      	ldr	r3, [pc, #496]	@ (800ce90 <tx_control+0x2528>)
 800cc9e:	4a7a      	ldr	r2, [pc, #488]	@ (800ce88 <tx_control+0x2520>)
 800cca0:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800cca2:	4b7c      	ldr	r3, [pc, #496]	@ (800ce94 <tx_control+0x252c>)
 800cca4:	4a78      	ldr	r2, [pc, #480]	@ (800ce88 <tx_control+0x2520>)
 800cca6:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 800cca8:	4b7b      	ldr	r3, [pc, #492]	@ (800ce98 <tx_control+0x2530>)
 800ccaa:	4a9f      	ldr	r2, [pc, #636]	@ (800cf28 <tx_control+0x25c0>)
 800ccac:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 800ccae:	4b7c      	ldr	r3, [pc, #496]	@ (800cea0 <tx_control+0x2538>)
 800ccb0:	2210      	movs	r2, #16
 800ccb2:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ccb4:	4b7b      	ldr	r3, [pc, #492]	@ (800cea4 <tx_control+0x253c>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ccba:	4b7b      	ldr	r3, [pc, #492]	@ (800cea8 <tx_control+0x2540>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800ccc0:	4b78      	ldr	r3, [pc, #480]	@ (800cea4 <tx_control+0x253c>)
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ccc6:	4b79      	ldr	r3, [pc, #484]	@ (800ceac <tx_control+0x2544>)
 800ccc8:	2255      	movs	r2, #85	@ 0x55
 800ccca:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 800cccc:	4b78      	ldr	r3, [pc, #480]	@ (800ceb0 <tx_control+0x2548>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	701a      	strb	r2, [r3, #0]

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 800ccd2:	4b7b      	ldr	r3, [pc, #492]	@ (800cec0 <tx_control+0x2558>)
 800ccd4:	781a      	ldrb	r2, [r3, #0]
 800ccd6:	4b68      	ldr	r3, [pc, #416]	@ (800ce78 <tx_control+0x2510>)
 800ccd8:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 800ccda:	4b7b      	ldr	r3, [pc, #492]	@ (800cec8 <tx_control+0x2560>)
 800ccdc:	781a      	ldrb	r2, [r3, #0]
 800ccde:	4b67      	ldr	r3, [pc, #412]	@ (800ce7c <tx_control+0x2514>)
 800cce0:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 800cce2:	4b74      	ldr	r3, [pc, #464]	@ (800ceb4 <tx_control+0x254c>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	801a      	strh	r2, [r3, #0]
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 800cce8:	4b90      	ldr	r3, [pc, #576]	@ (800cf2c <tx_control+0x25c4>)
 800ccea:	2203      	movs	r2, #3
 800ccec:	701a      	strb	r2, [r3, #0]

		//; Indica cuantos registros se loggearon para mandar unicamente esa cantidad de registros
		// ldw		X,eeCntRegEVENT
		// tnzw	X;										/ se logearon registros ?
		if(eeCntRegEVENT==0){
 800ccee:	4b82      	ldr	r3, [pc, #520]	@ (800cef8 <tx_control+0x2590>)
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d02c      	beq.n	800cd50 <tx_control+0x23e8>
			goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		}
		numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
 800ccf6:	4b80      	ldr	r3, [pc, #512]	@ (800cef8 <tx_control+0x2590>)
 800ccf8:	881a      	ldrh	r2, [r3, #0]
 800ccfa:	4b8d      	ldr	r3, [pc, #564]	@ (800cf30 <tx_control+0x25c8>)
 800ccfc:	801a      	strh	r2, [r3, #0]


		goto end_tx_wifi;// jp		end_tx_wifi
 800ccfe:	f000 fd58 	bl	800d7b2 <tx_control+0x2e4a>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 800cd02:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 800cd04:	4b6a      	ldr	r3, [pc, #424]	@ (800ceb0 <tx_control+0x2548>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b3d      	cmp	r3, #61	@ 0x3d
 800cd0a:	d00b      	beq.n	800cd24 <tx_control+0x23bc>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 800cd0c:	4b87      	ldr	r3, [pc, #540]	@ (800cf2c <tx_control+0x25c4>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d104      	bne.n	800cd1e <tx_control+0x23b6>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 800cd14:	4b68      	ldr	r3, [pc, #416]	@ (800ceb8 <tx_control+0x2550>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 800cd1a:	f000 fd4a 	bl	800d7b2 <tx_control+0x2e4a>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 800cd1e:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 800cd20:	f000 fd47 	bl	800d7b2 <tx_control+0x2e4a>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 800cd24:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_03:
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800cd26:	4b81      	ldr	r3, [pc, #516]	@ (800cf2c <tx_control+0x25c4>)
 800cd28:	2203      	movs	r2, #3
 800cd2a:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 800cd2c:	4b80      	ldr	r3, [pc, #512]	@ (800cf30 <tx_control+0x25c8>)
 800cd2e:	881a      	ldrh	r2, [r3, #0]
 800cd30:	4b60      	ldr	r3, [pc, #384]	@ (800ceb4 <tx_control+0x254c>)
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d317      	bcc.n	800cd68 <tx_control+0x2400>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
		}

		// clrw	X
		cntRegEVENT = 0;// ldw		cntRegEVENT,X
 800cd38:	4b6c      	ldr	r3, [pc, #432]	@ (800ceec <tx_control+0x2584>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	801a      	strh	r2, [r3, #0]
		cntReg = 0;// ldw		cntReg,X
 800cd3e:	4b6c      	ldr	r3, [pc, #432]	@ (800cef0 <tx_control+0x2588>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 800cd44:	4b6b      	ldr	r3, [pc, #428]	@ (800cef4 <tx_control+0x258c>)
 800cd46:	4a6c      	ldr	r2, [pc, #432]	@ (800cef8 <tx_control+0x2590>)
 800cd48:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800cd4a:	f7f7 fbe9 	bl	8004520 <save_cntReg>
 800cd4e:	e000      	b.n	800cd52 <tx_control+0x23ea>
			goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
 800cd50:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_END:
		//; indica que ya es enviaron todos los paquetes
		flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
 800cd52:	4b59      	ldr	r3, [pc, #356]	@ (800ceb8 <tx_control+0x2550>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 800cd58:	4b57      	ldr	r3, [pc, #348]	@ (800ceb8 <tx_control+0x2550>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 800cd5e:	4b57      	ldr	r3, [pc, #348]	@ (800cebc <tx_control+0x2554>)
 800cd60:	220a      	movs	r2, #10
 800cd62:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;//jp		end_tx_wifi
 800cd64:	f000 fd25 	bl	800d7b2 <tx_control+0x2e4a>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 800cd68:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800cd6a:	4b47      	ldr	r3, [pc, #284]	@ (800ce88 <tx_control+0x2520>)
 800cd6c:	2240      	movs	r2, #64	@ 0x40
 800cd6e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 800cd70:	4b45      	ldr	r3, [pc, #276]	@ (800ce88 <tx_control+0x2520>)
 800cd72:	2284      	movs	r2, #132	@ 0x84
 800cd74:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800cd76:	4b44      	ldr	r3, [pc, #272]	@ (800ce88 <tx_control+0x2520>)
 800cd78:	2203      	movs	r2, #3
 800cd7a:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
 800cd7c:	4b5f      	ldr	r3, [pc, #380]	@ (800cefc <tx_control+0x2594>)
 800cd7e:	227b      	movs	r2, #123	@ 0x7b
 800cd80:	5c9a      	ldrb	r2, [r3, r2]
 800cd82:	4b41      	ldr	r3, [pc, #260]	@ (800ce88 <tx_control+0x2520>)
 800cd84:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = eePlantilla[eeversion2];
 800cd86:	4b5d      	ldr	r3, [pc, #372]	@ (800cefc <tx_control+0x2594>)
 800cd88:	227c      	movs	r2, #124	@ 0x7c
 800cd8a:	5c9a      	ldrb	r2, [r3, r2]
 800cd8c:	4b3e      	ldr	r3, [pc, #248]	@ (800ce88 <tx_control+0x2520>)
 800cd8e:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 800cd90:	4b3a      	ldr	r3, [pc, #232]	@ (800ce7c <tx_control+0x2514>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d112      	bne.n	800cdbe <tx_control+0x2456>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 800cd98:	4b38      	ldr	r3, [pc, #224]	@ (800ce7c <tx_control+0x2514>)
 800cd9a:	227e      	movs	r2, #126	@ 0x7e
 800cd9c:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 800cd9e:	4b36      	ldr	r3, [pc, #216]	@ (800ce78 <tx_control+0x2510>)
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d103      	bne.n	800cdae <tx_control+0x2446>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 800cda6:	4b34      	ldr	r3, [pc, #208]	@ (800ce78 <tx_control+0x2510>)
 800cda8:	22a0      	movs	r2, #160	@ 0xa0
 800cdaa:	701a      	strb	r2, [r3, #0]
 800cdac:	e000      	b.n	800cdb0 <tx_control+0x2448>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 800cdae:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 800cdb0:	4b31      	ldr	r3, [pc, #196]	@ (800ce78 <tx_control+0x2510>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	4b2f      	ldr	r3, [pc, #188]	@ (800ce78 <tx_control+0x2510>)
 800cdba:	701a      	strb	r2, [r3, #0]
 800cdbc:	e000      	b.n	800cdc0 <tx_control+0x2458>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 800cdbe:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 800cdc0:	4b5c      	ldr	r3, [pc, #368]	@ (800cf34 <tx_control+0x25cc>)
 800cdc2:	63bb      	str	r3, [r7, #56]	@ 0x38
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 800cdc4:	4b2d      	ldr	r3, [pc, #180]	@ (800ce7c <tx_control+0x2514>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	001a      	movs	r2, r3
 800cdca:	4b2b      	ldr	r3, [pc, #172]	@ (800ce78 <tx_control+0x2510>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	01db      	lsls	r3, r3, #7
 800cdd0:	18d2      	adds	r2, r2, r3
 800cdd2:	4b42      	ldr	r3, [pc, #264]	@ (800cedc <tx_control+0x2574>)
 800cdd4:	18d3      	adds	r3, r2, r3
 800cdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		wreg = 0;// clr		wreg
 800cdd8:	4b2a      	ldr	r3, [pc, #168]	@ (800ce84 <tx_control+0x251c>)
 800cdda:	2200      	movs	r2, #0
 800cddc:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 800cdde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cde0:	3b01      	subs	r3, #1
 800cde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		point_Y--;// decw	Y;											/ decrementa apuntadores
 800cde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde6:	3b01      	subs	r3, #1
 800cde8:	63bb      	str	r3, [r7, #56]	@ 0x38
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 800cdea:	4b24      	ldr	r3, [pc, #144]	@ (800ce7c <tx_control+0x2514>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	4b22      	ldr	r3, [pc, #136]	@ (800ce7c <tx_control+0x2514>)
 800cdf4:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 800cdf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cdf8:	2380      	movs	r3, #128	@ 0x80
 800cdfa:	025b      	lsls	r3, r3, #9
 800cdfc:	5cd2      	ldrb	r2, [r2, r3]
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce00:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 800ce02:	4b20      	ldr	r3, [pc, #128]	@ (800ce84 <tx_control+0x251c>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	3301      	adds	r3, #1
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ce84 <tx_control+0x251c>)
 800ce0c:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 800ce0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ce84 <tx_control+0x251c>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b0d      	cmp	r3, #13
 800ce14:	d800      	bhi.n	800ce18 <tx_control+0x24b0>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 800ce16:	e7e2      	b.n	800cdde <tx_control+0x2476>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 800ce18:	4b1b      	ldr	r3, [pc, #108]	@ (800ce88 <tx_control+0x2520>)
 800ce1a:	7c9a      	ldrb	r2, [r3, #18]
 800ce1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ce8c <tx_control+0x2524>)
 800ce1e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 800ce20:	4b19      	ldr	r3, [pc, #100]	@ (800ce88 <tx_control+0x2520>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 800ce26:	4b19      	ldr	r3, [pc, #100]	@ (800ce8c <tx_control+0x2524>)
 800ce28:	781a      	ldrb	r2, [r3, #0]
 800ce2a:	4b17      	ldr	r3, [pc, #92]	@ (800ce88 <tx_control+0x2520>)
 800ce2c:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800ce2e:	4b18      	ldr	r3, [pc, #96]	@ (800ce90 <tx_control+0x2528>)
 800ce30:	4a15      	ldr	r2, [pc, #84]	@ (800ce88 <tx_control+0x2520>)
 800ce32:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800ce34:	4b17      	ldr	r3, [pc, #92]	@ (800ce94 <tx_control+0x252c>)
 800ce36:	4a14      	ldr	r2, [pc, #80]	@ (800ce88 <tx_control+0x2520>)
 800ce38:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 800ce3a:	4b17      	ldr	r3, [pc, #92]	@ (800ce98 <tx_control+0x2530>)
 800ce3c:	4a3e      	ldr	r2, [pc, #248]	@ (800cf38 <tx_control+0x25d0>)
 800ce3e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 800ce40:	4b17      	ldr	r3, [pc, #92]	@ (800cea0 <tx_control+0x2538>)
 800ce42:	2214      	movs	r2, #20
 800ce44:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ce46:	4b17      	ldr	r3, [pc, #92]	@ (800cea4 <tx_control+0x253c>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ce4c:	4b16      	ldr	r3, [pc, #88]	@ (800cea8 <tx_control+0x2540>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800ce52:	4b14      	ldr	r3, [pc, #80]	@ (800cea4 <tx_control+0x253c>)
 800ce54:	2201      	movs	r2, #1
 800ce56:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ce58:	4b14      	ldr	r3, [pc, #80]	@ (800ceac <tx_control+0x2544>)
 800ce5a:	2255      	movs	r2, #85	@ 0x55
 800ce5c:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 800ce5e:	4b14      	ldr	r3, [pc, #80]	@ (800ceb0 <tx_control+0x2548>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 800ce64:	4b13      	ldr	r3, [pc, #76]	@ (800ceb4 <tx_control+0x254c>)
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	4b11      	ldr	r3, [pc, #68]	@ (800ceb4 <tx_control+0x254c>)
 800ce6e:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 800ce70:	f000 fc9f 	bl	800d7b2 <tx_control+0x2e4a>
 800ce74:	20000ea2 	.word	0x20000ea2
 800ce78:	20000eb2 	.word	0x20000eb2
 800ce7c:	20000eb3 	.word	0x20000eb3
 800ce80:	0803c000 	.word	0x0803c000
 800ce84:	20000a93 	.word	0x20000a93
 800ce88:	20000e94 	.word	0x20000e94
 800ce8c:	20000a92 	.word	0x20000a92
 800ce90:	20000d50 	.word	0x20000d50
 800ce94:	20000d48 	.word	0x20000d48
 800ce98:	20000d4c 	.word	0x20000d4c
 800ce9c:	20000ea3 	.word	0x20000ea3
 800cea0:	20000d6c 	.word	0x20000d6c
 800cea4:	20000d58 	.word	0x20000d58
 800cea8:	20000d70 	.word	0x20000d70
 800ceac:	20000d55 	.word	0x20000d55
 800ceb0:	20000d60 	.word	0x20000d60
 800ceb4:	20000eb4 	.word	0x20000eb4
 800ceb8:	20000e8c 	.word	0x20000e8c
 800cebc:	20000eb7 	.word	0x20000eb7
 800cec0:	20000ceb 	.word	0x20000ceb
 800cec4:	20000cd6 	.word	0x20000cd6
 800cec8:	20000cea 	.word	0x20000cea
 800cecc:	20000cd7 	.word	0x20000cd7
 800ced0:	20000ce0 	.word	0x20000ce0
 800ced4:	20000c48 	.word	0x20000c48
 800ced8:	20000cdc 	.word	0x20000cdc
 800cedc:	08037000 	.word	0x08037000
 800cee0:	20000cc8 	.word	0x20000cc8
 800cee4:	20000ccc 	.word	0x20000ccc
 800cee8:	20000cd0 	.word	0x20000cd0
 800ceec:	20000f78 	.word	0x20000f78
 800cef0:	20000f7a 	.word	0x20000f7a
 800cef4:	20000f7c 	.word	0x20000f7c
 800cef8:	0803f092 	.word	0x0803f092
 800cefc:	0803f000 	.word	0x0803f000
 800cf00:	20000cec 	.word	0x20000cec
 800cf04:	20000cee 	.word	0x20000cee
 800cf08:	0803f088 	.word	0x0803f088
 800cf0c:	0803f089 	.word	0x0803f089
 800cf10:	0803f08a 	.word	0x0803f08a
 800cf14:	0803f08b 	.word	0x0803f08b
 800cf18:	0803f08c 	.word	0x0803f08c
 800cf1c:	0803f08d 	.word	0x0803f08d
 800cf20:	0803f08e 	.word	0x0803f08e
 800cf24:	0803f08f 	.word	0x0803f08f
 800cf28:	20000ea4 	.word	0x20000ea4
 800cf2c:	20000eb6 	.word	0x20000eb6
 800cf30:	20000f74 	.word	0x20000f74
 800cf34:	20000ea7 	.word	0x20000ea7
 800cf38:	20000ea8 	.word	0x20000ea8
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 800cf3c:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 800cf3e:	4bc7      	ldr	r3, [pc, #796]	@ (800d25c <tx_control+0x28f4>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <tx_control+0x25e2>
 800cf46:	f000 fc2d 	bl	800d7a4 <tx_control+0x2e3c>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 800cf4a:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 800cf4c:	4bc4      	ldr	r3, [pc, #784]	@ (800d260 <tx_control+0x28f8>)
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <tx_control+0x25f0>
 800cf54:	f000 fc29 	bl	800d7aa <tx_control+0x2e42>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 800cf58:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 800cf5a:	4bc2      	ldr	r3, [pc, #776]	@ (800d264 <tx_control+0x28fc>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d147      	bne.n	800cff2 <tx_control+0x268a>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 800cf62:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 800cf64:	4bc0      	ldr	r3, [pc, #768]	@ (800d268 <tx_control+0x2900>)
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d100      	bne.n	800cf6e <tx_control+0x2606>
 800cf6c:	e07f      	b.n	800d06e <tx_control+0x2706>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 800cf6e:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 800cf70:	4bbe      	ldr	r3, [pc, #760]	@ (800d26c <tx_control+0x2904>)
 800cf72:	2240      	movs	r2, #64	@ 0x40
 800cf74:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 800cf76:	4bbd      	ldr	r3, [pc, #756]	@ (800d26c <tx_control+0x2904>)
 800cf78:	2282      	movs	r2, #130	@ 0x82
 800cf7a:	705a      	strb	r2, [r3, #1]
		BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
 800cf7c:	4bbc      	ldr	r3, [pc, #752]	@ (800d270 <tx_control+0x2908>)
 800cf7e:	227b      	movs	r2, #123	@ 0x7b
 800cf80:	5c9a      	ldrb	r2, [r3, r2]
 800cf82:	4bba      	ldr	r3, [pc, #744]	@ (800d26c <tx_control+0x2904>)
 800cf84:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
 800cf86:	4bba      	ldr	r3, [pc, #744]	@ (800d270 <tx_control+0x2908>)
 800cf88:	227c      	movs	r2, #124	@ 0x7c
 800cf8a:	5c9a      	ldrb	r2, [r3, r2]
 800cf8c:	4bb7      	ldr	r3, [pc, #732]	@ (800d26c <tx_control+0x2904>)
 800cf8e:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 800cf90:	4bb8      	ldr	r3, [pc, #736]	@ (800d274 <tx_control+0x290c>)
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	0a1b      	lsrs	r3, r3, #8
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	4bb4      	ldr	r3, [pc, #720]	@ (800d26c <tx_control+0x2904>)
 800cf9c:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800cf9e:	4bb5      	ldr	r3, [pc, #724]	@ (800d274 <tx_control+0x290c>)
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	4bb1      	ldr	r3, [pc, #708]	@ (800d26c <tx_control+0x2904>)
 800cfa6:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 800cfa8:	4bb3      	ldr	r3, [pc, #716]	@ (800d278 <tx_control+0x2910>)
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	0a1b      	lsrs	r3, r3, #8
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	4bae      	ldr	r3, [pc, #696]	@ (800d26c <tx_control+0x2904>)
 800cfb4:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800cfb6:	4bb0      	ldr	r3, [pc, #704]	@ (800d278 <tx_control+0x2910>)
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	4bab      	ldr	r3, [pc, #684]	@ (800d26c <tx_control+0x2904>)
 800cfbe:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 800cfc0:	4baa      	ldr	r3, [pc, #680]	@ (800d26c <tx_control+0x2904>)
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 800cfc6:	4bad      	ldr	r3, [pc, #692]	@ (800d27c <tx_control+0x2914>)
 800cfc8:	781a      	ldrb	r2, [r3, #0]
 800cfca:	4ba8      	ldr	r3, [pc, #672]	@ (800d26c <tx_control+0x2904>)
 800cfcc:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 800cfce:	4bac      	ldr	r3, [pc, #688]	@ (800d280 <tx_control+0x2918>)
 800cfd0:	781a      	ldrb	r2, [r3, #0]
 800cfd2:	4ba6      	ldr	r3, [pc, #664]	@ (800d26c <tx_control+0x2904>)
 800cfd4:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 800cfd6:	4bab      	ldr	r3, [pc, #684]	@ (800d284 <tx_control+0x291c>)
 800cfd8:	781a      	ldrb	r2, [r3, #0]
 800cfda:	4ba4      	ldr	r3, [pc, #656]	@ (800d26c <tx_control+0x2904>)
 800cfdc:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 800cfde:	4ba1      	ldr	r3, [pc, #644]	@ (800d264 <tx_control+0x28fc>)
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 800cfe4:	4ba8      	ldr	r3, [pc, #672]	@ (800d288 <tx_control+0x2920>)
 800cfe6:	2250      	movs	r2, #80	@ 0x50
 800cfe8:	5c9b      	ldrb	r3, [r3, r2]
 800cfea:	001a      	movs	r2, r3
 800cfec:	4ba7      	ldr	r3, [pc, #668]	@ (800d28c <tx_control+0x2924>)
 800cfee:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 800cff0:	e040      	b.n	800d074 <tx_control+0x270c>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 800cff2:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 800cff4:	4b9c      	ldr	r3, [pc, #624]	@ (800d268 <tx_control+0x2900>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d13a      	bne.n	800d072 <tx_control+0x270a>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 800cffc:	4ba3      	ldr	r3, [pc, #652]	@ (800d28c <tx_control+0x2924>)
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d003      	beq.n	800d00c <tx_control+0x26a4>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 800d004:	4b97      	ldr	r3, [pc, #604]	@ (800d264 <tx_control+0x28fc>)
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 800d00a:	e033      	b.n	800d074 <tx_control+0x270c>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 800d00c:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 800d00e:	4b99      	ldr	r3, [pc, #612]	@ (800d274 <tx_control+0x290c>)
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	0a1b      	lsrs	r3, r3, #8
 800d014:	b29b      	uxth	r3, r3
 800d016:	b2da      	uxtb	r2, r3
 800d018:	4b94      	ldr	r3, [pc, #592]	@ (800d26c <tx_control+0x2904>)
 800d01a:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 800d01c:	4b95      	ldr	r3, [pc, #596]	@ (800d274 <tx_control+0x290c>)
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	b2da      	uxtb	r2, r3
 800d022:	4b92      	ldr	r3, [pc, #584]	@ (800d26c <tx_control+0x2904>)
 800d024:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 800d026:	4b94      	ldr	r3, [pc, #592]	@ (800d278 <tx_control+0x2910>)
 800d028:	881b      	ldrh	r3, [r3, #0]
 800d02a:	0a1b      	lsrs	r3, r3, #8
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	b2da      	uxtb	r2, r3
 800d030:	4b8e      	ldr	r3, [pc, #568]	@ (800d26c <tx_control+0x2904>)
 800d032:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 800d034:	4b90      	ldr	r3, [pc, #576]	@ (800d278 <tx_control+0x2910>)
 800d036:	881b      	ldrh	r3, [r3, #0]
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	4b8c      	ldr	r3, [pc, #560]	@ (800d26c <tx_control+0x2904>)
 800d03c:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 800d03e:	4b94      	ldr	r3, [pc, #592]	@ (800d290 <tx_control+0x2928>)
 800d040:	781a      	ldrb	r2, [r3, #0]
 800d042:	4b8a      	ldr	r3, [pc, #552]	@ (800d26c <tx_control+0x2904>)
 800d044:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 800d046:	4b93      	ldr	r3, [pc, #588]	@ (800d294 <tx_control+0x292c>)
 800d048:	781a      	ldrb	r2, [r3, #0]
 800d04a:	4b88      	ldr	r3, [pc, #544]	@ (800d26c <tx_control+0x2904>)
 800d04c:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 800d04e:	4b85      	ldr	r3, [pc, #532]	@ (800d264 <tx_control+0x28fc>)
 800d050:	2200      	movs	r2, #0
 800d052:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 800d054:	4b90      	ldr	r3, [pc, #576]	@ (800d298 <tx_control+0x2930>)
 800d056:	4a91      	ldr	r2, [pc, #580]	@ (800d29c <tx_control+0x2934>)
 800d058:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 800d05a:	4b91      	ldr	r3, [pc, #580]	@ (800d2a0 <tx_control+0x2938>)
 800d05c:	4a8f      	ldr	r2, [pc, #572]	@ (800d29c <tx_control+0x2934>)
 800d05e:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 800d060:	4b90      	ldr	r3, [pc, #576]	@ (800d2a4 <tx_control+0x293c>)
 800d062:	4a91      	ldr	r2, [pc, #580]	@ (800d2a8 <tx_control+0x2940>)
 800d064:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 800d066:	4b91      	ldr	r3, [pc, #580]	@ (800d2ac <tx_control+0x2944>)
 800d068:	2212      	movs	r2, #18
 800d06a:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 800d06c:	e1a0      	b.n	800d3b0 <tx_control+0x2a48>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 800d06e:	46c0      	nop			@ (mov r8, r8)
 800d070:	e000      	b.n	800d074 <tx_control+0x270c>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 800d072:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 800d074:	4b7b      	ldr	r3, [pc, #492]	@ (800d264 <tx_control+0x28fc>)
 800d076:	785b      	ldrb	r3, [r3, #1]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d140      	bne.n	800d0fe <tx_control+0x2796>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 800d07c:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 800d07e:	4b8c      	ldr	r3, [pc, #560]	@ (800d2b0 <tx_control+0x2948>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d071      	beq.n	800d16a <tx_control+0x2802>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 800d086:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 800d088:	4b8a      	ldr	r3, [pc, #552]	@ (800d2b4 <tx_control+0x294c>)
 800d08a:	2240      	movs	r2, #64	@ 0x40
 800d08c:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 800d08e:	4b89      	ldr	r3, [pc, #548]	@ (800d2b4 <tx_control+0x294c>)
 800d090:	2282      	movs	r2, #130	@ 0x82
 800d092:	705a      	strb	r2, [r3, #1]
		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
 800d094:	4b76      	ldr	r3, [pc, #472]	@ (800d270 <tx_control+0x2908>)
 800d096:	227b      	movs	r2, #123	@ 0x7b
 800d098:	5c9a      	ldrb	r2, [r3, r2]
 800d09a:	4b86      	ldr	r3, [pc, #536]	@ (800d2b4 <tx_control+0x294c>)
 800d09c:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
 800d09e:	4b74      	ldr	r3, [pc, #464]	@ (800d270 <tx_control+0x2908>)
 800d0a0:	227c      	movs	r2, #124	@ 0x7c
 800d0a2:	5c9a      	ldrb	r2, [r3, r2]
 800d0a4:	4b83      	ldr	r3, [pc, #524]	@ (800d2b4 <tx_control+0x294c>)
 800d0a6:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800d0a8:	4b72      	ldr	r3, [pc, #456]	@ (800d274 <tx_control+0x290c>)
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	0a1b      	lsrs	r3, r3, #8
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	4b80      	ldr	r3, [pc, #512]	@ (800d2b4 <tx_control+0x294c>)
 800d0b4:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800d0b6:	4b6f      	ldr	r3, [pc, #444]	@ (800d274 <tx_control+0x290c>)
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	4b7d      	ldr	r3, [pc, #500]	@ (800d2b4 <tx_control+0x294c>)
 800d0be:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 800d0c0:	4b6d      	ldr	r3, [pc, #436]	@ (800d278 <tx_control+0x2910>)
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	0a1b      	lsrs	r3, r3, #8
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	4b7a      	ldr	r3, [pc, #488]	@ (800d2b4 <tx_control+0x294c>)
 800d0cc:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800d0ce:	4b6a      	ldr	r3, [pc, #424]	@ (800d278 <tx_control+0x2910>)
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	4b77      	ldr	r3, [pc, #476]	@ (800d2b4 <tx_control+0x294c>)
 800d0d6:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 800d0d8:	4b76      	ldr	r3, [pc, #472]	@ (800d2b4 <tx_control+0x294c>)
 800d0da:	2202      	movs	r2, #2
 800d0dc:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 800d0de:	4b67      	ldr	r3, [pc, #412]	@ (800d27c <tx_control+0x2914>)
 800d0e0:	781a      	ldrb	r2, [r3, #0]
 800d0e2:	4b74      	ldr	r3, [pc, #464]	@ (800d2b4 <tx_control+0x294c>)
 800d0e4:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 800d0e6:	4b66      	ldr	r3, [pc, #408]	@ (800d280 <tx_control+0x2918>)
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	4b72      	ldr	r3, [pc, #456]	@ (800d2b4 <tx_control+0x294c>)
 800d0ec:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 800d0ee:	4b65      	ldr	r3, [pc, #404]	@ (800d284 <tx_control+0x291c>)
 800d0f0:	781a      	ldrb	r2, [r3, #0]
 800d0f2:	4b70      	ldr	r3, [pc, #448]	@ (800d2b4 <tx_control+0x294c>)
 800d0f4:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 800d0f6:	4b5b      	ldr	r3, [pc, #364]	@ (800d264 <tx_control+0x28fc>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 800d0fc:	e038      	b.n	800d170 <tx_control+0x2808>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 800d0fe:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 800d100:	4b6b      	ldr	r3, [pc, #428]	@ (800d2b0 <tx_control+0x2948>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d132      	bne.n	800d16e <tx_control+0x2806>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 800d108:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800d10a:	4b5a      	ldr	r3, [pc, #360]	@ (800d274 <tx_control+0x290c>)
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	0a1b      	lsrs	r3, r3, #8
 800d110:	b29b      	uxth	r3, r3
 800d112:	b2da      	uxtb	r2, r3
 800d114:	4b67      	ldr	r3, [pc, #412]	@ (800d2b4 <tx_control+0x294c>)
 800d116:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800d118:	4b56      	ldr	r3, [pc, #344]	@ (800d274 <tx_control+0x290c>)
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	4b65      	ldr	r3, [pc, #404]	@ (800d2b4 <tx_control+0x294c>)
 800d120:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 800d122:	4b55      	ldr	r3, [pc, #340]	@ (800d278 <tx_control+0x2910>)
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	0a1b      	lsrs	r3, r3, #8
 800d128:	b29b      	uxth	r3, r3
 800d12a:	b2da      	uxtb	r2, r3
 800d12c:	4b61      	ldr	r3, [pc, #388]	@ (800d2b4 <tx_control+0x294c>)
 800d12e:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800d130:	4b51      	ldr	r3, [pc, #324]	@ (800d278 <tx_control+0x2910>)
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	b2da      	uxtb	r2, r3
 800d136:	4b5f      	ldr	r3, [pc, #380]	@ (800d2b4 <tx_control+0x294c>)
 800d138:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 800d13a:	4b55      	ldr	r3, [pc, #340]	@ (800d290 <tx_control+0x2928>)
 800d13c:	781a      	ldrb	r2, [r3, #0]
 800d13e:	4b5d      	ldr	r3, [pc, #372]	@ (800d2b4 <tx_control+0x294c>)
 800d140:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 800d142:	4b54      	ldr	r3, [pc, #336]	@ (800d294 <tx_control+0x292c>)
 800d144:	781a      	ldrb	r2, [r3, #0]
 800d146:	4b5b      	ldr	r3, [pc, #364]	@ (800d2b4 <tx_control+0x294c>)
 800d148:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 800d14a:	4b46      	ldr	r3, [pc, #280]	@ (800d264 <tx_control+0x28fc>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 800d150:	4b51      	ldr	r3, [pc, #324]	@ (800d298 <tx_control+0x2930>)
 800d152:	4a58      	ldr	r2, [pc, #352]	@ (800d2b4 <tx_control+0x294c>)
 800d154:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 800d156:	4b52      	ldr	r3, [pc, #328]	@ (800d2a0 <tx_control+0x2938>)
 800d158:	4a56      	ldr	r2, [pc, #344]	@ (800d2b4 <tx_control+0x294c>)
 800d15a:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 800d15c:	4b51      	ldr	r3, [pc, #324]	@ (800d2a4 <tx_control+0x293c>)
 800d15e:	4a56      	ldr	r2, [pc, #344]	@ (800d2b8 <tx_control+0x2950>)
 800d160:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 800d162:	4b52      	ldr	r3, [pc, #328]	@ (800d2ac <tx_control+0x2944>)
 800d164:	2212      	movs	r2, #18
 800d166:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 800d168:	e122      	b.n	800d3b0 <tx_control+0x2a48>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 800d16a:	46c0      	nop			@ (mov r8, r8)
 800d16c:	e000      	b.n	800d170 <tx_control+0x2808>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 800d16e:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 800d170:	4b3c      	ldr	r3, [pc, #240]	@ (800d264 <tx_control+0x28fc>)
 800d172:	789b      	ldrb	r3, [r3, #2]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d139      	bne.n	800d1ec <tx_control+0x2884>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 800d178:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 800d17a:	4b50      	ldr	r3, [pc, #320]	@ (800d2bc <tx_control+0x2954>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d16a      	bne.n	800d258 <tx_control+0x28f0>

		// ldw		X,#$4082
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
 800d182:	4b3b      	ldr	r3, [pc, #236]	@ (800d270 <tx_control+0x2908>)
 800d184:	227b      	movs	r2, #123	@ 0x7b
 800d186:	5c9a      	ldrb	r2, [r3, r2]
 800d188:	4b4d      	ldr	r3, [pc, #308]	@ (800d2c0 <tx_control+0x2958>)
 800d18a:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
 800d18c:	4b38      	ldr	r3, [pc, #224]	@ (800d270 <tx_control+0x2908>)
 800d18e:	227c      	movs	r2, #124	@ 0x7c
 800d190:	5c9a      	ldrb	r2, [r3, r2]
 800d192:	4b4b      	ldr	r3, [pc, #300]	@ (800d2c0 <tx_control+0x2958>)
 800d194:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800d196:	4b37      	ldr	r3, [pc, #220]	@ (800d274 <tx_control+0x290c>)
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	0a1b      	lsrs	r3, r3, #8
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	4b47      	ldr	r3, [pc, #284]	@ (800d2c0 <tx_control+0x2958>)
 800d1a2:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800d1a4:	4b33      	ldr	r3, [pc, #204]	@ (800d274 <tx_control+0x290c>)
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	4b45      	ldr	r3, [pc, #276]	@ (800d2c0 <tx_control+0x2958>)
 800d1ac:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 800d1ae:	4b32      	ldr	r3, [pc, #200]	@ (800d278 <tx_control+0x2910>)
 800d1b0:	881b      	ldrh	r3, [r3, #0]
 800d1b2:	0a1b      	lsrs	r3, r3, #8
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	4b41      	ldr	r3, [pc, #260]	@ (800d2c0 <tx_control+0x2958>)
 800d1ba:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800d1bc:	4b2e      	ldr	r3, [pc, #184]	@ (800d278 <tx_control+0x2910>)
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	4b3f      	ldr	r3, [pc, #252]	@ (800d2c0 <tx_control+0x2958>)
 800d1c4:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 800d1c6:	4b3e      	ldr	r3, [pc, #248]	@ (800d2c0 <tx_control+0x2958>)
 800d1c8:	2203      	movs	r2, #3
 800d1ca:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 800d1cc:	4b2b      	ldr	r3, [pc, #172]	@ (800d27c <tx_control+0x2914>)
 800d1ce:	781a      	ldrb	r2, [r3, #0]
 800d1d0:	4b3b      	ldr	r3, [pc, #236]	@ (800d2c0 <tx_control+0x2958>)
 800d1d2:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 800d1d4:	4b2a      	ldr	r3, [pc, #168]	@ (800d280 <tx_control+0x2918>)
 800d1d6:	781a      	ldrb	r2, [r3, #0]
 800d1d8:	4b39      	ldr	r3, [pc, #228]	@ (800d2c0 <tx_control+0x2958>)
 800d1da:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 800d1dc:	4b29      	ldr	r3, [pc, #164]	@ (800d284 <tx_control+0x291c>)
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	4b37      	ldr	r3, [pc, #220]	@ (800d2c0 <tx_control+0x2958>)
 800d1e2:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 800d1e4:	4b1f      	ldr	r3, [pc, #124]	@ (800d264 <tx_control+0x28fc>)
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 800d1ea:	e06e      	b.n	800d2ca <tx_control+0x2962>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 800d1ec:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 800d1ee:	4b33      	ldr	r3, [pc, #204]	@ (800d2bc <tx_control+0x2954>)
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	d068      	beq.n	800d2c8 <tx_control+0x2960>
			goto power_event_WF;
		}
desh_event_end_WF:
 800d1f6:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 800d1f8:	4b1e      	ldr	r3, [pc, #120]	@ (800d274 <tx_control+0x290c>)
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	0a1b      	lsrs	r3, r3, #8
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	b2da      	uxtb	r2, r3
 800d202:	4b2f      	ldr	r3, [pc, #188]	@ (800d2c0 <tx_control+0x2958>)
 800d204:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 800d206:	4b1b      	ldr	r3, [pc, #108]	@ (800d274 <tx_control+0x290c>)
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	4b2c      	ldr	r3, [pc, #176]	@ (800d2c0 <tx_control+0x2958>)
 800d20e:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 800d210:	4b19      	ldr	r3, [pc, #100]	@ (800d278 <tx_control+0x2910>)
 800d212:	881b      	ldrh	r3, [r3, #0]
 800d214:	0a1b      	lsrs	r3, r3, #8
 800d216:	b29b      	uxth	r3, r3
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	4b29      	ldr	r3, [pc, #164]	@ (800d2c0 <tx_control+0x2958>)
 800d21c:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 800d21e:	4b16      	ldr	r3, [pc, #88]	@ (800d278 <tx_control+0x2910>)
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	b2da      	uxtb	r2, r3
 800d224:	4b26      	ldr	r3, [pc, #152]	@ (800d2c0 <tx_control+0x2958>)
 800d226:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 800d228:	4b19      	ldr	r3, [pc, #100]	@ (800d290 <tx_control+0x2928>)
 800d22a:	781a      	ldrb	r2, [r3, #0]
 800d22c:	4b24      	ldr	r3, [pc, #144]	@ (800d2c0 <tx_control+0x2958>)
 800d22e:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 800d230:	4b18      	ldr	r3, [pc, #96]	@ (800d294 <tx_control+0x292c>)
 800d232:	781a      	ldrb	r2, [r3, #0]
 800d234:	4b22      	ldr	r3, [pc, #136]	@ (800d2c0 <tx_control+0x2958>)
 800d236:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 800d238:	4b0a      	ldr	r3, [pc, #40]	@ (800d264 <tx_control+0x28fc>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 800d23e:	4b16      	ldr	r3, [pc, #88]	@ (800d298 <tx_control+0x2930>)
 800d240:	4a1f      	ldr	r2, [pc, #124]	@ (800d2c0 <tx_control+0x2958>)
 800d242:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 800d244:	4b16      	ldr	r3, [pc, #88]	@ (800d2a0 <tx_control+0x2938>)
 800d246:	4a1e      	ldr	r2, [pc, #120]	@ (800d2c0 <tx_control+0x2958>)
 800d248:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 800d24a:	4b16      	ldr	r3, [pc, #88]	@ (800d2a4 <tx_control+0x293c>)
 800d24c:	4a1d      	ldr	r2, [pc, #116]	@ (800d2c4 <tx_control+0x295c>)
 800d24e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 800d250:	4b16      	ldr	r3, [pc, #88]	@ (800d2ac <tx_control+0x2944>)
 800d252:	2212      	movs	r2, #18
 800d254:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 800d256:	e0ab      	b.n	800d3b0 <tx_control+0x2a48>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 800d258:	46c0      	nop			@ (mov r8, r8)
 800d25a:	e036      	b.n	800d2ca <tx_control+0x2962>
 800d25c:	20000eb7 	.word	0x20000eb7
 800d260:	20000d55 	.word	0x20000d55
 800d264:	20000e78 	.word	0x20000e78
 800d268:	20000b78 	.word	0x20000b78
 800d26c:	20000e28 	.word	0x20000e28
 800d270:	0803f000 	.word	0x0803f000
 800d274:	20000cec 	.word	0x20000cec
 800d278:	20000cee 	.word	0x20000cee
 800d27c:	20000aec 	.word	0x20000aec
 800d280:	20000aed 	.word	0x20000aed
 800d284:	20000b0a 	.word	0x20000b0a
 800d288:	200000bc 	.word	0x200000bc
 800d28c:	20000e14 	.word	0x20000e14
 800d290:	20000aee 	.word	0x20000aee
 800d294:	20000aef 	.word	0x20000aef
 800d298:	20000d50 	.word	0x20000d50
 800d29c:	20000e64 	.word	0x20000e64
 800d2a0:	20000d48 	.word	0x20000d48
 800d2a4:	20000d4c 	.word	0x20000d4c
 800d2a8:	20000e75 	.word	0x20000e75
 800d2ac:	20000d6c 	.word	0x20000d6c
 800d2b0:	20000ae0 	.word	0x20000ae0
 800d2b4:	20000e3c 	.word	0x20000e3c
 800d2b8:	20000e4d 	.word	0x20000e4d
 800d2bc:	20000ad4 	.word	0x20000ad4
 800d2c0:	20000e50 	.word	0x20000e50
 800d2c4:	20000e61 	.word	0x20000e61
			goto power_event_WF;
 800d2c8:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 800d2ca:	4bd6      	ldr	r3, [pc, #856]	@ (800d624 <tx_control+0x2cbc>)
 800d2cc:	78db      	ldrb	r3, [r3, #3]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d067      	beq.n	800d3a2 <tx_control+0x2a3a>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 800d2d2:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 800d2d4:	4bd4      	ldr	r3, [pc, #848]	@ (800d628 <tx_control+0x2cc0>)
 800d2d6:	2240      	movs	r2, #64	@ 0x40
 800d2d8:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 800d2da:	4bd3      	ldr	r3, [pc, #844]	@ (800d628 <tx_control+0x2cc0>)
 800d2dc:	2282      	movs	r2, #130	@ 0x82
 800d2de:	705a      	strb	r2, [r3, #1]

		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
 800d2e0:	4bd2      	ldr	r3, [pc, #840]	@ (800d62c <tx_control+0x2cc4>)
 800d2e2:	227b      	movs	r2, #123	@ 0x7b
 800d2e4:	5c9a      	ldrb	r2, [r3, r2]
 800d2e6:	4bd0      	ldr	r3, [pc, #832]	@ (800d628 <tx_control+0x2cc0>)
 800d2e8:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion2];
 800d2ea:	4bd0      	ldr	r3, [pc, #832]	@ (800d62c <tx_control+0x2cc4>)
 800d2ec:	227c      	movs	r2, #124	@ 0x7c
 800d2ee:	5c9a      	ldrb	r2, [r3, r2]
 800d2f0:	4bcd      	ldr	r3, [pc, #820]	@ (800d628 <tx_control+0x2cc0>)
 800d2f2:	709a      	strb	r2, [r3, #2]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 800d2f4:	4bce      	ldr	r3, [pc, #824]	@ (800d630 <tx_control+0x2cc8>)
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	0a1b      	lsrs	r3, r3, #8
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4bca      	ldr	r3, [pc, #808]	@ (800d628 <tx_control+0x2cc0>)
 800d300:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800d302:	4bcb      	ldr	r3, [pc, #812]	@ (800d630 <tx_control+0x2cc8>)
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	b2da      	uxtb	r2, r3
 800d308:	4bc7      	ldr	r3, [pc, #796]	@ (800d628 <tx_control+0x2cc0>)
 800d30a:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 800d30c:	4bc9      	ldr	r3, [pc, #804]	@ (800d634 <tx_control+0x2ccc>)
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	0a1b      	lsrs	r3, r3, #8
 800d312:	b29b      	uxth	r3, r3
 800d314:	b2da      	uxtb	r2, r3
 800d316:	4bc4      	ldr	r3, [pc, #784]	@ (800d628 <tx_control+0x2cc0>)
 800d318:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800d31a:	4bc6      	ldr	r3, [pc, #792]	@ (800d634 <tx_control+0x2ccc>)
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	4bc1      	ldr	r3, [pc, #772]	@ (800d628 <tx_control+0x2cc0>)
 800d322:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 800d324:	4bc0      	ldr	r3, [pc, #768]	@ (800d628 <tx_control+0x2cc0>)
 800d326:	2204      	movs	r2, #4
 800d328:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 800d32a:	4bc3      	ldr	r3, [pc, #780]	@ (800d638 <tx_control+0x2cd0>)
 800d32c:	781a      	ldrb	r2, [r3, #0]
 800d32e:	4bbe      	ldr	r3, [pc, #760]	@ (800d628 <tx_control+0x2cc0>)
 800d330:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 800d332:	4bc2      	ldr	r3, [pc, #776]	@ (800d63c <tx_control+0x2cd4>)
 800d334:	781a      	ldrb	r2, [r3, #0]
 800d336:	4bbc      	ldr	r3, [pc, #752]	@ (800d628 <tx_control+0x2cc0>)
 800d338:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 800d33a:	4bc1      	ldr	r3, [pc, #772]	@ (800d640 <tx_control+0x2cd8>)
 800d33c:	781a      	ldrb	r2, [r3, #0]
 800d33e:	4bba      	ldr	r3, [pc, #744]	@ (800d628 <tx_control+0x2cc0>)
 800d340:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 800d342:	4bbb      	ldr	r3, [pc, #748]	@ (800d630 <tx_control+0x2cc8>)
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	0a1b      	lsrs	r3, r3, #8
 800d348:	b29b      	uxth	r3, r3
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	4bb6      	ldr	r3, [pc, #728]	@ (800d628 <tx_control+0x2cc0>)
 800d34e:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800d350:	4bb7      	ldr	r3, [pc, #732]	@ (800d630 <tx_control+0x2cc8>)
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	b2da      	uxtb	r2, r3
 800d356:	4bb4      	ldr	r3, [pc, #720]	@ (800d628 <tx_control+0x2cc0>)
 800d358:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 800d35a:	4bb6      	ldr	r3, [pc, #728]	@ (800d634 <tx_control+0x2ccc>)
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	0a1b      	lsrs	r3, r3, #8
 800d360:	b29b      	uxth	r3, r3
 800d362:	b2da      	uxtb	r2, r3
 800d364:	4bb0      	ldr	r3, [pc, #704]	@ (800d628 <tx_control+0x2cc0>)
 800d366:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800d368:	4bb2      	ldr	r3, [pc, #712]	@ (800d634 <tx_control+0x2ccc>)
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	b2da      	uxtb	r2, r3
 800d36e:	4bae      	ldr	r3, [pc, #696]	@ (800d628 <tx_control+0x2cc0>)
 800d370:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 800d372:	4bb4      	ldr	r3, [pc, #720]	@ (800d644 <tx_control+0x2cdc>)
 800d374:	781a      	ldrb	r2, [r3, #0]
 800d376:	4bac      	ldr	r3, [pc, #688]	@ (800d628 <tx_control+0x2cc0>)
 800d378:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 800d37a:	4bb3      	ldr	r3, [pc, #716]	@ (800d648 <tx_control+0x2ce0>)
 800d37c:	781a      	ldrb	r2, [r3, #0]
 800d37e:	4baa      	ldr	r3, [pc, #680]	@ (800d628 <tx_control+0x2cc0>)
 800d380:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 800d382:	4ba8      	ldr	r3, [pc, #672]	@ (800d624 <tx_control+0x2cbc>)
 800d384:	2200      	movs	r2, #0
 800d386:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 800d388:	4bb0      	ldr	r3, [pc, #704]	@ (800d64c <tx_control+0x2ce4>)
 800d38a:	4aa7      	ldr	r2, [pc, #668]	@ (800d628 <tx_control+0x2cc0>)
 800d38c:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 800d38e:	4bb0      	ldr	r3, [pc, #704]	@ (800d650 <tx_control+0x2ce8>)
 800d390:	4aa5      	ldr	r2, [pc, #660]	@ (800d628 <tx_control+0x2cc0>)
 800d392:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 800d394:	4baf      	ldr	r3, [pc, #700]	@ (800d654 <tx_control+0x2cec>)
 800d396:	4ab0      	ldr	r2, [pc, #704]	@ (800d658 <tx_control+0x2cf0>)
 800d398:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 800d39a:	4bb0      	ldr	r3, [pc, #704]	@ (800d65c <tx_control+0x2cf4>)
 800d39c:	2212      	movs	r2, #18
 800d39e:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 800d3a0:	e006      	b.n	800d3b0 <tx_control+0x2a48>
		goto alarm_event_WF;// jra		alarm_event_WF
 800d3a2:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 800d3a4:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 800d3a6:	4bae      	ldr	r3, [pc, #696]	@ (800d660 <tx_control+0x2cf8>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d045      	beq.n	800d43a <tx_control+0x2ad2>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 800d3ae:	e200      	b.n	800d7b2 <tx_control+0x2e4a>
		bufferWifiTx[0] = 0x40;
 800d3b0:	4bac      	ldr	r3, [pc, #688]	@ (800d664 <tx_control+0x2cfc>)
 800d3b2:	2240      	movs	r2, #64	@ 0x40
 800d3b4:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 800d3b6:	4bab      	ldr	r3, [pc, #684]	@ (800d664 <tx_control+0x2cfc>)
 800d3b8:	2282      	movs	r2, #130	@ 0x82
 800d3ba:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800d3bc:	4ba9      	ldr	r3, [pc, #676]	@ (800d664 <tx_control+0x2cfc>)
 800d3be:	2203      	movs	r2, #3
 800d3c0:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
 800d3c2:	4b9a      	ldr	r3, [pc, #616]	@ (800d62c <tx_control+0x2cc4>)
 800d3c4:	227b      	movs	r2, #123	@ 0x7b
 800d3c6:	5c9a      	ldrb	r2, [r3, r2]
 800d3c8:	4ba6      	ldr	r3, [pc, #664]	@ (800d664 <tx_control+0x2cfc>)
 800d3ca:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = eePlantilla[eeversion2];
 800d3cc:	4b97      	ldr	r3, [pc, #604]	@ (800d62c <tx_control+0x2cc4>)
 800d3ce:	227c      	movs	r2, #124	@ 0x7c
 800d3d0:	5c9a      	ldrb	r2, [r3, r2]
 800d3d2:	4ba4      	ldr	r3, [pc, #656]	@ (800d664 <tx_control+0x2cfc>)
 800d3d4:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 800d3d6:	4ba4      	ldr	r3, [pc, #656]	@ (800d668 <tx_control+0x2d00>)
 800d3d8:	220e      	movs	r2, #14
 800d3da:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 800d3dc:	4b9b      	ldr	r3, [pc, #620]	@ (800d64c <tx_control+0x2ce4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	4aa2      	ldr	r2, [pc, #648]	@ (800d66c <tx_control+0x2d04>)
 800d3e4:	0011      	movs	r1, r2
 800d3e6:	0018      	movs	r0, r3
 800d3e8:	f7f7 f980 	bl	80046ec <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 800d3ec:	4b9d      	ldr	r3, [pc, #628]	@ (800d664 <tx_control+0x2cfc>)
 800d3ee:	7c9a      	ldrb	r2, [r3, #18]
 800d3f0:	4b9f      	ldr	r3, [pc, #636]	@ (800d670 <tx_control+0x2d08>)
 800d3f2:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 800d3f4:	4b9b      	ldr	r3, [pc, #620]	@ (800d664 <tx_control+0x2cfc>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 800d3fa:	4b9d      	ldr	r3, [pc, #628]	@ (800d670 <tx_control+0x2d08>)
 800d3fc:	781a      	ldrb	r2, [r3, #0]
 800d3fe:	4b99      	ldr	r3, [pc, #612]	@ (800d664 <tx_control+0x2cfc>)
 800d400:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 800d402:	4b92      	ldr	r3, [pc, #584]	@ (800d64c <tx_control+0x2ce4>)
 800d404:	4a97      	ldr	r2, [pc, #604]	@ (800d664 <tx_control+0x2cfc>)
 800d406:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 800d408:	4b91      	ldr	r3, [pc, #580]	@ (800d650 <tx_control+0x2ce8>)
 800d40a:	4a96      	ldr	r2, [pc, #600]	@ (800d664 <tx_control+0x2cfc>)
 800d40c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 800d40e:	4b91      	ldr	r3, [pc, #580]	@ (800d654 <tx_control+0x2cec>)
 800d410:	4a98      	ldr	r2, [pc, #608]	@ (800d674 <tx_control+0x2d0c>)
 800d412:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 800d414:	4b91      	ldr	r3, [pc, #580]	@ (800d65c <tx_control+0x2cf4>)
 800d416:	2214      	movs	r2, #20
 800d418:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d41a:	4b97      	ldr	r3, [pc, #604]	@ (800d678 <tx_control+0x2d10>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800d420:	4b96      	ldr	r3, [pc, #600]	@ (800d67c <tx_control+0x2d14>)
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d426:	4b94      	ldr	r3, [pc, #592]	@ (800d678 <tx_control+0x2d10>)
 800d428:	2201      	movs	r2, #1
 800d42a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800d42c:	4b8c      	ldr	r3, [pc, #560]	@ (800d660 <tx_control+0x2cf8>)
 800d42e:	2255      	movs	r2, #85	@ 0x55
 800d430:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 800d432:	4b93      	ldr	r3, [pc, #588]	@ (800d680 <tx_control+0x2d18>)
 800d434:	2200      	movs	r2, #0
 800d436:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 800d438:	e1bb      	b.n	800d7b2 <tx_control+0x2e4a>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 800d43a:	4b92      	ldr	r3, [pc, #584]	@ (800d684 <tx_control+0x2d1c>)
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d000      	beq.n	800d444 <tx_control+0x2adc>
 800d442:	e1b5      	b.n	800d7b0 <tx_control+0x2e48>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 800d444:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 800d446:	4b90      	ldr	r3, [pc, #576]	@ (800d688 <tx_control+0x2d20>)
 800d448:	2251      	movs	r2, #81	@ 0x51
 800d44a:	5c9a      	ldrb	r2, [r3, r2]
 800d44c:	4b86      	ldr	r3, [pc, #536]	@ (800d668 <tx_control+0x2d00>)
 800d44e:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 800d450:	4b85      	ldr	r3, [pc, #532]	@ (800d668 <tx_control+0x2d00>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	001a      	movs	r2, r3
 800d456:	233c      	movs	r3, #60	@ 0x3c
 800d458:	4353      	muls	r3, r2
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	4b89      	ldr	r3, [pc, #548]	@ (800d684 <tx_control+0x2d1c>)
 800d45e:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 800d460:	4b8a      	ldr	r3, [pc, #552]	@ (800d68c <tx_control+0x2d24>)
 800d462:	781a      	ldrb	r2, [r3, #0]
 800d464:	4b8a      	ldr	r3, [pc, #552]	@ (800d690 <tx_control+0x2d28>)
 800d466:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 800d468:	4b88      	ldr	r3, [pc, #544]	@ (800d68c <tx_control+0x2d24>)
 800d46a:	785a      	ldrb	r2, [r3, #1]
 800d46c:	4b88      	ldr	r3, [pc, #544]	@ (800d690 <tx_control+0x2d28>)
 800d46e:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 800d470:	4b87      	ldr	r3, [pc, #540]	@ (800d690 <tx_control+0x2d28>)
 800d472:	2200      	movs	r2, #0
 800d474:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 800d476:	4b86      	ldr	r3, [pc, #536]	@ (800d690 <tx_control+0x2d28>)
 800d478:	2200      	movs	r2, #0
 800d47a:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 800d47c:	4b84      	ldr	r3, [pc, #528]	@ (800d690 <tx_control+0x2d28>)
 800d47e:	2200      	movs	r2, #0
 800d480:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 800d482:	4b83      	ldr	r3, [pc, #524]	@ (800d690 <tx_control+0x2d28>)
 800d484:	2200      	movs	r2, #0
 800d486:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 800d488:	4b81      	ldr	r3, [pc, #516]	@ (800d690 <tx_control+0x2d28>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 800d48e:	4b80      	ldr	r3, [pc, #512]	@ (800d690 <tx_control+0x2d28>)
 800d490:	2200      	movs	r2, #0
 800d492:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 800d494:	4b7f      	ldr	r3, [pc, #508]	@ (800d694 <tx_control+0x2d2c>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2201      	movs	r2, #1
 800d49a:	4053      	eors	r3, r2
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d103      	bne.n	800d4aa <tx_control+0x2b42>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 800d4a2:	4b7b      	ldr	r3, [pc, #492]	@ (800d690 <tx_control+0x2d28>)
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	709a      	strb	r2, [r3, #2]
 800d4a8:	e000      	b.n	800d4ac <tx_control+0x2b44>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 800d4aa:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 800d4ac:	4b79      	ldr	r3, [pc, #484]	@ (800d694 <tx_control+0x2d2c>)
 800d4ae:	785b      	ldrb	r3, [r3, #1]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	4053      	eors	r3, r2
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d103      	bne.n	800d4c2 <tx_control+0x2b5a>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 800d4ba:	4b75      	ldr	r3, [pc, #468]	@ (800d690 <tx_control+0x2d28>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	70da      	strb	r2, [r3, #3]
 800d4c0:	e000      	b.n	800d4c4 <tx_control+0x2b5c>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 800d4c2:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 800d4c4:	4b73      	ldr	r3, [pc, #460]	@ (800d694 <tx_control+0x2d2c>)
 800d4c6:	789b      	ldrb	r3, [r3, #2]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	4053      	eors	r3, r2
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d103      	bne.n	800d4da <tx_control+0x2b72>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 800d4d2:	4b6f      	ldr	r3, [pc, #444]	@ (800d690 <tx_control+0x2d28>)
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	711a      	strb	r2, [r3, #4]
 800d4d8:	e000      	b.n	800d4dc <tx_control+0x2b74>
			goto noFlag_ahorro2_TD;
 800d4da:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 800d4dc:	4b6e      	ldr	r3, [pc, #440]	@ (800d698 <tx_control+0x2d30>)
 800d4de:	78db      	ldrb	r3, [r3, #3]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	4053      	eors	r3, r2
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d103      	bne.n	800d4f2 <tx_control+0x2b8a>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 800d4ea:	4b69      	ldr	r3, [pc, #420]	@ (800d690 <tx_control+0x2d28>)
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	715a      	strb	r2, [r3, #5]
 800d4f0:	e000      	b.n	800d4f4 <tx_control+0x2b8c>
			goto noFlag_nocturno_TD;
 800d4f2:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 800d4f4:	4b69      	ldr	r3, [pc, #420]	@ (800d69c <tx_control+0x2d34>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	4053      	eors	r3, r2
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d103      	bne.n	800d50a <tx_control+0x2ba2>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 800d502:	4b63      	ldr	r3, [pc, #396]	@ (800d690 <tx_control+0x2d28>)
 800d504:	2201      	movs	r2, #1
 800d506:	719a      	strb	r2, [r3, #6]
 800d508:	e000      	b.n	800d50c <tx_control+0x2ba4>
			goto noFlag_vent_TD;
 800d50a:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 800d50c:	4b5f      	ldr	r3, [pc, #380]	@ (800d68c <tx_control+0x2d24>)
 800d50e:	789b      	ldrb	r3, [r3, #2]
 800d510:	2201      	movs	r2, #1
 800d512:	4053      	eors	r3, r2
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d103      	bne.n	800d522 <tx_control+0x2bba>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 800d51a:	4b5d      	ldr	r3, [pc, #372]	@ (800d690 <tx_control+0x2d28>)
 800d51c:	2201      	movs	r2, #1
 800d51e:	71da      	strb	r2, [r3, #7]
 800d520:	e000      	b.n	800d524 <tx_control+0x2bbc>
			goto noFlag_Aux_TD;
 800d522:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 800d524:	2313      	movs	r3, #19
 800d526:	18fb      	adds	r3, r7, r3
 800d528:	2200      	movs	r2, #0
 800d52a:	701a      	strb	r2, [r3, #0]
 800d52c:	e00d      	b.n	800d54a <tx_control+0x2be2>
			alarmas2_TD[k] = (trefst2[k]);
 800d52e:	2013      	movs	r0, #19
 800d530:	183b      	adds	r3, r7, r0
 800d532:	781a      	ldrb	r2, [r3, #0]
 800d534:	183b      	adds	r3, r7, r0
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	4959      	ldr	r1, [pc, #356]	@ (800d6a0 <tx_control+0x2d38>)
 800d53a:	5c89      	ldrb	r1, [r1, r2]
 800d53c:	4a59      	ldr	r2, [pc, #356]	@ (800d6a4 <tx_control+0x2d3c>)
 800d53e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 800d540:	183b      	adds	r3, r7, r0
 800d542:	781a      	ldrb	r2, [r3, #0]
 800d544:	183b      	adds	r3, r7, r0
 800d546:	3201      	adds	r2, #1
 800d548:	701a      	strb	r2, [r3, #0]
 800d54a:	2313      	movs	r3, #19
 800d54c:	18fb      	adds	r3, r7, r3
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b07      	cmp	r3, #7
 800d552:	d9ec      	bls.n	800d52e <tx_control+0x2bc6>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 800d554:	4b53      	ldr	r3, [pc, #332]	@ (800d6a4 <tx_control+0x2d3c>)
 800d556:	2200      	movs	r2, #0
 800d558:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 800d55a:	4b53      	ldr	r3, [pc, #332]	@ (800d6a8 <tx_control+0x2d40>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e013      	b.n	800d58e <tx_control+0x2c26>
			alarmas_TD |= (trefst[k] << k);
 800d566:	4a51      	ldr	r2, [pc, #324]	@ (800d6ac <tx_control+0x2d44>)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	18d3      	adds	r3, r2, r3
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	001a      	movs	r2, r3
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	409a      	lsls	r2, r3
 800d574:	0013      	movs	r3, r2
 800d576:	b25a      	sxtb	r2, r3
 800d578:	4b4b      	ldr	r3, [pc, #300]	@ (800d6a8 <tx_control+0x2d40>)
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	b25b      	sxtb	r3, r3
 800d57e:	4313      	orrs	r3, r2
 800d580:	b25b      	sxtb	r3, r3
 800d582:	b2da      	uxtb	r2, r3
 800d584:	4b48      	ldr	r3, [pc, #288]	@ (800d6a8 <tx_control+0x2d40>)
 800d586:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3301      	adds	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b07      	cmp	r3, #7
 800d592:	dde8      	ble.n	800d566 <tx_control+0x2bfe>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 800d594:	4b33      	ldr	r3, [pc, #204]	@ (800d664 <tx_control+0x2cfc>)
 800d596:	2240      	movs	r2, #64	@ 0x40
 800d598:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 800d59a:	4b32      	ldr	r3, [pc, #200]	@ (800d664 <tx_control+0x2cfc>)
 800d59c:	2281      	movs	r2, #129	@ 0x81
 800d59e:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 800d5a0:	4b30      	ldr	r3, [pc, #192]	@ (800d664 <tx_control+0x2cfc>)
 800d5a2:	2207      	movs	r2, #7
 800d5a4:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
 800d5a6:	4b21      	ldr	r3, [pc, #132]	@ (800d62c <tx_control+0x2cc4>)
 800d5a8:	227b      	movs	r2, #123	@ 0x7b
 800d5aa:	5c9a      	ldrb	r2, [r3, r2]
 800d5ac:	4b2d      	ldr	r3, [pc, #180]	@ (800d664 <tx_control+0x2cfc>)
 800d5ae:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = eePlantilla[eeversion2];
 800d5b0:	4b1e      	ldr	r3, [pc, #120]	@ (800d62c <tx_control+0x2cc4>)
 800d5b2:	227c      	movs	r2, #124	@ 0x7c
 800d5b4:	5c9a      	ldrb	r2, [r3, r2]
 800d5b6:	4b2b      	ldr	r3, [pc, #172]	@ (800d664 <tx_control+0x2cfc>)
 800d5b8:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 800d5ba:	4b1d      	ldr	r3, [pc, #116]	@ (800d630 <tx_control+0x2cc8>)
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	0a1b      	lsrs	r3, r3, #8
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	4b27      	ldr	r3, [pc, #156]	@ (800d664 <tx_control+0x2cfc>)
 800d5c6:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 800d5c8:	4b19      	ldr	r3, [pc, #100]	@ (800d630 <tx_control+0x2cc8>)
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	4b25      	ldr	r3, [pc, #148]	@ (800d664 <tx_control+0x2cfc>)
 800d5d0:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 800d5d2:	4b18      	ldr	r3, [pc, #96]	@ (800d634 <tx_control+0x2ccc>)
 800d5d4:	881b      	ldrh	r3, [r3, #0]
 800d5d6:	0a1b      	lsrs	r3, r3, #8
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	4b21      	ldr	r3, [pc, #132]	@ (800d664 <tx_control+0x2cfc>)
 800d5de:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 800d5e0:	4b14      	ldr	r3, [pc, #80]	@ (800d634 <tx_control+0x2ccc>)
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	4b1f      	ldr	r3, [pc, #124]	@ (800d664 <tx_control+0x2cfc>)
 800d5e8:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 800d5ea:	4b13      	ldr	r3, [pc, #76]	@ (800d638 <tx_control+0x2cd0>)
 800d5ec:	781a      	ldrb	r2, [r3, #0]
 800d5ee:	4b1d      	ldr	r3, [pc, #116]	@ (800d664 <tx_control+0x2cfc>)
 800d5f0:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 800d5f2:	4b12      	ldr	r3, [pc, #72]	@ (800d63c <tx_control+0x2cd4>)
 800d5f4:	781a      	ldrb	r2, [r3, #0]
 800d5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800d664 <tx_control+0x2cfc>)
 800d5f8:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 800d5fa:	4b12      	ldr	r3, [pc, #72]	@ (800d644 <tx_control+0x2cdc>)
 800d5fc:	781a      	ldrb	r2, [r3, #0]
 800d5fe:	4b19      	ldr	r3, [pc, #100]	@ (800d664 <tx_control+0x2cfc>)
 800d600:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 800d602:	4b11      	ldr	r3, [pc, #68]	@ (800d648 <tx_control+0x2ce0>)
 800d604:	781a      	ldrb	r2, [r3, #0]
 800d606:	4b17      	ldr	r3, [pc, #92]	@ (800d664 <tx_control+0x2cfc>)
 800d608:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 800d60a:	4b16      	ldr	r3, [pc, #88]	@ (800d664 <tx_control+0x2cfc>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 800d610:	4b0b      	ldr	r3, [pc, #44]	@ (800d640 <tx_control+0x2cd8>)
 800d612:	781a      	ldrb	r2, [r3, #0]
 800d614:	4b13      	ldr	r3, [pc, #76]	@ (800d664 <tx_control+0x2cfc>)
 800d616:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 800d618:	4b12      	ldr	r3, [pc, #72]	@ (800d664 <tx_control+0x2cfc>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 800d61e:	2300      	movs	r3, #0
 800d620:	60bb      	str	r3, [r7, #8]
 800d622:	e057      	b.n	800d6d4 <tx_control+0x2d6c>
 800d624:	20000e78 	.word	0x20000e78
 800d628:	20000e64 	.word	0x20000e64
 800d62c:	0803f000 	.word	0x0803f000
 800d630:	20000cec 	.word	0x20000cec
 800d634:	20000cee 	.word	0x20000cee
 800d638:	20000aec 	.word	0x20000aec
 800d63c:	20000aed 	.word	0x20000aed
 800d640:	20000b0a 	.word	0x20000b0a
 800d644:	20000aee 	.word	0x20000aee
 800d648:	20000aef 	.word	0x20000aef
 800d64c:	20000d50 	.word	0x20000d50
 800d650:	20000d48 	.word	0x20000d48
 800d654:	20000d4c 	.word	0x20000d4c
 800d658:	20000e75 	.word	0x20000e75
 800d65c:	20000d6c 	.word	0x20000d6c
 800d660:	20000d55 	.word	0x20000d55
 800d664:	20000e94 	.word	0x20000e94
 800d668:	20000a93 	.word	0x20000a93
 800d66c:	20000e99 	.word	0x20000e99
 800d670:	20000a92 	.word	0x20000a92
 800d674:	20000ea8 	.word	0x20000ea8
 800d678:	20000d58 	.word	0x20000d58
 800d67c:	20000d70 	.word	0x20000d70
 800d680:	20000d60 	.word	0x20000d60
 800d684:	20000e8a 	.word	0x20000e8a
 800d688:	200000bc 	.word	0x200000bc
 800d68c:	20000ae0 	.word	0x20000ae0
 800d690:	20000cfc 	.word	0x20000cfc
 800d694:	20000b78 	.word	0x20000b78
 800d698:	20000ab4 	.word	0x20000ab4
 800d69c:	20000b1c 	.word	0x20000b1c
 800d6a0:	20000abc 	.word	0x20000abc
 800d6a4:	20000d08 	.word	0x20000d08
 800d6a8:	20000d10 	.word	0x20000d10
 800d6ac:	20000ac4 	.word	0x20000ac4
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 800d6b0:	4b43      	ldr	r3, [pc, #268]	@ (800d7c0 <tx_control+0x2e58>)
 800d6b2:	7bda      	ldrb	r2, [r3, #15]
 800d6b4:	4943      	ldr	r1, [pc, #268]	@ (800d7c4 <tx_control+0x2e5c>)
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	18cb      	adds	r3, r1, r3
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	0019      	movs	r1, r3
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	4099      	lsls	r1, r3
 800d6c2:	000b      	movs	r3, r1
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	b2da      	uxtb	r2, r3
 800d6ca:	4b3d      	ldr	r3, [pc, #244]	@ (800d7c0 <tx_control+0x2e58>)
 800d6cc:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	60bb      	str	r3, [r7, #8]
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2b07      	cmp	r3, #7
 800d6d8:	ddea      	ble.n	800d6b0 <tx_control+0x2d48>
		}
		bufferWifiTx[16] =estados_TD;
 800d6da:	4b3b      	ldr	r3, [pc, #236]	@ (800d7c8 <tx_control+0x2e60>)
 800d6dc:	781a      	ldrb	r2, [r3, #0]
 800d6de:	4b38      	ldr	r3, [pc, #224]	@ (800d7c0 <tx_control+0x2e58>)
 800d6e0:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 800d6e2:	4b37      	ldr	r3, [pc, #220]	@ (800d7c0 <tx_control+0x2e58>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 800d6e8:	1dfb      	adds	r3, r7, #7
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	701a      	strb	r2, [r3, #0]
 800d6ee:	e014      	b.n	800d71a <tx_control+0x2db2>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 800d6f0:	4b33      	ldr	r3, [pc, #204]	@ (800d7c0 <tx_control+0x2e58>)
 800d6f2:	7c5a      	ldrb	r2, [r3, #17]
 800d6f4:	1dfb      	adds	r3, r7, #7
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	4934      	ldr	r1, [pc, #208]	@ (800d7cc <tx_control+0x2e64>)
 800d6fa:	5ccb      	ldrb	r3, [r1, r3]
 800d6fc:	0019      	movs	r1, r3
 800d6fe:	1dfb      	adds	r3, r7, #7
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	4099      	lsls	r1, r3
 800d704:	000b      	movs	r3, r1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	4313      	orrs	r3, r2
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	4b2c      	ldr	r3, [pc, #176]	@ (800d7c0 <tx_control+0x2e58>)
 800d70e:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 800d710:	1dfb      	adds	r3, r7, #7
 800d712:	781a      	ldrb	r2, [r3, #0]
 800d714:	1dfb      	adds	r3, r7, #7
 800d716:	3201      	adds	r2, #1
 800d718:	701a      	strb	r2, [r3, #0]
 800d71a:	1dfb      	adds	r3, r7, #7
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b07      	cmp	r3, #7
 800d720:	d9e6      	bls.n	800d6f0 <tx_control+0x2d88>
		}

		bufferWifiTx[18] = alarmas_TD;
 800d722:	4b2b      	ldr	r3, [pc, #172]	@ (800d7d0 <tx_control+0x2e68>)
 800d724:	781a      	ldrb	r2, [r3, #0]
 800d726:	4b26      	ldr	r3, [pc, #152]	@ (800d7c0 <tx_control+0x2e58>)
 800d728:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 800d72a:	4b2a      	ldr	r3, [pc, #168]	@ (800d7d4 <tx_control+0x2e6c>)
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	0a1b      	lsrs	r3, r3, #8
 800d730:	b29b      	uxth	r3, r3
 800d732:	b2da      	uxtb	r2, r3
 800d734:	4b22      	ldr	r3, [pc, #136]	@ (800d7c0 <tx_control+0x2e58>)
 800d736:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 800d738:	4b26      	ldr	r3, [pc, #152]	@ (800d7d4 <tx_control+0x2e6c>)
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	4b20      	ldr	r3, [pc, #128]	@ (800d7c0 <tx_control+0x2e58>)
 800d740:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 800d742:	4b24      	ldr	r3, [pc, #144]	@ (800d7d4 <tx_control+0x2e6c>)
 800d744:	881b      	ldrh	r3, [r3, #0]
 800d746:	0a1b      	lsrs	r3, r3, #8
 800d748:	b29b      	uxth	r3, r3
 800d74a:	b2da      	uxtb	r2, r3
 800d74c:	4b1c      	ldr	r3, [pc, #112]	@ (800d7c0 <tx_control+0x2e58>)
 800d74e:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 800d750:	4b20      	ldr	r3, [pc, #128]	@ (800d7d4 <tx_control+0x2e6c>)
 800d752:	881b      	ldrh	r3, [r3, #0]
 800d754:	b2da      	uxtb	r2, r3
 800d756:	4b1a      	ldr	r3, [pc, #104]	@ (800d7c0 <tx_control+0x2e58>)
 800d758:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800d75a:	4b1f      	ldr	r3, [pc, #124]	@ (800d7d8 <tx_control+0x2e70>)
 800d75c:	4a18      	ldr	r2, [pc, #96]	@ (800d7c0 <tx_control+0x2e58>)
 800d75e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800d760:	4b1e      	ldr	r3, [pc, #120]	@ (800d7dc <tx_control+0x2e74>)
 800d762:	4a17      	ldr	r2, [pc, #92]	@ (800d7c0 <tx_control+0x2e58>)
 800d764:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 800d766:	4b1e      	ldr	r3, [pc, #120]	@ (800d7e0 <tx_control+0x2e78>)
 800d768:	4a1e      	ldr	r2, [pc, #120]	@ (800d7e4 <tx_control+0x2e7c>)
 800d76a:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 800d76c:	4b1e      	ldr	r3, [pc, #120]	@ (800d7e8 <tx_control+0x2e80>)
 800d76e:	2217      	movs	r2, #23
 800d770:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d772:	4b1e      	ldr	r3, [pc, #120]	@ (800d7ec <tx_control+0x2e84>)
 800d774:	2200      	movs	r2, #0
 800d776:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800d778:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f0 <tx_control+0x2e88>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d77e:	4b1b      	ldr	r3, [pc, #108]	@ (800d7ec <tx_control+0x2e84>)
 800d780:	2201      	movs	r2, #1
 800d782:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 800d784:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f4 <tx_control+0x2e8c>)
 800d786:	2255      	movs	r2, #85	@ 0x55
 800d788:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800d78a:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f8 <tx_control+0x2e90>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 800d790:	e00f      	b.n	800d7b2 <tx_control+0x2e4a>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 800d792:	46c0      	nop			@ (mov r8, r8)
 800d794:	f7fe ffcb 	bl	800c72e <tx_control+0x1dc6>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 800d798:	46c0      	nop			@ (mov r8, r8)
 800d79a:	f7fe ffc8 	bl	800c72e <tx_control+0x1dc6>
		goto end_tx_wifi;// jp		end_tx_wifi
 800d79e:	46c0      	nop			@ (mov r8, r8)
 800d7a0:	f7fe ffc5 	bl	800c72e <tx_control+0x1dc6>
		goto end_tx_wifi;// jp		end_tx_wifi
 800d7a4:	46c0      	nop			@ (mov r8, r8)
 800d7a6:	f7fe ffc2 	bl	800c72e <tx_control+0x1dc6>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 800d7aa:	46c0      	nop			@ (mov r8, r8)
 800d7ac:	f7fe ffbf 	bl	800c72e <tx_control+0x1dc6>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 800d7b0:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 800d7b2:	f7fe ffbc 	bl	800c72e <tx_control+0x1dc6>

end_tx_control_b:
		asm ("nop");
 800d7b6:	46c0      	nop			@ (mov r8, r8)

}
 800d7b8:	46c0      	nop			@ (mov r8, r8)
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	b010      	add	sp, #64	@ 0x40
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20000e94 	.word	0x20000e94
 800d7c4:	20000cfc 	.word	0x20000cfc
 800d7c8:	20000d04 	.word	0x20000d04
 800d7cc:	20000d08 	.word	0x20000d08
 800d7d0:	20000d10 	.word	0x20000d10
 800d7d4:	20000b90 	.word	0x20000b90
 800d7d8:	20000d50 	.word	0x20000d50
 800d7dc:	20000d48 	.word	0x20000d48
 800d7e0:	20000d4c 	.word	0x20000d4c
 800d7e4:	20000eab 	.word	0x20000eab
 800d7e8:	20000d6c 	.word	0x20000d6c
 800d7ec:	20000d58 	.word	0x20000d58
 800d7f0:	20000d70 	.word	0x20000d70
 800d7f4:	20000d55 	.word	0x20000d55
 800d7f8:	20000d60 	.word	0x20000d60

0800d7fc <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 800d802:	4b2f      	ldr	r3, [pc, #188]	@ (800d8c0 <prepTXlogg_2+0xc4>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	607b      	str	r3, [r7, #4]
			//clr resulh
			//mov	resull,#126
			//addw	X,resulh
			//ld	A,cntByteBlock
			point_X[126] = cntByteBlock;		//ld	(X),A
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	337e      	adds	r3, #126	@ 0x7e
 800d80c:	4a2d      	ldr	r2, [pc, #180]	@ (800d8c4 <prepTXlogg_2+0xc8>)
 800d80e:	7812      	ldrb	r2, [r2, #0]
 800d810:	701a      	strb	r2, [r3, #0]


			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800d812:	4b2d      	ldr	r3, [pc, #180]	@ (800d8c8 <prepTXlogg_2+0xcc>)
 800d814:	22aa      	movs	r2, #170	@ 0xaa
 800d816:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 800d818:	4b2c      	ldr	r3, [pc, #176]	@ (800d8cc <prepTXlogg_2+0xd0>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	01db      	lsls	r3, r3, #7
 800d81e:	b29a      	uxth	r2, r3
 800d820:	4b2b      	ldr	r3, [pc, #172]	@ (800d8d0 <prepTXlogg_2+0xd4>)
 800d822:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 800d824:	4b2b      	ldr	r3, [pc, #172]	@ (800d8d4 <prepTXlogg_2+0xd8>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a29      	ldr	r2, [pc, #164]	@ (800d8d0 <prepTXlogg_2+0xd4>)
 800d82a:	8812      	ldrh	r2, [r2, #0]
 800d82c:	189a      	adds	r2, r3, r2
 800d82e:	4b2a      	ldr	r3, [pc, #168]	@ (800d8d8 <prepTXlogg_2+0xdc>)
 800d830:	601a      	str	r2, [r3, #0]
			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 800d832:	4b23      	ldr	r3, [pc, #140]	@ (800d8c0 <prepTXlogg_2+0xc4>)
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	4b29      	ldr	r3, [pc, #164]	@ (800d8dc <prepTXlogg_2+0xe0>)
 800d838:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 800d83a:	f7f6 ff8f 	bl	800475c <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 800d83e:	f7f6 fea9 	bl	8004594 <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 800d842:	f7f6 fe6d 	bl	8004520 <save_cntReg>


			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 800d846:	4b21      	ldr	r3, [pc, #132]	@ (800d8cc <prepTXlogg_2+0xd0>)
 800d848:	781a      	ldrb	r2, [r3, #0]
 800d84a:	4b25      	ldr	r3, [pc, #148]	@ (800d8e0 <prepTXlogg_2+0xe4>)
 800d84c:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 800d84e:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c4 <prepTXlogg_2+0xc8>)
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d006      	beq.n	800d864 <prepTXlogg_2+0x68>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 800d856:	4b22      	ldr	r3, [pc, #136]	@ (800d8e0 <prepTXlogg_2+0xe4>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	3301      	adds	r3, #1
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	4b20      	ldr	r3, [pc, #128]	@ (800d8e0 <prepTXlogg_2+0xe4>)
 800d860:	701a      	strb	r2, [r3, #0]
 800d862:	e000      	b.n	800d866 <prepTXlogg_2+0x6a>
				goto noIncBlock;//jreq	noIncBlock
 800d864:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 800d866:	4b1e      	ldr	r3, [pc, #120]	@ (800d8e0 <prepTXlogg_2+0xe4>)
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	01db      	lsls	r3, r3, #7
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	4b18      	ldr	r3, [pc, #96]	@ (800d8d0 <prepTXlogg_2+0xd4>)
 800d870:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 800d872:	4b18      	ldr	r3, [pc, #96]	@ (800d8d4 <prepTXlogg_2+0xd8>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a16      	ldr	r2, [pc, #88]	@ (800d8d0 <prepTXlogg_2+0xd4>)
 800d878:	8812      	ldrh	r2, [r2, #0]
 800d87a:	189b      	adds	r3, r3, r2
 800d87c:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 800d87e:	4b19      	ldr	r3, [pc, #100]	@ (800d8e4 <prepTXlogg_2+0xe8>)
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 800d884:	4b18      	ldr	r3, [pc, #96]	@ (800d8e8 <prepTXlogg_2+0xec>)
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 800d88a:	4b18      	ldr	r3, [pc, #96]	@ (800d8ec <prepTXlogg_2+0xf0>)
 800d88c:	2201      	movs	r2, #1
 800d88e:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 800d890:	4b15      	ldr	r3, [pc, #84]	@ (800d8e8 <prepTXlogg_2+0xec>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	4b16      	ldr	r3, [pc, #88]	@ (800d8f0 <prepTXlogg_2+0xf4>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d106      	bne.n	800d8aa <prepTXlogg_2+0xae>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 800d89c:	4b15      	ldr	r3, [pc, #84]	@ (800d8f4 <prepTXlogg_2+0xf8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 800d8a2:	4b12      	ldr	r3, [pc, #72]	@ (800d8ec <prepTXlogg_2+0xf0>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 800d8a8:	e003      	b.n	800d8b2 <prepTXlogg_2+0xb6>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 800d8aa:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 800d8b2:	4b11      	ldr	r3, [pc, #68]	@ (800d8f8 <prepTXlogg_2+0xfc>)
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	601a      	str	r2, [r3, #0]
			//ret
}
 800d8b8:	46c0      	nop			@ (mov r8, r8)
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	b002      	add	sp, #8
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20000ce0 	.word	0x20000ce0
 800d8c4:	20000cd7 	.word	0x20000cd7
 800d8c8:	20000cc8 	.word	0x20000cc8
 800d8cc:	20000cd6 	.word	0x20000cd6
 800d8d0:	2000083e 	.word	0x2000083e
 800d8d4:	20000cdc 	.word	0x20000cdc
 800d8d8:	20000ccc 	.word	0x20000ccc
 800d8dc:	20000cd0 	.word	0x20000cd0
 800d8e0:	2000083c 	.word	0x2000083c
 800d8e4:	20000d48 	.word	0x20000d48
 800d8e8:	20000d50 	.word	0x20000d50
 800d8ec:	20000d58 	.word	0x20000d58
 800d8f0:	20000d64 	.word	0x20000d64
 800d8f4:	20000d68 	.word	0x20000d68
 800d8f8:	20000d4c 	.word	0x20000d4c

0800d8fc <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 800d900:	4b8b      	ldr	r3, [pc, #556]	@ (800db30 <voltmetro+0x234>)
 800d902:	799b      	ldrb	r3, [r3, #6]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d100      	bne.n	800d90a <voltmetro+0xe>
 800d908:	e0fb      	b.n	800db02 <voltmetro+0x206>
					goto voltmetro1;
 800d90a:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 800d90c:	4b89      	ldr	r3, [pc, #548]	@ (800db34 <voltmetro+0x238>)
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	3301      	adds	r3, #1
 800d912:	b2da      	uxtb	r2, r3
 800d914:	4b87      	ldr	r3, [pc, #540]	@ (800db34 <voltmetro+0x238>)
 800d916:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 800d918:	4b86      	ldr	r3, [pc, #536]	@ (800db34 <voltmetro+0x238>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	2b18      	cmp	r3, #24
 800d91e:	d800      	bhi.n	800d922 <voltmetro+0x26>
 800d920:	e06f      	b.n	800da02 <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 800d922:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 800d924:	4b83      	ldr	r3, [pc, #524]	@ (800db34 <voltmetro+0x238>)
 800d926:	2200      	movs	r2, #0
 800d928:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 800d92a:	4b83      	ldr	r3, [pc, #524]	@ (800db38 <voltmetro+0x23c>)
 800d92c:	781a      	ldrb	r2, [r3, #0]
 800d92e:	4b83      	ldr	r3, [pc, #524]	@ (800db3c <voltmetro+0x240>)
 800d930:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 800d932:	4b82      	ldr	r3, [pc, #520]	@ (800db3c <voltmetro+0x240>)
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	2bff      	cmp	r3, #255	@ 0xff
 800d938:	d10a      	bne.n	800d950 <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 800d93a:	4b81      	ldr	r3, [pc, #516]	@ (800db40 <voltmetro+0x244>)
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d019      	beq.n	800d976 <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 800d942:	4b7f      	ldr	r3, [pc, #508]	@ (800db40 <voltmetro+0x244>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	3301      	adds	r3, #1
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	4b7d      	ldr	r3, [pc, #500]	@ (800db40 <voltmetro+0x244>)
 800d94c:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 800d94e:	e05b      	b.n	800da08 <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 800d950:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 800d952:	4b7b      	ldr	r3, [pc, #492]	@ (800db40 <voltmetro+0x244>)
 800d954:	2200      	movs	r2, #0
 800d956:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 800d958:	4b78      	ldr	r3, [pc, #480]	@ (800db3c <voltmetro+0x240>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b32      	cmp	r3, #50	@ 0x32
 800d95e:	d82a      	bhi.n	800d9b6 <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 800d960:	4b78      	ldr	r3, [pc, #480]	@ (800db44 <voltmetro+0x248>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b02      	cmp	r3, #2
 800d966:	d008      	beq.n	800d97a <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 800d968:	4b76      	ldr	r3, [pc, #472]	@ (800db44 <voltmetro+0x248>)
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	3301      	adds	r3, #1
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	4b74      	ldr	r3, [pc, #464]	@ (800db44 <voltmetro+0x248>)
 800d972:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 800d974:	e048      	b.n	800da08 <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 800d976:	46c0      	nop			@ (mov r8, r8)
 800d978:	e000      	b.n	800d97c <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 800d97a:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 800d97c:	4b72      	ldr	r3, [pc, #456]	@ (800db48 <voltmetro+0x24c>)
 800d97e:	2200      	movs	r2, #0
 800d980:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 800d982:	4b72      	ldr	r3, [pc, #456]	@ (800db4c <voltmetro+0x250>)
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d103      	bne.n	800d992 <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 800d98a:	4b6f      	ldr	r3, [pc, #444]	@ (800db48 <voltmetro+0x24c>)
 800d98c:	2201      	movs	r2, #1
 800d98e:	701a      	strb	r2, [r3, #0]
 800d990:	e000      	b.n	800d994 <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 800d992:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 800d994:	4b6e      	ldr	r3, [pc, #440]	@ (800db50 <voltmetro+0x254>)
 800d996:	2200      	movs	r2, #0
 800d998:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 800d99a:	4b6e      	ldr	r3, [pc, #440]	@ (800db54 <voltmetro+0x258>)
 800d99c:	2273      	movs	r2, #115	@ 0x73
 800d99e:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 800d9a0:	4b6d      	ldr	r3, [pc, #436]	@ (800db58 <voltmetro+0x25c>)
 800d9a2:	2257      	movs	r2, #87	@ 0x57
 800d9a4:	5c9b      	ldrb	r3, [r3, r2]
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	d103      	bne.n	800d9b2 <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 800d9aa:	4b6a      	ldr	r3, [pc, #424]	@ (800db54 <voltmetro+0x258>)
 800d9ac:	22d2      	movs	r2, #210	@ 0xd2
 800d9ae:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 800d9b0:	e02a      	b.n	800da08 <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 800d9b2:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 800d9b4:	e028      	b.n	800da08 <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 800d9b6:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 800d9b8:	4b62      	ldr	r3, [pc, #392]	@ (800db44 <voltmetro+0x248>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 800d9be:	4b62      	ldr	r3, [pc, #392]	@ (800db48 <voltmetro+0x24c>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 800d9c4:	4b62      	ldr	r3, [pc, #392]	@ (800db50 <voltmetro+0x254>)
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	001a      	movs	r2, r3
 800d9ca:	4b5c      	ldr	r3, [pc, #368]	@ (800db3c <voltmetro+0x240>)
 800d9cc:	7819      	ldrb	r1, [r3, #0]
 800d9ce:	4b63      	ldr	r3, [pc, #396]	@ (800db5c <voltmetro+0x260>)
 800d9d0:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 800d9d2:	4b5f      	ldr	r3, [pc, #380]	@ (800db50 <voltmetro+0x254>)
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	4b5d      	ldr	r3, [pc, #372]	@ (800db50 <voltmetro+0x254>)
 800d9dc:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 800d9de:	4b5c      	ldr	r3, [pc, #368]	@ (800db50 <voltmetro+0x254>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b07      	cmp	r3, #7
 800d9e4:	d90f      	bls.n	800da06 <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 800d9e6:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 800d9e8:	4b59      	ldr	r3, [pc, #356]	@ (800db50 <voltmetro+0x254>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 800d9ee:	4b5b      	ldr	r3, [pc, #364]	@ (800db5c <voltmetro+0x260>)
 800d9f0:	2108      	movs	r1, #8
 800d9f2:	0018      	movs	r0, r3
 800d9f4:	f7f5 f96e 	bl	8002cd4 <prom8m1b>
 800d9f8:	0003      	movs	r3, r0
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	4b55      	ldr	r3, [pc, #340]	@ (800db54 <voltmetro+0x258>)
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e002      	b.n	800da08 <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 800da02:	46c0      	nop			@ (mov r8, r8)
 800da04:	e000      	b.n	800da08 <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 800da06:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 800da08:	4b55      	ldr	r3, [pc, #340]	@ (800db60 <voltmetro+0x264>)
 800da0a:	79db      	ldrb	r3, [r3, #7]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d104      	bne.n	800da1a <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 800da10:	4b54      	ldr	r3, [pc, #336]	@ (800db64 <voltmetro+0x268>)
 800da12:	781a      	ldrb	r2, [r3, #0]
 800da14:	4b54      	ldr	r3, [pc, #336]	@ (800db68 <voltmetro+0x26c>)
 800da16:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 800da18:	e004      	b.n	800da24 <voltmetro+0x128>
					goto hist_vla;
 800da1a:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 800da1c:	4b53      	ldr	r3, [pc, #332]	@ (800db6c <voltmetro+0x270>)
 800da1e:	781a      	ldrb	r2, [r3, #0]
 800da20:	4b51      	ldr	r3, [pc, #324]	@ (800db68 <voltmetro+0x26c>)
 800da22:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 800da24:	4b50      	ldr	r3, [pc, #320]	@ (800db68 <voltmetro+0x26c>)
 800da26:	781a      	ldrb	r2, [r3, #0]
 800da28:	4b4a      	ldr	r3, [pc, #296]	@ (800db54 <voltmetro+0x258>)
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d80c      	bhi.n	800da4a <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 800da30:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 800da32:	4b4f      	ldr	r3, [pc, #316]	@ (800db70 <voltmetro+0x274>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d165      	bne.n	800db06 <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 800da3a:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 800da3c:	4948      	ldr	r1, [pc, #288]	@ (800db60 <voltmetro+0x264>)
 800da3e:	4848      	ldr	r0, [pc, #288]	@ (800db60 <voltmetro+0x264>)
 800da40:	2306      	movs	r3, #6
 800da42:	2207      	movs	r2, #7
 800da44:	f7fc fc16 	bl	800a274 <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 800da48:	e02e      	b.n	800daa8 <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 800da4a:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 800da4c:	4b42      	ldr	r3, [pc, #264]	@ (800db58 <voltmetro+0x25c>)
 800da4e:	2245      	movs	r2, #69	@ 0x45
 800da50:	5c9a      	ldrb	r2, [r3, r2]
 800da52:	4b47      	ldr	r3, [pc, #284]	@ (800db70 <voltmetro+0x274>)
 800da54:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 800da56:	4b3d      	ldr	r3, [pc, #244]	@ (800db4c <voltmetro+0x250>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d103      	bne.n	800da66 <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 800da5e:	4b44      	ldr	r3, [pc, #272]	@ (800db70 <voltmetro+0x274>)
 800da60:	2202      	movs	r2, #2
 800da62:	701a      	strb	r2, [r3, #0]
 800da64:	e000      	b.n	800da68 <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 800da66:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 800da68:	4b3d      	ldr	r3, [pc, #244]	@ (800db60 <voltmetro+0x264>)
 800da6a:	799b      	ldrb	r3, [r3, #6]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d104      	bne.n	800da7a <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 800da70:	4b40      	ldr	r3, [pc, #256]	@ (800db74 <voltmetro+0x278>)
 800da72:	781a      	ldrb	r2, [r3, #0]
 800da74:	4b3c      	ldr	r3, [pc, #240]	@ (800db68 <voltmetro+0x26c>)
 800da76:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 800da78:	e004      	b.n	800da84 <voltmetro+0x188>
						goto hist_vlb; //
 800da7a:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 800da7c:	4b3e      	ldr	r3, [pc, #248]	@ (800db78 <voltmetro+0x27c>)
 800da7e:	781a      	ldrb	r2, [r3, #0]
 800da80:	4b39      	ldr	r3, [pc, #228]	@ (800db68 <voltmetro+0x26c>)
 800da82:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 800da84:	4b38      	ldr	r3, [pc, #224]	@ (800db68 <voltmetro+0x26c>)
 800da86:	781a      	ldrb	r2, [r3, #0]
 800da88:	4b32      	ldr	r3, [pc, #200]	@ (800db54 <voltmetro+0x258>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d31d      	bcc.n	800dacc <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 800da90:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 800da92:	4b3a      	ldr	r3, [pc, #232]	@ (800db7c <voltmetro+0x280>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d137      	bne.n	800db0a <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 800da9a:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 800da9c:	4930      	ldr	r1, [pc, #192]	@ (800db60 <voltmetro+0x264>)
 800da9e:	4830      	ldr	r0, [pc, #192]	@ (800db60 <voltmetro+0x264>)
 800daa0:	2307      	movs	r3, #7
 800daa2:	2206      	movs	r2, #6
 800daa4:	f7fc fbe6 	bl	800a274 <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 800daa8:	4b2b      	ldr	r3, [pc, #172]	@ (800db58 <voltmetro+0x25c>)
 800daaa:	2263      	movs	r2, #99	@ 0x63
 800daac:	5c9a      	ldrb	r2, [r3, r2]
 800daae:	4b23      	ldr	r3, [pc, #140]	@ (800db3c <voltmetro+0x240>)
 800dab0:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 800dab2:	f7f6 f8e1 	bl	8003c78 <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 800dab6:	4b32      	ldr	r3, [pc, #200]	@ (800db80 <voltmetro+0x284>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	021b      	lsls	r3, r3, #8
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	4a31      	ldr	r2, [pc, #196]	@ (800db84 <voltmetro+0x288>)
 800dac0:	7812      	ldrb	r2, [r2, #0]
 800dac2:	189b      	adds	r3, r3, r2
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	4b30      	ldr	r3, [pc, #192]	@ (800db88 <voltmetro+0x28c>)
 800dac8:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 800daca:	e021      	b.n	800db10 <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 800dacc:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 800dace:	4b22      	ldr	r3, [pc, #136]	@ (800db58 <voltmetro+0x25c>)
 800dad0:	2245      	movs	r2, #69	@ 0x45
 800dad2:	5c9a      	ldrb	r2, [r3, r2]
 800dad4:	4b29      	ldr	r3, [pc, #164]	@ (800db7c <voltmetro+0x280>)
 800dad6:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 800dad8:	4b1c      	ldr	r3, [pc, #112]	@ (800db4c <voltmetro+0x250>)
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d103      	bne.n	800dae8 <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 800dae0:	4b26      	ldr	r3, [pc, #152]	@ (800db7c <voltmetro+0x280>)
 800dae2:	2202      	movs	r2, #2
 800dae4:	701a      	strb	r2, [r3, #0]
 800dae6:	e000      	b.n	800daea <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 800dae8:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 800daea:	4b27      	ldr	r3, [pc, #156]	@ (800db88 <voltmetro+0x28c>)
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10d      	bne.n	800db0e <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 800daf2:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 800daf4:	491a      	ldr	r1, [pc, #104]	@ (800db60 <voltmetro+0x264>)
 800daf6:	481a      	ldr	r0, [pc, #104]	@ (800db60 <voltmetro+0x264>)
 800daf8:	2307      	movs	r3, #7
 800dafa:	2206      	movs	r2, #6
 800dafc:	f7fc fbd5 	bl	800a2aa <Bclear_Clear_trfst>
 800db00:	e006      	b.n	800db10 <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 800db02:	46c0      	nop			@ (mov r8, r8)
 800db04:	e004      	b.n	800db10 <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 800db06:	46c0      	nop			@ (mov r8, r8)
 800db08:	e002      	b.n	800db10 <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 800db0a:	46c0      	nop			@ (mov r8, r8)
 800db0c:	e000      	b.n	800db10 <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 800db0e:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 800db10:	4b07      	ldr	r3, [pc, #28]	@ (800db30 <voltmetro+0x234>)
 800db12:	799b      	ldrb	r3, [r3, #6]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 800db18:	4911      	ldr	r1, [pc, #68]	@ (800db60 <voltmetro+0x264>)
 800db1a:	4811      	ldr	r0, [pc, #68]	@ (800db60 <voltmetro+0x264>)
 800db1c:	2307      	movs	r3, #7
 800db1e:	2206      	movs	r2, #6
 800db20:	f7fc fbc3 	bl	800a2aa <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 800db24:	e000      	b.n	800db28 <voltmetro+0x22c>
						goto fin_voltmetro1;
 800db26:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 800db28:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 800db2a:	46c0      	nop			@ (mov r8, r8)
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	20000ae0 	.word	0x20000ae0
 800db34:	20000b08 	.word	0x20000b08
 800db38:	20000a84 	.word	0x20000a84
 800db3c:	20000a93 	.word	0x20000a93
 800db40:	20000b66 	.word	0x20000b66
 800db44:	20000b65 	.word	0x20000b65
 800db48:	20000abc 	.word	0x20000abc
 800db4c:	20000ad4 	.word	0x20000ad4
 800db50:	20000b09 	.word	0x20000b09
 800db54:	20000b0a 	.word	0x20000b0a
 800db58:	200000bc 	.word	0x200000bc
 800db5c:	20000ba4 	.word	0x20000ba4
 800db60:	20000ac4 	.word	0x20000ac4
 800db64:	20000b5f 	.word	0x20000b5f
 800db68:	2000083c 	.word	0x2000083c
 800db6c:	20000b61 	.word	0x20000b61
 800db70:	20000aad 	.word	0x20000aad
 800db74:	20000b60 	.word	0x20000b60
 800db78:	20000b62 	.word	0x20000b62
 800db7c:	20000aac 	.word	0x20000aac
 800db80:	20000a85 	.word	0x20000a85
 800db84:	20000a86 	.word	0x20000a86
 800db88:	20000aa4 	.word	0x20000aa4

0800db8c <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0


				memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 800db90:	f7f6 fea8 	bl	80048e4 <memodriver>


////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 800db94:	4b45      	ldr	r3, [pc, #276]	@ (800dcac <watch+0x120>)
 800db96:	2200      	movs	r2, #0
 800db98:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 800db9a:	4b44      	ldr	r3, [pc, #272]	@ (800dcac <watch+0x120>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 800dba0:	4b42      	ldr	r3, [pc, #264]	@ (800dcac <watch+0x120>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 800dba6:	4b41      	ldr	r3, [pc, #260]	@ (800dcac <watch+0x120>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 800dbac:	4b3f      	ldr	r3, [pc, #252]	@ (800dcac <watch+0x120>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 800dbb2:	4b3f      	ldr	r3, [pc, #252]	@ (800dcb0 <watch+0x124>)
 800dbb4:	785b      	ldrb	r3, [r3, #1]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	4053      	eors	r3, r2
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d103      	bne.n	800dbc8 <watch+0x3c>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 800dbc0:	4b3a      	ldr	r3, [pc, #232]	@ (800dcac <watch+0x120>)
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	715a      	strb	r2, [r3, #5]
 800dbc6:	e000      	b.n	800dbca <watch+0x3e>
					goto	jmp_watch_02;
 800dbc8:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 800dbca:	4b3a      	ldr	r3, [pc, #232]	@ (800dcb4 <watch+0x128>)
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d000      	beq.n	800dbd4 <watch+0x48>
 800dbd2:	e064      	b.n	800dc9e <watch+0x112>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 800dbd4:	4b38      	ldr	r3, [pc, #224]	@ (800dcb8 <watch+0x12c>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	4053      	eors	r3, r2
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d107      	bne.n	800dbf2 <watch+0x66>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 800dbe2:	4b36      	ldr	r3, [pc, #216]	@ (800dcbc <watch+0x130>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d108      	bne.n	800dbfc <watch+0x70>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 800dbea:	4b30      	ldr	r3, [pc, #192]	@ (800dcac <watch+0x120>)
 800dbec:	2201      	movs	r2, #1
 800dbee:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 800dbf0:	e005      	b.n	800dbfe <watch+0x72>
					goto	jmp_watch_03_00;
 800dbf2:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 800dbf4:	4b31      	ldr	r3, [pc, #196]	@ (800dcbc <watch+0x130>)
 800dbf6:	22a4      	movs	r2, #164	@ 0xa4
 800dbf8:	701a      	strb	r2, [r3, #0]
 800dbfa:	e000      	b.n	800dbfe <watch+0x72>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 800dbfc:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 800dbfe:	4b2e      	ldr	r3, [pc, #184]	@ (800dcb8 <watch+0x12c>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d10c      	bne.n	800dc20 <watch+0x94>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 800dc06:	4b2a      	ldr	r3, [pc, #168]	@ (800dcb0 <watch+0x124>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d103      	bne.n	800dc16 <watch+0x8a>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 800dc0e:	4b2c      	ldr	r3, [pc, #176]	@ (800dcc0 <watch+0x134>)
 800dc10:	220f      	movs	r2, #15
 800dc12:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 800dc14:	e005      	b.n	800dc22 <watch+0x96>
					goto	jmp_watch_04;
 800dc16:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 800dc18:	4b29      	ldr	r3, [pc, #164]	@ (800dcc0 <watch+0x134>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	701a      	strb	r2, [r3, #0]
 800dc1e:	e000      	b.n	800dc22 <watch+0x96>
					goto	jmp_watch_05;
 800dc20:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 800dc22:	4b25      	ldr	r3, [pc, #148]	@ (800dcb8 <watch+0x12c>)
 800dc24:	785b      	ldrb	r3, [r3, #1]
 800dc26:	2201      	movs	r2, #1
 800dc28:	4053      	eors	r3, r2
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d107      	bne.n	800dc40 <watch+0xb4>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 800dc30:	4b24      	ldr	r3, [pc, #144]	@ (800dcc4 <watch+0x138>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d108      	bne.n	800dc4a <watch+0xbe>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 800dc38:	4b1c      	ldr	r3, [pc, #112]	@ (800dcac <watch+0x120>)
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 800dc3e:	e005      	b.n	800dc4c <watch+0xc0>
					goto	jmp_watch_07_00;
 800dc40:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 800dc42:	4b20      	ldr	r3, [pc, #128]	@ (800dcc4 <watch+0x138>)
 800dc44:	2204      	movs	r2, #4
 800dc46:	701a      	strb	r2, [r3, #0]
 800dc48:	e000      	b.n	800dc4c <watch+0xc0>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 800dc4a:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 800dc4c:	4b1a      	ldr	r3, [pc, #104]	@ (800dcb8 <watch+0x12c>)
 800dc4e:	789b      	ldrb	r3, [r3, #2]
 800dc50:	2201      	movs	r2, #1
 800dc52:	4053      	eors	r3, r2
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d107      	bne.n	800dc6a <watch+0xde>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 800dc5a:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc8 <watch+0x13c>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d108      	bne.n	800dc74 <watch+0xe8>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 800dc62:	4b12      	ldr	r3, [pc, #72]	@ (800dcac <watch+0x120>)
 800dc64:	2201      	movs	r2, #1
 800dc66:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 800dc68:	e005      	b.n	800dc76 <watch+0xea>
					goto	jmp_watch_11_00;
 800dc6a:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 800dc6c:	4b16      	ldr	r3, [pc, #88]	@ (800dcc8 <watch+0x13c>)
 800dc6e:	220f      	movs	r2, #15
 800dc70:	701a      	strb	r2, [r3, #0]
 800dc72:	e000      	b.n	800dc76 <watch+0xea>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 800dc74:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 800dc76:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb0 <watch+0x124>)
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	4053      	eors	r3, r2
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d107      	bne.n	800dc94 <watch+0x108>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 800dc84:	4b11      	ldr	r3, [pc, #68]	@ (800dccc <watch+0x140>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10a      	bne.n	800dca2 <watch+0x116>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 800dc8c:	4b07      	ldr	r3, [pc, #28]	@ (800dcac <watch+0x120>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 800dc92:	e007      	b.n	800dca4 <watch+0x118>
					goto jmp_watch_12_00;
 800dc94:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 800dc96:	4b0d      	ldr	r3, [pc, #52]	@ (800dccc <watch+0x140>)
 800dc98:	22c5      	movs	r2, #197	@ 0xc5
 800dc9a:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 800dc9c:	e002      	b.n	800dca4 <watch+0x118>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 800dc9e:	46c0      	nop			@ (mov r8, r8)
 800dca0:	e000      	b.n	800dca4 <watch+0x118>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 800dca2:	46c0      	nop			@ (mov r8, r8)
}
 800dca4:	46c0      	nop			@ (mov r8, r8)
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	46c0      	nop			@ (mov r8, r8)
 800dcac:	20000a94 	.word	0x20000a94
 800dcb0:	20000b1c 	.word	0x20000b1c
 800dcb4:	20000b8d 	.word	0x20000b8d
 800dcb8:	20000ae0 	.word	0x20000ae0
 800dcbc:	20000b92 	.word	0x20000b92
 800dcc0:	20000ab0 	.word	0x20000ab0
 800dcc4:	20000b93 	.word	0x20000b93
 800dcc8:	20000b95 	.word	0x20000b95
 800dccc:	20000b94 	.word	0x20000b94

0800dcd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800dcd0:	480d      	ldr	r0, [pc, #52]	@ (800dd08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800dcd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800dcd4:	f7fb fb9a 	bl	800940c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dcd8:	480c      	ldr	r0, [pc, #48]	@ (800dd0c <LoopForever+0x6>)
  ldr r1, =_edata
 800dcda:	490d      	ldr	r1, [pc, #52]	@ (800dd10 <LoopForever+0xa>)
  ldr r2, =_sidata
 800dcdc:	4a0d      	ldr	r2, [pc, #52]	@ (800dd14 <LoopForever+0xe>)
  movs r3, #0
 800dcde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dce0:	e002      	b.n	800dce8 <LoopCopyDataInit>

0800dce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dce6:	3304      	adds	r3, #4

0800dce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dcea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dcec:	d3f9      	bcc.n	800dce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dcee:	4a0a      	ldr	r2, [pc, #40]	@ (800dd18 <LoopForever+0x12>)
  ldr r4, =_ebss
 800dcf0:	4c0a      	ldr	r4, [pc, #40]	@ (800dd1c <LoopForever+0x16>)
  movs r3, #0
 800dcf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dcf4:	e001      	b.n	800dcfa <LoopFillZerobss>

0800dcf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dcf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dcf8:	3204      	adds	r2, #4

0800dcfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dcfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dcfc:	d3fb      	bcc.n	800dcf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800dcfe:	f009 ff81 	bl	8017c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800dd02:	f7f8 fee9 	bl	8006ad8 <main>

0800dd06 <LoopForever>:

LoopForever:
  b LoopForever
 800dd06:	e7fe      	b.n	800dd06 <LoopForever>
  ldr   r0, =_estack
 800dd08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800dd0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dd10:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 800dd14:	08017f74 	.word	0x08017f74
  ldr r2, =_sbss
 800dd18:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 800dd1c:	2000109c 	.word	0x2000109c

0800dd20 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800dd20:	e7fe      	b.n	800dd20 <ADC_COMP1_2_IRQHandler>

0800dd22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800dd28:	1dfb      	adds	r3, r7, #7
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dd2e:	2003      	movs	r0, #3
 800dd30:	f000 f80e 	bl	800dd50 <HAL_InitTick>
 800dd34:	1e03      	subs	r3, r0, #0
 800dd36:	d003      	beq.n	800dd40 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800dd38:	1dfb      	adds	r3, r7, #7
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	701a      	strb	r2, [r3, #0]
 800dd3e:	e001      	b.n	800dd44 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800dd40:	f7fa fef8 	bl	8008b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800dd44:	1dfb      	adds	r3, r7, #7
 800dd46:	781b      	ldrb	r3, [r3, #0]
}
 800dd48:	0018      	movs	r0, r3
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	b002      	add	sp, #8
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dd50:	b590      	push	{r4, r7, lr}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800dd58:	230f      	movs	r3, #15
 800dd5a:	18fb      	adds	r3, r7, r3
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800dd60:	4b1d      	ldr	r3, [pc, #116]	@ (800ddd8 <HAL_InitTick+0x88>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d02b      	beq.n	800ddc0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800dd68:	4b1c      	ldr	r3, [pc, #112]	@ (800dddc <HAL_InitTick+0x8c>)
 800dd6a:	681c      	ldr	r4, [r3, #0]
 800dd6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ddd8 <HAL_InitTick+0x88>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	0019      	movs	r1, r3
 800dd72:	23fa      	movs	r3, #250	@ 0xfa
 800dd74:	0098      	lsls	r0, r3, #2
 800dd76:	f7f2 f9cf 	bl	8000118 <__udivsi3>
 800dd7a:	0003      	movs	r3, r0
 800dd7c:	0019      	movs	r1, r3
 800dd7e:	0020      	movs	r0, r4
 800dd80:	f7f2 f9ca 	bl	8000118 <__udivsi3>
 800dd84:	0003      	movs	r3, r0
 800dd86:	0018      	movs	r0, r3
 800dd88:	f001 fab7 	bl	800f2fa <HAL_SYSTICK_Config>
 800dd8c:	1e03      	subs	r3, r0, #0
 800dd8e:	d112      	bne.n	800ddb6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d80a      	bhi.n	800ddac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dd96:	6879      	ldr	r1, [r7, #4]
 800dd98:	2301      	movs	r3, #1
 800dd9a:	425b      	negs	r3, r3
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	0018      	movs	r0, r3
 800dda0:	f001 fa76 	bl	800f290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800dda4:	4b0e      	ldr	r3, [pc, #56]	@ (800dde0 <HAL_InitTick+0x90>)
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	e00d      	b.n	800ddc8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800ddac:	230f      	movs	r3, #15
 800ddae:	18fb      	adds	r3, r7, r3
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	701a      	strb	r2, [r3, #0]
 800ddb4:	e008      	b.n	800ddc8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ddb6:	230f      	movs	r3, #15
 800ddb8:	18fb      	adds	r3, r7, r3
 800ddba:	2201      	movs	r2, #1
 800ddbc:	701a      	strb	r2, [r3, #0]
 800ddbe:	e003      	b.n	800ddc8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ddc0:	230f      	movs	r3, #15
 800ddc2:	18fb      	adds	r3, r7, r3
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800ddc8:	230f      	movs	r3, #15
 800ddca:	18fb      	adds	r3, r7, r3
 800ddcc:	781b      	ldrb	r3, [r3, #0]
}
 800ddce:	0018      	movs	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	b005      	add	sp, #20
 800ddd4:	bd90      	pop	{r4, r7, pc}
 800ddd6:	46c0      	nop			@ (mov r8, r8)
 800ddd8:	20000228 	.word	0x20000228
 800dddc:	20000220 	.word	0x20000220
 800dde0:	20000224 	.word	0x20000224

0800dde4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dde8:	4b04      	ldr	r3, [pc, #16]	@ (800ddfc <HAL_IncTick+0x18>)
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	4b04      	ldr	r3, [pc, #16]	@ (800de00 <HAL_IncTick+0x1c>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	18d2      	adds	r2, r2, r3
 800ddf2:	4b02      	ldr	r3, [pc, #8]	@ (800ddfc <HAL_IncTick+0x18>)
 800ddf4:	601a      	str	r2, [r3, #0]
}
 800ddf6:	46c0      	nop			@ (mov r8, r8)
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	2000107c 	.word	0x2000107c
 800de00:	20000228 	.word	0x20000228

0800de04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	af00      	add	r7, sp, #0
  return uwTick;
 800de08:	4b02      	ldr	r3, [pc, #8]	@ (800de14 <HAL_GetTick+0x10>)
 800de0a:	681b      	ldr	r3, [r3, #0]
}
 800de0c:	0018      	movs	r0, r3
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	46c0      	nop			@ (mov r8, r8)
 800de14:	2000107c 	.word	0x2000107c

0800de18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800de20:	f7ff fff0 	bl	800de04 <HAL_GetTick>
 800de24:	0003      	movs	r3, r0
 800de26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	3301      	adds	r3, #1
 800de30:	d004      	beq.n	800de3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800de32:	4b09      	ldr	r3, [pc, #36]	@ (800de58 <HAL_Delay+0x40>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	18d3      	adds	r3, r2, r3
 800de3a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800de3c:	46c0      	nop			@ (mov r8, r8)
 800de3e:	f7ff ffe1 	bl	800de04 <HAL_GetTick>
 800de42:	0002      	movs	r2, r0
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d8f7      	bhi.n	800de3e <HAL_Delay+0x26>
  {
  }
}
 800de4e:	46c0      	nop			@ (mov r8, r8)
 800de50:	46c0      	nop			@ (mov r8, r8)
 800de52:	46bd      	mov	sp, r7
 800de54:	b004      	add	sp, #16
 800de56:	bd80      	pop	{r7, pc}
 800de58:	20000228 	.word	0x20000228

0800de5c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a05      	ldr	r2, [pc, #20]	@ (800de80 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800de6c:	401a      	ands	r2, r3
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	431a      	orrs	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	601a      	str	r2, [r3, #0]
}
 800de76:	46c0      	nop			@ (mov r8, r8)
 800de78:	46bd      	mov	sp, r7
 800de7a:	b002      	add	sp, #8
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	46c0      	nop			@ (mov r8, r8)
 800de80:	fe3fffff 	.word	0xfe3fffff

0800de84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	23e0      	movs	r3, #224	@ 0xe0
 800de92:	045b      	lsls	r3, r3, #17
 800de94:	4013      	ands	r3, r2
}
 800de96:	0018      	movs	r0, r3
 800de98:	46bd      	mov	sp, r7
 800de9a:	b002      	add	sp, #8
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	2104      	movs	r1, #4
 800deb2:	400a      	ands	r2, r1
 800deb4:	2107      	movs	r1, #7
 800deb6:	4091      	lsls	r1, r2
 800deb8:	000a      	movs	r2, r1
 800deba:	43d2      	mvns	r2, r2
 800debc:	401a      	ands	r2, r3
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2104      	movs	r1, #4
 800dec2:	400b      	ands	r3, r1
 800dec4:	6879      	ldr	r1, [r7, #4]
 800dec6:	4099      	lsls	r1, r3
 800dec8:	000b      	movs	r3, r1
 800deca:	431a      	orrs	r2, r3
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800ded0:	46c0      	nop			@ (mov r8, r8)
 800ded2:	46bd      	mov	sp, r7
 800ded4:	b004      	add	sp, #16
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	2104      	movs	r1, #4
 800deea:	400a      	ands	r2, r1
 800deec:	2107      	movs	r1, #7
 800deee:	4091      	lsls	r1, r2
 800def0:	000a      	movs	r2, r1
 800def2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2104      	movs	r1, #4
 800def8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800defa:	40da      	lsrs	r2, r3
 800defc:	0013      	movs	r3, r2
}
 800defe:	0018      	movs	r0, r3
 800df00:	46bd      	mov	sp, r7
 800df02:	b002      	add	sp, #8
 800df04:	bd80      	pop	{r7, pc}

0800df06 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b084      	sub	sp, #16
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	60f8      	str	r0, [r7, #12]
 800df0e:	60b9      	str	r1, [r7, #8]
 800df10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	211f      	movs	r1, #31
 800df1a:	400a      	ands	r2, r1
 800df1c:	210f      	movs	r1, #15
 800df1e:	4091      	lsls	r1, r2
 800df20:	000a      	movs	r2, r1
 800df22:	43d2      	mvns	r2, r2
 800df24:	401a      	ands	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	0e9b      	lsrs	r3, r3, #26
 800df2a:	210f      	movs	r1, #15
 800df2c:	4019      	ands	r1, r3
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	201f      	movs	r0, #31
 800df32:	4003      	ands	r3, r0
 800df34:	4099      	lsls	r1, r3
 800df36:	000b      	movs	r3, r1
 800df38:	431a      	orrs	r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800df3e:	46c0      	nop			@ (mov r8, r8)
 800df40:	46bd      	mov	sp, r7
 800df42:	b004      	add	sp, #16
 800df44:	bd80      	pop	{r7, pc}

0800df46 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b082      	sub	sp, #8
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	025b      	lsls	r3, r3, #9
 800df58:	0a5b      	lsrs	r3, r3, #9
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800df60:	46c0      	nop			@ (mov r8, r8)
 800df62:	46bd      	mov	sp, r7
 800df64:	b002      	add	sp, #8
 800df66:	bd80      	pop	{r7, pc}

0800df68 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df76:	683a      	ldr	r2, [r7, #0]
 800df78:	0252      	lsls	r2, r2, #9
 800df7a:	0a52      	lsrs	r2, r2, #9
 800df7c:	43d2      	mvns	r2, r2
 800df7e:	401a      	ands	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800df84:	46c0      	nop			@ (mov r8, r8)
 800df86:	46bd      	mov	sp, r7
 800df88:	b002      	add	sp, #8
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	695b      	ldr	r3, [r3, #20]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	0212      	lsls	r2, r2, #8
 800dfa0:	43d2      	mvns	r2, r2
 800dfa2:	401a      	ands	r2, r3
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	021b      	lsls	r3, r3, #8
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	400b      	ands	r3, r1
 800dfac:	4904      	ldr	r1, [pc, #16]	@ (800dfc0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800dfae:	400b      	ands	r3, r1
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800dfb6:	46c0      	nop			@ (mov r8, r8)
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	b004      	add	sp, #16
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	46c0      	nop			@ (mov r8, r8)
 800dfc0:	7fffff00 	.word	0x7fffff00

0800dfc4 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	4a11      	ldr	r2, [pc, #68]	@ (800e018 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d103      	bne.n	800dfe0 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	330c      	adds	r3, #12
 800dfdc:	617b      	str	r3, [r7, #20]
 800dfde:	e009      	b.n	800dff4 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	33a0      	adds	r3, #160	@ 0xa0
 800dfe4:	0019      	movs	r1, r3
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	0d5b      	lsrs	r3, r3, #21
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	2204      	movs	r2, #4
 800dfee:	4013      	ands	r3, r2
 800dff0:	18cb      	adds	r3, r1, r3
 800dff2:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68ba      	ldr	r2, [r7, #8]
 800dffa:	4908      	ldr	r1, [pc, #32]	@ (800e01c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 800dffc:	400a      	ands	r2, r1
 800dffe:	43d2      	mvns	r2, r2
 800e000:	401a      	ands	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	400b      	ands	r3, r1
 800e008:	431a      	orrs	r2, r3
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800e00e:	46c0      	nop			@ (mov r8, r8)
 800e010:	46bd      	mov	sp, r7
 800e012:	b006      	add	sp, #24
 800e014:	bd80      	pop	{r7, pc}
 800e016:	46c0      	nop			@ (mov r8, r8)
 800e018:	7cc00000 	.word	0x7cc00000
 800e01c:	7cc7ffff 	.word	0x7cc7ffff

0800e020 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
 800e02c:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3320      	adds	r3, #32
 800e032:	0018      	movs	r0, r3
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	0d1b      	lsrs	r3, r3, #20
 800e038:	2203      	movs	r2, #3
 800e03a:	401a      	ands	r2, r3
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	0d5b      	lsrs	r3, r3, #21
 800e040:	2101      	movs	r1, #1
 800e042:	400b      	ands	r3, r1
 800e044:	18d3      	adds	r3, r2, r3
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	18c3      	adds	r3, r0, r3
 800e04a:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a06      	ldr	r2, [pc, #24]	@ (800e06c <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 800e052:	401a      	ands	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	0419      	lsls	r1, r3, #16
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	430b      	orrs	r3, r1
 800e05c:	431a      	orrs	r2, r3
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800e062:	46c0      	nop			@ (mov r8, r8)
 800e064:	46bd      	mov	sp, r7
 800e066:	b006      	add	sp, #24
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	46c0      	nop			@ (mov r8, r8)
 800e06c:	f000f000 	.word	0xf000f000

0800e070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	4a05      	ldr	r2, [pc, #20]	@ (800e094 <LL_ADC_EnableInternalRegulator+0x24>)
 800e07e:	4013      	ands	r3, r2
 800e080:	2280      	movs	r2, #128	@ 0x80
 800e082:	0552      	lsls	r2, r2, #21
 800e084:	431a      	orrs	r2, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800e08a:	46c0      	nop			@ (mov r8, r8)
 800e08c:	46bd      	mov	sp, r7
 800e08e:	b002      	add	sp, #8
 800e090:	bd80      	pop	{r7, pc}
 800e092:	46c0      	nop			@ (mov r8, r8)
 800e094:	6fffffe8 	.word	0x6fffffe8

0800e098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	689a      	ldr	r2, [r3, #8]
 800e0a4:	2380      	movs	r3, #128	@ 0x80
 800e0a6:	055b      	lsls	r3, r3, #21
 800e0a8:	401a      	ands	r2, r3
 800e0aa:	2380      	movs	r3, #128	@ 0x80
 800e0ac:	055b      	lsls	r3, r3, #21
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d101      	bne.n	800e0b6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e000      	b.n	800e0b8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	0018      	movs	r0, r3
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	b002      	add	sp, #8
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	4a04      	ldr	r2, [pc, #16]	@ (800e0e0 <LL_ADC_Enable+0x20>)
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800e0d8:	46c0      	nop			@ (mov r8, r8)
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	b002      	add	sp, #8
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	7fffffe8 	.word	0x7fffffe8

0800e0e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	4a04      	ldr	r2, [pc, #16]	@ (800e104 <LL_ADC_Disable+0x20>)
 800e0f2:	4013      	ands	r3, r2
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	431a      	orrs	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
 800e0fe:	46bd      	mov	sp, r7
 800e100:	b002      	add	sp, #8
 800e102:	bd80      	pop	{r7, pc}
 800e104:	7fffffe8 	.word	0x7fffffe8

0800e108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	2201      	movs	r2, #1
 800e116:	4013      	ands	r3, r2
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d101      	bne.n	800e120 <LL_ADC_IsEnabled+0x18>
 800e11c:	2301      	movs	r3, #1
 800e11e:	e000      	b.n	800e122 <LL_ADC_IsEnabled+0x1a>
 800e120:	2300      	movs	r3, #0
}
 800e122:	0018      	movs	r0, r3
 800e124:	46bd      	mov	sp, r7
 800e126:	b002      	add	sp, #8
 800e128:	bd80      	pop	{r7, pc}

0800e12a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b082      	sub	sp, #8
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	2202      	movs	r2, #2
 800e138:	4013      	ands	r3, r2
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d101      	bne.n	800e142 <LL_ADC_IsDisableOngoing+0x18>
 800e13e:	2301      	movs	r3, #1
 800e140:	e000      	b.n	800e144 <LL_ADC_IsDisableOngoing+0x1a>
 800e142:	2300      	movs	r3, #0
}
 800e144:	0018      	movs	r0, r3
 800e146:	46bd      	mov	sp, r7
 800e148:	b002      	add	sp, #8
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	2204      	movs	r2, #4
 800e15a:	4013      	ands	r3, r2
 800e15c:	2b04      	cmp	r3, #4
 800e15e:	d101      	bne.n	800e164 <LL_ADC_REG_IsConversionOngoing+0x18>
 800e160:	2301      	movs	r3, #1
 800e162:	e000      	b.n	800e166 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800e164:	2300      	movs	r3, #0
}
 800e166:	0018      	movs	r0, r3
 800e168:	46bd      	mov	sp, r7
 800e16a:	b002      	add	sp, #8
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b082      	sub	sp, #8
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2280      	movs	r2, #128	@ 0x80
 800e17a:	601a      	str	r2, [r3, #0]
}
 800e17c:	46c0      	nop			@ (mov r8, r8)
 800e17e:	46bd      	mov	sp, r7
 800e180:	b002      	add	sp, #8
 800e182:	bd80      	pop	{r7, pc}

0800e184 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2280      	movs	r2, #128	@ 0x80
 800e190:	0052      	lsls	r2, r2, #1
 800e192:	601a      	str	r2, [r3, #0]
}
 800e194:	46c0      	nop			@ (mov r8, r8)
 800e196:	46bd      	mov	sp, r7
 800e198:	b002      	add	sp, #8
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2280      	movs	r2, #128	@ 0x80
 800e1a8:	0092      	lsls	r2, r2, #2
 800e1aa:	601a      	str	r2, [r3, #0]
}
 800e1ac:	46c0      	nop			@ (mov r8, r8)
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	b002      	add	sp, #8
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	2280      	movs	r2, #128	@ 0x80
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	605a      	str	r2, [r3, #4]
}
 800e1c8:	46c0      	nop			@ (mov r8, r8)
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	b002      	add	sp, #8
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	2280      	movs	r2, #128	@ 0x80
 800e1de:	0052      	lsls	r2, r2, #1
 800e1e0:	431a      	orrs	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	605a      	str	r2, [r3, #4]
}
 800e1e6:	46c0      	nop			@ (mov r8, r8)
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	b002      	add	sp, #8
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	2280      	movs	r2, #128	@ 0x80
 800e1fc:	0092      	lsls	r2, r2, #2
 800e1fe:	431a      	orrs	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	605a      	str	r2, [r3, #4]
}
 800e204:	46c0      	nop			@ (mov r8, r8)
 800e206:	46bd      	mov	sp, r7
 800e208:	b002      	add	sp, #8
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	2280      	movs	r2, #128	@ 0x80
 800e21a:	4393      	bics	r3, r2
 800e21c:	001a      	movs	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	605a      	str	r2, [r3, #4]
}
 800e222:	46c0      	nop			@ (mov r8, r8)
 800e224:	46bd      	mov	sp, r7
 800e226:	b002      	add	sp, #8
 800e228:	bd80      	pop	{r7, pc}
	...

0800e22c <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	4a03      	ldr	r2, [pc, #12]	@ (800e248 <LL_ADC_DisableIT_AWD2+0x1c>)
 800e23a:	401a      	ands	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	605a      	str	r2, [r3, #4]
}
 800e240:	46c0      	nop			@ (mov r8, r8)
 800e242:	46bd      	mov	sp, r7
 800e244:	b002      	add	sp, #8
 800e246:	bd80      	pop	{r7, pc}
 800e248:	fffffeff 	.word	0xfffffeff

0800e24c <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	4a03      	ldr	r2, [pc, #12]	@ (800e268 <LL_ADC_DisableIT_AWD3+0x1c>)
 800e25a:	401a      	ands	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	605a      	str	r2, [r3, #4]
}
 800e260:	46c0      	nop			@ (mov r8, r8)
 800e262:	46bd      	mov	sp, r7
 800e264:	b002      	add	sp, #8
 800e266:	bd80      	pop	{r7, pc}
 800e268:	fffffdff 	.word	0xfffffdff

0800e26c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e274:	231f      	movs	r3, #31
 800e276:	18fb      	adds	r3, r7, r3
 800e278:	2200      	movs	r2, #0
 800e27a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800e27c:	2300      	movs	r3, #0
 800e27e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800e280:	2300      	movs	r3, #0
 800e282:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800e284:	2300      	movs	r3, #0
 800e286:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e17f      	b.n	800e592 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10a      	bne.n	800e2b0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	0018      	movs	r0, r3
 800e29e:	f7fa fc6d 	bl	8008b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2254      	movs	r2, #84	@ 0x54
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	0018      	movs	r0, r3
 800e2b6:	f7ff feef 	bl	800e098 <LL_ADC_IsInternalRegulatorEnabled>
 800e2ba:	1e03      	subs	r3, r0, #0
 800e2bc:	d115      	bne.n	800e2ea <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	f7ff fed4 	bl	800e070 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e2c8:	4bb4      	ldr	r3, [pc, #720]	@ (800e59c <HAL_ADC_Init+0x330>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	49b4      	ldr	r1, [pc, #720]	@ (800e5a0 <HAL_ADC_Init+0x334>)
 800e2ce:	0018      	movs	r0, r3
 800e2d0:	f7f1 ff22 	bl	8000118 <__udivsi3>
 800e2d4:	0003      	movs	r3, r0
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800e2dc:	e002      	b.n	800e2e4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1f9      	bne.n	800e2de <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	0018      	movs	r0, r3
 800e2f0:	f7ff fed2 	bl	800e098 <LL_ADC_IsInternalRegulatorEnabled>
 800e2f4:	1e03      	subs	r3, r0, #0
 800e2f6:	d10f      	bne.n	800e318 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2fc:	2210      	movs	r2, #16
 800e2fe:	431a      	orrs	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e308:	2201      	movs	r2, #1
 800e30a:	431a      	orrs	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800e310:	231f      	movs	r3, #31
 800e312:	18fb      	adds	r3, r7, r3
 800e314:	2201      	movs	r2, #1
 800e316:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	0018      	movs	r0, r3
 800e31e:	f7ff ff15 	bl	800e14c <LL_ADC_REG_IsConversionOngoing>
 800e322:	0003      	movs	r3, r0
 800e324:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e32a:	2210      	movs	r2, #16
 800e32c:	4013      	ands	r3, r2
 800e32e:	d000      	beq.n	800e332 <HAL_ADC_Init+0xc6>
 800e330:	e122      	b.n	800e578 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d000      	beq.n	800e33a <HAL_ADC_Init+0xce>
 800e338:	e11e      	b.n	800e578 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e33e:	4a99      	ldr	r2, [pc, #612]	@ (800e5a4 <HAL_ADC_Init+0x338>)
 800e340:	4013      	ands	r3, r2
 800e342:	2202      	movs	r2, #2
 800e344:	431a      	orrs	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	0018      	movs	r0, r3
 800e350:	f7ff feda 	bl	800e108 <LL_ADC_IsEnabled>
 800e354:	1e03      	subs	r3, r0, #0
 800e356:	d000      	beq.n	800e35a <HAL_ADC_Init+0xee>
 800e358:	e0ad      	b.n	800e4b6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7e1b      	ldrb	r3, [r3, #24]
 800e362:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800e364:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	7e5b      	ldrb	r3, [r3, #25]
 800e36a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800e36c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	7e9b      	ldrb	r3, [r3, #26]
 800e372:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800e374:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d002      	beq.n	800e384 <HAL_ADC_Init+0x118>
 800e37e:	2380      	movs	r3, #128	@ 0x80
 800e380:	015b      	lsls	r3, r3, #5
 800e382:	e000      	b.n	800e386 <HAL_ADC_Init+0x11a>
 800e384:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800e386:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800e38c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	2b00      	cmp	r3, #0
 800e394:	da04      	bge.n	800e3a0 <HAL_ADC_Init+0x134>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	691b      	ldr	r3, [r3, #16]
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	085b      	lsrs	r3, r3, #1
 800e39e:	e001      	b.n	800e3a4 <HAL_ADC_Init+0x138>
 800e3a0:	2380      	movs	r3, #128	@ 0x80
 800e3a2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800e3a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	212c      	movs	r1, #44	@ 0x2c
 800e3aa:	5c5b      	ldrb	r3, [r3, r1]
 800e3ac:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800e3ae:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800e3b0:	69ba      	ldr	r2, [r7, #24]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2220      	movs	r2, #32
 800e3ba:	5c9b      	ldrb	r3, [r3, r2]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d115      	bne.n	800e3ec <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7e9b      	ldrb	r3, [r3, #26]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d105      	bne.n	800e3d4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	2280      	movs	r2, #128	@ 0x80
 800e3cc:	0252      	lsls	r2, r2, #9
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	e00b      	b.n	800e3ec <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3d8:	2220      	movs	r2, #32
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	431a      	orrs	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00a      	beq.n	800e40a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3f8:	23e0      	movs	r3, #224	@ 0xe0
 800e3fa:	005b      	lsls	r3, r3, #1
 800e3fc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800e402:	4313      	orrs	r3, r2
 800e404:	69ba      	ldr	r2, [r7, #24]
 800e406:	4313      	orrs	r3, r2
 800e408:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	4a65      	ldr	r2, [pc, #404]	@ (800e5a8 <HAL_ADC_Init+0x33c>)
 800e412:	4013      	ands	r3, r2
 800e414:	0019      	movs	r1, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	69ba      	ldr	r2, [r7, #24]
 800e41c:	430a      	orrs	r2, r1
 800e41e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	0f9b      	lsrs	r3, r3, #30
 800e426:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e42c:	4313      	orrs	r3, r2
 800e42e:	697a      	ldr	r2, [r7, #20]
 800e430:	4313      	orrs	r3, r2
 800e432:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	223c      	movs	r2, #60	@ 0x3c
 800e438:	5c9b      	ldrb	r3, [r3, r2]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d111      	bne.n	800e462 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	0f9b      	lsrs	r3, r3, #30
 800e444:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800e44a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800e450:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800e456:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	4313      	orrs	r3, r2
 800e45c:	2201      	movs	r2, #1
 800e45e:	4313      	orrs	r3, r2
 800e460:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	4a50      	ldr	r2, [pc, #320]	@ (800e5ac <HAL_ADC_Init+0x340>)
 800e46a:	4013      	ands	r3, r2
 800e46c:	0019      	movs	r1, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	697a      	ldr	r2, [r7, #20]
 800e474:	430a      	orrs	r2, r1
 800e476:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	685a      	ldr	r2, [r3, #4]
 800e47c:	23c0      	movs	r3, #192	@ 0xc0
 800e47e:	061b      	lsls	r3, r3, #24
 800e480:	429a      	cmp	r2, r3
 800e482:	d018      	beq.n	800e4b6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800e488:	2380      	movs	r3, #128	@ 0x80
 800e48a:	05db      	lsls	r3, r3, #23
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d012      	beq.n	800e4b6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800e494:	2380      	movs	r3, #128	@ 0x80
 800e496:	061b      	lsls	r3, r3, #24
 800e498:	429a      	cmp	r2, r3
 800e49a:	d00c      	beq.n	800e4b6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800e49c:	4b44      	ldr	r3, [pc, #272]	@ (800e5b0 <HAL_ADC_Init+0x344>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a44      	ldr	r2, [pc, #272]	@ (800e5b4 <HAL_ADC_Init+0x348>)
 800e4a2:	4013      	ands	r3, r2
 800e4a4:	0019      	movs	r1, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	23f0      	movs	r3, #240	@ 0xf0
 800e4ac:	039b      	lsls	r3, r3, #14
 800e4ae:	401a      	ands	r2, r3
 800e4b0:	4b3f      	ldr	r3, [pc, #252]	@ (800e5b0 <HAL_ADC_Init+0x344>)
 800e4b2:	430a      	orrs	r2, r1
 800e4b4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4be:	001a      	movs	r2, r3
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	f7ff fcec 	bl	800de9e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6818      	ldr	r0, [r3, #0]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4ce:	493a      	ldr	r1, [pc, #232]	@ (800e5b8 <HAL_ADC_Init+0x34c>)
 800e4d0:	001a      	movs	r2, r3
 800e4d2:	f7ff fce4 	bl	800de9e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	691b      	ldr	r3, [r3, #16]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d109      	bne.n	800e4f2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2110      	movs	r1, #16
 800e4ea:	4249      	negs	r1, r1
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	629a      	str	r2, [r3, #40]	@ 0x28
 800e4f0:	e018      	b.n	800e524 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	691a      	ldr	r2, [r3, #16]
 800e4f6:	2380      	movs	r3, #128	@ 0x80
 800e4f8:	039b      	lsls	r3, r3, #14
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d112      	bne.n	800e524 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	69db      	ldr	r3, [r3, #28]
 800e508:	3b01      	subs	r3, #1
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	221c      	movs	r2, #28
 800e50e:	4013      	ands	r3, r2
 800e510:	2210      	movs	r2, #16
 800e512:	4252      	negs	r2, r2
 800e514:	409a      	lsls	r2, r3
 800e516:	0011      	movs	r1, r2
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	430a      	orrs	r2, r1
 800e522:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2100      	movs	r1, #0
 800e52a:	0018      	movs	r0, r3
 800e52c:	f7ff fcd4 	bl	800ded8 <LL_ADC_GetSamplingTimeCommonChannels>
 800e530:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800e536:	429a      	cmp	r2, r3
 800e538:	d10b      	bne.n	800e552 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e544:	2203      	movs	r2, #3
 800e546:	4393      	bics	r3, r2
 800e548:	2201      	movs	r2, #1
 800e54a:	431a      	orrs	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800e550:	e01c      	b.n	800e58c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e556:	2212      	movs	r2, #18
 800e558:	4393      	bics	r3, r2
 800e55a:	2210      	movs	r2, #16
 800e55c:	431a      	orrs	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e566:	2201      	movs	r2, #1
 800e568:	431a      	orrs	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800e56e:	231f      	movs	r3, #31
 800e570:	18fb      	adds	r3, r7, r3
 800e572:	2201      	movs	r2, #1
 800e574:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800e576:	e009      	b.n	800e58c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e57c:	2210      	movs	r2, #16
 800e57e:	431a      	orrs	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800e584:	231f      	movs	r3, #31
 800e586:	18fb      	adds	r3, r7, r3
 800e588:	2201      	movs	r2, #1
 800e58a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800e58c:	231f      	movs	r3, #31
 800e58e:	18fb      	adds	r3, r7, r3
 800e590:	781b      	ldrb	r3, [r3, #0]
}
 800e592:	0018      	movs	r0, r3
 800e594:	46bd      	mov	sp, r7
 800e596:	b008      	add	sp, #32
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	46c0      	nop			@ (mov r8, r8)
 800e59c:	20000220 	.word	0x20000220
 800e5a0:	00030d40 	.word	0x00030d40
 800e5a4:	fffffefd 	.word	0xfffffefd
 800e5a8:	ffde0201 	.word	0xffde0201
 800e5ac:	1ffffc02 	.word	0x1ffffc02
 800e5b0:	40012708 	.word	0x40012708
 800e5b4:	ffc3ffff 	.word	0xffc3ffff
 800e5b8:	7fffff04 	.word	0x7fffff04

0800e5bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800e5bc:	b590      	push	{r4, r7, lr}
 800e5be:	b08b      	sub	sp, #44	@ 0x2c
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e5c6:	2327      	movs	r3, #39	@ 0x27
 800e5c8:	18fb      	adds	r3, r7, r3
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2254      	movs	r2, #84	@ 0x54
 800e5d6:	5c9b      	ldrb	r3, [r3, r2]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d101      	bne.n	800e5e0 <HAL_ADC_ConfigChannel+0x24>
 800e5dc:	2302      	movs	r3, #2
 800e5de:	e141      	b.n	800e864 <HAL_ADC_ConfigChannel+0x2a8>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2254      	movs	r2, #84	@ 0x54
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	f7ff fdad 	bl	800e14c <LL_ADC_REG_IsConversionOngoing>
 800e5f2:	1e03      	subs	r3, r0, #0
 800e5f4:	d000      	beq.n	800e5f8 <HAL_ADC_ConfigChannel+0x3c>
 800e5f6:	e124      	b.n	800e842 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	d100      	bne.n	800e602 <HAL_ADC_ConfigChannel+0x46>
 800e600:	e0d8      	b.n	800e7b4 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	691a      	ldr	r2, [r3, #16]
 800e606:	2380      	movs	r3, #128	@ 0x80
 800e608:	061b      	lsls	r3, r3, #24
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d004      	beq.n	800e618 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e612:	4a96      	ldr	r2, [pc, #600]	@ (800e86c <HAL_ADC_ConfigChannel+0x2b0>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d108      	bne.n	800e62a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	0019      	movs	r1, r3
 800e622:	0010      	movs	r0, r2
 800e624:	f7ff fc8f 	bl	800df46 <LL_ADC_REG_SetSequencerChAdd>
 800e628:	e060      	b.n	800e6ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	211f      	movs	r1, #31
 800e634:	400b      	ands	r3, r1
 800e636:	210f      	movs	r1, #15
 800e638:	4099      	lsls	r1, r3
 800e63a:	000b      	movs	r3, r1
 800e63c:	43db      	mvns	r3, r3
 800e63e:	4013      	ands	r3, r2
 800e640:	001c      	movs	r4, r3
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	025b      	lsls	r3, r3, #9
 800e648:	0a5b      	lsrs	r3, r3, #9
 800e64a:	d105      	bne.n	800e658 <HAL_ADC_ConfigChannel+0x9c>
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	0e9b      	lsrs	r3, r3, #26
 800e652:	221f      	movs	r2, #31
 800e654:	401a      	ands	r2, r3
 800e656:	e02e      	b.n	800e6b6 <HAL_ADC_ConfigChannel+0xfa>
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800e65e:	231f      	movs	r3, #31
 800e660:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	085b      	lsrs	r3, r3, #1
 800e66a:	61bb      	str	r3, [r7, #24]
 800e66c:	e00e      	b.n	800e68c <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	2201      	movs	r2, #1
 800e678:	4013      	ands	r3, r2
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	613b      	str	r3, [r7, #16]
    s--;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	3b01      	subs	r3, #1
 800e684:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	085b      	lsrs	r3, r3, #1
 800e68a:	61bb      	str	r3, [r7, #24]
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1ed      	bne.n	800e66e <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	409a      	lsls	r2, r3
 800e698:	0013      	movs	r3, r2
 800e69a:	613b      	str	r3, [r7, #16]
  return result;
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d101      	bne.n	800e6aa <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 800e6a6:	2320      	movs	r3, #32
 800e6a8:	e004      	b.n	800e6b4 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 800e6aa:	69f8      	ldr	r0, [r7, #28]
 800e6ac:	f7f1 feaa 	bl	8000404 <__clzsi2>
 800e6b0:	0003      	movs	r3, r0
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	001a      	movs	r2, r3
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	211f      	movs	r1, #31
 800e6bc:	400b      	ands	r3, r1
 800e6be:	409a      	lsls	r2, r3
 800e6c0:	0013      	movs	r3, r2
 800e6c2:	0022      	movs	r2, r4
 800e6c4:	431a      	orrs	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	089b      	lsrs	r3, r3, #2
 800e6d0:	1c5a      	adds	r2, r3, #1
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	69db      	ldr	r3, [r3, #28]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d808      	bhi.n	800e6ec <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6818      	ldr	r0, [r3, #0]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	6859      	ldr	r1, [r3, #4]
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	001a      	movs	r2, r3
 800e6e8:	f7ff fc0d 	bl	800df06 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6818      	ldr	r0, [r3, #0]
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	6819      	ldr	r1, [r3, #0]
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	001a      	movs	r2, r3
 800e6fa:	f7ff fc47 	bl	800df8c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	db00      	blt.n	800e708 <HAL_ADC_ConfigChannel+0x14c>
 800e706:	e0a6      	b.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800e708:	4b59      	ldr	r3, [pc, #356]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e70a:	0018      	movs	r0, r3
 800e70c:	f7ff fbba 	bl	800de84 <LL_ADC_GetCommonPathInternalCh>
 800e710:	0003      	movs	r3, r0
 800e712:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a56      	ldr	r2, [pc, #344]	@ (800e874 <HAL_ADC_ConfigChannel+0x2b8>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d122      	bne.n	800e764 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800e71e:	6a3a      	ldr	r2, [r7, #32]
 800e720:	2380      	movs	r3, #128	@ 0x80
 800e722:	041b      	lsls	r3, r3, #16
 800e724:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e726:	d11d      	bne.n	800e764 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	2280      	movs	r2, #128	@ 0x80
 800e72c:	0412      	lsls	r2, r2, #16
 800e72e:	4313      	orrs	r3, r2
 800e730:	4a4f      	ldr	r2, [pc, #316]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e732:	0019      	movs	r1, r3
 800e734:	0010      	movs	r0, r2
 800e736:	f7ff fb91 	bl	800de5c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e73a:	4b4f      	ldr	r3, [pc, #316]	@ (800e878 <HAL_ADC_ConfigChannel+0x2bc>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	494f      	ldr	r1, [pc, #316]	@ (800e87c <HAL_ADC_ConfigChannel+0x2c0>)
 800e740:	0018      	movs	r0, r3
 800e742:	f7f1 fce9 	bl	8000118 <__udivsi3>
 800e746:	0003      	movs	r3, r0
 800e748:	1c5a      	adds	r2, r3, #1
 800e74a:	0013      	movs	r3, r2
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	189b      	adds	r3, r3, r2
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800e754:	e002      	b.n	800e75c <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3b01      	subs	r3, #1
 800e75a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1f9      	bne.n	800e756 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800e762:	e078      	b.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a45      	ldr	r2, [pc, #276]	@ (800e880 <HAL_ADC_ConfigChannel+0x2c4>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d10e      	bne.n	800e78c <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e76e:	6a3a      	ldr	r2, [r7, #32]
 800e770:	2380      	movs	r3, #128	@ 0x80
 800e772:	045b      	lsls	r3, r3, #17
 800e774:	4013      	ands	r3, r2
 800e776:	d109      	bne.n	800e78c <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e778:	6a3b      	ldr	r3, [r7, #32]
 800e77a:	2280      	movs	r2, #128	@ 0x80
 800e77c:	0452      	lsls	r2, r2, #17
 800e77e:	4313      	orrs	r3, r2
 800e780:	4a3b      	ldr	r2, [pc, #236]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e782:	0019      	movs	r1, r3
 800e784:	0010      	movs	r0, r2
 800e786:	f7ff fb69 	bl	800de5c <LL_ADC_SetCommonPathInternalCh>
 800e78a:	e064      	b.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a3c      	ldr	r2, [pc, #240]	@ (800e884 <HAL_ADC_ConfigChannel+0x2c8>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d15f      	bne.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800e796:	6a3a      	ldr	r2, [r7, #32]
 800e798:	2380      	movs	r3, #128	@ 0x80
 800e79a:	03db      	lsls	r3, r3, #15
 800e79c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800e79e:	d15a      	bne.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	2280      	movs	r2, #128	@ 0x80
 800e7a4:	03d2      	lsls	r2, r2, #15
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	4a31      	ldr	r2, [pc, #196]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e7aa:	0019      	movs	r1, r3
 800e7ac:	0010      	movs	r0, r2
 800e7ae:	f7ff fb55 	bl	800de5c <LL_ADC_SetCommonPathInternalCh>
 800e7b2:	e050      	b.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	691a      	ldr	r2, [r3, #16]
 800e7b8:	2380      	movs	r3, #128	@ 0x80
 800e7ba:	061b      	lsls	r3, r3, #24
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d004      	beq.n	800e7ca <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800e7c4:	4a29      	ldr	r2, [pc, #164]	@ (800e86c <HAL_ADC_ConfigChannel+0x2b0>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d107      	bne.n	800e7da <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	0019      	movs	r1, r3
 800e7d4:	0010      	movs	r0, r2
 800e7d6:	f7ff fbc7 	bl	800df68 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	da39      	bge.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800e7e2:	4b23      	ldr	r3, [pc, #140]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e7e4:	0018      	movs	r0, r3
 800e7e6:	f7ff fb4d 	bl	800de84 <LL_ADC_GetCommonPathInternalCh>
 800e7ea:	0003      	movs	r3, r0
 800e7ec:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4a20      	ldr	r2, [pc, #128]	@ (800e874 <HAL_ADC_ConfigChannel+0x2b8>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d108      	bne.n	800e80a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e7f8:	6a3b      	ldr	r3, [r7, #32]
 800e7fa:	4a23      	ldr	r2, [pc, #140]	@ (800e888 <HAL_ADC_ConfigChannel+0x2cc>)
 800e7fc:	4013      	ands	r3, r2
 800e7fe:	4a1c      	ldr	r2, [pc, #112]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e800:	0019      	movs	r1, r3
 800e802:	0010      	movs	r0, r2
 800e804:	f7ff fb2a 	bl	800de5c <LL_ADC_SetCommonPathInternalCh>
 800e808:	e025      	b.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a1c      	ldr	r2, [pc, #112]	@ (800e880 <HAL_ADC_ConfigChannel+0x2c4>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d108      	bne.n	800e826 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e814:	6a3b      	ldr	r3, [r7, #32]
 800e816:	4a1d      	ldr	r2, [pc, #116]	@ (800e88c <HAL_ADC_ConfigChannel+0x2d0>)
 800e818:	4013      	ands	r3, r2
 800e81a:	4a15      	ldr	r2, [pc, #84]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e81c:	0019      	movs	r1, r3
 800e81e:	0010      	movs	r0, r2
 800e820:	f7ff fb1c 	bl	800de5c <LL_ADC_SetCommonPathInternalCh>
 800e824:	e017      	b.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a16      	ldr	r2, [pc, #88]	@ (800e884 <HAL_ADC_ConfigChannel+0x2c8>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d112      	bne.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e830:	6a3b      	ldr	r3, [r7, #32]
 800e832:	4a17      	ldr	r2, [pc, #92]	@ (800e890 <HAL_ADC_ConfigChannel+0x2d4>)
 800e834:	4013      	ands	r3, r2
 800e836:	4a0e      	ldr	r2, [pc, #56]	@ (800e870 <HAL_ADC_ConfigChannel+0x2b4>)
 800e838:	0019      	movs	r1, r3
 800e83a:	0010      	movs	r0, r2
 800e83c:	f7ff fb0e 	bl	800de5c <LL_ADC_SetCommonPathInternalCh>
 800e840:	e009      	b.n	800e856 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e846:	2220      	movs	r2, #32
 800e848:	431a      	orrs	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800e84e:	2327      	movs	r3, #39	@ 0x27
 800e850:	18fb      	adds	r3, r7, r3
 800e852:	2201      	movs	r2, #1
 800e854:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2254      	movs	r2, #84	@ 0x54
 800e85a:	2100      	movs	r1, #0
 800e85c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800e85e:	2327      	movs	r3, #39	@ 0x27
 800e860:	18fb      	adds	r3, r7, r3
 800e862:	781b      	ldrb	r3, [r3, #0]
}
 800e864:	0018      	movs	r0, r3
 800e866:	46bd      	mov	sp, r7
 800e868:	b00b      	add	sp, #44	@ 0x2c
 800e86a:	bd90      	pop	{r4, r7, pc}
 800e86c:	80000004 	.word	0x80000004
 800e870:	40012708 	.word	0x40012708
 800e874:	ac000800 	.word	0xac000800
 800e878:	20000220 	.word	0x20000220
 800e87c:	00030d40 	.word	0x00030d40
 800e880:	b4002000 	.word	0xb4002000
 800e884:	b0001000 	.word	0xb0001000
 800e888:	ff7fffff 	.word	0xff7fffff
 800e88c:	feffffff 	.word	0xfeffffff
 800e890:	ffbfffff 	.word	0xffbfffff

0800e894 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 800e894:	b590      	push	{r4, r7, lr}
 800e896:	b08f      	sub	sp, #60	@ 0x3c
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e89e:	2337      	movs	r3, #55	@ 0x37
 800e8a0:	18fb      	adds	r3, r7, r3
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2254      	movs	r2, #84	@ 0x54
 800e8ae:	5c9b      	ldrb	r3, [r3, r2]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d101      	bne.n	800e8b8 <HAL_ADC_AnalogWDGConfig+0x24>
 800e8b4:	2302      	movs	r3, #2
 800e8b6:	e195      	b.n	800ebe4 <HAL_ADC_AnalogWDGConfig+0x350>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2254      	movs	r2, #84	@ 0x54
 800e8bc:	2101      	movs	r1, #1
 800e8be:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	0018      	movs	r0, r3
 800e8c6:	f7ff fc41 	bl	800e14c <LL_ADC_REG_IsConversionOngoing>
 800e8ca:	1e03      	subs	r3, r0, #0
 800e8cc:	d000      	beq.n	800e8d0 <HAL_ADC_AnalogWDGConfig+0x3c>
 800e8ce:	e156      	b.n	800eb7e <HAL_ADC_AnalogWDGConfig+0x2ea>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4ac5      	ldr	r2, [pc, #788]	@ (800ebec <HAL_ADC_AnalogWDGConfig+0x358>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d162      	bne.n	800e9a0 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	0018      	movs	r0, r3
 800e8e0:	f7ff fc12 	bl	800e108 <LL_ADC_IsEnabled>
 800e8e4:	1e03      	subs	r3, r0, #0
 800e8e6:	d009      	beq.n	800e8fc <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmp_hal_status = ADC_Disable(hadc);
 800e8ec:	2337      	movs	r3, #55	@ 0x37
 800e8ee:	18fc      	adds	r4, r7, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	0018      	movs	r0, r3
 800e8f4:	f000 fa0e 	bl	800ed14 <ADC_Disable>
 800e8f8:	0003      	movs	r3, r0
 800e8fa:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	2280      	movs	r2, #128	@ 0x80
 800e902:	0412      	lsls	r2, r2, #16
 800e904:	4293      	cmp	r3, r2
 800e906:	d011      	beq.n	800e92c <HAL_ADC_AnalogWDGConfig+0x98>
 800e908:	22c0      	movs	r2, #192	@ 0xc0
 800e90a:	0412      	lsls	r2, r2, #16
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d115      	bne.n	800e93c <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	4ab5      	ldr	r2, [pc, #724]	@ (800ebf0 <HAL_ADC_AnalogWDGConfig+0x35c>)
 800e91a:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800e91c:	22c0      	movs	r2, #192	@ 0xc0
 800e91e:	0412      	lsls	r2, r2, #16
 800e920:	4313      	orrs	r3, r2
 800e922:	49b2      	ldr	r1, [pc, #712]	@ (800ebec <HAL_ADC_AnalogWDGConfig+0x358>)
 800e924:	001a      	movs	r2, r3
 800e926:	f7ff fb4d 	bl	800dfc4 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 800e92a:	e00f      	b.n	800e94c <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4ab0      	ldr	r2, [pc, #704]	@ (800ebf4 <HAL_ADC_AnalogWDGConfig+0x360>)
 800e932:	49ae      	ldr	r1, [pc, #696]	@ (800ebec <HAL_ADC_AnalogWDGConfig+0x358>)
 800e934:	0018      	movs	r0, r3
 800e936:	f7ff fb45 	bl	800dfc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800e93a:	e007      	b.n	800e94c <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	49aa      	ldr	r1, [pc, #680]	@ (800ebec <HAL_ADC_AnalogWDGConfig+0x358>)
 800e942:	2200      	movs	r2, #0
 800e944:	0018      	movs	r0, r3
 800e946:	f7ff fb3d 	bl	800dfc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800e94a:	46c0      	nop			@ (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 800e94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d10b      	bne.n	800e96a <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 800e952:	2237      	movs	r2, #55	@ 0x37
 800e954:	18bb      	adds	r3, r7, r2
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d106      	bne.n	800e96a <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 800e95c:	18bc      	adds	r4, r7, r2
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	0018      	movs	r0, r3
 800e962:	f000 f951 	bl	800ec08 <ADC_Enable>
 800e966:	0003      	movs	r3, r0
 800e968:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e96e:	4aa2      	ldr	r2, [pc, #648]	@ (800ebf8 <HAL_ADC_AnalogWDGConfig+0x364>)
 800e970:	401a      	ands	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	0018      	movs	r0, r3
 800e97c:	f7ff fbf7 	bl	800e16e <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	7b1b      	ldrb	r3, [r3, #12]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d105      	bne.n	800e994 <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	0018      	movs	r0, r3
 800e98e:	f7ff fc11 	bl	800e1b4 <LL_ADC_EnableIT_AWD1>
 800e992:	e0f4      	b.n	800eb7e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	0018      	movs	r0, r3
 800e99a:	f7ff fc37 	bl	800e20c <LL_ADC_DisableIT_AWD1>
 800e99e:	e0ee      	b.n	800eb7e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	2280      	movs	r2, #128	@ 0x80
 800e9a6:	0412      	lsls	r2, r2, #16
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d100      	bne.n	800e9ae <HAL_ADC_AnalogWDGConfig+0x11a>
 800e9ac:	e09b      	b.n	800eae6 <HAL_ADC_AnalogWDGConfig+0x252>
 800e9ae:	22c0      	movs	r2, #192	@ 0xc0
 800e9b0:	0412      	lsls	r2, r2, #16
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d000      	beq.n	800e9b8 <HAL_ADC_AnalogWDGConfig+0x124>
 800e9b6:	e09f      	b.n	800eaf8 <HAL_ADC_AnalogWDGConfig+0x264>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a8f      	ldr	r2, [pc, #572]	@ (800ebfc <HAL_ADC_AnalogWDGConfig+0x368>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d148      	bne.n	800ea54 <HAL_ADC_AnalogWDGConfig+0x1c0>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	025b      	lsls	r3, r3, #9
 800e9c8:	0a5b      	lsrs	r3, r3, #9
 800e9ca:	d108      	bne.n	800e9de <HAL_ADC_AnalogWDGConfig+0x14a>
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	689b      	ldr	r3, [r3, #8]
 800e9d0:	0e9b      	lsrs	r3, r3, #26
 800e9d2:	221f      	movs	r2, #31
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	409a      	lsls	r2, r3
 800e9da:	0013      	movs	r3, r2
 800e9dc:	e030      	b.n	800ea40 <HAL_ADC_AnalogWDGConfig+0x1ac>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800e9e4:	231f      	movs	r3, #31
 800e9e6:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	085b      	lsrs	r3, r3, #1
 800e9f0:	623b      	str	r3, [r7, #32]
 800e9f2:	e00e      	b.n	800ea12 <HAL_ADC_AnalogWDGConfig+0x17e>
    result <<= 1U;
 800e9f4:	69bb      	ldr	r3, [r7, #24]
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 800e9fa:	6a3b      	ldr	r3, [r7, #32]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	4013      	ands	r3, r2
 800ea00:	69ba      	ldr	r2, [r7, #24]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	61bb      	str	r3, [r7, #24]
    s--;
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800ea0c:	6a3b      	ldr	r3, [r7, #32]
 800ea0e:	085b      	lsrs	r3, r3, #1
 800ea10:	623b      	str	r3, [r7, #32]
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1ed      	bne.n	800e9f4 <HAL_ADC_AnalogWDGConfig+0x160>
  result <<= s;                        /* shift when v's highest bits are zero */
 800ea18:	69ba      	ldr	r2, [r7, #24]
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	409a      	lsls	r2, r3
 800ea1e:	0013      	movs	r3, r2
 800ea20:	61bb      	str	r3, [r7, #24]
  return result;
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d101      	bne.n	800ea30 <HAL_ADC_AnalogWDGConfig+0x19c>
    return 32U;
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	e004      	b.n	800ea3a <HAL_ADC_AnalogWDGConfig+0x1a6>
  return __builtin_clz(value);
 800ea30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea32:	f7f1 fce7 	bl	8000404 <__clzsi2>
 800ea36:	0003      	movs	r3, r0
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	001a      	movs	r2, r3
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	4093      	lsls	r3, r2
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	6812      	ldr	r2, [r2, #0]
 800ea44:	21a0      	movs	r1, #160	@ 0xa0
 800ea46:	5851      	ldr	r1, [r2, r1]
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	6812      	ldr	r2, [r2, #0]
 800ea4c:	430b      	orrs	r3, r1
 800ea4e:	21a0      	movs	r1, #160	@ 0xa0
 800ea50:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 800ea52:	e05a      	b.n	800eb0a <HAL_ADC_AnalogWDGConfig+0x276>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	025b      	lsls	r3, r3, #9
 800ea5a:	0a5b      	lsrs	r3, r3, #9
 800ea5c:	d108      	bne.n	800ea70 <HAL_ADC_AnalogWDGConfig+0x1dc>
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	0e9b      	lsrs	r3, r3, #26
 800ea64:	221f      	movs	r2, #31
 800ea66:	4013      	ands	r3, r2
 800ea68:	2201      	movs	r2, #1
 800ea6a:	409a      	lsls	r2, r3
 800ea6c:	0013      	movs	r3, r2
 800ea6e:	e030      	b.n	800ead2 <HAL_ADC_AnalogWDGConfig+0x23e>
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800ea76:	231f      	movs	r3, #31
 800ea78:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	085b      	lsrs	r3, r3, #1
 800ea82:	613b      	str	r3, [r7, #16]
 800ea84:	e00e      	b.n	800eaa4 <HAL_ADC_AnalogWDGConfig+0x210>
    result <<= 1U;
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	4013      	ands	r3, r2
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	4313      	orrs	r3, r2
 800ea96:	60bb      	str	r3, [r7, #8]
    s--;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	085b      	lsrs	r3, r3, #1
 800eaa2:	613b      	str	r3, [r7, #16]
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d1ed      	bne.n	800ea86 <HAL_ADC_AnalogWDGConfig+0x1f2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	409a      	lsls	r2, r3
 800eab0:	0013      	movs	r3, r2
 800eab2:	60bb      	str	r3, [r7, #8]
  return result;
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <HAL_ADC_AnalogWDGConfig+0x22e>
    return 32U;
 800eabe:	2320      	movs	r3, #32
 800eac0:	e004      	b.n	800eacc <HAL_ADC_AnalogWDGConfig+0x238>
  return __builtin_clz(value);
 800eac2:	6978      	ldr	r0, [r7, #20]
 800eac4:	f7f1 fc9e 	bl	8000404 <__clzsi2>
 800eac8:	0003      	movs	r3, r0
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	001a      	movs	r2, r3
 800eace:	2301      	movs	r3, #1
 800ead0:	4093      	lsls	r3, r2
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	6812      	ldr	r2, [r2, #0]
 800ead6:	21a4      	movs	r1, #164	@ 0xa4
 800ead8:	5851      	ldr	r1, [r2, r1]
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	6812      	ldr	r2, [r2, #0]
 800eade:	430b      	orrs	r3, r1
 800eae0:	21a4      	movs	r1, #164	@ 0xa4
 800eae2:	5053      	str	r3, [r2, r1]
          break;
 800eae4:	e011      	b.n	800eb0a <HAL_ADC_AnalogWDGConfig+0x276>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800eaee:	4a41      	ldr	r2, [pc, #260]	@ (800ebf4 <HAL_ADC_AnalogWDGConfig+0x360>)
 800eaf0:	0019      	movs	r1, r3
 800eaf2:	f7ff fa67 	bl	800dfc4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 800eaf6:	e008      	b.n	800eb0a <HAL_ADC_AnalogWDGConfig+0x276>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6818      	ldr	r0, [r3, #0]
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2200      	movs	r2, #0
 800eb02:	0019      	movs	r1, r3
 800eb04:	f7ff fa5e 	bl	800dfc4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800eb08:	46c0      	nop			@ (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a3b      	ldr	r2, [pc, #236]	@ (800ebfc <HAL_ADC_AnalogWDGConfig+0x368>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d11a      	bne.n	800eb4a <HAL_ADC_AnalogWDGConfig+0x2b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb18:	4a39      	ldr	r2, [pc, #228]	@ (800ec00 <HAL_ADC_AnalogWDGConfig+0x36c>)
 800eb1a:	401a      	ands	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	0018      	movs	r0, r3
 800eb26:	f7ff fb2d 	bl	800e184 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	7b1b      	ldrb	r3, [r3, #12]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d105      	bne.n	800eb3e <HAL_ADC_AnalogWDGConfig+0x2aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	0018      	movs	r0, r3
 800eb38:	f7ff fb4a 	bl	800e1d0 <LL_ADC_EnableIT_AWD2>
 800eb3c:	e01f      	b.n	800eb7e <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	0018      	movs	r0, r3
 800eb44:	f7ff fb72 	bl	800e22c <LL_ADC_DisableIT_AWD2>
 800eb48:	e019      	b.n	800eb7e <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb4e:	4a2d      	ldr	r2, [pc, #180]	@ (800ec04 <HAL_ADC_AnalogWDGConfig+0x370>)
 800eb50:	401a      	ands	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	0018      	movs	r0, r3
 800eb5c:	f7ff fb1e 	bl	800e19c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	7b1b      	ldrb	r3, [r3, #12]
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d105      	bne.n	800eb74 <HAL_ADC_AnalogWDGConfig+0x2e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	0018      	movs	r0, r3
 800eb6e:	f7ff fb3e 	bl	800e1ee <LL_ADC_EnableIT_AWD3>
 800eb72:	e004      	b.n	800eb7e <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	0018      	movs	r0, r3
 800eb7a:	f7ff fb67 	bl	800e24c <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a1a      	ldr	r2, [pc, #104]	@ (800ebec <HAL_ADC_AnalogWDGConfig+0x358>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d118      	bne.n	800ebba <HAL_ADC_AnalogWDGConfig+0x326>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	691a      	ldr	r2, [r3, #16]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	08db      	lsrs	r3, r3, #3
 800eb94:	2103      	movs	r1, #3
 800eb96:	400b      	ands	r3, r1
 800eb98:	005b      	lsls	r3, r3, #1
 800eb9a:	409a      	lsls	r2, r3
 800eb9c:	0013      	movs	r3, r2
 800eb9e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	695a      	ldr	r2, [r3, #20]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	08db      	lsrs	r3, r3, #3
 800ebac:	2103      	movs	r1, #3
 800ebae:	400b      	ands	r3, r1
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	409a      	lsls	r2, r3
 800ebb4:	0013      	movs	r3, r2
 800ebb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebb8:	e005      	b.n	800ebc6 <HAL_ADC_AnalogWDGConfig+0x332>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	691b      	ldr	r3, [r3, #16]
 800ebbe:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	695b      	ldr	r3, [r3, #20]
 800ebc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	6819      	ldr	r1, [r3, #0]
 800ebce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebd2:	f7ff fa25 	bl	800e020 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2254      	movs	r2, #84	@ 0x54
 800ebda:	2100      	movs	r1, #0
 800ebdc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800ebde:	2337      	movs	r3, #55	@ 0x37
 800ebe0:	18fb      	adds	r3, r7, r3
 800ebe2:	781b      	ldrb	r3, [r3, #0]
}
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	b00f      	add	sp, #60	@ 0x3c
 800ebea:	bd90      	pop	{r4, r7, pc}
 800ebec:	7cc00000 	.word	0x7cc00000
 800ebf0:	fc3fffff 	.word	0xfc3fffff
 800ebf4:	0087ffff 	.word	0x0087ffff
 800ebf8:	fffeffff 	.word	0xfffeffff
 800ebfc:	0017ffff 	.word	0x0017ffff
 800ec00:	fffdffff 	.word	0xfffdffff
 800ec04:	fffbffff 	.word	0xfffbffff

0800ec08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ec10:	2300      	movs	r3, #0
 800ec12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	0018      	movs	r0, r3
 800ec1a:	f7ff fa75 	bl	800e108 <LL_ADC_IsEnabled>
 800ec1e:	1e03      	subs	r3, r0, #0
 800ec20:	d000      	beq.n	800ec24 <ADC_Enable+0x1c>
 800ec22:	e069      	b.n	800ecf8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	4a36      	ldr	r2, [pc, #216]	@ (800ed04 <ADC_Enable+0xfc>)
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	d00d      	beq.n	800ec4c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec34:	2210      	movs	r2, #16
 800ec36:	431a      	orrs	r2, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec40:	2201      	movs	r2, #1
 800ec42:	431a      	orrs	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e056      	b.n	800ecfa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	0018      	movs	r0, r3
 800ec52:	f7ff fa35 	bl	800e0c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800ec56:	4b2c      	ldr	r3, [pc, #176]	@ (800ed08 <ADC_Enable+0x100>)
 800ec58:	0018      	movs	r0, r3
 800ec5a:	f7ff f913 	bl	800de84 <LL_ADC_GetCommonPathInternalCh>
 800ec5e:	0002      	movs	r2, r0
 800ec60:	2380      	movs	r3, #128	@ 0x80
 800ec62:	041b      	lsls	r3, r3, #16
 800ec64:	4013      	ands	r3, r2
 800ec66:	d00f      	beq.n	800ec88 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ec68:	4b28      	ldr	r3, [pc, #160]	@ (800ed0c <ADC_Enable+0x104>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4928      	ldr	r1, [pc, #160]	@ (800ed10 <ADC_Enable+0x108>)
 800ec6e:	0018      	movs	r0, r3
 800ec70:	f7f1 fa52 	bl	8000118 <__udivsi3>
 800ec74:	0003      	movs	r3, r0
 800ec76:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800ec78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ec7a:	e002      	b.n	800ec82 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d1f9      	bne.n	800ec7c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	7e5b      	ldrb	r3, [r3, #25]
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d033      	beq.n	800ecf8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800ec90:	f7ff f8b8 	bl	800de04 <HAL_GetTick>
 800ec94:	0003      	movs	r3, r0
 800ec96:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ec98:	e027      	b.n	800ecea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	0018      	movs	r0, r3
 800eca0:	f7ff fa32 	bl	800e108 <LL_ADC_IsEnabled>
 800eca4:	1e03      	subs	r3, r0, #0
 800eca6:	d104      	bne.n	800ecb2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	0018      	movs	r0, r3
 800ecae:	f7ff fa07 	bl	800e0c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ecb2:	f7ff f8a7 	bl	800de04 <HAL_GetTick>
 800ecb6:	0002      	movs	r2, r0
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d914      	bls.n	800ecea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	4013      	ands	r3, r2
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d00d      	beq.n	800ecea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecd2:	2210      	movs	r2, #16
 800ecd4:	431a      	orrs	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ecde:	2201      	movs	r2, #1
 800ece0:	431a      	orrs	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	e007      	b.n	800ecfa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	4013      	ands	r3, r2
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d1d0      	bne.n	800ec9a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	0018      	movs	r0, r3
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	b004      	add	sp, #16
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	46c0      	nop			@ (mov r8, r8)
 800ed04:	80000017 	.word	0x80000017
 800ed08:	40012708 	.word	0x40012708
 800ed0c:	20000220 	.word	0x20000220
 800ed10:	00030d40 	.word	0x00030d40

0800ed14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	0018      	movs	r0, r3
 800ed22:	f7ff fa02 	bl	800e12a <LL_ADC_IsDisableOngoing>
 800ed26:	0003      	movs	r3, r0
 800ed28:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	0018      	movs	r0, r3
 800ed30:	f7ff f9ea 	bl	800e108 <LL_ADC_IsEnabled>
 800ed34:	1e03      	subs	r3, r0, #0
 800ed36:	d046      	beq.n	800edc6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d143      	bne.n	800edc6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	2205      	movs	r2, #5
 800ed46:	4013      	ands	r3, r2
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d10d      	bne.n	800ed68 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	0018      	movs	r0, r3
 800ed52:	f7ff f9c7 	bl	800e0e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2203      	movs	r2, #3
 800ed5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ed5e:	f7ff f851 	bl	800de04 <HAL_GetTick>
 800ed62:	0003      	movs	r3, r0
 800ed64:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ed66:	e028      	b.n	800edba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed6c:	2210      	movs	r2, #16
 800ed6e:	431a      	orrs	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed78:	2201      	movs	r2, #1
 800ed7a:	431a      	orrs	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800ed80:	2301      	movs	r3, #1
 800ed82:	e021      	b.n	800edc8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ed84:	f7ff f83e 	bl	800de04 <HAL_GetTick>
 800ed88:	0002      	movs	r2, r0
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	d913      	bls.n	800edba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	d00d      	beq.n	800edba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eda2:	2210      	movs	r2, #16
 800eda4:	431a      	orrs	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800edae:	2201      	movs	r2, #1
 800edb0:	431a      	orrs	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800edb6:	2301      	movs	r3, #1
 800edb8:	e006      	b.n	800edc8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	2201      	movs	r2, #1
 800edc2:	4013      	ands	r3, r2
 800edc4:	d1de      	bne.n	800ed84 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	0018      	movs	r0, r3
 800edca:	46bd      	mov	sp, r7
 800edcc:	b004      	add	sp, #16
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <LL_ADC_GetCommonClock>:
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	23f0      	movs	r3, #240	@ 0xf0
 800edde:	039b      	lsls	r3, r3, #14
 800ede0:	4013      	ands	r3, r2
}
 800ede2:	0018      	movs	r0, r3
 800ede4:	46bd      	mov	sp, r7
 800ede6:	b002      	add	sp, #8
 800ede8:	bd80      	pop	{r7, pc}

0800edea <LL_ADC_GetClock>:
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b082      	sub	sp, #8
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	0f9b      	lsrs	r3, r3, #30
 800edf8:	079b      	lsls	r3, r3, #30
}
 800edfa:	0018      	movs	r0, r3
 800edfc:	46bd      	mov	sp, r7
 800edfe:	b002      	add	sp, #8
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <LL_ADC_SetCalibrationFactor>:
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b082      	sub	sp, #8
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	22b4      	movs	r2, #180	@ 0xb4
 800ee10:	589b      	ldr	r3, [r3, r2]
 800ee12:	227f      	movs	r2, #127	@ 0x7f
 800ee14:	4393      	bics	r3, r2
 800ee16:	001a      	movs	r2, r3
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	431a      	orrs	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	21b4      	movs	r1, #180	@ 0xb4
 800ee20:	505a      	str	r2, [r3, r1]
}
 800ee22:	46c0      	nop			@ (mov r8, r8)
 800ee24:	46bd      	mov	sp, r7
 800ee26:	b002      	add	sp, #8
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <LL_ADC_GetCalibrationFactor>:
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b082      	sub	sp, #8
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	22b4      	movs	r2, #180	@ 0xb4
 800ee36:	589b      	ldr	r3, [r3, r2]
 800ee38:	227f      	movs	r2, #127	@ 0x7f
 800ee3a:	4013      	ands	r3, r2
}
 800ee3c:	0018      	movs	r0, r3
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	b002      	add	sp, #8
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <LL_ADC_Enable>:
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	4a04      	ldr	r2, [pc, #16]	@ (800ee64 <LL_ADC_Enable+0x20>)
 800ee52:	4013      	ands	r3, r2
 800ee54:	2201      	movs	r2, #1
 800ee56:	431a      	orrs	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	609a      	str	r2, [r3, #8]
}
 800ee5c:	46c0      	nop			@ (mov r8, r8)
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	b002      	add	sp, #8
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	7fffffe8 	.word	0x7fffffe8

0800ee68 <LL_ADC_Disable>:
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	4a04      	ldr	r2, [pc, #16]	@ (800ee88 <LL_ADC_Disable+0x20>)
 800ee76:	4013      	ands	r3, r2
 800ee78:	2202      	movs	r2, #2
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	609a      	str	r2, [r3, #8]
}
 800ee80:	46c0      	nop			@ (mov r8, r8)
 800ee82:	46bd      	mov	sp, r7
 800ee84:	b002      	add	sp, #8
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	7fffffe8 	.word	0x7fffffe8

0800ee8c <LL_ADC_IsEnabled>:
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	689b      	ldr	r3, [r3, #8]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d101      	bne.n	800eea4 <LL_ADC_IsEnabled+0x18>
 800eea0:	2301      	movs	r3, #1
 800eea2:	e000      	b.n	800eea6 <LL_ADC_IsEnabled+0x1a>
 800eea4:	2300      	movs	r3, #0
}
 800eea6:	0018      	movs	r0, r3
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	b002      	add	sp, #8
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <LL_ADC_StartCalibration>:
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	4a05      	ldr	r2, [pc, #20]	@ (800eed4 <LL_ADC_StartCalibration+0x24>)
 800eebe:	4013      	ands	r3, r2
 800eec0:	2280      	movs	r2, #128	@ 0x80
 800eec2:	0612      	lsls	r2, r2, #24
 800eec4:	431a      	orrs	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	609a      	str	r2, [r3, #8]
}
 800eeca:	46c0      	nop			@ (mov r8, r8)
 800eecc:	46bd      	mov	sp, r7
 800eece:	b002      	add	sp, #8
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	46c0      	nop			@ (mov r8, r8)
 800eed4:	7fffffe8 	.word	0x7fffffe8

0800eed8 <LL_ADC_IsCalibrationOnGoing>:
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	0fdb      	lsrs	r3, r3, #31
 800eee6:	07da      	lsls	r2, r3, #31
 800eee8:	2380      	movs	r3, #128	@ 0x80
 800eeea:	061b      	lsls	r3, r3, #24
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d101      	bne.n	800eef4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800eef0:	2301      	movs	r3, #1
 800eef2:	e000      	b.n	800eef6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	0018      	movs	r0, r3
 800eef8:	46bd      	mov	sp, r7
 800eefa:	b002      	add	sp, #8
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800ef00:	b590      	push	{r4, r7, lr}
 800ef02:	b08b      	sub	sp, #44	@ 0x2c
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2254      	movs	r2, #84	@ 0x54
 800ef14:	5c9b      	ldrb	r3, [r3, r2]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d101      	bne.n	800ef1e <HAL_ADCEx_Calibration_Start+0x1e>
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	e0de      	b.n	800f0dc <HAL_ADCEx_Calibration_Start+0x1dc>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2254      	movs	r2, #84	@ 0x54
 800ef22:	2101      	movs	r1, #1
 800ef24:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800ef26:	231f      	movs	r3, #31
 800ef28:	18fc      	adds	r4, r7, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	0018      	movs	r0, r3
 800ef2e:	f7ff fef1 	bl	800ed14 <ADC_Disable>
 800ef32:	0003      	movs	r3, r0
 800ef34:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	0018      	movs	r0, r3
 800ef3c:	f7ff ffa6 	bl	800ee8c <LL_ADC_IsEnabled>
 800ef40:	1e03      	subs	r3, r0, #0
 800ef42:	d000      	beq.n	800ef46 <HAL_ADCEx_Calibration_Start+0x46>
 800ef44:	e0bd      	b.n	800f0c2 <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef4a:	4a66      	ldr	r2, [pc, #408]	@ (800f0e4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	2202      	movs	r2, #2
 800ef50:	431a      	orrs	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	4a62      	ldr	r2, [pc, #392]	@ (800f0e8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800ef5e:	4013      	ands	r3, r2
 800ef60:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68da      	ldr	r2, [r3, #12]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	495f      	ldr	r1, [pc, #380]	@ (800f0ec <HAL_ADCEx_Calibration_Start+0x1ec>)
 800ef6e:	400a      	ands	r2, r1
 800ef70:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ef72:	2300      	movs	r3, #0
 800ef74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef76:	e02e      	b.n	800efd6 <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	0018      	movs	r0, r3
 800ef7e:	f7ff ff97 	bl	800eeb0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ef82:	e015      	b.n	800efb0 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	3301      	adds	r3, #1
 800ef88:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	23ae      	movs	r3, #174	@ 0xae
 800ef8e:	029b      	lsls	r3, r3, #10
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d30d      	bcc.n	800efb0 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef98:	2212      	movs	r2, #18
 800ef9a:	4393      	bics	r3, r2
 800ef9c:	2210      	movs	r2, #16
 800ef9e:	431a      	orrs	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2254      	movs	r2, #84	@ 0x54
 800efa8:	2100      	movs	r1, #0
 800efaa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800efac:	2301      	movs	r3, #1
 800efae:	e095      	b.n	800f0dc <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	0018      	movs	r0, r3
 800efb6:	f7ff ff8f 	bl	800eed8 <LL_ADC_IsCalibrationOnGoing>
 800efba:	1e03      	subs	r3, r0, #0
 800efbc:	d1e2      	bne.n	800ef84 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	0018      	movs	r0, r3
 800efc4:	f7ff ff31 	bl	800ee2a <LL_ADC_GetCalibrationFactor>
 800efc8:	0002      	movs	r2, r0
 800efca:	6a3b      	ldr	r3, [r7, #32]
 800efcc:	189b      	adds	r3, r3, r2
 800efce:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800efd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd2:	3301      	adds	r3, #1
 800efd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800efd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd8:	2b07      	cmp	r3, #7
 800efda:	d9cd      	bls.n	800ef78 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800efdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800efde:	6a38      	ldr	r0, [r7, #32]
 800efe0:	f7f1 f89a 	bl	8000118 <__udivsi3>
 800efe4:	0003      	movs	r3, r0
 800efe6:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	0018      	movs	r0, r3
 800efee:	f7ff ff29 	bl	800ee44 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	0018      	movs	r0, r3
 800eff8:	f7ff fef7 	bl	800edea <LL_ADC_GetClock>
 800effc:	1e03      	subs	r3, r0, #0
 800effe:	d11b      	bne.n	800f038 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f000:	4b3b      	ldr	r3, [pc, #236]	@ (800f0f0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800f002:	0018      	movs	r0, r3
 800f004:	f7ff fee4 	bl	800edd0 <LL_ADC_GetCommonClock>
 800f008:	0003      	movs	r3, r0
 800f00a:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800f00c:	697a      	ldr	r2, [r7, #20]
 800f00e:	23e0      	movs	r3, #224	@ 0xe0
 800f010:	035b      	lsls	r3, r3, #13
 800f012:	429a      	cmp	r2, r3
 800f014:	d310      	bcc.n	800f038 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	0c9b      	lsrs	r3, r3, #18
 800f01a:	3b03      	subs	r3, #3
 800f01c:	2201      	movs	r2, #1
 800f01e:	409a      	lsls	r2, r3
 800f020:	0013      	movs	r3, r2
 800f022:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	085b      	lsrs	r3, r3, #1
 800f028:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800f02a:	e002      	b.n	800f032 <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	3b01      	subs	r3, #1
 800f030:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1f9      	bne.n	800f02c <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	6a3a      	ldr	r2, [r7, #32]
 800f03e:	0011      	movs	r1, r2
 800f040:	0018      	movs	r0, r3
 800f042:	f7ff fede 	bl	800ee02 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	0018      	movs	r0, r3
 800f04c:	f7ff ff0c 	bl	800ee68 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f050:	f7fe fed8 	bl	800de04 <HAL_GetTick>
 800f054:	0003      	movs	r3, r0
 800f056:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800f058:	e01b      	b.n	800f092 <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f05a:	f7fe fed3 	bl	800de04 <HAL_GetTick>
 800f05e:	0002      	movs	r2, r0
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	1ad3      	subs	r3, r2, r3
 800f064:	2b02      	cmp	r3, #2
 800f066:	d914      	bls.n	800f092 <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	0018      	movs	r0, r3
 800f06e:	f7ff ff0d 	bl	800ee8c <LL_ADC_IsEnabled>
 800f072:	1e03      	subs	r3, r0, #0
 800f074:	d00d      	beq.n	800f092 <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f07a:	2210      	movs	r2, #16
 800f07c:	431a      	orrs	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f086:	2201      	movs	r2, #1
 800f088:	431a      	orrs	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800f08e:	2301      	movs	r3, #1
 800f090:	e024      	b.n	800f0dc <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	0018      	movs	r0, r3
 800f098:	f7ff fef8 	bl	800ee8c <LL_ADC_IsEnabled>
 800f09c:	1e03      	subs	r3, r0, #0
 800f09e:	d1dc      	bne.n	800f05a <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	68d9      	ldr	r1, [r3, #12]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	69ba      	ldr	r2, [r7, #24]
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0b4:	2203      	movs	r2, #3
 800f0b6:	4393      	bics	r3, r2
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	431a      	orrs	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	659a      	str	r2, [r3, #88]	@ 0x58
 800f0c0:	e005      	b.n	800f0ce <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0c6:	2210      	movs	r2, #16
 800f0c8:	431a      	orrs	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2254      	movs	r2, #84	@ 0x54
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800f0d6:	231f      	movs	r3, #31
 800f0d8:	18fb      	adds	r3, r7, r3
 800f0da:	781b      	ldrb	r3, [r3, #0]
}
 800f0dc:	0018      	movs	r0, r3
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	b00b      	add	sp, #44	@ 0x2c
 800f0e2:	bd90      	pop	{r4, r7, pc}
 800f0e4:	fffffefd 	.word	0xfffffefd
 800f0e8:	00008003 	.word	0x00008003
 800f0ec:	ffff7ffc 	.word	0xffff7ffc
 800f0f0:	40012708 	.word	0x40012708

0800f0f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	0002      	movs	r2, r0
 800f0fc:	1dfb      	adds	r3, r7, #7
 800f0fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f100:	1dfb      	adds	r3, r7, #7
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	2b7f      	cmp	r3, #127	@ 0x7f
 800f106:	d809      	bhi.n	800f11c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f108:	1dfb      	adds	r3, r7, #7
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	001a      	movs	r2, r3
 800f10e:	231f      	movs	r3, #31
 800f110:	401a      	ands	r2, r3
 800f112:	4b04      	ldr	r3, [pc, #16]	@ (800f124 <__NVIC_EnableIRQ+0x30>)
 800f114:	2101      	movs	r1, #1
 800f116:	4091      	lsls	r1, r2
 800f118:	000a      	movs	r2, r1
 800f11a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800f11c:	46c0      	nop			@ (mov r8, r8)
 800f11e:	46bd      	mov	sp, r7
 800f120:	b002      	add	sp, #8
 800f122:	bd80      	pop	{r7, pc}
 800f124:	e000e100 	.word	0xe000e100

0800f128 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	0002      	movs	r2, r0
 800f130:	1dfb      	adds	r3, r7, #7
 800f132:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f134:	1dfb      	adds	r3, r7, #7
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	2b7f      	cmp	r3, #127	@ 0x7f
 800f13a:	d810      	bhi.n	800f15e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f13c:	1dfb      	adds	r3, r7, #7
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	001a      	movs	r2, r3
 800f142:	231f      	movs	r3, #31
 800f144:	4013      	ands	r3, r2
 800f146:	4908      	ldr	r1, [pc, #32]	@ (800f168 <__NVIC_DisableIRQ+0x40>)
 800f148:	2201      	movs	r2, #1
 800f14a:	409a      	lsls	r2, r3
 800f14c:	0013      	movs	r3, r2
 800f14e:	2280      	movs	r2, #128	@ 0x80
 800f150:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f152:	f3bf 8f4f 	dsb	sy
}
 800f156:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f158:	f3bf 8f6f 	isb	sy
}
 800f15c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800f15e:	46c0      	nop			@ (mov r8, r8)
 800f160:	46bd      	mov	sp, r7
 800f162:	b002      	add	sp, #8
 800f164:	bd80      	pop	{r7, pc}
 800f166:	46c0      	nop			@ (mov r8, r8)
 800f168:	e000e100 	.word	0xe000e100

0800f16c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f16c:	b590      	push	{r4, r7, lr}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	0002      	movs	r2, r0
 800f174:	6039      	str	r1, [r7, #0]
 800f176:	1dfb      	adds	r3, r7, #7
 800f178:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f17a:	1dfb      	adds	r3, r7, #7
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f180:	d828      	bhi.n	800f1d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f182:	4a2f      	ldr	r2, [pc, #188]	@ (800f240 <__NVIC_SetPriority+0xd4>)
 800f184:	1dfb      	adds	r3, r7, #7
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	b25b      	sxtb	r3, r3
 800f18a:	089b      	lsrs	r3, r3, #2
 800f18c:	33c0      	adds	r3, #192	@ 0xc0
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	589b      	ldr	r3, [r3, r2]
 800f192:	1dfa      	adds	r2, r7, #7
 800f194:	7812      	ldrb	r2, [r2, #0]
 800f196:	0011      	movs	r1, r2
 800f198:	2203      	movs	r2, #3
 800f19a:	400a      	ands	r2, r1
 800f19c:	00d2      	lsls	r2, r2, #3
 800f19e:	21ff      	movs	r1, #255	@ 0xff
 800f1a0:	4091      	lsls	r1, r2
 800f1a2:	000a      	movs	r2, r1
 800f1a4:	43d2      	mvns	r2, r2
 800f1a6:	401a      	ands	r2, r3
 800f1a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	019b      	lsls	r3, r3, #6
 800f1ae:	22ff      	movs	r2, #255	@ 0xff
 800f1b0:	401a      	ands	r2, r3
 800f1b2:	1dfb      	adds	r3, r7, #7
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	0018      	movs	r0, r3
 800f1b8:	2303      	movs	r3, #3
 800f1ba:	4003      	ands	r3, r0
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f1c0:	481f      	ldr	r0, [pc, #124]	@ (800f240 <__NVIC_SetPriority+0xd4>)
 800f1c2:	1dfb      	adds	r3, r7, #7
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	b25b      	sxtb	r3, r3
 800f1c8:	089b      	lsrs	r3, r3, #2
 800f1ca:	430a      	orrs	r2, r1
 800f1cc:	33c0      	adds	r3, #192	@ 0xc0
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f1d2:	e031      	b.n	800f238 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f1d4:	4a1b      	ldr	r2, [pc, #108]	@ (800f244 <__NVIC_SetPriority+0xd8>)
 800f1d6:	1dfb      	adds	r3, r7, #7
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	0019      	movs	r1, r3
 800f1dc:	230f      	movs	r3, #15
 800f1de:	400b      	ands	r3, r1
 800f1e0:	3b08      	subs	r3, #8
 800f1e2:	089b      	lsrs	r3, r3, #2
 800f1e4:	3306      	adds	r3, #6
 800f1e6:	009b      	lsls	r3, r3, #2
 800f1e8:	18d3      	adds	r3, r2, r3
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	1dfa      	adds	r2, r7, #7
 800f1f0:	7812      	ldrb	r2, [r2, #0]
 800f1f2:	0011      	movs	r1, r2
 800f1f4:	2203      	movs	r2, #3
 800f1f6:	400a      	ands	r2, r1
 800f1f8:	00d2      	lsls	r2, r2, #3
 800f1fa:	21ff      	movs	r1, #255	@ 0xff
 800f1fc:	4091      	lsls	r1, r2
 800f1fe:	000a      	movs	r2, r1
 800f200:	43d2      	mvns	r2, r2
 800f202:	401a      	ands	r2, r3
 800f204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	019b      	lsls	r3, r3, #6
 800f20a:	22ff      	movs	r2, #255	@ 0xff
 800f20c:	401a      	ands	r2, r3
 800f20e:	1dfb      	adds	r3, r7, #7
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	0018      	movs	r0, r3
 800f214:	2303      	movs	r3, #3
 800f216:	4003      	ands	r3, r0
 800f218:	00db      	lsls	r3, r3, #3
 800f21a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f21c:	4809      	ldr	r0, [pc, #36]	@ (800f244 <__NVIC_SetPriority+0xd8>)
 800f21e:	1dfb      	adds	r3, r7, #7
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	001c      	movs	r4, r3
 800f224:	230f      	movs	r3, #15
 800f226:	4023      	ands	r3, r4
 800f228:	3b08      	subs	r3, #8
 800f22a:	089b      	lsrs	r3, r3, #2
 800f22c:	430a      	orrs	r2, r1
 800f22e:	3306      	adds	r3, #6
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	18c3      	adds	r3, r0, r3
 800f234:	3304      	adds	r3, #4
 800f236:	601a      	str	r2, [r3, #0]
}
 800f238:	46c0      	nop			@ (mov r8, r8)
 800f23a:	46bd      	mov	sp, r7
 800f23c:	b003      	add	sp, #12
 800f23e:	bd90      	pop	{r4, r7, pc}
 800f240:	e000e100 	.word	0xe000e100
 800f244:	e000ed00 	.word	0xe000ed00

0800f248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	1e5a      	subs	r2, r3, #1
 800f254:	2380      	movs	r3, #128	@ 0x80
 800f256:	045b      	lsls	r3, r3, #17
 800f258:	429a      	cmp	r2, r3
 800f25a:	d301      	bcc.n	800f260 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f25c:	2301      	movs	r3, #1
 800f25e:	e010      	b.n	800f282 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f260:	4b0a      	ldr	r3, [pc, #40]	@ (800f28c <SysTick_Config+0x44>)
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	3a01      	subs	r2, #1
 800f266:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f268:	2301      	movs	r3, #1
 800f26a:	425b      	negs	r3, r3
 800f26c:	2103      	movs	r1, #3
 800f26e:	0018      	movs	r0, r3
 800f270:	f7ff ff7c 	bl	800f16c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f274:	4b05      	ldr	r3, [pc, #20]	@ (800f28c <SysTick_Config+0x44>)
 800f276:	2200      	movs	r2, #0
 800f278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f27a:	4b04      	ldr	r3, [pc, #16]	@ (800f28c <SysTick_Config+0x44>)
 800f27c:	2207      	movs	r2, #7
 800f27e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f280:	2300      	movs	r3, #0
}
 800f282:	0018      	movs	r0, r3
 800f284:	46bd      	mov	sp, r7
 800f286:	b002      	add	sp, #8
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	46c0      	nop			@ (mov r8, r8)
 800f28c:	e000e010 	.word	0xe000e010

0800f290 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	60b9      	str	r1, [r7, #8]
 800f298:	607a      	str	r2, [r7, #4]
 800f29a:	210f      	movs	r1, #15
 800f29c:	187b      	adds	r3, r7, r1
 800f29e:	1c02      	adds	r2, r0, #0
 800f2a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	187b      	adds	r3, r7, r1
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	b25b      	sxtb	r3, r3
 800f2aa:	0011      	movs	r1, r2
 800f2ac:	0018      	movs	r0, r3
 800f2ae:	f7ff ff5d 	bl	800f16c <__NVIC_SetPriority>
}
 800f2b2:	46c0      	nop			@ (mov r8, r8)
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	b004      	add	sp, #16
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b082      	sub	sp, #8
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	0002      	movs	r2, r0
 800f2c2:	1dfb      	adds	r3, r7, #7
 800f2c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f2c6:	1dfb      	adds	r3, r7, #7
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	b25b      	sxtb	r3, r3
 800f2cc:	0018      	movs	r0, r3
 800f2ce:	f7ff ff11 	bl	800f0f4 <__NVIC_EnableIRQ>
}
 800f2d2:	46c0      	nop			@ (mov r8, r8)
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	b002      	add	sp, #8
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b082      	sub	sp, #8
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	0002      	movs	r2, r0
 800f2e2:	1dfb      	adds	r3, r7, #7
 800f2e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f2e6:	1dfb      	adds	r3, r7, #7
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	b25b      	sxtb	r3, r3
 800f2ec:	0018      	movs	r0, r3
 800f2ee:	f7ff ff1b 	bl	800f128 <__NVIC_DisableIRQ>
}
 800f2f2:	46c0      	nop			@ (mov r8, r8)
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	b002      	add	sp, #8
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	0018      	movs	r0, r3
 800f306:	f7ff ff9f 	bl	800f248 <SysTick_Config>
 800f30a:	0003      	movs	r3, r0
}
 800f30c:	0018      	movs	r0, r3
 800f30e:	46bd      	mov	sp, r7
 800f310:	b002      	add	sp, #8
 800f312:	bd80      	pop	{r7, pc}

0800f314 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d101      	bne.n	800f326 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	e091      	b.n	800f44a <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	001a      	movs	r2, r3
 800f32c:	4b49      	ldr	r3, [pc, #292]	@ (800f454 <HAL_DMA_Init+0x140>)
 800f32e:	429a      	cmp	r2, r3
 800f330:	d810      	bhi.n	800f354 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a48      	ldr	r2, [pc, #288]	@ (800f458 <HAL_DMA_Init+0x144>)
 800f338:	4694      	mov	ip, r2
 800f33a:	4463      	add	r3, ip
 800f33c:	2114      	movs	r1, #20
 800f33e:	0018      	movs	r0, r3
 800f340:	f7f0 feea 	bl	8000118 <__udivsi3>
 800f344:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800f346:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a43      	ldr	r2, [pc, #268]	@ (800f45c <HAL_DMA_Init+0x148>)
 800f350:	641a      	str	r2, [r3, #64]	@ 0x40
 800f352:	e00f      	b.n	800f374 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4a41      	ldr	r2, [pc, #260]	@ (800f460 <HAL_DMA_Init+0x14c>)
 800f35a:	4694      	mov	ip, r2
 800f35c:	4463      	add	r3, ip
 800f35e:	2114      	movs	r1, #20
 800f360:	0018      	movs	r0, r3
 800f362:	f7f0 fed9 	bl	8000118 <__udivsi3>
 800f366:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800f368:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a3c      	ldr	r2, [pc, #240]	@ (800f464 <HAL_DMA_Init+0x150>)
 800f372:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2225      	movs	r2, #37	@ 0x25
 800f378:	2102      	movs	r1, #2
 800f37a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4938      	ldr	r1, [pc, #224]	@ (800f468 <HAL_DMA_Init+0x154>)
 800f388:	400a      	ands	r2, r1
 800f38a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	6819      	ldr	r1, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	689a      	ldr	r2, [r3, #8]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	431a      	orrs	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	431a      	orrs	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	695b      	ldr	r3, [r3, #20]
 800f3a6:	431a      	orrs	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	699b      	ldr	r3, [r3, #24]
 800f3ac:	431a      	orrs	r2, r3
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	69db      	ldr	r3, [r3, #28]
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	431a      	orrs	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	430a      	orrs	r2, r1
 800f3c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	0018      	movs	r0, r3
 800f3c6:	f000 fb4d 	bl	800fa64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	689a      	ldr	r2, [r3, #8]
 800f3ce:	2380      	movs	r3, #128	@ 0x80
 800f3d0:	01db      	lsls	r3, r3, #7
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d102      	bne.n	800f3dc <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685a      	ldr	r2, [r3, #4]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3e4:	21ff      	movs	r1, #255	@ 0xff
 800f3e6:	400a      	ands	r2, r1
 800f3e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f3f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d011      	beq.n	800f420 <HAL_DMA_Init+0x10c>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	2b04      	cmp	r3, #4
 800f402:	d80d      	bhi.n	800f420 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	0018      	movs	r0, r3
 800f408:	f000 fb76 	bl	800faf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f410:	2200      	movs	r2, #0
 800f412:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800f41c:	605a      	str	r2, [r3, #4]
 800f41e:	e008      	b.n	800f432 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2225      	movs	r2, #37	@ 0x25
 800f43c:	2101      	movs	r1, #1
 800f43e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2224      	movs	r2, #36	@ 0x24
 800f444:	2100      	movs	r1, #0
 800f446:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f448:	2300      	movs	r3, #0
}
 800f44a:	0018      	movs	r0, r3
 800f44c:	46bd      	mov	sp, r7
 800f44e:	b002      	add	sp, #8
 800f450:	bd80      	pop	{r7, pc}
 800f452:	46c0      	nop			@ (mov r8, r8)
 800f454:	40020407 	.word	0x40020407
 800f458:	bffdfff8 	.word	0xbffdfff8
 800f45c:	40020000 	.word	0x40020000
 800f460:	bffdfbf8 	.word	0xbffdfbf8
 800f464:	40020400 	.word	0x40020400
 800f468:	ffff800f 	.word	0xffff800f

0800f46c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
 800f47c:	e07f      	b.n	800f57e <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2101      	movs	r1, #1
 800f48a:	438a      	bics	r2, r1
 800f48c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	001a      	movs	r2, r3
 800f494:	4b3c      	ldr	r3, [pc, #240]	@ (800f588 <HAL_DMA_DeInit+0x11c>)
 800f496:	429a      	cmp	r2, r3
 800f498:	d810      	bhi.n	800f4bc <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4a3b      	ldr	r2, [pc, #236]	@ (800f58c <HAL_DMA_DeInit+0x120>)
 800f4a0:	4694      	mov	ip, r2
 800f4a2:	4463      	add	r3, ip
 800f4a4:	2114      	movs	r1, #20
 800f4a6:	0018      	movs	r0, r3
 800f4a8:	f7f0 fe36 	bl	8000118 <__udivsi3>
 800f4ac:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800f4ae:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a36      	ldr	r2, [pc, #216]	@ (800f590 <HAL_DMA_DeInit+0x124>)
 800f4b8:	641a      	str	r2, [r3, #64]	@ 0x40
 800f4ba:	e00f      	b.n	800f4dc <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a34      	ldr	r2, [pc, #208]	@ (800f594 <HAL_DMA_DeInit+0x128>)
 800f4c2:	4694      	mov	ip, r2
 800f4c4:	4463      	add	r3, ip
 800f4c6:	2114      	movs	r1, #20
 800f4c8:	0018      	movs	r0, r3
 800f4ca:	f7f0 fe25 	bl	8000118 <__udivsi3>
 800f4ce:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800f4d0:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4a2f      	ldr	r2, [pc, #188]	@ (800f598 <HAL_DMA_DeInit+0x12c>)
 800f4da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4e8:	221c      	movs	r2, #28
 800f4ea:	401a      	ands	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4f0:	2101      	movs	r1, #1
 800f4f2:	4091      	lsls	r1, r2
 800f4f4:	000a      	movs	r2, r1
 800f4f6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	0018      	movs	r0, r3
 800f4fc:	f000 fab2 	bl	800fa64 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f504:	2200      	movs	r2, #0
 800f506:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f510:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d010      	beq.n	800f53c <HAL_DMA_DeInit+0xd0>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	2b04      	cmp	r3, #4
 800f520:	d80c      	bhi.n	800f53c <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	0018      	movs	r0, r3
 800f526:	f000 fae7 	bl	800faf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f52e:	2200      	movs	r2, #0
 800f530:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800f53a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2200      	movs	r2, #0
 800f558:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2200      	movs	r2, #0
 800f55e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2225      	movs	r2, #37	@ 0x25
 800f570:	2100      	movs	r1, #0
 800f572:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2224      	movs	r2, #36	@ 0x24
 800f578:	2100      	movs	r1, #0
 800f57a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	0018      	movs	r0, r3
 800f580:	46bd      	mov	sp, r7
 800f582:	b002      	add	sp, #8
 800f584:	bd80      	pop	{r7, pc}
 800f586:	46c0      	nop			@ (mov r8, r8)
 800f588:	40020407 	.word	0x40020407
 800f58c:	bffdfff8 	.word	0xbffdfff8
 800f590:	40020000 	.word	0x40020000
 800f594:	bffdfbf8 	.word	0xbffdfbf8
 800f598:	40020400 	.word	0x40020400

0800f59c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b086      	sub	sp, #24
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
 800f5a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f5aa:	2317      	movs	r3, #23
 800f5ac:	18fb      	adds	r3, r7, r3
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2224      	movs	r2, #36	@ 0x24
 800f5b6:	5c9b      	ldrb	r3, [r3, r2]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d101      	bne.n	800f5c0 <HAL_DMA_Start_IT+0x24>
 800f5bc:	2302      	movs	r3, #2
 800f5be:	e06f      	b.n	800f6a0 <HAL_DMA_Start_IT+0x104>
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2224      	movs	r2, #36	@ 0x24
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2225      	movs	r2, #37	@ 0x25
 800f5cc:	5c9b      	ldrb	r3, [r3, r2]
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d157      	bne.n	800f684 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2225      	movs	r2, #37	@ 0x25
 800f5d8:	2102      	movs	r1, #2
 800f5da:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2101      	movs	r1, #1
 800f5ee:	438a      	bics	r2, r1
 800f5f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	68b9      	ldr	r1, [r7, #8]
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f000 f9f7 	bl	800f9ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f602:	2b00      	cmp	r3, #0
 800f604:	d008      	beq.n	800f618 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	210e      	movs	r1, #14
 800f612:	430a      	orrs	r2, r1
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	e00f      	b.n	800f638 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2104      	movs	r1, #4
 800f624:	438a      	bics	r2, r1
 800f626:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	210a      	movs	r1, #10
 800f634:	430a      	orrs	r2, r1
 800f636:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	2380      	movs	r3, #128	@ 0x80
 800f640:	025b      	lsls	r3, r3, #9
 800f642:	4013      	ands	r3, r2
 800f644:	d008      	beq.n	800f658 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f650:	2180      	movs	r1, #128	@ 0x80
 800f652:	0049      	lsls	r1, r1, #1
 800f654:	430a      	orrs	r2, r1
 800f656:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d008      	beq.n	800f672 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f66a:	2180      	movs	r1, #128	@ 0x80
 800f66c:	0049      	lsls	r1, r1, #1
 800f66e:	430a      	orrs	r2, r1
 800f670:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2101      	movs	r1, #1
 800f67e:	430a      	orrs	r2, r1
 800f680:	601a      	str	r2, [r3, #0]
 800f682:	e00a      	b.n	800f69a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2280      	movs	r2, #128	@ 0x80
 800f688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2224      	movs	r2, #36	@ 0x24
 800f68e:	2100      	movs	r1, #0
 800f690:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800f692:	2317      	movs	r3, #23
 800f694:	18fb      	adds	r3, r7, r3
 800f696:	2201      	movs	r2, #1
 800f698:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800f69a:	2317      	movs	r3, #23
 800f69c:	18fb      	adds	r3, r7, r3
 800f69e:	781b      	ldrb	r3, [r3, #0]
}
 800f6a0:	0018      	movs	r0, r3
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	b006      	add	sp, #24
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d101      	bne.n	800f6ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e04f      	b.n	800f75a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2225      	movs	r2, #37	@ 0x25
 800f6be:	5c9b      	ldrb	r3, [r3, r2]
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d008      	beq.n	800f6d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2204      	movs	r2, #4
 800f6ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2224      	movs	r2, #36	@ 0x24
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e040      	b.n	800f75a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	210e      	movs	r1, #14
 800f6e4:	438a      	bics	r2, r1
 800f6e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f6f2:	491c      	ldr	r1, [pc, #112]	@ (800f764 <HAL_DMA_Abort+0xbc>)
 800f6f4:	400a      	ands	r2, r1
 800f6f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2101      	movs	r1, #1
 800f704:	438a      	bics	r2, r1
 800f706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f70c:	221c      	movs	r2, #28
 800f70e:	401a      	ands	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f714:	2101      	movs	r1, #1
 800f716:	4091      	lsls	r1, r2
 800f718:	000a      	movs	r2, r1
 800f71a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00c      	beq.n	800f748 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f738:	490a      	ldr	r1, [pc, #40]	@ (800f764 <HAL_DMA_Abort+0xbc>)
 800f73a:	400a      	ands	r2, r1
 800f73c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800f746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2225      	movs	r2, #37	@ 0x25
 800f74c:	2101      	movs	r1, #1
 800f74e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2224      	movs	r2, #36	@ 0x24
 800f754:	2100      	movs	r1, #0
 800f756:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	0018      	movs	r0, r3
 800f75c:	46bd      	mov	sp, r7
 800f75e:	b002      	add	sp, #8
 800f760:	bd80      	pop	{r7, pc}
 800f762:	46c0      	nop			@ (mov r8, r8)
 800f764:	fffffeff 	.word	0xfffffeff

0800f768 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f770:	210f      	movs	r1, #15
 800f772:	187b      	adds	r3, r7, r1
 800f774:	2200      	movs	r2, #0
 800f776:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2225      	movs	r2, #37	@ 0x25
 800f77c:	5c9b      	ldrb	r3, [r3, r2]
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	2b02      	cmp	r3, #2
 800f782:	d006      	beq.n	800f792 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2204      	movs	r2, #4
 800f788:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f78a:	187b      	adds	r3, r7, r1
 800f78c:	2201      	movs	r2, #1
 800f78e:	701a      	strb	r2, [r3, #0]
 800f790:	e048      	b.n	800f824 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	210e      	movs	r1, #14
 800f79e:	438a      	bics	r2, r1
 800f7a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	438a      	bics	r2, r1
 800f7b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7bc:	491d      	ldr	r1, [pc, #116]	@ (800f834 <HAL_DMA_Abort_IT+0xcc>)
 800f7be:	400a      	ands	r2, r1
 800f7c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7c6:	221c      	movs	r2, #28
 800f7c8:	401a      	ands	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7ce:	2101      	movs	r1, #1
 800f7d0:	4091      	lsls	r1, r2
 800f7d2:	000a      	movs	r2, r1
 800f7d4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f7de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00c      	beq.n	800f802 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7f2:	4910      	ldr	r1, [pc, #64]	@ (800f834 <HAL_DMA_Abort_IT+0xcc>)
 800f7f4:	400a      	ands	r2, r1
 800f7f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800f800:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2225      	movs	r2, #37	@ 0x25
 800f806:	2101      	movs	r1, #1
 800f808:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2224      	movs	r2, #36	@ 0x24
 800f80e:	2100      	movs	r1, #0
 800f810:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f816:	2b00      	cmp	r3, #0
 800f818:	d004      	beq.n	800f824 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	0010      	movs	r0, r2
 800f822:	4798      	blx	r3
    }
  }
  return status;
 800f824:	230f      	movs	r3, #15
 800f826:	18fb      	adds	r3, r7, r3
 800f828:	781b      	ldrb	r3, [r3, #0]
}
 800f82a:	0018      	movs	r0, r3
 800f82c:	46bd      	mov	sp, r7
 800f82e:	b004      	add	sp, #16
 800f830:	bd80      	pop	{r7, pc}
 800f832:	46c0      	nop			@ (mov r8, r8)
 800f834:	fffffeff 	.word	0xfffffeff

0800f838 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f854:	221c      	movs	r2, #28
 800f856:	4013      	ands	r3, r2
 800f858:	2204      	movs	r2, #4
 800f85a:	409a      	lsls	r2, r3
 800f85c:	0013      	movs	r3, r2
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	4013      	ands	r3, r2
 800f862:	d026      	beq.n	800f8b2 <HAL_DMA_IRQHandler+0x7a>
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	2204      	movs	r2, #4
 800f868:	4013      	ands	r3, r2
 800f86a:	d022      	beq.n	800f8b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2220      	movs	r2, #32
 800f874:	4013      	ands	r3, r2
 800f876:	d107      	bne.n	800f888 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2104      	movs	r1, #4
 800f884:	438a      	bics	r2, r1
 800f886:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f88c:	221c      	movs	r2, #28
 800f88e:	401a      	ands	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f894:	2104      	movs	r1, #4
 800f896:	4091      	lsls	r1, r2
 800f898:	000a      	movs	r2, r1
 800f89a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d100      	bne.n	800f8a6 <HAL_DMA_IRQHandler+0x6e>
 800f8a4:	e080      	b.n	800f9a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	0010      	movs	r0, r2
 800f8ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800f8b0:	e07a      	b.n	800f9a8 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8b6:	221c      	movs	r2, #28
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	2202      	movs	r2, #2
 800f8bc:	409a      	lsls	r2, r3
 800f8be:	0013      	movs	r3, r2
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	4013      	ands	r3, r2
 800f8c4:	d03c      	beq.n	800f940 <HAL_DMA_IRQHandler+0x108>
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2202      	movs	r2, #2
 800f8ca:	4013      	ands	r3, r2
 800f8cc:	d038      	beq.n	800f940 <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2220      	movs	r2, #32
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	d10b      	bne.n	800f8f2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	210a      	movs	r1, #10
 800f8e6:	438a      	bics	r2, r1
 800f8e8:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2225      	movs	r2, #37	@ 0x25
 800f8ee:	2101      	movs	r1, #1
 800f8f0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	001a      	movs	r2, r3
 800f8f8:	4b2e      	ldr	r3, [pc, #184]	@ (800f9b4 <HAL_DMA_IRQHandler+0x17c>)
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d909      	bls.n	800f912 <HAL_DMA_IRQHandler+0xda>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f902:	221c      	movs	r2, #28
 800f904:	401a      	ands	r2, r3
 800f906:	4b2c      	ldr	r3, [pc, #176]	@ (800f9b8 <HAL_DMA_IRQHandler+0x180>)
 800f908:	2102      	movs	r1, #2
 800f90a:	4091      	lsls	r1, r2
 800f90c:	000a      	movs	r2, r1
 800f90e:	605a      	str	r2, [r3, #4]
 800f910:	e008      	b.n	800f924 <HAL_DMA_IRQHandler+0xec>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f916:	221c      	movs	r2, #28
 800f918:	401a      	ands	r2, r3
 800f91a:	4b28      	ldr	r3, [pc, #160]	@ (800f9bc <HAL_DMA_IRQHandler+0x184>)
 800f91c:	2102      	movs	r1, #2
 800f91e:	4091      	lsls	r1, r2
 800f920:	000a      	movs	r2, r1
 800f922:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2224      	movs	r2, #36	@ 0x24
 800f928:	2100      	movs	r1, #0
 800f92a:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f930:	2b00      	cmp	r3, #0
 800f932:	d039      	beq.n	800f9a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	0010      	movs	r0, r2
 800f93c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800f93e:	e033      	b.n	800f9a8 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f944:	221c      	movs	r2, #28
 800f946:	4013      	ands	r3, r2
 800f948:	2208      	movs	r2, #8
 800f94a:	409a      	lsls	r2, r3
 800f94c:	0013      	movs	r3, r2
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	4013      	ands	r3, r2
 800f952:	d02a      	beq.n	800f9aa <HAL_DMA_IRQHandler+0x172>
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	2208      	movs	r2, #8
 800f958:	4013      	ands	r3, r2
 800f95a:	d026      	beq.n	800f9aa <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	210e      	movs	r1, #14
 800f968:	438a      	bics	r2, r1
 800f96a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f970:	221c      	movs	r2, #28
 800f972:	401a      	ands	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f978:	2101      	movs	r1, #1
 800f97a:	4091      	lsls	r1, r2
 800f97c:	000a      	movs	r2, r1
 800f97e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2225      	movs	r2, #37	@ 0x25
 800f98a:	2101      	movs	r1, #1
 800f98c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2224      	movs	r2, #36	@ 0x24
 800f992:	2100      	movs	r1, #0
 800f994:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d005      	beq.n	800f9aa <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	0010      	movs	r0, r2
 800f9a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f9a8:	46c0      	nop			@ (mov r8, r8)
 800f9aa:	46c0      	nop			@ (mov r8, r8)
}
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	b004      	add	sp, #16
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	46c0      	nop			@ (mov r8, r8)
 800f9b4:	40020080 	.word	0x40020080
 800f9b8:	40020400 	.word	0x40020400
 800f9bc:	40020000 	.word	0x40020000

0800f9c0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2225      	movs	r2, #37	@ 0x25
 800f9cc:	5c9b      	ldrb	r3, [r3, r2]
 800f9ce:	b2db      	uxtb	r3, r3
}
 800f9d0:	0018      	movs	r0, r3
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	b002      	add	sp, #8
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800f9e4:	0018      	movs	r0, r3
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	b002      	add	sp, #8
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
 800f9f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800fa02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d004      	beq.n	800fa16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800fa14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa1a:	221c      	movs	r2, #28
 800fa1c:	401a      	ands	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa22:	2101      	movs	r1, #1
 800fa24:	4091      	lsls	r1, r2
 800fa26:	000a      	movs	r2, r1
 800fa28:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	683a      	ldr	r2, [r7, #0]
 800fa30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	2b10      	cmp	r3, #16
 800fa38:	d108      	bne.n	800fa4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	68ba      	ldr	r2, [r7, #8]
 800fa48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fa4a:	e007      	b.n	800fa5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68ba      	ldr	r2, [r7, #8]
 800fa52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	60da      	str	r2, [r3, #12]
}
 800fa5c:	46c0      	nop			@ (mov r8, r8)
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	b004      	add	sp, #16
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	001a      	movs	r2, r3
 800fa72:	4b1d      	ldr	r3, [pc, #116]	@ (800fae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d814      	bhi.n	800faa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa7c:	089b      	lsrs	r3, r3, #2
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	4a1a      	ldr	r2, [pc, #104]	@ (800faec <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800fa82:	189a      	adds	r2, r3, r2
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	001a      	movs	r2, r3
 800fa8e:	23ff      	movs	r3, #255	@ 0xff
 800fa90:	4013      	ands	r3, r2
 800fa92:	3b08      	subs	r3, #8
 800fa94:	2114      	movs	r1, #20
 800fa96:	0018      	movs	r0, r3
 800fa98:	f7f0 fb3e 	bl	8000118 <__udivsi3>
 800fa9c:	0003      	movs	r3, r0
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	e014      	b.n	800facc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faa6:	089b      	lsrs	r3, r3, #2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4a11      	ldr	r2, [pc, #68]	@ (800faf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800faac:	189a      	adds	r2, r3, r2
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	001a      	movs	r2, r3
 800fab8:	23ff      	movs	r3, #255	@ 0xff
 800faba:	4013      	ands	r3, r2
 800fabc:	3b08      	subs	r3, #8
 800fabe:	2114      	movs	r1, #20
 800fac0:	0018      	movs	r0, r3
 800fac2:	f7f0 fb29 	bl	8000118 <__udivsi3>
 800fac6:	0003      	movs	r3, r0
 800fac8:	3307      	adds	r3, #7
 800faca:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4a09      	ldr	r2, [pc, #36]	@ (800faf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800fad0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	221f      	movs	r2, #31
 800fad6:	4013      	ands	r3, r2
 800fad8:	2201      	movs	r2, #1
 800fada:	409a      	lsls	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800fae0:	46c0      	nop			@ (mov r8, r8)
 800fae2:	46bd      	mov	sp, r7
 800fae4:	b004      	add	sp, #16
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	40020407 	.word	0x40020407
 800faec:	40020800 	.word	0x40020800
 800faf0:	4002081c 	.word	0x4002081c
 800faf4:	40020880 	.word	0x40020880

0800faf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	22ff      	movs	r2, #255	@ 0xff
 800fb06:	4013      	ands	r3, r2
 800fb08:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	4a0a      	ldr	r2, [pc, #40]	@ (800fb38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800fb0e:	4694      	mov	ip, r2
 800fb10:	4463      	add	r3, ip
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	001a      	movs	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4a07      	ldr	r2, [pc, #28]	@ (800fb3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800fb1e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3b01      	subs	r3, #1
 800fb24:	2203      	movs	r2, #3
 800fb26:	4013      	ands	r3, r2
 800fb28:	2201      	movs	r2, #1
 800fb2a:	409a      	lsls	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800fb30:	46c0      	nop			@ (mov r8, r8)
 800fb32:	46bd      	mov	sp, r7
 800fb34:	b004      	add	sp, #16
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	1000823f 	.word	0x1000823f
 800fb3c:	40020940 	.word	0x40020940

0800fb40 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800fb40:	b5b0      	push	{r4, r5, r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	603a      	str	r2, [r7, #0]
 800fb4c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fb4e:	4b21      	ldr	r3, [pc, #132]	@ (800fbd4 <HAL_FLASH_Program+0x94>)
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d101      	bne.n	800fb5a <HAL_FLASH_Program+0x1a>
 800fb56:	2302      	movs	r3, #2
 800fb58:	e038      	b.n	800fbcc <HAL_FLASH_Program+0x8c>
 800fb5a:	4b1e      	ldr	r3, [pc, #120]	@ (800fbd4 <HAL_FLASH_Program+0x94>)
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fb60:	4b1c      	ldr	r3, [pc, #112]	@ (800fbd4 <HAL_FLASH_Program+0x94>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fb66:	2517      	movs	r5, #23
 800fb68:	197c      	adds	r4, r7, r5
 800fb6a:	23fa      	movs	r3, #250	@ 0xfa
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	0018      	movs	r0, r3
 800fb70:	f000 f8ba 	bl	800fce8 <FLASH_WaitForLastOperation>
 800fb74:	0003      	movs	r3, r0
 800fb76:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800fb78:	197b      	adds	r3, r7, r5
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d11f      	bne.n	800fbc0 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d106      	bne.n	800fb94 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800fb86:	683a      	ldr	r2, [r7, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68b9      	ldr	r1, [r7, #8]
 800fb8c:	0008      	movs	r0, r1
 800fb8e:	f000 f8f9 	bl	800fd84 <FLASH_Program_DoubleWord>
 800fb92:	e005      	b.n	800fba0 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800fb94:	683a      	ldr	r2, [r7, #0]
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	0011      	movs	r1, r2
 800fb9a:	0018      	movs	r0, r3
 800fb9c:	f008 f86c 	bl	8017c78 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fba0:	2317      	movs	r3, #23
 800fba2:	18fc      	adds	r4, r7, r3
 800fba4:	23fa      	movs	r3, #250	@ 0xfa
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	0018      	movs	r0, r3
 800fbaa:	f000 f89d 	bl	800fce8 <FLASH_WaitForLastOperation>
 800fbae:	0003      	movs	r3, r0
 800fbb0:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800fbb2:	4b09      	ldr	r3, [pc, #36]	@ (800fbd8 <HAL_FLASH_Program+0x98>)
 800fbb4:	695a      	ldr	r2, [r3, #20]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	43d9      	mvns	r1, r3
 800fbba:	4b07      	ldr	r3, [pc, #28]	@ (800fbd8 <HAL_FLASH_Program+0x98>)
 800fbbc:	400a      	ands	r2, r1
 800fbbe:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fbc0:	4b04      	ldr	r3, [pc, #16]	@ (800fbd4 <HAL_FLASH_Program+0x94>)
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800fbc6:	2317      	movs	r3, #23
 800fbc8:	18fb      	adds	r3, r7, r3
 800fbca:	781b      	ldrb	r3, [r3, #0]
}
 800fbcc:	0018      	movs	r0, r3
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	b006      	add	sp, #24
 800fbd2:	bdb0      	pop	{r4, r5, r7, pc}
 800fbd4:	20001080 	.word	0x20001080
 800fbd8:	40022000 	.word	0x40022000

0800fbdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800fbe2:	1dfb      	adds	r3, r7, #7
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800fbe8:	4b0b      	ldr	r3, [pc, #44]	@ (800fc18 <HAL_FLASH_Unlock+0x3c>)
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	da0c      	bge.n	800fc0a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fbf0:	4b09      	ldr	r3, [pc, #36]	@ (800fc18 <HAL_FLASH_Unlock+0x3c>)
 800fbf2:	4a0a      	ldr	r2, [pc, #40]	@ (800fc1c <HAL_FLASH_Unlock+0x40>)
 800fbf4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fbf6:	4b08      	ldr	r3, [pc, #32]	@ (800fc18 <HAL_FLASH_Unlock+0x3c>)
 800fbf8:	4a09      	ldr	r2, [pc, #36]	@ (800fc20 <HAL_FLASH_Unlock+0x44>)
 800fbfa:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800fbfc:	4b06      	ldr	r3, [pc, #24]	@ (800fc18 <HAL_FLASH_Unlock+0x3c>)
 800fbfe:	695b      	ldr	r3, [r3, #20]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	da02      	bge.n	800fc0a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800fc04:	1dfb      	adds	r3, r7, #7
 800fc06:	2201      	movs	r2, #1
 800fc08:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800fc0a:	1dfb      	adds	r3, r7, #7
 800fc0c:	781b      	ldrb	r3, [r3, #0]
}
 800fc0e:	0018      	movs	r0, r3
 800fc10:	46bd      	mov	sp, r7
 800fc12:	b002      	add	sp, #8
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	46c0      	nop			@ (mov r8, r8)
 800fc18:	40022000 	.word	0x40022000
 800fc1c:	45670123 	.word	0x45670123
 800fc20:	cdef89ab 	.word	0xcdef89ab

0800fc24 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800fc2a:	1dfb      	adds	r3, r7, #7
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800fc30:	4b09      	ldr	r3, [pc, #36]	@ (800fc58 <HAL_FLASH_Lock+0x34>)
 800fc32:	695a      	ldr	r2, [r3, #20]
 800fc34:	4b08      	ldr	r3, [pc, #32]	@ (800fc58 <HAL_FLASH_Lock+0x34>)
 800fc36:	2180      	movs	r1, #128	@ 0x80
 800fc38:	0609      	lsls	r1, r1, #24
 800fc3a:	430a      	orrs	r2, r1
 800fc3c:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800fc3e:	4b06      	ldr	r3, [pc, #24]	@ (800fc58 <HAL_FLASH_Lock+0x34>)
 800fc40:	695b      	ldr	r3, [r3, #20]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	da02      	bge.n	800fc4c <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800fc46:	1dfb      	adds	r3, r7, #7
 800fc48:	2200      	movs	r2, #0
 800fc4a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800fc4c:	1dfb      	adds	r3, r7, #7
 800fc4e:	781b      	ldrb	r3, [r3, #0]
}
 800fc50:	0018      	movs	r0, r3
 800fc52:	46bd      	mov	sp, r7
 800fc54:	b002      	add	sp, #8
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	40022000 	.word	0x40022000

0800fc5c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800fc62:	1dfb      	adds	r3, r7, #7
 800fc64:	2201      	movs	r2, #1
 800fc66:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800fc68:	4b0d      	ldr	r3, [pc, #52]	@ (800fca0 <HAL_FLASH_OB_Unlock+0x44>)
 800fc6a:	695a      	ldr	r2, [r3, #20]
 800fc6c:	2380      	movs	r3, #128	@ 0x80
 800fc6e:	05db      	lsls	r3, r3, #23
 800fc70:	4013      	ands	r3, r2
 800fc72:	d00e      	beq.n	800fc92 <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800fc74:	4b0a      	ldr	r3, [pc, #40]	@ (800fca0 <HAL_FLASH_OB_Unlock+0x44>)
 800fc76:	4a0b      	ldr	r2, [pc, #44]	@ (800fca4 <HAL_FLASH_OB_Unlock+0x48>)
 800fc78:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800fc7a:	4b09      	ldr	r3, [pc, #36]	@ (800fca0 <HAL_FLASH_OB_Unlock+0x44>)
 800fc7c:	4a0a      	ldr	r2, [pc, #40]	@ (800fca8 <HAL_FLASH_OB_Unlock+0x4c>)
 800fc7e:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 800fc80:	4b07      	ldr	r3, [pc, #28]	@ (800fca0 <HAL_FLASH_OB_Unlock+0x44>)
 800fc82:	695a      	ldr	r2, [r3, #20]
 800fc84:	2380      	movs	r3, #128	@ 0x80
 800fc86:	05db      	lsls	r3, r3, #23
 800fc88:	4013      	ands	r3, r2
 800fc8a:	d102      	bne.n	800fc92 <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 800fc8c:	1dfb      	adds	r3, r7, #7
 800fc8e:	2200      	movs	r2, #0
 800fc90:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800fc92:	1dfb      	adds	r3, r7, #7
 800fc94:	781b      	ldrb	r3, [r3, #0]
}
 800fc96:	0018      	movs	r0, r3
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	b002      	add	sp, #8
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	46c0      	nop			@ (mov r8, r8)
 800fca0:	40022000 	.word	0x40022000
 800fca4:	08192a3b 	.word	0x08192a3b
 800fca8:	4c5d6e7f 	.word	0x4c5d6e7f

0800fcac <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800fcb2:	1dfb      	adds	r3, r7, #7
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800fcb8:	4b0a      	ldr	r3, [pc, #40]	@ (800fce4 <HAL_FLASH_OB_Lock+0x38>)
 800fcba:	695a      	ldr	r2, [r3, #20]
 800fcbc:	4b09      	ldr	r3, [pc, #36]	@ (800fce4 <HAL_FLASH_OB_Lock+0x38>)
 800fcbe:	2180      	movs	r1, #128	@ 0x80
 800fcc0:	05c9      	lsls	r1, r1, #23
 800fcc2:	430a      	orrs	r2, r1
 800fcc4:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 800fcc6:	4b07      	ldr	r3, [pc, #28]	@ (800fce4 <HAL_FLASH_OB_Lock+0x38>)
 800fcc8:	695a      	ldr	r2, [r3, #20]
 800fcca:	2380      	movs	r3, #128	@ 0x80
 800fccc:	05db      	lsls	r3, r3, #23
 800fcce:	4013      	ands	r3, r2
 800fcd0:	d002      	beq.n	800fcd8 <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 800fcd2:	1dfb      	adds	r3, r7, #7
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800fcd8:	1dfb      	adds	r3, r7, #7
 800fcda:	781b      	ldrb	r3, [r3, #0]
}
 800fcdc:	0018      	movs	r0, r3
 800fcde:	46bd      	mov	sp, r7
 800fce0:	b002      	add	sp, #8
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	40022000 	.word	0x40022000

0800fce8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800fcf0:	f7fe f888 	bl	800de04 <HAL_GetTick>
 800fcf4:	0002      	movs	r2, r0
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	189b      	adds	r3, r3, r2
 800fcfa:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 800fcfc:	2380      	movs	r3, #128	@ 0x80
 800fcfe:	025b      	lsls	r3, r3, #9
 800fd00:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 800fd02:	e007      	b.n	800fd14 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 800fd04:	f7fe f87e 	bl	800de04 <HAL_GetTick>
 800fd08:	0002      	movs	r2, r0
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d801      	bhi.n	800fd14 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 800fd10:	2303      	movs	r3, #3
 800fd12:	e02a      	b.n	800fd6a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 800fd14:	4b17      	ldr	r3, [pc, #92]	@ (800fd74 <FLASH_WaitForLastOperation+0x8c>)
 800fd16:	691b      	ldr	r3, [r3, #16]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	d1f2      	bne.n	800fd04 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800fd1e:	4b15      	ldr	r3, [pc, #84]	@ (800fd74 <FLASH_WaitForLastOperation+0x8c>)
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	4a15      	ldr	r2, [pc, #84]	@ (800fd78 <FLASH_WaitForLastOperation+0x90>)
 800fd24:	4013      	ands	r3, r2
 800fd26:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800fd28:	4b12      	ldr	r3, [pc, #72]	@ (800fd74 <FLASH_WaitForLastOperation+0x8c>)
 800fd2a:	4a14      	ldr	r2, [pc, #80]	@ (800fd7c <FLASH_WaitForLastOperation+0x94>)
 800fd2c:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d004      	beq.n	800fd3e <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800fd34:	4b12      	ldr	r3, [pc, #72]	@ (800fd80 <FLASH_WaitForLastOperation+0x98>)
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e015      	b.n	800fd6a <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800fd3e:	f7fe f861 	bl	800de04 <HAL_GetTick>
 800fd42:	0002      	movs	r2, r0
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	189b      	adds	r3, r3, r2
 800fd48:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800fd4a:	e007      	b.n	800fd5c <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 800fd4c:	f7fe f85a 	bl	800de04 <HAL_GetTick>
 800fd50:	0002      	movs	r2, r0
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d801      	bhi.n	800fd5c <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800fd58:	2303      	movs	r3, #3
 800fd5a:	e006      	b.n	800fd6a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800fd5c:	4b05      	ldr	r3, [pc, #20]	@ (800fd74 <FLASH_WaitForLastOperation+0x8c>)
 800fd5e:	691a      	ldr	r2, [r3, #16]
 800fd60:	2380      	movs	r3, #128	@ 0x80
 800fd62:	02db      	lsls	r3, r3, #11
 800fd64:	4013      	ands	r3, r2
 800fd66:	d1f1      	bne.n	800fd4c <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	0018      	movs	r0, r3
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	b004      	add	sp, #16
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	46c0      	nop			@ (mov r8, r8)
 800fd74:	40022000 	.word	0x40022000
 800fd78:	000083fa 	.word	0x000083fa
 800fd7c:	000083fb 	.word	0x000083fb
 800fd80:	20001080 	.word	0x20001080

0800fd84 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800fd84:	b5b0      	push	{r4, r5, r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	603a      	str	r2, [r7, #0]
 800fd8e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800fd90:	4b0b      	ldr	r3, [pc, #44]	@ (800fdc0 <FLASH_Program_DoubleWord+0x3c>)
 800fd92:	695a      	ldr	r2, [r3, #20]
 800fd94:	4b0a      	ldr	r3, [pc, #40]	@ (800fdc0 <FLASH_Program_DoubleWord+0x3c>)
 800fd96:	2101      	movs	r1, #1
 800fd98:	430a      	orrs	r2, r1
 800fd9a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	683a      	ldr	r2, [r7, #0]
 800fda0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800fda2:	f3bf 8f6f 	isb	sy
}
 800fda6:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	001c      	movs	r4, r3
 800fdac:	2300      	movs	r3, #0
 800fdae:	001d      	movs	r5, r3
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	0022      	movs	r2, r4
 800fdb6:	601a      	str	r2, [r3, #0]
}
 800fdb8:	46c0      	nop			@ (mov r8, r8)
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	b004      	add	sp, #16
 800fdbe:	bdb0      	pop	{r4, r5, r7, pc}
 800fdc0:	40022000 	.word	0x40022000

0800fdc4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800fdc4:	b5b0      	push	{r4, r5, r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fdce:	4b32      	ldr	r3, [pc, #200]	@ (800fe98 <HAL_FLASHEx_Erase+0xd4>)
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d101      	bne.n	800fdda <HAL_FLASHEx_Erase+0x16>
 800fdd6:	2302      	movs	r3, #2
 800fdd8:	e059      	b.n	800fe8e <HAL_FLASHEx_Erase+0xca>
 800fdda:	4b2f      	ldr	r3, [pc, #188]	@ (800fe98 <HAL_FLASHEx_Erase+0xd4>)
 800fddc:	2201      	movs	r2, #1
 800fdde:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fde0:	4b2d      	ldr	r3, [pc, #180]	@ (800fe98 <HAL_FLASHEx_Erase+0xd4>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fde6:	250f      	movs	r5, #15
 800fde8:	197c      	adds	r4, r7, r5
 800fdea:	23fa      	movs	r3, #250	@ 0xfa
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	0018      	movs	r0, r3
 800fdf0:	f7ff ff7a 	bl	800fce8 <FLASH_WaitForLastOperation>
 800fdf4:	0003      	movs	r3, r0
 800fdf6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800fdf8:	002c      	movs	r4, r5
 800fdfa:	193b      	adds	r3, r7, r4
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d13f      	bne.n	800fe82 <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2201      	movs	r2, #1
 800fe06:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b04      	cmp	r3, #4
 800fe0e:	d10a      	bne.n	800fe26 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 800fe10:	f000 f8ea 	bl	800ffe8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe14:	193c      	adds	r4, r7, r4
 800fe16:	23fa      	movs	r3, #250	@ 0xfa
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	0018      	movs	r0, r3
 800fe1c:	f7ff ff64 	bl	800fce8 <FLASH_WaitForLastOperation>
 800fe20:	0003      	movs	r3, r0
 800fe22:	7023      	strb	r3, [r4, #0]
 800fe24:	e02d      	b.n	800fe82 <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	4252      	negs	r2, r2
 800fe2c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	689b      	ldr	r3, [r3, #8]
 800fe32:	60bb      	str	r3, [r7, #8]
 800fe34:	e017      	b.n	800fe66 <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	0018      	movs	r0, r3
 800fe3a:	f000 f8e5 	bl	8010008 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe3e:	250f      	movs	r5, #15
 800fe40:	197c      	adds	r4, r7, r5
 800fe42:	23fa      	movs	r3, #250	@ 0xfa
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	0018      	movs	r0, r3
 800fe48:	f7ff ff4e 	bl	800fce8 <FLASH_WaitForLastOperation>
 800fe4c:	0003      	movs	r3, r0
 800fe4e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800fe50:	197b      	adds	r3, r7, r5
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d003      	beq.n	800fe60 <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	601a      	str	r2, [r3, #0]
          break;
 800fe5e:	e00a      	b.n	800fe76 <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	3301      	adds	r3, #1
 800fe64:	60bb      	str	r3, [r7, #8]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	689a      	ldr	r2, [r3, #8]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	18d3      	adds	r3, r2, r3
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d3df      	bcc.n	800fe36 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800fe76:	4b09      	ldr	r3, [pc, #36]	@ (800fe9c <HAL_FLASHEx_Erase+0xd8>)
 800fe78:	695a      	ldr	r2, [r3, #20]
 800fe7a:	4b08      	ldr	r3, [pc, #32]	@ (800fe9c <HAL_FLASHEx_Erase+0xd8>)
 800fe7c:	2102      	movs	r1, #2
 800fe7e:	438a      	bics	r2, r1
 800fe80:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fe82:	4b05      	ldr	r3, [pc, #20]	@ (800fe98 <HAL_FLASHEx_Erase+0xd4>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800fe88:	230f      	movs	r3, #15
 800fe8a:	18fb      	adds	r3, r7, r3
 800fe8c:	781b      	ldrb	r3, [r3, #0]
}
 800fe8e:	0018      	movs	r0, r3
 800fe90:	46bd      	mov	sp, r7
 800fe92:	b004      	add	sp, #16
 800fe94:	bdb0      	pop	{r4, r5, r7, pc}
 800fe96:	46c0      	nop			@ (mov r8, r8)
 800fe98:	20001080 	.word	0x20001080
 800fe9c:	40022000 	.word	0x40022000

0800fea0 <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800fea0:	b5b0      	push	{r4, r5, r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af02      	add	r7, sp, #8
 800fea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fea8:	4b4c      	ldr	r3, [pc, #304]	@ (800ffdc <HAL_FLASHEx_OBProgram+0x13c>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d101      	bne.n	800feb4 <HAL_FLASHEx_OBProgram+0x14>
 800feb0:	2302      	movs	r3, #2
 800feb2:	e08f      	b.n	800ffd4 <HAL_FLASHEx_OBProgram+0x134>
 800feb4:	4b49      	ldr	r3, [pc, #292]	@ (800ffdc <HAL_FLASHEx_OBProgram+0x13c>)
 800feb6:	2201      	movs	r2, #1
 800feb8:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800feba:	4b48      	ldr	r3, [pc, #288]	@ (800ffdc <HAL_FLASHEx_OBProgram+0x13c>)
 800febc:	2200      	movs	r2, #0
 800febe:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2201      	movs	r2, #1
 800fec6:	4013      	ands	r3, r2
 800fec8:	d008      	beq.n	800fedc <HAL_FLASHEx_OBProgram+0x3c>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6858      	ldr	r0, [r3, #4]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6899      	ldr	r1, [r3, #8]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	001a      	movs	r2, r3
 800fed8:	f000 f8b2 	bl	8010040 <FLASH_OB_WRPConfig>
  }

  /* Option register */
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2206      	movs	r2, #6
 800fee2:	4013      	ands	r3, r2
 800fee4:	2b06      	cmp	r3, #6
 800fee6:	d109      	bne.n	800fefc <HAL_FLASHEx_OBProgram+0x5c>
  {
    /* Fully modify OPTR register with RDP & user data */
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, pOBInit->RDPLevel);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6958      	ldr	r0, [r3, #20]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6999      	ldr	r1, [r3, #24]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	001a      	movs	r2, r3
 800fef6:	f000 f8bf 	bl	8010078 <FLASH_OB_OptrConfig>
 800fefa:	e021      	b.n	800ff40 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2202      	movs	r2, #2
 800ff02:	4013      	ands	r3, r2
 800ff04:	d00b      	beq.n	800ff1e <HAL_FLASHEx_OBProgram+0x7e>
  {
    /* Only modify RDP so get current user data */
    optr = FLASH_OB_GetUser();
 800ff06:	f000 f8ed 	bl	80100e4 <FLASH_OB_GetUser>
 800ff0a:	0003      	movs	r3, r0
 800ff0c:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	691a      	ldr	r2, [r3, #16]
 800ff12:	68b9      	ldr	r1, [r7, #8]
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	0018      	movs	r0, r3
 800ff18:	f000 f8ae 	bl	8010078 <FLASH_OB_OptrConfig>
 800ff1c:	e010      	b.n	800ff40 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2204      	movs	r2, #4
 800ff24:	4013      	ands	r3, r2
 800ff26:	d00b      	beq.n	800ff40 <HAL_FLASHEx_OBProgram+0xa0>
  {
    /* Only modify user so get current RDP level */
    optr = FLASH_OB_GetRDP();
 800ff28:	f000 f8c4 	bl	80100b4 <FLASH_OB_GetRDP>
 800ff2c:	0003      	movs	r3, r0
 800ff2e:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, optr);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6958      	ldr	r0, [r3, #20]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	699b      	ldr	r3, [r3, #24]
 800ff38:	68ba      	ldr	r2, [r7, #8]
 800ff3a:	0019      	movs	r1, r3
 800ff3c:	f000 f89c 	bl	8010078 <FLASH_OB_OptrConfig>
  {
    /* nothing to do */
  }

  /* HDP Area Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_HDP) != 0x00U)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2208      	movs	r2, #8
 800ff46:	4013      	ands	r3, r2
 800ff48:	d008      	beq.n	800ff5c <HAL_FLASHEx_OBProgram+0xbc>
  {
    /* Configure the HDP area protection */
    FLASH_OB_HDPConfig(pOBInit->BootLock, pOBInit->HDPEndPage, pOBInit->HDPState);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff56:	001a      	movs	r2, r3
 800ff58:	f000 f8d6 	bl	8010108 <FLASH_OB_HDPConfig>
  }

  /* RDP Keys OEM1/2 Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDPKEY) != 0x00U)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2210      	movs	r2, #16
 800ff62:	4013      	ands	r3, r2
 800ff64:	d00d      	beq.n	800ff82 <HAL_FLASHEx_OBProgram+0xe2>
  {
    /* Configure the RDP keys */
    FLASH_OB_RDPKeyConfig(pOBInit->RDPKeyType, pOBInit->RDPKey1, pOBInit->RDPKey2, pOBInit->RDPKey3, pOBInit->RDPKey4);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	69d8      	ldr	r0, [r3, #28]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a19      	ldr	r1, [r3, #32]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	0023      	movs	r3, r4
 800ff7e:	f000 f8e3 	bl	8010148 <FLASH_OB_RDPKeyConfig>
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ff82:	250f      	movs	r5, #15
 800ff84:	197c      	adds	r4, r7, r5
 800ff86:	23fa      	movs	r3, #250	@ 0xfa
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	0018      	movs	r0, r3
 800ff8c:	f7ff feac 	bl	800fce8 <FLASH_WaitForLastOperation>
 800ff90:	0003      	movs	r3, r0
 800ff92:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800ff94:	0028      	movs	r0, r5
 800ff96:	183b      	adds	r3, r7, r0
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d114      	bne.n	800ffc8 <HAL_FLASHEx_OBProgram+0x128>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ff9e:	4b10      	ldr	r3, [pc, #64]	@ (800ffe0 <HAL_FLASHEx_OBProgram+0x140>)
 800ffa0:	695a      	ldr	r2, [r3, #20]
 800ffa2:	4b0f      	ldr	r3, [pc, #60]	@ (800ffe0 <HAL_FLASHEx_OBProgram+0x140>)
 800ffa4:	2180      	movs	r1, #128	@ 0x80
 800ffa6:	0289      	lsls	r1, r1, #10
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	615a      	str	r2, [r3, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ffac:	183c      	adds	r4, r7, r0
 800ffae:	23fa      	movs	r3, #250	@ 0xfa
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	0018      	movs	r0, r3
 800ffb4:	f7ff fe98 	bl	800fce8 <FLASH_WaitForLastOperation>
 800ffb8:	0003      	movs	r3, r0
 800ffba:	7023      	strb	r3, [r4, #0]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ffbc:	4b08      	ldr	r3, [pc, #32]	@ (800ffe0 <HAL_FLASHEx_OBProgram+0x140>)
 800ffbe:	695a      	ldr	r2, [r3, #20]
 800ffc0:	4b07      	ldr	r3, [pc, #28]	@ (800ffe0 <HAL_FLASHEx_OBProgram+0x140>)
 800ffc2:	4908      	ldr	r1, [pc, #32]	@ (800ffe4 <HAL_FLASHEx_OBProgram+0x144>)
 800ffc4:	400a      	ands	r2, r1
 800ffc6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ffc8:	4b04      	ldr	r3, [pc, #16]	@ (800ffdc <HAL_FLASHEx_OBProgram+0x13c>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800ffce:	230f      	movs	r3, #15
 800ffd0:	18fb      	adds	r3, r7, r3
 800ffd2:	781b      	ldrb	r3, [r3, #0]
}
 800ffd4:	0018      	movs	r0, r3
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	b004      	add	sp, #16
 800ffda:	bdb0      	pop	{r4, r5, r7, pc}
 800ffdc:	20001080 	.word	0x20001080
 800ffe0:	40022000 	.word	0x40022000
 800ffe4:	fffdffff 	.word	0xfffdffff

0800ffe8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 800ffec:	4b04      	ldr	r3, [pc, #16]	@ (8010000 <FLASH_MassErase+0x18>)
 800ffee:	695a      	ldr	r2, [r3, #20]
 800fff0:	4b03      	ldr	r3, [pc, #12]	@ (8010000 <FLASH_MassErase+0x18>)
 800fff2:	4904      	ldr	r1, [pc, #16]	@ (8010004 <FLASH_MassErase+0x1c>)
 800fff4:	430a      	orrs	r2, r1
 800fff6:	615a      	str	r2, [r3, #20]
}
 800fff8:	46c0      	nop			@ (mov r8, r8)
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	46c0      	nop			@ (mov r8, r8)
 8010000:	40022000 	.word	0x40022000
 8010004:	00010004 	.word	0x00010004

08010008 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8010010:	4b08      	ldr	r3, [pc, #32]	@ (8010034 <FLASH_PageErase+0x2c>)
 8010012:	695b      	ldr	r3, [r3, #20]
 8010014:	4a08      	ldr	r2, [pc, #32]	@ (8010038 <FLASH_PageErase+0x30>)
 8010016:	4013      	ands	r3, r2
 8010018:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	00da      	lsls	r2, r3, #3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	431a      	orrs	r2, r3
 8010022:	4b04      	ldr	r3, [pc, #16]	@ (8010034 <FLASH_PageErase+0x2c>)
 8010024:	4905      	ldr	r1, [pc, #20]	@ (801003c <FLASH_PageErase+0x34>)
 8010026:	430a      	orrs	r2, r1
 8010028:	615a      	str	r2, [r3, #20]
}
 801002a:	46c0      	nop			@ (mov r8, r8)
 801002c:	46bd      	mov	sp, r7
 801002e:	b004      	add	sp, #16
 8010030:	bd80      	pop	{r7, pc}
 8010032:	46c0      	nop			@ (mov r8, r8)
 8010034:	40022000 	.word	0x40022000
 8010038:	fffffc07 	.word	0xfffffc07
 801003c:	00010002 	.word	0x00010002

08010040 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset  Specifies the end page of the write protected area
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the Flash Bank - 1)
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d106      	bne.n	8010060 <FLASH_OB_WRPConfig+0x20>
  {
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	0419      	lsls	r1, r3, #16
 8010056:	4b07      	ldr	r3, [pc, #28]	@ (8010074 <FLASH_OB_WRPConfig+0x34>)
 8010058:	68ba      	ldr	r2, [r7, #8]
 801005a:	430a      	orrs	r2, r1
 801005c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
  }
}
 801005e:	e005      	b.n	801006c <FLASH_OB_WRPConfig+0x2c>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	0419      	lsls	r1, r3, #16
 8010064:	4b03      	ldr	r3, [pc, #12]	@ (8010074 <FLASH_OB_WRPConfig+0x34>)
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	430a      	orrs	r2, r1
 801006a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801006c:	46c0      	nop			@ (mov r8, r8)
 801006e:	46bd      	mov	sp, r7
 8010070:	b004      	add	sp, #16
 8010072:	bd80      	pop	{r7, pc}
 8010074:	40022000 	.word	0x40022000

08010078 <FLASH_OB_OptrConfig>:
  *           @arg @ref OB_RDP_LEVEL_1 Memory Read protection
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @retval None
  */
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b086      	sub	sp, #24
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 8010084:	4b0a      	ldr	r3, [pc, #40]	@ (80100b0 <FLASH_OB_OptrConfig+0x38>)
 8010086:	6a1b      	ldr	r3, [r3, #32]
 8010088:	617b      	str	r3, [r7, #20]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	22ff      	movs	r2, #255	@ 0xff
 801008e:	4313      	orrs	r3, r2
 8010090:	43da      	mvns	r2, r3
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	4013      	ands	r3, r2
 8010096:	617b      	str	r3, [r7, #20]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8010098:	697a      	ldr	r2, [r7, #20]
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	431a      	orrs	r2, r3
 801009e:	0011      	movs	r1, r2
 80100a0:	4b03      	ldr	r3, [pc, #12]	@ (80100b0 <FLASH_OB_OptrConfig+0x38>)
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	430a      	orrs	r2, r1
 80100a6:	621a      	str	r2, [r3, #32]
}
 80100a8:	46c0      	nop			@ (mov r8, r8)
 80100aa:	46bd      	mov	sp, r7
 80100ac:	b006      	add	sp, #24
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	40022000 	.word	0x40022000

080100b4 <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 80100ba:	4b09      	ldr	r3, [pc, #36]	@ (80100e0 <FLASH_OB_GetRDP+0x2c>)
 80100bc:	6a1b      	ldr	r3, [r3, #32]
 80100be:	22ff      	movs	r2, #255	@ 0xff
 80100c0:	4013      	ands	r3, r2
 80100c2:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2baa      	cmp	r3, #170	@ 0xaa
 80100c8:	d004      	beq.n	80100d4 <FLASH_OB_GetRDP+0x20>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2bcc      	cmp	r3, #204	@ 0xcc
 80100ce:	d001      	beq.n	80100d4 <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 80100d0:	23bb      	movs	r3, #187	@ 0xbb
 80100d2:	e000      	b.n	80100d6 <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 80100d4:	687b      	ldr	r3, [r7, #4]
  }
}
 80100d6:	0018      	movs	r0, r3
 80100d8:	46bd      	mov	sp, r7
 80100da:	b002      	add	sp, #8
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	46c0      	nop			@ (mov r8, r8)
 80100e0:	40022000 	.word	0x40022000

080100e4 <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_NBOOT1
  *           @arg @ref FLASH_OB_USER_NBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER
  */
static uint32_t FLASH_OB_GetUser(void)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 80100ea:	4b05      	ldr	r3, [pc, #20]	@ (8010100 <FLASH_OB_GetUser+0x1c>)
 80100ec:	6a1b      	ldr	r3, [r3, #32]
 80100ee:	4a05      	ldr	r2, [pc, #20]	@ (8010104 <FLASH_OB_GetUser+0x20>)
 80100f0:	4013      	ands	r3, r2
 80100f2:	607b      	str	r3, [r7, #4]
  return user;
 80100f4:	687b      	ldr	r3, [r7, #4]
}
 80100f6:	0018      	movs	r0, r3
 80100f8:	46bd      	mov	sp, r7
 80100fa:	b002      	add	sp, #8
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	46c0      	nop			@ (mov r8, r8)
 8010100:	40022000 	.word	0x40022000
 8010104:	3f4fff00 	.word	0x3f4fff00

08010108 <FLASH_OB_HDPConfig>:
  * @param   HDPEndPage specifies the end page of the hide protection area
  * @param   HDPEn     Enable and disable the HDP area
  * @retval None
  */
static void FLASH_OB_HDPConfig(uint32_t BootEntry, uint32_t HDPEndPage, uint32_t HDPEn)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b086      	sub	sp, #24
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootEntry));
  assert_param(IS_FLASH_PAGE(HDPEndPage));
  /* Set securable memory area configuration */
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_HDP1_PEND | FLASH_SECR_HDP1EN));
 8010114:	4a0a      	ldr	r2, [pc, #40]	@ (8010140 <FLASH_OB_HDPConfig+0x38>)
 8010116:	2380      	movs	r3, #128	@ 0x80
 8010118:	58d3      	ldr	r3, [r2, r3]
 801011a:	4a0a      	ldr	r2, [pc, #40]	@ (8010144 <FLASH_OB_HDPConfig+0x3c>)
 801011c:	4013      	ands	r3, r2
 801011e:	617b      	str	r3, [r7, #20]
  FLASH->SECR = (secmem | BootEntry | HDPEndPage | (HDPEn << FLASH_SECR_HDP1EN_Pos));
 8010120:	697a      	ldr	r2, [r7, #20]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	431a      	orrs	r2, r3
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	431a      	orrs	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	061b      	lsls	r3, r3, #24
 801012e:	4904      	ldr	r1, [pc, #16]	@ (8010140 <FLASH_OB_HDPConfig+0x38>)
 8010130:	4313      	orrs	r3, r2
 8010132:	2280      	movs	r2, #128	@ 0x80
 8010134:	508b      	str	r3, [r1, r2]
}
 8010136:	46c0      	nop			@ (mov r8, r8)
 8010138:	46bd      	mov	sp, r7
 801013a:	b006      	add	sp, #24
 801013c:	bd80      	pop	{r7, pc}
 801013e:	46c0      	nop			@ (mov r8, r8)
 8010140:	40022000 	.word	0x40022000
 8010144:	00feffc0 	.word	0x00feffc0

08010148 <FLASH_OB_RDPKeyConfig>:
  * @param  RDPKey3 specifies the RDP key 3.
  * @retval None
  */
static void FLASH_OB_RDPKeyConfig(uint32_t RDPKeyType, uint32_t RDPKey0, uint32_t RDPKey1,
                                  uint32_t RDPKey2, uint32_t RDPKey3)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
 8010154:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_RDP_KEY_TYPE(RDPKeyType));

  /* Configure the RDP OEM1/2 key */
  if (RDPKeyType == OB_RDP_KEY_OEM1)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2b01      	cmp	r3, #1
 801015a:	d110      	bne.n	801017e <FLASH_OB_RDPKeyConfig+0x36>
  {
    WRITE_REG(FLASH->OEM1KEYW0R, RDPKey0);
 801015c:	4913      	ldr	r1, [pc, #76]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 801015e:	2288      	movs	r2, #136	@ 0x88
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM1KEYW1R, RDPKey1);
 8010164:	4911      	ldr	r1, [pc, #68]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 8010166:	228c      	movs	r2, #140	@ 0x8c
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM1KEYW2R, RDPKey2);
 801016c:	490f      	ldr	r1, [pc, #60]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 801016e:	2290      	movs	r2, #144	@ 0x90
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM1KEYW3R, RDPKey3);
 8010174:	490d      	ldr	r1, [pc, #52]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 8010176:	2294      	movs	r2, #148	@ 0x94
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	508b      	str	r3, [r1, r2]
  }
  else
  {
    /* nothing to do */
  }
}
 801017c:	e012      	b.n	80101a4 <FLASH_OB_RDPKeyConfig+0x5c>
  else if (RDPKeyType == OB_RDP_KEY_OEM2)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2b02      	cmp	r3, #2
 8010182:	d10f      	bne.n	80101a4 <FLASH_OB_RDPKeyConfig+0x5c>
    WRITE_REG(FLASH->OEM2KEYW0R, RDPKey0);
 8010184:	4909      	ldr	r1, [pc, #36]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 8010186:	2298      	movs	r2, #152	@ 0x98
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM2KEYW1R, RDPKey1);
 801018c:	4907      	ldr	r1, [pc, #28]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 801018e:	229c      	movs	r2, #156	@ 0x9c
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM2KEYW2R, RDPKey2);
 8010194:	4905      	ldr	r1, [pc, #20]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 8010196:	22a0      	movs	r2, #160	@ 0xa0
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	508b      	str	r3, [r1, r2]
    WRITE_REG(FLASH->OEM2KEYW3R, RDPKey3);
 801019c:	4903      	ldr	r1, [pc, #12]	@ (80101ac <FLASH_OB_RDPKeyConfig+0x64>)
 801019e:	22a4      	movs	r2, #164	@ 0xa4
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	508b      	str	r3, [r1, r2]
}
 80101a4:	46c0      	nop			@ (mov r8, r8)
 80101a6:	46bd      	mov	sp, r7
 80101a8:	b004      	add	sp, #16
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	40022000 	.word	0x40022000

080101b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80101ba:	2300      	movs	r3, #0
 80101bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80101be:	e153      	b.n	8010468 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2101      	movs	r1, #1
 80101c6:	697a      	ldr	r2, [r7, #20]
 80101c8:	4091      	lsls	r1, r2
 80101ca:	000a      	movs	r2, r1
 80101cc:	4013      	ands	r3, r2
 80101ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d100      	bne.n	80101d8 <HAL_GPIO_Init+0x28>
 80101d6:	e144      	b.n	8010462 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	2203      	movs	r2, #3
 80101de:	4013      	ands	r3, r2
 80101e0:	2b01      	cmp	r3, #1
 80101e2:	d005      	beq.n	80101f0 <HAL_GPIO_Init+0x40>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	2203      	movs	r2, #3
 80101ea:	4013      	ands	r3, r2
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d130      	bne.n	8010252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	005b      	lsls	r3, r3, #1
 80101fa:	2203      	movs	r2, #3
 80101fc:	409a      	lsls	r2, r3
 80101fe:	0013      	movs	r3, r2
 8010200:	43da      	mvns	r2, r3
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	4013      	ands	r3, r2
 8010206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	68da      	ldr	r2, [r3, #12]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	409a      	lsls	r2, r3
 8010212:	0013      	movs	r3, r2
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	4313      	orrs	r3, r2
 8010218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010226:	2201      	movs	r2, #1
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	409a      	lsls	r2, r3
 801022c:	0013      	movs	r3, r2
 801022e:	43da      	mvns	r2, r3
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	4013      	ands	r3, r2
 8010234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	091b      	lsrs	r3, r3, #4
 801023c:	2201      	movs	r2, #1
 801023e:	401a      	ands	r2, r3
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	409a      	lsls	r2, r3
 8010244:	0013      	movs	r3, r2
 8010246:	693a      	ldr	r2, [r7, #16]
 8010248:	4313      	orrs	r3, r2
 801024a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	693a      	ldr	r2, [r7, #16]
 8010250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	2203      	movs	r2, #3
 8010258:	4013      	ands	r3, r2
 801025a:	2b03      	cmp	r3, #3
 801025c:	d017      	beq.n	801028e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	005b      	lsls	r3, r3, #1
 8010268:	2203      	movs	r2, #3
 801026a:	409a      	lsls	r2, r3
 801026c:	0013      	movs	r3, r2
 801026e:	43da      	mvns	r2, r3
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	4013      	ands	r3, r2
 8010274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	689a      	ldr	r2, [r3, #8]
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	409a      	lsls	r2, r3
 8010280:	0013      	movs	r3, r2
 8010282:	693a      	ldr	r2, [r7, #16]
 8010284:	4313      	orrs	r3, r2
 8010286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	2203      	movs	r2, #3
 8010294:	4013      	ands	r3, r2
 8010296:	2b02      	cmp	r3, #2
 8010298:	d123      	bne.n	80102e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	08da      	lsrs	r2, r3, #3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	3208      	adds	r2, #8
 80102a2:	0092      	lsls	r2, r2, #2
 80102a4:	58d3      	ldr	r3, [r2, r3]
 80102a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	2207      	movs	r2, #7
 80102ac:	4013      	ands	r3, r2
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	220f      	movs	r2, #15
 80102b2:	409a      	lsls	r2, r3
 80102b4:	0013      	movs	r3, r2
 80102b6:	43da      	mvns	r2, r3
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	4013      	ands	r3, r2
 80102bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	691a      	ldr	r2, [r3, #16]
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	2107      	movs	r1, #7
 80102c6:	400b      	ands	r3, r1
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	409a      	lsls	r2, r3
 80102cc:	0013      	movs	r3, r2
 80102ce:	693a      	ldr	r2, [r7, #16]
 80102d0:	4313      	orrs	r3, r2
 80102d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	08da      	lsrs	r2, r3, #3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	3208      	adds	r2, #8
 80102dc:	0092      	lsls	r2, r2, #2
 80102de:	6939      	ldr	r1, [r7, #16]
 80102e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	005b      	lsls	r3, r3, #1
 80102ec:	2203      	movs	r2, #3
 80102ee:	409a      	lsls	r2, r3
 80102f0:	0013      	movs	r3, r2
 80102f2:	43da      	mvns	r2, r3
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	4013      	ands	r3, r2
 80102f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	2203      	movs	r2, #3
 8010300:	401a      	ands	r2, r3
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	005b      	lsls	r3, r3, #1
 8010306:	409a      	lsls	r2, r3
 8010308:	0013      	movs	r3, r2
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	4313      	orrs	r3, r2
 801030e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	685a      	ldr	r2, [r3, #4]
 801031a:	23c0      	movs	r3, #192	@ 0xc0
 801031c:	029b      	lsls	r3, r3, #10
 801031e:	4013      	ands	r3, r2
 8010320:	d100      	bne.n	8010324 <HAL_GPIO_Init+0x174>
 8010322:	e09e      	b.n	8010462 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8010324:	4a56      	ldr	r2, [pc, #344]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	089b      	lsrs	r3, r3, #2
 801032a:	3318      	adds	r3, #24
 801032c:	009b      	lsls	r3, r3, #2
 801032e:	589b      	ldr	r3, [r3, r2]
 8010330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	2203      	movs	r2, #3
 8010336:	4013      	ands	r3, r2
 8010338:	00db      	lsls	r3, r3, #3
 801033a:	220f      	movs	r2, #15
 801033c:	409a      	lsls	r2, r3
 801033e:	0013      	movs	r3, r2
 8010340:	43da      	mvns	r2, r3
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	4013      	ands	r3, r2
 8010346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	23a0      	movs	r3, #160	@ 0xa0
 801034c:	05db      	lsls	r3, r3, #23
 801034e:	429a      	cmp	r2, r3
 8010350:	d01f      	beq.n	8010392 <HAL_GPIO_Init+0x1e2>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4a4b      	ldr	r2, [pc, #300]	@ (8010484 <HAL_GPIO_Init+0x2d4>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d019      	beq.n	801038e <HAL_GPIO_Init+0x1de>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4a4a      	ldr	r2, [pc, #296]	@ (8010488 <HAL_GPIO_Init+0x2d8>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d013      	beq.n	801038a <HAL_GPIO_Init+0x1da>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a49      	ldr	r2, [pc, #292]	@ (801048c <HAL_GPIO_Init+0x2dc>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d00d      	beq.n	8010386 <HAL_GPIO_Init+0x1d6>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4a48      	ldr	r2, [pc, #288]	@ (8010490 <HAL_GPIO_Init+0x2e0>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d007      	beq.n	8010382 <HAL_GPIO_Init+0x1d2>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4a47      	ldr	r2, [pc, #284]	@ (8010494 <HAL_GPIO_Init+0x2e4>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d101      	bne.n	801037e <HAL_GPIO_Init+0x1ce>
 801037a:	2305      	movs	r3, #5
 801037c:	e00a      	b.n	8010394 <HAL_GPIO_Init+0x1e4>
 801037e:	2306      	movs	r3, #6
 8010380:	e008      	b.n	8010394 <HAL_GPIO_Init+0x1e4>
 8010382:	2304      	movs	r3, #4
 8010384:	e006      	b.n	8010394 <HAL_GPIO_Init+0x1e4>
 8010386:	2303      	movs	r3, #3
 8010388:	e004      	b.n	8010394 <HAL_GPIO_Init+0x1e4>
 801038a:	2302      	movs	r3, #2
 801038c:	e002      	b.n	8010394 <HAL_GPIO_Init+0x1e4>
 801038e:	2301      	movs	r3, #1
 8010390:	e000      	b.n	8010394 <HAL_GPIO_Init+0x1e4>
 8010392:	2300      	movs	r3, #0
 8010394:	697a      	ldr	r2, [r7, #20]
 8010396:	2103      	movs	r1, #3
 8010398:	400a      	ands	r2, r1
 801039a:	00d2      	lsls	r2, r2, #3
 801039c:	4093      	lsls	r3, r2
 801039e:	693a      	ldr	r2, [r7, #16]
 80103a0:	4313      	orrs	r3, r2
 80103a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80103a4:	4936      	ldr	r1, [pc, #216]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	089b      	lsrs	r3, r3, #2
 80103aa:	3318      	adds	r3, #24
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	693a      	ldr	r2, [r7, #16]
 80103b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80103b2:	4b33      	ldr	r3, [pc, #204]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	43da      	mvns	r2, r3
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	4013      	ands	r3, r2
 80103c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	685a      	ldr	r2, [r3, #4]
 80103c6:	2380      	movs	r3, #128	@ 0x80
 80103c8:	035b      	lsls	r3, r3, #13
 80103ca:	4013      	ands	r3, r2
 80103cc:	d003      	beq.n	80103d6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80103ce:	693a      	ldr	r2, [r7, #16]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80103d6:	4b2a      	ldr	r3, [pc, #168]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 80103d8:	693a      	ldr	r2, [r7, #16]
 80103da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80103dc:	4b28      	ldr	r3, [pc, #160]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	43da      	mvns	r2, r3
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	4013      	ands	r3, r2
 80103ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	685a      	ldr	r2, [r3, #4]
 80103f0:	2380      	movs	r3, #128	@ 0x80
 80103f2:	039b      	lsls	r3, r3, #14
 80103f4:	4013      	ands	r3, r2
 80103f6:	d003      	beq.n	8010400 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80103f8:	693a      	ldr	r2, [r7, #16]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	4313      	orrs	r3, r2
 80103fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010400:	4b1f      	ldr	r3, [pc, #124]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 8010402:	693a      	ldr	r2, [r7, #16]
 8010404:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8010406:	4a1e      	ldr	r2, [pc, #120]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 8010408:	2384      	movs	r3, #132	@ 0x84
 801040a:	58d3      	ldr	r3, [r2, r3]
 801040c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	43da      	mvns	r2, r3
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	4013      	ands	r3, r2
 8010416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	685a      	ldr	r2, [r3, #4]
 801041c:	2380      	movs	r3, #128	@ 0x80
 801041e:	029b      	lsls	r3, r3, #10
 8010420:	4013      	ands	r3, r2
 8010422:	d003      	beq.n	801042c <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8010424:	693a      	ldr	r2, [r7, #16]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	4313      	orrs	r3, r2
 801042a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801042c:	4914      	ldr	r1, [pc, #80]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 801042e:	2284      	movs	r2, #132	@ 0x84
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8010434:	4a12      	ldr	r2, [pc, #72]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 8010436:	2380      	movs	r3, #128	@ 0x80
 8010438:	58d3      	ldr	r3, [r2, r3]
 801043a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	43da      	mvns	r2, r3
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	4013      	ands	r3, r2
 8010444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	685a      	ldr	r2, [r3, #4]
 801044a:	2380      	movs	r3, #128	@ 0x80
 801044c:	025b      	lsls	r3, r3, #9
 801044e:	4013      	ands	r3, r2
 8010450:	d003      	beq.n	801045a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	4313      	orrs	r3, r2
 8010458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801045a:	4909      	ldr	r1, [pc, #36]	@ (8010480 <HAL_GPIO_Init+0x2d0>)
 801045c:	2280      	movs	r2, #128	@ 0x80
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	3301      	adds	r3, #1
 8010466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	40da      	lsrs	r2, r3
 8010470:	1e13      	subs	r3, r2, #0
 8010472:	d000      	beq.n	8010476 <HAL_GPIO_Init+0x2c6>
 8010474:	e6a4      	b.n	80101c0 <HAL_GPIO_Init+0x10>
  }
}
 8010476:	46c0      	nop			@ (mov r8, r8)
 8010478:	46c0      	nop			@ (mov r8, r8)
 801047a:	46bd      	mov	sp, r7
 801047c:	b006      	add	sp, #24
 801047e:	bd80      	pop	{r7, pc}
 8010480:	40021800 	.word	0x40021800
 8010484:	50000400 	.word	0x50000400
 8010488:	50000800 	.word	0x50000800
 801048c:	50000c00 	.word	0x50000c00
 8010490:	50001000 	.word	0x50001000
 8010494:	50001400 	.word	0x50001400

08010498 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b086      	sub	sp, #24
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80104a6:	e0c0      	b.n	801062a <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80104a8:	2201      	movs	r2, #1
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	409a      	lsls	r2, r3
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	4013      	ands	r3, r2
 80104b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d100      	bne.n	80104bc <HAL_GPIO_DeInit+0x24>
 80104ba:	e0b3      	b.n	8010624 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80104bc:	4a60      	ldr	r2, [pc, #384]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	089b      	lsrs	r3, r3, #2
 80104c2:	3318      	adds	r3, #24
 80104c4:	009b      	lsls	r3, r3, #2
 80104c6:	589b      	ldr	r3, [r3, r2]
 80104c8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2203      	movs	r2, #3
 80104ce:	4013      	ands	r3, r2
 80104d0:	00db      	lsls	r3, r3, #3
 80104d2:	220f      	movs	r2, #15
 80104d4:	409a      	lsls	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	4013      	ands	r3, r2
 80104da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	23a0      	movs	r3, #160	@ 0xa0
 80104e0:	05db      	lsls	r3, r3, #23
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d01f      	beq.n	8010526 <HAL_GPIO_DeInit+0x8e>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4a56      	ldr	r2, [pc, #344]	@ (8010644 <HAL_GPIO_DeInit+0x1ac>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d019      	beq.n	8010522 <HAL_GPIO_DeInit+0x8a>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a55      	ldr	r2, [pc, #340]	@ (8010648 <HAL_GPIO_DeInit+0x1b0>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d013      	beq.n	801051e <HAL_GPIO_DeInit+0x86>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4a54      	ldr	r2, [pc, #336]	@ (801064c <HAL_GPIO_DeInit+0x1b4>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d00d      	beq.n	801051a <HAL_GPIO_DeInit+0x82>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a53      	ldr	r2, [pc, #332]	@ (8010650 <HAL_GPIO_DeInit+0x1b8>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d007      	beq.n	8010516 <HAL_GPIO_DeInit+0x7e>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4a52      	ldr	r2, [pc, #328]	@ (8010654 <HAL_GPIO_DeInit+0x1bc>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d101      	bne.n	8010512 <HAL_GPIO_DeInit+0x7a>
 801050e:	2305      	movs	r3, #5
 8010510:	e00a      	b.n	8010528 <HAL_GPIO_DeInit+0x90>
 8010512:	2306      	movs	r3, #6
 8010514:	e008      	b.n	8010528 <HAL_GPIO_DeInit+0x90>
 8010516:	2304      	movs	r3, #4
 8010518:	e006      	b.n	8010528 <HAL_GPIO_DeInit+0x90>
 801051a:	2303      	movs	r3, #3
 801051c:	e004      	b.n	8010528 <HAL_GPIO_DeInit+0x90>
 801051e:	2302      	movs	r3, #2
 8010520:	e002      	b.n	8010528 <HAL_GPIO_DeInit+0x90>
 8010522:	2301      	movs	r3, #1
 8010524:	e000      	b.n	8010528 <HAL_GPIO_DeInit+0x90>
 8010526:	2300      	movs	r3, #0
 8010528:	697a      	ldr	r2, [r7, #20]
 801052a:	2103      	movs	r1, #3
 801052c:	400a      	ands	r2, r1
 801052e:	00d2      	lsls	r2, r2, #3
 8010530:	4093      	lsls	r3, r2
 8010532:	68fa      	ldr	r2, [r7, #12]
 8010534:	429a      	cmp	r2, r3
 8010536:	d136      	bne.n	80105a6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8010538:	4a41      	ldr	r2, [pc, #260]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 801053a:	2380      	movs	r3, #128	@ 0x80
 801053c:	58d3      	ldr	r3, [r2, r3]
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	43d2      	mvns	r2, r2
 8010542:	493f      	ldr	r1, [pc, #252]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 8010544:	4013      	ands	r3, r2
 8010546:	2280      	movs	r2, #128	@ 0x80
 8010548:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 801054a:	4a3d      	ldr	r2, [pc, #244]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 801054c:	2384      	movs	r3, #132	@ 0x84
 801054e:	58d3      	ldr	r3, [r2, r3]
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	43d2      	mvns	r2, r2
 8010554:	493a      	ldr	r1, [pc, #232]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 8010556:	4013      	ands	r3, r2
 8010558:	2284      	movs	r2, #132	@ 0x84
 801055a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 801055c:	4b38      	ldr	r3, [pc, #224]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 801055e:	685a      	ldr	r2, [r3, #4]
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	43d9      	mvns	r1, r3
 8010564:	4b36      	ldr	r3, [pc, #216]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 8010566:	400a      	ands	r2, r1
 8010568:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801056a:	4b35      	ldr	r3, [pc, #212]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	43d9      	mvns	r1, r3
 8010572:	4b33      	ldr	r3, [pc, #204]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 8010574:	400a      	ands	r2, r1
 8010576:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	2203      	movs	r2, #3
 801057c:	4013      	ands	r3, r2
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	220f      	movs	r2, #15
 8010582:	409a      	lsls	r2, r3
 8010584:	0013      	movs	r3, r2
 8010586:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8010588:	4a2d      	ldr	r2, [pc, #180]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	089b      	lsrs	r3, r3, #2
 801058e:	3318      	adds	r3, #24
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	589a      	ldr	r2, [r3, r2]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	43d9      	mvns	r1, r3
 8010598:	4829      	ldr	r0, [pc, #164]	@ (8010640 <HAL_GPIO_DeInit+0x1a8>)
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	089b      	lsrs	r3, r3, #2
 801059e:	400a      	ands	r2, r1
 80105a0:	3318      	adds	r3, #24
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	005b      	lsls	r3, r3, #1
 80105ae:	2103      	movs	r1, #3
 80105b0:	4099      	lsls	r1, r3
 80105b2:	000b      	movs	r3, r1
 80105b4:	431a      	orrs	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	08da      	lsrs	r2, r3, #3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	3208      	adds	r2, #8
 80105c2:	0092      	lsls	r2, r2, #2
 80105c4:	58d3      	ldr	r3, [r2, r3]
 80105c6:	697a      	ldr	r2, [r7, #20]
 80105c8:	2107      	movs	r1, #7
 80105ca:	400a      	ands	r2, r1
 80105cc:	0092      	lsls	r2, r2, #2
 80105ce:	210f      	movs	r1, #15
 80105d0:	4091      	lsls	r1, r2
 80105d2:	000a      	movs	r2, r1
 80105d4:	43d1      	mvns	r1, r2
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	08d2      	lsrs	r2, r2, #3
 80105da:	4019      	ands	r1, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	3208      	adds	r2, #8
 80105e0:	0092      	lsls	r2, r2, #2
 80105e2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	697a      	ldr	r2, [r7, #20]
 80105ea:	0052      	lsls	r2, r2, #1
 80105ec:	2103      	movs	r1, #3
 80105ee:	4091      	lsls	r1, r2
 80105f0:	000a      	movs	r2, r1
 80105f2:	43d2      	mvns	r2, r2
 80105f4:	401a      	ands	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	2101      	movs	r1, #1
 8010600:	697a      	ldr	r2, [r7, #20]
 8010602:	4091      	lsls	r1, r2
 8010604:	000a      	movs	r2, r1
 8010606:	43d2      	mvns	r2, r2
 8010608:	401a      	ands	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	0052      	lsls	r2, r2, #1
 8010616:	2103      	movs	r1, #3
 8010618:	4091      	lsls	r1, r2
 801061a:	000a      	movs	r2, r1
 801061c:	43d2      	mvns	r2, r2
 801061e:	401a      	ands	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	60da      	str	r2, [r3, #12]
    }

    position++;
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	3301      	adds	r3, #1
 8010628:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	40da      	lsrs	r2, r3
 8010630:	1e13      	subs	r3, r2, #0
 8010632:	d000      	beq.n	8010636 <HAL_GPIO_DeInit+0x19e>
 8010634:	e738      	b.n	80104a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8010636:	46c0      	nop			@ (mov r8, r8)
 8010638:	46c0      	nop			@ (mov r8, r8)
 801063a:	46bd      	mov	sp, r7
 801063c:	b006      	add	sp, #24
 801063e:	bd80      	pop	{r7, pc}
 8010640:	40021800 	.word	0x40021800
 8010644:	50000400 	.word	0x50000400
 8010648:	50000800 	.word	0x50000800
 801064c:	50000c00 	.word	0x50000c00
 8010650:	50001000 	.word	0x50001000
 8010654:	50001400 	.word	0x50001400

08010658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	000a      	movs	r2, r1
 8010662:	1cbb      	adds	r3, r7, #2
 8010664:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	691b      	ldr	r3, [r3, #16]
 801066a:	1cba      	adds	r2, r7, #2
 801066c:	8812      	ldrh	r2, [r2, #0]
 801066e:	4013      	ands	r3, r2
 8010670:	d004      	beq.n	801067c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8010672:	230f      	movs	r3, #15
 8010674:	18fb      	adds	r3, r7, r3
 8010676:	2201      	movs	r2, #1
 8010678:	701a      	strb	r2, [r3, #0]
 801067a:	e003      	b.n	8010684 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801067c:	230f      	movs	r3, #15
 801067e:	18fb      	adds	r3, r7, r3
 8010680:	2200      	movs	r2, #0
 8010682:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010684:	230f      	movs	r3, #15
 8010686:	18fb      	adds	r3, r7, r3
 8010688:	781b      	ldrb	r3, [r3, #0]
}
 801068a:	0018      	movs	r0, r3
 801068c:	46bd      	mov	sp, r7
 801068e:	b004      	add	sp, #16
 8010690:	bd80      	pop	{r7, pc}

08010692 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b082      	sub	sp, #8
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	0008      	movs	r0, r1
 801069c:	0011      	movs	r1, r2
 801069e:	1cbb      	adds	r3, r7, #2
 80106a0:	1c02      	adds	r2, r0, #0
 80106a2:	801a      	strh	r2, [r3, #0]
 80106a4:	1c7b      	adds	r3, r7, #1
 80106a6:	1c0a      	adds	r2, r1, #0
 80106a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80106aa:	1c7b      	adds	r3, r7, #1
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d004      	beq.n	80106bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80106b2:	1cbb      	adds	r3, r7, #2
 80106b4:	881a      	ldrh	r2, [r3, #0]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80106ba:	e003      	b.n	80106c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80106bc:	1cbb      	adds	r3, r7, #2
 80106be:	881a      	ldrh	r2, [r3, #0]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80106c4:	46c0      	nop			@ (mov r8, r8)
 80106c6:	46bd      	mov	sp, r7
 80106c8:	b002      	add	sp, #8
 80106ca:	bd80      	pop	{r7, pc}

080106cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	000a      	movs	r2, r1
 80106d6:	1cbb      	adds	r3, r7, #2
 80106d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	695b      	ldr	r3, [r3, #20]
 80106de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80106e0:	1cbb      	adds	r3, r7, #2
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	4013      	ands	r3, r2
 80106e8:	041a      	lsls	r2, r3, #16
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	43db      	mvns	r3, r3
 80106ee:	1cb9      	adds	r1, r7, #2
 80106f0:	8809      	ldrh	r1, [r1, #0]
 80106f2:	400b      	ands	r3, r1
 80106f4:	431a      	orrs	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	619a      	str	r2, [r3, #24]
}
 80106fa:	46c0      	nop			@ (mov r8, r8)
 80106fc:	46bd      	mov	sp, r7
 80106fe:	b004      	add	sp, #16
 8010700:	bd80      	pop	{r7, pc}
	...

08010704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	0002      	movs	r2, r0
 801070c:	1dbb      	adds	r3, r7, #6
 801070e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8010710:	4b10      	ldr	r3, [pc, #64]	@ (8010754 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	1dba      	adds	r2, r7, #6
 8010716:	8812      	ldrh	r2, [r2, #0]
 8010718:	4013      	ands	r3, r2
 801071a:	d008      	beq.n	801072e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 801071c:	4b0d      	ldr	r3, [pc, #52]	@ (8010754 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801071e:	1dba      	adds	r2, r7, #6
 8010720:	8812      	ldrh	r2, [r2, #0]
 8010722:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8010724:	1dbb      	adds	r3, r7, #6
 8010726:	881b      	ldrh	r3, [r3, #0]
 8010728:	0018      	movs	r0, r3
 801072a:	f000 f815 	bl	8010758 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 801072e:	4b09      	ldr	r3, [pc, #36]	@ (8010754 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8010730:	691b      	ldr	r3, [r3, #16]
 8010732:	1dba      	adds	r2, r7, #6
 8010734:	8812      	ldrh	r2, [r2, #0]
 8010736:	4013      	ands	r3, r2
 8010738:	d008      	beq.n	801074c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801073a:	4b06      	ldr	r3, [pc, #24]	@ (8010754 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801073c:	1dba      	adds	r2, r7, #6
 801073e:	8812      	ldrh	r2, [r2, #0]
 8010740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8010742:	1dbb      	adds	r3, r7, #6
 8010744:	881b      	ldrh	r3, [r3, #0]
 8010746:	0018      	movs	r0, r3
 8010748:	f000 f810 	bl	801076c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 801074c:	46c0      	nop			@ (mov r8, r8)
 801074e:	46bd      	mov	sp, r7
 8010750:	b002      	add	sp, #8
 8010752:	bd80      	pop	{r7, pc}
 8010754:	40021800 	.word	0x40021800

08010758 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	0002      	movs	r2, r0
 8010760:	1dbb      	adds	r3, r7, #6
 8010762:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8010764:	46c0      	nop			@ (mov r8, r8)
 8010766:	46bd      	mov	sp, r7
 8010768:	b002      	add	sp, #8
 801076a:	bd80      	pop	{r7, pc}

0801076c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	0002      	movs	r2, r0
 8010774:	1dbb      	adds	r3, r7, #6
 8010776:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8010778:	46c0      	nop			@ (mov r8, r8)
 801077a:	46bd      	mov	sp, r7
 801077c:	b002      	add	sp, #8
 801077e:	bd80      	pop	{r7, pc}

08010780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801078e:	2301      	movs	r3, #1
 8010790:	e08f      	b.n	80108b2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2241      	movs	r2, #65	@ 0x41
 8010796:	5c9b      	ldrb	r3, [r3, r2]
 8010798:	b2db      	uxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	d107      	bne.n	80107ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2240      	movs	r2, #64	@ 0x40
 80107a2:	2100      	movs	r1, #0
 80107a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	0018      	movs	r0, r3
 80107aa:	f7f8 fa7d 	bl	8008ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2241      	movs	r2, #65	@ 0x41
 80107b2:	2124      	movs	r1, #36	@ 0x24
 80107b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2101      	movs	r1, #1
 80107c2:	438a      	bics	r2, r1
 80107c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	685a      	ldr	r2, [r3, #4]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	493b      	ldr	r1, [pc, #236]	@ (80108bc <HAL_I2C_Init+0x13c>)
 80107d0:	400a      	ands	r2, r1
 80107d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	689a      	ldr	r2, [r3, #8]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4938      	ldr	r1, [pc, #224]	@ (80108c0 <HAL_I2C_Init+0x140>)
 80107e0:	400a      	ands	r2, r1
 80107e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d108      	bne.n	80107fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	689a      	ldr	r2, [r3, #8]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2180      	movs	r1, #128	@ 0x80
 80107f6:	0209      	lsls	r1, r1, #8
 80107f8:	430a      	orrs	r2, r1
 80107fa:	609a      	str	r2, [r3, #8]
 80107fc:	e007      	b.n	801080e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	689a      	ldr	r2, [r3, #8]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2184      	movs	r1, #132	@ 0x84
 8010808:	0209      	lsls	r1, r1, #8
 801080a:	430a      	orrs	r2, r1
 801080c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	2b02      	cmp	r3, #2
 8010814:	d109      	bne.n	801082a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	685a      	ldr	r2, [r3, #4]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2180      	movs	r1, #128	@ 0x80
 8010822:	0109      	lsls	r1, r1, #4
 8010824:	430a      	orrs	r2, r1
 8010826:	605a      	str	r2, [r3, #4]
 8010828:	e007      	b.n	801083a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4923      	ldr	r1, [pc, #140]	@ (80108c4 <HAL_I2C_Init+0x144>)
 8010836:	400a      	ands	r2, r1
 8010838:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	685a      	ldr	r2, [r3, #4]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4920      	ldr	r1, [pc, #128]	@ (80108c8 <HAL_I2C_Init+0x148>)
 8010846:	430a      	orrs	r2, r1
 8010848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	68da      	ldr	r2, [r3, #12]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	491a      	ldr	r1, [pc, #104]	@ (80108c0 <HAL_I2C_Init+0x140>)
 8010856:	400a      	ands	r2, r1
 8010858:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	691a      	ldr	r2, [r3, #16]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	695b      	ldr	r3, [r3, #20]
 8010862:	431a      	orrs	r2, r3
 8010864:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	699b      	ldr	r3, [r3, #24]
 801086a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	430a      	orrs	r2, r1
 8010872:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	69d9      	ldr	r1, [r3, #28]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6a1a      	ldr	r2, [r3, #32]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	430a      	orrs	r2, r1
 8010882:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2101      	movs	r1, #1
 8010890:	430a      	orrs	r2, r1
 8010892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2241      	movs	r2, #65	@ 0x41
 801089e:	2120      	movs	r1, #32
 80108a0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2242      	movs	r2, #66	@ 0x42
 80108ac:	2100      	movs	r1, #0
 80108ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	0018      	movs	r0, r3
 80108b4:	46bd      	mov	sp, r7
 80108b6:	b002      	add	sp, #8
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	46c0      	nop			@ (mov r8, r8)
 80108bc:	f0ffffff 	.word	0xf0ffffff
 80108c0:	ffff7fff 	.word	0xffff7fff
 80108c4:	fffff7ff 	.word	0xfffff7ff
 80108c8:	02008000 	.word	0x02008000

080108cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d101      	bne.n	80108de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80108da:	2301      	movs	r3, #1
 80108dc:	e022      	b.n	8010924 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2241      	movs	r2, #65	@ 0x41
 80108e2:	2124      	movs	r1, #36	@ 0x24
 80108e4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2101      	movs	r1, #1
 80108f2:	438a      	bics	r2, r1
 80108f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	0018      	movs	r0, r3
 80108fa:	f7f8 fa9b 	bl	8008e34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2241      	movs	r2, #65	@ 0x41
 8010908:	2100      	movs	r1, #0
 801090a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2242      	movs	r2, #66	@ 0x42
 8010916:	2100      	movs	r1, #0
 8010918:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2240      	movs	r2, #64	@ 0x40
 801091e:	2100      	movs	r1, #0
 8010920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010922:	2300      	movs	r3, #0
}
 8010924:	0018      	movs	r0, r3
 8010926:	46bd      	mov	sp, r7
 8010928:	b002      	add	sp, #8
 801092a:	bd80      	pop	{r7, pc}

0801092c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 801092c:	b5b0      	push	{r4, r5, r7, lr}
 801092e:	b088      	sub	sp, #32
 8010930:	af02      	add	r7, sp, #8
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	0008      	movs	r0, r1
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	0019      	movs	r1, r3
 801093a:	230a      	movs	r3, #10
 801093c:	18fb      	adds	r3, r7, r3
 801093e:	1c02      	adds	r2, r0, #0
 8010940:	801a      	strh	r2, [r3, #0]
 8010942:	2308      	movs	r3, #8
 8010944:	18fb      	adds	r3, r7, r3
 8010946:	1c0a      	adds	r2, r1, #0
 8010948:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2241      	movs	r2, #65	@ 0x41
 801094e:	5c9b      	ldrb	r3, [r3, r2]
 8010950:	b2db      	uxtb	r3, r3
 8010952:	2b20      	cmp	r3, #32
 8010954:	d000      	beq.n	8010958 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8010956:	e0dd      	b.n	8010b14 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	699a      	ldr	r2, [r3, #24]
 801095e:	2380      	movs	r3, #128	@ 0x80
 8010960:	021b      	lsls	r3, r3, #8
 8010962:	401a      	ands	r2, r3
 8010964:	2380      	movs	r3, #128	@ 0x80
 8010966:	021b      	lsls	r3, r3, #8
 8010968:	429a      	cmp	r2, r3
 801096a:	d101      	bne.n	8010970 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 801096c:	2302      	movs	r3, #2
 801096e:	e0d2      	b.n	8010b16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2240      	movs	r2, #64	@ 0x40
 8010974:	5c9b      	ldrb	r3, [r3, r2]
 8010976:	2b01      	cmp	r3, #1
 8010978:	d101      	bne.n	801097e <HAL_I2C_Master_Transmit_DMA+0x52>
 801097a:	2302      	movs	r3, #2
 801097c:	e0cb      	b.n	8010b16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2240      	movs	r2, #64	@ 0x40
 8010982:	2101      	movs	r1, #1
 8010984:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2241      	movs	r2, #65	@ 0x41
 801098a:	2121      	movs	r1, #33	@ 0x21
 801098c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2242      	movs	r2, #66	@ 0x42
 8010992:	2110      	movs	r1, #16
 8010994:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2200      	movs	r2, #0
 801099a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2208      	movs	r2, #8
 80109a6:	18ba      	adds	r2, r7, r2
 80109a8:	8812      	ldrh	r2, [r2, #0]
 80109aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	4a5c      	ldr	r2, [pc, #368]	@ (8010b20 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80109b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	4a5b      	ldr	r2, [pc, #364]	@ (8010b24 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80109b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109bc:	b29b      	uxth	r3, r3
 80109be:	2bff      	cmp	r3, #255	@ 0xff
 80109c0:	d906      	bls.n	80109d0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	22ff      	movs	r2, #255	@ 0xff
 80109c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80109c8:	2380      	movs	r3, #128	@ 0x80
 80109ca:	045b      	lsls	r3, r3, #17
 80109cc:	617b      	str	r3, [r7, #20]
 80109ce:	e007      	b.n	80109e0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80109da:	2380      	movs	r3, #128	@ 0x80
 80109dc:	049b      	lsls	r3, r3, #18
 80109de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d100      	bne.n	80109ea <HAL_I2C_Master_Transmit_DMA+0xbe>
 80109e8:	e078      	b.n	8010adc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d023      	beq.n	8010a3a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109f6:	4a4c      	ldr	r2, [pc, #304]	@ (8010b28 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80109f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109fe:	4a4b      	ldr	r2, [pc, #300]	@ (8010b2c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010a00:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a06:	2200      	movs	r2, #0
 8010a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a0e:	2200      	movs	r2, #0
 8010a10:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010a16:	6879      	ldr	r1, [r7, #4]
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3328      	adds	r3, #40	@ 0x28
 8010a1e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010a24:	2513      	movs	r5, #19
 8010a26:	197c      	adds	r4, r7, r5
 8010a28:	f7fe fdb8 	bl	800f59c <HAL_DMA_Start_IT>
 8010a2c:	0003      	movs	r3, r0
 8010a2e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010a30:	197b      	adds	r3, r7, r5
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d13d      	bne.n	8010ab4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8010a38:	e013      	b.n	8010a62 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2241      	movs	r2, #65	@ 0x41
 8010a3e:	2120      	movs	r1, #32
 8010a40:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2242      	movs	r2, #66	@ 0x42
 8010a46:	2100      	movs	r1, #0
 8010a48:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a4e:	2280      	movs	r2, #128	@ 0x80
 8010a50:	431a      	orrs	r2, r3
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2240      	movs	r2, #64	@ 0x40
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e059      	b.n	8010b16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	697c      	ldr	r4, [r7, #20]
 8010a6a:	230a      	movs	r3, #10
 8010a6c:	18fb      	adds	r3, r7, r3
 8010a6e:	8819      	ldrh	r1, [r3, #0]
 8010a70:	68f8      	ldr	r0, [r7, #12]
 8010a72:	4b2f      	ldr	r3, [pc, #188]	@ (8010b30 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010a74:	9300      	str	r3, [sp, #0]
 8010a76:	0023      	movs	r3, r4
 8010a78:	f001 fd94 	bl	80125a4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a86:	1ad3      	subs	r3, r2, r3
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2240      	movs	r2, #64	@ 0x40
 8010a92:	2100      	movs	r1, #0
 8010a94:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2110      	movs	r1, #16
 8010a9a:	0018      	movs	r0, r3
 8010a9c:	f001 fdbc 	bl	8012618 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	2180      	movs	r1, #128	@ 0x80
 8010aac:	01c9      	lsls	r1, r1, #7
 8010aae:	430a      	orrs	r2, r1
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	e02d      	b.n	8010b10 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2241      	movs	r2, #65	@ 0x41
 8010ab8:	2120      	movs	r1, #32
 8010aba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2242      	movs	r2, #66	@ 0x42
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ac8:	2210      	movs	r2, #16
 8010aca:	431a      	orrs	r2, r3
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2240      	movs	r2, #64	@ 0x40
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e01c      	b.n	8010b16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4a15      	ldr	r2, [pc, #84]	@ (8010b34 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010ae0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	2380      	movs	r3, #128	@ 0x80
 8010aea:	049c      	lsls	r4, r3, #18
 8010aec:	230a      	movs	r3, #10
 8010aee:	18fb      	adds	r3, r7, r3
 8010af0:	8819      	ldrh	r1, [r3, #0]
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	4b0e      	ldr	r3, [pc, #56]	@ (8010b30 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	0023      	movs	r3, r4
 8010afa:	f001 fd53 	bl	80125a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2240      	movs	r2, #64	@ 0x40
 8010b02:	2100      	movs	r1, #0
 8010b04:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2101      	movs	r1, #1
 8010b0a:	0018      	movs	r0, r3
 8010b0c:	f001 fd84 	bl	8012618 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	e000      	b.n	8010b16 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010b14:	2302      	movs	r3, #2
  }
}
 8010b16:	0018      	movs	r0, r3
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	b006      	add	sp, #24
 8010b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b1e:	46c0      	nop			@ (mov r8, r8)
 8010b20:	ffff0000 	.word	0xffff0000
 8010b24:	08011349 	.word	0x08011349
 8010b28:	080123f5 	.word	0x080123f5
 8010b2c:	08012535 	.word	0x08012535
 8010b30:	80002000 	.word	0x80002000
 8010b34:	08010ef5 	.word	0x08010ef5

08010b38 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010b38:	b5b0      	push	{r4, r5, r7, lr}
 8010b3a:	b088      	sub	sp, #32
 8010b3c:	af02      	add	r7, sp, #8
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	0008      	movs	r0, r1
 8010b42:	607a      	str	r2, [r7, #4]
 8010b44:	0019      	movs	r1, r3
 8010b46:	230a      	movs	r3, #10
 8010b48:	18fb      	adds	r3, r7, r3
 8010b4a:	1c02      	adds	r2, r0, #0
 8010b4c:	801a      	strh	r2, [r3, #0]
 8010b4e:	2308      	movs	r3, #8
 8010b50:	18fb      	adds	r3, r7, r3
 8010b52:	1c0a      	adds	r2, r1, #0
 8010b54:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2241      	movs	r2, #65	@ 0x41
 8010b5a:	5c9b      	ldrb	r3, [r3, r2]
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	2b20      	cmp	r3, #32
 8010b60:	d000      	beq.n	8010b64 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010b62:	e0dd      	b.n	8010d20 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	699a      	ldr	r2, [r3, #24]
 8010b6a:	2380      	movs	r3, #128	@ 0x80
 8010b6c:	021b      	lsls	r3, r3, #8
 8010b6e:	401a      	ands	r2, r3
 8010b70:	2380      	movs	r3, #128	@ 0x80
 8010b72:	021b      	lsls	r3, r3, #8
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d101      	bne.n	8010b7c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010b78:	2302      	movs	r3, #2
 8010b7a:	e0d2      	b.n	8010d22 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2240      	movs	r2, #64	@ 0x40
 8010b80:	5c9b      	ldrb	r3, [r3, r2]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d101      	bne.n	8010b8a <HAL_I2C_Master_Receive_DMA+0x52>
 8010b86:	2302      	movs	r3, #2
 8010b88:	e0cb      	b.n	8010d22 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2240      	movs	r2, #64	@ 0x40
 8010b8e:	2101      	movs	r1, #1
 8010b90:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2241      	movs	r2, #65	@ 0x41
 8010b96:	2122      	movs	r1, #34	@ 0x22
 8010b98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2242      	movs	r2, #66	@ 0x42
 8010b9e:	2110      	movs	r1, #16
 8010ba0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2208      	movs	r2, #8
 8010bb2:	18ba      	adds	r2, r7, r2
 8010bb4:	8812      	ldrh	r2, [r2, #0]
 8010bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	4a5c      	ldr	r2, [pc, #368]	@ (8010d2c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	4a5b      	ldr	r2, [pc, #364]	@ (8010d30 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010bc2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	2bff      	cmp	r3, #255	@ 0xff
 8010bcc:	d906      	bls.n	8010bdc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	22ff      	movs	r2, #255	@ 0xff
 8010bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010bd4:	2380      	movs	r3, #128	@ 0x80
 8010bd6:	045b      	lsls	r3, r3, #17
 8010bd8:	617b      	str	r3, [r7, #20]
 8010bda:	e007      	b.n	8010bec <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010be6:	2380      	movs	r3, #128	@ 0x80
 8010be8:	049b      	lsls	r3, r3, #18
 8010bea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d100      	bne.n	8010bf6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8010bf4:	e078      	b.n	8010ce8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d023      	beq.n	8010c46 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c02:	4a4c      	ldr	r2, [pc, #304]	@ (8010d34 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010c04:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c0a:	4a4b      	ldr	r2, [pc, #300]	@ (8010d38 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010c0c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c12:	2200      	movs	r2, #0
 8010c14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	3324      	adds	r3, #36	@ 0x24
 8010c28:	0019      	movs	r1, r3
 8010c2a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010c30:	2513      	movs	r5, #19
 8010c32:	197c      	adds	r4, r7, r5
 8010c34:	f7fe fcb2 	bl	800f59c <HAL_DMA_Start_IT>
 8010c38:	0003      	movs	r3, r0
 8010c3a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010c3c:	197b      	adds	r3, r7, r5
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d13d      	bne.n	8010cc0 <HAL_I2C_Master_Receive_DMA+0x188>
 8010c44:	e013      	b.n	8010c6e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2241      	movs	r2, #65	@ 0x41
 8010c4a:	2120      	movs	r1, #32
 8010c4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2242      	movs	r2, #66	@ 0x42
 8010c52:	2100      	movs	r1, #0
 8010c54:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c5a:	2280      	movs	r2, #128	@ 0x80
 8010c5c:	431a      	orrs	r2, r3
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2240      	movs	r2, #64	@ 0x40
 8010c66:	2100      	movs	r1, #0
 8010c68:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e059      	b.n	8010d22 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c72:	b2da      	uxtb	r2, r3
 8010c74:	697c      	ldr	r4, [r7, #20]
 8010c76:	230a      	movs	r3, #10
 8010c78:	18fb      	adds	r3, r7, r3
 8010c7a:	8819      	ldrh	r1, [r3, #0]
 8010c7c:	68f8      	ldr	r0, [r7, #12]
 8010c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8010d3c <HAL_I2C_Master_Receive_DMA+0x204>)
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	0023      	movs	r3, r4
 8010c84:	f001 fc8e 	bl	80125a4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2240      	movs	r2, #64	@ 0x40
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2110      	movs	r1, #16
 8010ca6:	0018      	movs	r0, r3
 8010ca8:	f001 fcb6 	bl	8012618 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	681a      	ldr	r2, [r3, #0]
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	2180      	movs	r1, #128	@ 0x80
 8010cb8:	0209      	lsls	r1, r1, #8
 8010cba:	430a      	orrs	r2, r1
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	e02d      	b.n	8010d1c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2241      	movs	r2, #65	@ 0x41
 8010cc4:	2120      	movs	r1, #32
 8010cc6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2242      	movs	r2, #66	@ 0x42
 8010ccc:	2100      	movs	r1, #0
 8010cce:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cd4:	2210      	movs	r2, #16
 8010cd6:	431a      	orrs	r2, r3
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	2240      	movs	r2, #64	@ 0x40
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	e01c      	b.n	8010d22 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	4a15      	ldr	r2, [pc, #84]	@ (8010d40 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010cec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	2380      	movs	r3, #128	@ 0x80
 8010cf6:	049c      	lsls	r4, r3, #18
 8010cf8:	230a      	movs	r3, #10
 8010cfa:	18fb      	adds	r3, r7, r3
 8010cfc:	8819      	ldrh	r1, [r3, #0]
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	4b0e      	ldr	r3, [pc, #56]	@ (8010d3c <HAL_I2C_Master_Receive_DMA+0x204>)
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	0023      	movs	r3, r4
 8010d06:	f001 fc4d 	bl	80125a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2240      	movs	r2, #64	@ 0x40
 8010d0e:	2100      	movs	r1, #0
 8010d10:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2102      	movs	r1, #2
 8010d16:	0018      	movs	r0, r3
 8010d18:	f001 fc7e 	bl	8012618 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	e000      	b.n	8010d22 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010d20:	2302      	movs	r3, #2
  }
}
 8010d22:	0018      	movs	r0, r3
 8010d24:	46bd      	mov	sp, r7
 8010d26:	b006      	add	sp, #24
 8010d28:	bdb0      	pop	{r4, r5, r7, pc}
 8010d2a:	46c0      	nop			@ (mov r8, r8)
 8010d2c:	ffff0000 	.word	0xffff0000
 8010d30:	08011349 	.word	0x08011349
 8010d34:	08012495 	.word	0x08012495
 8010d38:	08012535 	.word	0x08012535
 8010d3c:	80002400 	.word	0x80002400
 8010d40:	08010ef5 	.word	0x08010ef5

08010d44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	699b      	ldr	r3, [r3, #24]
 8010d52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d005      	beq.n	8010d70 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d68:	68ba      	ldr	r2, [r7, #8]
 8010d6a:	68f9      	ldr	r1, [r7, #12]
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	4798      	blx	r3
  }
}
 8010d70:	46c0      	nop			@ (mov r8, r8)
 8010d72:	46bd      	mov	sp, r7
 8010d74:	b004      	add	sp, #16
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b086      	sub	sp, #24
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	699b      	ldr	r3, [r3, #24]
 8010d86:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	2380      	movs	r3, #128	@ 0x80
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	4013      	ands	r3, r2
 8010d98:	d00e      	beq.n	8010db8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	2280      	movs	r2, #128	@ 0x80
 8010d9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010da0:	d00a      	beq.n	8010db8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010da6:	2201      	movs	r2, #1
 8010da8:	431a      	orrs	r2, r3
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2280      	movs	r2, #128	@ 0x80
 8010db4:	0052      	lsls	r2, r2, #1
 8010db6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010db8:	697a      	ldr	r2, [r7, #20]
 8010dba:	2380      	movs	r3, #128	@ 0x80
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	4013      	ands	r3, r2
 8010dc0:	d00e      	beq.n	8010de0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	2280      	movs	r2, #128	@ 0x80
 8010dc6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010dc8:	d00a      	beq.n	8010de0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dce:	2208      	movs	r2, #8
 8010dd0:	431a      	orrs	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2280      	movs	r2, #128	@ 0x80
 8010ddc:	00d2      	lsls	r2, r2, #3
 8010dde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010de0:	697a      	ldr	r2, [r7, #20]
 8010de2:	2380      	movs	r3, #128	@ 0x80
 8010de4:	009b      	lsls	r3, r3, #2
 8010de6:	4013      	ands	r3, r2
 8010de8:	d00e      	beq.n	8010e08 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	2280      	movs	r2, #128	@ 0x80
 8010dee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010df0:	d00a      	beq.n	8010e08 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010df6:	2202      	movs	r2, #2
 8010df8:	431a      	orrs	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2280      	movs	r2, #128	@ 0x80
 8010e04:	0092      	lsls	r2, r2, #2
 8010e06:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e0c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	220b      	movs	r2, #11
 8010e12:	4013      	ands	r3, r2
 8010e14:	d005      	beq.n	8010e22 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	0011      	movs	r1, r2
 8010e1c:	0018      	movs	r0, r3
 8010e1e:	f001 f99b 	bl	8012158 <I2C_ITError>
  }
}
 8010e22:	46c0      	nop			@ (mov r8, r8)
 8010e24:	46bd      	mov	sp, r7
 8010e26:	b006      	add	sp, #24
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b082      	sub	sp, #8
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010e32:	46c0      	nop			@ (mov r8, r8)
 8010e34:	46bd      	mov	sp, r7
 8010e36:	b002      	add	sp, #8
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b082      	sub	sp, #8
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010e42:	46c0      	nop			@ (mov r8, r8)
 8010e44:	46bd      	mov	sp, r7
 8010e46:	b002      	add	sp, #8
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b082      	sub	sp, #8
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010e52:	46c0      	nop			@ (mov r8, r8)
 8010e54:	46bd      	mov	sp, r7
 8010e56:	b002      	add	sp, #8
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b082      	sub	sp, #8
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010e62:	46c0      	nop			@ (mov r8, r8)
 8010e64:	46bd      	mov	sp, r7
 8010e66:	b002      	add	sp, #8
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b082      	sub	sp, #8
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
 8010e72:	0008      	movs	r0, r1
 8010e74:	0011      	movs	r1, r2
 8010e76:	1cfb      	adds	r3, r7, #3
 8010e78:	1c02      	adds	r2, r0, #0
 8010e7a:	701a      	strb	r2, [r3, #0]
 8010e7c:	003b      	movs	r3, r7
 8010e7e:	1c0a      	adds	r2, r1, #0
 8010e80:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010e82:	46c0      	nop			@ (mov r8, r8)
 8010e84:	46bd      	mov	sp, r7
 8010e86:	b002      	add	sp, #8
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010e92:	46c0      	nop			@ (mov r8, r8)
 8010e94:	46bd      	mov	sp, r7
 8010e96:	b002      	add	sp, #8
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b082      	sub	sp, #8
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010ea2:	46c0      	nop			@ (mov r8, r8)
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	b002      	add	sp, #8
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b082      	sub	sp, #8
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010eb2:	46c0      	nop			@ (mov r8, r8)
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	b002      	add	sp, #8
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b082      	sub	sp, #8
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010ec2:	46c0      	nop			@ (mov r8, r8)
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	b002      	add	sp, #8
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b082      	sub	sp, #8
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010ed2:	46c0      	nop			@ (mov r8, r8)
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	b002      	add	sp, #8
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b082      	sub	sp, #8
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2241      	movs	r2, #65	@ 0x41
 8010ee6:	5c9b      	ldrb	r3, [r3, r2]
 8010ee8:	b2db      	uxtb	r3, r3
}
 8010eea:	0018      	movs	r0, r3
 8010eec:	46bd      	mov	sp, r7
 8010eee:	b002      	add	sp, #8
 8010ef0:	bd80      	pop	{r7, pc}
	...

08010ef4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b089      	sub	sp, #36	@ 0x24
 8010ef8:	af02      	add	r7, sp, #8
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2240      	movs	r2, #64	@ 0x40
 8010f08:	5c9b      	ldrb	r3, [r3, r2]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d101      	bne.n	8010f12 <I2C_Master_ISR_IT+0x1e>
 8010f0e:	2302      	movs	r3, #2
 8010f10:	e113      	b.n	801113a <I2C_Master_ISR_IT+0x246>
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2240      	movs	r2, #64	@ 0x40
 8010f16:	2101      	movs	r1, #1
 8010f18:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	2210      	movs	r2, #16
 8010f1e:	4013      	ands	r3, r2
 8010f20:	d012      	beq.n	8010f48 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2210      	movs	r2, #16
 8010f26:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f28:	d00e      	beq.n	8010f48 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2210      	movs	r2, #16
 8010f30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f36:	2204      	movs	r2, #4
 8010f38:	431a      	orrs	r2, r3
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	0018      	movs	r0, r3
 8010f42:	f001 fa34 	bl	80123ae <I2C_Flush_TXDR>
 8010f46:	e0e5      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	2204      	movs	r2, #4
 8010f4c:	4013      	ands	r3, r2
 8010f4e:	d021      	beq.n	8010f94 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2204      	movs	r2, #4
 8010f54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010f56:	d01d      	beq.n	8010f94 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	2204      	movs	r2, #4
 8010f5c:	4393      	bics	r3, r2
 8010f5e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f6a:	b2d2      	uxtb	r2, r2
 8010f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f72:	1c5a      	adds	r2, r3, #1
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	3b01      	subs	r3, #1
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010f92:	e0bf      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2202      	movs	r2, #2
 8010f98:	4013      	ands	r3, r2
 8010f9a:	d01c      	beq.n	8010fd6 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2202      	movs	r2, #2
 8010fa0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010fa2:	d018      	beq.n	8010fd6 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fa8:	781a      	ldrb	r2, [r3, #0]
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb4:	1c5a      	adds	r2, r3, #1
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fbe:	3b01      	subs	r3, #1
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	b29a      	uxth	r2, r3
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010fd4:	e09e      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	2280      	movs	r2, #128	@ 0x80
 8010fda:	4013      	ands	r3, r2
 8010fdc:	d100      	bne.n	8010fe0 <I2C_Master_ISR_IT+0xec>
 8010fde:	e069      	b.n	80110b4 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2240      	movs	r2, #64	@ 0x40
 8010fe4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010fe6:	d065      	beq.n	80110b4 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d04a      	beq.n	8011088 <I2C_Master_ISR_IT+0x194>
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d146      	bne.n	8011088 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	b29a      	uxth	r2, r3
 8011002:	2112      	movs	r1, #18
 8011004:	187b      	adds	r3, r7, r1
 8011006:	0592      	lsls	r2, r2, #22
 8011008:	0d92      	lsrs	r2, r2, #22
 801100a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011010:	b29b      	uxth	r3, r3
 8011012:	2bff      	cmp	r3, #255	@ 0xff
 8011014:	d910      	bls.n	8011038 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	22ff      	movs	r2, #255	@ 0xff
 801101a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011020:	b2da      	uxtb	r2, r3
 8011022:	2380      	movs	r3, #128	@ 0x80
 8011024:	045c      	lsls	r4, r3, #17
 8011026:	187b      	adds	r3, r7, r1
 8011028:	8819      	ldrh	r1, [r3, #0]
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	2300      	movs	r3, #0
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	0023      	movs	r3, r4
 8011032:	f001 fab7 	bl	80125a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011036:	e03c      	b.n	80110b2 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801103c:	b29a      	uxth	r2, r3
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011046:	4a3f      	ldr	r2, [pc, #252]	@ (8011144 <I2C_Master_ISR_IT+0x250>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d00e      	beq.n	801106a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011050:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011056:	2312      	movs	r3, #18
 8011058:	18fb      	adds	r3, r7, r3
 801105a:	8819      	ldrh	r1, [r3, #0]
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	2300      	movs	r3, #0
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	0023      	movs	r3, r4
 8011064:	f001 fa9e 	bl	80125a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011068:	e023      	b.n	80110b2 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801106e:	b2da      	uxtb	r2, r3
 8011070:	2380      	movs	r3, #128	@ 0x80
 8011072:	049c      	lsls	r4, r3, #18
 8011074:	2312      	movs	r3, #18
 8011076:	18fb      	adds	r3, r7, r3
 8011078:	8819      	ldrh	r1, [r3, #0]
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	2300      	movs	r3, #0
 801107e:	9300      	str	r3, [sp, #0]
 8011080:	0023      	movs	r3, r4
 8011082:	f001 fa8f 	bl	80125a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011086:	e014      	b.n	80110b2 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	685a      	ldr	r2, [r3, #4]
 801108e:	2380      	movs	r3, #128	@ 0x80
 8011090:	049b      	lsls	r3, r3, #18
 8011092:	401a      	ands	r2, r3
 8011094:	2380      	movs	r3, #128	@ 0x80
 8011096:	049b      	lsls	r3, r3, #18
 8011098:	429a      	cmp	r2, r3
 801109a:	d004      	beq.n	80110a6 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	0018      	movs	r0, r3
 80110a0:	f000 fd06 	bl	8011ab0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80110a4:	e036      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2140      	movs	r1, #64	@ 0x40
 80110aa:	0018      	movs	r0, r3
 80110ac:	f001 f854 	bl	8012158 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80110b0:	e030      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
 80110b2:	e02f      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	2240      	movs	r2, #64	@ 0x40
 80110b8:	4013      	ands	r3, r2
 80110ba:	d02b      	beq.n	8011114 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2240      	movs	r2, #64	@ 0x40
 80110c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80110c2:	d027      	beq.n	8011114 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d11d      	bne.n	801110a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	685a      	ldr	r2, [r3, #4]
 80110d4:	2380      	movs	r3, #128	@ 0x80
 80110d6:	049b      	lsls	r3, r3, #18
 80110d8:	401a      	ands	r2, r3
 80110da:	2380      	movs	r3, #128	@ 0x80
 80110dc:	049b      	lsls	r3, r3, #18
 80110de:	429a      	cmp	r2, r3
 80110e0:	d018      	beq.n	8011114 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110e6:	4a17      	ldr	r2, [pc, #92]	@ (8011144 <I2C_Master_ISR_IT+0x250>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d109      	bne.n	8011100 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	685a      	ldr	r2, [r3, #4]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	2180      	movs	r1, #128	@ 0x80
 80110f8:	01c9      	lsls	r1, r1, #7
 80110fa:	430a      	orrs	r2, r1
 80110fc:	605a      	str	r2, [r3, #4]
 80110fe:	e009      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	0018      	movs	r0, r3
 8011104:	f000 fcd4 	bl	8011ab0 <I2C_ITMasterSeqCplt>
 8011108:	e004      	b.n	8011114 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2140      	movs	r1, #64	@ 0x40
 801110e:	0018      	movs	r0, r3
 8011110:	f001 f822 	bl	8012158 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	2220      	movs	r2, #32
 8011118:	4013      	ands	r3, r2
 801111a:	d009      	beq.n	8011130 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2220      	movs	r2, #32
 8011120:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011122:	d005      	beq.n	8011130 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011124:	697a      	ldr	r2, [r7, #20]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	0011      	movs	r1, r2
 801112a:	0018      	movs	r0, r3
 801112c:	f000 fd66 	bl	8011bfc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2240      	movs	r2, #64	@ 0x40
 8011134:	2100      	movs	r1, #0
 8011136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011138:	2300      	movs	r3, #0
}
 801113a:	0018      	movs	r0, r3
 801113c:	46bd      	mov	sp, r7
 801113e:	b007      	add	sp, #28
 8011140:	bd90      	pop	{r4, r7, pc}
 8011142:	46c0      	nop			@ (mov r8, r8)
 8011144:	ffff0000 	.word	0xffff0000

08011148 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011158:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2240      	movs	r2, #64	@ 0x40
 8011162:	5c9b      	ldrb	r3, [r3, r2]
 8011164:	2b01      	cmp	r3, #1
 8011166:	d101      	bne.n	801116c <I2C_Slave_ISR_IT+0x24>
 8011168:	2302      	movs	r3, #2
 801116a:	e0e7      	b.n	801133c <I2C_Slave_ISR_IT+0x1f4>
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2240      	movs	r2, #64	@ 0x40
 8011170:	2101      	movs	r1, #1
 8011172:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	2220      	movs	r2, #32
 8011178:	4013      	ands	r3, r2
 801117a:	d00a      	beq.n	8011192 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2220      	movs	r2, #32
 8011180:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011182:	d006      	beq.n	8011192 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011184:	693a      	ldr	r2, [r7, #16]
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	0011      	movs	r1, r2
 801118a:	0018      	movs	r0, r3
 801118c:	f000 fe04 	bl	8011d98 <I2C_ITSlaveCplt>
 8011190:	e0cf      	b.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	2210      	movs	r2, #16
 8011196:	4013      	ands	r3, r2
 8011198:	d052      	beq.n	8011240 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2210      	movs	r2, #16
 801119e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80111a0:	d04e      	beq.n	8011240 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d12d      	bne.n	8011208 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2241      	movs	r2, #65	@ 0x41
 80111b0:	5c9b      	ldrb	r3, [r3, r2]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	2b28      	cmp	r3, #40	@ 0x28
 80111b6:	d10b      	bne.n	80111d0 <I2C_Slave_ISR_IT+0x88>
 80111b8:	697a      	ldr	r2, [r7, #20]
 80111ba:	2380      	movs	r3, #128	@ 0x80
 80111bc:	049b      	lsls	r3, r3, #18
 80111be:	429a      	cmp	r2, r3
 80111c0:	d106      	bne.n	80111d0 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80111c2:	693a      	ldr	r2, [r7, #16]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	0011      	movs	r1, r2
 80111c8:	0018      	movs	r0, r3
 80111ca:	f000 ff6d 	bl	80120a8 <I2C_ITListenCplt>
 80111ce:	e036      	b.n	801123e <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2241      	movs	r2, #65	@ 0x41
 80111d4:	5c9b      	ldrb	r3, [r3, r2]
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	2b29      	cmp	r3, #41	@ 0x29
 80111da:	d110      	bne.n	80111fe <I2C_Slave_ISR_IT+0xb6>
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	4a59      	ldr	r2, [pc, #356]	@ (8011344 <I2C_Slave_ISR_IT+0x1fc>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d00c      	beq.n	80111fe <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2210      	movs	r2, #16
 80111ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	0018      	movs	r0, r3
 80111f0:	f001 f8dd 	bl	80123ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	0018      	movs	r0, r3
 80111f8:	f000 fc9c 	bl	8011b34 <I2C_ITSlaveSeqCplt>
 80111fc:	e01f      	b.n	801123e <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2210      	movs	r2, #16
 8011204:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011206:	e091      	b.n	801132c <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2210      	movs	r2, #16
 801120e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011214:	2204      	movs	r2, #4
 8011216:	431a      	orrs	r2, r3
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d005      	beq.n	801122e <I2C_Slave_ISR_IT+0xe6>
 8011222:	697a      	ldr	r2, [r7, #20]
 8011224:	2380      	movs	r3, #128	@ 0x80
 8011226:	045b      	lsls	r3, r3, #17
 8011228:	429a      	cmp	r2, r3
 801122a:	d000      	beq.n	801122e <I2C_Slave_ISR_IT+0xe6>
 801122c:	e07e      	b.n	801132c <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	0011      	movs	r1, r2
 8011236:	0018      	movs	r0, r3
 8011238:	f000 ff8e 	bl	8012158 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801123c:	e076      	b.n	801132c <I2C_Slave_ISR_IT+0x1e4>
 801123e:	e075      	b.n	801132c <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	2204      	movs	r2, #4
 8011244:	4013      	ands	r3, r2
 8011246:	d02f      	beq.n	80112a8 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2204      	movs	r2, #4
 801124c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801124e:	d02b      	beq.n	80112a8 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011254:	b29b      	uxth	r3, r3
 8011256:	2b00      	cmp	r3, #0
 8011258:	d018      	beq.n	801128c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011264:	b2d2      	uxtb	r2, r2
 8011266:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126c:	1c5a      	adds	r2, r3, #1
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011276:	3b01      	subs	r3, #1
 8011278:	b29a      	uxth	r2, r3
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011282:	b29b      	uxth	r3, r3
 8011284:	3b01      	subs	r3, #1
 8011286:	b29a      	uxth	r2, r3
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011290:	b29b      	uxth	r3, r3
 8011292:	2b00      	cmp	r3, #0
 8011294:	d14c      	bne.n	8011330 <I2C_Slave_ISR_IT+0x1e8>
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	4a2a      	ldr	r2, [pc, #168]	@ (8011344 <I2C_Slave_ISR_IT+0x1fc>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d048      	beq.n	8011330 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	0018      	movs	r0, r3
 80112a2:	f000 fc47 	bl	8011b34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80112a6:	e043      	b.n	8011330 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	2208      	movs	r2, #8
 80112ac:	4013      	ands	r3, r2
 80112ae:	d00a      	beq.n	80112c6 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2208      	movs	r2, #8
 80112b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80112b6:	d006      	beq.n	80112c6 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80112b8:	693a      	ldr	r2, [r7, #16]
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	0011      	movs	r1, r2
 80112be:	0018      	movs	r0, r3
 80112c0:	f000 fb52 	bl	8011968 <I2C_ITAddrCplt>
 80112c4:	e035      	b.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	2202      	movs	r2, #2
 80112ca:	4013      	ands	r3, r2
 80112cc:	d031      	beq.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2202      	movs	r2, #2
 80112d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80112d4:	d02d      	beq.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112da:	b29b      	uxth	r3, r3
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d018      	beq.n	8011312 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112e4:	781a      	ldrb	r2, [r3, #0]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112f0:	1c5a      	adds	r2, r3, #1
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	3b01      	subs	r3, #1
 80112fe:	b29a      	uxth	r2, r3
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011308:	3b01      	subs	r3, #1
 801130a:	b29a      	uxth	r2, r3
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011310:	e00f      	b.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011312:	697a      	ldr	r2, [r7, #20]
 8011314:	2380      	movs	r3, #128	@ 0x80
 8011316:	045b      	lsls	r3, r3, #17
 8011318:	429a      	cmp	r2, r3
 801131a:	d002      	beq.n	8011322 <I2C_Slave_ISR_IT+0x1da>
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d107      	bne.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	0018      	movs	r0, r3
 8011326:	f000 fc05 	bl	8011b34 <I2C_ITSlaveSeqCplt>
 801132a:	e002      	b.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 801132c:	46c0      	nop			@ (mov r8, r8)
 801132e:	e000      	b.n	8011332 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8011330:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2240      	movs	r2, #64	@ 0x40
 8011336:	2100      	movs	r1, #0
 8011338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801133a:	2300      	movs	r3, #0
}
 801133c:	0018      	movs	r0, r3
 801133e:	46bd      	mov	sp, r7
 8011340:	b006      	add	sp, #24
 8011342:	bd80      	pop	{r7, pc}
 8011344:	ffff0000 	.word	0xffff0000

08011348 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011348:	b590      	push	{r4, r7, lr}
 801134a:	b089      	sub	sp, #36	@ 0x24
 801134c:	af02      	add	r7, sp, #8
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2240      	movs	r2, #64	@ 0x40
 8011358:	5c9b      	ldrb	r3, [r3, r2]
 801135a:	2b01      	cmp	r3, #1
 801135c:	d101      	bne.n	8011362 <I2C_Master_ISR_DMA+0x1a>
 801135e:	2302      	movs	r3, #2
 8011360:	e0e7      	b.n	8011532 <I2C_Master_ISR_DMA+0x1ea>
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2240      	movs	r2, #64	@ 0x40
 8011366:	2101      	movs	r1, #1
 8011368:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	2210      	movs	r2, #16
 801136e:	4013      	ands	r3, r2
 8011370:	d017      	beq.n	80113a2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2210      	movs	r2, #16
 8011376:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011378:	d013      	beq.n	80113a2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2210      	movs	r2, #16
 8011380:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011386:	2204      	movs	r2, #4
 8011388:	431a      	orrs	r2, r3
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2120      	movs	r1, #32
 8011392:	0018      	movs	r0, r3
 8011394:	f001 f940 	bl	8012618 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	0018      	movs	r0, r3
 801139c:	f001 f807 	bl	80123ae <I2C_Flush_TXDR>
 80113a0:	e0c2      	b.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	2280      	movs	r2, #128	@ 0x80
 80113a6:	4013      	ands	r3, r2
 80113a8:	d100      	bne.n	80113ac <I2C_Master_ISR_DMA+0x64>
 80113aa:	e07c      	b.n	80114a6 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2240      	movs	r2, #64	@ 0x40
 80113b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80113b2:	d100      	bne.n	80113b6 <I2C_Master_ISR_DMA+0x6e>
 80113b4:	e077      	b.n	80114a6 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2140      	movs	r1, #64	@ 0x40
 80113c2:	438a      	bics	r2, r1
 80113c4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d055      	beq.n	801147c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	2312      	movs	r3, #18
 80113da:	18fb      	adds	r3, r7, r3
 80113dc:	0592      	lsls	r2, r2, #22
 80113de:	0d92      	lsrs	r2, r2, #22
 80113e0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	2bff      	cmp	r3, #255	@ 0xff
 80113ea:	d906      	bls.n	80113fa <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	22ff      	movs	r2, #255	@ 0xff
 80113f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80113f2:	2380      	movs	r3, #128	@ 0x80
 80113f4:	045b      	lsls	r3, r3, #17
 80113f6:	617b      	str	r3, [r7, #20]
 80113f8:	e010      	b.n	801141c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113fe:	b29a      	uxth	r2, r3
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011408:	4a4c      	ldr	r2, [pc, #304]	@ (801153c <I2C_Master_ISR_DMA+0x1f4>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d003      	beq.n	8011416 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011412:	617b      	str	r3, [r7, #20]
 8011414:	e002      	b.n	801141c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011416:	2380      	movs	r3, #128	@ 0x80
 8011418:	049b      	lsls	r3, r3, #18
 801141a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011420:	b2da      	uxtb	r2, r3
 8011422:	697c      	ldr	r4, [r7, #20]
 8011424:	2312      	movs	r3, #18
 8011426:	18fb      	adds	r3, r7, r3
 8011428:	8819      	ldrh	r1, [r3, #0]
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	2300      	movs	r3, #0
 801142e:	9300      	str	r3, [sp, #0]
 8011430:	0023      	movs	r3, r4
 8011432:	f001 f8b7 	bl	80125a4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801143a:	b29a      	uxth	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	b29a      	uxth	r2, r3
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2241      	movs	r2, #65	@ 0x41
 801144c:	5c9b      	ldrb	r3, [r3, r2]
 801144e:	b2db      	uxtb	r3, r3
 8011450:	2b22      	cmp	r3, #34	@ 0x22
 8011452:	d109      	bne.n	8011468 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	2180      	movs	r1, #128	@ 0x80
 8011460:	0209      	lsls	r1, r1, #8
 8011462:	430a      	orrs	r2, r1
 8011464:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011466:	e05f      	b.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2180      	movs	r1, #128	@ 0x80
 8011474:	01c9      	lsls	r1, r1, #7
 8011476:	430a      	orrs	r2, r1
 8011478:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801147a:	e055      	b.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	685a      	ldr	r2, [r3, #4]
 8011482:	2380      	movs	r3, #128	@ 0x80
 8011484:	049b      	lsls	r3, r3, #18
 8011486:	401a      	ands	r2, r3
 8011488:	2380      	movs	r3, #128	@ 0x80
 801148a:	049b      	lsls	r3, r3, #18
 801148c:	429a      	cmp	r2, r3
 801148e:	d004      	beq.n	801149a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	0018      	movs	r0, r3
 8011494:	f000 fb0c 	bl	8011ab0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011498:	e046      	b.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	2140      	movs	r1, #64	@ 0x40
 801149e:	0018      	movs	r0, r3
 80114a0:	f000 fe5a 	bl	8012158 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80114a4:	e040      	b.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	2240      	movs	r2, #64	@ 0x40
 80114aa:	4013      	ands	r3, r2
 80114ac:	d02c      	beq.n	8011508 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2240      	movs	r2, #64	@ 0x40
 80114b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114b4:	d028      	beq.n	8011508 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d11d      	bne.n	80114fc <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	685a      	ldr	r2, [r3, #4]
 80114c6:	2380      	movs	r3, #128	@ 0x80
 80114c8:	049b      	lsls	r3, r3, #18
 80114ca:	401a      	ands	r2, r3
 80114cc:	2380      	movs	r3, #128	@ 0x80
 80114ce:	049b      	lsls	r3, r3, #18
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d028      	beq.n	8011526 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114d8:	4a18      	ldr	r2, [pc, #96]	@ (801153c <I2C_Master_ISR_DMA+0x1f4>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d109      	bne.n	80114f2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	685a      	ldr	r2, [r3, #4]
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	2180      	movs	r1, #128	@ 0x80
 80114ea:	01c9      	lsls	r1, r1, #7
 80114ec:	430a      	orrs	r2, r1
 80114ee:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80114f0:	e019      	b.n	8011526 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	0018      	movs	r0, r3
 80114f6:	f000 fadb 	bl	8011ab0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80114fa:	e014      	b.n	8011526 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2140      	movs	r1, #64	@ 0x40
 8011500:	0018      	movs	r0, r3
 8011502:	f000 fe29 	bl	8012158 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011506:	e00e      	b.n	8011526 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	2220      	movs	r2, #32
 801150c:	4013      	ands	r3, r2
 801150e:	d00b      	beq.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2220      	movs	r2, #32
 8011514:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011516:	d007      	beq.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011518:	68ba      	ldr	r2, [r7, #8]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	0011      	movs	r1, r2
 801151e:	0018      	movs	r0, r3
 8011520:	f000 fb6c 	bl	8011bfc <I2C_ITMasterCplt>
 8011524:	e000      	b.n	8011528 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011526:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2240      	movs	r2, #64	@ 0x40
 801152c:	2100      	movs	r1, #0
 801152e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011530:	2300      	movs	r3, #0
}
 8011532:	0018      	movs	r0, r3
 8011534:	46bd      	mov	sp, r7
 8011536:	b007      	add	sp, #28
 8011538:	bd90      	pop	{r4, r7, pc}
 801153a:	46c0      	nop			@ (mov r8, r8)
 801153c:	ffff0000 	.word	0xffff0000

08011540 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011540:	b590      	push	{r4, r7, lr}
 8011542:	b089      	sub	sp, #36	@ 0x24
 8011544:	af02      	add	r7, sp, #8
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 801154c:	4b90      	ldr	r3, [pc, #576]	@ (8011790 <I2C_Mem_ISR_DMA+0x250>)
 801154e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2240      	movs	r2, #64	@ 0x40
 8011554:	5c9b      	ldrb	r3, [r3, r2]
 8011556:	2b01      	cmp	r3, #1
 8011558:	d101      	bne.n	801155e <I2C_Mem_ISR_DMA+0x1e>
 801155a:	2302      	movs	r3, #2
 801155c:	e113      	b.n	8011786 <I2C_Mem_ISR_DMA+0x246>
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2240      	movs	r2, #64	@ 0x40
 8011562:	2101      	movs	r1, #1
 8011564:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	2210      	movs	r2, #16
 801156a:	4013      	ands	r3, r2
 801156c:	d017      	beq.n	801159e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2210      	movs	r2, #16
 8011572:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011574:	d013      	beq.n	801159e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	2210      	movs	r2, #16
 801157c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011582:	2204      	movs	r2, #4
 8011584:	431a      	orrs	r2, r3
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2120      	movs	r1, #32
 801158e:	0018      	movs	r0, r3
 8011590:	f001 f842 	bl	8012618 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	0018      	movs	r0, r3
 8011598:	f000 ff09 	bl	80123ae <I2C_Flush_TXDR>
 801159c:	e0ee      	b.n	801177c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	2202      	movs	r2, #2
 80115a2:	4013      	ands	r3, r2
 80115a4:	d00d      	beq.n	80115c2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2202      	movs	r2, #2
 80115aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115ac:	d009      	beq.n	80115c2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80115b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2201      	movs	r2, #1
 80115bc:	4252      	negs	r2, r2
 80115be:	651a      	str	r2, [r3, #80]	@ 0x50
 80115c0:	e0dc      	b.n	801177c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	2280      	movs	r2, #128	@ 0x80
 80115c6:	4013      	ands	r3, r2
 80115c8:	d063      	beq.n	8011692 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2240      	movs	r2, #64	@ 0x40
 80115ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80115d0:	d05f      	beq.n	8011692 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2101      	movs	r1, #1
 80115d6:	0018      	movs	r0, r3
 80115d8:	f001 f8a8 	bl	801272c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2110      	movs	r1, #16
 80115e0:	0018      	movs	r0, r3
 80115e2:	f001 f819 	bl	8012618 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d04a      	beq.n	8011686 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	2bff      	cmp	r3, #255	@ 0xff
 80115f8:	d910      	bls.n	801161c <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	22ff      	movs	r2, #255	@ 0xff
 80115fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011604:	b299      	uxth	r1, r3
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801160a:	b2da      	uxtb	r2, r3
 801160c:	2380      	movs	r3, #128	@ 0x80
 801160e:	045b      	lsls	r3, r3, #17
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	2400      	movs	r4, #0
 8011614:	9400      	str	r4, [sp, #0]
 8011616:	f000 ffc5 	bl	80125a4 <I2C_TransferConfig>
 801161a:	e011      	b.n	8011640 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011620:	b29a      	uxth	r2, r3
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801162a:	b299      	uxth	r1, r3
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011630:	b2da      	uxtb	r2, r3
 8011632:	2380      	movs	r3, #128	@ 0x80
 8011634:	049b      	lsls	r3, r3, #18
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	2400      	movs	r4, #0
 801163a:	9400      	str	r4, [sp, #0]
 801163c:	f000 ffb2 	bl	80125a4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011644:	b29a      	uxth	r2, r3
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	b29a      	uxth	r2, r3
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2241      	movs	r2, #65	@ 0x41
 8011656:	5c9b      	ldrb	r3, [r3, r2]
 8011658:	b2db      	uxtb	r3, r3
 801165a:	2b22      	cmp	r3, #34	@ 0x22
 801165c:	d109      	bne.n	8011672 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2180      	movs	r1, #128	@ 0x80
 801166a:	0209      	lsls	r1, r1, #8
 801166c:	430a      	orrs	r2, r1
 801166e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011670:	e084      	b.n	801177c <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2180      	movs	r1, #128	@ 0x80
 801167e:	01c9      	lsls	r1, r1, #7
 8011680:	430a      	orrs	r2, r1
 8011682:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011684:	e07a      	b.n	801177c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2140      	movs	r1, #64	@ 0x40
 801168a:	0018      	movs	r0, r3
 801168c:	f000 fd64 	bl	8012158 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011690:	e074      	b.n	801177c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	2240      	movs	r2, #64	@ 0x40
 8011696:	4013      	ands	r3, r2
 8011698:	d062      	beq.n	8011760 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2240      	movs	r2, #64	@ 0x40
 801169e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80116a0:	d05e      	beq.n	8011760 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2101      	movs	r1, #1
 80116a6:	0018      	movs	r0, r3
 80116a8:	f001 f840 	bl	801272c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2110      	movs	r1, #16
 80116b0:	0018      	movs	r0, r3
 80116b2:	f000 ffb1 	bl	8012618 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2241      	movs	r2, #65	@ 0x41
 80116ba:	5c9b      	ldrb	r3, [r3, r2]
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	2b22      	cmp	r3, #34	@ 0x22
 80116c0:	d101      	bne.n	80116c6 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 80116c2:	4b34      	ldr	r3, [pc, #208]	@ (8011794 <I2C_Mem_ISR_DMA+0x254>)
 80116c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	2bff      	cmp	r3, #255	@ 0xff
 80116ce:	d911      	bls.n	80116f4 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	22ff      	movs	r2, #255	@ 0xff
 80116d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116da:	b299      	uxth	r1, r3
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116e0:	b2da      	uxtb	r2, r3
 80116e2:	2380      	movs	r3, #128	@ 0x80
 80116e4:	045c      	lsls	r4, r3, #17
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	0023      	movs	r3, r4
 80116ee:	f000 ff59 	bl	80125a4 <I2C_TransferConfig>
 80116f2:	e012      	b.n	801171a <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011702:	b299      	uxth	r1, r3
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011708:	b2da      	uxtb	r2, r3
 801170a:	2380      	movs	r3, #128	@ 0x80
 801170c:	049c      	lsls	r4, r3, #18
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	0023      	movs	r3, r4
 8011716:	f000 ff45 	bl	80125a4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801171e:	b29a      	uxth	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011724:	1ad3      	subs	r3, r2, r3
 8011726:	b29a      	uxth	r2, r3
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	2241      	movs	r2, #65	@ 0x41
 8011730:	5c9b      	ldrb	r3, [r3, r2]
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b22      	cmp	r3, #34	@ 0x22
 8011736:	d109      	bne.n	801174c <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	2180      	movs	r1, #128	@ 0x80
 8011744:	0209      	lsls	r1, r1, #8
 8011746:	430a      	orrs	r2, r1
 8011748:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801174a:	e017      	b.n	801177c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2180      	movs	r1, #128	@ 0x80
 8011758:	01c9      	lsls	r1, r1, #7
 801175a:	430a      	orrs	r2, r1
 801175c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801175e:	e00d      	b.n	801177c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	2220      	movs	r2, #32
 8011764:	4013      	ands	r3, r2
 8011766:	d009      	beq.n	801177c <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2220      	movs	r2, #32
 801176c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801176e:	d005      	beq.n	801177c <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	0011      	movs	r1, r2
 8011776:	0018      	movs	r0, r3
 8011778:	f000 fa40 	bl	8011bfc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2240      	movs	r2, #64	@ 0x40
 8011780:	2100      	movs	r1, #0
 8011782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011784:	2300      	movs	r3, #0
}
 8011786:	0018      	movs	r0, r3
 8011788:	46bd      	mov	sp, r7
 801178a:	b007      	add	sp, #28
 801178c:	bd90      	pop	{r4, r7, pc}
 801178e:	46c0      	nop			@ (mov r8, r8)
 8011790:	80002000 	.word	0x80002000
 8011794:	80002400 	.word	0x80002400

08011798 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b088      	sub	sp, #32
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80117aa:	2300      	movs	r3, #0
 80117ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2240      	movs	r2, #64	@ 0x40
 80117b2:	5c9b      	ldrb	r3, [r3, r2]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d101      	bne.n	80117bc <I2C_Slave_ISR_DMA+0x24>
 80117b8:	2302      	movs	r3, #2
 80117ba:	e0ce      	b.n	801195a <I2C_Slave_ISR_DMA+0x1c2>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2240      	movs	r2, #64	@ 0x40
 80117c0:	2101      	movs	r1, #1
 80117c2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	2220      	movs	r2, #32
 80117c8:	4013      	ands	r3, r2
 80117ca:	d00a      	beq.n	80117e2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2220      	movs	r2, #32
 80117d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80117d2:	d006      	beq.n	80117e2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80117d4:	68ba      	ldr	r2, [r7, #8]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	0011      	movs	r1, r2
 80117da:	0018      	movs	r0, r3
 80117dc:	f000 fadc 	bl	8011d98 <I2C_ITSlaveCplt>
 80117e0:	e0b6      	b.n	8011950 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	2210      	movs	r2, #16
 80117e6:	4013      	ands	r3, r2
 80117e8:	d100      	bne.n	80117ec <I2C_Slave_ISR_DMA+0x54>
 80117ea:	e0a3      	b.n	8011934 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2210      	movs	r2, #16
 80117f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80117f2:	d100      	bne.n	80117f6 <I2C_Slave_ISR_DMA+0x5e>
 80117f4:	e09e      	b.n	8011934 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	2380      	movs	r3, #128	@ 0x80
 80117fa:	01db      	lsls	r3, r3, #7
 80117fc:	4013      	ands	r3, r2
 80117fe:	d105      	bne.n	801180c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	2380      	movs	r3, #128	@ 0x80
 8011804:	021b      	lsls	r3, r3, #8
 8011806:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011808:	d100      	bne.n	801180c <I2C_Slave_ISR_DMA+0x74>
 801180a:	e08c      	b.n	8011926 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011810:	2b00      	cmp	r3, #0
 8011812:	d00c      	beq.n	801182e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	2380      	movs	r3, #128	@ 0x80
 8011818:	021b      	lsls	r3, r3, #8
 801181a:	4013      	ands	r3, r2
 801181c:	d007      	beq.n	801182e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d101      	bne.n	801182e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 801182a:	2301      	movs	r3, #1
 801182c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00c      	beq.n	8011850 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	2380      	movs	r3, #128	@ 0x80
 801183a:	01db      	lsls	r3, r3, #7
 801183c:	4013      	ands	r3, r2
 801183e:	d007      	beq.n	8011850 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d101      	bne.n	8011850 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 801184c:	2301      	movs	r3, #1
 801184e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	2b01      	cmp	r3, #1
 8011854:	d12d      	bne.n	80118b2 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2241      	movs	r2, #65	@ 0x41
 801185a:	5c9b      	ldrb	r3, [r3, r2]
 801185c:	b2db      	uxtb	r3, r3
 801185e:	2b28      	cmp	r3, #40	@ 0x28
 8011860:	d10b      	bne.n	801187a <I2C_Slave_ISR_DMA+0xe2>
 8011862:	69ba      	ldr	r2, [r7, #24]
 8011864:	2380      	movs	r3, #128	@ 0x80
 8011866:	049b      	lsls	r3, r3, #18
 8011868:	429a      	cmp	r2, r3
 801186a:	d106      	bne.n	801187a <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801186c:	68ba      	ldr	r2, [r7, #8]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	0011      	movs	r1, r2
 8011872:	0018      	movs	r0, r3
 8011874:	f000 fc18 	bl	80120a8 <I2C_ITListenCplt>
 8011878:	e054      	b.n	8011924 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2241      	movs	r2, #65	@ 0x41
 801187e:	5c9b      	ldrb	r3, [r3, r2]
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b29      	cmp	r3, #41	@ 0x29
 8011884:	d110      	bne.n	80118a8 <I2C_Slave_ISR_DMA+0x110>
 8011886:	69bb      	ldr	r3, [r7, #24]
 8011888:	4a36      	ldr	r2, [pc, #216]	@ (8011964 <I2C_Slave_ISR_DMA+0x1cc>)
 801188a:	4293      	cmp	r3, r2
 801188c:	d00c      	beq.n	80118a8 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2210      	movs	r2, #16
 8011894:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	0018      	movs	r0, r3
 801189a:	f000 fd88 	bl	80123ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	0018      	movs	r0, r3
 80118a2:	f000 f947 	bl	8011b34 <I2C_ITSlaveSeqCplt>
 80118a6:	e03d      	b.n	8011924 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2210      	movs	r2, #16
 80118ae:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80118b0:	e03e      	b.n	8011930 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	2210      	movs	r2, #16
 80118b8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118be:	2204      	movs	r2, #4
 80118c0:	431a      	orrs	r2, r3
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80118c6:	2317      	movs	r3, #23
 80118c8:	18fb      	adds	r3, r7, r3
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	2141      	movs	r1, #65	@ 0x41
 80118ce:	5c52      	ldrb	r2, [r2, r1]
 80118d0:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d004      	beq.n	80118e2 <I2C_Slave_ISR_DMA+0x14a>
 80118d8:	69ba      	ldr	r2, [r7, #24]
 80118da:	2380      	movs	r3, #128	@ 0x80
 80118dc:	045b      	lsls	r3, r3, #17
 80118de:	429a      	cmp	r2, r3
 80118e0:	d126      	bne.n	8011930 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80118e2:	2217      	movs	r2, #23
 80118e4:	18bb      	adds	r3, r7, r2
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	2b21      	cmp	r3, #33	@ 0x21
 80118ea:	d003      	beq.n	80118f4 <I2C_Slave_ISR_DMA+0x15c>
 80118ec:	18bb      	adds	r3, r7, r2
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	2b29      	cmp	r3, #41	@ 0x29
 80118f2:	d103      	bne.n	80118fc <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2221      	movs	r2, #33	@ 0x21
 80118f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80118fa:	e00b      	b.n	8011914 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80118fc:	2217      	movs	r2, #23
 80118fe:	18bb      	adds	r3, r7, r2
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	2b22      	cmp	r3, #34	@ 0x22
 8011904:	d003      	beq.n	801190e <I2C_Slave_ISR_DMA+0x176>
 8011906:	18bb      	adds	r3, r7, r2
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	2b2a      	cmp	r3, #42	@ 0x2a
 801190c:	d102      	bne.n	8011914 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2222      	movs	r2, #34	@ 0x22
 8011912:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	0011      	movs	r1, r2
 801191c:	0018      	movs	r0, r3
 801191e:	f000 fc1b 	bl	8012158 <I2C_ITError>
      if (treatdmanack == 1U)
 8011922:	e005      	b.n	8011930 <I2C_Slave_ISR_DMA+0x198>
 8011924:	e004      	b.n	8011930 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2210      	movs	r2, #16
 801192c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801192e:	e00f      	b.n	8011950 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8011930:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011932:	e00d      	b.n	8011950 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	2208      	movs	r2, #8
 8011938:	4013      	ands	r3, r2
 801193a:	d009      	beq.n	8011950 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2208      	movs	r2, #8
 8011940:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011942:	d005      	beq.n	8011950 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8011944:	68ba      	ldr	r2, [r7, #8]
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	0011      	movs	r1, r2
 801194a:	0018      	movs	r0, r3
 801194c:	f000 f80c 	bl	8011968 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	2240      	movs	r2, #64	@ 0x40
 8011954:	2100      	movs	r1, #0
 8011956:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	0018      	movs	r0, r3
 801195c:	46bd      	mov	sp, r7
 801195e:	b008      	add	sp, #32
 8011960:	bd80      	pop	{r7, pc}
 8011962:	46c0      	nop			@ (mov r8, r8)
 8011964:	ffff0000 	.word	0xffff0000

08011968 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011968:	b5b0      	push	{r4, r5, r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2241      	movs	r2, #65	@ 0x41
 8011976:	5c9b      	ldrb	r3, [r3, r2]
 8011978:	b2db      	uxtb	r3, r3
 801197a:	001a      	movs	r2, r3
 801197c:	2328      	movs	r3, #40	@ 0x28
 801197e:	4013      	ands	r3, r2
 8011980:	2b28      	cmp	r3, #40	@ 0x28
 8011982:	d000      	beq.n	8011986 <I2C_ITAddrCplt+0x1e>
 8011984:	e088      	b.n	8011a98 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	699b      	ldr	r3, [r3, #24]
 801198c:	0c1b      	lsrs	r3, r3, #16
 801198e:	b2da      	uxtb	r2, r3
 8011990:	250f      	movs	r5, #15
 8011992:	197b      	adds	r3, r7, r5
 8011994:	2101      	movs	r1, #1
 8011996:	400a      	ands	r2, r1
 8011998:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	699b      	ldr	r3, [r3, #24]
 80119a0:	0c1b      	lsrs	r3, r3, #16
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	200c      	movs	r0, #12
 80119a6:	183b      	adds	r3, r7, r0
 80119a8:	21fe      	movs	r1, #254	@ 0xfe
 80119aa:	400a      	ands	r2, r1
 80119ac:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	240a      	movs	r4, #10
 80119b8:	193b      	adds	r3, r7, r4
 80119ba:	0592      	lsls	r2, r2, #22
 80119bc:	0d92      	lsrs	r2, r2, #22
 80119be:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	b29a      	uxth	r2, r3
 80119c8:	2308      	movs	r3, #8
 80119ca:	18fb      	adds	r3, r7, r3
 80119cc:	21fe      	movs	r1, #254	@ 0xfe
 80119ce:	400a      	ands	r2, r1
 80119d0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	d148      	bne.n	8011a6c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80119da:	0021      	movs	r1, r4
 80119dc:	187b      	adds	r3, r7, r1
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	09db      	lsrs	r3, r3, #7
 80119e2:	b29a      	uxth	r2, r3
 80119e4:	183b      	adds	r3, r7, r0
 80119e6:	881b      	ldrh	r3, [r3, #0]
 80119e8:	4053      	eors	r3, r2
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	001a      	movs	r2, r3
 80119ee:	2306      	movs	r3, #6
 80119f0:	4013      	ands	r3, r2
 80119f2:	d120      	bne.n	8011a36 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80119f4:	183b      	adds	r3, r7, r0
 80119f6:	187a      	adds	r2, r7, r1
 80119f8:	8812      	ldrh	r2, [r2, #0]
 80119fa:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a00:	1c5a      	adds	r2, r3, #1
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a0a:	2b02      	cmp	r3, #2
 8011a0c:	d14c      	bne.n	8011aa8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2200      	movs	r2, #0
 8011a12:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2208      	movs	r2, #8
 8011a1a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2240      	movs	r2, #64	@ 0x40
 8011a20:	2100      	movs	r1, #0
 8011a22:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a24:	183b      	adds	r3, r7, r0
 8011a26:	881a      	ldrh	r2, [r3, #0]
 8011a28:	197b      	adds	r3, r7, r5
 8011a2a:	7819      	ldrb	r1, [r3, #0]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	0018      	movs	r0, r3
 8011a30:	f7ff fa1b 	bl	8010e6a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011a34:	e038      	b.n	8011aa8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011a36:	240c      	movs	r4, #12
 8011a38:	193b      	adds	r3, r7, r4
 8011a3a:	2208      	movs	r2, #8
 8011a3c:	18ba      	adds	r2, r7, r2
 8011a3e:	8812      	ldrh	r2, [r2, #0]
 8011a40:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011a42:	2380      	movs	r3, #128	@ 0x80
 8011a44:	021a      	lsls	r2, r3, #8
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	0011      	movs	r1, r2
 8011a4a:	0018      	movs	r0, r3
 8011a4c:	f000 fe6e 	bl	801272c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2240      	movs	r2, #64	@ 0x40
 8011a54:	2100      	movs	r1, #0
 8011a56:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a58:	193b      	adds	r3, r7, r4
 8011a5a:	881a      	ldrh	r2, [r3, #0]
 8011a5c:	230f      	movs	r3, #15
 8011a5e:	18fb      	adds	r3, r7, r3
 8011a60:	7819      	ldrb	r1, [r3, #0]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	0018      	movs	r0, r3
 8011a66:	f7ff fa00 	bl	8010e6a <HAL_I2C_AddrCallback>
}
 8011a6a:	e01d      	b.n	8011aa8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011a6c:	2380      	movs	r3, #128	@ 0x80
 8011a6e:	021a      	lsls	r2, r3, #8
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	0011      	movs	r1, r2
 8011a74:	0018      	movs	r0, r3
 8011a76:	f000 fe59 	bl	801272c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2240      	movs	r2, #64	@ 0x40
 8011a7e:	2100      	movs	r1, #0
 8011a80:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011a82:	230c      	movs	r3, #12
 8011a84:	18fb      	adds	r3, r7, r3
 8011a86:	881a      	ldrh	r2, [r3, #0]
 8011a88:	230f      	movs	r3, #15
 8011a8a:	18fb      	adds	r3, r7, r3
 8011a8c:	7819      	ldrb	r1, [r3, #0]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	0018      	movs	r0, r3
 8011a92:	f7ff f9ea 	bl	8010e6a <HAL_I2C_AddrCallback>
}
 8011a96:	e007      	b.n	8011aa8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2208      	movs	r2, #8
 8011a9e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2240      	movs	r2, #64	@ 0x40
 8011aa4:	2100      	movs	r1, #0
 8011aa6:	5499      	strb	r1, [r3, r2]
}
 8011aa8:	46c0      	nop			@ (mov r8, r8)
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	b004      	add	sp, #16
 8011aae:	bdb0      	pop	{r4, r5, r7, pc}

08011ab0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2242      	movs	r2, #66	@ 0x42
 8011abc:	2100      	movs	r1, #0
 8011abe:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2241      	movs	r2, #65	@ 0x41
 8011ac4:	5c9b      	ldrb	r3, [r3, r2]
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2b21      	cmp	r3, #33	@ 0x21
 8011aca:	d117      	bne.n	8011afc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2241      	movs	r2, #65	@ 0x41
 8011ad0:	2120      	movs	r1, #32
 8011ad2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2211      	movs	r2, #17
 8011ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2200      	movs	r2, #0
 8011ade:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2101      	movs	r1, #1
 8011ae4:	0018      	movs	r0, r3
 8011ae6:	f000 fe21 	bl	801272c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2240      	movs	r2, #64	@ 0x40
 8011aee:	2100      	movs	r1, #0
 8011af0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	0018      	movs	r0, r3
 8011af6:	f7ff f998 	bl	8010e2a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011afa:	e016      	b.n	8011b2a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2241      	movs	r2, #65	@ 0x41
 8011b00:	2120      	movs	r1, #32
 8011b02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2212      	movs	r2, #18
 8011b08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2102      	movs	r1, #2
 8011b14:	0018      	movs	r0, r3
 8011b16:	f000 fe09 	bl	801272c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2240      	movs	r2, #64	@ 0x40
 8011b1e:	2100      	movs	r1, #0
 8011b20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	0018      	movs	r0, r3
 8011b26:	f7ff f988 	bl	8010e3a <HAL_I2C_MasterRxCpltCallback>
}
 8011b2a:	46c0      	nop			@ (mov r8, r8)
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	b002      	add	sp, #8
 8011b30:	bd80      	pop	{r7, pc}
	...

08011b34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2242      	movs	r2, #66	@ 0x42
 8011b48:	2100      	movs	r1, #0
 8011b4a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011b4c:	68fa      	ldr	r2, [r7, #12]
 8011b4e:	2380      	movs	r3, #128	@ 0x80
 8011b50:	01db      	lsls	r3, r3, #7
 8011b52:	4013      	ands	r3, r2
 8011b54:	d008      	beq.n	8011b68 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	4924      	ldr	r1, [pc, #144]	@ (8011bf4 <I2C_ITSlaveSeqCplt+0xc0>)
 8011b62:	400a      	ands	r2, r1
 8011b64:	601a      	str	r2, [r3, #0]
 8011b66:	e00c      	b.n	8011b82 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011b68:	68fa      	ldr	r2, [r7, #12]
 8011b6a:	2380      	movs	r3, #128	@ 0x80
 8011b6c:	021b      	lsls	r3, r3, #8
 8011b6e:	4013      	ands	r3, r2
 8011b70:	d007      	beq.n	8011b82 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	491e      	ldr	r1, [pc, #120]	@ (8011bf8 <I2C_ITSlaveSeqCplt+0xc4>)
 8011b7e:	400a      	ands	r2, r1
 8011b80:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2241      	movs	r2, #65	@ 0x41
 8011b86:	5c9b      	ldrb	r3, [r3, r2]
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	2b29      	cmp	r3, #41	@ 0x29
 8011b8c:	d114      	bne.n	8011bb8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2241      	movs	r2, #65	@ 0x41
 8011b92:	2128      	movs	r1, #40	@ 0x28
 8011b94:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2221      	movs	r2, #33	@ 0x21
 8011b9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	0018      	movs	r0, r3
 8011ba2:	f000 fdc3 	bl	801272c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2240      	movs	r2, #64	@ 0x40
 8011baa:	2100      	movs	r1, #0
 8011bac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	0018      	movs	r0, r3
 8011bb2:	f7ff f94a 	bl	8010e4a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011bb6:	e019      	b.n	8011bec <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2241      	movs	r2, #65	@ 0x41
 8011bbc:	5c9b      	ldrb	r3, [r3, r2]
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bc2:	d113      	bne.n	8011bec <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2241      	movs	r2, #65	@ 0x41
 8011bc8:	2128      	movs	r1, #40	@ 0x28
 8011bca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2222      	movs	r2, #34	@ 0x22
 8011bd0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2102      	movs	r1, #2
 8011bd6:	0018      	movs	r0, r3
 8011bd8:	f000 fda8 	bl	801272c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2240      	movs	r2, #64	@ 0x40
 8011be0:	2100      	movs	r1, #0
 8011be2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	0018      	movs	r0, r3
 8011be8:	f7ff f937 	bl	8010e5a <HAL_I2C_SlaveRxCpltCallback>
}
 8011bec:	46c0      	nop			@ (mov r8, r8)
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	b004      	add	sp, #16
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	ffffbfff 	.word	0xffffbfff
 8011bf8:	ffff7fff 	.word	0xffff7fff

08011bfc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b086      	sub	sp, #24
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	2220      	movs	r2, #32
 8011c10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2241      	movs	r2, #65	@ 0x41
 8011c16:	5c9b      	ldrb	r3, [r3, r2]
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b21      	cmp	r3, #33	@ 0x21
 8011c1c:	d108      	bne.n	8011c30 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2101      	movs	r1, #1
 8011c22:	0018      	movs	r0, r3
 8011c24:	f000 fd82 	bl	801272c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2211      	movs	r2, #17
 8011c2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c2e:	e00d      	b.n	8011c4c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2241      	movs	r2, #65	@ 0x41
 8011c34:	5c9b      	ldrb	r3, [r3, r2]
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	2b22      	cmp	r3, #34	@ 0x22
 8011c3a:	d107      	bne.n	8011c4c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2102      	movs	r1, #2
 8011c40:	0018      	movs	r0, r3
 8011c42:	f000 fd73 	bl	801272c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2212      	movs	r2, #18
 8011c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	685a      	ldr	r2, [r3, #4]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	494e      	ldr	r1, [pc, #312]	@ (8011d90 <I2C_ITMasterCplt+0x194>)
 8011c58:	400a      	ands	r2, r1
 8011c5a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4a4b      	ldr	r2, [pc, #300]	@ (8011d94 <I2C_ITMasterCplt+0x198>)
 8011c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	2210      	movs	r2, #16
 8011c6c:	4013      	ands	r3, r2
 8011c6e:	d009      	beq.n	8011c84 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2210      	movs	r2, #16
 8011c76:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c7c:	2204      	movs	r2, #4
 8011c7e:	431a      	orrs	r2, r3
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2241      	movs	r2, #65	@ 0x41
 8011c88:	5c9b      	ldrb	r3, [r3, r2]
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	2b60      	cmp	r3, #96	@ 0x60
 8011c8e:	d109      	bne.n	8011ca4 <I2C_ITMasterCplt+0xa8>
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	2204      	movs	r2, #4
 8011c94:	4013      	ands	r3, r2
 8011c96:	d005      	beq.n	8011ca4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	0018      	movs	r0, r3
 8011ca8:	f000 fb81 	bl	80123ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cb0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2241      	movs	r2, #65	@ 0x41
 8011cb6:	5c9b      	ldrb	r3, [r3, r2]
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	2b60      	cmp	r3, #96	@ 0x60
 8011cbc:	d002      	beq.n	8011cc4 <I2C_ITMasterCplt+0xc8>
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d007      	beq.n	8011cd4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	0011      	movs	r1, r2
 8011ccc:	0018      	movs	r0, r3
 8011cce:	f000 fa43 	bl	8012158 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011cd2:	e058      	b.n	8011d86 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2241      	movs	r2, #65	@ 0x41
 8011cd8:	5c9b      	ldrb	r3, [r3, r2]
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b21      	cmp	r3, #33	@ 0x21
 8011cde:	d126      	bne.n	8011d2e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2241      	movs	r2, #65	@ 0x41
 8011ce4:	2120      	movs	r1, #32
 8011ce6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2200      	movs	r2, #0
 8011cec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2242      	movs	r2, #66	@ 0x42
 8011cf2:	5c9b      	ldrb	r3, [r3, r2]
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	2b40      	cmp	r3, #64	@ 0x40
 8011cf8:	d10c      	bne.n	8011d14 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2242      	movs	r2, #66	@ 0x42
 8011cfe:	2100      	movs	r1, #0
 8011d00:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2240      	movs	r2, #64	@ 0x40
 8011d06:	2100      	movs	r1, #0
 8011d08:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	0018      	movs	r0, r3
 8011d0e:	f7ff f8c4 	bl	8010e9a <HAL_I2C_MemTxCpltCallback>
}
 8011d12:	e038      	b.n	8011d86 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2242      	movs	r2, #66	@ 0x42
 8011d18:	2100      	movs	r1, #0
 8011d1a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2240      	movs	r2, #64	@ 0x40
 8011d20:	2100      	movs	r1, #0
 8011d22:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	0018      	movs	r0, r3
 8011d28:	f7ff f87f 	bl	8010e2a <HAL_I2C_MasterTxCpltCallback>
}
 8011d2c:	e02b      	b.n	8011d86 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2241      	movs	r2, #65	@ 0x41
 8011d32:	5c9b      	ldrb	r3, [r3, r2]
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	2b22      	cmp	r3, #34	@ 0x22
 8011d38:	d125      	bne.n	8011d86 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2241      	movs	r2, #65	@ 0x41
 8011d3e:	2120      	movs	r1, #32
 8011d40:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2242      	movs	r2, #66	@ 0x42
 8011d4c:	5c9b      	ldrb	r3, [r3, r2]
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	2b40      	cmp	r3, #64	@ 0x40
 8011d52:	d10c      	bne.n	8011d6e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2242      	movs	r2, #66	@ 0x42
 8011d58:	2100      	movs	r1, #0
 8011d5a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2240      	movs	r2, #64	@ 0x40
 8011d60:	2100      	movs	r1, #0
 8011d62:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	0018      	movs	r0, r3
 8011d68:	f7ff f89f 	bl	8010eaa <HAL_I2C_MemRxCpltCallback>
}
 8011d6c:	e00b      	b.n	8011d86 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2242      	movs	r2, #66	@ 0x42
 8011d72:	2100      	movs	r1, #0
 8011d74:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2240      	movs	r2, #64	@ 0x40
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	0018      	movs	r0, r3
 8011d82:	f7ff f85a 	bl	8010e3a <HAL_I2C_MasterRxCpltCallback>
}
 8011d86:	46c0      	nop			@ (mov r8, r8)
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	b006      	add	sp, #24
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	46c0      	nop			@ (mov r8, r8)
 8011d90:	fe00e800 	.word	0xfe00e800
 8011d94:	ffff0000 	.word	0xffff0000

08011d98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b086      	sub	sp, #24
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011db2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011db4:	200b      	movs	r0, #11
 8011db6:	183b      	adds	r3, r7, r0
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	2141      	movs	r1, #65	@ 0x41
 8011dbc:	5c52      	ldrb	r2, [r2, r1]
 8011dbe:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2220      	movs	r2, #32
 8011dc6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011dc8:	183b      	adds	r3, r7, r0
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b21      	cmp	r3, #33	@ 0x21
 8011dce:	d003      	beq.n	8011dd8 <I2C_ITSlaveCplt+0x40>
 8011dd0:	183b      	adds	r3, r7, r0
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	2b29      	cmp	r3, #41	@ 0x29
 8011dd6:	d109      	bne.n	8011dec <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011dd8:	4aac      	ldr	r2, [pc, #688]	@ (801208c <I2C_ITSlaveCplt+0x2f4>)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	0011      	movs	r1, r2
 8011dde:	0018      	movs	r0, r3
 8011de0:	f000 fca4 	bl	801272c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2221      	movs	r2, #33	@ 0x21
 8011de8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011dea:	e020      	b.n	8011e2e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011dec:	220b      	movs	r2, #11
 8011dee:	18bb      	adds	r3, r7, r2
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	2b22      	cmp	r3, #34	@ 0x22
 8011df4:	d003      	beq.n	8011dfe <I2C_ITSlaveCplt+0x66>
 8011df6:	18bb      	adds	r3, r7, r2
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dfc:	d109      	bne.n	8011e12 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011dfe:	4aa4      	ldr	r2, [pc, #656]	@ (8012090 <I2C_ITSlaveCplt+0x2f8>)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	0011      	movs	r1, r2
 8011e04:	0018      	movs	r0, r3
 8011e06:	f000 fc91 	bl	801272c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2222      	movs	r2, #34	@ 0x22
 8011e0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8011e10:	e00d      	b.n	8011e2e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8011e12:	230b      	movs	r3, #11
 8011e14:	18fb      	adds	r3, r7, r3
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	2b28      	cmp	r3, #40	@ 0x28
 8011e1a:	d108      	bne.n	8011e2e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8011e1c:	4a9d      	ldr	r2, [pc, #628]	@ (8012094 <I2C_ITSlaveCplt+0x2fc>)
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	0011      	movs	r1, r2
 8011e22:	0018      	movs	r0, r3
 8011e24:	f000 fc82 	bl	801272c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	685a      	ldr	r2, [r3, #4]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	2180      	movs	r1, #128	@ 0x80
 8011e3a:	0209      	lsls	r1, r1, #8
 8011e3c:	430a      	orrs	r2, r1
 8011e3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	685a      	ldr	r2, [r3, #4]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	4993      	ldr	r1, [pc, #588]	@ (8012098 <I2C_ITSlaveCplt+0x300>)
 8011e4c:	400a      	ands	r2, r1
 8011e4e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	0018      	movs	r0, r3
 8011e54:	f000 faab 	bl	80123ae <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011e58:	693a      	ldr	r2, [r7, #16]
 8011e5a:	2380      	movs	r3, #128	@ 0x80
 8011e5c:	01db      	lsls	r3, r3, #7
 8011e5e:	4013      	ands	r3, r2
 8011e60:	d013      	beq.n	8011e8a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	498b      	ldr	r1, [pc, #556]	@ (801209c <I2C_ITSlaveCplt+0x304>)
 8011e6e:	400a      	ands	r2, r1
 8011e70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d01f      	beq.n	8011eba <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011e88:	e017      	b.n	8011eba <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011e8a:	693a      	ldr	r2, [r7, #16]
 8011e8c:	2380      	movs	r3, #128	@ 0x80
 8011e8e:	021b      	lsls	r3, r3, #8
 8011e90:	4013      	ands	r3, r2
 8011e92:	d012      	beq.n	8011eba <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	4980      	ldr	r1, [pc, #512]	@ (80120a0 <I2C_ITSlaveCplt+0x308>)
 8011ea0:	400a      	ands	r2, r1
 8011ea2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d006      	beq.n	8011eba <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	2204      	movs	r2, #4
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	d020      	beq.n	8011f04 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	2204      	movs	r2, #4
 8011ec6:	4393      	bics	r3, r2
 8011ec8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed4:	b2d2      	uxtb	r2, r2
 8011ed6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011edc:	1c5a      	adds	r2, r3, #1
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00c      	beq.n	8011f04 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011eee:	3b01      	subs	r3, #1
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	3b01      	subs	r3, #1
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d005      	beq.n	8011f1a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f12:	2204      	movs	r2, #4
 8011f14:	431a      	orrs	r2, r3
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	2210      	movs	r2, #16
 8011f1e:	4013      	ands	r3, r2
 8011f20:	d04f      	beq.n	8011fc2 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	2210      	movs	r2, #16
 8011f26:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011f28:	d04b      	beq.n	8011fc2 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d12d      	bne.n	8011f90 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2241      	movs	r2, #65	@ 0x41
 8011f38:	5c9b      	ldrb	r3, [r3, r2]
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2b28      	cmp	r3, #40	@ 0x28
 8011f3e:	d10b      	bne.n	8011f58 <I2C_ITSlaveCplt+0x1c0>
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	2380      	movs	r3, #128	@ 0x80
 8011f44:	049b      	lsls	r3, r3, #18
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d106      	bne.n	8011f58 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8011f4a:	697a      	ldr	r2, [r7, #20]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	0011      	movs	r1, r2
 8011f50:	0018      	movs	r0, r3
 8011f52:	f000 f8a9 	bl	80120a8 <I2C_ITListenCplt>
 8011f56:	e034      	b.n	8011fc2 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2241      	movs	r2, #65	@ 0x41
 8011f5c:	5c9b      	ldrb	r3, [r3, r2]
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	2b29      	cmp	r3, #41	@ 0x29
 8011f62:	d110      	bne.n	8011f86 <I2C_ITSlaveCplt+0x1ee>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	4a4f      	ldr	r2, [pc, #316]	@ (80120a4 <I2C_ITSlaveCplt+0x30c>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d00c      	beq.n	8011f86 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2210      	movs	r2, #16
 8011f72:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	0018      	movs	r0, r3
 8011f78:	f000 fa19 	bl	80123ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	0018      	movs	r0, r3
 8011f80:	f7ff fdd8 	bl	8011b34 <I2C_ITSlaveSeqCplt>
 8011f84:	e01d      	b.n	8011fc2 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2210      	movs	r2, #16
 8011f8c:	61da      	str	r2, [r3, #28]
 8011f8e:	e018      	b.n	8011fc2 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2210      	movs	r2, #16
 8011f96:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f9c:	2204      	movs	r2, #4
 8011f9e:	431a      	orrs	r2, r3
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d004      	beq.n	8011fb4 <I2C_ITSlaveCplt+0x21c>
 8011faa:	68fa      	ldr	r2, [r7, #12]
 8011fac:	2380      	movs	r3, #128	@ 0x80
 8011fae:	045b      	lsls	r3, r3, #17
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d106      	bne.n	8011fc2 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	0011      	movs	r1, r2
 8011fbc:	0018      	movs	r0, r3
 8011fbe:	f000 f8cb 	bl	8012158 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2242      	movs	r2, #66	@ 0x42
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d013      	beq.n	8012000 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	0011      	movs	r1, r2
 8011fe0:	0018      	movs	r0, r3
 8011fe2:	f000 f8b9 	bl	8012158 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2241      	movs	r2, #65	@ 0x41
 8011fea:	5c9b      	ldrb	r3, [r3, r2]
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	2b28      	cmp	r3, #40	@ 0x28
 8011ff0:	d147      	bne.n	8012082 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011ff2:	697a      	ldr	r2, [r7, #20]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	0011      	movs	r1, r2
 8011ff8:	0018      	movs	r0, r3
 8011ffa:	f000 f855 	bl	80120a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011ffe:	e040      	b.n	8012082 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012004:	4a27      	ldr	r2, [pc, #156]	@ (80120a4 <I2C_ITSlaveCplt+0x30c>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d016      	beq.n	8012038 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	0018      	movs	r0, r3
 801200e:	f7ff fd91 	bl	8011b34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	4a23      	ldr	r2, [pc, #140]	@ (80120a4 <I2C_ITSlaveCplt+0x30c>)
 8012016:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2241      	movs	r2, #65	@ 0x41
 801201c:	2120      	movs	r1, #32
 801201e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2200      	movs	r2, #0
 8012024:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2240      	movs	r2, #64	@ 0x40
 801202a:	2100      	movs	r1, #0
 801202c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	0018      	movs	r0, r3
 8012032:	f7fe ff2a 	bl	8010e8a <HAL_I2C_ListenCpltCallback>
}
 8012036:	e024      	b.n	8012082 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2241      	movs	r2, #65	@ 0x41
 801203c:	5c9b      	ldrb	r3, [r3, r2]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b22      	cmp	r3, #34	@ 0x22
 8012042:	d10f      	bne.n	8012064 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2241      	movs	r2, #65	@ 0x41
 8012048:	2120      	movs	r1, #32
 801204a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2240      	movs	r2, #64	@ 0x40
 8012056:	2100      	movs	r1, #0
 8012058:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	0018      	movs	r0, r3
 801205e:	f7fe fefc 	bl	8010e5a <HAL_I2C_SlaveRxCpltCallback>
}
 8012062:	e00e      	b.n	8012082 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2241      	movs	r2, #65	@ 0x41
 8012068:	2120      	movs	r1, #32
 801206a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2240      	movs	r2, #64	@ 0x40
 8012076:	2100      	movs	r1, #0
 8012078:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	0018      	movs	r0, r3
 801207e:	f7fe fee4 	bl	8010e4a <HAL_I2C_SlaveTxCpltCallback>
}
 8012082:	46c0      	nop			@ (mov r8, r8)
 8012084:	46bd      	mov	sp, r7
 8012086:	b006      	add	sp, #24
 8012088:	bd80      	pop	{r7, pc}
 801208a:	46c0      	nop			@ (mov r8, r8)
 801208c:	00008001 	.word	0x00008001
 8012090:	00008002 	.word	0x00008002
 8012094:	00008003 	.word	0x00008003
 8012098:	fe00e800 	.word	0xfe00e800
 801209c:	ffffbfff 	.word	0xffffbfff
 80120a0:	ffff7fff 	.word	0xffff7fff
 80120a4:	ffff0000 	.word	0xffff0000

080120a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	4a26      	ldr	r2, [pc, #152]	@ (8012150 <I2C_ITListenCplt+0xa8>)
 80120b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2241      	movs	r2, #65	@ 0x41
 80120c2:	2120      	movs	r1, #32
 80120c4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2242      	movs	r2, #66	@ 0x42
 80120ca:	2100      	movs	r1, #0
 80120cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2200      	movs	r2, #0
 80120d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	2204      	movs	r2, #4
 80120d8:	4013      	ands	r3, r2
 80120da:	d022      	beq.n	8012122 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120e6:	b2d2      	uxtb	r2, r2
 80120e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ee:	1c5a      	adds	r2, r3, #1
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d012      	beq.n	8012122 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012100:	3b01      	subs	r3, #1
 8012102:	b29a      	uxth	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801210c:	b29b      	uxth	r3, r3
 801210e:	3b01      	subs	r3, #1
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801211a:	2204      	movs	r2, #4
 801211c:	431a      	orrs	r2, r3
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012122:	4a0c      	ldr	r2, [pc, #48]	@ (8012154 <I2C_ITListenCplt+0xac>)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	0011      	movs	r1, r2
 8012128:	0018      	movs	r0, r3
 801212a:	f000 faff 	bl	801272c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	2210      	movs	r2, #16
 8012134:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2240      	movs	r2, #64	@ 0x40
 801213a:	2100      	movs	r1, #0
 801213c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	0018      	movs	r0, r3
 8012142:	f7fe fea2 	bl	8010e8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8012146:	46c0      	nop			@ (mov r8, r8)
 8012148:	46bd      	mov	sp, r7
 801214a:	b002      	add	sp, #8
 801214c:	bd80      	pop	{r7, pc}
 801214e:	46c0      	nop			@ (mov r8, r8)
 8012150:	ffff0000 	.word	0xffff0000
 8012154:	00008003 	.word	0x00008003

08012158 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8012162:	200f      	movs	r0, #15
 8012164:	183b      	adds	r3, r7, r0
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	2141      	movs	r1, #65	@ 0x41
 801216a:	5c52      	ldrb	r2, [r2, r1]
 801216c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2242      	movs	r2, #66	@ 0x42
 8012172:	2100      	movs	r1, #0
 8012174:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4a72      	ldr	r2, [pc, #456]	@ (8012344 <I2C_ITError+0x1ec>)
 801217a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	431a      	orrs	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801218e:	183b      	adds	r3, r7, r0
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	2b28      	cmp	r3, #40	@ 0x28
 8012194:	d007      	beq.n	80121a6 <I2C_ITError+0x4e>
 8012196:	183b      	adds	r3, r7, r0
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	2b29      	cmp	r3, #41	@ 0x29
 801219c:	d003      	beq.n	80121a6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801219e:	183b      	adds	r3, r7, r0
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80121a4:	d10c      	bne.n	80121c0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2103      	movs	r1, #3
 80121aa:	0018      	movs	r0, r3
 80121ac:	f000 fabe 	bl	801272c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2241      	movs	r2, #65	@ 0x41
 80121b4:	2128      	movs	r1, #40	@ 0x28
 80121b6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	4a63      	ldr	r2, [pc, #396]	@ (8012348 <I2C_ITError+0x1f0>)
 80121bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80121be:	e032      	b.n	8012226 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80121c0:	4a62      	ldr	r2, [pc, #392]	@ (801234c <I2C_ITError+0x1f4>)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	0011      	movs	r1, r2
 80121c6:	0018      	movs	r0, r3
 80121c8:	f000 fab0 	bl	801272c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	0018      	movs	r0, r3
 80121d0:	f000 f8ed 	bl	80123ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2241      	movs	r2, #65	@ 0x41
 80121d8:	5c9b      	ldrb	r3, [r3, r2]
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	2b60      	cmp	r3, #96	@ 0x60
 80121de:	d01f      	beq.n	8012220 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2241      	movs	r2, #65	@ 0x41
 80121e4:	2120      	movs	r1, #32
 80121e6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	699b      	ldr	r3, [r3, #24]
 80121ee:	2220      	movs	r2, #32
 80121f0:	4013      	ands	r3, r2
 80121f2:	2b20      	cmp	r3, #32
 80121f4:	d114      	bne.n	8012220 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	699b      	ldr	r3, [r3, #24]
 80121fc:	2210      	movs	r2, #16
 80121fe:	4013      	ands	r3, r2
 8012200:	2b10      	cmp	r3, #16
 8012202:	d109      	bne.n	8012218 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2210      	movs	r2, #16
 801220a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012210:	2204      	movs	r2, #4
 8012212:	431a      	orrs	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2220      	movs	r2, #32
 801221e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801222a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012230:	2b00      	cmp	r3, #0
 8012232:	d03b      	beq.n	80122ac <I2C_ITError+0x154>
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b11      	cmp	r3, #17
 8012238:	d002      	beq.n	8012240 <I2C_ITError+0xe8>
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	2b21      	cmp	r3, #33	@ 0x21
 801223e:	d135      	bne.n	80122ac <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	2380      	movs	r3, #128	@ 0x80
 8012248:	01db      	lsls	r3, r3, #7
 801224a:	401a      	ands	r2, r3
 801224c:	2380      	movs	r3, #128	@ 0x80
 801224e:	01db      	lsls	r3, r3, #7
 8012250:	429a      	cmp	r2, r3
 8012252:	d107      	bne.n	8012264 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	681a      	ldr	r2, [r3, #0]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	493c      	ldr	r1, [pc, #240]	@ (8012350 <I2C_ITError+0x1f8>)
 8012260:	400a      	ands	r2, r1
 8012262:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012268:	0018      	movs	r0, r3
 801226a:	f7fd fba9 	bl	800f9c0 <HAL_DMA_GetState>
 801226e:	0003      	movs	r3, r0
 8012270:	2b01      	cmp	r3, #1
 8012272:	d016      	beq.n	80122a2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012278:	4a36      	ldr	r2, [pc, #216]	@ (8012354 <I2C_ITError+0x1fc>)
 801227a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2240      	movs	r2, #64	@ 0x40
 8012280:	2100      	movs	r1, #0
 8012282:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012288:	0018      	movs	r0, r3
 801228a:	f7fd fa6d 	bl	800f768 <HAL_DMA_Abort_IT>
 801228e:	1e03      	subs	r3, r0, #0
 8012290:	d051      	beq.n	8012336 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801229c:	0018      	movs	r0, r3
 801229e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80122a0:	e049      	b.n	8012336 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	0018      	movs	r0, r3
 80122a6:	f000 f859 	bl	801235c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80122aa:	e044      	b.n	8012336 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d03b      	beq.n	801232c <I2C_ITError+0x1d4>
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	2b12      	cmp	r3, #18
 80122b8:	d002      	beq.n	80122c0 <I2C_ITError+0x168>
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	2b22      	cmp	r3, #34	@ 0x22
 80122be:	d135      	bne.n	801232c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	2380      	movs	r3, #128	@ 0x80
 80122c8:	021b      	lsls	r3, r3, #8
 80122ca:	401a      	ands	r2, r3
 80122cc:	2380      	movs	r3, #128	@ 0x80
 80122ce:	021b      	lsls	r3, r3, #8
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d107      	bne.n	80122e4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	681a      	ldr	r2, [r3, #0]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	491e      	ldr	r1, [pc, #120]	@ (8012358 <I2C_ITError+0x200>)
 80122e0:	400a      	ands	r2, r1
 80122e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122e8:	0018      	movs	r0, r3
 80122ea:	f7fd fb69 	bl	800f9c0 <HAL_DMA_GetState>
 80122ee:	0003      	movs	r3, r0
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d016      	beq.n	8012322 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122f8:	4a16      	ldr	r2, [pc, #88]	@ (8012354 <I2C_ITError+0x1fc>)
 80122fa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2240      	movs	r2, #64	@ 0x40
 8012300:	2100      	movs	r1, #0
 8012302:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012308:	0018      	movs	r0, r3
 801230a:	f7fd fa2d 	bl	800f768 <HAL_DMA_Abort_IT>
 801230e:	1e03      	subs	r3, r0, #0
 8012310:	d013      	beq.n	801233a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801231c:	0018      	movs	r0, r3
 801231e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012320:	e00b      	b.n	801233a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	0018      	movs	r0, r3
 8012326:	f000 f819 	bl	801235c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801232a:	e006      	b.n	801233a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	0018      	movs	r0, r3
 8012330:	f000 f814 	bl	801235c <I2C_TreatErrorCallback>
  }
}
 8012334:	e002      	b.n	801233c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012336:	46c0      	nop			@ (mov r8, r8)
 8012338:	e000      	b.n	801233c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801233a:	46c0      	nop			@ (mov r8, r8)
}
 801233c:	46c0      	nop			@ (mov r8, r8)
 801233e:	46bd      	mov	sp, r7
 8012340:	b004      	add	sp, #16
 8012342:	bd80      	pop	{r7, pc}
 8012344:	ffff0000 	.word	0xffff0000
 8012348:	08011149 	.word	0x08011149
 801234c:	00008003 	.word	0x00008003
 8012350:	ffffbfff 	.word	0xffffbfff
 8012354:	08012567 	.word	0x08012567
 8012358:	ffff7fff 	.word	0xffff7fff

0801235c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2241      	movs	r2, #65	@ 0x41
 8012368:	5c9b      	ldrb	r3, [r3, r2]
 801236a:	b2db      	uxtb	r3, r3
 801236c:	2b60      	cmp	r3, #96	@ 0x60
 801236e:	d10f      	bne.n	8012390 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2241      	movs	r2, #65	@ 0x41
 8012374:	2120      	movs	r1, #32
 8012376:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2200      	movs	r2, #0
 801237c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2240      	movs	r2, #64	@ 0x40
 8012382:	2100      	movs	r1, #0
 8012384:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	0018      	movs	r0, r3
 801238a:	f7fe fd9e 	bl	8010eca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801238e:	e00a      	b.n	80123a6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2240      	movs	r2, #64	@ 0x40
 801239a:	2100      	movs	r1, #0
 801239c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	0018      	movs	r0, r3
 80123a2:	f7fe fd8a 	bl	8010eba <HAL_I2C_ErrorCallback>
}
 80123a6:	46c0      	nop			@ (mov r8, r8)
 80123a8:	46bd      	mov	sp, r7
 80123aa:	b002      	add	sp, #8
 80123ac:	bd80      	pop	{r7, pc}

080123ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b082      	sub	sp, #8
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	699b      	ldr	r3, [r3, #24]
 80123bc:	2202      	movs	r2, #2
 80123be:	4013      	ands	r3, r2
 80123c0:	2b02      	cmp	r3, #2
 80123c2:	d103      	bne.n	80123cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2200      	movs	r2, #0
 80123ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	699b      	ldr	r3, [r3, #24]
 80123d2:	2201      	movs	r2, #1
 80123d4:	4013      	ands	r3, r2
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d007      	beq.n	80123ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	699a      	ldr	r2, [r3, #24]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2101      	movs	r1, #1
 80123e6:	430a      	orrs	r2, r1
 80123e8:	619a      	str	r2, [r3, #24]
  }
}
 80123ea:	46c0      	nop			@ (mov r8, r8)
 80123ec:	46bd      	mov	sp, r7
 80123ee:	b002      	add	sp, #8
 80123f0:	bd80      	pop	{r7, pc}
	...

080123f4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012400:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	4920      	ldr	r1, [pc, #128]	@ (8012490 <I2C_DMAMasterTransmitCplt+0x9c>)
 801240e:	400a      	ands	r2, r1
 8012410:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012416:	b29b      	uxth	r3, r3
 8012418:	2b00      	cmp	r3, #0
 801241a:	d105      	bne.n	8012428 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2120      	movs	r1, #32
 8012420:	0018      	movs	r0, r3
 8012422:	f000 f8f9 	bl	8012618 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012426:	e02e      	b.n	8012486 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801242c:	68fa      	ldr	r2, [r7, #12]
 801242e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012430:	189a      	adds	r2, r3, r2
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801243a:	b29b      	uxth	r3, r3
 801243c:	2bff      	cmp	r3, #255	@ 0xff
 801243e:	d903      	bls.n	8012448 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	22ff      	movs	r2, #255	@ 0xff
 8012444:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012446:	e004      	b.n	8012452 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801244c:	b29a      	uxth	r2, r3
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801245a:	0019      	movs	r1, r3
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	3328      	adds	r3, #40	@ 0x28
 8012462:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012468:	f7fd f898 	bl	800f59c <HAL_DMA_Start_IT>
 801246c:	1e03      	subs	r3, r0, #0
 801246e:	d005      	beq.n	801247c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2110      	movs	r1, #16
 8012474:	0018      	movs	r0, r3
 8012476:	f7ff fe6f 	bl	8012158 <I2C_ITError>
}
 801247a:	e004      	b.n	8012486 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2140      	movs	r1, #64	@ 0x40
 8012480:	0018      	movs	r0, r3
 8012482:	f000 f8c9 	bl	8012618 <I2C_Enable_IRQ>
}
 8012486:	46c0      	nop			@ (mov r8, r8)
 8012488:	46bd      	mov	sp, r7
 801248a:	b004      	add	sp, #16
 801248c:	bd80      	pop	{r7, pc}
 801248e:	46c0      	nop			@ (mov r8, r8)
 8012490:	ffffbfff 	.word	0xffffbfff

08012494 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124a0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4920      	ldr	r1, [pc, #128]	@ (8012530 <I2C_DMAMasterReceiveCplt+0x9c>)
 80124ae:	400a      	ands	r2, r1
 80124b0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d105      	bne.n	80124c8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	2120      	movs	r1, #32
 80124c0:	0018      	movs	r0, r3
 80124c2:	f000 f8a9 	bl	8012618 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80124c6:	e02e      	b.n	8012526 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124cc:	68fa      	ldr	r2, [r7, #12]
 80124ce:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80124d0:	189a      	adds	r2, r3, r2
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80124da:	b29b      	uxth	r3, r3
 80124dc:	2bff      	cmp	r3, #255	@ 0xff
 80124de:	d903      	bls.n	80124e8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	22ff      	movs	r2, #255	@ 0xff
 80124e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80124e6:	e004      	b.n	80124f2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	3324      	adds	r3, #36	@ 0x24
 80124fc:	0019      	movs	r1, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012502:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012508:	f7fd f848 	bl	800f59c <HAL_DMA_Start_IT>
 801250c:	1e03      	subs	r3, r0, #0
 801250e:	d005      	beq.n	801251c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2110      	movs	r1, #16
 8012514:	0018      	movs	r0, r3
 8012516:	f7ff fe1f 	bl	8012158 <I2C_ITError>
}
 801251a:	e004      	b.n	8012526 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2140      	movs	r1, #64	@ 0x40
 8012520:	0018      	movs	r0, r3
 8012522:	f000 f879 	bl	8012618 <I2C_Enable_IRQ>
}
 8012526:	46c0      	nop			@ (mov r8, r8)
 8012528:	46bd      	mov	sp, r7
 801252a:	b004      	add	sp, #16
 801252c:	bd80      	pop	{r7, pc}
 801252e:	46c0      	nop			@ (mov r8, r8)
 8012530:	ffff7fff 	.word	0xffff7fff

08012534 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012540:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	685a      	ldr	r2, [r3, #4]
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2180      	movs	r1, #128	@ 0x80
 801254e:	0209      	lsls	r1, r1, #8
 8012550:	430a      	orrs	r2, r1
 8012552:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2110      	movs	r1, #16
 8012558:	0018      	movs	r0, r3
 801255a:	f7ff fdfd 	bl	8012158 <I2C_ITError>
}
 801255e:	46c0      	nop			@ (mov r8, r8)
 8012560:	46bd      	mov	sp, r7
 8012562:	b004      	add	sp, #16
 8012564:	bd80      	pop	{r7, pc}

08012566 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012566:	b580      	push	{r7, lr}
 8012568:	b084      	sub	sp, #16
 801256a:	af00      	add	r7, sp, #0
 801256c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012572:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012578:	2b00      	cmp	r3, #0
 801257a:	d003      	beq.n	8012584 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012580:	2200      	movs	r2, #0
 8012582:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012588:	2b00      	cmp	r3, #0
 801258a:	d003      	beq.n	8012594 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012590:	2200      	movs	r2, #0
 8012592:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	0018      	movs	r0, r3
 8012598:	f7ff fee0 	bl	801235c <I2C_TreatErrorCallback>
}
 801259c:	46c0      	nop			@ (mov r8, r8)
 801259e:	46bd      	mov	sp, r7
 80125a0:	b004      	add	sp, #16
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80125a4:	b590      	push	{r4, r7, lr}
 80125a6:	b087      	sub	sp, #28
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	0008      	movs	r0, r1
 80125ae:	0011      	movs	r1, r2
 80125b0:	607b      	str	r3, [r7, #4]
 80125b2:	240a      	movs	r4, #10
 80125b4:	193b      	adds	r3, r7, r4
 80125b6:	1c02      	adds	r2, r0, #0
 80125b8:	801a      	strh	r2, [r3, #0]
 80125ba:	2009      	movs	r0, #9
 80125bc:	183b      	adds	r3, r7, r0
 80125be:	1c0a      	adds	r2, r1, #0
 80125c0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80125c2:	193b      	adds	r3, r7, r4
 80125c4:	881b      	ldrh	r3, [r3, #0]
 80125c6:	059b      	lsls	r3, r3, #22
 80125c8:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80125ca:	183b      	adds	r3, r7, r0
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	0419      	lsls	r1, r3, #16
 80125d0:	23ff      	movs	r3, #255	@ 0xff
 80125d2:	041b      	lsls	r3, r3, #16
 80125d4:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80125d6:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80125dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125de:	4313      	orrs	r3, r2
 80125e0:	005b      	lsls	r3, r3, #1
 80125e2:	085b      	lsrs	r3, r3, #1
 80125e4:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80125ee:	0d51      	lsrs	r1, r2, #21
 80125f0:	2280      	movs	r2, #128	@ 0x80
 80125f2:	00d2      	lsls	r2, r2, #3
 80125f4:	400a      	ands	r2, r1
 80125f6:	4907      	ldr	r1, [pc, #28]	@ (8012614 <I2C_TransferConfig+0x70>)
 80125f8:	430a      	orrs	r2, r1
 80125fa:	43d2      	mvns	r2, r2
 80125fc:	401a      	ands	r2, r3
 80125fe:	0011      	movs	r1, r2
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	697a      	ldr	r2, [r7, #20]
 8012606:	430a      	orrs	r2, r1
 8012608:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801260a:	46c0      	nop			@ (mov r8, r8)
 801260c:	46bd      	mov	sp, r7
 801260e:	b007      	add	sp, #28
 8012610:	bd90      	pop	{r4, r7, pc}
 8012612:	46c0      	nop			@ (mov r8, r8)
 8012614:	03ff63ff 	.word	0x03ff63ff

08012618 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	000a      	movs	r2, r1
 8012622:	1cbb      	adds	r3, r7, #2
 8012624:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012626:	2300      	movs	r3, #0
 8012628:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801262e:	4b3c      	ldr	r3, [pc, #240]	@ (8012720 <I2C_Enable_IRQ+0x108>)
 8012630:	429a      	cmp	r2, r3
 8012632:	d035      	beq.n	80126a0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012638:	4b3a      	ldr	r3, [pc, #232]	@ (8012724 <I2C_Enable_IRQ+0x10c>)
 801263a:	429a      	cmp	r2, r3
 801263c:	d030      	beq.n	80126a0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012642:	4b39      	ldr	r3, [pc, #228]	@ (8012728 <I2C_Enable_IRQ+0x110>)
 8012644:	429a      	cmp	r2, r3
 8012646:	d02b      	beq.n	80126a0 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012648:	1cbb      	adds	r3, r7, #2
 801264a:	2200      	movs	r2, #0
 801264c:	5e9b      	ldrsh	r3, [r3, r2]
 801264e:	2b00      	cmp	r3, #0
 8012650:	da03      	bge.n	801265a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	22b8      	movs	r2, #184	@ 0xb8
 8012656:	4313      	orrs	r3, r2
 8012658:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801265a:	1cbb      	adds	r3, r7, #2
 801265c:	881b      	ldrh	r3, [r3, #0]
 801265e:	2201      	movs	r2, #1
 8012660:	4013      	ands	r3, r2
 8012662:	d003      	beq.n	801266c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	22f2      	movs	r2, #242	@ 0xf2
 8012668:	4313      	orrs	r3, r2
 801266a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801266c:	1cbb      	adds	r3, r7, #2
 801266e:	881b      	ldrh	r3, [r3, #0]
 8012670:	2202      	movs	r2, #2
 8012672:	4013      	ands	r3, r2
 8012674:	d003      	beq.n	801267e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	22f4      	movs	r2, #244	@ 0xf4
 801267a:	4313      	orrs	r3, r2
 801267c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801267e:	1cbb      	adds	r3, r7, #2
 8012680:	881b      	ldrh	r3, [r3, #0]
 8012682:	2b10      	cmp	r3, #16
 8012684:	d103      	bne.n	801268e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2290      	movs	r2, #144	@ 0x90
 801268a:	4313      	orrs	r3, r2
 801268c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801268e:	1cbb      	adds	r3, r7, #2
 8012690:	881b      	ldrh	r3, [r3, #0]
 8012692:	2b20      	cmp	r3, #32
 8012694:	d137      	bne.n	8012706 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	2220      	movs	r2, #32
 801269a:	4313      	orrs	r3, r2
 801269c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801269e:	e032      	b.n	8012706 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80126a0:	1cbb      	adds	r3, r7, #2
 80126a2:	2200      	movs	r2, #0
 80126a4:	5e9b      	ldrsh	r3, [r3, r2]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	da03      	bge.n	80126b2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	22b8      	movs	r2, #184	@ 0xb8
 80126ae:	4313      	orrs	r3, r2
 80126b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80126b2:	1cbb      	adds	r3, r7, #2
 80126b4:	881b      	ldrh	r3, [r3, #0]
 80126b6:	2201      	movs	r2, #1
 80126b8:	4013      	ands	r3, r2
 80126ba:	d003      	beq.n	80126c4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	22f2      	movs	r2, #242	@ 0xf2
 80126c0:	4313      	orrs	r3, r2
 80126c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80126c4:	1cbb      	adds	r3, r7, #2
 80126c6:	881b      	ldrh	r3, [r3, #0]
 80126c8:	2202      	movs	r2, #2
 80126ca:	4013      	ands	r3, r2
 80126cc:	d003      	beq.n	80126d6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	22f4      	movs	r2, #244	@ 0xf4
 80126d2:	4313      	orrs	r3, r2
 80126d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80126d6:	1cbb      	adds	r3, r7, #2
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	2b10      	cmp	r3, #16
 80126dc:	d103      	bne.n	80126e6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2290      	movs	r2, #144	@ 0x90
 80126e2:	4313      	orrs	r3, r2
 80126e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80126e6:	1cbb      	adds	r3, r7, #2
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	2b20      	cmp	r3, #32
 80126ec:	d103      	bne.n	80126f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2260      	movs	r2, #96	@ 0x60
 80126f2:	4313      	orrs	r3, r2
 80126f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80126f6:	1cbb      	adds	r3, r7, #2
 80126f8:	881b      	ldrh	r3, [r3, #0]
 80126fa:	2b40      	cmp	r3, #64	@ 0x40
 80126fc:	d103      	bne.n	8012706 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	2240      	movs	r2, #64	@ 0x40
 8012702:	4313      	orrs	r3, r2
 8012704:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6819      	ldr	r1, [r3, #0]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	68fa      	ldr	r2, [r7, #12]
 8012712:	430a      	orrs	r2, r1
 8012714:	601a      	str	r2, [r3, #0]
}
 8012716:	46c0      	nop			@ (mov r8, r8)
 8012718:	46bd      	mov	sp, r7
 801271a:	b004      	add	sp, #16
 801271c:	bd80      	pop	{r7, pc}
 801271e:	46c0      	nop			@ (mov r8, r8)
 8012720:	08011349 	.word	0x08011349
 8012724:	08011799 	.word	0x08011799
 8012728:	08011541 	.word	0x08011541

0801272c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	000a      	movs	r2, r1
 8012736:	1cbb      	adds	r3, r7, #2
 8012738:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801273a:	2300      	movs	r3, #0
 801273c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801273e:	1cbb      	adds	r3, r7, #2
 8012740:	881b      	ldrh	r3, [r3, #0]
 8012742:	2201      	movs	r2, #1
 8012744:	4013      	ands	r3, r2
 8012746:	d010      	beq.n	801276a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2242      	movs	r2, #66	@ 0x42
 801274c:	4313      	orrs	r3, r2
 801274e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2241      	movs	r2, #65	@ 0x41
 8012754:	5c9b      	ldrb	r3, [r3, r2]
 8012756:	b2db      	uxtb	r3, r3
 8012758:	001a      	movs	r2, r3
 801275a:	2328      	movs	r3, #40	@ 0x28
 801275c:	4013      	ands	r3, r2
 801275e:	2b28      	cmp	r3, #40	@ 0x28
 8012760:	d003      	beq.n	801276a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	22b0      	movs	r2, #176	@ 0xb0
 8012766:	4313      	orrs	r3, r2
 8012768:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801276a:	1cbb      	adds	r3, r7, #2
 801276c:	881b      	ldrh	r3, [r3, #0]
 801276e:	2202      	movs	r2, #2
 8012770:	4013      	ands	r3, r2
 8012772:	d010      	beq.n	8012796 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2244      	movs	r2, #68	@ 0x44
 8012778:	4313      	orrs	r3, r2
 801277a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2241      	movs	r2, #65	@ 0x41
 8012780:	5c9b      	ldrb	r3, [r3, r2]
 8012782:	b2db      	uxtb	r3, r3
 8012784:	001a      	movs	r2, r3
 8012786:	2328      	movs	r3, #40	@ 0x28
 8012788:	4013      	ands	r3, r2
 801278a:	2b28      	cmp	r3, #40	@ 0x28
 801278c:	d003      	beq.n	8012796 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	22b0      	movs	r2, #176	@ 0xb0
 8012792:	4313      	orrs	r3, r2
 8012794:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012796:	1cbb      	adds	r3, r7, #2
 8012798:	2200      	movs	r2, #0
 801279a:	5e9b      	ldrsh	r3, [r3, r2]
 801279c:	2b00      	cmp	r3, #0
 801279e:	da03      	bge.n	80127a8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	22b8      	movs	r2, #184	@ 0xb8
 80127a4:	4313      	orrs	r3, r2
 80127a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80127a8:	1cbb      	adds	r3, r7, #2
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	2b10      	cmp	r3, #16
 80127ae:	d103      	bne.n	80127b8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2290      	movs	r2, #144	@ 0x90
 80127b4:	4313      	orrs	r3, r2
 80127b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80127b8:	1cbb      	adds	r3, r7, #2
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	2b20      	cmp	r3, #32
 80127be:	d103      	bne.n	80127c8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	2220      	movs	r2, #32
 80127c4:	4313      	orrs	r3, r2
 80127c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80127c8:	1cbb      	adds	r3, r7, #2
 80127ca:	881b      	ldrh	r3, [r3, #0]
 80127cc:	2b40      	cmp	r3, #64	@ 0x40
 80127ce:	d103      	bne.n	80127d8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	2240      	movs	r2, #64	@ 0x40
 80127d4:	4313      	orrs	r3, r2
 80127d6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	43d9      	mvns	r1, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	400a      	ands	r2, r1
 80127e8:	601a      	str	r2, [r3, #0]
}
 80127ea:	46c0      	nop			@ (mov r8, r8)
 80127ec:	46bd      	mov	sp, r7
 80127ee:	b004      	add	sp, #16
 80127f0:	bd80      	pop	{r7, pc}
	...

080127f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2241      	movs	r2, #65	@ 0x41
 8012802:	5c9b      	ldrb	r3, [r3, r2]
 8012804:	b2db      	uxtb	r3, r3
 8012806:	2b20      	cmp	r3, #32
 8012808:	d138      	bne.n	801287c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2240      	movs	r2, #64	@ 0x40
 801280e:	5c9b      	ldrb	r3, [r3, r2]
 8012810:	2b01      	cmp	r3, #1
 8012812:	d101      	bne.n	8012818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012814:	2302      	movs	r3, #2
 8012816:	e032      	b.n	801287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2240      	movs	r2, #64	@ 0x40
 801281c:	2101      	movs	r1, #1
 801281e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2241      	movs	r2, #65	@ 0x41
 8012824:	2124      	movs	r1, #36	@ 0x24
 8012826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2101      	movs	r1, #1
 8012834:	438a      	bics	r2, r1
 8012836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4911      	ldr	r1, [pc, #68]	@ (8012888 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012844:	400a      	ands	r2, r1
 8012846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	6819      	ldr	r1, [r3, #0]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	683a      	ldr	r2, [r7, #0]
 8012854:	430a      	orrs	r2, r1
 8012856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2101      	movs	r1, #1
 8012864:	430a      	orrs	r2, r1
 8012866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2241      	movs	r2, #65	@ 0x41
 801286c:	2120      	movs	r1, #32
 801286e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2240      	movs	r2, #64	@ 0x40
 8012874:	2100      	movs	r1, #0
 8012876:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012878:	2300      	movs	r3, #0
 801287a:	e000      	b.n	801287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801287c:	2302      	movs	r3, #2
  }
}
 801287e:	0018      	movs	r0, r3
 8012880:	46bd      	mov	sp, r7
 8012882:	b002      	add	sp, #8
 8012884:	bd80      	pop	{r7, pc}
 8012886:	46c0      	nop			@ (mov r8, r8)
 8012888:	ffffefff 	.word	0xffffefff

0801288c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2241      	movs	r2, #65	@ 0x41
 801289a:	5c9b      	ldrb	r3, [r3, r2]
 801289c:	b2db      	uxtb	r3, r3
 801289e:	2b20      	cmp	r3, #32
 80128a0:	d139      	bne.n	8012916 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2240      	movs	r2, #64	@ 0x40
 80128a6:	5c9b      	ldrb	r3, [r3, r2]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d101      	bne.n	80128b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80128ac:	2302      	movs	r3, #2
 80128ae:	e033      	b.n	8012918 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2240      	movs	r2, #64	@ 0x40
 80128b4:	2101      	movs	r1, #1
 80128b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2241      	movs	r2, #65	@ 0x41
 80128bc:	2124      	movs	r1, #36	@ 0x24
 80128be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2101      	movs	r1, #1
 80128cc:	438a      	bics	r2, r1
 80128ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	4a11      	ldr	r2, [pc, #68]	@ (8012920 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80128dc:	4013      	ands	r3, r2
 80128de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	021b      	lsls	r3, r3, #8
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	4313      	orrs	r3, r2
 80128e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	68fa      	ldr	r2, [r7, #12]
 80128f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2101      	movs	r1, #1
 80128fe:	430a      	orrs	r2, r1
 8012900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2241      	movs	r2, #65	@ 0x41
 8012906:	2120      	movs	r1, #32
 8012908:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2240      	movs	r2, #64	@ 0x40
 801290e:	2100      	movs	r1, #0
 8012910:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012912:	2300      	movs	r3, #0
 8012914:	e000      	b.n	8012918 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012916:	2302      	movs	r3, #2
  }
}
 8012918:	0018      	movs	r0, r3
 801291a:	46bd      	mov	sp, r7
 801291c:	b004      	add	sp, #16
 801291e:	bd80      	pop	{r7, pc}
 8012920:	fffff0ff 	.word	0xfffff0ff

08012924 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d101      	bne.n	8012936 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8012932:	2301      	movs	r3, #1
 8012934:	e06d      	b.n	8012a12 <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	0018      	movs	r0, r3
 801293a:	f000 f875 	bl	8012a28 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	4a36      	ldr	r2, [pc, #216]	@ (8012a1c <HAL_IWDG_Init+0xf8>)
 8012944:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4a35      	ldr	r2, [pc, #212]	@ (8012a20 <HAL_IWDG_Init+0xfc>)
 801294c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	687a      	ldr	r2, [r7, #4]
 8012954:	6852      	ldr	r2, [r2, #4]
 8012956:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	6892      	ldr	r2, [r2, #8]
 8012960:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 8012962:	f7fb fa4f 	bl	800de04 <HAL_GetTick>
 8012966:	0003      	movs	r3, r0
 8012968:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801296a:	e00e      	b.n	801298a <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801296c:	f7fb fa4a 	bl	800de04 <HAL_GetTick>
 8012970:	0002      	movs	r2, r0
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	1ad3      	subs	r3, r2, r3
 8012976:	2b21      	cmp	r3, #33	@ 0x21
 8012978:	d907      	bls.n	801298a <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	68db      	ldr	r3, [r3, #12]
 8012980:	2202      	movs	r2, #2
 8012982:	4013      	ands	r3, r2
 8012984:	d001      	beq.n	801298a <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8012986:	2303      	movs	r3, #3
 8012988:	e043      	b.n	8012a12 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	2202      	movs	r2, #2
 8012992:	4013      	ands	r3, r2
 8012994:	d1ea      	bne.n	801296c <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	691b      	ldr	r3, [r3, #16]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d105      	bne.n	80129aa <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2280      	movs	r2, #128	@ 0x80
 80129a4:	01d2      	lsls	r2, r2, #7
 80129a6:	615a      	str	r2, [r3, #20]
 80129a8:	e007      	b.n	80129ba <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	691a      	ldr	r2, [r3, #16]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	21c0      	movs	r1, #192	@ 0xc0
 80129b4:	0209      	lsls	r1, r1, #8
 80129b6:	430a      	orrs	r2, r1
 80129b8:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80129ba:	f7fb fa23 	bl	800de04 <HAL_GetTick>
 80129be:	0003      	movs	r3, r0
 80129c0:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80129c2:	e00e      	b.n	80129e2 <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80129c4:	f7fb fa1e 	bl	800de04 <HAL_GetTick>
 80129c8:	0002      	movs	r2, r0
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	1ad3      	subs	r3, r2, r3
 80129ce:	2b21      	cmp	r3, #33	@ 0x21
 80129d0:	d907      	bls.n	80129e2 <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	220f      	movs	r2, #15
 80129da:	4013      	ands	r3, r2
 80129dc:	d001      	beq.n	80129e2 <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 80129de:	2303      	movs	r3, #3
 80129e0:	e017      	b.n	8012a12 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	220f      	movs	r2, #15
 80129ea:	4013      	ands	r3, r2
 80129ec:	d1ea      	bne.n	80129c4 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	691a      	ldr	r2, [r3, #16]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d005      	beq.n	8012a08 <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	68d2      	ldr	r2, [r2, #12]
 8012a04:	611a      	str	r2, [r3, #16]
 8012a06:	e003      	b.n	8012a10 <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	4a05      	ldr	r2, [pc, #20]	@ (8012a24 <HAL_IWDG_Init+0x100>)
 8012a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012a10:	2300      	movs	r3, #0
}
 8012a12:	0018      	movs	r0, r3
 8012a14:	46bd      	mov	sp, r7
 8012a16:	b004      	add	sp, #16
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	46c0      	nop			@ (mov r8, r8)
 8012a1c:	0000cccc 	.word	0x0000cccc
 8012a20:	00005555 	.word	0x00005555
 8012a24:	0000aaaa 	.word	0x0000aaaa

08012a28 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8012a30:	46c0      	nop			@ (mov r8, r8)
 8012a32:	46bd      	mov	sp, r7
 8012a34:	b002      	add	sp, #8
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	4a03      	ldr	r2, [pc, #12]	@ (8012a54 <HAL_IWDG_Refresh+0x1c>)
 8012a46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012a48:	2300      	movs	r3, #0
}
 8012a4a:	0018      	movs	r0, r3
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	b002      	add	sp, #8
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	46c0      	nop			@ (mov r8, r8)
 8012a54:	0000aaaa 	.word	0x0000aaaa

08012a58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	2380      	movs	r3, #128	@ 0x80
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d137      	bne.n	8012ada <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8012a6a:	4b27      	ldr	r3, [pc, #156]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	23c0      	movs	r3, #192	@ 0xc0
 8012a70:	00db      	lsls	r3, r3, #3
 8012a72:	401a      	ands	r2, r3
 8012a74:	2380      	movs	r3, #128	@ 0x80
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d040      	beq.n	8012afe <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8012a7c:	4b22      	ldr	r3, [pc, #136]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4a22      	ldr	r2, [pc, #136]	@ (8012b0c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8012a82:	401a      	ands	r2, r3
 8012a84:	4b20      	ldr	r3, [pc, #128]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012a86:	2180      	movs	r1, #128	@ 0x80
 8012a88:	0089      	lsls	r1, r1, #2
 8012a8a:	430a      	orrs	r2, r1
 8012a8c:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8012a8e:	4b20      	ldr	r3, [pc, #128]	@ (8012b10 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2232      	movs	r2, #50	@ 0x32
 8012a94:	4353      	muls	r3, r2
 8012a96:	491f      	ldr	r1, [pc, #124]	@ (8012b14 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8012a98:	0018      	movs	r0, r3
 8012a9a:	f7ed fb3d 	bl	8000118 <__udivsi3>
 8012a9e:	0003      	movs	r3, r0
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012aa4:	e002      	b.n	8012aac <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012aac:	4b16      	ldr	r3, [pc, #88]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012aae:	695a      	ldr	r2, [r3, #20]
 8012ab0:	2380      	movs	r3, #128	@ 0x80
 8012ab2:	00db      	lsls	r3, r3, #3
 8012ab4:	401a      	ands	r2, r3
 8012ab6:	2380      	movs	r3, #128	@ 0x80
 8012ab8:	00db      	lsls	r3, r3, #3
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d102      	bne.n	8012ac4 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1f0      	bne.n	8012aa6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8012ac4:	4b10      	ldr	r3, [pc, #64]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012ac6:	695a      	ldr	r2, [r3, #20]
 8012ac8:	2380      	movs	r3, #128	@ 0x80
 8012aca:	00db      	lsls	r3, r3, #3
 8012acc:	401a      	ands	r2, r3
 8012ace:	2380      	movs	r3, #128	@ 0x80
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d113      	bne.n	8012afe <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8012ad6:	2303      	movs	r3, #3
 8012ad8:	e012      	b.n	8012b00 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8012ada:	4b0b      	ldr	r3, [pc, #44]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	23c0      	movs	r3, #192	@ 0xc0
 8012ae0:	00db      	lsls	r3, r3, #3
 8012ae2:	401a      	ands	r2, r3
 8012ae4:	2380      	movs	r3, #128	@ 0x80
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d008      	beq.n	8012afe <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8012aec:	4b06      	ldr	r3, [pc, #24]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4a06      	ldr	r2, [pc, #24]	@ (8012b0c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8012af2:	401a      	ands	r2, r3
 8012af4:	4b04      	ldr	r3, [pc, #16]	@ (8012b08 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8012af6:	2180      	movs	r1, #128	@ 0x80
 8012af8:	00c9      	lsls	r1, r1, #3
 8012afa:	430a      	orrs	r2, r1
 8012afc:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	0018      	movs	r0, r3
 8012b02:	46bd      	mov	sp, r7
 8012b04:	b004      	add	sp, #16
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	40007000 	.word	0x40007000
 8012b0c:	fffff9ff 	.word	0xfffff9ff
 8012b10:	20000220 	.word	0x20000220
 8012b14:	000f4240 	.word	0x000f4240

08012b18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8012b1c:	4b03      	ldr	r3, [pc, #12]	@ (8012b2c <HAL_PWREx_GetVoltageRange+0x14>)
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	23c0      	movs	r3, #192	@ 0xc0
 8012b22:	00db      	lsls	r3, r3, #3
 8012b24:	4013      	ands	r3, r2
}
 8012b26:	0018      	movs	r0, r3
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	40007000 	.word	0x40007000

08012b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012b30:	b5b0      	push	{r4, r5, r7, lr}
 8012b32:	b088      	sub	sp, #32
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012b38:	4bc9      	ldr	r3, [pc, #804]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012b3a:	689b      	ldr	r3, [r3, #8]
 8012b3c:	2238      	movs	r2, #56	@ 0x38
 8012b3e:	4013      	ands	r3, r2
 8012b40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012b42:	4bc7      	ldr	r3, [pc, #796]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	2203      	movs	r2, #3
 8012b48:	4013      	ands	r3, r2
 8012b4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2210      	movs	r2, #16
 8012b52:	4013      	ands	r3, r2
 8012b54:	d100      	bne.n	8012b58 <HAL_RCC_OscConfig+0x28>
 8012b56:	e0ef      	b.n	8012d38 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d007      	beq.n	8012b6e <HAL_RCC_OscConfig+0x3e>
 8012b5e:	69bb      	ldr	r3, [r7, #24]
 8012b60:	2b18      	cmp	r3, #24
 8012b62:	d000      	beq.n	8012b66 <HAL_RCC_OscConfig+0x36>
 8012b64:	e093      	b.n	8012c8e <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d000      	beq.n	8012b6e <HAL_RCC_OscConfig+0x3e>
 8012b6c:	e08f      	b.n	8012c8e <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8012b6e:	4bbc      	ldr	r3, [pc, #752]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2202      	movs	r2, #2
 8012b74:	4013      	ands	r3, r2
 8012b76:	d006      	beq.n	8012b86 <HAL_RCC_OscConfig+0x56>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	69db      	ldr	r3, [r3, #28]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d102      	bne.n	8012b86 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8012b80:	2301      	movs	r3, #1
 8012b82:	f000 fbf2 	bl	801336a <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b8a:	4bb5      	ldr	r3, [pc, #724]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2108      	movs	r1, #8
 8012b90:	400b      	ands	r3, r1
 8012b92:	d004      	beq.n	8012b9e <HAL_RCC_OscConfig+0x6e>
 8012b94:	4bb2      	ldr	r3, [pc, #712]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	21f0      	movs	r1, #240	@ 0xf0
 8012b9a:	400b      	ands	r3, r1
 8012b9c:	e005      	b.n	8012baa <HAL_RCC_OscConfig+0x7a>
 8012b9e:	49b0      	ldr	r1, [pc, #704]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012ba0:	2394      	movs	r3, #148	@ 0x94
 8012ba2:	58cb      	ldr	r3, [r1, r3]
 8012ba4:	091b      	lsrs	r3, r3, #4
 8012ba6:	21f0      	movs	r1, #240	@ 0xf0
 8012ba8:	400b      	ands	r3, r1
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d225      	bcs.n	8012bfa <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bb2:	0018      	movs	r0, r3
 8012bb4:	f000 fd90 	bl	80136d8 <RCC_SetFlashLatencyFromMSIRange>
 8012bb8:	1e03      	subs	r3, r0, #0
 8012bba:	d002      	beq.n	8012bc2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	f000 fbd4 	bl	801336a <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012bc4:	681a      	ldr	r2, [r3, #0]
 8012bc6:	4ba6      	ldr	r3, [pc, #664]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012bc8:	2108      	movs	r1, #8
 8012bca:	430a      	orrs	r2, r1
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	4ba4      	ldr	r3, [pc, #656]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	22f0      	movs	r2, #240	@ 0xf0
 8012bd4:	4393      	bics	r3, r2
 8012bd6:	0019      	movs	r1, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012bdc:	4ba0      	ldr	r3, [pc, #640]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012bde:	430a      	orrs	r2, r1
 8012be0:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012be2:	4b9f      	ldr	r3, [pc, #636]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	4a9f      	ldr	r2, [pc, #636]	@ (8012e64 <HAL_RCC_OscConfig+0x334>)
 8012be8:	4013      	ands	r3, r2
 8012bea:	0019      	movs	r1, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6a1b      	ldr	r3, [r3, #32]
 8012bf0:	021a      	lsls	r2, r3, #8
 8012bf2:	4b9b      	ldr	r3, [pc, #620]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012bf4:	430a      	orrs	r2, r1
 8012bf6:	605a      	str	r2, [r3, #4]
 8012bf8:	e027      	b.n	8012c4a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012bfa:	4b99      	ldr	r3, [pc, #612]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	4b98      	ldr	r3, [pc, #608]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c00:	2108      	movs	r1, #8
 8012c02:	430a      	orrs	r2, r1
 8012c04:	601a      	str	r2, [r3, #0]
 8012c06:	4b96      	ldr	r3, [pc, #600]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	22f0      	movs	r2, #240	@ 0xf0
 8012c0c:	4393      	bics	r3, r2
 8012c0e:	0019      	movs	r1, r3
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c14:	4b92      	ldr	r3, [pc, #584]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c16:	430a      	orrs	r2, r1
 8012c18:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012c1a:	4b91      	ldr	r3, [pc, #580]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	4a91      	ldr	r2, [pc, #580]	@ (8012e64 <HAL_RCC_OscConfig+0x334>)
 8012c20:	4013      	ands	r3, r2
 8012c22:	0019      	movs	r1, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6a1b      	ldr	r3, [r3, #32]
 8012c28:	021a      	lsls	r2, r3, #8
 8012c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c2c:	430a      	orrs	r2, r1
 8012c2e:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d109      	bne.n	8012c4a <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c3a:	0018      	movs	r0, r3
 8012c3c:	f000 fd4c 	bl	80136d8 <RCC_SetFlashLatencyFromMSIRange>
 8012c40:	1e03      	subs	r3, r0, #0
 8012c42:	d002      	beq.n	8012c4a <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8012c44:	2301      	movs	r3, #1
 8012c46:	f000 fb90 	bl	801336a <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8012c4a:	f000 fc87 	bl	801355c <HAL_RCC_GetSysClockFreq>
 8012c4e:	0001      	movs	r1, r0
 8012c50:	4b83      	ldr	r3, [pc, #524]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c52:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8012c54:	0a1b      	lsrs	r3, r3, #8
 8012c56:	220f      	movs	r2, #15
 8012c58:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8012c5a:	4a83      	ldr	r2, [pc, #524]	@ (8012e68 <HAL_RCC_OscConfig+0x338>)
 8012c5c:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8012c5e:	001a      	movs	r2, r3
 8012c60:	231f      	movs	r3, #31
 8012c62:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8012c64:	000a      	movs	r2, r1
 8012c66:	40da      	lsrs	r2, r3
 8012c68:	4b80      	ldr	r3, [pc, #512]	@ (8012e6c <HAL_RCC_OscConfig+0x33c>)
 8012c6a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8012c6c:	4b80      	ldr	r3, [pc, #512]	@ (8012e70 <HAL_RCC_OscConfig+0x340>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	250f      	movs	r5, #15
 8012c72:	197c      	adds	r4, r7, r5
 8012c74:	0018      	movs	r0, r3
 8012c76:	f7fb f86b 	bl	800dd50 <HAL_InitTick>
 8012c7a:	0003      	movs	r3, r0
 8012c7c:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8012c7e:	197b      	adds	r3, r7, r5
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d057      	beq.n	8012d36 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8012c86:	197b      	adds	r3, r7, r5
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	f000 fb6e 	bl	801336a <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	69db      	ldr	r3, [r3, #28]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d035      	beq.n	8012d02 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8012c96:	4b72      	ldr	r3, [pc, #456]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	4b71      	ldr	r3, [pc, #452]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012c9c:	2101      	movs	r1, #1
 8012c9e:	430a      	orrs	r2, r1
 8012ca0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012ca2:	f7fb f8af 	bl	800de04 <HAL_GetTick>
 8012ca6:	0003      	movs	r3, r0
 8012ca8:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8012caa:	e009      	b.n	8012cc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8012cac:	f7fb f8aa 	bl	800de04 <HAL_GetTick>
 8012cb0:	0002      	movs	r2, r0
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	1ad3      	subs	r3, r2, r3
 8012cb6:	2b02      	cmp	r3, #2
 8012cb8:	d902      	bls.n	8012cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012cba:	2303      	movs	r3, #3
 8012cbc:	f000 fb55 	bl	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8012cc0:	4b67      	ldr	r3, [pc, #412]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2202      	movs	r2, #2
 8012cc6:	4013      	ands	r3, r2
 8012cc8:	d0f0      	beq.n	8012cac <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012cca:	4b65      	ldr	r3, [pc, #404]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012ccc:	681a      	ldr	r2, [r3, #0]
 8012cce:	4b64      	ldr	r3, [pc, #400]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012cd0:	2108      	movs	r1, #8
 8012cd2:	430a      	orrs	r2, r1
 8012cd4:	601a      	str	r2, [r3, #0]
 8012cd6:	4b62      	ldr	r3, [pc, #392]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	22f0      	movs	r2, #240	@ 0xf0
 8012cdc:	4393      	bics	r3, r2
 8012cde:	0019      	movs	r1, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012ce6:	430a      	orrs	r2, r1
 8012ce8:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012cea:	4b5d      	ldr	r3, [pc, #372]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	4a5d      	ldr	r2, [pc, #372]	@ (8012e64 <HAL_RCC_OscConfig+0x334>)
 8012cf0:	4013      	ands	r3, r2
 8012cf2:	0019      	movs	r1, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6a1b      	ldr	r3, [r3, #32]
 8012cf8:	021a      	lsls	r2, r3, #8
 8012cfa:	4b59      	ldr	r3, [pc, #356]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012cfc:	430a      	orrs	r2, r1
 8012cfe:	605a      	str	r2, [r3, #4]
 8012d00:	e01a      	b.n	8012d38 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8012d02:	4b57      	ldr	r3, [pc, #348]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d04:	681a      	ldr	r2, [r3, #0]
 8012d06:	4b56      	ldr	r3, [pc, #344]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d08:	2101      	movs	r1, #1
 8012d0a:	438a      	bics	r2, r1
 8012d0c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012d0e:	f7fb f879 	bl	800de04 <HAL_GetTick>
 8012d12:	0003      	movs	r3, r0
 8012d14:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8012d16:	e008      	b.n	8012d2a <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8012d18:	f7fb f874 	bl	800de04 <HAL_GetTick>
 8012d1c:	0002      	movs	r2, r0
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	1ad3      	subs	r3, r2, r3
 8012d22:	2b02      	cmp	r3, #2
 8012d24:	d901      	bls.n	8012d2a <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8012d26:	2303      	movs	r3, #3
 8012d28:	e31f      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8012d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2202      	movs	r2, #2
 8012d30:	4013      	ands	r3, r2
 8012d32:	d1f1      	bne.n	8012d18 <HAL_RCC_OscConfig+0x1e8>
 8012d34:	e000      	b.n	8012d38 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8012d36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	4013      	ands	r3, r2
 8012d40:	d100      	bne.n	8012d44 <HAL_RCC_OscConfig+0x214>
 8012d42:	e065      	b.n	8012e10 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	2b10      	cmp	r3, #16
 8012d48:	d005      	beq.n	8012d56 <HAL_RCC_OscConfig+0x226>
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	2b18      	cmp	r3, #24
 8012d4e:	d10e      	bne.n	8012d6e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	2b03      	cmp	r3, #3
 8012d54:	d10b      	bne.n	8012d6e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012d56:	4b42      	ldr	r3, [pc, #264]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	2380      	movs	r3, #128	@ 0x80
 8012d5c:	029b      	lsls	r3, r3, #10
 8012d5e:	4013      	ands	r3, r2
 8012d60:	d055      	beq.n	8012e0e <HAL_RCC_OscConfig+0x2de>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d151      	bne.n	8012e0e <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e2fd      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	685a      	ldr	r2, [r3, #4]
 8012d72:	2380      	movs	r3, #128	@ 0x80
 8012d74:	025b      	lsls	r3, r3, #9
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d107      	bne.n	8012d8a <HAL_RCC_OscConfig+0x25a>
 8012d7a:	4b39      	ldr	r3, [pc, #228]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	4b38      	ldr	r3, [pc, #224]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d80:	2180      	movs	r1, #128	@ 0x80
 8012d82:	0249      	lsls	r1, r1, #9
 8012d84:	430a      	orrs	r2, r1
 8012d86:	601a      	str	r2, [r3, #0]
 8012d88:	e013      	b.n	8012db2 <HAL_RCC_OscConfig+0x282>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	685a      	ldr	r2, [r3, #4]
 8012d8e:	23a0      	movs	r3, #160	@ 0xa0
 8012d90:	02db      	lsls	r3, r3, #11
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d107      	bne.n	8012da6 <HAL_RCC_OscConfig+0x276>
 8012d96:	4b32      	ldr	r3, [pc, #200]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d98:	681a      	ldr	r2, [r3, #0]
 8012d9a:	4b31      	ldr	r3, [pc, #196]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012d9c:	21a0      	movs	r1, #160	@ 0xa0
 8012d9e:	02c9      	lsls	r1, r1, #11
 8012da0:	430a      	orrs	r2, r1
 8012da2:	601a      	str	r2, [r3, #0]
 8012da4:	e005      	b.n	8012db2 <HAL_RCC_OscConfig+0x282>
 8012da6:	4b2e      	ldr	r3, [pc, #184]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	4b2d      	ldr	r3, [pc, #180]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012dac:	4931      	ldr	r1, [pc, #196]	@ (8012e74 <HAL_RCC_OscConfig+0x344>)
 8012dae:	400a      	ands	r2, r1
 8012db0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d014      	beq.n	8012de4 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012dba:	f7fb f823 	bl	800de04 <HAL_GetTick>
 8012dbe:	0003      	movs	r3, r0
 8012dc0:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012dc2:	e008      	b.n	8012dd6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8012dc4:	f7fb f81e 	bl	800de04 <HAL_GetTick>
 8012dc8:	0002      	movs	r2, r0
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	2b64      	cmp	r3, #100	@ 0x64
 8012dd0:	d901      	bls.n	8012dd6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8012dd2:	2303      	movs	r3, #3
 8012dd4:	e2c9      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012dd6:	4b22      	ldr	r3, [pc, #136]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	2380      	movs	r3, #128	@ 0x80
 8012ddc:	029b      	lsls	r3, r3, #10
 8012dde:	4013      	ands	r3, r2
 8012de0:	d0f0      	beq.n	8012dc4 <HAL_RCC_OscConfig+0x294>
 8012de2:	e015      	b.n	8012e10 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012de4:	f7fb f80e 	bl	800de04 <HAL_GetTick>
 8012de8:	0003      	movs	r3, r0
 8012dea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012dec:	e008      	b.n	8012e00 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8012dee:	f7fb f809 	bl	800de04 <HAL_GetTick>
 8012df2:	0002      	movs	r2, r0
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	1ad3      	subs	r3, r2, r3
 8012df8:	2b64      	cmp	r3, #100	@ 0x64
 8012dfa:	d901      	bls.n	8012e00 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	e2b4      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012e00:	4b17      	ldr	r3, [pc, #92]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	2380      	movs	r3, #128	@ 0x80
 8012e06:	029b      	lsls	r3, r3, #10
 8012e08:	4013      	ands	r3, r2
 8012e0a:	d1f0      	bne.n	8012dee <HAL_RCC_OscConfig+0x2be>
 8012e0c:	e000      	b.n	8012e10 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012e0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2202      	movs	r2, #2
 8012e16:	4013      	ands	r3, r2
 8012e18:	d100      	bne.n	8012e1c <HAL_RCC_OscConfig+0x2ec>
 8012e1a:	e074      	b.n	8012f06 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8012e1c:	69bb      	ldr	r3, [r7, #24]
 8012e1e:	2b08      	cmp	r3, #8
 8012e20:	d005      	beq.n	8012e2e <HAL_RCC_OscConfig+0x2fe>
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	2b18      	cmp	r3, #24
 8012e26:	d129      	bne.n	8012e7c <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	2b02      	cmp	r3, #2
 8012e2c:	d126      	bne.n	8012e7c <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	2380      	movs	r3, #128	@ 0x80
 8012e34:	00db      	lsls	r3, r3, #3
 8012e36:	4013      	ands	r3, r2
 8012e38:	d005      	beq.n	8012e46 <HAL_RCC_OscConfig+0x316>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d101      	bne.n	8012e46 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8012e42:	2301      	movs	r3, #1
 8012e44:	e291      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012e46:	4b06      	ldr	r3, [pc, #24]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8012e78 <HAL_RCC_OscConfig+0x348>)
 8012e4c:	4013      	ands	r3, r2
 8012e4e:	0019      	movs	r1, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	061a      	lsls	r2, r3, #24
 8012e56:	4b02      	ldr	r3, [pc, #8]	@ (8012e60 <HAL_RCC_OscConfig+0x330>)
 8012e58:	430a      	orrs	r2, r1
 8012e5a:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012e5c:	e053      	b.n	8012f06 <HAL_RCC_OscConfig+0x3d6>
 8012e5e:	46c0      	nop			@ (mov r8, r8)
 8012e60:	40021000 	.word	0x40021000
 8012e64:	ffff00ff 	.word	0xffff00ff
 8012e68:	08017e1c 	.word	0x08017e1c
 8012e6c:	20000220 	.word	0x20000220
 8012e70:	20000224 	.word	0x20000224
 8012e74:	fffaffff 	.word	0xfffaffff
 8012e78:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d026      	beq.n	8012ed2 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012e84:	4bc7      	ldr	r3, [pc, #796]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	4bc6      	ldr	r3, [pc, #792]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012e8a:	2180      	movs	r1, #128	@ 0x80
 8012e8c:	0049      	lsls	r1, r1, #1
 8012e8e:	430a      	orrs	r2, r1
 8012e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e92:	f7fa ffb7 	bl	800de04 <HAL_GetTick>
 8012e96:	0003      	movs	r3, r0
 8012e98:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012e9a:	e008      	b.n	8012eae <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012e9c:	f7fa ffb2 	bl	800de04 <HAL_GetTick>
 8012ea0:	0002      	movs	r2, r0
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	1ad3      	subs	r3, r2, r3
 8012ea6:	2b02      	cmp	r3, #2
 8012ea8:	d901      	bls.n	8012eae <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8012eaa:	2303      	movs	r3, #3
 8012eac:	e25d      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012eae:	4bbd      	ldr	r3, [pc, #756]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	2380      	movs	r3, #128	@ 0x80
 8012eb4:	00db      	lsls	r3, r3, #3
 8012eb6:	4013      	ands	r3, r2
 8012eb8:	d0f0      	beq.n	8012e9c <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012eba:	4bba      	ldr	r3, [pc, #744]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	4aba      	ldr	r2, [pc, #744]	@ (80131a8 <HAL_RCC_OscConfig+0x678>)
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	0019      	movs	r1, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	691b      	ldr	r3, [r3, #16]
 8012ec8:	061a      	lsls	r2, r3, #24
 8012eca:	4bb6      	ldr	r3, [pc, #728]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012ecc:	430a      	orrs	r2, r1
 8012ece:	605a      	str	r2, [r3, #4]
 8012ed0:	e019      	b.n	8012f06 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012ed2:	4bb4      	ldr	r3, [pc, #720]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	4bb3      	ldr	r3, [pc, #716]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012ed8:	49b4      	ldr	r1, [pc, #720]	@ (80131ac <HAL_RCC_OscConfig+0x67c>)
 8012eda:	400a      	ands	r2, r1
 8012edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ede:	f7fa ff91 	bl	800de04 <HAL_GetTick>
 8012ee2:	0003      	movs	r3, r0
 8012ee4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012ee6:	e008      	b.n	8012efa <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8012ee8:	f7fa ff8c 	bl	800de04 <HAL_GetTick>
 8012eec:	0002      	movs	r2, r0
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	1ad3      	subs	r3, r2, r3
 8012ef2:	2b02      	cmp	r3, #2
 8012ef4:	d901      	bls.n	8012efa <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8012ef6:	2303      	movs	r3, #3
 8012ef8:	e237      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8012efa:	4baa      	ldr	r3, [pc, #680]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	2380      	movs	r3, #128	@ 0x80
 8012f00:	00db      	lsls	r3, r3, #3
 8012f02:	4013      	ands	r3, r2
 8012f04:	d1f0      	bne.n	8012ee8 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2208      	movs	r2, #8
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	d051      	beq.n	8012fb4 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	695b      	ldr	r3, [r3, #20]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d031      	beq.n	8012f7c <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	699b      	ldr	r3, [r3, #24]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d108      	bne.n	8012f32 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8012f20:	4aa0      	ldr	r2, [pc, #640]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f22:	2394      	movs	r3, #148	@ 0x94
 8012f24:	58d3      	ldr	r3, [r2, r3]
 8012f26:	499f      	ldr	r1, [pc, #636]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f28:	2204      	movs	r2, #4
 8012f2a:	4393      	bics	r3, r2
 8012f2c:	2294      	movs	r2, #148	@ 0x94
 8012f2e:	508b      	str	r3, [r1, r2]
 8012f30:	e007      	b.n	8012f42 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8012f32:	4a9c      	ldr	r2, [pc, #624]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f34:	2394      	movs	r3, #148	@ 0x94
 8012f36:	58d3      	ldr	r3, [r2, r3]
 8012f38:	499a      	ldr	r1, [pc, #616]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f3a:	2204      	movs	r2, #4
 8012f3c:	4313      	orrs	r3, r2
 8012f3e:	2294      	movs	r2, #148	@ 0x94
 8012f40:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012f42:	4a98      	ldr	r2, [pc, #608]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f44:	2394      	movs	r3, #148	@ 0x94
 8012f46:	58d3      	ldr	r3, [r2, r3]
 8012f48:	4996      	ldr	r1, [pc, #600]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	4313      	orrs	r3, r2
 8012f4e:	2294      	movs	r2, #148	@ 0x94
 8012f50:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f52:	f7fa ff57 	bl	800de04 <HAL_GetTick>
 8012f56:	0003      	movs	r3, r0
 8012f58:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012f5a:	e008      	b.n	8012f6e <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012f5c:	f7fa ff52 	bl	800de04 <HAL_GetTick>
 8012f60:	0002      	movs	r2, r0
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	1ad3      	subs	r3, r2, r3
 8012f66:	2b11      	cmp	r3, #17
 8012f68:	d901      	bls.n	8012f6e <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8012f6a:	2303      	movs	r3, #3
 8012f6c:	e1fd      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8012f6e:	4a8d      	ldr	r2, [pc, #564]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f70:	2394      	movs	r3, #148	@ 0x94
 8012f72:	58d3      	ldr	r3, [r2, r3]
 8012f74:	2202      	movs	r2, #2
 8012f76:	4013      	ands	r3, r2
 8012f78:	d0f0      	beq.n	8012f5c <HAL_RCC_OscConfig+0x42c>
 8012f7a:	e01b      	b.n	8012fb4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012f7c:	4a89      	ldr	r2, [pc, #548]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f7e:	2394      	movs	r3, #148	@ 0x94
 8012f80:	58d3      	ldr	r3, [r2, r3]
 8012f82:	4988      	ldr	r1, [pc, #544]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012f84:	2201      	movs	r2, #1
 8012f86:	4393      	bics	r3, r2
 8012f88:	2294      	movs	r2, #148	@ 0x94
 8012f8a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f8c:	f7fa ff3a 	bl	800de04 <HAL_GetTick>
 8012f90:	0003      	movs	r3, r0
 8012f92:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012f94:	e008      	b.n	8012fa8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012f96:	f7fa ff35 	bl	800de04 <HAL_GetTick>
 8012f9a:	0002      	movs	r2, r0
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	2b11      	cmp	r3, #17
 8012fa2:	d901      	bls.n	8012fa8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8012fa4:	2303      	movs	r3, #3
 8012fa6:	e1e0      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012fa8:	4a7e      	ldr	r2, [pc, #504]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012faa:	2394      	movs	r3, #148	@ 0x94
 8012fac:	58d3      	ldr	r3, [r2, r3]
 8012fae:	2202      	movs	r2, #2
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	d1f0      	bne.n	8012f96 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2204      	movs	r2, #4
 8012fba:	4013      	ands	r3, r2
 8012fbc:	d100      	bne.n	8012fc0 <HAL_RCC_OscConfig+0x490>
 8012fbe:	e10d      	b.n	80131dc <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012fc0:	201f      	movs	r0, #31
 8012fc2:	183b      	adds	r3, r7, r0
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8012fc8:	4b76      	ldr	r3, [pc, #472]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012fca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012fcc:	2380      	movs	r3, #128	@ 0x80
 8012fce:	055b      	lsls	r3, r3, #21
 8012fd0:	4013      	ands	r3, r2
 8012fd2:	d110      	bne.n	8012ff6 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012fd4:	4b73      	ldr	r3, [pc, #460]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012fd6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012fd8:	4b72      	ldr	r3, [pc, #456]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012fda:	2180      	movs	r1, #128	@ 0x80
 8012fdc:	0549      	lsls	r1, r1, #21
 8012fde:	430a      	orrs	r2, r1
 8012fe0:	659a      	str	r2, [r3, #88]	@ 0x58
 8012fe2:	4b70      	ldr	r3, [pc, #448]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8012fe4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012fe6:	2380      	movs	r3, #128	@ 0x80
 8012fe8:	055b      	lsls	r3, r3, #21
 8012fea:	4013      	ands	r3, r2
 8012fec:	60bb      	str	r3, [r7, #8]
 8012fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012ff0:	183b      	adds	r3, r7, r0
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80131b0 <HAL_RCC_OscConfig+0x680>)
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	2380      	movs	r3, #128	@ 0x80
 8012ffc:	005b      	lsls	r3, r3, #1
 8012ffe:	4013      	ands	r3, r2
 8013000:	d11a      	bne.n	8013038 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013002:	4b6b      	ldr	r3, [pc, #428]	@ (80131b0 <HAL_RCC_OscConfig+0x680>)
 8013004:	681a      	ldr	r2, [r3, #0]
 8013006:	4b6a      	ldr	r3, [pc, #424]	@ (80131b0 <HAL_RCC_OscConfig+0x680>)
 8013008:	2180      	movs	r1, #128	@ 0x80
 801300a:	0049      	lsls	r1, r1, #1
 801300c:	430a      	orrs	r2, r1
 801300e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013010:	f7fa fef8 	bl	800de04 <HAL_GetTick>
 8013014:	0003      	movs	r3, r0
 8013016:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013018:	e008      	b.n	801302c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801301a:	f7fa fef3 	bl	800de04 <HAL_GetTick>
 801301e:	0002      	movs	r2, r0
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	1ad3      	subs	r3, r2, r3
 8013024:	2b02      	cmp	r3, #2
 8013026:	d901      	bls.n	801302c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8013028:	2303      	movs	r3, #3
 801302a:	e19e      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801302c:	4b60      	ldr	r3, [pc, #384]	@ (80131b0 <HAL_RCC_OscConfig+0x680>)
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	2380      	movs	r3, #128	@ 0x80
 8013032:	005b      	lsls	r3, r3, #1
 8013034:	4013      	ands	r3, r2
 8013036:	d0f0      	beq.n	801301a <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	689b      	ldr	r3, [r3, #8]
 801303c:	2201      	movs	r2, #1
 801303e:	4013      	ands	r3, r2
 8013040:	d01e      	beq.n	8013080 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	689b      	ldr	r3, [r3, #8]
 8013046:	2204      	movs	r2, #4
 8013048:	4013      	ands	r3, r2
 801304a:	d010      	beq.n	801306e <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801304c:	4a55      	ldr	r2, [pc, #340]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 801304e:	2390      	movs	r3, #144	@ 0x90
 8013050:	58d3      	ldr	r3, [r2, r3]
 8013052:	4954      	ldr	r1, [pc, #336]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013054:	2204      	movs	r2, #4
 8013056:	4313      	orrs	r3, r2
 8013058:	2290      	movs	r2, #144	@ 0x90
 801305a:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801305c:	4a51      	ldr	r2, [pc, #324]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 801305e:	2390      	movs	r3, #144	@ 0x90
 8013060:	58d3      	ldr	r3, [r2, r3]
 8013062:	4950      	ldr	r1, [pc, #320]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013064:	2201      	movs	r2, #1
 8013066:	4313      	orrs	r3, r2
 8013068:	2290      	movs	r2, #144	@ 0x90
 801306a:	508b      	str	r3, [r1, r2]
 801306c:	e018      	b.n	80130a0 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801306e:	4a4d      	ldr	r2, [pc, #308]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013070:	2390      	movs	r3, #144	@ 0x90
 8013072:	58d3      	ldr	r3, [r2, r3]
 8013074:	494b      	ldr	r1, [pc, #300]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013076:	2201      	movs	r2, #1
 8013078:	4313      	orrs	r3, r2
 801307a:	2290      	movs	r2, #144	@ 0x90
 801307c:	508b      	str	r3, [r1, r2]
 801307e:	e00f      	b.n	80130a0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8013080:	4a48      	ldr	r2, [pc, #288]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013082:	2390      	movs	r3, #144	@ 0x90
 8013084:	58d3      	ldr	r3, [r2, r3]
 8013086:	4947      	ldr	r1, [pc, #284]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013088:	2201      	movs	r2, #1
 801308a:	4393      	bics	r3, r2
 801308c:	2290      	movs	r2, #144	@ 0x90
 801308e:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8013090:	4a44      	ldr	r2, [pc, #272]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013092:	2390      	movs	r3, #144	@ 0x90
 8013094:	58d3      	ldr	r3, [r2, r3]
 8013096:	4943      	ldr	r1, [pc, #268]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013098:	2204      	movs	r2, #4
 801309a:	4393      	bics	r3, r2
 801309c:	2290      	movs	r2, #144	@ 0x90
 801309e:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	689b      	ldr	r3, [r3, #8]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d04f      	beq.n	8013148 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80130a8:	f7fa feac 	bl	800de04 <HAL_GetTick>
 80130ac:	0003      	movs	r3, r0
 80130ae:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80130b0:	e009      	b.n	80130c6 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80130b2:	f7fa fea7 	bl	800de04 <HAL_GetTick>
 80130b6:	0002      	movs	r2, r0
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	1ad3      	subs	r3, r2, r3
 80130bc:	4a3d      	ldr	r2, [pc, #244]	@ (80131b4 <HAL_RCC_OscConfig+0x684>)
 80130be:	4293      	cmp	r3, r2
 80130c0:	d901      	bls.n	80130c6 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 80130c2:	2303      	movs	r3, #3
 80130c4:	e151      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80130c6:	4a37      	ldr	r2, [pc, #220]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 80130c8:	2390      	movs	r3, #144	@ 0x90
 80130ca:	58d3      	ldr	r3, [r2, r3]
 80130cc:	2202      	movs	r2, #2
 80130ce:	4013      	ands	r3, r2
 80130d0:	d0ef      	beq.n	80130b2 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	689b      	ldr	r3, [r3, #8]
 80130d6:	2280      	movs	r2, #128	@ 0x80
 80130d8:	4013      	ands	r3, r2
 80130da:	d01a      	beq.n	8013112 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80130dc:	4a31      	ldr	r2, [pc, #196]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 80130de:	2390      	movs	r3, #144	@ 0x90
 80130e0:	58d3      	ldr	r3, [r2, r3]
 80130e2:	4930      	ldr	r1, [pc, #192]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 80130e4:	2280      	movs	r2, #128	@ 0x80
 80130e6:	4313      	orrs	r3, r2
 80130e8:	2290      	movs	r2, #144	@ 0x90
 80130ea:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80130ec:	e009      	b.n	8013102 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80130ee:	f7fa fe89 	bl	800de04 <HAL_GetTick>
 80130f2:	0002      	movs	r2, r0
 80130f4:	693b      	ldr	r3, [r7, #16]
 80130f6:	1ad3      	subs	r3, r2, r3
 80130f8:	4a2e      	ldr	r2, [pc, #184]	@ (80131b4 <HAL_RCC_OscConfig+0x684>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d901      	bls.n	8013102 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 80130fe:	2303      	movs	r3, #3
 8013100:	e133      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8013102:	4a28      	ldr	r2, [pc, #160]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013104:	2390      	movs	r3, #144	@ 0x90
 8013106:	58d2      	ldr	r2, [r2, r3]
 8013108:	2380      	movs	r3, #128	@ 0x80
 801310a:	011b      	lsls	r3, r3, #4
 801310c:	4013      	ands	r3, r2
 801310e:	d0ee      	beq.n	80130ee <HAL_RCC_OscConfig+0x5be>
 8013110:	e059      	b.n	80131c6 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8013112:	4a24      	ldr	r2, [pc, #144]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013114:	2390      	movs	r3, #144	@ 0x90
 8013116:	58d3      	ldr	r3, [r2, r3]
 8013118:	4922      	ldr	r1, [pc, #136]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 801311a:	2280      	movs	r2, #128	@ 0x80
 801311c:	4393      	bics	r3, r2
 801311e:	2290      	movs	r2, #144	@ 0x90
 8013120:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013122:	e009      	b.n	8013138 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013124:	f7fa fe6e 	bl	800de04 <HAL_GetTick>
 8013128:	0002      	movs	r2, r0
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	1ad3      	subs	r3, r2, r3
 801312e:	4a21      	ldr	r2, [pc, #132]	@ (80131b4 <HAL_RCC_OscConfig+0x684>)
 8013130:	4293      	cmp	r3, r2
 8013132:	d901      	bls.n	8013138 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8013134:	2303      	movs	r3, #3
 8013136:	e118      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8013138:	4a1a      	ldr	r2, [pc, #104]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 801313a:	2390      	movs	r3, #144	@ 0x90
 801313c:	58d2      	ldr	r2, [r2, r3]
 801313e:	2380      	movs	r3, #128	@ 0x80
 8013140:	011b      	lsls	r3, r3, #4
 8013142:	4013      	ands	r3, r2
 8013144:	d1ee      	bne.n	8013124 <HAL_RCC_OscConfig+0x5f4>
 8013146:	e03e      	b.n	80131c6 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013148:	f7fa fe5c 	bl	800de04 <HAL_GetTick>
 801314c:	0003      	movs	r3, r0
 801314e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013150:	e009      	b.n	8013166 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013152:	f7fa fe57 	bl	800de04 <HAL_GetTick>
 8013156:	0002      	movs	r2, r0
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	1ad3      	subs	r3, r2, r3
 801315c:	4a15      	ldr	r2, [pc, #84]	@ (80131b4 <HAL_RCC_OscConfig+0x684>)
 801315e:	4293      	cmp	r3, r2
 8013160:	d901      	bls.n	8013166 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8013162:	2303      	movs	r3, #3
 8013164:	e101      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8013166:	4a0f      	ldr	r2, [pc, #60]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013168:	2390      	movs	r3, #144	@ 0x90
 801316a:	58d3      	ldr	r3, [r2, r3]
 801316c:	2202      	movs	r2, #2
 801316e:	4013      	ands	r3, r2
 8013170:	d1ef      	bne.n	8013152 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8013172:	4a0c      	ldr	r2, [pc, #48]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013174:	2390      	movs	r3, #144	@ 0x90
 8013176:	58d3      	ldr	r3, [r2, r3]
 8013178:	2280      	movs	r2, #128	@ 0x80
 801317a:	4013      	ands	r3, r2
 801317c:	d023      	beq.n	80131c6 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801317e:	4a09      	ldr	r2, [pc, #36]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013180:	2390      	movs	r3, #144	@ 0x90
 8013182:	58d3      	ldr	r3, [r2, r3]
 8013184:	4907      	ldr	r1, [pc, #28]	@ (80131a4 <HAL_RCC_OscConfig+0x674>)
 8013186:	2280      	movs	r2, #128	@ 0x80
 8013188:	4393      	bics	r3, r2
 801318a:	2290      	movs	r2, #144	@ 0x90
 801318c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801318e:	e013      	b.n	80131b8 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013190:	f7fa fe38 	bl	800de04 <HAL_GetTick>
 8013194:	0002      	movs	r2, r0
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	1ad3      	subs	r3, r2, r3
 801319a:	4a06      	ldr	r2, [pc, #24]	@ (80131b4 <HAL_RCC_OscConfig+0x684>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d90b      	bls.n	80131b8 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80131a0:	2303      	movs	r3, #3
 80131a2:	e0e2      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
 80131a4:	40021000 	.word	0x40021000
 80131a8:	80ffffff 	.word	0x80ffffff
 80131ac:	fffffeff 	.word	0xfffffeff
 80131b0:	40007000 	.word	0x40007000
 80131b4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80131b8:	4a6e      	ldr	r2, [pc, #440]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80131ba:	2390      	movs	r3, #144	@ 0x90
 80131bc:	58d2      	ldr	r2, [r2, r3]
 80131be:	2380      	movs	r3, #128	@ 0x80
 80131c0:	011b      	lsls	r3, r3, #4
 80131c2:	4013      	ands	r3, r2
 80131c4:	d1e4      	bne.n	8013190 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80131c6:	231f      	movs	r3, #31
 80131c8:	18fb      	adds	r3, r7, r3
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	d105      	bne.n	80131dc <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80131d0:	4b68      	ldr	r3, [pc, #416]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80131d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80131d4:	4b67      	ldr	r3, [pc, #412]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80131d6:	4968      	ldr	r1, [pc, #416]	@ (8013378 <HAL_RCC_OscConfig+0x848>)
 80131d8:	400a      	ands	r2, r1
 80131da:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	2220      	movs	r2, #32
 80131e2:	4013      	ands	r3, r2
 80131e4:	d03c      	beq.n	8013260 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d01c      	beq.n	8013228 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80131ee:	4a61      	ldr	r2, [pc, #388]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80131f0:	2398      	movs	r3, #152	@ 0x98
 80131f2:	58d3      	ldr	r3, [r2, r3]
 80131f4:	495f      	ldr	r1, [pc, #380]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80131f6:	2201      	movs	r2, #1
 80131f8:	4313      	orrs	r3, r2
 80131fa:	2298      	movs	r2, #152	@ 0x98
 80131fc:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80131fe:	f7fa fe01 	bl	800de04 <HAL_GetTick>
 8013202:	0003      	movs	r3, r0
 8013204:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8013206:	e008      	b.n	801321a <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013208:	f7fa fdfc 	bl	800de04 <HAL_GetTick>
 801320c:	0002      	movs	r2, r0
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	2b02      	cmp	r3, #2
 8013214:	d901      	bls.n	801321a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8013216:	2303      	movs	r3, #3
 8013218:	e0a7      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801321a:	4a56      	ldr	r2, [pc, #344]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 801321c:	2398      	movs	r3, #152	@ 0x98
 801321e:	58d3      	ldr	r3, [r2, r3]
 8013220:	2202      	movs	r2, #2
 8013222:	4013      	ands	r3, r2
 8013224:	d0f0      	beq.n	8013208 <HAL_RCC_OscConfig+0x6d8>
 8013226:	e01b      	b.n	8013260 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013228:	4a52      	ldr	r2, [pc, #328]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 801322a:	2398      	movs	r3, #152	@ 0x98
 801322c:	58d3      	ldr	r3, [r2, r3]
 801322e:	4951      	ldr	r1, [pc, #324]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013230:	2201      	movs	r2, #1
 8013232:	4393      	bics	r3, r2
 8013234:	2298      	movs	r2, #152	@ 0x98
 8013236:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013238:	f7fa fde4 	bl	800de04 <HAL_GetTick>
 801323c:	0003      	movs	r3, r0
 801323e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8013240:	e008      	b.n	8013254 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013242:	f7fa fddf 	bl	800de04 <HAL_GetTick>
 8013246:	0002      	movs	r2, r0
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	1ad3      	subs	r3, r2, r3
 801324c:	2b02      	cmp	r3, #2
 801324e:	d901      	bls.n	8013254 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8013250:	2303      	movs	r3, #3
 8013252:	e08a      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8013254:	4a47      	ldr	r2, [pc, #284]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013256:	2398      	movs	r3, #152	@ 0x98
 8013258:	58d3      	ldr	r3, [r2, r3]
 801325a:	2202      	movs	r2, #2
 801325c:	4013      	ands	r3, r2
 801325e:	d1f0      	bne.n	8013242 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013264:	2b00      	cmp	r3, #0
 8013266:	d100      	bne.n	801326a <HAL_RCC_OscConfig+0x73a>
 8013268:	e07e      	b.n	8013368 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801326a:	4b42      	ldr	r3, [pc, #264]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 801326c:	689b      	ldr	r3, [r3, #8]
 801326e:	2238      	movs	r2, #56	@ 0x38
 8013270:	4013      	ands	r3, r2
 8013272:	2b18      	cmp	r3, #24
 8013274:	d100      	bne.n	8013278 <HAL_RCC_OscConfig+0x748>
 8013276:	e075      	b.n	8013364 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801327c:	2b02      	cmp	r3, #2
 801327e:	d156      	bne.n	801332e <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013280:	4b3c      	ldr	r3, [pc, #240]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	4b3b      	ldr	r3, [pc, #236]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013286:	493d      	ldr	r1, [pc, #244]	@ (801337c <HAL_RCC_OscConfig+0x84c>)
 8013288:	400a      	ands	r2, r1
 801328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801328c:	f7fa fdba 	bl	800de04 <HAL_GetTick>
 8013290:	0003      	movs	r3, r0
 8013292:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013294:	e008      	b.n	80132a8 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013296:	f7fa fdb5 	bl	800de04 <HAL_GetTick>
 801329a:	0002      	movs	r2, r0
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	1ad3      	subs	r3, r2, r3
 80132a0:	2b02      	cmp	r3, #2
 80132a2:	d901      	bls.n	80132a8 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80132a4:	2303      	movs	r3, #3
 80132a6:	e060      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80132a8:	4b32      	ldr	r3, [pc, #200]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	2380      	movs	r3, #128	@ 0x80
 80132ae:	049b      	lsls	r3, r3, #18
 80132b0:	4013      	ands	r3, r2
 80132b2:	d1f0      	bne.n	8013296 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80132b4:	4b2f      	ldr	r3, [pc, #188]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	4a31      	ldr	r2, [pc, #196]	@ (8013380 <HAL_RCC_OscConfig+0x850>)
 80132ba:	4013      	ands	r3, r2
 80132bc:	0019      	movs	r1, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132c6:	431a      	orrs	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132cc:	021b      	lsls	r3, r3, #8
 80132ce:	431a      	orrs	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132d4:	431a      	orrs	r2, r3
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132da:	431a      	orrs	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132e0:	431a      	orrs	r2, r3
 80132e2:	4b24      	ldr	r3, [pc, #144]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80132e4:	430a      	orrs	r2, r1
 80132e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 80132e8:	4b22      	ldr	r3, [pc, #136]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80132ea:	68da      	ldr	r2, [r3, #12]
 80132ec:	4b21      	ldr	r3, [pc, #132]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80132ee:	2180      	movs	r1, #128	@ 0x80
 80132f0:	0549      	lsls	r1, r1, #21
 80132f2:	430a      	orrs	r2, r1
 80132f4:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80132f6:	4b1f      	ldr	r3, [pc, #124]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	4b1e      	ldr	r3, [pc, #120]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 80132fc:	2180      	movs	r1, #128	@ 0x80
 80132fe:	0449      	lsls	r1, r1, #17
 8013300:	430a      	orrs	r2, r1
 8013302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013304:	f7fa fd7e 	bl	800de04 <HAL_GetTick>
 8013308:	0003      	movs	r3, r0
 801330a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801330c:	e008      	b.n	8013320 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801330e:	f7fa fd79 	bl	800de04 <HAL_GetTick>
 8013312:	0002      	movs	r2, r0
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	2b02      	cmp	r3, #2
 801331a:	d901      	bls.n	8013320 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 801331c:	2303      	movs	r3, #3
 801331e:	e024      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013320:	4b14      	ldr	r3, [pc, #80]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	2380      	movs	r3, #128	@ 0x80
 8013326:	049b      	lsls	r3, r3, #18
 8013328:	4013      	ands	r3, r2
 801332a:	d0f0      	beq.n	801330e <HAL_RCC_OscConfig+0x7de>
 801332c:	e01c      	b.n	8013368 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801332e:	4b11      	ldr	r3, [pc, #68]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	4b10      	ldr	r3, [pc, #64]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013334:	4911      	ldr	r1, [pc, #68]	@ (801337c <HAL_RCC_OscConfig+0x84c>)
 8013336:	400a      	ands	r2, r1
 8013338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801333a:	f7fa fd63 	bl	800de04 <HAL_GetTick>
 801333e:	0003      	movs	r3, r0
 8013340:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013342:	e008      	b.n	8013356 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013344:	f7fa fd5e 	bl	800de04 <HAL_GetTick>
 8013348:	0002      	movs	r2, r0
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	1ad3      	subs	r3, r2, r3
 801334e:	2b02      	cmp	r3, #2
 8013350:	d901      	bls.n	8013356 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8013352:	2303      	movs	r3, #3
 8013354:	e009      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8013356:	4b07      	ldr	r3, [pc, #28]	@ (8013374 <HAL_RCC_OscConfig+0x844>)
 8013358:	681a      	ldr	r2, [r3, #0]
 801335a:	2380      	movs	r3, #128	@ 0x80
 801335c:	049b      	lsls	r3, r3, #18
 801335e:	4013      	ands	r3, r2
 8013360:	d1f0      	bne.n	8013344 <HAL_RCC_OscConfig+0x814>
 8013362:	e001      	b.n	8013368 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8013364:	2301      	movs	r3, #1
 8013366:	e000      	b.n	801336a <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8013368:	2300      	movs	r3, #0
}
 801336a:	0018      	movs	r0, r3
 801336c:	46bd      	mov	sp, r7
 801336e:	b008      	add	sp, #32
 8013370:	bdb0      	pop	{r4, r5, r7, pc}
 8013372:	46c0      	nop			@ (mov r8, r8)
 8013374:	40021000 	.word	0x40021000
 8013378:	efffffff 	.word	0xefffffff
 801337c:	feffffff 	.word	0xfeffffff
 8013380:	11c1808c 	.word	0x11c1808c

08013384 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8013384:	b5b0      	push	{r4, r5, r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801338e:	4b6c      	ldr	r3, [pc, #432]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	2207      	movs	r2, #7
 8013394:	4013      	ands	r3, r2
 8013396:	683a      	ldr	r2, [r7, #0]
 8013398:	429a      	cmp	r2, r3
 801339a:	d911      	bls.n	80133c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801339c:	4b68      	ldr	r3, [pc, #416]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	2207      	movs	r2, #7
 80133a2:	4393      	bics	r3, r2
 80133a4:	0019      	movs	r1, r3
 80133a6:	4b66      	ldr	r3, [pc, #408]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	430a      	orrs	r2, r1
 80133ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80133ae:	4b64      	ldr	r3, [pc, #400]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	2207      	movs	r2, #7
 80133b4:	4013      	ands	r3, r2
 80133b6:	683a      	ldr	r2, [r7, #0]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d001      	beq.n	80133c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80133bc:	2301      	movs	r3, #1
 80133be:	e0bb      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2201      	movs	r2, #1
 80133c6:	4013      	ands	r3, r2
 80133c8:	d100      	bne.n	80133cc <HAL_RCC_ClockConfig+0x48>
 80133ca:	e064      	b.n	8013496 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	2b03      	cmp	r3, #3
 80133d2:	d107      	bne.n	80133e4 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80133d4:	4b5b      	ldr	r3, [pc, #364]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	2380      	movs	r3, #128	@ 0x80
 80133da:	049b      	lsls	r3, r3, #18
 80133dc:	4013      	ands	r3, r2
 80133de:	d138      	bne.n	8013452 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 80133e0:	2301      	movs	r3, #1
 80133e2:	e0a9      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	2b02      	cmp	r3, #2
 80133ea:	d107      	bne.n	80133fc <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80133ec:	4b55      	ldr	r3, [pc, #340]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	2380      	movs	r3, #128	@ 0x80
 80133f2:	029b      	lsls	r3, r3, #10
 80133f4:	4013      	ands	r3, r2
 80133f6:	d12c      	bne.n	8013452 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80133f8:	2301      	movs	r3, #1
 80133fa:	e09d      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	685b      	ldr	r3, [r3, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d106      	bne.n	8013412 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8013404:	4b4f      	ldr	r3, [pc, #316]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2202      	movs	r2, #2
 801340a:	4013      	ands	r3, r2
 801340c:	d121      	bne.n	8013452 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801340e:	2301      	movs	r3, #1
 8013410:	e092      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	2b01      	cmp	r3, #1
 8013418:	d107      	bne.n	801342a <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801341a:	4b4a      	ldr	r3, [pc, #296]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 801341c:	681a      	ldr	r2, [r3, #0]
 801341e:	2380      	movs	r3, #128	@ 0x80
 8013420:	00db      	lsls	r3, r3, #3
 8013422:	4013      	ands	r3, r2
 8013424:	d115      	bne.n	8013452 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8013426:	2301      	movs	r3, #1
 8013428:	e086      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	2b04      	cmp	r3, #4
 8013430:	d107      	bne.n	8013442 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8013432:	4a44      	ldr	r2, [pc, #272]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 8013434:	2394      	movs	r3, #148	@ 0x94
 8013436:	58d3      	ldr	r3, [r2, r3]
 8013438:	2202      	movs	r2, #2
 801343a:	4013      	ands	r3, r2
 801343c:	d109      	bne.n	8013452 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801343e:	2301      	movs	r3, #1
 8013440:	e07a      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013442:	4a40      	ldr	r2, [pc, #256]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 8013444:	2390      	movs	r3, #144	@ 0x90
 8013446:	58d3      	ldr	r3, [r2, r3]
 8013448:	2202      	movs	r2, #2
 801344a:	4013      	ands	r3, r2
 801344c:	d101      	bne.n	8013452 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801344e:	2301      	movs	r3, #1
 8013450:	e072      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013452:	4b3c      	ldr	r3, [pc, #240]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 8013454:	689b      	ldr	r3, [r3, #8]
 8013456:	2207      	movs	r2, #7
 8013458:	4393      	bics	r3, r2
 801345a:	0019      	movs	r1, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	685a      	ldr	r2, [r3, #4]
 8013460:	4b38      	ldr	r3, [pc, #224]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 8013462:	430a      	orrs	r2, r1
 8013464:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013466:	f7fa fccd 	bl	800de04 <HAL_GetTick>
 801346a:	0003      	movs	r3, r0
 801346c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801346e:	e009      	b.n	8013484 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013470:	f7fa fcc8 	bl	800de04 <HAL_GetTick>
 8013474:	0002      	movs	r2, r0
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	1ad3      	subs	r3, r2, r3
 801347a:	4a33      	ldr	r2, [pc, #204]	@ (8013548 <HAL_RCC_ClockConfig+0x1c4>)
 801347c:	4293      	cmp	r3, r2
 801347e:	d901      	bls.n	8013484 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8013480:	2303      	movs	r3, #3
 8013482:	e059      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013484:	4b2f      	ldr	r3, [pc, #188]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 8013486:	689b      	ldr	r3, [r3, #8]
 8013488:	2238      	movs	r2, #56	@ 0x38
 801348a:	401a      	ands	r2, r3
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	00db      	lsls	r3, r3, #3
 8013492:	429a      	cmp	r2, r3
 8013494:	d1ec      	bne.n	8013470 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2202      	movs	r2, #2
 801349c:	4013      	ands	r3, r2
 801349e:	d009      	beq.n	80134b4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80134a0:	4b28      	ldr	r3, [pc, #160]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 80134a2:	689b      	ldr	r3, [r3, #8]
 80134a4:	4a29      	ldr	r2, [pc, #164]	@ (801354c <HAL_RCC_ClockConfig+0x1c8>)
 80134a6:	4013      	ands	r3, r2
 80134a8:	0019      	movs	r1, r3
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	689a      	ldr	r2, [r3, #8]
 80134ae:	4b25      	ldr	r3, [pc, #148]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 80134b0:	430a      	orrs	r2, r1
 80134b2:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80134b4:	4b22      	ldr	r3, [pc, #136]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2207      	movs	r2, #7
 80134ba:	4013      	ands	r3, r2
 80134bc:	683a      	ldr	r2, [r7, #0]
 80134be:	429a      	cmp	r2, r3
 80134c0:	d211      	bcs.n	80134e6 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80134c2:	4b1f      	ldr	r3, [pc, #124]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2207      	movs	r2, #7
 80134c8:	4393      	bics	r3, r2
 80134ca:	0019      	movs	r1, r3
 80134cc:	4b1c      	ldr	r3, [pc, #112]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 80134ce:	683a      	ldr	r2, [r7, #0]
 80134d0:	430a      	orrs	r2, r1
 80134d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80134d4:	4b1a      	ldr	r3, [pc, #104]	@ (8013540 <HAL_RCC_ClockConfig+0x1bc>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2207      	movs	r2, #7
 80134da:	4013      	ands	r3, r2
 80134dc:	683a      	ldr	r2, [r7, #0]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d001      	beq.n	80134e6 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 80134e2:	2301      	movs	r3, #1
 80134e4:	e028      	b.n	8013538 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	2204      	movs	r2, #4
 80134ec:	4013      	ands	r3, r2
 80134ee:	d009      	beq.n	8013504 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80134f0:	4b14      	ldr	r3, [pc, #80]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 80134f2:	689b      	ldr	r3, [r3, #8]
 80134f4:	4a16      	ldr	r2, [pc, #88]	@ (8013550 <HAL_RCC_ClockConfig+0x1cc>)
 80134f6:	4013      	ands	r3, r2
 80134f8:	0019      	movs	r1, r3
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	68da      	ldr	r2, [r3, #12]
 80134fe:	4b11      	ldr	r3, [pc, #68]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 8013500:	430a      	orrs	r2, r1
 8013502:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8013504:	f000 f82a 	bl	801355c <HAL_RCC_GetSysClockFreq>
 8013508:	0001      	movs	r1, r0
 801350a:	4b0e      	ldr	r3, [pc, #56]	@ (8013544 <HAL_RCC_ClockConfig+0x1c0>)
 801350c:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801350e:	0a1b      	lsrs	r3, r3, #8
 8013510:	220f      	movs	r2, #15
 8013512:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8013514:	4a0f      	ldr	r2, [pc, #60]	@ (8013554 <HAL_RCC_ClockConfig+0x1d0>)
 8013516:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8013518:	001a      	movs	r2, r3
 801351a:	231f      	movs	r3, #31
 801351c:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 801351e:	000a      	movs	r2, r1
 8013520:	40da      	lsrs	r2, r3
 8013522:	4b0d      	ldr	r3, [pc, #52]	@ (8013558 <HAL_RCC_ClockConfig+0x1d4>)
 8013524:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8013526:	250b      	movs	r5, #11
 8013528:	197c      	adds	r4, r7, r5
 801352a:	2003      	movs	r0, #3
 801352c:	f7fa fc10 	bl	800dd50 <HAL_InitTick>
 8013530:	0003      	movs	r3, r0
 8013532:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8013534:	197b      	adds	r3, r7, r5
 8013536:	781b      	ldrb	r3, [r3, #0]
}
 8013538:	0018      	movs	r0, r3
 801353a:	46bd      	mov	sp, r7
 801353c:	b004      	add	sp, #16
 801353e:	bdb0      	pop	{r4, r5, r7, pc}
 8013540:	40022000 	.word	0x40022000
 8013544:	40021000 	.word	0x40021000
 8013548:	00001388 	.word	0x00001388
 801354c:	fffff0ff 	.word	0xfffff0ff
 8013550:	ffff8fff 	.word	0xffff8fff
 8013554:	08017e1c 	.word	0x08017e1c
 8013558:	20000220 	.word	0x20000220

0801355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b08a      	sub	sp, #40	@ 0x28
 8013560:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8013562:	2300      	movs	r3, #0
 8013564:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8013566:	2300      	movs	r3, #0
 8013568:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801356a:	4b46      	ldr	r3, [pc, #280]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	2238      	movs	r2, #56	@ 0x38
 8013570:	4013      	ands	r3, r2
 8013572:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013574:	4b43      	ldr	r3, [pc, #268]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	2203      	movs	r2, #3
 801357a:	4013      	ands	r3, r2
 801357c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d005      	beq.n	8013590 <HAL_RCC_GetSysClockFreq+0x34>
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	2b18      	cmp	r3, #24
 8013588:	d125      	bne.n	80135d6 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	2b01      	cmp	r3, #1
 801358e:	d122      	bne.n	80135d6 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8013590:	4b3c      	ldr	r3, [pc, #240]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2208      	movs	r2, #8
 8013596:	4013      	ands	r3, r2
 8013598:	d107      	bne.n	80135aa <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 801359a:	4a3a      	ldr	r2, [pc, #232]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 801359c:	2394      	movs	r3, #148	@ 0x94
 801359e:	58d3      	ldr	r3, [r2, r3]
 80135a0:	0a1b      	lsrs	r3, r3, #8
 80135a2:	220f      	movs	r2, #15
 80135a4:	4013      	ands	r3, r2
 80135a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80135a8:	e005      	b.n	80135b6 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80135aa:	4b36      	ldr	r3, [pc, #216]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	091b      	lsrs	r3, r3, #4
 80135b0:	220f      	movs	r2, #15
 80135b2:	4013      	ands	r3, r2
 80135b4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80135b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b8:	2b0b      	cmp	r3, #11
 80135ba:	d901      	bls.n	80135c0 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80135bc:	2300      	movs	r3, #0
 80135be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80135c0:	4b31      	ldr	r3, [pc, #196]	@ (8013688 <HAL_RCC_GetSysClockFreq+0x12c>)
 80135c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135c4:	0092      	lsls	r2, r2, #2
 80135c6:	58d3      	ldr	r3, [r2, r3]
 80135c8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d11b      	bne.n	8013608 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80135d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80135d4:	e018      	b.n	8013608 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80135d6:	69bb      	ldr	r3, [r7, #24]
 80135d8:	2b08      	cmp	r3, #8
 80135da:	d102      	bne.n	80135e2 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80135dc:	4b2b      	ldr	r3, [pc, #172]	@ (801368c <HAL_RCC_GetSysClockFreq+0x130>)
 80135de:	623b      	str	r3, [r7, #32]
 80135e0:	e012      	b.n	8013608 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80135e2:	69bb      	ldr	r3, [r7, #24]
 80135e4:	2b10      	cmp	r3, #16
 80135e6:	d102      	bne.n	80135ee <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80135e8:	4b29      	ldr	r3, [pc, #164]	@ (8013690 <HAL_RCC_GetSysClockFreq+0x134>)
 80135ea:	623b      	str	r3, [r7, #32]
 80135ec:	e00c      	b.n	8013608 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	2b20      	cmp	r3, #32
 80135f2:	d103      	bne.n	80135fc <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80135f4:	23fa      	movs	r3, #250	@ 0xfa
 80135f6:	01db      	lsls	r3, r3, #7
 80135f8:	623b      	str	r3, [r7, #32]
 80135fa:	e005      	b.n	8013608 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	2b28      	cmp	r3, #40	@ 0x28
 8013600:	d102      	bne.n	8013608 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8013602:	2380      	movs	r3, #128	@ 0x80
 8013604:	021b      	lsls	r3, r3, #8
 8013606:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	2b18      	cmp	r3, #24
 801360c:	d135      	bne.n	801367a <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801360e:	4b1d      	ldr	r3, [pc, #116]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	2203      	movs	r2, #3
 8013614:	4013      	ands	r3, r2
 8013616:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013618:	4b1a      	ldr	r3, [pc, #104]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	091b      	lsrs	r3, r3, #4
 801361e:	2207      	movs	r2, #7
 8013620:	4013      	ands	r3, r2
 8013622:	3301      	adds	r3, #1
 8013624:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	2b02      	cmp	r3, #2
 801362a:	d003      	beq.n	8013634 <HAL_RCC_GetSysClockFreq+0xd8>
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	2b03      	cmp	r3, #3
 8013630:	d003      	beq.n	801363a <HAL_RCC_GetSysClockFreq+0xde>
 8013632:	e005      	b.n	8013640 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8013634:	4b15      	ldr	r3, [pc, #84]	@ (801368c <HAL_RCC_GetSysClockFreq+0x130>)
 8013636:	61fb      	str	r3, [r7, #28]
        break;
 8013638:	e005      	b.n	8013646 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 801363a:	4b15      	ldr	r3, [pc, #84]	@ (8013690 <HAL_RCC_GetSysClockFreq+0x134>)
 801363c:	61fb      	str	r3, [r7, #28]
        break;
 801363e:	e002      	b.n	8013646 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8013640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013642:	61fb      	str	r3, [r7, #28]
        break;
 8013644:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8013646:	4b0f      	ldr	r3, [pc, #60]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 8013648:	68db      	ldr	r3, [r3, #12]
 801364a:	0a1b      	lsrs	r3, r3, #8
 801364c:	227f      	movs	r2, #127	@ 0x7f
 801364e:	4013      	ands	r3, r2
 8013650:	69fa      	ldr	r2, [r7, #28]
 8013652:	4353      	muls	r3, r2
 8013654:	68f9      	ldr	r1, [r7, #12]
 8013656:	0018      	movs	r0, r3
 8013658:	f7ec fd5e 	bl	8000118 <__udivsi3>
 801365c:	0003      	movs	r3, r0
 801365e:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8013660:	4b08      	ldr	r3, [pc, #32]	@ (8013684 <HAL_RCC_GetSysClockFreq+0x128>)
 8013662:	68db      	ldr	r3, [r3, #12]
 8013664:	0f5b      	lsrs	r3, r3, #29
 8013666:	2207      	movs	r2, #7
 8013668:	4013      	ands	r3, r2
 801366a:	3301      	adds	r3, #1
 801366c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 801366e:	6879      	ldr	r1, [r7, #4]
 8013670:	68b8      	ldr	r0, [r7, #8]
 8013672:	f7ec fd51 	bl	8000118 <__udivsi3>
 8013676:	0003      	movs	r3, r0
 8013678:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 801367a:	6a3b      	ldr	r3, [r7, #32]
}
 801367c:	0018      	movs	r0, r3
 801367e:	46bd      	mov	sp, r7
 8013680:	b00a      	add	sp, #40	@ 0x28
 8013682:	bd80      	pop	{r7, pc}
 8013684:	40021000 	.word	0x40021000
 8013688:	08017e34 	.word	0x08017e34
 801368c:	00f42400 	.word	0x00f42400
 8013690:	003d0900 	.word	0x003d0900

08013694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013698:	4b02      	ldr	r3, [pc, #8]	@ (80136a4 <HAL_RCC_GetHCLKFreq+0x10>)
 801369a:	681b      	ldr	r3, [r3, #0]
}
 801369c:	0018      	movs	r0, r3
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	46c0      	nop			@ (mov r8, r8)
 80136a4:	20000220 	.word	0x20000220

080136a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80136ac:	f7ff fff2 	bl	8013694 <HAL_RCC_GetHCLKFreq>
 80136b0:	0001      	movs	r1, r0
 80136b2:	4b07      	ldr	r3, [pc, #28]	@ (80136d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80136b4:	689b      	ldr	r3, [r3, #8]
 80136b6:	0b1b      	lsrs	r3, r3, #12
 80136b8:	2207      	movs	r2, #7
 80136ba:	4013      	ands	r3, r2
 80136bc:	4a05      	ldr	r2, [pc, #20]	@ (80136d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80136be:	5cd3      	ldrb	r3, [r2, r3]
 80136c0:	001a      	movs	r2, r3
 80136c2:	231f      	movs	r3, #31
 80136c4:	4013      	ands	r3, r2
 80136c6:	40d9      	lsrs	r1, r3
 80136c8:	000b      	movs	r3, r1
}
 80136ca:	0018      	movs	r0, r3
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	40021000 	.word	0x40021000
 80136d4:	08017e2c 	.word	0x08017e2c

080136d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b086      	sub	sp, #24
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80136e0:	2300      	movs	r3, #0
 80136e2:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80136e4:	4b2f      	ldr	r3, [pc, #188]	@ (80137a4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80136e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80136e8:	2380      	movs	r3, #128	@ 0x80
 80136ea:	055b      	lsls	r3, r3, #21
 80136ec:	4013      	ands	r3, r2
 80136ee:	d004      	beq.n	80136fa <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80136f0:	f7ff fa12 	bl	8012b18 <HAL_PWREx_GetVoltageRange>
 80136f4:	0003      	movs	r3, r0
 80136f6:	617b      	str	r3, [r7, #20]
 80136f8:	e017      	b.n	801372a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80136fa:	4b2a      	ldr	r3, [pc, #168]	@ (80137a4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80136fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80136fe:	4b29      	ldr	r3, [pc, #164]	@ (80137a4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8013700:	2180      	movs	r1, #128	@ 0x80
 8013702:	0549      	lsls	r1, r1, #21
 8013704:	430a      	orrs	r2, r1
 8013706:	659a      	str	r2, [r3, #88]	@ 0x58
 8013708:	4b26      	ldr	r3, [pc, #152]	@ (80137a4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801370a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801370c:	2380      	movs	r3, #128	@ 0x80
 801370e:	055b      	lsls	r3, r3, #21
 8013710:	4013      	ands	r3, r2
 8013712:	60fb      	str	r3, [r7, #12]
 8013714:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8013716:	f7ff f9ff 	bl	8012b18 <HAL_PWREx_GetVoltageRange>
 801371a:	0003      	movs	r3, r0
 801371c:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801371e:	4b21      	ldr	r3, [pc, #132]	@ (80137a4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8013720:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013722:	4b20      	ldr	r3, [pc, #128]	@ (80137a4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8013724:	4920      	ldr	r1, [pc, #128]	@ (80137a8 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8013726:	400a      	ands	r2, r1
 8013728:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801372a:	697a      	ldr	r2, [r7, #20]
 801372c:	2380      	movs	r3, #128	@ 0x80
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	429a      	cmp	r2, r3
 8013732:	d111      	bne.n	8013758 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2b80      	cmp	r3, #128	@ 0x80
 8013738:	d91c      	bls.n	8013774 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2bb0      	cmp	r3, #176	@ 0xb0
 801373e:	d902      	bls.n	8013746 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8013740:	2302      	movs	r3, #2
 8013742:	613b      	str	r3, [r7, #16]
 8013744:	e016      	b.n	8013774 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b90      	cmp	r3, #144	@ 0x90
 801374a:	d902      	bls.n	8013752 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801374c:	2301      	movs	r3, #1
 801374e:	613b      	str	r3, [r7, #16]
 8013750:	e010      	b.n	8013774 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8013752:	2300      	movs	r3, #0
 8013754:	613b      	str	r3, [r7, #16]
 8013756:	e00d      	b.n	8013774 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b7f      	cmp	r3, #127	@ 0x7f
 801375c:	d902      	bls.n	8013764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 801375e:	2302      	movs	r3, #2
 8013760:	613b      	str	r3, [r7, #16]
 8013762:	e007      	b.n	8013774 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b70      	cmp	r3, #112	@ 0x70
 8013768:	d102      	bne.n	8013770 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 801376a:	2301      	movs	r3, #1
 801376c:	613b      	str	r3, [r7, #16]
 801376e:	e001      	b.n	8013774 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8013770:	2300      	movs	r3, #0
 8013772:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8013774:	4b0d      	ldr	r3, [pc, #52]	@ (80137ac <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	2207      	movs	r2, #7
 801377a:	4393      	bics	r3, r2
 801377c:	0019      	movs	r1, r3
 801377e:	4b0b      	ldr	r3, [pc, #44]	@ (80137ac <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8013780:	693a      	ldr	r2, [r7, #16]
 8013782:	430a      	orrs	r2, r1
 8013784:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8013786:	4b09      	ldr	r3, [pc, #36]	@ (80137ac <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	2207      	movs	r2, #7
 801378c:	4013      	ands	r3, r2
 801378e:	693a      	ldr	r2, [r7, #16]
 8013790:	429a      	cmp	r2, r3
 8013792:	d001      	beq.n	8013798 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8013794:	2301      	movs	r3, #1
 8013796:	e000      	b.n	801379a <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8013798:	2300      	movs	r3, #0
}
 801379a:	0018      	movs	r0, r3
 801379c:	46bd      	mov	sp, r7
 801379e:	b006      	add	sp, #24
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	46c0      	nop			@ (mov r8, r8)
 80137a4:	40021000 	.word	0x40021000
 80137a8:	efffffff 	.word	0xefffffff
 80137ac:	40022000 	.word	0x40022000

080137b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b086      	sub	sp, #24
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80137b8:	2313      	movs	r3, #19
 80137ba:	18fb      	adds	r3, r7, r3
 80137bc:	2200      	movs	r2, #0
 80137be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80137c0:	2312      	movs	r3, #18
 80137c2:	18fb      	adds	r3, r7, r3
 80137c4:	2200      	movs	r2, #0
 80137c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681a      	ldr	r2, [r3, #0]
 80137cc:	2380      	movs	r3, #128	@ 0x80
 80137ce:	021b      	lsls	r3, r3, #8
 80137d0:	4013      	ands	r3, r2
 80137d2:	d100      	bne.n	80137d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80137d4:	e0b7      	b.n	8013946 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 80137d6:	2011      	movs	r0, #17
 80137d8:	183b      	adds	r3, r7, r0
 80137da:	2200      	movs	r2, #0
 80137dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80137de:	4b4c      	ldr	r3, [pc, #304]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80137e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80137e2:	2380      	movs	r3, #128	@ 0x80
 80137e4:	055b      	lsls	r3, r3, #21
 80137e6:	4013      	ands	r3, r2
 80137e8:	d110      	bne.n	801380c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80137ea:	4b49      	ldr	r3, [pc, #292]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80137ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80137ee:	4b48      	ldr	r3, [pc, #288]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80137f0:	2180      	movs	r1, #128	@ 0x80
 80137f2:	0549      	lsls	r1, r1, #21
 80137f4:	430a      	orrs	r2, r1
 80137f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80137f8:	4b45      	ldr	r3, [pc, #276]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80137fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80137fc:	2380      	movs	r3, #128	@ 0x80
 80137fe:	055b      	lsls	r3, r3, #21
 8013800:	4013      	ands	r3, r2
 8013802:	60bb      	str	r3, [r7, #8]
 8013804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013806:	183b      	adds	r3, r7, r0
 8013808:	2201      	movs	r2, #1
 801380a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801380c:	4b41      	ldr	r3, [pc, #260]	@ (8013914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	4b40      	ldr	r3, [pc, #256]	@ (8013914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8013812:	2180      	movs	r1, #128	@ 0x80
 8013814:	0049      	lsls	r1, r1, #1
 8013816:	430a      	orrs	r2, r1
 8013818:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801381a:	f7fa faf3 	bl	800de04 <HAL_GetTick>
 801381e:	0003      	movs	r3, r0
 8013820:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8013822:	e00b      	b.n	801383c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013824:	f7fa faee 	bl	800de04 <HAL_GetTick>
 8013828:	0002      	movs	r2, r0
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	1ad3      	subs	r3, r2, r3
 801382e:	2b02      	cmp	r3, #2
 8013830:	d904      	bls.n	801383c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8013832:	2313      	movs	r3, #19
 8013834:	18fb      	adds	r3, r7, r3
 8013836:	2203      	movs	r2, #3
 8013838:	701a      	strb	r2, [r3, #0]
        break;
 801383a:	e005      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801383c:	4b35      	ldr	r3, [pc, #212]	@ (8013914 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801383e:	681a      	ldr	r2, [r3, #0]
 8013840:	2380      	movs	r3, #128	@ 0x80
 8013842:	005b      	lsls	r3, r3, #1
 8013844:	4013      	ands	r3, r2
 8013846:	d0ed      	beq.n	8013824 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8013848:	2313      	movs	r3, #19
 801384a:	18fb      	adds	r3, r7, r3
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d168      	bne.n	8013924 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8013852:	4a2f      	ldr	r2, [pc, #188]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013854:	2390      	movs	r3, #144	@ 0x90
 8013856:	58d2      	ldr	r2, [r2, r3]
 8013858:	23c0      	movs	r3, #192	@ 0xc0
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	4013      	ands	r3, r2
 801385e:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d01f      	beq.n	80138a6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801386a:	697a      	ldr	r2, [r7, #20]
 801386c:	429a      	cmp	r2, r3
 801386e:	d01a      	beq.n	80138a6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8013870:	4a27      	ldr	r2, [pc, #156]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013872:	2390      	movs	r3, #144	@ 0x90
 8013874:	58d3      	ldr	r3, [r2, r3]
 8013876:	4a28      	ldr	r2, [pc, #160]	@ (8013918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8013878:	4013      	ands	r3, r2
 801387a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801387c:	4a24      	ldr	r2, [pc, #144]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801387e:	2390      	movs	r3, #144	@ 0x90
 8013880:	58d3      	ldr	r3, [r2, r3]
 8013882:	4923      	ldr	r1, [pc, #140]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013884:	2280      	movs	r2, #128	@ 0x80
 8013886:	0252      	lsls	r2, r2, #9
 8013888:	4313      	orrs	r3, r2
 801388a:	2290      	movs	r2, #144	@ 0x90
 801388c:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 801388e:	4a20      	ldr	r2, [pc, #128]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013890:	2390      	movs	r3, #144	@ 0x90
 8013892:	58d3      	ldr	r3, [r2, r3]
 8013894:	491e      	ldr	r1, [pc, #120]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8013896:	4a21      	ldr	r2, [pc, #132]	@ (801391c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8013898:	4013      	ands	r3, r2
 801389a:	2290      	movs	r2, #144	@ 0x90
 801389c:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801389e:	491c      	ldr	r1, [pc, #112]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80138a0:	2290      	movs	r2, #144	@ 0x90
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	2201      	movs	r2, #1
 80138aa:	4013      	ands	r3, r2
 80138ac:	d017      	beq.n	80138de <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80138ae:	f7fa faa9 	bl	800de04 <HAL_GetTick>
 80138b2:	0003      	movs	r3, r0
 80138b4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80138b6:	e00c      	b.n	80138d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80138b8:	f7fa faa4 	bl	800de04 <HAL_GetTick>
 80138bc:	0002      	movs	r2, r0
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	1ad3      	subs	r3, r2, r3
 80138c2:	4a17      	ldr	r2, [pc, #92]	@ (8013920 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80138c4:	4293      	cmp	r3, r2
 80138c6:	d904      	bls.n	80138d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80138c8:	2313      	movs	r3, #19
 80138ca:	18fb      	adds	r3, r7, r3
 80138cc:	2203      	movs	r2, #3
 80138ce:	701a      	strb	r2, [r3, #0]
            break;
 80138d0:	e005      	b.n	80138de <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80138d2:	4a0f      	ldr	r2, [pc, #60]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80138d4:	2390      	movs	r3, #144	@ 0x90
 80138d6:	58d3      	ldr	r3, [r2, r3]
 80138d8:	2202      	movs	r2, #2
 80138da:	4013      	ands	r3, r2
 80138dc:	d0ec      	beq.n	80138b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 80138de:	2313      	movs	r3, #19
 80138e0:	18fb      	adds	r3, r7, r3
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d10b      	bne.n	8013900 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80138e8:	4a09      	ldr	r2, [pc, #36]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80138ea:	2390      	movs	r3, #144	@ 0x90
 80138ec:	58d3      	ldr	r3, [r2, r3]
 80138ee:	4a0a      	ldr	r2, [pc, #40]	@ (8013918 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80138f0:	401a      	ands	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80138f6:	4906      	ldr	r1, [pc, #24]	@ (8013910 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80138f8:	4313      	orrs	r3, r2
 80138fa:	2290      	movs	r2, #144	@ 0x90
 80138fc:	508b      	str	r3, [r1, r2]
 80138fe:	e017      	b.n	8013930 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013900:	2312      	movs	r3, #18
 8013902:	18fb      	adds	r3, r7, r3
 8013904:	2213      	movs	r2, #19
 8013906:	18ba      	adds	r2, r7, r2
 8013908:	7812      	ldrb	r2, [r2, #0]
 801390a:	701a      	strb	r2, [r3, #0]
 801390c:	e010      	b.n	8013930 <HAL_RCCEx_PeriphCLKConfig+0x180>
 801390e:	46c0      	nop			@ (mov r8, r8)
 8013910:	40021000 	.word	0x40021000
 8013914:	40007000 	.word	0x40007000
 8013918:	fffffcff 	.word	0xfffffcff
 801391c:	fffeffff 	.word	0xfffeffff
 8013920:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013924:	2312      	movs	r3, #18
 8013926:	18fb      	adds	r3, r7, r3
 8013928:	2213      	movs	r2, #19
 801392a:	18ba      	adds	r2, r7, r2
 801392c:	7812      	ldrb	r2, [r2, #0]
 801392e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013930:	2311      	movs	r3, #17
 8013932:	18fb      	adds	r3, r7, r3
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	2b01      	cmp	r3, #1
 8013938:	d105      	bne.n	8013946 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801393a:	4ba4      	ldr	r3, [pc, #656]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801393c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801393e:	4ba3      	ldr	r3, [pc, #652]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013940:	49a3      	ldr	r1, [pc, #652]	@ (8013bd0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8013942:	400a      	ands	r2, r1
 8013944:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2201      	movs	r2, #1
 801394c:	4013      	ands	r3, r2
 801394e:	d00b      	beq.n	8013968 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013950:	4a9e      	ldr	r2, [pc, #632]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013952:	2388      	movs	r3, #136	@ 0x88
 8013954:	58d3      	ldr	r3, [r2, r3]
 8013956:	2203      	movs	r2, #3
 8013958:	4393      	bics	r3, r2
 801395a:	001a      	movs	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	499a      	ldr	r1, [pc, #616]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013962:	4313      	orrs	r3, r2
 8013964:	2288      	movs	r2, #136	@ 0x88
 8013966:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2202      	movs	r2, #2
 801396e:	4013      	ands	r3, r2
 8013970:	d00b      	beq.n	801398a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013972:	4a96      	ldr	r2, [pc, #600]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013974:	2388      	movs	r3, #136	@ 0x88
 8013976:	58d3      	ldr	r3, [r2, r3]
 8013978:	220c      	movs	r2, #12
 801397a:	4393      	bics	r3, r2
 801397c:	001a      	movs	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	689b      	ldr	r3, [r3, #8]
 8013982:	4992      	ldr	r1, [pc, #584]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013984:	4313      	orrs	r3, r2
 8013986:	2288      	movs	r2, #136	@ 0x88
 8013988:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2210      	movs	r2, #16
 8013990:	4013      	ands	r3, r2
 8013992:	d00a      	beq.n	80139aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013994:	4a8d      	ldr	r2, [pc, #564]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013996:	2388      	movs	r3, #136	@ 0x88
 8013998:	58d3      	ldr	r3, [r2, r3]
 801399a:	4a8e      	ldr	r2, [pc, #568]	@ (8013bd4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 801399c:	401a      	ands	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	695b      	ldr	r3, [r3, #20]
 80139a2:	498a      	ldr	r1, [pc, #552]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80139a4:	4313      	orrs	r3, r2
 80139a6:	2288      	movs	r2, #136	@ 0x88
 80139a8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	2208      	movs	r2, #8
 80139b0:	4013      	ands	r3, r2
 80139b2:	d00a      	beq.n	80139ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80139b4:	4a85      	ldr	r2, [pc, #532]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80139b6:	2388      	movs	r3, #136	@ 0x88
 80139b8:	58d3      	ldr	r3, [r2, r3]
 80139ba:	4a87      	ldr	r2, [pc, #540]	@ (8013bd8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80139bc:	401a      	ands	r2, r3
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	691b      	ldr	r3, [r3, #16]
 80139c2:	4982      	ldr	r1, [pc, #520]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80139c4:	4313      	orrs	r3, r2
 80139c6:	2288      	movs	r2, #136	@ 0x88
 80139c8:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	2204      	movs	r2, #4
 80139d0:	4013      	ands	r3, r2
 80139d2:	d00b      	beq.n	80139ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 80139d4:	4a7d      	ldr	r2, [pc, #500]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80139d6:	2388      	movs	r3, #136	@ 0x88
 80139d8:	58d3      	ldr	r3, [r2, r3]
 80139da:	22c0      	movs	r2, #192	@ 0xc0
 80139dc:	4393      	bics	r3, r2
 80139de:	001a      	movs	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	68db      	ldr	r3, [r3, #12]
 80139e4:	4979      	ldr	r1, [pc, #484]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80139e6:	4313      	orrs	r3, r2
 80139e8:	2288      	movs	r2, #136	@ 0x88
 80139ea:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2220      	movs	r2, #32
 80139f2:	4013      	ands	r3, r2
 80139f4:	d00a      	beq.n	8013a0c <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80139f6:	4a75      	ldr	r2, [pc, #468]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80139f8:	2388      	movs	r3, #136	@ 0x88
 80139fa:	58d3      	ldr	r3, [r2, r3]
 80139fc:	4a77      	ldr	r2, [pc, #476]	@ (8013bdc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80139fe:	401a      	ands	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	699b      	ldr	r3, [r3, #24]
 8013a04:	4971      	ldr	r1, [pc, #452]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a06:	4313      	orrs	r3, r2
 8013a08:	2288      	movs	r2, #136	@ 0x88
 8013a0a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2240      	movs	r2, #64	@ 0x40
 8013a12:	4013      	ands	r3, r2
 8013a14:	d00a      	beq.n	8013a2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8013a16:	4a6d      	ldr	r2, [pc, #436]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a18:	2388      	movs	r3, #136	@ 0x88
 8013a1a:	58d3      	ldr	r3, [r2, r3]
 8013a1c:	4a70      	ldr	r2, [pc, #448]	@ (8013be0 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8013a1e:	401a      	ands	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	69db      	ldr	r3, [r3, #28]
 8013a24:	4969      	ldr	r1, [pc, #420]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a26:	4313      	orrs	r3, r2
 8013a28:	2288      	movs	r2, #136	@ 0x88
 8013a2a:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2280      	movs	r2, #128	@ 0x80
 8013a32:	4013      	ands	r3, r2
 8013a34:	d00a      	beq.n	8013a4c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013a36:	4a65      	ldr	r2, [pc, #404]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a38:	2388      	movs	r3, #136	@ 0x88
 8013a3a:	58d3      	ldr	r3, [r2, r3]
 8013a3c:	4a69      	ldr	r2, [pc, #420]	@ (8013be4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8013a3e:	401a      	ands	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6a1b      	ldr	r3, [r3, #32]
 8013a44:	4961      	ldr	r1, [pc, #388]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a46:	4313      	orrs	r3, r2
 8013a48:	2288      	movs	r2, #136	@ 0x88
 8013a4a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681a      	ldr	r2, [r3, #0]
 8013a50:	2380      	movs	r3, #128	@ 0x80
 8013a52:	005b      	lsls	r3, r3, #1
 8013a54:	4013      	ands	r3, r2
 8013a56:	d00a      	beq.n	8013a6e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013a58:	4a5c      	ldr	r2, [pc, #368]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a5a:	2388      	movs	r3, #136	@ 0x88
 8013a5c:	58d3      	ldr	r3, [r2, r3]
 8013a5e:	4a62      	ldr	r2, [pc, #392]	@ (8013be8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8013a60:	401a      	ands	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a66:	4959      	ldr	r1, [pc, #356]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a68:	4313      	orrs	r3, r2
 8013a6a:	2288      	movs	r2, #136	@ 0x88
 8013a6c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681a      	ldr	r2, [r3, #0]
 8013a72:	2380      	movs	r3, #128	@ 0x80
 8013a74:	009b      	lsls	r3, r3, #2
 8013a76:	4013      	ands	r3, r2
 8013a78:	d00a      	beq.n	8013a90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8013a7a:	4a54      	ldr	r2, [pc, #336]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a7c:	2388      	movs	r3, #136	@ 0x88
 8013a7e:	58d3      	ldr	r3, [r2, r3]
 8013a80:	4a5a      	ldr	r2, [pc, #360]	@ (8013bec <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8013a82:	401a      	ands	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a88:	4950      	ldr	r1, [pc, #320]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013a8a:	4313      	orrs	r3, r2
 8013a8c:	2288      	movs	r2, #136	@ 0x88
 8013a8e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	2380      	movs	r3, #128	@ 0x80
 8013a96:	01db      	lsls	r3, r3, #7
 8013a98:	4013      	ands	r3, r2
 8013a9a:	d017      	beq.n	8013acc <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013aa0:	2380      	movs	r3, #128	@ 0x80
 8013aa2:	055b      	lsls	r3, r3, #21
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d106      	bne.n	8013ab6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8013aa8:	4b48      	ldr	r3, [pc, #288]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013aaa:	68da      	ldr	r2, [r3, #12]
 8013aac:	4b47      	ldr	r3, [pc, #284]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013aae:	2180      	movs	r1, #128	@ 0x80
 8013ab0:	0249      	lsls	r1, r1, #9
 8013ab2:	430a      	orrs	r2, r1
 8013ab4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013ab6:	4a45      	ldr	r2, [pc, #276]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013ab8:	2388      	movs	r3, #136	@ 0x88
 8013aba:	58d3      	ldr	r3, [r2, r3]
 8013abc:	4a4c      	ldr	r2, [pc, #304]	@ (8013bf0 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8013abe:	401a      	ands	r2, r3
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ac4:	4941      	ldr	r1, [pc, #260]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013ac6:	4313      	orrs	r3, r2
 8013ac8:	2288      	movs	r2, #136	@ 0x88
 8013aca:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	2380      	movs	r3, #128	@ 0x80
 8013ad2:	015b      	lsls	r3, r3, #5
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	d017      	beq.n	8013b08 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013adc:	2380      	movs	r3, #128	@ 0x80
 8013ade:	051b      	lsls	r3, r3, #20
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d106      	bne.n	8013af2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8013ae4:	4b39      	ldr	r3, [pc, #228]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013ae6:	68da      	ldr	r2, [r3, #12]
 8013ae8:	4b38      	ldr	r3, [pc, #224]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013aea:	2180      	movs	r1, #128	@ 0x80
 8013aec:	0449      	lsls	r1, r1, #17
 8013aee:	430a      	orrs	r2, r1
 8013af0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013af2:	4a36      	ldr	r2, [pc, #216]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013af4:	2388      	movs	r3, #136	@ 0x88
 8013af6:	58d3      	ldr	r3, [r2, r3]
 8013af8:	4a3e      	ldr	r2, [pc, #248]	@ (8013bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8013afa:	401a      	ands	r2, r3
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b00:	4932      	ldr	r1, [pc, #200]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b02:	4313      	orrs	r3, r2
 8013b04:	2288      	movs	r2, #136	@ 0x88
 8013b06:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	2380      	movs	r3, #128	@ 0x80
 8013b0e:	019b      	lsls	r3, r3, #6
 8013b10:	4013      	ands	r3, r2
 8013b12:	d017      	beq.n	8013b44 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b18:	2380      	movs	r3, #128	@ 0x80
 8013b1a:	051b      	lsls	r3, r3, #20
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d106      	bne.n	8013b2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8013b20:	4b2a      	ldr	r3, [pc, #168]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b22:	68da      	ldr	r2, [r3, #12]
 8013b24:	4b29      	ldr	r3, [pc, #164]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b26:	2180      	movs	r1, #128	@ 0x80
 8013b28:	0449      	lsls	r1, r1, #17
 8013b2a:	430a      	orrs	r2, r1
 8013b2c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013b2e:	4a27      	ldr	r2, [pc, #156]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b30:	2388      	movs	r3, #136	@ 0x88
 8013b32:	58d3      	ldr	r3, [r2, r3]
 8013b34:	4a2f      	ldr	r2, [pc, #188]	@ (8013bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8013b36:	401a      	ands	r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b3c:	4923      	ldr	r1, [pc, #140]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b3e:	4313      	orrs	r3, r2
 8013b40:	2288      	movs	r2, #136	@ 0x88
 8013b42:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681a      	ldr	r2, [r3, #0]
 8013b48:	2380      	movs	r3, #128	@ 0x80
 8013b4a:	00db      	lsls	r3, r3, #3
 8013b4c:	4013      	ands	r3, r2
 8013b4e:	d017      	beq.n	8013b80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b54:	2380      	movs	r3, #128	@ 0x80
 8013b56:	045b      	lsls	r3, r3, #17
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d106      	bne.n	8013b6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8013b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b5e:	68da      	ldr	r2, [r3, #12]
 8013b60:	4b1a      	ldr	r3, [pc, #104]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b62:	2180      	movs	r1, #128	@ 0x80
 8013b64:	0449      	lsls	r1, r1, #17
 8013b66:	430a      	orrs	r2, r1
 8013b68:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8013b6a:	4a18      	ldr	r2, [pc, #96]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b6c:	2388      	movs	r3, #136	@ 0x88
 8013b6e:	58d3      	ldr	r3, [r2, r3]
 8013b70:	4a21      	ldr	r2, [pc, #132]	@ (8013bf8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8013b72:	401a      	ands	r2, r3
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b78:	4914      	ldr	r1, [pc, #80]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	2288      	movs	r2, #136	@ 0x88
 8013b7e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681a      	ldr	r2, [r3, #0]
 8013b84:	2380      	movs	r3, #128	@ 0x80
 8013b86:	011b      	lsls	r3, r3, #4
 8013b88:	4013      	ands	r3, r2
 8013b8a:	d017      	beq.n	8013bbc <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b90:	2380      	movs	r3, #128	@ 0x80
 8013b92:	049b      	lsls	r3, r3, #18
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d106      	bne.n	8013ba6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8013b98:	4b0c      	ldr	r3, [pc, #48]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b9a:	68da      	ldr	r2, [r3, #12]
 8013b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013b9e:	2180      	movs	r1, #128	@ 0x80
 8013ba0:	0449      	lsls	r1, r1, #17
 8013ba2:	430a      	orrs	r2, r1
 8013ba4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8013ba6:	4a09      	ldr	r2, [pc, #36]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013ba8:	2388      	movs	r3, #136	@ 0x88
 8013baa:	58d3      	ldr	r3, [r2, r3]
 8013bac:	4a12      	ldr	r2, [pc, #72]	@ (8013bf8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8013bae:	401a      	ands	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bb4:	4905      	ldr	r1, [pc, #20]	@ (8013bcc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	2288      	movs	r2, #136	@ 0x88
 8013bba:	508b      	str	r3, [r1, r2]

  }

  return status;
 8013bbc:	2312      	movs	r3, #18
 8013bbe:	18fb      	adds	r3, r7, r3
 8013bc0:	781b      	ldrb	r3, [r3, #0]
}
 8013bc2:	0018      	movs	r0, r3
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	b006      	add	sp, #24
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	46c0      	nop			@ (mov r8, r8)
 8013bcc:	40021000 	.word	0x40021000
 8013bd0:	efffffff 	.word	0xefffffff
 8013bd4:	fffff3ff 	.word	0xfffff3ff
 8013bd8:	fffffcff 	.word	0xfffffcff
 8013bdc:	ffffcfff 	.word	0xffffcfff
 8013be0:	fffcffff 	.word	0xfffcffff
 8013be4:	fff3ffff 	.word	0xfff3ffff
 8013be8:	ffcfffff 	.word	0xffcfffff
 8013bec:	ff3fffff 	.word	0xff3fffff
 8013bf0:	cfffffff 	.word	0xcfffffff
 8013bf4:	f3ffffff 	.word	0xf3ffffff
 8013bf8:	feffffff 	.word	0xfeffffff

08013bfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8013bfc:	b590      	push	{r4, r7, lr}
 8013bfe:	b089      	sub	sp, #36	@ 0x24
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8013c04:	2300      	movs	r3, #0
 8013c06:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	2380      	movs	r3, #128	@ 0x80
 8013c0c:	021b      	lsls	r3, r3, #8
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d154      	bne.n	8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8013c12:	4ad5      	ldr	r2, [pc, #852]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013c14:	2390      	movs	r3, #144	@ 0x90
 8013c16:	58d2      	ldr	r2, [r2, r3]
 8013c18:	23c0      	movs	r3, #192	@ 0xc0
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4013      	ands	r3, r2
 8013c1e:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8013c20:	697a      	ldr	r2, [r7, #20]
 8013c22:	23c0      	movs	r3, #192	@ 0xc0
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d039      	beq.n	8013c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8013c2a:	697a      	ldr	r2, [r7, #20]
 8013c2c:	23c0      	movs	r3, #192	@ 0xc0
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d901      	bls.n	8013c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013c34:	f000 fd1a 	bl	801466c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8013c38:	697a      	ldr	r2, [r7, #20]
 8013c3a:	2380      	movs	r3, #128	@ 0x80
 8013c3c:	005b      	lsls	r3, r3, #1
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d006      	beq.n	8013c50 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8013c42:	697a      	ldr	r2, [r7, #20]
 8013c44:	2380      	movs	r3, #128	@ 0x80
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d00f      	beq.n	8013c6c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8013c4c:	f000 fd0e 	bl	801466c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8013c50:	4ac5      	ldr	r2, [pc, #788]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013c52:	2390      	movs	r3, #144	@ 0x90
 8013c54:	58d3      	ldr	r3, [r2, r3]
 8013c56:	2202      	movs	r2, #2
 8013c58:	4013      	ands	r3, r2
 8013c5a:	2b02      	cmp	r3, #2
 8013c5c:	d001      	beq.n	8013c62 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8013c5e:	f000 fd07 	bl	8014670 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8013c62:	2380      	movs	r3, #128	@ 0x80
 8013c64:	021b      	lsls	r3, r3, #8
 8013c66:	61fb      	str	r3, [r7, #28]
        break;
 8013c68:	f000 fd02 	bl	8014670 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8013c6c:	4abe      	ldr	r2, [pc, #760]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013c6e:	2394      	movs	r3, #148	@ 0x94
 8013c70:	58d3      	ldr	r3, [r2, r3]
 8013c72:	2202      	movs	r2, #2
 8013c74:	4013      	ands	r3, r2
 8013c76:	2b02      	cmp	r3, #2
 8013c78:	d001      	beq.n	8013c7e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8013c7a:	f000 fcfb 	bl	8014674 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8013c7e:	4aba      	ldr	r2, [pc, #744]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013c80:	2394      	movs	r3, #148	@ 0x94
 8013c82:	58d3      	ldr	r3, [r2, r3]
 8013c84:	2204      	movs	r2, #4
 8013c86:	4013      	ands	r3, r2
 8013c88:	2b04      	cmp	r3, #4
 8013c8a:	d103      	bne.n	8013c94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8013c8c:	23fa      	movs	r3, #250	@ 0xfa
 8013c8e:	61fb      	str	r3, [r7, #28]
        break;
 8013c90:	f000 fcf0 	bl	8014674 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8013c94:	23fa      	movs	r3, #250	@ 0xfa
 8013c96:	01db      	lsls	r3, r3, #7
 8013c98:	61fb      	str	r3, [r7, #28]
        break;
 8013c9a:	f000 fceb 	bl	8014674 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013c9e:	4bb2      	ldr	r3, [pc, #712]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	2380      	movs	r3, #128	@ 0x80
 8013ca4:	029b      	lsls	r3, r3, #10
 8013ca6:	401a      	ands	r2, r3
 8013ca8:	2380      	movs	r3, #128	@ 0x80
 8013caa:	029b      	lsls	r3, r3, #10
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d001      	beq.n	8013cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8013cb0:	f000 fce2 	bl	8014678 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8013cb4:	4bad      	ldr	r3, [pc, #692]	@ (8013f6c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8013cb6:	61fb      	str	r3, [r7, #28]
        break;
 8013cb8:	f000 fcde 	bl	8014678 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	2380      	movs	r3, #128	@ 0x80
 8013cc0:	029b      	lsls	r3, r3, #10
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d100      	bne.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8013cc6:	e11a      	b.n	8013efe <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	2380      	movs	r3, #128	@ 0x80
 8013ccc:	029b      	lsls	r3, r3, #10
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d901      	bls.n	8013cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8013cd2:	f000 fcd3 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	2380      	movs	r3, #128	@ 0x80
 8013cda:	025b      	lsls	r3, r3, #9
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d100      	bne.n	8013ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8013ce0:	e10d      	b.n	8013efe <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	2380      	movs	r3, #128	@ 0x80
 8013ce6:	025b      	lsls	r3, r3, #9
 8013ce8:	429a      	cmp	r2, r3
 8013cea:	d901      	bls.n	8013cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8013cec:	f000 fcc6 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	2380      	movs	r3, #128	@ 0x80
 8013cf4:	01db      	lsls	r3, r3, #7
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d100      	bne.n	8013cfc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8013cfa:	e1eb      	b.n	80140d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	2380      	movs	r3, #128	@ 0x80
 8013d00:	01db      	lsls	r3, r3, #7
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d901      	bls.n	8013d0a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8013d06:	f000 fcb9 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	2380      	movs	r3, #128	@ 0x80
 8013d0e:	019b      	lsls	r3, r3, #6
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d101      	bne.n	8013d18 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8013d14:	f000 fc50 	bl	80145b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8013d18:	687a      	ldr	r2, [r7, #4]
 8013d1a:	2380      	movs	r3, #128	@ 0x80
 8013d1c:	019b      	lsls	r3, r3, #6
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d901      	bls.n	8013d26 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8013d22:	f000 fcab 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013d26:	687a      	ldr	r2, [r7, #4]
 8013d28:	2380      	movs	r3, #128	@ 0x80
 8013d2a:	015b      	lsls	r3, r3, #5
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d101      	bne.n	8013d34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8013d30:	f000 fbe2 	bl	80144f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	2380      	movs	r3, #128	@ 0x80
 8013d38:	015b      	lsls	r3, r3, #5
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d901      	bls.n	8013d42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8013d3e:	f000 fc9d 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	2380      	movs	r3, #128	@ 0x80
 8013d46:	011b      	lsls	r3, r3, #4
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d101      	bne.n	8013d50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8013d4c:	f000 fba9 	bl	80144a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	2380      	movs	r3, #128	@ 0x80
 8013d54:	011b      	lsls	r3, r3, #4
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d901      	bls.n	8013d5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8013d5a:	f000 fc8f 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013d5e:	687a      	ldr	r2, [r7, #4]
 8013d60:	2380      	movs	r3, #128	@ 0x80
 8013d62:	00db      	lsls	r3, r3, #3
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d101      	bne.n	8013d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8013d68:	f000 fb70 	bl	801444c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8013d6c:	687a      	ldr	r2, [r7, #4]
 8013d6e:	2380      	movs	r3, #128	@ 0x80
 8013d70:	00db      	lsls	r3, r3, #3
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d901      	bls.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8013d76:	f000 fc81 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	2380      	movs	r3, #128	@ 0x80
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d100      	bne.n	8013d86 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8013d84:	e305      	b.n	8014392 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	2380      	movs	r3, #128	@ 0x80
 8013d8a:	009b      	lsls	r3, r3, #2
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d901      	bls.n	8013d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8013d90:	f000 fc74 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	2380      	movs	r3, #128	@ 0x80
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d100      	bne.n	8013da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8013d9e:	e29b      	b.n	80142d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	2380      	movs	r3, #128	@ 0x80
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d901      	bls.n	8013dae <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8013daa:	f000 fc67 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b80      	cmp	r3, #128	@ 0x80
 8013db2:	d100      	bne.n	8013db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8013db4:	e22f      	b.n	8014216 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2b80      	cmp	r3, #128	@ 0x80
 8013dba:	d901      	bls.n	8013dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8013dbc:	f000 fc5e 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2b20      	cmp	r3, #32
 8013dc4:	d80f      	bhi.n	8013de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d101      	bne.n	8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8013dcc:	f000 fc56 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b20      	cmp	r3, #32
 8013dd4:	d901      	bls.n	8013dda <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8013dd6:	f000 fc51 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	009a      	lsls	r2, r3, #2
 8013dde:	4b64      	ldr	r3, [pc, #400]	@ (8013f70 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8013de0:	18d3      	adds	r3, r2, r3
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	469f      	mov	pc, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2b40      	cmp	r3, #64	@ 0x40
 8013dea:	d100      	bne.n	8013dee <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8013dec:	e1df      	b.n	80141ae <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8013dee:	f000 fc45 	bl	801467c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8013df2:	4a5d      	ldr	r2, [pc, #372]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013df4:	2388      	movs	r3, #136	@ 0x88
 8013df6:	58d3      	ldr	r3, [r2, r3]
 8013df8:	2203      	movs	r2, #3
 8013dfa:	4013      	ands	r3, r2
 8013dfc:	617b      	str	r3, [r7, #20]
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	2b03      	cmp	r3, #3
 8013e02:	d025      	beq.n	8013e50 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	2b03      	cmp	r3, #3
 8013e08:	d82d      	bhi.n	8013e66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	d013      	beq.n	8013e38 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	2b02      	cmp	r3, #2
 8013e14:	d827      	bhi.n	8013e66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d003      	beq.n	8013e24 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d005      	beq.n	8013e2e <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8013e22:	e020      	b.n	8013e66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8013e24:	f7ff fc40 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8013e28:	0003      	movs	r3, r0
 8013e2a:	61fb      	str	r3, [r7, #28]
            break;
 8013e2c:	e022      	b.n	8013e74 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8013e2e:	f7ff fb95 	bl	801355c <HAL_RCC_GetSysClockFreq>
 8013e32:	0003      	movs	r3, r0
 8013e34:	61fb      	str	r3, [r7, #28]
            break;
 8013e36:	e01d      	b.n	8013e74 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013e38:	4b4b      	ldr	r3, [pc, #300]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013e3a:	681a      	ldr	r2, [r3, #0]
 8013e3c:	2380      	movs	r3, #128	@ 0x80
 8013e3e:	00db      	lsls	r3, r3, #3
 8013e40:	401a      	ands	r2, r3
 8013e42:	2380      	movs	r3, #128	@ 0x80
 8013e44:	00db      	lsls	r3, r3, #3
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d110      	bne.n	8013e6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8013e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8013f74 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8013e4c:	61fb      	str	r3, [r7, #28]
            break;
 8013e4e:	e00d      	b.n	8013e6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8013e50:	4a45      	ldr	r2, [pc, #276]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013e52:	2390      	movs	r3, #144	@ 0x90
 8013e54:	58d3      	ldr	r3, [r2, r3]
 8013e56:	2202      	movs	r2, #2
 8013e58:	4013      	ands	r3, r2
 8013e5a:	2b02      	cmp	r3, #2
 8013e5c:	d109      	bne.n	8013e72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8013e5e:	2380      	movs	r3, #128	@ 0x80
 8013e60:	021b      	lsls	r3, r3, #8
 8013e62:	61fb      	str	r3, [r7, #28]
            break;
 8013e64:	e005      	b.n	8013e72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8013e66:	46c0      	nop			@ (mov r8, r8)
 8013e68:	f000 fc09 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8013e6c:	46c0      	nop			@ (mov r8, r8)
 8013e6e:	f000 fc06 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8013e72:	46c0      	nop			@ (mov r8, r8)
        break;
 8013e74:	f000 fc03 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8013e78:	4a3b      	ldr	r2, [pc, #236]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013e7a:	2388      	movs	r3, #136	@ 0x88
 8013e7c:	58d3      	ldr	r3, [r2, r3]
 8013e7e:	220c      	movs	r2, #12
 8013e80:	4013      	ands	r3, r2
 8013e82:	617b      	str	r3, [r7, #20]
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	2b0c      	cmp	r3, #12
 8013e88:	d025      	beq.n	8013ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	2b0c      	cmp	r3, #12
 8013e8e:	d82d      	bhi.n	8013eec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	2b08      	cmp	r3, #8
 8013e94:	d013      	beq.n	8013ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	2b08      	cmp	r3, #8
 8013e9a:	d827      	bhi.n	8013eec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d003      	beq.n	8013eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	2b04      	cmp	r3, #4
 8013ea6:	d005      	beq.n	8013eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8013ea8:	e020      	b.n	8013eec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8013eaa:	f7ff fbfd 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8013eae:	0003      	movs	r3, r0
 8013eb0:	61fb      	str	r3, [r7, #28]
            break;
 8013eb2:	e022      	b.n	8013efa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8013eb4:	f7ff fb52 	bl	801355c <HAL_RCC_GetSysClockFreq>
 8013eb8:	0003      	movs	r3, r0
 8013eba:	61fb      	str	r3, [r7, #28]
            break;
 8013ebc:	e01d      	b.n	8013efa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	2380      	movs	r3, #128	@ 0x80
 8013ec4:	00db      	lsls	r3, r3, #3
 8013ec6:	401a      	ands	r2, r3
 8013ec8:	2380      	movs	r3, #128	@ 0x80
 8013eca:	00db      	lsls	r3, r3, #3
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d110      	bne.n	8013ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8013ed0:	4b28      	ldr	r3, [pc, #160]	@ (8013f74 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8013ed2:	61fb      	str	r3, [r7, #28]
            break;
 8013ed4:	e00d      	b.n	8013ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8013ed6:	4a24      	ldr	r2, [pc, #144]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013ed8:	2390      	movs	r3, #144	@ 0x90
 8013eda:	58d3      	ldr	r3, [r2, r3]
 8013edc:	2202      	movs	r2, #2
 8013ede:	4013      	ands	r3, r2
 8013ee0:	2b02      	cmp	r3, #2
 8013ee2:	d109      	bne.n	8013ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8013ee4:	2380      	movs	r3, #128	@ 0x80
 8013ee6:	021b      	lsls	r3, r3, #8
 8013ee8:	61fb      	str	r3, [r7, #28]
            break;
 8013eea:	e005      	b.n	8013ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8013eec:	46c0      	nop			@ (mov r8, r8)
 8013eee:	f000 fbc6 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8013ef2:	46c0      	nop			@ (mov r8, r8)
 8013ef4:	f000 fbc3 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8013ef8:	46c0      	nop			@ (mov r8, r8)
        break;
 8013efa:	f000 fbc0 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8013efe:	f7ff fbd3 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8013f02:	0003      	movs	r3, r0
 8013f04:	61fb      	str	r3, [r7, #28]
        break;
 8013f06:	f000 fbba 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8013f0a:	4a17      	ldr	r2, [pc, #92]	@ (8013f68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8013f0c:	2388      	movs	r3, #136	@ 0x88
 8013f0e:	58d2      	ldr	r2, [r2, r3]
 8013f10:	23c0      	movs	r3, #192	@ 0xc0
 8013f12:	011b      	lsls	r3, r3, #4
 8013f14:	4013      	ands	r3, r2
 8013f16:	617b      	str	r3, [r7, #20]
 8013f18:	697a      	ldr	r2, [r7, #20]
 8013f1a:	23c0      	movs	r3, #192	@ 0xc0
 8013f1c:	011b      	lsls	r3, r3, #4
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d036      	beq.n	8013f90 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8013f22:	697a      	ldr	r2, [r7, #20]
 8013f24:	23c0      	movs	r3, #192	@ 0xc0
 8013f26:	011b      	lsls	r3, r3, #4
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d83c      	bhi.n	8013fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8013f2c:	697a      	ldr	r2, [r7, #20]
 8013f2e:	2380      	movs	r3, #128	@ 0x80
 8013f30:	011b      	lsls	r3, r3, #4
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d020      	beq.n	8013f78 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8013f36:	697a      	ldr	r2, [r7, #20]
 8013f38:	2380      	movs	r3, #128	@ 0x80
 8013f3a:	011b      	lsls	r3, r3, #4
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d832      	bhi.n	8013fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d005      	beq.n	8013f52 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8013f46:	697a      	ldr	r2, [r7, #20]
 8013f48:	2380      	movs	r3, #128	@ 0x80
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d005      	beq.n	8013f5c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8013f50:	e029      	b.n	8013fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8013f52:	f7ff fba9 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8013f56:	0003      	movs	r3, r0
 8013f58:	61fb      	str	r3, [r7, #28]
            break;
 8013f5a:	e02b      	b.n	8013fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8013f5c:	f7ff fafe 	bl	801355c <HAL_RCC_GetSysClockFreq>
 8013f60:	0003      	movs	r3, r0
 8013f62:	61fb      	str	r3, [r7, #28]
            break;
 8013f64:	e026      	b.n	8013fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8013f66:	46c0      	nop			@ (mov r8, r8)
 8013f68:	40021000 	.word	0x40021000
 8013f6c:	0001e848 	.word	0x0001e848
 8013f70:	08017e64 	.word	0x08017e64
 8013f74:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013f78:	4bbb      	ldr	r3, [pc, #748]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8013f7a:	681a      	ldr	r2, [r3, #0]
 8013f7c:	2380      	movs	r3, #128	@ 0x80
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	401a      	ands	r2, r3
 8013f82:	2380      	movs	r3, #128	@ 0x80
 8013f84:	00db      	lsls	r3, r3, #3
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d110      	bne.n	8013fac <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8013f8a:	4bb8      	ldr	r3, [pc, #736]	@ (801426c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8013f8c:	61fb      	str	r3, [r7, #28]
            break;
 8013f8e:	e00d      	b.n	8013fac <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8013f90:	4ab5      	ldr	r2, [pc, #724]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8013f92:	2390      	movs	r3, #144	@ 0x90
 8013f94:	58d3      	ldr	r3, [r2, r3]
 8013f96:	2202      	movs	r2, #2
 8013f98:	4013      	ands	r3, r2
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d109      	bne.n	8013fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8013f9e:	2380      	movs	r3, #128	@ 0x80
 8013fa0:	021b      	lsls	r3, r3, #8
 8013fa2:	61fb      	str	r3, [r7, #28]
            break;
 8013fa4:	e005      	b.n	8013fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8013fa6:	46c0      	nop			@ (mov r8, r8)
 8013fa8:	f000 fb69 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8013fac:	46c0      	nop			@ (mov r8, r8)
 8013fae:	f000 fb66 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8013fb2:	46c0      	nop			@ (mov r8, r8)
        break;
 8013fb4:	f000 fb63 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8013fb8:	4aab      	ldr	r2, [pc, #684]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8013fba:	2388      	movs	r3, #136	@ 0x88
 8013fbc:	58d2      	ldr	r2, [r2, r3]
 8013fbe:	23c0      	movs	r3, #192	@ 0xc0
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	617b      	str	r3, [r7, #20]
 8013fc6:	697a      	ldr	r2, [r7, #20]
 8013fc8:	23c0      	movs	r3, #192	@ 0xc0
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d02d      	beq.n	801402c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8013fd0:	697a      	ldr	r2, [r7, #20]
 8013fd2:	23c0      	movs	r3, #192	@ 0xc0
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d833      	bhi.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8013fda:	697a      	ldr	r2, [r7, #20]
 8013fdc:	2380      	movs	r3, #128	@ 0x80
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d017      	beq.n	8014014 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8013fe4:	697a      	ldr	r2, [r7, #20]
 8013fe6:	2380      	movs	r3, #128	@ 0x80
 8013fe8:	009b      	lsls	r3, r3, #2
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d829      	bhi.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d005      	beq.n	8014000 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8013ff4:	697a      	ldr	r2, [r7, #20]
 8013ff6:	2380      	movs	r3, #128	@ 0x80
 8013ff8:	005b      	lsls	r3, r3, #1
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d005      	beq.n	801400a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8013ffe:	e020      	b.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014000:	f7ff fb52 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8014004:	0003      	movs	r3, r0
 8014006:	61fb      	str	r3, [r7, #28]
            break;
 8014008:	e022      	b.n	8014050 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 801400a:	f7ff faa7 	bl	801355c <HAL_RCC_GetSysClockFreq>
 801400e:	0003      	movs	r3, r0
 8014010:	61fb      	str	r3, [r7, #28]
            break;
 8014012:	e01d      	b.n	8014050 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014014:	4b94      	ldr	r3, [pc, #592]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	2380      	movs	r3, #128	@ 0x80
 801401a:	00db      	lsls	r3, r3, #3
 801401c:	401a      	ands	r2, r3
 801401e:	2380      	movs	r3, #128	@ 0x80
 8014020:	00db      	lsls	r3, r3, #3
 8014022:	429a      	cmp	r2, r3
 8014024:	d110      	bne.n	8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8014026:	4b91      	ldr	r3, [pc, #580]	@ (801426c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8014028:	61fb      	str	r3, [r7, #28]
            break;
 801402a:	e00d      	b.n	8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801402c:	4a8e      	ldr	r2, [pc, #568]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801402e:	2390      	movs	r3, #144	@ 0x90
 8014030:	58d3      	ldr	r3, [r2, r3]
 8014032:	2202      	movs	r2, #2
 8014034:	4013      	ands	r3, r2
 8014036:	2b02      	cmp	r3, #2
 8014038:	d109      	bne.n	801404e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 801403a:	2380      	movs	r3, #128	@ 0x80
 801403c:	021b      	lsls	r3, r3, #8
 801403e:	61fb      	str	r3, [r7, #28]
            break;
 8014040:	e005      	b.n	801404e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8014042:	46c0      	nop			@ (mov r8, r8)
 8014044:	f000 fb1b 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014048:	46c0      	nop			@ (mov r8, r8)
 801404a:	f000 fb18 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801404e:	46c0      	nop			@ (mov r8, r8)
        break;
 8014050:	f000 fb15 	bl	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8014054:	4a84      	ldr	r2, [pc, #528]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014056:	2388      	movs	r3, #136	@ 0x88
 8014058:	58d3      	ldr	r3, [r2, r3]
 801405a:	22c0      	movs	r2, #192	@ 0xc0
 801405c:	4013      	ands	r3, r2
 801405e:	617b      	str	r3, [r7, #20]
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	2bc0      	cmp	r3, #192	@ 0xc0
 8014064:	d025      	beq.n	80140b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	2bc0      	cmp	r3, #192	@ 0xc0
 801406a:	d82d      	bhi.n	80140c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	2b80      	cmp	r3, #128	@ 0x80
 8014070:	d013      	beq.n	801409a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	2b80      	cmp	r3, #128	@ 0x80
 8014076:	d827      	bhi.n	80140c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d003      	beq.n	8014086 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	2b40      	cmp	r3, #64	@ 0x40
 8014082:	d005      	beq.n	8014090 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8014084:	e020      	b.n	80140c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014086:	f7ff fb0f 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 801408a:	0003      	movs	r3, r0
 801408c:	61fb      	str	r3, [r7, #28]
            break;
 801408e:	e020      	b.n	80140d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8014090:	f7ff fa64 	bl	801355c <HAL_RCC_GetSysClockFreq>
 8014094:	0003      	movs	r3, r0
 8014096:	61fb      	str	r3, [r7, #28]
            break;
 8014098:	e01b      	b.n	80140d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801409a:	4b73      	ldr	r3, [pc, #460]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	2380      	movs	r3, #128	@ 0x80
 80140a0:	00db      	lsls	r3, r3, #3
 80140a2:	401a      	ands	r2, r3
 80140a4:	2380      	movs	r3, #128	@ 0x80
 80140a6:	00db      	lsls	r3, r3, #3
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d10f      	bne.n	80140cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 80140ac:	4b6f      	ldr	r3, [pc, #444]	@ (801426c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80140ae:	61fb      	str	r3, [r7, #28]
            break;
 80140b0:	e00c      	b.n	80140cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80140b2:	4a6d      	ldr	r2, [pc, #436]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80140b4:	2390      	movs	r3, #144	@ 0x90
 80140b6:	58d3      	ldr	r3, [r2, r3]
 80140b8:	2202      	movs	r2, #2
 80140ba:	4013      	ands	r3, r2
 80140bc:	2b02      	cmp	r3, #2
 80140be:	d107      	bne.n	80140d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 80140c0:	2380      	movs	r3, #128	@ 0x80
 80140c2:	021b      	lsls	r3, r3, #8
 80140c4:	61fb      	str	r3, [r7, #28]
            break;
 80140c6:	e003      	b.n	80140d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 80140c8:	46c0      	nop			@ (mov r8, r8)
 80140ca:	e2d8      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80140cc:	46c0      	nop			@ (mov r8, r8)
 80140ce:	e2d6      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80140d0:	46c0      	nop			@ (mov r8, r8)
        break;
 80140d2:	e2d4      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80140d4:	4a64      	ldr	r2, [pc, #400]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80140d6:	2388      	movs	r3, #136	@ 0x88
 80140d8:	58d2      	ldr	r2, [r2, r3]
 80140da:	23c0      	movs	r3, #192	@ 0xc0
 80140dc:	059b      	lsls	r3, r3, #22
 80140de:	4013      	ands	r3, r2
 80140e0:	617b      	str	r3, [r7, #20]
 80140e2:	697a      	ldr	r2, [r7, #20]
 80140e4:	2380      	movs	r3, #128	@ 0x80
 80140e6:	059b      	lsls	r3, r3, #22
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d012      	beq.n	8014112 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80140ec:	697a      	ldr	r2, [r7, #20]
 80140ee:	2380      	movs	r3, #128	@ 0x80
 80140f0:	059b      	lsls	r3, r3, #22
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d825      	bhi.n	8014142 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d005      	beq.n	8014108 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 80140fc:	697a      	ldr	r2, [r7, #20]
 80140fe:	2380      	movs	r3, #128	@ 0x80
 8014100:	055b      	lsls	r3, r3, #21
 8014102:	429a      	cmp	r2, r3
 8014104:	d014      	beq.n	8014130 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8014106:	e01c      	b.n	8014142 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8014108:	f7ff fa28 	bl	801355c <HAL_RCC_GetSysClockFreq>
 801410c:	0003      	movs	r3, r0
 801410e:	61fb      	str	r3, [r7, #28]
            break;
 8014110:	e018      	b.n	8014144 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014112:	4b55      	ldr	r3, [pc, #340]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014114:	681a      	ldr	r2, [r3, #0]
 8014116:	2380      	movs	r3, #128	@ 0x80
 8014118:	00db      	lsls	r3, r3, #3
 801411a:	401a      	ands	r2, r3
 801411c:	2380      	movs	r3, #128	@ 0x80
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	429a      	cmp	r2, r3
 8014122:	d102      	bne.n	801412a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8014124:	4b51      	ldr	r3, [pc, #324]	@ (801426c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8014126:	61fb      	str	r3, [r7, #28]
            break;
 8014128:	e00c      	b.n	8014144 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 801412a:	2300      	movs	r3, #0
 801412c:	61fb      	str	r3, [r7, #28]
            break;
 801412e:	e009      	b.n	8014144 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8014130:	2408      	movs	r4, #8
 8014132:	193b      	adds	r3, r7, r4
 8014134:	0018      	movs	r0, r3
 8014136:	f000 faad 	bl	8014694 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 801413a:	193b      	adds	r3, r7, r4
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	61fb      	str	r3, [r7, #28]
            break;
 8014140:	e000      	b.n	8014144 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8014142:	46c0      	nop			@ (mov r8, r8)
        break;
 8014144:	e29b      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8014146:	4a48      	ldr	r2, [pc, #288]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014148:	2388      	movs	r3, #136	@ 0x88
 801414a:	58d2      	ldr	r2, [r2, r3]
 801414c:	23c0      	movs	r3, #192	@ 0xc0
 801414e:	019b      	lsls	r3, r3, #6
 8014150:	4013      	ands	r3, r2
 8014152:	617b      	str	r3, [r7, #20]
 8014154:	697a      	ldr	r2, [r7, #20]
 8014156:	2380      	movs	r3, #128	@ 0x80
 8014158:	019b      	lsls	r3, r3, #6
 801415a:	429a      	cmp	r2, r3
 801415c:	d017      	beq.n	801418e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 801415e:	697a      	ldr	r2, [r7, #20]
 8014160:	2380      	movs	r3, #128	@ 0x80
 8014162:	019b      	lsls	r3, r3, #6
 8014164:	429a      	cmp	r2, r3
 8014166:	d81e      	bhi.n	80141a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d005      	beq.n	801417a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 801416e:	697a      	ldr	r2, [r7, #20]
 8014170:	2380      	movs	r3, #128	@ 0x80
 8014172:	015b      	lsls	r3, r3, #5
 8014174:	429a      	cmp	r2, r3
 8014176:	d005      	beq.n	8014184 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8014178:	e015      	b.n	80141a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 801417a:	f7ff fa95 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 801417e:	0003      	movs	r3, r0
 8014180:	61fb      	str	r3, [r7, #28]
            break;
 8014182:	e013      	b.n	80141ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8014184:	f7ff f9ea 	bl	801355c <HAL_RCC_GetSysClockFreq>
 8014188:	0003      	movs	r3, r0
 801418a:	61fb      	str	r3, [r7, #28]
            break;
 801418c:	e00e      	b.n	80141ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801418e:	4b36      	ldr	r3, [pc, #216]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	2380      	movs	r3, #128	@ 0x80
 8014194:	00db      	lsls	r3, r3, #3
 8014196:	401a      	ands	r2, r3
 8014198:	2380      	movs	r3, #128	@ 0x80
 801419a:	00db      	lsls	r3, r3, #3
 801419c:	429a      	cmp	r2, r3
 801419e:	d104      	bne.n	80141aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80141a0:	4b32      	ldr	r3, [pc, #200]	@ (801426c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80141a2:	61fb      	str	r3, [r7, #28]
            break;
 80141a4:	e001      	b.n	80141aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80141a6:	46c0      	nop			@ (mov r8, r8)
 80141a8:	e269      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80141aa:	46c0      	nop			@ (mov r8, r8)
        break;
 80141ac:	e267      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80141ae:	4a2e      	ldr	r2, [pc, #184]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80141b0:	2388      	movs	r3, #136	@ 0x88
 80141b2:	58d2      	ldr	r2, [r2, r3]
 80141b4:	23c0      	movs	r3, #192	@ 0xc0
 80141b6:	029b      	lsls	r3, r3, #10
 80141b8:	4013      	ands	r3, r2
 80141ba:	617b      	str	r3, [r7, #20]
 80141bc:	697a      	ldr	r2, [r7, #20]
 80141be:	2380      	movs	r3, #128	@ 0x80
 80141c0:	029b      	lsls	r3, r3, #10
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d017      	beq.n	80141f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 80141c6:	697a      	ldr	r2, [r7, #20]
 80141c8:	2380      	movs	r3, #128	@ 0x80
 80141ca:	029b      	lsls	r3, r3, #10
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d81e      	bhi.n	801420e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d005      	beq.n	80141e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80141d6:	697a      	ldr	r2, [r7, #20]
 80141d8:	2380      	movs	r3, #128	@ 0x80
 80141da:	025b      	lsls	r3, r3, #9
 80141dc:	429a      	cmp	r2, r3
 80141de:	d005      	beq.n	80141ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 80141e0:	e015      	b.n	801420e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 80141e2:	f7ff fa61 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 80141e6:	0003      	movs	r3, r0
 80141e8:	61fb      	str	r3, [r7, #28]
            break;
 80141ea:	e013      	b.n	8014214 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 80141ec:	f7ff f9b6 	bl	801355c <HAL_RCC_GetSysClockFreq>
 80141f0:	0003      	movs	r3, r0
 80141f2:	61fb      	str	r3, [r7, #28]
            break;
 80141f4:	e00e      	b.n	8014214 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80141f6:	4b1c      	ldr	r3, [pc, #112]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80141f8:	681a      	ldr	r2, [r3, #0]
 80141fa:	2380      	movs	r3, #128	@ 0x80
 80141fc:	00db      	lsls	r3, r3, #3
 80141fe:	401a      	ands	r2, r3
 8014200:	2380      	movs	r3, #128	@ 0x80
 8014202:	00db      	lsls	r3, r3, #3
 8014204:	429a      	cmp	r2, r3
 8014206:	d104      	bne.n	8014212 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8014208:	4b18      	ldr	r3, [pc, #96]	@ (801426c <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 801420a:	61fb      	str	r3, [r7, #28]
            break;
 801420c:	e001      	b.n	8014212 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 801420e:	46c0      	nop			@ (mov r8, r8)
 8014210:	e235      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014212:	46c0      	nop			@ (mov r8, r8)
        break;
 8014214:	e233      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8014216:	4a14      	ldr	r2, [pc, #80]	@ (8014268 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8014218:	2388      	movs	r3, #136	@ 0x88
 801421a:	58d2      	ldr	r2, [r2, r3]
 801421c:	23c0      	movs	r3, #192	@ 0xc0
 801421e:	031b      	lsls	r3, r3, #12
 8014220:	4013      	ands	r3, r2
 8014222:	617b      	str	r3, [r7, #20]
 8014224:	697a      	ldr	r2, [r7, #20]
 8014226:	23c0      	movs	r3, #192	@ 0xc0
 8014228:	031b      	lsls	r3, r3, #12
 801422a:	429a      	cmp	r2, r3
 801422c:	d041      	beq.n	80142b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 801422e:	697a      	ldr	r2, [r7, #20]
 8014230:	23c0      	movs	r3, #192	@ 0xc0
 8014232:	031b      	lsls	r3, r3, #12
 8014234:	429a      	cmp	r2, r3
 8014236:	d847      	bhi.n	80142c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8014238:	697a      	ldr	r2, [r7, #20]
 801423a:	2380      	movs	r3, #128	@ 0x80
 801423c:	031b      	lsls	r3, r3, #12
 801423e:	429a      	cmp	r2, r3
 8014240:	d02b      	beq.n	801429a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8014242:	697a      	ldr	r2, [r7, #20]
 8014244:	2380      	movs	r3, #128	@ 0x80
 8014246:	031b      	lsls	r3, r3, #12
 8014248:	429a      	cmp	r2, r3
 801424a:	d83d      	bhi.n	80142c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d005      	beq.n	801425e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8014252:	697a      	ldr	r2, [r7, #20]
 8014254:	2380      	movs	r3, #128	@ 0x80
 8014256:	02db      	lsls	r3, r3, #11
 8014258:	429a      	cmp	r2, r3
 801425a:	d009      	beq.n	8014270 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 801425c:	e034      	b.n	80142c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 801425e:	f7ff fa23 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8014262:	0003      	movs	r3, r0
 8014264:	61fb      	str	r3, [r7, #28]
            break;
 8014266:	e036      	b.n	80142d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8014268:	40021000 	.word	0x40021000
 801426c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8014270:	4abd      	ldr	r2, [pc, #756]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014272:	2394      	movs	r3, #148	@ 0x94
 8014274:	58d3      	ldr	r3, [r2, r3]
 8014276:	2202      	movs	r2, #2
 8014278:	4013      	ands	r3, r2
 801427a:	2b02      	cmp	r3, #2
 801427c:	d126      	bne.n	80142cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 801427e:	4aba      	ldr	r2, [pc, #744]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014280:	2394      	movs	r3, #148	@ 0x94
 8014282:	58d3      	ldr	r3, [r2, r3]
 8014284:	2204      	movs	r2, #4
 8014286:	4013      	ands	r3, r2
 8014288:	2b04      	cmp	r3, #4
 801428a:	d102      	bne.n	8014292 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 801428c:	23fa      	movs	r3, #250	@ 0xfa
 801428e:	61fb      	str	r3, [r7, #28]
            break;
 8014290:	e01c      	b.n	80142cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8014292:	23fa      	movs	r3, #250	@ 0xfa
 8014294:	01db      	lsls	r3, r3, #7
 8014296:	61fb      	str	r3, [r7, #28]
            break;
 8014298:	e018      	b.n	80142cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801429a:	4bb3      	ldr	r3, [pc, #716]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	2380      	movs	r3, #128	@ 0x80
 80142a0:	00db      	lsls	r3, r3, #3
 80142a2:	401a      	ands	r2, r3
 80142a4:	2380      	movs	r3, #128	@ 0x80
 80142a6:	00db      	lsls	r3, r3, #3
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d111      	bne.n	80142d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 80142ac:	4baf      	ldr	r3, [pc, #700]	@ (801456c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80142ae:	61fb      	str	r3, [r7, #28]
            break;
 80142b0:	e00e      	b.n	80142d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80142b2:	4aad      	ldr	r2, [pc, #692]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80142b4:	2390      	movs	r3, #144	@ 0x90
 80142b6:	58d3      	ldr	r3, [r2, r3]
 80142b8:	2202      	movs	r2, #2
 80142ba:	4013      	ands	r3, r2
 80142bc:	2b02      	cmp	r3, #2
 80142be:	d109      	bne.n	80142d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 80142c0:	2380      	movs	r3, #128	@ 0x80
 80142c2:	021b      	lsls	r3, r3, #8
 80142c4:	61fb      	str	r3, [r7, #28]
            break;
 80142c6:	e005      	b.n	80142d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 80142c8:	46c0      	nop			@ (mov r8, r8)
 80142ca:	e1d8      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80142cc:	46c0      	nop			@ (mov r8, r8)
 80142ce:	e1d6      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80142d0:	46c0      	nop			@ (mov r8, r8)
 80142d2:	e1d4      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80142d4:	46c0      	nop			@ (mov r8, r8)
        break;
 80142d6:	e1d2      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80142d8:	4aa3      	ldr	r2, [pc, #652]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80142da:	2388      	movs	r3, #136	@ 0x88
 80142dc:	58d2      	ldr	r2, [r2, r3]
 80142de:	23c0      	movs	r3, #192	@ 0xc0
 80142e0:	039b      	lsls	r3, r3, #14
 80142e2:	4013      	ands	r3, r2
 80142e4:	617b      	str	r3, [r7, #20]
 80142e6:	697a      	ldr	r2, [r7, #20]
 80142e8:	23c0      	movs	r3, #192	@ 0xc0
 80142ea:	039b      	lsls	r3, r3, #14
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d03d      	beq.n	801436c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80142f0:	697a      	ldr	r2, [r7, #20]
 80142f2:	23c0      	movs	r3, #192	@ 0xc0
 80142f4:	039b      	lsls	r3, r3, #14
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d843      	bhi.n	8014382 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80142fa:	697a      	ldr	r2, [r7, #20]
 80142fc:	2380      	movs	r3, #128	@ 0x80
 80142fe:	039b      	lsls	r3, r3, #14
 8014300:	429a      	cmp	r2, r3
 8014302:	d027      	beq.n	8014354 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8014304:	697a      	ldr	r2, [r7, #20]
 8014306:	2380      	movs	r3, #128	@ 0x80
 8014308:	039b      	lsls	r3, r3, #14
 801430a:	429a      	cmp	r2, r3
 801430c:	d839      	bhi.n	8014382 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d005      	beq.n	8014320 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8014314:	697a      	ldr	r2, [r7, #20]
 8014316:	2380      	movs	r3, #128	@ 0x80
 8014318:	035b      	lsls	r3, r3, #13
 801431a:	429a      	cmp	r2, r3
 801431c:	d005      	beq.n	801432a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 801431e:	e030      	b.n	8014382 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8014320:	f7ff f9c2 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8014324:	0003      	movs	r3, r0
 8014326:	61fb      	str	r3, [r7, #28]
            break;
 8014328:	e032      	b.n	8014390 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801432a:	4a8f      	ldr	r2, [pc, #572]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801432c:	2394      	movs	r3, #148	@ 0x94
 801432e:	58d3      	ldr	r3, [r2, r3]
 8014330:	2202      	movs	r2, #2
 8014332:	4013      	ands	r3, r2
 8014334:	2b02      	cmp	r3, #2
 8014336:	d126      	bne.n	8014386 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8014338:	4a8b      	ldr	r2, [pc, #556]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801433a:	2394      	movs	r3, #148	@ 0x94
 801433c:	58d3      	ldr	r3, [r2, r3]
 801433e:	2204      	movs	r2, #4
 8014340:	4013      	ands	r3, r2
 8014342:	2b04      	cmp	r3, #4
 8014344:	d102      	bne.n	801434c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8014346:	23fa      	movs	r3, #250	@ 0xfa
 8014348:	61fb      	str	r3, [r7, #28]
            break;
 801434a:	e01c      	b.n	8014386 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 801434c:	23fa      	movs	r3, #250	@ 0xfa
 801434e:	01db      	lsls	r3, r3, #7
 8014350:	61fb      	str	r3, [r7, #28]
            break;
 8014352:	e018      	b.n	8014386 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8014354:	4b84      	ldr	r3, [pc, #528]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	2380      	movs	r3, #128	@ 0x80
 801435a:	00db      	lsls	r3, r3, #3
 801435c:	401a      	ands	r2, r3
 801435e:	2380      	movs	r3, #128	@ 0x80
 8014360:	00db      	lsls	r3, r3, #3
 8014362:	429a      	cmp	r2, r3
 8014364:	d111      	bne.n	801438a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8014366:	4b81      	ldr	r3, [pc, #516]	@ (801456c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8014368:	61fb      	str	r3, [r7, #28]
            break;
 801436a:	e00e      	b.n	801438a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801436c:	4a7e      	ldr	r2, [pc, #504]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801436e:	2390      	movs	r3, #144	@ 0x90
 8014370:	58d3      	ldr	r3, [r2, r3]
 8014372:	2202      	movs	r2, #2
 8014374:	4013      	ands	r3, r2
 8014376:	2b02      	cmp	r3, #2
 8014378:	d109      	bne.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 801437a:	2380      	movs	r3, #128	@ 0x80
 801437c:	021b      	lsls	r3, r3, #8
 801437e:	61fb      	str	r3, [r7, #28]
            break;
 8014380:	e005      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8014382:	46c0      	nop			@ (mov r8, r8)
 8014384:	e17b      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014386:	46c0      	nop			@ (mov r8, r8)
 8014388:	e179      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801438a:	46c0      	nop			@ (mov r8, r8)
 801438c:	e177      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801438e:	46c0      	nop			@ (mov r8, r8)
        break;
 8014390:	e175      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8014392:	4a75      	ldr	r2, [pc, #468]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014394:	2388      	movs	r3, #136	@ 0x88
 8014396:	58d2      	ldr	r2, [r2, r3]
 8014398:	23c0      	movs	r3, #192	@ 0xc0
 801439a:	041b      	lsls	r3, r3, #16
 801439c:	4013      	ands	r3, r2
 801439e:	617b      	str	r3, [r7, #20]
 80143a0:	697a      	ldr	r2, [r7, #20]
 80143a2:	23c0      	movs	r3, #192	@ 0xc0
 80143a4:	041b      	lsls	r3, r3, #16
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d03d      	beq.n	8014426 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80143aa:	697a      	ldr	r2, [r7, #20]
 80143ac:	23c0      	movs	r3, #192	@ 0xc0
 80143ae:	041b      	lsls	r3, r3, #16
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d843      	bhi.n	801443c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80143b4:	697a      	ldr	r2, [r7, #20]
 80143b6:	2380      	movs	r3, #128	@ 0x80
 80143b8:	041b      	lsls	r3, r3, #16
 80143ba:	429a      	cmp	r2, r3
 80143bc:	d027      	beq.n	801440e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80143be:	697a      	ldr	r2, [r7, #20]
 80143c0:	2380      	movs	r3, #128	@ 0x80
 80143c2:	041b      	lsls	r3, r3, #16
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d839      	bhi.n	801443c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d005      	beq.n	80143da <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80143ce:	697a      	ldr	r2, [r7, #20]
 80143d0:	2380      	movs	r3, #128	@ 0x80
 80143d2:	03db      	lsls	r3, r3, #15
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d005      	beq.n	80143e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 80143d8:	e030      	b.n	801443c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 80143da:	f7ff f965 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 80143de:	0003      	movs	r3, r0
 80143e0:	61fb      	str	r3, [r7, #28]
            break;
 80143e2:	e032      	b.n	801444a <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80143e4:	4a60      	ldr	r2, [pc, #384]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80143e6:	2394      	movs	r3, #148	@ 0x94
 80143e8:	58d3      	ldr	r3, [r2, r3]
 80143ea:	2202      	movs	r2, #2
 80143ec:	4013      	ands	r3, r2
 80143ee:	2b02      	cmp	r3, #2
 80143f0:	d126      	bne.n	8014440 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80143f2:	4a5d      	ldr	r2, [pc, #372]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80143f4:	2394      	movs	r3, #148	@ 0x94
 80143f6:	58d3      	ldr	r3, [r2, r3]
 80143f8:	2204      	movs	r2, #4
 80143fa:	4013      	ands	r3, r2
 80143fc:	2b04      	cmp	r3, #4
 80143fe:	d102      	bne.n	8014406 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8014400:	23fa      	movs	r3, #250	@ 0xfa
 8014402:	61fb      	str	r3, [r7, #28]
            break;
 8014404:	e01c      	b.n	8014440 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8014406:	23fa      	movs	r3, #250	@ 0xfa
 8014408:	01db      	lsls	r3, r3, #7
 801440a:	61fb      	str	r3, [r7, #28]
            break;
 801440c:	e018      	b.n	8014440 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801440e:	4b56      	ldr	r3, [pc, #344]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	2380      	movs	r3, #128	@ 0x80
 8014414:	00db      	lsls	r3, r3, #3
 8014416:	401a      	ands	r2, r3
 8014418:	2380      	movs	r3, #128	@ 0x80
 801441a:	00db      	lsls	r3, r3, #3
 801441c:	429a      	cmp	r2, r3
 801441e:	d111      	bne.n	8014444 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8014420:	4b52      	ldr	r3, [pc, #328]	@ (801456c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8014422:	61fb      	str	r3, [r7, #28]
            break;
 8014424:	e00e      	b.n	8014444 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8014426:	4a50      	ldr	r2, [pc, #320]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014428:	2390      	movs	r3, #144	@ 0x90
 801442a:	58d3      	ldr	r3, [r2, r3]
 801442c:	2202      	movs	r2, #2
 801442e:	4013      	ands	r3, r2
 8014430:	2b02      	cmp	r3, #2
 8014432:	d109      	bne.n	8014448 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8014434:	2380      	movs	r3, #128	@ 0x80
 8014436:	021b      	lsls	r3, r3, #8
 8014438:	61fb      	str	r3, [r7, #28]
            break;
 801443a:	e005      	b.n	8014448 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 801443c:	46c0      	nop			@ (mov r8, r8)
 801443e:	e11e      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014440:	46c0      	nop			@ (mov r8, r8)
 8014442:	e11c      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014444:	46c0      	nop			@ (mov r8, r8)
 8014446:	e11a      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014448:	46c0      	nop			@ (mov r8, r8)
        break;
 801444a:	e118      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 801444c:	4a46      	ldr	r2, [pc, #280]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801444e:	2388      	movs	r3, #136	@ 0x88
 8014450:	58d2      	ldr	r2, [r2, r3]
 8014452:	2380      	movs	r3, #128	@ 0x80
 8014454:	045b      	lsls	r3, r3, #17
 8014456:	4013      	ands	r3, r2
 8014458:	617b      	str	r3, [r7, #20]
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d005      	beq.n	801446c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8014460:	697a      	ldr	r2, [r7, #20]
 8014462:	2380      	movs	r3, #128	@ 0x80
 8014464:	045b      	lsls	r3, r3, #17
 8014466:	429a      	cmp	r2, r3
 8014468:	d011      	beq.n	801448e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 801446a:	e019      	b.n	80144a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 801446c:	4b3e      	ldr	r3, [pc, #248]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801446e:	689a      	ldr	r2, [r3, #8]
 8014470:	23e0      	movs	r3, #224	@ 0xe0
 8014472:	01db      	lsls	r3, r3, #7
 8014474:	4013      	ands	r3, r2
 8014476:	d104      	bne.n	8014482 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8014478:	f7ff f916 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 801447c:	0003      	movs	r3, r0
 801447e:	61fb      	str	r3, [r7, #28]
            break;
 8014480:	e00e      	b.n	80144a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8014482:	f7ff f911 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 8014486:	0003      	movs	r3, r0
 8014488:	005b      	lsls	r3, r3, #1
 801448a:	61fb      	str	r3, [r7, #28]
            break;
 801448c:	e008      	b.n	80144a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801448e:	2408      	movs	r4, #8
 8014490:	193b      	adds	r3, r7, r4
 8014492:	0018      	movs	r0, r3
 8014494:	f000 f8fe 	bl	8014694 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8014498:	193b      	adds	r3, r7, r4
 801449a:	685b      	ldr	r3, [r3, #4]
 801449c:	61fb      	str	r3, [r7, #28]
            break;
 801449e:	46c0      	nop			@ (mov r8, r8)
        break;
 80144a0:	e0ed      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80144a2:	4a31      	ldr	r2, [pc, #196]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80144a4:	2388      	movs	r3, #136	@ 0x88
 80144a6:	58d2      	ldr	r2, [r2, r3]
 80144a8:	2380      	movs	r3, #128	@ 0x80
 80144aa:	049b      	lsls	r3, r3, #18
 80144ac:	4013      	ands	r3, r2
 80144ae:	617b      	str	r3, [r7, #20]
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d005      	beq.n	80144c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80144b6:	697a      	ldr	r2, [r7, #20]
 80144b8:	2380      	movs	r3, #128	@ 0x80
 80144ba:	049b      	lsls	r3, r3, #18
 80144bc:	429a      	cmp	r2, r3
 80144be:	d011      	beq.n	80144e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 80144c0:	e019      	b.n	80144f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80144c2:	4b29      	ldr	r3, [pc, #164]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80144c4:	689a      	ldr	r2, [r3, #8]
 80144c6:	23e0      	movs	r3, #224	@ 0xe0
 80144c8:	01db      	lsls	r3, r3, #7
 80144ca:	4013      	ands	r3, r2
 80144cc:	d104      	bne.n	80144d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 80144ce:	f7ff f8eb 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 80144d2:	0003      	movs	r3, r0
 80144d4:	61fb      	str	r3, [r7, #28]
            break;
 80144d6:	e00e      	b.n	80144f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80144d8:	f7ff f8e6 	bl	80136a8 <HAL_RCC_GetPCLK1Freq>
 80144dc:	0003      	movs	r3, r0
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	61fb      	str	r3, [r7, #28]
            break;
 80144e2:	e008      	b.n	80144f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80144e4:	2408      	movs	r4, #8
 80144e6:	193b      	adds	r3, r7, r4
 80144e8:	0018      	movs	r0, r3
 80144ea:	f000 f8d3 	bl	8014694 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80144ee:	193b      	adds	r3, r7, r4
 80144f0:	685b      	ldr	r3, [r3, #4]
 80144f2:	61fb      	str	r3, [r7, #28]
            break;
 80144f4:	46c0      	nop			@ (mov r8, r8)
        break;
 80144f6:	e0c2      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80144f8:	4a1b      	ldr	r2, [pc, #108]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80144fa:	2388      	movs	r3, #136	@ 0x88
 80144fc:	58d2      	ldr	r2, [r2, r3]
 80144fe:	23c0      	movs	r3, #192	@ 0xc0
 8014500:	051b      	lsls	r3, r3, #20
 8014502:	4013      	ands	r3, r2
 8014504:	617b      	str	r3, [r7, #20]
 8014506:	697a      	ldr	r2, [r7, #20]
 8014508:	23c0      	movs	r3, #192	@ 0xc0
 801450a:	051b      	lsls	r3, r3, #20
 801450c:	429a      	cmp	r2, r3
 801450e:	d017      	beq.n	8014540 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8014510:	697a      	ldr	r2, [r7, #20]
 8014512:	23c0      	movs	r3, #192	@ 0xc0
 8014514:	051b      	lsls	r3, r3, #20
 8014516:	429a      	cmp	r2, r3
 8014518:	d84a      	bhi.n	80145b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 801451a:	697a      	ldr	r2, [r7, #20]
 801451c:	2380      	movs	r3, #128	@ 0x80
 801451e:	051b      	lsls	r3, r3, #20
 8014520:	429a      	cmp	r2, r3
 8014522:	d039      	beq.n	8014598 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8014524:	697a      	ldr	r2, [r7, #20]
 8014526:	2380      	movs	r3, #128	@ 0x80
 8014528:	051b      	lsls	r3, r3, #20
 801452a:	429a      	cmp	r2, r3
 801452c:	d840      	bhi.n	80145b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d03a      	beq.n	80145aa <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8014534:	697a      	ldr	r2, [r7, #20]
 8014536:	2380      	movs	r3, #128	@ 0x80
 8014538:	04db      	lsls	r3, r3, #19
 801453a:	429a      	cmp	r2, r3
 801453c:	d003      	beq.n	8014546 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 801453e:	e037      	b.n	80145b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8014540:	4b0b      	ldr	r3, [pc, #44]	@ (8014570 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8014542:	61fb      	str	r3, [r7, #28]
            break;
 8014544:	e037      	b.n	80145b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8014546:	4b08      	ldr	r3, [pc, #32]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	2202      	movs	r2, #2
 801454c:	4013      	ands	r3, r2
 801454e:	2b02      	cmp	r3, #2
 8014550:	d130      	bne.n	80145b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8014552:	4b05      	ldr	r3, [pc, #20]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2208      	movs	r2, #8
 8014558:	4013      	ands	r3, r2
 801455a:	d00b      	beq.n	8014574 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 801455c:	4b02      	ldr	r3, [pc, #8]	@ (8014568 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	091b      	lsrs	r3, r3, #4
 8014562:	220f      	movs	r2, #15
 8014564:	4013      	ands	r3, r2
 8014566:	e00b      	b.n	8014580 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8014568:	40021000 	.word	0x40021000
 801456c:	00f42400 	.word	0x00f42400
 8014570:	02dc6c00 	.word	0x02dc6c00
 8014574:	4a44      	ldr	r2, [pc, #272]	@ (8014688 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8014576:	2394      	movs	r3, #148	@ 0x94
 8014578:	58d3      	ldr	r3, [r2, r3]
 801457a:	0a1b      	lsrs	r3, r3, #8
 801457c:	220f      	movs	r2, #15
 801457e:	4013      	ands	r3, r2
 8014580:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	2b0b      	cmp	r3, #11
 8014586:	d901      	bls.n	801458c <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 8014588:	230b      	movs	r3, #11
 801458a:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 801458c:	4b3f      	ldr	r3, [pc, #252]	@ (801468c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 801458e:	69ba      	ldr	r2, [r7, #24]
 8014590:	0092      	lsls	r2, r2, #2
 8014592:	58d3      	ldr	r3, [r2, r3]
 8014594:	61fb      	str	r3, [r7, #28]
            break;
 8014596:	e00d      	b.n	80145b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8014598:	2408      	movs	r4, #8
 801459a:	193b      	adds	r3, r7, r4
 801459c:	0018      	movs	r0, r3
 801459e:	f000 f879 	bl	8014694 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80145a2:	193b      	adds	r3, r7, r4
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	61fb      	str	r3, [r7, #28]
            break;
 80145a8:	e005      	b.n	80145b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80145aa:	2300      	movs	r3, #0
 80145ac:	61fb      	str	r3, [r7, #28]
            break;
 80145ae:	e002      	b.n	80145b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80145b0:	46c0      	nop			@ (mov r8, r8)
 80145b2:	e064      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80145b4:	46c0      	nop			@ (mov r8, r8)
        break;
 80145b6:	e062      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80145b8:	4a33      	ldr	r2, [pc, #204]	@ (8014688 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80145ba:	2388      	movs	r3, #136	@ 0x88
 80145bc:	58d2      	ldr	r2, [r2, r3]
 80145be:	23c0      	movs	r3, #192	@ 0xc0
 80145c0:	051b      	lsls	r3, r3, #20
 80145c2:	4013      	ands	r3, r2
 80145c4:	617b      	str	r3, [r7, #20]
 80145c6:	697a      	ldr	r2, [r7, #20]
 80145c8:	23c0      	movs	r3, #192	@ 0xc0
 80145ca:	051b      	lsls	r3, r3, #20
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d017      	beq.n	8014600 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80145d0:	697a      	ldr	r2, [r7, #20]
 80145d2:	23c0      	movs	r3, #192	@ 0xc0
 80145d4:	051b      	lsls	r3, r3, #20
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d844      	bhi.n	8014664 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80145da:	697a      	ldr	r2, [r7, #20]
 80145dc:	2380      	movs	r3, #128	@ 0x80
 80145de:	051b      	lsls	r3, r3, #20
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d033      	beq.n	801464c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80145e4:	697a      	ldr	r2, [r7, #20]
 80145e6:	2380      	movs	r3, #128	@ 0x80
 80145e8:	051b      	lsls	r3, r3, #20
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d83a      	bhi.n	8014664 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d034      	beq.n	801465e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80145f4:	697a      	ldr	r2, [r7, #20]
 80145f6:	2380      	movs	r3, #128	@ 0x80
 80145f8:	04db      	lsls	r3, r3, #19
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d003      	beq.n	8014606 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 80145fe:	e031      	b.n	8014664 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8014600:	4b23      	ldr	r3, [pc, #140]	@ (8014690 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8014602:	61fb      	str	r3, [r7, #28]
            break;
 8014604:	e031      	b.n	801466a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8014606:	4b20      	ldr	r3, [pc, #128]	@ (8014688 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	2202      	movs	r2, #2
 801460c:	4013      	ands	r3, r2
 801460e:	2b02      	cmp	r3, #2
 8014610:	d12a      	bne.n	8014668 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8014612:	4b1d      	ldr	r3, [pc, #116]	@ (8014688 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2208      	movs	r2, #8
 8014618:	4013      	ands	r3, r2
 801461a:	d005      	beq.n	8014628 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 801461c:	4b1a      	ldr	r3, [pc, #104]	@ (8014688 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	091b      	lsrs	r3, r3, #4
 8014622:	220f      	movs	r2, #15
 8014624:	4013      	ands	r3, r2
 8014626:	e005      	b.n	8014634 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8014628:	4a17      	ldr	r2, [pc, #92]	@ (8014688 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801462a:	2394      	movs	r3, #148	@ 0x94
 801462c:	58d3      	ldr	r3, [r2, r3]
 801462e:	0a1b      	lsrs	r3, r3, #8
 8014630:	220f      	movs	r2, #15
 8014632:	4013      	ands	r3, r2
 8014634:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8014636:	69bb      	ldr	r3, [r7, #24]
 8014638:	2b0b      	cmp	r3, #11
 801463a:	d901      	bls.n	8014640 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 801463c:	230b      	movs	r3, #11
 801463e:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8014640:	4b12      	ldr	r3, [pc, #72]	@ (801468c <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8014642:	69ba      	ldr	r2, [r7, #24]
 8014644:	0092      	lsls	r2, r2, #2
 8014646:	58d3      	ldr	r3, [r2, r3]
 8014648:	61fb      	str	r3, [r7, #28]
            break;
 801464a:	e00d      	b.n	8014668 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801464c:	2408      	movs	r4, #8
 801464e:	193b      	adds	r3, r7, r4
 8014650:	0018      	movs	r0, r3
 8014652:	f000 f81f 	bl	8014694 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8014656:	193b      	adds	r3, r7, r4
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	61fb      	str	r3, [r7, #28]
            break;
 801465c:	e005      	b.n	801466a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 801465e:	2300      	movs	r3, #0
 8014660:	61fb      	str	r3, [r7, #28]
            break;
 8014662:	e002      	b.n	801466a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8014664:	46c0      	nop			@ (mov r8, r8)
 8014666:	e00a      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8014668:	46c0      	nop			@ (mov r8, r8)
        break;
 801466a:	e008      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 801466c:	46c0      	nop			@ (mov r8, r8)
 801466e:	e006      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8014670:	46c0      	nop			@ (mov r8, r8)
 8014672:	e004      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8014674:	46c0      	nop			@ (mov r8, r8)
 8014676:	e002      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8014678:	46c0      	nop			@ (mov r8, r8)
 801467a:	e000      	b.n	801467e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 801467c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 801467e:	69fb      	ldr	r3, [r7, #28]
}
 8014680:	0018      	movs	r0, r3
 8014682:	46bd      	mov	sp, r7
 8014684:	b009      	add	sp, #36	@ 0x24
 8014686:	bd90      	pop	{r4, r7, pc}
 8014688:	40021000 	.word	0x40021000
 801468c:	08017e34 	.word	0x08017e34
 8014690:	02dc6c00 	.word	0x02dc6c00

08014694 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b088      	sub	sp, #32
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801469c:	4b58      	ldr	r3, [pc, #352]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801469e:	68db      	ldr	r3, [r3, #12]
 80146a0:	0a1b      	lsrs	r3, r3, #8
 80146a2:	227f      	movs	r2, #127	@ 0x7f
 80146a4:	4013      	ands	r3, r2
 80146a6:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80146a8:	4b55      	ldr	r3, [pc, #340]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	2203      	movs	r2, #3
 80146ae:	4013      	ands	r3, r2
 80146b0:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80146b2:	4b53      	ldr	r3, [pc, #332]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	091b      	lsrs	r3, r3, #4
 80146b8:	2207      	movs	r2, #7
 80146ba:	4013      	ands	r3, r2
 80146bc:	3301      	adds	r3, #1
 80146be:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80146c0:	4b4f      	ldr	r3, [pc, #316]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	2208      	movs	r2, #8
 80146c6:	4013      	ands	r3, r2
 80146c8:	d005      	beq.n	80146d6 <HAL_RCCEx_GetPLLClockFreq+0x42>
 80146ca:	4b4d      	ldr	r3, [pc, #308]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	091b      	lsrs	r3, r3, #4
 80146d0:	220f      	movs	r2, #15
 80146d2:	4013      	ands	r3, r2
 80146d4:	e005      	b.n	80146e2 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80146d6:	4a4a      	ldr	r2, [pc, #296]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80146d8:	2394      	movs	r3, #148	@ 0x94
 80146da:	58d3      	ldr	r3, [r2, r3]
 80146dc:	0a1b      	lsrs	r3, r3, #8
 80146de:	220f      	movs	r2, #15
 80146e0:	4013      	ands	r3, r2
 80146e2:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80146e4:	69bb      	ldr	r3, [r7, #24]
 80146e6:	2b0b      	cmp	r3, #11
 80146e8:	d901      	bls.n	80146ee <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80146ea:	230b      	movs	r3, #11
 80146ec:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	2b03      	cmp	r3, #3
 80146f2:	d020      	beq.n	8014736 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	2b03      	cmp	r3, #3
 80146f8:	d827      	bhi.n	801474a <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d00c      	beq.n	801471a <HAL_RCCEx_GetPLLClockFreq+0x86>
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	2b02      	cmp	r3, #2
 8014704:	d121      	bne.n	801474a <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8014706:	68f9      	ldr	r1, [r7, #12]
 8014708:	483e      	ldr	r0, [pc, #248]	@ (8014804 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 801470a:	f7eb fd05 	bl	8000118 <__udivsi3>
 801470e:	0003      	movs	r3, r0
 8014710:	001a      	movs	r2, r3
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	4353      	muls	r3, r2
 8014716:	61fb      	str	r3, [r7, #28]
      break;
 8014718:	e025      	b.n	8014766 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801471a:	4b3b      	ldr	r3, [pc, #236]	@ (8014808 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 801471c:	69ba      	ldr	r2, [r7, #24]
 801471e:	0092      	lsls	r2, r2, #2
 8014720:	58d3      	ldr	r3, [r2, r3]
 8014722:	68f9      	ldr	r1, [r7, #12]
 8014724:	0018      	movs	r0, r3
 8014726:	f7eb fcf7 	bl	8000118 <__udivsi3>
 801472a:	0003      	movs	r3, r0
 801472c:	001a      	movs	r2, r3
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	4353      	muls	r3, r2
 8014732:	61fb      	str	r3, [r7, #28]
      break;
 8014734:	e017      	b.n	8014766 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8014736:	68f9      	ldr	r1, [r7, #12]
 8014738:	4834      	ldr	r0, [pc, #208]	@ (801480c <HAL_RCCEx_GetPLLClockFreq+0x178>)
 801473a:	f7eb fced 	bl	8000118 <__udivsi3>
 801473e:	0003      	movs	r3, r0
 8014740:	001a      	movs	r2, r3
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	4353      	muls	r3, r2
 8014746:	61fb      	str	r3, [r7, #28]
      break;
 8014748:	e00d      	b.n	8014766 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801474a:	4b2f      	ldr	r3, [pc, #188]	@ (8014808 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 801474c:	69ba      	ldr	r2, [r7, #24]
 801474e:	0092      	lsls	r2, r2, #2
 8014750:	58d3      	ldr	r3, [r2, r3]
 8014752:	68f9      	ldr	r1, [r7, #12]
 8014754:	0018      	movs	r0, r3
 8014756:	f7eb fcdf 	bl	8000118 <__udivsi3>
 801475a:	0003      	movs	r3, r0
 801475c:	001a      	movs	r2, r3
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	4353      	muls	r3, r2
 8014762:	61fb      	str	r3, [r7, #28]
      break;
 8014764:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8014766:	4b26      	ldr	r3, [pc, #152]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8014768:	68da      	ldr	r2, [r3, #12]
 801476a:	2380      	movs	r3, #128	@ 0x80
 801476c:	025b      	lsls	r3, r3, #9
 801476e:	4013      	ands	r3, r2
 8014770:	d00e      	beq.n	8014790 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8014772:	4b23      	ldr	r3, [pc, #140]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8014774:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8014776:	0c5b      	lsrs	r3, r3, #17
 8014778:	221f      	movs	r2, #31
 801477a:	4013      	ands	r3, r2
 801477c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 801477e:	0019      	movs	r1, r3
 8014780:	69f8      	ldr	r0, [r7, #28]
 8014782:	f7eb fcc9 	bl	8000118 <__udivsi3>
 8014786:	0003      	movs	r3, r0
 8014788:	001a      	movs	r2, r3
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	601a      	str	r2, [r3, #0]
 801478e:	e002      	b.n	8014796 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8014796:	4b1a      	ldr	r3, [pc, #104]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8014798:	68da      	ldr	r2, [r3, #12]
 801479a:	2380      	movs	r3, #128	@ 0x80
 801479c:	045b      	lsls	r3, r3, #17
 801479e:	4013      	ands	r3, r2
 80147a0:	d00e      	beq.n	80147c0 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80147a2:	4b17      	ldr	r3, [pc, #92]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80147a4:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80147a6:	0e5b      	lsrs	r3, r3, #25
 80147a8:	2207      	movs	r2, #7
 80147aa:	4013      	ands	r3, r2
 80147ac:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80147ae:	0019      	movs	r1, r3
 80147b0:	69f8      	ldr	r0, [r7, #28]
 80147b2:	f7eb fcb1 	bl	8000118 <__udivsi3>
 80147b6:	0003      	movs	r3, r0
 80147b8:	001a      	movs	r2, r3
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	605a      	str	r2, [r3, #4]
 80147be:	e002      	b.n	80147c6 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2200      	movs	r2, #0
 80147c4:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80147c6:	4b0e      	ldr	r3, [pc, #56]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80147c8:	68da      	ldr	r2, [r3, #12]
 80147ca:	2380      	movs	r3, #128	@ 0x80
 80147cc:	055b      	lsls	r3, r3, #21
 80147ce:	4013      	ands	r3, r2
 80147d0:	d00e      	beq.n	80147f0 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80147d2:	4b0b      	ldr	r3, [pc, #44]	@ (8014800 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80147d4:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 80147d6:	0f5b      	lsrs	r3, r3, #29
 80147d8:	2207      	movs	r2, #7
 80147da:	4013      	ands	r3, r2
 80147dc:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80147de:	0019      	movs	r1, r3
 80147e0:	69f8      	ldr	r0, [r7, #28]
 80147e2:	f7eb fc99 	bl	8000118 <__udivsi3>
 80147e6:	0003      	movs	r3, r0
 80147e8:	001a      	movs	r2, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80147ee:	e002      	b.n	80147f6 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2200      	movs	r2, #0
 80147f4:	609a      	str	r2, [r3, #8]
}
 80147f6:	46c0      	nop			@ (mov r8, r8)
 80147f8:	46bd      	mov	sp, r7
 80147fa:	b008      	add	sp, #32
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	46c0      	nop			@ (mov r8, r8)
 8014800:	40021000 	.word	0x40021000
 8014804:	00f42400 	.word	0x00f42400
 8014808:	08017e34 	.word	0x08017e34
 801480c:	003d0900 	.word	0x003d0900

08014810 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014818:	210f      	movs	r1, #15
 801481a:	187b      	adds	r3, r7, r1
 801481c:	2201      	movs	r2, #1
 801481e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d100      	bne.n	8014828 <HAL_RTC_Init+0x18>
 8014826:	e08b      	b.n	8014940 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8014828:	187b      	adds	r3, r7, r1
 801482a:	2200      	movs	r2, #0
 801482c:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	222d      	movs	r2, #45	@ 0x2d
 8014832:	5c9b      	ldrb	r3, [r3, r2]
 8014834:	b2db      	uxtb	r3, r3
 8014836:	2b00      	cmp	r3, #0
 8014838:	d107      	bne.n	801484a <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	222c      	movs	r2, #44	@ 0x2c
 801483e:	2100      	movs	r1, #0
 8014840:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	0018      	movs	r0, r3
 8014846:	f7f4 fb2b 	bl	8008ea0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	222d      	movs	r2, #45	@ 0x2d
 801484e:	2102      	movs	r1, #2
 8014850:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014852:	4b3f      	ldr	r3, [pc, #252]	@ (8014950 <HAL_RTC_Init+0x140>)
 8014854:	22ca      	movs	r2, #202	@ 0xca
 8014856:	625a      	str	r2, [r3, #36]	@ 0x24
 8014858:	4b3d      	ldr	r3, [pc, #244]	@ (8014950 <HAL_RTC_Init+0x140>)
 801485a:	2253      	movs	r2, #83	@ 0x53
 801485c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	0018      	movs	r0, r3
 8014862:	f000 fab9 	bl	8014dd8 <RTC_EnterInitMode>
 8014866:	1e03      	subs	r3, r0, #0
 8014868:	d00b      	beq.n	8014882 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801486a:	4b39      	ldr	r3, [pc, #228]	@ (8014950 <HAL_RTC_Init+0x140>)
 801486c:	22ff      	movs	r2, #255	@ 0xff
 801486e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	222d      	movs	r2, #45	@ 0x2d
 8014874:	2104      	movs	r1, #4
 8014876:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8014878:	230f      	movs	r3, #15
 801487a:	18fb      	adds	r3, r7, r3
 801487c:	2201      	movs	r2, #1
 801487e:	701a      	strb	r2, [r3, #0]
 8014880:	e05e      	b.n	8014940 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8014882:	4b33      	ldr	r3, [pc, #204]	@ (8014950 <HAL_RTC_Init+0x140>)
 8014884:	699a      	ldr	r2, [r3, #24]
 8014886:	4b32      	ldr	r3, [pc, #200]	@ (8014950 <HAL_RTC_Init+0x140>)
 8014888:	4932      	ldr	r1, [pc, #200]	@ (8014954 <HAL_RTC_Init+0x144>)
 801488a:	400a      	ands	r2, r1
 801488c:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 801488e:	4b30      	ldr	r3, [pc, #192]	@ (8014950 <HAL_RTC_Init+0x140>)
 8014890:	6999      	ldr	r1, [r3, #24]
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	685a      	ldr	r2, [r3, #4]
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	691b      	ldr	r3, [r3, #16]
 801489a:	431a      	orrs	r2, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	699b      	ldr	r3, [r3, #24]
 80148a0:	431a      	orrs	r2, r3
 80148a2:	4b2b      	ldr	r3, [pc, #172]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148a4:	430a      	orrs	r2, r1
 80148a6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	68d9      	ldr	r1, [r3, #12]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	689b      	ldr	r3, [r3, #8]
 80148b0:	041a      	lsls	r2, r3, #16
 80148b2:	4b27      	ldr	r3, [pc, #156]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148b4:	430a      	orrs	r2, r1
 80148b6:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80148b8:	4b25      	ldr	r3, [pc, #148]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	4a26      	ldr	r2, [pc, #152]	@ (8014958 <HAL_RTC_Init+0x148>)
 80148be:	4013      	ands	r3, r2
 80148c0:	0019      	movs	r1, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148ca:	431a      	orrs	r2, r3
 80148cc:	4b20      	ldr	r3, [pc, #128]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148ce:	430a      	orrs	r2, r1
 80148d0:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80148d2:	4b1f      	ldr	r3, [pc, #124]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148d4:	68da      	ldr	r2, [r3, #12]
 80148d6:	4b1e      	ldr	r3, [pc, #120]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148d8:	2180      	movs	r1, #128	@ 0x80
 80148da:	438a      	bics	r2, r1
 80148dc:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80148de:	4b1c      	ldr	r3, [pc, #112]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148e0:	699b      	ldr	r3, [r3, #24]
 80148e2:	2220      	movs	r2, #32
 80148e4:	4013      	ands	r3, r2
 80148e6:	d110      	bne.n	801490a <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	0018      	movs	r0, r3
 80148ec:	f000 fa4e 	bl	8014d8c <HAL_RTC_WaitForSynchro>
 80148f0:	1e03      	subs	r3, r0, #0
 80148f2:	d00a      	beq.n	801490a <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80148f4:	4b16      	ldr	r3, [pc, #88]	@ (8014950 <HAL_RTC_Init+0x140>)
 80148f6:	22ff      	movs	r2, #255	@ 0xff
 80148f8:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	222d      	movs	r2, #45	@ 0x2d
 80148fe:	2104      	movs	r1, #4
 8014900:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8014902:	230f      	movs	r3, #15
 8014904:	18fb      	adds	r3, r7, r3
 8014906:	2201      	movs	r2, #1
 8014908:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 801490a:	230f      	movs	r3, #15
 801490c:	18fb      	adds	r3, r7, r3
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d115      	bne.n	8014940 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8014914:	4b0e      	ldr	r3, [pc, #56]	@ (8014950 <HAL_RTC_Init+0x140>)
 8014916:	699b      	ldr	r3, [r3, #24]
 8014918:	00db      	lsls	r3, r3, #3
 801491a:	08d9      	lsrs	r1, r3, #3
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	6a1a      	ldr	r2, [r3, #32]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	69db      	ldr	r3, [r3, #28]
 8014924:	431a      	orrs	r2, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	695b      	ldr	r3, [r3, #20]
 801492a:	431a      	orrs	r2, r3
 801492c:	4b08      	ldr	r3, [pc, #32]	@ (8014950 <HAL_RTC_Init+0x140>)
 801492e:	430a      	orrs	r2, r1
 8014930:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014932:	4b07      	ldr	r3, [pc, #28]	@ (8014950 <HAL_RTC_Init+0x140>)
 8014934:	22ff      	movs	r2, #255	@ 0xff
 8014936:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	222d      	movs	r2, #45	@ 0x2d
 801493c:	2101      	movs	r1, #1
 801493e:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8014940:	230f      	movs	r3, #15
 8014942:	18fb      	adds	r3, r7, r3
 8014944:	781b      	ldrb	r3, [r3, #0]
}
 8014946:	0018      	movs	r0, r3
 8014948:	46bd      	mov	sp, r7
 801494a:	b004      	add	sp, #16
 801494c:	bd80      	pop	{r7, pc}
 801494e:	46c0      	nop			@ (mov r8, r8)
 8014950:	40002800 	.word	0x40002800
 8014954:	fb8fffbf 	.word	0xfb8fffbf
 8014958:	ffffe0ff 	.word	0xffffe0ff

0801495c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801495c:	b590      	push	{r4, r7, lr}
 801495e:	b087      	sub	sp, #28
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	222c      	movs	r2, #44	@ 0x2c
 801496c:	5c9b      	ldrb	r3, [r3, r2]
 801496e:	2b01      	cmp	r3, #1
 8014970:	d101      	bne.n	8014976 <HAL_RTC_SetTime+0x1a>
 8014972:	2302      	movs	r3, #2
 8014974:	e0a7      	b.n	8014ac6 <HAL_RTC_SetTime+0x16a>
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	222c      	movs	r2, #44	@ 0x2c
 801497a:	2101      	movs	r1, #1
 801497c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	222d      	movs	r2, #45	@ 0x2d
 8014982:	2102      	movs	r1, #2
 8014984:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014986:	4b52      	ldr	r3, [pc, #328]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014988:	22ca      	movs	r2, #202	@ 0xca
 801498a:	625a      	str	r2, [r3, #36]	@ 0x24
 801498c:	4b50      	ldr	r3, [pc, #320]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 801498e:	2253      	movs	r2, #83	@ 0x53
 8014990:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	0018      	movs	r0, r3
 8014996:	f000 fa1f 	bl	8014dd8 <RTC_EnterInitMode>
 801499a:	1e03      	subs	r3, r0, #0
 801499c:	d00c      	beq.n	80149b8 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801499e:	4b4c      	ldr	r3, [pc, #304]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 80149a0:	22ff      	movs	r2, #255	@ 0xff
 80149a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	222d      	movs	r2, #45	@ 0x2d
 80149a8:	2104      	movs	r1, #4
 80149aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	222c      	movs	r2, #44	@ 0x2c
 80149b0:	2100      	movs	r1, #0
 80149b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80149b4:	2301      	movs	r3, #1
 80149b6:	e086      	b.n	8014ac6 <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80149b8:	4b45      	ldr	r3, [pc, #276]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 80149ba:	68da      	ldr	r2, [r3, #12]
 80149bc:	23c0      	movs	r3, #192	@ 0xc0
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	401a      	ands	r2, r3
 80149c2:	2380      	movs	r3, #128	@ 0x80
 80149c4:	005b      	lsls	r3, r3, #1
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d053      	beq.n	8014a72 <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d124      	bne.n	8014a1a <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80149d0:	4b3f      	ldr	r3, [pc, #252]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 80149d2:	699b      	ldr	r3, [r3, #24]
 80149d4:	2240      	movs	r2, #64	@ 0x40
 80149d6:	4013      	ands	r3, r2
 80149d8:	d102      	bne.n	80149e0 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	2200      	movs	r2, #0
 80149de:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	0018      	movs	r0, r3
 80149e6:	f000 fa23 	bl	8014e30 <RTC_ByteToBcd2>
 80149ea:	0003      	movs	r3, r0
 80149ec:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	785b      	ldrb	r3, [r3, #1]
 80149f2:	0018      	movs	r0, r3
 80149f4:	f000 fa1c 	bl	8014e30 <RTC_ByteToBcd2>
 80149f8:	0003      	movs	r3, r0
 80149fa:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80149fc:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	789b      	ldrb	r3, [r3, #2]
 8014a02:	0018      	movs	r0, r3
 8014a04:	f000 fa14 	bl	8014e30 <RTC_ByteToBcd2>
 8014a08:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014a0a:	0022      	movs	r2, r4
 8014a0c:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	78db      	ldrb	r3, [r3, #3]
 8014a12:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014a14:	4313      	orrs	r3, r2
 8014a16:	617b      	str	r3, [r7, #20]
 8014a18:	e016      	b.n	8014a48 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8014a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a1c:	699b      	ldr	r3, [r3, #24]
 8014a1e:	2240      	movs	r2, #64	@ 0x40
 8014a20:	4013      	ands	r3, r2
 8014a22:	d102      	bne.n	8014a2a <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	2200      	movs	r2, #0
 8014a28:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	785b      	ldrb	r3, [r3, #1]
 8014a34:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014a36:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8014a38:	68ba      	ldr	r2, [r7, #8]
 8014a3a:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014a3c:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	78db      	ldrb	r3, [r3, #3]
 8014a42:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8014a44:	4313      	orrs	r3, r2
 8014a46:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8014a48:	4b21      	ldr	r3, [pc, #132]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a4a:	697a      	ldr	r2, [r7, #20]
 8014a4c:	4921      	ldr	r1, [pc, #132]	@ (8014ad4 <HAL_RTC_SetTime+0x178>)
 8014a4e:	400a      	ands	r2, r1
 8014a50:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8014a52:	4b1f      	ldr	r3, [pc, #124]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a54:	699a      	ldr	r2, [r3, #24]
 8014a56:	4b1e      	ldr	r3, [pc, #120]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a58:	491f      	ldr	r1, [pc, #124]	@ (8014ad8 <HAL_RTC_SetTime+0x17c>)
 8014a5a:	400a      	ands	r2, r1
 8014a5c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8014a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a60:	6999      	ldr	r1, [r3, #24]
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	68da      	ldr	r2, [r3, #12]
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	691b      	ldr	r3, [r3, #16]
 8014a6a:	431a      	orrs	r2, r3
 8014a6c:	4b18      	ldr	r3, [pc, #96]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a6e:	430a      	orrs	r2, r1
 8014a70:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8014a72:	4b17      	ldr	r3, [pc, #92]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a74:	68da      	ldr	r2, [r3, #12]
 8014a76:	4b16      	ldr	r3, [pc, #88]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a78:	2180      	movs	r1, #128	@ 0x80
 8014a7a:	438a      	bics	r2, r1
 8014a7c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8014a7e:	4b14      	ldr	r3, [pc, #80]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a80:	699b      	ldr	r3, [r3, #24]
 8014a82:	2220      	movs	r2, #32
 8014a84:	4013      	ands	r3, r2
 8014a86:	d112      	bne.n	8014aae <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	0018      	movs	r0, r3
 8014a8c:	f000 f97e 	bl	8014d8c <HAL_RTC_WaitForSynchro>
 8014a90:	1e03      	subs	r3, r0, #0
 8014a92:	d00c      	beq.n	8014aae <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014a94:	4b0e      	ldr	r3, [pc, #56]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014a96:	22ff      	movs	r2, #255	@ 0xff
 8014a98:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	222d      	movs	r2, #45	@ 0x2d
 8014a9e:	2104      	movs	r1, #4
 8014aa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	222c      	movs	r2, #44	@ 0x2c
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e00b      	b.n	8014ac6 <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014aae:	4b08      	ldr	r3, [pc, #32]	@ (8014ad0 <HAL_RTC_SetTime+0x174>)
 8014ab0:	22ff      	movs	r2, #255	@ 0xff
 8014ab2:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	222d      	movs	r2, #45	@ 0x2d
 8014ab8:	2101      	movs	r1, #1
 8014aba:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	222c      	movs	r2, #44	@ 0x2c
 8014ac0:	2100      	movs	r1, #0
 8014ac2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8014ac4:	2300      	movs	r3, #0
  }
}
 8014ac6:	0018      	movs	r0, r3
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	b007      	add	sp, #28
 8014acc:	bd90      	pop	{r4, r7, pc}
 8014ace:	46c0      	nop			@ (mov r8, r8)
 8014ad0:	40002800 	.word	0x40002800
 8014ad4:	007f7f7f 	.word	0x007f7f7f
 8014ad8:	fffbffff 	.word	0xfffbffff

08014adc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b086      	sub	sp, #24
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8014ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8014b9c <HAL_RTC_GetTime+0xc0>)
 8014aea:	689a      	ldr	r2, [r3, #8]
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8014af0:	4b2a      	ldr	r3, [pc, #168]	@ (8014b9c <HAL_RTC_GetTime+0xc0>)
 8014af2:	68da      	ldr	r2, [r3, #12]
 8014af4:	23c0      	movs	r3, #192	@ 0xc0
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	401a      	ands	r2, r3
 8014afa:	2380      	movs	r3, #128	@ 0x80
 8014afc:	005b      	lsls	r3, r3, #1
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d047      	beq.n	8014b92 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8014b02:	4b26      	ldr	r3, [pc, #152]	@ (8014b9c <HAL_RTC_GetTime+0xc0>)
 8014b04:	691b      	ldr	r3, [r3, #16]
 8014b06:	045b      	lsls	r3, r3, #17
 8014b08:	0c5a      	lsrs	r2, r3, #17
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8014b0e:	4b23      	ldr	r3, [pc, #140]	@ (8014b9c <HAL_RTC_GetTime+0xc0>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	4a23      	ldr	r2, [pc, #140]	@ (8014ba0 <HAL_RTC_GetTime+0xc4>)
 8014b14:	4013      	ands	r3, r2
 8014b16:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	0c1b      	lsrs	r3, r3, #16
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	223f      	movs	r2, #63	@ 0x3f
 8014b20:	4013      	ands	r3, r2
 8014b22:	b2da      	uxtb	r2, r3
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	0a1b      	lsrs	r3, r3, #8
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	227f      	movs	r2, #127	@ 0x7f
 8014b30:	4013      	ands	r3, r2
 8014b32:	b2da      	uxtb	r2, r3
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	227f      	movs	r2, #127	@ 0x7f
 8014b3e:	4013      	ands	r3, r2
 8014b40:	b2da      	uxtb	r2, r3
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	0d9b      	lsrs	r3, r3, #22
 8014b4a:	b2db      	uxtb	r3, r3
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	4013      	ands	r3, r2
 8014b50:	b2da      	uxtb	r2, r3
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d11a      	bne.n	8014b92 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	0018      	movs	r0, r3
 8014b62:	f000 f98d 	bl	8014e80 <RTC_Bcd2ToByte>
 8014b66:	0003      	movs	r3, r0
 8014b68:	001a      	movs	r2, r3
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	785b      	ldrb	r3, [r3, #1]
 8014b72:	0018      	movs	r0, r3
 8014b74:	f000 f984 	bl	8014e80 <RTC_Bcd2ToByte>
 8014b78:	0003      	movs	r3, r0
 8014b7a:	001a      	movs	r2, r3
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	789b      	ldrb	r3, [r3, #2]
 8014b84:	0018      	movs	r0, r3
 8014b86:	f000 f97b 	bl	8014e80 <RTC_Bcd2ToByte>
 8014b8a:	0003      	movs	r3, r0
 8014b8c:	001a      	movs	r2, r3
 8014b8e:	68bb      	ldr	r3, [r7, #8]
 8014b90:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8014b92:	2300      	movs	r3, #0
}
 8014b94:	0018      	movs	r0, r3
 8014b96:	46bd      	mov	sp, r7
 8014b98:	b006      	add	sp, #24
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	40002800 	.word	0x40002800
 8014ba0:	007f7f7f 	.word	0x007f7f7f

08014ba4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014ba4:	b590      	push	{r4, r7, lr}
 8014ba6:	b087      	sub	sp, #28
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	222c      	movs	r2, #44	@ 0x2c
 8014bb4:	5c9b      	ldrb	r3, [r3, r2]
 8014bb6:	2b01      	cmp	r3, #1
 8014bb8:	d101      	bne.n	8014bbe <HAL_RTC_SetDate+0x1a>
 8014bba:	2302      	movs	r3, #2
 8014bbc:	e090      	b.n	8014ce0 <HAL_RTC_SetDate+0x13c>
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	222c      	movs	r2, #44	@ 0x2c
 8014bc2:	2101      	movs	r1, #1
 8014bc4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	222d      	movs	r2, #45	@ 0x2d
 8014bca:	2102      	movs	r1, #2
 8014bcc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d10e      	bne.n	8014bf2 <HAL_RTC_SetDate+0x4e>
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	785b      	ldrb	r3, [r3, #1]
 8014bd8:	001a      	movs	r2, r3
 8014bda:	2310      	movs	r3, #16
 8014bdc:	4013      	ands	r3, r2
 8014bde:	d008      	beq.n	8014bf2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	785b      	ldrb	r3, [r3, #1]
 8014be4:	2210      	movs	r2, #16
 8014be6:	4393      	bics	r3, r2
 8014be8:	b2db      	uxtb	r3, r3
 8014bea:	330a      	adds	r3, #10
 8014bec:	b2da      	uxtb	r2, r3
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d11c      	bne.n	8014c32 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	78db      	ldrb	r3, [r3, #3]
 8014bfc:	0018      	movs	r0, r3
 8014bfe:	f000 f917 	bl	8014e30 <RTC_ByteToBcd2>
 8014c02:	0003      	movs	r3, r0
 8014c04:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	785b      	ldrb	r3, [r3, #1]
 8014c0a:	0018      	movs	r0, r3
 8014c0c:	f000 f910 	bl	8014e30 <RTC_ByteToBcd2>
 8014c10:	0003      	movs	r3, r0
 8014c12:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014c14:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	789b      	ldrb	r3, [r3, #2]
 8014c1a:	0018      	movs	r0, r3
 8014c1c:	f000 f908 	bl	8014e30 <RTC_ByteToBcd2>
 8014c20:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014c22:	0022      	movs	r2, r4
 8014c24:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8014c2c:	4313      	orrs	r3, r2
 8014c2e:	617b      	str	r3, [r7, #20]
 8014c30:	e00e      	b.n	8014c50 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	78db      	ldrb	r3, [r3, #3]
 8014c36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	785b      	ldrb	r3, [r3, #1]
 8014c3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8014c3e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8014c40:	68ba      	ldr	r2, [r7, #8]
 8014c42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8014c44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8014c4c:	4313      	orrs	r3, r2
 8014c4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014c50:	4b25      	ldr	r3, [pc, #148]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014c52:	22ca      	movs	r2, #202	@ 0xca
 8014c54:	625a      	str	r2, [r3, #36]	@ 0x24
 8014c56:	4b24      	ldr	r3, [pc, #144]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014c58:	2253      	movs	r2, #83	@ 0x53
 8014c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	0018      	movs	r0, r3
 8014c60:	f000 f8ba 	bl	8014dd8 <RTC_EnterInitMode>
 8014c64:	1e03      	subs	r3, r0, #0
 8014c66:	d00c      	beq.n	8014c82 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014c68:	4b1f      	ldr	r3, [pc, #124]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014c6a:	22ff      	movs	r2, #255	@ 0xff
 8014c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	222d      	movs	r2, #45	@ 0x2d
 8014c72:	2104      	movs	r1, #4
 8014c74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	222c      	movs	r2, #44	@ 0x2c
 8014c7a:	2100      	movs	r1, #0
 8014c7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8014c7e:	2301      	movs	r3, #1
 8014c80:	e02e      	b.n	8014ce0 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8014c82:	4b19      	ldr	r3, [pc, #100]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014c84:	697a      	ldr	r2, [r7, #20]
 8014c86:	4919      	ldr	r1, [pc, #100]	@ (8014cec <HAL_RTC_SetDate+0x148>)
 8014c88:	400a      	ands	r2, r1
 8014c8a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8014c8c:	4b16      	ldr	r3, [pc, #88]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014c8e:	68da      	ldr	r2, [r3, #12]
 8014c90:	4b15      	ldr	r3, [pc, #84]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014c92:	2180      	movs	r1, #128	@ 0x80
 8014c94:	438a      	bics	r2, r1
 8014c96:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8014c98:	4b13      	ldr	r3, [pc, #76]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014c9a:	699b      	ldr	r3, [r3, #24]
 8014c9c:	2220      	movs	r2, #32
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	d112      	bne.n	8014cc8 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	0018      	movs	r0, r3
 8014ca6:	f000 f871 	bl	8014d8c <HAL_RTC_WaitForSynchro>
 8014caa:	1e03      	subs	r3, r0, #0
 8014cac:	d00c      	beq.n	8014cc8 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014cae:	4b0e      	ldr	r3, [pc, #56]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014cb0:	22ff      	movs	r2, #255	@ 0xff
 8014cb2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	222d      	movs	r2, #45	@ 0x2d
 8014cb8:	2104      	movs	r1, #4
 8014cba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	222c      	movs	r2, #44	@ 0x2c
 8014cc0:	2100      	movs	r1, #0
 8014cc2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	e00b      	b.n	8014ce0 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014cc8:	4b07      	ldr	r3, [pc, #28]	@ (8014ce8 <HAL_RTC_SetDate+0x144>)
 8014cca:	22ff      	movs	r2, #255	@ 0xff
 8014ccc:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	222d      	movs	r2, #45	@ 0x2d
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	222c      	movs	r2, #44	@ 0x2c
 8014cda:	2100      	movs	r1, #0
 8014cdc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8014cde:	2300      	movs	r3, #0
  }
}
 8014ce0:	0018      	movs	r0, r3
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	b007      	add	sp, #28
 8014ce6:	bd90      	pop	{r4, r7, pc}
 8014ce8:	40002800 	.word	0x40002800
 8014cec:	00ffff3f 	.word	0x00ffff3f

08014cf0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b086      	sub	sp, #24
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8014cfc:	4b21      	ldr	r3, [pc, #132]	@ (8014d84 <HAL_RTC_GetDate+0x94>)
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	4a21      	ldr	r2, [pc, #132]	@ (8014d88 <HAL_RTC_GetDate+0x98>)
 8014d02:	4013      	ands	r3, r2
 8014d04:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	0c1b      	lsrs	r3, r3, #16
 8014d0a:	b2da      	uxtb	r2, r3
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	0a1b      	lsrs	r3, r3, #8
 8014d14:	b2db      	uxtb	r3, r3
 8014d16:	221f      	movs	r2, #31
 8014d18:	4013      	ands	r3, r2
 8014d1a:	b2da      	uxtb	r2, r3
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	b2db      	uxtb	r3, r3
 8014d24:	223f      	movs	r2, #63	@ 0x3f
 8014d26:	4013      	ands	r3, r2
 8014d28:	b2da      	uxtb	r2, r3
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	0b5b      	lsrs	r3, r3, #13
 8014d32:	b2db      	uxtb	r3, r3
 8014d34:	2207      	movs	r2, #7
 8014d36:	4013      	ands	r3, r2
 8014d38:	b2da      	uxtb	r2, r3
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d11a      	bne.n	8014d7a <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	78db      	ldrb	r3, [r3, #3]
 8014d48:	0018      	movs	r0, r3
 8014d4a:	f000 f899 	bl	8014e80 <RTC_Bcd2ToByte>
 8014d4e:	0003      	movs	r3, r0
 8014d50:	001a      	movs	r2, r3
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	785b      	ldrb	r3, [r3, #1]
 8014d5a:	0018      	movs	r0, r3
 8014d5c:	f000 f890 	bl	8014e80 <RTC_Bcd2ToByte>
 8014d60:	0003      	movs	r3, r0
 8014d62:	001a      	movs	r2, r3
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	789b      	ldrb	r3, [r3, #2]
 8014d6c:	0018      	movs	r0, r3
 8014d6e:	f000 f887 	bl	8014e80 <RTC_Bcd2ToByte>
 8014d72:	0003      	movs	r3, r0
 8014d74:	001a      	movs	r2, r3
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8014d7a:	2300      	movs	r3, #0
}
 8014d7c:	0018      	movs	r0, r3
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	b006      	add	sp, #24
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	40002800 	.word	0x40002800
 8014d88:	00ffff3f 	.word	0x00ffff3f

08014d8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8014d94:	4b0f      	ldr	r3, [pc, #60]	@ (8014dd4 <HAL_RTC_WaitForSynchro+0x48>)
 8014d96:	68da      	ldr	r2, [r3, #12]
 8014d98:	4b0e      	ldr	r3, [pc, #56]	@ (8014dd4 <HAL_RTC_WaitForSynchro+0x48>)
 8014d9a:	2120      	movs	r1, #32
 8014d9c:	438a      	bics	r2, r1
 8014d9e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8014da0:	f7f9 f830 	bl	800de04 <HAL_GetTick>
 8014da4:	0003      	movs	r3, r0
 8014da6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8014da8:	e00a      	b.n	8014dc0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014daa:	f7f9 f82b 	bl	800de04 <HAL_GetTick>
 8014dae:	0002      	movs	r2, r0
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	1ad2      	subs	r2, r2, r3
 8014db4:	23fa      	movs	r3, #250	@ 0xfa
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d901      	bls.n	8014dc0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8014dbc:	2303      	movs	r3, #3
 8014dbe:	e005      	b.n	8014dcc <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8014dc0:	4b04      	ldr	r3, [pc, #16]	@ (8014dd4 <HAL_RTC_WaitForSynchro+0x48>)
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	2220      	movs	r2, #32
 8014dc6:	4013      	ands	r3, r2
 8014dc8:	d0ef      	beq.n	8014daa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8014dca:	2300      	movs	r3, #0
}
 8014dcc:	0018      	movs	r0, r3
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	b004      	add	sp, #16
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	40002800 	.word	0x40002800

08014dd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8014de0:	4b12      	ldr	r3, [pc, #72]	@ (8014e2c <RTC_EnterInitMode+0x54>)
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	2240      	movs	r2, #64	@ 0x40
 8014de6:	4013      	ands	r3, r2
 8014de8:	d11a      	bne.n	8014e20 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8014dea:	4b10      	ldr	r3, [pc, #64]	@ (8014e2c <RTC_EnterInitMode+0x54>)
 8014dec:	68da      	ldr	r2, [r3, #12]
 8014dee:	4b0f      	ldr	r3, [pc, #60]	@ (8014e2c <RTC_EnterInitMode+0x54>)
 8014df0:	2180      	movs	r1, #128	@ 0x80
 8014df2:	430a      	orrs	r2, r1
 8014df4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8014df6:	f7f9 f805 	bl	800de04 <HAL_GetTick>
 8014dfa:	0003      	movs	r3, r0
 8014dfc:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8014dfe:	e00a      	b.n	8014e16 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8014e00:	f7f9 f800 	bl	800de04 <HAL_GetTick>
 8014e04:	0002      	movs	r2, r0
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	1ad2      	subs	r2, r2, r3
 8014e0a:	23fa      	movs	r3, #250	@ 0xfa
 8014e0c:	009b      	lsls	r3, r3, #2
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	d901      	bls.n	8014e16 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8014e12:	2303      	movs	r3, #3
 8014e14:	e005      	b.n	8014e22 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8014e16:	4b05      	ldr	r3, [pc, #20]	@ (8014e2c <RTC_EnterInitMode+0x54>)
 8014e18:	68db      	ldr	r3, [r3, #12]
 8014e1a:	2240      	movs	r2, #64	@ 0x40
 8014e1c:	4013      	ands	r3, r2
 8014e1e:	d0ef      	beq.n	8014e00 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8014e20:	2300      	movs	r3, #0
}
 8014e22:	0018      	movs	r0, r3
 8014e24:	46bd      	mov	sp, r7
 8014e26:	b004      	add	sp, #16
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	46c0      	nop			@ (mov r8, r8)
 8014e2c:	40002800 	.word	0x40002800

08014e30 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b084      	sub	sp, #16
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	0002      	movs	r2, r0
 8014e38:	1dfb      	adds	r3, r7, #7
 8014e3a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8014e40:	230b      	movs	r3, #11
 8014e42:	18fb      	adds	r3, r7, r3
 8014e44:	1dfa      	adds	r2, r7, #7
 8014e46:	7812      	ldrb	r2, [r2, #0]
 8014e48:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8014e4a:	e008      	b.n	8014e5e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	3301      	adds	r3, #1
 8014e50:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8014e52:	220b      	movs	r2, #11
 8014e54:	18bb      	adds	r3, r7, r2
 8014e56:	18ba      	adds	r2, r7, r2
 8014e58:	7812      	ldrb	r2, [r2, #0]
 8014e5a:	3a0a      	subs	r2, #10
 8014e5c:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8014e5e:	210b      	movs	r1, #11
 8014e60:	187b      	adds	r3, r7, r1
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	2b09      	cmp	r3, #9
 8014e66:	d8f1      	bhi.n	8014e4c <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	011b      	lsls	r3, r3, #4
 8014e6e:	b2da      	uxtb	r2, r3
 8014e70:	187b      	adds	r3, r7, r1
 8014e72:	781b      	ldrb	r3, [r3, #0]
 8014e74:	4313      	orrs	r3, r2
 8014e76:	b2db      	uxtb	r3, r3
}
 8014e78:	0018      	movs	r0, r3
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	b004      	add	sp, #16
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b084      	sub	sp, #16
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	0002      	movs	r2, r0
 8014e88:	1dfb      	adds	r3, r7, #7
 8014e8a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8014e8c:	1dfb      	adds	r3, r7, #7
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	091b      	lsrs	r3, r3, #4
 8014e92:	b2db      	uxtb	r3, r3
 8014e94:	001a      	movs	r2, r3
 8014e96:	0013      	movs	r3, r2
 8014e98:	009b      	lsls	r3, r3, #2
 8014e9a:	189b      	adds	r3, r3, r2
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	b2da      	uxtb	r2, r3
 8014ea4:	1dfb      	adds	r3, r7, #7
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	210f      	movs	r1, #15
 8014eaa:	400b      	ands	r3, r1
 8014eac:	b2db      	uxtb	r3, r3
 8014eae:	18d3      	adds	r3, r2, r3
 8014eb0:	b2db      	uxtb	r3, r3
}
 8014eb2:	0018      	movs	r0, r3
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	b004      	add	sp, #16
 8014eb8:	bd80      	pop	{r7, pc}
	...

08014ebc <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b086      	sub	sp, #24
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	607a      	str	r2, [r7, #4]
 8014ec8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	222c      	movs	r2, #44	@ 0x2c
 8014ece:	5c9b      	ldrb	r3, [r3, r2]
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	d101      	bne.n	8014ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8014ed4:	2302      	movs	r3, #2
 8014ed6:	e088      	b.n	8014fea <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	222c      	movs	r2, #44	@ 0x2c
 8014edc:	2101      	movs	r1, #1
 8014ede:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	222d      	movs	r2, #45	@ 0x2d
 8014ee4:	2102      	movs	r1, #2
 8014ee6:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8014ee8:	4b42      	ldr	r3, [pc, #264]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014eea:	699a      	ldr	r2, [r3, #24]
 8014eec:	2380      	movs	r3, #128	@ 0x80
 8014eee:	00db      	lsls	r3, r3, #3
 8014ef0:	4013      	ands	r3, r2
 8014ef2:	d01c      	beq.n	8014f2e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8014ef4:	f7f8 ff86 	bl	800de04 <HAL_GetTick>
 8014ef8:	0003      	movs	r3, r0
 8014efa:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8014efc:	e012      	b.n	8014f24 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014efe:	f7f8 ff81 	bl	800de04 <HAL_GetTick>
 8014f02:	0002      	movs	r2, r0
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	1ad2      	subs	r2, r2, r3
 8014f08:	23fa      	movs	r3, #250	@ 0xfa
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d909      	bls.n	8014f24 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	222d      	movs	r2, #45	@ 0x2d
 8014f14:	2103      	movs	r1, #3
 8014f16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	222c      	movs	r2, #44	@ 0x2c
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8014f20:	2303      	movs	r3, #3
 8014f22:	e062      	b.n	8014fea <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8014f24:	4b33      	ldr	r3, [pc, #204]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	2204      	movs	r2, #4
 8014f2a:	4013      	ands	r3, r2
 8014f2c:	d1e7      	bne.n	8014efe <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8014f2e:	4b31      	ldr	r3, [pc, #196]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f30:	699a      	ldr	r2, [r3, #24]
 8014f32:	4b30      	ldr	r3, [pc, #192]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f34:	4930      	ldr	r1, [pc, #192]	@ (8014ff8 <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 8014f36:	400a      	ands	r2, r1
 8014f38:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8014f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f3c:	2204      	movs	r2, #4
 8014f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8014f40:	f7f8 ff60 	bl	800de04 <HAL_GetTick>
 8014f44:	0003      	movs	r3, r0
 8014f46:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8014f48:	e015      	b.n	8014f76 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014f4a:	f7f8 ff5b 	bl	800de04 <HAL_GetTick>
 8014f4e:	0002      	movs	r2, r0
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	1ad2      	subs	r2, r2, r3
 8014f54:	23fa      	movs	r3, #250	@ 0xfa
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d90c      	bls.n	8014f76 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014f5c:	4b25      	ldr	r3, [pc, #148]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f5e:	22ff      	movs	r2, #255	@ 0xff
 8014f60:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	222d      	movs	r2, #45	@ 0x2d
 8014f66:	2103      	movs	r1, #3
 8014f68:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	222c      	movs	r2, #44	@ 0x2c
 8014f6e:	2100      	movs	r1, #0
 8014f70:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8014f72:	2303      	movs	r3, #3
 8014f74:	e039      	b.n	8014fea <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8014f76:	4b1f      	ldr	r3, [pc, #124]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	2204      	movs	r2, #4
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	d0e4      	beq.n	8014f4a <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	0419      	lsls	r1, r3, #16
 8014f84:	4b1b      	ldr	r3, [pc, #108]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f86:	68ba      	ldr	r2, [r7, #8]
 8014f88:	430a      	orrs	r2, r1
 8014f8a:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8014f8c:	4b19      	ldr	r3, [pc, #100]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f8e:	699b      	ldr	r3, [r3, #24]
 8014f90:	2207      	movs	r2, #7
 8014f92:	4393      	bics	r3, r2
 8014f94:	0019      	movs	r1, r3
 8014f96:	4b17      	ldr	r3, [pc, #92]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	430a      	orrs	r2, r1
 8014f9c:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d009      	beq.n	8014fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8014fa4:	4a15      	ldr	r2, [pc, #84]	@ (8014ffc <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8014fa6:	2384      	movs	r3, #132	@ 0x84
 8014fa8:	58d3      	ldr	r3, [r2, r3]
 8014faa:	4914      	ldr	r1, [pc, #80]	@ (8014ffc <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8014fac:	2280      	movs	r2, #128	@ 0x80
 8014fae:	0552      	lsls	r2, r2, #21
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	2284      	movs	r2, #132	@ 0x84
 8014fb4:	508b      	str	r3, [r1, r2]
 8014fb6:	e008      	b.n	8014fca <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8014fb8:	4a10      	ldr	r2, [pc, #64]	@ (8014ffc <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8014fba:	2380      	movs	r3, #128	@ 0x80
 8014fbc:	58d3      	ldr	r3, [r2, r3]
 8014fbe:	490f      	ldr	r1, [pc, #60]	@ (8014ffc <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8014fc0:	2280      	movs	r2, #128	@ 0x80
 8014fc2:	0552      	lsls	r2, r2, #21
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	2280      	movs	r2, #128	@ 0x80
 8014fc8:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8014fca:	4b0a      	ldr	r3, [pc, #40]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014fcc:	699a      	ldr	r2, [r3, #24]
 8014fce:	4b09      	ldr	r3, [pc, #36]	@ (8014ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8014fd0:	2188      	movs	r1, #136	@ 0x88
 8014fd2:	01c9      	lsls	r1, r1, #7
 8014fd4:	430a      	orrs	r2, r1
 8014fd6:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	222d      	movs	r2, #45	@ 0x2d
 8014fdc:	2101      	movs	r1, #1
 8014fde:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	222c      	movs	r2, #44	@ 0x2c
 8014fe4:	2100      	movs	r1, #0
 8014fe6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014fe8:	2300      	movs	r3, #0
}
 8014fea:	0018      	movs	r0, r3
 8014fec:	46bd      	mov	sp, r7
 8014fee:	b006      	add	sp, #24
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	46c0      	nop			@ (mov r8, r8)
 8014ff4:	40002800 	.word	0x40002800
 8014ff8:	fffffbff 	.word	0xfffffbff
 8014ffc:	40021800 	.word	0x40021800

08015000 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	222c      	movs	r2, #44	@ 0x2c
 801500c:	5c9b      	ldrb	r3, [r3, r2]
 801500e:	2b01      	cmp	r3, #1
 8015010:	d101      	bne.n	8015016 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8015012:	2302      	movs	r3, #2
 8015014:	e016      	b.n	8015044 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	222c      	movs	r2, #44	@ 0x2c
 801501a:	2101      	movs	r1, #1
 801501c:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	222d      	movs	r2, #45	@ 0x2d
 8015022:	2102      	movs	r1, #2
 8015024:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8015026:	4b09      	ldr	r3, [pc, #36]	@ (801504c <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8015028:	699a      	ldr	r2, [r3, #24]
 801502a:	4b08      	ldr	r3, [pc, #32]	@ (801504c <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 801502c:	4908      	ldr	r1, [pc, #32]	@ (8015050 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 801502e:	400a      	ands	r2, r1
 8015030:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	222d      	movs	r2, #45	@ 0x2d
 8015036:	2101      	movs	r1, #1
 8015038:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	222c      	movs	r2, #44	@ 0x2c
 801503e:	2100      	movs	r1, #0
 8015040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015042:	2300      	movs	r3, #0
}
 8015044:	0018      	movs	r0, r3
 8015046:	46bd      	mov	sp, r7
 8015048:	b002      	add	sp, #8
 801504a:	bd80      	pop	{r7, pc}
 801504c:	40002800 	.word	0x40002800
 8015050:	ffffbbff 	.word	0xffffbbff

08015054 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 801505c:	4b09      	ldr	r3, [pc, #36]	@ (8015084 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 801505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015060:	2204      	movs	r2, #4
 8015062:	4013      	ands	r3, r2
 8015064:	d006      	beq.n	8015074 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8015066:	4b07      	ldr	r3, [pc, #28]	@ (8015084 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8015068:	2204      	movs	r2, #4
 801506a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	0018      	movs	r0, r3
 8015070:	f000 f80a 	bl	8015088 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	222d      	movs	r2, #45	@ 0x2d
 8015078:	2101      	movs	r1, #1
 801507a:	5499      	strb	r1, [r3, r2]
}
 801507c:	46c0      	nop			@ (mov r8, r8)
 801507e:	46bd      	mov	sp, r7
 8015080:	b002      	add	sp, #8
 8015082:	bd80      	pop	{r7, pc}
 8015084:	40002800 	.word	0x40002800

08015088 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b082      	sub	sp, #8
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015090:	46c0      	nop			@ (mov r8, r8)
 8015092:	46bd      	mov	sp, r7
 8015094:	b002      	add	sp, #8
 8015096:	bd80      	pop	{r7, pc}

08015098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d101      	bne.n	80150aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80150a6:	2301      	movs	r3, #1
 80150a8:	e04a      	b.n	8015140 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	223d      	movs	r2, #61	@ 0x3d
 80150ae:	5c9b      	ldrb	r3, [r3, r2]
 80150b0:	b2db      	uxtb	r3, r3
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d107      	bne.n	80150c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	223c      	movs	r2, #60	@ 0x3c
 80150ba:	2100      	movs	r1, #0
 80150bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	0018      	movs	r0, r3
 80150c2:	f7f3 ff35 	bl	8008f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	223d      	movs	r2, #61	@ 0x3d
 80150ca:	2102      	movs	r1, #2
 80150cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681a      	ldr	r2, [r3, #0]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	3304      	adds	r3, #4
 80150d6:	0019      	movs	r1, r3
 80150d8:	0010      	movs	r0, r2
 80150da:	f000 fbd9 	bl	8015890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2248      	movs	r2, #72	@ 0x48
 80150e2:	2101      	movs	r1, #1
 80150e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	223e      	movs	r2, #62	@ 0x3e
 80150ea:	2101      	movs	r1, #1
 80150ec:	5499      	strb	r1, [r3, r2]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	223f      	movs	r2, #63	@ 0x3f
 80150f2:	2101      	movs	r1, #1
 80150f4:	5499      	strb	r1, [r3, r2]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2240      	movs	r2, #64	@ 0x40
 80150fa:	2101      	movs	r1, #1
 80150fc:	5499      	strb	r1, [r3, r2]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2241      	movs	r2, #65	@ 0x41
 8015102:	2101      	movs	r1, #1
 8015104:	5499      	strb	r1, [r3, r2]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2242      	movs	r2, #66	@ 0x42
 801510a:	2101      	movs	r1, #1
 801510c:	5499      	strb	r1, [r3, r2]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2243      	movs	r2, #67	@ 0x43
 8015112:	2101      	movs	r1, #1
 8015114:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2244      	movs	r2, #68	@ 0x44
 801511a:	2101      	movs	r1, #1
 801511c:	5499      	strb	r1, [r3, r2]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2245      	movs	r2, #69	@ 0x45
 8015122:	2101      	movs	r1, #1
 8015124:	5499      	strb	r1, [r3, r2]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2246      	movs	r2, #70	@ 0x46
 801512a:	2101      	movs	r1, #1
 801512c:	5499      	strb	r1, [r3, r2]
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	2247      	movs	r2, #71	@ 0x47
 8015132:	2101      	movs	r1, #1
 8015134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	223d      	movs	r2, #61	@ 0x3d
 801513a:	2101      	movs	r1, #1
 801513c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801513e:	2300      	movs	r3, #0
}
 8015140:	0018      	movs	r0, r3
 8015142:	46bd      	mov	sp, r7
 8015144:	b002      	add	sp, #8
 8015146:	bd80      	pop	{r7, pc}

08015148 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d101      	bne.n	801515a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015156:	2301      	movs	r3, #1
 8015158:	e04a      	b.n	80151f0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	223d      	movs	r2, #61	@ 0x3d
 801515e:	5c9b      	ldrb	r3, [r3, r2]
 8015160:	b2db      	uxtb	r3, r3
 8015162:	2b00      	cmp	r3, #0
 8015164:	d107      	bne.n	8015176 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	223c      	movs	r2, #60	@ 0x3c
 801516a:	2100      	movs	r1, #0
 801516c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	0018      	movs	r0, r3
 8015172:	f000 f841 	bl	80151f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	223d      	movs	r2, #61	@ 0x3d
 801517a:	2102      	movs	r1, #2
 801517c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681a      	ldr	r2, [r3, #0]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	3304      	adds	r3, #4
 8015186:	0019      	movs	r1, r3
 8015188:	0010      	movs	r0, r2
 801518a:	f000 fb81 	bl	8015890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2248      	movs	r2, #72	@ 0x48
 8015192:	2101      	movs	r1, #1
 8015194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	223e      	movs	r2, #62	@ 0x3e
 801519a:	2101      	movs	r1, #1
 801519c:	5499      	strb	r1, [r3, r2]
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	223f      	movs	r2, #63	@ 0x3f
 80151a2:	2101      	movs	r1, #1
 80151a4:	5499      	strb	r1, [r3, r2]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2240      	movs	r2, #64	@ 0x40
 80151aa:	2101      	movs	r1, #1
 80151ac:	5499      	strb	r1, [r3, r2]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2241      	movs	r2, #65	@ 0x41
 80151b2:	2101      	movs	r1, #1
 80151b4:	5499      	strb	r1, [r3, r2]
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2242      	movs	r2, #66	@ 0x42
 80151ba:	2101      	movs	r1, #1
 80151bc:	5499      	strb	r1, [r3, r2]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2243      	movs	r2, #67	@ 0x43
 80151c2:	2101      	movs	r1, #1
 80151c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2244      	movs	r2, #68	@ 0x44
 80151ca:	2101      	movs	r1, #1
 80151cc:	5499      	strb	r1, [r3, r2]
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	2245      	movs	r2, #69	@ 0x45
 80151d2:	2101      	movs	r1, #1
 80151d4:	5499      	strb	r1, [r3, r2]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2246      	movs	r2, #70	@ 0x46
 80151da:	2101      	movs	r1, #1
 80151dc:	5499      	strb	r1, [r3, r2]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	2247      	movs	r2, #71	@ 0x47
 80151e2:	2101      	movs	r1, #1
 80151e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	223d      	movs	r2, #61	@ 0x3d
 80151ea:	2101      	movs	r1, #1
 80151ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80151ee:	2300      	movs	r3, #0
}
 80151f0:	0018      	movs	r0, r3
 80151f2:	46bd      	mov	sp, r7
 80151f4:	b002      	add	sp, #8
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8015200:	46c0      	nop			@ (mov r8, r8)
 8015202:	46bd      	mov	sp, r7
 8015204:	b002      	add	sp, #8
 8015206:	bd80      	pop	{r7, pc}

08015208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d108      	bne.n	801522a <HAL_TIM_PWM_Start+0x22>
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	223e      	movs	r2, #62	@ 0x3e
 801521c:	5c9b      	ldrb	r3, [r3, r2]
 801521e:	b2db      	uxtb	r3, r3
 8015220:	3b01      	subs	r3, #1
 8015222:	1e5a      	subs	r2, r3, #1
 8015224:	4193      	sbcs	r3, r2
 8015226:	b2db      	uxtb	r3, r3
 8015228:	e037      	b.n	801529a <HAL_TIM_PWM_Start+0x92>
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	2b04      	cmp	r3, #4
 801522e:	d108      	bne.n	8015242 <HAL_TIM_PWM_Start+0x3a>
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	223f      	movs	r2, #63	@ 0x3f
 8015234:	5c9b      	ldrb	r3, [r3, r2]
 8015236:	b2db      	uxtb	r3, r3
 8015238:	3b01      	subs	r3, #1
 801523a:	1e5a      	subs	r2, r3, #1
 801523c:	4193      	sbcs	r3, r2
 801523e:	b2db      	uxtb	r3, r3
 8015240:	e02b      	b.n	801529a <HAL_TIM_PWM_Start+0x92>
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	2b08      	cmp	r3, #8
 8015246:	d108      	bne.n	801525a <HAL_TIM_PWM_Start+0x52>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2240      	movs	r2, #64	@ 0x40
 801524c:	5c9b      	ldrb	r3, [r3, r2]
 801524e:	b2db      	uxtb	r3, r3
 8015250:	3b01      	subs	r3, #1
 8015252:	1e5a      	subs	r2, r3, #1
 8015254:	4193      	sbcs	r3, r2
 8015256:	b2db      	uxtb	r3, r3
 8015258:	e01f      	b.n	801529a <HAL_TIM_PWM_Start+0x92>
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	2b0c      	cmp	r3, #12
 801525e:	d108      	bne.n	8015272 <HAL_TIM_PWM_Start+0x6a>
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2241      	movs	r2, #65	@ 0x41
 8015264:	5c9b      	ldrb	r3, [r3, r2]
 8015266:	b2db      	uxtb	r3, r3
 8015268:	3b01      	subs	r3, #1
 801526a:	1e5a      	subs	r2, r3, #1
 801526c:	4193      	sbcs	r3, r2
 801526e:	b2db      	uxtb	r3, r3
 8015270:	e013      	b.n	801529a <HAL_TIM_PWM_Start+0x92>
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	2b10      	cmp	r3, #16
 8015276:	d108      	bne.n	801528a <HAL_TIM_PWM_Start+0x82>
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2242      	movs	r2, #66	@ 0x42
 801527c:	5c9b      	ldrb	r3, [r3, r2]
 801527e:	b2db      	uxtb	r3, r3
 8015280:	3b01      	subs	r3, #1
 8015282:	1e5a      	subs	r2, r3, #1
 8015284:	4193      	sbcs	r3, r2
 8015286:	b2db      	uxtb	r3, r3
 8015288:	e007      	b.n	801529a <HAL_TIM_PWM_Start+0x92>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2243      	movs	r2, #67	@ 0x43
 801528e:	5c9b      	ldrb	r3, [r3, r2]
 8015290:	b2db      	uxtb	r3, r3
 8015292:	3b01      	subs	r3, #1
 8015294:	1e5a      	subs	r2, r3, #1
 8015296:	4193      	sbcs	r3, r2
 8015298:	b2db      	uxtb	r3, r3
 801529a:	2b00      	cmp	r3, #0
 801529c:	d001      	beq.n	80152a2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 801529e:	2301      	movs	r3, #1
 80152a0:	e086      	b.n	80153b0 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d104      	bne.n	80152b2 <HAL_TIM_PWM_Start+0xaa>
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	223e      	movs	r2, #62	@ 0x3e
 80152ac:	2102      	movs	r1, #2
 80152ae:	5499      	strb	r1, [r3, r2]
 80152b0:	e023      	b.n	80152fa <HAL_TIM_PWM_Start+0xf2>
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	2b04      	cmp	r3, #4
 80152b6:	d104      	bne.n	80152c2 <HAL_TIM_PWM_Start+0xba>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	223f      	movs	r2, #63	@ 0x3f
 80152bc:	2102      	movs	r1, #2
 80152be:	5499      	strb	r1, [r3, r2]
 80152c0:	e01b      	b.n	80152fa <HAL_TIM_PWM_Start+0xf2>
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	2b08      	cmp	r3, #8
 80152c6:	d104      	bne.n	80152d2 <HAL_TIM_PWM_Start+0xca>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2240      	movs	r2, #64	@ 0x40
 80152cc:	2102      	movs	r1, #2
 80152ce:	5499      	strb	r1, [r3, r2]
 80152d0:	e013      	b.n	80152fa <HAL_TIM_PWM_Start+0xf2>
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	2b0c      	cmp	r3, #12
 80152d6:	d104      	bne.n	80152e2 <HAL_TIM_PWM_Start+0xda>
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2241      	movs	r2, #65	@ 0x41
 80152dc:	2102      	movs	r1, #2
 80152de:	5499      	strb	r1, [r3, r2]
 80152e0:	e00b      	b.n	80152fa <HAL_TIM_PWM_Start+0xf2>
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	2b10      	cmp	r3, #16
 80152e6:	d104      	bne.n	80152f2 <HAL_TIM_PWM_Start+0xea>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2242      	movs	r2, #66	@ 0x42
 80152ec:	2102      	movs	r1, #2
 80152ee:	5499      	strb	r1, [r3, r2]
 80152f0:	e003      	b.n	80152fa <HAL_TIM_PWM_Start+0xf2>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2243      	movs	r2, #67	@ 0x43
 80152f6:	2102      	movs	r1, #2
 80152f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	6839      	ldr	r1, [r7, #0]
 8015300:	2201      	movs	r2, #1
 8015302:	0018      	movs	r0, r3
 8015304:	f000 fe7a 	bl	8015ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	4a2a      	ldr	r2, [pc, #168]	@ (80153b8 <HAL_TIM_PWM_Start+0x1b0>)
 801530e:	4293      	cmp	r3, r2
 8015310:	d009      	beq.n	8015326 <HAL_TIM_PWM_Start+0x11e>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4a29      	ldr	r2, [pc, #164]	@ (80153bc <HAL_TIM_PWM_Start+0x1b4>)
 8015318:	4293      	cmp	r3, r2
 801531a:	d004      	beq.n	8015326 <HAL_TIM_PWM_Start+0x11e>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a27      	ldr	r2, [pc, #156]	@ (80153c0 <HAL_TIM_PWM_Start+0x1b8>)
 8015322:	4293      	cmp	r3, r2
 8015324:	d101      	bne.n	801532a <HAL_TIM_PWM_Start+0x122>
 8015326:	2301      	movs	r3, #1
 8015328:	e000      	b.n	801532c <HAL_TIM_PWM_Start+0x124>
 801532a:	2300      	movs	r3, #0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d008      	beq.n	8015342 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2180      	movs	r1, #128	@ 0x80
 801533c:	0209      	lsls	r1, r1, #8
 801533e:	430a      	orrs	r2, r1
 8015340:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4a1c      	ldr	r2, [pc, #112]	@ (80153b8 <HAL_TIM_PWM_Start+0x1b0>)
 8015348:	4293      	cmp	r3, r2
 801534a:	d00f      	beq.n	801536c <HAL_TIM_PWM_Start+0x164>
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	2380      	movs	r3, #128	@ 0x80
 8015352:	05db      	lsls	r3, r3, #23
 8015354:	429a      	cmp	r2, r3
 8015356:	d009      	beq.n	801536c <HAL_TIM_PWM_Start+0x164>
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	4a19      	ldr	r2, [pc, #100]	@ (80153c4 <HAL_TIM_PWM_Start+0x1bc>)
 801535e:	4293      	cmp	r3, r2
 8015360:	d004      	beq.n	801536c <HAL_TIM_PWM_Start+0x164>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4a15      	ldr	r2, [pc, #84]	@ (80153bc <HAL_TIM_PWM_Start+0x1b4>)
 8015368:	4293      	cmp	r3, r2
 801536a:	d116      	bne.n	801539a <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	4a15      	ldr	r2, [pc, #84]	@ (80153c8 <HAL_TIM_PWM_Start+0x1c0>)
 8015374:	4013      	ands	r3, r2
 8015376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	2b06      	cmp	r3, #6
 801537c:	d016      	beq.n	80153ac <HAL_TIM_PWM_Start+0x1a4>
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	2380      	movs	r3, #128	@ 0x80
 8015382:	025b      	lsls	r3, r3, #9
 8015384:	429a      	cmp	r2, r3
 8015386:	d011      	beq.n	80153ac <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	681a      	ldr	r2, [r3, #0]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2101      	movs	r1, #1
 8015394:	430a      	orrs	r2, r1
 8015396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015398:	e008      	b.n	80153ac <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	681a      	ldr	r2, [r3, #0]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2101      	movs	r1, #1
 80153a6:	430a      	orrs	r2, r1
 80153a8:	601a      	str	r2, [r3, #0]
 80153aa:	e000      	b.n	80153ae <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80153ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80153ae:	2300      	movs	r3, #0
}
 80153b0:	0018      	movs	r0, r3
 80153b2:	46bd      	mov	sp, r7
 80153b4:	b004      	add	sp, #16
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	40012c00 	.word	0x40012c00
 80153bc:	40014000 	.word	0x40014000
 80153c0:	40014400 	.word	0x40014400
 80153c4:	40000400 	.word	0x40000400
 80153c8:	00010007 	.word	0x00010007

080153cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	6839      	ldr	r1, [r7, #0]
 80153dc:	2200      	movs	r2, #0
 80153de:	0018      	movs	r0, r3
 80153e0:	f000 fe0c 	bl	8015ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4a35      	ldr	r2, [pc, #212]	@ (80154c0 <HAL_TIM_PWM_Stop+0xf4>)
 80153ea:	4293      	cmp	r3, r2
 80153ec:	d009      	beq.n	8015402 <HAL_TIM_PWM_Stop+0x36>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	4a34      	ldr	r2, [pc, #208]	@ (80154c4 <HAL_TIM_PWM_Stop+0xf8>)
 80153f4:	4293      	cmp	r3, r2
 80153f6:	d004      	beq.n	8015402 <HAL_TIM_PWM_Stop+0x36>
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	4a32      	ldr	r2, [pc, #200]	@ (80154c8 <HAL_TIM_PWM_Stop+0xfc>)
 80153fe:	4293      	cmp	r3, r2
 8015400:	d101      	bne.n	8015406 <HAL_TIM_PWM_Stop+0x3a>
 8015402:	2301      	movs	r3, #1
 8015404:	e000      	b.n	8015408 <HAL_TIM_PWM_Stop+0x3c>
 8015406:	2300      	movs	r3, #0
 8015408:	2b00      	cmp	r3, #0
 801540a:	d013      	beq.n	8015434 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	6a1b      	ldr	r3, [r3, #32]
 8015412:	4a2e      	ldr	r2, [pc, #184]	@ (80154cc <HAL_TIM_PWM_Stop+0x100>)
 8015414:	4013      	ands	r3, r2
 8015416:	d10d      	bne.n	8015434 <HAL_TIM_PWM_Stop+0x68>
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	6a1b      	ldr	r3, [r3, #32]
 801541e:	4a2c      	ldr	r2, [pc, #176]	@ (80154d0 <HAL_TIM_PWM_Stop+0x104>)
 8015420:	4013      	ands	r3, r2
 8015422:	d107      	bne.n	8015434 <HAL_TIM_PWM_Stop+0x68>
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	4929      	ldr	r1, [pc, #164]	@ (80154d4 <HAL_TIM_PWM_Stop+0x108>)
 8015430:	400a      	ands	r2, r1
 8015432:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	6a1b      	ldr	r3, [r3, #32]
 801543a:	4a24      	ldr	r2, [pc, #144]	@ (80154cc <HAL_TIM_PWM_Stop+0x100>)
 801543c:	4013      	ands	r3, r2
 801543e:	d10d      	bne.n	801545c <HAL_TIM_PWM_Stop+0x90>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	6a1b      	ldr	r3, [r3, #32]
 8015446:	4a22      	ldr	r2, [pc, #136]	@ (80154d0 <HAL_TIM_PWM_Stop+0x104>)
 8015448:	4013      	ands	r3, r2
 801544a:	d107      	bne.n	801545c <HAL_TIM_PWM_Stop+0x90>
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	2101      	movs	r1, #1
 8015458:	438a      	bics	r2, r1
 801545a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d104      	bne.n	801546c <HAL_TIM_PWM_Stop+0xa0>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	223e      	movs	r2, #62	@ 0x3e
 8015466:	2101      	movs	r1, #1
 8015468:	5499      	strb	r1, [r3, r2]
 801546a:	e023      	b.n	80154b4 <HAL_TIM_PWM_Stop+0xe8>
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	2b04      	cmp	r3, #4
 8015470:	d104      	bne.n	801547c <HAL_TIM_PWM_Stop+0xb0>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	223f      	movs	r2, #63	@ 0x3f
 8015476:	2101      	movs	r1, #1
 8015478:	5499      	strb	r1, [r3, r2]
 801547a:	e01b      	b.n	80154b4 <HAL_TIM_PWM_Stop+0xe8>
 801547c:	683b      	ldr	r3, [r7, #0]
 801547e:	2b08      	cmp	r3, #8
 8015480:	d104      	bne.n	801548c <HAL_TIM_PWM_Stop+0xc0>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2240      	movs	r2, #64	@ 0x40
 8015486:	2101      	movs	r1, #1
 8015488:	5499      	strb	r1, [r3, r2]
 801548a:	e013      	b.n	80154b4 <HAL_TIM_PWM_Stop+0xe8>
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	2b0c      	cmp	r3, #12
 8015490:	d104      	bne.n	801549c <HAL_TIM_PWM_Stop+0xd0>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2241      	movs	r2, #65	@ 0x41
 8015496:	2101      	movs	r1, #1
 8015498:	5499      	strb	r1, [r3, r2]
 801549a:	e00b      	b.n	80154b4 <HAL_TIM_PWM_Stop+0xe8>
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	2b10      	cmp	r3, #16
 80154a0:	d104      	bne.n	80154ac <HAL_TIM_PWM_Stop+0xe0>
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2242      	movs	r2, #66	@ 0x42
 80154a6:	2101      	movs	r1, #1
 80154a8:	5499      	strb	r1, [r3, r2]
 80154aa:	e003      	b.n	80154b4 <HAL_TIM_PWM_Stop+0xe8>
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2243      	movs	r2, #67	@ 0x43
 80154b0:	2101      	movs	r1, #1
 80154b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	0018      	movs	r0, r3
 80154b8:	46bd      	mov	sp, r7
 80154ba:	b002      	add	sp, #8
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	46c0      	nop			@ (mov r8, r8)
 80154c0:	40012c00 	.word	0x40012c00
 80154c4:	40014000 	.word	0x40014000
 80154c8:	40014400 	.word	0x40014400
 80154cc:	00001111 	.word	0x00001111
 80154d0:	00000444 	.word	0x00000444
 80154d4:	ffff7fff 	.word	0xffff7fff

080154d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b086      	sub	sp, #24
 80154dc:	af00      	add	r7, sp, #0
 80154de:	60f8      	str	r0, [r7, #12]
 80154e0:	60b9      	str	r1, [r7, #8]
 80154e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80154e4:	2317      	movs	r3, #23
 80154e6:	18fb      	adds	r3, r7, r3
 80154e8:	2200      	movs	r2, #0
 80154ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	223c      	movs	r2, #60	@ 0x3c
 80154f0:	5c9b      	ldrb	r3, [r3, r2]
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	d101      	bne.n	80154fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80154f6:	2302      	movs	r3, #2
 80154f8:	e0e5      	b.n	80156c6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	223c      	movs	r2, #60	@ 0x3c
 80154fe:	2101      	movs	r1, #1
 8015500:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2b14      	cmp	r3, #20
 8015506:	d900      	bls.n	801550a <HAL_TIM_PWM_ConfigChannel+0x32>
 8015508:	e0d1      	b.n	80156ae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	009a      	lsls	r2, r3, #2
 801550e:	4b70      	ldr	r3, [pc, #448]	@ (80156d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8015510:	18d3      	adds	r3, r2, r3
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	68ba      	ldr	r2, [r7, #8]
 801551c:	0011      	movs	r1, r2
 801551e:	0018      	movs	r0, r3
 8015520:	f000 fa34 	bl	801598c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	699a      	ldr	r2, [r3, #24]
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	2108      	movs	r1, #8
 8015530:	430a      	orrs	r2, r1
 8015532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	699a      	ldr	r2, [r3, #24]
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	2104      	movs	r1, #4
 8015540:	438a      	bics	r2, r1
 8015542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	6999      	ldr	r1, [r3, #24]
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	691a      	ldr	r2, [r3, #16]
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	430a      	orrs	r2, r1
 8015554:	619a      	str	r2, [r3, #24]
      break;
 8015556:	e0af      	b.n	80156b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	0011      	movs	r1, r2
 8015560:	0018      	movs	r0, r3
 8015562:	f000 fa93 	bl	8015a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	699a      	ldr	r2, [r3, #24]
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	2180      	movs	r1, #128	@ 0x80
 8015572:	0109      	lsls	r1, r1, #4
 8015574:	430a      	orrs	r2, r1
 8015576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	699a      	ldr	r2, [r3, #24]
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	4954      	ldr	r1, [pc, #336]	@ (80156d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8015584:	400a      	ands	r2, r1
 8015586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	6999      	ldr	r1, [r3, #24]
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	691b      	ldr	r3, [r3, #16]
 8015592:	021a      	lsls	r2, r3, #8
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	430a      	orrs	r2, r1
 801559a:	619a      	str	r2, [r3, #24]
      break;
 801559c:	e08c      	b.n	80156b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	68ba      	ldr	r2, [r7, #8]
 80155a4:	0011      	movs	r1, r2
 80155a6:	0018      	movs	r0, r3
 80155a8:	f000 faee 	bl	8015b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	69da      	ldr	r2, [r3, #28]
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	2108      	movs	r1, #8
 80155b8:	430a      	orrs	r2, r1
 80155ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	69da      	ldr	r2, [r3, #28]
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	2104      	movs	r1, #4
 80155c8:	438a      	bics	r2, r1
 80155ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	69d9      	ldr	r1, [r3, #28]
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	691a      	ldr	r2, [r3, #16]
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	430a      	orrs	r2, r1
 80155dc:	61da      	str	r2, [r3, #28]
      break;
 80155de:	e06b      	b.n	80156b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	68ba      	ldr	r2, [r7, #8]
 80155e6:	0011      	movs	r1, r2
 80155e8:	0018      	movs	r0, r3
 80155ea:	f000 fb4f 	bl	8015c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	69da      	ldr	r2, [r3, #28]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	2180      	movs	r1, #128	@ 0x80
 80155fa:	0109      	lsls	r1, r1, #4
 80155fc:	430a      	orrs	r2, r1
 80155fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	69da      	ldr	r2, [r3, #28]
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	4932      	ldr	r1, [pc, #200]	@ (80156d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 801560c:	400a      	ands	r2, r1
 801560e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	69d9      	ldr	r1, [r3, #28]
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	691b      	ldr	r3, [r3, #16]
 801561a:	021a      	lsls	r2, r3, #8
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	430a      	orrs	r2, r1
 8015622:	61da      	str	r2, [r3, #28]
      break;
 8015624:	e048      	b.n	80156b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	68ba      	ldr	r2, [r7, #8]
 801562c:	0011      	movs	r1, r2
 801562e:	0018      	movs	r0, r3
 8015630:	f000 fb90 	bl	8015d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2108      	movs	r1, #8
 8015640:	430a      	orrs	r2, r1
 8015642:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2104      	movs	r1, #4
 8015650:	438a      	bics	r2, r1
 8015652:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	691a      	ldr	r2, [r3, #16]
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	430a      	orrs	r2, r1
 8015664:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8015666:	e027      	b.n	80156b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	68ba      	ldr	r2, [r7, #8]
 801566e:	0011      	movs	r1, r2
 8015670:	0018      	movs	r0, r3
 8015672:	f000 fbc9 	bl	8015e08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	2180      	movs	r1, #128	@ 0x80
 8015682:	0109      	lsls	r1, r1, #4
 8015684:	430a      	orrs	r2, r1
 8015686:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	4910      	ldr	r1, [pc, #64]	@ (80156d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8015694:	400a      	ands	r2, r1
 8015696:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	691b      	ldr	r3, [r3, #16]
 80156a2:	021a      	lsls	r2, r3, #8
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	430a      	orrs	r2, r1
 80156aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80156ac:	e004      	b.n	80156b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80156ae:	2317      	movs	r3, #23
 80156b0:	18fb      	adds	r3, r7, r3
 80156b2:	2201      	movs	r2, #1
 80156b4:	701a      	strb	r2, [r3, #0]
      break;
 80156b6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	223c      	movs	r2, #60	@ 0x3c
 80156bc:	2100      	movs	r1, #0
 80156be:	5499      	strb	r1, [r3, r2]

  return status;
 80156c0:	2317      	movs	r3, #23
 80156c2:	18fb      	adds	r3, r7, r3
 80156c4:	781b      	ldrb	r3, [r3, #0]
}
 80156c6:	0018      	movs	r0, r3
 80156c8:	46bd      	mov	sp, r7
 80156ca:	b006      	add	sp, #24
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	46c0      	nop			@ (mov r8, r8)
 80156d0:	08017ee8 	.word	0x08017ee8
 80156d4:	fffffbff 	.word	0xfffffbff

080156d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80156e2:	230f      	movs	r3, #15
 80156e4:	18fb      	adds	r3, r7, r3
 80156e6:	2200      	movs	r2, #0
 80156e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	223c      	movs	r2, #60	@ 0x3c
 80156ee:	5c9b      	ldrb	r3, [r3, r2]
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	d101      	bne.n	80156f8 <HAL_TIM_ConfigClockSource+0x20>
 80156f4:	2302      	movs	r3, #2
 80156f6:	e0c0      	b.n	801587a <HAL_TIM_ConfigClockSource+0x1a2>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	223c      	movs	r2, #60	@ 0x3c
 80156fc:	2101      	movs	r1, #1
 80156fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	223d      	movs	r2, #61	@ 0x3d
 8015704:	2102      	movs	r1, #2
 8015706:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	689b      	ldr	r3, [r3, #8]
 801570e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	4a5c      	ldr	r2, [pc, #368]	@ (8015884 <HAL_TIM_ConfigClockSource+0x1ac>)
 8015714:	4013      	ands	r3, r2
 8015716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	4a5b      	ldr	r2, [pc, #364]	@ (8015888 <HAL_TIM_ConfigClockSource+0x1b0>)
 801571c:	4013      	ands	r3, r2
 801571e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	68ba      	ldr	r2, [r7, #8]
 8015726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4a57      	ldr	r2, [pc, #348]	@ (801588c <HAL_TIM_ConfigClockSource+0x1b4>)
 801572e:	4293      	cmp	r3, r2
 8015730:	d100      	bne.n	8015734 <HAL_TIM_ConfigClockSource+0x5c>
 8015732:	e088      	b.n	8015846 <HAL_TIM_ConfigClockSource+0x16e>
 8015734:	4a55      	ldr	r2, [pc, #340]	@ (801588c <HAL_TIM_ConfigClockSource+0x1b4>)
 8015736:	4293      	cmp	r3, r2
 8015738:	d900      	bls.n	801573c <HAL_TIM_ConfigClockSource+0x64>
 801573a:	e08d      	b.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 801573c:	2280      	movs	r2, #128	@ 0x80
 801573e:	0192      	lsls	r2, r2, #6
 8015740:	4293      	cmp	r3, r2
 8015742:	d03c      	beq.n	80157be <HAL_TIM_ConfigClockSource+0xe6>
 8015744:	2280      	movs	r2, #128	@ 0x80
 8015746:	0192      	lsls	r2, r2, #6
 8015748:	4293      	cmp	r3, r2
 801574a:	d900      	bls.n	801574e <HAL_TIM_ConfigClockSource+0x76>
 801574c:	e084      	b.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 801574e:	2280      	movs	r2, #128	@ 0x80
 8015750:	0152      	lsls	r2, r2, #5
 8015752:	4293      	cmp	r3, r2
 8015754:	d100      	bne.n	8015758 <HAL_TIM_ConfigClockSource+0x80>
 8015756:	e084      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x18a>
 8015758:	2280      	movs	r2, #128	@ 0x80
 801575a:	0152      	lsls	r2, r2, #5
 801575c:	4293      	cmp	r3, r2
 801575e:	d900      	bls.n	8015762 <HAL_TIM_ConfigClockSource+0x8a>
 8015760:	e07a      	b.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 8015762:	2b70      	cmp	r3, #112	@ 0x70
 8015764:	d014      	beq.n	8015790 <HAL_TIM_ConfigClockSource+0xb8>
 8015766:	d900      	bls.n	801576a <HAL_TIM_ConfigClockSource+0x92>
 8015768:	e076      	b.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 801576a:	2b60      	cmp	r3, #96	@ 0x60
 801576c:	d04b      	beq.n	8015806 <HAL_TIM_ConfigClockSource+0x12e>
 801576e:	d900      	bls.n	8015772 <HAL_TIM_ConfigClockSource+0x9a>
 8015770:	e072      	b.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 8015772:	2b50      	cmp	r3, #80	@ 0x50
 8015774:	d037      	beq.n	80157e6 <HAL_TIM_ConfigClockSource+0x10e>
 8015776:	d900      	bls.n	801577a <HAL_TIM_ConfigClockSource+0xa2>
 8015778:	e06e      	b.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 801577a:	2b40      	cmp	r3, #64	@ 0x40
 801577c:	d053      	beq.n	8015826 <HAL_TIM_ConfigClockSource+0x14e>
 801577e:	d86b      	bhi.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 8015780:	2b20      	cmp	r3, #32
 8015782:	d060      	beq.n	8015846 <HAL_TIM_ConfigClockSource+0x16e>
 8015784:	d868      	bhi.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
 8015786:	2b00      	cmp	r3, #0
 8015788:	d05d      	beq.n	8015846 <HAL_TIM_ConfigClockSource+0x16e>
 801578a:	2b10      	cmp	r3, #16
 801578c:	d05b      	beq.n	8015846 <HAL_TIM_ConfigClockSource+0x16e>
 801578e:	e063      	b.n	8015858 <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80157a0:	f000 fc0c 	bl	8015fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	689b      	ldr	r3, [r3, #8]
 80157aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	2277      	movs	r2, #119	@ 0x77
 80157b0:	4313      	orrs	r3, r2
 80157b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	68ba      	ldr	r2, [r7, #8]
 80157ba:	609a      	str	r2, [r3, #8]
      break;
 80157bc:	e052      	b.n	8015864 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80157ce:	f000 fbf5 	bl	8015fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	689a      	ldr	r2, [r3, #8]
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	2180      	movs	r1, #128	@ 0x80
 80157de:	01c9      	lsls	r1, r1, #7
 80157e0:	430a      	orrs	r2, r1
 80157e2:	609a      	str	r2, [r3, #8]
      break;
 80157e4:	e03e      	b.n	8015864 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80157f2:	001a      	movs	r2, r3
 80157f4:	f000 fb66 	bl	8015ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2150      	movs	r1, #80	@ 0x50
 80157fe:	0018      	movs	r0, r3
 8015800:	f000 fbc0 	bl	8015f84 <TIM_ITRx_SetConfig>
      break;
 8015804:	e02e      	b.n	8015864 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015812:	001a      	movs	r2, r3
 8015814:	f000 fb84 	bl	8015f20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	2160      	movs	r1, #96	@ 0x60
 801581e:	0018      	movs	r0, r3
 8015820:	f000 fbb0 	bl	8015f84 <TIM_ITRx_SetConfig>
      break;
 8015824:	e01e      	b.n	8015864 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015832:	001a      	movs	r2, r3
 8015834:	f000 fb46 	bl	8015ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	2140      	movs	r1, #64	@ 0x40
 801583e:	0018      	movs	r0, r3
 8015840:	f000 fba0 	bl	8015f84 <TIM_ITRx_SetConfig>
      break;
 8015844:	e00e      	b.n	8015864 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	0019      	movs	r1, r3
 8015850:	0010      	movs	r0, r2
 8015852:	f000 fb97 	bl	8015f84 <TIM_ITRx_SetConfig>
      break;
 8015856:	e005      	b.n	8015864 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 8015858:	230f      	movs	r3, #15
 801585a:	18fb      	adds	r3, r7, r3
 801585c:	2201      	movs	r2, #1
 801585e:	701a      	strb	r2, [r3, #0]
      break;
 8015860:	e000      	b.n	8015864 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8015862:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	223d      	movs	r2, #61	@ 0x3d
 8015868:	2101      	movs	r1, #1
 801586a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	223c      	movs	r2, #60	@ 0x3c
 8015870:	2100      	movs	r1, #0
 8015872:	5499      	strb	r1, [r3, r2]

  return status;
 8015874:	230f      	movs	r3, #15
 8015876:	18fb      	adds	r3, r7, r3
 8015878:	781b      	ldrb	r3, [r3, #0]
}
 801587a:	0018      	movs	r0, r3
 801587c:	46bd      	mov	sp, r7
 801587e:	b004      	add	sp, #16
 8015880:	bd80      	pop	{r7, pc}
 8015882:	46c0      	nop			@ (mov r8, r8)
 8015884:	ffceff88 	.word	0xffceff88
 8015888:	ffff00ff 	.word	0xffff00ff
 801588c:	00100030 	.word	0x00100030

08015890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	4a35      	ldr	r2, [pc, #212]	@ (8015978 <TIM_Base_SetConfig+0xe8>)
 80158a4:	4293      	cmp	r3, r2
 80158a6:	d008      	beq.n	80158ba <TIM_Base_SetConfig+0x2a>
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	2380      	movs	r3, #128	@ 0x80
 80158ac:	05db      	lsls	r3, r3, #23
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d003      	beq.n	80158ba <TIM_Base_SetConfig+0x2a>
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	4a31      	ldr	r2, [pc, #196]	@ (801597c <TIM_Base_SetConfig+0xec>)
 80158b6:	4293      	cmp	r3, r2
 80158b8:	d108      	bne.n	80158cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	2270      	movs	r2, #112	@ 0x70
 80158be:	4393      	bics	r3, r2
 80158c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	4313      	orrs	r3, r2
 80158ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	4a2a      	ldr	r2, [pc, #168]	@ (8015978 <TIM_Base_SetConfig+0xe8>)
 80158d0:	4293      	cmp	r3, r2
 80158d2:	d010      	beq.n	80158f6 <TIM_Base_SetConfig+0x66>
 80158d4:	687a      	ldr	r2, [r7, #4]
 80158d6:	2380      	movs	r3, #128	@ 0x80
 80158d8:	05db      	lsls	r3, r3, #23
 80158da:	429a      	cmp	r2, r3
 80158dc:	d00b      	beq.n	80158f6 <TIM_Base_SetConfig+0x66>
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	4a26      	ldr	r2, [pc, #152]	@ (801597c <TIM_Base_SetConfig+0xec>)
 80158e2:	4293      	cmp	r3, r2
 80158e4:	d007      	beq.n	80158f6 <TIM_Base_SetConfig+0x66>
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	4a25      	ldr	r2, [pc, #148]	@ (8015980 <TIM_Base_SetConfig+0xf0>)
 80158ea:	4293      	cmp	r3, r2
 80158ec:	d003      	beq.n	80158f6 <TIM_Base_SetConfig+0x66>
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4a24      	ldr	r2, [pc, #144]	@ (8015984 <TIM_Base_SetConfig+0xf4>)
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d108      	bne.n	8015908 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	4a23      	ldr	r2, [pc, #140]	@ (8015988 <TIM_Base_SetConfig+0xf8>)
 80158fa:	4013      	ands	r3, r2
 80158fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	68db      	ldr	r3, [r3, #12]
 8015902:	68fa      	ldr	r2, [r7, #12]
 8015904:	4313      	orrs	r3, r2
 8015906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2280      	movs	r2, #128	@ 0x80
 801590c:	4393      	bics	r3, r2
 801590e:	001a      	movs	r2, r3
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	695b      	ldr	r3, [r3, #20]
 8015914:	4313      	orrs	r3, r2
 8015916:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	68fa      	ldr	r2, [r7, #12]
 801591c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	689a      	ldr	r2, [r3, #8]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	4a11      	ldr	r2, [pc, #68]	@ (8015978 <TIM_Base_SetConfig+0xe8>)
 8015932:	4293      	cmp	r3, r2
 8015934:	d007      	beq.n	8015946 <TIM_Base_SetConfig+0xb6>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	4a11      	ldr	r2, [pc, #68]	@ (8015980 <TIM_Base_SetConfig+0xf0>)
 801593a:	4293      	cmp	r3, r2
 801593c:	d003      	beq.n	8015946 <TIM_Base_SetConfig+0xb6>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	4a10      	ldr	r2, [pc, #64]	@ (8015984 <TIM_Base_SetConfig+0xf4>)
 8015942:	4293      	cmp	r3, r2
 8015944:	d103      	bne.n	801594e <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	691a      	ldr	r2, [r3, #16]
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2201      	movs	r2, #1
 8015952:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	691b      	ldr	r3, [r3, #16]
 8015958:	2201      	movs	r2, #1
 801595a:	4013      	ands	r3, r2
 801595c:	2b01      	cmp	r3, #1
 801595e:	d106      	bne.n	801596e <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	691b      	ldr	r3, [r3, #16]
 8015964:	2201      	movs	r2, #1
 8015966:	4393      	bics	r3, r2
 8015968:	001a      	movs	r2, r3
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	611a      	str	r2, [r3, #16]
  }
}
 801596e:	46c0      	nop			@ (mov r8, r8)
 8015970:	46bd      	mov	sp, r7
 8015972:	b004      	add	sp, #16
 8015974:	bd80      	pop	{r7, pc}
 8015976:	46c0      	nop			@ (mov r8, r8)
 8015978:	40012c00 	.word	0x40012c00
 801597c:	40000400 	.word	0x40000400
 8015980:	40014000 	.word	0x40014000
 8015984:	40014400 	.word	0x40014400
 8015988:	fffffcff 	.word	0xfffffcff

0801598c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b086      	sub	sp, #24
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6a1b      	ldr	r3, [r3, #32]
 801599a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6a1b      	ldr	r3, [r3, #32]
 80159a0:	2201      	movs	r2, #1
 80159a2:	4393      	bics	r3, r2
 80159a4:	001a      	movs	r2, r3
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	699b      	ldr	r3, [r3, #24]
 80159b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	4a2e      	ldr	r2, [pc, #184]	@ (8015a74 <TIM_OC1_SetConfig+0xe8>)
 80159ba:	4013      	ands	r3, r2
 80159bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	2203      	movs	r2, #3
 80159c2:	4393      	bics	r3, r2
 80159c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	68fa      	ldr	r2, [r7, #12]
 80159cc:	4313      	orrs	r3, r2
 80159ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	2202      	movs	r2, #2
 80159d4:	4393      	bics	r3, r2
 80159d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	689b      	ldr	r3, [r3, #8]
 80159dc:	697a      	ldr	r2, [r7, #20]
 80159de:	4313      	orrs	r3, r2
 80159e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	4a24      	ldr	r2, [pc, #144]	@ (8015a78 <TIM_OC1_SetConfig+0xec>)
 80159e6:	4293      	cmp	r3, r2
 80159e8:	d007      	beq.n	80159fa <TIM_OC1_SetConfig+0x6e>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	4a23      	ldr	r2, [pc, #140]	@ (8015a7c <TIM_OC1_SetConfig+0xf0>)
 80159ee:	4293      	cmp	r3, r2
 80159f0:	d003      	beq.n	80159fa <TIM_OC1_SetConfig+0x6e>
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	4a22      	ldr	r2, [pc, #136]	@ (8015a80 <TIM_OC1_SetConfig+0xf4>)
 80159f6:	4293      	cmp	r3, r2
 80159f8:	d10c      	bne.n	8015a14 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	2208      	movs	r2, #8
 80159fe:	4393      	bics	r3, r2
 8015a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	697a      	ldr	r2, [r7, #20]
 8015a08:	4313      	orrs	r3, r2
 8015a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	2204      	movs	r2, #4
 8015a10:	4393      	bics	r3, r2
 8015a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	4a18      	ldr	r2, [pc, #96]	@ (8015a78 <TIM_OC1_SetConfig+0xec>)
 8015a18:	4293      	cmp	r3, r2
 8015a1a:	d007      	beq.n	8015a2c <TIM_OC1_SetConfig+0xa0>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	4a17      	ldr	r2, [pc, #92]	@ (8015a7c <TIM_OC1_SetConfig+0xf0>)
 8015a20:	4293      	cmp	r3, r2
 8015a22:	d003      	beq.n	8015a2c <TIM_OC1_SetConfig+0xa0>
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	4a16      	ldr	r2, [pc, #88]	@ (8015a80 <TIM_OC1_SetConfig+0xf4>)
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d111      	bne.n	8015a50 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015a2c:	693b      	ldr	r3, [r7, #16]
 8015a2e:	4a15      	ldr	r2, [pc, #84]	@ (8015a84 <TIM_OC1_SetConfig+0xf8>)
 8015a30:	4013      	ands	r3, r2
 8015a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	4a14      	ldr	r2, [pc, #80]	@ (8015a88 <TIM_OC1_SetConfig+0xfc>)
 8015a38:	4013      	ands	r3, r2
 8015a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	695b      	ldr	r3, [r3, #20]
 8015a40:	693a      	ldr	r2, [r7, #16]
 8015a42:	4313      	orrs	r3, r2
 8015a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	699b      	ldr	r3, [r3, #24]
 8015a4a:	693a      	ldr	r2, [r7, #16]
 8015a4c:	4313      	orrs	r3, r2
 8015a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	693a      	ldr	r2, [r7, #16]
 8015a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	68fa      	ldr	r2, [r7, #12]
 8015a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	685a      	ldr	r2, [r3, #4]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	697a      	ldr	r2, [r7, #20]
 8015a68:	621a      	str	r2, [r3, #32]
}
 8015a6a:	46c0      	nop			@ (mov r8, r8)
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	b006      	add	sp, #24
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	46c0      	nop			@ (mov r8, r8)
 8015a74:	fffeff8f 	.word	0xfffeff8f
 8015a78:	40012c00 	.word	0x40012c00
 8015a7c:	40014000 	.word	0x40014000
 8015a80:	40014400 	.word	0x40014400
 8015a84:	fffffeff 	.word	0xfffffeff
 8015a88:	fffffdff 	.word	0xfffffdff

08015a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6a1b      	ldr	r3, [r3, #32]
 8015a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6a1b      	ldr	r3, [r3, #32]
 8015aa0:	2210      	movs	r2, #16
 8015aa2:	4393      	bics	r3, r2
 8015aa4:	001a      	movs	r2, r3
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	699b      	ldr	r3, [r3, #24]
 8015ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8015b6c <TIM_OC2_SetConfig+0xe0>)
 8015aba:	4013      	ands	r3, r2
 8015abc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8015b70 <TIM_OC2_SetConfig+0xe4>)
 8015ac2:	4013      	ands	r3, r2
 8015ac4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	021b      	lsls	r3, r3, #8
 8015acc:	68fa      	ldr	r2, [r7, #12]
 8015ace:	4313      	orrs	r3, r2
 8015ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	2220      	movs	r2, #32
 8015ad6:	4393      	bics	r3, r2
 8015ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	689b      	ldr	r3, [r3, #8]
 8015ade:	011b      	lsls	r3, r3, #4
 8015ae0:	697a      	ldr	r2, [r7, #20]
 8015ae2:	4313      	orrs	r3, r2
 8015ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	4a22      	ldr	r2, [pc, #136]	@ (8015b74 <TIM_OC2_SetConfig+0xe8>)
 8015aea:	4293      	cmp	r3, r2
 8015aec:	d10d      	bne.n	8015b0a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	2280      	movs	r2, #128	@ 0x80
 8015af2:	4393      	bics	r3, r2
 8015af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	68db      	ldr	r3, [r3, #12]
 8015afa:	011b      	lsls	r3, r3, #4
 8015afc:	697a      	ldr	r2, [r7, #20]
 8015afe:	4313      	orrs	r3, r2
 8015b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	2240      	movs	r2, #64	@ 0x40
 8015b06:	4393      	bics	r3, r2
 8015b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	4a19      	ldr	r2, [pc, #100]	@ (8015b74 <TIM_OC2_SetConfig+0xe8>)
 8015b0e:	4293      	cmp	r3, r2
 8015b10:	d007      	beq.n	8015b22 <TIM_OC2_SetConfig+0x96>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	4a18      	ldr	r2, [pc, #96]	@ (8015b78 <TIM_OC2_SetConfig+0xec>)
 8015b16:	4293      	cmp	r3, r2
 8015b18:	d003      	beq.n	8015b22 <TIM_OC2_SetConfig+0x96>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	4a17      	ldr	r2, [pc, #92]	@ (8015b7c <TIM_OC2_SetConfig+0xf0>)
 8015b1e:	4293      	cmp	r3, r2
 8015b20:	d113      	bne.n	8015b4a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	4a16      	ldr	r2, [pc, #88]	@ (8015b80 <TIM_OC2_SetConfig+0xf4>)
 8015b26:	4013      	ands	r3, r2
 8015b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	4a15      	ldr	r2, [pc, #84]	@ (8015b84 <TIM_OC2_SetConfig+0xf8>)
 8015b2e:	4013      	ands	r3, r2
 8015b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	695b      	ldr	r3, [r3, #20]
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	693a      	ldr	r2, [r7, #16]
 8015b3a:	4313      	orrs	r3, r2
 8015b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	699b      	ldr	r3, [r3, #24]
 8015b42:	009b      	lsls	r3, r3, #2
 8015b44:	693a      	ldr	r2, [r7, #16]
 8015b46:	4313      	orrs	r3, r2
 8015b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	693a      	ldr	r2, [r7, #16]
 8015b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	68fa      	ldr	r2, [r7, #12]
 8015b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	685a      	ldr	r2, [r3, #4]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	697a      	ldr	r2, [r7, #20]
 8015b62:	621a      	str	r2, [r3, #32]
}
 8015b64:	46c0      	nop			@ (mov r8, r8)
 8015b66:	46bd      	mov	sp, r7
 8015b68:	b006      	add	sp, #24
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	feff8fff 	.word	0xfeff8fff
 8015b70:	fffffcff 	.word	0xfffffcff
 8015b74:	40012c00 	.word	0x40012c00
 8015b78:	40014000 	.word	0x40014000
 8015b7c:	40014400 	.word	0x40014400
 8015b80:	fffffbff 	.word	0xfffffbff
 8015b84:	fffff7ff 	.word	0xfffff7ff

08015b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b086      	sub	sp, #24
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	6a1b      	ldr	r3, [r3, #32]
 8015b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6a1b      	ldr	r3, [r3, #32]
 8015b9c:	4a31      	ldr	r2, [pc, #196]	@ (8015c64 <TIM_OC3_SetConfig+0xdc>)
 8015b9e:	401a      	ands	r2, r3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	685b      	ldr	r3, [r3, #4]
 8015ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	69db      	ldr	r3, [r3, #28]
 8015bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8015c68 <TIM_OC3_SetConfig+0xe0>)
 8015bb4:	4013      	ands	r3, r2
 8015bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2203      	movs	r2, #3
 8015bbc:	4393      	bics	r3, r2
 8015bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	68fa      	ldr	r2, [r7, #12]
 8015bc6:	4313      	orrs	r3, r2
 8015bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	4a27      	ldr	r2, [pc, #156]	@ (8015c6c <TIM_OC3_SetConfig+0xe4>)
 8015bce:	4013      	ands	r3, r2
 8015bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	689b      	ldr	r3, [r3, #8]
 8015bd6:	021b      	lsls	r3, r3, #8
 8015bd8:	697a      	ldr	r2, [r7, #20]
 8015bda:	4313      	orrs	r3, r2
 8015bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	4a23      	ldr	r2, [pc, #140]	@ (8015c70 <TIM_OC3_SetConfig+0xe8>)
 8015be2:	4293      	cmp	r3, r2
 8015be4:	d10d      	bne.n	8015c02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015be6:	697b      	ldr	r3, [r7, #20]
 8015be8:	4a22      	ldr	r2, [pc, #136]	@ (8015c74 <TIM_OC3_SetConfig+0xec>)
 8015bea:	4013      	ands	r3, r2
 8015bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	68db      	ldr	r3, [r3, #12]
 8015bf2:	021b      	lsls	r3, r3, #8
 8015bf4:	697a      	ldr	r2, [r7, #20]
 8015bf6:	4313      	orrs	r3, r2
 8015bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8015c78 <TIM_OC3_SetConfig+0xf0>)
 8015bfe:	4013      	ands	r3, r2
 8015c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	4a1a      	ldr	r2, [pc, #104]	@ (8015c70 <TIM_OC3_SetConfig+0xe8>)
 8015c06:	4293      	cmp	r3, r2
 8015c08:	d007      	beq.n	8015c1a <TIM_OC3_SetConfig+0x92>
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8015c7c <TIM_OC3_SetConfig+0xf4>)
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	d003      	beq.n	8015c1a <TIM_OC3_SetConfig+0x92>
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	4a1a      	ldr	r2, [pc, #104]	@ (8015c80 <TIM_OC3_SetConfig+0xf8>)
 8015c16:	4293      	cmp	r3, r2
 8015c18:	d113      	bne.n	8015c42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	4a19      	ldr	r2, [pc, #100]	@ (8015c84 <TIM_OC3_SetConfig+0xfc>)
 8015c1e:	4013      	ands	r3, r2
 8015c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	4a18      	ldr	r2, [pc, #96]	@ (8015c88 <TIM_OC3_SetConfig+0x100>)
 8015c26:	4013      	ands	r3, r2
 8015c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	695b      	ldr	r3, [r3, #20]
 8015c2e:	011b      	lsls	r3, r3, #4
 8015c30:	693a      	ldr	r2, [r7, #16]
 8015c32:	4313      	orrs	r3, r2
 8015c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	699b      	ldr	r3, [r3, #24]
 8015c3a:	011b      	lsls	r3, r3, #4
 8015c3c:	693a      	ldr	r2, [r7, #16]
 8015c3e:	4313      	orrs	r3, r2
 8015c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	693a      	ldr	r2, [r7, #16]
 8015c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	685a      	ldr	r2, [r3, #4]
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	697a      	ldr	r2, [r7, #20]
 8015c5a:	621a      	str	r2, [r3, #32]
}
 8015c5c:	46c0      	nop			@ (mov r8, r8)
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	b006      	add	sp, #24
 8015c62:	bd80      	pop	{r7, pc}
 8015c64:	fffffeff 	.word	0xfffffeff
 8015c68:	fffeff8f 	.word	0xfffeff8f
 8015c6c:	fffffdff 	.word	0xfffffdff
 8015c70:	40012c00 	.word	0x40012c00
 8015c74:	fffff7ff 	.word	0xfffff7ff
 8015c78:	fffffbff 	.word	0xfffffbff
 8015c7c:	40014000 	.word	0x40014000
 8015c80:	40014400 	.word	0x40014400
 8015c84:	ffffefff 	.word	0xffffefff
 8015c88:	ffffdfff 	.word	0xffffdfff

08015c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b086      	sub	sp, #24
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6a1b      	ldr	r3, [r3, #32]
 8015c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6a1b      	ldr	r3, [r3, #32]
 8015ca0:	4a24      	ldr	r2, [pc, #144]	@ (8015d34 <TIM_OC4_SetConfig+0xa8>)
 8015ca2:	401a      	ands	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	69db      	ldr	r3, [r3, #28]
 8015cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	4a20      	ldr	r2, [pc, #128]	@ (8015d38 <TIM_OC4_SetConfig+0xac>)
 8015cb8:	4013      	ands	r3, r2
 8015cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8015d3c <TIM_OC4_SetConfig+0xb0>)
 8015cc0:	4013      	ands	r3, r2
 8015cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	021b      	lsls	r3, r3, #8
 8015cca:	68fa      	ldr	r2, [r7, #12]
 8015ccc:	4313      	orrs	r3, r2
 8015cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015cd0:	693b      	ldr	r3, [r7, #16]
 8015cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8015d40 <TIM_OC4_SetConfig+0xb4>)
 8015cd4:	4013      	ands	r3, r2
 8015cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	689b      	ldr	r3, [r3, #8]
 8015cdc:	031b      	lsls	r3, r3, #12
 8015cde:	693a      	ldr	r2, [r7, #16]
 8015ce0:	4313      	orrs	r3, r2
 8015ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	4a17      	ldr	r2, [pc, #92]	@ (8015d44 <TIM_OC4_SetConfig+0xb8>)
 8015ce8:	4293      	cmp	r3, r2
 8015cea:	d007      	beq.n	8015cfc <TIM_OC4_SetConfig+0x70>
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	4a16      	ldr	r2, [pc, #88]	@ (8015d48 <TIM_OC4_SetConfig+0xbc>)
 8015cf0:	4293      	cmp	r3, r2
 8015cf2:	d003      	beq.n	8015cfc <TIM_OC4_SetConfig+0x70>
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	4a15      	ldr	r2, [pc, #84]	@ (8015d4c <TIM_OC4_SetConfig+0xc0>)
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	d109      	bne.n	8015d10 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	4a14      	ldr	r2, [pc, #80]	@ (8015d50 <TIM_OC4_SetConfig+0xc4>)
 8015d00:	4013      	ands	r3, r2
 8015d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	695b      	ldr	r3, [r3, #20]
 8015d08:	019b      	lsls	r3, r3, #6
 8015d0a:	697a      	ldr	r2, [r7, #20]
 8015d0c:	4313      	orrs	r3, r2
 8015d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	697a      	ldr	r2, [r7, #20]
 8015d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	68fa      	ldr	r2, [r7, #12]
 8015d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	685a      	ldr	r2, [r3, #4]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	693a      	ldr	r2, [r7, #16]
 8015d28:	621a      	str	r2, [r3, #32]
}
 8015d2a:	46c0      	nop			@ (mov r8, r8)
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	b006      	add	sp, #24
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	46c0      	nop			@ (mov r8, r8)
 8015d34:	ffffefff 	.word	0xffffefff
 8015d38:	feff8fff 	.word	0xfeff8fff
 8015d3c:	fffffcff 	.word	0xfffffcff
 8015d40:	ffffdfff 	.word	0xffffdfff
 8015d44:	40012c00 	.word	0x40012c00
 8015d48:	40014000 	.word	0x40014000
 8015d4c:	40014400 	.word	0x40014400
 8015d50:	ffffbfff 	.word	0xffffbfff

08015d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b086      	sub	sp, #24
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
 8015d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6a1b      	ldr	r3, [r3, #32]
 8015d62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6a1b      	ldr	r3, [r3, #32]
 8015d68:	4a21      	ldr	r2, [pc, #132]	@ (8015df0 <TIM_OC5_SetConfig+0x9c>)
 8015d6a:	401a      	ands	r2, r3
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8015df4 <TIM_OC5_SetConfig+0xa0>)
 8015d80:	4013      	ands	r3, r2
 8015d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	68fa      	ldr	r2, [r7, #12]
 8015d8a:	4313      	orrs	r3, r2
 8015d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	4a19      	ldr	r2, [pc, #100]	@ (8015df8 <TIM_OC5_SetConfig+0xa4>)
 8015d92:	4013      	ands	r3, r2
 8015d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	689b      	ldr	r3, [r3, #8]
 8015d9a:	041b      	lsls	r3, r3, #16
 8015d9c:	693a      	ldr	r2, [r7, #16]
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	4a15      	ldr	r2, [pc, #84]	@ (8015dfc <TIM_OC5_SetConfig+0xa8>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d007      	beq.n	8015dba <TIM_OC5_SetConfig+0x66>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	4a14      	ldr	r2, [pc, #80]	@ (8015e00 <TIM_OC5_SetConfig+0xac>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d003      	beq.n	8015dba <TIM_OC5_SetConfig+0x66>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	4a13      	ldr	r2, [pc, #76]	@ (8015e04 <TIM_OC5_SetConfig+0xb0>)
 8015db6:	4293      	cmp	r3, r2
 8015db8:	d109      	bne.n	8015dce <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8015df0 <TIM_OC5_SetConfig+0x9c>)
 8015dbe:	4013      	ands	r3, r2
 8015dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	695b      	ldr	r3, [r3, #20]
 8015dc6:	021b      	lsls	r3, r3, #8
 8015dc8:	697a      	ldr	r2, [r7, #20]
 8015dca:	4313      	orrs	r3, r2
 8015dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	697a      	ldr	r2, [r7, #20]
 8015dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	685a      	ldr	r2, [r3, #4]
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	693a      	ldr	r2, [r7, #16]
 8015de6:	621a      	str	r2, [r3, #32]
}
 8015de8:	46c0      	nop			@ (mov r8, r8)
 8015dea:	46bd      	mov	sp, r7
 8015dec:	b006      	add	sp, #24
 8015dee:	bd80      	pop	{r7, pc}
 8015df0:	fffeffff 	.word	0xfffeffff
 8015df4:	fffeff8f 	.word	0xfffeff8f
 8015df8:	fffdffff 	.word	0xfffdffff
 8015dfc:	40012c00 	.word	0x40012c00
 8015e00:	40014000 	.word	0x40014000
 8015e04:	40014400 	.word	0x40014400

08015e08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b086      	sub	sp, #24
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6a1b      	ldr	r3, [r3, #32]
 8015e16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6a1b      	ldr	r3, [r3, #32]
 8015e1c:	4a22      	ldr	r2, [pc, #136]	@ (8015ea8 <TIM_OC6_SetConfig+0xa0>)
 8015e1e:	401a      	ands	r2, r3
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	4a1e      	ldr	r2, [pc, #120]	@ (8015eac <TIM_OC6_SetConfig+0xa4>)
 8015e34:	4013      	ands	r3, r2
 8015e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	021b      	lsls	r3, r3, #8
 8015e3e:	68fa      	ldr	r2, [r7, #12]
 8015e40:	4313      	orrs	r3, r2
 8015e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	4a1a      	ldr	r2, [pc, #104]	@ (8015eb0 <TIM_OC6_SetConfig+0xa8>)
 8015e48:	4013      	ands	r3, r2
 8015e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	689b      	ldr	r3, [r3, #8]
 8015e50:	051b      	lsls	r3, r3, #20
 8015e52:	693a      	ldr	r2, [r7, #16]
 8015e54:	4313      	orrs	r3, r2
 8015e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	4a16      	ldr	r2, [pc, #88]	@ (8015eb4 <TIM_OC6_SetConfig+0xac>)
 8015e5c:	4293      	cmp	r3, r2
 8015e5e:	d007      	beq.n	8015e70 <TIM_OC6_SetConfig+0x68>
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	4a15      	ldr	r2, [pc, #84]	@ (8015eb8 <TIM_OC6_SetConfig+0xb0>)
 8015e64:	4293      	cmp	r3, r2
 8015e66:	d003      	beq.n	8015e70 <TIM_OC6_SetConfig+0x68>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	4a14      	ldr	r2, [pc, #80]	@ (8015ebc <TIM_OC6_SetConfig+0xb4>)
 8015e6c:	4293      	cmp	r3, r2
 8015e6e:	d109      	bne.n	8015e84 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8015e70:	697b      	ldr	r3, [r7, #20]
 8015e72:	4a13      	ldr	r2, [pc, #76]	@ (8015ec0 <TIM_OC6_SetConfig+0xb8>)
 8015e74:	4013      	ands	r3, r2
 8015e76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	695b      	ldr	r3, [r3, #20]
 8015e7c:	029b      	lsls	r3, r3, #10
 8015e7e:	697a      	ldr	r2, [r7, #20]
 8015e80:	4313      	orrs	r3, r2
 8015e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	697a      	ldr	r2, [r7, #20]
 8015e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	68fa      	ldr	r2, [r7, #12]
 8015e8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	685a      	ldr	r2, [r3, #4]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	693a      	ldr	r2, [r7, #16]
 8015e9c:	621a      	str	r2, [r3, #32]
}
 8015e9e:	46c0      	nop			@ (mov r8, r8)
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	b006      	add	sp, #24
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	46c0      	nop			@ (mov r8, r8)
 8015ea8:	ffefffff 	.word	0xffefffff
 8015eac:	feff8fff 	.word	0xfeff8fff
 8015eb0:	ffdfffff 	.word	0xffdfffff
 8015eb4:	40012c00 	.word	0x40012c00
 8015eb8:	40014000 	.word	0x40014000
 8015ebc:	40014400 	.word	0x40014400
 8015ec0:	fffbffff 	.word	0xfffbffff

08015ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b086      	sub	sp, #24
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	60f8      	str	r0, [r7, #12]
 8015ecc:	60b9      	str	r1, [r7, #8]
 8015ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	6a1b      	ldr	r3, [r3, #32]
 8015ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	6a1b      	ldr	r3, [r3, #32]
 8015eda:	2201      	movs	r2, #1
 8015edc:	4393      	bics	r3, r2
 8015ede:	001a      	movs	r2, r3
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	699b      	ldr	r3, [r3, #24]
 8015ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	22f0      	movs	r2, #240	@ 0xf0
 8015eee:	4393      	bics	r3, r2
 8015ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	011b      	lsls	r3, r3, #4
 8015ef6:	693a      	ldr	r2, [r7, #16]
 8015ef8:	4313      	orrs	r3, r2
 8015efa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	220a      	movs	r2, #10
 8015f00:	4393      	bics	r3, r2
 8015f02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015f04:	697a      	ldr	r2, [r7, #20]
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	4313      	orrs	r3, r2
 8015f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	693a      	ldr	r2, [r7, #16]
 8015f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	697a      	ldr	r2, [r7, #20]
 8015f16:	621a      	str	r2, [r3, #32]
}
 8015f18:	46c0      	nop			@ (mov r8, r8)
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	b006      	add	sp, #24
 8015f1e:	bd80      	pop	{r7, pc}

08015f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b086      	sub	sp, #24
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	6a1b      	ldr	r3, [r3, #32]
 8015f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	6a1b      	ldr	r3, [r3, #32]
 8015f36:	2210      	movs	r2, #16
 8015f38:	4393      	bics	r3, r2
 8015f3a:	001a      	movs	r2, r3
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	699b      	ldr	r3, [r3, #24]
 8015f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	4a0d      	ldr	r2, [pc, #52]	@ (8015f80 <TIM_TI2_ConfigInputStage+0x60>)
 8015f4a:	4013      	ands	r3, r2
 8015f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	031b      	lsls	r3, r3, #12
 8015f52:	693a      	ldr	r2, [r7, #16]
 8015f54:	4313      	orrs	r3, r2
 8015f56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	22a0      	movs	r2, #160	@ 0xa0
 8015f5c:	4393      	bics	r3, r2
 8015f5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	011b      	lsls	r3, r3, #4
 8015f64:	697a      	ldr	r2, [r7, #20]
 8015f66:	4313      	orrs	r3, r2
 8015f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	693a      	ldr	r2, [r7, #16]
 8015f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	697a      	ldr	r2, [r7, #20]
 8015f74:	621a      	str	r2, [r3, #32]
}
 8015f76:	46c0      	nop			@ (mov r8, r8)
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	b006      	add	sp, #24
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	46c0      	nop			@ (mov r8, r8)
 8015f80:	ffff0fff 	.word	0xffff0fff

08015f84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b084      	sub	sp, #16
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	689b      	ldr	r3, [r3, #8]
 8015f92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	4a08      	ldr	r2, [pc, #32]	@ (8015fb8 <TIM_ITRx_SetConfig+0x34>)
 8015f98:	4013      	ands	r3, r2
 8015f9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015f9c:	683a      	ldr	r2, [r7, #0]
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	4313      	orrs	r3, r2
 8015fa2:	2207      	movs	r2, #7
 8015fa4:	4313      	orrs	r3, r2
 8015fa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	68fa      	ldr	r2, [r7, #12]
 8015fac:	609a      	str	r2, [r3, #8]
}
 8015fae:	46c0      	nop			@ (mov r8, r8)
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	b004      	add	sp, #16
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	46c0      	nop			@ (mov r8, r8)
 8015fb8:	ffcfff8f 	.word	0xffcfff8f

08015fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b086      	sub	sp, #24
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
 8015fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	689b      	ldr	r3, [r3, #8]
 8015fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	4a09      	ldr	r2, [pc, #36]	@ (8015ff8 <TIM_ETR_SetConfig+0x3c>)
 8015fd4:	4013      	ands	r3, r2
 8015fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	021a      	lsls	r2, r3, #8
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	431a      	orrs	r2, r3
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	4313      	orrs	r3, r2
 8015fe4:	697a      	ldr	r2, [r7, #20]
 8015fe6:	4313      	orrs	r3, r2
 8015fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	697a      	ldr	r2, [r7, #20]
 8015fee:	609a      	str	r2, [r3, #8]
}
 8015ff0:	46c0      	nop			@ (mov r8, r8)
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	b006      	add	sp, #24
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	ffff00ff 	.word	0xffff00ff

08015ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b086      	sub	sp, #24
 8016000:	af00      	add	r7, sp, #0
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	221f      	movs	r2, #31
 801600c:	4013      	ands	r3, r2
 801600e:	2201      	movs	r2, #1
 8016010:	409a      	lsls	r2, r3
 8016012:	0013      	movs	r3, r2
 8016014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	6a1b      	ldr	r3, [r3, #32]
 801601a:	697a      	ldr	r2, [r7, #20]
 801601c:	43d2      	mvns	r2, r2
 801601e:	401a      	ands	r2, r3
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	6a1a      	ldr	r2, [r3, #32]
 8016028:	68bb      	ldr	r3, [r7, #8]
 801602a:	211f      	movs	r1, #31
 801602c:	400b      	ands	r3, r1
 801602e:	6879      	ldr	r1, [r7, #4]
 8016030:	4099      	lsls	r1, r3
 8016032:	000b      	movs	r3, r1
 8016034:	431a      	orrs	r2, r3
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	621a      	str	r2, [r3, #32]
}
 801603a:	46c0      	nop			@ (mov r8, r8)
 801603c:	46bd      	mov	sp, r7
 801603e:	b006      	add	sp, #24
 8016040:	bd80      	pop	{r7, pc}
	...

08016044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b084      	sub	sp, #16
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	223c      	movs	r2, #60	@ 0x3c
 8016052:	5c9b      	ldrb	r3, [r3, r2]
 8016054:	2b01      	cmp	r3, #1
 8016056:	d101      	bne.n	801605c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016058:	2302      	movs	r3, #2
 801605a:	e055      	b.n	8016108 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	223c      	movs	r2, #60	@ 0x3c
 8016060:	2101      	movs	r1, #1
 8016062:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	223d      	movs	r2, #61	@ 0x3d
 8016068:	2102      	movs	r1, #2
 801606a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	689b      	ldr	r3, [r3, #8]
 801607a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4a23      	ldr	r2, [pc, #140]	@ (8016110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8016082:	4293      	cmp	r3, r2
 8016084:	d108      	bne.n	8016098 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	4a22      	ldr	r2, [pc, #136]	@ (8016114 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801608a:	4013      	ands	r3, r2
 801608c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	685b      	ldr	r3, [r3, #4]
 8016092:	68fa      	ldr	r2, [r7, #12]
 8016094:	4313      	orrs	r3, r2
 8016096:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2270      	movs	r2, #112	@ 0x70
 801609c:	4393      	bics	r3, r2
 801609e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	68fa      	ldr	r2, [r7, #12]
 80160a6:	4313      	orrs	r3, r2
 80160a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	68fa      	ldr	r2, [r7, #12]
 80160b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	4a16      	ldr	r2, [pc, #88]	@ (8016110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80160b8:	4293      	cmp	r3, r2
 80160ba:	d00f      	beq.n	80160dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	2380      	movs	r3, #128	@ 0x80
 80160c2:	05db      	lsls	r3, r3, #23
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d009      	beq.n	80160dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	4a12      	ldr	r2, [pc, #72]	@ (8016118 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80160ce:	4293      	cmp	r3, r2
 80160d0:	d004      	beq.n	80160dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	4a11      	ldr	r2, [pc, #68]	@ (801611c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80160d8:	4293      	cmp	r3, r2
 80160da:	d10c      	bne.n	80160f6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	2280      	movs	r2, #128	@ 0x80
 80160e0:	4393      	bics	r3, r2
 80160e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	689b      	ldr	r3, [r3, #8]
 80160e8:	68ba      	ldr	r2, [r7, #8]
 80160ea:	4313      	orrs	r3, r2
 80160ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	68ba      	ldr	r2, [r7, #8]
 80160f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	223d      	movs	r2, #61	@ 0x3d
 80160fa:	2101      	movs	r1, #1
 80160fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	223c      	movs	r2, #60	@ 0x3c
 8016102:	2100      	movs	r1, #0
 8016104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016106:	2300      	movs	r3, #0
}
 8016108:	0018      	movs	r0, r3
 801610a:	46bd      	mov	sp, r7
 801610c:	b004      	add	sp, #16
 801610e:	bd80      	pop	{r7, pc}
 8016110:	40012c00 	.word	0x40012c00
 8016114:	ff0fffff 	.word	0xff0fffff
 8016118:	40000400 	.word	0x40000400
 801611c:	40014000 	.word	0x40014000

08016120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d101      	bne.n	8016132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801612e:	2301      	movs	r3, #1
 8016130:	e046      	b.n	80161c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	2288      	movs	r2, #136	@ 0x88
 8016136:	589b      	ldr	r3, [r3, r2]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d107      	bne.n	801614c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2284      	movs	r2, #132	@ 0x84
 8016140:	2100      	movs	r1, #0
 8016142:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	0018      	movs	r0, r3
 8016148:	f7f2 ff62 	bl	8009010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2288      	movs	r2, #136	@ 0x88
 8016150:	2124      	movs	r1, #36	@ 0x24
 8016152:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	2101      	movs	r1, #1
 8016160:	438a      	bics	r2, r1
 8016162:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016168:	2b00      	cmp	r3, #0
 801616a:	d003      	beq.n	8016174 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	0018      	movs	r0, r3
 8016170:	f000 ff2a 	bl	8016fc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	0018      	movs	r0, r3
 8016178:	f000 fd54 	bl	8016c24 <UART_SetConfig>
 801617c:	0003      	movs	r3, r0
 801617e:	2b01      	cmp	r3, #1
 8016180:	d101      	bne.n	8016186 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8016182:	2301      	movs	r3, #1
 8016184:	e01c      	b.n	80161c0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	685a      	ldr	r2, [r3, #4]
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	490d      	ldr	r1, [pc, #52]	@ (80161c8 <HAL_UART_Init+0xa8>)
 8016192:	400a      	ands	r2, r1
 8016194:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	689a      	ldr	r2, [r3, #8]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	212a      	movs	r1, #42	@ 0x2a
 80161a2:	438a      	bics	r2, r1
 80161a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	681a      	ldr	r2, [r3, #0]
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	2101      	movs	r1, #1
 80161b2:	430a      	orrs	r2, r1
 80161b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	0018      	movs	r0, r3
 80161ba:	f000 ffb9 	bl	8017130 <UART_CheckIdleState>
 80161be:	0003      	movs	r3, r0
}
 80161c0:	0018      	movs	r0, r3
 80161c2:	46bd      	mov	sp, r7
 80161c4:	b002      	add	sp, #8
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	ffffb7ff 	.word	0xffffb7ff

080161cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b088      	sub	sp, #32
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	60b9      	str	r1, [r7, #8]
 80161d6:	1dbb      	adds	r3, r7, #6
 80161d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	2288      	movs	r2, #136	@ 0x88
 80161de:	589b      	ldr	r3, [r3, r2]
 80161e0:	2b20      	cmp	r3, #32
 80161e2:	d000      	beq.n	80161e6 <HAL_UART_Transmit_DMA+0x1a>
 80161e4:	e079      	b.n	80162da <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d003      	beq.n	80161f4 <HAL_UART_Transmit_DMA+0x28>
 80161ec:	1dbb      	adds	r3, r7, #6
 80161ee:	881b      	ldrh	r3, [r3, #0]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d101      	bne.n	80161f8 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80161f4:	2301      	movs	r3, #1
 80161f6:	e071      	b.n	80162dc <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	689a      	ldr	r2, [r3, #8]
 80161fc:	2380      	movs	r3, #128	@ 0x80
 80161fe:	015b      	lsls	r3, r3, #5
 8016200:	429a      	cmp	r2, r3
 8016202:	d109      	bne.n	8016218 <HAL_UART_Transmit_DMA+0x4c>
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	691b      	ldr	r3, [r3, #16]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d105      	bne.n	8016218 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	2201      	movs	r2, #1
 8016210:	4013      	ands	r3, r2
 8016212:	d001      	beq.n	8016218 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8016214:	2301      	movs	r3, #1
 8016216:	e061      	b.n	80162dc <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	68ba      	ldr	r2, [r7, #8]
 801621c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	1dba      	adds	r2, r7, #6
 8016222:	2154      	movs	r1, #84	@ 0x54
 8016224:	8812      	ldrh	r2, [r2, #0]
 8016226:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	1dba      	adds	r2, r7, #6
 801622c:	2156      	movs	r1, #86	@ 0x56
 801622e:	8812      	ldrh	r2, [r2, #0]
 8016230:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	2290      	movs	r2, #144	@ 0x90
 8016236:	2100      	movs	r1, #0
 8016238:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2288      	movs	r2, #136	@ 0x88
 801623e:	2121      	movs	r1, #33	@ 0x21
 8016240:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016246:	2b00      	cmp	r3, #0
 8016248:	d028      	beq.n	801629c <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801624e:	4a25      	ldr	r2, [pc, #148]	@ (80162e4 <HAL_UART_Transmit_DMA+0x118>)
 8016250:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016256:	4a24      	ldr	r2, [pc, #144]	@ (80162e8 <HAL_UART_Transmit_DMA+0x11c>)
 8016258:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801625e:	4a23      	ldr	r2, [pc, #140]	@ (80162ec <HAL_UART_Transmit_DMA+0x120>)
 8016260:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016266:	2200      	movs	r2, #0
 8016268:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016272:	0019      	movs	r1, r3
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	3328      	adds	r3, #40	@ 0x28
 801627a:	001a      	movs	r2, r3
 801627c:	1dbb      	adds	r3, r7, #6
 801627e:	881b      	ldrh	r3, [r3, #0]
 8016280:	f7f9 f98c 	bl	800f59c <HAL_DMA_Start_IT>
 8016284:	1e03      	subs	r3, r0, #0
 8016286:	d009      	beq.n	801629c <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	2290      	movs	r2, #144	@ 0x90
 801628c:	2110      	movs	r1, #16
 801628e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	2288      	movs	r2, #136	@ 0x88
 8016294:	2120      	movs	r1, #32
 8016296:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8016298:	2301      	movs	r3, #1
 801629a:	e01f      	b.n	80162dc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2240      	movs	r2, #64	@ 0x40
 80162a2:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80162a4:	f3ef 8310 	mrs	r3, PRIMASK
 80162a8:	613b      	str	r3, [r7, #16]
  return(result);
 80162aa:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80162ac:	61fb      	str	r3, [r7, #28]
 80162ae:	2301      	movs	r3, #1
 80162b0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	f383 8810 	msr	PRIMASK, r3
}
 80162b8:	46c0      	nop			@ (mov r8, r8)
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	689a      	ldr	r2, [r3, #8]
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	2180      	movs	r1, #128	@ 0x80
 80162c6:	430a      	orrs	r2, r1
 80162c8:	609a      	str	r2, [r3, #8]
 80162ca:	69fb      	ldr	r3, [r7, #28]
 80162cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162ce:	69bb      	ldr	r3, [r7, #24]
 80162d0:	f383 8810 	msr	PRIMASK, r3
}
 80162d4:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80162d6:	2300      	movs	r3, #0
 80162d8:	e000      	b.n	80162dc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80162da:	2302      	movs	r3, #2
  }
}
 80162dc:	0018      	movs	r0, r3
 80162de:	46bd      	mov	sp, r7
 80162e0:	b008      	add	sp, #32
 80162e2:	bd80      	pop	{r7, pc}
 80162e4:	080175fd 	.word	0x080175fd
 80162e8:	08017695 	.word	0x08017695
 80162ec:	08017827 	.word	0x08017827

080162f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b088      	sub	sp, #32
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	1dbb      	adds	r3, r7, #6
 80162fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	228c      	movs	r2, #140	@ 0x8c
 8016302:	589b      	ldr	r3, [r3, r2]
 8016304:	2b20      	cmp	r3, #32
 8016306:	d154      	bne.n	80163b2 <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d003      	beq.n	8016316 <HAL_UART_Receive_DMA+0x26>
 801630e:	1dbb      	adds	r3, r7, #6
 8016310:	881b      	ldrh	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d101      	bne.n	801631a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016316:	2301      	movs	r3, #1
 8016318:	e04c      	b.n	80163b4 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	689a      	ldr	r2, [r3, #8]
 801631e:	2380      	movs	r3, #128	@ 0x80
 8016320:	015b      	lsls	r3, r3, #5
 8016322:	429a      	cmp	r2, r3
 8016324:	d109      	bne.n	801633a <HAL_UART_Receive_DMA+0x4a>
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	691b      	ldr	r3, [r3, #16]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d105      	bne.n	801633a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	2201      	movs	r2, #1
 8016332:	4013      	ands	r3, r2
 8016334:	d001      	beq.n	801633a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016336:	2301      	movs	r3, #1
 8016338:	e03c      	b.n	80163b4 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2200      	movs	r2, #0
 801633e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	4a1d      	ldr	r2, [pc, #116]	@ (80163bc <HAL_UART_Receive_DMA+0xcc>)
 8016346:	4293      	cmp	r3, r2
 8016348:	d02a      	beq.n	80163a0 <HAL_UART_Receive_DMA+0xb0>
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	4a1c      	ldr	r2, [pc, #112]	@ (80163c0 <HAL_UART_Receive_DMA+0xd0>)
 8016350:	4293      	cmp	r3, r2
 8016352:	d025      	beq.n	80163a0 <HAL_UART_Receive_DMA+0xb0>
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	4a1a      	ldr	r2, [pc, #104]	@ (80163c4 <HAL_UART_Receive_DMA+0xd4>)
 801635a:	4293      	cmp	r3, r2
 801635c:	d020      	beq.n	80163a0 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	685a      	ldr	r2, [r3, #4]
 8016364:	2380      	movs	r3, #128	@ 0x80
 8016366:	041b      	lsls	r3, r3, #16
 8016368:	4013      	ands	r3, r2
 801636a:	d019      	beq.n	80163a0 <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801636c:	f3ef 8310 	mrs	r3, PRIMASK
 8016370:	613b      	str	r3, [r7, #16]
  return(result);
 8016372:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016374:	61fb      	str	r3, [r7, #28]
 8016376:	2301      	movs	r3, #1
 8016378:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801637a:	697b      	ldr	r3, [r7, #20]
 801637c:	f383 8810 	msr	PRIMASK, r3
}
 8016380:	46c0      	nop			@ (mov r8, r8)
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	681a      	ldr	r2, [r3, #0]
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	2180      	movs	r1, #128	@ 0x80
 801638e:	04c9      	lsls	r1, r1, #19
 8016390:	430a      	orrs	r2, r1
 8016392:	601a      	str	r2, [r3, #0]
 8016394:	69fb      	ldr	r3, [r7, #28]
 8016396:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	f383 8810 	msr	PRIMASK, r3
}
 801639e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80163a0:	1dbb      	adds	r3, r7, #6
 80163a2:	881a      	ldrh	r2, [r3, #0]
 80163a4:	68b9      	ldr	r1, [r7, #8]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	0018      	movs	r0, r3
 80163aa:	f000 ffdb 	bl	8017364 <UART_Start_Receive_DMA>
 80163ae:	0003      	movs	r3, r0
 80163b0:	e000      	b.n	80163b4 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80163b2:	2302      	movs	r3, #2
  }
}
 80163b4:	0018      	movs	r0, r3
 80163b6:	46bd      	mov	sp, r7
 80163b8:	b008      	add	sp, #32
 80163ba:	bd80      	pop	{r7, pc}
 80163bc:	40008000 	.word	0x40008000
 80163c0:	40008400 	.word	0x40008400
 80163c4:	40008c00 	.word	0x40008c00

080163c8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b092      	sub	sp, #72	@ 0x48
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80163d0:	f3ef 8310 	mrs	r3, PRIMASK
 80163d4:	623b      	str	r3, [r7, #32]
  return(result);
 80163d6:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80163d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80163da:	2301      	movs	r3, #1
 80163dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80163de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163e0:	f383 8810 	msr	PRIMASK, r3
}
 80163e4:	46c0      	nop			@ (mov r8, r8)
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	681a      	ldr	r2, [r3, #0]
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	494d      	ldr	r1, [pc, #308]	@ (8016528 <HAL_UART_AbortReceive+0x160>)
 80163f2:	400a      	ands	r2, r1
 80163f4:	601a      	str	r2, [r3, #0]
 80163f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80163fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163fc:	f383 8810 	msr	PRIMASK, r3
}
 8016400:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016402:	f3ef 8310 	mrs	r3, PRIMASK
 8016406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8016408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801640a:	643b      	str	r3, [r7, #64]	@ 0x40
 801640c:	2301      	movs	r3, #1
 801640e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016412:	f383 8810 	msr	PRIMASK, r3
}
 8016416:	46c0      	nop			@ (mov r8, r8)
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	689a      	ldr	r2, [r3, #8]
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	4942      	ldr	r1, [pc, #264]	@ (801652c <HAL_UART_AbortReceive+0x164>)
 8016424:	400a      	ands	r2, r1
 8016426:	609a      	str	r2, [r3, #8]
 8016428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801642a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801642c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801642e:	f383 8810 	msr	PRIMASK, r3
}
 8016432:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016438:	2b01      	cmp	r3, #1
 801643a:	d118      	bne.n	801646e <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801643c:	f3ef 8310 	mrs	r3, PRIMASK
 8016440:	617b      	str	r3, [r7, #20]
  return(result);
 8016442:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016446:	2301      	movs	r3, #1
 8016448:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801644a:	69bb      	ldr	r3, [r7, #24]
 801644c:	f383 8810 	msr	PRIMASK, r3
}
 8016450:	46c0      	nop			@ (mov r8, r8)
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	681a      	ldr	r2, [r3, #0]
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2110      	movs	r1, #16
 801645e:	438a      	bics	r2, r1
 8016460:	601a      	str	r2, [r3, #0]
 8016462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016464:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	f383 8810 	msr	PRIMASK, r3
}
 801646c:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	689b      	ldr	r3, [r3, #8]
 8016474:	2240      	movs	r2, #64	@ 0x40
 8016476:	4013      	ands	r3, r2
 8016478:	2b40      	cmp	r3, #64	@ 0x40
 801647a:	d139      	bne.n	80164f0 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801647c:	f3ef 8310 	mrs	r3, PRIMASK
 8016480:	60bb      	str	r3, [r7, #8]
  return(result);
 8016482:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016484:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016486:	2301      	movs	r3, #1
 8016488:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	f383 8810 	msr	PRIMASK, r3
}
 8016490:	46c0      	nop			@ (mov r8, r8)
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	689a      	ldr	r2, [r3, #8]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2140      	movs	r1, #64	@ 0x40
 801649e:	438a      	bics	r2, r1
 80164a0:	609a      	str	r2, [r3, #8]
 80164a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80164a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164a6:	693b      	ldr	r3, [r7, #16]
 80164a8:	f383 8810 	msr	PRIMASK, r3
}
 80164ac:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2280      	movs	r2, #128	@ 0x80
 80164b2:	589b      	ldr	r3, [r3, r2]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d01b      	beq.n	80164f0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2280      	movs	r2, #128	@ 0x80
 80164bc:	589b      	ldr	r3, [r3, r2]
 80164be:	2200      	movs	r2, #0
 80164c0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2280      	movs	r2, #128	@ 0x80
 80164c6:	589b      	ldr	r3, [r3, r2]
 80164c8:	0018      	movs	r0, r3
 80164ca:	f7f9 f8ed 	bl	800f6a8 <HAL_DMA_Abort>
 80164ce:	1e03      	subs	r3, r0, #0
 80164d0:	d00e      	beq.n	80164f0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2280      	movs	r2, #128	@ 0x80
 80164d6:	589b      	ldr	r3, [r3, r2]
 80164d8:	0018      	movs	r0, r3
 80164da:	f7f9 fa7d 	bl	800f9d8 <HAL_DMA_GetError>
 80164de:	0003      	movs	r3, r0
 80164e0:	2b20      	cmp	r3, #32
 80164e2:	d105      	bne.n	80164f0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2290      	movs	r2, #144	@ 0x90
 80164e8:	2110      	movs	r1, #16
 80164ea:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80164ec:	2303      	movs	r3, #3
 80164ee:	e017      	b.n	8016520 <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	225e      	movs	r2, #94	@ 0x5e
 80164f4:	2100      	movs	r1, #0
 80164f6:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	220f      	movs	r2, #15
 80164fe:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	699a      	ldr	r2, [r3, #24]
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2108      	movs	r1, #8
 801650c:	430a      	orrs	r2, r1
 801650e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	228c      	movs	r2, #140	@ 0x8c
 8016514:	2120      	movs	r1, #32
 8016516:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2200      	movs	r2, #0
 801651c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 801651e:	2300      	movs	r3, #0
}
 8016520:	0018      	movs	r0, r3
 8016522:	46bd      	mov	sp, r7
 8016524:	b012      	add	sp, #72	@ 0x48
 8016526:	bd80      	pop	{r7, pc}
 8016528:	fffffedf 	.word	0xfffffedf
 801652c:	effffffe 	.word	0xeffffffe

08016530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016530:	b5b0      	push	{r4, r5, r7, lr}
 8016532:	b0aa      	sub	sp, #168	@ 0xa8
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	69db      	ldr	r3, [r3, #28]
 801653e:	22a4      	movs	r2, #164	@ 0xa4
 8016540:	18b9      	adds	r1, r7, r2
 8016542:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	20a0      	movs	r0, #160	@ 0xa0
 801654c:	1839      	adds	r1, r7, r0
 801654e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	689b      	ldr	r3, [r3, #8]
 8016556:	249c      	movs	r4, #156	@ 0x9c
 8016558:	1939      	adds	r1, r7, r4
 801655a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801655c:	0011      	movs	r1, r2
 801655e:	18bb      	adds	r3, r7, r2
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	4aa2      	ldr	r2, [pc, #648]	@ (80167ec <HAL_UART_IRQHandler+0x2bc>)
 8016564:	4013      	ands	r3, r2
 8016566:	2298      	movs	r2, #152	@ 0x98
 8016568:	18bd      	adds	r5, r7, r2
 801656a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 801656c:	18bb      	adds	r3, r7, r2
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d11a      	bne.n	80165aa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016574:	187b      	adds	r3, r7, r1
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2220      	movs	r2, #32
 801657a:	4013      	ands	r3, r2
 801657c:	d015      	beq.n	80165aa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801657e:	183b      	adds	r3, r7, r0
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	2220      	movs	r2, #32
 8016584:	4013      	ands	r3, r2
 8016586:	d105      	bne.n	8016594 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016588:	193b      	adds	r3, r7, r4
 801658a:	681a      	ldr	r2, [r3, #0]
 801658c:	2380      	movs	r3, #128	@ 0x80
 801658e:	055b      	lsls	r3, r3, #21
 8016590:	4013      	ands	r3, r2
 8016592:	d00a      	beq.n	80165aa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016598:	2b00      	cmp	r3, #0
 801659a:	d100      	bne.n	801659e <HAL_UART_IRQHandler+0x6e>
 801659c:	e2fb      	b.n	8016b96 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80165a2:	687a      	ldr	r2, [r7, #4]
 80165a4:	0010      	movs	r0, r2
 80165a6:	4798      	blx	r3
      }
      return;
 80165a8:	e2f5      	b.n	8016b96 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80165aa:	2398      	movs	r3, #152	@ 0x98
 80165ac:	18fb      	adds	r3, r7, r3
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d100      	bne.n	80165b6 <HAL_UART_IRQHandler+0x86>
 80165b4:	e122      	b.n	80167fc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80165b6:	239c      	movs	r3, #156	@ 0x9c
 80165b8:	18fb      	adds	r3, r7, r3
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	4a8c      	ldr	r2, [pc, #560]	@ (80167f0 <HAL_UART_IRQHandler+0x2c0>)
 80165be:	4013      	ands	r3, r2
 80165c0:	d106      	bne.n	80165d0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80165c2:	23a0      	movs	r3, #160	@ 0xa0
 80165c4:	18fb      	adds	r3, r7, r3
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	4a8a      	ldr	r2, [pc, #552]	@ (80167f4 <HAL_UART_IRQHandler+0x2c4>)
 80165ca:	4013      	ands	r3, r2
 80165cc:	d100      	bne.n	80165d0 <HAL_UART_IRQHandler+0xa0>
 80165ce:	e115      	b.n	80167fc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80165d0:	23a4      	movs	r3, #164	@ 0xa4
 80165d2:	18fb      	adds	r3, r7, r3
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	2201      	movs	r2, #1
 80165d8:	4013      	ands	r3, r2
 80165da:	d012      	beq.n	8016602 <HAL_UART_IRQHandler+0xd2>
 80165dc:	23a0      	movs	r3, #160	@ 0xa0
 80165de:	18fb      	adds	r3, r7, r3
 80165e0:	681a      	ldr	r2, [r3, #0]
 80165e2:	2380      	movs	r3, #128	@ 0x80
 80165e4:	005b      	lsls	r3, r3, #1
 80165e6:	4013      	ands	r3, r2
 80165e8:	d00b      	beq.n	8016602 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	2201      	movs	r2, #1
 80165f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2290      	movs	r2, #144	@ 0x90
 80165f6:	589b      	ldr	r3, [r3, r2]
 80165f8:	2201      	movs	r2, #1
 80165fa:	431a      	orrs	r2, r3
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2190      	movs	r1, #144	@ 0x90
 8016600:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016602:	23a4      	movs	r3, #164	@ 0xa4
 8016604:	18fb      	adds	r3, r7, r3
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2202      	movs	r2, #2
 801660a:	4013      	ands	r3, r2
 801660c:	d011      	beq.n	8016632 <HAL_UART_IRQHandler+0x102>
 801660e:	239c      	movs	r3, #156	@ 0x9c
 8016610:	18fb      	adds	r3, r7, r3
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	2201      	movs	r2, #1
 8016616:	4013      	ands	r3, r2
 8016618:	d00b      	beq.n	8016632 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2202      	movs	r2, #2
 8016620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	2290      	movs	r2, #144	@ 0x90
 8016626:	589b      	ldr	r3, [r3, r2]
 8016628:	2204      	movs	r2, #4
 801662a:	431a      	orrs	r2, r3
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2190      	movs	r1, #144	@ 0x90
 8016630:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016632:	23a4      	movs	r3, #164	@ 0xa4
 8016634:	18fb      	adds	r3, r7, r3
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	2204      	movs	r2, #4
 801663a:	4013      	ands	r3, r2
 801663c:	d011      	beq.n	8016662 <HAL_UART_IRQHandler+0x132>
 801663e:	239c      	movs	r3, #156	@ 0x9c
 8016640:	18fb      	adds	r3, r7, r3
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	2201      	movs	r2, #1
 8016646:	4013      	ands	r3, r2
 8016648:	d00b      	beq.n	8016662 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	2204      	movs	r2, #4
 8016650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2290      	movs	r2, #144	@ 0x90
 8016656:	589b      	ldr	r3, [r3, r2]
 8016658:	2202      	movs	r2, #2
 801665a:	431a      	orrs	r2, r3
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2190      	movs	r1, #144	@ 0x90
 8016660:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016662:	23a4      	movs	r3, #164	@ 0xa4
 8016664:	18fb      	adds	r3, r7, r3
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2208      	movs	r2, #8
 801666a:	4013      	ands	r3, r2
 801666c:	d017      	beq.n	801669e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801666e:	23a0      	movs	r3, #160	@ 0xa0
 8016670:	18fb      	adds	r3, r7, r3
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	2220      	movs	r2, #32
 8016676:	4013      	ands	r3, r2
 8016678:	d105      	bne.n	8016686 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801667a:	239c      	movs	r3, #156	@ 0x9c
 801667c:	18fb      	adds	r3, r7, r3
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a5b      	ldr	r2, [pc, #364]	@ (80167f0 <HAL_UART_IRQHandler+0x2c0>)
 8016682:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8016684:	d00b      	beq.n	801669e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	2208      	movs	r2, #8
 801668c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2290      	movs	r2, #144	@ 0x90
 8016692:	589b      	ldr	r3, [r3, r2]
 8016694:	2208      	movs	r2, #8
 8016696:	431a      	orrs	r2, r3
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2190      	movs	r1, #144	@ 0x90
 801669c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801669e:	23a4      	movs	r3, #164	@ 0xa4
 80166a0:	18fb      	adds	r3, r7, r3
 80166a2:	681a      	ldr	r2, [r3, #0]
 80166a4:	2380      	movs	r3, #128	@ 0x80
 80166a6:	011b      	lsls	r3, r3, #4
 80166a8:	4013      	ands	r3, r2
 80166aa:	d013      	beq.n	80166d4 <HAL_UART_IRQHandler+0x1a4>
 80166ac:	23a0      	movs	r3, #160	@ 0xa0
 80166ae:	18fb      	adds	r3, r7, r3
 80166b0:	681a      	ldr	r2, [r3, #0]
 80166b2:	2380      	movs	r3, #128	@ 0x80
 80166b4:	04db      	lsls	r3, r3, #19
 80166b6:	4013      	ands	r3, r2
 80166b8:	d00c      	beq.n	80166d4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2280      	movs	r2, #128	@ 0x80
 80166c0:	0112      	lsls	r2, r2, #4
 80166c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2290      	movs	r2, #144	@ 0x90
 80166c8:	589b      	ldr	r3, [r3, r2]
 80166ca:	2220      	movs	r2, #32
 80166cc:	431a      	orrs	r2, r3
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	2190      	movs	r1, #144	@ 0x90
 80166d2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2290      	movs	r2, #144	@ 0x90
 80166d8:	589b      	ldr	r3, [r3, r2]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d100      	bne.n	80166e0 <HAL_UART_IRQHandler+0x1b0>
 80166de:	e25c      	b.n	8016b9a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80166e0:	23a4      	movs	r3, #164	@ 0xa4
 80166e2:	18fb      	adds	r3, r7, r3
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	2220      	movs	r2, #32
 80166e8:	4013      	ands	r3, r2
 80166ea:	d015      	beq.n	8016718 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80166ec:	23a0      	movs	r3, #160	@ 0xa0
 80166ee:	18fb      	adds	r3, r7, r3
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	2220      	movs	r2, #32
 80166f4:	4013      	ands	r3, r2
 80166f6:	d106      	bne.n	8016706 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80166f8:	239c      	movs	r3, #156	@ 0x9c
 80166fa:	18fb      	adds	r3, r7, r3
 80166fc:	681a      	ldr	r2, [r3, #0]
 80166fe:	2380      	movs	r3, #128	@ 0x80
 8016700:	055b      	lsls	r3, r3, #21
 8016702:	4013      	ands	r3, r2
 8016704:	d008      	beq.n	8016718 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801670a:	2b00      	cmp	r3, #0
 801670c:	d004      	beq.n	8016718 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016712:	687a      	ldr	r2, [r7, #4]
 8016714:	0010      	movs	r0, r2
 8016716:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2290      	movs	r2, #144	@ 0x90
 801671c:	589b      	ldr	r3, [r3, r2]
 801671e:	2194      	movs	r1, #148	@ 0x94
 8016720:	187a      	adds	r2, r7, r1
 8016722:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	689b      	ldr	r3, [r3, #8]
 801672a:	2240      	movs	r2, #64	@ 0x40
 801672c:	4013      	ands	r3, r2
 801672e:	2b40      	cmp	r3, #64	@ 0x40
 8016730:	d004      	beq.n	801673c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016732:	187b      	adds	r3, r7, r1
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2228      	movs	r2, #40	@ 0x28
 8016738:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801673a:	d04c      	beq.n	80167d6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	0018      	movs	r0, r3
 8016740:	f000 fef6 	bl	8017530 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	689b      	ldr	r3, [r3, #8]
 801674a:	2240      	movs	r2, #64	@ 0x40
 801674c:	4013      	ands	r3, r2
 801674e:	2b40      	cmp	r3, #64	@ 0x40
 8016750:	d13c      	bne.n	80167cc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016752:	f3ef 8310 	mrs	r3, PRIMASK
 8016756:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801675a:	2090      	movs	r0, #144	@ 0x90
 801675c:	183a      	adds	r2, r7, r0
 801675e:	6013      	str	r3, [r2, #0]
 8016760:	2301      	movs	r3, #1
 8016762:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016766:	f383 8810 	msr	PRIMASK, r3
}
 801676a:	46c0      	nop			@ (mov r8, r8)
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	689a      	ldr	r2, [r3, #8]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	2140      	movs	r1, #64	@ 0x40
 8016778:	438a      	bics	r2, r1
 801677a:	609a      	str	r2, [r3, #8]
 801677c:	183b      	adds	r3, r7, r0
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016784:	f383 8810 	msr	PRIMASK, r3
}
 8016788:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2280      	movs	r2, #128	@ 0x80
 801678e:	589b      	ldr	r3, [r3, r2]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d016      	beq.n	80167c2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2280      	movs	r2, #128	@ 0x80
 8016798:	589b      	ldr	r3, [r3, r2]
 801679a:	4a17      	ldr	r2, [pc, #92]	@ (80167f8 <HAL_UART_IRQHandler+0x2c8>)
 801679c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2280      	movs	r2, #128	@ 0x80
 80167a2:	589b      	ldr	r3, [r3, r2]
 80167a4:	0018      	movs	r0, r3
 80167a6:	f7f8 ffdf 	bl	800f768 <HAL_DMA_Abort_IT>
 80167aa:	1e03      	subs	r3, r0, #0
 80167ac:	d01c      	beq.n	80167e8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2280      	movs	r2, #128	@ 0x80
 80167b2:	589b      	ldr	r3, [r3, r2]
 80167b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	2180      	movs	r1, #128	@ 0x80
 80167ba:	5852      	ldr	r2, [r2, r1]
 80167bc:	0010      	movs	r0, r2
 80167be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167c0:	e012      	b.n	80167e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	0018      	movs	r0, r3
 80167c6:	f000 fa19 	bl	8016bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167ca:	e00d      	b.n	80167e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	0018      	movs	r0, r3
 80167d0:	f000 fa14 	bl	8016bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167d4:	e008      	b.n	80167e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	0018      	movs	r0, r3
 80167da:	f000 fa0f 	bl	8016bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2290      	movs	r2, #144	@ 0x90
 80167e2:	2100      	movs	r1, #0
 80167e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80167e6:	e1d8      	b.n	8016b9a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167e8:	46c0      	nop			@ (mov r8, r8)
    return;
 80167ea:	e1d6      	b.n	8016b9a <HAL_UART_IRQHandler+0x66a>
 80167ec:	0000080f 	.word	0x0000080f
 80167f0:	10000001 	.word	0x10000001
 80167f4:	04000120 	.word	0x04000120
 80167f8:	080178ad 	.word	0x080178ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016800:	2b01      	cmp	r3, #1
 8016802:	d000      	beq.n	8016806 <HAL_UART_IRQHandler+0x2d6>
 8016804:	e15d      	b.n	8016ac2 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016806:	23a4      	movs	r3, #164	@ 0xa4
 8016808:	18fb      	adds	r3, r7, r3
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	2210      	movs	r2, #16
 801680e:	4013      	ands	r3, r2
 8016810:	d100      	bne.n	8016814 <HAL_UART_IRQHandler+0x2e4>
 8016812:	e156      	b.n	8016ac2 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016814:	23a0      	movs	r3, #160	@ 0xa0
 8016816:	18fb      	adds	r3, r7, r3
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	2210      	movs	r2, #16
 801681c:	4013      	ands	r3, r2
 801681e:	d100      	bne.n	8016822 <HAL_UART_IRQHandler+0x2f2>
 8016820:	e14f      	b.n	8016ac2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	2210      	movs	r2, #16
 8016828:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	689b      	ldr	r3, [r3, #8]
 8016830:	2240      	movs	r2, #64	@ 0x40
 8016832:	4013      	ands	r3, r2
 8016834:	2b40      	cmp	r3, #64	@ 0x40
 8016836:	d000      	beq.n	801683a <HAL_UART_IRQHandler+0x30a>
 8016838:	e0c3      	b.n	80169c2 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2280      	movs	r2, #128	@ 0x80
 801683e:	589b      	ldr	r3, [r3, r2]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	685a      	ldr	r2, [r3, #4]
 8016844:	217e      	movs	r1, #126	@ 0x7e
 8016846:	187b      	adds	r3, r7, r1
 8016848:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801684a:	187b      	adds	r3, r7, r1
 801684c:	881b      	ldrh	r3, [r3, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d100      	bne.n	8016854 <HAL_UART_IRQHandler+0x324>
 8016852:	e097      	b.n	8016984 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	225c      	movs	r2, #92	@ 0x5c
 8016858:	5a9b      	ldrh	r3, [r3, r2]
 801685a:	187a      	adds	r2, r7, r1
 801685c:	8812      	ldrh	r2, [r2, #0]
 801685e:	429a      	cmp	r2, r3
 8016860:	d300      	bcc.n	8016864 <HAL_UART_IRQHandler+0x334>
 8016862:	e08f      	b.n	8016984 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	187a      	adds	r2, r7, r1
 8016868:	215e      	movs	r1, #94	@ 0x5e
 801686a:	8812      	ldrh	r2, [r2, #0]
 801686c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2280      	movs	r2, #128	@ 0x80
 8016872:	589b      	ldr	r3, [r3, r2]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	2220      	movs	r2, #32
 801687a:	4013      	ands	r3, r2
 801687c:	d170      	bne.n	8016960 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801687e:	f3ef 8310 	mrs	r3, PRIMASK
 8016882:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016886:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016888:	2301      	movs	r3, #1
 801688a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801688c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801688e:	f383 8810 	msr	PRIMASK, r3
}
 8016892:	46c0      	nop			@ (mov r8, r8)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	681a      	ldr	r2, [r3, #0]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	49c4      	ldr	r1, [pc, #784]	@ (8016bb0 <HAL_UART_IRQHandler+0x680>)
 80168a0:	400a      	ands	r2, r1
 80168a2:	601a      	str	r2, [r3, #0]
 80168a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80168a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168aa:	f383 8810 	msr	PRIMASK, r3
}
 80168ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80168b0:	f3ef 8310 	mrs	r3, PRIMASK
 80168b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80168b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80168b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80168ba:	2301      	movs	r3, #1
 80168bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80168c0:	f383 8810 	msr	PRIMASK, r3
}
 80168c4:	46c0      	nop			@ (mov r8, r8)
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	689a      	ldr	r2, [r3, #8]
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	2101      	movs	r1, #1
 80168d2:	438a      	bics	r2, r1
 80168d4:	609a      	str	r2, [r3, #8]
 80168d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80168d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80168dc:	f383 8810 	msr	PRIMASK, r3
}
 80168e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80168e2:	f3ef 8310 	mrs	r3, PRIMASK
 80168e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80168e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80168ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80168ec:	2301      	movs	r3, #1
 80168ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80168f2:	f383 8810 	msr	PRIMASK, r3
}
 80168f6:	46c0      	nop			@ (mov r8, r8)
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	689a      	ldr	r2, [r3, #8]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	2140      	movs	r1, #64	@ 0x40
 8016904:	438a      	bics	r2, r1
 8016906:	609a      	str	r2, [r3, #8]
 8016908:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801690a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801690c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801690e:	f383 8810 	msr	PRIMASK, r3
}
 8016912:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	228c      	movs	r2, #140	@ 0x8c
 8016918:	2120      	movs	r1, #32
 801691a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2200      	movs	r2, #0
 8016920:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016922:	f3ef 8310 	mrs	r3, PRIMASK
 8016926:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801692a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801692c:	2301      	movs	r3, #1
 801692e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016932:	f383 8810 	msr	PRIMASK, r3
}
 8016936:	46c0      	nop			@ (mov r8, r8)
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	681a      	ldr	r2, [r3, #0]
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	2110      	movs	r1, #16
 8016944:	438a      	bics	r2, r1
 8016946:	601a      	str	r2, [r3, #0]
 8016948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801694a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801694c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801694e:	f383 8810 	msr	PRIMASK, r3
}
 8016952:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2280      	movs	r2, #128	@ 0x80
 8016958:	589b      	ldr	r3, [r3, r2]
 801695a:	0018      	movs	r0, r3
 801695c:	f7f8 fea4 	bl	800f6a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2202      	movs	r2, #2
 8016964:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	225c      	movs	r2, #92	@ 0x5c
 801696a:	5a9a      	ldrh	r2, [r3, r2]
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	215e      	movs	r1, #94	@ 0x5e
 8016970:	5a5b      	ldrh	r3, [r3, r1]
 8016972:	b29b      	uxth	r3, r3
 8016974:	1ad3      	subs	r3, r2, r3
 8016976:	b29a      	uxth	r2, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	0011      	movs	r1, r2
 801697c:	0018      	movs	r0, r3
 801697e:	f000 f945 	bl	8016c0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8016982:	e10c      	b.n	8016b9e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	225c      	movs	r2, #92	@ 0x5c
 8016988:	5a9b      	ldrh	r3, [r3, r2]
 801698a:	227e      	movs	r2, #126	@ 0x7e
 801698c:	18ba      	adds	r2, r7, r2
 801698e:	8812      	ldrh	r2, [r2, #0]
 8016990:	429a      	cmp	r2, r3
 8016992:	d000      	beq.n	8016996 <HAL_UART_IRQHandler+0x466>
 8016994:	e103      	b.n	8016b9e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2280      	movs	r2, #128	@ 0x80
 801699a:	589b      	ldr	r3, [r3, r2]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2220      	movs	r2, #32
 80169a2:	4013      	ands	r3, r2
 80169a4:	2b20      	cmp	r3, #32
 80169a6:	d000      	beq.n	80169aa <HAL_UART_IRQHandler+0x47a>
 80169a8:	e0f9      	b.n	8016b9e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2202      	movs	r2, #2
 80169ae:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	225c      	movs	r2, #92	@ 0x5c
 80169b4:	5a9a      	ldrh	r2, [r3, r2]
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	0011      	movs	r1, r2
 80169ba:	0018      	movs	r0, r3
 80169bc:	f000 f926 	bl	8016c0c <HAL_UARTEx_RxEventCallback>
      return;
 80169c0:	e0ed      	b.n	8016b9e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	225c      	movs	r2, #92	@ 0x5c
 80169c6:	5a99      	ldrh	r1, [r3, r2]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	225e      	movs	r2, #94	@ 0x5e
 80169cc:	5a9b      	ldrh	r3, [r3, r2]
 80169ce:	b29a      	uxth	r2, r3
 80169d0:	208e      	movs	r0, #142	@ 0x8e
 80169d2:	183b      	adds	r3, r7, r0
 80169d4:	1a8a      	subs	r2, r1, r2
 80169d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	225e      	movs	r2, #94	@ 0x5e
 80169dc:	5a9b      	ldrh	r3, [r3, r2]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d100      	bne.n	80169e6 <HAL_UART_IRQHandler+0x4b6>
 80169e4:	e0dd      	b.n	8016ba2 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80169e6:	183b      	adds	r3, r7, r0
 80169e8:	881b      	ldrh	r3, [r3, #0]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d100      	bne.n	80169f0 <HAL_UART_IRQHandler+0x4c0>
 80169ee:	e0d8      	b.n	8016ba2 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80169f0:	f3ef 8310 	mrs	r3, PRIMASK
 80169f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80169f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80169f8:	2488      	movs	r4, #136	@ 0x88
 80169fa:	193a      	adds	r2, r7, r4
 80169fc:	6013      	str	r3, [r2, #0]
 80169fe:	2301      	movs	r3, #1
 8016a00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a02:	693b      	ldr	r3, [r7, #16]
 8016a04:	f383 8810 	msr	PRIMASK, r3
}
 8016a08:	46c0      	nop			@ (mov r8, r8)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	681a      	ldr	r2, [r3, #0]
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	4967      	ldr	r1, [pc, #412]	@ (8016bb4 <HAL_UART_IRQHandler+0x684>)
 8016a16:	400a      	ands	r2, r1
 8016a18:	601a      	str	r2, [r3, #0]
 8016a1a:	193b      	adds	r3, r7, r4
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	f383 8810 	msr	PRIMASK, r3
}
 8016a26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016a28:	f3ef 8310 	mrs	r3, PRIMASK
 8016a2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8016a2e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016a30:	2484      	movs	r4, #132	@ 0x84
 8016a32:	193a      	adds	r2, r7, r4
 8016a34:	6013      	str	r3, [r2, #0]
 8016a36:	2301      	movs	r3, #1
 8016a38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a3a:	69fb      	ldr	r3, [r7, #28]
 8016a3c:	f383 8810 	msr	PRIMASK, r3
}
 8016a40:	46c0      	nop			@ (mov r8, r8)
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	689a      	ldr	r2, [r3, #8]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	495a      	ldr	r1, [pc, #360]	@ (8016bb8 <HAL_UART_IRQHandler+0x688>)
 8016a4e:	400a      	ands	r2, r1
 8016a50:	609a      	str	r2, [r3, #8]
 8016a52:	193b      	adds	r3, r7, r4
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a58:	6a3b      	ldr	r3, [r7, #32]
 8016a5a:	f383 8810 	msr	PRIMASK, r3
}
 8016a5e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	228c      	movs	r2, #140	@ 0x8c
 8016a64:	2120      	movs	r1, #32
 8016a66:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2200      	movs	r2, #0
 8016a72:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8016a74:	f3ef 8310 	mrs	r3, PRIMASK
 8016a78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a7c:	2480      	movs	r4, #128	@ 0x80
 8016a7e:	193a      	adds	r2, r7, r4
 8016a80:	6013      	str	r3, [r2, #0]
 8016a82:	2301      	movs	r3, #1
 8016a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a88:	f383 8810 	msr	PRIMASK, r3
}
 8016a8c:	46c0      	nop			@ (mov r8, r8)
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	681a      	ldr	r2, [r3, #0]
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	2110      	movs	r1, #16
 8016a9a:	438a      	bics	r2, r1
 8016a9c:	601a      	str	r2, [r3, #0]
 8016a9e:	193b      	adds	r3, r7, r4
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016aa6:	f383 8810 	msr	PRIMASK, r3
}
 8016aaa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2202      	movs	r2, #2
 8016ab0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016ab2:	183b      	adds	r3, r7, r0
 8016ab4:	881a      	ldrh	r2, [r3, #0]
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	0011      	movs	r1, r2
 8016aba:	0018      	movs	r0, r3
 8016abc:	f000 f8a6 	bl	8016c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016ac0:	e06f      	b.n	8016ba2 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016ac2:	23a4      	movs	r3, #164	@ 0xa4
 8016ac4:	18fb      	adds	r3, r7, r3
 8016ac6:	681a      	ldr	r2, [r3, #0]
 8016ac8:	2380      	movs	r3, #128	@ 0x80
 8016aca:	035b      	lsls	r3, r3, #13
 8016acc:	4013      	ands	r3, r2
 8016ace:	d010      	beq.n	8016af2 <HAL_UART_IRQHandler+0x5c2>
 8016ad0:	239c      	movs	r3, #156	@ 0x9c
 8016ad2:	18fb      	adds	r3, r7, r3
 8016ad4:	681a      	ldr	r2, [r3, #0]
 8016ad6:	2380      	movs	r3, #128	@ 0x80
 8016ad8:	03db      	lsls	r3, r3, #15
 8016ada:	4013      	ands	r3, r2
 8016adc:	d009      	beq.n	8016af2 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	2280      	movs	r2, #128	@ 0x80
 8016ae4:	0352      	lsls	r2, r2, #13
 8016ae6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	0018      	movs	r0, r3
 8016aec:	f000 ff1d 	bl	801792a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016af0:	e05a      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016af2:	23a4      	movs	r3, #164	@ 0xa4
 8016af4:	18fb      	adds	r3, r7, r3
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2280      	movs	r2, #128	@ 0x80
 8016afa:	4013      	ands	r3, r2
 8016afc:	d016      	beq.n	8016b2c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8016afe:	23a0      	movs	r3, #160	@ 0xa0
 8016b00:	18fb      	adds	r3, r7, r3
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	2280      	movs	r2, #128	@ 0x80
 8016b06:	4013      	ands	r3, r2
 8016b08:	d106      	bne.n	8016b18 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016b0a:	239c      	movs	r3, #156	@ 0x9c
 8016b0c:	18fb      	adds	r3, r7, r3
 8016b0e:	681a      	ldr	r2, [r3, #0]
 8016b10:	2380      	movs	r3, #128	@ 0x80
 8016b12:	041b      	lsls	r3, r3, #16
 8016b14:	4013      	ands	r3, r2
 8016b16:	d009      	beq.n	8016b2c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d042      	beq.n	8016ba6 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b24:	687a      	ldr	r2, [r7, #4]
 8016b26:	0010      	movs	r0, r2
 8016b28:	4798      	blx	r3
    }
    return;
 8016b2a:	e03c      	b.n	8016ba6 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016b2c:	23a4      	movs	r3, #164	@ 0xa4
 8016b2e:	18fb      	adds	r3, r7, r3
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2240      	movs	r2, #64	@ 0x40
 8016b34:	4013      	ands	r3, r2
 8016b36:	d00a      	beq.n	8016b4e <HAL_UART_IRQHandler+0x61e>
 8016b38:	23a0      	movs	r3, #160	@ 0xa0
 8016b3a:	18fb      	adds	r3, r7, r3
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2240      	movs	r2, #64	@ 0x40
 8016b40:	4013      	ands	r3, r2
 8016b42:	d004      	beq.n	8016b4e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	0018      	movs	r0, r3
 8016b48:	f000 fec3 	bl	80178d2 <UART_EndTransmit_IT>
    return;
 8016b4c:	e02c      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016b4e:	23a4      	movs	r3, #164	@ 0xa4
 8016b50:	18fb      	adds	r3, r7, r3
 8016b52:	681a      	ldr	r2, [r3, #0]
 8016b54:	2380      	movs	r3, #128	@ 0x80
 8016b56:	041b      	lsls	r3, r3, #16
 8016b58:	4013      	ands	r3, r2
 8016b5a:	d00b      	beq.n	8016b74 <HAL_UART_IRQHandler+0x644>
 8016b5c:	23a0      	movs	r3, #160	@ 0xa0
 8016b5e:	18fb      	adds	r3, r7, r3
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	2380      	movs	r3, #128	@ 0x80
 8016b64:	05db      	lsls	r3, r3, #23
 8016b66:	4013      	ands	r3, r2
 8016b68:	d004      	beq.n	8016b74 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	0018      	movs	r0, r3
 8016b6e:	f000 feec 	bl	801794a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016b72:	e019      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016b74:	23a4      	movs	r3, #164	@ 0xa4
 8016b76:	18fb      	adds	r3, r7, r3
 8016b78:	681a      	ldr	r2, [r3, #0]
 8016b7a:	2380      	movs	r3, #128	@ 0x80
 8016b7c:	045b      	lsls	r3, r3, #17
 8016b7e:	4013      	ands	r3, r2
 8016b80:	d012      	beq.n	8016ba8 <HAL_UART_IRQHandler+0x678>
 8016b82:	23a0      	movs	r3, #160	@ 0xa0
 8016b84:	18fb      	adds	r3, r7, r3
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	da0d      	bge.n	8016ba8 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	0018      	movs	r0, r3
 8016b90:	f000 fed3 	bl	801793a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016b94:	e008      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
      return;
 8016b96:	46c0      	nop			@ (mov r8, r8)
 8016b98:	e006      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
    return;
 8016b9a:	46c0      	nop			@ (mov r8, r8)
 8016b9c:	e004      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
      return;
 8016b9e:	46c0      	nop			@ (mov r8, r8)
 8016ba0:	e002      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
      return;
 8016ba2:	46c0      	nop			@ (mov r8, r8)
 8016ba4:	e000      	b.n	8016ba8 <HAL_UART_IRQHandler+0x678>
    return;
 8016ba6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	b02a      	add	sp, #168	@ 0xa8
 8016bac:	bdb0      	pop	{r4, r5, r7, pc}
 8016bae:	46c0      	nop			@ (mov r8, r8)
 8016bb0:	fffffeff 	.word	0xfffffeff
 8016bb4:	fffffedf 	.word	0xfffffedf
 8016bb8:	effffffe 	.word	0xeffffffe

08016bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016bc4:	46c0      	nop			@ (mov r8, r8)
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	b002      	add	sp, #8
 8016bca:	bd80      	pop	{r7, pc}

08016bcc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8016bd4:	46c0      	nop			@ (mov r8, r8)
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	b002      	add	sp, #8
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b082      	sub	sp, #8
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8016be4:	46c0      	nop			@ (mov r8, r8)
 8016be6:	46bd      	mov	sp, r7
 8016be8:	b002      	add	sp, #8
 8016bea:	bd80      	pop	{r7, pc}

08016bec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8016bf4:	46c0      	nop			@ (mov r8, r8)
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	b002      	add	sp, #8
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016c04:	46c0      	nop			@ (mov r8, r8)
 8016c06:	46bd      	mov	sp, r7
 8016c08:	b002      	add	sp, #8
 8016c0a:	bd80      	pop	{r7, pc}

08016c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
 8016c14:	000a      	movs	r2, r1
 8016c16:	1cbb      	adds	r3, r7, #2
 8016c18:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016c1a:	46c0      	nop			@ (mov r8, r8)
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	b002      	add	sp, #8
 8016c20:	bd80      	pop	{r7, pc}
	...

08016c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016c24:	b5b0      	push	{r4, r5, r7, lr}
 8016c26:	b092      	sub	sp, #72	@ 0x48
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016c2c:	231f      	movs	r3, #31
 8016c2e:	2220      	movs	r2, #32
 8016c30:	189b      	adds	r3, r3, r2
 8016c32:	19db      	adds	r3, r3, r7
 8016c34:	2200      	movs	r2, #0
 8016c36:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8016c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	4ac8      	ldr	r2, [pc, #800]	@ (8016f60 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c40:	689a      	ldr	r2, [r3, #8]
 8016c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c44:	691b      	ldr	r3, [r3, #16]
 8016c46:	431a      	orrs	r2, r3
 8016c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c4a:	695b      	ldr	r3, [r3, #20]
 8016c4c:	431a      	orrs	r2, r3
 8016c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c50:	69db      	ldr	r3, [r3, #28]
 8016c52:	4313      	orrs	r3, r2
 8016c54:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	4ac1      	ldr	r2, [pc, #772]	@ (8016f64 <UART_SetConfig+0x340>)
 8016c5e:	4013      	ands	r3, r2
 8016c60:	0019      	movs	r1, r3
 8016c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c68:	430b      	orrs	r3, r1
 8016c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	685b      	ldr	r3, [r3, #4]
 8016c72:	4abd      	ldr	r2, [pc, #756]	@ (8016f68 <UART_SetConfig+0x344>)
 8016c74:	4013      	ands	r3, r2
 8016c76:	0018      	movs	r0, r3
 8016c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c7a:	68d9      	ldr	r1, [r3, #12]
 8016c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	0003      	movs	r3, r0
 8016c82:	430b      	orrs	r3, r1
 8016c84:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c88:	699b      	ldr	r3, [r3, #24]
 8016c8a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	4ab3      	ldr	r2, [pc, #716]	@ (8016f60 <UART_SetConfig+0x33c>)
 8016c92:	4293      	cmp	r3, r2
 8016c94:	d00e      	beq.n	8016cb4 <UART_SetConfig+0x90>
 8016c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	4ab4      	ldr	r2, [pc, #720]	@ (8016f6c <UART_SetConfig+0x348>)
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	d009      	beq.n	8016cb4 <UART_SetConfig+0x90>
 8016ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4ab2      	ldr	r2, [pc, #712]	@ (8016f70 <UART_SetConfig+0x34c>)
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d004      	beq.n	8016cb4 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cac:	6a1b      	ldr	r3, [r3, #32]
 8016cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	689b      	ldr	r3, [r3, #8]
 8016cba:	4aae      	ldr	r2, [pc, #696]	@ (8016f74 <UART_SetConfig+0x350>)
 8016cbc:	4013      	ands	r3, r2
 8016cbe:	0019      	movs	r1, r3
 8016cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cc2:	681a      	ldr	r2, [r3, #0]
 8016cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cc6:	430b      	orrs	r3, r1
 8016cc8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cd0:	220f      	movs	r2, #15
 8016cd2:	4393      	bics	r3, r2
 8016cd4:	0018      	movs	r0, r3
 8016cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cdc:	681a      	ldr	r2, [r3, #0]
 8016cde:	0003      	movs	r3, r0
 8016ce0:	430b      	orrs	r3, r1
 8016ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	4aa3      	ldr	r2, [pc, #652]	@ (8016f78 <UART_SetConfig+0x354>)
 8016cea:	4293      	cmp	r3, r2
 8016cec:	d102      	bne.n	8016cf4 <UART_SetConfig+0xd0>
 8016cee:	2301      	movs	r3, #1
 8016cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8016cf2:	e033      	b.n	8016d5c <UART_SetConfig+0x138>
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	4aa0      	ldr	r2, [pc, #640]	@ (8016f7c <UART_SetConfig+0x358>)
 8016cfa:	4293      	cmp	r3, r2
 8016cfc:	d102      	bne.n	8016d04 <UART_SetConfig+0xe0>
 8016cfe:	2302      	movs	r3, #2
 8016d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d02:	e02b      	b.n	8016d5c <UART_SetConfig+0x138>
 8016d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	4a9d      	ldr	r2, [pc, #628]	@ (8016f80 <UART_SetConfig+0x35c>)
 8016d0a:	4293      	cmp	r3, r2
 8016d0c:	d103      	bne.n	8016d16 <UART_SetConfig+0xf2>
 8016d0e:	2380      	movs	r3, #128	@ 0x80
 8016d10:	025b      	lsls	r3, r3, #9
 8016d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d14:	e022      	b.n	8016d5c <UART_SetConfig+0x138>
 8016d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4a9a      	ldr	r2, [pc, #616]	@ (8016f84 <UART_SetConfig+0x360>)
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d103      	bne.n	8016d28 <UART_SetConfig+0x104>
 8016d20:	2380      	movs	r3, #128	@ 0x80
 8016d22:	029b      	lsls	r3, r3, #10
 8016d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d26:	e019      	b.n	8016d5c <UART_SetConfig+0x138>
 8016d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	4a8c      	ldr	r2, [pc, #560]	@ (8016f60 <UART_SetConfig+0x33c>)
 8016d2e:	4293      	cmp	r3, r2
 8016d30:	d102      	bne.n	8016d38 <UART_SetConfig+0x114>
 8016d32:	2310      	movs	r3, #16
 8016d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d36:	e011      	b.n	8016d5c <UART_SetConfig+0x138>
 8016d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	4a8b      	ldr	r2, [pc, #556]	@ (8016f6c <UART_SetConfig+0x348>)
 8016d3e:	4293      	cmp	r3, r2
 8016d40:	d102      	bne.n	8016d48 <UART_SetConfig+0x124>
 8016d42:	2308      	movs	r3, #8
 8016d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d46:	e009      	b.n	8016d5c <UART_SetConfig+0x138>
 8016d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4a88      	ldr	r2, [pc, #544]	@ (8016f70 <UART_SetConfig+0x34c>)
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	d102      	bne.n	8016d58 <UART_SetConfig+0x134>
 8016d52:	2304      	movs	r3, #4
 8016d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8016d56:	e001      	b.n	8016d5c <UART_SetConfig+0x138>
 8016d58:	2300      	movs	r3, #0
 8016d5a:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	4a7f      	ldr	r2, [pc, #508]	@ (8016f60 <UART_SetConfig+0x33c>)
 8016d62:	4293      	cmp	r3, r2
 8016d64:	d00a      	beq.n	8016d7c <UART_SetConfig+0x158>
 8016d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	4a80      	ldr	r2, [pc, #512]	@ (8016f6c <UART_SetConfig+0x348>)
 8016d6c:	4293      	cmp	r3, r2
 8016d6e:	d005      	beq.n	8016d7c <UART_SetConfig+0x158>
 8016d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4a7e      	ldr	r2, [pc, #504]	@ (8016f70 <UART_SetConfig+0x34c>)
 8016d76:	4293      	cmp	r3, r2
 8016d78:	d000      	beq.n	8016d7c <UART_SetConfig+0x158>
 8016d7a:	e06f      	b.n	8016e5c <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8016d7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d7e:	0018      	movs	r0, r3
 8016d80:	f7fc ff3c 	bl	8013bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8016d84:	0003      	movs	r3, r0
 8016d86:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8016d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d100      	bne.n	8016d90 <UART_SetConfig+0x16c>
 8016d8e:	e103      	b.n	8016f98 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d94:	4b7c      	ldr	r3, [pc, #496]	@ (8016f88 <UART_SetConfig+0x364>)
 8016d96:	0052      	lsls	r2, r2, #1
 8016d98:	5ad3      	ldrh	r3, [r2, r3]
 8016d9a:	0019      	movs	r1, r3
 8016d9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016d9e:	f7e9 f9bb 	bl	8000118 <__udivsi3>
 8016da2:	0003      	movs	r3, r0
 8016da4:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da8:	685a      	ldr	r2, [r3, #4]
 8016daa:	0013      	movs	r3, r2
 8016dac:	005b      	lsls	r3, r3, #1
 8016dae:	189b      	adds	r3, r3, r2
 8016db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d305      	bcc.n	8016dc2 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d906      	bls.n	8016dd0 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8016dc2:	231f      	movs	r3, #31
 8016dc4:	2220      	movs	r2, #32
 8016dc6:	189b      	adds	r3, r3, r2
 8016dc8:	19db      	adds	r3, r3, r7
 8016dca:	2201      	movs	r2, #1
 8016dcc:	701a      	strb	r2, [r3, #0]
 8016dce:	e044      	b.n	8016e5a <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dd2:	61bb      	str	r3, [r7, #24]
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	61fb      	str	r3, [r7, #28]
 8016dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8016f88 <UART_SetConfig+0x364>)
 8016dde:	0052      	lsls	r2, r2, #1
 8016de0:	5ad3      	ldrh	r3, [r2, r3]
 8016de2:	613b      	str	r3, [r7, #16]
 8016de4:	2300      	movs	r3, #0
 8016de6:	617b      	str	r3, [r7, #20]
 8016de8:	693a      	ldr	r2, [r7, #16]
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	69b8      	ldr	r0, [r7, #24]
 8016dee:	69f9      	ldr	r1, [r7, #28]
 8016df0:	f7e9 fb26 	bl	8000440 <__aeabi_uldivmod>
 8016df4:	0002      	movs	r2, r0
 8016df6:	000b      	movs	r3, r1
 8016df8:	0e11      	lsrs	r1, r2, #24
 8016dfa:	021d      	lsls	r5, r3, #8
 8016dfc:	430d      	orrs	r5, r1
 8016dfe:	0214      	lsls	r4, r2, #8
 8016e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	085b      	lsrs	r3, r3, #1
 8016e06:	60bb      	str	r3, [r7, #8]
 8016e08:	2300      	movs	r3, #0
 8016e0a:	60fb      	str	r3, [r7, #12]
 8016e0c:	68b8      	ldr	r0, [r7, #8]
 8016e0e:	68f9      	ldr	r1, [r7, #12]
 8016e10:	1900      	adds	r0, r0, r4
 8016e12:	4169      	adcs	r1, r5
 8016e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e16:	685b      	ldr	r3, [r3, #4]
 8016e18:	603b      	str	r3, [r7, #0]
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	607b      	str	r3, [r7, #4]
 8016e1e:	683a      	ldr	r2, [r7, #0]
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f7e9 fb0d 	bl	8000440 <__aeabi_uldivmod>
 8016e26:	0002      	movs	r2, r0
 8016e28:	000b      	movs	r3, r1
 8016e2a:	0013      	movs	r3, r2
 8016e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016e30:	23c0      	movs	r3, #192	@ 0xc0
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d309      	bcc.n	8016e4c <UART_SetConfig+0x228>
 8016e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016e3a:	2380      	movs	r3, #128	@ 0x80
 8016e3c:	035b      	lsls	r3, r3, #13
 8016e3e:	429a      	cmp	r2, r3
 8016e40:	d204      	bcs.n	8016e4c <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8016e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016e48:	60da      	str	r2, [r3, #12]
 8016e4a:	e006      	b.n	8016e5a <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8016e4c:	231f      	movs	r3, #31
 8016e4e:	2220      	movs	r2, #32
 8016e50:	189b      	adds	r3, r3, r2
 8016e52:	19db      	adds	r3, r3, r7
 8016e54:	2201      	movs	r2, #1
 8016e56:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8016e58:	e09e      	b.n	8016f98 <UART_SetConfig+0x374>
 8016e5a:	e09d      	b.n	8016f98 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e5e:	69da      	ldr	r2, [r3, #28]
 8016e60:	2380      	movs	r3, #128	@ 0x80
 8016e62:	021b      	lsls	r3, r3, #8
 8016e64:	429a      	cmp	r2, r3
 8016e66:	d14c      	bne.n	8016f02 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8016e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e6a:	0018      	movs	r0, r3
 8016e6c:	f7fc fec6 	bl	8013bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8016e70:	0003      	movs	r3, r0
 8016e72:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d100      	bne.n	8016e7c <UART_SetConfig+0x258>
 8016e7a:	e08d      	b.n	8016f98 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e80:	4b41      	ldr	r3, [pc, #260]	@ (8016f88 <UART_SetConfig+0x364>)
 8016e82:	0052      	lsls	r2, r2, #1
 8016e84:	5ad3      	ldrh	r3, [r2, r3]
 8016e86:	0019      	movs	r1, r3
 8016e88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016e8a:	f7e9 f945 	bl	8000118 <__udivsi3>
 8016e8e:	0003      	movs	r3, r0
 8016e90:	005a      	lsls	r2, r3, #1
 8016e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	085b      	lsrs	r3, r3, #1
 8016e98:	18d2      	adds	r2, r2, r3
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e9c:	685b      	ldr	r3, [r3, #4]
 8016e9e:	0019      	movs	r1, r3
 8016ea0:	0010      	movs	r0, r2
 8016ea2:	f7e9 f939 	bl	8000118 <__udivsi3>
 8016ea6:	0003      	movs	r3, r0
 8016ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eac:	2b0f      	cmp	r3, #15
 8016eae:	d921      	bls.n	8016ef4 <UART_SetConfig+0x2d0>
 8016eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016eb2:	2380      	movs	r3, #128	@ 0x80
 8016eb4:	025b      	lsls	r3, r3, #9
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d21c      	bcs.n	8016ef4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ebc:	b29a      	uxth	r2, r3
 8016ebe:	2012      	movs	r0, #18
 8016ec0:	2420      	movs	r4, #32
 8016ec2:	1903      	adds	r3, r0, r4
 8016ec4:	19db      	adds	r3, r3, r7
 8016ec6:	210f      	movs	r1, #15
 8016ec8:	438a      	bics	r2, r1
 8016eca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ece:	085b      	lsrs	r3, r3, #1
 8016ed0:	b29b      	uxth	r3, r3
 8016ed2:	2207      	movs	r2, #7
 8016ed4:	4013      	ands	r3, r2
 8016ed6:	b299      	uxth	r1, r3
 8016ed8:	1903      	adds	r3, r0, r4
 8016eda:	19db      	adds	r3, r3, r7
 8016edc:	1902      	adds	r2, r0, r4
 8016ede:	19d2      	adds	r2, r2, r7
 8016ee0:	8812      	ldrh	r2, [r2, #0]
 8016ee2:	430a      	orrs	r2, r1
 8016ee4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	1902      	adds	r2, r0, r4
 8016eec:	19d2      	adds	r2, r2, r7
 8016eee:	8812      	ldrh	r2, [r2, #0]
 8016ef0:	60da      	str	r2, [r3, #12]
 8016ef2:	e051      	b.n	8016f98 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8016ef4:	231f      	movs	r3, #31
 8016ef6:	2220      	movs	r2, #32
 8016ef8:	189b      	adds	r3, r3, r2
 8016efa:	19db      	adds	r3, r3, r7
 8016efc:	2201      	movs	r2, #1
 8016efe:	701a      	strb	r2, [r3, #0]
 8016f00:	e04a      	b.n	8016f98 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8016f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f04:	0018      	movs	r0, r3
 8016f06:	f7fc fe79 	bl	8013bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8016f0a:	0003      	movs	r3, r0
 8016f0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8016f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d041      	beq.n	8016f98 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f18:	4b1b      	ldr	r3, [pc, #108]	@ (8016f88 <UART_SetConfig+0x364>)
 8016f1a:	0052      	lsls	r2, r2, #1
 8016f1c:	5ad3      	ldrh	r3, [r2, r3]
 8016f1e:	0019      	movs	r1, r3
 8016f20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016f22:	f7e9 f8f9 	bl	8000118 <__udivsi3>
 8016f26:	0003      	movs	r3, r0
 8016f28:	001a      	movs	r2, r3
 8016f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f2c:	685b      	ldr	r3, [r3, #4]
 8016f2e:	085b      	lsrs	r3, r3, #1
 8016f30:	18d2      	adds	r2, r2, r3
 8016f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	0019      	movs	r1, r3
 8016f38:	0010      	movs	r0, r2
 8016f3a:	f7e9 f8ed 	bl	8000118 <__udivsi3>
 8016f3e:	0003      	movs	r3, r0
 8016f40:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f44:	2b0f      	cmp	r3, #15
 8016f46:	d921      	bls.n	8016f8c <UART_SetConfig+0x368>
 8016f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016f4a:	2380      	movs	r3, #128	@ 0x80
 8016f4c:	025b      	lsls	r3, r3, #9
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d21c      	bcs.n	8016f8c <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f54:	b29a      	uxth	r2, r3
 8016f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	60da      	str	r2, [r3, #12]
 8016f5c:	e01c      	b.n	8016f98 <UART_SetConfig+0x374>
 8016f5e:	46c0      	nop			@ (mov r8, r8)
 8016f60:	40008000 	.word	0x40008000
 8016f64:	cfff69f3 	.word	0xcfff69f3
 8016f68:	ffffcfff 	.word	0xffffcfff
 8016f6c:	40008400 	.word	0x40008400
 8016f70:	40008c00 	.word	0x40008c00
 8016f74:	11fff4ff 	.word	0x11fff4ff
 8016f78:	40013800 	.word	0x40013800
 8016f7c:	40004400 	.word	0x40004400
 8016f80:	40004800 	.word	0x40004800
 8016f84:	40004c00 	.word	0x40004c00
 8016f88:	08017f3c 	.word	0x08017f3c
      }
      else
      {
        ret = HAL_ERROR;
 8016f8c:	231f      	movs	r3, #31
 8016f8e:	2220      	movs	r2, #32
 8016f90:	189b      	adds	r3, r3, r2
 8016f92:	19db      	adds	r3, r3, r7
 8016f94:	2201      	movs	r2, #1
 8016f96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f9a:	226a      	movs	r2, #106	@ 0x6a
 8016f9c:	2101      	movs	r1, #1
 8016f9e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8016fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa2:	2268      	movs	r2, #104	@ 0x68
 8016fa4:	2101      	movs	r1, #1
 8016fa6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016faa:	2200      	movs	r2, #0
 8016fac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8016fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8016fb4:	231f      	movs	r3, #31
 8016fb6:	2220      	movs	r2, #32
 8016fb8:	189b      	adds	r3, r3, r2
 8016fba:	19db      	adds	r3, r3, r7
 8016fbc:	781b      	ldrb	r3, [r3, #0]
}
 8016fbe:	0018      	movs	r0, r3
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	b012      	add	sp, #72	@ 0x48
 8016fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8016fc6:	46c0      	nop			@ (mov r8, r8)

08016fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fd4:	2208      	movs	r2, #8
 8016fd6:	4013      	ands	r3, r2
 8016fd8:	d00b      	beq.n	8016ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	4a4a      	ldr	r2, [pc, #296]	@ (801710c <UART_AdvFeatureConfig+0x144>)
 8016fe2:	4013      	ands	r3, r2
 8016fe4:	0019      	movs	r1, r3
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	430a      	orrs	r2, r1
 8016ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ff6:	2201      	movs	r2, #1
 8016ff8:	4013      	ands	r3, r2
 8016ffa:	d00b      	beq.n	8017014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	4a43      	ldr	r2, [pc, #268]	@ (8017110 <UART_AdvFeatureConfig+0x148>)
 8017004:	4013      	ands	r3, r2
 8017006:	0019      	movs	r1, r3
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	430a      	orrs	r2, r1
 8017012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017018:	2202      	movs	r2, #2
 801701a:	4013      	ands	r3, r2
 801701c:	d00b      	beq.n	8017036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	685b      	ldr	r3, [r3, #4]
 8017024:	4a3b      	ldr	r2, [pc, #236]	@ (8017114 <UART_AdvFeatureConfig+0x14c>)
 8017026:	4013      	ands	r3, r2
 8017028:	0019      	movs	r1, r3
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	430a      	orrs	r2, r1
 8017034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801703a:	2204      	movs	r2, #4
 801703c:	4013      	ands	r3, r2
 801703e:	d00b      	beq.n	8017058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	4a34      	ldr	r2, [pc, #208]	@ (8017118 <UART_AdvFeatureConfig+0x150>)
 8017048:	4013      	ands	r3, r2
 801704a:	0019      	movs	r1, r3
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	430a      	orrs	r2, r1
 8017056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801705c:	2210      	movs	r2, #16
 801705e:	4013      	ands	r3, r2
 8017060:	d00b      	beq.n	801707a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	689b      	ldr	r3, [r3, #8]
 8017068:	4a2c      	ldr	r2, [pc, #176]	@ (801711c <UART_AdvFeatureConfig+0x154>)
 801706a:	4013      	ands	r3, r2
 801706c:	0019      	movs	r1, r3
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	430a      	orrs	r2, r1
 8017078:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801707e:	2220      	movs	r2, #32
 8017080:	4013      	ands	r3, r2
 8017082:	d00b      	beq.n	801709c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	689b      	ldr	r3, [r3, #8]
 801708a:	4a25      	ldr	r2, [pc, #148]	@ (8017120 <UART_AdvFeatureConfig+0x158>)
 801708c:	4013      	ands	r3, r2
 801708e:	0019      	movs	r1, r3
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	430a      	orrs	r2, r1
 801709a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170a0:	2240      	movs	r2, #64	@ 0x40
 80170a2:	4013      	ands	r3, r2
 80170a4:	d01d      	beq.n	80170e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	4a1d      	ldr	r2, [pc, #116]	@ (8017124 <UART_AdvFeatureConfig+0x15c>)
 80170ae:	4013      	ands	r3, r2
 80170b0:	0019      	movs	r1, r3
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	430a      	orrs	r2, r1
 80170bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80170c2:	2380      	movs	r3, #128	@ 0x80
 80170c4:	035b      	lsls	r3, r3, #13
 80170c6:	429a      	cmp	r2, r3
 80170c8:	d10b      	bne.n	80170e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	4a15      	ldr	r2, [pc, #84]	@ (8017128 <UART_AdvFeatureConfig+0x160>)
 80170d2:	4013      	ands	r3, r2
 80170d4:	0019      	movs	r1, r3
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	430a      	orrs	r2, r1
 80170e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170e6:	2280      	movs	r2, #128	@ 0x80
 80170e8:	4013      	ands	r3, r2
 80170ea:	d00b      	beq.n	8017104 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	685b      	ldr	r3, [r3, #4]
 80170f2:	4a0e      	ldr	r2, [pc, #56]	@ (801712c <UART_AdvFeatureConfig+0x164>)
 80170f4:	4013      	ands	r3, r2
 80170f6:	0019      	movs	r1, r3
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	430a      	orrs	r2, r1
 8017102:	605a      	str	r2, [r3, #4]
  }
}
 8017104:	46c0      	nop			@ (mov r8, r8)
 8017106:	46bd      	mov	sp, r7
 8017108:	b002      	add	sp, #8
 801710a:	bd80      	pop	{r7, pc}
 801710c:	ffff7fff 	.word	0xffff7fff
 8017110:	fffdffff 	.word	0xfffdffff
 8017114:	fffeffff 	.word	0xfffeffff
 8017118:	fffbffff 	.word	0xfffbffff
 801711c:	ffffefff 	.word	0xffffefff
 8017120:	ffffdfff 	.word	0xffffdfff
 8017124:	ffefffff 	.word	0xffefffff
 8017128:	ff9fffff 	.word	0xff9fffff
 801712c:	fff7ffff 	.word	0xfff7ffff

08017130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b092      	sub	sp, #72	@ 0x48
 8017134:	af02      	add	r7, sp, #8
 8017136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2290      	movs	r2, #144	@ 0x90
 801713c:	2100      	movs	r1, #0
 801713e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017140:	f7f6 fe60 	bl	800de04 <HAL_GetTick>
 8017144:	0003      	movs	r3, r0
 8017146:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2208      	movs	r2, #8
 8017150:	4013      	ands	r3, r2
 8017152:	2b08      	cmp	r3, #8
 8017154:	d12d      	bne.n	80171b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017158:	2280      	movs	r2, #128	@ 0x80
 801715a:	0391      	lsls	r1, r2, #14
 801715c:	6878      	ldr	r0, [r7, #4]
 801715e:	4a47      	ldr	r2, [pc, #284]	@ (801727c <UART_CheckIdleState+0x14c>)
 8017160:	9200      	str	r2, [sp, #0]
 8017162:	2200      	movs	r2, #0
 8017164:	f000 f88e 	bl	8017284 <UART_WaitOnFlagUntilTimeout>
 8017168:	1e03      	subs	r3, r0, #0
 801716a:	d022      	beq.n	80171b2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801716c:	f3ef 8310 	mrs	r3, PRIMASK
 8017170:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8017174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017176:	2301      	movs	r3, #1
 8017178:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801717a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801717c:	f383 8810 	msr	PRIMASK, r3
}
 8017180:	46c0      	nop			@ (mov r8, r8)
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	681a      	ldr	r2, [r3, #0]
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	2180      	movs	r1, #128	@ 0x80
 801718e:	438a      	bics	r2, r1
 8017190:	601a      	str	r2, [r3, #0]
 8017192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017198:	f383 8810 	msr	PRIMASK, r3
}
 801719c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	2288      	movs	r2, #136	@ 0x88
 80171a2:	2120      	movs	r1, #32
 80171a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2284      	movs	r2, #132	@ 0x84
 80171aa:	2100      	movs	r1, #0
 80171ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80171ae:	2303      	movs	r3, #3
 80171b0:	e060      	b.n	8017274 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	2204      	movs	r2, #4
 80171ba:	4013      	ands	r3, r2
 80171bc:	2b04      	cmp	r3, #4
 80171be:	d146      	bne.n	801724e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80171c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171c2:	2280      	movs	r2, #128	@ 0x80
 80171c4:	03d1      	lsls	r1, r2, #15
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	4a2c      	ldr	r2, [pc, #176]	@ (801727c <UART_CheckIdleState+0x14c>)
 80171ca:	9200      	str	r2, [sp, #0]
 80171cc:	2200      	movs	r2, #0
 80171ce:	f000 f859 	bl	8017284 <UART_WaitOnFlagUntilTimeout>
 80171d2:	1e03      	subs	r3, r0, #0
 80171d4:	d03b      	beq.n	801724e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80171d6:	f3ef 8310 	mrs	r3, PRIMASK
 80171da:	60fb      	str	r3, [r7, #12]
  return(result);
 80171dc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80171de:	637b      	str	r3, [r7, #52]	@ 0x34
 80171e0:	2301      	movs	r3, #1
 80171e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171e4:	693b      	ldr	r3, [r7, #16]
 80171e6:	f383 8810 	msr	PRIMASK, r3
}
 80171ea:	46c0      	nop			@ (mov r8, r8)
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	4922      	ldr	r1, [pc, #136]	@ (8017280 <UART_CheckIdleState+0x150>)
 80171f8:	400a      	ands	r2, r1
 80171fa:	601a      	str	r2, [r3, #0]
 80171fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017200:	697b      	ldr	r3, [r7, #20]
 8017202:	f383 8810 	msr	PRIMASK, r3
}
 8017206:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017208:	f3ef 8310 	mrs	r3, PRIMASK
 801720c:	61bb      	str	r3, [r7, #24]
  return(result);
 801720e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017210:	633b      	str	r3, [r7, #48]	@ 0x30
 8017212:	2301      	movs	r3, #1
 8017214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	f383 8810 	msr	PRIMASK, r3
}
 801721c:	46c0      	nop			@ (mov r8, r8)
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	689a      	ldr	r2, [r3, #8]
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	2101      	movs	r1, #1
 801722a:	438a      	bics	r2, r1
 801722c:	609a      	str	r2, [r3, #8]
 801722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017230:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017232:	6a3b      	ldr	r3, [r7, #32]
 8017234:	f383 8810 	msr	PRIMASK, r3
}
 8017238:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	228c      	movs	r2, #140	@ 0x8c
 801723e:	2120      	movs	r1, #32
 8017240:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	2284      	movs	r2, #132	@ 0x84
 8017246:	2100      	movs	r1, #0
 8017248:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801724a:	2303      	movs	r3, #3
 801724c:	e012      	b.n	8017274 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	2288      	movs	r2, #136	@ 0x88
 8017252:	2120      	movs	r1, #32
 8017254:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	228c      	movs	r2, #140	@ 0x8c
 801725a:	2120      	movs	r1, #32
 801725c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	2200      	movs	r2, #0
 8017262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2200      	movs	r2, #0
 8017268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2284      	movs	r2, #132	@ 0x84
 801726e:	2100      	movs	r1, #0
 8017270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017272:	2300      	movs	r3, #0
}
 8017274:	0018      	movs	r0, r3
 8017276:	46bd      	mov	sp, r7
 8017278:	b010      	add	sp, #64	@ 0x40
 801727a:	bd80      	pop	{r7, pc}
 801727c:	01ffffff 	.word	0x01ffffff
 8017280:	fffffedf 	.word	0xfffffedf

08017284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b084      	sub	sp, #16
 8017288:	af00      	add	r7, sp, #0
 801728a:	60f8      	str	r0, [r7, #12]
 801728c:	60b9      	str	r1, [r7, #8]
 801728e:	603b      	str	r3, [r7, #0]
 8017290:	1dfb      	adds	r3, r7, #7
 8017292:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017294:	e051      	b.n	801733a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017296:	69bb      	ldr	r3, [r7, #24]
 8017298:	3301      	adds	r3, #1
 801729a:	d04e      	beq.n	801733a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801729c:	f7f6 fdb2 	bl	800de04 <HAL_GetTick>
 80172a0:	0002      	movs	r2, r0
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	1ad3      	subs	r3, r2, r3
 80172a6:	69ba      	ldr	r2, [r7, #24]
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d302      	bcc.n	80172b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80172ac:	69bb      	ldr	r3, [r7, #24]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d101      	bne.n	80172b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80172b2:	2303      	movs	r3, #3
 80172b4:	e051      	b.n	801735a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	2204      	movs	r2, #4
 80172be:	4013      	ands	r3, r2
 80172c0:	d03b      	beq.n	801733a <UART_WaitOnFlagUntilTimeout+0xb6>
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	2b80      	cmp	r3, #128	@ 0x80
 80172c6:	d038      	beq.n	801733a <UART_WaitOnFlagUntilTimeout+0xb6>
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	2b40      	cmp	r3, #64	@ 0x40
 80172cc:	d035      	beq.n	801733a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	69db      	ldr	r3, [r3, #28]
 80172d4:	2208      	movs	r2, #8
 80172d6:	4013      	ands	r3, r2
 80172d8:	2b08      	cmp	r3, #8
 80172da:	d111      	bne.n	8017300 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	2208      	movs	r2, #8
 80172e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	0018      	movs	r0, r3
 80172e8:	f000 f922 	bl	8017530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	2290      	movs	r2, #144	@ 0x90
 80172f0:	2108      	movs	r1, #8
 80172f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2284      	movs	r2, #132	@ 0x84
 80172f8:	2100      	movs	r1, #0
 80172fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80172fc:	2301      	movs	r3, #1
 80172fe:	e02c      	b.n	801735a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	69da      	ldr	r2, [r3, #28]
 8017306:	2380      	movs	r3, #128	@ 0x80
 8017308:	011b      	lsls	r3, r3, #4
 801730a:	401a      	ands	r2, r3
 801730c:	2380      	movs	r3, #128	@ 0x80
 801730e:	011b      	lsls	r3, r3, #4
 8017310:	429a      	cmp	r2, r3
 8017312:	d112      	bne.n	801733a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	2280      	movs	r2, #128	@ 0x80
 801731a:	0112      	lsls	r2, r2, #4
 801731c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	0018      	movs	r0, r3
 8017322:	f000 f905 	bl	8017530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	2290      	movs	r2, #144	@ 0x90
 801732a:	2120      	movs	r1, #32
 801732c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	2284      	movs	r2, #132	@ 0x84
 8017332:	2100      	movs	r1, #0
 8017334:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017336:	2303      	movs	r3, #3
 8017338:	e00f      	b.n	801735a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	69db      	ldr	r3, [r3, #28]
 8017340:	68ba      	ldr	r2, [r7, #8]
 8017342:	4013      	ands	r3, r2
 8017344:	68ba      	ldr	r2, [r7, #8]
 8017346:	1ad3      	subs	r3, r2, r3
 8017348:	425a      	negs	r2, r3
 801734a:	4153      	adcs	r3, r2
 801734c:	b2db      	uxtb	r3, r3
 801734e:	001a      	movs	r2, r3
 8017350:	1dfb      	adds	r3, r7, #7
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	429a      	cmp	r2, r3
 8017356:	d09e      	beq.n	8017296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017358:	2300      	movs	r3, #0
}
 801735a:	0018      	movs	r0, r3
 801735c:	46bd      	mov	sp, r7
 801735e:	b004      	add	sp, #16
 8017360:	bd80      	pop	{r7, pc}
	...

08017364 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b090      	sub	sp, #64	@ 0x40
 8017368:	af00      	add	r7, sp, #0
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	60b9      	str	r1, [r7, #8]
 801736e:	1dbb      	adds	r3, r7, #6
 8017370:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	68ba      	ldr	r2, [r7, #8]
 8017376:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	1dba      	adds	r2, r7, #6
 801737c:	215c      	movs	r1, #92	@ 0x5c
 801737e:	8812      	ldrh	r2, [r2, #0]
 8017380:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	2290      	movs	r2, #144	@ 0x90
 8017386:	2100      	movs	r1, #0
 8017388:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	228c      	movs	r2, #140	@ 0x8c
 801738e:	2122      	movs	r1, #34	@ 0x22
 8017390:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	2280      	movs	r2, #128	@ 0x80
 8017396:	589b      	ldr	r3, [r3, r2]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d02d      	beq.n	80173f8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	2280      	movs	r2, #128	@ 0x80
 80173a0:	589b      	ldr	r3, [r3, r2]
 80173a2:	4a40      	ldr	r2, [pc, #256]	@ (80174a4 <UART_Start_Receive_DMA+0x140>)
 80173a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	2280      	movs	r2, #128	@ 0x80
 80173aa:	589b      	ldr	r3, [r3, r2]
 80173ac:	4a3e      	ldr	r2, [pc, #248]	@ (80174a8 <UART_Start_Receive_DMA+0x144>)
 80173ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2280      	movs	r2, #128	@ 0x80
 80173b4:	589b      	ldr	r3, [r3, r2]
 80173b6:	4a3d      	ldr	r2, [pc, #244]	@ (80174ac <UART_Start_Receive_DMA+0x148>)
 80173b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	2280      	movs	r2, #128	@ 0x80
 80173be:	589b      	ldr	r3, [r3, r2]
 80173c0:	2200      	movs	r2, #0
 80173c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	2280      	movs	r2, #128	@ 0x80
 80173c8:	5898      	ldr	r0, [r3, r2]
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	3324      	adds	r3, #36	@ 0x24
 80173d0:	0019      	movs	r1, r3
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80173d6:	001a      	movs	r2, r3
 80173d8:	1dbb      	adds	r3, r7, #6
 80173da:	881b      	ldrh	r3, [r3, #0]
 80173dc:	f7f8 f8de 	bl	800f59c <HAL_DMA_Start_IT>
 80173e0:	1e03      	subs	r3, r0, #0
 80173e2:	d009      	beq.n	80173f8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	2290      	movs	r2, #144	@ 0x90
 80173e8:	2110      	movs	r1, #16
 80173ea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	228c      	movs	r2, #140	@ 0x8c
 80173f0:	2120      	movs	r1, #32
 80173f2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80173f4:	2301      	movs	r3, #1
 80173f6:	e050      	b.n	801749a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	691b      	ldr	r3, [r3, #16]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d019      	beq.n	8017434 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017400:	f3ef 8310 	mrs	r3, PRIMASK
 8017404:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801740a:	2301      	movs	r3, #1
 801740c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801740e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017410:	f383 8810 	msr	PRIMASK, r3
}
 8017414:	46c0      	nop			@ (mov r8, r8)
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	681a      	ldr	r2, [r3, #0]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	2180      	movs	r1, #128	@ 0x80
 8017422:	0049      	lsls	r1, r1, #1
 8017424:	430a      	orrs	r2, r1
 8017426:	601a      	str	r2, [r3, #0]
 8017428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801742a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801742e:	f383 8810 	msr	PRIMASK, r3
}
 8017432:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017434:	f3ef 8310 	mrs	r3, PRIMASK
 8017438:	613b      	str	r3, [r7, #16]
  return(result);
 801743a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801743c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801743e:	2301      	movs	r3, #1
 8017440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017442:	697b      	ldr	r3, [r7, #20]
 8017444:	f383 8810 	msr	PRIMASK, r3
}
 8017448:	46c0      	nop			@ (mov r8, r8)
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	689a      	ldr	r2, [r3, #8]
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	2101      	movs	r1, #1
 8017456:	430a      	orrs	r2, r1
 8017458:	609a      	str	r2, [r3, #8]
 801745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801745c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801745e:	69bb      	ldr	r3, [r7, #24]
 8017460:	f383 8810 	msr	PRIMASK, r3
}
 8017464:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017466:	f3ef 8310 	mrs	r3, PRIMASK
 801746a:	61fb      	str	r3, [r7, #28]
  return(result);
 801746c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801746e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017470:	2301      	movs	r3, #1
 8017472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017474:	6a3b      	ldr	r3, [r7, #32]
 8017476:	f383 8810 	msr	PRIMASK, r3
}
 801747a:	46c0      	nop			@ (mov r8, r8)
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	689a      	ldr	r2, [r3, #8]
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	2140      	movs	r1, #64	@ 0x40
 8017488:	430a      	orrs	r2, r1
 801748a:	609a      	str	r2, [r3, #8]
 801748c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801748e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017492:	f383 8810 	msr	PRIMASK, r3
}
 8017496:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017498:	2300      	movs	r3, #0
}
 801749a:	0018      	movs	r0, r3
 801749c:	46bd      	mov	sp, r7
 801749e:	b010      	add	sp, #64	@ 0x40
 80174a0:	bd80      	pop	{r7, pc}
 80174a2:	46c0      	nop			@ (mov r8, r8)
 80174a4:	080176b5 	.word	0x080176b5
 80174a8:	080177e5 	.word	0x080177e5
 80174ac:	08017827 	.word	0x08017827

080174b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b08a      	sub	sp, #40	@ 0x28
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80174b8:	f3ef 8310 	mrs	r3, PRIMASK
 80174bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80174be:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80174c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80174c2:	2301      	movs	r3, #1
 80174c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	f383 8810 	msr	PRIMASK, r3
}
 80174cc:	46c0      	nop			@ (mov r8, r8)
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	681a      	ldr	r2, [r3, #0]
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	21c0      	movs	r1, #192	@ 0xc0
 80174da:	438a      	bics	r2, r1
 80174dc:	601a      	str	r2, [r3, #0]
 80174de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174e2:	693b      	ldr	r3, [r7, #16]
 80174e4:	f383 8810 	msr	PRIMASK, r3
}
 80174e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80174ea:	f3ef 8310 	mrs	r3, PRIMASK
 80174ee:	617b      	str	r3, [r7, #20]
  return(result);
 80174f0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80174f2:	623b      	str	r3, [r7, #32]
 80174f4:	2301      	movs	r3, #1
 80174f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	f383 8810 	msr	PRIMASK, r3
}
 80174fe:	46c0      	nop			@ (mov r8, r8)
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	689a      	ldr	r2, [r3, #8]
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	4908      	ldr	r1, [pc, #32]	@ (801752c <UART_EndTxTransfer+0x7c>)
 801750c:	400a      	ands	r2, r1
 801750e:	609a      	str	r2, [r3, #8]
 8017510:	6a3b      	ldr	r3, [r7, #32]
 8017512:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017514:	69fb      	ldr	r3, [r7, #28]
 8017516:	f383 8810 	msr	PRIMASK, r3
}
 801751a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2288      	movs	r2, #136	@ 0x88
 8017520:	2120      	movs	r1, #32
 8017522:	5099      	str	r1, [r3, r2]
}
 8017524:	46c0      	nop			@ (mov r8, r8)
 8017526:	46bd      	mov	sp, r7
 8017528:	b00a      	add	sp, #40	@ 0x28
 801752a:	bd80      	pop	{r7, pc}
 801752c:	ff7fffff 	.word	0xff7fffff

08017530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b08e      	sub	sp, #56	@ 0x38
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017538:	f3ef 8310 	mrs	r3, PRIMASK
 801753c:	617b      	str	r3, [r7, #20]
  return(result);
 801753e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017540:	637b      	str	r3, [r7, #52]	@ 0x34
 8017542:	2301      	movs	r3, #1
 8017544:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017546:	69bb      	ldr	r3, [r7, #24]
 8017548:	f383 8810 	msr	PRIMASK, r3
}
 801754c:	46c0      	nop			@ (mov r8, r8)
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	4926      	ldr	r1, [pc, #152]	@ (80175f4 <UART_EndRxTransfer+0xc4>)
 801755a:	400a      	ands	r2, r1
 801755c:	601a      	str	r2, [r3, #0]
 801755e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017560:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017562:	69fb      	ldr	r3, [r7, #28]
 8017564:	f383 8810 	msr	PRIMASK, r3
}
 8017568:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801756a:	f3ef 8310 	mrs	r3, PRIMASK
 801756e:	623b      	str	r3, [r7, #32]
  return(result);
 8017570:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017572:	633b      	str	r3, [r7, #48]	@ 0x30
 8017574:	2301      	movs	r3, #1
 8017576:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801757a:	f383 8810 	msr	PRIMASK, r3
}
 801757e:	46c0      	nop			@ (mov r8, r8)
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	689a      	ldr	r2, [r3, #8]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	491b      	ldr	r1, [pc, #108]	@ (80175f8 <UART_EndRxTransfer+0xc8>)
 801758c:	400a      	ands	r2, r1
 801758e:	609a      	str	r2, [r3, #8]
 8017590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017592:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017596:	f383 8810 	msr	PRIMASK, r3
}
 801759a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d118      	bne.n	80175d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80175a4:	f3ef 8310 	mrs	r3, PRIMASK
 80175a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80175aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80175ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80175ae:	2301      	movs	r3, #1
 80175b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	f383 8810 	msr	PRIMASK, r3
}
 80175b8:	46c0      	nop			@ (mov r8, r8)
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	681a      	ldr	r2, [r3, #0]
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	2110      	movs	r1, #16
 80175c6:	438a      	bics	r2, r1
 80175c8:	601a      	str	r2, [r3, #0]
 80175ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	f383 8810 	msr	PRIMASK, r3
}
 80175d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	228c      	movs	r2, #140	@ 0x8c
 80175da:	2120      	movs	r1, #32
 80175dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2200      	movs	r2, #0
 80175e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2200      	movs	r2, #0
 80175e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80175ea:	46c0      	nop			@ (mov r8, r8)
 80175ec:	46bd      	mov	sp, r7
 80175ee:	b00e      	add	sp, #56	@ 0x38
 80175f0:	bd80      	pop	{r7, pc}
 80175f2:	46c0      	nop			@ (mov r8, r8)
 80175f4:	fffffedf 	.word	0xfffffedf
 80175f8:	effffffe 	.word	0xeffffffe

080175fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b08c      	sub	sp, #48	@ 0x30
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017608:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	2220      	movs	r2, #32
 8017612:	4013      	ands	r3, r2
 8017614:	d135      	bne.n	8017682 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8017616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017618:	2256      	movs	r2, #86	@ 0x56
 801761a:	2100      	movs	r1, #0
 801761c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801761e:	f3ef 8310 	mrs	r3, PRIMASK
 8017622:	60fb      	str	r3, [r7, #12]
  return(result);
 8017624:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017628:	2301      	movs	r3, #1
 801762a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	f383 8810 	msr	PRIMASK, r3
}
 8017632:	46c0      	nop			@ (mov r8, r8)
 8017634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	689a      	ldr	r2, [r3, #8]
 801763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	2180      	movs	r1, #128	@ 0x80
 8017640:	438a      	bics	r2, r1
 8017642:	609a      	str	r2, [r3, #8]
 8017644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	f383 8810 	msr	PRIMASK, r3
}
 801764e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017650:	f3ef 8310 	mrs	r3, PRIMASK
 8017654:	61bb      	str	r3, [r7, #24]
  return(result);
 8017656:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017658:	627b      	str	r3, [r7, #36]	@ 0x24
 801765a:	2301      	movs	r3, #1
 801765c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801765e:	69fb      	ldr	r3, [r7, #28]
 8017660:	f383 8810 	msr	PRIMASK, r3
}
 8017664:	46c0      	nop			@ (mov r8, r8)
 8017666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2140      	movs	r1, #64	@ 0x40
 8017672:	430a      	orrs	r2, r1
 8017674:	601a      	str	r2, [r3, #0]
 8017676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017678:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801767a:	6a3b      	ldr	r3, [r7, #32]
 801767c:	f383 8810 	msr	PRIMASK, r3
}
 8017680:	e004      	b.n	801768c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8017682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017684:	0018      	movs	r0, r3
 8017686:	f7ff fa99 	bl	8016bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801768a:	46c0      	nop			@ (mov r8, r8)
 801768c:	46c0      	nop			@ (mov r8, r8)
 801768e:	46bd      	mov	sp, r7
 8017690:	b00c      	add	sp, #48	@ 0x30
 8017692:	bd80      	pop	{r7, pc}

08017694 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b084      	sub	sp, #16
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	0018      	movs	r0, r3
 80176a6:	f7ff fa91 	bl	8016bcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80176aa:	46c0      	nop			@ (mov r8, r8)
 80176ac:	46bd      	mov	sp, r7
 80176ae:	b004      	add	sp, #16
 80176b0:	bd80      	pop	{r7, pc}
	...

080176b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b094      	sub	sp, #80	@ 0x50
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	2220      	movs	r2, #32
 80176ca:	4013      	ands	r3, r2
 80176cc:	d16f      	bne.n	80177ae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80176ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176d0:	225e      	movs	r2, #94	@ 0x5e
 80176d2:	2100      	movs	r1, #0
 80176d4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80176d6:	f3ef 8310 	mrs	r3, PRIMASK
 80176da:	61bb      	str	r3, [r7, #24]
  return(result);
 80176dc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80176de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176e0:	2301      	movs	r3, #1
 80176e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176e4:	69fb      	ldr	r3, [r7, #28]
 80176e6:	f383 8810 	msr	PRIMASK, r3
}
 80176ea:	46c0      	nop			@ (mov r8, r8)
 80176ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	681a      	ldr	r2, [r3, #0]
 80176f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	493a      	ldr	r1, [pc, #232]	@ (80177e0 <UART_DMAReceiveCplt+0x12c>)
 80176f8:	400a      	ands	r2, r1
 80176fa:	601a      	str	r2, [r3, #0]
 80176fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80176fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017700:	6a3b      	ldr	r3, [r7, #32]
 8017702:	f383 8810 	msr	PRIMASK, r3
}
 8017706:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017708:	f3ef 8310 	mrs	r3, PRIMASK
 801770c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017710:	647b      	str	r3, [r7, #68]	@ 0x44
 8017712:	2301      	movs	r3, #1
 8017714:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017718:	f383 8810 	msr	PRIMASK, r3
}
 801771c:	46c0      	nop			@ (mov r8, r8)
 801771e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	689a      	ldr	r2, [r3, #8]
 8017724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	2101      	movs	r1, #1
 801772a:	438a      	bics	r2, r1
 801772c:	609a      	str	r2, [r3, #8]
 801772e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017734:	f383 8810 	msr	PRIMASK, r3
}
 8017738:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801773a:	f3ef 8310 	mrs	r3, PRIMASK
 801773e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017742:	643b      	str	r3, [r7, #64]	@ 0x40
 8017744:	2301      	movs	r3, #1
 8017746:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801774a:	f383 8810 	msr	PRIMASK, r3
}
 801774e:	46c0      	nop			@ (mov r8, r8)
 8017750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	689a      	ldr	r2, [r3, #8]
 8017756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	2140      	movs	r1, #64	@ 0x40
 801775c:	438a      	bics	r2, r1
 801775e:	609a      	str	r2, [r3, #8]
 8017760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017762:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017766:	f383 8810 	msr	PRIMASK, r3
}
 801776a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801776c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801776e:	228c      	movs	r2, #140	@ 0x8c
 8017770:	2120      	movs	r1, #32
 8017772:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017778:	2b01      	cmp	r3, #1
 801777a:	d118      	bne.n	80177ae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801777c:	f3ef 8310 	mrs	r3, PRIMASK
 8017780:	60fb      	str	r3, [r7, #12]
  return(result);
 8017782:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017786:	2301      	movs	r3, #1
 8017788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801778a:	693b      	ldr	r3, [r7, #16]
 801778c:	f383 8810 	msr	PRIMASK, r3
}
 8017790:	46c0      	nop			@ (mov r8, r8)
 8017792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	681a      	ldr	r2, [r3, #0]
 8017798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	2110      	movs	r1, #16
 801779e:	438a      	bics	r2, r1
 80177a0:	601a      	str	r2, [r3, #0]
 80177a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80177a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177a6:	697b      	ldr	r3, [r7, #20]
 80177a8:	f383 8810 	msr	PRIMASK, r3
}
 80177ac:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80177ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177b0:	2200      	movs	r2, #0
 80177b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80177b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	d108      	bne.n	80177ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80177bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177be:	225c      	movs	r2, #92	@ 0x5c
 80177c0:	5a9a      	ldrh	r2, [r3, r2]
 80177c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177c4:	0011      	movs	r1, r2
 80177c6:	0018      	movs	r0, r3
 80177c8:	f7ff fa20 	bl	8016c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80177cc:	e003      	b.n	80177d6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80177ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177d0:	0018      	movs	r0, r3
 80177d2:	f7ff fa03 	bl	8016bdc <HAL_UART_RxCpltCallback>
}
 80177d6:	46c0      	nop			@ (mov r8, r8)
 80177d8:	46bd      	mov	sp, r7
 80177da:	b014      	add	sp, #80	@ 0x50
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	46c0      	nop			@ (mov r8, r8)
 80177e0:	fffffeff 	.word	0xfffffeff

080177e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	2201      	movs	r2, #1
 80177f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	d10a      	bne.n	8017816 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	225c      	movs	r2, #92	@ 0x5c
 8017804:	5a9b      	ldrh	r3, [r3, r2]
 8017806:	085b      	lsrs	r3, r3, #1
 8017808:	b29a      	uxth	r2, r3
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	0011      	movs	r1, r2
 801780e:	0018      	movs	r0, r3
 8017810:	f7ff f9fc 	bl	8016c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017814:	e003      	b.n	801781e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	0018      	movs	r0, r3
 801781a:	f7ff f9e7 	bl	8016bec <HAL_UART_RxHalfCpltCallback>
}
 801781e:	46c0      	nop			@ (mov r8, r8)
 8017820:	46bd      	mov	sp, r7
 8017822:	b004      	add	sp, #16
 8017824:	bd80      	pop	{r7, pc}

08017826 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017826:	b580      	push	{r7, lr}
 8017828:	b086      	sub	sp, #24
 801782a:	af00      	add	r7, sp, #0
 801782c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017832:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	2288      	movs	r2, #136	@ 0x88
 8017838:	589b      	ldr	r3, [r3, r2]
 801783a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	228c      	movs	r2, #140	@ 0x8c
 8017840:	589b      	ldr	r3, [r3, r2]
 8017842:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017844:	697b      	ldr	r3, [r7, #20]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	689b      	ldr	r3, [r3, #8]
 801784a:	2280      	movs	r2, #128	@ 0x80
 801784c:	4013      	ands	r3, r2
 801784e:	2b80      	cmp	r3, #128	@ 0x80
 8017850:	d10a      	bne.n	8017868 <UART_DMAError+0x42>
 8017852:	693b      	ldr	r3, [r7, #16]
 8017854:	2b21      	cmp	r3, #33	@ 0x21
 8017856:	d107      	bne.n	8017868 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8017858:	697b      	ldr	r3, [r7, #20]
 801785a:	2256      	movs	r2, #86	@ 0x56
 801785c:	2100      	movs	r1, #0
 801785e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017860:	697b      	ldr	r3, [r7, #20]
 8017862:	0018      	movs	r0, r3
 8017864:	f7ff fe24 	bl	80174b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	689b      	ldr	r3, [r3, #8]
 801786e:	2240      	movs	r2, #64	@ 0x40
 8017870:	4013      	ands	r3, r2
 8017872:	2b40      	cmp	r3, #64	@ 0x40
 8017874:	d10a      	bne.n	801788c <UART_DMAError+0x66>
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	2b22      	cmp	r3, #34	@ 0x22
 801787a:	d107      	bne.n	801788c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801787c:	697b      	ldr	r3, [r7, #20]
 801787e:	225e      	movs	r2, #94	@ 0x5e
 8017880:	2100      	movs	r1, #0
 8017882:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	0018      	movs	r0, r3
 8017888:	f7ff fe52 	bl	8017530 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	2290      	movs	r2, #144	@ 0x90
 8017890:	589b      	ldr	r3, [r3, r2]
 8017892:	2210      	movs	r2, #16
 8017894:	431a      	orrs	r2, r3
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	2190      	movs	r1, #144	@ 0x90
 801789a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801789c:	697b      	ldr	r3, [r7, #20]
 801789e:	0018      	movs	r0, r3
 80178a0:	f7ff f9ac 	bl	8016bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80178a4:	46c0      	nop			@ (mov r8, r8)
 80178a6:	46bd      	mov	sp, r7
 80178a8:	b006      	add	sp, #24
 80178aa:	bd80      	pop	{r7, pc}

080178ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b084      	sub	sp, #16
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	225e      	movs	r2, #94	@ 0x5e
 80178be:	2100      	movs	r1, #0
 80178c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	0018      	movs	r0, r3
 80178c6:	f7ff f999 	bl	8016bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80178ca:	46c0      	nop			@ (mov r8, r8)
 80178cc:	46bd      	mov	sp, r7
 80178ce:	b004      	add	sp, #16
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b086      	sub	sp, #24
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80178da:	f3ef 8310 	mrs	r3, PRIMASK
 80178de:	60bb      	str	r3, [r7, #8]
  return(result);
 80178e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80178e2:	617b      	str	r3, [r7, #20]
 80178e4:	2301      	movs	r3, #1
 80178e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f383 8810 	msr	PRIMASK, r3
}
 80178ee:	46c0      	nop			@ (mov r8, r8)
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	2140      	movs	r1, #64	@ 0x40
 80178fc:	438a      	bics	r2, r1
 80178fe:	601a      	str	r2, [r3, #0]
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	f383 8810 	msr	PRIMASK, r3
}
 801790a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	2288      	movs	r2, #136	@ 0x88
 8017910:	2120      	movs	r1, #32
 8017912:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2200      	movs	r2, #0
 8017918:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	0018      	movs	r0, r3
 801791e:	f7ff f94d 	bl	8016bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017922:	46c0      	nop			@ (mov r8, r8)
 8017924:	46bd      	mov	sp, r7
 8017926:	b006      	add	sp, #24
 8017928:	bd80      	pop	{r7, pc}

0801792a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801792a:	b580      	push	{r7, lr}
 801792c:	b082      	sub	sp, #8
 801792e:	af00      	add	r7, sp, #0
 8017930:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017932:	46c0      	nop			@ (mov r8, r8)
 8017934:	46bd      	mov	sp, r7
 8017936:	b002      	add	sp, #8
 8017938:	bd80      	pop	{r7, pc}

0801793a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801793a:	b580      	push	{r7, lr}
 801793c:	b082      	sub	sp, #8
 801793e:	af00      	add	r7, sp, #0
 8017940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8017942:	46c0      	nop			@ (mov r8, r8)
 8017944:	46bd      	mov	sp, r7
 8017946:	b002      	add	sp, #8
 8017948:	bd80      	pop	{r7, pc}

0801794a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801794a:	b580      	push	{r7, lr}
 801794c:	b082      	sub	sp, #8
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8017952:	46c0      	nop			@ (mov r8, r8)
 8017954:	46bd      	mov	sp, r7
 8017956:	b002      	add	sp, #8
 8017958:	bd80      	pop	{r7, pc}
	...

0801795c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b084      	sub	sp, #16
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2284      	movs	r2, #132	@ 0x84
 8017968:	5c9b      	ldrb	r3, [r3, r2]
 801796a:	2b01      	cmp	r3, #1
 801796c:	d101      	bne.n	8017972 <HAL_UARTEx_DisableFifoMode+0x16>
 801796e:	2302      	movs	r3, #2
 8017970:	e027      	b.n	80179c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2284      	movs	r2, #132	@ 0x84
 8017976:	2101      	movs	r1, #1
 8017978:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	2288      	movs	r2, #136	@ 0x88
 801797e:	2124      	movs	r1, #36	@ 0x24
 8017980:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	681a      	ldr	r2, [r3, #0]
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	2101      	movs	r1, #1
 8017996:	438a      	bics	r2, r1
 8017998:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	4a0b      	ldr	r2, [pc, #44]	@ (80179cc <HAL_UARTEx_DisableFifoMode+0x70>)
 801799e:	4013      	ands	r3, r2
 80179a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	2200      	movs	r2, #0
 80179a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	68fa      	ldr	r2, [r7, #12]
 80179ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2288      	movs	r2, #136	@ 0x88
 80179b4:	2120      	movs	r1, #32
 80179b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2284      	movs	r2, #132	@ 0x84
 80179bc:	2100      	movs	r1, #0
 80179be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80179c0:	2300      	movs	r3, #0
}
 80179c2:	0018      	movs	r0, r3
 80179c4:	46bd      	mov	sp, r7
 80179c6:	b004      	add	sp, #16
 80179c8:	bd80      	pop	{r7, pc}
 80179ca:	46c0      	nop			@ (mov r8, r8)
 80179cc:	dfffffff 	.word	0xdfffffff

080179d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b084      	sub	sp, #16
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
 80179d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	2284      	movs	r2, #132	@ 0x84
 80179de:	5c9b      	ldrb	r3, [r3, r2]
 80179e0:	2b01      	cmp	r3, #1
 80179e2:	d101      	bne.n	80179e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80179e4:	2302      	movs	r3, #2
 80179e6:	e02e      	b.n	8017a46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2284      	movs	r2, #132	@ 0x84
 80179ec:	2101      	movs	r1, #1
 80179ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2288      	movs	r2, #136	@ 0x88
 80179f4:	2124      	movs	r1, #36	@ 0x24
 80179f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	681a      	ldr	r2, [r3, #0]
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	2101      	movs	r1, #1
 8017a0c:	438a      	bics	r2, r1
 8017a0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	689b      	ldr	r3, [r3, #8]
 8017a16:	00db      	lsls	r3, r3, #3
 8017a18:	08d9      	lsrs	r1, r3, #3
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	683a      	ldr	r2, [r7, #0]
 8017a20:	430a      	orrs	r2, r1
 8017a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	0018      	movs	r0, r3
 8017a28:	f000 f854 	bl	8017ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	68fa      	ldr	r2, [r7, #12]
 8017a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2288      	movs	r2, #136	@ 0x88
 8017a38:	2120      	movs	r1, #32
 8017a3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2284      	movs	r2, #132	@ 0x84
 8017a40:	2100      	movs	r1, #0
 8017a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017a44:	2300      	movs	r3, #0
}
 8017a46:	0018      	movs	r0, r3
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	b004      	add	sp, #16
 8017a4c:	bd80      	pop	{r7, pc}
	...

08017a50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b084      	sub	sp, #16
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2284      	movs	r2, #132	@ 0x84
 8017a5e:	5c9b      	ldrb	r3, [r3, r2]
 8017a60:	2b01      	cmp	r3, #1
 8017a62:	d101      	bne.n	8017a68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017a64:	2302      	movs	r3, #2
 8017a66:	e02f      	b.n	8017ac8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2284      	movs	r2, #132	@ 0x84
 8017a6c:	2101      	movs	r1, #1
 8017a6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2288      	movs	r2, #136	@ 0x88
 8017a74:	2124      	movs	r1, #36	@ 0x24
 8017a76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	2101      	movs	r1, #1
 8017a8c:	438a      	bics	r2, r1
 8017a8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	689b      	ldr	r3, [r3, #8]
 8017a96:	4a0e      	ldr	r2, [pc, #56]	@ (8017ad0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8017a98:	4013      	ands	r3, r2
 8017a9a:	0019      	movs	r1, r3
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	683a      	ldr	r2, [r7, #0]
 8017aa2:	430a      	orrs	r2, r1
 8017aa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	0018      	movs	r0, r3
 8017aaa:	f000 f813 	bl	8017ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	68fa      	ldr	r2, [r7, #12]
 8017ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2288      	movs	r2, #136	@ 0x88
 8017aba:	2120      	movs	r1, #32
 8017abc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	2284      	movs	r2, #132	@ 0x84
 8017ac2:	2100      	movs	r1, #0
 8017ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017ac6:	2300      	movs	r3, #0
}
 8017ac8:	0018      	movs	r0, r3
 8017aca:	46bd      	mov	sp, r7
 8017acc:	b004      	add	sp, #16
 8017ace:	bd80      	pop	{r7, pc}
 8017ad0:	f1ffffff 	.word	0xf1ffffff

08017ad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ad6:	b085      	sub	sp, #20
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d108      	bne.n	8017af6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	226a      	movs	r2, #106	@ 0x6a
 8017ae8:	2101      	movs	r1, #1
 8017aea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2268      	movs	r2, #104	@ 0x68
 8017af0:	2101      	movs	r1, #1
 8017af2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017af4:	e043      	b.n	8017b7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8017af6:	260f      	movs	r6, #15
 8017af8:	19bb      	adds	r3, r7, r6
 8017afa:	2208      	movs	r2, #8
 8017afc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8017afe:	200e      	movs	r0, #14
 8017b00:	183b      	adds	r3, r7, r0
 8017b02:	2208      	movs	r2, #8
 8017b04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	689b      	ldr	r3, [r3, #8]
 8017b0c:	0e5b      	lsrs	r3, r3, #25
 8017b0e:	b2da      	uxtb	r2, r3
 8017b10:	240d      	movs	r4, #13
 8017b12:	193b      	adds	r3, r7, r4
 8017b14:	2107      	movs	r1, #7
 8017b16:	400a      	ands	r2, r1
 8017b18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	689b      	ldr	r3, [r3, #8]
 8017b20:	0f5b      	lsrs	r3, r3, #29
 8017b22:	b2da      	uxtb	r2, r3
 8017b24:	250c      	movs	r5, #12
 8017b26:	197b      	adds	r3, r7, r5
 8017b28:	2107      	movs	r1, #7
 8017b2a:	400a      	ands	r2, r1
 8017b2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017b2e:	183b      	adds	r3, r7, r0
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	197a      	adds	r2, r7, r5
 8017b34:	7812      	ldrb	r2, [r2, #0]
 8017b36:	4914      	ldr	r1, [pc, #80]	@ (8017b88 <UARTEx_SetNbDataToProcess+0xb4>)
 8017b38:	5c8a      	ldrb	r2, [r1, r2]
 8017b3a:	435a      	muls	r2, r3
 8017b3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8017b3e:	197b      	adds	r3, r7, r5
 8017b40:	781b      	ldrb	r3, [r3, #0]
 8017b42:	4a12      	ldr	r2, [pc, #72]	@ (8017b8c <UARTEx_SetNbDataToProcess+0xb8>)
 8017b44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017b46:	0019      	movs	r1, r3
 8017b48:	f7e8 fb70 	bl	800022c <__divsi3>
 8017b4c:	0003      	movs	r3, r0
 8017b4e:	b299      	uxth	r1, r3
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	226a      	movs	r2, #106	@ 0x6a
 8017b54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017b56:	19bb      	adds	r3, r7, r6
 8017b58:	781b      	ldrb	r3, [r3, #0]
 8017b5a:	193a      	adds	r2, r7, r4
 8017b5c:	7812      	ldrb	r2, [r2, #0]
 8017b5e:	490a      	ldr	r1, [pc, #40]	@ (8017b88 <UARTEx_SetNbDataToProcess+0xb4>)
 8017b60:	5c8a      	ldrb	r2, [r1, r2]
 8017b62:	435a      	muls	r2, r3
 8017b64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8017b66:	193b      	adds	r3, r7, r4
 8017b68:	781b      	ldrb	r3, [r3, #0]
 8017b6a:	4a08      	ldr	r2, [pc, #32]	@ (8017b8c <UARTEx_SetNbDataToProcess+0xb8>)
 8017b6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017b6e:	0019      	movs	r1, r3
 8017b70:	f7e8 fb5c 	bl	800022c <__divsi3>
 8017b74:	0003      	movs	r3, r0
 8017b76:	b299      	uxth	r1, r3
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2268      	movs	r2, #104	@ 0x68
 8017b7c:	5299      	strh	r1, [r3, r2]
}
 8017b7e:	46c0      	nop			@ (mov r8, r8)
 8017b80:	46bd      	mov	sp, r7
 8017b82:	b005      	add	sp, #20
 8017b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b86:	46c0      	nop			@ (mov r8, r8)
 8017b88:	08017f54 	.word	0x08017f54
 8017b8c:	08017f5c 	.word	0x08017f5c

08017b90 <memcmp>:
 8017b90:	b530      	push	{r4, r5, lr}
 8017b92:	2400      	movs	r4, #0
 8017b94:	3901      	subs	r1, #1
 8017b96:	42a2      	cmp	r2, r4
 8017b98:	d101      	bne.n	8017b9e <memcmp+0xe>
 8017b9a:	2000      	movs	r0, #0
 8017b9c:	e005      	b.n	8017baa <memcmp+0x1a>
 8017b9e:	5d03      	ldrb	r3, [r0, r4]
 8017ba0:	3401      	adds	r4, #1
 8017ba2:	5d0d      	ldrb	r5, [r1, r4]
 8017ba4:	42ab      	cmp	r3, r5
 8017ba6:	d0f6      	beq.n	8017b96 <memcmp+0x6>
 8017ba8:	1b58      	subs	r0, r3, r5
 8017baa:	bd30      	pop	{r4, r5, pc}

08017bac <memset>:
 8017bac:	0003      	movs	r3, r0
 8017bae:	1882      	adds	r2, r0, r2
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d100      	bne.n	8017bb6 <memset+0xa>
 8017bb4:	4770      	bx	lr
 8017bb6:	7019      	strb	r1, [r3, #0]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	e7f9      	b.n	8017bb0 <memset+0x4>

08017bbc <strchr>:
 8017bbc:	b2c9      	uxtb	r1, r1
 8017bbe:	7803      	ldrb	r3, [r0, #0]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d004      	beq.n	8017bce <strchr+0x12>
 8017bc4:	428b      	cmp	r3, r1
 8017bc6:	d100      	bne.n	8017bca <strchr+0xe>
 8017bc8:	4770      	bx	lr
 8017bca:	3001      	adds	r0, #1
 8017bcc:	e7f7      	b.n	8017bbe <strchr+0x2>
 8017bce:	424b      	negs	r3, r1
 8017bd0:	4159      	adcs	r1, r3
 8017bd2:	4249      	negs	r1, r1
 8017bd4:	4008      	ands	r0, r1
 8017bd6:	e7f7      	b.n	8017bc8 <strchr+0xc>

08017bd8 <strstr>:
 8017bd8:	780a      	ldrb	r2, [r1, #0]
 8017bda:	b530      	push	{r4, r5, lr}
 8017bdc:	2a00      	cmp	r2, #0
 8017bde:	d10c      	bne.n	8017bfa <strstr+0x22>
 8017be0:	bd30      	pop	{r4, r5, pc}
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d108      	bne.n	8017bf8 <strstr+0x20>
 8017be6:	2301      	movs	r3, #1
 8017be8:	5ccc      	ldrb	r4, [r1, r3]
 8017bea:	2c00      	cmp	r4, #0
 8017bec:	d0f8      	beq.n	8017be0 <strstr+0x8>
 8017bee:	5cc5      	ldrb	r5, [r0, r3]
 8017bf0:	42a5      	cmp	r5, r4
 8017bf2:	d101      	bne.n	8017bf8 <strstr+0x20>
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	e7f7      	b.n	8017be8 <strstr+0x10>
 8017bf8:	3001      	adds	r0, #1
 8017bfa:	7803      	ldrb	r3, [r0, #0]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d1f0      	bne.n	8017be2 <strstr+0xa>
 8017c00:	0018      	movs	r0, r3
 8017c02:	e7ed      	b.n	8017be0 <strstr+0x8>

08017c04 <__libc_init_array>:
 8017c04:	b570      	push	{r4, r5, r6, lr}
 8017c06:	2600      	movs	r6, #0
 8017c08:	4c0c      	ldr	r4, [pc, #48]	@ (8017c3c <__libc_init_array+0x38>)
 8017c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8017c40 <__libc_init_array+0x3c>)
 8017c0c:	1b64      	subs	r4, r4, r5
 8017c0e:	10a4      	asrs	r4, r4, #2
 8017c10:	42a6      	cmp	r6, r4
 8017c12:	d109      	bne.n	8017c28 <__libc_init_array+0x24>
 8017c14:	2600      	movs	r6, #0
 8017c16:	f000 f823 	bl	8017c60 <_init>
 8017c1a:	4c0a      	ldr	r4, [pc, #40]	@ (8017c44 <__libc_init_array+0x40>)
 8017c1c:	4d0a      	ldr	r5, [pc, #40]	@ (8017c48 <__libc_init_array+0x44>)
 8017c1e:	1b64      	subs	r4, r4, r5
 8017c20:	10a4      	asrs	r4, r4, #2
 8017c22:	42a6      	cmp	r6, r4
 8017c24:	d105      	bne.n	8017c32 <__libc_init_array+0x2e>
 8017c26:	bd70      	pop	{r4, r5, r6, pc}
 8017c28:	00b3      	lsls	r3, r6, #2
 8017c2a:	58eb      	ldr	r3, [r5, r3]
 8017c2c:	4798      	blx	r3
 8017c2e:	3601      	adds	r6, #1
 8017c30:	e7ee      	b.n	8017c10 <__libc_init_array+0xc>
 8017c32:	00b3      	lsls	r3, r6, #2
 8017c34:	58eb      	ldr	r3, [r5, r3]
 8017c36:	4798      	blx	r3
 8017c38:	3601      	adds	r6, #1
 8017c3a:	e7f2      	b.n	8017c22 <__libc_init_array+0x1e>
 8017c3c:	08017f6c 	.word	0x08017f6c
 8017c40:	08017f6c 	.word	0x08017f6c
 8017c44:	08017f70 	.word	0x08017f70
 8017c48:	08017f6c 	.word	0x08017f6c

08017c4c <memcpy>:
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	b510      	push	{r4, lr}
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d100      	bne.n	8017c56 <memcpy+0xa>
 8017c54:	bd10      	pop	{r4, pc}
 8017c56:	5ccc      	ldrb	r4, [r1, r3]
 8017c58:	54c4      	strb	r4, [r0, r3]
 8017c5a:	3301      	adds	r3, #1
 8017c5c:	e7f8      	b.n	8017c50 <memcpy+0x4>
	...

08017c60 <_init>:
 8017c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c62:	46c0      	nop			@ (mov r8, r8)
 8017c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c66:	bc08      	pop	{r3}
 8017c68:	469e      	mov	lr, r3
 8017c6a:	4770      	bx	lr

08017c6c <_fini>:
 8017c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c6e:	46c0      	nop			@ (mov r8, r8)
 8017c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c72:	bc08      	pop	{r3}
 8017c74:	469e      	mov	lr, r3
 8017c76:	4770      	bx	lr

08017c78 <__FLASH_Program_Fast_veneer>:
 8017c78:	b401      	push	{r0}
 8017c7a:	4802      	ldr	r0, [pc, #8]	@ (8017c84 <__FLASH_Program_Fast_veneer+0xc>)
 8017c7c:	4684      	mov	ip, r0
 8017c7e:	bc01      	pop	{r0}
 8017c80:	4760      	bx	ip
 8017c82:	bf00      	nop
 8017c84:	2000022d 	.word	0x2000022d

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <BaudRateTest>:
20000004:	00000001                                ....

20000008 <aTxBuffer>:
20000008:	ff000007 00080000                       ........

20000010 <dpytab>:
20000010:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
20000020:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
20000030:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
20000040:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

20000050 <BluetoothState>:
20000050:	00000001                                ....

20000054 <Eventos>:
20000054:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

20000070 <Mediciones>:
20000070:	12222111 00001333                       .!".3...

20000078 <Alarmas>:
20000078:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000088:	00000000                                ....

2000008c <DatosMAC>:
2000008c:	56781234 00009999                       4.xV....

20000094 <DatosFirmware>:
20000094:	                                         ..

20000096 <PNU_0x3000>:
20000096:	                                         ..

20000098 <PNU_0x3004>:
20000098:	                                         (.

2000009a <PNU_0x3006>:
2000009a:	                                         ..

2000009c <PNU_0x3008>:
2000009c:	                                         ..

2000009e <PNU_0x300C>:
2000009e:	                                         ..

200000a0 <PNU_0x3010>:
200000a0:	                                         ..

200000a2 <PNU_0x3012>:
200000a2:	                                         (.

200000a4 <PNU_0x3014>:
200000a4:	                                         ..

200000a6 <PNU_0x3016>:
200000a6:	                                         ..

200000a8 <PNU_0x3018>:
200000a8:	                                         ..

200000aa <PNU_0x301A>:
200000aa:	                                         2.

200000ac <PNU_0x301C>:
200000ac:	                                         Z.

200000ae <PNU_0x301E>:
200000ae:	                                         ..

200000b0 <PNU_0x3104>:
200000b0:	                                         ..

200000b2 <PNU_0x3106>:
200000b2:	                                         ..

200000b4 <PNU_0x3108>:
200000b4:	                                         ..

200000b6 <PNU_0x310A>:
200000b6:	                                         ..

200000b8 <PNU_0x310C>:
200000b8:	                                         _.

200000ba <PNU_0x310E>:
200000ba:	                                         d.

200000bc <Plantilla>:
	...
20000104:	00000001 00000000 00000000 00000000     ................
	...

2000013c <copiaPlantilla>:
	...
20000184:	00000100 00000000 00000000 00000000     ................
	...

200001bc <daysToMonth>:
200001bc:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001cc:	00000078 00000097 000000b6 000000d5     x...............
200001dc:	000000f3 00000111 00000130 0000014e     ........0...N...

200001ec <PFULLDEF_Px_PORT>:
200001ec:	50000400 50000400 50000400 50000400     ...P...P...P...P
200001fc:	50000400                                ...P

20000200 <PFULLDEF_Px_PIN>:
20000200:	40101010 00000010                       ...@....

20000208 <PFULLDEF_MPx_PORT>:
20000208:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000218 <PFULLDEF_MPx_PIN>:
20000218:	08080808                                ....

2000021c <firstFlagPuerta1>:
2000021c:	00000001                                ....

20000220 <SystemCoreClock>:
20000220:	003d0900                                ..=.

20000224 <uwTickPrio>:
20000224:	00000004                                ....

20000228 <uwTickFreq>:
20000228:	00000001                                ....

2000022c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000022c:	b580      	push	{r7, lr}
2000022e:	b088      	sub	sp, #32
20000230:	af00      	add	r7, sp, #0
20000232:	6078      	str	r0, [r7, #4]
20000234:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000236:	231f      	movs	r3, #31
20000238:	18fb      	adds	r3, r7, r3
2000023a:	2200      	movs	r2, #0
2000023c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000023e:	687b      	ldr	r3, [r7, #4]
20000240:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000242:	683b      	ldr	r3, [r7, #0]
20000244:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000246:	4b1a      	ldr	r3, [pc, #104]	@ (200002b0 <FLASH_Program_Fast+0x84>)
20000248:	695a      	ldr	r2, [r3, #20]
2000024a:	4b19      	ldr	r3, [pc, #100]	@ (200002b0 <FLASH_Program_Fast+0x84>)
2000024c:	2180      	movs	r1, #128	@ 0x80
2000024e:	02c9      	lsls	r1, r1, #11
20000250:	430a      	orrs	r2, r1
20000252:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20000254:	f3ef 8310 	mrs	r3, PRIMASK
20000258:	60fb      	str	r3, [r7, #12]
  return(result);
2000025a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000025c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000025e:	b672      	cpsid	i
}
20000260:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000262:	e00f      	b.n	20000284 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000264:	697a      	ldr	r2, [r7, #20]
20000266:	69bb      	ldr	r3, [r7, #24]
20000268:	6812      	ldr	r2, [r2, #0]
2000026a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000026c:	697b      	ldr	r3, [r7, #20]
2000026e:	3304      	adds	r3, #4
20000270:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000272:	69bb      	ldr	r3, [r7, #24]
20000274:	3304      	adds	r3, #4
20000276:	61bb      	str	r3, [r7, #24]
    index++;
20000278:	211f      	movs	r1, #31
2000027a:	187b      	adds	r3, r7, r1
2000027c:	781a      	ldrb	r2, [r3, #0]
2000027e:	187b      	adds	r3, r7, r1
20000280:	3201      	adds	r2, #1
20000282:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000284:	231f      	movs	r3, #31
20000286:	18fb      	adds	r3, r7, r3
20000288:	781b      	ldrb	r3, [r3, #0]
2000028a:	2b3f      	cmp	r3, #63	@ 0x3f
2000028c:	d9ea      	bls.n	20000264 <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000028e:	46c0      	nop			@ (mov r8, r8)
20000290:	4b07      	ldr	r3, [pc, #28]	@ (200002b0 <FLASH_Program_Fast+0x84>)
20000292:	691a      	ldr	r2, [r3, #16]
20000294:	2380      	movs	r3, #128	@ 0x80
20000296:	025b      	lsls	r3, r3, #9
20000298:	4013      	ands	r3, r2
2000029a:	d1f9      	bne.n	20000290 <FLASH_Program_Fast+0x64>
2000029c:	693b      	ldr	r3, [r7, #16]
2000029e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002a0:	68bb      	ldr	r3, [r7, #8]
200002a2:	f383 8810 	msr	PRIMASK, r3
}
200002a6:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002a8:	46c0      	nop			@ (mov r8, r8)
200002aa:	46bd      	mov	sp, r7
200002ac:	b008      	add	sp, #32
200002ae:	bd80      	pop	{r7, pc}
200002b0:	40022000 	.word	0x40022000
