
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801eff0  0801eff0  0001dff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .myBufSectionEEPROM_P 00000080  0803f000  0803f000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .myBufSectionEEPROM_V 00000014  0803f800  0803f800  00027800  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  5 .BOOTLOADER   00001000  0801f000  0801f000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .text         0001ae10  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .rodata       00000320  0801aed0  0801aed0  0001bed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .ARM.extab    00000000  0801b1f0  0801b1f0  00027814  2**0
                  CONTENTS, READONLY
 10 .ARM          00000008  0801b1f0  0801b1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .preinit_array 00000000  0801b1f8  0801b1f8  00027814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 12 .init_array   00000004  0801b1f8  0801b1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .fini_array   00000004  0801b1fc  0801b1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .data         0000035c  20000000  0801b200  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
 15 .bss          00002018  20000360  0801b55c  0001d360  2**3
                  ALLOC
 16 ._user_heap_stack 00000600  20002378  0801b55c  0001d378  2**0
                  ALLOC
 17 .ARM.attributes 00000028  00000000  00000000  00027814  2**0
                  CONTENTS, READONLY
 18 .debug_info   0002f728  00000000  00000000  0002783c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000061ff  00000000  00000000  00056f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001de8  00000000  00000000  0005d168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000017ce  00000000  00000000  0005ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00020725  00000000  00000000  0006071e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0000d171  00000000  00000000  00080e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  0008dfb4  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00006f3c  00000000  00000000  0008dff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000084  00000000  00000000  00094f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000360 	.word	0x20000360
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801aea4 	.word	0x0801aea4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000364 	.word	0x20000364
 8000104:	0801aea4 	.word	0x0801aea4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f8ed 	bl	80015f4 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f831 	bl	800148c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f8df 	bl	80015f4 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8d5 	bl	80015f4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f85b 	bl	8001514 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f851 	bl	8001514 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	@ (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	ffffff21 	.word	0xffffff21
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f824 	bl	8000538 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			@ (mov r8, r8)

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 ffef 	bl	80024f4 <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fbbc 	bl	8001c9c <__aeabi_dsub>
 8000524:	f001 ffe6 	bl	80024f4 <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f002 f82c 	bl	80025b4 <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f002 f827 	bl	80025b4 <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d434      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 800056e:	469b      	mov	fp, r3
 8000570:	4653      	mov	r3, sl
 8000572:	465a      	mov	r2, fp
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83b      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e079      	b.n	800067e <__udivmoddi4+0x146>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e076      	b.n	8000684 <__udivmoddi4+0x14c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e029      	b.n	8000604 <__udivmoddi4+0xcc>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	469b      	mov	fp, r3
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	4652      	mov	r2, sl
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4641      	mov	r1, r8
 80005e6:	0013      	movs	r3, r2
 80005e8:	464a      	mov	r2, r9
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	431f      	orrs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d9c3      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4643      	mov	r3, r8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0d8      	beq.n	80005bc <__udivmoddi4+0x84>
 800060a:	07fb      	lsls	r3, r7, #31
 800060c:	0872      	lsrs	r2, r6, #1
 800060e:	431a      	orrs	r2, r3
 8000610:	4646      	mov	r6, r8
 8000612:	087b      	lsrs	r3, r7, #1
 8000614:	e00e      	b.n	8000634 <__udivmoddi4+0xfc>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d101      	bne.n	800061e <__udivmoddi4+0xe6>
 800061a:	42a2      	cmp	r2, r4
 800061c:	d80c      	bhi.n	8000638 <__udivmoddi4+0x100>
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	419d      	sbcs	r5, r3
 8000622:	2001      	movs	r0, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2100      	movs	r1, #0
 800062a:	3e01      	subs	r6, #1
 800062c:	1824      	adds	r4, r4, r0
 800062e:	414d      	adcs	r5, r1
 8000630:	2e00      	cmp	r6, #0
 8000632:	d006      	beq.n	8000642 <__udivmoddi4+0x10a>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d9ee      	bls.n	8000616 <__udivmoddi4+0xde>
 8000638:	3e01      	subs	r6, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2e00      	cmp	r6, #0
 8000640:	d1f8      	bne.n	8000634 <__udivmoddi4+0xfc>
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	465b      	mov	r3, fp
 8000648:	1900      	adds	r0, r0, r4
 800064a:	4169      	adcs	r1, r5
 800064c:	2b00      	cmp	r3, #0
 800064e:	db24      	blt.n	800069a <__udivmoddi4+0x162>
 8000650:	002b      	movs	r3, r5
 8000652:	465a      	mov	r2, fp
 8000654:	4644      	mov	r4, r8
 8000656:	40d3      	lsrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	db2a      	blt.n	80006bc <__udivmoddi4+0x184>
 8000666:	0026      	movs	r6, r4
 8000668:	409e      	lsls	r6, r3
 800066a:	0033      	movs	r3, r6
 800066c:	0026      	movs	r6, r4
 800066e:	4647      	mov	r7, r8
 8000670:	40be      	lsls	r6, r7
 8000672:	0032      	movs	r2, r6
 8000674:	1a80      	subs	r0, r0, r2
 8000676:	4199      	sbcs	r1, r3
 8000678:	9000      	str	r0, [sp, #0]
 800067a:	9101      	str	r1, [sp, #4]
 800067c:	e79e      	b.n	80005bc <__udivmoddi4+0x84>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d8bc      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000682:	e782      	b.n	800058a <__udivmoddi4+0x52>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	2100      	movs	r1, #0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	40da      	lsrs	r2, r3
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	e785      	b.n	80005a6 <__udivmoddi4+0x6e>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	4646      	mov	r6, r8
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	40f3      	lsrs	r3, r6
 80006aa:	4644      	mov	r4, r8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	40e2      	lsrs	r2, r4
 80006b2:	001c      	movs	r4, r3
 80006b4:	465b      	mov	r3, fp
 80006b6:	0015      	movs	r5, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dad4      	bge.n	8000666 <__udivmoddi4+0x12e>
 80006bc:	4642      	mov	r2, r8
 80006be:	002f      	movs	r7, r5
 80006c0:	2320      	movs	r3, #32
 80006c2:	0026      	movs	r6, r4
 80006c4:	4097      	lsls	r7, r2
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	40de      	lsrs	r6, r3
 80006ca:	003b      	movs	r3, r7
 80006cc:	4333      	orrs	r3, r6
 80006ce:	e7cd      	b.n	800066c <__udivmoddi4+0x134>

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	4646      	mov	r6, r8
 80006d6:	46d6      	mov	lr, sl
 80006d8:	b5c0      	push	{r6, r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	030e      	lsls	r6, r1, #12
 80006e2:	004c      	lsls	r4, r1, #1
 80006e4:	0fcd      	lsrs	r5, r1, #31
 80006e6:	0a71      	lsrs	r1, r6, #9
 80006e8:	9e00      	ldr	r6, [sp, #0]
 80006ea:	005f      	lsls	r7, r3, #1
 80006ec:	0f76      	lsrs	r6, r6, #29
 80006ee:	430e      	orrs	r6, r1
 80006f0:	9900      	ldr	r1, [sp, #0]
 80006f2:	9200      	str	r2, [sp, #0]
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	00c9      	lsls	r1, r1, #3
 80006f8:	4689      	mov	r9, r1
 80006fa:	0319      	lsls	r1, r3, #12
 80006fc:	0d7b      	lsrs	r3, r7, #21
 80006fe:	4698      	mov	r8, r3
 8000700:	9b01      	ldr	r3, [sp, #4]
 8000702:	0a49      	lsrs	r1, r1, #9
 8000704:	0fdb      	lsrs	r3, r3, #31
 8000706:	469c      	mov	ip, r3
 8000708:	9b00      	ldr	r3, [sp, #0]
 800070a:	9a00      	ldr	r2, [sp, #0]
 800070c:	0f5b      	lsrs	r3, r3, #29
 800070e:	430b      	orrs	r3, r1
 8000710:	4641      	mov	r1, r8
 8000712:	0d64      	lsrs	r4, r4, #21
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	1a61      	subs	r1, r4, r1
 8000718:	4565      	cmp	r5, ip
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x4e>
 800071c:	e0a6      	b.n	800086c <__aeabi_dadd+0x19c>
 800071e:	2900      	cmp	r1, #0
 8000720:	dd72      	ble.n	8000808 <__aeabi_dadd+0x138>
 8000722:	4647      	mov	r7, r8
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x5a>
 8000728:	e0dd      	b.n	80008e6 <__aeabi_dadd+0x216>
 800072a:	4fcc      	ldr	r7, [pc, #816]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800072c:	42bc      	cmp	r4, r7
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x62>
 8000730:	e19a      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000732:	2701      	movs	r7, #1
 8000734:	2938      	cmp	r1, #56	@ 0x38
 8000736:	dc17      	bgt.n	8000768 <__aeabi_dadd+0x98>
 8000738:	2780      	movs	r7, #128	@ 0x80
 800073a:	043f      	lsls	r7, r7, #16
 800073c:	433b      	orrs	r3, r7
 800073e:	291f      	cmp	r1, #31
 8000740:	dd00      	ble.n	8000744 <__aeabi_dadd+0x74>
 8000742:	e1dd      	b.n	8000b00 <__aeabi_dadd+0x430>
 8000744:	2720      	movs	r7, #32
 8000746:	1a78      	subs	r0, r7, r1
 8000748:	001f      	movs	r7, r3
 800074a:	4087      	lsls	r7, r0
 800074c:	46ba      	mov	sl, r7
 800074e:	0017      	movs	r7, r2
 8000750:	40cf      	lsrs	r7, r1
 8000752:	4684      	mov	ip, r0
 8000754:	0038      	movs	r0, r7
 8000756:	4657      	mov	r7, sl
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	1af6      	subs	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	464b      	mov	r3, r9
 800076a:	1bdf      	subs	r7, r3, r7
 800076c:	45b9      	cmp	r9, r7
 800076e:	4180      	sbcs	r0, r0
 8000770:	4240      	negs	r0, r0
 8000772:	1a36      	subs	r6, r6, r0
 8000774:	0233      	lsls	r3, r6, #8
 8000776:	d400      	bmi.n	800077a <__aeabi_dadd+0xaa>
 8000778:	e0ff      	b.n	800097a <__aeabi_dadd+0x2aa>
 800077a:	0276      	lsls	r6, r6, #9
 800077c:	0a76      	lsrs	r6, r6, #9
 800077e:	2e00      	cmp	r6, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0xb4>
 8000782:	e13c      	b.n	80009fe <__aeabi_dadd+0x32e>
 8000784:	0030      	movs	r0, r6
 8000786:	f7ff fe7b 	bl	8000480 <__clzsi2>
 800078a:	0003      	movs	r3, r0
 800078c:	3b08      	subs	r3, #8
 800078e:	2120      	movs	r1, #32
 8000790:	0038      	movs	r0, r7
 8000792:	1aca      	subs	r2, r1, r3
 8000794:	40d0      	lsrs	r0, r2
 8000796:	409e      	lsls	r6, r3
 8000798:	0002      	movs	r2, r0
 800079a:	409f      	lsls	r7, r3
 800079c:	4332      	orrs	r2, r6
 800079e:	429c      	cmp	r4, r3
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0xd4>
 80007a2:	e1a6      	b.n	8000af2 <__aeabi_dadd+0x422>
 80007a4:	1b18      	subs	r0, r3, r4
 80007a6:	3001      	adds	r0, #1
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	003e      	movs	r6, r7
 80007ac:	408f      	lsls	r7, r1
 80007ae:	40c6      	lsrs	r6, r0
 80007b0:	1e7b      	subs	r3, r7, #1
 80007b2:	419f      	sbcs	r7, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	408b      	lsls	r3, r1
 80007b8:	4337      	orrs	r7, r6
 80007ba:	431f      	orrs	r7, r3
 80007bc:	40c2      	lsrs	r2, r0
 80007be:	003b      	movs	r3, r7
 80007c0:	0016      	movs	r6, r2
 80007c2:	2400      	movs	r4, #0
 80007c4:	4313      	orrs	r3, r2
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0xfa>
 80007c8:	e1df      	b.n	8000b8a <__aeabi_dadd+0x4ba>
 80007ca:	077b      	lsls	r3, r7, #29
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x100>
 80007ce:	e332      	b.n	8000e36 <__aeabi_dadd+0x766>
 80007d0:	230f      	movs	r3, #15
 80007d2:	003a      	movs	r2, r7
 80007d4:	403b      	ands	r3, r7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d004      	beq.n	80007e4 <__aeabi_dadd+0x114>
 80007da:	1d3a      	adds	r2, r7, #4
 80007dc:	42ba      	cmp	r2, r7
 80007de:	41bf      	sbcs	r7, r7
 80007e0:	427f      	negs	r7, r7
 80007e2:	19f6      	adds	r6, r6, r7
 80007e4:	0233      	lsls	r3, r6, #8
 80007e6:	d400      	bmi.n	80007ea <__aeabi_dadd+0x11a>
 80007e8:	e323      	b.n	8000e32 <__aeabi_dadd+0x762>
 80007ea:	4b9c      	ldr	r3, [pc, #624]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80007ec:	3401      	adds	r4, #1
 80007ee:	429c      	cmp	r4, r3
 80007f0:	d100      	bne.n	80007f4 <__aeabi_dadd+0x124>
 80007f2:	e0b4      	b.n	800095e <__aeabi_dadd+0x28e>
 80007f4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a60 <__aeabi_dadd+0x390>)
 80007f6:	0564      	lsls	r4, r4, #21
 80007f8:	401e      	ands	r6, r3
 80007fa:	0d64      	lsrs	r4, r4, #21
 80007fc:	0777      	lsls	r7, r6, #29
 80007fe:	08d2      	lsrs	r2, r2, #3
 8000800:	0276      	lsls	r6, r6, #9
 8000802:	4317      	orrs	r7, r2
 8000804:	0b36      	lsrs	r6, r6, #12
 8000806:	e0ac      	b.n	8000962 <__aeabi_dadd+0x292>
 8000808:	2900      	cmp	r1, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x13e>
 800080c:	e07e      	b.n	800090c <__aeabi_dadd+0x23c>
 800080e:	4641      	mov	r1, r8
 8000810:	1b09      	subs	r1, r1, r4
 8000812:	2c00      	cmp	r4, #0
 8000814:	d000      	beq.n	8000818 <__aeabi_dadd+0x148>
 8000816:	e160      	b.n	8000ada <__aeabi_dadd+0x40a>
 8000818:	0034      	movs	r4, r6
 800081a:	4648      	mov	r0, r9
 800081c:	4304      	orrs	r4, r0
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x152>
 8000820:	e1c9      	b.n	8000bb6 <__aeabi_dadd+0x4e6>
 8000822:	1e4c      	subs	r4, r1, #1
 8000824:	2901      	cmp	r1, #1
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x15a>
 8000828:	e22e      	b.n	8000c88 <__aeabi_dadd+0x5b8>
 800082a:	4d8c      	ldr	r5, [pc, #560]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800082c:	42a9      	cmp	r1, r5
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x162>
 8000830:	e224      	b.n	8000c7c <__aeabi_dadd+0x5ac>
 8000832:	2701      	movs	r7, #1
 8000834:	2c38      	cmp	r4, #56	@ 0x38
 8000836:	dc11      	bgt.n	800085c <__aeabi_dadd+0x18c>
 8000838:	0021      	movs	r1, r4
 800083a:	291f      	cmp	r1, #31
 800083c:	dd00      	ble.n	8000840 <__aeabi_dadd+0x170>
 800083e:	e20b      	b.n	8000c58 <__aeabi_dadd+0x588>
 8000840:	2420      	movs	r4, #32
 8000842:	0037      	movs	r7, r6
 8000844:	4648      	mov	r0, r9
 8000846:	1a64      	subs	r4, r4, r1
 8000848:	40a7      	lsls	r7, r4
 800084a:	40c8      	lsrs	r0, r1
 800084c:	4307      	orrs	r7, r0
 800084e:	4648      	mov	r0, r9
 8000850:	40a0      	lsls	r0, r4
 8000852:	40ce      	lsrs	r6, r1
 8000854:	1e44      	subs	r4, r0, #1
 8000856:	41a0      	sbcs	r0, r4
 8000858:	1b9b      	subs	r3, r3, r6
 800085a:	4307      	orrs	r7, r0
 800085c:	1bd7      	subs	r7, r2, r7
 800085e:	42ba      	cmp	r2, r7
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4665      	mov	r5, ip
 8000866:	4644      	mov	r4, r8
 8000868:	1a9e      	subs	r6, r3, r2
 800086a:	e783      	b.n	8000774 <__aeabi_dadd+0xa4>
 800086c:	2900      	cmp	r1, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_dadd+0x1a2>
 8000870:	e09c      	b.n	80009ac <__aeabi_dadd+0x2dc>
 8000872:	4647      	mov	r7, r8
 8000874:	2f00      	cmp	r7, #0
 8000876:	d167      	bne.n	8000948 <__aeabi_dadd+0x278>
 8000878:	001f      	movs	r7, r3
 800087a:	4317      	orrs	r7, r2
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1b0>
 800087e:	e0e4      	b.n	8000a4a <__aeabi_dadd+0x37a>
 8000880:	1e48      	subs	r0, r1, #1
 8000882:	2901      	cmp	r1, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x1b8>
 8000886:	e19b      	b.n	8000bc0 <__aeabi_dadd+0x4f0>
 8000888:	4f74      	ldr	r7, [pc, #464]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800088a:	42b9      	cmp	r1, r7
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x1c0>
 800088e:	e0eb      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000890:	2701      	movs	r7, #1
 8000892:	0001      	movs	r1, r0
 8000894:	2838      	cmp	r0, #56	@ 0x38
 8000896:	dc11      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000898:	291f      	cmp	r1, #31
 800089a:	dd00      	ble.n	800089e <__aeabi_dadd+0x1ce>
 800089c:	e1c7      	b.n	8000c2e <__aeabi_dadd+0x55e>
 800089e:	2720      	movs	r7, #32
 80008a0:	1a78      	subs	r0, r7, r1
 80008a2:	001f      	movs	r7, r3
 80008a4:	4684      	mov	ip, r0
 80008a6:	4087      	lsls	r7, r0
 80008a8:	0010      	movs	r0, r2
 80008aa:	40c8      	lsrs	r0, r1
 80008ac:	4307      	orrs	r7, r0
 80008ae:	4660      	mov	r0, ip
 80008b0:	4082      	lsls	r2, r0
 80008b2:	40cb      	lsrs	r3, r1
 80008b4:	1e50      	subs	r0, r2, #1
 80008b6:	4182      	sbcs	r2, r0
 80008b8:	18f6      	adds	r6, r6, r3
 80008ba:	4317      	orrs	r7, r2
 80008bc:	444f      	add	r7, r9
 80008be:	454f      	cmp	r7, r9
 80008c0:	4180      	sbcs	r0, r0
 80008c2:	4240      	negs	r0, r0
 80008c4:	1836      	adds	r6, r6, r0
 80008c6:	0233      	lsls	r3, r6, #8
 80008c8:	d557      	bpl.n	800097a <__aeabi_dadd+0x2aa>
 80008ca:	4b64      	ldr	r3, [pc, #400]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008cc:	3401      	adds	r4, #1
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d045      	beq.n	800095e <__aeabi_dadd+0x28e>
 80008d2:	2101      	movs	r1, #1
 80008d4:	4b62      	ldr	r3, [pc, #392]	@ (8000a60 <__aeabi_dadd+0x390>)
 80008d6:	087a      	lsrs	r2, r7, #1
 80008d8:	401e      	ands	r6, r3
 80008da:	4039      	ands	r1, r7
 80008dc:	430a      	orrs	r2, r1
 80008de:	07f7      	lsls	r7, r6, #31
 80008e0:	4317      	orrs	r7, r2
 80008e2:	0876      	lsrs	r6, r6, #1
 80008e4:	e771      	b.n	80007ca <__aeabi_dadd+0xfa>
 80008e6:	001f      	movs	r7, r3
 80008e8:	4317      	orrs	r7, r2
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x21e>
 80008ec:	e0ad      	b.n	8000a4a <__aeabi_dadd+0x37a>
 80008ee:	1e4f      	subs	r7, r1, #1
 80008f0:	46bc      	mov	ip, r7
 80008f2:	2901      	cmp	r1, #1
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x228>
 80008f6:	e182      	b.n	8000bfe <__aeabi_dadd+0x52e>
 80008f8:	4f58      	ldr	r7, [pc, #352]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008fa:	42b9      	cmp	r1, r7
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x230>
 80008fe:	e190      	b.n	8000c22 <__aeabi_dadd+0x552>
 8000900:	4661      	mov	r1, ip
 8000902:	2701      	movs	r7, #1
 8000904:	2938      	cmp	r1, #56	@ 0x38
 8000906:	dd00      	ble.n	800090a <__aeabi_dadd+0x23a>
 8000908:	e72e      	b.n	8000768 <__aeabi_dadd+0x98>
 800090a:	e718      	b.n	800073e <__aeabi_dadd+0x6e>
 800090c:	4f55      	ldr	r7, [pc, #340]	@ (8000a64 <__aeabi_dadd+0x394>)
 800090e:	1c61      	adds	r1, r4, #1
 8000910:	4239      	tst	r1, r7
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x246>
 8000914:	e0d0      	b.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000916:	0031      	movs	r1, r6
 8000918:	4648      	mov	r0, r9
 800091a:	001f      	movs	r7, r3
 800091c:	4301      	orrs	r1, r0
 800091e:	4317      	orrs	r7, r2
 8000920:	2c00      	cmp	r4, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x256>
 8000924:	e13d      	b.n	8000ba2 <__aeabi_dadd+0x4d2>
 8000926:	2900      	cmp	r1, #0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x25c>
 800092a:	e1bc      	b.n	8000ca6 <__aeabi_dadd+0x5d6>
 800092c:	2f00      	cmp	r7, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_dadd+0x262>
 8000930:	e1bf      	b.n	8000cb2 <__aeabi_dadd+0x5e2>
 8000932:	464b      	mov	r3, r9
 8000934:	2100      	movs	r1, #0
 8000936:	08d8      	lsrs	r0, r3, #3
 8000938:	0777      	lsls	r7, r6, #29
 800093a:	4307      	orrs	r7, r0
 800093c:	08f0      	lsrs	r0, r6, #3
 800093e:	0306      	lsls	r6, r0, #12
 8000940:	054c      	lsls	r4, r1, #21
 8000942:	0b36      	lsrs	r6, r6, #12
 8000944:	0d64      	lsrs	r4, r4, #21
 8000946:	e00c      	b.n	8000962 <__aeabi_dadd+0x292>
 8000948:	4f44      	ldr	r7, [pc, #272]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800094a:	42bc      	cmp	r4, r7
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x280>
 800094e:	e08b      	b.n	8000a68 <__aeabi_dadd+0x398>
 8000950:	2701      	movs	r7, #1
 8000952:	2938      	cmp	r1, #56	@ 0x38
 8000954:	dcb2      	bgt.n	80008bc <__aeabi_dadd+0x1ec>
 8000956:	2780      	movs	r7, #128	@ 0x80
 8000958:	043f      	lsls	r7, r7, #16
 800095a:	433b      	orrs	r3, r7
 800095c:	e79c      	b.n	8000898 <__aeabi_dadd+0x1c8>
 800095e:	2600      	movs	r6, #0
 8000960:	2700      	movs	r7, #0
 8000962:	0524      	lsls	r4, r4, #20
 8000964:	4334      	orrs	r4, r6
 8000966:	07ed      	lsls	r5, r5, #31
 8000968:	432c      	orrs	r4, r5
 800096a:	0038      	movs	r0, r7
 800096c:	0021      	movs	r1, r4
 800096e:	b002      	add	sp, #8
 8000970:	bce0      	pop	{r5, r6, r7}
 8000972:	46ba      	mov	sl, r7
 8000974:	46b1      	mov	r9, r6
 8000976:	46a8      	mov	r8, r5
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	077b      	lsls	r3, r7, #29
 800097c:	d004      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 800097e:	230f      	movs	r3, #15
 8000980:	403b      	ands	r3, r7
 8000982:	2b04      	cmp	r3, #4
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x2b8>
 8000986:	e728      	b.n	80007da <__aeabi_dadd+0x10a>
 8000988:	08f8      	lsrs	r0, r7, #3
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <__aeabi_dadd+0x38c>)
 800098c:	0777      	lsls	r7, r6, #29
 800098e:	4307      	orrs	r7, r0
 8000990:	08f0      	lsrs	r0, r6, #3
 8000992:	429c      	cmp	r4, r3
 8000994:	d000      	beq.n	8000998 <__aeabi_dadd+0x2c8>
 8000996:	e24a      	b.n	8000e2e <__aeabi_dadd+0x75e>
 8000998:	003b      	movs	r3, r7
 800099a:	4303      	orrs	r3, r0
 800099c:	d059      	beq.n	8000a52 <__aeabi_dadd+0x382>
 800099e:	2680      	movs	r6, #128	@ 0x80
 80009a0:	0336      	lsls	r6, r6, #12
 80009a2:	4306      	orrs	r6, r0
 80009a4:	0336      	lsls	r6, r6, #12
 80009a6:	4c2d      	ldr	r4, [pc, #180]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009a8:	0b36      	lsrs	r6, r6, #12
 80009aa:	e7da      	b.n	8000962 <__aeabi_dadd+0x292>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d061      	beq.n	8000a74 <__aeabi_dadd+0x3a4>
 80009b0:	4641      	mov	r1, r8
 80009b2:	1b09      	subs	r1, r1, r4
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x2ea>
 80009b8:	e0b9      	b.n	8000b2e <__aeabi_dadd+0x45e>
 80009ba:	4c28      	ldr	r4, [pc, #160]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80009bc:	45a0      	cmp	r8, r4
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2f2>
 80009c0:	e1a5      	b.n	8000d0e <__aeabi_dadd+0x63e>
 80009c2:	2701      	movs	r7, #1
 80009c4:	2938      	cmp	r1, #56	@ 0x38
 80009c6:	dc13      	bgt.n	80009f0 <__aeabi_dadd+0x320>
 80009c8:	2480      	movs	r4, #128	@ 0x80
 80009ca:	0424      	lsls	r4, r4, #16
 80009cc:	4326      	orrs	r6, r4
 80009ce:	291f      	cmp	r1, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dadd+0x304>
 80009d2:	e1c8      	b.n	8000d66 <__aeabi_dadd+0x696>
 80009d4:	2420      	movs	r4, #32
 80009d6:	0037      	movs	r7, r6
 80009d8:	4648      	mov	r0, r9
 80009da:	1a64      	subs	r4, r4, r1
 80009dc:	40a7      	lsls	r7, r4
 80009de:	40c8      	lsrs	r0, r1
 80009e0:	4307      	orrs	r7, r0
 80009e2:	4648      	mov	r0, r9
 80009e4:	40a0      	lsls	r0, r4
 80009e6:	40ce      	lsrs	r6, r1
 80009e8:	1e44      	subs	r4, r0, #1
 80009ea:	41a0      	sbcs	r0, r4
 80009ec:	199b      	adds	r3, r3, r6
 80009ee:	4307      	orrs	r7, r0
 80009f0:	18bf      	adds	r7, r7, r2
 80009f2:	4297      	cmp	r7, r2
 80009f4:	4192      	sbcs	r2, r2
 80009f6:	4252      	negs	r2, r2
 80009f8:	4644      	mov	r4, r8
 80009fa:	18d6      	adds	r6, r2, r3
 80009fc:	e763      	b.n	80008c6 <__aeabi_dadd+0x1f6>
 80009fe:	0038      	movs	r0, r7
 8000a00:	f7ff fd3e 	bl	8000480 <__clzsi2>
 8000a04:	0003      	movs	r3, r0
 8000a06:	3318      	adds	r3, #24
 8000a08:	2b1f      	cmp	r3, #31
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_dadd+0x33e>
 8000a0c:	e6bf      	b.n	800078e <__aeabi_dadd+0xbe>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	3808      	subs	r0, #8
 8000a12:	4082      	lsls	r2, r0
 8000a14:	429c      	cmp	r4, r3
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dadd+0x34a>
 8000a18:	e083      	b.n	8000b22 <__aeabi_dadd+0x452>
 8000a1a:	1b1b      	subs	r3, r3, r4
 8000a1c:	1c58      	adds	r0, r3, #1
 8000a1e:	281f      	cmp	r0, #31
 8000a20:	dc00      	bgt.n	8000a24 <__aeabi_dadd+0x354>
 8000a22:	e1b4      	b.n	8000d8e <__aeabi_dadd+0x6be>
 8000a24:	0017      	movs	r7, r2
 8000a26:	3b1f      	subs	r3, #31
 8000a28:	40df      	lsrs	r7, r3
 8000a2a:	2820      	cmp	r0, #32
 8000a2c:	d005      	beq.n	8000a3a <__aeabi_dadd+0x36a>
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	409a      	lsls	r2, r3
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	419a      	sbcs	r2, r3
 8000a38:	4317      	orrs	r7, r2
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	2f00      	cmp	r7, #0
 8000a3e:	d00a      	beq.n	8000a56 <__aeabi_dadd+0x386>
 8000a40:	077b      	lsls	r3, r7, #29
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x376>
 8000a44:	e6c4      	b.n	80007d0 <__aeabi_dadd+0x100>
 8000a46:	0026      	movs	r6, r4
 8000a48:	e79e      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	08d8      	lsrs	r0, r3, #3
 8000a50:	e79b      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000a52:	2700      	movs	r7, #0
 8000a54:	4c01      	ldr	r4, [pc, #4]	@ (8000a5c <__aeabi_dadd+0x38c>)
 8000a56:	2600      	movs	r6, #0
 8000a58:	e783      	b.n	8000962 <__aeabi_dadd+0x292>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	000007ff 	.word	0x000007ff
 8000a60:	ff7fffff 	.word	0xff7fffff
 8000a64:	000007fe 	.word	0x000007fe
 8000a68:	464b      	mov	r3, r9
 8000a6a:	0777      	lsls	r7, r6, #29
 8000a6c:	08d8      	lsrs	r0, r3, #3
 8000a6e:	4307      	orrs	r7, r0
 8000a70:	08f0      	lsrs	r0, r6, #3
 8000a72:	e791      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000a74:	4fcd      	ldr	r7, [pc, #820]	@ (8000dac <__aeabi_dadd+0x6dc>)
 8000a76:	1c61      	adds	r1, r4, #1
 8000a78:	4239      	tst	r1, r7
 8000a7a:	d16b      	bne.n	8000b54 <__aeabi_dadd+0x484>
 8000a7c:	0031      	movs	r1, r6
 8000a7e:	4648      	mov	r0, r9
 8000a80:	4301      	orrs	r1, r0
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d000      	beq.n	8000a88 <__aeabi_dadd+0x3b8>
 8000a86:	e14b      	b.n	8000d20 <__aeabi_dadd+0x650>
 8000a88:	001f      	movs	r7, r3
 8000a8a:	4317      	orrs	r7, r2
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x3c2>
 8000a90:	e181      	b.n	8000d96 <__aeabi_dadd+0x6c6>
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x3c8>
 8000a96:	e74c      	b.n	8000932 <__aeabi_dadd+0x262>
 8000a98:	444a      	add	r2, r9
 8000a9a:	454a      	cmp	r2, r9
 8000a9c:	4180      	sbcs	r0, r0
 8000a9e:	18f6      	adds	r6, r6, r3
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	1836      	adds	r6, r6, r0
 8000aa4:	0233      	lsls	r3, r6, #8
 8000aa6:	d500      	bpl.n	8000aaa <__aeabi_dadd+0x3da>
 8000aa8:	e1b0      	b.n	8000e0c <__aeabi_dadd+0x73c>
 8000aaa:	0017      	movs	r7, r2
 8000aac:	4691      	mov	r9, r2
 8000aae:	4337      	orrs	r7, r6
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x3e4>
 8000ab2:	e73e      	b.n	8000932 <__aeabi_dadd+0x262>
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	e754      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ab8:	4649      	mov	r1, r9
 8000aba:	1a89      	subs	r1, r1, r2
 8000abc:	4688      	mov	r8, r1
 8000abe:	45c1      	cmp	r9, r8
 8000ac0:	41bf      	sbcs	r7, r7
 8000ac2:	1af1      	subs	r1, r6, r3
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	1bc9      	subs	r1, r1, r7
 8000ac8:	020f      	lsls	r7, r1, #8
 8000aca:	d461      	bmi.n	8000b90 <__aeabi_dadd+0x4c0>
 8000acc:	4647      	mov	r7, r8
 8000ace:	430f      	orrs	r7, r1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x404>
 8000ad2:	e0bd      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000ad4:	000e      	movs	r6, r1
 8000ad6:	4647      	mov	r7, r8
 8000ad8:	e651      	b.n	800077e <__aeabi_dadd+0xae>
 8000ada:	4cb5      	ldr	r4, [pc, #724]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x412>
 8000ae0:	e100      	b.n	8000ce4 <__aeabi_dadd+0x614>
 8000ae2:	2701      	movs	r7, #1
 8000ae4:	2938      	cmp	r1, #56	@ 0x38
 8000ae6:	dd00      	ble.n	8000aea <__aeabi_dadd+0x41a>
 8000ae8:	e6b8      	b.n	800085c <__aeabi_dadd+0x18c>
 8000aea:	2480      	movs	r4, #128	@ 0x80
 8000aec:	0424      	lsls	r4, r4, #16
 8000aee:	4326      	orrs	r6, r4
 8000af0:	e6a3      	b.n	800083a <__aeabi_dadd+0x16a>
 8000af2:	4eb0      	ldr	r6, [pc, #704]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000af4:	1ae4      	subs	r4, r4, r3
 8000af6:	4016      	ands	r6, r2
 8000af8:	077b      	lsls	r3, r7, #29
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x42e>
 8000afc:	e73f      	b.n	800097e <__aeabi_dadd+0x2ae>
 8000afe:	e743      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000b00:	000f      	movs	r7, r1
 8000b02:	0018      	movs	r0, r3
 8000b04:	3f20      	subs	r7, #32
 8000b06:	40f8      	lsrs	r0, r7
 8000b08:	4684      	mov	ip, r0
 8000b0a:	2920      	cmp	r1, #32
 8000b0c:	d003      	beq.n	8000b16 <__aeabi_dadd+0x446>
 8000b0e:	2740      	movs	r7, #64	@ 0x40
 8000b10:	1a79      	subs	r1, r7, r1
 8000b12:	408b      	lsls	r3, r1
 8000b14:	431a      	orrs	r2, r3
 8000b16:	1e53      	subs	r3, r2, #1
 8000b18:	419a      	sbcs	r2, r3
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	0017      	movs	r7, r2
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	e622      	b.n	8000768 <__aeabi_dadd+0x98>
 8000b22:	48a4      	ldr	r0, [pc, #656]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000b24:	1ae1      	subs	r1, r4, r3
 8000b26:	4010      	ands	r0, r2
 8000b28:	0747      	lsls	r7, r0, #29
 8000b2a:	08c0      	lsrs	r0, r0, #3
 8000b2c:	e707      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b2e:	0034      	movs	r4, r6
 8000b30:	4648      	mov	r0, r9
 8000b32:	4304      	orrs	r4, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x468>
 8000b36:	e0fa      	b.n	8000d2e <__aeabi_dadd+0x65e>
 8000b38:	1e4c      	subs	r4, r1, #1
 8000b3a:	2901      	cmp	r1, #1
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x470>
 8000b3e:	e0d7      	b.n	8000cf0 <__aeabi_dadd+0x620>
 8000b40:	4f9b      	ldr	r7, [pc, #620]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b42:	42b9      	cmp	r1, r7
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x478>
 8000b46:	e0e2      	b.n	8000d0e <__aeabi_dadd+0x63e>
 8000b48:	2701      	movs	r7, #1
 8000b4a:	2c38      	cmp	r4, #56	@ 0x38
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x480>
 8000b4e:	e74f      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000b50:	0021      	movs	r1, r4
 8000b52:	e73c      	b.n	80009ce <__aeabi_dadd+0x2fe>
 8000b54:	4c96      	ldr	r4, [pc, #600]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000b56:	42a1      	cmp	r1, r4
 8000b58:	d100      	bne.n	8000b5c <__aeabi_dadd+0x48c>
 8000b5a:	e0dd      	b.n	8000d18 <__aeabi_dadd+0x648>
 8000b5c:	444a      	add	r2, r9
 8000b5e:	454a      	cmp	r2, r9
 8000b60:	4180      	sbcs	r0, r0
 8000b62:	18f3      	adds	r3, r6, r3
 8000b64:	4240      	negs	r0, r0
 8000b66:	1818      	adds	r0, r3, r0
 8000b68:	07c7      	lsls	r7, r0, #31
 8000b6a:	0852      	lsrs	r2, r2, #1
 8000b6c:	4317      	orrs	r7, r2
 8000b6e:	0846      	lsrs	r6, r0, #1
 8000b70:	0752      	lsls	r2, r2, #29
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b74:	220f      	movs	r2, #15
 8000b76:	000c      	movs	r4, r1
 8000b78:	403a      	ands	r2, r7
 8000b7a:	2a04      	cmp	r2, #4
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x4b0>
 8000b7e:	e62c      	b.n	80007da <__aeabi_dadd+0x10a>
 8000b80:	0776      	lsls	r6, r6, #29
 8000b82:	08ff      	lsrs	r7, r7, #3
 8000b84:	4337      	orrs	r7, r6
 8000b86:	0900      	lsrs	r0, r0, #4
 8000b88:	e6d9      	b.n	800093e <__aeabi_dadd+0x26e>
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e6e8      	b.n	8000962 <__aeabi_dadd+0x292>
 8000b90:	4649      	mov	r1, r9
 8000b92:	1a57      	subs	r7, r2, r1
 8000b94:	42ba      	cmp	r2, r7
 8000b96:	4192      	sbcs	r2, r2
 8000b98:	1b9e      	subs	r6, r3, r6
 8000b9a:	4252      	negs	r2, r2
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	1ab6      	subs	r6, r6, r2
 8000ba0:	e5ed      	b.n	800077e <__aeabi_dadd+0xae>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_dadd+0x4d8>
 8000ba6:	e0c6      	b.n	8000d36 <__aeabi_dadd+0x666>
 8000ba8:	2f00      	cmp	r7, #0
 8000baa:	d167      	bne.n	8000c7c <__aeabi_dadd+0x5ac>
 8000bac:	2680      	movs	r6, #128	@ 0x80
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4c7f      	ldr	r4, [pc, #508]	@ (8000db0 <__aeabi_dadd+0x6e0>)
 8000bb2:	0336      	lsls	r6, r6, #12
 8000bb4:	e6d5      	b.n	8000962 <__aeabi_dadd+0x292>
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	000c      	movs	r4, r1
 8000bba:	001e      	movs	r6, r3
 8000bbc:	08d0      	lsrs	r0, r2, #3
 8000bbe:	e6e4      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000bc0:	444a      	add	r2, r9
 8000bc2:	454a      	cmp	r2, r9
 8000bc4:	4180      	sbcs	r0, r0
 8000bc6:	18f3      	adds	r3, r6, r3
 8000bc8:	4240      	negs	r0, r0
 8000bca:	1818      	adds	r0, r3, r0
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0203      	lsls	r3, r0, #8
 8000bd0:	d400      	bmi.n	8000bd4 <__aeabi_dadd+0x504>
 8000bd2:	e096      	b.n	8000d02 <__aeabi_dadd+0x632>
 8000bd4:	4b77      	ldr	r3, [pc, #476]	@ (8000db4 <__aeabi_dadd+0x6e4>)
 8000bd6:	0849      	lsrs	r1, r1, #1
 8000bd8:	4018      	ands	r0, r3
 8000bda:	07c3      	lsls	r3, r0, #31
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	0844      	lsrs	r4, r0, #1
 8000be0:	0749      	lsls	r1, r1, #29
 8000be2:	d100      	bne.n	8000be6 <__aeabi_dadd+0x516>
 8000be4:	e129      	b.n	8000e3a <__aeabi_dadd+0x76a>
 8000be6:	220f      	movs	r2, #15
 8000be8:	401a      	ands	r2, r3
 8000bea:	2a04      	cmp	r2, #4
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x520>
 8000bee:	e0ea      	b.n	8000dc6 <__aeabi_dadd+0x6f6>
 8000bf0:	1d1f      	adds	r7, r3, #4
 8000bf2:	429f      	cmp	r7, r3
 8000bf4:	41b6      	sbcs	r6, r6
 8000bf6:	4276      	negs	r6, r6
 8000bf8:	1936      	adds	r6, r6, r4
 8000bfa:	2402      	movs	r4, #2
 8000bfc:	e6c4      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	1a8f      	subs	r7, r1, r2
 8000c02:	45b9      	cmp	r9, r7
 8000c04:	4180      	sbcs	r0, r0
 8000c06:	1af6      	subs	r6, r6, r3
 8000c08:	4240      	negs	r0, r0
 8000c0a:	1a36      	subs	r6, r6, r0
 8000c0c:	0233      	lsls	r3, r6, #8
 8000c0e:	d406      	bmi.n	8000c1e <__aeabi_dadd+0x54e>
 8000c10:	0773      	lsls	r3, r6, #29
 8000c12:	08ff      	lsrs	r7, r7, #3
 8000c14:	2101      	movs	r1, #1
 8000c16:	431f      	orrs	r7, r3
 8000c18:	08f0      	lsrs	r0, r6, #3
 8000c1a:	e690      	b.n	800093e <__aeabi_dadd+0x26e>
 8000c1c:	4665      	mov	r5, ip
 8000c1e:	2401      	movs	r4, #1
 8000c20:	e5ab      	b.n	800077a <__aeabi_dadd+0xaa>
 8000c22:	464b      	mov	r3, r9
 8000c24:	0777      	lsls	r7, r6, #29
 8000c26:	08d8      	lsrs	r0, r3, #3
 8000c28:	4307      	orrs	r7, r0
 8000c2a:	08f0      	lsrs	r0, r6, #3
 8000c2c:	e6b4      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c2e:	000f      	movs	r7, r1
 8000c30:	0018      	movs	r0, r3
 8000c32:	3f20      	subs	r7, #32
 8000c34:	40f8      	lsrs	r0, r7
 8000c36:	4684      	mov	ip, r0
 8000c38:	2920      	cmp	r1, #32
 8000c3a:	d003      	beq.n	8000c44 <__aeabi_dadd+0x574>
 8000c3c:	2740      	movs	r7, #64	@ 0x40
 8000c3e:	1a79      	subs	r1, r7, r1
 8000c40:	408b      	lsls	r3, r1
 8000c42:	431a      	orrs	r2, r3
 8000c44:	1e53      	subs	r3, r2, #1
 8000c46:	419a      	sbcs	r2, r3
 8000c48:	4663      	mov	r3, ip
 8000c4a:	0017      	movs	r7, r2
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	e635      	b.n	80008bc <__aeabi_dadd+0x1ec>
 8000c50:	2500      	movs	r5, #0
 8000c52:	2400      	movs	r4, #0
 8000c54:	2600      	movs	r6, #0
 8000c56:	e684      	b.n	8000962 <__aeabi_dadd+0x292>
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0035      	movs	r5, r6
 8000c5c:	3c20      	subs	r4, #32
 8000c5e:	40e5      	lsrs	r5, r4
 8000c60:	2920      	cmp	r1, #32
 8000c62:	d005      	beq.n	8000c70 <__aeabi_dadd+0x5a0>
 8000c64:	2440      	movs	r4, #64	@ 0x40
 8000c66:	1a61      	subs	r1, r4, r1
 8000c68:	408e      	lsls	r6, r1
 8000c6a:	4649      	mov	r1, r9
 8000c6c:	4331      	orrs	r1, r6
 8000c6e:	4689      	mov	r9, r1
 8000c70:	4648      	mov	r0, r9
 8000c72:	1e41      	subs	r1, r0, #1
 8000c74:	4188      	sbcs	r0, r1
 8000c76:	0007      	movs	r7, r0
 8000c78:	432f      	orrs	r7, r5
 8000c7a:	e5ef      	b.n	800085c <__aeabi_dadd+0x18c>
 8000c7c:	08d2      	lsrs	r2, r2, #3
 8000c7e:	075f      	lsls	r7, r3, #29
 8000c80:	4665      	mov	r5, ip
 8000c82:	4317      	orrs	r7, r2
 8000c84:	08d8      	lsrs	r0, r3, #3
 8000c86:	e687      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000c88:	1a17      	subs	r7, r2, r0
 8000c8a:	42ba      	cmp	r2, r7
 8000c8c:	4192      	sbcs	r2, r2
 8000c8e:	1b9e      	subs	r6, r3, r6
 8000c90:	4252      	negs	r2, r2
 8000c92:	1ab6      	subs	r6, r6, r2
 8000c94:	0233      	lsls	r3, r6, #8
 8000c96:	d4c1      	bmi.n	8000c1c <__aeabi_dadd+0x54c>
 8000c98:	0773      	lsls	r3, r6, #29
 8000c9a:	08ff      	lsrs	r7, r7, #3
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	08f0      	lsrs	r0, r6, #3
 8000ca4:	e64b      	b.n	800093e <__aeabi_dadd+0x26e>
 8000ca6:	2f00      	cmp	r7, #0
 8000ca8:	d07b      	beq.n	8000da2 <__aeabi_dadd+0x6d2>
 8000caa:	4665      	mov	r5, ip
 8000cac:	001e      	movs	r6, r3
 8000cae:	4691      	mov	r9, r2
 8000cb0:	e63f      	b.n	8000932 <__aeabi_dadd+0x262>
 8000cb2:	1a81      	subs	r1, r0, r2
 8000cb4:	4688      	mov	r8, r1
 8000cb6:	45c1      	cmp	r9, r8
 8000cb8:	41a4      	sbcs	r4, r4
 8000cba:	1af1      	subs	r1, r6, r3
 8000cbc:	4264      	negs	r4, r4
 8000cbe:	1b09      	subs	r1, r1, r4
 8000cc0:	2480      	movs	r4, #128	@ 0x80
 8000cc2:	0424      	lsls	r4, r4, #16
 8000cc4:	4221      	tst	r1, r4
 8000cc6:	d077      	beq.n	8000db8 <__aeabi_dadd+0x6e8>
 8000cc8:	1a10      	subs	r0, r2, r0
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	4192      	sbcs	r2, r2
 8000cce:	0007      	movs	r7, r0
 8000cd0:	1b9e      	subs	r6, r3, r6
 8000cd2:	4252      	negs	r2, r2
 8000cd4:	1ab6      	subs	r6, r6, r2
 8000cd6:	4337      	orrs	r7, r6
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_dadd+0x60c>
 8000cda:	e0a0      	b.n	8000e1e <__aeabi_dadd+0x74e>
 8000cdc:	4665      	mov	r5, ip
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e63e      	b.n	8000962 <__aeabi_dadd+0x292>
 8000ce4:	075f      	lsls	r7, r3, #29
 8000ce6:	08d2      	lsrs	r2, r2, #3
 8000ce8:	4665      	mov	r5, ip
 8000cea:	4317      	orrs	r7, r2
 8000cec:	08d8      	lsrs	r0, r3, #3
 8000cee:	e653      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000cf0:	1881      	adds	r1, r0, r2
 8000cf2:	4291      	cmp	r1, r2
 8000cf4:	4192      	sbcs	r2, r2
 8000cf6:	18f0      	adds	r0, r6, r3
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	1880      	adds	r0, r0, r2
 8000cfc:	0203      	lsls	r3, r0, #8
 8000cfe:	d500      	bpl.n	8000d02 <__aeabi_dadd+0x632>
 8000d00:	e768      	b.n	8000bd4 <__aeabi_dadd+0x504>
 8000d02:	0747      	lsls	r7, r0, #29
 8000d04:	08c9      	lsrs	r1, r1, #3
 8000d06:	430f      	orrs	r7, r1
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	e617      	b.n	800093e <__aeabi_dadd+0x26e>
 8000d0e:	08d2      	lsrs	r2, r2, #3
 8000d10:	075f      	lsls	r7, r3, #29
 8000d12:	4317      	orrs	r7, r2
 8000d14:	08d8      	lsrs	r0, r3, #3
 8000d16:	e63f      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d18:	000c      	movs	r4, r1
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e620      	b.n	8000962 <__aeabi_dadd+0x292>
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d156      	bne.n	8000dd2 <__aeabi_dadd+0x702>
 8000d24:	075f      	lsls	r7, r3, #29
 8000d26:	08d2      	lsrs	r2, r2, #3
 8000d28:	4317      	orrs	r7, r2
 8000d2a:	08d8      	lsrs	r0, r3, #3
 8000d2c:	e634      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d2e:	000c      	movs	r4, r1
 8000d30:	001e      	movs	r6, r3
 8000d32:	08d0      	lsrs	r0, r2, #3
 8000d34:	e629      	b.n	800098a <__aeabi_dadd+0x2ba>
 8000d36:	08c1      	lsrs	r1, r0, #3
 8000d38:	0770      	lsls	r0, r6, #29
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	08f0      	lsrs	r0, r6, #3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d062      	beq.n	8000e08 <__aeabi_dadd+0x738>
 8000d42:	2480      	movs	r4, #128	@ 0x80
 8000d44:	0324      	lsls	r4, r4, #12
 8000d46:	4220      	tst	r0, r4
 8000d48:	d007      	beq.n	8000d5a <__aeabi_dadd+0x68a>
 8000d4a:	08de      	lsrs	r6, r3, #3
 8000d4c:	4226      	tst	r6, r4
 8000d4e:	d104      	bne.n	8000d5a <__aeabi_dadd+0x68a>
 8000d50:	4665      	mov	r5, ip
 8000d52:	0030      	movs	r0, r6
 8000d54:	08d1      	lsrs	r1, r2, #3
 8000d56:	075b      	lsls	r3, r3, #29
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	0f4f      	lsrs	r7, r1, #29
 8000d5c:	00c9      	lsls	r1, r1, #3
 8000d5e:	08c9      	lsrs	r1, r1, #3
 8000d60:	077f      	lsls	r7, r7, #29
 8000d62:	430f      	orrs	r7, r1
 8000d64:	e618      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000d66:	000c      	movs	r4, r1
 8000d68:	0030      	movs	r0, r6
 8000d6a:	3c20      	subs	r4, #32
 8000d6c:	40e0      	lsrs	r0, r4
 8000d6e:	4684      	mov	ip, r0
 8000d70:	2920      	cmp	r1, #32
 8000d72:	d005      	beq.n	8000d80 <__aeabi_dadd+0x6b0>
 8000d74:	2440      	movs	r4, #64	@ 0x40
 8000d76:	1a61      	subs	r1, r4, r1
 8000d78:	408e      	lsls	r6, r1
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	4331      	orrs	r1, r6
 8000d7e:	4689      	mov	r9, r1
 8000d80:	4648      	mov	r0, r9
 8000d82:	1e41      	subs	r1, r0, #1
 8000d84:	4188      	sbcs	r0, r1
 8000d86:	4661      	mov	r1, ip
 8000d88:	0007      	movs	r7, r0
 8000d8a:	430f      	orrs	r7, r1
 8000d8c:	e630      	b.n	80009f0 <__aeabi_dadd+0x320>
 8000d8e:	2120      	movs	r1, #32
 8000d90:	2700      	movs	r7, #0
 8000d92:	1a09      	subs	r1, r1, r0
 8000d94:	e50e      	b.n	80007b4 <__aeabi_dadd+0xe4>
 8000d96:	001e      	movs	r6, r3
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dadd+0x6ce>
 8000d9c:	e522      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000d9e:	2400      	movs	r4, #0
 8000da0:	e758      	b.n	8000c54 <__aeabi_dadd+0x584>
 8000da2:	2500      	movs	r5, #0
 8000da4:	2400      	movs	r4, #0
 8000da6:	2600      	movs	r6, #0
 8000da8:	e5db      	b.n	8000962 <__aeabi_dadd+0x292>
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	000007fe 	.word	0x000007fe
 8000db0:	000007ff 	.word	0x000007ff
 8000db4:	ff7fffff 	.word	0xff7fffff
 8000db8:	4647      	mov	r7, r8
 8000dba:	430f      	orrs	r7, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x6f0>
 8000dbe:	e747      	b.n	8000c50 <__aeabi_dadd+0x580>
 8000dc0:	000e      	movs	r6, r1
 8000dc2:	46c1      	mov	r9, r8
 8000dc4:	e5b5      	b.n	8000932 <__aeabi_dadd+0x262>
 8000dc6:	08df      	lsrs	r7, r3, #3
 8000dc8:	0764      	lsls	r4, r4, #29
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4327      	orrs	r7, r4
 8000dce:	0900      	lsrs	r0, r0, #4
 8000dd0:	e5b5      	b.n	800093e <__aeabi_dadd+0x26e>
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	08c0      	lsrs	r0, r0, #3
 8000dd6:	0777      	lsls	r7, r6, #29
 8000dd8:	4307      	orrs	r7, r0
 8000dda:	4311      	orrs	r1, r2
 8000ddc:	08f0      	lsrs	r0, r6, #3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x714>
 8000de2:	e5d9      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0309      	lsls	r1, r1, #12
 8000de8:	4208      	tst	r0, r1
 8000dea:	d007      	beq.n	8000dfc <__aeabi_dadd+0x72c>
 8000dec:	08dc      	lsrs	r4, r3, #3
 8000dee:	420c      	tst	r4, r1
 8000df0:	d104      	bne.n	8000dfc <__aeabi_dadd+0x72c>
 8000df2:	08d2      	lsrs	r2, r2, #3
 8000df4:	075b      	lsls	r3, r3, #29
 8000df6:	431a      	orrs	r2, r3
 8000df8:	0017      	movs	r7, r2
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	0f7b      	lsrs	r3, r7, #29
 8000dfe:	00ff      	lsls	r7, r7, #3
 8000e00:	08ff      	lsrs	r7, r7, #3
 8000e02:	075b      	lsls	r3, r3, #29
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e5c7      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e08:	000f      	movs	r7, r1
 8000e0a:	e5c5      	b.n	8000998 <__aeabi_dadd+0x2c8>
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	4033      	ands	r3, r6
 8000e12:	075f      	lsls	r7, r3, #29
 8000e14:	025b      	lsls	r3, r3, #9
 8000e16:	2401      	movs	r4, #1
 8000e18:	4317      	orrs	r7, r2
 8000e1a:	0b1e      	lsrs	r6, r3, #12
 8000e1c:	e5a1      	b.n	8000962 <__aeabi_dadd+0x292>
 8000e1e:	4226      	tst	r6, r4
 8000e20:	d012      	beq.n	8000e48 <__aeabi_dadd+0x778>
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <__aeabi_dadd+0x788>)
 8000e24:	4665      	mov	r5, ip
 8000e26:	0002      	movs	r2, r0
 8000e28:	2401      	movs	r4, #1
 8000e2a:	401e      	ands	r6, r3
 8000e2c:	e4e6      	b.n	80007fc <__aeabi_dadd+0x12c>
 8000e2e:	0021      	movs	r1, r4
 8000e30:	e585      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e32:	0017      	movs	r7, r2
 8000e34:	e5a8      	b.n	8000988 <__aeabi_dadd+0x2b8>
 8000e36:	003a      	movs	r2, r7
 8000e38:	e4d4      	b.n	80007e4 <__aeabi_dadd+0x114>
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	0764      	lsls	r4, r4, #29
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	0027      	movs	r7, r4
 8000e42:	2102      	movs	r1, #2
 8000e44:	0900      	lsrs	r0, r0, #4
 8000e46:	e57a      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	0777      	lsls	r7, r6, #29
 8000e4c:	4307      	orrs	r7, r0
 8000e4e:	4665      	mov	r5, ip
 8000e50:	2100      	movs	r1, #0
 8000e52:	08f0      	lsrs	r0, r6, #3
 8000e54:	e573      	b.n	800093e <__aeabi_dadd+0x26e>
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	ff7fffff 	.word	0xff7fffff

08000e5c <__aeabi_ddiv>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	46de      	mov	lr, fp
 8000e60:	4645      	mov	r5, r8
 8000e62:	4657      	mov	r7, sl
 8000e64:	464e      	mov	r6, r9
 8000e66:	b5e0      	push	{r5, r6, r7, lr}
 8000e68:	b087      	sub	sp, #28
 8000e6a:	9200      	str	r2, [sp, #0]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	030b      	lsls	r3, r1, #12
 8000e70:	0b1b      	lsrs	r3, r3, #12
 8000e72:	469b      	mov	fp, r3
 8000e74:	0fca      	lsrs	r2, r1, #31
 8000e76:	004b      	lsls	r3, r1, #1
 8000e78:	0004      	movs	r4, r0
 8000e7a:	4680      	mov	r8, r0
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	9202      	str	r2, [sp, #8]
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x28>
 8000e82:	e098      	b.n	8000fb6 <__aeabi_ddiv+0x15a>
 8000e84:	4a7c      	ldr	r2, [pc, #496]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d037      	beq.n	8000efa <__aeabi_ddiv+0x9e>
 8000e8a:	4659      	mov	r1, fp
 8000e8c:	0f42      	lsrs	r2, r0, #29
 8000e8e:	00c9      	lsls	r1, r1, #3
 8000e90:	430a      	orrs	r2, r1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0409      	lsls	r1, r1, #16
 8000e96:	4311      	orrs	r1, r2
 8000e98:	00c2      	lsls	r2, r0, #3
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4a77      	ldr	r2, [pc, #476]	@ (800107c <__aeabi_ddiv+0x220>)
 8000e9e:	4689      	mov	r9, r1
 8000ea0:	4692      	mov	sl, r2
 8000ea2:	449a      	add	sl, r3
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	9303      	str	r3, [sp, #12]
 8000eaa:	9e00      	ldr	r6, [sp, #0]
 8000eac:	9f01      	ldr	r7, [sp, #4]
 8000eae:	033b      	lsls	r3, r7, #12
 8000eb0:	0b1b      	lsrs	r3, r3, #12
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	007b      	lsls	r3, r7, #1
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	0d5b      	lsrs	r3, r3, #21
 8000eba:	0ffd      	lsrs	r5, r7, #31
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d059      	beq.n	8000f74 <__aeabi_ddiv+0x118>
 8000ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d048      	beq.n	8000f58 <__aeabi_ddiv+0xfc>
 8000ec6:	4659      	mov	r1, fp
 8000ec8:	0f72      	lsrs	r2, r6, #29
 8000eca:	00c9      	lsls	r1, r1, #3
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	0409      	lsls	r1, r1, #16
 8000ed2:	4311      	orrs	r1, r2
 8000ed4:	468b      	mov	fp, r1
 8000ed6:	4969      	ldr	r1, [pc, #420]	@ (800107c <__aeabi_ddiv+0x220>)
 8000ed8:	00f2      	lsls	r2, r6, #3
 8000eda:	468c      	mov	ip, r1
 8000edc:	4651      	mov	r1, sl
 8000ede:	4463      	add	r3, ip
 8000ee0:	1acb      	subs	r3, r1, r3
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	9e02      	ldr	r6, [sp, #8]
 8000ee8:	406e      	eors	r6, r5
 8000eea:	b2f6      	uxtb	r6, r6
 8000eec:	2c0f      	cmp	r4, #15
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x96>
 8000ef0:	e0ce      	b.n	8001090 <__aeabi_ddiv+0x234>
 8000ef2:	4b63      	ldr	r3, [pc, #396]	@ (8001080 <__aeabi_ddiv+0x224>)
 8000ef4:	00a4      	lsls	r4, r4, #2
 8000ef6:	591b      	ldr	r3, [r3, r4]
 8000ef8:	469f      	mov	pc, r3
 8000efa:	465a      	mov	r2, fp
 8000efc:	4302      	orrs	r2, r0
 8000efe:	4691      	mov	r9, r2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_ddiv+0xa8>
 8000f02:	e090      	b.n	8001026 <__aeabi_ddiv+0x1ca>
 8000f04:	469a      	mov	sl, r3
 8000f06:	2302      	movs	r3, #2
 8000f08:	4690      	mov	r8, r2
 8000f0a:	2408      	movs	r4, #8
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	e7cc      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8000f10:	46cb      	mov	fp, r9
 8000f12:	4642      	mov	r2, r8
 8000f14:	9d02      	ldr	r5, [sp, #8]
 8000f16:	9903      	ldr	r1, [sp, #12]
 8000f18:	2902      	cmp	r1, #2
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xc2>
 8000f1c:	e1de      	b.n	80012dc <__aeabi_ddiv+0x480>
 8000f1e:	2903      	cmp	r1, #3
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0xc8>
 8000f22:	e08d      	b.n	8001040 <__aeabi_ddiv+0x1e4>
 8000f24:	2901      	cmp	r1, #1
 8000f26:	d000      	beq.n	8000f2a <__aeabi_ddiv+0xce>
 8000f28:	e179      	b.n	800121e <__aeabi_ddiv+0x3c2>
 8000f2a:	002e      	movs	r6, r5
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2400      	movs	r4, #0
 8000f32:	4690      	mov	r8, r2
 8000f34:	051b      	lsls	r3, r3, #20
 8000f36:	4323      	orrs	r3, r4
 8000f38:	07f6      	lsls	r6, r6, #31
 8000f3a:	4333      	orrs	r3, r6
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	0019      	movs	r1, r3
 8000f40:	b007      	add	sp, #28
 8000f42:	bcf0      	pop	{r4, r5, r6, r7}
 8000f44:	46bb      	mov	fp, r7
 8000f46:	46b2      	mov	sl, r6
 8000f48:	46a9      	mov	r9, r5
 8000f4a:	46a0      	mov	r8, r4
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2400      	movs	r4, #0
 8000f52:	4690      	mov	r8, r2
 8000f54:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8000f56:	e7ed      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8000f58:	465a      	mov	r2, fp
 8000f5a:	9b00      	ldr	r3, [sp, #0]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	4b49      	ldr	r3, [pc, #292]	@ (8001084 <__aeabi_ddiv+0x228>)
 8000f60:	469c      	mov	ip, r3
 8000f62:	44e2      	add	sl, ip
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	d159      	bne.n	800101c <__aeabi_ddiv+0x1c0>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	469b      	mov	fp, r3
 8000f72:	e7b8      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000f74:	465a      	mov	r2, fp
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	d049      	beq.n	8001010 <__aeabi_ddiv+0x1b4>
 8000f7c:	465b      	mov	r3, fp
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x128>
 8000f82:	e19c      	b.n	80012be <__aeabi_ddiv+0x462>
 8000f84:	4658      	mov	r0, fp
 8000f86:	f7ff fa7b 	bl	8000480 <__clzsi2>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	3a0b      	subs	r2, #11
 8000f90:	271d      	movs	r7, #29
 8000f92:	9e00      	ldr	r6, [sp, #0]
 8000f94:	1aba      	subs	r2, r7, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	4658      	mov	r0, fp
 8000f9a:	40d6      	lsrs	r6, r2
 8000f9c:	3908      	subs	r1, #8
 8000f9e:	4088      	lsls	r0, r1
 8000fa0:	0032      	movs	r2, r6
 8000fa2:	4302      	orrs	r2, r0
 8000fa4:	4693      	mov	fp, r2
 8000fa6:	9a00      	ldr	r2, [sp, #0]
 8000fa8:	408a      	lsls	r2, r1
 8000faa:	4937      	ldr	r1, [pc, #220]	@ (8001088 <__aeabi_ddiv+0x22c>)
 8000fac:	4453      	add	r3, sl
 8000fae:	468a      	mov	sl, r1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	449a      	add	sl, r3
 8000fb4:	e797      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	4699      	mov	r9, r3
 8000fbc:	d021      	beq.n	8001002 <__aeabi_ddiv+0x1a6>
 8000fbe:	465b      	mov	r3, fp
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x16a>
 8000fc4:	e169      	b.n	800129a <__aeabi_ddiv+0x43e>
 8000fc6:	4658      	mov	r0, fp
 8000fc8:	f7ff fa5a 	bl	8000480 <__clzsi2>
 8000fcc:	230b      	movs	r3, #11
 8000fce:	425b      	negs	r3, r3
 8000fd0:	469c      	mov	ip, r3
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	4484      	add	ip, r0
 8000fd6:	4666      	mov	r6, ip
 8000fd8:	231d      	movs	r3, #29
 8000fda:	1b9b      	subs	r3, r3, r6
 8000fdc:	0026      	movs	r6, r4
 8000fde:	0011      	movs	r1, r2
 8000fe0:	4658      	mov	r0, fp
 8000fe2:	40de      	lsrs	r6, r3
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	4088      	lsls	r0, r1
 8000fe8:	0033      	movs	r3, r6
 8000fea:	4303      	orrs	r3, r0
 8000fec:	4699      	mov	r9, r3
 8000fee:	0023      	movs	r3, r4
 8000ff0:	408b      	lsls	r3, r1
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4b25      	ldr	r3, [pc, #148]	@ (800108c <__aeabi_ddiv+0x230>)
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	469a      	mov	sl, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	e753      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001002:	2300      	movs	r3, #0
 8001004:	4698      	mov	r8, r3
 8001006:	469a      	mov	sl, r3
 8001008:	3301      	adds	r3, #1
 800100a:	2404      	movs	r4, #4
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	e74c      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001010:	2301      	movs	r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	2300      	movs	r3, #0
 8001016:	2101      	movs	r1, #1
 8001018:	469b      	mov	fp, r3
 800101a:	e764      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 800101c:	2303      	movs	r3, #3
 800101e:	0032      	movs	r2, r6
 8001020:	2103      	movs	r1, #3
 8001022:	431c      	orrs	r4, r3
 8001024:	e75f      	b.n	8000ee6 <__aeabi_ddiv+0x8a>
 8001026:	469a      	mov	sl, r3
 8001028:	2303      	movs	r3, #3
 800102a:	46d9      	mov	r9, fp
 800102c:	240c      	movs	r4, #12
 800102e:	9303      	str	r3, [sp, #12]
 8001030:	e73b      	b.n	8000eaa <__aeabi_ddiv+0x4e>
 8001032:	2300      	movs	r3, #0
 8001034:	2480      	movs	r4, #128	@ 0x80
 8001036:	4698      	mov	r8, r3
 8001038:	2600      	movs	r6, #0
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <__aeabi_ddiv+0x21c>)
 800103c:	0324      	lsls	r4, r4, #12
 800103e:	e779      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001040:	2480      	movs	r4, #128	@ 0x80
 8001042:	465b      	mov	r3, fp
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	431c      	orrs	r4, r3
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	002e      	movs	r6, r5
 800104c:	4690      	mov	r8, r2
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001050:	0b24      	lsrs	r4, r4, #12
 8001052:	e76f      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	464b      	mov	r3, r9
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	4223      	tst	r3, r4
 800105c:	d002      	beq.n	8001064 <__aeabi_ddiv+0x208>
 800105e:	465b      	mov	r3, fp
 8001060:	4223      	tst	r3, r4
 8001062:	d0f0      	beq.n	8001046 <__aeabi_ddiv+0x1ea>
 8001064:	2480      	movs	r4, #128	@ 0x80
 8001066:	464b      	mov	r3, r9
 8001068:	0324      	lsls	r4, r4, #12
 800106a:	431c      	orrs	r4, r3
 800106c:	0324      	lsls	r4, r4, #12
 800106e:	9e02      	ldr	r6, [sp, #8]
 8001070:	4b01      	ldr	r3, [pc, #4]	@ (8001078 <__aeabi_ddiv+0x21c>)
 8001072:	0b24      	lsrs	r4, r4, #12
 8001074:	e75e      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	000007ff 	.word	0x000007ff
 800107c:	fffffc01 	.word	0xfffffc01
 8001080:	0801af8c 	.word	0x0801af8c
 8001084:	fffff801 	.word	0xfffff801
 8001088:	000003f3 	.word	0x000003f3
 800108c:	fffffc0d 	.word	0xfffffc0d
 8001090:	45cb      	cmp	fp, r9
 8001092:	d200      	bcs.n	8001096 <__aeabi_ddiv+0x23a>
 8001094:	e0f8      	b.n	8001288 <__aeabi_ddiv+0x42c>
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x23e>
 8001098:	e0f3      	b.n	8001282 <__aeabi_ddiv+0x426>
 800109a:	2301      	movs	r3, #1
 800109c:	425b      	negs	r3, r3
 800109e:	469c      	mov	ip, r3
 80010a0:	4644      	mov	r4, r8
 80010a2:	4648      	mov	r0, r9
 80010a4:	2500      	movs	r5, #0
 80010a6:	44e2      	add	sl, ip
 80010a8:	465b      	mov	r3, fp
 80010aa:	0e17      	lsrs	r7, r2, #24
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	431f      	orrs	r7, r3
 80010b0:	0c19      	lsrs	r1, r3, #16
 80010b2:	043b      	lsls	r3, r7, #16
 80010b4:	0212      	lsls	r2, r2, #8
 80010b6:	9700      	str	r7, [sp, #0]
 80010b8:	0c1f      	lsrs	r7, r3, #16
 80010ba:	4691      	mov	r9, r2
 80010bc:	9102      	str	r1, [sp, #8]
 80010be:	9703      	str	r7, [sp, #12]
 80010c0:	f7ff f8b0 	bl	8000224 <__aeabi_uidivmod>
 80010c4:	0002      	movs	r2, r0
 80010c6:	437a      	muls	r2, r7
 80010c8:	040b      	lsls	r3, r1, #16
 80010ca:	0c21      	lsrs	r1, r4, #16
 80010cc:	4680      	mov	r8, r0
 80010ce:	4319      	orrs	r1, r3
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d909      	bls.n	80010e8 <__aeabi_ddiv+0x28c>
 80010d4:	9f00      	ldr	r7, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	46bc      	mov	ip, r7
 80010da:	425b      	negs	r3, r3
 80010dc:	4461      	add	r1, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	44e0      	add	r8, ip
 80010e2:	428f      	cmp	r7, r1
 80010e4:	d800      	bhi.n	80010e8 <__aeabi_ddiv+0x28c>
 80010e6:	e15c      	b.n	80013a2 <__aeabi_ddiv+0x546>
 80010e8:	1a88      	subs	r0, r1, r2
 80010ea:	9902      	ldr	r1, [sp, #8]
 80010ec:	f7ff f89a 	bl	8000224 <__aeabi_uidivmod>
 80010f0:	9a03      	ldr	r2, [sp, #12]
 80010f2:	0424      	lsls	r4, r4, #16
 80010f4:	4342      	muls	r2, r0
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	0c24      	lsrs	r4, r4, #16
 80010fa:	0003      	movs	r3, r0
 80010fc:	430c      	orrs	r4, r1
 80010fe:	42a2      	cmp	r2, r4
 8001100:	d906      	bls.n	8001110 <__aeabi_ddiv+0x2b4>
 8001102:	9900      	ldr	r1, [sp, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	468c      	mov	ip, r1
 8001108:	4464      	add	r4, ip
 800110a:	42a1      	cmp	r1, r4
 800110c:	d800      	bhi.n	8001110 <__aeabi_ddiv+0x2b4>
 800110e:	e142      	b.n	8001396 <__aeabi_ddiv+0x53a>
 8001110:	1aa0      	subs	r0, r4, r2
 8001112:	4642      	mov	r2, r8
 8001114:	0412      	lsls	r2, r2, #16
 8001116:	431a      	orrs	r2, r3
 8001118:	4693      	mov	fp, r2
 800111a:	464b      	mov	r3, r9
 800111c:	4659      	mov	r1, fp
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	001f      	movs	r7, r3
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	040b      	lsls	r3, r1, #16
 8001126:	4649      	mov	r1, r9
 8001128:	0409      	lsls	r1, r1, #16
 800112a:	0c09      	lsrs	r1, r1, #16
 800112c:	000c      	movs	r4, r1
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	435c      	muls	r4, r3
 8001132:	0c12      	lsrs	r2, r2, #16
 8001134:	437b      	muls	r3, r7
 8001136:	4688      	mov	r8, r1
 8001138:	4351      	muls	r1, r2
 800113a:	437a      	muls	r2, r7
 800113c:	0c27      	lsrs	r7, r4, #16
 800113e:	46bc      	mov	ip, r7
 8001140:	185b      	adds	r3, r3, r1
 8001142:	4463      	add	r3, ip
 8001144:	4299      	cmp	r1, r3
 8001146:	d903      	bls.n	8001150 <__aeabi_ddiv+0x2f4>
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0249      	lsls	r1, r1, #9
 800114c:	468c      	mov	ip, r1
 800114e:	4462      	add	r2, ip
 8001150:	0c19      	lsrs	r1, r3, #16
 8001152:	0424      	lsls	r4, r4, #16
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	0c24      	lsrs	r4, r4, #16
 8001158:	188a      	adds	r2, r1, r2
 800115a:	191c      	adds	r4, r3, r4
 800115c:	4290      	cmp	r0, r2
 800115e:	d302      	bcc.n	8001166 <__aeabi_ddiv+0x30a>
 8001160:	d116      	bne.n	8001190 <__aeabi_ddiv+0x334>
 8001162:	42a5      	cmp	r5, r4
 8001164:	d214      	bcs.n	8001190 <__aeabi_ddiv+0x334>
 8001166:	465b      	mov	r3, fp
 8001168:	9f00      	ldr	r7, [sp, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	444d      	add	r5, r9
 800116e:	9305      	str	r3, [sp, #20]
 8001170:	454d      	cmp	r5, r9
 8001172:	419b      	sbcs	r3, r3
 8001174:	46bc      	mov	ip, r7
 8001176:	425b      	negs	r3, r3
 8001178:	4463      	add	r3, ip
 800117a:	18c0      	adds	r0, r0, r3
 800117c:	4287      	cmp	r7, r0
 800117e:	d300      	bcc.n	8001182 <__aeabi_ddiv+0x326>
 8001180:	e102      	b.n	8001388 <__aeabi_ddiv+0x52c>
 8001182:	4282      	cmp	r2, r0
 8001184:	d900      	bls.n	8001188 <__aeabi_ddiv+0x32c>
 8001186:	e129      	b.n	80013dc <__aeabi_ddiv+0x580>
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x330>
 800118a:	e124      	b.n	80013d6 <__aeabi_ddiv+0x57a>
 800118c:	9b05      	ldr	r3, [sp, #20]
 800118e:	469b      	mov	fp, r3
 8001190:	1b2c      	subs	r4, r5, r4
 8001192:	42a5      	cmp	r5, r4
 8001194:	41ad      	sbcs	r5, r5
 8001196:	9b00      	ldr	r3, [sp, #0]
 8001198:	1a80      	subs	r0, r0, r2
 800119a:	426d      	negs	r5, r5
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	4283      	cmp	r3, r0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x348>
 80011a2:	e10f      	b.n	80013c4 <__aeabi_ddiv+0x568>
 80011a4:	9902      	ldr	r1, [sp, #8]
 80011a6:	f7ff f83d 	bl	8000224 <__aeabi_uidivmod>
 80011aa:	9a03      	ldr	r2, [sp, #12]
 80011ac:	040b      	lsls	r3, r1, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0c21      	lsrs	r1, r4, #16
 80011b2:	0005      	movs	r5, r0
 80011b4:	4319      	orrs	r1, r3
 80011b6:	428a      	cmp	r2, r1
 80011b8:	d900      	bls.n	80011bc <__aeabi_ddiv+0x360>
 80011ba:	e0cb      	b.n	8001354 <__aeabi_ddiv+0x4f8>
 80011bc:	1a88      	subs	r0, r1, r2
 80011be:	9902      	ldr	r1, [sp, #8]
 80011c0:	f7ff f830 	bl	8000224 <__aeabi_uidivmod>
 80011c4:	9a03      	ldr	r2, [sp, #12]
 80011c6:	0424      	lsls	r4, r4, #16
 80011c8:	4342      	muls	r2, r0
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	0c24      	lsrs	r4, r4, #16
 80011ce:	0003      	movs	r3, r0
 80011d0:	430c      	orrs	r4, r1
 80011d2:	42a2      	cmp	r2, r4
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x37c>
 80011d6:	e0ca      	b.n	800136e <__aeabi_ddiv+0x512>
 80011d8:	4641      	mov	r1, r8
 80011da:	1aa4      	subs	r4, r4, r2
 80011dc:	042a      	lsls	r2, r5, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	9f04      	ldr	r7, [sp, #16]
 80011e2:	0413      	lsls	r3, r2, #16
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	4359      	muls	r1, r3
 80011e8:	4640      	mov	r0, r8
 80011ea:	437b      	muls	r3, r7
 80011ec:	469c      	mov	ip, r3
 80011ee:	0c15      	lsrs	r5, r2, #16
 80011f0:	4368      	muls	r0, r5
 80011f2:	0c0b      	lsrs	r3, r1, #16
 80011f4:	4484      	add	ip, r0
 80011f6:	4463      	add	r3, ip
 80011f8:	437d      	muls	r5, r7
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d903      	bls.n	8001206 <__aeabi_ddiv+0x3aa>
 80011fe:	2080      	movs	r0, #128	@ 0x80
 8001200:	0240      	lsls	r0, r0, #9
 8001202:	4684      	mov	ip, r0
 8001204:	4465      	add	r5, ip
 8001206:	0c18      	lsrs	r0, r3, #16
 8001208:	0409      	lsls	r1, r1, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	1940      	adds	r0, r0, r5
 8001210:	185b      	adds	r3, r3, r1
 8001212:	4284      	cmp	r4, r0
 8001214:	d327      	bcc.n	8001266 <__aeabi_ddiv+0x40a>
 8001216:	d023      	beq.n	8001260 <__aeabi_ddiv+0x404>
 8001218:	2301      	movs	r3, #1
 800121a:	0035      	movs	r5, r6
 800121c:	431a      	orrs	r2, r3
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <__aeabi_ddiv+0x614>)
 8001220:	4453      	add	r3, sl
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd60      	ble.n	80012e8 <__aeabi_ddiv+0x48c>
 8001226:	0751      	lsls	r1, r2, #29
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0x3d0>
 800122a:	e086      	b.n	800133a <__aeabi_ddiv+0x4de>
 800122c:	002e      	movs	r6, r5
 800122e:	08d1      	lsrs	r1, r2, #3
 8001230:	465a      	mov	r2, fp
 8001232:	01d2      	lsls	r2, r2, #7
 8001234:	d506      	bpl.n	8001244 <__aeabi_ddiv+0x3e8>
 8001236:	465a      	mov	r2, fp
 8001238:	4b8e      	ldr	r3, [pc, #568]	@ (8001474 <__aeabi_ddiv+0x618>)
 800123a:	401a      	ands	r2, r3
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	4693      	mov	fp, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4453      	add	r3, sl
 8001244:	4a8c      	ldr	r2, [pc, #560]	@ (8001478 <__aeabi_ddiv+0x61c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	dd00      	ble.n	800124c <__aeabi_ddiv+0x3f0>
 800124a:	e680      	b.n	8000f4e <__aeabi_ddiv+0xf2>
 800124c:	465a      	mov	r2, fp
 800124e:	0752      	lsls	r2, r2, #29
 8001250:	430a      	orrs	r2, r1
 8001252:	4690      	mov	r8, r2
 8001254:	465a      	mov	r2, fp
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	0254      	lsls	r4, r2, #9
 800125a:	0b24      	lsrs	r4, r4, #12
 800125c:	0d5b      	lsrs	r3, r3, #21
 800125e:	e669      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 8001260:	0035      	movs	r5, r6
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0db      	beq.n	800121e <__aeabi_ddiv+0x3c2>
 8001266:	9d00      	ldr	r5, [sp, #0]
 8001268:	1e51      	subs	r1, r2, #1
 800126a:	46ac      	mov	ip, r5
 800126c:	4464      	add	r4, ip
 800126e:	42ac      	cmp	r4, r5
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x418>
 8001272:	e09e      	b.n	80013b2 <__aeabi_ddiv+0x556>
 8001274:	4284      	cmp	r4, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x41e>
 8001278:	e0e1      	b.n	800143e <__aeabi_ddiv+0x5e2>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x422>
 800127c:	e0ee      	b.n	800145c <__aeabi_ddiv+0x600>
 800127e:	000a      	movs	r2, r1
 8001280:	e7ca      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 8001282:	4542      	cmp	r2, r8
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x42c>
 8001286:	e708      	b.n	800109a <__aeabi_ddiv+0x23e>
 8001288:	464b      	mov	r3, r9
 800128a:	07dc      	lsls	r4, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	4643      	mov	r3, r8
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	431c      	orrs	r4, r3
 8001294:	4643      	mov	r3, r8
 8001296:	07dd      	lsls	r5, r3, #31
 8001298:	e706      	b.n	80010a8 <__aeabi_ddiv+0x24c>
 800129a:	f7ff f8f1 	bl	8000480 <__clzsi2>
 800129e:	2315      	movs	r3, #21
 80012a0:	469c      	mov	ip, r3
 80012a2:	4484      	add	ip, r0
 80012a4:	0002      	movs	r2, r0
 80012a6:	4663      	mov	r3, ip
 80012a8:	3220      	adds	r2, #32
 80012aa:	2b1c      	cmp	r3, #28
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_ddiv+0x454>
 80012ae:	e692      	b.n	8000fd6 <__aeabi_ddiv+0x17a>
 80012b0:	0023      	movs	r3, r4
 80012b2:	3808      	subs	r0, #8
 80012b4:	4083      	lsls	r3, r0
 80012b6:	4699      	mov	r9, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	4698      	mov	r8, r3
 80012bc:	e69a      	b.n	8000ff4 <__aeabi_ddiv+0x198>
 80012be:	f7ff f8df 	bl	8000480 <__clzsi2>
 80012c2:	0002      	movs	r2, r0
 80012c4:	0003      	movs	r3, r0
 80012c6:	3215      	adds	r2, #21
 80012c8:	3320      	adds	r3, #32
 80012ca:	2a1c      	cmp	r2, #28
 80012cc:	dc00      	bgt.n	80012d0 <__aeabi_ddiv+0x474>
 80012ce:	e65f      	b.n	8000f90 <__aeabi_ddiv+0x134>
 80012d0:	9900      	ldr	r1, [sp, #0]
 80012d2:	3808      	subs	r0, #8
 80012d4:	4081      	lsls	r1, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	468b      	mov	fp, r1
 80012da:	e666      	b.n	8000faa <__aeabi_ddiv+0x14e>
 80012dc:	2200      	movs	r2, #0
 80012de:	002e      	movs	r6, r5
 80012e0:	2400      	movs	r4, #0
 80012e2:	4690      	mov	r8, r2
 80012e4:	4b65      	ldr	r3, [pc, #404]	@ (800147c <__aeabi_ddiv+0x620>)
 80012e6:	e625      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 80012e8:	002e      	movs	r6, r5
 80012ea:	2101      	movs	r1, #1
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	2938      	cmp	r1, #56	@ 0x38
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_ddiv+0x498>
 80012f2:	e61b      	b.n	8000f2c <__aeabi_ddiv+0xd0>
 80012f4:	291f      	cmp	r1, #31
 80012f6:	dc7e      	bgt.n	80013f6 <__aeabi_ddiv+0x59a>
 80012f8:	4861      	ldr	r0, [pc, #388]	@ (8001480 <__aeabi_ddiv+0x624>)
 80012fa:	0014      	movs	r4, r2
 80012fc:	4450      	add	r0, sl
 80012fe:	465b      	mov	r3, fp
 8001300:	4082      	lsls	r2, r0
 8001302:	4083      	lsls	r3, r0
 8001304:	40cc      	lsrs	r4, r1
 8001306:	1e50      	subs	r0, r2, #1
 8001308:	4182      	sbcs	r2, r0
 800130a:	4323      	orrs	r3, r4
 800130c:	431a      	orrs	r2, r3
 800130e:	465b      	mov	r3, fp
 8001310:	40cb      	lsrs	r3, r1
 8001312:	0751      	lsls	r1, r2, #29
 8001314:	d009      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 8001316:	210f      	movs	r1, #15
 8001318:	4011      	ands	r1, r2
 800131a:	2904      	cmp	r1, #4
 800131c:	d005      	beq.n	800132a <__aeabi_ddiv+0x4ce>
 800131e:	1d11      	adds	r1, r2, #4
 8001320:	4291      	cmp	r1, r2
 8001322:	4192      	sbcs	r2, r2
 8001324:	4252      	negs	r2, r2
 8001326:	189b      	adds	r3, r3, r2
 8001328:	000a      	movs	r2, r1
 800132a:	0219      	lsls	r1, r3, #8
 800132c:	d400      	bmi.n	8001330 <__aeabi_ddiv+0x4d4>
 800132e:	e09b      	b.n	8001468 <__aeabi_ddiv+0x60c>
 8001330:	2200      	movs	r2, #0
 8001332:	2301      	movs	r3, #1
 8001334:	2400      	movs	r4, #0
 8001336:	4690      	mov	r8, r2
 8001338:	e5fc      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800133a:	210f      	movs	r1, #15
 800133c:	4011      	ands	r1, r2
 800133e:	2904      	cmp	r1, #4
 8001340:	d100      	bne.n	8001344 <__aeabi_ddiv+0x4e8>
 8001342:	e773      	b.n	800122c <__aeabi_ddiv+0x3d0>
 8001344:	1d11      	adds	r1, r2, #4
 8001346:	4291      	cmp	r1, r2
 8001348:	4192      	sbcs	r2, r2
 800134a:	4252      	negs	r2, r2
 800134c:	002e      	movs	r6, r5
 800134e:	08c9      	lsrs	r1, r1, #3
 8001350:	4493      	add	fp, r2
 8001352:	e76d      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 8001354:	9b00      	ldr	r3, [sp, #0]
 8001356:	3d01      	subs	r5, #1
 8001358:	469c      	mov	ip, r3
 800135a:	4461      	add	r1, ip
 800135c:	428b      	cmp	r3, r1
 800135e:	d900      	bls.n	8001362 <__aeabi_ddiv+0x506>
 8001360:	e72c      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001362:	428a      	cmp	r2, r1
 8001364:	d800      	bhi.n	8001368 <__aeabi_ddiv+0x50c>
 8001366:	e729      	b.n	80011bc <__aeabi_ddiv+0x360>
 8001368:	1e85      	subs	r5, r0, #2
 800136a:	4461      	add	r1, ip
 800136c:	e726      	b.n	80011bc <__aeabi_ddiv+0x360>
 800136e:	9900      	ldr	r1, [sp, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	468c      	mov	ip, r1
 8001374:	4464      	add	r4, ip
 8001376:	42a1      	cmp	r1, r4
 8001378:	d900      	bls.n	800137c <__aeabi_ddiv+0x520>
 800137a:	e72d      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 800137c:	42a2      	cmp	r2, r4
 800137e:	d800      	bhi.n	8001382 <__aeabi_ddiv+0x526>
 8001380:	e72a      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001382:	1e83      	subs	r3, r0, #2
 8001384:	4464      	add	r4, ip
 8001386:	e727      	b.n	80011d8 <__aeabi_ddiv+0x37c>
 8001388:	4287      	cmp	r7, r0
 800138a:	d000      	beq.n	800138e <__aeabi_ddiv+0x532>
 800138c:	e6fe      	b.n	800118c <__aeabi_ddiv+0x330>
 800138e:	45a9      	cmp	r9, r5
 8001390:	d900      	bls.n	8001394 <__aeabi_ddiv+0x538>
 8001392:	e6fb      	b.n	800118c <__aeabi_ddiv+0x330>
 8001394:	e6f5      	b.n	8001182 <__aeabi_ddiv+0x326>
 8001396:	42a2      	cmp	r2, r4
 8001398:	d800      	bhi.n	800139c <__aeabi_ddiv+0x540>
 800139a:	e6b9      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 800139c:	1e83      	subs	r3, r0, #2
 800139e:	4464      	add	r4, ip
 80013a0:	e6b6      	b.n	8001110 <__aeabi_ddiv+0x2b4>
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x54c>
 80013a6:	e69f      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1e83      	subs	r3, r0, #2
 80013ac:	4698      	mov	r8, r3
 80013ae:	4461      	add	r1, ip
 80013b0:	e69a      	b.n	80010e8 <__aeabi_ddiv+0x28c>
 80013b2:	000a      	movs	r2, r1
 80013b4:	4284      	cmp	r4, r0
 80013b6:	d000      	beq.n	80013ba <__aeabi_ddiv+0x55e>
 80013b8:	e72e      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013ba:	454b      	cmp	r3, r9
 80013bc:	d000      	beq.n	80013c0 <__aeabi_ddiv+0x564>
 80013be:	e72b      	b.n	8001218 <__aeabi_ddiv+0x3bc>
 80013c0:	0035      	movs	r5, r6
 80013c2:	e72c      	b.n	800121e <__aeabi_ddiv+0x3c2>
 80013c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <__aeabi_ddiv+0x614>)
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <__aeabi_ddiv+0x628>)
 80013c8:	4453      	add	r3, sl
 80013ca:	4592      	cmp	sl, r2
 80013cc:	db43      	blt.n	8001456 <__aeabi_ddiv+0x5fa>
 80013ce:	2201      	movs	r2, #1
 80013d0:	2100      	movs	r1, #0
 80013d2:	4493      	add	fp, r2
 80013d4:	e72c      	b.n	8001230 <__aeabi_ddiv+0x3d4>
 80013d6:	42ac      	cmp	r4, r5
 80013d8:	d800      	bhi.n	80013dc <__aeabi_ddiv+0x580>
 80013da:	e6d7      	b.n	800118c <__aeabi_ddiv+0x330>
 80013dc:	2302      	movs	r3, #2
 80013de:	425b      	negs	r3, r3
 80013e0:	469c      	mov	ip, r3
 80013e2:	9900      	ldr	r1, [sp, #0]
 80013e4:	444d      	add	r5, r9
 80013e6:	454d      	cmp	r5, r9
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	44e3      	add	fp, ip
 80013ec:	468c      	mov	ip, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	4463      	add	r3, ip
 80013f2:	18c0      	adds	r0, r0, r3
 80013f4:	e6cc      	b.n	8001190 <__aeabi_ddiv+0x334>
 80013f6:	201f      	movs	r0, #31
 80013f8:	4240      	negs	r0, r0
 80013fa:	1ac3      	subs	r3, r0, r3
 80013fc:	4658      	mov	r0, fp
 80013fe:	40d8      	lsrs	r0, r3
 8001400:	2920      	cmp	r1, #32
 8001402:	d004      	beq.n	800140e <__aeabi_ddiv+0x5b2>
 8001404:	4659      	mov	r1, fp
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <__aeabi_ddiv+0x62c>)
 8001408:	4453      	add	r3, sl
 800140a:	4099      	lsls	r1, r3
 800140c:	430a      	orrs	r2, r1
 800140e:	1e53      	subs	r3, r2, #1
 8001410:	419a      	sbcs	r2, r3
 8001412:	2307      	movs	r3, #7
 8001414:	0019      	movs	r1, r3
 8001416:	4302      	orrs	r2, r0
 8001418:	2400      	movs	r4, #0
 800141a:	4011      	ands	r1, r2
 800141c:	4213      	tst	r3, r2
 800141e:	d009      	beq.n	8001434 <__aeabi_ddiv+0x5d8>
 8001420:	3308      	adds	r3, #8
 8001422:	4013      	ands	r3, r2
 8001424:	2b04      	cmp	r3, #4
 8001426:	d01d      	beq.n	8001464 <__aeabi_ddiv+0x608>
 8001428:	1d13      	adds	r3, r2, #4
 800142a:	4293      	cmp	r3, r2
 800142c:	4189      	sbcs	r1, r1
 800142e:	001a      	movs	r2, r3
 8001430:	4249      	negs	r1, r1
 8001432:	0749      	lsls	r1, r1, #29
 8001434:	08d2      	lsrs	r2, r2, #3
 8001436:	430a      	orrs	r2, r1
 8001438:	4690      	mov	r8, r2
 800143a:	2300      	movs	r3, #0
 800143c:	e57a      	b.n	8000f34 <__aeabi_ddiv+0xd8>
 800143e:	4649      	mov	r1, r9
 8001440:	9f00      	ldr	r7, [sp, #0]
 8001442:	004d      	lsls	r5, r1, #1
 8001444:	454d      	cmp	r5, r9
 8001446:	4189      	sbcs	r1, r1
 8001448:	46bc      	mov	ip, r7
 800144a:	4249      	negs	r1, r1
 800144c:	4461      	add	r1, ip
 800144e:	46a9      	mov	r9, r5
 8001450:	3a02      	subs	r2, #2
 8001452:	1864      	adds	r4, r4, r1
 8001454:	e7ae      	b.n	80013b4 <__aeabi_ddiv+0x558>
 8001456:	2201      	movs	r2, #1
 8001458:	4252      	negs	r2, r2
 800145a:	e746      	b.n	80012ea <__aeabi_ddiv+0x48e>
 800145c:	4599      	cmp	r9, r3
 800145e:	d3ee      	bcc.n	800143e <__aeabi_ddiv+0x5e2>
 8001460:	000a      	movs	r2, r1
 8001462:	e7aa      	b.n	80013ba <__aeabi_ddiv+0x55e>
 8001464:	2100      	movs	r1, #0
 8001466:	e7e5      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001468:	0759      	lsls	r1, r3, #29
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	0b1c      	lsrs	r4, r3, #12
 800146e:	e7e1      	b.n	8001434 <__aeabi_ddiv+0x5d8>
 8001470:	000003ff 	.word	0x000003ff
 8001474:	feffffff 	.word	0xfeffffff
 8001478:	000007fe 	.word	0x000007fe
 800147c:	000007ff 	.word	0x000007ff
 8001480:	0000041e 	.word	0x0000041e
 8001484:	fffffc02 	.word	0xfffffc02
 8001488:	0000043e 	.word	0x0000043e

0800148c <__eqdf2>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	46de      	mov	lr, fp
 8001492:	464e      	mov	r6, r9
 8001494:	4645      	mov	r5, r8
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	000d      	movs	r5, r1
 800149a:	0004      	movs	r4, r0
 800149c:	0fe8      	lsrs	r0, r5, #31
 800149e:	4683      	mov	fp, r0
 80014a0:	0309      	lsls	r1, r1, #12
 80014a2:	0fd8      	lsrs	r0, r3, #31
 80014a4:	0b09      	lsrs	r1, r1, #12
 80014a6:	4682      	mov	sl, r0
 80014a8:	4819      	ldr	r0, [pc, #100]	@ (8001510 <__eqdf2+0x84>)
 80014aa:	468c      	mov	ip, r1
 80014ac:	031f      	lsls	r7, r3, #12
 80014ae:	0069      	lsls	r1, r5, #1
 80014b0:	005e      	lsls	r6, r3, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	0b3f      	lsrs	r7, r7, #12
 80014b6:	0d76      	lsrs	r6, r6, #21
 80014b8:	4281      	cmp	r1, r0
 80014ba:	d018      	beq.n	80014ee <__eqdf2+0x62>
 80014bc:	4286      	cmp	r6, r0
 80014be:	d00f      	beq.n	80014e0 <__eqdf2+0x54>
 80014c0:	2001      	movs	r0, #1
 80014c2:	42b1      	cmp	r1, r6
 80014c4:	d10d      	bne.n	80014e2 <__eqdf2+0x56>
 80014c6:	45bc      	cmp	ip, r7
 80014c8:	d10b      	bne.n	80014e2 <__eqdf2+0x56>
 80014ca:	4294      	cmp	r4, r2
 80014cc:	d109      	bne.n	80014e2 <__eqdf2+0x56>
 80014ce:	45d3      	cmp	fp, sl
 80014d0:	d01c      	beq.n	800150c <__eqdf2+0x80>
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d105      	bne.n	80014e2 <__eqdf2+0x56>
 80014d6:	4660      	mov	r0, ip
 80014d8:	4320      	orrs	r0, r4
 80014da:	1e43      	subs	r3, r0, #1
 80014dc:	4198      	sbcs	r0, r3
 80014de:	e000      	b.n	80014e2 <__eqdf2+0x56>
 80014e0:	2001      	movs	r0, #1
 80014e2:	bcf0      	pop	{r4, r5, r6, r7}
 80014e4:	46bb      	mov	fp, r7
 80014e6:	46b2      	mov	sl, r6
 80014e8:	46a9      	mov	r9, r5
 80014ea:	46a0      	mov	r8, r4
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ee:	2001      	movs	r0, #1
 80014f0:	428e      	cmp	r6, r1
 80014f2:	d1f6      	bne.n	80014e2 <__eqdf2+0x56>
 80014f4:	4661      	mov	r1, ip
 80014f6:	4339      	orrs	r1, r7
 80014f8:	000f      	movs	r7, r1
 80014fa:	4317      	orrs	r7, r2
 80014fc:	4327      	orrs	r7, r4
 80014fe:	d1f0      	bne.n	80014e2 <__eqdf2+0x56>
 8001500:	465b      	mov	r3, fp
 8001502:	4652      	mov	r2, sl
 8001504:	1a98      	subs	r0, r3, r2
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	4198      	sbcs	r0, r3
 800150a:	e7ea      	b.n	80014e2 <__eqdf2+0x56>
 800150c:	2000      	movs	r0, #0
 800150e:	e7e8      	b.n	80014e2 <__eqdf2+0x56>
 8001510:	000007ff 	.word	0x000007ff

08001514 <__gedf2>:
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	4657      	mov	r7, sl
 8001518:	464e      	mov	r6, r9
 800151a:	4645      	mov	r5, r8
 800151c:	46de      	mov	lr, fp
 800151e:	b5e0      	push	{r5, r6, r7, lr}
 8001520:	000d      	movs	r5, r1
 8001522:	030e      	lsls	r6, r1, #12
 8001524:	0049      	lsls	r1, r1, #1
 8001526:	0d49      	lsrs	r1, r1, #21
 8001528:	468a      	mov	sl, r1
 800152a:	0fdf      	lsrs	r7, r3, #31
 800152c:	0fe9      	lsrs	r1, r5, #31
 800152e:	46bc      	mov	ip, r7
 8001530:	b083      	sub	sp, #12
 8001532:	4f2f      	ldr	r7, [pc, #188]	@ (80015f0 <__gedf2+0xdc>)
 8001534:	0004      	movs	r4, r0
 8001536:	4680      	mov	r8, r0
 8001538:	9101      	str	r1, [sp, #4]
 800153a:	0058      	lsls	r0, r3, #1
 800153c:	0319      	lsls	r1, r3, #12
 800153e:	4691      	mov	r9, r2
 8001540:	0b36      	lsrs	r6, r6, #12
 8001542:	0b09      	lsrs	r1, r1, #12
 8001544:	0d40      	lsrs	r0, r0, #21
 8001546:	45ba      	cmp	sl, r7
 8001548:	d01d      	beq.n	8001586 <__gedf2+0x72>
 800154a:	42b8      	cmp	r0, r7
 800154c:	d00d      	beq.n	800156a <__gedf2+0x56>
 800154e:	4657      	mov	r7, sl
 8001550:	2f00      	cmp	r7, #0
 8001552:	d12a      	bne.n	80015aa <__gedf2+0x96>
 8001554:	4334      	orrs	r4, r6
 8001556:	2800      	cmp	r0, #0
 8001558:	d124      	bne.n	80015a4 <__gedf2+0x90>
 800155a:	430a      	orrs	r2, r1
 800155c:	d036      	beq.n	80015cc <__gedf2+0xb8>
 800155e:	2c00      	cmp	r4, #0
 8001560:	d141      	bne.n	80015e6 <__gedf2+0xd2>
 8001562:	4663      	mov	r3, ip
 8001564:	0058      	lsls	r0, r3, #1
 8001566:	3801      	subs	r0, #1
 8001568:	e015      	b.n	8001596 <__gedf2+0x82>
 800156a:	4311      	orrs	r1, r2
 800156c:	d138      	bne.n	80015e0 <__gedf2+0xcc>
 800156e:	4653      	mov	r3, sl
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <__gedf2+0x64>
 8001574:	4326      	orrs	r6, r4
 8001576:	d0f4      	beq.n	8001562 <__gedf2+0x4e>
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	4563      	cmp	r3, ip
 800157c:	d107      	bne.n	800158e <__gedf2+0x7a>
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	3801      	subs	r0, #1
 8001584:	e007      	b.n	8001596 <__gedf2+0x82>
 8001586:	4326      	orrs	r6, r4
 8001588:	d12a      	bne.n	80015e0 <__gedf2+0xcc>
 800158a:	4550      	cmp	r0, sl
 800158c:	d021      	beq.n	80015d2 <__gedf2+0xbe>
 800158e:	2001      	movs	r0, #1
 8001590:	9b01      	ldr	r3, [sp, #4]
 8001592:	425f      	negs	r7, r3
 8001594:	4338      	orrs	r0, r7
 8001596:	b003      	add	sp, #12
 8001598:	bcf0      	pop	{r4, r5, r6, r7}
 800159a:	46bb      	mov	fp, r7
 800159c:	46b2      	mov	sl, r6
 800159e:	46a9      	mov	r9, r5
 80015a0:	46a0      	mov	r8, r4
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a4:	2c00      	cmp	r4, #0
 80015a6:	d0dc      	beq.n	8001562 <__gedf2+0x4e>
 80015a8:	e7e6      	b.n	8001578 <__gedf2+0x64>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d0ef      	beq.n	800158e <__gedf2+0x7a>
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	4563      	cmp	r3, ip
 80015b2:	d1ec      	bne.n	800158e <__gedf2+0x7a>
 80015b4:	4582      	cmp	sl, r0
 80015b6:	dcea      	bgt.n	800158e <__gedf2+0x7a>
 80015b8:	dbe1      	blt.n	800157e <__gedf2+0x6a>
 80015ba:	428e      	cmp	r6, r1
 80015bc:	d8e7      	bhi.n	800158e <__gedf2+0x7a>
 80015be:	d1de      	bne.n	800157e <__gedf2+0x6a>
 80015c0:	45c8      	cmp	r8, r9
 80015c2:	d8e4      	bhi.n	800158e <__gedf2+0x7a>
 80015c4:	2000      	movs	r0, #0
 80015c6:	45c8      	cmp	r8, r9
 80015c8:	d2e5      	bcs.n	8001596 <__gedf2+0x82>
 80015ca:	e7d8      	b.n	800157e <__gedf2+0x6a>
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d0e2      	beq.n	8001596 <__gedf2+0x82>
 80015d0:	e7dd      	b.n	800158e <__gedf2+0x7a>
 80015d2:	4311      	orrs	r1, r2
 80015d4:	d104      	bne.n	80015e0 <__gedf2+0xcc>
 80015d6:	9b01      	ldr	r3, [sp, #4]
 80015d8:	4563      	cmp	r3, ip
 80015da:	d1d8      	bne.n	800158e <__gedf2+0x7a>
 80015dc:	2000      	movs	r0, #0
 80015de:	e7da      	b.n	8001596 <__gedf2+0x82>
 80015e0:	2002      	movs	r0, #2
 80015e2:	4240      	negs	r0, r0
 80015e4:	e7d7      	b.n	8001596 <__gedf2+0x82>
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	4563      	cmp	r3, ip
 80015ea:	d0e6      	beq.n	80015ba <__gedf2+0xa6>
 80015ec:	e7cf      	b.n	800158e <__gedf2+0x7a>
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff

080015f4 <__ledf2>:
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	4657      	mov	r7, sl
 80015f8:	464e      	mov	r6, r9
 80015fa:	4645      	mov	r5, r8
 80015fc:	46de      	mov	lr, fp
 80015fe:	b5e0      	push	{r5, r6, r7, lr}
 8001600:	000d      	movs	r5, r1
 8001602:	030e      	lsls	r6, r1, #12
 8001604:	0049      	lsls	r1, r1, #1
 8001606:	0d49      	lsrs	r1, r1, #21
 8001608:	468a      	mov	sl, r1
 800160a:	0fdf      	lsrs	r7, r3, #31
 800160c:	0fe9      	lsrs	r1, r5, #31
 800160e:	46bc      	mov	ip, r7
 8001610:	b083      	sub	sp, #12
 8001612:	4f2e      	ldr	r7, [pc, #184]	@ (80016cc <__ledf2+0xd8>)
 8001614:	0004      	movs	r4, r0
 8001616:	4680      	mov	r8, r0
 8001618:	9101      	str	r1, [sp, #4]
 800161a:	0058      	lsls	r0, r3, #1
 800161c:	0319      	lsls	r1, r3, #12
 800161e:	4691      	mov	r9, r2
 8001620:	0b36      	lsrs	r6, r6, #12
 8001622:	0b09      	lsrs	r1, r1, #12
 8001624:	0d40      	lsrs	r0, r0, #21
 8001626:	45ba      	cmp	sl, r7
 8001628:	d01e      	beq.n	8001668 <__ledf2+0x74>
 800162a:	42b8      	cmp	r0, r7
 800162c:	d00d      	beq.n	800164a <__ledf2+0x56>
 800162e:	4657      	mov	r7, sl
 8001630:	2f00      	cmp	r7, #0
 8001632:	d127      	bne.n	8001684 <__ledf2+0x90>
 8001634:	4334      	orrs	r4, r6
 8001636:	2800      	cmp	r0, #0
 8001638:	d133      	bne.n	80016a2 <__ledf2+0xae>
 800163a:	430a      	orrs	r2, r1
 800163c:	d034      	beq.n	80016a8 <__ledf2+0xb4>
 800163e:	2c00      	cmp	r4, #0
 8001640:	d140      	bne.n	80016c4 <__ledf2+0xd0>
 8001642:	4663      	mov	r3, ip
 8001644:	0058      	lsls	r0, r3, #1
 8001646:	3801      	subs	r0, #1
 8001648:	e015      	b.n	8001676 <__ledf2+0x82>
 800164a:	4311      	orrs	r1, r2
 800164c:	d112      	bne.n	8001674 <__ledf2+0x80>
 800164e:	4653      	mov	r3, sl
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <__ledf2+0x64>
 8001654:	4326      	orrs	r6, r4
 8001656:	d0f4      	beq.n	8001642 <__ledf2+0x4e>
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	4563      	cmp	r3, ip
 800165c:	d01d      	beq.n	800169a <__ledf2+0xa6>
 800165e:	2001      	movs	r0, #1
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	425f      	negs	r7, r3
 8001664:	4338      	orrs	r0, r7
 8001666:	e006      	b.n	8001676 <__ledf2+0x82>
 8001668:	4326      	orrs	r6, r4
 800166a:	d103      	bne.n	8001674 <__ledf2+0x80>
 800166c:	4550      	cmp	r0, sl
 800166e:	d1f6      	bne.n	800165e <__ledf2+0x6a>
 8001670:	4311      	orrs	r1, r2
 8001672:	d01c      	beq.n	80016ae <__ledf2+0xba>
 8001674:	2002      	movs	r0, #2
 8001676:	b003      	add	sp, #12
 8001678:	bcf0      	pop	{r4, r5, r6, r7}
 800167a:	46bb      	mov	fp, r7
 800167c:	46b2      	mov	sl, r6
 800167e:	46a9      	mov	r9, r5
 8001680:	46a0      	mov	r8, r4
 8001682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001684:	2800      	cmp	r0, #0
 8001686:	d0ea      	beq.n	800165e <__ledf2+0x6a>
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	4563      	cmp	r3, ip
 800168c:	d1e7      	bne.n	800165e <__ledf2+0x6a>
 800168e:	4582      	cmp	sl, r0
 8001690:	dce5      	bgt.n	800165e <__ledf2+0x6a>
 8001692:	db02      	blt.n	800169a <__ledf2+0xa6>
 8001694:	428e      	cmp	r6, r1
 8001696:	d8e2      	bhi.n	800165e <__ledf2+0x6a>
 8001698:	d00e      	beq.n	80016b8 <__ledf2+0xc4>
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0058      	lsls	r0, r3, #1
 800169e:	3801      	subs	r0, #1
 80016a0:	e7e9      	b.n	8001676 <__ledf2+0x82>
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d0cd      	beq.n	8001642 <__ledf2+0x4e>
 80016a6:	e7d7      	b.n	8001658 <__ledf2+0x64>
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d0e4      	beq.n	8001676 <__ledf2+0x82>
 80016ac:	e7d7      	b.n	800165e <__ledf2+0x6a>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	2000      	movs	r0, #0
 80016b2:	4563      	cmp	r3, ip
 80016b4:	d0df      	beq.n	8001676 <__ledf2+0x82>
 80016b6:	e7d2      	b.n	800165e <__ledf2+0x6a>
 80016b8:	45c8      	cmp	r8, r9
 80016ba:	d8d0      	bhi.n	800165e <__ledf2+0x6a>
 80016bc:	2000      	movs	r0, #0
 80016be:	45c8      	cmp	r8, r9
 80016c0:	d2d9      	bcs.n	8001676 <__ledf2+0x82>
 80016c2:	e7ea      	b.n	800169a <__ledf2+0xa6>
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	4563      	cmp	r3, ip
 80016c8:	d0e4      	beq.n	8001694 <__ledf2+0xa0>
 80016ca:	e7c8      	b.n	800165e <__ledf2+0x6a>
 80016cc:	000007ff 	.word	0x000007ff

080016d0 <__aeabi_dmul>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4657      	mov	r7, sl
 80016d4:	464e      	mov	r6, r9
 80016d6:	46de      	mov	lr, fp
 80016d8:	4645      	mov	r5, r8
 80016da:	b5e0      	push	{r5, r6, r7, lr}
 80016dc:	001f      	movs	r7, r3
 80016de:	030b      	lsls	r3, r1, #12
 80016e0:	0b1b      	lsrs	r3, r3, #12
 80016e2:	0016      	movs	r6, r2
 80016e4:	469a      	mov	sl, r3
 80016e6:	0fca      	lsrs	r2, r1, #31
 80016e8:	004b      	lsls	r3, r1, #1
 80016ea:	0004      	movs	r4, r0
 80016ec:	4691      	mov	r9, r2
 80016ee:	b085      	sub	sp, #20
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dmul+0x26>
 80016f4:	e1cf      	b.n	8001a96 <__aeabi_dmul+0x3c6>
 80016f6:	4acd      	ldr	r2, [pc, #820]	@ (8001a2c <__aeabi_dmul+0x35c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d055      	beq.n	80017a8 <__aeabi_dmul+0xd8>
 80016fc:	4651      	mov	r1, sl
 80016fe:	0f42      	lsrs	r2, r0, #29
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0409      	lsls	r1, r1, #16
 8001708:	4311      	orrs	r1, r2
 800170a:	00c2      	lsls	r2, r0, #3
 800170c:	4690      	mov	r8, r2
 800170e:	4ac8      	ldr	r2, [pc, #800]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001710:	468a      	mov	sl, r1
 8001712:	4693      	mov	fp, r2
 8001714:	449b      	add	fp, r3
 8001716:	2300      	movs	r3, #0
 8001718:	2500      	movs	r5, #0
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	033c      	lsls	r4, r7, #12
 800171e:	007b      	lsls	r3, r7, #1
 8001720:	0ffa      	lsrs	r2, r7, #31
 8001722:	9601      	str	r6, [sp, #4]
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	9200      	str	r2, [sp, #0]
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0x5e>
 800172c:	e188      	b.n	8001a40 <__aeabi_dmul+0x370>
 800172e:	4abf      	ldr	r2, [pc, #764]	@ (8001a2c <__aeabi_dmul+0x35c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x66>
 8001734:	e092      	b.n	800185c <__aeabi_dmul+0x18c>
 8001736:	4abe      	ldr	r2, [pc, #760]	@ (8001a30 <__aeabi_dmul+0x360>)
 8001738:	4694      	mov	ip, r2
 800173a:	4463      	add	r3, ip
 800173c:	449b      	add	fp, r3
 800173e:	2d0a      	cmp	r5, #10
 8001740:	dc42      	bgt.n	80017c8 <__aeabi_dmul+0xf8>
 8001742:	00e4      	lsls	r4, r4, #3
 8001744:	0f73      	lsrs	r3, r6, #29
 8001746:	4323      	orrs	r3, r4
 8001748:	2480      	movs	r4, #128	@ 0x80
 800174a:	4649      	mov	r1, r9
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	431c      	orrs	r4, r3
 8001750:	00f3      	lsls	r3, r6, #3
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	9b00      	ldr	r3, [sp, #0]
 8001756:	2000      	movs	r0, #0
 8001758:	4059      	eors	r1, r3
 800175a:	b2cb      	uxtb	r3, r1
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	2d02      	cmp	r5, #2
 8001760:	dc00      	bgt.n	8001764 <__aeabi_dmul+0x94>
 8001762:	e094      	b.n	800188e <__aeabi_dmul+0x1be>
 8001764:	2301      	movs	r3, #1
 8001766:	40ab      	lsls	r3, r5
 8001768:	001d      	movs	r5, r3
 800176a:	23a6      	movs	r3, #166	@ 0xa6
 800176c:	002a      	movs	r2, r5
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	401a      	ands	r2, r3
 8001772:	421d      	tst	r5, r3
 8001774:	d000      	beq.n	8001778 <__aeabi_dmul+0xa8>
 8001776:	e229      	b.n	8001bcc <__aeabi_dmul+0x4fc>
 8001778:	2390      	movs	r3, #144	@ 0x90
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	421d      	tst	r5, r3
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0xb2>
 8001780:	e24d      	b.n	8001c1e <__aeabi_dmul+0x54e>
 8001782:	2300      	movs	r3, #0
 8001784:	2480      	movs	r4, #128	@ 0x80
 8001786:	4699      	mov	r9, r3
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4ba8      	ldr	r3, [pc, #672]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800178c:	0010      	movs	r0, r2
 800178e:	464a      	mov	r2, r9
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	4323      	orrs	r3, r4
 8001794:	07d2      	lsls	r2, r2, #31
 8001796:	4313      	orrs	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	b005      	add	sp, #20
 800179c:	bcf0      	pop	{r4, r5, r6, r7}
 800179e:	46bb      	mov	fp, r7
 80017a0:	46b2      	mov	sl, r6
 80017a2:	46a9      	mov	r9, r5
 80017a4:	46a0      	mov	r8, r4
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a8:	4652      	mov	r2, sl
 80017aa:	4302      	orrs	r2, r0
 80017ac:	4690      	mov	r8, r2
 80017ae:	d000      	beq.n	80017b2 <__aeabi_dmul+0xe2>
 80017b0:	e1ac      	b.n	8001b0c <__aeabi_dmul+0x43c>
 80017b2:	469b      	mov	fp, r3
 80017b4:	2302      	movs	r3, #2
 80017b6:	4692      	mov	sl, r2
 80017b8:	2508      	movs	r5, #8
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	e7ae      	b.n	800171c <__aeabi_dmul+0x4c>
 80017be:	9b00      	ldr	r3, [sp, #0]
 80017c0:	46a2      	mov	sl, r4
 80017c2:	4699      	mov	r9, r3
 80017c4:	9b01      	ldr	r3, [sp, #4]
 80017c6:	4698      	mov	r8, r3
 80017c8:	9b02      	ldr	r3, [sp, #8]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dmul+0x100>
 80017ce:	e1ca      	b.n	8001b66 <__aeabi_dmul+0x496>
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dmul+0x106>
 80017d4:	e192      	b.n	8001afc <__aeabi_dmul+0x42c>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d110      	bne.n	80017fc <__aeabi_dmul+0x12c>
 80017da:	2300      	movs	r3, #0
 80017dc:	2400      	movs	r4, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	e7d4      	b.n	800178c <__aeabi_dmul+0xbc>
 80017e2:	2201      	movs	r2, #1
 80017e4:	087b      	lsrs	r3, r7, #1
 80017e6:	403a      	ands	r2, r7
 80017e8:	4313      	orrs	r3, r2
 80017ea:	4652      	mov	r2, sl
 80017ec:	07d2      	lsls	r2, r2, #31
 80017ee:	4313      	orrs	r3, r2
 80017f0:	4698      	mov	r8, r3
 80017f2:	4653      	mov	r3, sl
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	469a      	mov	sl, r3
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	4699      	mov	r9, r3
 80017fc:	465b      	mov	r3, fp
 80017fe:	1c58      	adds	r0, r3, #1
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	445b      	add	r3, fp
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc00      	bgt.n	800180c <__aeabi_dmul+0x13c>
 800180a:	e1b1      	b.n	8001b70 <__aeabi_dmul+0x4a0>
 800180c:	4642      	mov	r2, r8
 800180e:	0752      	lsls	r2, r2, #29
 8001810:	d00b      	beq.n	800182a <__aeabi_dmul+0x15a>
 8001812:	220f      	movs	r2, #15
 8001814:	4641      	mov	r1, r8
 8001816:	400a      	ands	r2, r1
 8001818:	2a04      	cmp	r2, #4
 800181a:	d006      	beq.n	800182a <__aeabi_dmul+0x15a>
 800181c:	4642      	mov	r2, r8
 800181e:	1d11      	adds	r1, r2, #4
 8001820:	4541      	cmp	r1, r8
 8001822:	4192      	sbcs	r2, r2
 8001824:	4688      	mov	r8, r1
 8001826:	4252      	negs	r2, r2
 8001828:	4492      	add	sl, r2
 800182a:	4652      	mov	r2, sl
 800182c:	01d2      	lsls	r2, r2, #7
 800182e:	d506      	bpl.n	800183e <__aeabi_dmul+0x16e>
 8001830:	4652      	mov	r2, sl
 8001832:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <__aeabi_dmul+0x364>)
 8001834:	401a      	ands	r2, r3
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	4692      	mov	sl, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	18c3      	adds	r3, r0, r3
 800183e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a38 <__aeabi_dmul+0x368>)
 8001840:	4293      	cmp	r3, r2
 8001842:	dd00      	ble.n	8001846 <__aeabi_dmul+0x176>
 8001844:	e18f      	b.n	8001b66 <__aeabi_dmul+0x496>
 8001846:	4642      	mov	r2, r8
 8001848:	08d1      	lsrs	r1, r2, #3
 800184a:	4652      	mov	r2, sl
 800184c:	0752      	lsls	r2, r2, #29
 800184e:	430a      	orrs	r2, r1
 8001850:	4651      	mov	r1, sl
 8001852:	055b      	lsls	r3, r3, #21
 8001854:	024c      	lsls	r4, r1, #9
 8001856:	0b24      	lsrs	r4, r4, #12
 8001858:	0d5b      	lsrs	r3, r3, #21
 800185a:	e797      	b.n	800178c <__aeabi_dmul+0xbc>
 800185c:	4b73      	ldr	r3, [pc, #460]	@ (8001a2c <__aeabi_dmul+0x35c>)
 800185e:	4326      	orrs	r6, r4
 8001860:	469c      	mov	ip, r3
 8001862:	44e3      	add	fp, ip
 8001864:	2e00      	cmp	r6, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dmul+0x19a>
 8001868:	e16f      	b.n	8001b4a <__aeabi_dmul+0x47a>
 800186a:	2303      	movs	r3, #3
 800186c:	4649      	mov	r1, r9
 800186e:	431d      	orrs	r5, r3
 8001870:	9b00      	ldr	r3, [sp, #0]
 8001872:	4059      	eors	r1, r3
 8001874:	b2cb      	uxtb	r3, r1
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	2d0a      	cmp	r5, #10
 800187a:	dd00      	ble.n	800187e <__aeabi_dmul+0x1ae>
 800187c:	e133      	b.n	8001ae6 <__aeabi_dmul+0x416>
 800187e:	2301      	movs	r3, #1
 8001880:	40ab      	lsls	r3, r5
 8001882:	001d      	movs	r5, r3
 8001884:	2303      	movs	r3, #3
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2288      	movs	r2, #136	@ 0x88
 800188a:	422a      	tst	r2, r5
 800188c:	d197      	bne.n	80017be <__aeabi_dmul+0xee>
 800188e:	4642      	mov	r2, r8
 8001890:	4643      	mov	r3, r8
 8001892:	0412      	lsls	r2, r2, #16
 8001894:	0c12      	lsrs	r2, r2, #16
 8001896:	0016      	movs	r6, r2
 8001898:	9801      	ldr	r0, [sp, #4]
 800189a:	0c1d      	lsrs	r5, r3, #16
 800189c:	0c03      	lsrs	r3, r0, #16
 800189e:	0400      	lsls	r0, r0, #16
 80018a0:	0c00      	lsrs	r0, r0, #16
 80018a2:	4346      	muls	r6, r0
 80018a4:	46b4      	mov	ip, r6
 80018a6:	001e      	movs	r6, r3
 80018a8:	436e      	muls	r6, r5
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	0016      	movs	r6, r2
 80018ae:	0007      	movs	r7, r0
 80018b0:	435e      	muls	r6, r3
 80018b2:	4661      	mov	r1, ip
 80018b4:	46b0      	mov	r8, r6
 80018b6:	436f      	muls	r7, r5
 80018b8:	0c0e      	lsrs	r6, r1, #16
 80018ba:	44b8      	add	r8, r7
 80018bc:	4446      	add	r6, r8
 80018be:	42b7      	cmp	r7, r6
 80018c0:	d905      	bls.n	80018ce <__aeabi_dmul+0x1fe>
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	0249      	lsls	r1, r1, #9
 80018c6:	4688      	mov	r8, r1
 80018c8:	9f00      	ldr	r7, [sp, #0]
 80018ca:	4447      	add	r7, r8
 80018cc:	9700      	str	r7, [sp, #0]
 80018ce:	4661      	mov	r1, ip
 80018d0:	0409      	lsls	r1, r1, #16
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	0c37      	lsrs	r7, r6, #16
 80018d6:	0436      	lsls	r6, r6, #16
 80018d8:	468c      	mov	ip, r1
 80018da:	0031      	movs	r1, r6
 80018dc:	4461      	add	r1, ip
 80018de:	9101      	str	r1, [sp, #4]
 80018e0:	0011      	movs	r1, r2
 80018e2:	0c26      	lsrs	r6, r4, #16
 80018e4:	0424      	lsls	r4, r4, #16
 80018e6:	0c24      	lsrs	r4, r4, #16
 80018e8:	4361      	muls	r1, r4
 80018ea:	468c      	mov	ip, r1
 80018ec:	0021      	movs	r1, r4
 80018ee:	4369      	muls	r1, r5
 80018f0:	4689      	mov	r9, r1
 80018f2:	4661      	mov	r1, ip
 80018f4:	0c09      	lsrs	r1, r1, #16
 80018f6:	4688      	mov	r8, r1
 80018f8:	4372      	muls	r2, r6
 80018fa:	444a      	add	r2, r9
 80018fc:	4442      	add	r2, r8
 80018fe:	4375      	muls	r5, r6
 8001900:	4591      	cmp	r9, r2
 8001902:	d903      	bls.n	800190c <__aeabi_dmul+0x23c>
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0249      	lsls	r1, r1, #9
 8001908:	4688      	mov	r8, r1
 800190a:	4445      	add	r5, r8
 800190c:	0c11      	lsrs	r1, r2, #16
 800190e:	4688      	mov	r8, r1
 8001910:	4661      	mov	r1, ip
 8001912:	0409      	lsls	r1, r1, #16
 8001914:	0c09      	lsrs	r1, r1, #16
 8001916:	468c      	mov	ip, r1
 8001918:	0412      	lsls	r2, r2, #16
 800191a:	4462      	add	r2, ip
 800191c:	18b9      	adds	r1, r7, r2
 800191e:	9102      	str	r1, [sp, #8]
 8001920:	4651      	mov	r1, sl
 8001922:	0c09      	lsrs	r1, r1, #16
 8001924:	468c      	mov	ip, r1
 8001926:	4651      	mov	r1, sl
 8001928:	040f      	lsls	r7, r1, #16
 800192a:	0c3f      	lsrs	r7, r7, #16
 800192c:	0039      	movs	r1, r7
 800192e:	4341      	muls	r1, r0
 8001930:	4445      	add	r5, r8
 8001932:	4688      	mov	r8, r1
 8001934:	4661      	mov	r1, ip
 8001936:	4341      	muls	r1, r0
 8001938:	468a      	mov	sl, r1
 800193a:	4641      	mov	r1, r8
 800193c:	4660      	mov	r0, ip
 800193e:	0c09      	lsrs	r1, r1, #16
 8001940:	4689      	mov	r9, r1
 8001942:	4358      	muls	r0, r3
 8001944:	437b      	muls	r3, r7
 8001946:	4453      	add	r3, sl
 8001948:	444b      	add	r3, r9
 800194a:	459a      	cmp	sl, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_dmul+0x286>
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	0249      	lsls	r1, r1, #9
 8001952:	4689      	mov	r9, r1
 8001954:	4448      	add	r0, r9
 8001956:	0c19      	lsrs	r1, r3, #16
 8001958:	4689      	mov	r9, r1
 800195a:	4641      	mov	r1, r8
 800195c:	0409      	lsls	r1, r1, #16
 800195e:	0c09      	lsrs	r1, r1, #16
 8001960:	4688      	mov	r8, r1
 8001962:	0039      	movs	r1, r7
 8001964:	4361      	muls	r1, r4
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4443      	add	r3, r8
 800196a:	4688      	mov	r8, r1
 800196c:	4661      	mov	r1, ip
 800196e:	434c      	muls	r4, r1
 8001970:	4371      	muls	r1, r6
 8001972:	468c      	mov	ip, r1
 8001974:	4641      	mov	r1, r8
 8001976:	4377      	muls	r7, r6
 8001978:	0c0e      	lsrs	r6, r1, #16
 800197a:	193f      	adds	r7, r7, r4
 800197c:	19f6      	adds	r6, r6, r7
 800197e:	4448      	add	r0, r9
 8001980:	42b4      	cmp	r4, r6
 8001982:	d903      	bls.n	800198c <__aeabi_dmul+0x2bc>
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	4689      	mov	r9, r1
 800198a:	44cc      	add	ip, r9
 800198c:	9902      	ldr	r1, [sp, #8]
 800198e:	9f00      	ldr	r7, [sp, #0]
 8001990:	4689      	mov	r9, r1
 8001992:	0431      	lsls	r1, r6, #16
 8001994:	444f      	add	r7, r9
 8001996:	4689      	mov	r9, r1
 8001998:	4641      	mov	r1, r8
 800199a:	4297      	cmp	r7, r2
 800199c:	4192      	sbcs	r2, r2
 800199e:	040c      	lsls	r4, r1, #16
 80019a0:	0c24      	lsrs	r4, r4, #16
 80019a2:	444c      	add	r4, r9
 80019a4:	18ff      	adds	r7, r7, r3
 80019a6:	4252      	negs	r2, r2
 80019a8:	1964      	adds	r4, r4, r5
 80019aa:	18a1      	adds	r1, r4, r2
 80019ac:	429f      	cmp	r7, r3
 80019ae:	419b      	sbcs	r3, r3
 80019b0:	4688      	mov	r8, r1
 80019b2:	4682      	mov	sl, r0
 80019b4:	425b      	negs	r3, r3
 80019b6:	4699      	mov	r9, r3
 80019b8:	4590      	cmp	r8, r2
 80019ba:	4192      	sbcs	r2, r2
 80019bc:	42ac      	cmp	r4, r5
 80019be:	41a4      	sbcs	r4, r4
 80019c0:	44c2      	add	sl, r8
 80019c2:	44d1      	add	r9, sl
 80019c4:	4252      	negs	r2, r2
 80019c6:	4264      	negs	r4, r4
 80019c8:	4314      	orrs	r4, r2
 80019ca:	4599      	cmp	r9, r3
 80019cc:	419b      	sbcs	r3, r3
 80019ce:	4582      	cmp	sl, r0
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	425b      	negs	r3, r3
 80019d4:	4252      	negs	r2, r2
 80019d6:	4313      	orrs	r3, r2
 80019d8:	464a      	mov	r2, r9
 80019da:	0c36      	lsrs	r6, r6, #16
 80019dc:	19a4      	adds	r4, r4, r6
 80019de:	18e3      	adds	r3, r4, r3
 80019e0:	4463      	add	r3, ip
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	0dd2      	lsrs	r2, r2, #23
 80019e6:	431a      	orrs	r2, r3
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	4692      	mov	sl, r2
 80019ec:	027a      	lsls	r2, r7, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	1e50      	subs	r0, r2, #1
 80019f2:	4182      	sbcs	r2, r0
 80019f4:	0dff      	lsrs	r7, r7, #23
 80019f6:	4317      	orrs	r7, r2
 80019f8:	464a      	mov	r2, r9
 80019fa:	0252      	lsls	r2, r2, #9
 80019fc:	4317      	orrs	r7, r2
 80019fe:	46b8      	mov	r8, r7
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	d500      	bpl.n	8001a06 <__aeabi_dmul+0x336>
 8001a04:	e6ed      	b.n	80017e2 <__aeabi_dmul+0x112>
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <__aeabi_dmul+0x36c>)
 8001a08:	9a03      	ldr	r2, [sp, #12]
 8001a0a:	445b      	add	r3, fp
 8001a0c:	4691      	mov	r9, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dc00      	bgt.n	8001a14 <__aeabi_dmul+0x344>
 8001a12:	e0ac      	b.n	8001b6e <__aeabi_dmul+0x49e>
 8001a14:	003a      	movs	r2, r7
 8001a16:	0752      	lsls	r2, r2, #29
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dmul+0x34c>
 8001a1a:	e710      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	4658      	mov	r0, fp
 8001a20:	403a      	ands	r2, r7
 8001a22:	2a04      	cmp	r2, #4
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dmul+0x358>
 8001a26:	e6f9      	b.n	800181c <__aeabi_dmul+0x14c>
 8001a28:	e709      	b.n	800183e <__aeabi_dmul+0x16e>
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	fffffc01 	.word	0xfffffc01
 8001a34:	feffffff 	.word	0xfeffffff
 8001a38:	000007fe 	.word	0x000007fe
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	0022      	movs	r2, r4
 8001a42:	4332      	orrs	r2, r6
 8001a44:	d06f      	beq.n	8001b26 <__aeabi_dmul+0x456>
 8001a46:	2c00      	cmp	r4, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x37c>
 8001a4a:	e0c2      	b.n	8001bd2 <__aeabi_dmul+0x502>
 8001a4c:	0020      	movs	r0, r4
 8001a4e:	f7fe fd17 	bl	8000480 <__clzsi2>
 8001a52:	0002      	movs	r2, r0
 8001a54:	0003      	movs	r3, r0
 8001a56:	3a0b      	subs	r2, #11
 8001a58:	201d      	movs	r0, #29
 8001a5a:	1a82      	subs	r2, r0, r2
 8001a5c:	0030      	movs	r0, r6
 8001a5e:	0019      	movs	r1, r3
 8001a60:	40d0      	lsrs	r0, r2
 8001a62:	3908      	subs	r1, #8
 8001a64:	408c      	lsls	r4, r1
 8001a66:	0002      	movs	r2, r0
 8001a68:	4322      	orrs	r2, r4
 8001a6a:	0034      	movs	r4, r6
 8001a6c:	408c      	lsls	r4, r1
 8001a6e:	4659      	mov	r1, fp
 8001a70:	1acb      	subs	r3, r1, r3
 8001a72:	4986      	ldr	r1, [pc, #536]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001a74:	468b      	mov	fp, r1
 8001a76:	449b      	add	fp, r3
 8001a78:	2d0a      	cmp	r5, #10
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dmul+0x3ae>
 8001a7c:	e6a4      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001a7e:	4649      	mov	r1, r9
 8001a80:	9b00      	ldr	r3, [sp, #0]
 8001a82:	9401      	str	r4, [sp, #4]
 8001a84:	4059      	eors	r1, r3
 8001a86:	b2cb      	uxtb	r3, r1
 8001a88:	0014      	movs	r4, r2
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	9303      	str	r3, [sp, #12]
 8001a8e:	2d02      	cmp	r5, #2
 8001a90:	dd00      	ble.n	8001a94 <__aeabi_dmul+0x3c4>
 8001a92:	e667      	b.n	8001764 <__aeabi_dmul+0x94>
 8001a94:	e6fb      	b.n	800188e <__aeabi_dmul+0x1be>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	4698      	mov	r8, r3
 8001a9c:	d03c      	beq.n	8001b18 <__aeabi_dmul+0x448>
 8001a9e:	4653      	mov	r3, sl
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dmul+0x3d6>
 8001aa4:	e0a3      	b.n	8001bee <__aeabi_dmul+0x51e>
 8001aa6:	4650      	mov	r0, sl
 8001aa8:	f7fe fcea 	bl	8000480 <__clzsi2>
 8001aac:	230b      	movs	r3, #11
 8001aae:	425b      	negs	r3, r3
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	4484      	add	ip, r0
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	4650      	mov	r0, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	4088      	lsls	r0, r1
 8001abe:	231d      	movs	r3, #29
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4660      	mov	r0, ip
 8001ac4:	1a1b      	subs	r3, r3, r0
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	40d8      	lsrs	r0, r3
 8001aca:	0003      	movs	r3, r0
 8001acc:	4640      	mov	r0, r8
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	0023      	movs	r3, r4
 8001ad4:	408b      	lsls	r3, r1
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c8c <__aeabi_dmul+0x5bc>)
 8001ada:	2500      	movs	r5, #0
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	469b      	mov	fp, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	e61a      	b.n	800171c <__aeabi_dmul+0x4c>
 8001ae6:	2d0f      	cmp	r5, #15
 8001ae8:	d000      	beq.n	8001aec <__aeabi_dmul+0x41c>
 8001aea:	e0c9      	b.n	8001c80 <__aeabi_dmul+0x5b0>
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	4652      	mov	r2, sl
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	421a      	tst	r2, r3
 8001af4:	d002      	beq.n	8001afc <__aeabi_dmul+0x42c>
 8001af6:	421c      	tst	r4, r3
 8001af8:	d100      	bne.n	8001afc <__aeabi_dmul+0x42c>
 8001afa:	e092      	b.n	8001c22 <__aeabi_dmul+0x552>
 8001afc:	2480      	movs	r4, #128	@ 0x80
 8001afe:	4653      	mov	r3, sl
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	431c      	orrs	r4, r3
 8001b04:	0324      	lsls	r4, r4, #12
 8001b06:	4642      	mov	r2, r8
 8001b08:	0b24      	lsrs	r4, r4, #12
 8001b0a:	e63e      	b.n	800178a <__aeabi_dmul+0xba>
 8001b0c:	469b      	mov	fp, r3
 8001b0e:	2303      	movs	r3, #3
 8001b10:	4680      	mov	r8, r0
 8001b12:	250c      	movs	r5, #12
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	e601      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	469a      	mov	sl, r3
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2504      	movs	r5, #4
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	e5fa      	b.n	800171c <__aeabi_dmul+0x4c>
 8001b26:	2101      	movs	r1, #1
 8001b28:	430d      	orrs	r5, r1
 8001b2a:	2d0a      	cmp	r5, #10
 8001b2c:	dd00      	ble.n	8001b30 <__aeabi_dmul+0x460>
 8001b2e:	e64b      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b30:	4649      	mov	r1, r9
 8001b32:	9800      	ldr	r0, [sp, #0]
 8001b34:	4041      	eors	r1, r0
 8001b36:	b2c9      	uxtb	r1, r1
 8001b38:	9103      	str	r1, [sp, #12]
 8001b3a:	2d02      	cmp	r5, #2
 8001b3c:	dc00      	bgt.n	8001b40 <__aeabi_dmul+0x470>
 8001b3e:	e096      	b.n	8001c6e <__aeabi_dmul+0x59e>
 8001b40:	2300      	movs	r3, #0
 8001b42:	2400      	movs	r4, #0
 8001b44:	2001      	movs	r0, #1
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	e60c      	b.n	8001764 <__aeabi_dmul+0x94>
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	9a00      	ldr	r2, [sp, #0]
 8001b50:	432b      	orrs	r3, r5
 8001b52:	4051      	eors	r1, r2
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	9203      	str	r2, [sp, #12]
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dmul+0x48e>
 8001b5c:	e634      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d157      	bne.n	8001c12 <__aeabi_dmul+0x542>
 8001b62:	9b03      	ldr	r3, [sp, #12]
 8001b64:	4699      	mov	r9, r3
 8001b66:	2400      	movs	r4, #0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4b49      	ldr	r3, [pc, #292]	@ (8001c90 <__aeabi_dmul+0x5c0>)
 8001b6c:	e60e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001b6e:	4658      	mov	r0, fp
 8001b70:	2101      	movs	r1, #1
 8001b72:	1ac9      	subs	r1, r1, r3
 8001b74:	2938      	cmp	r1, #56	@ 0x38
 8001b76:	dd00      	ble.n	8001b7a <__aeabi_dmul+0x4aa>
 8001b78:	e62f      	b.n	80017da <__aeabi_dmul+0x10a>
 8001b7a:	291f      	cmp	r1, #31
 8001b7c:	dd56      	ble.n	8001c2c <__aeabi_dmul+0x55c>
 8001b7e:	221f      	movs	r2, #31
 8001b80:	4654      	mov	r4, sl
 8001b82:	4252      	negs	r2, r2
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	40dc      	lsrs	r4, r3
 8001b88:	2920      	cmp	r1, #32
 8001b8a:	d007      	beq.n	8001b9c <__aeabi_dmul+0x4cc>
 8001b8c:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <__aeabi_dmul+0x5c4>)
 8001b8e:	4642      	mov	r2, r8
 8001b90:	469c      	mov	ip, r3
 8001b92:	4653      	mov	r3, sl
 8001b94:	4460      	add	r0, ip
 8001b96:	4083      	lsls	r3, r0
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	4690      	mov	r8, r2
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	1e53      	subs	r3, r2, #1
 8001ba2:	419a      	sbcs	r2, r3
 8001ba4:	000b      	movs	r3, r1
 8001ba6:	4322      	orrs	r2, r4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2400      	movs	r4, #0
 8001bac:	4211      	tst	r1, r2
 8001bae:	d009      	beq.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d05d      	beq.n	8001c74 <__aeabi_dmul+0x5a4>
 8001bb8:	1d11      	adds	r1, r2, #4
 8001bba:	4291      	cmp	r1, r2
 8001bbc:	419b      	sbcs	r3, r3
 8001bbe:	000a      	movs	r2, r1
 8001bc0:	425b      	negs	r3, r3
 8001bc2:	075b      	lsls	r3, r3, #29
 8001bc4:	08d2      	lsrs	r2, r2, #3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e5df      	b.n	800178c <__aeabi_dmul+0xbc>
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	4699      	mov	r9, r3
 8001bd0:	e5fa      	b.n	80017c8 <__aeabi_dmul+0xf8>
 8001bd2:	9801      	ldr	r0, [sp, #4]
 8001bd4:	f7fe fc54 	bl	8000480 <__clzsi2>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	0003      	movs	r3, r0
 8001bdc:	3215      	adds	r2, #21
 8001bde:	3320      	adds	r3, #32
 8001be0:	2a1c      	cmp	r2, #28
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dmul+0x516>
 8001be4:	e738      	b.n	8001a58 <__aeabi_dmul+0x388>
 8001be6:	9a01      	ldr	r2, [sp, #4]
 8001be8:	3808      	subs	r0, #8
 8001bea:	4082      	lsls	r2, r0
 8001bec:	e73f      	b.n	8001a6e <__aeabi_dmul+0x39e>
 8001bee:	f7fe fc47 	bl	8000480 <__clzsi2>
 8001bf2:	2315      	movs	r3, #21
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4484      	add	ip, r0
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	4663      	mov	r3, ip
 8001bfc:	3220      	adds	r2, #32
 8001bfe:	2b1c      	cmp	r3, #28
 8001c00:	dc00      	bgt.n	8001c04 <__aeabi_dmul+0x534>
 8001c02:	e758      	b.n	8001ab6 <__aeabi_dmul+0x3e6>
 8001c04:	2300      	movs	r3, #0
 8001c06:	4698      	mov	r8, r3
 8001c08:	0023      	movs	r3, r4
 8001c0a:	3808      	subs	r0, #8
 8001c0c:	4083      	lsls	r3, r0
 8001c0e:	469a      	mov	sl, r3
 8001c10:	e762      	b.n	8001ad8 <__aeabi_dmul+0x408>
 8001c12:	001d      	movs	r5, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	2400      	movs	r4, #0
 8001c18:	2002      	movs	r0, #2
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	e5a2      	b.n	8001764 <__aeabi_dmul+0x94>
 8001c1e:	9002      	str	r0, [sp, #8]
 8001c20:	e632      	b.n	8001888 <__aeabi_dmul+0x1b8>
 8001c22:	431c      	orrs	r4, r3
 8001c24:	9b00      	ldr	r3, [sp, #0]
 8001c26:	9a01      	ldr	r2, [sp, #4]
 8001c28:	4699      	mov	r9, r3
 8001c2a:	e5ae      	b.n	800178a <__aeabi_dmul+0xba>
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <__aeabi_dmul+0x5c8>)
 8001c2e:	4652      	mov	r2, sl
 8001c30:	18c3      	adds	r3, r0, r3
 8001c32:	4640      	mov	r0, r8
 8001c34:	409a      	lsls	r2, r3
 8001c36:	40c8      	lsrs	r0, r1
 8001c38:	4302      	orrs	r2, r0
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	4098      	lsls	r0, r3
 8001c3e:	0003      	movs	r3, r0
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	4183      	sbcs	r3, r0
 8001c44:	4654      	mov	r4, sl
 8001c46:	431a      	orrs	r2, r3
 8001c48:	40cc      	lsrs	r4, r1
 8001c4a:	0753      	lsls	r3, r2, #29
 8001c4c:	d009      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c4e:	230f      	movs	r3, #15
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d005      	beq.n	8001c62 <__aeabi_dmul+0x592>
 8001c56:	1d13      	adds	r3, r2, #4
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	4192      	sbcs	r2, r2
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	18a4      	adds	r4, r4, r2
 8001c60:	001a      	movs	r2, r3
 8001c62:	0223      	lsls	r3, r4, #8
 8001c64:	d508      	bpl.n	8001c78 <__aeabi_dmul+0x5a8>
 8001c66:	2301      	movs	r3, #1
 8001c68:	2400      	movs	r4, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e58e      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c6e:	4689      	mov	r9, r1
 8001c70:	2400      	movs	r4, #0
 8001c72:	e58b      	b.n	800178c <__aeabi_dmul+0xbc>
 8001c74:	2300      	movs	r3, #0
 8001c76:	e7a5      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c78:	0763      	lsls	r3, r4, #29
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0b24      	lsrs	r4, r4, #12
 8001c7e:	e7a1      	b.n	8001bc4 <__aeabi_dmul+0x4f4>
 8001c80:	9b00      	ldr	r3, [sp, #0]
 8001c82:	46a2      	mov	sl, r4
 8001c84:	4699      	mov	r9, r3
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	4698      	mov	r8, r3
 8001c8a:	e737      	b.n	8001afc <__aeabi_dmul+0x42c>
 8001c8c:	fffffc0d 	.word	0xfffffc0d
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000043e 	.word	0x0000043e
 8001c98:	0000041e 	.word	0x0000041e

08001c9c <__aeabi_dsub>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	4645      	mov	r5, r8
 8001ca4:	46de      	mov	lr, fp
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	9000      	str	r0, [sp, #0]
 8001cac:	9101      	str	r1, [sp, #4]
 8001cae:	030c      	lsls	r4, r1, #12
 8001cb0:	004d      	lsls	r5, r1, #1
 8001cb2:	0fce      	lsrs	r6, r1, #31
 8001cb4:	0a61      	lsrs	r1, r4, #9
 8001cb6:	9c00      	ldr	r4, [sp, #0]
 8001cb8:	005f      	lsls	r7, r3, #1
 8001cba:	0f64      	lsrs	r4, r4, #29
 8001cbc:	430c      	orrs	r4, r1
 8001cbe:	9900      	ldr	r1, [sp, #0]
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	00c8      	lsls	r0, r1, #3
 8001cc6:	0319      	lsls	r1, r3, #12
 8001cc8:	0d7b      	lsrs	r3, r7, #21
 8001cca:	4699      	mov	r9, r3
 8001ccc:	9b01      	ldr	r3, [sp, #4]
 8001cce:	4fcc      	ldr	r7, [pc, #816]	@ (8002000 <__aeabi_dsub+0x364>)
 8001cd0:	0fdb      	lsrs	r3, r3, #31
 8001cd2:	469c      	mov	ip, r3
 8001cd4:	0a4b      	lsrs	r3, r1, #9
 8001cd6:	9900      	ldr	r1, [sp, #0]
 8001cd8:	4680      	mov	r8, r0
 8001cda:	0f49      	lsrs	r1, r1, #29
 8001cdc:	4319      	orrs	r1, r3
 8001cde:	9b00      	ldr	r3, [sp, #0]
 8001ce0:	468b      	mov	fp, r1
 8001ce2:	00da      	lsls	r2, r3, #3
 8001ce4:	4692      	mov	sl, r2
 8001ce6:	0d6d      	lsrs	r5, r5, #21
 8001ce8:	45b9      	cmp	r9, r7
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x52>
 8001cec:	e0bf      	b.n	8001e6e <__aeabi_dsub+0x1d2>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4661      	mov	r1, ip
 8001cf2:	4059      	eors	r1, r3
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	468c      	mov	ip, r1
 8001cf8:	1aeb      	subs	r3, r5, r3
 8001cfa:	428e      	cmp	r6, r1
 8001cfc:	d075      	beq.n	8001dea <__aeabi_dsub+0x14e>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dc00      	bgt.n	8001d04 <__aeabi_dsub+0x68>
 8001d02:	e2a3      	b.n	800224c <__aeabi_dsub+0x5b0>
 8001d04:	4649      	mov	r1, r9
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x70>
 8001d0a:	e0ce      	b.n	8001eaa <__aeabi_dsub+0x20e>
 8001d0c:	42bd      	cmp	r5, r7
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x76>
 8001d10:	e200      	b.n	8002114 <__aeabi_dsub+0x478>
 8001d12:	2701      	movs	r7, #1
 8001d14:	2b38      	cmp	r3, #56	@ 0x38
 8001d16:	dc19      	bgt.n	8001d4c <__aeabi_dsub+0xb0>
 8001d18:	2780      	movs	r7, #128	@ 0x80
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	043f      	lsls	r7, r7, #16
 8001d1e:	4339      	orrs	r1, r7
 8001d20:	468b      	mov	fp, r1
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0x8c>
 8001d26:	e1fa      	b.n	800211e <__aeabi_dsub+0x482>
 8001d28:	2720      	movs	r7, #32
 8001d2a:	1af9      	subs	r1, r7, r3
 8001d2c:	468c      	mov	ip, r1
 8001d2e:	4659      	mov	r1, fp
 8001d30:	4667      	mov	r7, ip
 8001d32:	40b9      	lsls	r1, r7
 8001d34:	000f      	movs	r7, r1
 8001d36:	0011      	movs	r1, r2
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	430f      	orrs	r7, r1
 8001d3c:	4661      	mov	r1, ip
 8001d3e:	408a      	lsls	r2, r1
 8001d40:	1e51      	subs	r1, r2, #1
 8001d42:	418a      	sbcs	r2, r1
 8001d44:	4659      	mov	r1, fp
 8001d46:	40d9      	lsrs	r1, r3
 8001d48:	4317      	orrs	r7, r2
 8001d4a:	1a64      	subs	r4, r4, r1
 8001d4c:	1bc7      	subs	r7, r0, r7
 8001d4e:	42b8      	cmp	r0, r7
 8001d50:	4180      	sbcs	r0, r0
 8001d52:	4240      	negs	r0, r0
 8001d54:	1a24      	subs	r4, r4, r0
 8001d56:	0223      	lsls	r3, r4, #8
 8001d58:	d400      	bmi.n	8001d5c <__aeabi_dsub+0xc0>
 8001d5a:	e140      	b.n	8001fde <__aeabi_dsub+0x342>
 8001d5c:	0264      	lsls	r4, r4, #9
 8001d5e:	0a64      	lsrs	r4, r4, #9
 8001d60:	2c00      	cmp	r4, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0xca>
 8001d64:	e154      	b.n	8002010 <__aeabi_dsub+0x374>
 8001d66:	0020      	movs	r0, r4
 8001d68:	f7fe fb8a 	bl	8000480 <__clzsi2>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	3b08      	subs	r3, #8
 8001d70:	2120      	movs	r1, #32
 8001d72:	0038      	movs	r0, r7
 8001d74:	1aca      	subs	r2, r1, r3
 8001d76:	40d0      	lsrs	r0, r2
 8001d78:	409c      	lsls	r4, r3
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	409f      	lsls	r7, r3
 8001d7e:	4322      	orrs	r2, r4
 8001d80:	429d      	cmp	r5, r3
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0xea>
 8001d84:	e1a6      	b.n	80020d4 <__aeabi_dsub+0x438>
 8001d86:	1b58      	subs	r0, r3, r5
 8001d88:	3001      	adds	r0, #1
 8001d8a:	1a09      	subs	r1, r1, r0
 8001d8c:	003c      	movs	r4, r7
 8001d8e:	408f      	lsls	r7, r1
 8001d90:	40c4      	lsrs	r4, r0
 8001d92:	1e7b      	subs	r3, r7, #1
 8001d94:	419f      	sbcs	r7, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	4327      	orrs	r7, r4
 8001d9c:	431f      	orrs	r7, r3
 8001d9e:	40c2      	lsrs	r2, r0
 8001da0:	003b      	movs	r3, r7
 8001da2:	0014      	movs	r4, r2
 8001da4:	2500      	movs	r5, #0
 8001da6:	4313      	orrs	r3, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x110>
 8001daa:	e1f7      	b.n	800219c <__aeabi_dsub+0x500>
 8001dac:	077b      	lsls	r3, r7, #29
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x116>
 8001db0:	e377      	b.n	80024a2 <__aeabi_dsub+0x806>
 8001db2:	230f      	movs	r3, #15
 8001db4:	0038      	movs	r0, r7
 8001db6:	403b      	ands	r3, r7
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d004      	beq.n	8001dc6 <__aeabi_dsub+0x12a>
 8001dbc:	1d38      	adds	r0, r7, #4
 8001dbe:	42b8      	cmp	r0, r7
 8001dc0:	41bf      	sbcs	r7, r7
 8001dc2:	427f      	negs	r7, r7
 8001dc4:	19e4      	adds	r4, r4, r7
 8001dc6:	0223      	lsls	r3, r4, #8
 8001dc8:	d400      	bmi.n	8001dcc <__aeabi_dsub+0x130>
 8001dca:	e368      	b.n	800249e <__aeabi_dsub+0x802>
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8002000 <__aeabi_dsub+0x364>)
 8001dce:	3501      	adds	r5, #1
 8001dd0:	429d      	cmp	r5, r3
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x13a>
 8001dd4:	e0f4      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8002004 <__aeabi_dsub+0x368>)
 8001dd8:	056d      	lsls	r5, r5, #21
 8001dda:	401c      	ands	r4, r3
 8001ddc:	0d6d      	lsrs	r5, r5, #21
 8001dde:	0767      	lsls	r7, r4, #29
 8001de0:	08c0      	lsrs	r0, r0, #3
 8001de2:	0264      	lsls	r4, r4, #9
 8001de4:	4307      	orrs	r7, r0
 8001de6:	0b24      	lsrs	r4, r4, #12
 8001de8:	e0ec      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_dsub+0x154>
 8001dee:	e329      	b.n	8002444 <__aeabi_dsub+0x7a8>
 8001df0:	4649      	mov	r1, r9
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x15c>
 8001df6:	e0d6      	b.n	8001fa6 <__aeabi_dsub+0x30a>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x164>
 8001dfe:	e12e      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001e00:	1e59      	subs	r1, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x16c>
 8001e06:	e1e6      	b.n	80021d6 <__aeabi_dsub+0x53a>
 8001e08:	42bb      	cmp	r3, r7
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x172>
 8001e0c:	e182      	b.n	8002114 <__aeabi_dsub+0x478>
 8001e0e:	2701      	movs	r7, #1
 8001e10:	000b      	movs	r3, r1
 8001e12:	2938      	cmp	r1, #56	@ 0x38
 8001e14:	dc14      	bgt.n	8001e40 <__aeabi_dsub+0x1a4>
 8001e16:	2b1f      	cmp	r3, #31
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dsub+0x180>
 8001e1a:	e23c      	b.n	8002296 <__aeabi_dsub+0x5fa>
 8001e1c:	2720      	movs	r7, #32
 8001e1e:	1af9      	subs	r1, r7, r3
 8001e20:	468c      	mov	ip, r1
 8001e22:	4659      	mov	r1, fp
 8001e24:	4667      	mov	r7, ip
 8001e26:	40b9      	lsls	r1, r7
 8001e28:	000f      	movs	r7, r1
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	430f      	orrs	r7, r1
 8001e30:	4661      	mov	r1, ip
 8001e32:	408a      	lsls	r2, r1
 8001e34:	1e51      	subs	r1, r2, #1
 8001e36:	418a      	sbcs	r2, r1
 8001e38:	4659      	mov	r1, fp
 8001e3a:	40d9      	lsrs	r1, r3
 8001e3c:	4317      	orrs	r7, r2
 8001e3e:	1864      	adds	r4, r4, r1
 8001e40:	183f      	adds	r7, r7, r0
 8001e42:	4287      	cmp	r7, r0
 8001e44:	4180      	sbcs	r0, r0
 8001e46:	4240      	negs	r0, r0
 8001e48:	1824      	adds	r4, r4, r0
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x1b4>
 8001e4e:	e0c6      	b.n	8001fde <__aeabi_dsub+0x342>
 8001e50:	4b6b      	ldr	r3, [pc, #428]	@ (8002000 <__aeabi_dsub+0x364>)
 8001e52:	3501      	adds	r5, #1
 8001e54:	429d      	cmp	r5, r3
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x1be>
 8001e58:	e0b2      	b.n	8001fc0 <__aeabi_dsub+0x324>
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4b69      	ldr	r3, [pc, #420]	@ (8002004 <__aeabi_dsub+0x368>)
 8001e5e:	087a      	lsrs	r2, r7, #1
 8001e60:	401c      	ands	r4, r3
 8001e62:	4039      	ands	r1, r7
 8001e64:	430a      	orrs	r2, r1
 8001e66:	07e7      	lsls	r7, r4, #31
 8001e68:	4317      	orrs	r7, r2
 8001e6a:	0864      	lsrs	r4, r4, #1
 8001e6c:	e79e      	b.n	8001dac <__aeabi_dsub+0x110>
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <__aeabi_dsub+0x36c>)
 8001e70:	4311      	orrs	r1, r2
 8001e72:	468a      	mov	sl, r1
 8001e74:	18eb      	adds	r3, r5, r3
 8001e76:	2900      	cmp	r1, #0
 8001e78:	d028      	beq.n	8001ecc <__aeabi_dsub+0x230>
 8001e7a:	4566      	cmp	r6, ip
 8001e7c:	d02c      	beq.n	8001ed8 <__aeabi_dsub+0x23c>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d05b      	beq.n	8001f3a <__aeabi_dsub+0x29e>
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x1ec>
 8001e86:	e12c      	b.n	80020e2 <__aeabi_dsub+0x446>
 8001e88:	465b      	mov	r3, fp
 8001e8a:	4666      	mov	r6, ip
 8001e8c:	075f      	lsls	r7, r3, #29
 8001e8e:	08d2      	lsrs	r2, r2, #3
 8001e90:	4317      	orrs	r7, r2
 8001e92:	08dd      	lsrs	r5, r3, #3
 8001e94:	003b      	movs	r3, r7
 8001e96:	432b      	orrs	r3, r5
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x200>
 8001e9a:	e0e2      	b.n	8002062 <__aeabi_dsub+0x3c6>
 8001e9c:	2480      	movs	r4, #128	@ 0x80
 8001e9e:	0324      	lsls	r4, r4, #12
 8001ea0:	432c      	orrs	r4, r5
 8001ea2:	0324      	lsls	r4, r4, #12
 8001ea4:	4d56      	ldr	r5, [pc, #344]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ea6:	0b24      	lsrs	r4, r4, #12
 8001ea8:	e08c      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8001eaa:	4659      	mov	r1, fp
 8001eac:	4311      	orrs	r1, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x216>
 8001eb0:	e0d5      	b.n	800205e <__aeabi_dsub+0x3c2>
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x21e>
 8001eb8:	e1b9      	b.n	800222e <__aeabi_dsub+0x592>
 8001eba:	42bb      	cmp	r3, r7
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x224>
 8001ebe:	e1b1      	b.n	8002224 <__aeabi_dsub+0x588>
 8001ec0:	2701      	movs	r7, #1
 8001ec2:	000b      	movs	r3, r1
 8001ec4:	2938      	cmp	r1, #56	@ 0x38
 8001ec6:	dd00      	ble.n	8001eca <__aeabi_dsub+0x22e>
 8001ec8:	e740      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8001eca:	e72a      	b.n	8001d22 <__aeabi_dsub+0x86>
 8001ecc:	4661      	mov	r1, ip
 8001ece:	2701      	movs	r7, #1
 8001ed0:	4079      	eors	r1, r7
 8001ed2:	468c      	mov	ip, r1
 8001ed4:	4566      	cmp	r6, ip
 8001ed6:	d1d2      	bne.n	8001e7e <__aeabi_dsub+0x1e2>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x242>
 8001edc:	e0c5      	b.n	800206a <__aeabi_dsub+0x3ce>
 8001ede:	2d00      	cmp	r5, #0
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x248>
 8001ee2:	e155      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	0025      	movs	r5, r4
 8001ee8:	4305      	orrs	r5, r0
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x252>
 8001eec:	e212      	b.n	8002314 <__aeabi_dsub+0x678>
 8001eee:	1e59      	subs	r1, r3, #1
 8001ef0:	468c      	mov	ip, r1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x25c>
 8001ef6:	e249      	b.n	800238c <__aeabi_dsub+0x6f0>
 8001ef8:	4d41      	ldr	r5, [pc, #260]	@ (8002000 <__aeabi_dsub+0x364>)
 8001efa:	42ab      	cmp	r3, r5
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x264>
 8001efe:	e28f      	b.n	8002420 <__aeabi_dsub+0x784>
 8001f00:	2701      	movs	r7, #1
 8001f02:	2938      	cmp	r1, #56	@ 0x38
 8001f04:	dc11      	bgt.n	8001f2a <__aeabi_dsub+0x28e>
 8001f06:	4663      	mov	r3, ip
 8001f08:	2b1f      	cmp	r3, #31
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dsub+0x272>
 8001f0c:	e25b      	b.n	80023c6 <__aeabi_dsub+0x72a>
 8001f0e:	4661      	mov	r1, ip
 8001f10:	2320      	movs	r3, #32
 8001f12:	0027      	movs	r7, r4
 8001f14:	1a5b      	subs	r3, r3, r1
 8001f16:	0005      	movs	r5, r0
 8001f18:	4098      	lsls	r0, r3
 8001f1a:	409f      	lsls	r7, r3
 8001f1c:	40cd      	lsrs	r5, r1
 8001f1e:	1e43      	subs	r3, r0, #1
 8001f20:	4198      	sbcs	r0, r3
 8001f22:	40cc      	lsrs	r4, r1
 8001f24:	432f      	orrs	r7, r5
 8001f26:	4307      	orrs	r7, r0
 8001f28:	44a3      	add	fp, r4
 8001f2a:	18bf      	adds	r7, r7, r2
 8001f2c:	4297      	cmp	r7, r2
 8001f2e:	4192      	sbcs	r2, r2
 8001f30:	4252      	negs	r2, r2
 8001f32:	445a      	add	r2, fp
 8001f34:	0014      	movs	r4, r2
 8001f36:	464d      	mov	r5, r9
 8001f38:	e787      	b.n	8001e4a <__aeabi_dsub+0x1ae>
 8001f3a:	4f34      	ldr	r7, [pc, #208]	@ (800200c <__aeabi_dsub+0x370>)
 8001f3c:	1c6b      	adds	r3, r5, #1
 8001f3e:	423b      	tst	r3, r7
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dsub+0x2a8>
 8001f42:	e0b6      	b.n	80020b2 <__aeabi_dsub+0x416>
 8001f44:	4659      	mov	r1, fp
 8001f46:	0023      	movs	r3, r4
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	000f      	movs	r7, r1
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	d000      	beq.n	8001f54 <__aeabi_dsub+0x2b8>
 8001f52:	e126      	b.n	80021a2 <__aeabi_dsub+0x506>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x2be>
 8001f58:	e1c0      	b.n	80022dc <__aeabi_dsub+0x640>
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x2c4>
 8001f5e:	e0a1      	b.n	80020a4 <__aeabi_dsub+0x408>
 8001f60:	1a83      	subs	r3, r0, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	465b      	mov	r3, fp
 8001f66:	4540      	cmp	r0, r8
 8001f68:	41ad      	sbcs	r5, r5
 8001f6a:	1ae3      	subs	r3, r4, r3
 8001f6c:	426d      	negs	r5, r5
 8001f6e:	1b5b      	subs	r3, r3, r5
 8001f70:	2580      	movs	r5, #128	@ 0x80
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	422b      	tst	r3, r5
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x2de>
 8001f78:	e14b      	b.n	8002212 <__aeabi_dsub+0x576>
 8001f7a:	465b      	mov	r3, fp
 8001f7c:	1a10      	subs	r0, r2, r0
 8001f7e:	4282      	cmp	r2, r0
 8001f80:	4192      	sbcs	r2, r2
 8001f82:	1b1c      	subs	r4, r3, r4
 8001f84:	0007      	movs	r7, r0
 8001f86:	2601      	movs	r6, #1
 8001f88:	4663      	mov	r3, ip
 8001f8a:	4252      	negs	r2, r2
 8001f8c:	1aa4      	subs	r4, r4, r2
 8001f8e:	4327      	orrs	r7, r4
 8001f90:	401e      	ands	r6, r3
 8001f92:	2f00      	cmp	r7, #0
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x2fc>
 8001f96:	e142      	b.n	800221e <__aeabi_dsub+0x582>
 8001f98:	422c      	tst	r4, r5
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x302>
 8001f9c:	e26d      	b.n	800247a <__aeabi_dsub+0x7de>
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <__aeabi_dsub+0x368>)
 8001fa0:	2501      	movs	r5, #1
 8001fa2:	401c      	ands	r4, r3
 8001fa4:	e71b      	b.n	8001dde <__aeabi_dsub+0x142>
 8001fa6:	42bd      	cmp	r5, r7
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dsub+0x310>
 8001faa:	e13b      	b.n	8002224 <__aeabi_dsub+0x588>
 8001fac:	2701      	movs	r7, #1
 8001fae:	2b38      	cmp	r3, #56	@ 0x38
 8001fb0:	dd00      	ble.n	8001fb4 <__aeabi_dsub+0x318>
 8001fb2:	e745      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 8001fb4:	2780      	movs	r7, #128	@ 0x80
 8001fb6:	4659      	mov	r1, fp
 8001fb8:	043f      	lsls	r7, r7, #16
 8001fba:	4339      	orrs	r1, r7
 8001fbc:	468b      	mov	fp, r1
 8001fbe:	e72a      	b.n	8001e16 <__aeabi_dsub+0x17a>
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2700      	movs	r7, #0
 8001fc4:	052d      	lsls	r5, r5, #20
 8001fc6:	4325      	orrs	r5, r4
 8001fc8:	07f6      	lsls	r6, r6, #31
 8001fca:	4335      	orrs	r5, r6
 8001fcc:	0038      	movs	r0, r7
 8001fce:	0029      	movs	r1, r5
 8001fd0:	b003      	add	sp, #12
 8001fd2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fd4:	46bb      	mov	fp, r7
 8001fd6:	46b2      	mov	sl, r6
 8001fd8:	46a9      	mov	r9, r5
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	077b      	lsls	r3, r7, #29
 8001fe0:	d004      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	403b      	ands	r3, r7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x350>
 8001fea:	e6e7      	b.n	8001dbc <__aeabi_dsub+0x120>
 8001fec:	002b      	movs	r3, r5
 8001fee:	08f8      	lsrs	r0, r7, #3
 8001ff0:	4a03      	ldr	r2, [pc, #12]	@ (8002000 <__aeabi_dsub+0x364>)
 8001ff2:	0767      	lsls	r7, r4, #29
 8001ff4:	4307      	orrs	r7, r0
 8001ff6:	08e5      	lsrs	r5, r4, #3
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x362>
 8001ffc:	e74a      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8001ffe:	e0a5      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002000:	000007ff 	.word	0x000007ff
 8002004:	ff7fffff 	.word	0xff7fffff
 8002008:	fffff801 	.word	0xfffff801
 800200c:	000007fe 	.word	0x000007fe
 8002010:	0038      	movs	r0, r7
 8002012:	f7fe fa35 	bl	8000480 <__clzsi2>
 8002016:	0003      	movs	r3, r0
 8002018:	3318      	adds	r3, #24
 800201a:	2b1f      	cmp	r3, #31
 800201c:	dc00      	bgt.n	8002020 <__aeabi_dsub+0x384>
 800201e:	e6a7      	b.n	8001d70 <__aeabi_dsub+0xd4>
 8002020:	003a      	movs	r2, r7
 8002022:	3808      	subs	r0, #8
 8002024:	4082      	lsls	r2, r0
 8002026:	429d      	cmp	r5, r3
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x390>
 800202a:	e08a      	b.n	8002142 <__aeabi_dsub+0x4a6>
 800202c:	1b5b      	subs	r3, r3, r5
 800202e:	1c58      	adds	r0, r3, #1
 8002030:	281f      	cmp	r0, #31
 8002032:	dc00      	bgt.n	8002036 <__aeabi_dsub+0x39a>
 8002034:	e1d8      	b.n	80023e8 <__aeabi_dsub+0x74c>
 8002036:	0017      	movs	r7, r2
 8002038:	3b1f      	subs	r3, #31
 800203a:	40df      	lsrs	r7, r3
 800203c:	2820      	cmp	r0, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dsub+0x3b0>
 8002040:	2340      	movs	r3, #64	@ 0x40
 8002042:	1a1b      	subs	r3, r3, r0
 8002044:	409a      	lsls	r2, r3
 8002046:	1e53      	subs	r3, r2, #1
 8002048:	419a      	sbcs	r2, r3
 800204a:	4317      	orrs	r7, r2
 800204c:	2500      	movs	r5, #0
 800204e:	2f00      	cmp	r7, #0
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x3b8>
 8002052:	e0e5      	b.n	8002220 <__aeabi_dsub+0x584>
 8002054:	077b      	lsls	r3, r7, #29
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x3be>
 8002058:	e6ab      	b.n	8001db2 <__aeabi_dsub+0x116>
 800205a:	002c      	movs	r4, r5
 800205c:	e7c6      	b.n	8001fec <__aeabi_dsub+0x350>
 800205e:	08c0      	lsrs	r0, r0, #3
 8002060:	e7c6      	b.n	8001ff0 <__aeabi_dsub+0x354>
 8002062:	2700      	movs	r7, #0
 8002064:	2400      	movs	r4, #0
 8002066:	4dd1      	ldr	r5, [pc, #836]	@ (80023ac <__aeabi_dsub+0x710>)
 8002068:	e7ac      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800206a:	4fd1      	ldr	r7, [pc, #836]	@ (80023b0 <__aeabi_dsub+0x714>)
 800206c:	1c6b      	adds	r3, r5, #1
 800206e:	423b      	tst	r3, r7
 8002070:	d171      	bne.n	8002156 <__aeabi_dsub+0x4ba>
 8002072:	0023      	movs	r3, r4
 8002074:	4303      	orrs	r3, r0
 8002076:	2d00      	cmp	r5, #0
 8002078:	d000      	beq.n	800207c <__aeabi_dsub+0x3e0>
 800207a:	e14e      	b.n	800231a <__aeabi_dsub+0x67e>
 800207c:	4657      	mov	r7, sl
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x3e8>
 8002082:	e1b5      	b.n	80023f0 <__aeabi_dsub+0x754>
 8002084:	2f00      	cmp	r7, #0
 8002086:	d00d      	beq.n	80020a4 <__aeabi_dsub+0x408>
 8002088:	1883      	adds	r3, r0, r2
 800208a:	4283      	cmp	r3, r0
 800208c:	4180      	sbcs	r0, r0
 800208e:	445c      	add	r4, fp
 8002090:	4240      	negs	r0, r0
 8002092:	1824      	adds	r4, r4, r0
 8002094:	0222      	lsls	r2, r4, #8
 8002096:	d500      	bpl.n	800209a <__aeabi_dsub+0x3fe>
 8002098:	e1c8      	b.n	800242c <__aeabi_dsub+0x790>
 800209a:	001f      	movs	r7, r3
 800209c:	4698      	mov	r8, r3
 800209e:	4327      	orrs	r7, r4
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x408>
 80020a2:	e0bc      	b.n	800221e <__aeabi_dsub+0x582>
 80020a4:	4643      	mov	r3, r8
 80020a6:	0767      	lsls	r7, r4, #29
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	431f      	orrs	r7, r3
 80020ac:	08e5      	lsrs	r5, r4, #3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e04c      	b.n	800214c <__aeabi_dsub+0x4b0>
 80020b2:	1a83      	subs	r3, r0, r2
 80020b4:	4698      	mov	r8, r3
 80020b6:	465b      	mov	r3, fp
 80020b8:	4540      	cmp	r0, r8
 80020ba:	41bf      	sbcs	r7, r7
 80020bc:	1ae3      	subs	r3, r4, r3
 80020be:	427f      	negs	r7, r7
 80020c0:	1bdb      	subs	r3, r3, r7
 80020c2:	021f      	lsls	r7, r3, #8
 80020c4:	d47c      	bmi.n	80021c0 <__aeabi_dsub+0x524>
 80020c6:	4647      	mov	r7, r8
 80020c8:	431f      	orrs	r7, r3
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x432>
 80020cc:	e0a6      	b.n	800221c <__aeabi_dsub+0x580>
 80020ce:	001c      	movs	r4, r3
 80020d0:	4647      	mov	r7, r8
 80020d2:	e645      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80020d4:	4cb7      	ldr	r4, [pc, #732]	@ (80023b4 <__aeabi_dsub+0x718>)
 80020d6:	1aed      	subs	r5, r5, r3
 80020d8:	4014      	ands	r4, r2
 80020da:	077b      	lsls	r3, r7, #29
 80020dc:	d000      	beq.n	80020e0 <__aeabi_dsub+0x444>
 80020de:	e780      	b.n	8001fe2 <__aeabi_dsub+0x346>
 80020e0:	e784      	b.n	8001fec <__aeabi_dsub+0x350>
 80020e2:	464b      	mov	r3, r9
 80020e4:	0025      	movs	r5, r4
 80020e6:	4305      	orrs	r5, r0
 80020e8:	d066      	beq.n	80021b8 <__aeabi_dsub+0x51c>
 80020ea:	1e5f      	subs	r7, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x456>
 80020f0:	e0fc      	b.n	80022ec <__aeabi_dsub+0x650>
 80020f2:	4dae      	ldr	r5, [pc, #696]	@ (80023ac <__aeabi_dsub+0x710>)
 80020f4:	42ab      	cmp	r3, r5
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0x45e>
 80020f8:	e15e      	b.n	80023b8 <__aeabi_dsub+0x71c>
 80020fa:	4666      	mov	r6, ip
 80020fc:	2f38      	cmp	r7, #56	@ 0x38
 80020fe:	dc00      	bgt.n	8002102 <__aeabi_dsub+0x466>
 8002100:	e0b4      	b.n	800226c <__aeabi_dsub+0x5d0>
 8002102:	2001      	movs	r0, #1
 8002104:	1a17      	subs	r7, r2, r0
 8002106:	42ba      	cmp	r2, r7
 8002108:	4192      	sbcs	r2, r2
 800210a:	465b      	mov	r3, fp
 800210c:	4252      	negs	r2, r2
 800210e:	464d      	mov	r5, r9
 8002110:	1a9c      	subs	r4, r3, r2
 8002112:	e620      	b.n	8001d56 <__aeabi_dsub+0xba>
 8002114:	0767      	lsls	r7, r4, #29
 8002116:	08c0      	lsrs	r0, r0, #3
 8002118:	4307      	orrs	r7, r0
 800211a:	08e5      	lsrs	r5, r4, #3
 800211c:	e6ba      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800211e:	001f      	movs	r7, r3
 8002120:	4659      	mov	r1, fp
 8002122:	3f20      	subs	r7, #32
 8002124:	40f9      	lsrs	r1, r7
 8002126:	000f      	movs	r7, r1
 8002128:	2b20      	cmp	r3, #32
 800212a:	d005      	beq.n	8002138 <__aeabi_dsub+0x49c>
 800212c:	2140      	movs	r1, #64	@ 0x40
 800212e:	1acb      	subs	r3, r1, r3
 8002130:	4659      	mov	r1, fp
 8002132:	4099      	lsls	r1, r3
 8002134:	430a      	orrs	r2, r1
 8002136:	4692      	mov	sl, r2
 8002138:	4653      	mov	r3, sl
 800213a:	1e5a      	subs	r2, r3, #1
 800213c:	4193      	sbcs	r3, r2
 800213e:	431f      	orrs	r7, r3
 8002140:	e604      	b.n	8001d4c <__aeabi_dsub+0xb0>
 8002142:	1aeb      	subs	r3, r5, r3
 8002144:	4d9b      	ldr	r5, [pc, #620]	@ (80023b4 <__aeabi_dsub+0x718>)
 8002146:	4015      	ands	r5, r2
 8002148:	076f      	lsls	r7, r5, #29
 800214a:	08ed      	lsrs	r5, r5, #3
 800214c:	032c      	lsls	r4, r5, #12
 800214e:	055d      	lsls	r5, r3, #21
 8002150:	0b24      	lsrs	r4, r4, #12
 8002152:	0d6d      	lsrs	r5, r5, #21
 8002154:	e736      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002156:	4d95      	ldr	r5, [pc, #596]	@ (80023ac <__aeabi_dsub+0x710>)
 8002158:	42ab      	cmp	r3, r5
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x4c2>
 800215c:	e0d6      	b.n	800230c <__aeabi_dsub+0x670>
 800215e:	1882      	adds	r2, r0, r2
 8002160:	0021      	movs	r1, r4
 8002162:	4282      	cmp	r2, r0
 8002164:	4180      	sbcs	r0, r0
 8002166:	4459      	add	r1, fp
 8002168:	4240      	negs	r0, r0
 800216a:	1808      	adds	r0, r1, r0
 800216c:	07c7      	lsls	r7, r0, #31
 800216e:	0852      	lsrs	r2, r2, #1
 8002170:	4317      	orrs	r7, r2
 8002172:	0844      	lsrs	r4, r0, #1
 8002174:	0752      	lsls	r2, r2, #29
 8002176:	d400      	bmi.n	800217a <__aeabi_dsub+0x4de>
 8002178:	e185      	b.n	8002486 <__aeabi_dsub+0x7ea>
 800217a:	220f      	movs	r2, #15
 800217c:	001d      	movs	r5, r3
 800217e:	403a      	ands	r2, r7
 8002180:	2a04      	cmp	r2, #4
 8002182:	d000      	beq.n	8002186 <__aeabi_dsub+0x4ea>
 8002184:	e61a      	b.n	8001dbc <__aeabi_dsub+0x120>
 8002186:	08ff      	lsrs	r7, r7, #3
 8002188:	0764      	lsls	r4, r4, #29
 800218a:	4327      	orrs	r7, r4
 800218c:	0905      	lsrs	r5, r0, #4
 800218e:	e7dd      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002190:	465b      	mov	r3, fp
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	075f      	lsls	r7, r3, #29
 8002196:	4317      	orrs	r7, r2
 8002198:	08dd      	lsrs	r5, r3, #3
 800219a:	e67b      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800219c:	2700      	movs	r7, #0
 800219e:	2400      	movs	r4, #0
 80021a0:	e710      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dsub+0x50c>
 80021a6:	e0d6      	b.n	8002356 <__aeabi_dsub+0x6ba>
 80021a8:	2900      	cmp	r1, #0
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x512>
 80021ac:	e12f      	b.n	800240e <__aeabi_dsub+0x772>
 80021ae:	2480      	movs	r4, #128	@ 0x80
 80021b0:	2600      	movs	r6, #0
 80021b2:	4d7e      	ldr	r5, [pc, #504]	@ (80023ac <__aeabi_dsub+0x710>)
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	e705      	b.n	8001fc4 <__aeabi_dsub+0x328>
 80021b8:	4666      	mov	r6, ip
 80021ba:	465c      	mov	r4, fp
 80021bc:	08d0      	lsrs	r0, r2, #3
 80021be:	e717      	b.n	8001ff0 <__aeabi_dsub+0x354>
 80021c0:	465b      	mov	r3, fp
 80021c2:	1a17      	subs	r7, r2, r0
 80021c4:	42ba      	cmp	r2, r7
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	1b1c      	subs	r4, r3, r4
 80021ca:	2601      	movs	r6, #1
 80021cc:	4663      	mov	r3, ip
 80021ce:	4252      	negs	r2, r2
 80021d0:	1aa4      	subs	r4, r4, r2
 80021d2:	401e      	ands	r6, r3
 80021d4:	e5c4      	b.n	8001d60 <__aeabi_dsub+0xc4>
 80021d6:	1883      	adds	r3, r0, r2
 80021d8:	4283      	cmp	r3, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	445c      	add	r4, fp
 80021de:	4240      	negs	r0, r0
 80021e0:	1825      	adds	r5, r4, r0
 80021e2:	022a      	lsls	r2, r5, #8
 80021e4:	d400      	bmi.n	80021e8 <__aeabi_dsub+0x54c>
 80021e6:	e0da      	b.n	800239e <__aeabi_dsub+0x702>
 80021e8:	4a72      	ldr	r2, [pc, #456]	@ (80023b4 <__aeabi_dsub+0x718>)
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4015      	ands	r5, r2
 80021ee:	07ea      	lsls	r2, r5, #31
 80021f0:	431a      	orrs	r2, r3
 80021f2:	0869      	lsrs	r1, r5, #1
 80021f4:	075b      	lsls	r3, r3, #29
 80021f6:	d400      	bmi.n	80021fa <__aeabi_dsub+0x55e>
 80021f8:	e14a      	b.n	8002490 <__aeabi_dsub+0x7f4>
 80021fa:	230f      	movs	r3, #15
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x568>
 8002202:	e0fc      	b.n	80023fe <__aeabi_dsub+0x762>
 8002204:	1d17      	adds	r7, r2, #4
 8002206:	4297      	cmp	r7, r2
 8002208:	41a4      	sbcs	r4, r4
 800220a:	4264      	negs	r4, r4
 800220c:	2502      	movs	r5, #2
 800220e:	1864      	adds	r4, r4, r1
 8002210:	e6ec      	b.n	8001fec <__aeabi_dsub+0x350>
 8002212:	4647      	mov	r7, r8
 8002214:	001c      	movs	r4, r3
 8002216:	431f      	orrs	r7, r3
 8002218:	d000      	beq.n	800221c <__aeabi_dsub+0x580>
 800221a:	e743      	b.n	80020a4 <__aeabi_dsub+0x408>
 800221c:	2600      	movs	r6, #0
 800221e:	2500      	movs	r5, #0
 8002220:	2400      	movs	r4, #0
 8002222:	e6cf      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	0767      	lsls	r7, r4, #29
 8002228:	4307      	orrs	r7, r0
 800222a:	08e5      	lsrs	r5, r4, #3
 800222c:	e632      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800222e:	1a87      	subs	r7, r0, r2
 8002230:	465b      	mov	r3, fp
 8002232:	42b8      	cmp	r0, r7
 8002234:	4180      	sbcs	r0, r0
 8002236:	1ae4      	subs	r4, r4, r3
 8002238:	4240      	negs	r0, r0
 800223a:	1a24      	subs	r4, r4, r0
 800223c:	0223      	lsls	r3, r4, #8
 800223e:	d428      	bmi.n	8002292 <__aeabi_dsub+0x5f6>
 8002240:	0763      	lsls	r3, r4, #29
 8002242:	08ff      	lsrs	r7, r7, #3
 8002244:	431f      	orrs	r7, r3
 8002246:	08e5      	lsrs	r5, r4, #3
 8002248:	2301      	movs	r3, #1
 800224a:	e77f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <__aeabi_dsub+0x5b6>
 8002250:	e673      	b.n	8001f3a <__aeabi_dsub+0x29e>
 8002252:	464b      	mov	r3, r9
 8002254:	1b5f      	subs	r7, r3, r5
 8002256:	003b      	movs	r3, r7
 8002258:	2d00      	cmp	r5, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x5c2>
 800225c:	e742      	b.n	80020e4 <__aeabi_dsub+0x448>
 800225e:	2f38      	cmp	r7, #56	@ 0x38
 8002260:	dd00      	ble.n	8002264 <__aeabi_dsub+0x5c8>
 8002262:	e0ec      	b.n	800243e <__aeabi_dsub+0x7a2>
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	000e      	movs	r6, r1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431c      	orrs	r4, r3
 800226c:	2f1f      	cmp	r7, #31
 800226e:	dc25      	bgt.n	80022bc <__aeabi_dsub+0x620>
 8002270:	2520      	movs	r5, #32
 8002272:	0023      	movs	r3, r4
 8002274:	1bed      	subs	r5, r5, r7
 8002276:	0001      	movs	r1, r0
 8002278:	40a8      	lsls	r0, r5
 800227a:	40ab      	lsls	r3, r5
 800227c:	40f9      	lsrs	r1, r7
 800227e:	1e45      	subs	r5, r0, #1
 8002280:	41a8      	sbcs	r0, r5
 8002282:	430b      	orrs	r3, r1
 8002284:	40fc      	lsrs	r4, r7
 8002286:	4318      	orrs	r0, r3
 8002288:	465b      	mov	r3, fp
 800228a:	1b1b      	subs	r3, r3, r4
 800228c:	469b      	mov	fp, r3
 800228e:	e739      	b.n	8002104 <__aeabi_dsub+0x468>
 8002290:	4666      	mov	r6, ip
 8002292:	2501      	movs	r5, #1
 8002294:	e562      	b.n	8001d5c <__aeabi_dsub+0xc0>
 8002296:	001f      	movs	r7, r3
 8002298:	4659      	mov	r1, fp
 800229a:	3f20      	subs	r7, #32
 800229c:	40f9      	lsrs	r1, r7
 800229e:	468c      	mov	ip, r1
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dsub+0x614>
 80022a4:	2740      	movs	r7, #64	@ 0x40
 80022a6:	4659      	mov	r1, fp
 80022a8:	1afb      	subs	r3, r7, r3
 80022aa:	4099      	lsls	r1, r3
 80022ac:	430a      	orrs	r2, r1
 80022ae:	4692      	mov	sl, r2
 80022b0:	4657      	mov	r7, sl
 80022b2:	1e7b      	subs	r3, r7, #1
 80022b4:	419f      	sbcs	r7, r3
 80022b6:	4663      	mov	r3, ip
 80022b8:	431f      	orrs	r7, r3
 80022ba:	e5c1      	b.n	8001e40 <__aeabi_dsub+0x1a4>
 80022bc:	003b      	movs	r3, r7
 80022be:	0025      	movs	r5, r4
 80022c0:	3b20      	subs	r3, #32
 80022c2:	40dd      	lsrs	r5, r3
 80022c4:	2f20      	cmp	r7, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_dsub+0x636>
 80022c8:	2340      	movs	r3, #64	@ 0x40
 80022ca:	1bdb      	subs	r3, r3, r7
 80022cc:	409c      	lsls	r4, r3
 80022ce:	4320      	orrs	r0, r4
 80022d0:	4680      	mov	r8, r0
 80022d2:	4640      	mov	r0, r8
 80022d4:	1e43      	subs	r3, r0, #1
 80022d6:	4198      	sbcs	r0, r3
 80022d8:	4328      	orrs	r0, r5
 80022da:	e713      	b.n	8002104 <__aeabi_dsub+0x468>
 80022dc:	2900      	cmp	r1, #0
 80022de:	d09d      	beq.n	800221c <__aeabi_dsub+0x580>
 80022e0:	2601      	movs	r6, #1
 80022e2:	4663      	mov	r3, ip
 80022e4:	465c      	mov	r4, fp
 80022e6:	4690      	mov	r8, r2
 80022e8:	401e      	ands	r6, r3
 80022ea:	e6db      	b.n	80020a4 <__aeabi_dsub+0x408>
 80022ec:	1a17      	subs	r7, r2, r0
 80022ee:	465b      	mov	r3, fp
 80022f0:	42ba      	cmp	r2, r7
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	1b1c      	subs	r4, r3, r4
 80022f6:	4252      	negs	r2, r2
 80022f8:	1aa4      	subs	r4, r4, r2
 80022fa:	0223      	lsls	r3, r4, #8
 80022fc:	d4c8      	bmi.n	8002290 <__aeabi_dsub+0x5f4>
 80022fe:	0763      	lsls	r3, r4, #29
 8002300:	08ff      	lsrs	r7, r7, #3
 8002302:	431f      	orrs	r7, r3
 8002304:	4666      	mov	r6, ip
 8002306:	2301      	movs	r3, #1
 8002308:	08e5      	lsrs	r5, r4, #3
 800230a:	e71f      	b.n	800214c <__aeabi_dsub+0x4b0>
 800230c:	001d      	movs	r5, r3
 800230e:	2400      	movs	r4, #0
 8002310:	2700      	movs	r7, #0
 8002312:	e657      	b.n	8001fc4 <__aeabi_dsub+0x328>
 8002314:	465c      	mov	r4, fp
 8002316:	08d0      	lsrs	r0, r2, #3
 8002318:	e66a      	b.n	8001ff0 <__aeabi_dsub+0x354>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x684>
 800231e:	e737      	b.n	8002190 <__aeabi_dsub+0x4f4>
 8002320:	4653      	mov	r3, sl
 8002322:	08c0      	lsrs	r0, r0, #3
 8002324:	0767      	lsls	r7, r4, #29
 8002326:	4307      	orrs	r7, r0
 8002328:	08e5      	lsrs	r5, r4, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x694>
 800232e:	e5b1      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	031b      	lsls	r3, r3, #12
 8002334:	421d      	tst	r5, r3
 8002336:	d008      	beq.n	800234a <__aeabi_dsub+0x6ae>
 8002338:	4659      	mov	r1, fp
 800233a:	08c8      	lsrs	r0, r1, #3
 800233c:	4218      	tst	r0, r3
 800233e:	d104      	bne.n	800234a <__aeabi_dsub+0x6ae>
 8002340:	08d2      	lsrs	r2, r2, #3
 8002342:	0749      	lsls	r1, r1, #29
 8002344:	430a      	orrs	r2, r1
 8002346:	0017      	movs	r7, r2
 8002348:	0005      	movs	r5, r0
 800234a:	0f7b      	lsrs	r3, r7, #29
 800234c:	00ff      	lsls	r7, r7, #3
 800234e:	08ff      	lsrs	r7, r7, #3
 8002350:	075b      	lsls	r3, r3, #29
 8002352:	431f      	orrs	r7, r3
 8002354:	e59e      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002356:	08c0      	lsrs	r0, r0, #3
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	4318      	orrs	r0, r3
 800235c:	08e5      	lsrs	r5, r4, #3
 800235e:	2900      	cmp	r1, #0
 8002360:	d053      	beq.n	800240a <__aeabi_dsub+0x76e>
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	031b      	lsls	r3, r3, #12
 8002366:	421d      	tst	r5, r3
 8002368:	d00a      	beq.n	8002380 <__aeabi_dsub+0x6e4>
 800236a:	4659      	mov	r1, fp
 800236c:	08cc      	lsrs	r4, r1, #3
 800236e:	421c      	tst	r4, r3
 8002370:	d106      	bne.n	8002380 <__aeabi_dsub+0x6e4>
 8002372:	2601      	movs	r6, #1
 8002374:	4663      	mov	r3, ip
 8002376:	0025      	movs	r5, r4
 8002378:	08d0      	lsrs	r0, r2, #3
 800237a:	0749      	lsls	r1, r1, #29
 800237c:	4308      	orrs	r0, r1
 800237e:	401e      	ands	r6, r3
 8002380:	0f47      	lsrs	r7, r0, #29
 8002382:	00c0      	lsls	r0, r0, #3
 8002384:	08c0      	lsrs	r0, r0, #3
 8002386:	077f      	lsls	r7, r7, #29
 8002388:	4307      	orrs	r7, r0
 800238a:	e583      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800238c:	1883      	adds	r3, r0, r2
 800238e:	4293      	cmp	r3, r2
 8002390:	4192      	sbcs	r2, r2
 8002392:	445c      	add	r4, fp
 8002394:	4252      	negs	r2, r2
 8002396:	18a5      	adds	r5, r4, r2
 8002398:	022a      	lsls	r2, r5, #8
 800239a:	d500      	bpl.n	800239e <__aeabi_dsub+0x702>
 800239c:	e724      	b.n	80021e8 <__aeabi_dsub+0x54c>
 800239e:	076f      	lsls	r7, r5, #29
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	431f      	orrs	r7, r3
 80023a4:	08ed      	lsrs	r5, r5, #3
 80023a6:	2301      	movs	r3, #1
 80023a8:	e6d0      	b.n	800214c <__aeabi_dsub+0x4b0>
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	000007ff 	.word	0x000007ff
 80023b0:	000007fe 	.word	0x000007fe
 80023b4:	ff7fffff 	.word	0xff7fffff
 80023b8:	465b      	mov	r3, fp
 80023ba:	08d2      	lsrs	r2, r2, #3
 80023bc:	075f      	lsls	r7, r3, #29
 80023be:	4666      	mov	r6, ip
 80023c0:	4317      	orrs	r7, r2
 80023c2:	08dd      	lsrs	r5, r3, #3
 80023c4:	e566      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 80023c6:	0025      	movs	r5, r4
 80023c8:	3b20      	subs	r3, #32
 80023ca:	40dd      	lsrs	r5, r3
 80023cc:	4663      	mov	r3, ip
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d005      	beq.n	80023de <__aeabi_dsub+0x742>
 80023d2:	2340      	movs	r3, #64	@ 0x40
 80023d4:	4661      	mov	r1, ip
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	409c      	lsls	r4, r3
 80023da:	4320      	orrs	r0, r4
 80023dc:	4680      	mov	r8, r0
 80023de:	4647      	mov	r7, r8
 80023e0:	1e7b      	subs	r3, r7, #1
 80023e2:	419f      	sbcs	r7, r3
 80023e4:	432f      	orrs	r7, r5
 80023e6:	e5a0      	b.n	8001f2a <__aeabi_dsub+0x28e>
 80023e8:	2120      	movs	r1, #32
 80023ea:	2700      	movs	r7, #0
 80023ec:	1a09      	subs	r1, r1, r0
 80023ee:	e4d2      	b.n	8001d96 <__aeabi_dsub+0xfa>
 80023f0:	2f00      	cmp	r7, #0
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x75a>
 80023f4:	e713      	b.n	800221e <__aeabi_dsub+0x582>
 80023f6:	465c      	mov	r4, fp
 80023f8:	0017      	movs	r7, r2
 80023fa:	2500      	movs	r5, #0
 80023fc:	e5f6      	b.n	8001fec <__aeabi_dsub+0x350>
 80023fe:	08d7      	lsrs	r7, r2, #3
 8002400:	0749      	lsls	r1, r1, #29
 8002402:	2302      	movs	r3, #2
 8002404:	430f      	orrs	r7, r1
 8002406:	092d      	lsrs	r5, r5, #4
 8002408:	e6a0      	b.n	800214c <__aeabi_dsub+0x4b0>
 800240a:	0007      	movs	r7, r0
 800240c:	e542      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800240e:	465b      	mov	r3, fp
 8002410:	2601      	movs	r6, #1
 8002412:	075f      	lsls	r7, r3, #29
 8002414:	08dd      	lsrs	r5, r3, #3
 8002416:	4663      	mov	r3, ip
 8002418:	08d2      	lsrs	r2, r2, #3
 800241a:	4317      	orrs	r7, r2
 800241c:	401e      	ands	r6, r3
 800241e:	e539      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 8002420:	465b      	mov	r3, fp
 8002422:	08d2      	lsrs	r2, r2, #3
 8002424:	075f      	lsls	r7, r3, #29
 8002426:	4317      	orrs	r7, r2
 8002428:	08dd      	lsrs	r5, r3, #3
 800242a:	e533      	b.n	8001e94 <__aeabi_dsub+0x1f8>
 800242c:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <__aeabi_dsub+0x80c>)
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	4022      	ands	r2, r4
 8002432:	0757      	lsls	r7, r2, #29
 8002434:	0252      	lsls	r2, r2, #9
 8002436:	2501      	movs	r5, #1
 8002438:	431f      	orrs	r7, r3
 800243a:	0b14      	lsrs	r4, r2, #12
 800243c:	e5c2      	b.n	8001fc4 <__aeabi_dsub+0x328>
 800243e:	000e      	movs	r6, r1
 8002440:	2001      	movs	r0, #1
 8002442:	e65f      	b.n	8002104 <__aeabi_dsub+0x468>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <__aeabi_dsub+0x7c8>
 8002448:	464b      	mov	r3, r9
 800244a:	1b5b      	subs	r3, r3, r5
 800244c:	469c      	mov	ip, r3
 800244e:	2d00      	cmp	r5, #0
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x7b8>
 8002452:	e548      	b.n	8001ee6 <__aeabi_dsub+0x24a>
 8002454:	2701      	movs	r7, #1
 8002456:	2b38      	cmp	r3, #56	@ 0x38
 8002458:	dd00      	ble.n	800245c <__aeabi_dsub+0x7c0>
 800245a:	e566      	b.n	8001f2a <__aeabi_dsub+0x28e>
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	431c      	orrs	r4, r3
 8002462:	e550      	b.n	8001f06 <__aeabi_dsub+0x26a>
 8002464:	1c6b      	adds	r3, r5, #1
 8002466:	4d11      	ldr	r5, [pc, #68]	@ (80024ac <__aeabi_dsub+0x810>)
 8002468:	422b      	tst	r3, r5
 800246a:	d000      	beq.n	800246e <__aeabi_dsub+0x7d2>
 800246c:	e673      	b.n	8002156 <__aeabi_dsub+0x4ba>
 800246e:	4659      	mov	r1, fp
 8002470:	0023      	movs	r3, r4
 8002472:	4311      	orrs	r1, r2
 8002474:	468a      	mov	sl, r1
 8002476:	4303      	orrs	r3, r0
 8002478:	e600      	b.n	800207c <__aeabi_dsub+0x3e0>
 800247a:	0767      	lsls	r7, r4, #29
 800247c:	08c0      	lsrs	r0, r0, #3
 800247e:	2300      	movs	r3, #0
 8002480:	4307      	orrs	r7, r0
 8002482:	08e5      	lsrs	r5, r4, #3
 8002484:	e662      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002486:	0764      	lsls	r4, r4, #29
 8002488:	08ff      	lsrs	r7, r7, #3
 800248a:	4327      	orrs	r7, r4
 800248c:	0905      	lsrs	r5, r0, #4
 800248e:	e65d      	b.n	800214c <__aeabi_dsub+0x4b0>
 8002490:	08d2      	lsrs	r2, r2, #3
 8002492:	0749      	lsls	r1, r1, #29
 8002494:	4311      	orrs	r1, r2
 8002496:	000f      	movs	r7, r1
 8002498:	2302      	movs	r3, #2
 800249a:	092d      	lsrs	r5, r5, #4
 800249c:	e656      	b.n	800214c <__aeabi_dsub+0x4b0>
 800249e:	0007      	movs	r7, r0
 80024a0:	e5a4      	b.n	8001fec <__aeabi_dsub+0x350>
 80024a2:	0038      	movs	r0, r7
 80024a4:	e48f      	b.n	8001dc6 <__aeabi_dsub+0x12a>
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	ff7fffff 	.word	0xff7fffff
 80024ac:	000007fe 	.word	0x000007fe

080024b0 <__aeabi_dcmpun>:
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	46c6      	mov	lr, r8
 80024b4:	031e      	lsls	r6, r3, #12
 80024b6:	0b36      	lsrs	r6, r6, #12
 80024b8:	46b0      	mov	r8, r6
 80024ba:	4e0d      	ldr	r6, [pc, #52]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024bc:	030c      	lsls	r4, r1, #12
 80024be:	004d      	lsls	r5, r1, #1
 80024c0:	005f      	lsls	r7, r3, #1
 80024c2:	b500      	push	{lr}
 80024c4:	0b24      	lsrs	r4, r4, #12
 80024c6:	0d6d      	lsrs	r5, r5, #21
 80024c8:	0d7f      	lsrs	r7, r7, #21
 80024ca:	42b5      	cmp	r5, r6
 80024cc:	d00b      	beq.n	80024e6 <__aeabi_dcmpun+0x36>
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__aeabi_dcmpun+0x40>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	428f      	cmp	r7, r1
 80024d4:	d104      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024d6:	4646      	mov	r6, r8
 80024d8:	4316      	orrs	r6, r2
 80024da:	0030      	movs	r0, r6
 80024dc:	1e43      	subs	r3, r0, #1
 80024de:	4198      	sbcs	r0, r3
 80024e0:	bc80      	pop	{r7}
 80024e2:	46b8      	mov	r8, r7
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e6:	4304      	orrs	r4, r0
 80024e8:	2001      	movs	r0, #1
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d1f8      	bne.n	80024e0 <__aeabi_dcmpun+0x30>
 80024ee:	e7ee      	b.n	80024ce <__aeabi_dcmpun+0x1e>
 80024f0:	000007ff 	.word	0x000007ff

080024f4 <__aeabi_d2iz>:
 80024f4:	000b      	movs	r3, r1
 80024f6:	0002      	movs	r2, r0
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	4d16      	ldr	r5, [pc, #88]	@ (8002554 <__aeabi_d2iz+0x60>)
 80024fc:	030c      	lsls	r4, r1, #12
 80024fe:	b082      	sub	sp, #8
 8002500:	0049      	lsls	r1, r1, #1
 8002502:	2000      	movs	r0, #0
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	0b24      	lsrs	r4, r4, #12
 800250a:	0d49      	lsrs	r1, r1, #21
 800250c:	0fde      	lsrs	r6, r3, #31
 800250e:	42a9      	cmp	r1, r5
 8002510:	dd04      	ble.n	800251c <__aeabi_d2iz+0x28>
 8002512:	4811      	ldr	r0, [pc, #68]	@ (8002558 <__aeabi_d2iz+0x64>)
 8002514:	4281      	cmp	r1, r0
 8002516:	dd03      	ble.n	8002520 <__aeabi_d2iz+0x2c>
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <__aeabi_d2iz+0x68>)
 800251a:	18f0      	adds	r0, r6, r3
 800251c:	b002      	add	sp, #8
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	2080      	movs	r0, #128	@ 0x80
 8002522:	0340      	lsls	r0, r0, #13
 8002524:	4320      	orrs	r0, r4
 8002526:	4c0e      	ldr	r4, [pc, #56]	@ (8002560 <__aeabi_d2iz+0x6c>)
 8002528:	1a64      	subs	r4, r4, r1
 800252a:	2c1f      	cmp	r4, #31
 800252c:	dd08      	ble.n	8002540 <__aeabi_d2iz+0x4c>
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <__aeabi_d2iz+0x70>)
 8002530:	1a5b      	subs	r3, r3, r1
 8002532:	40d8      	lsrs	r0, r3
 8002534:	0003      	movs	r3, r0
 8002536:	4258      	negs	r0, r3
 8002538:	2e00      	cmp	r6, #0
 800253a:	d1ef      	bne.n	800251c <__aeabi_d2iz+0x28>
 800253c:	0018      	movs	r0, r3
 800253e:	e7ed      	b.n	800251c <__aeabi_d2iz+0x28>
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <__aeabi_d2iz+0x74>)
 8002542:	9a00      	ldr	r2, [sp, #0]
 8002544:	469c      	mov	ip, r3
 8002546:	0003      	movs	r3, r0
 8002548:	4461      	add	r1, ip
 800254a:	408b      	lsls	r3, r1
 800254c:	40e2      	lsrs	r2, r4
 800254e:	4313      	orrs	r3, r2
 8002550:	e7f1      	b.n	8002536 <__aeabi_d2iz+0x42>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000003fe 	.word	0x000003fe
 8002558:	0000041d 	.word	0x0000041d
 800255c:	7fffffff 	.word	0x7fffffff
 8002560:	00000433 	.word	0x00000433
 8002564:	00000413 	.word	0x00000413
 8002568:	fffffbed 	.word	0xfffffbed

0800256c <__aeabi_ui2d>:
 800256c:	b510      	push	{r4, lr}
 800256e:	1e04      	subs	r4, r0, #0
 8002570:	d010      	beq.n	8002594 <__aeabi_ui2d+0x28>
 8002572:	f7fd ff85 	bl	8000480 <__clzsi2>
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <__aeabi_ui2d+0x44>)
 8002578:	1a1b      	subs	r3, r3, r0
 800257a:	055b      	lsls	r3, r3, #21
 800257c:	0d5b      	lsrs	r3, r3, #21
 800257e:	280a      	cmp	r0, #10
 8002580:	dc0f      	bgt.n	80025a2 <__aeabi_ui2d+0x36>
 8002582:	220b      	movs	r2, #11
 8002584:	0021      	movs	r1, r4
 8002586:	1a12      	subs	r2, r2, r0
 8002588:	40d1      	lsrs	r1, r2
 800258a:	3015      	adds	r0, #21
 800258c:	030a      	lsls	r2, r1, #12
 800258e:	4084      	lsls	r4, r0
 8002590:	0b12      	lsrs	r2, r2, #12
 8002592:	e001      	b.n	8002598 <__aeabi_ui2d+0x2c>
 8002594:	2300      	movs	r3, #0
 8002596:	2200      	movs	r2, #0
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	4313      	orrs	r3, r2
 800259c:	0020      	movs	r0, r4
 800259e:	0019      	movs	r1, r3
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	0022      	movs	r2, r4
 80025a4:	380b      	subs	r0, #11
 80025a6:	4082      	lsls	r2, r0
 80025a8:	0312      	lsls	r2, r2, #12
 80025aa:	2400      	movs	r4, #0
 80025ac:	0b12      	lsrs	r2, r2, #12
 80025ae:	e7f3      	b.n	8002598 <__aeabi_ui2d+0x2c>
 80025b0:	0000041e 	.word	0x0000041e

080025b4 <__clzdi2>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d103      	bne.n	80025c2 <__clzdi2+0xe>
 80025ba:	f7fd ff61 	bl	8000480 <__clzsi2>
 80025be:	3020      	adds	r0, #32
 80025c0:	e002      	b.n	80025c8 <__clzdi2+0x14>
 80025c2:	0008      	movs	r0, r1
 80025c4:	f7fd ff5c 	bl	8000480 <__clzsi2>
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)

080025cc <getNumberPage>:
/**
  * @brief  Get Number Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint8_t getNumberPage(uint32_t Address_){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	uint8_t number_ = (uint8_t)((Address_ & 0x3F800)>>11);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0adb      	lsrs	r3, r3, #11
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	200f      	movs	r0, #15
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	217f      	movs	r1, #127	@ 0x7f
 80025e0:	400a      	ands	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
	return number_;
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	781b      	ldrb	r3, [r3, #0]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <getAddressPage>:
/**
  * @brief  Get Address Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint64_t getAddressPage(uint32_t Address_){
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	return ( (uint64_t) (Address_ & 0xFFFFF800) );
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	000a      	movs	r2, r1
 80025fc:	2100      	movs	r1, #0
 80025fe:	000b      	movs	r3, r1
 8002600:	0ad1      	lsrs	r1, r2, #11
 8002602:	02cc      	lsls	r4, r1, #11
 8002604:	2100      	movs	r1, #0
 8002606:	400b      	ands	r3, r1
 8002608:	001d      	movs	r5, r3
 800260a:	0022      	movs	r2, r4
 800260c:	002b      	movs	r3, r5
}
 800260e:	0010      	movs	r0, r2
 8002610:	0019      	movs	r1, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bdb0      	pop	{r4, r5, r7, pc}

08002618 <erasePage>:
/**
  * @brief  Erase a Page
  * @param  numberPage_: 	Select the Page number (0,1,2,3 .. 127)
  * @retval None
  */
void erasePage(uint32_t numberPage_){
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	f010 fac1 	bl	8012ba8 <HAL_FLASH_Unlock>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d1fb      	bne.n	8002622 <erasePage+0xa>

	FLASH_EraseInitTypeDef pEraseInit = {0};
 800262a:	2410      	movs	r4, #16
 800262c:	193b      	adds	r3, r7, r4
 800262e:	0018      	movs	r0, r3
 8002630:	2310      	movs	r3, #16
 8002632:	001a      	movs	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f018 fa6d 	bl	801ab14 <memset>
	pEraseInit.NbPages = 1;
 800263a:	0021      	movs	r1, r4
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2201      	movs	r2, #1
 8002640:	60da      	str	r2, [r3, #12]
	pEraseInit.Page = numberPage_;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	609a      	str	r2, [r3, #8]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2202      	movs	r2, #2
 800264c:	601a      	str	r2, [r3, #0]

	uint32_t Error_=0;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8002652:	230c      	movs	r3, #12
 8002654:	18fa      	adds	r2, r7, r3
 8002656:	187b      	adds	r3, r7, r1
 8002658:	0011      	movs	r1, r2
 800265a:	0018      	movs	r0, r3
 800265c:	f010 fb52 	bl	8012d04 <HAL_FLASHEx_Erase>
	HAL_IWDG_Refresh( &hiwdg );
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <erasePage+0x64>)
 8002662:	0018      	movs	r0, r3
 8002664:	f013 f888 	bl	8015778 <HAL_IWDG_Refresh>

	while( HAL_FLASH_Lock() !=  HAL_OK);
 8002668:	46c0      	nop			@ (mov r8, r8)
 800266a:	f010 fac1 	bl	8012bf0 <HAL_FLASH_Lock>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d1fb      	bne.n	800266a <erasePage+0x52>
}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	46c0      	nop			@ (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b009      	add	sp, #36	@ 0x24
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	20000500 	.word	0x20000500

08002680 <writeFLASH>:
  * @param  Adrress_: 		Select the Page number (0,1,2,3 .. 127)
  * @param  arrayData_:		Data save in Flash
  * @param  size_:			Amount of data to save
  * @retval None
  */
void writeFLASH(uint64_t * Address_, uint64_t * arrayData_,uint8_t size_){
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	701a      	strb	r2, [r3, #0]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	f010 fa8a 	bl	8012ba8 <HAL_FLASH_Unlock>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d1fb      	bne.n	8002690 <writeFLASH+0x10>
	for(uint8_t i =0; i<size_; i++){
 8002698:	2317      	movs	r3, #23
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e015      	b.n	80026ce <writeFLASH+0x4e>
		//HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) Address_, arrayData_[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) &Address_[i], arrayData_[i]);
 80026a2:	2417      	movs	r4, #23
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	18d3      	adds	r3, r2, r3
 80026ae:	0019      	movs	r1, r3
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2001      	movs	r0, #1
 80026c0:	f010 fa24 	bl	8012b0c <HAL_FLASH_Program>
	for(uint8_t i =0; i<size_; i++){
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	3201      	adds	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	2317      	movs	r3, #23
 80026d0:	18fa      	adds	r2, r7, r3
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3e2      	bcc.n	80026a2 <writeFLASH+0x22>
		//Address_++;
	}
	while( HAL_FLASH_Lock() !=  HAL_OK);
 80026dc:	46c0      	nop			@ (mov r8, r8)
 80026de:	f010 fa87 	bl	8012bf0 <HAL_FLASH_Lock>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d1fb      	bne.n	80026de <writeFLASH+0x5e>
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	46c0      	nop			@ (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b007      	add	sp, #28
 80026ee:	bd90      	pop	{r4, r7, pc}

080026f0 <initEEPROMEmulated>:

/**
  * @brief  Init the EEPROM Emulated
  * @retval None
  */
void initEEPROMEmulated(void){
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	46c6      	mov	lr, r8
 80026f4:	b500      	push	{lr}
 80026f6:	4cec      	ldr	r4, [pc, #944]	@ (8002aa8 <initEEPROMEmulated+0x3b8>)
 80026f8:	44a5      	add	sp, r4
 80026fa:	af00      	add	r7, sp, #0
	uint8_t * varInit = (uint8_t *) Page_126;
 80026fc:	4beb      	ldr	r3, [pc, #940]	@ (8002aac <initEEPROMEmulated+0x3bc>)
 80026fe:	4aec      	ldr	r2, [pc, #944]	@ (8002ab0 <initEEPROMEmulated+0x3c0>)
 8002700:	2430      	movs	r4, #48	@ 0x30
 8002702:	1912      	adds	r2, r2, r4
 8002704:	2108      	movs	r1, #8
 8002706:	468c      	mov	ip, r1
 8002708:	44bc      	add	ip, r7
 800270a:	4462      	add	r2, ip
 800270c:	6013      	str	r3, [r2, #0]
	uint8_t size_ = sizeEEPROM_P;
 800270e:	4be9      	ldr	r3, [pc, #932]	@ (8002ab4 <initEEPROMEmulated+0x3c4>)
 8002710:	191b      	adds	r3, r3, r4
 8002712:	2208      	movs	r2, #8
 8002714:	18ba      	adds	r2, r7, r2
 8002716:	189a      	adds	r2, r3, r2
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	7013      	strb	r3, [r2, #0]
	uint64_t * pointArray_;
	_Bool flagVar_ = 1;
 800271c:	49e6      	ldr	r1, [pc, #920]	@ (8002ab8 <initEEPROMEmulated+0x3c8>)
 800271e:	190b      	adds	r3, r1, r4
 8002720:	2208      	movs	r2, #8
 8002722:	18ba      	adds	r2, r7, r2
 8002724:	189a      	adds	r2, r3, r2
 8002726:	2301      	movs	r3, #1
 8002728:	7013      	strb	r3, [r2, #0]
	uint8_t Page_ = 126;
 800272a:	4be4      	ldr	r3, [pc, #912]	@ (8002abc <initEEPROMEmulated+0x3cc>)
 800272c:	191b      	adds	r3, r3, r4
 800272e:	2208      	movs	r2, #8
 8002730:	18ba      	adds	r2, r7, r2
 8002732:	189a      	adds	r2, r3, r2
 8002734:	237e      	movs	r3, #126	@ 0x7e
 8002736:	7013      	strb	r3, [r2, #0]

	// Init eePlantilla
initEEPROM_P:
	uint32_t * Flag_EEPROM = ((uint32_t *) Page_126)+1 ; //
 8002738:	4be1      	ldr	r3, [pc, #900]	@ (8002ac0 <initEEPROMEmulated+0x3d0>)
 800273a:	4ae2      	ldr	r2, [pc, #904]	@ (8002ac4 <initEEPROMEmulated+0x3d4>)
 800273c:	1910      	adds	r0, r2, r4
 800273e:	2508      	movs	r5, #8
 8002740:	46ac      	mov	ip, r5
 8002742:	44bc      	add	ip, r7
 8002744:	4460      	add	r0, ip
 8002746:	6003      	str	r3, [r0, #0]
	if(*Flag_EEPROM == (uint32_t) Page_126){	// Verify Format Flash is correct
 8002748:	1913      	adds	r3, r2, r4
 800274a:	2208      	movs	r2, #8
 800274c:	4694      	mov	ip, r2
 800274e:	44bc      	add	ip, r7
 8002750:	4463      	add	r3, ip
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4bd5      	ldr	r3, [pc, #852]	@ (8002aac <initEEPROMEmulated+0x3bc>)
 8002758:	429a      	cmp	r2, r3
 800275a:	d025      	beq.n	80027a8 <initEEPROMEmulated+0xb8>
		goto initEEPROM_V;
	}
	flagVar_ = 0;
 800275c:	190b      	adds	r3, r1, r4
 800275e:	2208      	movs	r2, #8
 8002760:	18ba      	adds	r2, r7, r2
 8002762:	189a      	adds	r2, r3, r2
 8002764:	2300      	movs	r3, #0
 8002766:	7013      	strb	r3, [r2, #0]
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002768:	4bd7      	ldr	r3, [pc, #860]	@ (8002ac8 <initEEPROMEmulated+0x3d8>)
 800276a:	2295      	movs	r2, #149	@ 0x95
 800276c:	00d2      	lsls	r2, r2, #3
 800276e:	189b      	adds	r3, r3, r2
 8002770:	2230      	movs	r2, #48	@ 0x30
 8002772:	4694      	mov	ip, r2
 8002774:	2208      	movs	r2, #8
 8002776:	4690      	mov	r8, r2
 8002778:	44b8      	add	r8, r7
 800277a:	44c4      	add	ip, r8
 800277c:	4463      	add	r3, ip
 800277e:	0018      	movs	r0, r3
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	001a      	movs	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f018 f9c4 	bl	801ab14 <memset>
	pointArray_ = arrayDataP_;
 800278c:	2390      	movs	r3, #144	@ 0x90
 800278e:	191b      	adds	r3, r3, r4
 8002790:	2208      	movs	r2, #8
 8002792:	4694      	mov	ip, r2
 8002794:	44bc      	add	ip, r7
 8002796:	4463      	add	r3, ip
 8002798:	4acc      	ldr	r2, [pc, #816]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 800279a:	1912      	adds	r2, r2, r4
 800279c:	2108      	movs	r1, #8
 800279e:	468c      	mov	ip, r1
 80027a0:	44bc      	add	ip, r7
 80027a2:	4462      	add	r2, ip
 80027a4:	6013      	str	r3, [r2, #0]
	goto newFormatFlash;
 80027a6:	e045      	b.n	8002834 <initEEPROMEmulated+0x144>
		goto initEEPROM_V;
 80027a8:	46c0      	nop			@ (mov r8, r8)

	// Init eeVariables
initEEPROM_V:
	Flag_EEPROM = ((uint32_t *) Page_127)+1 ;
 80027aa:	4bc9      	ldr	r3, [pc, #804]	@ (8002ad0 <initEEPROMEmulated+0x3e0>)
 80027ac:	4ac5      	ldr	r2, [pc, #788]	@ (8002ac4 <initEEPROMEmulated+0x3d4>)
 80027ae:	2430      	movs	r4, #48	@ 0x30
 80027b0:	1911      	adds	r1, r2, r4
 80027b2:	2008      	movs	r0, #8
 80027b4:	4684      	mov	ip, r0
 80027b6:	44bc      	add	ip, r7
 80027b8:	4461      	add	r1, ip
 80027ba:	600b      	str	r3, [r1, #0]
	if(*Flag_EEPROM == (uint32_t) Page_127){ // Verify Format Flash is correct
 80027bc:	1913      	adds	r3, r2, r4
 80027be:	2208      	movs	r2, #8
 80027c0:	4694      	mov	ip, r2
 80027c2:	44bc      	add	ip, r7
 80027c4:	4463      	add	r3, ip
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4bc2      	ldr	r3, [pc, #776]	@ (8002ad4 <initEEPROMEmulated+0x3e4>)
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d100      	bne.n	80027d2 <initEEPROMEmulated+0xe2>
 80027d0:	e15d      	b.n	8002a8e <initEEPROMEmulated+0x39e>
		goto saveDataEEPROM_RAM;
	}
	varInit = (uint8_t *) Page_127;
 80027d2:	4bc0      	ldr	r3, [pc, #768]	@ (8002ad4 <initEEPROMEmulated+0x3e4>)
 80027d4:	4ab6      	ldr	r2, [pc, #728]	@ (8002ab0 <initEEPROMEmulated+0x3c0>)
 80027d6:	1912      	adds	r2, r2, r4
 80027d8:	2108      	movs	r1, #8
 80027da:	468c      	mov	ip, r1
 80027dc:	44bc      	add	ip, r7
 80027de:	4462      	add	r2, ip
 80027e0:	6013      	str	r3, [r2, #0]
	uint64_t arrayDataV[sizeEEPROM_V] = {0};
 80027e2:	4bbd      	ldr	r3, [pc, #756]	@ (8002ad8 <initEEPROMEmulated+0x3e8>)
 80027e4:	2295      	movs	r2, #149	@ 0x95
 80027e6:	00d2      	lsls	r2, r2, #3
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	2230      	movs	r2, #48	@ 0x30
 80027ec:	4694      	mov	ip, r2
 80027ee:	2208      	movs	r2, #8
 80027f0:	4690      	mov	r8, r2
 80027f2:	44b8      	add	r8, r7
 80027f4:	44c4      	add	ip, r8
 80027f6:	4463      	add	r3, ip
 80027f8:	0018      	movs	r0, r3
 80027fa:	2390      	movs	r3, #144	@ 0x90
 80027fc:	001a      	movs	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	f018 f988 	bl	801ab14 <memset>
	size_ = sizeEEPROM_V;
 8002804:	4bab      	ldr	r3, [pc, #684]	@ (8002ab4 <initEEPROMEmulated+0x3c4>)
 8002806:	191b      	adds	r3, r3, r4
 8002808:	2208      	movs	r2, #8
 800280a:	18ba      	adds	r2, r7, r2
 800280c:	189a      	adds	r2, r3, r2
 800280e:	2312      	movs	r3, #18
 8002810:	7013      	strb	r3, [r2, #0]
	pointArray_ = arrayDataV;
 8002812:	2308      	movs	r3, #8
 8002814:	18e3      	adds	r3, r4, r3
 8002816:	19db      	adds	r3, r3, r7
 8002818:	4aac      	ldr	r2, [pc, #688]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 800281a:	1912      	adds	r2, r2, r4
 800281c:	2108      	movs	r1, #8
 800281e:	468c      	mov	ip, r1
 8002820:	44bc      	add	ip, r7
 8002822:	4462      	add	r2, ip
 8002824:	6013      	str	r3, [r2, #0]
	Page_ = 127;
 8002826:	4ba5      	ldr	r3, [pc, #660]	@ (8002abc <initEEPROMEmulated+0x3cc>)
 8002828:	191b      	adds	r3, r3, r4
 800282a:	2208      	movs	r2, #8
 800282c:	18ba      	adds	r2, r7, r2
 800282e:	189a      	adds	r2, r3, r2
 8002830:	237f      	movs	r3, #127	@ 0x7f
 8002832:	7013      	strb	r3, [r2, #0]

newFormatFlash:
	// Get data
	for(uint8_t i =0; i<size_; i++){
 8002834:	4ba9      	ldr	r3, [pc, #676]	@ (8002adc <initEEPROMEmulated+0x3ec>)
 8002836:	2230      	movs	r2, #48	@ 0x30
 8002838:	189b      	adds	r3, r3, r2
 800283a:	2208      	movs	r2, #8
 800283c:	18ba      	adds	r2, r7, r2
 800283e:	189a      	adds	r2, r3, r2
 8002840:	2300      	movs	r3, #0
 8002842:	7013      	strb	r3, [r2, #0]
 8002844:	e0d9      	b.n	80029fa <initEEPROMEmulated+0x30a>
		pointArray_[i]  = (uint64_t) (*varInit);
 8002846:	4e9a      	ldr	r6, [pc, #616]	@ (8002ab0 <initEEPROMEmulated+0x3c0>)
 8002848:	2230      	movs	r2, #48	@ 0x30
 800284a:	18b3      	adds	r3, r6, r2
 800284c:	2108      	movs	r1, #8
 800284e:	468c      	mov	ip, r1
 8002850:	44bc      	add	ip, r7
 8002852:	4463      	add	r3, ip
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	7819      	ldrb	r1, [r3, #0]
 8002858:	48a0      	ldr	r0, [pc, #640]	@ (8002adc <initEEPROMEmulated+0x3ec>)
 800285a:	0014      	movs	r4, r2
 800285c:	1883      	adds	r3, r0, r2
 800285e:	2208      	movs	r2, #8
 8002860:	4694      	mov	ip, r2
 8002862:	44bc      	add	ip, r7
 8002864:	4463      	add	r3, ip
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	00da      	lsls	r2, r3, #3
 800286a:	4b98      	ldr	r3, [pc, #608]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 800286c:	191b      	adds	r3, r3, r4
 800286e:	2508      	movs	r5, #8
 8002870:	46ac      	mov	ip, r5
 8002872:	44bc      	add	ip, r7
 8002874:	4463      	add	r3, ip
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	189b      	adds	r3, r3, r2
 800287a:	6239      	str	r1, [r7, #32]
 800287c:	2200      	movs	r2, #0
 800287e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002884:	6019      	str	r1, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
		pointArray_[i] |= ((uint64_t )(varInit) << 32);
 8002888:	1903      	adds	r3, r0, r4
 800288a:	2208      	movs	r2, #8
 800288c:	4694      	mov	ip, r2
 800288e:	44bc      	add	ip, r7
 8002890:	4463      	add	r3, ip
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	00da      	lsls	r2, r3, #3
 8002896:	498d      	ldr	r1, [pc, #564]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 8002898:	190b      	adds	r3, r1, r4
 800289a:	2108      	movs	r1, #8
 800289c:	1879      	adds	r1, r7, r1
 800289e:	1859      	adds	r1, r3, r1
 80028a0:	680b      	ldr	r3, [r1, #0]
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	1933      	adds	r3, r6, r4
 80028aa:	2208      	movs	r2, #8
 80028ac:	18ba      	adds	r2, r7, r2
 80028ae:	189a      	adds	r2, r3, r2
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	17db      	asrs	r3, r3, #31
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	0012      	movs	r2, r2
 80028bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028be:	2300      	movs	r3, #0
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c2:	4b86      	ldr	r3, [pc, #536]	@ (8002adc <initEEPROMEmulated+0x3ec>)
 80028c4:	191b      	adds	r3, r3, r4
 80028c6:	2208      	movs	r2, #8
 80028c8:	4694      	mov	ip, r2
 80028ca:	44bc      	add	ip, r7
 80028cc:	4463      	add	r3, ip
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	00da      	lsls	r2, r3, #3
 80028d2:	4b7e      	ldr	r3, [pc, #504]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 80028d4:	191b      	adds	r3, r3, r4
 80028d6:	2508      	movs	r5, #8
 80028d8:	46ac      	mov	ip, r5
 80028da:	44bc      	add	ip, r7
 80028dc:	4463      	add	r3, ip
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028e4:	4302      	orrs	r2, r0
 80028e6:	613a      	str	r2, [r7, #16]
 80028e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ea:	430a      	orrs	r2, r1
 80028ec:	617a      	str	r2, [r7, #20]
 80028ee:	6939      	ldr	r1, [r7, #16]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6019      	str	r1, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA)) && flagVar_){
 80028f6:	0021      	movs	r1, r4
 80028f8:	1873      	adds	r3, r6, r1
 80028fa:	2208      	movs	r2, #8
 80028fc:	18ba      	adds	r2, r7, r2
 80028fe:	189a      	adds	r2, r3, r2
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	4b77      	ldr	r3, [pc, #476]	@ (8002ae0 <initEEPROMEmulated+0x3f0>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d35b      	bcc.n	80029c0 <initEEPROMEmulated+0x2d0>
 8002908:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab8 <initEEPROMEmulated+0x3c8>)
 800290a:	1853      	adds	r3, r2, r1
 800290c:	2208      	movs	r2, #8
 800290e:	4694      	mov	ip, r2
 8002910:	44bc      	add	ip, r7
 8002912:	4463      	add	r3, ip
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d052      	beq.n	80029c0 <initEEPROMEmulated+0x2d0>
			varInit++;
 800291a:	1873      	adds	r3, r6, r1
 800291c:	2208      	movs	r2, #8
 800291e:	18ba      	adds	r2, r7, r2
 8002920:	189a      	adds	r2, r3, r2
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	1872      	adds	r2, r6, r1
 8002928:	2008      	movs	r0, #8
 800292a:	4684      	mov	ip, r0
 800292c:	44bc      	add	ip, r7
 800292e:	4462      	add	r2, ip
 8002930:	6013      	str	r3, [r2, #0]
			pointArray_[i]  |= ((uint64_t) (*varInit))<<8;
 8002932:	4b6a      	ldr	r3, [pc, #424]	@ (8002adc <initEEPROMEmulated+0x3ec>)
 8002934:	0008      	movs	r0, r1
 8002936:	185b      	adds	r3, r3, r1
 8002938:	2208      	movs	r2, #8
 800293a:	4694      	mov	ip, r2
 800293c:	44bc      	add	ip, r7
 800293e:	4463      	add	r3, ip
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	00da      	lsls	r2, r3, #3
 8002944:	4961      	ldr	r1, [pc, #388]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 8002946:	0004      	movs	r4, r0
 8002948:	1809      	adds	r1, r1, r0
 800294a:	2308      	movs	r3, #8
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	18c8      	adds	r0, r1, r3
 8002950:	6803      	ldr	r3, [r0, #0]
 8002952:	189b      	adds	r3, r3, r2
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	0023      	movs	r3, r4
 800295a:	001c      	movs	r4, r3
 800295c:	18f2      	adds	r2, r6, r3
 800295e:	2308      	movs	r3, #8
 8002960:	469c      	mov	ip, r3
 8002962:	44bc      	add	ip, r7
 8002964:	4462      	add	r2, ip
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
 800296c:	2300      	movs	r3, #0
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002972:	0e13      	lsrs	r3, r2, #24
 8002974:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002976:	0212      	lsls	r2, r2, #8
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	431a      	orrs	r2, r3
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002982:	0213      	lsls	r3, r2, #8
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b55      	ldr	r3, [pc, #340]	@ (8002adc <initEEPROMEmulated+0x3ec>)
 8002988:	0026      	movs	r6, r4
 800298a:	199b      	adds	r3, r3, r6
 800298c:	2208      	movs	r2, #8
 800298e:	4694      	mov	ip, r2
 8002990:	44bc      	add	ip, r7
 8002992:	4463      	add	r3, ip
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	00da      	lsls	r2, r3, #3
 8002998:	4b4c      	ldr	r3, [pc, #304]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 800299a:	199b      	adds	r3, r3, r6
 800299c:	2408      	movs	r4, #8
 800299e:	46a4      	mov	ip, r4
 80029a0:	44bc      	add	ip, r7
 80029a2:	4463      	add	r3, ip
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	0002      	movs	r2, r0
 80029aa:	683c      	ldr	r4, [r7, #0]
 80029ac:	4322      	orrs	r2, r4
 80029ae:	60ba      	str	r2, [r7, #8]
 80029b0:	000a      	movs	r2, r1
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	6019      	str	r1, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
		}
		varInit++;
 80029c0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ab0 <initEEPROMEmulated+0x3c0>)
 80029c2:	2130      	movs	r1, #48	@ 0x30
 80029c4:	1853      	adds	r3, r2, r1
 80029c6:	2008      	movs	r0, #8
 80029c8:	4684      	mov	ip, r0
 80029ca:	44bc      	add	ip, r7
 80029cc:	4463      	add	r3, ip
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	1852      	adds	r2, r2, r1
 80029d4:	2008      	movs	r0, #8
 80029d6:	4684      	mov	ip, r0
 80029d8:	44bc      	add	ip, r7
 80029da:	4462      	add	r2, ip
 80029dc:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<size_; i++){
 80029de:	4a3f      	ldr	r2, [pc, #252]	@ (8002adc <initEEPROMEmulated+0x3ec>)
 80029e0:	1853      	adds	r3, r2, r1
 80029e2:	2008      	movs	r0, #8
 80029e4:	4684      	mov	ip, r0
 80029e6:	44bc      	add	ip, r7
 80029e8:	4463      	add	r3, ip
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	1852      	adds	r2, r2, r1
 80029ee:	2108      	movs	r1, #8
 80029f0:	468c      	mov	ip, r1
 80029f2:	44bc      	add	ip, r7
 80029f4:	4462      	add	r2, ip
 80029f6:	3301      	adds	r3, #1
 80029f8:	7013      	strb	r3, [r2, #0]
 80029fa:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <initEEPROMEmulated+0x3ec>)
 80029fc:	2130      	movs	r1, #48	@ 0x30
 80029fe:	185b      	adds	r3, r3, r1
 8002a00:	2208      	movs	r2, #8
 8002a02:	18ba      	adds	r2, r7, r2
 8002a04:	189a      	adds	r2, r3, r2
 8002a06:	4e2b      	ldr	r6, [pc, #172]	@ (8002ab4 <initEEPROMEmulated+0x3c4>)
 8002a08:	1873      	adds	r3, r6, r1
 8002a0a:	2008      	movs	r0, #8
 8002a0c:	4684      	mov	ip, r0
 8002a0e:	44bc      	add	ip, r7
 8002a10:	4463      	add	r3, ip
 8002a12:	7812      	ldrb	r2, [r2, #0]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d200      	bcs.n	8002a1c <initEEPROMEmulated+0x32c>
 8002a1a:	e714      	b.n	8002846 <initEEPROMEmulated+0x156>
	}
	erasePage(Page_);
 8002a1c:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <initEEPROMEmulated+0x3cc>)
 8002a1e:	000c      	movs	r4, r1
 8002a20:	185b      	adds	r3, r3, r1
 8002a22:	2208      	movs	r2, #8
 8002a24:	4694      	mov	ip, r2
 8002a26:	44bc      	add	ip, r7
 8002a28:	4463      	add	r3, ip
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff fdf3 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Flag_EEPROM-1),pointArray_,size_);
 8002a32:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <initEEPROMEmulated+0x3d4>)
 8002a34:	0022      	movs	r2, r4
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	2108      	movs	r1, #8
 8002a3a:	468c      	mov	ip, r1
 8002a3c:	44bc      	add	ip, r7
 8002a3e:	4463      	add	r3, ip
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	1f18      	subs	r0, r3, #4
 8002a44:	0014      	movs	r4, r2
 8002a46:	1933      	adds	r3, r6, r4
 8002a48:	2208      	movs	r2, #8
 8002a4a:	4694      	mov	ip, r2
 8002a4c:	44bc      	add	ip, r7
 8002a4e:	4463      	add	r3, ip
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <initEEPROMEmulated+0x3dc>)
 8002a54:	191b      	adds	r3, r3, r4
 8002a56:	2108      	movs	r1, #8
 8002a58:	468c      	mov	ip, r1
 8002a5a:	44bc      	add	ip, r7
 8002a5c:	4463      	add	r3, ip
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0019      	movs	r1, r3
 8002a62:	f7ff fe0d 	bl	8002680 <writeFLASH>
	if(!flagVar_){
 8002a66:	4914      	ldr	r1, [pc, #80]	@ (8002ab8 <initEEPROMEmulated+0x3c8>)
 8002a68:	0020      	movs	r0, r4
 8002a6a:	180b      	adds	r3, r1, r0
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	4694      	mov	ip, r2
 8002a70:	44bc      	add	ip, r7
 8002a72:	4463      	add	r3, ip
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	2301      	movs	r3, #1
 8002a78:	4053      	eors	r3, r2
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <initEEPROMEmulated+0x3a2>
		flagVar_ = 1;
 8002a80:	180b      	adds	r3, r1, r0
 8002a82:	2208      	movs	r2, #8
 8002a84:	18ba      	adds	r2, r7, r2
 8002a86:	189a      	adds	r2, r3, r2
 8002a88:	2301      	movs	r3, #1
 8002a8a:	7013      	strb	r3, [r2, #0]
		goto initEEPROM_V;
 8002a8c:	e68d      	b.n	80027aa <initEEPROMEmulated+0xba>
		goto saveDataEEPROM_RAM;
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	e000      	b.n	8002a94 <initEEPROMEmulated+0x3a4>
	}

	// Save the Data in RAM
saveDataEEPROM_RAM:
 8002a92:	46c0      	nop			@ (mov r8, r8)

	for (uint8_t i = 0; i<128; i++)
 8002a94:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <initEEPROMEmulated+0x3f4>)
 8002a96:	2230      	movs	r2, #48	@ 0x30
 8002a98:	189b      	adds	r3, r3, r2
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	4694      	mov	ip, r2
 8002a9e:	44bc      	add	ip, r7
 8002aa0:	4463      	add	r3, ip
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e043      	b.n	8002b30 <initEEPROMEmulated+0x440>
 8002aa8:	fffffb20 	.word	0xfffffb20
 8002aac:	0803f000 	.word	0x0803f000
 8002ab0:	000004a4 	.word	0x000004a4
 8002ab4:	000004a3 	.word	0x000004a3
 8002ab8:	0000049b 	.word	0x0000049b
 8002abc:	0000049a 	.word	0x0000049a
 8002ac0:	0803f004 	.word	0x0803f004
 8002ac4:	00000494 	.word	0x00000494
 8002ac8:	fffffbe8 	.word	0xfffffbe8
 8002acc:	0000049c 	.word	0x0000049c
 8002ad0:	0803f804 	.word	0x0803f804
 8002ad4:	0803f800 	.word	0x0803f800
 8002ad8:	fffffb58 	.word	0xfffffb58
 8002adc:	00000493 	.word	0x00000493
 8002ae0:	0803f810 	.word	0x0803f810
 8002ae4:	00000492 	.word	0x00000492
		reePlantilla[i] = (uint8_t) findLastValue((uint32_t) &eePlantilla[i]);
 8002ae8:	4c63      	ldr	r4, [pc, #396]	@ (8002c78 <initEEPROMEmulated+0x588>)
 8002aea:	2530      	movs	r5, #48	@ 0x30
 8002aec:	1963      	adds	r3, r4, r5
 8002aee:	2208      	movs	r2, #8
 8002af0:	4694      	mov	ip, r2
 8002af2:	44bc      	add	ip, r7
 8002af4:	4463      	add	r3, ip
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	4b60      	ldr	r3, [pc, #384]	@ (8002c7c <initEEPROMEmulated+0x58c>)
 8002afa:	18d3      	adds	r3, r2, r3
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 faa9 	bl	8003054 <findLastValue>
 8002b02:	0002      	movs	r2, r0
 8002b04:	1963      	adds	r3, r4, r5
 8002b06:	2108      	movs	r1, #8
 8002b08:	468c      	mov	ip, r1
 8002b0a:	44bc      	add	ip, r7
 8002b0c:	4463      	add	r3, ip
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2d1      	uxtb	r1, r2
 8002b12:	4a5b      	ldr	r2, [pc, #364]	@ (8002c80 <initEEPROMEmulated+0x590>)
 8002b14:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<128; i++)
 8002b16:	1963      	adds	r3, r4, r5
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4694      	mov	ip, r2
 8002b1c:	44bc      	add	ip, r7
 8002b1e:	4463      	add	r3, ip
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	1963      	adds	r3, r4, r5
 8002b24:	2108      	movs	r1, #8
 8002b26:	468c      	mov	ip, r1
 8002b28:	44bc      	add	ip, r7
 8002b2a:	4463      	add	r3, ip
 8002b2c:	3201      	adds	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	4b51      	ldr	r3, [pc, #324]	@ (8002c78 <initEEPROMEmulated+0x588>)
 8002b32:	2230      	movs	r2, #48	@ 0x30
 8002b34:	189b      	adds	r3, r3, r2
 8002b36:	2208      	movs	r2, #8
 8002b38:	4694      	mov	ip, r2
 8002b3a:	44bc      	add	ip, r7
 8002b3c:	4463      	add	r3, ip
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	dad0      	bge.n	8002ae8 <initEEPROMEmulated+0x3f8>

	reevolt_div 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_div);
 8002b46:	4b4f      	ldr	r3, [pc, #316]	@ (8002c84 <initEEPROMEmulated+0x594>)
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fa83 	bl	8003054 <findLastValue>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b4d      	ldr	r3, [pc, #308]	@ (8002c88 <initEEPROMEmulated+0x598>)
 8002b54:	701a      	strb	r2, [r3, #0]
	reevolt_mul 	= 	(uint8_t) findLastValue((uint32_t) &eevolt_mul);
 8002b56:	4b4d      	ldr	r3, [pc, #308]	@ (8002c8c <initEEPROMEmulated+0x59c>)
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 fa7b 	bl	8003054 <findLastValue>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b4b      	ldr	r3, [pc, #300]	@ (8002c90 <initEEPROMEmulated+0x5a0>)
 8002b64:	701a      	strb	r2, [r3, #0]
	reef_voltaje 	= 	(uint8_t) findLastValue((uint32_t) &eef_voltaje);
 8002b66:	4b4b      	ldr	r3, [pc, #300]	@ (8002c94 <initEEPROMEmulated+0x5a4>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 fa73 	bl	8003054 <findLastValue>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <initEEPROMEmulated+0x5a8>)
 8002b74:	701a      	strb	r2, [r3, #0]
	reeEstado1 		= 	(uint8_t) findLastValue((uint32_t) &eeEstado1);
 8002b76:	4b49      	ldr	r3, [pc, #292]	@ (8002c9c <initEEPROMEmulated+0x5ac>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fa6b 	bl	8003054 <findLastValue>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b47      	ldr	r3, [pc, #284]	@ (8002ca0 <initEEPROMEmulated+0x5b0>)
 8002b84:	701a      	strb	r2, [r3, #0]
	reeTimeUnix1 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix1);
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <initEEPROMEmulated+0x5b4>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fa63 	bl	8003054 <findLastValue>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b45      	ldr	r3, [pc, #276]	@ (8002ca8 <initEEPROMEmulated+0x5b8>)
 8002b94:	701a      	strb	r2, [r3, #0]
	reeTimeUnix2 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix2);
 8002b96:	4b45      	ldr	r3, [pc, #276]	@ (8002cac <initEEPROMEmulated+0x5bc>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fa5b 	bl	8003054 <findLastValue>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <initEEPROMEmulated+0x5c0>)
 8002ba4:	701a      	strb	r2, [r3, #0]
	reeTimeUnix3 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix3);
 8002ba6:	4b43      	ldr	r3, [pc, #268]	@ (8002cb4 <initEEPROMEmulated+0x5c4>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fa53 	bl	8003054 <findLastValue>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b41      	ldr	r3, [pc, #260]	@ (8002cb8 <initEEPROMEmulated+0x5c8>)
 8002bb4:	701a      	strb	r2, [r3, #0]
	reeTimeUnix4 	= 	(uint8_t) findLastValue((uint32_t) &eeTimeUnix4);
 8002bb6:	4b41      	ldr	r3, [pc, #260]	@ (8002cbc <initEEPROMEmulated+0x5cc>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fa4b 	bl	8003054 <findLastValue>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc0 <initEEPROMEmulated+0x5d0>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	reeLat1 		= 	(uint8_t) findLastValue((uint32_t) &eeLat1);
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc4 <initEEPROMEmulated+0x5d4>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fa43 	bl	8003054 <findLastValue>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc8 <initEEPROMEmulated+0x5d8>)
 8002bd4:	701a      	strb	r2, [r3, #0]
	reeLat2 		= 	(uint8_t) findLastValue((uint32_t) &eeLat2);
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <initEEPROMEmulated+0x5dc>)
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fa3b 	bl	8003054 <findLastValue>
 8002bde:	0003      	movs	r3, r0
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <initEEPROMEmulated+0x5e0>)
 8002be4:	701a      	strb	r2, [r3, #0]
	reeLat3 		= 	(uint8_t) findLastValue((uint32_t) &eeLat3);
 8002be6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <initEEPROMEmulated+0x5e4>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fa33 	bl	8003054 <findLastValue>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b39      	ldr	r3, [pc, #228]	@ (8002cd8 <initEEPROMEmulated+0x5e8>)
 8002bf4:	701a      	strb	r2, [r3, #0]
	reeLat4 		= 	(uint8_t) findLastValue((uint32_t) &eeLat4);
 8002bf6:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <initEEPROMEmulated+0x5ec>)
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fa2b 	bl	8003054 <findLastValue>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <initEEPROMEmulated+0x5f0>)
 8002c04:	701a      	strb	r2, [r3, #0]
	reeLong1 		= 	(uint8_t) findLastValue((uint32_t) &eeLong1);
 8002c06:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <initEEPROMEmulated+0x5f4>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 fa23 	bl	8003054 <findLastValue>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b35      	ldr	r3, [pc, #212]	@ (8002ce8 <initEEPROMEmulated+0x5f8>)
 8002c14:	701a      	strb	r2, [r3, #0]
	reeLong2 		=	(uint8_t) findLastValue((uint32_t) &eeLong2);
 8002c16:	4b35      	ldr	r3, [pc, #212]	@ (8002cec <initEEPROMEmulated+0x5fc>)
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fa1b 	bl	8003054 <findLastValue>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b33      	ldr	r3, [pc, #204]	@ (8002cf0 <initEEPROMEmulated+0x600>)
 8002c24:	701a      	strb	r2, [r3, #0]
	reeLong3 		= 	(uint8_t) findLastValue((uint32_t) &eeLong3);
 8002c26:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <initEEPROMEmulated+0x604>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fa13 	bl	8003054 <findLastValue>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b31      	ldr	r3, [pc, #196]	@ (8002cf8 <initEEPROMEmulated+0x608>)
 8002c34:	701a      	strb	r2, [r3, #0]
	reeLong4 		= 	(uint8_t) findLastValue((uint32_t) &eeLong4);
 8002c36:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <initEEPROMEmulated+0x60c>)
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fa0b 	bl	8003054 <findLastValue>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4b2f      	ldr	r3, [pc, #188]	@ (8002d00 <initEEPROMEmulated+0x610>)
 8002c44:	701a      	strb	r2, [r3, #0]
	reeCntRegDATA 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegDATA);
 8002c46:	4b2f      	ldr	r3, [pc, #188]	@ (8002d04 <initEEPROMEmulated+0x614>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 fa03 	bl	8003054 <findLastValue>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b2d      	ldr	r3, [pc, #180]	@ (8002d08 <initEEPROMEmulated+0x618>)
 8002c54:	801a      	strh	r2, [r3, #0]
	reeCntRegEVENT 	=	(uint16_t) findLastValue((uint32_t) &eeCntRegEVENT);
 8002c56:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <initEEPROMEmulated+0x61c>)
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 f9fb 	bl	8003054 <findLastValue>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <initEEPROMEmulated+0x620>)
 8002c64:	801a      	strh	r2, [r3, #0]

}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	239c      	movs	r3, #156	@ 0x9c
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	449d      	add	sp, r3
 8002c70:	bc80      	pop	{r7}
 8002c72:	46b8      	mov	r8, r7
 8002c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	00000492 	.word	0x00000492
 8002c7c:	0803f000 	.word	0x0803f000
 8002c80:	20000c88 	.word	0x20000c88
 8002c84:	0803f800 	.word	0x0803f800
 8002c88:	200001b8 	.word	0x200001b8
 8002c8c:	0803f801 	.word	0x0803f801
 8002c90:	200001b9 	.word	0x200001b9
 8002c94:	0803f802 	.word	0x0803f802
 8002c98:	20000d08 	.word	0x20000d08
 8002c9c:	0803f803 	.word	0x0803f803
 8002ca0:	200001ba 	.word	0x200001ba
 8002ca4:	0803f804 	.word	0x0803f804
 8002ca8:	20000d09 	.word	0x20000d09
 8002cac:	0803f805 	.word	0x0803f805
 8002cb0:	20000d0a 	.word	0x20000d0a
 8002cb4:	0803f806 	.word	0x0803f806
 8002cb8:	20000d0b 	.word	0x20000d0b
 8002cbc:	0803f807 	.word	0x0803f807
 8002cc0:	20000d0c 	.word	0x20000d0c
 8002cc4:	0803f808 	.word	0x0803f808
 8002cc8:	200001bb 	.word	0x200001bb
 8002ccc:	0803f809 	.word	0x0803f809
 8002cd0:	200001bc 	.word	0x200001bc
 8002cd4:	0803f80a 	.word	0x0803f80a
 8002cd8:	200001bd 	.word	0x200001bd
 8002cdc:	0803f80b 	.word	0x0803f80b
 8002ce0:	200001be 	.word	0x200001be
 8002ce4:	0803f80c 	.word	0x0803f80c
 8002ce8:	200001bf 	.word	0x200001bf
 8002cec:	0803f80d 	.word	0x0803f80d
 8002cf0:	200001c0 	.word	0x200001c0
 8002cf4:	0803f80e 	.word	0x0803f80e
 8002cf8:	200001c1 	.word	0x200001c1
 8002cfc:	0803f80f 	.word	0x0803f80f
 8002d00:	200001c2 	.word	0x200001c2
 8002d04:	0803f810 	.word	0x0803f810
 8002d08:	20000d0e 	.word	0x20000d0e
 8002d0c:	0803f812 	.word	0x0803f812
 8002d10:	20000d10 	.word	0x20000d10

08002d14 <restartFlashMemory>:
/**
  * @brief  Restart Flash Memory
  * @param
  * @retval
  */
void restartFlashMemory(void){
 8002d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d16:	4cc3      	ldr	r4, [pc, #780]	@ (8003024 <restartFlashMemory+0x310>)
 8002d18:	44a5      	add	sp, r4
 8002d1a:	af00      	add	r7, sp, #0
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 8002d1c:	4bc2      	ldr	r3, [pc, #776]	@ (8003028 <restartFlashMemory+0x314>)
 8002d1e:	2693      	movs	r6, #147	@ 0x93
 8002d20:	00f6      	lsls	r6, r6, #3
 8002d22:	199b      	adds	r3, r3, r6
 8002d24:	2258      	movs	r2, #88	@ 0x58
 8002d26:	4694      	mov	ip, r2
 8002d28:	44bc      	add	ip, r7
 8002d2a:	4463      	add	r3, ip
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	001a      	movs	r2, r3
 8002d34:	2100      	movs	r1, #0
 8002d36:	f017 feed 	bl	801ab14 <memset>
	uint64_t arrayDataV_[sizeEEPROM_V] = {0};
 8002d3a:	4bbc      	ldr	r3, [pc, #752]	@ (800302c <restartFlashMemory+0x318>)
 8002d3c:	199b      	adds	r3, r3, r6
 8002d3e:	2258      	movs	r2, #88	@ 0x58
 8002d40:	4694      	mov	ip, r2
 8002d42:	44bc      	add	ip, r7
 8002d44:	4463      	add	r3, ip
 8002d46:	0018      	movs	r0, r3
 8002d48:	2390      	movs	r3, #144	@ 0x90
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f017 fee1 	bl	801ab14 <memset>

	uint8_t * varInit = (uint8_t *) Page_126;
 8002d52:	4bb7      	ldr	r3, [pc, #732]	@ (8003030 <restartFlashMemory+0x31c>)
 8002d54:	4ab7      	ldr	r2, [pc, #732]	@ (8003034 <restartFlashMemory+0x320>)
 8002d56:	2158      	movs	r1, #88	@ 0x58
 8002d58:	1852      	adds	r2, r2, r1
 8002d5a:	19d2      	adds	r2, r2, r7
 8002d5c:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002d5e:	4bb6      	ldr	r3, [pc, #728]	@ (8003038 <restartFlashMemory+0x324>)
 8002d60:	2258      	movs	r2, #88	@ 0x58
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	19da      	adds	r2, r3, r7
 8002d66:	2300      	movs	r3, #0
 8002d68:	7013      	strb	r3, [r2, #0]
 8002d6a:	e030      	b.n	8002dce <restartFlashMemory+0xba>
		arrayDataP_[i] = ((uint64_t )(varInit) << 32);
 8002d6c:	48b1      	ldr	r0, [pc, #708]	@ (8003034 <restartFlashMemory+0x320>)
 8002d6e:	2358      	movs	r3, #88	@ 0x58
 8002d70:	18c3      	adds	r3, r0, r3
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d78:	17db      	asrs	r3, r3, #31
 8002d7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d7c:	4eae      	ldr	r6, [pc, #696]	@ (8003038 <restartFlashMemory+0x324>)
 8002d7e:	2358      	movs	r3, #88	@ 0x58
 8002d80:	18f3      	adds	r3, r6, r3
 8002d82:	19db      	adds	r3, r3, r7
 8002d84:	7819      	ldrb	r1, [r3, #0]
 8002d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d88:	001b      	movs	r3, r3
 8002d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d90:	4ba5      	ldr	r3, [pc, #660]	@ (8003028 <restartFlashMemory+0x314>)
 8002d92:	2293      	movs	r2, #147	@ 0x93
 8002d94:	00d2      	lsls	r2, r2, #3
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	2258      	movs	r2, #88	@ 0x58
 8002d9a:	18ba      	adds	r2, r7, r2
 8002d9c:	189a      	adds	r2, r3, r2
 8002d9e:	00cb      	lsls	r3, r1, #3
 8002da0:	18d3      	adds	r3, r2, r3
 8002da2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da6:	6019      	str	r1, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
		varInit ++;
 8002daa:	2358      	movs	r3, #88	@ 0x58
 8002dac:	18c3      	adds	r3, r0, r3
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	2258      	movs	r2, #88	@ 0x58
 8002db6:	1882      	adds	r2, r0, r2
 8002db8:	19d2      	adds	r2, r2, r7
 8002dba:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002dbc:	2358      	movs	r3, #88	@ 0x58
 8002dbe:	18f3      	adds	r3, r6, r3
 8002dc0:	19db      	adds	r3, r3, r7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2258      	movs	r2, #88	@ 0x58
 8002dc6:	18b2      	adds	r2, r6, r2
 8002dc8:	19d2      	adds	r2, r2, r7
 8002dca:	3301      	adds	r3, #1
 8002dcc:	7013      	strb	r3, [r2, #0]
 8002dce:	4b9a      	ldr	r3, [pc, #616]	@ (8003038 <restartFlashMemory+0x324>)
 8002dd0:	2258      	movs	r2, #88	@ 0x58
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	19db      	adds	r3, r3, r7
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	dac6      	bge.n	8002d6c <restartFlashMemory+0x58>
	}

	arrayDataP_[eedato_seg1] |= 0xAA;
 8002dde:	4b92      	ldr	r3, [pc, #584]	@ (8003028 <restartFlashMemory+0x314>)
 8002de0:	2093      	movs	r0, #147	@ 0x93
 8002de2:	00c0      	lsls	r0, r0, #3
 8002de4:	181b      	adds	r3, r3, r0
 8002de6:	2258      	movs	r2, #88	@ 0x58
 8002de8:	4694      	mov	ip, r2
 8002dea:	44bc      	add	ip, r7
 8002dec:	4463      	add	r3, ip
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	21aa      	movs	r1, #170	@ 0xaa
 8002df4:	4311      	orrs	r1, r2
 8002df6:	000c      	movs	r4, r1
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4319      	orrs	r1, r3
 8002dfc:	000d      	movs	r5, r1
 8002dfe:	4b8a      	ldr	r3, [pc, #552]	@ (8003028 <restartFlashMemory+0x314>)
 8002e00:	181b      	adds	r3, r3, r0
 8002e02:	2258      	movs	r2, #88	@ 0x58
 8002e04:	4694      	mov	ip, r2
 8002e06:	44bc      	add	ip, r7
 8002e08:	4463      	add	r3, ip
 8002e0a:	601c      	str	r4, [r3, #0]
 8002e0c:	605d      	str	r5, [r3, #4]
	arrayDataP_[eedato_seg2] |= 0x66;
 8002e0e:	4b86      	ldr	r3, [pc, #536]	@ (8003028 <restartFlashMemory+0x314>)
 8002e10:	0005      	movs	r5, r0
 8002e12:	181b      	adds	r3, r3, r0
 8002e14:	2258      	movs	r2, #88	@ 0x58
 8002e16:	18ba      	adds	r2, r7, r2
 8002e18:	189a      	adds	r2, r3, r2
 8002e1a:	2382      	movs	r3, #130	@ 0x82
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2166      	movs	r1, #102	@ 0x66
 8002e26:	4311      	orrs	r1, r2
 8002e28:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4319      	orrs	r1, r3
 8002e2e:	6479      	str	r1, [r7, #68]	@ 0x44
 8002e30:	4b7d      	ldr	r3, [pc, #500]	@ (8003028 <restartFlashMemory+0x314>)
 8002e32:	195b      	adds	r3, r3, r5
 8002e34:	2258      	movs	r2, #88	@ 0x58
 8002e36:	18ba      	adds	r2, r7, r2
 8002e38:	189a      	adds	r2, r3, r2
 8002e3a:	2382      	movs	r3, #130	@ 0x82
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e44:	6019      	str	r1, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
	arrayDataP_[eedato_seg3] |= 0xCC;
 8002e48:	4b77      	ldr	r3, [pc, #476]	@ (8003028 <restartFlashMemory+0x314>)
 8002e4a:	195b      	adds	r3, r3, r5
 8002e4c:	2258      	movs	r2, #88	@ 0x58
 8002e4e:	18ba      	adds	r2, r7, r2
 8002e50:	189a      	adds	r2, r3, r2
 8002e52:	23fe      	movs	r3, #254	@ 0xfe
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	18d3      	adds	r3, r2, r3
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	21cc      	movs	r1, #204	@ 0xcc
 8002e5e:	4311      	orrs	r1, r2
 8002e60:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e62:	2100      	movs	r1, #0
 8002e64:	4319      	orrs	r1, r3
 8002e66:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002e68:	4b6f      	ldr	r3, [pc, #444]	@ (8003028 <restartFlashMemory+0x314>)
 8002e6a:	195b      	adds	r3, r3, r5
 8002e6c:	2258      	movs	r2, #88	@ 0x58
 8002e6e:	18ba      	adds	r2, r7, r2
 8002e70:	189a      	adds	r2, r3, r2
 8002e72:	23fe      	movs	r3, #254	@ 0xfe
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	18d3      	adds	r3, r2, r3
 8002e78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e7c:	6019      	str	r1, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion1] |= (uint32_t) versionFirm1;
 8002e80:	4b69      	ldr	r3, [pc, #420]	@ (8003028 <restartFlashMemory+0x314>)
 8002e82:	195b      	adds	r3, r3, r5
 8002e84:	2258      	movs	r2, #88	@ 0x58
 8002e86:	18ba      	adds	r2, r7, r2
 8002e88:	189a      	adds	r2, r3, r2
 8002e8a:	23f6      	movs	r3, #246	@ 0xf6
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	18d3      	adds	r3, r2, r3
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	4b69      	ldr	r3, [pc, #420]	@ (800303c <restartFlashMemory+0x328>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	4302      	orrs	r2, r0
 8002ea6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ea8:	0023      	movs	r3, r4
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eae:	4b5e      	ldr	r3, [pc, #376]	@ (8003028 <restartFlashMemory+0x314>)
 8002eb0:	002c      	movs	r4, r5
 8002eb2:	191b      	adds	r3, r3, r4
 8002eb4:	2258      	movs	r2, #88	@ 0x58
 8002eb6:	18ba      	adds	r2, r7, r2
 8002eb8:	189a      	adds	r2, r3, r2
 8002eba:	23f6      	movs	r3, #246	@ 0xf6
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	18d3      	adds	r3, r2, r3
 8002ec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ec4:	6019      	str	r1, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion2] |= (uint32_t) versionFirm2;
 8002ec8:	4b57      	ldr	r3, [pc, #348]	@ (8003028 <restartFlashMemory+0x314>)
 8002eca:	191b      	adds	r3, r3, r4
 8002ecc:	2258      	movs	r2, #88	@ 0x58
 8002ece:	18ba      	adds	r2, r7, r2
 8002ed0:	189a      	adds	r2, r3, r2
 8002ed2:	23f8      	movs	r3, #248	@ 0xf8
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	18d3      	adds	r3, r2, r3
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4958      	ldr	r1, [pc, #352]	@ (8003040 <restartFlashMemory+0x32c>)
 8002ede:	7809      	ldrb	r1, [r1, #0]
 8002ee0:	6239      	str	r1, [r7, #32]
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ee6:	6a38      	ldr	r0, [r7, #32]
 8002ee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eea:	0005      	movs	r5, r0
 8002eec:	4315      	orrs	r5, r2
 8002eee:	61bd      	str	r5, [r7, #24]
 8002ef0:	4319      	orrs	r1, r3
 8002ef2:	61f9      	str	r1, [r7, #28]
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8003028 <restartFlashMemory+0x314>)
 8002ef6:	191b      	adds	r3, r3, r4
 8002ef8:	2258      	movs	r2, #88	@ 0x58
 8002efa:	18ba      	adds	r2, r7, r2
 8002efc:	189a      	adds	r2, r3, r2
 8002efe:	23f8      	movs	r3, #248	@ 0xf8
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	18d3      	adds	r3, r2, r3
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	6019      	str	r1, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]

	varInit = (uint8_t *) Page_127;
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003044 <restartFlashMemory+0x330>)
 8002f0e:	4a49      	ldr	r2, [pc, #292]	@ (8003034 <restartFlashMemory+0x320>)
 8002f10:	2158      	movs	r1, #88	@ 0x58
 8002f12:	1852      	adds	r2, r2, r1
 8002f14:	19d2      	adds	r2, r2, r7
 8002f16:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002f18:	4b4b      	ldr	r3, [pc, #300]	@ (8003048 <restartFlashMemory+0x334>)
 8002f1a:	2258      	movs	r2, #88	@ 0x58
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	19db      	adds	r3, r3, r7
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e05a      	b.n	8002fdc <restartFlashMemory+0x2c8>
		arrayDataV_[i] |= ((uint64_t )(varInit) << 32);
 8002f26:	4c48      	ldr	r4, [pc, #288]	@ (8003048 <restartFlashMemory+0x334>)
 8002f28:	2358      	movs	r3, #88	@ 0x58
 8002f2a:	18e3      	adds	r3, r4, r3
 8002f2c:	19db      	adds	r3, r3, r7
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4a3e      	ldr	r2, [pc, #248]	@ (800302c <restartFlashMemory+0x318>)
 8002f32:	2693      	movs	r6, #147	@ 0x93
 8002f34:	00f6      	lsls	r6, r6, #3
 8002f36:	1992      	adds	r2, r2, r6
 8002f38:	2158      	movs	r1, #88	@ 0x58
 8002f3a:	468c      	mov	ip, r1
 8002f3c:	44bc      	add	ip, r7
 8002f3e:	4462      	add	r2, ip
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	18d3      	adds	r3, r2, r3
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	483a      	ldr	r0, [pc, #232]	@ (8003034 <restartFlashMemory+0x320>)
 8002f4a:	2158      	movs	r1, #88	@ 0x58
 8002f4c:	1841      	adds	r1, r0, r1
 8002f4e:	19c9      	adds	r1, r1, r7
 8002f50:	6809      	ldr	r1, [r1, #0]
 8002f52:	6139      	str	r1, [r7, #16]
 8002f54:	17c9      	asrs	r1, r1, #31
 8002f56:	6179      	str	r1, [r7, #20]
 8002f58:	6939      	ldr	r1, [r7, #16]
 8002f5a:	0009      	movs	r1, r1
 8002f5c:	60f9      	str	r1, [r7, #12]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	2158      	movs	r1, #88	@ 0x58
 8002f64:	1861      	adds	r1, r4, r1
 8002f66:	19c9      	adds	r1, r1, r7
 8002f68:	7809      	ldrb	r1, [r1, #0]
 8002f6a:	468c      	mov	ip, r1
 8002f6c:	68bc      	ldr	r4, [r7, #8]
 8002f6e:	68fd      	ldr	r5, [r7, #12]
 8002f70:	0021      	movs	r1, r4
 8002f72:	4311      	orrs	r1, r2
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	0029      	movs	r1, r5
 8002f78:	4319      	orrs	r1, r3
 8002f7a:	6079      	str	r1, [r7, #4]
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <restartFlashMemory+0x318>)
 8002f7e:	199b      	adds	r3, r3, r6
 8002f80:	2258      	movs	r2, #88	@ 0x58
 8002f82:	18ba      	adds	r2, r7, r2
 8002f84:	189a      	adds	r2, r3, r2
 8002f86:	4663      	mov	r3, ip
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	18d3      	adds	r3, r2, r3
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6019      	str	r1, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA))){
 8002f94:	2358      	movs	r3, #88	@ 0x58
 8002f96:	18c3      	adds	r3, r0, r3
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800304c <restartFlashMemory+0x338>)
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d308      	bcc.n	8002fb4 <restartFlashMemory+0x2a0>
			varInit++;
 8002fa2:	2358      	movs	r3, #88	@ 0x58
 8002fa4:	18c3      	adds	r3, r0, r3
 8002fa6:	19db      	adds	r3, r3, r7
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	2258      	movs	r2, #88	@ 0x58
 8002fae:	1882      	adds	r2, r0, r2
 8002fb0:	19d2      	adds	r2, r2, r7
 8002fb2:	6013      	str	r3, [r2, #0]
		}
		varInit++;
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <restartFlashMemory+0x320>)
 8002fb6:	2358      	movs	r3, #88	@ 0x58
 8002fb8:	18d3      	adds	r3, r2, r3
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	2158      	movs	r1, #88	@ 0x58
 8002fc2:	1852      	adds	r2, r2, r1
 8002fc4:	19d2      	adds	r2, r2, r7
 8002fc6:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002fc8:	491f      	ldr	r1, [pc, #124]	@ (8003048 <restartFlashMemory+0x334>)
 8002fca:	2358      	movs	r3, #88	@ 0x58
 8002fcc:	18cb      	adds	r3, r1, r3
 8002fce:	19db      	adds	r3, r3, r7
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	2358      	movs	r3, #88	@ 0x58
 8002fd4:	18cb      	adds	r3, r1, r3
 8002fd6:	19db      	adds	r3, r3, r7
 8002fd8:	3201      	adds	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003048 <restartFlashMemory+0x334>)
 8002fde:	2258      	movs	r2, #88	@ 0x58
 8002fe0:	189b      	adds	r3, r3, r2
 8002fe2:	19db      	adds	r3, r3, r7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b11      	cmp	r3, #17
 8002fe8:	d99d      	bls.n	8002f26 <restartFlashMemory+0x212>
	}
	erasePage(126);
 8002fea:	207e      	movs	r0, #126	@ 0x7e
 8002fec:	f7ff fb14 	bl	8002618 <erasePage>
	erasePage(127);
 8002ff0:	207f      	movs	r0, #127	@ 0x7f
 8002ff2:	f7ff fb11 	bl	8002618 <erasePage>
	writeFLASH((uint64_t *) (Page_126),&arrayDataP_[0],sizeEEPROM_P);
 8002ff6:	2390      	movs	r3, #144	@ 0x90
 8002ff8:	2258      	movs	r2, #88	@ 0x58
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	19db      	adds	r3, r3, r7
 8002ffe:	480c      	ldr	r0, [pc, #48]	@ (8003030 <restartFlashMemory+0x31c>)
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	0019      	movs	r1, r3
 8003004:	f7ff fb3c 	bl	8002680 <writeFLASH>
	writeFLASH((uint64_t *) (Page_127),&arrayDataV_[0],sizeEEPROM_V);
 8003008:	2358      	movs	r3, #88	@ 0x58
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	480d      	ldr	r0, [pc, #52]	@ (8003044 <restartFlashMemory+0x330>)
 800300e:	2212      	movs	r2, #18
 8003010:	0019      	movs	r1, r3
 8003012:	f7ff fb35 	bl	8002680 <writeFLASH>
	initEEPROMEmulated();
 8003016:	f7ff fb6b 	bl	80026f0 <initEEPROMEmulated>
}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <restartFlashMemory+0x33c>)
 8003020:	449d      	add	sp, r3
 8003022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003024:	fffffb0c 	.word	0xfffffb0c
 8003028:	fffffbf8 	.word	0xfffffbf8
 800302c:	fffffb68 	.word	0xfffffb68
 8003030:	0803f000 	.word	0x0803f000
 8003034:	00000494 	.word	0x00000494
 8003038:	00000493 	.word	0x00000493
 800303c:	0801eff0 	.word	0x0801eff0
 8003040:	0801eff1 	.word	0x0801eff1
 8003044:	0803f800 	.word	0x0803f800
 8003048:	00000492 	.word	0x00000492
 800304c:	0803f810 	.word	0x0803f810
 8003050:	000004f4 	.word	0x000004f4

08003054 <findLastValue>:
  * @brief  Find the Last saved Value
  * @param	AddressPage_:		Address Page
  * @param	AddressValue_:		Address Variable
  * @retval Return AddressValue_'s Data
  */
uint32_t findLastValue(uint32_t AddressValue_){
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	uint32_t * AddressPage_ = (uint32_t *) getAddressPage(AddressValue_);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff fac6 	bl	80025f0 <getAddressPage>
 8003064:	0002      	movs	r2, r0
 8003066:	000b      	movs	r3, r1
 8003068:	0013      	movs	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
	uint32_t *pointValuex = AddressPage_ + SizePage_32Bits -1;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4a13      	ldr	r2, [pc, #76]	@ (80030bc <findLastValue+0x68>)
 8003070:	4694      	mov	ip, r2
 8003072:	4463      	add	r3, ip
 8003074:	60fb      	str	r3, [r7, #12]
	if(AddressPage_ < ((uint32_t *) 0x803F000) || AddressPage_ >= ((uint32_t *) 0x8040000)){ // Invalid Direction
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <findLastValue+0x6c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d903      	bls.n	8003086 <findLastValue+0x32>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4a10      	ldr	r2, [pc, #64]	@ (80030c4 <findLastValue+0x70>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d90e      	bls.n	80030a4 <findLastValue+0x50>
		return 0xFFFFFFFF;
 8003086:	2301      	movs	r3, #1
 8003088:	425b      	negs	r3, r3
 800308a:	e013      	b.n	80030b4 <findLastValue+0x60>
	}
	while(*pointValuex != AddressValue_){
		pointValuex -= 2;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3b08      	subs	r3, #8
 8003090:	60fb      	str	r3, [r7, #12]
		if(pointValuex < AddressPage_){
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d204      	bcs.n	80030a4 <findLastValue+0x50>
			restartFlashMemory();
 800309a:	f7ff fe3b 	bl	8002d14 <restartFlashMemory>
			return 0xFFFFFFFF;
 800309e:	2301      	movs	r3, #1
 80030a0:	425b      	negs	r3, r3
 80030a2:	e007      	b.n	80030b4 <findLastValue+0x60>
	while(*pointValuex != AddressValue_){
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d1ee      	bne.n	800308c <findLastValue+0x38>
		}
	}
	return *(pointValuex-1);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b04      	subs	r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	000007fc 	.word	0x000007fc
 80030c0:	0803efff 	.word	0x0803efff
 80030c4:	0803ffff 	.word	0x0803ffff

080030c8 <pushAddressData>:
  * @param	managerPoint_:		Address in Flash
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void pushAddressData(uint64_t * managerPoint_,uint32_t AddressValue_,uint32_t Value_){
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	b08d      	sub	sp, #52	@ 0x34
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80030d0:	6239      	str	r1, [r7, #32]
 80030d2:	61fa      	str	r2, [r7, #28]
	uint64_t Data_ = 0;
 80030d4:	2200      	movs	r2, #0
 80030d6:	2300      	movs	r3, #0
 80030d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ = ((uint64_t) AddressValue_) << 32;
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	001b      	movs	r3, r3
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ |= ((uint64_t) Value_);
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003102:	6838      	ldr	r0, [r7, #0]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	0006      	movs	r6, r0
 8003108:	4316      	orrs	r6, r2
 800310a:	0034      	movs	r4, r6
 800310c:	4319      	orrs	r1, r3
 800310e:	000d      	movs	r5, r1
 8003110:	62bc      	str	r4, [r7, #40]	@ 0x28
 8003112:	62fd      	str	r5, [r7, #44]	@ 0x2c
	writeFLASH(managerPoint_,&Data_,1);
 8003114:	2310      	movs	r3, #16
 8003116:	2218      	movs	r2, #24
 8003118:	189b      	adds	r3, r3, r2
 800311a:	19d9      	adds	r1, r3, r7
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	2201      	movs	r2, #1
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff faad 	bl	8002680 <writeFLASH>
}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b00d      	add	sp, #52	@ 0x34
 800312c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800312e <currentlyPoint>:
/**
  * @brief  Save Address and Data in Flash
  * @param	AddressPage_:		Address Page
  * @retval Return the Address then it is empty
  */
uint64_t currentlyPoint(uint64_t * AddressPage_){
 800312e:	b5b0      	push	{r4, r5, r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
	uint64_t * Pointx =  AddressPage_ + SizePage_64Bits -1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	22ff      	movs	r2, #255	@ 0xff
 800313a:	00d2      	lsls	r2, r2, #3
 800313c:	4694      	mov	ip, r2
 800313e:	4463      	add	r3, ip
 8003140:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8003142:	e002      	b.n	800314a <currentlyPoint+0x1c>
		Pointx --;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3b08      	subs	r3, #8
 8003148:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	1c51      	adds	r1, r2, #1
 8003152:	d101      	bne.n	8003158 <currentlyPoint+0x2a>
 8003154:	3301      	adds	r3, #1
 8003156:	d0f5      	beq.n	8003144 <currentlyPoint+0x16>
	}
	Pointx++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3308      	adds	r3, #8
 800315c:	60fb      	str	r3, [r7, #12]
	return Pointx; // Return the direction Init
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	001c      	movs	r4, r3
 8003162:	17db      	asrs	r3, r3, #31
 8003164:	001d      	movs	r5, r3
 8003166:	0022      	movs	r2, r4
 8003168:	002b      	movs	r3, r5
}
 800316a:	0010      	movs	r0, r2
 800316c:	0019      	movs	r1, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b004      	add	sp, #16
 8003172:	bdb0      	pop	{r4, r5, r7, pc}

08003174 <FlashManager>:
  * @brief  FLASH handling
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void FlashManager(uint32_t AddressValue_, uint32_t Value_){
 8003174:	b5b0      	push	{r4, r5, r7, lr}
 8003176:	b08c      	sub	sp, #48	@ 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	_Bool flag_Page127 = 1;
 800317e:	242f      	movs	r4, #47	@ 0x2f
 8003180:	193b      	adds	r3, r7, r4
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
	uint8_t size_ = sizeEEPROM_V;
 8003186:	252e      	movs	r5, #46	@ 0x2e
 8003188:	197b      	adds	r3, r7, r5
 800318a:	2212      	movs	r2, #18
 800318c:	701a      	strb	r2, [r3, #0]
	uint64_t * AddressPage_ = (uint64_t *) getAddressPage(AddressValue_);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff fa2d 	bl	80025f0 <getAddressPage>
 8003196:	0002      	movs	r2, r0
 8003198:	000b      	movs	r3, r1
 800319a:	0013      	movs	r3, r2
 800319c:	61fb      	str	r3, [r7, #28]
	if(AddressPage_ == (uint64_t *) (Page_126)){	// Is here Page 126?
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	4a55      	ldr	r2, [pc, #340]	@ (80032f8 <FlashManager+0x184>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d105      	bne.n	80031b2 <FlashManager+0x3e>
		flag_Page127 = 0;
 80031a6:	193b      	adds	r3, r7, r4
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
		size_ = sizeEEPROM_P;
 80031ac:	197b      	adds	r3, r7, r5
 80031ae:	2280      	movs	r2, #128	@ 0x80
 80031b0:	701a      	strb	r2, [r3, #0]
	}

	// Manager Characteristics
	uint64_t * managerPointInit = AddressPage_;									// Start Page
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	61bb      	str	r3, [r7, #24]
	uint64_t * managerPoint =  (uint64_t *) currentlyPoint(AddressPage_);		// Current Point
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7ff ffb8 	bl	800312e <currentlyPoint>
 80031be:	0002      	movs	r2, r0
 80031c0:	000b      	movs	r3, r1
 80031c2:	0013      	movs	r3, r2
 80031c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint64_t * managerPointEnd = managerPointInit + SizePage_64Bits -1;			// End Page
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	22ff      	movs	r2, #255	@ 0xff
 80031ca:	00d2      	lsls	r2, r2, #3
 80031cc:	4694      	mov	ip, r2
 80031ce:	4463      	add	r3, ip
 80031d0:	617b      	str	r3, [r7, #20]

	if((managerPoint - 1)== managerPointEnd){	// Is here the End Page?
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	3b08      	subs	r3, #8
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d000      	beq.n	80031de <FlashManager+0x6a>
 80031dc:	e082      	b.n	80032e4 <FlashManager+0x170>
		// Find the Last Values
		uint32_t * arrayTemp = malloc(size_);
 80031de:	232e      	movs	r3, #46	@ 0x2e
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f017 fbc1 	bl	801a96c <malloc>
 80031ea:	0003      	movs	r3, r0
 80031ec:	613b      	str	r3, [r7, #16]
		uint8_t * varInit = (uint8_t *) AddressPage_;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 80031f2:	2323      	movs	r3, #35	@ 0x23
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e023      	b.n	8003244 <FlashManager+0xd0>
			arrayTemp[i] = findLastValue((uint32_t) varInit);
 80031fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031fe:	2323      	movs	r3, #35	@ 0x23
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	18d4      	adds	r4, r2, r3
 800320a:	0008      	movs	r0, r1
 800320c:	f7ff ff22 	bl	8003054 <findLastValue>
 8003210:	0003      	movs	r3, r0
 8003212:	6023      	str	r3, [r4, #0]
			varInit++;
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	3301      	adds	r3, #1
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
			if( (varInit > ((uint8_t * ) &eeCntRegDATA))&flag_Page127){
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	4a37      	ldr	r2, [pc, #220]	@ (80032fc <FlashManager+0x188>)
 800321e:	429a      	cmp	r2, r3
 8003220:	419b      	sbcs	r3, r3
 8003222:	425b      	negs	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	001a      	movs	r2, r3
 8003228:	232f      	movs	r3, #47	@ 0x2f
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	4013      	ands	r3, r2
 8003230:	d002      	beq.n	8003238 <FlashManager+0xc4>
				varInit++;
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	3301      	adds	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8003238:	2123      	movs	r1, #35	@ 0x23
 800323a:	187b      	adds	r3, r7, r1
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	187b      	adds	r3, r7, r1
 8003240:	3201      	adds	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	2323      	movs	r3, #35	@ 0x23
 8003246:	18fa      	adds	r2, r7, r3
 8003248:	232e      	movs	r3, #46	@ 0x2e
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d3d3      	bcc.n	80031fc <FlashManager+0x88>
			}
		}
		// Erase the Page
		//uint32_t VarAux_= (((uint32_t) ) - 0x8000000);
		uint8_t numberPage = getNumberPage((uint32_t)AddressPage_); 		// Number the Page
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	250f      	movs	r5, #15
 8003258:	197c      	adds	r4, r7, r5
 800325a:	0018      	movs	r0, r3
 800325c:	f7ff f9b6 	bl	80025cc <getNumberPage>
 8003260:	0003      	movs	r3, r0
 8003262:	7023      	strb	r3, [r4, #0]

		erasePage(numberPage);
 8003264:	197b      	adds	r3, r7, r5
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff f9d5 	bl	8002618 <erasePage>

		// Return the begin Page in current Point

		managerPoint = AddressPage_;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
		varInit =  (uint8_t *) AddressPage_;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24

		// Write the new Values and its Addresses
		for(uint8_t i=0; i<size_; i++){
 8003276:	2322      	movs	r3, #34	@ 0x22
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e01e      	b.n	80032be <FlashManager+0x14a>
			pushAddressData(managerPoint,(uint32_t)varInit,arrayTemp[i]);
 8003280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003282:	2322      	movs	r3, #34	@ 0x22
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	18d3      	adds	r3, r2, r3
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff ff18 	bl	80030c8 <pushAddressData>
			varInit++;
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	3301      	adds	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
			if( varInit > ((uint8_t * ) &eeCntRegDATA)){
 800329e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a0:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <FlashManager+0x188>)
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d902      	bls.n	80032ac <FlashManager+0x138>
				varInit++;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	3301      	adds	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			managerPoint ++;
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	3308      	adds	r3, #8
 80032b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		for(uint8_t i=0; i<size_; i++){
 80032b2:	2122      	movs	r1, #34	@ 0x22
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	3201      	adds	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	2322      	movs	r3, #34	@ 0x22
 80032c0:	18fa      	adds	r2, r7, r3
 80032c2:	232e      	movs	r3, #46	@ 0x2e
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d3d8      	bcc.n	8003280 <FlashManager+0x10c>
		}
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7ff fef7 	bl	80030c8 <pushAddressData>
		free(arrayTemp);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	0018      	movs	r0, r3
 80032de:	f017 fb4f 	bl	801a980 <free>
	else{

		// Write de new Values and its Addresses
		pushAddressData(managerPoint,AddressValue_,Value_);
	}
}
 80032e2:	e005      	b.n	80032f0 <FlashManager+0x17c>
		pushAddressData(managerPoint,AddressValue_,Value_);
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff feec 	bl	80030c8 <pushAddressData>
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b00c      	add	sp, #48	@ 0x30
 80032f6:	bdb0      	pop	{r4, r5, r7, pc}
 80032f8:	0803f000 	.word	0x0803f000
 80032fc:	0803f810 	.word	0x0803f810

08003300 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"
#include "ELTEC_EmulatedEEPROM.h"

//-------------------------------------------------------
static void MacStringtoHex(){
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 8003306:	1cfb      	adds	r3, r7, #3
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 800330c:	1cbb      	adds	r3, r7, #2
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8003312:	003b      	movs	r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8003318:	2300      	movs	r3, #0
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	e0d8      	b.n	80034d0 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3302      	adds	r3, #2
 8003322:	4a70      	ldr	r2, [pc, #448]	@ (80034e4 <MacStringtoHex+0x1e4>)
 8003324:	5cd3      	ldrb	r3, [r2, r3]
 8003326:	2b30      	cmp	r3, #48	@ 0x30
 8003328:	d102      	bne.n	8003330 <MacStringtoHex+0x30>
			tempregister = 0x00;
 800332a:	1cfb      	adds	r3, r7, #3
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3302      	adds	r3, #2
 8003334:	4a6b      	ldr	r2, [pc, #428]	@ (80034e4 <MacStringtoHex+0x1e4>)
 8003336:	5cd3      	ldrb	r3, [r2, r3]
 8003338:	2b31      	cmp	r3, #49	@ 0x31
 800333a:	d102      	bne.n	8003342 <MacStringtoHex+0x42>
			tempregister = 0x01;
 800333c:	1cfb      	adds	r3, r7, #3
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3302      	adds	r3, #2
 8003346:	4a67      	ldr	r2, [pc, #412]	@ (80034e4 <MacStringtoHex+0x1e4>)
 8003348:	5cd3      	ldrb	r3, [r2, r3]
 800334a:	2b32      	cmp	r3, #50	@ 0x32
 800334c:	d102      	bne.n	8003354 <MacStringtoHex+0x54>
			tempregister = 0x02;
 800334e:	1cfb      	adds	r3, r7, #3
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3302      	adds	r3, #2
 8003358:	4a62      	ldr	r2, [pc, #392]	@ (80034e4 <MacStringtoHex+0x1e4>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	2b33      	cmp	r3, #51	@ 0x33
 800335e:	d102      	bne.n	8003366 <MacStringtoHex+0x66>
			tempregister = 0x03;
 8003360:	1cfb      	adds	r3, r7, #3
 8003362:	2203      	movs	r2, #3
 8003364:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3302      	adds	r3, #2
 800336a:	4a5e      	ldr	r2, [pc, #376]	@ (80034e4 <MacStringtoHex+0x1e4>)
 800336c:	5cd3      	ldrb	r3, [r2, r3]
 800336e:	2b34      	cmp	r3, #52	@ 0x34
 8003370:	d102      	bne.n	8003378 <MacStringtoHex+0x78>
			tempregister = 0x04;
 8003372:	1cfb      	adds	r3, r7, #3
 8003374:	2204      	movs	r2, #4
 8003376:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3302      	adds	r3, #2
 800337c:	4a59      	ldr	r2, [pc, #356]	@ (80034e4 <MacStringtoHex+0x1e4>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	2b35      	cmp	r3, #53	@ 0x35
 8003382:	d102      	bne.n	800338a <MacStringtoHex+0x8a>
			tempregister = 0x05;
 8003384:	1cfb      	adds	r3, r7, #3
 8003386:	2205      	movs	r2, #5
 8003388:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3302      	adds	r3, #2
 800338e:	4a55      	ldr	r2, [pc, #340]	@ (80034e4 <MacStringtoHex+0x1e4>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	2b36      	cmp	r3, #54	@ 0x36
 8003394:	d102      	bne.n	800339c <MacStringtoHex+0x9c>
			tempregister = 0x06;
 8003396:	1cfb      	adds	r3, r7, #3
 8003398:	2206      	movs	r2, #6
 800339a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3302      	adds	r3, #2
 80033a0:	4a50      	ldr	r2, [pc, #320]	@ (80034e4 <MacStringtoHex+0x1e4>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	2b37      	cmp	r3, #55	@ 0x37
 80033a6:	d102      	bne.n	80033ae <MacStringtoHex+0xae>
			tempregister = 0x07;
 80033a8:	1cfb      	adds	r3, r7, #3
 80033aa:	2207      	movs	r2, #7
 80033ac:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3302      	adds	r3, #2
 80033b2:	4a4c      	ldr	r2, [pc, #304]	@ (80034e4 <MacStringtoHex+0x1e4>)
 80033b4:	5cd3      	ldrb	r3, [r2, r3]
 80033b6:	2b38      	cmp	r3, #56	@ 0x38
 80033b8:	d102      	bne.n	80033c0 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 80033ba:	1cfb      	adds	r3, r7, #3
 80033bc:	2208      	movs	r2, #8
 80033be:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3302      	adds	r3, #2
 80033c4:	4a47      	ldr	r2, [pc, #284]	@ (80034e4 <MacStringtoHex+0x1e4>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	2b39      	cmp	r3, #57	@ 0x39
 80033ca:	d102      	bne.n	80033d2 <MacStringtoHex+0xd2>
			tempregister = 0x09;
 80033cc:	1cfb      	adds	r3, r7, #3
 80033ce:	2209      	movs	r2, #9
 80033d0:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3302      	adds	r3, #2
 80033d6:	4a43      	ldr	r2, [pc, #268]	@ (80034e4 <MacStringtoHex+0x1e4>)
 80033d8:	5cd3      	ldrb	r3, [r2, r3]
 80033da:	2b41      	cmp	r3, #65	@ 0x41
 80033dc:	d102      	bne.n	80033e4 <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 80033de:	1cfb      	adds	r3, r7, #3
 80033e0:	220a      	movs	r2, #10
 80033e2:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3302      	adds	r3, #2
 80033e8:	4a3e      	ldr	r2, [pc, #248]	@ (80034e4 <MacStringtoHex+0x1e4>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	2b42      	cmp	r3, #66	@ 0x42
 80033ee:	d102      	bne.n	80033f6 <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 80033f0:	1cfb      	adds	r3, r7, #3
 80033f2:	220b      	movs	r2, #11
 80033f4:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3302      	adds	r3, #2
 80033fa:	4a3a      	ldr	r2, [pc, #232]	@ (80034e4 <MacStringtoHex+0x1e4>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	2b43      	cmp	r3, #67	@ 0x43
 8003400:	d102      	bne.n	8003408 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 8003402:	1cfb      	adds	r3, r7, #3
 8003404:	220c      	movs	r2, #12
 8003406:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3302      	adds	r3, #2
 800340c:	4a35      	ldr	r2, [pc, #212]	@ (80034e4 <MacStringtoHex+0x1e4>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	2b44      	cmp	r3, #68	@ 0x44
 8003412:	d102      	bne.n	800341a <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8003414:	1cfb      	adds	r3, r7, #3
 8003416:	220d      	movs	r2, #13
 8003418:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3302      	adds	r3, #2
 800341e:	4a31      	ldr	r2, [pc, #196]	@ (80034e4 <MacStringtoHex+0x1e4>)
 8003420:	5cd3      	ldrb	r3, [r2, r3]
 8003422:	2b45      	cmp	r3, #69	@ 0x45
 8003424:	d102      	bne.n	800342c <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8003426:	1cfb      	adds	r3, r7, #3
 8003428:	220e      	movs	r2, #14
 800342a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3302      	adds	r3, #2
 8003430:	4a2c      	ldr	r2, [pc, #176]	@ (80034e4 <MacStringtoHex+0x1e4>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	2b46      	cmp	r3, #70	@ 0x46
 8003436:	d102      	bne.n	800343e <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8003438:	1cfb      	adds	r3, r7, #3
 800343a:	220f      	movs	r2, #15
 800343c:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	4013      	ands	r3, r2
 8003444:	d105      	bne.n	8003452 <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 8003446:	1cbb      	adds	r3, r7, #2
 8003448:	1cfa      	adds	r2, r7, #3
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e03b      	b.n	80034ca <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 8003452:	1cbb      	adds	r3, r7, #2
 8003454:	1cb9      	adds	r1, r7, #2
 8003456:	1cfa      	adds	r2, r7, #3
 8003458:	7809      	ldrb	r1, [r1, #0]
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d005      	beq.n	8003472 <MacStringtoHex+0x172>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d002      	beq.n	8003472 <MacStringtoHex+0x172>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b09      	cmp	r3, #9
 8003470:	d105      	bne.n	800347e <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 8003472:	1cbb      	adds	r3, r7, #2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b29a      	uxth	r2, r3
 8003478:	003b      	movs	r3, r7
 800347a:	0212      	lsls	r2, r2, #8
 800347c:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d005      	beq.n	8003490 <MacStringtoHex+0x190>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b07      	cmp	r3, #7
 8003488:	d002      	beq.n	8003490 <MacStringtoHex+0x190>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b0b      	cmp	r3, #11
 800348e:	d107      	bne.n	80034a0 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 8003490:	1cbb      	adds	r3, r7, #2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b299      	uxth	r1, r3
 8003496:	003b      	movs	r3, r7
 8003498:	003a      	movs	r2, r7
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d103      	bne.n	80034ae <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <MacStringtoHex+0x1e8>)
 80034a8:	003a      	movs	r2, r7
 80034aa:	8812      	ldrh	r2, [r2, #0]
 80034ac:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b07      	cmp	r3, #7
 80034b2:	d103      	bne.n	80034bc <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <MacStringtoHex+0x1e8>)
 80034b6:	003a      	movs	r2, r7
 80034b8:	8812      	ldrh	r2, [r2, #0]
 80034ba:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b0b      	cmp	r3, #11
 80034c0:	d103      	bne.n	80034ca <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <MacStringtoHex+0x1e8>)
 80034c4:	003a      	movs	r2, r7
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3301      	adds	r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b0b      	cmp	r3, #11
 80034d4:	dc00      	bgt.n	80034d8 <MacStringtoHex+0x1d8>
 80034d6:	e722      	b.n	800331e <MacStringtoHex+0x1e>
		}
	}
}
 80034d8:	46c0      	nop			@ (mov r8, r8)
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	b002      	add	sp, #8
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	20001e6c 	.word	0x20001e6c
 80034e8:	20000088 	.word	0x20000088

080034ec <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	603a      	str	r2, [r7, #0]
 80034f4:	1dbb      	adds	r3, r7, #6
 80034f6:	1c02      	adds	r2, r0, #0
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	1c0a      	adds	r2, r1, #0
 80034fe:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 8003500:	210d      	movs	r1, #13
 8003502:	187b      	adds	r3, r7, r1
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 8003508:	200f      	movs	r0, #15
 800350a:	183b      	adds	r3, r7, r0
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 8003510:	4b2c      	ldr	r3, [pc, #176]	@ (80035c4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	1dba      	adds	r2, r7, #6
 8003516:	8812      	ldrh	r2, [r2, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d84b      	bhi.n	80035b4 <ReadHoldingRegistersFunctionRev+0xc8>
 800351c:	4b29      	ldr	r3, [pc, #164]	@ (80035c4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	1d3a      	adds	r2, r7, #4
 8003522:	8812      	ldrh	r2, [r2, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d345      	bcc.n	80035b4 <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 8003528:	183b      	adds	r3, r7, r0
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	4b23      	ldr	r3, [pc, #140]	@ (80035c4 <ReadHoldingRegistersFunctionRev+0xd8>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	b2da      	uxtb	r2, r3
 800353e:	187b      	adds	r3, r7, r1
 8003540:	3201      	adds	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 8003544:	187b      	adds	r3, r7, r1
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b29a      	uxth	r2, r3
 800354a:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d32d      	bcc.n	80035ae <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 8003552:	210e      	movs	r1, #14
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e017      	b.n	8003592 <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 8003562:	240e      	movs	r4, #14
 8003564:	193b      	adds	r3, r7, r4
 8003566:	7818      	ldrb	r0, [r3, #0]
 8003568:	4b16      	ldr	r3, [pc, #88]	@ (80035c4 <ReadHoldingRegistersFunctionRev+0xd8>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	001a      	movs	r2, r3
 800356e:	1dbb      	adds	r3, r7, #6
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	1ad2      	subs	r2, r2, r3
 8003574:	193b      	adds	r3, r7, r4
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	18d3      	adds	r3, r2, r3
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	18d3      	adds	r3, r2, r3
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	0019      	movs	r1, r3
 8003584:	f001 f87a 	bl	800467c <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 8003588:	193b      	adds	r3, r7, r4
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	193b      	adds	r3, r7, r4
 800358e:	3201      	adds	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	230e      	movs	r3, #14
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b29a      	uxth	r2, r3
 800359a:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <ReadHoldingRegistersFunctionRev+0xdc>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3df      	bcc.n	8003562 <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <ReadHoldingRegistersFunctionRev+0xe0>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f001 f886 	bl	80046b8 <ModbusSlaveTransaction>
 80035ac:	e002      	b.n	80035b4 <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 80035ae:	2003      	movs	r0, #3
 80035b0:	f001 f9ac 	bl	800490c <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 80035b4:	230f      	movs	r3, #15
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	781b      	ldrb	r3, [r3, #0]
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b005      	add	sp, #20
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	2000037e 	.word	0x2000037e
 80035c8:	20000380 	.word	0x20000380
 80035cc:	200003cc 	.word	0x200003cc

080035d0 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 80035dc:	4b75      	ldr	r3, [pc, #468]	@ (80037b4 <ModbusMap+0x1e4>)
 80035de:	78da      	ldrb	r2, [r3, #3]
 80035e0:	4b75      	ldr	r3, [pc, #468]	@ (80037b8 <ModbusMap+0x1e8>)
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b73      	ldr	r3, [pc, #460]	@ (80037b8 <ModbusMap+0x1e8>)
 80035ea:	789b      	ldrb	r3, [r3, #2]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2201      	movs	r2, #1
 80035f2:	4053      	eors	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 80035fa:	4b70      	ldr	r3, [pc, #448]	@ (80037bc <ModbusMap+0x1ec>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e016      	b.n	8003630 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 8003602:	4b6d      	ldr	r3, [pc, #436]	@ (80037b8 <ModbusMap+0x1e8>)
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 800360a:	4b6c      	ldr	r3, [pc, #432]	@ (80037bc <ModbusMap+0x1ec>)
 800360c:	2201      	movs	r2, #1
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	e00e      	b.n	8003630 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 8003612:	4b69      	ldr	r3, [pc, #420]	@ (80037b8 <ModbusMap+0x1e8>)
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 800361a:	4b68      	ldr	r3, [pc, #416]	@ (80037bc <ModbusMap+0x1ec>)
 800361c:	2202      	movs	r2, #2
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	e006      	b.n	8003630 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 8003622:	4b64      	ldr	r3, [pc, #400]	@ (80037b4 <ModbusMap+0x1e4>)
 8003624:	78db      	ldrb	r3, [r3, #3]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 800362a:	4b64      	ldr	r3, [pc, #400]	@ (80037bc <ModbusMap+0x1ec>)
 800362c:	2206      	movs	r2, #6
 800362e:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 8003630:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <ModbusMap+0x1f0>)
 8003632:	785b      	ldrb	r3, [r3, #1]
 8003634:	001a      	movs	r2, r3
 8003636:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <ModbusMap+0x1ec>)
 8003638:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 800363a:	4b62      	ldr	r3, [pc, #392]	@ (80037c4 <ModbusMap+0x1f4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	001a      	movs	r2, r3
 8003640:	4b5e      	ldr	r3, [pc, #376]	@ (80037bc <ModbusMap+0x1ec>)
 8003642:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 8003644:	4b5e      	ldr	r3, [pc, #376]	@ (80037c0 <ModbusMap+0x1f0>)
 8003646:	789b      	ldrb	r3, [r3, #2]
 8003648:	001a      	movs	r2, r3
 800364a:	4b5c      	ldr	r3, [pc, #368]	@ (80037bc <ModbusMap+0x1ec>)
 800364c:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 800364e:	4b5c      	ldr	r3, [pc, #368]	@ (80037c0 <ModbusMap+0x1f0>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	001a      	movs	r2, r3
 8003654:	4b59      	ldr	r3, [pc, #356]	@ (80037bc <ModbusMap+0x1ec>)
 8003656:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8003658:	4b57      	ldr	r3, [pc, #348]	@ (80037b8 <ModbusMap+0x1e8>)
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	001a      	movs	r2, r3
 800365e:	4b57      	ldr	r3, [pc, #348]	@ (80037bc <ModbusMap+0x1ec>)
 8003660:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 8003662:	4b56      	ldr	r3, [pc, #344]	@ (80037bc <ModbusMap+0x1ec>)
 8003664:	2200      	movs	r2, #0
 8003666:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8003668:	4b54      	ldr	r3, [pc, #336]	@ (80037bc <ModbusMap+0x1ec>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d103      	bne.n	8003678 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 8003670:	4b52      	ldr	r3, [pc, #328]	@ (80037bc <ModbusMap+0x1ec>)
 8003672:	2201      	movs	r2, #1
 8003674:	81da      	strh	r2, [r3, #14]
 8003676:	e002      	b.n	800367e <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 8003678:	4b50      	ldr	r3, [pc, #320]	@ (80037bc <ModbusMap+0x1ec>)
 800367a:	2200      	movs	r2, #0
 800367c:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 800367e:	4b4e      	ldr	r3, [pc, #312]	@ (80037b8 <ModbusMap+0x1e8>)
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	001a      	movs	r2, r3
 8003684:	4b4d      	ldr	r3, [pc, #308]	@ (80037bc <ModbusMap+0x1ec>)
 8003686:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 8003688:	4b4b      	ldr	r3, [pc, #300]	@ (80037b8 <ModbusMap+0x1e8>)
 800368a:	789b      	ldrb	r3, [r3, #2]
 800368c:	001a      	movs	r2, r3
 800368e:	4b4b      	ldr	r3, [pc, #300]	@ (80037bc <ModbusMap+0x1ec>)
 8003690:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 8003692:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <ModbusMap+0x1ec>)
 8003694:	2200      	movs	r2, #0
 8003696:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 8003698:	4b48      	ldr	r3, [pc, #288]	@ (80037bc <ModbusMap+0x1ec>)
 800369a:	2200      	movs	r2, #0
 800369c:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 800369e:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <ModbusMap+0x1e4>)
 80036a0:	78db      	ldrb	r3, [r3, #3]
 80036a2:	001a      	movs	r2, r3
 80036a4:	4b45      	ldr	r3, [pc, #276]	@ (80037bc <ModbusMap+0x1ec>)
 80036a6:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 80036a8:	4b44      	ldr	r3, [pc, #272]	@ (80037bc <ModbusMap+0x1ec>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 80036ae:	4b46      	ldr	r3, [pc, #280]	@ (80037c8 <ModbusMap+0x1f8>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	4a45      	ldr	r2, [pc, #276]	@ (80037cc <ModbusMap+0x1fc>)
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	b29a      	uxth	r2, r3
 80036be:	4b44      	ldr	r3, [pc, #272]	@ (80037d0 <ModbusMap+0x200>)
 80036c0:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 80036c2:	4b44      	ldr	r3, [pc, #272]	@ (80037d4 <ModbusMap+0x204>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	4a43      	ldr	r2, [pc, #268]	@ (80037d8 <ModbusMap+0x208>)
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	4b3f      	ldr	r3, [pc, #252]	@ (80037d0 <ModbusMap+0x200>)
 80036d4:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <ModbusMap+0x20c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	1c1a      	adds	r2, r3, #0
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	18d3      	adds	r3, r2, r3
 80036e0:	18db      	adds	r3, r3, r3
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	4b3a      	ldr	r3, [pc, #232]	@ (80037d0 <ModbusMap+0x200>)
 80036e6:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <ModbusMap+0x200>)
 80036ea:	22dc      	movs	r2, #220	@ 0xdc
 80036ec:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 80036ee:	4b3c      	ldr	r3, [pc, #240]	@ (80037e0 <ModbusMap+0x210>)
 80036f0:	79db      	ldrb	r3, [r3, #7]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b3b      	ldr	r3, [pc, #236]	@ (80037e4 <ModbusMap+0x214>)
 80036f6:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 80036f8:	4b39      	ldr	r3, [pc, #228]	@ (80037e0 <ModbusMap+0x210>)
 80036fa:	799b      	ldrb	r3, [r3, #6]
 80036fc:	001a      	movs	r2, r3
 80036fe:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <ModbusMap+0x214>)
 8003700:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <ModbusMap+0x210>)
 8003704:	791b      	ldrb	r3, [r3, #4]
 8003706:	001a      	movs	r2, r3
 8003708:	4b36      	ldr	r3, [pc, #216]	@ (80037e4 <ModbusMap+0x214>)
 800370a:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 800370c:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <ModbusMap+0x210>)
 800370e:	789a      	ldrb	r2, [r3, #2]
 8003710:	4b33      	ldr	r3, [pc, #204]	@ (80037e0 <ModbusMap+0x210>)
 8003712:	78db      	ldrb	r3, [r3, #3]
 8003714:	4313      	orrs	r3, r2
 8003716:	b2db      	uxtb	r3, r3
 8003718:	001a      	movs	r2, r3
 800371a:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <ModbusMap+0x214>)
 800371c:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 800371e:	4b31      	ldr	r3, [pc, #196]	@ (80037e4 <ModbusMap+0x214>)
 8003720:	2200      	movs	r2, #0
 8003722:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 8003724:	4b2e      	ldr	r3, [pc, #184]	@ (80037e0 <ModbusMap+0x210>)
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	4b2d      	ldr	r3, [pc, #180]	@ (80037e0 <ModbusMap+0x210>)
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	4313      	orrs	r3, r2
 800372e:	b2db      	uxtb	r3, r3
 8003730:	001a      	movs	r2, r3
 8003732:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <ModbusMap+0x214>)
 8003734:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 8003736:	4b2c      	ldr	r3, [pc, #176]	@ (80037e8 <ModbusMap+0x218>)
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	001a      	movs	r2, r3
 800373c:	4b29      	ldr	r3, [pc, #164]	@ (80037e4 <ModbusMap+0x214>)
 800373e:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8003740:	4b29      	ldr	r3, [pc, #164]	@ (80037e8 <ModbusMap+0x218>)
 8003742:	799b      	ldrb	r3, [r3, #6]
 8003744:	001a      	movs	r2, r3
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <ModbusMap+0x214>)
 8003748:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 800374a:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <ModbusMap+0x210>)
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <ModbusMap+0x210>)
 8003750:	785b      	ldrb	r3, [r3, #1]
 8003752:	4313      	orrs	r3, r2
 8003754:	b2db      	uxtb	r3, r3
 8003756:	001a      	movs	r2, r3
 8003758:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <ModbusMap+0x214>)
 800375a:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 800375c:	4b23      	ldr	r3, [pc, #140]	@ (80037ec <ModbusMap+0x21c>)
 800375e:	4a24      	ldr	r2, [pc, #144]	@ (80037f0 <ModbusMap+0x220>)
 8003760:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 8003762:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <ModbusMap+0x21c>)
 8003764:	4a23      	ldr	r2, [pc, #140]	@ (80037f4 <ModbusMap+0x224>)
 8003766:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8003768:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <ModbusMap+0x21c>)
 800376a:	22ff      	movs	r2, #255	@ 0xff
 800376c:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 800376e:	f7ff fdc7 	bl	8003300 <MacStringtoHex>


    //DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
	DatosFirmware[0] = reePlantilla[eeversion1]*256 + reePlantilla[eeversion2];
 8003772:	4b21      	ldr	r3, [pc, #132]	@ (80037f8 <ModbusMap+0x228>)
 8003774:	227b      	movs	r2, #123	@ 0x7b
 8003776:	5c9b      	ldrb	r3, [r3, r2]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	b29b      	uxth	r3, r3
 800377c:	4a1e      	ldr	r2, [pc, #120]	@ (80037f8 <ModbusMap+0x228>)
 800377e:	217c      	movs	r1, #124	@ 0x7c
 8003780:	5c52      	ldrb	r2, [r2, r1]
 8003782:	189b      	adds	r3, r3, r2
 8003784:	b29a      	uxth	r2, r3
 8003786:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <ModbusMap+0x22c>)
 8003788:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 800378a:	f001 f973 	bl	8004a74 <ModbusSlavePool>
 800378e:	0002      	movs	r2, r0
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 8003794:	1dfb      	adds	r3, r7, #7
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <ModbusMap+0x1d0>
 800379c:	f000 fe7d 	bl	800449a <ModbusMap+0xeca>
	    asm ("nop");
 80037a0:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 80037a2:	4b17      	ldr	r3, [pc, #92]	@ (8003800 <ModbusMap+0x230>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d02c      	beq.n	8003804 <ModbusMap+0x234>
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d100      	bne.n	80037b0 <ModbusMap+0x1e0>
 80037ae:	e185      	b.n	8003abc <ModbusMap+0x4ec>
 80037b0:	f000 fe36 	bl	8004420 <ModbusMap+0xe50>
 80037b4:	20000b74 	.word	0x20000b74
 80037b8:	20000c38 	.word	0x20000c38
 80037bc:	20000050 	.word	0x20000050
 80037c0:	20000ba0 	.word	0x20000ba0
 80037c4:	20000bdc 	.word	0x20000bdc
 80037c8:	20000bac 	.word	0x20000bac
 80037cc:	20000bad 	.word	0x20000bad
 80037d0:	2000006c 	.word	0x2000006c
 80037d4:	20000bae 	.word	0x20000bae
 80037d8:	20000baf 	.word	0x20000baf
 80037dc:	20000bca 	.word	0x20000bca
 80037e0:	20000b84 	.word	0x20000b84
 80037e4:	20000074 	.word	0x20000074
 80037e8:	20000b7c 	.word	0x20000b7c
 80037ec:	20000088 	.word	0x20000088
 80037f0:	ffffb4a2 	.word	0xffffb4a2
 80037f4:	ffffeb4f 	.word	0xffffeb4f
 80037f8:	20000c88 	.word	0x20000c88
 80037fc:	20000090 	.word	0x20000090
 8003800:	200003cc 	.word	0x200003cc
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 8003804:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 8003806:	4bdf      	ldr	r3, [pc, #892]	@ (8003b84 <ModbusMap+0x5b4>)
 8003808:	2200      	movs	r2, #0
 800380a:	801a      	strh	r2, [r3, #0]
					//if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
					if(reePlantilla[eeescala] == 32)
 800380c:	4bde      	ldr	r3, [pc, #888]	@ (8003b88 <ModbusMap+0x5b8>)
 800380e:	2252      	movs	r2, #82	@ 0x52
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	2b20      	cmp	r3, #32
 8003814:	d102      	bne.n	800381c <ModbusMap+0x24c>
					PNU_0x3002 = 1;
 8003816:	4bdb      	ldr	r3, [pc, #876]	@ (8003b84 <ModbusMap+0x5b4>)
 8003818:	2201      	movs	r2, #1
 800381a:	801a      	strh	r2, [r3, #0]

					//PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
					PNU_0x3004 = findLastValue((uint32_t) &eePlantilla[eespdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eespdiur_L]);
 800381c:	4bdb      	ldr	r3, [pc, #876]	@ (8003b8c <ModbusMap+0x5bc>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7ff fc18 	bl	8003054 <findLastValue>
 8003824:	0003      	movs	r3, r0
 8003826:	b29b      	uxth	r3, r3
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	b29c      	uxth	r4, r3
 800382c:	4bd8      	ldr	r3, [pc, #864]	@ (8003b90 <ModbusMap+0x5c0>)
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff fc10 	bl	8003054 <findLastValue>
 8003834:	0003      	movs	r3, r0
 8003836:	b29b      	uxth	r3, r3
 8003838:	18e3      	adds	r3, r4, r3
 800383a:	b29a      	uxth	r2, r3
 800383c:	4bd5      	ldr	r3, [pc, #852]	@ (8003b94 <ModbusMap+0x5c4>)
 800383e:	801a      	strh	r2, [r3, #0]

					//PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
					PNU_0x3006 = reePlantilla[eedifdiur_H] * 256 + reePlantilla[eedifdiur_L];
 8003840:	4bd1      	ldr	r3, [pc, #836]	@ (8003b88 <ModbusMap+0x5b8>)
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	b29b      	uxth	r3, r3
 8003848:	4acf      	ldr	r2, [pc, #828]	@ (8003b88 <ModbusMap+0x5b8>)
 800384a:	7912      	ldrb	r2, [r2, #4]
 800384c:	189b      	adds	r3, r3, r2
 800384e:	b29a      	uxth	r2, r3
 8003850:	4bd1      	ldr	r3, [pc, #836]	@ (8003b98 <ModbusMap+0x5c8>)
 8003852:	801a      	strh	r2, [r3, #0]
					//PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
					PNU_0x301E  = reePlantilla[eeAddModBus];
 8003854:	4bcc      	ldr	r3, [pc, #816]	@ (8003b88 <ModbusMap+0x5b8>)
 8003856:	2272      	movs	r2, #114	@ 0x72
 8003858:	5c9b      	ldrb	r3, [r3, r2]
 800385a:	001a      	movs	r2, r3
 800385c:	4bcf      	ldr	r3, [pc, #828]	@ (8003b9c <ModbusMap+0x5cc>)
 800385e:	801a      	strh	r2, [r3, #0]
				  //PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
					PNU_0x3104 = reePlantilla[eetimepa];
 8003860:	4bc9      	ldr	r3, [pc, #804]	@ (8003b88 <ModbusMap+0x5b8>)
 8003862:	2249      	movs	r2, #73	@ 0x49
 8003864:	5c9b      	ldrb	r3, [r3, r2]
 8003866:	001a      	movs	r2, r3
 8003868:	4bcd      	ldr	r3, [pc, #820]	@ (8003ba0 <ModbusMap+0x5d0>)
 800386a:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 800386c:	4acd      	ldr	r2, [pc, #820]	@ (8003ba4 <ModbusMap+0x5d4>)
 800386e:	230e      	movs	r3, #14
 8003870:	33ff      	adds	r3, #255	@ 0xff
 8003872:	0019      	movs	r1, r3
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff fe37 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d001      	beq.n	8003886 <ModbusMap+0x2b6>
 8003882:	f000 fdd1 	bl	8004428 <ModbusMap+0xe58>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 8003886:	4ac8      	ldr	r2, [pc, #800]	@ (8003ba8 <ModbusMap+0x5d8>)
 8003888:	49c8      	ldr	r1, [pc, #800]	@ (8003bac <ModbusMap+0x5dc>)
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff fe2c 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d001      	beq.n	800389c <ModbusMap+0x2cc>
 8003898:	f000 fdc8 	bl	800442c <ModbusMap+0xe5c>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 800389c:	4ac4      	ldr	r2, [pc, #784]	@ (8003bb0 <ModbusMap+0x5e0>)
 800389e:	2382      	movs	r3, #130	@ 0x82
 80038a0:	0099      	lsls	r1, r3, #2
 80038a2:	2380      	movs	r3, #128	@ 0x80
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7ff fe20 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d001      	beq.n	80038b4 <ModbusMap+0x2e4>
 80038b0:	f000 fdbe 	bl	8004430 <ModbusMap+0xe60>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 80038b4:	4abf      	ldr	r2, [pc, #764]	@ (8003bb4 <ModbusMap+0x5e4>)
 80038b6:	49c0      	ldr	r1, [pc, #768]	@ (8003bb8 <ModbusMap+0x5e8>)
 80038b8:	23c0      	movs	r3, #192	@ 0xc0
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff fe15 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <ModbusMap+0x2fa>
 80038c6:	f000 fdb5 	bl	8004434 <ModbusMap+0xe64>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 80038ca:	4abc      	ldr	r2, [pc, #752]	@ (8003bbc <ModbusMap+0x5ec>)
 80038cc:	23c4      	movs	r3, #196	@ 0xc4
 80038ce:	0099      	lsls	r1, r3, #2
 80038d0:	23c4      	movs	r3, #196	@ 0xc4
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff fe09 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <ModbusMap+0x312>
 80038de:	f000 fdab 	bl	8004438 <ModbusMap+0xe68>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 80038e2:	4bb7      	ldr	r3, [pc, #732]	@ (8003bc0 <ModbusMap+0x5f0>)
 80038e4:	001a      	movs	r2, r3
 80038e6:	2110      	movs	r1, #16
 80038e8:	2010      	movs	r0, #16
 80038ea:	f7ff fdff 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d001      	beq.n	80038f6 <ModbusMap+0x326>
 80038f2:	f000 fda3 	bl	800443c <ModbusMap+0xe6c>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 80038f6:	4ab3      	ldr	r2, [pc, #716]	@ (8003bc4 <ModbusMap+0x5f4>)
 80038f8:	23c0      	movs	r3, #192	@ 0xc0
 80038fa:	0199      	lsls	r1, r3, #6
 80038fc:	23c0      	movs	r3, #192	@ 0xc0
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff fdf3 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003906:	1e03      	subs	r3, r0, #0
 8003908:	d001      	beq.n	800390e <ModbusMap+0x33e>
 800390a:	f000 fd99 	bl	8004440 <ModbusMap+0xe70>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 800390e:	4b9d      	ldr	r3, [pc, #628]	@ (8003b84 <ModbusMap+0x5b4>)
 8003910:	49ad      	ldr	r1, [pc, #692]	@ (8003bc8 <ModbusMap+0x5f8>)
 8003912:	48ad      	ldr	r0, [pc, #692]	@ (8003bc8 <ModbusMap+0x5f8>)
 8003914:	001a      	movs	r2, r3
 8003916:	f7ff fde9 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d001      	beq.n	8003922 <ModbusMap+0x352>
 800391e:	f000 fd91 	bl	8004444 <ModbusMap+0xe74>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8003922:	4b9c      	ldr	r3, [pc, #624]	@ (8003b94 <ModbusMap+0x5c4>)
 8003924:	49a9      	ldr	r1, [pc, #676]	@ (8003bcc <ModbusMap+0x5fc>)
 8003926:	48a9      	ldr	r0, [pc, #676]	@ (8003bcc <ModbusMap+0x5fc>)
 8003928:	001a      	movs	r2, r3
 800392a:	f7ff fddf 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d001      	beq.n	8003936 <ModbusMap+0x366>
 8003932:	f000 fd89 	bl	8004448 <ModbusMap+0xe78>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 8003936:	4b98      	ldr	r3, [pc, #608]	@ (8003b98 <ModbusMap+0x5c8>)
 8003938:	49a5      	ldr	r1, [pc, #660]	@ (8003bd0 <ModbusMap+0x600>)
 800393a:	48a5      	ldr	r0, [pc, #660]	@ (8003bd0 <ModbusMap+0x600>)
 800393c:	001a      	movs	r2, r3
 800393e:	f7ff fdd5 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d001      	beq.n	800394a <ModbusMap+0x37a>
 8003946:	f000 fd81 	bl	800444c <ModbusMap+0xe7c>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 800394a:	4ba2      	ldr	r3, [pc, #648]	@ (8003bd4 <ModbusMap+0x604>)
 800394c:	49a2      	ldr	r1, [pc, #648]	@ (8003bd8 <ModbusMap+0x608>)
 800394e:	48a2      	ldr	r0, [pc, #648]	@ (8003bd8 <ModbusMap+0x608>)
 8003950:	001a      	movs	r2, r3
 8003952:	f7ff fdcb 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003956:	1e03      	subs	r3, r0, #0
 8003958:	d001      	beq.n	800395e <ModbusMap+0x38e>
 800395a:	f000 fd79 	bl	8004450 <ModbusMap+0xe80>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 800395e:	4b9f      	ldr	r3, [pc, #636]	@ (8003bdc <ModbusMap+0x60c>)
 8003960:	499f      	ldr	r1, [pc, #636]	@ (8003be0 <ModbusMap+0x610>)
 8003962:	489f      	ldr	r0, [pc, #636]	@ (8003be0 <ModbusMap+0x610>)
 8003964:	001a      	movs	r2, r3
 8003966:	f7ff fdc1 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d001      	beq.n	8003972 <ModbusMap+0x3a2>
 800396e:	f000 fd71 	bl	8004454 <ModbusMap+0xe84>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 8003972:	4b9c      	ldr	r3, [pc, #624]	@ (8003be4 <ModbusMap+0x614>)
 8003974:	499c      	ldr	r1, [pc, #624]	@ (8003be8 <ModbusMap+0x618>)
 8003976:	489c      	ldr	r0, [pc, #624]	@ (8003be8 <ModbusMap+0x618>)
 8003978:	001a      	movs	r2, r3
 800397a:	f7ff fdb7 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 800397e:	1e03      	subs	r3, r0, #0
 8003980:	d001      	beq.n	8003986 <ModbusMap+0x3b6>
 8003982:	f000 fd69 	bl	8004458 <ModbusMap+0xe88>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 8003986:	4b99      	ldr	r3, [pc, #612]	@ (8003bec <ModbusMap+0x61c>)
 8003988:	4999      	ldr	r1, [pc, #612]	@ (8003bf0 <ModbusMap+0x620>)
 800398a:	4899      	ldr	r0, [pc, #612]	@ (8003bf0 <ModbusMap+0x620>)
 800398c:	001a      	movs	r2, r3
 800398e:	f7ff fdad 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003992:	1e03      	subs	r3, r0, #0
 8003994:	d001      	beq.n	800399a <ModbusMap+0x3ca>
 8003996:	f000 fd61 	bl	800445c <ModbusMap+0xe8c>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 800399a:	4b96      	ldr	r3, [pc, #600]	@ (8003bf4 <ModbusMap+0x624>)
 800399c:	4996      	ldr	r1, [pc, #600]	@ (8003bf8 <ModbusMap+0x628>)
 800399e:	4896      	ldr	r0, [pc, #600]	@ (8003bf8 <ModbusMap+0x628>)
 80039a0:	001a      	movs	r2, r3
 80039a2:	f7ff fda3 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d001      	beq.n	80039ae <ModbusMap+0x3de>
 80039aa:	f000 fd59 	bl	8004460 <ModbusMap+0xe90>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 80039ae:	4b93      	ldr	r3, [pc, #588]	@ (8003bfc <ModbusMap+0x62c>)
 80039b0:	4993      	ldr	r1, [pc, #588]	@ (8003c00 <ModbusMap+0x630>)
 80039b2:	4893      	ldr	r0, [pc, #588]	@ (8003c00 <ModbusMap+0x630>)
 80039b4:	001a      	movs	r2, r3
 80039b6:	f7ff fd99 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80039ba:	1e03      	subs	r3, r0, #0
 80039bc:	d001      	beq.n	80039c2 <ModbusMap+0x3f2>
 80039be:	f000 fd51 	bl	8004464 <ModbusMap+0xe94>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 80039c2:	4b90      	ldr	r3, [pc, #576]	@ (8003c04 <ModbusMap+0x634>)
 80039c4:	4990      	ldr	r1, [pc, #576]	@ (8003c08 <ModbusMap+0x638>)
 80039c6:	4890      	ldr	r0, [pc, #576]	@ (8003c08 <ModbusMap+0x638>)
 80039c8:	001a      	movs	r2, r3
 80039ca:	f7ff fd8f 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d001      	beq.n	80039d6 <ModbusMap+0x406>
 80039d2:	f000 fd49 	bl	8004468 <ModbusMap+0xe98>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 80039d6:	4b8d      	ldr	r3, [pc, #564]	@ (8003c0c <ModbusMap+0x63c>)
 80039d8:	498d      	ldr	r1, [pc, #564]	@ (8003c10 <ModbusMap+0x640>)
 80039da:	488d      	ldr	r0, [pc, #564]	@ (8003c10 <ModbusMap+0x640>)
 80039dc:	001a      	movs	r2, r3
 80039de:	f7ff fd85 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d001      	beq.n	80039ea <ModbusMap+0x41a>
 80039e6:	f000 fd41 	bl	800446c <ModbusMap+0xe9c>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 80039ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003c14 <ModbusMap+0x644>)
 80039ec:	498a      	ldr	r1, [pc, #552]	@ (8003c18 <ModbusMap+0x648>)
 80039ee:	488a      	ldr	r0, [pc, #552]	@ (8003c18 <ModbusMap+0x648>)
 80039f0:	001a      	movs	r2, r3
 80039f2:	f7ff fd7b 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <ModbusMap+0x42e>
 80039fa:	f000 fd39 	bl	8004470 <ModbusMap+0xea0>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 80039fe:	4b87      	ldr	r3, [pc, #540]	@ (8003c1c <ModbusMap+0x64c>)
 8003a00:	4987      	ldr	r1, [pc, #540]	@ (8003c20 <ModbusMap+0x650>)
 8003a02:	4887      	ldr	r0, [pc, #540]	@ (8003c20 <ModbusMap+0x650>)
 8003a04:	001a      	movs	r2, r3
 8003a06:	f7ff fd71 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d001      	beq.n	8003a12 <ModbusMap+0x442>
 8003a0e:	f000 fd31 	bl	8004474 <ModbusMap+0xea4>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8003a12:	4b84      	ldr	r3, [pc, #528]	@ (8003c24 <ModbusMap+0x654>)
 8003a14:	4984      	ldr	r1, [pc, #528]	@ (8003c28 <ModbusMap+0x658>)
 8003a16:	4884      	ldr	r0, [pc, #528]	@ (8003c28 <ModbusMap+0x658>)
 8003a18:	001a      	movs	r2, r3
 8003a1a:	f7ff fd67 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d001      	beq.n	8003a26 <ModbusMap+0x456>
 8003a22:	f000 fd29 	bl	8004478 <ModbusMap+0xea8>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 8003a26:	4b5d      	ldr	r3, [pc, #372]	@ (8003b9c <ModbusMap+0x5cc>)
 8003a28:	4980      	ldr	r1, [pc, #512]	@ (8003c2c <ModbusMap+0x65c>)
 8003a2a:	4880      	ldr	r0, [pc, #512]	@ (8003c2c <ModbusMap+0x65c>)
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	f7ff fd5d 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d001      	beq.n	8003a3a <ModbusMap+0x46a>
 8003a36:	f000 fd21 	bl	800447c <ModbusMap+0xeac>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 8003a3a:	4b59      	ldr	r3, [pc, #356]	@ (8003ba0 <ModbusMap+0x5d0>)
 8003a3c:	497c      	ldr	r1, [pc, #496]	@ (8003c30 <ModbusMap+0x660>)
 8003a3e:	487c      	ldr	r0, [pc, #496]	@ (8003c30 <ModbusMap+0x660>)
 8003a40:	001a      	movs	r2, r3
 8003a42:	f7ff fd53 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d001      	beq.n	8003a4e <ModbusMap+0x47e>
 8003a4a:	f000 fd19 	bl	8004480 <ModbusMap+0xeb0>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 8003a4e:	4b79      	ldr	r3, [pc, #484]	@ (8003c34 <ModbusMap+0x664>)
 8003a50:	4979      	ldr	r1, [pc, #484]	@ (8003c38 <ModbusMap+0x668>)
 8003a52:	4879      	ldr	r0, [pc, #484]	@ (8003c38 <ModbusMap+0x668>)
 8003a54:	001a      	movs	r2, r3
 8003a56:	f7ff fd49 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d001      	beq.n	8003a62 <ModbusMap+0x492>
 8003a5e:	f000 fd11 	bl	8004484 <ModbusMap+0xeb4>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 8003a62:	4b76      	ldr	r3, [pc, #472]	@ (8003c3c <ModbusMap+0x66c>)
 8003a64:	4976      	ldr	r1, [pc, #472]	@ (8003c40 <ModbusMap+0x670>)
 8003a66:	4876      	ldr	r0, [pc, #472]	@ (8003c40 <ModbusMap+0x670>)
 8003a68:	001a      	movs	r2, r3
 8003a6a:	f7ff fd3f 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d001      	beq.n	8003a76 <ModbusMap+0x4a6>
 8003a72:	f000 fd09 	bl	8004488 <ModbusMap+0xeb8>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 8003a76:	4b73      	ldr	r3, [pc, #460]	@ (8003c44 <ModbusMap+0x674>)
 8003a78:	4973      	ldr	r1, [pc, #460]	@ (8003c48 <ModbusMap+0x678>)
 8003a7a:	4873      	ldr	r0, [pc, #460]	@ (8003c48 <ModbusMap+0x678>)
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	f7ff fd35 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a82:	1e03      	subs	r3, r0, #0
 8003a84:	d001      	beq.n	8003a8a <ModbusMap+0x4ba>
 8003a86:	f000 fd01 	bl	800448c <ModbusMap+0xebc>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 8003a8a:	4b70      	ldr	r3, [pc, #448]	@ (8003c4c <ModbusMap+0x67c>)
 8003a8c:	4970      	ldr	r1, [pc, #448]	@ (8003c50 <ModbusMap+0x680>)
 8003a8e:	4870      	ldr	r0, [pc, #448]	@ (8003c50 <ModbusMap+0x680>)
 8003a90:	001a      	movs	r2, r3
 8003a92:	f7ff fd2b 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003a96:	1e03      	subs	r3, r0, #0
 8003a98:	d001      	beq.n	8003a9e <ModbusMap+0x4ce>
 8003a9a:	f000 fcf9 	bl	8004490 <ModbusMap+0xec0>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8003a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c54 <ModbusMap+0x684>)
 8003aa0:	496d      	ldr	r1, [pc, #436]	@ (8003c58 <ModbusMap+0x688>)
 8003aa2:	486d      	ldr	r0, [pc, #436]	@ (8003c58 <ModbusMap+0x688>)
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	f7ff fd21 	bl	80034ec <ReadHoldingRegistersFunctionRev>
 8003aaa:	1e03      	subs	r3, r0, #0
 8003aac:	d001      	beq.n	8003ab2 <ModbusMap+0x4e2>
 8003aae:	f000 fcf1 	bl	8004494 <ModbusMap+0xec4>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	f000 ff2a 	bl	800490c <ModbusSlaveExceptionTransaction>
				}
				break;
 8003ab8:	f000 fcef 	bl	800449a <ModbusMap+0xeca>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 8003abc:	4b67      	ldr	r3, [pc, #412]	@ (8003c5c <ModbusMap+0x68c>)
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	23c0      	movs	r3, #192	@ 0xc0
 8003ac2:	019b      	lsls	r3, r3, #6
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d310      	bcc.n	8003aea <ModbusMap+0x51a>
 8003ac8:	4b64      	ldr	r3, [pc, #400]	@ (8003c5c <ModbusMap+0x68c>)
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	23c0      	movs	r3, #192	@ 0xc0
 8003ace:	019b      	lsls	r3, r3, #6
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d80a      	bhi.n	8003aea <ModbusMap+0x51a>
					PNU_0x3000 = lowByte(_u16WriteVal);
 8003ad4:	4b62      	ldr	r3, [pc, #392]	@ (8003c60 <ModbusMap+0x690>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	001a      	movs	r2, r3
 8003adc:	4b39      	ldr	r3, [pc, #228]	@ (8003bc4 <ModbusMap+0x5f4>)
 8003ade:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003ae0:	4b60      	ldr	r3, [pc, #384]	@ (8003c64 <ModbusMap+0x694>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 fde7 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 8003aea:	4b5c      	ldr	r3, [pc, #368]	@ (8003c5c <ModbusMap+0x68c>)
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	4a5e      	ldr	r2, [pc, #376]	@ (8003c68 <ModbusMap+0x698>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d800      	bhi.n	8003af6 <ModbusMap+0x526>
 8003af4:	e0c4      	b.n	8003c80 <ModbusMap+0x6b0>
 8003af6:	4b59      	ldr	r3, [pc, #356]	@ (8003c5c <ModbusMap+0x68c>)
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	4a33      	ldr	r2, [pc, #204]	@ (8003bc8 <ModbusMap+0x5f8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d900      	bls.n	8003b02 <ModbusMap+0x532>
 8003b00:	e0be      	b.n	8003c80 <ModbusMap+0x6b0>
					PNU_0x3002 = lowByte(_u16WriteVal);
 8003b02:	4b57      	ldr	r3, [pc, #348]	@ (8003c60 <ModbusMap+0x690>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	001a      	movs	r2, r3
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b84 <ModbusMap+0x5b4>)
 8003b0c:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b84 <ModbusMap+0x5b4>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d118      	bne.n	8003b48 <ModbusMap+0x578>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala] == 32){
 8003b16:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <ModbusMap+0x5b8>)
 8003b18:	2252      	movs	r2, #82	@ 0x52
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d101      	bne.n	8003b24 <ModbusMap+0x554>
							asm ("nop");
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	e011      	b.n	8003b48 <ModbusMap+0x578>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 8003b24:	4b51      	ldr	r3, [pc, #324]	@ (8003c6c <ModbusMap+0x69c>)
 8003b26:	2220      	movs	r2, #32
 8003b28:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 8003b2a:	4b50      	ldr	r3, [pc, #320]	@ (8003c6c <ModbusMap+0x69c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	001a      	movs	r2, r3
 8003b30:	4b4f      	ldr	r3, [pc, #316]	@ (8003c70 <ModbusMap+0x6a0>)
 8003b32:	0019      	movs	r1, r3
 8003b34:	0010      	movs	r0, r2
 8003b36:	f003 fbdb 	bl	80072f0 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c6c <ModbusMap+0x69c>)
 8003b3c:	7819      	ldrb	r1, [r3, #0]
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <ModbusMap+0x5b8>)
 8003b40:	2252      	movs	r2, #82	@ 0x52
 8003b42:	5499      	strb	r1, [r3, r2]
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 8003b44:	46c0      	nop			@ (mov r8, r8)
 8003b46:	e7fd      	b.n	8003b44 <ModbusMap+0x574>
						}
					}
					if (PNU_0x3002 == 0){
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <ModbusMap+0x5b4>)
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d000      	beq.n	8003b52 <ModbusMap+0x582>
 8003b50:	e091      	b.n	8003c76 <ModbusMap+0x6a6>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(reePlantilla[eeescala]== 32){
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <ModbusMap+0x5b8>)
 8003b54:	2252      	movs	r2, #82	@ 0x52
 8003b56:	5c9b      	ldrb	r3, [r3, r2]
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d000      	beq.n	8003b5e <ModbusMap+0x58e>
 8003b5c:	e08a      	b.n	8003c74 <ModbusMap+0x6a4>
							waux = 0;//mov			waux,#0;	/ Carga
 8003b5e:	4b43      	ldr	r3, [pc, #268]	@ (8003c6c <ModbusMap+0x69c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 8003b64:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <ModbusMap+0x69c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	001a      	movs	r2, r3
 8003b6a:	4b41      	ldr	r3, [pc, #260]	@ (8003c70 <ModbusMap+0x6a0>)
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	0010      	movs	r0, r2
 8003b70:	f003 fbbe 	bl	80072f0 <wreeprom>
							reePlantilla[eeescala] = waux;
 8003b74:	4b3d      	ldr	r3, [pc, #244]	@ (8003c6c <ModbusMap+0x69c>)
 8003b76:	7819      	ldrb	r1, [r3, #0]
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <ModbusMap+0x5b8>)
 8003b7a:	2252      	movs	r2, #82	@ 0x52
 8003b7c:	5499      	strb	r1, [r3, r2]
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	e7fd      	b.n	8003b7e <ModbusMap+0x5ae>
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	20000b04 	.word	0x20000b04
 8003b88:	20000c88 	.word	0x20000c88
 8003b8c:	0803f001 	.word	0x0803f001
 8003b90:	0803f002 	.word	0x0803f002
 8003b94:	20000094 	.word	0x20000094
 8003b98:	20000096 	.word	0x20000096
 8003b9c:	200000aa 	.word	0x200000aa
 8003ba0:	200000ac 	.word	0x200000ac
 8003ba4:	20000050 	.word	0x20000050
 8003ba8:	2000006c 	.word	0x2000006c
 8003bac:	00002003 	.word	0x00002003
 8003bb0:	20000074 	.word	0x20000074
 8003bb4:	20000088 	.word	0x20000088
 8003bb8:	00000302 	.word	0x00000302
 8003bbc:	20000090 	.word	0x20000090
 8003bc0:	20000b02 	.word	0x20000b02
 8003bc4:	20000092 	.word	0x20000092
 8003bc8:	00003002 	.word	0x00003002
 8003bcc:	00003004 	.word	0x00003004
 8003bd0:	00003006 	.word	0x00003006
 8003bd4:	20000098 	.word	0x20000098
 8003bd8:	00003008 	.word	0x00003008
 8003bdc:	20000b06 	.word	0x20000b06
 8003be0:	0000300a 	.word	0x0000300a
 8003be4:	2000009a 	.word	0x2000009a
 8003be8:	0000300c 	.word	0x0000300c
 8003bec:	20000b08 	.word	0x20000b08
 8003bf0:	0000300e 	.word	0x0000300e
 8003bf4:	2000009c 	.word	0x2000009c
 8003bf8:	00003010 	.word	0x00003010
 8003bfc:	2000009e 	.word	0x2000009e
 8003c00:	00003012 	.word	0x00003012
 8003c04:	200000a0 	.word	0x200000a0
 8003c08:	00003014 	.word	0x00003014
 8003c0c:	200000a2 	.word	0x200000a2
 8003c10:	00003016 	.word	0x00003016
 8003c14:	200000a4 	.word	0x200000a4
 8003c18:	00003018 	.word	0x00003018
 8003c1c:	200000a6 	.word	0x200000a6
 8003c20:	0000301a 	.word	0x0000301a
 8003c24:	200000a8 	.word	0x200000a8
 8003c28:	0000301c 	.word	0x0000301c
 8003c2c:	0000301e 	.word	0x0000301e
 8003c30:	00003104 	.word	0x00003104
 8003c34:	200000ae 	.word	0x200000ae
 8003c38:	00003106 	.word	0x00003106
 8003c3c:	200000b0 	.word	0x200000b0
 8003c40:	00003108 	.word	0x00003108
 8003c44:	200000b2 	.word	0x200000b2
 8003c48:	0000310a 	.word	0x0000310a
 8003c4c:	200000b4 	.word	0x200000b4
 8003c50:	0000310c 	.word	0x0000310c
 8003c54:	200000b6 	.word	0x200000b6
 8003c58:	0000310e 	.word	0x0000310e
 8003c5c:	20000382 	.word	0x20000382
 8003c60:	20000384 	.word	0x20000384
 8003c64:	200003cc 	.word	0x200003cc
 8003c68:	00003001 	.word	0x00003001
 8003c6c:	20000b52 	.word	0x20000b52
 8003c70:	0803f052 	.word	0x0803f052
						}
						else{
							asm ("nop");
 8003c74:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c76:	4bbd      	ldr	r3, [pc, #756]	@ (8003f6c <ModbusMap+0x99c>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 fd1c 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 8003c80:	4bbb      	ldr	r3, [pc, #748]	@ (8003f70 <ModbusMap+0x9a0>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	4abb      	ldr	r2, [pc, #748]	@ (8003f74 <ModbusMap+0x9a4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d92e      	bls.n	8003ce8 <ModbusMap+0x718>
 8003c8a:	4bb9      	ldr	r3, [pc, #740]	@ (8003f70 <ModbusMap+0x9a0>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	4aba      	ldr	r2, [pc, #744]	@ (8003f78 <ModbusMap+0x9a8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d829      	bhi.n	8003ce8 <ModbusMap+0x718>
					PNU_0x3004 = _u16WriteVal;
 8003c94:	4bb9      	ldr	r3, [pc, #740]	@ (8003f7c <ModbusMap+0x9ac>)
 8003c96:	881a      	ldrh	r2, [r3, #0]
 8003c98:	4bb9      	ldr	r3, [pc, #740]	@ (8003f80 <ModbusMap+0x9b0>)
 8003c9a:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8003c9c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f80 <ModbusMap+0x9b0>)
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4bb7      	ldr	r3, [pc, #732]	@ (8003f84 <ModbusMap+0x9b4>)
 8003ca8:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 8003caa:	4bb5      	ldr	r3, [pc, #724]	@ (8003f80 <ModbusMap+0x9b0>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	4bb5      	ldr	r3, [pc, #724]	@ (8003f88 <ModbusMap+0x9b8>)
 8003cb2:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 8003cb4:	4bb3      	ldr	r3, [pc, #716]	@ (8003f84 <ModbusMap+0x9b4>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	001a      	movs	r2, r3
 8003cba:	4bb4      	ldr	r3, [pc, #720]	@ (8003f8c <ModbusMap+0x9bc>)
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	f003 fb16 	bl	80072f0 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 8003cc4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f88 <ModbusMap+0x9b8>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	001a      	movs	r2, r3
 8003cca:	4bb1      	ldr	r3, [pc, #708]	@ (8003f90 <ModbusMap+0x9c0>)
 8003ccc:	0019      	movs	r1, r3
 8003cce:	0010      	movs	r0, r2
 8003cd0:	f003 fb0e 	bl	80072f0 <wreeprom>

					reePlantilla[eespdiur_H] = waux;
 8003cd4:	4bab      	ldr	r3, [pc, #684]	@ (8003f84 <ModbusMap+0x9b4>)
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	4bae      	ldr	r3, [pc, #696]	@ (8003f94 <ModbusMap+0x9c4>)
 8003cda:	705a      	strb	r2, [r3, #1]
					reePlantilla[eespdiur_L] = wreg;
 8003cdc:	4baa      	ldr	r3, [pc, #680]	@ (8003f88 <ModbusMap+0x9b8>)
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	4bac      	ldr	r3, [pc, #688]	@ (8003f94 <ModbusMap+0x9c4>)
 8003ce2:	709a      	strb	r2, [r3, #2]

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 8003ce4:	46c0      	nop			@ (mov r8, r8)
 8003ce6:	e7fd      	b.n	8003ce4 <ModbusMap+0x714>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 8003ce8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f70 <ModbusMap+0x9a0>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	4aaa      	ldr	r2, [pc, #680]	@ (8003f98 <ModbusMap+0x9c8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d92e      	bls.n	8003d50 <ModbusMap+0x780>
 8003cf2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f70 <ModbusMap+0x9a0>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	4aa9      	ldr	r2, [pc, #676]	@ (8003f9c <ModbusMap+0x9cc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d829      	bhi.n	8003d50 <ModbusMap+0x780>
					PNU_0x3006 = _u16WriteVal;
 8003cfc:	4b9f      	ldr	r3, [pc, #636]	@ (8003f7c <ModbusMap+0x9ac>)
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	4ba7      	ldr	r3, [pc, #668]	@ (8003fa0 <ModbusMap+0x9d0>)
 8003d02:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 8003d04:	4ba6      	ldr	r3, [pc, #664]	@ (8003fa0 <ModbusMap+0x9d0>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b9d      	ldr	r3, [pc, #628]	@ (8003f84 <ModbusMap+0x9b4>)
 8003d10:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 8003d12:	4ba3      	ldr	r3, [pc, #652]	@ (8003fa0 <ModbusMap+0x9d0>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	4b9b      	ldr	r3, [pc, #620]	@ (8003f88 <ModbusMap+0x9b8>)
 8003d1a:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8003d1c:	4b99      	ldr	r3, [pc, #612]	@ (8003f84 <ModbusMap+0x9b4>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	001a      	movs	r2, r3
 8003d22:	4ba0      	ldr	r3, [pc, #640]	@ (8003fa4 <ModbusMap+0x9d4>)
 8003d24:	0019      	movs	r1, r3
 8003d26:	0010      	movs	r0, r2
 8003d28:	f003 fae2 	bl	80072f0 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 8003d2c:	4b96      	ldr	r3, [pc, #600]	@ (8003f88 <ModbusMap+0x9b8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	001a      	movs	r2, r3
 8003d32:	4b9d      	ldr	r3, [pc, #628]	@ (8003fa8 <ModbusMap+0x9d8>)
 8003d34:	0019      	movs	r1, r3
 8003d36:	0010      	movs	r0, r2
 8003d38:	f003 fada 	bl	80072f0 <wreeprom>

					reePlantilla[eedifdiur_H] = waux;
 8003d3c:	4b91      	ldr	r3, [pc, #580]	@ (8003f84 <ModbusMap+0x9b4>)
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	4b94      	ldr	r3, [pc, #592]	@ (8003f94 <ModbusMap+0x9c4>)
 8003d42:	70da      	strb	r2, [r3, #3]
					reePlantilla[eedifdiur_L] = wreg;
 8003d44:	4b90      	ldr	r3, [pc, #576]	@ (8003f88 <ModbusMap+0x9b8>)
 8003d46:	781a      	ldrb	r2, [r3, #0]
 8003d48:	4b92      	ldr	r3, [pc, #584]	@ (8003f94 <ModbusMap+0x9c4>)
 8003d4a:	711a      	strb	r2, [r3, #4]

			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 8003d4c:	46c0      	nop			@ (mov r8, r8)
 8003d4e:	e7fd      	b.n	8003d4c <ModbusMap+0x77c>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 8003d50:	4b87      	ldr	r3, [pc, #540]	@ (8003f70 <ModbusMap+0x9a0>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	4a95      	ldr	r2, [pc, #596]	@ (8003fac <ModbusMap+0x9dc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d90f      	bls.n	8003d7a <ModbusMap+0x7aa>
 8003d5a:	4b85      	ldr	r3, [pc, #532]	@ (8003f70 <ModbusMap+0x9a0>)
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	4a94      	ldr	r2, [pc, #592]	@ (8003fb0 <ModbusMap+0x9e0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d80a      	bhi.n	8003d7a <ModbusMap+0x7aa>
					PNU_0x3008 = lowByte(_u16WriteVal);
 8003d64:	4b85      	ldr	r3, [pc, #532]	@ (8003f7c <ModbusMap+0x9ac>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	4b91      	ldr	r3, [pc, #580]	@ (8003fb4 <ModbusMap+0x9e4>)
 8003d6e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d70:	4b7e      	ldr	r3, [pc, #504]	@ (8003f6c <ModbusMap+0x99c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 fc9f 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 8003d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f70 <ModbusMap+0x9a0>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	4a8e      	ldr	r2, [pc, #568]	@ (8003fb8 <ModbusMap+0x9e8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d90f      	bls.n	8003da4 <ModbusMap+0x7d4>
 8003d84:	4b7a      	ldr	r3, [pc, #488]	@ (8003f70 <ModbusMap+0x9a0>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	4a8c      	ldr	r2, [pc, #560]	@ (8003fbc <ModbusMap+0x9ec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d80a      	bhi.n	8003da4 <ModbusMap+0x7d4>
					PNU_0x300A = lowByte(_u16WriteVal);
 8003d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f7c <ModbusMap+0x9ac>)
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	001a      	movs	r2, r3
 8003d96:	4b8a      	ldr	r3, [pc, #552]	@ (8003fc0 <ModbusMap+0x9f0>)
 8003d98:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d9a:	4b74      	ldr	r3, [pc, #464]	@ (8003f6c <ModbusMap+0x99c>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 fc8a 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 8003da4:	4b72      	ldr	r3, [pc, #456]	@ (8003f70 <ModbusMap+0x9a0>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	4a86      	ldr	r2, [pc, #536]	@ (8003fc4 <ModbusMap+0x9f4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d90f      	bls.n	8003dce <ModbusMap+0x7fe>
 8003dae:	4b70      	ldr	r3, [pc, #448]	@ (8003f70 <ModbusMap+0x9a0>)
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	4a85      	ldr	r2, [pc, #532]	@ (8003fc8 <ModbusMap+0x9f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d80a      	bhi.n	8003dce <ModbusMap+0x7fe>
					PNU_0x300C = lowByte(_u16WriteVal);
 8003db8:	4b70      	ldr	r3, [pc, #448]	@ (8003f7c <ModbusMap+0x9ac>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	4b82      	ldr	r3, [pc, #520]	@ (8003fcc <ModbusMap+0x9fc>)
 8003dc2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003dc4:	4b69      	ldr	r3, [pc, #420]	@ (8003f6c <ModbusMap+0x99c>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 fc75 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 8003dce:	4b68      	ldr	r3, [pc, #416]	@ (8003f70 <ModbusMap+0x9a0>)
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd0 <ModbusMap+0xa00>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d90f      	bls.n	8003df8 <ModbusMap+0x828>
 8003dd8:	4b65      	ldr	r3, [pc, #404]	@ (8003f70 <ModbusMap+0x9a0>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	4a7d      	ldr	r2, [pc, #500]	@ (8003fd4 <ModbusMap+0xa04>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d80a      	bhi.n	8003df8 <ModbusMap+0x828>
					PNU_0x300E = lowByte(_u16WriteVal);
 8003de2:	4b66      	ldr	r3, [pc, #408]	@ (8003f7c <ModbusMap+0x9ac>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	001a      	movs	r2, r3
 8003dea:	4b7b      	ldr	r3, [pc, #492]	@ (8003fd8 <ModbusMap+0xa08>)
 8003dec:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003dee:	4b5f      	ldr	r3, [pc, #380]	@ (8003f6c <ModbusMap+0x99c>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 fc60 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 8003df8:	4b5d      	ldr	r3, [pc, #372]	@ (8003f70 <ModbusMap+0x9a0>)
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	4a77      	ldr	r2, [pc, #476]	@ (8003fdc <ModbusMap+0xa0c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d90f      	bls.n	8003e22 <ModbusMap+0x852>
 8003e02:	4b5b      	ldr	r3, [pc, #364]	@ (8003f70 <ModbusMap+0x9a0>)
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	4a76      	ldr	r2, [pc, #472]	@ (8003fe0 <ModbusMap+0xa10>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d80a      	bhi.n	8003e22 <ModbusMap+0x852>
					PNU_0x3010 = lowByte(_u16WriteVal);
 8003e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f7c <ModbusMap+0x9ac>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	001a      	movs	r2, r3
 8003e14:	4b73      	ldr	r3, [pc, #460]	@ (8003fe4 <ModbusMap+0xa14>)
 8003e16:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e18:	4b54      	ldr	r3, [pc, #336]	@ (8003f6c <ModbusMap+0x99c>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f000 fc4b 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 8003e22:	4b53      	ldr	r3, [pc, #332]	@ (8003f70 <ModbusMap+0x9a0>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	4a70      	ldr	r2, [pc, #448]	@ (8003fe8 <ModbusMap+0xa18>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d90f      	bls.n	8003e4c <ModbusMap+0x87c>
 8003e2c:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <ModbusMap+0x9a0>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	@ (8003fec <ModbusMap+0xa1c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d80a      	bhi.n	8003e4c <ModbusMap+0x87c>
					PNU_0x3012 = lowByte(_u16WriteVal);
 8003e36:	4b51      	ldr	r3, [pc, #324]	@ (8003f7c <ModbusMap+0x9ac>)
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	001a      	movs	r2, r3
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff0 <ModbusMap+0xa20>)
 8003e40:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e42:	4b4a      	ldr	r3, [pc, #296]	@ (8003f6c <ModbusMap+0x99c>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fc36 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 8003e4c:	4b48      	ldr	r3, [pc, #288]	@ (8003f70 <ModbusMap+0x9a0>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	4a68      	ldr	r2, [pc, #416]	@ (8003ff4 <ModbusMap+0xa24>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d90f      	bls.n	8003e76 <ModbusMap+0x8a6>
 8003e56:	4b46      	ldr	r3, [pc, #280]	@ (8003f70 <ModbusMap+0x9a0>)
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	4a67      	ldr	r2, [pc, #412]	@ (8003ff8 <ModbusMap+0xa28>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d80a      	bhi.n	8003e76 <ModbusMap+0x8a6>
					PNU_0x3014 = lowByte(_u16WriteVal);
 8003e60:	4b46      	ldr	r3, [pc, #280]	@ (8003f7c <ModbusMap+0x9ac>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	001a      	movs	r2, r3
 8003e68:	4b64      	ldr	r3, [pc, #400]	@ (8003ffc <ModbusMap+0xa2c>)
 8003e6a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f6c <ModbusMap+0x99c>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 fc21 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 8003e76:	4b3e      	ldr	r3, [pc, #248]	@ (8003f70 <ModbusMap+0x9a0>)
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	4a61      	ldr	r2, [pc, #388]	@ (8004000 <ModbusMap+0xa30>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d90f      	bls.n	8003ea0 <ModbusMap+0x8d0>
 8003e80:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <ModbusMap+0x9a0>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	4a5f      	ldr	r2, [pc, #380]	@ (8004004 <ModbusMap+0xa34>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d80a      	bhi.n	8003ea0 <ModbusMap+0x8d0>
					PNU_0x3016 = lowByte(_u16WriteVal);
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <ModbusMap+0x9ac>)
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	001a      	movs	r2, r3
 8003e92:	4b5d      	ldr	r3, [pc, #372]	@ (8004008 <ModbusMap+0xa38>)
 8003e94:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e96:	4b35      	ldr	r3, [pc, #212]	@ (8003f6c <ModbusMap+0x99c>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 fc0c 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 8003ea0:	4b33      	ldr	r3, [pc, #204]	@ (8003f70 <ModbusMap+0x9a0>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	4a59      	ldr	r2, [pc, #356]	@ (800400c <ModbusMap+0xa3c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d90f      	bls.n	8003eca <ModbusMap+0x8fa>
 8003eaa:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <ModbusMap+0x9a0>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	4a58      	ldr	r2, [pc, #352]	@ (8004010 <ModbusMap+0xa40>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d80a      	bhi.n	8003eca <ModbusMap+0x8fa>
					PNU_0x3018 = lowByte(_u16WriteVal);
 8003eb4:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <ModbusMap+0x9ac>)
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	001a      	movs	r2, r3
 8003ebc:	4b55      	ldr	r3, [pc, #340]	@ (8004014 <ModbusMap+0xa44>)
 8003ebe:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <ModbusMap+0x99c>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fbf7 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 8003eca:	4b29      	ldr	r3, [pc, #164]	@ (8003f70 <ModbusMap+0x9a0>)
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <ModbusMap+0xa48>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d90f      	bls.n	8003ef4 <ModbusMap+0x924>
 8003ed4:	4b26      	ldr	r3, [pc, #152]	@ (8003f70 <ModbusMap+0x9a0>)
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	4a50      	ldr	r2, [pc, #320]	@ (800401c <ModbusMap+0xa4c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d80a      	bhi.n	8003ef4 <ModbusMap+0x924>
					PNU_0x301A = lowByte(_u16WriteVal);
 8003ede:	4b27      	ldr	r3, [pc, #156]	@ (8003f7c <ModbusMap+0x9ac>)
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8004020 <ModbusMap+0xa50>)
 8003ee8:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003eea:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <ModbusMap+0x99c>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 fbe2 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <ModbusMap+0x9a0>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8004024 <ModbusMap+0xa54>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d90f      	bls.n	8003f1e <ModbusMap+0x94e>
 8003efe:	4b1c      	ldr	r3, [pc, #112]	@ (8003f70 <ModbusMap+0x9a0>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	4a49      	ldr	r2, [pc, #292]	@ (8004028 <ModbusMap+0xa58>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d80a      	bhi.n	8003f1e <ModbusMap+0x94e>
					PNU_0x301C = lowByte(_u16WriteVal);
 8003f08:	4b1c      	ldr	r3, [pc, #112]	@ (8003f7c <ModbusMap+0x9ac>)
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	001a      	movs	r2, r3
 8003f10:	4b46      	ldr	r3, [pc, #280]	@ (800402c <ModbusMap+0xa5c>)
 8003f12:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003f14:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <ModbusMap+0x99c>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 fbcd 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8003f1e:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <ModbusMap+0x9a0>)
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	4a43      	ldr	r2, [pc, #268]	@ (8004030 <ModbusMap+0xa60>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d800      	bhi.n	8003f2a <ModbusMap+0x95a>
 8003f28:	e08a      	b.n	8004040 <ModbusMap+0xa70>
 8003f2a:	4b11      	ldr	r3, [pc, #68]	@ (8003f70 <ModbusMap+0x9a0>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	4a41      	ldr	r2, [pc, #260]	@ (8004034 <ModbusMap+0xa64>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d900      	bls.n	8003f36 <ModbusMap+0x966>
 8003f34:	e084      	b.n	8004040 <ModbusMap+0xa70>
					PNU_0x301E = lowByte(_u16WriteVal);
 8003f36:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <ModbusMap+0x9ac>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004038 <ModbusMap+0xa68>)
 8003f40:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 8003f42:	4b3d      	ldr	r3, [pc, #244]	@ (8004038 <ModbusMap+0xa68>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <ModbusMap+0x9b4>)
 8003f4a:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <ModbusMap+0x9b4>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	001a      	movs	r2, r3
 8003f52:	4b3a      	ldr	r3, [pc, #232]	@ (800403c <ModbusMap+0xa6c>)
 8003f54:	0019      	movs	r1, r3
 8003f56:	0010      	movs	r0, r2
 8003f58:	f003 f9ca 	bl	80072f0 <wreeprom>
					reePlantilla[eeAddModBus] = waux;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <ModbusMap+0x9b4>)
 8003f5e:	7819      	ldrb	r1, [r3, #0]
 8003f60:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <ModbusMap+0x9c4>)
 8003f62:	2272      	movs	r2, #114	@ 0x72
 8003f64:	5499      	strb	r1, [r3, r2]

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	e7fd      	b.n	8003f66 <ModbusMap+0x996>
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	200003cc 	.word	0x200003cc
 8003f70:	20000382 	.word	0x20000382
 8003f74:	00003003 	.word	0x00003003
 8003f78:	00003004 	.word	0x00003004
 8003f7c:	20000384 	.word	0x20000384
 8003f80:	20000094 	.word	0x20000094
 8003f84:	20000b52 	.word	0x20000b52
 8003f88:	20000b53 	.word	0x20000b53
 8003f8c:	0803f001 	.word	0x0803f001
 8003f90:	0803f002 	.word	0x0803f002
 8003f94:	20000c88 	.word	0x20000c88
 8003f98:	00003005 	.word	0x00003005
 8003f9c:	00003006 	.word	0x00003006
 8003fa0:	20000096 	.word	0x20000096
 8003fa4:	0803f003 	.word	0x0803f003
 8003fa8:	0803f004 	.word	0x0803f004
 8003fac:	00003007 	.word	0x00003007
 8003fb0:	00003008 	.word	0x00003008
 8003fb4:	20000098 	.word	0x20000098
 8003fb8:	00003009 	.word	0x00003009
 8003fbc:	0000300a 	.word	0x0000300a
 8003fc0:	20000b06 	.word	0x20000b06
 8003fc4:	0000300b 	.word	0x0000300b
 8003fc8:	0000300c 	.word	0x0000300c
 8003fcc:	2000009a 	.word	0x2000009a
 8003fd0:	0000300d 	.word	0x0000300d
 8003fd4:	0000300e 	.word	0x0000300e
 8003fd8:	20000b08 	.word	0x20000b08
 8003fdc:	0000300f 	.word	0x0000300f
 8003fe0:	00003010 	.word	0x00003010
 8003fe4:	2000009c 	.word	0x2000009c
 8003fe8:	00003011 	.word	0x00003011
 8003fec:	00003012 	.word	0x00003012
 8003ff0:	2000009e 	.word	0x2000009e
 8003ff4:	00003013 	.word	0x00003013
 8003ff8:	00003014 	.word	0x00003014
 8003ffc:	200000a0 	.word	0x200000a0
 8004000:	00003015 	.word	0x00003015
 8004004:	00003016 	.word	0x00003016
 8004008:	200000a2 	.word	0x200000a2
 800400c:	00003017 	.word	0x00003017
 8004010:	00003018 	.word	0x00003018
 8004014:	200000a4 	.word	0x200000a4
 8004018:	00003019 	.word	0x00003019
 800401c:	0000301a 	.word	0x0000301a
 8004020:	200000a6 	.word	0x200000a6
 8004024:	0000301b 	.word	0x0000301b
 8004028:	0000301c 	.word	0x0000301c
 800402c:	200000a8 	.word	0x200000a8
 8004030:	0000301d 	.word	0x0000301d
 8004034:	0000301e 	.word	0x0000301e
 8004038:	200000aa 	.word	0x200000aa
 800403c:	0803f072 	.word	0x0803f072
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8004040:	4baa      	ldr	r3, [pc, #680]	@ (80042ec <ModbusMap+0xd1c>)
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	4aaa      	ldr	r2, [pc, #680]	@ (80042f0 <ModbusMap+0xd20>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d91e      	bls.n	8004088 <ModbusMap+0xab8>
 800404a:	4ba8      	ldr	r3, [pc, #672]	@ (80042ec <ModbusMap+0xd1c>)
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	4aa9      	ldr	r2, [pc, #676]	@ (80042f4 <ModbusMap+0xd24>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d819      	bhi.n	8004088 <ModbusMap+0xab8>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8004054:	4ba8      	ldr	r3, [pc, #672]	@ (80042f8 <ModbusMap+0xd28>)
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	001a      	movs	r2, r3
 800405c:	4ba7      	ldr	r3, [pc, #668]	@ (80042fc <ModbusMap+0xd2c>)
 800405e:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8004060:	4ba6      	ldr	r3, [pc, #664]	@ (80042fc <ModbusMap+0xd2c>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4ba6      	ldr	r3, [pc, #664]	@ (8004300 <ModbusMap+0xd30>)
 8004068:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 800406a:	4ba5      	ldr	r3, [pc, #660]	@ (8004300 <ModbusMap+0xd30>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	001a      	movs	r2, r3
 8004070:	4ba4      	ldr	r3, [pc, #656]	@ (8004304 <ModbusMap+0xd34>)
 8004072:	0019      	movs	r1, r3
 8004074:	0010      	movs	r0, r2
 8004076:	f003 f93b 	bl	80072f0 <wreeprom>
					reePlantilla[eetimepa] = waux;
 800407a:	4ba1      	ldr	r3, [pc, #644]	@ (8004300 <ModbusMap+0xd30>)
 800407c:	7819      	ldrb	r1, [r3, #0]
 800407e:	4ba2      	ldr	r3, [pc, #648]	@ (8004308 <ModbusMap+0xd38>)
 8004080:	2249      	movs	r2, #73	@ 0x49
 8004082:	5499      	strb	r1, [r3, r2]
			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	e7fd      	b.n	8004084 <ModbusMap+0xab4>
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8004088:	4b98      	ldr	r3, [pc, #608]	@ (80042ec <ModbusMap+0xd1c>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	4a9f      	ldr	r2, [pc, #636]	@ (800430c <ModbusMap+0xd3c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d90f      	bls.n	80040b2 <ModbusMap+0xae2>
 8004092:	4b96      	ldr	r3, [pc, #600]	@ (80042ec <ModbusMap+0xd1c>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	4a9e      	ldr	r2, [pc, #632]	@ (8004310 <ModbusMap+0xd40>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d80a      	bhi.n	80040b2 <ModbusMap+0xae2>
					PNU_0x3106 = lowByte(_u16WriteVal);
 800409c:	4b96      	ldr	r3, [pc, #600]	@ (80042f8 <ModbusMap+0xd28>)
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	001a      	movs	r2, r3
 80040a4:	4b9b      	ldr	r3, [pc, #620]	@ (8004314 <ModbusMap+0xd44>)
 80040a6:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004318 <ModbusMap+0xd48>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 fb03 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 80040b2:	4b8e      	ldr	r3, [pc, #568]	@ (80042ec <ModbusMap+0xd1c>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	4a99      	ldr	r2, [pc, #612]	@ (800431c <ModbusMap+0xd4c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d90f      	bls.n	80040dc <ModbusMap+0xb0c>
 80040bc:	4b8b      	ldr	r3, [pc, #556]	@ (80042ec <ModbusMap+0xd1c>)
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	4a97      	ldr	r2, [pc, #604]	@ (8004320 <ModbusMap+0xd50>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d80a      	bhi.n	80040dc <ModbusMap+0xb0c>
					PNU_0x3108 = lowByte(_u16WriteVal);
 80040c6:	4b8c      	ldr	r3, [pc, #560]	@ (80042f8 <ModbusMap+0xd28>)
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	001a      	movs	r2, r3
 80040ce:	4b95      	ldr	r3, [pc, #596]	@ (8004324 <ModbusMap+0xd54>)
 80040d0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040d2:	4b91      	ldr	r3, [pc, #580]	@ (8004318 <ModbusMap+0xd48>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f000 faee 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 80040dc:	4b83      	ldr	r3, [pc, #524]	@ (80042ec <ModbusMap+0xd1c>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	4a91      	ldr	r2, [pc, #580]	@ (8004328 <ModbusMap+0xd58>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d90f      	bls.n	8004106 <ModbusMap+0xb36>
 80040e6:	4b81      	ldr	r3, [pc, #516]	@ (80042ec <ModbusMap+0xd1c>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	4a90      	ldr	r2, [pc, #576]	@ (800432c <ModbusMap+0xd5c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d80a      	bhi.n	8004106 <ModbusMap+0xb36>
					PNU_0x310A = lowByte(_u16WriteVal);
 80040f0:	4b81      	ldr	r3, [pc, #516]	@ (80042f8 <ModbusMap+0xd28>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	001a      	movs	r2, r3
 80040f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004330 <ModbusMap+0xd60>)
 80040fa:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80040fc:	4b86      	ldr	r3, [pc, #536]	@ (8004318 <ModbusMap+0xd48>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 fad9 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 8004106:	4b79      	ldr	r3, [pc, #484]	@ (80042ec <ModbusMap+0xd1c>)
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	4a8a      	ldr	r2, [pc, #552]	@ (8004334 <ModbusMap+0xd64>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d90f      	bls.n	8004130 <ModbusMap+0xb60>
 8004110:	4b76      	ldr	r3, [pc, #472]	@ (80042ec <ModbusMap+0xd1c>)
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	4a88      	ldr	r2, [pc, #544]	@ (8004338 <ModbusMap+0xd68>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d80a      	bhi.n	8004130 <ModbusMap+0xb60>
					PNU_0x310C = lowByte(_u16WriteVal);
 800411a:	4b77      	ldr	r3, [pc, #476]	@ (80042f8 <ModbusMap+0xd28>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	001a      	movs	r2, r3
 8004122:	4b86      	ldr	r3, [pc, #536]	@ (800433c <ModbusMap+0xd6c>)
 8004124:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004126:	4b7c      	ldr	r3, [pc, #496]	@ (8004318 <ModbusMap+0xd48>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	0018      	movs	r0, r3
 800412c:	f000 fac4 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 8004130:	4b6e      	ldr	r3, [pc, #440]	@ (80042ec <ModbusMap+0xd1c>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	4a82      	ldr	r2, [pc, #520]	@ (8004340 <ModbusMap+0xd70>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d90f      	bls.n	800415a <ModbusMap+0xb8a>
 800413a:	4b6c      	ldr	r3, [pc, #432]	@ (80042ec <ModbusMap+0xd1c>)
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	4a81      	ldr	r2, [pc, #516]	@ (8004344 <ModbusMap+0xd74>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d80a      	bhi.n	800415a <ModbusMap+0xb8a>
					PNU_0x310E = lowByte(_u16WriteVal);
 8004144:	4b6c      	ldr	r3, [pc, #432]	@ (80042f8 <ModbusMap+0xd28>)
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	001a      	movs	r2, r3
 800414c:	4b7e      	ldr	r3, [pc, #504]	@ (8004348 <ModbusMap+0xd78>)
 800414e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004150:	4b71      	ldr	r3, [pc, #452]	@ (8004318 <ModbusMap+0xd48>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 faaf 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 800415a:	4b64      	ldr	r3, [pc, #400]	@ (80042ec <ModbusMap+0xd1c>)
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	23c8      	movs	r3, #200	@ 0xc8
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	429a      	cmp	r2, r3
 8004164:	d310      	bcc.n	8004188 <ModbusMap+0xbb8>
 8004166:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <ModbusMap+0xd1c>)
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	23c8      	movs	r3, #200	@ 0xc8
 800416c:	019b      	lsls	r3, r3, #6
 800416e:	429a      	cmp	r2, r3
 8004170:	d80a      	bhi.n	8004188 <ModbusMap+0xbb8>
					PNU_0x3200 = lowByte(_u16WriteVal);
 8004172:	4b61      	ldr	r3, [pc, #388]	@ (80042f8 <ModbusMap+0xd28>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	001a      	movs	r2, r3
 800417a:	4b74      	ldr	r3, [pc, #464]	@ (800434c <ModbusMap+0xd7c>)
 800417c:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800417e:	4b66      	ldr	r3, [pc, #408]	@ (8004318 <ModbusMap+0xd48>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 fa98 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8004188:	4b58      	ldr	r3, [pc, #352]	@ (80042ec <ModbusMap+0xd1c>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	4a70      	ldr	r2, [pc, #448]	@ (8004350 <ModbusMap+0xd80>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d90f      	bls.n	80041b2 <ModbusMap+0xbe2>
 8004192:	4b56      	ldr	r3, [pc, #344]	@ (80042ec <ModbusMap+0xd1c>)
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	4a6f      	ldr	r2, [pc, #444]	@ (8004354 <ModbusMap+0xd84>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d80a      	bhi.n	80041b2 <ModbusMap+0xbe2>
					PNU_0x3202 = lowByte(_u16WriteVal);
 800419c:	4b56      	ldr	r3, [pc, #344]	@ (80042f8 <ModbusMap+0xd28>)
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	001a      	movs	r2, r3
 80041a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004358 <ModbusMap+0xd88>)
 80041a6:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004318 <ModbusMap+0xd48>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 fa83 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 80041b2:	4b4e      	ldr	r3, [pc, #312]	@ (80042ec <ModbusMap+0xd1c>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	4a69      	ldr	r2, [pc, #420]	@ (800435c <ModbusMap+0xd8c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d90f      	bls.n	80041dc <ModbusMap+0xc0c>
 80041bc:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <ModbusMap+0xd1c>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	4a67      	ldr	r2, [pc, #412]	@ (8004360 <ModbusMap+0xd90>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d80a      	bhi.n	80041dc <ModbusMap+0xc0c>
					PNU_0x3204 = lowByte(_u16WriteVal);
 80041c6:	4b4c      	ldr	r3, [pc, #304]	@ (80042f8 <ModbusMap+0xd28>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	001a      	movs	r2, r3
 80041ce:	4b65      	ldr	r3, [pc, #404]	@ (8004364 <ModbusMap+0xd94>)
 80041d0:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041d2:	4b51      	ldr	r3, [pc, #324]	@ (8004318 <ModbusMap+0xd48>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	0018      	movs	r0, r3
 80041d8:	f000 fa6e 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 80041dc:	4b43      	ldr	r3, [pc, #268]	@ (80042ec <ModbusMap+0xd1c>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	4a61      	ldr	r2, [pc, #388]	@ (8004368 <ModbusMap+0xd98>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d90f      	bls.n	8004206 <ModbusMap+0xc36>
 80041e6:	4b41      	ldr	r3, [pc, #260]	@ (80042ec <ModbusMap+0xd1c>)
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	4a60      	ldr	r2, [pc, #384]	@ (800436c <ModbusMap+0xd9c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d80a      	bhi.n	8004206 <ModbusMap+0xc36>
					PNU_0x3206 = lowByte(_u16WriteVal);
 80041f0:	4b41      	ldr	r3, [pc, #260]	@ (80042f8 <ModbusMap+0xd28>)
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	001a      	movs	r2, r3
 80041f8:	4b5d      	ldr	r3, [pc, #372]	@ (8004370 <ModbusMap+0xda0>)
 80041fa:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80041fc:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <ModbusMap+0xd48>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	0018      	movs	r0, r3
 8004202:	f000 fa59 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 8004206:	4b39      	ldr	r3, [pc, #228]	@ (80042ec <ModbusMap+0xd1c>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	4a5a      	ldr	r2, [pc, #360]	@ (8004374 <ModbusMap+0xda4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d90f      	bls.n	8004230 <ModbusMap+0xc60>
 8004210:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <ModbusMap+0xd1c>)
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	4a58      	ldr	r2, [pc, #352]	@ (8004378 <ModbusMap+0xda8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d80a      	bhi.n	8004230 <ModbusMap+0xc60>
					PNU_0x3208 = lowByte(_u16WriteVal);
 800421a:	4b37      	ldr	r3, [pc, #220]	@ (80042f8 <ModbusMap+0xd28>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	001a      	movs	r2, r3
 8004222:	4b56      	ldr	r3, [pc, #344]	@ (800437c <ModbusMap+0xdac>)
 8004224:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004226:	4b3c      	ldr	r3, [pc, #240]	@ (8004318 <ModbusMap+0xd48>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 fa44 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 8004230:	4b2e      	ldr	r3, [pc, #184]	@ (80042ec <ModbusMap+0xd1c>)
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	4a52      	ldr	r2, [pc, #328]	@ (8004380 <ModbusMap+0xdb0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d90f      	bls.n	800425a <ModbusMap+0xc8a>
 800423a:	4b2c      	ldr	r3, [pc, #176]	@ (80042ec <ModbusMap+0xd1c>)
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	4a51      	ldr	r2, [pc, #324]	@ (8004384 <ModbusMap+0xdb4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d80a      	bhi.n	800425a <ModbusMap+0xc8a>
					PNU_0x320A = lowByte(_u16WriteVal);
 8004244:	4b2c      	ldr	r3, [pc, #176]	@ (80042f8 <ModbusMap+0xd28>)
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	001a      	movs	r2, r3
 800424c:	4b4e      	ldr	r3, [pc, #312]	@ (8004388 <ModbusMap+0xdb8>)
 800424e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004250:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <ModbusMap+0xd48>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 fa2f 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <ModbusMap+0xd1c>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	4a4b      	ldr	r2, [pc, #300]	@ (800438c <ModbusMap+0xdbc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d90f      	bls.n	8004284 <ModbusMap+0xcb4>
 8004264:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <ModbusMap+0xd1c>)
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	4a49      	ldr	r2, [pc, #292]	@ (8004390 <ModbusMap+0xdc0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d80a      	bhi.n	8004284 <ModbusMap+0xcb4>
					PNU_0x320C = lowByte(_u16WriteVal);
 800426e:	4b22      	ldr	r3, [pc, #136]	@ (80042f8 <ModbusMap+0xd28>)
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	001a      	movs	r2, r3
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <ModbusMap+0xdc4>)
 8004278:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800427a:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <ModbusMap+0xd48>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	0018      	movs	r0, r3
 8004280:	f000 fa1a 	bl	80046b8 <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8004284:	4b19      	ldr	r3, [pc, #100]	@ (80042ec <ModbusMap+0xd1c>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	2b2f      	cmp	r3, #47	@ 0x2f
 800428a:	d91a      	bls.n	80042c2 <ModbusMap+0xcf2>
 800428c:	4b17      	ldr	r3, [pc, #92]	@ (80042ec <ModbusMap+0xd1c>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	2b30      	cmp	r3, #48	@ 0x30
 8004292:	d816      	bhi.n	80042c2 <ModbusMap+0xcf2>

					if (_u16WriteVal == 1){
 8004294:	4b18      	ldr	r3, [pc, #96]	@ (80042f8 <ModbusMap+0xd28>)
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d104      	bne.n	80042a6 <ModbusMap+0xcd6>
						if(flagsa[3]){
 800429c:	4b3e      	ldr	r3, [pc, #248]	@ (8004398 <ModbusMap+0xdc8>)
 800429e:	78db      	ldrb	r3, [r3, #3]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d000      	beq.n	80042a6 <ModbusMap+0xcd6>
							asm ("nop");
 80042a4:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <ModbusMap+0xd28>)
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <ModbusMap+0xce8>
						if(flagsa[3]){
 80042ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004398 <ModbusMap+0xdc8>)
 80042b0:	78db      	ldrb	r3, [r3, #3]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d100      	bne.n	80042b8 <ModbusMap+0xce8>

						}
						else{
							asm ("nop");
 80042b6:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80042b8:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <ModbusMap+0xd48>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	0018      	movs	r0, r3
 80042be:	f000 f9fb 	bl	80046b8 <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <ModbusMap+0xd1c>)
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	2b30      	cmp	r3, #48	@ 0x30
 80042c8:	d800      	bhi.n	80042cc <ModbusMap+0xcfc>
 80042ca:	e07e      	b.n	80043ca <ModbusMap+0xdfa>
 80042cc:	4b07      	ldr	r3, [pc, #28]	@ (80042ec <ModbusMap+0xd1c>)
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	2b31      	cmp	r3, #49	@ 0x31
 80042d2:	d900      	bls.n	80042d6 <ModbusMap+0xd06>
 80042d4:	e079      	b.n	80043ca <ModbusMap+0xdfa>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 80042d6:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <ModbusMap+0xd28>)
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d167      	bne.n	80043ae <ModbusMap+0xdde>
						if(GPIOR0[1]){
 80042de:	4b2f      	ldr	r3, [pc, #188]	@ (800439c <ModbusMap+0xdcc>)
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d05c      	beq.n	80043a0 <ModbusMap+0xdd0>
							asm ("nop");
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	e061      	b.n	80043ae <ModbusMap+0xdde>
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	20000382 	.word	0x20000382
 80042f0:	00003103 	.word	0x00003103
 80042f4:	00003104 	.word	0x00003104
 80042f8:	20000384 	.word	0x20000384
 80042fc:	200000ac 	.word	0x200000ac
 8004300:	20000b52 	.word	0x20000b52
 8004304:	0803f049 	.word	0x0803f049
 8004308:	20000c88 	.word	0x20000c88
 800430c:	00003105 	.word	0x00003105
 8004310:	00003106 	.word	0x00003106
 8004314:	200000ae 	.word	0x200000ae
 8004318:	200003cc 	.word	0x200003cc
 800431c:	00003107 	.word	0x00003107
 8004320:	00003108 	.word	0x00003108
 8004324:	200000b0 	.word	0x200000b0
 8004328:	00003109 	.word	0x00003109
 800432c:	0000310a 	.word	0x0000310a
 8004330:	200000b2 	.word	0x200000b2
 8004334:	0000310b 	.word	0x0000310b
 8004338:	0000310c 	.word	0x0000310c
 800433c:	200000b4 	.word	0x200000b4
 8004340:	0000310d 	.word	0x0000310d
 8004344:	0000310e 	.word	0x0000310e
 8004348:	200000b6 	.word	0x200000b6
 800434c:	20000b0a 	.word	0x20000b0a
 8004350:	00003201 	.word	0x00003201
 8004354:	00003202 	.word	0x00003202
 8004358:	20000b0c 	.word	0x20000b0c
 800435c:	00003203 	.word	0x00003203
 8004360:	00003204 	.word	0x00003204
 8004364:	20000b0e 	.word	0x20000b0e
 8004368:	00003205 	.word	0x00003205
 800436c:	00003206 	.word	0x00003206
 8004370:	20000b10 	.word	0x20000b10
 8004374:	00003207 	.word	0x00003207
 8004378:	00003208 	.word	0x00003208
 800437c:	20000b12 	.word	0x20000b12
 8004380:	00003209 	.word	0x00003209
 8004384:	0000320a 	.word	0x0000320a
 8004388:	20000b14 	.word	0x20000b14
 800438c:	0000320b 	.word	0x0000320b
 8004390:	0000320c 	.word	0x0000320c
 8004394:	20000b16 	.word	0x20000b16
 8004398:	20000b74 	.word	0x20000b74
 800439c:	20000ba0 	.word	0x20000ba0
						}
						else{
							flags_accMenu |=0x01;
 80043a0:	4b40      	ldr	r3, [pc, #256]	@ (80044a4 <ModbusMap+0xed4>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2201      	movs	r2, #1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b3e      	ldr	r3, [pc, #248]	@ (80044a4 <ModbusMap+0xed4>)
 80043ac:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <ModbusMap+0xed8>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <ModbusMap+0xdf0>
						if(GPIOR0[1]){
 80043b6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <ModbusMap+0xedc>)
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d100      	bne.n	80043c0 <ModbusMap+0xdf0>
						}
						else{
							asm ("nop");
 80043be:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80043c0:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <ModbusMap+0xee0>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f000 f977 	bl	80046b8 <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 80043ca:	4b3a      	ldr	r3, [pc, #232]	@ (80044b4 <ModbusMap+0xee4>)
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	2b31      	cmp	r3, #49	@ 0x31
 80043d0:	d800      	bhi.n	80043d4 <ModbusMap+0xe04>
 80043d2:	e061      	b.n	8004498 <ModbusMap+0xec8>
 80043d4:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <ModbusMap+0xee4>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	2b32      	cmp	r3, #50	@ 0x32
 80043da:	d900      	bls.n	80043de <ModbusMap+0xe0e>
 80043dc:	e05c      	b.n	8004498 <ModbusMap+0xec8>

					if (_u16WriteVal == 1){
 80043de:	4b32      	ldr	r3, [pc, #200]	@ (80044a8 <ModbusMap+0xed8>)
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d108      	bne.n	80043f8 <ModbusMap+0xe28>
						if(GPIOR0[2]){
 80043e6:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <ModbusMap+0xedc>)
 80043e8:	789b      	ldrb	r3, [r3, #2]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <ModbusMap+0xe22>
							asm ("nop");
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	e002      	b.n	80043f8 <ModbusMap+0xe28>
						}
						else{
							flagsb[0] = 1;
 80043f2:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <ModbusMap+0xee8>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 80043f8:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <ModbusMap+0xed8>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <ModbusMap+0xe44>
						if(GPIOR0[2]){
 8004400:	4b2a      	ldr	r3, [pc, #168]	@ (80044ac <ModbusMap+0xedc>)
 8004402:	789b      	ldrb	r3, [r3, #2]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <ModbusMap+0xe42>
							asm ("nop");
 8004408:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 800440a:	4b2b      	ldr	r3, [pc, #172]	@ (80044b8 <ModbusMap+0xee8>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e000      	b.n	8004414 <ModbusMap+0xe44>

						}
						else{
							asm ("nop");
 8004412:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8004414:	4b26      	ldr	r3, [pc, #152]	@ (80044b0 <ModbusMap+0xee0>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 f94d 	bl	80046b8 <ModbusSlaveTransaction>
				}
			break;
 800441e:	e03b      	b.n	8004498 <ModbusMap+0xec8>
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 8004420:	2001      	movs	r0, #1
 8004422:	f000 fa73 	bl	800490c <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 8004426:	e038      	b.n	800449a <ModbusMap+0xeca>
				  break;
 8004428:	46c0      	nop			@ (mov r8, r8)
 800442a:	e036      	b.n	800449a <ModbusMap+0xeca>
					break;
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	e034      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004430:	46c0      	nop			@ (mov r8, r8)
 8004432:	e032      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	e030      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004438:	46c0      	nop			@ (mov r8, r8)
 800443a:	e02e      	b.n	800449a <ModbusMap+0xeca>
					break;
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	e02c      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	e02a      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	e028      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	e026      	b.n	800449a <ModbusMap+0xeca>
					break;
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	e024      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	e022      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	e020      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	e01e      	b.n	800449a <ModbusMap+0xeca>
					break;
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	e01c      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	e01a      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	e018      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	e016      	b.n	800449a <ModbusMap+0xeca>
					break;
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	e014      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	e012      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	e010      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	e00e      	b.n	800449a <ModbusMap+0xeca>
					break;
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	e00c      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004480:	46c0      	nop			@ (mov r8, r8)
 8004482:	e00a      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	e008      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	e006      	b.n	800449a <ModbusMap+0xeca>
					break;
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	e004      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	e002      	b.n	800449a <ModbusMap+0xeca>
					break;
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	e000      	b.n	800449a <ModbusMap+0xeca>
			break;
 8004498:	46c0      	nop			@ (mov r8, r8)
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b003      	add	sp, #12
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	20000c4c 	.word	0x20000c4c
 80044a8:	20000384 	.word	0x20000384
 80044ac:	20000ba0 	.word	0x20000ba0
 80044b0:	200003cc 	.word	0x200003cc
 80044b4:	20000382 	.word	0x20000382
 80044b8:	20000be4 	.word	0x20000be4

080044bc <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	221e      	movs	r2, #30
 80044cc:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	4929      	ldr	r1, [pc, #164]	@ (8004578 <serialEvent_RS485+0xbc>)
 80044d4:	4b29      	ldr	r3, [pc, #164]	@ (800457c <serialEvent_RS485+0xc0>)
 80044d6:	0018      	movs	r0, r3
 80044d8:	f014 fdf8 	bl	80190cc <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 80044dc:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <serialEvent_RS485+0xc4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	1cbb      	adds	r3, r7, #2
 80044e4:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80044e6:	1cba      	adds	r2, r7, #2
 80044e8:	1d3b      	adds	r3, r7, #4
 80044ea:	8812      	ldrh	r2, [r2, #0]
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d23c      	bcs.n	800456c <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 80044f2:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <serialEvent_RS485+0xc8>)
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	2210      	movs	r2, #16
 80044f8:	4013      	ands	r3, r2
 80044fa:	d037      	beq.n	800456c <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80044fc:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 80044fe:	4b1f      	ldr	r3, [pc, #124]	@ (800457c <serialEvent_RS485+0xc0>)
 8004500:	0018      	movs	r0, r3
 8004502:	f014 fe4f 	bl	80191a4 <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 8004506:	4b1f      	ldr	r3, [pc, #124]	@ (8004584 <serialEvent_RS485+0xc8>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	2210      	movs	r2, #16
 800450c:	4013      	ands	r3, r2
 800450e:	d003      	beq.n	8004518 <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8004510:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <serialEvent_RS485+0xc0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2210      	movs	r2, #16
 8004516:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004518:	1dbb      	adds	r3, r7, #6
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e00c      	b.n	800453a <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 8004520:	1dbb      	adds	r3, r7, #6
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4913      	ldr	r1, [pc, #76]	@ (8004578 <serialEvent_RS485+0xbc>)
 800452a:	5c89      	ldrb	r1, [r1, r2]
 800452c:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <serialEvent_RS485+0xcc>)
 800452e:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	1dbb      	adds	r3, r7, #6
 8004536:	3201      	adds	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	1cbb      	adds	r3, r7, #2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	211e      	movs	r1, #30
 8004544:	1acb      	subs	r3, r1, r3
 8004546:	429a      	cmp	r2, r3
 8004548:	d3ea      	bcc.n	8004520 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 800454a:	1dbb      	adds	r3, r7, #6
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	4a0e      	ldr	r2, [pc, #56]	@ (8004588 <serialEvent_RS485+0xcc>)
 8004550:	2100      	movs	r1, #0
 8004552:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b2d9      	uxtb	r1, r3
 800455a:	1cbb      	adds	r3, r7, #2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	1dfb      	adds	r3, r7, #7
 8004562:	1a8a      	subs	r2, r1, r2
 8004564:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 8004566:	4b09      	ldr	r3, [pc, #36]	@ (800458c <serialEvent_RS485+0xd0>)
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	781b      	ldrb	r3, [r3, #0]
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000ac4 	.word	0x20000ac4
 800457c:	200006bc 	.word	0x200006bc
 8004580:	20000810 	.word	0x20000810
 8004584:	40004c00 	.word	0x40004c00
 8004588:	20000ae4 	.word	0x20000ae4
 800458c:	2000037c 	.word	0x2000037c

08004590 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	000a      	movs	r2, r1
 800459a:	1cfb      	adds	r3, r7, #3
 800459c:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 800459e:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 80045a0:	1cfb      	adds	r3, r7, #3
 80045a2:	781a      	ldrb	r2, [r3, #0]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <SerializeDMAArray_RS485+0x38>)
 80045a8:	0018      	movs	r0, r3
 80045aa:	f016 fb1d 	bl	801abe8 <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 80045ae:	1cfb      	adds	r3, r7, #3
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	4904      	ldr	r1, [pc, #16]	@ (80045c8 <SerializeDMAArray_RS485+0x38>)
 80045b6:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <SerializeDMAArray_RS485+0x3c>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f014 fcf5 	bl	8018fa8 <HAL_UART_Transmit_DMA>

}
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	20000aa4 	.word	0x20000aa4
 80045cc:	200006bc 	.word	0x200006bc

080045d0 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	0002      	movs	r2, r0
 80045d8:	1dbb      	adds	r3, r7, #6
 80045da:	801a      	strh	r2, [r3, #0]
 80045dc:	1d7b      	adds	r3, r7, #5
 80045de:	1c0a      	adds	r2, r1, #0
 80045e0:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 80045e2:	1d7b      	adds	r3, r7, #5
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b299      	uxth	r1, r3
 80045e8:	1dbb      	adds	r3, r7, #6
 80045ea:	1dba      	adds	r2, r7, #6
 80045ec:	8812      	ldrh	r2, [r2, #0]
 80045ee:	404a      	eors	r2, r1
 80045f0:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e015      	b.n	8004624 <crc16_update+0x54>
{
if (crc & 1)
 80045f8:	1dbb      	adds	r3, r7, #6
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	4013      	ands	r3, r2
 8004600:	d008      	beq.n	8004614 <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 8004602:	1dbb      	adds	r3, r7, #6
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	1dbb      	adds	r3, r7, #6
 800460c:	490a      	ldr	r1, [pc, #40]	@ (8004638 <crc16_update+0x68>)
 800460e:	404a      	eors	r2, r1
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	e004      	b.n	800461e <crc16_update+0x4e>
else
  crc = (crc >> 1);
 8004614:	1dbb      	adds	r3, r7, #6
 8004616:	1dba      	adds	r2, r7, #6
 8004618:	8812      	ldrh	r2, [r2, #0]
 800461a:	0852      	lsrs	r2, r2, #1
 800461c:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b07      	cmp	r3, #7
 8004628:	dde6      	ble.n	80045f8 <crc16_update+0x28>
}

return crc;
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	881b      	ldrh	r3, [r3, #0]
}
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b004      	add	sp, #16
 8004634:	bd80      	pop	{r7, pc}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	ffffa001 	.word	0xffffa001

0800463c <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	0002      	movs	r2, r0
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <ModbusMaster_begin+0x28>)
 8004656:	1dfa      	adds	r2, r7, #7
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <ModbusMaster_begin+0x2c>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <ModbusMaster_begin+0x30>)
 8004664:	2200      	movs	r2, #0
 8004666:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}
 8004670:	2000037d 	.word	0x2000037d
 8004674:	200003c8 	.word	0x200003c8
 8004678:	200003ca 	.word	0x200003ca

0800467c <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	0002      	movs	r2, r0
 8004684:	1dfb      	adds	r3, r7, #7
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	1c0a      	adds	r2, r1, #0
 800468c:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 800468e:	1dfb      	adds	r3, r7, #7
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b1f      	cmp	r3, #31
 8004694:	d808      	bhi.n	80046a8 <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 8004696:	1dfb      	adds	r3, r7, #7
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <ModbusSlave_setTransmitBuffer+0x38>)
 800469c:	0052      	lsls	r2, r2, #1
 800469e:	1d39      	adds	r1, r7, #4
 80046a0:	8809      	ldrh	r1, [r1, #0]
 80046a2:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b002      	add	sp, #8
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	20000388 	.word	0x20000388

080046b8 <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	b0c5      	sub	sp, #276	@ 0x114
 80046bc:	af00      	add	r7, sp, #0
 80046be:	0002      	movs	r2, r0
 80046c0:	4b89      	ldr	r3, [pc, #548]	@ (80048e8 <ModbusSlaveTransaction+0x230>)
 80046c2:	2588      	movs	r5, #136	@ 0x88
 80046c4:	006d      	lsls	r5, r5, #1
 80046c6:	195b      	adds	r3, r3, r5
 80046c8:	19db      	adds	r3, r3, r7
 80046ca:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 80046cc:	2410      	movs	r4, #16
 80046ce:	34ff      	adds	r4, #255	@ 0xff
 80046d0:	193b      	adds	r3, r7, r4
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 80046d6:	4b85      	ldr	r3, [pc, #532]	@ (80048ec <ModbusSlaveTransaction+0x234>)
 80046d8:	2201      	movs	r2, #1
 80046da:	2104      	movs	r1, #4
 80046dc:	0018      	movs	r0, r3
 80046de:	f00e fe1c 	bl	801331a <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046e2:	0020      	movs	r0, r4
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	183a      	adds	r2, r7, r0
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	7011      	strb	r1, [r2, #0]
 80046ee:	001a      	movs	r2, r3
 80046f0:	4b7f      	ldr	r3, [pc, #508]	@ (80048f0 <ModbusSlaveTransaction+0x238>)
 80046f2:	7819      	ldrb	r1, [r3, #0]
 80046f4:	4b7f      	ldr	r3, [pc, #508]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 80046f6:	195b      	adds	r3, r3, r5
 80046f8:	19db      	adds	r3, r3, r7
 80046fa:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80046fc:	183b      	adds	r3, r7, r0
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	183a      	adds	r2, r7, r0
 8004702:	1c59      	adds	r1, r3, #1
 8004704:	7011      	strb	r1, [r2, #0]
 8004706:	001a      	movs	r2, r3
 8004708:	4b7b      	ldr	r3, [pc, #492]	@ (80048f8 <ModbusSlaveTransaction+0x240>)
 800470a:	7819      	ldrb	r1, [r3, #0]
 800470c:	4b79      	ldr	r3, [pc, #484]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 800470e:	195b      	adds	r3, r3, r5
 8004710:	19db      	adds	r3, r3, r7
 8004712:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 8004714:	4b74      	ldr	r3, [pc, #464]	@ (80048e8 <ModbusSlaveTransaction+0x230>)
 8004716:	195b      	adds	r3, r3, r5
 8004718:	19db      	adds	r3, r3, r7
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b04      	cmp	r3, #4
 800471e:	dc02      	bgt.n	8004726 <ModbusSlaveTransaction+0x6e>
 8004720:	2b03      	cmp	r3, #3
 8004722:	da03      	bge.n	800472c <ModbusSlaveTransaction+0x74>
 8004724:	e079      	b.n	800481a <ModbusSlaveTransaction+0x162>
 8004726:	2b06      	cmp	r3, #6
 8004728:	d051      	beq.n	80047ce <ModbusSlaveTransaction+0x116>
 800472a:	e076      	b.n	800481a <ModbusSlaveTransaction+0x162>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 800472c:	4b73      	ldr	r3, [pc, #460]	@ (80048fc <ModbusSlaveTransaction+0x244>)
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b2d9      	uxtb	r1, r3
 8004732:	2210      	movs	r2, #16
 8004734:	32ff      	adds	r2, #255	@ 0xff
 8004736:	18bb      	adds	r3, r7, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	18ba      	adds	r2, r7, r2
 800473c:	1c58      	adds	r0, r3, #1
 800473e:	7010      	strb	r0, [r2, #0]
 8004740:	001a      	movs	r2, r3
 8004742:	1c0b      	adds	r3, r1, #0
 8004744:	18db      	adds	r3, r3, r3
 8004746:	b2d9      	uxtb	r1, r3
 8004748:	4b6a      	ldr	r3, [pc, #424]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 800474a:	2088      	movs	r0, #136	@ 0x88
 800474c:	0040      	lsls	r0, r0, #1
 800474e:	181b      	adds	r3, r3, r0
 8004750:	19db      	adds	r3, r3, r7
 8004752:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004754:	2387      	movs	r3, #135	@ 0x87
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e02c      	b.n	80047ba <ModbusSlaveTransaction+0x102>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 8004760:	2487      	movs	r4, #135	@ 0x87
 8004762:	0064      	lsls	r4, r4, #1
 8004764:	193b      	adds	r3, r7, r4
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	4b65      	ldr	r3, [pc, #404]	@ (8004900 <ModbusSlaveTransaction+0x248>)
 800476a:	0052      	lsls	r2, r2, #1
 800476c:	5ad3      	ldrh	r3, [r2, r3]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	b299      	uxth	r1, r3
 8004772:	2510      	movs	r5, #16
 8004774:	35ff      	adds	r5, #255	@ 0xff
 8004776:	197b      	adds	r3, r7, r5
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	197a      	adds	r2, r7, r5
 800477c:	1c58      	adds	r0, r3, #1
 800477e:	7010      	strb	r0, [r2, #0]
 8004780:	001a      	movs	r2, r3
 8004782:	b2c9      	uxtb	r1, r1
 8004784:	4b5b      	ldr	r3, [pc, #364]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 8004786:	2688      	movs	r6, #136	@ 0x88
 8004788:	0076      	lsls	r6, r6, #1
 800478a:	199b      	adds	r3, r3, r6
 800478c:	19db      	adds	r3, r3, r7
 800478e:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 8004790:	193b      	adds	r3, r7, r4
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	4b5a      	ldr	r3, [pc, #360]	@ (8004900 <ModbusSlaveTransaction+0x248>)
 8004796:	0052      	lsls	r2, r2, #1
 8004798:	5ad1      	ldrh	r1, [r2, r3]
 800479a:	197b      	adds	r3, r7, r5
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	197a      	adds	r2, r7, r5
 80047a0:	1c58      	adds	r0, r3, #1
 80047a2:	7010      	strb	r0, [r2, #0]
 80047a4:	001a      	movs	r2, r3
 80047a6:	b2c9      	uxtb	r1, r1
 80047a8:	4b52      	ldr	r3, [pc, #328]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 80047aa:	199b      	adds	r3, r3, r6
 80047ac:	19db      	adds	r3, r3, r7
 80047ae:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	193b      	adds	r3, r7, r4
 80047b6:	3201      	adds	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	4b50      	ldr	r3, [pc, #320]	@ (80048fc <ModbusSlaveTransaction+0x244>)
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2287      	movs	r2, #135	@ 0x87
 80047c2:	0052      	lsls	r2, r2, #1
 80047c4:	18ba      	adds	r2, r7, r2
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3c9      	bcc.n	8004760 <ModbusSlaveTransaction+0xa8>
      }
		break;
 80047cc:	e025      	b.n	800481a <ModbusSlaveTransaction+0x162>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 80047ce:	2387      	movs	r3, #135	@ 0x87
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	2202      	movs	r2, #2
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e018      	b.n	800480c <ModbusSlaveTransaction+0x154>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 80047da:	2487      	movs	r4, #135	@ 0x87
 80047dc:	0064      	lsls	r4, r4, #1
 80047de:	193b      	adds	r3, r7, r4
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	2110      	movs	r1, #16
 80047e4:	31ff      	adds	r1, #255	@ 0xff
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	1879      	adds	r1, r7, r1
 80047ec:	1c58      	adds	r0, r3, #1
 80047ee:	7008      	strb	r0, [r1, #0]
 80047f0:	0019      	movs	r1, r3
 80047f2:	4b44      	ldr	r3, [pc, #272]	@ (8004904 <ModbusSlaveTransaction+0x24c>)
 80047f4:	5c9a      	ldrb	r2, [r3, r2]
 80047f6:	4b3f      	ldr	r3, [pc, #252]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 80047f8:	2088      	movs	r0, #136	@ 0x88
 80047fa:	0040      	lsls	r0, r0, #1
 80047fc:	181b      	adds	r3, r3, r0
 80047fe:	19db      	adds	r3, r3, r7
 8004800:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 8004802:	193b      	adds	r3, r7, r4
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	193b      	adds	r3, r7, r4
 8004808:	3201      	adds	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	2387      	movs	r3, #135	@ 0x87
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d9e0      	bls.n	80047da <ModbusSlaveTransaction+0x122>
			}
		break;
 8004818:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 800481a:	2386      	movs	r3, #134	@ 0x86
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2201      	movs	r2, #1
 8004822:	4252      	negs	r2, r2
 8004824:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8004826:	2387      	movs	r3, #135	@ 0x87
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e019      	b.n	8004866 <ModbusSlaveTransaction+0x1ae>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 8004832:	2587      	movs	r5, #135	@ 0x87
 8004834:	006d      	lsls	r5, r5, #1
 8004836:	197b      	adds	r3, r7, r5
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	4a2e      	ldr	r2, [pc, #184]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 800483c:	2188      	movs	r1, #136	@ 0x88
 800483e:	0049      	lsls	r1, r1, #1
 8004840:	1852      	adds	r2, r2, r1
 8004842:	19d2      	adds	r2, r2, r7
 8004844:	5cd2      	ldrb	r2, [r2, r3]
 8004846:	2386      	movs	r3, #134	@ 0x86
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	18fc      	adds	r4, r7, r3
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	0011      	movs	r1, r2
 8004852:	0018      	movs	r0, r3
 8004854:	f7ff febc 	bl	80045d0 <crc16_update>
 8004858:	0003      	movs	r3, r0
 800485a:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800485c:	197b      	adds	r3, r7, r5
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	197b      	adds	r3, r7, r5
 8004862:	3201      	adds	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	2387      	movs	r3, #135	@ 0x87
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	18fa      	adds	r2, r7, r3
 800486c:	2010      	movs	r0, #16
 800486e:	30ff      	adds	r0, #255	@ 0xff
 8004870:	183b      	adds	r3, r7, r0
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d3db      	bcc.n	8004832 <ModbusSlaveTransaction+0x17a>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 800487a:	183b      	adds	r3, r7, r0
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	183a      	adds	r2, r7, r0
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	7011      	strb	r1, [r2, #0]
 8004884:	001a      	movs	r2, r3
 8004886:	2486      	movs	r4, #134	@ 0x86
 8004888:	0064      	lsls	r4, r4, #1
 800488a:	193b      	adds	r3, r7, r4
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b2d9      	uxtb	r1, r3
 8004890:	4b18      	ldr	r3, [pc, #96]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 8004892:	2588      	movs	r5, #136	@ 0x88
 8004894:	006d      	lsls	r5, r5, #1
 8004896:	195b      	adds	r3, r3, r5
 8004898:	19db      	adds	r3, r3, r7
 800489a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 800489c:	193b      	adds	r3, r7, r4
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	b299      	uxth	r1, r3
 80048a4:	183b      	adds	r3, r7, r0
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	0004      	movs	r4, r0
 80048aa:	183a      	adds	r2, r7, r0
 80048ac:	1c58      	adds	r0, r3, #1
 80048ae:	7010      	strb	r0, [r2, #0]
 80048b0:	001a      	movs	r2, r3
 80048b2:	b2c9      	uxtb	r1, r1
 80048b4:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 80048b6:	195b      	adds	r3, r3, r5
 80048b8:	19db      	adds	r3, r3, r7
 80048ba:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	4a0c      	ldr	r2, [pc, #48]	@ (80048f4 <ModbusSlaveTransaction+0x23c>)
 80048c2:	1952      	adds	r2, r2, r5
 80048c4:	19d2      	adds	r2, r2, r7
 80048c6:	2100      	movs	r1, #0
 80048c8:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	230c      	movs	r3, #12
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	0011      	movs	r1, r2
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7ff fe5b 	bl	8004590 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 80048da:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <ModbusSlaveTransaction+0x250>)
 80048dc:	2246      	movs	r2, #70	@ 0x46
 80048de:	801a      	strh	r2, [r3, #0]


}
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b045      	add	sp, #276	@ 0x114
 80048e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e8:	fffffef7 	.word	0xfffffef7
 80048ec:	50000800 	.word	0x50000800
 80048f0:	2000037d 	.word	0x2000037d
 80048f4:	fffffefc 	.word	0xfffffefc
 80048f8:	200003cc 	.word	0x200003cc
 80048fc:	20000380 	.word	0x20000380
 8004900:	20000388 	.word	0x20000388
 8004904:	20000ae4 	.word	0x20000ae4
 8004908:	2000213e 	.word	0x2000213e

0800490c <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 800490c:	b5b0      	push	{r4, r5, r7, lr}
 800490e:	b0c4      	sub	sp, #272	@ 0x110
 8004910:	af00      	add	r7, sp, #0
 8004912:	0002      	movs	r2, r0
 8004914:	4b51      	ldr	r3, [pc, #324]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x150>)
 8004916:	2588      	movs	r5, #136	@ 0x88
 8004918:	006d      	lsls	r5, r5, #1
 800491a:	195b      	adds	r3, r3, r5
 800491c:	19db      	adds	r3, r3, r7
 800491e:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8004920:	240c      	movs	r4, #12
 8004922:	34ff      	adds	r4, #255	@ 0xff
 8004924:	193b      	adds	r3, r7, r4
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 800492a:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 800492c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a60 <ModbusSlaveExceptionTransaction+0x154>)
 800492e:	2214      	movs	r2, #20
 8004930:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 8004932:	4b4c      	ldr	r3, [pc, #304]	@ (8004a64 <ModbusSlaveExceptionTransaction+0x158>)
 8004934:	2201      	movs	r2, #1
 8004936:	2104      	movs	r1, #4
 8004938:	0018      	movs	r0, r3
 800493a:	f00e fcee 	bl	801331a <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 800493e:	193b      	adds	r3, r7, r4
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	193a      	adds	r2, r7, r4
 8004944:	1c59      	adds	r1, r3, #1
 8004946:	7011      	strb	r1, [r2, #0]
 8004948:	001a      	movs	r2, r3
 800494a:	4b47      	ldr	r3, [pc, #284]	@ (8004a68 <ModbusSlaveExceptionTransaction+0x15c>)
 800494c:	7819      	ldrb	r1, [r3, #0]
 800494e:	4b47      	ldr	r3, [pc, #284]	@ (8004a6c <ModbusSlaveExceptionTransaction+0x160>)
 8004950:	195b      	adds	r3, r3, r5
 8004952:	19db      	adds	r3, r3, r7
 8004954:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004956:	4b46      	ldr	r3, [pc, #280]	@ (8004a70 <ModbusSlaveExceptionTransaction+0x164>)
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	193b      	adds	r3, r7, r4
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	1939      	adds	r1, r7, r4
 8004960:	1c58      	adds	r0, r3, #1
 8004962:	7008      	strb	r0, [r1, #0]
 8004964:	0019      	movs	r1, r3
 8004966:	2380      	movs	r3, #128	@ 0x80
 8004968:	425b      	negs	r3, r3
 800496a:	4313      	orrs	r3, r2
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a6c <ModbusSlaveExceptionTransaction+0x160>)
 8004970:	195b      	adds	r3, r3, r5
 8004972:	19db      	adds	r3, r3, r7
 8004974:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004976:	193b      	adds	r3, r7, r4
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	193a      	adds	r2, r7, r4
 800497c:	1c59      	adds	r1, r3, #1
 800497e:	7011      	strb	r1, [r2, #0]
 8004980:	0019      	movs	r1, r3
 8004982:	4b3a      	ldr	r3, [pc, #232]	@ (8004a6c <ModbusSlaveExceptionTransaction+0x160>)
 8004984:	195b      	adds	r3, r3, r5
 8004986:	19db      	adds	r3, r3, r7
 8004988:	4a34      	ldr	r2, [pc, #208]	@ (8004a5c <ModbusSlaveExceptionTransaction+0x150>)
 800498a:	1952      	adds	r2, r2, r5
 800498c:	19d2      	adds	r2, r2, r7
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 8004992:	2386      	movs	r3, #134	@ 0x86
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2201      	movs	r2, #1
 800499a:	4252      	negs	r2, r2
 800499c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800499e:	2310      	movs	r3, #16
 80049a0:	33ff      	adds	r3, #255	@ 0xff
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e019      	b.n	80049de <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 80049aa:	2510      	movs	r5, #16
 80049ac:	35ff      	adds	r5, #255	@ 0xff
 80049ae:	197b      	adds	r3, r7, r5
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a6c <ModbusSlaveExceptionTransaction+0x160>)
 80049b4:	2188      	movs	r1, #136	@ 0x88
 80049b6:	0049      	lsls	r1, r1, #1
 80049b8:	1852      	adds	r2, r2, r1
 80049ba:	19d2      	adds	r2, r2, r7
 80049bc:	5cd2      	ldrb	r2, [r2, r3]
 80049be:	2386      	movs	r3, #134	@ 0x86
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	18fc      	adds	r4, r7, r3
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	0011      	movs	r1, r2
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7ff fe00 	bl	80045d0 <crc16_update>
 80049d0:	0003      	movs	r3, r0
 80049d2:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80049d4:	197b      	adds	r3, r7, r5
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	197b      	adds	r3, r7, r5
 80049da:	3201      	adds	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	2310      	movs	r3, #16
 80049e0:	33ff      	adds	r3, #255	@ 0xff
 80049e2:	18fa      	adds	r2, r7, r3
 80049e4:	200c      	movs	r0, #12
 80049e6:	30ff      	adds	r0, #255	@ 0xff
 80049e8:	183b      	adds	r3, r7, r0
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d3db      	bcc.n	80049aa <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80049f2:	183b      	adds	r3, r7, r0
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	183a      	adds	r2, r7, r0
 80049f8:	1c59      	adds	r1, r3, #1
 80049fa:	7011      	strb	r1, [r2, #0]
 80049fc:	001a      	movs	r2, r3
 80049fe:	2486      	movs	r4, #134	@ 0x86
 8004a00:	0064      	lsls	r4, r4, #1
 8004a02:	193b      	adds	r3, r7, r4
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b2d9      	uxtb	r1, r3
 8004a08:	4b18      	ldr	r3, [pc, #96]	@ (8004a6c <ModbusSlaveExceptionTransaction+0x160>)
 8004a0a:	2588      	movs	r5, #136	@ 0x88
 8004a0c:	006d      	lsls	r5, r5, #1
 8004a0e:	195b      	adds	r3, r3, r5
 8004a10:	19db      	adds	r3, r3, r7
 8004a12:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 8004a14:	193b      	adds	r3, r7, r4
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	b299      	uxth	r1, r3
 8004a1c:	183b      	adds	r3, r7, r0
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	0004      	movs	r4, r0
 8004a22:	183a      	adds	r2, r7, r0
 8004a24:	1c58      	adds	r0, r3, #1
 8004a26:	7010      	strb	r0, [r2, #0]
 8004a28:	001a      	movs	r2, r3
 8004a2a:	b2c9      	uxtb	r1, r1
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a6c <ModbusSlaveExceptionTransaction+0x160>)
 8004a2e:	195b      	adds	r3, r3, r5
 8004a30:	19db      	adds	r3, r3, r7
 8004a32:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 8004a34:	193b      	adds	r3, r7, r4
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	4a0c      	ldr	r2, [pc, #48]	@ (8004a6c <ModbusSlaveExceptionTransaction+0x160>)
 8004a3a:	1952      	adds	r2, r2, r5
 8004a3c:	19d2      	adds	r2, r2, r7
 8004a3e:	2100      	movs	r1, #0
 8004a40:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8004a42:	193b      	adds	r3, r7, r4
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	2308      	movs	r3, #8
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	0011      	movs	r1, r2
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff fd9f 	bl	8004590 <SerializeDMAArray_RS485>

}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b044      	add	sp, #272	@ 0x110
 8004a58:	bdb0      	pop	{r4, r5, r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	fffffef7 	.word	0xfffffef7
 8004a60:	20002140 	.word	0x20002140
 8004a64:	50000800 	.word	0x50000800
 8004a68:	2000037d 	.word	0x2000037d
 8004a6c:	fffffef8 	.word	0xfffffef8
 8004a70:	200003cc 	.word	0x200003cc

08004a74 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 8004a74:	b5b0      	push	{r4, r5, r7, lr}
 8004a76:	b0c2      	sub	sp, #264	@ 0x108
 8004a78:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 8004a7a:	1cfb      	adds	r3, r7, #3
 8004a7c:	33ff      	adds	r3, #255	@ 0xff
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 8004a82:	1d3b      	adds	r3, r7, #4
 8004a84:	33ff      	adds	r3, #255	@ 0xff
 8004a86:	22ff      	movs	r2, #255	@ 0xff
 8004a88:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 8004a8a:	1cfc      	adds	r4, r7, #3
 8004a8c:	34ff      	adds	r4, #255	@ 0xff
 8004a8e:	f7ff fd15 	bl	80044bc <serialEvent_RS485>
 8004a92:	0003      	movs	r3, r0
 8004a94:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 8004a96:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 8004a98:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 8004a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8004c04 <ModbusSlavePool+0x190>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d100      	bne.n	8004aa4 <ModbusSlavePool+0x30>
 8004aa2:	e0a8      	b.n	8004bf6 <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 8004aa4:	4b57      	ldr	r3, [pc, #348]	@ (8004c04 <ModbusSlavePool+0x190>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	33ff      	adds	r3, #255	@ 0xff
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8004ab2:	4b55      	ldr	r3, [pc, #340]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004ab4:	781a      	ldrb	r2, [r3, #0]
 8004ab6:	4b55      	ldr	r3, [pc, #340]	@ (8004c0c <ModbusSlavePool+0x198>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d000      	beq.n	8004ac0 <ModbusSlavePool+0x4c>
 8004abe:	e091      	b.n	8004be4 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8004ac0:	4b51      	ldr	r3, [pc, #324]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004ac2:	785a      	ldrb	r2, [r3, #1]
 8004ac4:	4b52      	ldr	r3, [pc, #328]	@ (8004c10 <ModbusSlavePool+0x19c>)
 8004ac6:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 8004ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	001a      	movs	r2, r3
 8004ace:	237f      	movs	r3, #127	@ 0x7f
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8004c10 <ModbusSlavePool+0x19c>)
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	33ff      	adds	r3, #255	@ 0xff
 8004ade:	22e1      	movs	r2, #225	@ 0xe1
 8004ae0:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 8004ae2:	1d7b      	adds	r3, r7, #5
 8004ae4:	33ff      	adds	r3, #255	@ 0xff
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4252      	negs	r2, r2
 8004aea:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004aec:	2308      	movs	r3, #8
 8004aee:	33ff      	adds	r3, #255	@ 0xff
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e015      	b.n	8004b24 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 8004af8:	2508      	movs	r5, #8
 8004afa:	35ff      	adds	r5, #255	@ 0xff
 8004afc:	197b      	adds	r3, r7, r5
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	4a41      	ldr	r2, [pc, #260]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004b02:	5cd2      	ldrb	r2, [r2, r3]
 8004b04:	1d7c      	adds	r4, r7, #5
 8004b06:	34ff      	adds	r4, #255	@ 0xff
 8004b08:	1d7b      	adds	r3, r7, #5
 8004b0a:	33ff      	adds	r3, #255	@ 0xff
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	0011      	movs	r1, r2
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7ff fd5d 	bl	80045d0 <crc16_update>
 8004b16:	0003      	movs	r3, r0
 8004b18:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 8004b1a:	197b      	adds	r3, r7, r5
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	197b      	adds	r3, r7, r5
 8004b20:	3201      	adds	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	2308      	movs	r3, #8
 8004b26:	33ff      	adds	r3, #255	@ 0xff
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	1cfb      	adds	r3, r7, #3
 8004b2e:	33ff      	adds	r3, #255	@ 0xff
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	3b02      	subs	r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	dbdf      	blt.n	8004af8 <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b38:	1d3b      	adds	r3, r7, #4
 8004b3a:	33ff      	adds	r3, #255	@ 0xff
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11d      	bne.n	8004b7e <ModbusSlavePool+0x10a>
 8004b42:	1d7b      	adds	r3, r7, #5
 8004b44:	33ff      	adds	r3, #255	@ 0xff
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	1cfb      	adds	r3, r7, #3
 8004b4c:	33ff      	adds	r3, #255	@ 0xff
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	3b02      	subs	r3, #2
 8004b52:	492d      	ldr	r1, [pc, #180]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004b54:	5ccb      	ldrb	r3, [r1, r3]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d10d      	bne.n	8004b76 <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 8004b5a:	1d7b      	adds	r3, r7, #5
 8004b5c:	33ff      	adds	r3, #255	@ 0xff
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	1cfb      	adds	r3, r7, #3
 8004b68:	33ff      	adds	r3, #255	@ 0xff
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	4926      	ldr	r1, [pc, #152]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d003      	beq.n	8004b7e <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	33ff      	adds	r3, #255	@ 0xff
 8004b7a:	22e3      	movs	r2, #227	@ 0xe3
 8004b7c:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 8004b7e:	4b24      	ldr	r3, [pc, #144]	@ (8004c10 <ModbusSlavePool+0x19c>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d019      	beq.n	8004bba <ModbusSlavePool+0x146>
 8004b86:	dc36      	bgt.n	8004bf6 <ModbusSlavePool+0x182>
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	dc34      	bgt.n	8004bf6 <ModbusSlavePool+0x182>
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	db31      	blt.n	8004bf4 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004b90:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004b92:	789b      	ldrb	r3, [r3, #2]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	4a1b      	ldr	r2, [pc, #108]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004b9a:	78d2      	ldrb	r2, [r2, #3]
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c14 <ModbusSlavePool+0x1a0>)
 8004ba2:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 8004ba4:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004ba6:	791b      	ldrb	r3, [r3, #4]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4a16      	ldr	r2, [pc, #88]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004bae:	7952      	ldrb	r2, [r2, #5]
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	4b18      	ldr	r3, [pc, #96]	@ (8004c18 <ModbusSlavePool+0x1a4>)
 8004bb6:	801a      	strh	r2, [r3, #0]
				break;
 8004bb8:	e01d      	b.n	8004bf6 <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004bba:	4b13      	ldr	r3, [pc, #76]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004bbc:	789b      	ldrb	r3, [r3, #2]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4a11      	ldr	r2, [pc, #68]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004bc4:	78d2      	ldrb	r2, [r2, #3]
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <ModbusSlavePool+0x1a8>)
 8004bcc:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 8004bce:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004bd0:	791b      	ldrb	r3, [r3, #4]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c08 <ModbusSlavePool+0x194>)
 8004bd8:	7952      	ldrb	r2, [r2, #5]
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <ModbusSlavePool+0x1ac>)
 8004be0:	801a      	strh	r2, [r3, #0]
				break;
 8004be2:	e008      	b.n	8004bf6 <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	33ff      	adds	r3, #255	@ 0xff
 8004be8:	22e0      	movs	r2, #224	@ 0xe0
 8004bea:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 8004bec:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <ModbusSlavePool+0x1b0>)
 8004bee:	2214      	movs	r2, #20
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	e000      	b.n	8004bf6 <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 8004bf4:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 8004bf6:	1d3b      	adds	r3, r7, #4
 8004bf8:	33ff      	adds	r3, #255	@ 0xff
 8004bfa:	781b      	ldrb	r3, [r3, #0]
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b042      	add	sp, #264	@ 0x108
 8004c02:	bdb0      	pop	{r4, r5, r7, pc}
 8004c04:	2000037c 	.word	0x2000037c
 8004c08:	20000ae4 	.word	0x20000ae4
 8004c0c:	2000037d 	.word	0x2000037d
 8004c10:	200003cc 	.word	0x200003cc
 8004c14:	2000037e 	.word	0x2000037e
 8004c18:	20000380 	.word	0x20000380
 8004c1c:	20000382 	.word	0x20000382
 8004c20:	20000384 	.word	0x20000384
 8004c24:	20002140 	.word	0x20002140

08004c28 <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 8004c38:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <AtParsing_Ble+0x3c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00c      	beq.n	8004c5a <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8004c40:	4b08      	ldr	r3, [pc, #32]	@ (8004c64 <AtParsing_Ble+0x3c>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4b07      	ldr	r3, [pc, #28]	@ (8004c68 <AtParsing_Ble+0x40>)
 8004c4a:	0011      	movs	r1, r2
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f015 ff77 	bl	801ab40 <strstr>
 8004c52:	1e03      	subs	r3, r0, #0
 8004c54:	d001      	beq.n	8004c5a <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 8004c5a:	697b      	ldr	r3, [r7, #20]
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b006      	add	sp, #24
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	200003ce 	.word	0x200003ce
 8004c68:	20000a14 	.word	0x20000a14

08004c6c <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
		asm ("nop");
 8004c74:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7fb fa45 	bl	8000108 <strlen>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	240e      	movs	r4, #14
 8004c82:	193b      	adds	r3, r7, r4
 8004c84:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 8004c86:	193b      	adds	r3, r7, r4
 8004c88:	881a      	ldrh	r2, [r3, #0]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <SerializeString_Ble+0x40>)
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f015 ffaa 	bl	801abe8 <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004c94:	193b      	adds	r3, r7, r4
 8004c96:	881a      	ldrh	r2, [r3, #0]
 8004c98:	4904      	ldr	r1, [pc, #16]	@ (8004cac <SerializeString_Ble+0x40>)
 8004c9a:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <SerializeString_Ble+0x44>)
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f014 f983 	bl	8018fa8 <HAL_UART_Transmit_DMA>
}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b005      	add	sp, #20
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	200008f4 	.word	0x200008f4
 8004cb0:	20000628 	.word	0x20000628

08004cb4 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	000a      	movs	r2, r1
 8004cbe:	1cfb      	adds	r3, r7, #3
 8004cc0:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8004cc2:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8004cc4:	210e      	movs	r1, #14
 8004cc6:	187b      	adds	r3, r7, r1
 8004cc8:	1cfa      	adds	r2, r7, #3
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 8004cce:	187b      	adds	r3, r7, r1
 8004cd0:	881a      	ldrh	r2, [r3, #0]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <SerializeString2+0x4c>)
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f015 ff86 	bl	801abe8 <memcpy>
    while(huart2.gState == HAL_UART_STATE_BUSY_TX);
 8004cdc:	46c0      	nop			@ (mov r8, r8)
 8004cde:	4b09      	ldr	r3, [pc, #36]	@ (8004d04 <SerializeString2+0x50>)
 8004ce0:	2288      	movs	r2, #136	@ 0x88
 8004ce2:	589b      	ldr	r3, [r3, r2]
 8004ce4:	2b21      	cmp	r3, #33	@ 0x21
 8004ce6:	d0fa      	beq.n	8004cde <SerializeString2+0x2a>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004ce8:	230e      	movs	r3, #14
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	4904      	ldr	r1, [pc, #16]	@ (8004d00 <SerializeString2+0x4c>)
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <SerializeString2+0x50>)
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f014 f958 	bl	8018fa8 <HAL_UART_Transmit_DMA>
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b004      	add	sp, #16
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200008f4 	.word	0x200008f4
 8004d04:	20000628 	.word	0x20000628

08004d08 <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 8004d0e:	1d3b      	adds	r3, r7, #4
 8004d10:	2290      	movs	r2, #144	@ 0x90
 8004d12:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	4929      	ldr	r1, [pc, #164]	@ (8004dc0 <serialEvent_Ble+0xb8>)
 8004d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc4 <serialEvent_Ble+0xbc>)
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f014 f9d5 	bl	80190cc <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d22:	4b29      	ldr	r3, [pc, #164]	@ (8004dc8 <serialEvent_Ble+0xc0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	1cbb      	adds	r3, r7, #2
 8004d2a:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 8004d2c:	1cba      	adds	r2, r7, #2
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	8812      	ldrh	r2, [r2, #0]
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d23f      	bcs.n	8004db8 <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 8004d38:	4b24      	ldr	r3, [pc, #144]	@ (8004dcc <serialEvent_Ble+0xc4>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d03a      	beq.n	8004db8 <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 8004d42:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 8004d44:	4b20      	ldr	r3, [pc, #128]	@ (8004dc8 <serialEvent_Ble+0xc0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	1cbb      	adds	r3, r7, #2
 8004d4c:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8004d4e:	003b      	movs	r3, r7
 8004d50:	1d39      	adds	r1, r7, #4
 8004d52:	1cba      	adds	r2, r7, #2
 8004d54:	8809      	ldrh	r1, [r1, #0]
 8004d56:	8812      	ldrh	r2, [r2, #0]
 8004d58:	1a8a      	subs	r2, r1, r2
 8004d5a:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <serialEvent_Ble+0xbc>)
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f014 fa20 	bl	80191a4 <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 8004d64:	4b19      	ldr	r3, [pc, #100]	@ (8004dcc <serialEvent_Ble+0xc4>)
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	2210      	movs	r2, #16
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8004d6e:	4b15      	ldr	r3, [pc, #84]	@ (8004dc4 <serialEvent_Ble+0xbc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2210      	movs	r2, #16
 8004d74:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d76:	1dfb      	adds	r3, r7, #7
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e00c      	b.n	8004d98 <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 8004d7e:	1dfb      	adds	r3, r7, #7
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	1dfb      	adds	r3, r7, #7
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	490e      	ldr	r1, [pc, #56]	@ (8004dc0 <serialEvent_Ble+0xb8>)
 8004d88:	5c89      	ldrb	r1, [r1, r2]
 8004d8a:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <serialEvent_Ble+0xc8>)
 8004d8c:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004d8e:	1dfb      	adds	r3, r7, #7
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	3201      	adds	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	1dfb      	adds	r3, r7, #7
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	1cbb      	adds	r3, r7, #2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	2190      	movs	r1, #144	@ 0x90
 8004da2:	1acb      	subs	r3, r1, r3
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d3ea      	bcc.n	8004d7e <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	4a08      	ldr	r2, [pc, #32]	@ (8004dd0 <serialEvent_Ble+0xc8>)
 8004dae:	2100      	movs	r1, #0
 8004db0:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 8004db2:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <serialEvent_Ble+0xcc>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
			}

		}
}
 8004db8:	46c0      	nop			@ (mov r8, r8)
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b002      	add	sp, #8
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000984 	.word	0x20000984
 8004dc4:	20000628 	.word	0x20000628
 8004dc8:	20000750 	.word	0x20000750
 8004dcc:	40004400 	.word	0x40004400
 8004dd0:	20000a14 	.word	0x20000a14
 8004dd4:	200003ce 	.word	0x200003ce

08004dd8 <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 8004dea:	4b18      	ldr	r3, [pc, #96]	@ (8004e4c <SendATreply_Ble+0x74>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2201      	movs	r2, #1
 8004df0:	4053      	eors	r3, r2
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00c      	beq.n	8004e12 <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 8004df8:	4b14      	ldr	r3, [pc, #80]	@ (8004e4c <SendATreply_Ble+0x74>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 8004dfe:	f004 fb9f 	bl	8009540 <millis>
 8004e02:	0003      	movs	r3, r0
 8004e04:	001a      	movs	r2, r3
 8004e06:	4b12      	ldr	r3, [pc, #72]	@ (8004e50 <SendATreply_Ble+0x78>)
 8004e08:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ff2d 	bl	8004c6c <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 8004e12:	f7ff ff79 	bl	8004d08 <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7ff ff03 	bl	8004c28 <AtParsing_Ble>
 8004e22:	0003      	movs	r3, r0
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 8004e26:	f004 fb8b 	bl	8009540 <millis>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <SendATreply_Ble+0x78>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d802      	bhi.n	8004e40 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 8004e3a:	4b04      	ldr	r3, [pc, #16]	@ (8004e4c <SendATreply_Ble+0x74>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b00a      	add	sp, #40	@ 0x28
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	200003cd 	.word	0x200003cd
 8004e50:	200003d0 	.word	0x200003d0

08004e54 <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
	//if (findLastValue((uint32_t)&eePlantilla[eeFlagBLE]) == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
		ConfigBLE_Ble ();
 8004e58:	f000 f80c 	bl	8004e74 <ConfigBLE_Ble>
	//}
	//else{
	//	if (tick_1s == 1){
			//BluetoothState = 2;
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004e5c:	4b04      	ldr	r3, [pc, #16]	@ (8004e70 <SetUpBluetooth_Ble+0x1c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2140      	movs	r1, #64	@ 0x40
 8004e62:	0018      	movs	r0, r3
 8004e64:	f00e fa59 	bl	801331a <HAL_GPIO_WritePin>
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
	//	}
	//}
}
 8004e68:	46c0      	nop			@ (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	50000800 	.word	0x50000800

08004e74 <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 8004e7a:	4b23      	ldr	r3, [pc, #140]	@ (8004f08 <ConfigBLE_Ble+0x94>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 8004e82:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <ConfigBLE_Ble+0x98>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	2140      	movs	r1, #64	@ 0x40
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f00e fa46 	bl	801331a <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8004e8e:	4b20      	ldr	r3, [pc, #128]	@ (8004f10 <ConfigBLE_Ble+0x9c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d002      	beq.n	8004e9c <ConfigBLE_Ble+0x28>
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d014      	beq.n	8004ec4 <ConfigBLE_Ble+0x50>
 8004e9a:	e027      	b.n	8004eec <ConfigBLE_Ble+0x78>
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <ConfigBLE_Ble+0x9c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	491c      	ldr	r1, [pc, #112]	@ (8004f14 <ConfigBLE_Ble+0xa0>)
 8004ea4:	481c      	ldr	r0, [pc, #112]	@ (8004f18 <ConfigBLE_Ble+0xa4>)
 8004ea6:	23fa      	movs	r3, #250	@ 0xfa
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	f7ff ff93 	bl	8004dd8 <SendATreply_Ble>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	4b16      	ldr	r3, [pc, #88]	@ (8004f10 <ConfigBLE_Ble+0x9c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d11f      	bne.n	8004efc <ConfigBLE_Ble+0x88>
				WaitSerAnsw_Ble_func(5);
 8004ebc:	2005      	movs	r0, #5
 8004ebe:	f000 fb33 	bl	8005528 <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 8004ec2:	e01b      	b.n	8004efc <ConfigBLE_Ble+0x88>
			}
			break;
*/
	  case 5:			//  Manuel,   Cambia el nombre de difusion
		  	//if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-HEALTH\r\n\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <ConfigBLE_Ble+0x9c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	001a      	movs	r2, r3
 8004eca:	4912      	ldr	r1, [pc, #72]	@ (8004f14 <ConfigBLE_Ble+0xa0>)
 8004ecc:	4813      	ldr	r0, [pc, #76]	@ (8004f1c <ConfigBLE_Ble+0xa8>)
 8004ece:	23fa      	movs	r3, #250	@ 0xfa
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f7ff ff7f 	bl	8004dd8 <SendATreply_Ble>
 8004eda:	0002      	movs	r2, r0
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <ConfigBLE_Ble+0x9c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d10d      	bne.n	8004f00 <ConfigBLE_Ble+0x8c>
				WaitSerAnsw_Ble_func(6);
 8004ee4:	2006      	movs	r0, #6
 8004ee6:	f000 fb1f 	bl	8005528 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8004eea:	e009      	b.n	8004f00 <ConfigBLE_Ble+0x8c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8004eec:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <ConfigBLE_Ble+0xac>)
 8004eee:	2202      	movs	r2, #2
 8004ef0:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f000 fb18 	bl	8005528 <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8004ef8:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8004efa:	e002      	b.n	8004f02 <ConfigBLE_Ble+0x8e>
			break;
 8004efc:	46c0      	nop			@ (mov r8, r8)
 8004efe:	e000      	b.n	8004f02 <ConfigBLE_Ble+0x8e>
			break;
 8004f00:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004f02:	46c0      	nop			@ (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	200008d7 	.word	0x200008d7
 8004f0c:	50000800 	.word	0x50000800
 8004f10:	20000000 	.word	0x20000000
 8004f14:	0801aed0 	.word	0x0801aed0
 8004f18:	0801aedc 	.word	0x0801aedc
 8004f1c:	0801aee8 	.word	0x0801aee8
 8004f20:	2000004c 	.word	0x2000004c

08004f24 <GetParamBluetooth_Ble>:
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af02      	add	r7, sp, #8
	uint8_t i =0;
 8004f2a:	1dfb      	adds	r3, r7, #7
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004f30:	4b25      	ldr	r3, [pc, #148]	@ (8004fc8 <GetParamBluetooth_Ble+0xa4>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	2140      	movs	r1, #64	@ 0x40
 8004f36:	0018      	movs	r0, r3
 8004f38:	f00e f9ef 	bl	801331a <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8004f3c:	4b23      	ldr	r3, [pc, #140]	@ (8004fcc <GetParamBluetooth_Ble+0xa8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d002      	beq.n	8004f4a <GetParamBluetooth_Ble+0x26>
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d033      	beq.n	8004fb0 <GetParamBluetooth_Ble+0x8c>
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
		 ParamItem = 1;
	 break;
	}
}
 8004f48:	e03a      	b.n	8004fc0 <GetParamBluetooth_Ble+0x9c>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004f4a:	4b20      	ldr	r3, [pc, #128]	@ (8004fcc <GetParamBluetooth_Ble+0xa8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	001a      	movs	r2, r3
 8004f50:	491f      	ldr	r1, [pc, #124]	@ (8004fd0 <GetParamBluetooth_Ble+0xac>)
 8004f52:	4820      	ldr	r0, [pc, #128]	@ (8004fd4 <GetParamBluetooth_Ble+0xb0>)
 8004f54:	23fa      	movs	r3, #250	@ 0xfa
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f7ff ff3c 	bl	8004dd8 <SendATreply_Ble>
 8004f60:	0002      	movs	r2, r0
 8004f62:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <GetParamBluetooth_Ble+0xa8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d129      	bne.n	8004fbe <GetParamBluetooth_Ble+0x9a>
			 foo = strchr(SerialAnswBLE,'=');
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd8 <GetParamBluetooth_Ble+0xb4>)
 8004f6c:	213d      	movs	r1, #61	@ 0x3d
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f015 fdd8 	bl	801ab24 <strchr>
 8004f74:	0003      	movs	r3, r0
 8004f76:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e00f      	b.n	8004fa0 <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8004f80:	1dfb      	adds	r3, r7, #7
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	3301      	adds	r3, #1
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	18d2      	adds	r2, r2, r3
 8004f8a:	1dfb      	adds	r3, r7, #7
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	3302      	adds	r3, #2
 8004f90:	7811      	ldrb	r1, [r2, #0]
 8004f92:	4a12      	ldr	r2, [pc, #72]	@ (8004fdc <GetParamBluetooth_Ble+0xb8>)
 8004f94:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	1dfb      	adds	r3, r7, #7
 8004f9c:	3201      	adds	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b0b      	cmp	r3, #11
 8004fa6:	d9eb      	bls.n	8004f80 <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 8004fa8:	4b08      	ldr	r3, [pc, #32]	@ (8004fcc <GetParamBluetooth_Ble+0xa8>)
 8004faa:	2202      	movs	r2, #2
 8004fac:	601a      	str	r2, [r3, #0]
		 break;
 8004fae:	e006      	b.n	8004fbe <GetParamBluetooth_Ble+0x9a>
		 BluetoothState = 3;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <GetParamBluetooth_Ble+0xbc>)
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	701a      	strb	r2, [r3, #0]
		 ParamItem = 1;
 8004fb6:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <GetParamBluetooth_Ble+0xa8>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
	 break;
 8004fbc:	e000      	b.n	8004fc0 <GetParamBluetooth_Ble+0x9c>
		 break;
 8004fbe:	46c0      	nop			@ (mov r8, r8)
}
 8004fc0:	46c0      	nop			@ (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	50000800 	.word	0x50000800
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	0801af08 	.word	0x0801af08
 8004fd4:	0801af14 	.word	0x0801af14
 8004fd8:	20000a14 	.word	0x20000a14
 8004fdc:	20001e6c 	.word	0x20001e6c
 8004fe0:	2000004c 	.word	0x2000004c

08004fe4 <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
//uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
    asm ("nop");
 8004fea:	46c0      	nop			@ (mov r8, r8)

    uint8_t i_ = 0;
 8004fec:	1dbb      	adds	r3, r7, #6
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8005160 <TransmitReceive_Ble+0x17c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2140      	movs	r1, #64	@ 0x40
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f00e f98e 	bl	801331a <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 8004ffe:	f7ff fe83 	bl	8004d08 <serialEvent_Ble>
	if (receivecomplete_Ble){
 8005002:	4b58      	ldr	r3, [pc, #352]	@ (8005164 <TransmitReceive_Ble+0x180>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d100      	bne.n	800500c <TransmitReceive_Ble+0x28>
 800500a:	e1da      	b.n	80053c2 <TransmitReceive_Ble+0x3de>
		 receivecomplete_Ble = 0;
 800500c:	4b55      	ldr	r3, [pc, #340]	@ (8005164 <TransmitReceive_Ble+0x180>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 8005012:	4b55      	ldr	r3, [pc, #340]	@ (8005168 <TransmitReceive_Ble+0x184>)
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <TransmitReceive_Ble+0x3c>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 800501a:	4b53      	ldr	r3, [pc, #332]	@ (8005168 <TransmitReceive_Ble+0x184>)
 800501c:	2201      	movs	r2, #1
 800501e:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",(size_t) 2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 8005020:	4952      	ldr	r1, [pc, #328]	@ (800516c <TransmitReceive_Ble+0x188>)
 8005022:	4b53      	ldr	r3, [pc, #332]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 8005024:	2202      	movs	r2, #2
 8005026:	0018      	movs	r0, r3
 8005028:	f015 fd66 	bl	801aaf8 <memcmp>
 800502c:	1e03      	subs	r3, r0, #0
 800502e:	d102      	bne.n	8005036 <TransmitReceive_Ble+0x52>
			 codeTX = 0x21;
 8005030:	4b50      	ldr	r3, [pc, #320]	@ (8005174 <TransmitReceive_Ble+0x190>)
 8005032:	2221      	movs	r2, #33	@ 0x21
 8005034:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 8005036:	4950      	ldr	r1, [pc, #320]	@ (8005178 <TransmitReceive_Ble+0x194>)
 8005038:	4b4d      	ldr	r3, [pc, #308]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 800503a:	2202      	movs	r2, #2
 800503c:	0018      	movs	r0, r3
 800503e:	f015 fd5b 	bl	801aaf8 <memcmp>
 8005042:	1e03      	subs	r3, r0, #0
 8005044:	d102      	bne.n	800504c <TransmitReceive_Ble+0x68>
			 codeTX = 0x5C;
 8005046:	4b4b      	ldr	r3, [pc, #300]	@ (8005174 <TransmitReceive_Ble+0x190>)
 8005048:	225c      	movs	r2, #92	@ 0x5c
 800504a:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 800504c:	494b      	ldr	r1, [pc, #300]	@ (800517c <TransmitReceive_Ble+0x198>)
 800504e:	4b48      	ldr	r3, [pc, #288]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 8005050:	2202      	movs	r2, #2
 8005052:	0018      	movs	r0, r3
 8005054:	f015 fd50 	bl	801aaf8 <memcmp>
 8005058:	1e03      	subs	r3, r0, #0
 800505a:	d102      	bne.n	8005062 <TransmitReceive_Ble+0x7e>
			 codeTX = 0x80;
 800505c:	4b45      	ldr	r3, [pc, #276]	@ (8005174 <TransmitReceive_Ble+0x190>)
 800505e:	2280      	movs	r2, #128	@ 0x80
 8005060:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x81",2) == 0){
 8005062:	4947      	ldr	r1, [pc, #284]	@ (8005180 <TransmitReceive_Ble+0x19c>)
 8005064:	4b42      	ldr	r3, [pc, #264]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 8005066:	2202      	movs	r2, #2
 8005068:	0018      	movs	r0, r3
 800506a:	f015 fd45 	bl	801aaf8 <memcmp>
 800506e:	1e03      	subs	r3, r0, #0
 8005070:	d102      	bne.n	8005078 <TransmitReceive_Ble+0x94>
			 codeTX = 0x81;
 8005072:	4b40      	ldr	r3, [pc, #256]	@ (8005174 <TransmitReceive_Ble+0x190>)
 8005074:	2281      	movs	r2, #129	@ 0x81
 8005076:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8005078:	4942      	ldr	r1, [pc, #264]	@ (8005184 <TransmitReceive_Ble+0x1a0>)
 800507a:	4b3d      	ldr	r3, [pc, #244]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 800507c:	2202      	movs	r2, #2
 800507e:	0018      	movs	r0, r3
 8005080:	f015 fd3a 	bl	801aaf8 <memcmp>
 8005084:	1e03      	subs	r3, r0, #0
 8005086:	d102      	bne.n	800508e <TransmitReceive_Ble+0xaa>
			 codeTX = 0x3D;
 8005088:	4b3a      	ldr	r3, [pc, #232]	@ (8005174 <TransmitReceive_Ble+0x190>)
 800508a:	223d      	movs	r2, #61	@ 0x3d
 800508c:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 800508e:	493e      	ldr	r1, [pc, #248]	@ (8005188 <TransmitReceive_Ble+0x1a4>)
 8005090:	4b37      	ldr	r3, [pc, #220]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 8005092:	2202      	movs	r2, #2
 8005094:	0018      	movs	r0, r3
 8005096:	f015 fd2f 	bl	801aaf8 <memcmp>
 800509a:	1e03      	subs	r3, r0, #0
 800509c:	d106      	bne.n	80050ac <TransmitReceive_Ble+0xc8>
			 //timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
			 DevLock = 0x72;
 800509e:	4b3b      	ldr	r3, [pc, #236]	@ (800518c <TransmitReceive_Ble+0x1a8>)
 80050a0:	2272      	movs	r2, #114	@ 0x72
 80050a2:	701a      	strb	r2, [r3, #0]
			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 80050a4:	f000 fa56 	bl	8005554 <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 80050a8:	f000 fa62 	bl	8005570 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 80050ac:	4938      	ldr	r1, [pc, #224]	@ (8005190 <TransmitReceive_Ble+0x1ac>)
 80050ae:	4b30      	ldr	r3, [pc, #192]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 80050b0:	2202      	movs	r2, #2
 80050b2:	0018      	movs	r0, r3
 80050b4:	f015 fd20 	bl	801aaf8 <memcmp>
 80050b8:	1e03      	subs	r3, r0, #0
 80050ba:	d112      	bne.n	80050e2 <TransmitReceive_Ble+0xfe>
		    asm ("nop");
 80050bc:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 80050be:	4b35      	ldr	r3, [pc, #212]	@ (8005194 <TransmitReceive_Ble+0x1b0>)
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	4b35      	ldr	r3, [pc, #212]	@ (8005198 <TransmitReceive_Ble+0x1b4>)
 80050c4:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 80050c6:	4b34      	ldr	r3, [pc, #208]	@ (8005198 <TransmitReceive_Ble+0x1b4>)
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	4b34      	ldr	r3, [pc, #208]	@ (800519c <TransmitReceive_Ble+0x1b8>)
 80050cc:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 80050ce:	4b34      	ldr	r3, [pc, #208]	@ (80051a0 <TransmitReceive_Ble+0x1bc>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80050d4:	4b32      	ldr	r3, [pc, #200]	@ (80051a0 <TransmitReceive_Ble+0x1bc>)
 80050d6:	781a      	ldrb	r2, [r3, #0]
 80050d8:	4b30      	ldr	r3, [pc, #192]	@ (800519c <TransmitReceive_Ble+0x1b8>)
 80050da:	0011      	movs	r1, r2
 80050dc:	0018      	movs	r0, r3
 80050de:	f7ff fde9 	bl	8004cb4 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 80050e2:	4930      	ldr	r1, [pc, #192]	@ (80051a4 <TransmitReceive_Ble+0x1c0>)
 80050e4:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 80050e6:	2202      	movs	r2, #2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f015 fd05 	bl	801aaf8 <memcmp>
 80050ee:	1e03      	subs	r3, r0, #0
 80050f0:	d16c      	bne.n	80051cc <TransmitReceive_Ble+0x1e8>
			uint8_t foo,foo2;
		    asm ("nop");
 80050f2:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 80050f4:	4b28      	ldr	r3, [pc, #160]	@ (8005198 <TransmitReceive_Ble+0x1b4>)
 80050f6:	781a      	ldrb	r2, [r3, #0]
 80050f8:	1dfb      	adds	r3, r7, #7
 80050fa:	210f      	movs	r1, #15
 80050fc:	400a      	ands	r2, r1
 80050fe:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 8005100:	1dfb      	adds	r3, r7, #7
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b0b      	cmp	r3, #11
 8005106:	d905      	bls.n	8005114 <TransmitReceive_Ble+0x130>
			  foo = PasswordALG & (~0xF8);
 8005108:	4b23      	ldr	r3, [pc, #140]	@ (8005198 <TransmitReceive_Ble+0x1b4>)
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	2107      	movs	r1, #7
 8005110:	400a      	ands	r2, r1
 8005112:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 8005114:	1dfb      	adds	r3, r7, #7
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	3302      	adds	r3, #2
 800511a:	4a23      	ldr	r2, [pc, #140]	@ (80051a8 <TransmitReceive_Ble+0x1c4>)
 800511c:	5cd2      	ldrb	r2, [r2, r3]
 800511e:	4b1e      	ldr	r3, [pc, #120]	@ (8005198 <TransmitReceive_Ble+0x1b4>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	b2da      	uxtb	r2, r3
 8005126:	1d7b      	adds	r3, r7, #5
 8005128:	3a01      	subs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 800512c:	4b10      	ldr	r3, [pc, #64]	@ (8005170 <TransmitReceive_Ble+0x18c>)
 800512e:	789b      	ldrb	r3, [r3, #2]
 8005130:	1d7a      	adds	r2, r7, #5
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d139      	bne.n	80051ac <TransmitReceive_Ble+0x1c8>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 8005138:	4b14      	ldr	r3, [pc, #80]	@ (800518c <TransmitReceive_Ble+0x1a8>)
 800513a:	2272      	movs	r2, #114	@ 0x72
 800513c:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 800513e:	4b17      	ldr	r3, [pc, #92]	@ (800519c <TransmitReceive_Ble+0x1b8>)
 8005140:	22f1      	movs	r2, #241	@ 0xf1
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	4b15      	ldr	r3, [pc, #84]	@ (800519c <TransmitReceive_Ble+0x1b8>)
 8005146:	223d      	movs	r2, #61	@ 0x3d
 8005148:	705a      	strb	r2, [r3, #1]
 800514a:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <TransmitReceive_Ble+0x1bc>)
 800514c:	2202      	movs	r2, #2
 800514e:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8005150:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <TransmitReceive_Ble+0x1bc>)
 8005152:	781a      	ldrb	r2, [r3, #0]
 8005154:	4b11      	ldr	r3, [pc, #68]	@ (800519c <TransmitReceive_Ble+0x1b8>)
 8005156:	0011      	movs	r1, r2
 8005158:	0018      	movs	r0, r3
 800515a:	f7ff fdab 	bl	8004cb4 <SerializeString2>
 800515e:	e035      	b.n	80051cc <TransmitReceive_Ble+0x1e8>
 8005160:	50000800 	.word	0x50000800
 8005164:	200003ce 	.word	0x200003ce
 8005168:	20001f68 	.word	0x20001f68
 800516c:	0801af20 	.word	0x0801af20
 8005170:	20000a14 	.word	0x20000a14
 8005174:	20001eb0 	.word	0x20001eb0
 8005178:	0801af24 	.word	0x0801af24
 800517c:	0801af28 	.word	0x0801af28
 8005180:	0801af2c 	.word	0x0801af2c
 8005184:	0801af30 	.word	0x0801af30
 8005188:	0801af34 	.word	0x0801af34
 800518c:	20002181 	.word	0x20002181
 8005190:	0801af38 	.word	0x0801af38
 8005194:	200003dd 	.word	0x200003dd
 8005198:	200003dc 	.word	0x200003dc
 800519c:	20001ec4 	.word	0x20001ec4
 80051a0:	20001ebe 	.word	0x20001ebe
 80051a4:	0801af3c 	.word	0x0801af3c
 80051a8:	20001e6c 	.word	0x20001e6c
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 80051ac:	4b9a      	ldr	r3, [pc, #616]	@ (8005418 <TransmitReceive_Ble+0x434>)
 80051ae:	22f1      	movs	r2, #241	@ 0xf1
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	4b99      	ldr	r3, [pc, #612]	@ (8005418 <TransmitReceive_Ble+0x434>)
 80051b4:	223e      	movs	r2, #62	@ 0x3e
 80051b6:	705a      	strb	r2, [r3, #1]
 80051b8:	4b98      	ldr	r3, [pc, #608]	@ (800541c <TransmitReceive_Ble+0x438>)
 80051ba:	2202      	movs	r2, #2
 80051bc:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 80051be:	4b97      	ldr	r3, [pc, #604]	@ (800541c <TransmitReceive_Ble+0x438>)
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	4b95      	ldr	r3, [pc, #596]	@ (8005418 <TransmitReceive_Ble+0x434>)
 80051c4:	0011      	movs	r1, r2
 80051c6:	0018      	movs	r0, r3
 80051c8:	f7ff fd74 	bl	8004cb4 <SerializeString2>
			}
		}

		//if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
		if ( (DevLock == 0x72) || (statComWIFIFlag) ){
 80051cc:	4b94      	ldr	r3, [pc, #592]	@ (8005420 <TransmitReceive_Ble+0x43c>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b72      	cmp	r3, #114	@ 0x72
 80051d2:	d004      	beq.n	80051de <TransmitReceive_Ble+0x1fa>
 80051d4:	4b93      	ldr	r3, [pc, #588]	@ (8005424 <TransmitReceive_Ble+0x440>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d100      	bne.n	80051de <TransmitReceive_Ble+0x1fa>
 80051dc:	e0f1      	b.n	80053c2 <TransmitReceive_Ble+0x3de>
		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 80051de:	4992      	ldr	r1, [pc, #584]	@ (8005428 <TransmitReceive_Ble+0x444>)
 80051e0:	4b92      	ldr	r3, [pc, #584]	@ (800542c <TransmitReceive_Ble+0x448>)
 80051e2:	2202      	movs	r2, #2
 80051e4:	0018      	movs	r0, r3
 80051e6:	f015 fc87 	bl	801aaf8 <memcmp>
 80051ea:	1e03      	subs	r3, r0, #0
 80051ec:	d102      	bne.n	80051f4 <TransmitReceive_Ble+0x210>
			 codeTX = 0x60;
 80051ee:	4b90      	ldr	r3, [pc, #576]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80051f0:	2260      	movs	r2, #96	@ 0x60
 80051f2:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 80051f4:	498f      	ldr	r1, [pc, #572]	@ (8005434 <TransmitReceive_Ble+0x450>)
 80051f6:	4b8d      	ldr	r3, [pc, #564]	@ (800542c <TransmitReceive_Ble+0x448>)
 80051f8:	2202      	movs	r2, #2
 80051fa:	0018      	movs	r0, r3
 80051fc:	f015 fc7c 	bl	801aaf8 <memcmp>
 8005200:	1e03      	subs	r3, r0, #0
 8005202:	d102      	bne.n	800520a <TransmitReceive_Ble+0x226>
			 codeTX = 0x61;
 8005204:	4b8a      	ldr	r3, [pc, #552]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005206:	2261      	movs	r2, #97	@ 0x61
 8005208:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 800520a:	498b      	ldr	r1, [pc, #556]	@ (8005438 <TransmitReceive_Ble+0x454>)
 800520c:	4b87      	ldr	r3, [pc, #540]	@ (800542c <TransmitReceive_Ble+0x448>)
 800520e:	2202      	movs	r2, #2
 8005210:	0018      	movs	r0, r3
 8005212:	f015 fc71 	bl	801aaf8 <memcmp>
 8005216:	1e03      	subs	r3, r0, #0
 8005218:	d102      	bne.n	8005220 <TransmitReceive_Ble+0x23c>
			 codeTX = 0x53;
 800521a:	4b85      	ldr	r3, [pc, #532]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 800521c:	2253      	movs	r2, #83	@ 0x53
 800521e:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 8005220:	4986      	ldr	r1, [pc, #536]	@ (800543c <TransmitReceive_Ble+0x458>)
 8005222:	4b82      	ldr	r3, [pc, #520]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005224:	2202      	movs	r2, #2
 8005226:	0018      	movs	r0, r3
 8005228:	f015 fc66 	bl	801aaf8 <memcmp>
 800522c:	1e03      	subs	r3, r0, #0
 800522e:	d102      	bne.n	8005236 <TransmitReceive_Ble+0x252>
			 codeTX = 0x50;
 8005230:	4b7f      	ldr	r3, [pc, #508]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005232:	2250      	movs	r2, #80	@ 0x50
 8005234:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 8005236:	4982      	ldr	r1, [pc, #520]	@ (8005440 <TransmitReceive_Ble+0x45c>)
 8005238:	4b7c      	ldr	r3, [pc, #496]	@ (800542c <TransmitReceive_Ble+0x448>)
 800523a:	2202      	movs	r2, #2
 800523c:	0018      	movs	r0, r3
 800523e:	f015 fc5b 	bl	801aaf8 <memcmp>
 8005242:	1e03      	subs	r3, r0, #0
 8005244:	d102      	bne.n	800524c <TransmitReceive_Ble+0x268>
			 codeTX = 0x51;
 8005246:	4b7a      	ldr	r3, [pc, #488]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005248:	2251      	movs	r2, #81	@ 0x51
 800524a:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 800524c:	497d      	ldr	r1, [pc, #500]	@ (8005444 <TransmitReceive_Ble+0x460>)
 800524e:	4b77      	ldr	r3, [pc, #476]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005250:	2202      	movs	r2, #2
 8005252:	0018      	movs	r0, r3
 8005254:	f015 fc50 	bl	801aaf8 <memcmp>
 8005258:	1e03      	subs	r3, r0, #0
 800525a:	d102      	bne.n	8005262 <TransmitReceive_Ble+0x27e>
			 codeTX = 0x46;
 800525c:	4b74      	ldr	r3, [pc, #464]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 800525e:	2246      	movs	r2, #70	@ 0x46
 8005260:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005262:	4979      	ldr	r1, [pc, #484]	@ (8005448 <TransmitReceive_Ble+0x464>)
 8005264:	4b71      	ldr	r3, [pc, #452]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005266:	2202      	movs	r2, #2
 8005268:	0018      	movs	r0, r3
 800526a:	f015 fc45 	bl	801aaf8 <memcmp>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d102      	bne.n	8005278 <TransmitReceive_Ble+0x294>
			 codeTX = 0x49;
 8005272:	4b6f      	ldr	r3, [pc, #444]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005274:	2249      	movs	r2, #73	@ 0x49
 8005276:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8005278:	4974      	ldr	r1, [pc, #464]	@ (800544c <TransmitReceive_Ble+0x468>)
 800527a:	4b6c      	ldr	r3, [pc, #432]	@ (800542c <TransmitReceive_Ble+0x448>)
 800527c:	2202      	movs	r2, #2
 800527e:	0018      	movs	r0, r3
 8005280:	f015 fc3a 	bl	801aaf8 <memcmp>
 8005284:	1e03      	subs	r3, r0, #0
 8005286:	d102      	bne.n	800528e <TransmitReceive_Ble+0x2aa>
			 codeTX = 0x4A;
 8005288:	4b69      	ldr	r3, [pc, #420]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 800528a:	224a      	movs	r2, #74	@ 0x4a
 800528c:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 800528e:	4970      	ldr	r1, [pc, #448]	@ (8005450 <TransmitReceive_Ble+0x46c>)
 8005290:	4b66      	ldr	r3, [pc, #408]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005292:	2202      	movs	r2, #2
 8005294:	0018      	movs	r0, r3
 8005296:	f015 fc2f 	bl	801aaf8 <memcmp>
 800529a:	1e03      	subs	r3, r0, #0
 800529c:	d102      	bne.n	80052a4 <TransmitReceive_Ble+0x2c0>
			 codeTX = 0x54;
 800529e:	4b64      	ldr	r3, [pc, #400]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80052a0:	2254      	movs	r2, #84	@ 0x54
 80052a2:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 80052a4:	496b      	ldr	r1, [pc, #428]	@ (8005454 <TransmitReceive_Ble+0x470>)
 80052a6:	4b61      	ldr	r3, [pc, #388]	@ (800542c <TransmitReceive_Ble+0x448>)
 80052a8:	2202      	movs	r2, #2
 80052aa:	0018      	movs	r0, r3
 80052ac:	f015 fc24 	bl	801aaf8 <memcmp>
 80052b0:	1e03      	subs	r3, r0, #0
 80052b2:	d102      	bne.n	80052ba <TransmitReceive_Ble+0x2d6>
	   		 codeTX = 0x80;
 80052b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80052b6:	2280      	movs	r2, #128	@ 0x80
 80052b8:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 80052ba:	4967      	ldr	r1, [pc, #412]	@ (8005458 <TransmitReceive_Ble+0x474>)
 80052bc:	4b5b      	ldr	r3, [pc, #364]	@ (800542c <TransmitReceive_Ble+0x448>)
 80052be:	2202      	movs	r2, #2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f015 fc19 	bl	801aaf8 <memcmp>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d102      	bne.n	80052d0 <TransmitReceive_Ble+0x2ec>
	   		 codeTX = 0x3D;
 80052ca:	4b59      	ldr	r3, [pc, #356]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80052cc:	223d      	movs	r2, #61	@ 0x3d
 80052ce:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 80052d0:	4962      	ldr	r1, [pc, #392]	@ (800545c <TransmitReceive_Ble+0x478>)
 80052d2:	4b56      	ldr	r3, [pc, #344]	@ (800542c <TransmitReceive_Ble+0x448>)
 80052d4:	2202      	movs	r2, #2
 80052d6:	0018      	movs	r0, r3
 80052d8:	f015 fc0e 	bl	801aaf8 <memcmp>
 80052dc:	1e03      	subs	r3, r0, #0
 80052de:	d102      	bne.n	80052e6 <TransmitReceive_Ble+0x302>
			 codeTX = 0x55;
 80052e0:	4b53      	ldr	r3, [pc, #332]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80052e2:	2255      	movs	r2, #85	@ 0x55
 80052e4:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 80052e6:	495e      	ldr	r1, [pc, #376]	@ (8005460 <TransmitReceive_Ble+0x47c>)
 80052e8:	4b50      	ldr	r3, [pc, #320]	@ (800542c <TransmitReceive_Ble+0x448>)
 80052ea:	2202      	movs	r2, #2
 80052ec:	0018      	movs	r0, r3
 80052ee:	f015 fc03 	bl	801aaf8 <memcmp>
 80052f2:	1e03      	subs	r3, r0, #0
 80052f4:	d102      	bne.n	80052fc <TransmitReceive_Ble+0x318>
	   		 codeTX = 0x56;
 80052f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80052f8:	2256      	movs	r2, #86	@ 0x56
 80052fa:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 80052fc:	4959      	ldr	r1, [pc, #356]	@ (8005464 <TransmitReceive_Ble+0x480>)
 80052fe:	4b4b      	ldr	r3, [pc, #300]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005300:	2202      	movs	r2, #2
 8005302:	0018      	movs	r0, r3
 8005304:	f015 fbf8 	bl	801aaf8 <memcmp>
 8005308:	1e03      	subs	r3, r0, #0
 800530a:	d102      	bne.n	8005312 <TransmitReceive_Ble+0x32e>
	   		 codeTX = 0x57;
 800530c:	4b48      	ldr	r3, [pc, #288]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 800530e:	2257      	movs	r2, #87	@ 0x57
 8005310:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 8005312:	4955      	ldr	r1, [pc, #340]	@ (8005468 <TransmitReceive_Ble+0x484>)
 8005314:	4b45      	ldr	r3, [pc, #276]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005316:	2202      	movs	r2, #2
 8005318:	0018      	movs	r0, r3
 800531a:	f015 fbed 	bl	801aaf8 <memcmp>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d102      	bne.n	8005328 <TransmitReceive_Ble+0x344>
	   		 codeTX = 0x58;
 8005322:	4b43      	ldr	r3, [pc, #268]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005324:	2258      	movs	r2, #88	@ 0x58
 8005326:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 8005328:	4950      	ldr	r1, [pc, #320]	@ (800546c <TransmitReceive_Ble+0x488>)
 800532a:	4b40      	ldr	r3, [pc, #256]	@ (800542c <TransmitReceive_Ble+0x448>)
 800532c:	2202      	movs	r2, #2
 800532e:	0018      	movs	r0, r3
 8005330:	f015 fbe2 	bl	801aaf8 <memcmp>
 8005334:	1e03      	subs	r3, r0, #0
 8005336:	d102      	bne.n	800533e <TransmitReceive_Ble+0x35a>
	   		 codeTX = 0x59;
 8005338:	4b3d      	ldr	r3, [pc, #244]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 800533a:	2259      	movs	r2, #89	@ 0x59
 800533c:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 800533e:	494c      	ldr	r1, [pc, #304]	@ (8005470 <TransmitReceive_Ble+0x48c>)
 8005340:	4b3a      	ldr	r3, [pc, #232]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005342:	2202      	movs	r2, #2
 8005344:	0018      	movs	r0, r3
 8005346:	f015 fbd7 	bl	801aaf8 <memcmp>
 800534a:	1e03      	subs	r3, r0, #0
 800534c:	d102      	bne.n	8005354 <TransmitReceive_Ble+0x370>
	    	 codeTX = 0x5A;
 800534e:	4b38      	ldr	r3, [pc, #224]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005350:	225a      	movs	r2, #90	@ 0x5a
 8005352:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 8005354:	4947      	ldr	r1, [pc, #284]	@ (8005474 <TransmitReceive_Ble+0x490>)
 8005356:	4b35      	ldr	r3, [pc, #212]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005358:	2202      	movs	r2, #2
 800535a:	0018      	movs	r0, r3
 800535c:	f015 fbcc 	bl	801aaf8 <memcmp>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d102      	bne.n	800536a <TransmitReceive_Ble+0x386>
	   		 codeTX = 0x5B;
 8005364:	4b32      	ldr	r3, [pc, #200]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005366:	225b      	movs	r2, #91	@ 0x5b
 8005368:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 800536a:	4943      	ldr	r1, [pc, #268]	@ (8005478 <TransmitReceive_Ble+0x494>)
 800536c:	4b2f      	ldr	r3, [pc, #188]	@ (800542c <TransmitReceive_Ble+0x448>)
 800536e:	2202      	movs	r2, #2
 8005370:	0018      	movs	r0, r3
 8005372:	f015 fbc1 	bl	801aaf8 <memcmp>
 8005376:	1e03      	subs	r3, r0, #0
 8005378:	d102      	bne.n	8005380 <TransmitReceive_Ble+0x39c>
		 	 codeTX = 0x5C;
 800537a:	4b2d      	ldr	r3, [pc, #180]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 800537c:	225c      	movs	r2, #92	@ 0x5c
 800537e:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8005380:	493e      	ldr	r1, [pc, #248]	@ (800547c <TransmitReceive_Ble+0x498>)
 8005382:	4b2a      	ldr	r3, [pc, #168]	@ (800542c <TransmitReceive_Ble+0x448>)
 8005384:	2202      	movs	r2, #2
 8005386:	0018      	movs	r0, r3
 8005388:	f015 fbb6 	bl	801aaf8 <memcmp>
 800538c:	1e03      	subs	r3, r0, #0
 800538e:	d102      	bne.n	8005396 <TransmitReceive_Ble+0x3b2>
			  codeTX = 0x5F;
 8005390:	4b27      	ldr	r3, [pc, #156]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 8005392:	225f      	movs	r2, #95	@ 0x5f
 8005394:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x62",2) == 0)	 		// CÓDIGO DE logger tiempo wifi
 8005396:	493a      	ldr	r1, [pc, #232]	@ (8005480 <TransmitReceive_Ble+0x49c>)
 8005398:	4b24      	ldr	r3, [pc, #144]	@ (800542c <TransmitReceive_Ble+0x448>)
 800539a:	2202      	movs	r2, #2
 800539c:	0018      	movs	r0, r3
 800539e:	f015 fbab 	bl	801aaf8 <memcmp>
 80053a2:	1e03      	subs	r3, r0, #0
 80053a4:	d102      	bne.n	80053ac <TransmitReceive_Ble+0x3c8>
	   		  codeTX = 0x62;
 80053a6:	4b22      	ldr	r3, [pc, #136]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80053a8:	2262      	movs	r2, #98	@ 0x62
 80053aa:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x63",2) == 0)		 	// CÓDIGO DE logger eventos wifi
 80053ac:	4935      	ldr	r1, [pc, #212]	@ (8005484 <TransmitReceive_Ble+0x4a0>)
 80053ae:	4b1f      	ldr	r3, [pc, #124]	@ (800542c <TransmitReceive_Ble+0x448>)
 80053b0:	2202      	movs	r2, #2
 80053b2:	0018      	movs	r0, r3
 80053b4:	f015 fba0 	bl	801aaf8 <memcmp>
 80053b8:	1e03      	subs	r3, r0, #0
 80053ba:	d102      	bne.n	80053c2 <TransmitReceive_Ble+0x3de>
	   		  codeTX = 0x63;
 80053bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005430 <TransmitReceive_Ble+0x44c>)
 80053be:	2263      	movs	r2, #99	@ 0x63
 80053c0:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 80053c2:	f004 f8bd 	bl	8009540 <millis>
 80053c6:	0003      	movs	r3, r0
 80053c8:	001a      	movs	r2, r3
 80053ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005488 <TransmitReceive_Ble+0x4a4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b07      	cmp	r3, #7
 80053d2:	d91d      	bls.n	8005410 <TransmitReceive_Ble+0x42c>
		TestMessMilis = millis();
 80053d4:	f004 f8b4 	bl	8009540 <millis>
 80053d8:	0003      	movs	r3, r0
 80053da:	001a      	movs	r2, r3
 80053dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005488 <TransmitReceive_Ble+0x4a4>)
 80053de:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 80053e0:	4b2a      	ldr	r3, [pc, #168]	@ (800548c <TransmitReceive_Ble+0x4a8>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b55      	cmp	r3, #85	@ 0x55
 80053e6:	d102      	bne.n	80053ee <TransmitReceive_Ble+0x40a>
		    asm ("nop");
 80053e8:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 80053ea:	f008 fdbf 	bl	800df6c <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 80053ee:	4b27      	ldr	r3, [pc, #156]	@ (800548c <TransmitReceive_Ble+0x4a8>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b55      	cmp	r3, #85	@ 0x55
 80053f4:	d10c      	bne.n	8005410 <TransmitReceive_Ble+0x42c>
		    asm ("nop");
 80053f6:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 80053f8:	4b08      	ldr	r3, [pc, #32]	@ (800541c <TransmitReceive_Ble+0x438>)
 80053fa:	781a      	ldrb	r2, [r3, #0]
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <TransmitReceive_Ble+0x434>)
 80053fe:	0011      	movs	r1, r2
 8005400:	0018      	movs	r0, r3
 8005402:	f7ff fc57 	bl	8004cb4 <SerializeString2>
			i_++;
 8005406:	1dbb      	adds	r3, r7, #6
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	1dbb      	adds	r3, r7, #6
 800540c:	3201      	adds	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b002      	add	sp, #8
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20001ec4 	.word	0x20001ec4
 800541c:	20001ebe 	.word	0x20001ebe
 8005420:	20002181 	.word	0x20002181
 8005424:	20002183 	.word	0x20002183
 8005428:	0801af40 	.word	0x0801af40
 800542c:	20000a14 	.word	0x20000a14
 8005430:	20001eb0 	.word	0x20001eb0
 8005434:	0801af44 	.word	0x0801af44
 8005438:	0801af48 	.word	0x0801af48
 800543c:	0801af4c 	.word	0x0801af4c
 8005440:	0801af50 	.word	0x0801af50
 8005444:	0801af54 	.word	0x0801af54
 8005448:	0801af58 	.word	0x0801af58
 800544c:	0801af5c 	.word	0x0801af5c
 8005450:	0801af60 	.word	0x0801af60
 8005454:	0801af28 	.word	0x0801af28
 8005458:	0801af30 	.word	0x0801af30
 800545c:	0801af64 	.word	0x0801af64
 8005460:	0801af68 	.word	0x0801af68
 8005464:	0801af6c 	.word	0x0801af6c
 8005468:	0801af70 	.word	0x0801af70
 800546c:	0801af74 	.word	0x0801af74
 8005470:	0801af78 	.word	0x0801af78
 8005474:	0801af7c 	.word	0x0801af7c
 8005478:	0801af24 	.word	0x0801af24
 800547c:	0801af80 	.word	0x0801af80
 8005480:	0801af84 	.word	0x0801af84
 8005484:	0801af88 	.word	0x0801af88
 8005488:	200003d8 	.word	0x200003d8
 800548c:	20001ea5 	.word	0x20001ea5

08005490 <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 8005494:	4b1f      	ldr	r3, [pc, #124]	@ (8005514 <Read_Inpunts_ble+0x84>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d037      	beq.n	800550c <Read_Inpunts_ble+0x7c>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005518 <Read_Inpunts_ble+0x88>)
 80054a2:	0019      	movs	r1, r3
 80054a4:	0010      	movs	r0, r2
 80054a6:	f00d ff1b 	bl	80132e0 <HAL_GPIO_ReadPin>
 80054aa:	1e03      	subs	r3, r0, #0
 80054ac:	d017      	beq.n	80054de <Read_Inpunts_ble+0x4e>
				{
					if (CntDebInp1 <= 50)
 80054ae:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b32      	cmp	r3, #50	@ 0x32
 80054b4:	d805      	bhi.n	80054c2 <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 80054b6:	4b19      	ldr	r3, [pc, #100]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4b17      	ldr	r3, [pc, #92]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054c0:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 80054c2:	4b16      	ldr	r3, [pc, #88]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b32      	cmp	r3, #50	@ 0x32
 80054c8:	d120      	bne.n	800550c <Read_Inpunts_ble+0x7c>
						{
							device_conected = 1;
 80054ca:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <Read_Inpunts_ble+0x90>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 80054d0:	4b12      	ldr	r3, [pc, #72]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054d2:	2233      	movs	r2, #51	@ 0x33
 80054d4:	701a      	strb	r2, [r3, #0]
							statComFlag = 255;
 80054d6:	4b13      	ldr	r3, [pc, #76]	@ (8005524 <Read_Inpunts_ble+0x94>)
 80054d8:	22ff      	movs	r2, #255	@ 0xff
 80054da:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
					statComFlag = 0;
				}
			}
		}
}
 80054dc:	e016      	b.n	800550c <Read_Inpunts_ble+0x7c>
				if (CntDebInp1 >= 1)
 80054de:	4b0f      	ldr	r3, [pc, #60]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <Read_Inpunts_ble+0x62>
					CntDebInp1--;
 80054e6:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054f0:	701a      	strb	r2, [r3, #0]
				if (CntDebInp1==1)
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <Read_Inpunts_ble+0x8c>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d108      	bne.n	800550c <Read_Inpunts_ble+0x7c>
					device_conected = 0;
 80054fa:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <Read_Inpunts_ble+0x90>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <Read_Inpunts_ble+0x8c>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
					statComFlag = 0;
 8005506:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <Read_Inpunts_ble+0x94>)
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
}
 800550c:	46c0      	nop			@ (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	200008d4 	.word	0x200008d4
 8005518:	50000400 	.word	0x50000400
 800551c:	200003d4 	.word	0x200003d4
 8005520:	200008d8 	.word	0x200008d8
 8005524:	20002182 	.word	0x20002182

08005528 <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	0002      	movs	r2, r0
 8005530:	1dfb      	adds	r3, r7, #7
 8005532:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <WaitSerAnsw_Ble_func+0x24>)
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 800553a:	1dfb      	adds	r3, r7, #7
 800553c:	781a      	ldrb	r2, [r3, #0]
 800553e:	4b04      	ldr	r3, [pc, #16]	@ (8005550 <WaitSerAnsw_Ble_func+0x28>)
 8005540:	601a      	str	r2, [r3, #0]
}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	b002      	add	sp, #8
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	200003cd 	.word	0x200003cd
 8005550:	20000000 	.word	0x20000000

08005554 <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <grabacion_exitosa_handshake+0x18>)
 800555a:	22f1      	movs	r2, #241	@ 0xf1
 800555c:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800555e:	4b03      	ldr	r3, [pc, #12]	@ (800556c <grabacion_exitosa_handshake+0x18>)
 8005560:	223d      	movs	r2, #61	@ 0x3d
 8005562:	705a      	strb	r2, [r3, #1]
}
 8005564:	46c0      	nop			@ (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	20001e6c 	.word	0x20001e6c

08005570 <manda_transmision>:

void manda_transmision (void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <manda_transmision+0x34>)
 8005576:	4a0c      	ldr	r2, [pc, #48]	@ (80055a8 <manda_transmision+0x38>)
 8005578:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <manda_transmision+0x3c>)
 800557c:	4a0a      	ldr	r2, [pc, #40]	@ (80055a8 <manda_transmision+0x38>)
 800557e:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <manda_transmision+0x40>)
 8005582:	4a0c      	ldr	r2, [pc, #48]	@ (80055b4 <manda_transmision+0x44>)
 8005584:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 8005586:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <manda_transmision+0x48>)
 8005588:	2202      	movs	r2, #2
 800558a:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <manda_transmision+0x4c>)
 800558e:	2201      	movs	r2, #1
 8005590:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 8005592:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <manda_transmision+0x50>)
 8005594:	2255      	movs	r2, #85	@ 0x55
 8005596:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 8005598:	4b0a      	ldr	r3, [pc, #40]	@ (80055c4 <manda_transmision+0x54>)
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]

}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20001ea0 	.word	0x20001ea0
 80055a8:	20001e6c 	.word	0x20001e6c
 80055ac:	20001e98 	.word	0x20001e98
 80055b0:	20001e9c 	.word	0x20001e9c
 80055b4:	20001e6d 	.word	0x20001e6d
 80055b8:	20001ebc 	.word	0x20001ebc
 80055bc:	20001ea8 	.word	0x20001ea8
 80055c0:	20001ea5 	.word	0x20001ea5
 80055c4:	20001eb0 	.word	0x20001eb0

080055c8 <bootloader>:
#include "main.h"
#include "customMain.h"



void bootloader (void){
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055ce:	b672      	cpsid	i
}
 80055d0:	46c0      	nop			@ (mov r8, r8)
//	//while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, direccion_fw, buffer_recepcion) != HAL_OK);
//	while(HAL_FLASH_Lock()!=  HAL_OK );

    // Desbloquea el controlador FLASH

	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x0801F000 + 4));
 80055d2:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <bootloader+0x1c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	607b      	str	r3, [r7, #4]
    //__set_MSP((*(volatile uint32_t *)(0x0801E800)) );0x801E800
	app_reset_handler();
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4798      	blx	r3
}
 80055dc:	46c0      	nop			@ (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0801f004 	.word	0x0801f004

080055e8 <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 80055ec:	4b3a      	ldr	r3, [pc, #232]	@ (80056d8 <main10+0xf0>)
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d006      	beq.n	8005602 <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 80055f4:	4b39      	ldr	r3, [pc, #228]	@ (80056dc <main10+0xf4>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	2108      	movs	r1, #8
 80055fa:	0018      	movs	r0, r3
 80055fc:	f00d fe8d 	bl	801331a <HAL_GPIO_WritePin>
 8005600:	e005      	b.n	800560e <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 8005602:	4b36      	ldr	r3, [pc, #216]	@ (80056dc <main10+0xf4>)
 8005604:	2200      	movs	r2, #0
 8005606:	2108      	movs	r1, #8
 8005608:	0018      	movs	r0, r3
 800560a:	f00d fe86 	bl	801331a <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 800560e:	4b32      	ldr	r3, [pc, #200]	@ (80056d8 <main10+0xf0>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 8005616:	2380      	movs	r3, #128	@ 0x80
 8005618:	0099      	lsls	r1, r3, #2
 800561a:	23a0      	movs	r3, #160	@ 0xa0
 800561c:	05db      	lsls	r3, r3, #23
 800561e:	2201      	movs	r2, #1
 8005620:	0018      	movs	r0, r3
 8005622:	f00d fe7a 	bl	801331a <HAL_GPIO_WritePin>
 8005626:	e007      	b.n	8005638 <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	0099      	lsls	r1, r3, #2
 800562c:	23a0      	movs	r3, #160	@ 0xa0
 800562e:	05db      	lsls	r3, r3, #23
 8005630:	2200      	movs	r2, #0
 8005632:	0018      	movs	r0, r3
 8005634:	f00d fe71 	bl	801331a <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 8005638:	4b27      	ldr	r3, [pc, #156]	@ (80056d8 <main10+0xf0>)
 800563a:	789b      	ldrb	r3, [r3, #2]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4825      	ldr	r0, [pc, #148]	@ (80056dc <main10+0xf4>)
 8005646:	2201      	movs	r2, #1
 8005648:	0019      	movs	r1, r3
 800564a:	f00d fe66 	bl	801331a <HAL_GPIO_WritePin>
 800564e:	e006      	b.n	800565e <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 8005650:	2380      	movs	r3, #128	@ 0x80
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4821      	ldr	r0, [pc, #132]	@ (80056dc <main10+0xf4>)
 8005656:	2200      	movs	r2, #0
 8005658:	0019      	movs	r1, r3
 800565a:	f00d fe5e 	bl	801331a <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 800565e:	4b1e      	ldr	r3, [pc, #120]	@ (80056d8 <main10+0xf0>)
 8005660:	791b      	ldrb	r3, [r3, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 8005666:	2380      	movs	r3, #128	@ 0x80
 8005668:	0059      	lsls	r1, r3, #1
 800566a:	23a0      	movs	r3, #160	@ 0xa0
 800566c:	05db      	lsls	r3, r3, #23
 800566e:	2201      	movs	r2, #1
 8005670:	0018      	movs	r0, r3
 8005672:	f00d fe52 	bl	801331a <HAL_GPIO_WritePin>
 8005676:	e007      	b.n	8005688 <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	0059      	lsls	r1, r3, #1
 800567c:	23a0      	movs	r3, #160	@ 0xa0
 800567e:	05db      	lsls	r3, r3, #23
 8005680:	2200      	movs	r2, #0
 8005682:	0018      	movs	r0, r3
 8005684:	f00d fe49 	bl	801331a <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 8005688:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <main10+0xf8>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	b2da      	uxtb	r2, r3
 8005690:	4b13      	ldr	r3, [pc, #76]	@ (80056e0 <main10+0xf8>)
 8005692:	701a      	strb	r2, [r3, #0]
		//if(portX[rel_fn] && (cntproc & 0x01))
		//	HAL_TIM_PWM_Start (&htim1,TIM_CHANNEL_3);
		if(portX[rel_fn]){
 8005694:	4b10      	ldr	r3, [pc, #64]	@ (80056d8 <main10+0xf0>)
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <main10+0xc0>
			HAL_TIM_PWM_Start (&htim1,TIM_CHANNEL_3);
 800569c:	4b11      	ldr	r3, [pc, #68]	@ (80056e4 <main10+0xfc>)
 800569e:	2108      	movs	r1, #8
 80056a0:	0018      	movs	r0, r3
 80056a2:	f012 fbc3 	bl	8017e2c <HAL_TIM_PWM_Start>
 80056a6:	e004      	b.n	80056b2 <main10+0xca>
		}
			//HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else{
			HAL_TIM_PWM_Stop (&htim1,TIM_CHANNEL_3);
 80056a8:	4b0e      	ldr	r3, [pc, #56]	@ (80056e4 <main10+0xfc>)
 80056aa:	2108      	movs	r1, #8
 80056ac:	0018      	movs	r0, r3
 80056ae:	f012 fc9f 	bl	8017ff0 <HAL_TIM_PWM_Stop>
		}
			//HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 80056b2:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <main10+0x100>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <main10+0x100>)
 80056bc:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 80056be:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <main10+0x100>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b27      	cmp	r3, #39	@ 0x27
 80056c4:	d904      	bls.n	80056d0 <main10+0xe8>
        asm ("nop");
 80056c6:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 80056c8:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 80056ca:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <main10+0x100>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 80056d0:	46c0      	nop			@ (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	20000b54 	.word	0x20000b54
 80056dc:	50000800 	.word	0x50000800
 80056e0:	20000b49 	.word	0x20000b49
 80056e4:	20000544 	.word	0x20000544
 80056e8:	20000bba 	.word	0x20000bba

080056ec <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 80056f0:	4b46      	ldr	r3, [pc, #280]	@ (800580c <retardoDeActuadores+0x120>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4053      	eors	r3, r2
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d114      	bne.n	8005728 <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 80056fe:	4b44      	ldr	r3, [pc, #272]	@ (8005810 <retardoDeActuadores+0x124>)
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 8005706:	4b42      	ldr	r3, [pc, #264]	@ (8005810 <retardoDeActuadores+0x124>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2201      	movs	r2, #1
 800570c:	4053      	eors	r3, r2
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10e      	bne.n	8005732 <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005714:	4b3e      	ldr	r3, [pc, #248]	@ (8005810 <retardoDeActuadores+0x124>)
 8005716:	2201      	movs	r2, #1
 8005718:	705a      	strb	r2, [r3, #1]
 800571a:	e000      	b.n	800571e <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 800571c:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 800571e:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <retardoDeActuadores+0x128>)
 8005720:	0018      	movs	r0, r3
 8005722:	f001 fcde 	bl	80070e2 <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 8005726:	e005      	b.n	8005734 <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 8005728:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[1] = 0;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 800572a:	4b39      	ldr	r3, [pc, #228]	@ (8005810 <retardoDeActuadores+0x124>)
 800572c:	2200      	movs	r2, #0
 800572e:	705a      	strb	r2, [r3, #1]
 8005730:	e000      	b.n	8005734 <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 8005732:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 8005734:	4b35      	ldr	r3, [pc, #212]	@ (800580c <retardoDeActuadores+0x120>)
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2201      	movs	r2, #1
 800573a:	4053      	eors	r3, r2
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d114      	bne.n	800576c <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 8005742:	4b33      	ldr	r3, [pc, #204]	@ (8005810 <retardoDeActuadores+0x124>)
 8005744:	789b      	ldrb	r3, [r3, #2]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 800574a:	4b31      	ldr	r3, [pc, #196]	@ (8005810 <retardoDeActuadores+0x124>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2201      	movs	r2, #1
 8005750:	4053      	eors	r3, r2
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10e      	bne.n	8005776 <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005758:	4b2d      	ldr	r3, [pc, #180]	@ (8005810 <retardoDeActuadores+0x124>)
 800575a:	2201      	movs	r2, #1
 800575c:	709a      	strb	r2, [r3, #2]
 800575e:	e000      	b.n	8005762 <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 8005760:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 8005762:	4b2d      	ldr	r3, [pc, #180]	@ (8005818 <retardoDeActuadores+0x12c>)
 8005764:	0018      	movs	r0, r3
 8005766:	f001 fcbc 	bl	80070e2 <decwreg>
			goto	revisa_ret_ventilador;		//
 800576a:	e005      	b.n	8005778 <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 800576c:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 800576e:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <retardoDeActuadores+0x124>)
 8005770:	2200      	movs	r2, #0
 8005772:	709a      	strb	r2, [r3, #2]
 8005774:	e000      	b.n	8005778 <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 8005776:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 8005778:	4b28      	ldr	r3, [pc, #160]	@ (800581c <retardoDeActuadores+0x130>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2201      	movs	r2, #1
 800577e:	4053      	eors	r3, r2
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d114      	bne.n	80057b0 <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 8005786:	4b22      	ldr	r3, [pc, #136]	@ (8005810 <retardoDeActuadores+0x124>)
 8005788:	78db      	ldrb	r3, [r3, #3]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 800578e:	4b20      	ldr	r3, [pc, #128]	@ (8005810 <retardoDeActuadores+0x124>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	4053      	eors	r3, r2
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10e      	bne.n	80057ba <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 800579c:	4b1c      	ldr	r3, [pc, #112]	@ (8005810 <retardoDeActuadores+0x124>)
 800579e:	2201      	movs	r2, #1
 80057a0:	70da      	strb	r2, [r3, #3]
 80057a2:	e000      	b.n	80057a6 <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 80057a4:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 80057a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <retardoDeActuadores+0x134>)
 80057a8:	0018      	movs	r0, r3
 80057aa:	f001 fc9a 	bl	80070e2 <decwreg>
			goto	revisa_ret_lampara;		//
 80057ae:	e005      	b.n	80057bc <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 80057b0:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 80057b2:	4b17      	ldr	r3, [pc, #92]	@ (8005810 <retardoDeActuadores+0x124>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	70da      	strb	r2, [r3, #3]
 80057b8:	e000      	b.n	80057bc <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 80057ba:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 80057bc:	4b13      	ldr	r3, [pc, #76]	@ (800580c <retardoDeActuadores+0x120>)
 80057be:	789b      	ldrb	r3, [r3, #2]
 80057c0:	2201      	movs	r2, #1
 80057c2:	4053      	eors	r3, r2
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d114      	bne.n	80057f4 <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 80057ca:	4b11      	ldr	r3, [pc, #68]	@ (8005810 <retardoDeActuadores+0x124>)
 80057cc:	791b      	ldrb	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 80057d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005810 <retardoDeActuadores+0x124>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2201      	movs	r2, #1
 80057d8:	4053      	eors	r3, r2
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10e      	bne.n	80057fe <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80057e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <retardoDeActuadores+0x124>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	711a      	strb	r2, [r3, #4]
 80057e6:	e000      	b.n	80057ea <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 80057e8:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 80057ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005824 <retardoDeActuadores+0x138>)
 80057ec:	0018      	movs	r0, r3
 80057ee:	f001 fc78 	bl	80070e2 <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 80057f2:	e005      	b.n	8005800 <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 80057f4:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 80057f6:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <retardoDeActuadores+0x124>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	711a      	strb	r2, [r3, #4]
 80057fc:	e000      	b.n	8005800 <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 80057fe:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 8005800:	4b03      	ldr	r3, [pc, #12]	@ (8005810 <retardoDeActuadores+0x124>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000ba0 	.word	0x20000ba0
 8005810:	20000c58 	.word	0x20000c58
 8005814:	20000c52 	.word	0x20000c52
 8005818:	20000c53 	.word	0x20000c53
 800581c:	20000bdc 	.word	0x20000bdc
 8005820:	20000c54 	.word	0x20000c54
 8005824:	20000c55 	.word	0x20000c55

08005828 <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
    asm ("nop");
 800582c:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 800582e:	4b4b      	ldr	r3, [pc, #300]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 8005834:	4b4a      	ldr	r3, [pc, #296]	@ (8005960 <calculando_tiempo_UNIX+0x138>)
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	2203      	movs	r2, #3
 800583a:	4013      	ands	r3, r2
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <calculando_tiempo_UNIX+0x2e>
 8005842:	4b48      	ldr	r3, [pc, #288]	@ (8005964 <calculando_tiempo_UNIX+0x13c>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d905      	bls.n	8005856 <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 800584a:	4b44      	ldr	r3, [pc, #272]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a46      	ldr	r2, [pc, #280]	@ (8005968 <calculando_tiempo_UNIX+0x140>)
 8005850:	189a      	adds	r2, r3, r2
 8005852:	4b42      	ldr	r3, [pc, #264]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 8005854:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 8005856:	4b43      	ldr	r3, [pc, #268]	@ (8005964 <calculando_tiempo_UNIX+0x13c>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 800585e:	4b41      	ldr	r3, [pc, #260]	@ (8005964 <calculando_tiempo_UNIX+0x13c>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	1e5a      	subs	r2, r3, #1
 8005864:	4b41      	ldr	r3, [pc, #260]	@ (800596c <calculando_tiempo_UNIX+0x144>)
 8005866:	0092      	lsls	r2, r2, #2
 8005868:	58d2      	ldr	r2, [r2, r3]
 800586a:	0013      	movs	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	189b      	adds	r3, r3, r2
 8005870:	011a      	lsls	r2, r3, #4
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	0113      	lsls	r3, r2, #4
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	01db      	lsls	r3, r3, #7
 800587a:	001a      	movs	r2, r3
 800587c:	4b37      	ldr	r3, [pc, #220]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	18d2      	adds	r2, r2, r3
 8005882:	4b36      	ldr	r3, [pc, #216]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 8005884:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 8005886:	4b36      	ldr	r3, [pc, #216]	@ (8005960 <calculando_tiempo_UNIX+0x138>)
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	4a39      	ldr	r2, [pc, #228]	@ (8005970 <calculando_tiempo_UNIX+0x148>)
 800588c:	189a      	adds	r2, r3, r2
 800588e:	0013      	movs	r3, r2
 8005890:	025b      	lsls	r3, r3, #9
 8005892:	189b      	adds	r3, r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	189b      	adds	r3, r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	189b      	adds	r3, r3, r2
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	01d3      	lsls	r3, r2, #7
 80058a2:	001a      	movs	r2, r3
 80058a4:	0013      	movs	r3, r2
 80058a6:	001a      	movs	r2, r3
 80058a8:	4b2c      	ldr	r3, [pc, #176]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	18d2      	adds	r2, r2, r3
 80058ae:	4b2b      	ldr	r3, [pc, #172]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 80058b0:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 80058b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005960 <calculando_tiempo_UNIX+0x138>)
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005974 <calculando_tiempo_UNIX+0x14c>)
 80058b8:	4694      	mov	ip, r2
 80058ba:	4463      	add	r3, ip
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da00      	bge.n	80058c2 <calculando_tiempo_UNIX+0x9a>
 80058c0:	3303      	adds	r3, #3
 80058c2:	109b      	asrs	r3, r3, #2
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005978 <calculando_tiempo_UNIX+0x150>)
 80058c8:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 80058ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005978 <calculando_tiempo_UNIX+0x150>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	001a      	movs	r2, r3
 80058d0:	0013      	movs	r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	011a      	lsls	r2, r3, #4
 80058d8:	1ad2      	subs	r2, r2, r3
 80058da:	0113      	lsls	r3, r2, #4
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	01db      	lsls	r3, r3, #7
 80058e0:	001a      	movs	r2, r3
 80058e2:	4b1e      	ldr	r3, [pc, #120]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	18d2      	adds	r2, r2, r3
 80058e8:	4b1c      	ldr	r3, [pc, #112]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 80058ea:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 80058ec:	4b23      	ldr	r3, [pc, #140]	@ (800597c <calculando_tiempo_UNIX+0x154>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	0013      	movs	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	189b      	adds	r3, r3, r2
 80058f8:	011a      	lsls	r2, r3, #4
 80058fa:	1ad2      	subs	r2, r2, r3
 80058fc:	0113      	lsls	r3, r2, #4
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	01db      	lsls	r3, r3, #7
 8005902:	001a      	movs	r2, r3
 8005904:	4b15      	ldr	r3, [pc, #84]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	18d2      	adds	r2, r2, r3
 800590a:	4b14      	ldr	r3, [pc, #80]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 800590c:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 800590e:	4b1c      	ldr	r3, [pc, #112]	@ (8005980 <calculando_tiempo_UNIX+0x158>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	001a      	movs	r2, r3
 8005914:	0013      	movs	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	1ad2      	subs	r2, r2, r3
 800591e:	0113      	lsls	r3, r2, #4
 8005920:	001a      	movs	r2, r3
 8005922:	4b0e      	ldr	r3, [pc, #56]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	18d2      	adds	r2, r2, r3
 8005928:	4b0c      	ldr	r3, [pc, #48]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 800592a:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 800592c:	4b15      	ldr	r3, [pc, #84]	@ (8005984 <calculando_tiempo_UNIX+0x15c>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	001a      	movs	r2, r3
 8005932:	0013      	movs	r3, r2
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	001a      	movs	r2, r3
 800593c:	4b07      	ldr	r3, [pc, #28]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	18d2      	adds	r2, r2, r3
 8005942:	4b06      	ldr	r3, [pc, #24]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 8005944:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 8005946:	4b10      	ldr	r3, [pc, #64]	@ (8005988 <calculando_tiempo_UNIX+0x160>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	001a      	movs	r2, r3
 800594c:	4b03      	ldr	r3, [pc, #12]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	18d2      	adds	r2, r2, r3
 8005952:	4b02      	ldr	r3, [pc, #8]	@ (800595c <calculando_tiempo_UNIX+0x134>)
 8005954:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 8005956:	46c0      	nop			@ (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20002124 	.word	0x20002124
 8005960:	2000211c 	.word	0x2000211c
 8005964:	2000211e 	.word	0x2000211e
 8005968:	00015180 	.word	0x00015180
 800596c:	200001c4 	.word	0x200001c4
 8005970:	fffff84e 	.word	0xfffff84e
 8005974:	fffff84f 	.word	0xfffff84f
 8005978:	20002128 	.word	0x20002128
 800597c:	2000211f 	.word	0x2000211f
 8005980:	20002120 	.word	0x20002120
 8005984:	20002121 	.word	0x20002121
 8005988:	20002122 	.word	0x20002122

0800598c <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;
extern uint16_t temperatureRTP;

//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	000a      	movs	r2, r1
 8005996:	1cfb      	adds	r3, r7, #3
 8005998:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 800599a:	230e      	movs	r3, #14
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	2200      	movs	r2, #0
 80059a0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 80059a2:	230d      	movs	r3, #13
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e011      	b.n	80059d0 <prom8m1b+0x44>
		foo += array[i];
 80059ac:	200d      	movs	r0, #13
 80059ae:	183b      	adds	r3, r7, r0
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	18d3      	adds	r3, r2, r3
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	0019      	movs	r1, r3
 80059ba:	220e      	movs	r2, #14
 80059bc:	18bb      	adds	r3, r7, r2
 80059be:	18ba      	adds	r2, r7, r2
 80059c0:	8812      	ldrh	r2, [r2, #0]
 80059c2:	188a      	adds	r2, r1, r2
 80059c4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 80059c6:	183b      	adds	r3, r7, r0
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	3201      	adds	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	230d      	movs	r3, #13
 80059d2:	18fa      	adds	r2, r7, r3
 80059d4:	1cfb      	adds	r3, r7, #3
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d3e6      	bcc.n	80059ac <prom8m1b+0x20>
	}
	foo /=  prom;
 80059de:	240e      	movs	r4, #14
 80059e0:	193b      	adds	r3, r7, r4
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	1cfb      	adds	r3, r7, #3
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	0019      	movs	r1, r3
 80059ea:	0010      	movs	r0, r2
 80059ec:	f7fa fc1e 	bl	800022c <__divsi3>
 80059f0:	0003      	movs	r3, r0
 80059f2:	001a      	movs	r2, r3
 80059f4:	193b      	adds	r3, r7, r4
 80059f6:	801a      	strh	r2, [r3, #0]
	return foo;
 80059f8:	193b      	adds	r3, r7, r4
 80059fa:	881b      	ldrh	r3, [r3, #0]
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b005      	add	sp, #20
 8005a02:	bd90      	pop	{r4, r7, pc}

08005a04 <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 8005a04:	b5b0      	push	{r4, r5, r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 8005a0a:	4be3      	ldr	r3, [pc, #908]	@ (8005d98 <prog_param+0x394>)
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4053      	eors	r3, r2
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d140      	bne.n	8005a9a <prog_param+0x96>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 8005a18:	4be0      	ldr	r3, [pc, #896]	@ (8005d9c <prog_param+0x398>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 8005a1e:	4be0      	ldr	r3, [pc, #896]	@ (8005da0 <prog_param+0x39c>)
 8005a20:	2214      	movs	r2, #20
 8005a22:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 8005a24:	4bdf      	ldr	r3, [pc, #892]	@ (8005da4 <prog_param+0x3a0>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 8005a2a:	4bdf      	ldr	r3, [pc, #892]	@ (8005da8 <prog_param+0x3a4>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8005a30:	2317      	movs	r3, #23
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e00a      	b.n	8005a50 <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 8005a3a:	2017      	movs	r0, #23
 8005a3c:	183b      	adds	r3, r7, r0
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	4ada      	ldr	r2, [pc, #872]	@ (8005dac <prog_param+0x3a8>)
 8005a42:	2100      	movs	r1, #0
 8005a44:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 8005a46:	183b      	adds	r3, r7, r0
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	183b      	adds	r3, r7, r0
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	2317      	movs	r3, #23
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b07      	cmp	r3, #7
 8005a58:	d9ef      	bls.n	8005a3a <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		//uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
		uint8_t *X = &eePlantilla[eedato_seg1];
 8005a5a:	4bd5      	ldr	r3, [pc, #852]	@ (8005db0 <prog_param+0x3ac>)
 8005a5c:	613b      	str	r3, [r7, #16]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 8005a5e:	4bd5      	ldr	r3, [pc, #852]	@ (8005db4 <prog_param+0x3b0>)
 8005a60:	60fb      	str	r3, [r7, #12]
		uint8_t *Z = &reePlantilla[eedato_seg1];
 8005a62:	4bd5      	ldr	r3, [pc, #852]	@ (8005db8 <prog_param+0x3b4>)
 8005a64:	60bb      	str	r3, [r7, #8]
		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = (uint8_t) findLastValue((uint32_t)X);	//ld (Y), A
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f7fd faf3 	bl	8003054 <findLastValue>
 8005a6e:	0003      	movs	r3, r0
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	701a      	strb	r2, [r3, #0]
		*Z = *Y;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	701a      	strb	r2, [r3, #0]
		//*Y = *X;
		X++;//incw X
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	3301      	adds	r3, #1
 8005a82:	613b      	str	r3, [r7, #16]
		Y++;//incw Y
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
		Z++;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60bb      	str	r3, [r7, #8]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4bca      	ldr	r3, [pc, #808]	@ (8005dbc <prog_param+0x3b8>)
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d802      	bhi.n	8005a9e <prog_param+0x9a>
			goto copy_eeprom;//jrule copy_eeprom
 8005a98:	e7e5      	b.n	8005a66 <prog_param+0x62>
			goto no_set_prog;
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	e000      	b.n	8005aa0 <prog_param+0x9c>
		}

no_set_prog:
 8005a9e:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 8005aa0:	4bbe      	ldr	r3, [pc, #760]	@ (8005d9c <prog_param+0x398>)
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <prog_param+0xa8>
 8005aa8:	f000 fc28 	bl	80062fc <prog_param+0x8f8>
			goto ask_btn_prsd;
 8005aac:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 8005aae:	1dfb      	adds	r3, r7, #7
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e00d      	b.n	8005ad2 <prog_param+0xce>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 8005ab6:	1dfb      	adds	r3, r7, #7
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4ac1      	ldr	r2, [pc, #772]	@ (8005dc0 <prog_param+0x3bc>)
 8005abc:	5cd3      	ldrb	r3, [r2, r3]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4053      	eors	r3, r2
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10c      	bne.n	8005ae2 <prog_param+0xde>
	for(uint8_t k=0; k<8; k++){
 8005ac8:	1dfb      	adds	r3, r7, #7
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	1dfb      	adds	r3, r7, #7
 8005ace:	3201      	adds	r2, #1
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	1dfb      	adds	r3, r7, #7
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b07      	cmp	r3, #7
 8005ad8:	d9ed      	bls.n	8005ab6 <prog_param+0xb2>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 8005ada:	4bb1      	ldr	r3, [pc, #708]	@ (8005da0 <prog_param+0x39c>)
 8005adc:	2214      	movs	r2, #20
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	e000      	b.n	8005ae4 <prog_param+0xe0>
			goto no_btn_pres; //jreq no_btn_pres
 8005ae2:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 8005ae4:	4bae      	ldr	r3, [pc, #696]	@ (8005da0 <prog_param+0x39c>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <prog_param+0xec>
 8005aec:	f000 fbf1 	bl	80062d2 <prog_param+0x8ce>
			goto no_exp_tmp;//jrne	no_exp_tmp
 8005af0:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 8005af2:	4baa      	ldr	r3, [pc, #680]	@ (8005d9c <prog_param+0x398>)
 8005af4:	789b      	ldrb	r3, [r3, #2]
 8005af6:	2201      	movs	r2, #1
 8005af8:	4053      	eors	r3, r2
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d114      	bne.n	8005b2a <prog_param+0x126>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 8005b00:	4ba6      	ldr	r3, [pc, #664]	@ (8005d9c <prog_param+0x398>)
 8005b02:	791b      	ldrb	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d100      	bne.n	8005b0a <prog_param+0x106>
 8005b08:	e268      	b.n	8005fdc <prog_param+0x5d8>
			goto jmp_nv2Menu2;
 8005b0a:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 8005b0c:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005b0e:	4bad      	ldr	r3, [pc, #692]	@ (8005dc4 <prog_param+0x3c0>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2207      	movs	r2, #7
 8005b14:	4013      	ands	r3, r2
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	4bab      	ldr	r3, [pc, #684]	@ (8005dc8 <prog_param+0x3c4>)
 8005b1a:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 8005b1c:	4baa      	ldr	r3, [pc, #680]	@ (8005dc8 <prog_param+0x3c4>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d901      	bls.n	8005b28 <prog_param+0x124>
 8005b24:	f000 fbc3 	bl	80062ae <prog_param+0x8aa>
 8005b28:	e305      	b.n	8006136 <prog_param+0x732>
			goto noMenu2;
 8005b2a:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 8005b2c:	4b9b      	ldr	r3, [pc, #620]	@ (8005d9c <prog_param+0x398>)
 8005b2e:	78db      	ldrb	r3, [r3, #3]
 8005b30:	2201      	movs	r2, #1
 8005b32:	4053      	eors	r3, r2
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d100      	bne.n	8005b3c <prog_param+0x138>
 8005b3a:	e0cc      	b.n	8005cd6 <prog_param+0x2d2>
			goto sel_param;
 8005b3c:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 8005b3e:	4ba0      	ldr	r3, [pc, #640]	@ (8005dc0 <prog_param+0x3bc>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 8005b44:	4b9e      	ldr	r3, [pc, #632]	@ (8005dc0 <prog_param+0x3bc>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 8005b4a:	4b97      	ldr	r3, [pc, #604]	@ (8005da8 <prog_param+0x3a4>)
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	4b9e      	ldr	r3, [pc, #632]	@ (8005dc8 <prog_param+0x3c4>)
 8005b50:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 8005b52:	4b9e      	ldr	r3, [pc, #632]	@ (8005dcc <prog_param+0x3c8>)
 8005b54:	2209      	movs	r2, #9
 8005b56:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 8005b58:	4b9d      	ldr	r3, [pc, #628]	@ (8005dd0 <prog_param+0x3cc>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 8005b5e:	f000 fbd9 	bl	8006314 <md_dif_math>
		param = wreg;		//mov param,wreg
 8005b62:	4b9c      	ldr	r3, [pc, #624]	@ (8005dd4 <prog_param+0x3d0>)
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	4b90      	ldr	r3, [pc, #576]	@ (8005da8 <prog_param+0x3a4>)
 8005b68:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 8005b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8005da8 <prog_param+0x3a4>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	220f      	movs	r2, #15
 8005b70:	4013      	ands	r3, r2
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	4b94      	ldr	r3, [pc, #592]	@ (8005dc8 <prog_param+0x3c4>)
 8005b76:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005b78:	4b93      	ldr	r3, [pc, #588]	@ (8005dc8 <prog_param+0x3c4>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	d840      	bhi.n	8005c02 <prog_param+0x1fe>
 8005b80:	009a      	lsls	r2, r3, #2
 8005b82:	4b95      	ldr	r3, [pc, #596]	@ (8005dd8 <prog_param+0x3d4>)
 8005b84:	18d3      	adds	r3, r2, r3
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 8005b8a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 8005b8c:	2125      	movs	r1, #37	@ 0x25
 8005b8e:	2005      	movs	r0, #5
 8005b90:	f001 fbc2 	bl	8007318 <op_menu>
		goto ask_enter;//jra ask_enter
 8005b94:	e03a      	b.n	8005c0c <prog_param+0x208>
			case 1: goto opc01m01;
 8005b96:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 8005b98:	210f      	movs	r1, #15
 8005b9a:	200d      	movs	r0, #13
 8005b9c:	f001 fbbc 	bl	8007318 <op_menu>
		goto ask_enter; // jra ask_enter
 8005ba0:	e034      	b.n	8005c0c <prog_param+0x208>
			case 2: goto opc02m01;
 8005ba2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8005ba4:	210a      	movs	r1, #10
 8005ba6:	2020      	movs	r0, #32
 8005ba8:	f001 fbb6 	bl	8007318 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bac:	e02e      	b.n	8005c0c <prog_param+0x208>
			case 3: goto opc03m01;
 8005bae:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 8005bb0:	210b      	movs	r1, #11
 8005bb2:	2020      	movs	r0, #32
 8005bb4:	f001 fbb0 	bl	8007318 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bb8:	e028      	b.n	8005c0c <prog_param+0x208>
			case 4: goto opc04m01;
 8005bba:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8005bbc:	210f      	movs	r1, #15
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f001 fbaa 	bl	8007318 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005bc4:	e022      	b.n	8005c0c <prog_param+0x208>
			case 5: goto opc05m01;
 8005bc6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 8005bc8:	2105      	movs	r1, #5
 8005bca:	2025      	movs	r0, #37	@ 0x25
 8005bcc:	f001 fba4 	bl	8007318 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bd0:	e01c      	b.n	8005c0c <prog_param+0x208>
			case 6: goto opc06m01;
 8005bd2:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 8005bd4:	2127      	movs	r1, #39	@ 0x27
 8005bd6:	200f      	movs	r0, #15
 8005bd8:	f001 fb9e 	bl	8007318 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bdc:	e016      	b.n	8005c0c <prog_param+0x208>
			case 7: goto opc07m01;
 8005bde:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 8005be0:	210a      	movs	r1, #10
 8005be2:	200f      	movs	r0, #15
 8005be4:	f001 fb98 	bl	8007318 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005be8:	e010      	b.n	8005c0c <prog_param+0x208>
			case 8: goto opc08m01;
 8005bea:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8005bec:	210e      	movs	r1, #14
 8005bee:	2005      	movs	r0, #5
 8005bf0:	f001 fb92 	bl	8007318 <op_menu>
		goto ask_enter;//jra ask_enter
 8005bf4:	e00a      	b.n	8005c0c <prog_param+0x208>
			case 9: goto opc09m01;
 8005bf6:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 8005bf8:	210e      	movs	r1, #14
 8005bfa:	201f      	movs	r0, #31
 8005bfc:	f001 fb8c 	bl	8007318 <op_menu>
		goto ask_enter;//jra	ask_enter
 8005c00:	e004      	b.n	8005c0c <prog_param+0x208>
			default: goto opcNA;
 8005c02:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005c04:	2126      	movs	r1, #38	@ 0x26
 8005c06:	2026      	movs	r0, #38	@ 0x26
 8005c08:	f001 fb86 	bl	8007318 <op_menu>
		datled_clear();
 8005c0c:	f001 fb9e 	bl	800734c <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 8005c10:	4b6b      	ldr	r3, [pc, #428]	@ (8005dc0 <prog_param+0x3bc>)
 8005c12:	789b      	ldrb	r3, [r3, #2]
 8005c14:	2201      	movs	r2, #1
 8005c16:	4053      	eors	r3, r2
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d157      	bne.n	8005cce <prog_param+0x2ca>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 8005c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8005d9c <prog_param+0x398>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 8005c24:	4b60      	ldr	r3, [pc, #384]	@ (8005da8 <prog_param+0x3a4>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d100      	bne.n	8005c2e <prog_param+0x22a>
 8005c2c:	e353      	b.n	80062d6 <prog_param+0x8d2>
			goto ask_set_prog;//jrne ask_set_prog
 8005c2e:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 8005c30:	4b5d      	ldr	r3, [pc, #372]	@ (8005da8 <prog_param+0x3a4>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d14c      	bne.n	8005cd2 <prog_param+0x2ce>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 8005c38:	4b5c      	ldr	r3, [pc, #368]	@ (8005dac <prog_param+0x3a8>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4053      	eors	r3, r2
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <prog_param+0x24a>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 8005c46:	4b65      	ldr	r3, [pc, #404]	@ (8005ddc <prog_param+0x3d8>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e000      	b.n	8005c50 <prog_param+0x24c>
			goto no_desh_forz;
 8005c4e:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 8005c50:	4b56      	ldr	r3, [pc, #344]	@ (8005dac <prog_param+0x3a8>)
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2201      	movs	r2, #1
 8005c56:	4053      	eors	r3, r2
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d12f      	bne.n	8005cbe <prog_param+0x2ba>
		flags_menu[1] = 0; //bres flags_menu,#1
 8005c5e:	4b53      	ldr	r3, [pc, #332]	@ (8005dac <prog_param+0x3a8>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 8005c64:	4b53      	ldr	r3, [pc, #332]	@ (8005db4 <prog_param+0x3b0>)
 8005c66:	2239      	movs	r2, #57	@ 0x39
 8005c68:	5c9a      	ldrb	r2, [r3, r2]
 8005c6a:	4b52      	ldr	r3, [pc, #328]	@ (8005db4 <prog_param+0x3b0>)
 8005c6c:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 8005c6e:	4b51      	ldr	r3, [pc, #324]	@ (8005db4 <prog_param+0x3b0>)
 8005c70:	223a      	movs	r2, #58	@ 0x3a
 8005c72:	5c9a      	ldrb	r2, [r3, r2]
 8005c74:	4b4f      	ldr	r3, [pc, #316]	@ (8005db4 <prog_param+0x3b0>)
 8005c76:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 8005c78:	4b4e      	ldr	r3, [pc, #312]	@ (8005db4 <prog_param+0x3b0>)
 8005c7a:	223b      	movs	r2, #59	@ 0x3b
 8005c7c:	5c9a      	ldrb	r2, [r3, r2]
 8005c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8005db4 <prog_param+0x3b0>)
 8005c80:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8005c82:	4b4c      	ldr	r3, [pc, #304]	@ (8005db4 <prog_param+0x3b0>)
 8005c84:	223c      	movs	r2, #60	@ 0x3c
 8005c86:	5c9a      	ldrb	r2, [r3, r2]
 8005c88:	4b4a      	ldr	r3, [pc, #296]	@ (8005db4 <prog_param+0x3b0>)
 8005c8a:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 8005c8c:	4b49      	ldr	r3, [pc, #292]	@ (8005db4 <prog_param+0x3b0>)
 8005c8e:	223d      	movs	r2, #61	@ 0x3d
 8005c90:	5c99      	ldrb	r1, [r3, r2]
 8005c92:	4b48      	ldr	r3, [pc, #288]	@ (8005db4 <prog_param+0x3b0>)
 8005c94:	222d      	movs	r2, #45	@ 0x2d
 8005c96:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 8005c98:	4b46      	ldr	r3, [pc, #280]	@ (8005db4 <prog_param+0x3b0>)
 8005c9a:	223e      	movs	r2, #62	@ 0x3e
 8005c9c:	5c99      	ldrb	r1, [r3, r2]
 8005c9e:	4b45      	ldr	r3, [pc, #276]	@ (8005db4 <prog_param+0x3b0>)
 8005ca0:	222e      	movs	r2, #46	@ 0x2e
 8005ca2:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8005ca4:	4b43      	ldr	r3, [pc, #268]	@ (8005db4 <prog_param+0x3b0>)
 8005ca6:	223f      	movs	r2, #63	@ 0x3f
 8005ca8:	5c99      	ldrb	r1, [r3, r2]
 8005caa:	4b42      	ldr	r3, [pc, #264]	@ (8005db4 <prog_param+0x3b0>)
 8005cac:	222f      	movs	r2, #47	@ 0x2f
 8005cae:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 8005cb0:	4b40      	ldr	r3, [pc, #256]	@ (8005db4 <prog_param+0x3b0>)
 8005cb2:	2240      	movs	r2, #64	@ 0x40
 8005cb4:	5c99      	ldrb	r1, [r3, r2]
 8005cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005db4 <prog_param+0x3b0>)
 8005cb8:	2230      	movs	r2, #48	@ 0x30
 8005cba:	5499      	strb	r1, [r3, r2]
 8005cbc:	e000      	b.n	8005cc0 <prog_param+0x2bc>
			goto no_def_param;
 8005cbe:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 8005cc0:	4b47      	ldr	r3, [pc, #284]	@ (8005de0 <prog_param+0x3dc>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 8005cc6:	4b47      	ldr	r3, [pc, #284]	@ (8005de4 <prog_param+0x3e0>)
 8005cc8:	22aa      	movs	r2, #170	@ 0xaa
 8005cca:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 8005ccc:	e306      	b.n	80062dc <prog_param+0x8d8>
			goto fin_sel_param;
 8005cce:	46c0      	nop			@ (mov r8, r8)
 8005cd0:	e315      	b.n	80062fe <prog_param+0x8fa>
			goto fin_sel_param; //jrne fin_sel_param
 8005cd2:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 8005cd4:	e313      	b.n	80062fe <prog_param+0x8fa>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 8005cd6:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 8005cd8:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <prog_param+0x3a4>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	220f      	movs	r2, #15
 8005cde:	4013      	ands	r3, r2
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	4b39      	ldr	r3, [pc, #228]	@ (8005dc8 <prog_param+0x3c4>)
 8005ce4:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005ce6:	4b38      	ldr	r3, [pc, #224]	@ (8005dc8 <prog_param+0x3c4>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b09      	cmp	r3, #9
 8005cec:	d900      	bls.n	8005cf0 <prog_param+0x2ec>
 8005cee:	e132      	b.n	8005f56 <prog_param+0x552>
 8005cf0:	009a      	lsls	r2, r3, #2
 8005cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8005de8 <prog_param+0x3e4>)
 8005cf4:	18d3      	adds	r3, r2, r3
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 8005cfa:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 8005cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dec <prog_param+0x3e8>)
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 fbe2 	bl	80064c8 <TwoByteInArrayToWord>
 8005d04:	0003      	movs	r3, r0
 8005d06:	001c      	movs	r4, r3
 8005d08:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <prog_param+0x3ec>)
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 fbdc 	bl	80064c8 <TwoByteInArrayToWord>
 8005d10:	0003      	movs	r3, r0
 8005d12:	001d      	movs	r5, r3
 8005d14:	4b37      	ldr	r3, [pc, #220]	@ (8005df4 <prog_param+0x3f0>)
 8005d16:	0018      	movs	r0, r3
 8005d18:	f000 fbd6 	bl	80064c8 <TwoByteInArrayToWord>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	001a      	movs	r2, r3
 8005d20:	2302      	movs	r3, #2
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2301      	movs	r3, #1
 8005d26:	0029      	movs	r1, r5
 8005d28:	0020      	movs	r0, r4
 8005d2a:	f001 fb49 	bl	80073c0 <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 8005d2e:	e117      	b.n	8005f60 <prog_param+0x55c>
			case 1: goto opc01m01nv2;
 8005d30:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 8005d32:	4b31      	ldr	r3, [pc, #196]	@ (8005df8 <prog_param+0x3f4>)
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 fbc7 	bl	80064c8 <TwoByteInArrayToWord>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	2304      	movs	r3, #4
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2303      	movs	r3, #3
 8005d44:	2100      	movs	r1, #0
 8005d46:	2063      	movs	r0, #99	@ 0x63
 8005d48:	f001 fb3a 	bl	80073c0 <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005d4c:	e108      	b.n	8005f60 <prog_param+0x55c>
			case 2: goto opc02m01nv2;
 8005d4e:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 8005d50:	4b26      	ldr	r3, [pc, #152]	@ (8005dec <prog_param+0x3e8>)
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 fbb8 	bl	80064c8 <TwoByteInArrayToWord>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	3396      	adds	r3, #150	@ 0x96
 8005d5c:	001c      	movs	r4, r3
 8005d5e:	4b25      	ldr	r3, [pc, #148]	@ (8005df4 <prog_param+0x3f0>)
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 fbb1 	bl	80064c8 <TwoByteInArrayToWord>
 8005d66:	0003      	movs	r3, r0
 8005d68:	001d      	movs	r5, r3
 8005d6a:	4b23      	ldr	r3, [pc, #140]	@ (8005df8 <prog_param+0x3f4>)
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 fbab 	bl	80064c8 <TwoByteInArrayToWord>
 8005d72:	0003      	movs	r3, r0
 8005d74:	18eb      	adds	r3, r5, r3
 8005d76:	330a      	adds	r3, #10
 8005d78:	001d      	movs	r5, r3
 8005d7a:	4b20      	ldr	r3, [pc, #128]	@ (8005dfc <prog_param+0x3f8>)
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f000 fba3 	bl	80064c8 <TwoByteInArrayToWord>
 8005d82:	0003      	movs	r3, r0
 8005d84:	001a      	movs	r2, r3
 8005d86:	232e      	movs	r3, #46	@ 0x2e
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	232d      	movs	r3, #45	@ 0x2d
 8005d8c:	0029      	movs	r1, r5
 8005d8e:	0020      	movs	r0, r4
 8005d90:	f001 fb16 	bl	80073c0 <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005d94:	e0e4      	b.n	8005f60 <prog_param+0x55c>
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	20000c14 	.word	0x20000c14
 8005d9c:	20000be4 	.word	0x20000be4
 8005da0:	20000b6e 	.word	0x20000b6e
 8005da4:	20000bfc 	.word	0x20000bfc
 8005da8:	20000bfb 	.word	0x20000bfb
 8005dac:	20000c44 	.word	0x20000c44
 8005db0:	0803f000 	.word	0x0803f000
 8005db4:	20000138 	.word	0x20000138
 8005db8:	20000c88 	.word	0x20000c88
 8005dbc:	200001b7 	.word	0x200001b7
 8005dc0:	20000bec 	.word	0x20000bec
 8005dc4:	20000bfa 	.word	0x20000bfa
 8005dc8:	200008d0 	.word	0x200008d0
 8005dcc:	20000bfe 	.word	0x20000bfe
 8005dd0:	20000c00 	.word	0x20000c00
 8005dd4:	20000b53 	.word	0x20000b53
 8005dd8:	0801afcc 	.word	0x0801afcc
 8005ddc:	20000c4c 	.word	0x20000c4c
 8005de0:	20000c60 	.word	0x20000c60
 8005de4:	20000c5f 	.word	0x20000c5f
 8005de8:	0801aff4 	.word	0x0801aff4
 8005dec:	20000147 	.word	0x20000147
 8005df0:	20000145 	.word	0x20000145
 8005df4:	20000139 	.word	0x20000139
 8005df8:	2000013b 	.word	0x2000013b
 8005dfc:	20000165 	.word	0x20000165
			case 3: goto opc03m01nv2;
 8005e00:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 8005e02:	4bd4      	ldr	r3, [pc, #848]	@ (8006154 <prog_param+0x750>)
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 fb5f 	bl	80064c8 <TwoByteInArrayToWord>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	3b0a      	subs	r3, #10
 8005e0e:	001c      	movs	r4, r3
 8005e10:	4bd1      	ldr	r3, [pc, #836]	@ (8006158 <prog_param+0x754>)
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 fb58 	bl	80064c8 <TwoByteInArrayToWord>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	3b96      	subs	r3, #150	@ 0x96
 8005e1c:	001d      	movs	r5, r3
 8005e1e:	4bcf      	ldr	r3, [pc, #828]	@ (800615c <prog_param+0x758>)
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 fb51 	bl	80064c8 <TwoByteInArrayToWord>
 8005e26:	0003      	movs	r3, r0
 8005e28:	001a      	movs	r2, r3
 8005e2a:	2330      	movs	r3, #48	@ 0x30
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	232f      	movs	r3, #47	@ 0x2f
 8005e30:	0029      	movs	r1, r5
 8005e32:	0020      	movs	r0, r4
 8005e34:	f001 fac4 	bl	80073c0 <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 8005e38:	e092      	b.n	8005f60 <prog_param+0x55c>
			case 4: goto opc04m01nv2;
 8005e3a:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 8005e3c:	4bc8      	ldr	r3, [pc, #800]	@ (8006160 <prog_param+0x75c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <prog_param+0x44a>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 8005e44:	4bc6      	ldr	r3, [pc, #792]	@ (8006160 <prog_param+0x75c>)
 8005e46:	791b      	ldrb	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00c      	beq.n	8005e66 <prog_param+0x462>
				goto toggle_opc04m01nv2;
 8005e4c:	e000      	b.n	8005e50 <prog_param+0x44c>
				goto toggle_opc04m01nv2;
 8005e4e:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 8005e50:	4bc4      	ldr	r3, [pc, #784]	@ (8006164 <prog_param+0x760>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	4053      	eors	r3, r2
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	4193      	sbcs	r3, r2
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	4bc0      	ldr	r3, [pc, #768]	@ (8006164 <prog_param+0x760>)
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e000      	b.n	8005e68 <prog_param+0x464>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 8005e66:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005e68:	2101      	movs	r1, #1
 8005e6a:	2028      	movs	r0, #40	@ 0x28
 8005e6c:	f001 fa54 	bl	8007318 <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 8005e70:	4bbc      	ldr	r3, [pc, #752]	@ (8006164 <prog_param+0x760>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2201      	movs	r2, #1
 8005e76:	4053      	eors	r3, r2
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <prog_param+0x484>
			op_menu (0x00, 0x1D);
 8005e7e:	211d      	movs	r1, #29
 8005e80:	2000      	movs	r0, #0
 8005e82:	f001 fa49 	bl	8007318 <op_menu>
 8005e86:	e000      	b.n	8005e8a <prog_param+0x486>
				goto dpy2_opc04m01nv2;
 8005e88:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005e8a:	f001 fa5f 	bl	800734c <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005e8e:	e067      	b.n	8005f60 <prog_param+0x55c>
			case 5: goto opc05m01nv2;
 8005e90:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 8005e92:	2105      	movs	r1, #5
 8005e94:	2025      	movs	r0, #37	@ 0x25
 8005e96:	f001 fa3f 	bl	8007318 <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 8005e9a:	4bb3      	ldr	r3, [pc, #716]	@ (8006168 <prog_param+0x764>)
 8005e9c:	2263      	movs	r2, #99	@ 0x63
 8005e9e:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 8005ea0:	4bb2      	ldr	r3, [pc, #712]	@ (800616c <prog_param+0x768>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 8005ea6:	4bb2      	ldr	r3, [pc, #712]	@ (8006170 <prog_param+0x76c>)
 8005ea8:	781a      	ldrb	r2, [r3, #0]
 8005eaa:	4bb2      	ldr	r3, [pc, #712]	@ (8006174 <prog_param+0x770>)
 8005eac:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 8005eae:	f000 fa31 	bl	8006314 <md_dif_math>
			key = wreg;//	mov	key,wreg
 8005eb2:	4bb1      	ldr	r3, [pc, #708]	@ (8006178 <prog_param+0x774>)
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	4bae      	ldr	r3, [pc, #696]	@ (8006170 <prog_param+0x76c>)
 8005eb8:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 8005eba:	f000 fd3b 	bl	8006934 <soloent1>
			datled_clear();
 8005ebe:	f001 fa45 	bl	800734c <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 8005ec2:	e04d      	b.n	8005f60 <prog_param+0x55c>
			case 6: goto opc06m01nv2;
 8005ec4:	46c0      	nop			@ (mov r8, r8)
			op_menu  (reePlantilla[eeversion1], reePlantilla[eeversion2]/10);
 8005ec6:	4bad      	ldr	r3, [pc, #692]	@ (800617c <prog_param+0x778>)
 8005ec8:	227b      	movs	r2, #123	@ 0x7b
 8005eca:	5c9c      	ldrb	r4, [r3, r2]
 8005ecc:	4bab      	ldr	r3, [pc, #684]	@ (800617c <prog_param+0x778>)
 8005ece:	227c      	movs	r2, #124	@ 0x7c
 8005ed0:	5c9b      	ldrb	r3, [r3, r2]
 8005ed2:	210a      	movs	r1, #10
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7fa f91f 	bl	8000118 <__udivsi3>
 8005eda:	0003      	movs	r3, r0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	0019      	movs	r1, r3
 8005ee0:	0020      	movs	r0, r4
 8005ee2:	f001 fa19 	bl	8007318 <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005ee6:	e03b      	b.n	8005f60 <prog_param+0x55c>
			case 7: goto opc07m01nv2;
 8005ee8:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 8005eea:	4b9d      	ldr	r3, [pc, #628]	@ (8006160 <prog_param+0x75c>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <prog_param+0x4f8>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 8005ef2:	4b9b      	ldr	r3, [pc, #620]	@ (8006160 <prog_param+0x75c>)
 8005ef4:	791b      	ldrb	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00c      	beq.n	8005f14 <prog_param+0x510>
			   goto toggle_opc07m01nv2;
 8005efa:	e000      	b.n	8005efe <prog_param+0x4fa>
			   goto toggle_opc07m01nv2;
 8005efc:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 8005efe:	4b99      	ldr	r3, [pc, #612]	@ (8006164 <prog_param+0x760>)
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2201      	movs	r2, #1
 8005f04:	4053      	eors	r3, r2
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	4193      	sbcs	r3, r2
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4b95      	ldr	r3, [pc, #596]	@ (8006164 <prog_param+0x760>)
 8005f10:	705a      	strb	r2, [r3, #1]
 8005f12:	e000      	b.n	8005f16 <prog_param+0x512>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 8005f14:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005f16:	2101      	movs	r1, #1
 8005f18:	2028      	movs	r0, #40	@ 0x28
 8005f1a:	f001 f9fd 	bl	8007318 <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8005f1e:	4b91      	ldr	r3, [pc, #580]	@ (8006164 <prog_param+0x760>)
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2201      	movs	r2, #1
 8005f24:	4053      	eors	r3, r2
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <prog_param+0x532>
			op_menu (0x00, 0x1D);
 8005f2c:	211d      	movs	r1, #29
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f001 f9f2 	bl	8007318 <op_menu>
 8005f34:	e000      	b.n	8005f38 <prog_param+0x534>
				goto dpy2_opc07m01nv2;
 8005f36:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005f38:	f001 fa08 	bl	800734c <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005f3c:	e010      	b.n	8005f60 <prog_param+0x55c>
			case 8: goto opc08m01nv2;
 8005f3e:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8005f40:	210e      	movs	r1, #14
 8005f42:	2005      	movs	r0, #5
 8005f44:	f001 f9e8 	bl	8007318 <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8005f48:	e00a      	b.n	8005f60 <prog_param+0x55c>
			case 9: goto opc09m01nv2;
 8005f4a:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8005f4c:	210e      	movs	r1, #14
 8005f4e:	201f      	movs	r0, #31
 8005f50:	f001 f9e2 	bl	8007318 <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 8005f54:	e004      	b.n	8005f60 <prog_param+0x55c>
			default: goto opcNAnv2;
 8005f56:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8005f58:	2126      	movs	r1, #38	@ 0x26
 8005f5a:	2026      	movs	r0, #38	@ 0x26
 8005f5c:	f001 f9dc 	bl	8007318 <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8005f60:	4b7f      	ldr	r3, [pc, #508]	@ (8006160 <prog_param+0x75c>)
 8005f62:	789b      	ldrb	r3, [r3, #2]
 8005f64:	2201      	movs	r2, #1
 8005f66:	4053      	eors	r3, r2
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d12e      	bne.n	8005fcc <prog_param+0x5c8>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8005f6e:	4b84      	ldr	r3, [pc, #528]	@ (8006180 <prog_param+0x77c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 8005f74:	4b83      	ldr	r3, [pc, #524]	@ (8006184 <prog_param+0x780>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	d129      	bne.n	8005fd0 <prog_param+0x5cc>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 8005f7c:	4b82      	ldr	r3, [pc, #520]	@ (8006188 <prog_param+0x784>)
 8005f7e:	2273      	movs	r2, #115	@ 0x73
 8005f80:	5c9a      	ldrb	r2, [r3, r2]
 8005f82:	4b7b      	ldr	r3, [pc, #492]	@ (8006170 <prog_param+0x76c>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d124      	bne.n	8005fd4 <prog_param+0x5d0>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 8005f8a:	4976      	ldr	r1, [pc, #472]	@ (8006164 <prog_param+0x760>)
 8005f8c:	487c      	ldr	r0, [pc, #496]	@ (8006180 <prog_param+0x77c>)
 8005f8e:	2303      	movs	r3, #3
 8005f90:	2202      	movs	r2, #2
 8005f92:	f007 fd31 	bl	800d9f8 <Bset_Clear_trfst>
			param2 = 0;//clr param2
 8005f96:	4b7d      	ldr	r3, [pc, #500]	@ (800618c <prog_param+0x788>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 8005f9c:	4b78      	ldr	r3, [pc, #480]	@ (8006180 <prog_param+0x77c>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	4053      	eors	r3, r2
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <prog_param+0x5ae>
			flags_menu[3] = 1;//bset flags_menu,#3
 8005faa:	4b6e      	ldr	r3, [pc, #440]	@ (8006164 <prog_param+0x760>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	70da      	strb	r2, [r3, #3]
 8005fb0:	e000      	b.n	8005fb4 <prog_param+0x5b0>
				goto noSetFlagLU;
 8005fb2:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 8005fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8006164 <prog_param+0x760>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 8005fba:	4b73      	ldr	r3, [pc, #460]	@ (8006188 <prog_param+0x784>)
 8005fbc:	2252      	movs	r2, #82	@ 0x52
 8005fbe:	5c9b      	ldrb	r3, [r3, r2]
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d109      	bne.n	8005fd8 <prog_param+0x5d4>
			flags_menu[4] = 1;//	bset flags_menu,#4
 8005fc4:	4b67      	ldr	r3, [pc, #412]	@ (8006164 <prog_param+0x760>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 8005fca:	e198      	b.n	80062fe <prog_param+0x8fa>
				goto no_enter_nv2;
 8005fcc:	46c0      	nop			@ (mov r8, r8)
 8005fce:	e196      	b.n	80062fe <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2;
 8005fd0:	46c0      	nop			@ (mov r8, r8)
 8005fd2:	e194      	b.n	80062fe <prog_param+0x8fa>
				goto no_enter_nv2;//jrne no_enter_nv2
 8005fd4:	46c0      	nop			@ (mov r8, r8)
 8005fd6:	e192      	b.n	80062fe <prog_param+0x8fa>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8005fd8:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8005fda:	e190      	b.n	80062fe <prog_param+0x8fa>
		goto menu2; //jp menu2
 8005fdc:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8005fde:	4960      	ldr	r1, [pc, #384]	@ (8006160 <prog_param+0x75c>)
 8005fe0:	485f      	ldr	r0, [pc, #380]	@ (8006160 <prog_param+0x75c>)
 8005fe2:	2305      	movs	r3, #5
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f007 fd22 	bl	800da2e <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8005fea:	4b68      	ldr	r3, [pc, #416]	@ (800618c <prog_param+0x788>)
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	4b61      	ldr	r3, [pc, #388]	@ (8006174 <prog_param+0x770>)
 8005ff0:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 8005ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8006168 <prog_param+0x764>)
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8005ff8:	4b5c      	ldr	r3, [pc, #368]	@ (800616c <prog_param+0x768>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8005ffe:	f000 f989 	bl	8006314 <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 8006002:	4b5d      	ldr	r3, [pc, #372]	@ (8006178 <prog_param+0x774>)
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	4b61      	ldr	r3, [pc, #388]	@ (800618c <prog_param+0x788>)
 8006008:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 800600a:	4b60      	ldr	r3, [pc, #384]	@ (800618c <prog_param+0x788>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2207      	movs	r2, #7
 8006010:	4013      	ands	r3, r2
 8006012:	b2da      	uxtb	r2, r3
 8006014:	4b57      	ldr	r3, [pc, #348]	@ (8006174 <prog_param+0x770>)
 8006016:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8006018:	4b56      	ldr	r3, [pc, #344]	@ (8006174 <prog_param+0x770>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d822      	bhi.n	8006066 <prog_param+0x662>
 8006020:	009a      	lsls	r2, r3, #2
 8006022:	4b5b      	ldr	r3, [pc, #364]	@ (8006190 <prog_param+0x78c>)
 8006024:	18d3      	adds	r3, r2, r3
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 800602a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 800602c:	210f      	movs	r1, #15
 800602e:	2000      	movs	r0, #0
 8006030:	f001 f972 	bl	8007318 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8006034:	e01c      	b.n	8006070 <prog_param+0x66c>
			case 1: goto opc01m02;
 8006036:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8006038:	2127      	movs	r1, #39	@ 0x27
 800603a:	2011      	movs	r0, #17
 800603c:	f001 f96c 	bl	8007318 <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8006040:	e016      	b.n	8006070 <prog_param+0x66c>
			case 2: goto opc02m02;
 8006042:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 8006044:	211d      	movs	r1, #29
 8006046:	2027      	movs	r0, #39	@ 0x27
 8006048:	f001 f966 	bl	8007318 <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 800604c:	e010      	b.n	8006070 <prog_param+0x66c>
			case 3: goto opc03m02;
 800604e:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8006050:	210e      	movs	r1, #14
 8006052:	2005      	movs	r0, #5
 8006054:	f001 f960 	bl	8007318 <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8006058:	e00a      	b.n	8006070 <prog_param+0x66c>
			case 4: goto opc04m02;
 800605a:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 800605c:	210e      	movs	r1, #14
 800605e:	201f      	movs	r0, #31
 8006060:	f001 f95a 	bl	8007318 <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 8006064:	e004      	b.n	8006070 <prog_param+0x66c>
			default: goto opcNA_m02;
 8006066:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8006068:	2126      	movs	r1, #38	@ 0x26
 800606a:	2026      	movs	r0, #38	@ 0x26
 800606c:	f001 f954 	bl	8007318 <op_menu>
		datled_clear();
 8006070:	f001 f96c 	bl	800734c <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 8006074:	4b3a      	ldr	r3, [pc, #232]	@ (8006160 <prog_param+0x75c>)
 8006076:	789b      	ldrb	r3, [r3, #2]
 8006078:	2201      	movs	r2, #1
 800607a:	4053      	eors	r3, r2
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d155      	bne.n	800612e <prog_param+0x72a>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 8006082:	4b3f      	ldr	r3, [pc, #252]	@ (8006180 <prog_param+0x77c>)
 8006084:	2201      	movs	r2, #1
 8006086:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 8006088:	4b40      	ldr	r3, [pc, #256]	@ (800618c <prog_param+0x788>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b04      	cmp	r3, #4
 800608e:	d100      	bne.n	8006092 <prog_param+0x68e>
 8006090:	e123      	b.n	80062da <prog_param+0x8d6>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 8006092:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 8006094:	4b3d      	ldr	r3, [pc, #244]	@ (800618c <prog_param+0x788>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d14a      	bne.n	8006132 <prog_param+0x72e>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 800609c:	4b38      	ldr	r3, [pc, #224]	@ (8006180 <prog_param+0x77c>)
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 80060a2:	4b30      	ldr	r3, [pc, #192]	@ (8006164 <prog_param+0x760>)
 80060a4:	78db      	ldrb	r3, [r3, #3]
 80060a6:	2201      	movs	r2, #1
 80060a8:	4053      	eors	r3, r2
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <prog_param+0x6b4>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 80060b0:	4b33      	ldr	r3, [pc, #204]	@ (8006180 <prog_param+0x77c>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e000      	b.n	80060ba <prog_param+0x6b6>
			goto noOnLuz;
 80060b8:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 80060ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006164 <prog_param+0x760>)
 80060bc:	789b      	ldrb	r3, [r3, #2]
 80060be:	2201      	movs	r2, #1
 80060c0:	4053      	eors	r3, r2
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <prog_param+0x6cc>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 80060c8:	4b32      	ldr	r3, [pc, #200]	@ (8006194 <prog_param+0x790>)
 80060ca:	2278      	movs	r2, #120	@ 0x78
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e000      	b.n	80060d2 <prog_param+0x6ce>
			goto noOffManto;
 80060d0:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 80060d2:	4b31      	ldr	r3, [pc, #196]	@ (8006198 <prog_param+0x794>)
 80060d4:	2252      	movs	r2, #82	@ 0x52
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 80060da:	4b22      	ldr	r3, [pc, #136]	@ (8006164 <prog_param+0x760>)
 80060dc:	791b      	ldrb	r3, [r3, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	4053      	eors	r3, r2
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <prog_param+0x6ee>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 80060e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006198 <prog_param+0x794>)
 80060ea:	2252      	movs	r2, #82	@ 0x52
 80060ec:	2120      	movs	r1, #32
 80060ee:	5499      	strb	r1, [r3, r2]
 80060f0:	e000      	b.n	80060f4 <prog_param+0x6f0>
			goto noFahrenheitFlagDpy;
 80060f2:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == reePlantilla[eeescala]){
 80060f4:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <prog_param+0x794>)
 80060f6:	2252      	movs	r2, #82	@ 0x52
 80060f8:	5c9a      	ldrb	r2, [r3, r2]
 80060fa:	4b20      	ldr	r3, [pc, #128]	@ (800617c <prog_param+0x778>)
 80060fc:	2152      	movs	r1, #82	@ 0x52
 80060fe:	5c5b      	ldrb	r3, [r3, r1]
 8006100:	429a      	cmp	r2, r3
 8006102:	d012      	beq.n	800612a <prog_param+0x726>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 8006104:	4b24      	ldr	r3, [pc, #144]	@ (8006198 <prog_param+0x794>)
 8006106:	2252      	movs	r2, #82	@ 0x52
 8006108:	5c9a      	ldrb	r2, [r3, r2]
 800610a:	4b24      	ldr	r3, [pc, #144]	@ (800619c <prog_param+0x798>)
 800610c:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 800610e:	4b23      	ldr	r3, [pc, #140]	@ (800619c <prog_param+0x798>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	001a      	movs	r2, r3
 8006114:	4b22      	ldr	r3, [pc, #136]	@ (80061a0 <prog_param+0x79c>)
 8006116:	0019      	movs	r1, r3
 8006118:	0010      	movs	r0, r2
 800611a:	f001 f8e9 	bl	80072f0 <wreeprom>
		reePlantilla[eeescala] = waux;
 800611e:	4b1f      	ldr	r3, [pc, #124]	@ (800619c <prog_param+0x798>)
 8006120:	7819      	ldrb	r1, [r3, #0]
 8006122:	4b16      	ldr	r3, [pc, #88]	@ (800617c <prog_param+0x778>)
 8006124:	2252      	movs	r2, #82	@ 0x52
 8006126:	5499      	strb	r1, [r3, r2]
		 goto cancel_prog; //jp cancel_prog
 8006128:	e0d8      	b.n	80062dc <prog_param+0x8d8>
			goto noCambiaEscala;//	jreq noCambiaEscala
 800612a:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 800612c:	e0d6      	b.n	80062dc <prog_param+0x8d8>
			goto fin_menu2;
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	e0e5      	b.n	80062fe <prog_param+0x8fa>
			goto fin_menu2;//	jrne fin_menu2;
 8006132:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8006134:	e0e3      	b.n	80062fe <prog_param+0x8fa>
			switch(STM8_A)
 8006136:	009a      	lsls	r2, r3, #2
 8006138:	4b1a      	ldr	r3, [pc, #104]	@ (80061a4 <prog_param+0x7a0>)
 800613a:	18d3      	adds	r3, r2, r3
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 8006140:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 8006142:	4b07      	ldr	r3, [pc, #28]	@ (8006160 <prog_param+0x75c>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d12e      	bne.n	80061a8 <prog_param+0x7a4>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 800614a:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <prog_param+0x75c>)
 800614c:	791b      	ldrb	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d036      	beq.n	80061c0 <prog_param+0x7bc>
				goto toggle_opc00m02nv2;
 8006152:	e02a      	b.n	80061aa <prog_param+0x7a6>
 8006154:	20000139 	.word	0x20000139
 8006158:	20000145 	.word	0x20000145
 800615c:	20000167 	.word	0x20000167
 8006160:	20000bec 	.word	0x20000bec
 8006164:	20000c44 	.word	0x20000c44
 8006168:	20000bfe 	.word	0x20000bfe
 800616c:	20000c00 	.word	0x20000c00
 8006170:	20000bfc 	.word	0x20000bfc
 8006174:	200008d0 	.word	0x200008d0
 8006178:	20000b53 	.word	0x20000b53
 800617c:	20000c88 	.word	0x20000c88
 8006180:	20000be4 	.word	0x20000be4
 8006184:	20000bfb 	.word	0x20000bfb
 8006188:	200000b8 	.word	0x200000b8
 800618c:	20000bfa 	.word	0x20000bfa
 8006190:	0801b01c 	.word	0x0801b01c
 8006194:	20000c4d 	.word	0x20000c4d
 8006198:	20000138 	.word	0x20000138
 800619c:	20000b52 	.word	0x20000b52
 80061a0:	0803f052 	.word	0x0803f052
 80061a4:	0801b030 	.word	0x0801b030
				goto toggle_opc00m02nv2;
 80061a8:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 80061aa:	4b57      	ldr	r3, [pc, #348]	@ (8006308 <prog_param+0x904>)
 80061ac:	789b      	ldrb	r3, [r3, #2]
 80061ae:	001a      	movs	r2, r3
 80061b0:	2302      	movs	r3, #2
 80061b2:	4053      	eors	r3, r2
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	4193      	sbcs	r3, r2
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	4b53      	ldr	r3, [pc, #332]	@ (8006308 <prog_param+0x904>)
 80061bc:	709a      	strb	r2, [r3, #2]
 80061be:	e000      	b.n	80061c2 <prog_param+0x7be>
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 80061c0:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 80061c2:	2101      	movs	r1, #1
 80061c4:	2028      	movs	r0, #40	@ 0x28
 80061c6:	f001 f8a7 	bl	8007318 <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 80061ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006308 <prog_param+0x904>)
 80061cc:	789b      	ldrb	r3, [r3, #2]
 80061ce:	2201      	movs	r2, #1
 80061d0:	4053      	eors	r3, r2
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <prog_param+0x7de>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 80061d8:	211d      	movs	r1, #29
 80061da:	2000      	movs	r0, #0
 80061dc:	f001 f89c 	bl	8007318 <op_menu>
 80061e0:	e000      	b.n	80061e4 <prog_param+0x7e0>
				goto dpy2_opc00m02nv2;
 80061e2:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 80061e4:	f001 f8b2 	bl	800734c <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 80061e8:	e066      	b.n	80062b8 <prog_param+0x8b4>
				case 1:  goto opc01m02nv2;
 80061ea:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 80061ec:	4b47      	ldr	r3, [pc, #284]	@ (800630c <prog_param+0x908>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <prog_param+0x7fa>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 80061f4:	4b45      	ldr	r3, [pc, #276]	@ (800630c <prog_param+0x908>)
 80061f6:	791b      	ldrb	r3, [r3, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <prog_param+0x812>
				goto toggle_opc01m02nv2;
 80061fc:	e000      	b.n	8006200 <prog_param+0x7fc>
				goto toggle_opc01m02nv2;
 80061fe:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 8006200:	4b41      	ldr	r3, [pc, #260]	@ (8006308 <prog_param+0x904>)
 8006202:	78db      	ldrb	r3, [r3, #3]
 8006204:	2201      	movs	r2, #1
 8006206:	4053      	eors	r3, r2
 8006208:	b2db      	uxtb	r3, r3
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	4193      	sbcs	r3, r2
 800620e:	b2da      	uxtb	r2, r3
 8006210:	4b3d      	ldr	r3, [pc, #244]	@ (8006308 <prog_param+0x904>)
 8006212:	70da      	strb	r2, [r3, #3]
 8006214:	e000      	b.n	8006218 <prog_param+0x814>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8006216:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8006218:	210f      	movs	r1, #15
 800621a:	2000      	movs	r0, #0
 800621c:	f001 f87c 	bl	8007318 <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 8006220:	4b39      	ldr	r3, [pc, #228]	@ (8006308 <prog_param+0x904>)
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2201      	movs	r2, #1
 8006226:	4053      	eors	r3, r2
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <prog_param+0x834>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 800622e:	211d      	movs	r1, #29
 8006230:	2000      	movs	r0, #0
 8006232:	f001 f871 	bl	8007318 <op_menu>
 8006236:	e000      	b.n	800623a <prog_param+0x836>
				goto dpy2_opc01m02nv2;
 8006238:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 800623a:	f001 f887 	bl	800734c <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 800623e:	e03b      	b.n	80062b8 <prog_param+0x8b4>
				case 2:  goto opc02m02nv2;
 8006240:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 8006242:	4b32      	ldr	r3, [pc, #200]	@ (800630c <prog_param+0x908>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <prog_param+0x850>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 800624a:	4b30      	ldr	r3, [pc, #192]	@ (800630c <prog_param+0x908>)
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <prog_param+0x868>
			   goto toggle_opc02m02nv2;
 8006252:	e000      	b.n	8006256 <prog_param+0x852>
			   goto toggle_opc02m02nv2;
 8006254:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8006256:	4b2c      	ldr	r3, [pc, #176]	@ (8006308 <prog_param+0x904>)
 8006258:	791b      	ldrb	r3, [r3, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	4053      	eors	r3, r2
 800625e:	b2db      	uxtb	r3, r3
 8006260:	1e5a      	subs	r2, r3, #1
 8006262:	4193      	sbcs	r3, r2
 8006264:	b2da      	uxtb	r2, r3
 8006266:	4b28      	ldr	r3, [pc, #160]	@ (8006308 <prog_param+0x904>)
 8006268:	711a      	strb	r2, [r3, #4]
 800626a:	e000      	b.n	800626e <prog_param+0x86a>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 800626c:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 800626e:	210c      	movs	r1, #12
 8006270:	2029      	movs	r0, #41	@ 0x29
 8006272:	f001 f851 	bl	8007318 <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8006276:	4b24      	ldr	r3, [pc, #144]	@ (8006308 <prog_param+0x904>)
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	4053      	eors	r3, r2
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <prog_param+0x88a>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 8006284:	210f      	movs	r1, #15
 8006286:	2029      	movs	r0, #41	@ 0x29
 8006288:	f001 f846 	bl	8007318 <op_menu>
 800628c:	e000      	b.n	8006290 <prog_param+0x88c>
				  goto dpy2_opc02m02nv2;
 800628e:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 8006290:	f001 f85c 	bl	800734c <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 8006294:	e010      	b.n	80062b8 <prog_param+0x8b4>
				case 3:  goto opc03m02nv2;
 8006296:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 8006298:	210e      	movs	r1, #14
 800629a:	2005      	movs	r0, #5
 800629c:	f001 f83c 	bl	8007318 <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 80062a0:	e00a      	b.n	80062b8 <prog_param+0x8b4>
				case 4:  goto opc04m02nv2;
 80062a2:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 80062a4:	210e      	movs	r1, #14
 80062a6:	201f      	movs	r0, #31
 80062a8:	f001 f836 	bl	8007318 <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 80062ac:	e004      	b.n	80062b8 <prog_param+0x8b4>
				default: goto opcNAm02nv2;
 80062ae:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 80062b0:	2126      	movs	r1, #38	@ 0x26
 80062b2:	2026      	movs	r0, #38	@ 0x26
 80062b4:	f001 f830 	bl	8007318 <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 80062b8:	4b14      	ldr	r3, [pc, #80]	@ (800630c <prog_param+0x908>)
 80062ba:	789b      	ldrb	r3, [r3, #2]
 80062bc:	2201      	movs	r2, #1
 80062be:	4053      	eors	r3, r2
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d103      	bne.n	80062ce <prog_param+0x8ca>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 80062c6:	4b12      	ldr	r3, [pc, #72]	@ (8006310 <prog_param+0x90c>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 80062cc:	e017      	b.n	80062fe <prog_param+0x8fa>
			goto no_enter_m02nv2;
 80062ce:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 80062d0:	e015      	b.n	80062fe <prog_param+0x8fa>
		goto cancel_prog;
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	e002      	b.n	80062dc <prog_param+0x8d8>
		goto cancel_prog;//jp cancel_prog;
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	e000      	b.n	80062dc <prog_param+0x8d8>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 80062da:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 80062dc:	490c      	ldr	r1, [pc, #48]	@ (8006310 <prog_param+0x90c>)
 80062de:	480c      	ldr	r0, [pc, #48]	@ (8006310 <prog_param+0x90c>)
 80062e0:	2303      	movs	r3, #3
 80062e2:	2201      	movs	r2, #1
 80062e4:	f007 fba3 	bl	800da2e <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 80062e8:	4909      	ldr	r1, [pc, #36]	@ (8006310 <prog_param+0x90c>)
 80062ea:	4809      	ldr	r0, [pc, #36]	@ (8006310 <prog_param+0x90c>)
 80062ec:	2302      	movs	r3, #2
 80062ee:	2205      	movs	r2, #5
 80062f0:	f007 fb9d 	bl	800da2e <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 80062f4:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <prog_param+0x90c>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 80062fa:	e000      	b.n	80062fe <prog_param+0x8fa>
		goto fin_prog_param; //jp fin_prog_param
 80062fc:	46c0      	nop			@ (mov r8, r8)
}
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	46bd      	mov	sp, r7
 8006302:	b006      	add	sp, #24
 8006304:	bdb0      	pop	{r4, r5, r7, pc}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	20000c44 	.word	0x20000c44
 800630c:	20000bec 	.word	0x20000bec
 8006310:	20000be4 	.word	0x20000be4

08006314 <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8006318:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <md_dif_math+0x20>)
 800631a:	2201      	movs	r2, #1
 800631c:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <md_dif_math+0x24>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	001a      	movs	r2, r3
 8006324:	4b05      	ldr	r3, [pc, #20]	@ (800633c <md_dif_math+0x28>)
 8006326:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8006328:	f000 f80a 	bl	8006340 <md_signfrac_math>
}
 800632c:	46c0      	nop			@ (mov r8, r8)
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	20000be4 	.word	0x20000be4
 8006338:	200008d0 	.word	0x200008d0
 800633c:	200008d2 	.word	0x200008d2

08006340 <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8006344:	4b4b      	ldr	r3, [pc, #300]	@ (8006474 <md_signfrac_math+0x134>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d121      	bne.n	8006390 <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 800634c:	4b49      	ldr	r3, [pc, #292]	@ (8006474 <md_signfrac_math+0x134>)
 800634e:	791b      	ldrb	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d14f      	bne.n	80063f4 <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8006354:	4b48      	ldr	r3, [pc, #288]	@ (8006478 <md_signfrac_math+0x138>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d117      	bne.n	800638c <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 800635c:	4b46      	ldr	r3, [pc, #280]	@ (8006478 <md_signfrac_math+0x138>)
 800635e:	2219      	movs	r2, #25
 8006360:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 8006362:	4b46      	ldr	r3, [pc, #280]	@ (800647c <md_signfrac_math+0x13c>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d103      	bne.n	8006372 <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 800636a:	4b43      	ldr	r3, [pc, #268]	@ (8006478 <md_signfrac_math+0x138>)
 800636c:	220a      	movs	r2, #10
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e000      	b.n	8006374 <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 8006372:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8006374:	4b3f      	ldr	r3, [pc, #252]	@ (8006474 <md_signfrac_math+0x134>)
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 800637c:	4b3d      	ldr	r3, [pc, #244]	@ (8006474 <md_signfrac_math+0x134>)
 800637e:	795b      	ldrb	r3, [r3, #5]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d139      	bne.n	80063f8 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 8006384:	4b3d      	ldr	r3, [pc, #244]	@ (800647c <md_signfrac_math+0x13c>)
 8006386:	2205      	movs	r2, #5
 8006388:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 800638a:	e067      	b.n	800645c <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 800638c:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 800638e:	e065      	b.n	800645c <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 8006390:	46c0      	nop			@ (mov r8, r8)
 8006392:	e000      	b.n	8006396 <md_signfrac_math+0x56>
				goto inc_sf;
 8006394:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 8006396:	4b3a      	ldr	r3, [pc, #232]	@ (8006480 <md_signfrac_math+0x140>)
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b21a      	sxth	r2, r3
 800639c:	4b39      	ldr	r3, [pc, #228]	@ (8006484 <md_signfrac_math+0x144>)
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	429a      	cmp	r2, r3
 80063a4:	db04      	blt.n	80063b0 <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 80063a6:	4b38      	ldr	r3, [pc, #224]	@ (8006488 <md_signfrac_math+0x148>)
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	4b35      	ldr	r3, [pc, #212]	@ (8006480 <md_signfrac_math+0x140>)
 80063ac:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 80063ae:	e052      	b.n	8006456 <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 80063b0:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 80063b2:	4b36      	ldr	r3, [pc, #216]	@ (800648c <md_signfrac_math+0x14c>)
 80063b4:	799b      	ldrb	r3, [r3, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 80063ba:	4b31      	ldr	r3, [pc, #196]	@ (8006480 <md_signfrac_math+0x140>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b21b      	sxth	r3, r3
 80063c0:	2b63      	cmp	r3, #99	@ 0x63
 80063c2:	dc0d      	bgt.n	80063e0 <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 80063c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006480 <md_signfrac_math+0x140>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b21b      	sxth	r3, r3
 80063ca:	3364      	adds	r3, #100	@ 0x64
 80063cc:	db0a      	blt.n	80063e4 <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 80063ce:	e000      	b.n	80063d2 <md_signfrac_math+0x92>
				goto inc_simple_ent;
 80063d0:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 80063d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006480 <md_signfrac_math+0x140>)
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	4b29      	ldr	r3, [pc, #164]	@ (8006480 <md_signfrac_math+0x140>)
 80063dc:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063de:	e03a      	b.n	8006456 <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 80063e0:	46c0      	nop			@ (mov r8, r8)
 80063e2:	e000      	b.n	80063e6 <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 80063e4:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 80063e6:	4b26      	ldr	r3, [pc, #152]	@ (8006480 <md_signfrac_math+0x140>)
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	330a      	adds	r3, #10
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	4b24      	ldr	r3, [pc, #144]	@ (8006480 <md_signfrac_math+0x140>)
 80063f0:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 80063f2:	e030      	b.n	8006456 <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 80063f4:	46c0      	nop			@ (mov r8, r8)
 80063f6:	e000      	b.n	80063fa <md_signfrac_math+0xba>
				goto dec_sf;
 80063f8:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 80063fa:	4b21      	ldr	r3, [pc, #132]	@ (8006480 <md_signfrac_math+0x140>)
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b21a      	sxth	r2, r3
 8006400:	4b21      	ldr	r3, [pc, #132]	@ (8006488 <md_signfrac_math+0x148>)
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b21b      	sxth	r3, r3
 8006406:	429a      	cmp	r2, r3
 8006408:	dc04      	bgt.n	8006414 <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 800640a:	4b1e      	ldr	r3, [pc, #120]	@ (8006484 <md_signfrac_math+0x144>)
 800640c:	881a      	ldrh	r2, [r3, #0]
 800640e:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <md_signfrac_math+0x140>)
 8006410:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8006412:	e020      	b.n	8006456 <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8006414:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8006416:	4b1d      	ldr	r3, [pc, #116]	@ (800648c <md_signfrac_math+0x14c>)
 8006418:	799b      	ldrb	r3, [r3, #6]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 800641e:	4b18      	ldr	r3, [pc, #96]	@ (8006480 <md_signfrac_math+0x140>)
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b21b      	sxth	r3, r3
 8006424:	2b64      	cmp	r3, #100	@ 0x64
 8006426:	dc0d      	bgt.n	8006444 <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8006428:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <md_signfrac_math+0x140>)
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b21b      	sxth	r3, r3
 800642e:	3363      	adds	r3, #99	@ 0x63
 8006430:	db0a      	blt.n	8006448 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 8006432:	e000      	b.n	8006436 <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8006434:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8006436:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <md_signfrac_math+0x140>)
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <md_signfrac_math+0x140>)
 8006440:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8006442:	e008      	b.n	8006456 <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8006444:	46c0      	nop			@ (mov r8, r8)
 8006446:	e000      	b.n	800644a <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8006448:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <md_signfrac_math+0x140>)
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	3b0a      	subs	r3, #10
 8006450:	b29a      	uxth	r2, r3
 8006452:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <md_signfrac_math+0x140>)
 8006454:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8006456:	4b0e      	ldr	r3, [pc, #56]	@ (8006490 <md_signfrac_math+0x150>)
 8006458:	221e      	movs	r2, #30
 800645a:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 800645c:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <md_signfrac_math+0x14c>)
 800645e:	2200      	movs	r2, #0
 8006460:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 8006462:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <md_signfrac_math+0x140>)
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	4b0a      	ldr	r3, [pc, #40]	@ (8006494 <md_signfrac_math+0x154>)
 800646a:	701a      	strb	r2, [r3, #0]
			//ret
}
 800646c:	46c0      	nop			@ (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	20000bec 	.word	0x20000bec
 8006478:	20000c1e 	.word	0x20000c1e
 800647c:	20000b6f 	.word	0x20000b6f
 8006480:	200008d2 	.word	0x200008d2
 8006484:	20000bfe 	.word	0x20000bfe
 8006488:	20000c00 	.word	0x20000c00
 800648c:	20000be4 	.word	0x20000be4
 8006490:	20000b6e 	.word	0x20000b6e
 8006494:	20000b53 	.word	0x20000b53

08006498 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800649e:	4b08      	ldr	r3, [pc, #32]	@ (80064c0 <tdev_to_Word+0x28>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <tdev_to_Word+0x2c>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	0019      	movs	r1, r3
 80064ac:	1dbb      	adds	r3, r7, #6
 80064ae:	1852      	adds	r2, r2, r1
 80064b0:	801a      	strh	r2, [r3, #0]
	return	foo;
 80064b2:	1dbb      	adds	r3, r7, #6
 80064b4:	881b      	ldrh	r3, [r3, #0]
}
 80064b6:	0018      	movs	r0, r3
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b002      	add	sp, #8
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	20000bac 	.word	0x20000bac
 80064c4:	20000bad 	.word	0x20000bad

080064c8 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3301      	adds	r3, #1
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	0019      	movs	r1, r3
 80064e0:	200e      	movs	r0, #14
 80064e2:	183b      	adds	r3, r7, r0
 80064e4:	1852      	adds	r2, r2, r1
 80064e6:	801a      	strh	r2, [r3, #0]
	return	 foo;
 80064e8:	183b      	adds	r3, r7, r0
 80064ea:	881b      	ldrh	r3, [r3, #0]
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b004      	add	sp, #16
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
    asm ("nop");
 80064f8:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 80064fa:	46c0      	nop			@ (mov r8, r8)

}
 80064fc:	46c0      	nop			@ (mov r8, r8)
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <Load_ret2+0x1c>)
 800650a:	2249      	movs	r2, #73	@ 0x49
 800650c:	5c9b      	ldrb	r3, [r3, r2]
 800650e:	001a      	movs	r2, r3
 8006510:	233c      	movs	r3, #60	@ 0x3c
 8006512:	4353      	muls	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	4b03      	ldr	r3, [pc, #12]	@ (8006524 <Load_ret2+0x20>)
 8006518:	801a      	strh	r2, [r3, #0]
}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	200000b8 	.word	0x200000b8
 8006524:	20000b62 	.word	0x20000b62

08006528 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 800652c:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <ldadaptivo+0x38>)
 800652e:	2246      	movs	r2, #70	@ 0x46
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	001a      	movs	r2, r3
 8006534:	23e1      	movs	r3, #225	@ 0xe1
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	4353      	muls	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	4b09      	ldr	r3, [pc, #36]	@ (8006564 <ldadaptivo+0x3c>)
 800653e:	801a      	strh	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 8006540:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <ldadaptivo+0x38>)
 8006542:	2256      	movs	r2, #86	@ 0x56
 8006544:	5c9b      	ldrb	r3, [r3, r2]
 8006546:	001a      	movs	r2, r3
 8006548:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <ldadaptivo+0x3c>)
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	08db      	lsrs	r3, r3, #3
 800654e:	b29b      	uxth	r3, r3
 8006550:	4353      	muls	r3, r2
 8006552:	b29a      	uxth	r2, r3
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <ldadaptivo+0x40>)
 8006556:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 8006558:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	200000b8 	.word	0x200000b8
 8006564:	20000bb2 	.word	0x20000bb2
 8006568:	20000bb8 	.word	0x20000bb8

0800656c <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 8006572:	1dbb      	adds	r3, r7, #6
 8006574:	2200      	movs	r2, #0
 8006576:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 8006578:	1dbb      	adds	r3, r7, #6
 800657a:	4a0e      	ldr	r2, [pc, #56]	@ (80065b4 <blink_640+0x48>)
 800657c:	8812      	ldrh	r2, [r2, #0]
 800657e:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 8006580:	1dba      	adds	r2, r7, #6
 8006582:	1dbb      	adds	r3, r7, #6
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	18db      	adds	r3, r3, r3
 8006588:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 800658a:	1dba      	adds	r2, r7, #6
 800658c:	1dbb      	adds	r3, r7, #6
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	18db      	adds	r3, r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 8006594:	1dbb      	adds	r3, r7, #6
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <blink_640+0x4c>)
 800659c:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 800659e:	1dbb      	adds	r3, r7, #6
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	4b04      	ldr	r3, [pc, #16]	@ (80065bc <blink_640+0x50>)
 80065aa:	701a      	strb	r2, [r3, #0]
}
 80065ac:	46c0      	nop			@ (mov r8, r8)
 80065ae:	46bd      	mov	sp, r7
 80065b0:	b002      	add	sp, #8
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000b4c 	.word	0x20000b4c
 80065b8:	20000b52 	.word	0x20000b52
 80065bc:	20000b53 	.word	0x20000b53

080065c0 <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 80065c4:	4b03      	ldr	r3, [pc, #12]	@ (80065d4 <sp_dpy+0x14>)
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f000 f8af 	bl	800672c <convadec_math>
								//			//ret	;
}
 80065ce:	46c0      	nop			@ (mov r8, r8)
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000ba8 	.word	0x20000ba8

080065d8 <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 80065de:	1dbb      	adds	r3, r7, #6
 80065e0:	2200      	movs	r2, #0
 80065e2:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 80065e4:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <dif_dpy+0x2c>)
 80065e6:	8819      	ldrh	r1, [r3, #0]
 80065e8:	4b07      	ldr	r3, [pc, #28]	@ (8006608 <dif_dpy+0x30>)
 80065ea:	881a      	ldrh	r2, [r3, #0]
 80065ec:	1dbb      	adds	r3, r7, #6
 80065ee:	1a8a      	subs	r2, r1, r2
 80065f0:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 80065f2:	1dbb      	adds	r3, r7, #6
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 f898 	bl	800672c <convadec_math>
									// ret ;
}
 80065fc:	46c0      	nop			@ (mov r8, r8)
 80065fe:	46bd      	mov	sp, r7
 8006600:	b002      	add	sp, #8
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000baa 	.word	0x20000baa
 8006608:	20000ba8 	.word	0x20000ba8

0800660c <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 8006610:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <minbrake_load+0x2c>)
 8006612:	2265      	movs	r2, #101	@ 0x65
 8006614:	5c9a      	ldrb	r2, [r3, r2]
 8006616:	4b09      	ldr	r3, [pc, #36]	@ (800663c <minbrake_load+0x30>)
 8006618:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 800661a:	f000 f99f 	bl	800695c <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 800661e:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <minbrake_load+0x34>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	b29b      	uxth	r3, r3
 8006626:	4a07      	ldr	r2, [pc, #28]	@ (8006644 <minbrake_load+0x38>)
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	189b      	adds	r3, r3, r2
 800662c:	b29a      	uxth	r2, r3
 800662e:	4b06      	ldr	r3, [pc, #24]	@ (8006648 <minbrake_load+0x3c>)
 8006630:	801a      	strh	r2, [r3, #0]
}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	200000b8 	.word	0x200000b8
 800663c:	20000b53 	.word	0x20000b53
 8006640:	20000b47 	.word	0x20000b47
 8006644:	20000b48 	.word	0x20000b48
 8006648:	20000b5e 	.word	0x20000b5e

0800664c <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 8006652:	1dbb      	adds	r3, r7, #6
 8006654:	2200      	movs	r2, #0
 8006656:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 8006658:	1dbb      	adds	r3, r7, #6
 800665a:	4a31      	ldr	r2, [pc, #196]	@ (8006720 <desptdv_math+0xd4>)
 800665c:	8812      	ldrh	r2, [r2, #0]
 800665e:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 8006660:	4b30      	ldr	r3, [pc, #192]	@ (8006724 <desptdv_math+0xd8>)
 8006662:	0018      	movs	r0, r3
 8006664:	f7ff ff30 	bl	80064c8 <TwoByteInArrayToWord>
 8006668:	0003      	movs	r3, r0
 800666a:	0019      	movs	r1, r3
 800666c:	1dbb      	adds	r3, r7, #6
 800666e:	1dba      	adds	r2, r7, #6
 8006670:	8812      	ldrh	r2, [r2, #0]
 8006672:	188a      	adds	r2, r1, r2
 8006674:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 8006676:	4b2c      	ldr	r3, [pc, #176]	@ (8006728 <desptdv_math+0xdc>)
 8006678:	2252      	movs	r2, #82	@ 0x52
 800667a:	5c9b      	ldrb	r3, [r3, r2]
 800667c:	2b20      	cmp	r3, #32
 800667e:	d145      	bne.n	800670c <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 8006680:	1dbb      	adds	r3, r7, #6
 8006682:	2200      	movs	r2, #0
 8006684:	5e9b      	ldrsh	r3, [r3, r2]
 8006686:	2b00      	cmp	r3, #0
 8006688:	da22      	bge.n	80066d0 <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 800668a:	1dbb      	adds	r3, r7, #6
 800668c:	1dba      	adds	r2, r7, #6
 800668e:	8812      	ldrh	r2, [r2, #0]
 8006690:	4252      	negs	r2, r2
 8006692:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 8006694:	1dbb      	adds	r3, r7, #6
 8006696:	1dba      	adds	r2, r7, #6
 8006698:	8812      	ldrh	r2, [r2, #0]
 800669a:	0852      	lsrs	r2, r2, #1
 800669c:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 800669e:	1dba      	adds	r2, r7, #6
 80066a0:	1dbb      	adds	r3, r7, #6
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	1c19      	adds	r1, r3, #0
 80066a6:	00c9      	lsls	r1, r1, #3
 80066a8:	18cb      	adds	r3, r1, r3
 80066aa:	18db      	adds	r3, r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80066ae:	1dbc      	adds	r4, r7, #6
 80066b0:	1dbb      	adds	r3, r7, #6
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	2105      	movs	r1, #5
 80066b6:	0018      	movs	r0, r3
 80066b8:	f7f9 fd2e 	bl	8000118 <__udivsi3>
 80066bc:	0003      	movs	r3, r0
 80066be:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 80066c0:	1dbb      	adds	r3, r7, #6
 80066c2:	1dba      	adds	r2, r7, #6
 80066c4:	8812      	ldrh	r2, [r2, #0]
 80066c6:	21a0      	movs	r1, #160	@ 0xa0
 80066c8:	0049      	lsls	r1, r1, #1
 80066ca:	1a8a      	subs	r2, r1, r2
 80066cc:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 80066ce:	e01e      	b.n	800670e <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 80066d0:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 80066d2:	1dbb      	adds	r3, r7, #6
 80066d4:	1dba      	adds	r2, r7, #6
 80066d6:	8812      	ldrh	r2, [r2, #0]
 80066d8:	0852      	lsrs	r2, r2, #1
 80066da:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 80066dc:	1dba      	adds	r2, r7, #6
 80066de:	1dbb      	adds	r3, r7, #6
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	1c19      	adds	r1, r3, #0
 80066e4:	00c9      	lsls	r1, r1, #3
 80066e6:	18cb      	adds	r3, r1, r3
 80066e8:	18db      	adds	r3, r3, r3
 80066ea:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 80066ec:	1dbc      	adds	r4, r7, #6
 80066ee:	1dbb      	adds	r3, r7, #6
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	2105      	movs	r1, #5
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7f9 fd0f 	bl	8000118 <__udivsi3>
 80066fa:	0003      	movs	r3, r0
 80066fc:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 80066fe:	1dbb      	adds	r3, r7, #6
 8006700:	1dba      	adds	r2, r7, #6
 8006702:	8812      	ldrh	r2, [r2, #0]
 8006704:	3241      	adds	r2, #65	@ 0x41
 8006706:	32ff      	adds	r2, #255	@ 0xff
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e000      	b.n	800670e <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 800670c:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 800670e:	1dbb      	adds	r3, r7, #6
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f80a 	bl	800672c <convadec_math>

}
 8006718:	46c0      	nop			@ (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b003      	add	sp, #12
 800671e:	bd90      	pop	{r4, r7, pc}
 8006720:	20000bb0 	.word	0x20000bb0
 8006724:	200000bd 	.word	0x200000bd
 8006728:	200000b8 	.word	0x200000b8

0800672c <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	0002      	movs	r2, r0
 8006734:	1dbb      	adds	r3, r7, #6
 8006736:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 8006738:	f000 face 	bl	8006cd8 <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 800673c:	230f      	movs	r3, #15
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 8006744:	230e      	movs	r3, #14
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 800674c:	1dbb      	adds	r3, r7, #6
 800674e:	2200      	movs	r2, #0
 8006750:	5e9b      	ldrsh	r3, [r3, r2]
 8006752:	2b00      	cmp	r3, #0
 8006754:	da08      	bge.n	8006768 <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 8006756:	1dbb      	adds	r3, r7, #6
 8006758:	1dba      	adds	r2, r7, #6
 800675a:	8812      	ldrh	r2, [r2, #0]
 800675c:	4252      	negs	r2, r2
 800675e:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 8006760:	4b45      	ldr	r3, [pc, #276]	@ (8006878 <convadec_math+0x14c>)
 8006762:	2201      	movs	r2, #1
 8006764:	705a      	strb	r2, [r3, #1]
 8006766:	e000      	b.n	800676a <convadec_math+0x3e>
			goto conv_temper_positiva;
 8006768:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 800676a:	1dbb      	adds	r3, r7, #6
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	210a      	movs	r1, #10
 8006770:	0018      	movs	r0, r3
 8006772:	f7f9 fd57 	bl	8000224 <__aeabi_uidivmod>
 8006776:	000b      	movs	r3, r1
 8006778:	b29a      	uxth	r2, r3
 800677a:	230e      	movs	r3, #14
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 8006780:	1dbb      	adds	r3, r7, #6
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	210a      	movs	r1, #10
 8006786:	0018      	movs	r0, r3
 8006788:	f7f9 fcc6 	bl	8000118 <__udivsi3>
 800678c:	0003      	movs	r3, r0
 800678e:	b29a      	uxth	r2, r3
 8006790:	230f      	movs	r3, #15
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 8006796:	4b38      	ldr	r3, [pc, #224]	@ (8006878 <convadec_math+0x14c>)
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	2201      	movs	r2, #1
 800679c:	4053      	eors	r3, r2
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d116      	bne.n	80067d2 <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 80067a4:	4b35      	ldr	r3, [pc, #212]	@ (800687c <convadec_math+0x150>)
 80067a6:	2223      	movs	r2, #35	@ 0x23
 80067a8:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 80067aa:	4b35      	ldr	r3, [pc, #212]	@ (8006880 <convadec_math+0x154>)
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	2201      	movs	r2, #1
 80067b0:	4053      	eors	r3, r2
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d103      	bne.n	80067c0 <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 80067b8:	4b30      	ldr	r3, [pc, #192]	@ (800687c <convadec_math+0x150>)
 80067ba:	2264      	movs	r2, #100	@ 0x64
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e000      	b.n	80067c2 <convadec_math+0x96>
			goto cp_25;
 80067c0:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067c2:	4b2e      	ldr	r3, [pc, #184]	@ (800687c <convadec_math+0x150>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	220f      	movs	r2, #15
 80067c8:	18ba      	adds	r2, r7, r2
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d318      	bcc.n	8006802 <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 80067d0:	e03d      	b.n	800684e <convadec_math+0x122>
			goto conv_signo_positivo;
 80067d2:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 80067d4:	4b29      	ldr	r3, [pc, #164]	@ (800687c <convadec_math+0x150>)
 80067d6:	2263      	movs	r2, #99	@ 0x63
 80067d8:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 80067da:	4b29      	ldr	r3, [pc, #164]	@ (8006880 <convadec_math+0x154>)
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	2201      	movs	r2, #1
 80067e0:	4053      	eors	r3, r2
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d103      	bne.n	80067f0 <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 80067e8:	4b24      	ldr	r3, [pc, #144]	@ (800687c <convadec_math+0x150>)
 80067ea:	2264      	movs	r2, #100	@ 0x64
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e000      	b.n	80067f2 <convadec_math+0xc6>
			goto cp_99;
 80067f0:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 80067f2:	4b22      	ldr	r3, [pc, #136]	@ (800687c <convadec_math+0x150>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	220f      	movs	r2, #15
 80067f8:	18ba      	adds	r2, r7, r2
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d225      	bcs.n	800684c <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 8006800:	e000      	b.n	8006804 <convadec_math+0xd8>
		goto     convad10;
 8006802:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8006804:	210f      	movs	r1, #15
 8006806:	187b      	adds	r3, r7, r1
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d80d      	bhi.n	800682a <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 800680e:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 8006810:	4b19      	ldr	r3, [pc, #100]	@ (8006878 <convadec_math+0x14c>)
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 8006816:	230e      	movs	r3, #14
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	781a      	ldrb	r2, [r3, #0]
 800681c:	187b      	adds	r3, r7, r1
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	0011      	movs	r1, r2
 8006822:	0018      	movs	r0, r3
 8006824:	f000 fd78 	bl	8007318 <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 8006828:	e021      	b.n	800686e <convadec_math+0x142>
			goto soloent;
 800682a:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 800682c:	4b13      	ldr	r3, [pc, #76]	@ (800687c <convadec_math+0x150>)
 800682e:	220f      	movs	r2, #15
 8006830:	18ba      	adds	r2, r7, r2
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8006836:	f000 f891 	bl	800695c <BaBentre10_math>
		op_menu (waux,wreg);
 800683a:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <convadec_math+0x158>)
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	4b0f      	ldr	r3, [pc, #60]	@ (800687c <convadec_math+0x150>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	0019      	movs	r1, r3
 8006844:	0010      	movs	r0, r2
 8006846:	f000 fd67 	bl	8007318 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800684a:	e010      	b.n	800686e <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 800684c:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 800684e:	4b0e      	ldr	r3, [pc, #56]	@ (8006888 <convadec_math+0x15c>)
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	001a      	movs	r2, r3
 8006856:	2320      	movs	r3, #32
 8006858:	4013      	ands	r3, r2
 800685a:	d102      	bne.n	8006862 <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 800685c:	f000 fa3c 	bl	8006cd8 <offdpy>
		goto	finconvad;
 8006860:	e005      	b.n	800686e <convadec_math+0x142>
			goto convadec_j02;
 8006862:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 8006864:	2111      	movs	r1, #17
 8006866:	2010      	movs	r0, #16
 8006868:	f000 fd56 	bl	8007318 <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800686c:	46c0      	nop			@ (mov r8, r8)
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	46bd      	mov	sp, r7
 8006872:	b004      	add	sp, #16
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	20000b8c 	.word	0x20000b8c
 800687c:	20000b53 	.word	0x20000b53
 8006880:	20000be4 	.word	0x20000be4
 8006884:	20000b52 	.word	0x20000b52
 8006888:	20000b4c 	.word	0x20000b4c

0800688c <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	0002      	movs	r2, r0
 8006894:	1dfb      	adds	r3, r7, #7
 8006896:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 8006898:	210f      	movs	r1, #15
 800689a:	187b      	adds	r3, r7, r1
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 80068a0:	1dfb      	adds	r3, r7, #7
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b09      	cmp	r3, #9
 80068a6:	d80c      	bhi.n	80068c2 <convad10+0x36>
			goto soloent;
		}
fraccion:
 80068a8:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 80068aa:	4b10      	ldr	r3, [pc, #64]	@ (80068ec <convad10+0x60>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 80068b0:	187b      	adds	r3, r7, r1
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	1dfb      	adds	r3, r7, #7
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f000 fd2c 	bl	8007318 <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 80068c0:	e00f      	b.n	80068e2 <convad10+0x56>
			goto soloent;
 80068c2:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <convad10+0x64>)
 80068c6:	1dfa      	adds	r2, r7, #7
 80068c8:	7812      	ldrb	r2, [r2, #0]
 80068ca:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80068cc:	f000 f846 	bl	800695c <BaBentre10_math>
		op_menu (waux,wreg);
 80068d0:	4b08      	ldr	r3, [pc, #32]	@ (80068f4 <convad10+0x68>)
 80068d2:	781a      	ldrb	r2, [r3, #0]
 80068d4:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <convad10+0x64>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	0019      	movs	r1, r3
 80068da:	0010      	movs	r0, r2
 80068dc:	f000 fd1c 	bl	8007318 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80068e0:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b004      	add	sp, #16
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	20000b8c 	.word	0x20000b8c
 80068f0:	20000b53 	.word	0x20000b53
 80068f4:	20000b52 	.word	0x20000b52

080068f8 <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	0002      	movs	r2, r0
 8006900:	1dfb      	adds	r3, r7, #7
 8006902:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 8006904:	4b09      	ldr	r3, [pc, #36]	@ (800692c <soloent+0x34>)
 8006906:	1dfa      	adds	r2, r7, #7
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 800690c:	f000 f826 	bl	800695c <BaBentre10_math>
		op_menu (waux,wreg);
 8006910:	4b07      	ldr	r3, [pc, #28]	@ (8006930 <soloent+0x38>)
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	4b05      	ldr	r3, [pc, #20]	@ (800692c <soloent+0x34>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	0019      	movs	r1, r3
 800691a:	0010      	movs	r0, r2
 800691c:	f000 fcfc 	bl	8007318 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8006920:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8006922:	46c0      	nop			@ (mov r8, r8)
 8006924:	46bd      	mov	sp, r7
 8006926:	b002      	add	sp, #8
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	20000b53 	.word	0x20000b53
 8006930:	20000b52 	.word	0x20000b52

08006934 <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 8006938:	f000 f810 	bl	800695c <BaBentre10_math>
		op_menu (waux,wreg);
 800693c:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <soloent1+0x20>)
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <soloent1+0x24>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	0019      	movs	r1, r3
 8006946:	0010      	movs	r0, r2
 8006948:	f000 fce6 	bl	8007318 <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 800694c:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000b52 	.word	0x20000b52
 8006958:	20000b53 	.word	0x20000b53

0800695c <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(void){
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 8006960:	4b11      	ldr	r3, [pc, #68]	@ (80069a8 <BaBentre10_math+0x4c>)
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 8006966:	4b11      	ldr	r3, [pc, #68]	@ (80069ac <BaBentre10_math+0x50>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	001a      	movs	r2, r3
 800696c:	4b10      	ldr	r3, [pc, #64]	@ (80069b0 <BaBentre10_math+0x54>)
 800696e:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 8006970:	4b0f      	ldr	r3, [pc, #60]	@ (80069b0 <BaBentre10_math+0x54>)
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	210a      	movs	r1, #10
 8006978:	0018      	movs	r0, r3
 800697a:	f7f9 fc53 	bl	8000224 <__aeabi_uidivmod>
 800697e:	000b      	movs	r3, r1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <BaBentre10_math+0x50>)
 8006984:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 8006986:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <BaBentre10_math+0x54>)
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	210a      	movs	r1, #10
 800698e:	0018      	movs	r0, r3
 8006990:	f7f9 fbc2 	bl	8000118 <__udivsi3>
 8006994:	0003      	movs	r3, r0
 8006996:	b2da      	uxtb	r2, r3
 8006998:	4b03      	ldr	r3, [pc, #12]	@ (80069a8 <BaBentre10_math+0x4c>)
 800699a:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 800699c:	f000 f80a 	bl	80069b4 <conv60_6_math>
}
 80069a0:	46c0      	nop			@ (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	20000b52 	.word	0x20000b52
 80069ac:	20000b53 	.word	0x20000b53
 80069b0:	200008d2 	.word	0x200008d2

080069b4 <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math (void) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 80069ba:	1dbb      	adds	r3, r7, #6
 80069bc:	2200      	movs	r2, #0
 80069be:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 80069c0:	4b11      	ldr	r3, [pc, #68]	@ (8006a08 <conv60_6_math+0x54>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	1dba      	adds	r2, r7, #6
 80069c6:	1c19      	adds	r1, r3, #0
 80069c8:	1c0b      	adds	r3, r1, #0
 80069ca:	18db      	adds	r3, r3, r3
 80069cc:	185b      	adds	r3, r3, r1
 80069ce:	18db      	adds	r3, r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 80069d2:	4b0e      	ldr	r3, [pc, #56]	@ (8006a0c <conv60_6_math+0x58>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	001a      	movs	r2, r3
 80069d8:	233c      	movs	r3, #60	@ 0x3c
 80069da:	4353      	muls	r3, r2
 80069dc:	b299      	uxth	r1, r3
 80069de:	1dbb      	adds	r3, r7, #6
 80069e0:	1dba      	adds	r2, r7, #6
 80069e2:	8812      	ldrh	r2, [r2, #0]
 80069e4:	188a      	adds	r2, r1, r2
 80069e6:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 80069e8:	1dbb      	adds	r3, r7, #6
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	0a1b      	lsrs	r3, r3, #8
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	4b07      	ldr	r3, [pc, #28]	@ (8006a10 <conv60_6_math+0x5c>)
 80069f4:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 80069f6:	1dbb      	adds	r3, r7, #6
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	4b05      	ldr	r3, [pc, #20]	@ (8006a14 <conv60_6_math+0x60>)
 80069fe:	701a      	strb	r2, [r3, #0]
}
 8006a00:	46c0      	nop			@ (mov r8, r8)
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b002      	add	sp, #8
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000b53 	.word	0x20000b53
 8006a0c:	20000b52 	.word	0x20000b52
 8006a10:	20000b47 	.word	0x20000b47
 8006a14:	20000b48 	.word	0x20000b48

08006a18 <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 8006a1e:	4ba3      	ldr	r3, [pc, #652]	@ (8006cac <fallas+0x294>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 8006a24:	4ba2      	ldr	r3, [pc, #648]	@ (8006cb0 <fallas+0x298>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 8006a2c:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 8006a2e:	e138      	b.n	8006ca2 <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 8006a30:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 8006a32:	4b9f      	ldr	r3, [pc, #636]	@ (8006cb0 <fallas+0x298>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d003      	beq.n	8006a42 <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 8006a3a:	4b9e      	ldr	r3, [pc, #632]	@ (8006cb4 <fallas+0x29c>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	715a      	strb	r2, [r3, #5]
 8006a40:	e000      	b.n	8006a44 <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 8006a42:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 8006a44:	2300      	movs	r3, #0
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	e014      	b.n	8006a74 <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 8006a4a:	4a9b      	ldr	r2, [pc, #620]	@ (8006cb8 <fallas+0x2a0>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	18d3      	adds	r3, r2, r3
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	499a      	ldr	r1, [pc, #616]	@ (8006cbc <fallas+0x2a4>)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	18cb      	adds	r3, r1, r3
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4998      	ldr	r1, [pc, #608]	@ (8006cc0 <fallas+0x2a8>)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	18cb      	adds	r3, r1, r3
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <fallas+0x66>
		for(int k=0; k<8;k++){
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3301      	adds	r3, #1
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b07      	cmp	r3, #7
 8006a78:	dde7      	ble.n	8006a4a <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 8006a7a:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8006a7c:	e7d7      	b.n	8006a2e <fallas+0x16>
				goto fallas12;//jrne fallas12
 8006a7e:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8006a80:	4b90      	ldr	r3, [pc, #576]	@ (8006cc4 <fallas+0x2ac>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d12c      	bne.n	8006ae2 <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 8006a88:	4b8a      	ldr	r3, [pc, #552]	@ (8006cb4 <fallas+0x29c>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;		//bset flagsBuzzer,#0
 8006a8e:	4b87      	ldr	r3, [pc, #540]	@ (8006cac <fallas+0x294>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]
	    //waux = 0x1F;			//mov waux,#$1F;
	    waux = 0x13;			//mov waux,#$13;
 8006a94:	4b8c      	ldr	r3, [pc, #560]	@ (8006cc8 <fallas+0x2b0>)
 8006a96:	2213      	movs	r2, #19
 8006a98:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 8006a9a:	4b87      	ldr	r3, [pc, #540]	@ (8006cb8 <fallas+0x2a0>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	4053      	eors	r3, r2
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <fallas+0xa4>
	       	goto fallas_j00;
 8006aa8:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 8006aaa:	4b83      	ldr	r3, [pc, #524]	@ (8006cb8 <fallas+0x2a0>)
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d019      	beq.n	8006ae6 <fallas+0xce>
	       	goto fallas_j01;
 8006ab2:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    //waux = 0x1F;//mov waux,#$1F
		waux = 0x13;			//mov waux,#$13;
 8006ab4:	4b84      	ldr	r3, [pc, #528]	@ (8006cc8 <fallas+0x2b0>)
 8006ab6:	2213      	movs	r2, #19
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e000      	b.n	8006abe <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 8006abc:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 8006abe:	f000 f977 	bl	8006db0 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 8006ac2:	f000 f991 	bl	8006de8 <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 8006ac6:	f000 fc41 	bl	800734c <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		//wreg = 0x13;//mov wreg,#$13;
		wreg = 0x01;//mov wreg,#$01;
 8006aca:	4b80      	ldr	r3, [pc, #512]	@ (8006ccc <fallas+0x2b4>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 8006ad0:	4b7d      	ldr	r3, [pc, #500]	@ (8006cc8 <fallas+0x2b0>)
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	4b7d      	ldr	r3, [pc, #500]	@ (8006ccc <fallas+0x2b4>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	0019      	movs	r1, r3
 8006ada:	0010      	movs	r0, r2
 8006adc:	f000 fc1c 	bl	8007318 <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 8006ae0:	e0df      	b.n	8006ca2 <fallas+0x28a>
	       	goto fallas16;//
 8006ae2:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 8006ae4:	e0dd      	b.n	8006ca2 <fallas+0x28a>
	    goto fallas20;//jra fallas20
 8006ae6:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 8006ae8:	4b73      	ldr	r3, [pc, #460]	@ (8006cb8 <fallas+0x2a0>)
 8006aea:	79db      	ldrb	r3, [r3, #7]
 8006aec:	2201      	movs	r2, #1
 8006aee:	4053      	eors	r3, r2
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d105      	bne.n	8006b02 <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 8006af6:	2201      	movs	r2, #1
 8006af8:	2127      	movs	r1, #39	@ 0x27
 8006afa:	201f      	movs	r0, #31
 8006afc:	f000 fc34 	bl	8007368 <wreg_waux_conf>
 8006b00:	e000      	b.n	8006b04 <fallas+0xec>
			goto fallas_j07;
 8006b02:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 8006b04:	4b6c      	ldr	r3, [pc, #432]	@ (8006cb8 <fallas+0x2a0>)
 8006b06:	799b      	ldrb	r3, [r3, #6]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	4053      	eors	r3, r2
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 8006b12:	2201      	movs	r2, #1
 8006b14:	2127      	movs	r1, #39	@ 0x27
 8006b16:	2026      	movs	r0, #38	@ 0x26
 8006b18:	f000 fc26 	bl	8007368 <wreg_waux_conf>
 8006b1c:	e000      	b.n	8006b20 <fallas+0x108>
			goto fallas_j08;
 8006b1e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 8006b20:	4b66      	ldr	r3, [pc, #408]	@ (8006cbc <fallas+0x2a4>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2201      	movs	r2, #1
 8006b26:	4053      	eors	r3, r2
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 8006b2e:	2200      	movs	r2, #0
 8006b30:	212f      	movs	r1, #47	@ 0x2f
 8006b32:	200e      	movs	r0, #14
 8006b34:	f000 fc18 	bl	8007368 <wreg_waux_conf>
 8006b38:	e000      	b.n	8006b3c <fallas+0x124>
			goto fallas_j08b;
 8006b3a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 8006b3c:	4b60      	ldr	r3, [pc, #384]	@ (8006cc0 <fallas+0x2a8>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2201      	movs	r2, #1
 8006b42:	4053      	eors	r3, r2
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d105      	bne.n	8006b56 <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	210a      	movs	r1, #10
 8006b4e:	200b      	movs	r0, #11
 8006b50:	f000 fc0a 	bl	8007368 <wreg_waux_conf>
 8006b54:	e000      	b.n	8006b58 <fallas+0x140>
			goto fallas_j08c;
 8006b56:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 8006b58:	4b57      	ldr	r3, [pc, #348]	@ (8006cb8 <fallas+0x2a0>)
 8006b5a:	795b      	ldrb	r3, [r3, #5]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d107      	bne.n	8006b70 <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 8006b60:	4b56      	ldr	r3, [pc, #344]	@ (8006cbc <fallas+0x2a4>)
 8006b62:	79db      	ldrb	r3, [r3, #7]
 8006b64:	2201      	movs	r2, #1
 8006b66:	4053      	eors	r3, r2
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d107      	bne.n	8006b7e <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8006b6e:	e000      	b.n	8006b72 <fallas+0x15a>
			goto fallas_j01c;
 8006b70:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x04, 1);
 8006b72:	2201      	movs	r2, #1
 8006b74:	2104      	movs	r1, #4
 8006b76:	2013      	movs	r0, #19
 8006b78:	f000 fbf6 	bl	8007368 <wreg_waux_conf>
 8006b7c:	e000      	b.n	8006b80 <fallas+0x168>
			goto fallas_j02c;
 8006b7e:	46c0      	nop			@ (mov r8, r8)
//		mov			wreg,#$13;					"H"
//		mov			waux,#$04;
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8006b80:	4b4e      	ldr	r3, [pc, #312]	@ (8006cbc <fallas+0x2a4>)
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 8006b88:	4b4c      	ldr	r3, [pc, #304]	@ (8006cbc <fallas+0x2a4>)
 8006b8a:	795b      	ldrb	r3, [r3, #5]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4053      	eors	r3, r2
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d107      	bne.n	8006ba6 <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 8006b96:	e000      	b.n	8006b9a <fallas+0x182>
	       	  goto fallas_j01b;
 8006b98:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x2, 1);
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	2013      	movs	r0, #19
 8006ba0:	f000 fbe2 	bl	8007368 <wreg_waux_conf>
 8006ba4:	e000      	b.n	8006ba8 <fallas+0x190>
	       	  goto fallas_j02b;
 8006ba6:	46c0      	nop			@ (mov r8, r8)
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 8006ba8:	4b43      	ldr	r3, [pc, #268]	@ (8006cb8 <fallas+0x2a0>)
 8006baa:	789b      	ldrb	r3, [r3, #2]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d107      	bne.n	8006bc0 <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 8006bb0:	4b41      	ldr	r3, [pc, #260]	@ (8006cb8 <fallas+0x2a0>)
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4053      	eors	r3, r2
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 8006bbe:	e000      	b.n	8006bc2 <fallas+0x1aa>
			goto fallas_j03;
 8006bc0:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	2113      	movs	r1, #19
 8006bc6:	201f      	movs	r0, #31
 8006bc8:	f000 fbce 	bl	8007368 <wreg_waux_conf>
 8006bcc:	e000      	b.n	8006bd0 <fallas+0x1b8>
			goto fallas_j04;
 8006bce:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 8006bd0:	4b39      	ldr	r3, [pc, #228]	@ (8006cb8 <fallas+0x2a0>)
 8006bd2:	791b      	ldrb	r3, [r3, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4053      	eors	r3, r2
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d105      	bne.n	8006bea <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 8006bde:	2201      	movs	r2, #1
 8006be0:	211e      	movs	r1, #30
 8006be2:	201f      	movs	r0, #31
 8006be4:	f000 fbc0 	bl	8007368 <wreg_waux_conf>
 8006be8:	e000      	b.n	8006bec <fallas+0x1d4>
			goto fallas_j06;
 8006bea:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 8006bec:	4b33      	ldr	r3, [pc, #204]	@ (8006cbc <fallas+0x2a4>)
 8006bee:	799b      	ldrb	r3, [r3, #6]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	4053      	eors	r3, r2
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	210a      	movs	r1, #10
 8006bfe:	201f      	movs	r0, #31
 8006c00:	f000 fbb2 	bl	8007368 <wreg_waux_conf>
 8006c04:	e000      	b.n	8006c08 <fallas+0x1f0>
			goto fallas_j06a;
 8006c06:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 8006c08:	4b2c      	ldr	r3, [pc, #176]	@ (8006cbc <fallas+0x2a4>)
 8006c0a:	789b      	ldrb	r3, [r3, #2]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4053      	eors	r3, r2
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d105      	bne.n	8006c22 <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 8006c16:	2201      	movs	r2, #1
 8006c18:	210c      	movs	r1, #12
 8006c1a:	2020      	movs	r0, #32
 8006c1c:	f000 fba4 	bl	8007368 <wreg_waux_conf>
 8006c20:	e000      	b.n	8006c24 <fallas+0x20c>
			goto fallas_j04b;
 8006c22:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 8006c24:	4b25      	ldr	r3, [pc, #148]	@ (8006cbc <fallas+0x2a4>)
 8006c26:	78db      	ldrb	r3, [r3, #3]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	4053      	eors	r3, r2
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 8006c32:	2201      	movs	r2, #1
 8006c34:	210b      	movs	r1, #11
 8006c36:	2020      	movs	r0, #32
 8006c38:	f000 fb96 	bl	8007368 <wreg_waux_conf>
 8006c3c:	e000      	b.n	8006c40 <fallas+0x228>
			goto fallas_j04c;
 8006c3e:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 8006c40:	4b1e      	ldr	r3, [pc, #120]	@ (8006cbc <fallas+0x2a4>)
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2201      	movs	r2, #1
 8006c46:	4053      	eors	r3, r2
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 8006c4e:	2201      	movs	r2, #1
 8006c50:	210c      	movs	r1, #12
 8006c52:	201f      	movs	r0, #31
 8006c54:	f000 fb88 	bl	8007368 <wreg_waux_conf>
 8006c58:	e000      	b.n	8006c5c <fallas+0x244>
			goto fallas_j06b;
 8006c5a:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 8006c5c:	4b14      	ldr	r3, [pc, #80]	@ (8006cb0 <fallas+0x298>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d00c      	beq.n	8006c7e <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <fallas+0x2b8>)
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	4a19      	ldr	r2, [pc, #100]	@ (8006cd4 <fallas+0x2bc>)
 8006c70:	215a      	movs	r1, #90	@ 0x5a
 8006c72:	5c52      	ldrb	r2, [r2, r1]
 8006c74:	4013      	ands	r3, r2
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d111      	bne.n	8006ca0 <fallas+0x288>
			goto parpadeo2a;
 8006c7c:	e000      	b.n	8006c80 <fallas+0x268>
			goto parpadeo2a;
 8006c7e:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8006c80:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 8006c82:	4b12      	ldr	r3, [pc, #72]	@ (8006ccc <fallas+0x2b4>)
 8006c84:	781a      	ldrb	r2, [r3, #0]
 8006c86:	4b10      	ldr	r3, [pc, #64]	@ (8006cc8 <fallas+0x2b0>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	0010      	movs	r0, r2
 8006c8e:	f000 fb43 	bl	8007318 <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 8006c92:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <fallas+0x29c>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 8006c98:	4b06      	ldr	r3, [pc, #24]	@ (8006cb4 <fallas+0x29c>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	705a      	strb	r2, [r3, #1]
 8006c9e:	e000      	b.n	8006ca2 <fallas+0x28a>
		goto finfallas;
 8006ca0:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20002024 	.word	0x20002024
 8006cb0:	20000b94 	.word	0x20000b94
 8006cb4:	20000b8c 	.word	0x20000b8c
 8006cb8:	20000b84 	.word	0x20000b84
 8006cbc:	20000b7c 	.word	0x20000b7c
 8006cc0:	20002134 	.word	0x20002134
 8006cc4:	20000bd4 	.word	0x20000bd4
 8006cc8:	20000b52 	.word	0x20000b52
 8006ccc:	20000b53 	.word	0x20000b53
 8006cd0:	20000b4c 	.word	0x20000b4c
 8006cd4:	200000b8 	.word	0x200000b8

08006cd8 <offdpy>:
void offdpy (){				//	offdpy:
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 8006cdc:	211f      	movs	r1, #31
 8006cde:	201f      	movs	r0, #31
 8006ce0:	f000 fb1a 	bl	8007318 <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 8006ce4:	4b04      	ldr	r3, [pc, #16]	@ (8006cf8 <offdpy+0x20>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 8006cea:	4b03      	ldr	r3, [pc, #12]	@ (8006cf8 <offdpy+0x20>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	705a      	strb	r2, [r3, #1]
}
 8006cf0:	46c0      	nop			@ (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	20000b8c 	.word	0x20000b8c

08006cfc <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 8006d02:	4b27      	ldr	r3, [pc, #156]	@ (8006da0 <ram_reserved+0xa4>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2baa      	cmp	r3, #170	@ 0xaa
 8006d08:	d119      	bne.n	8006d3e <ram_reserved+0x42>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 8006d0a:	46c0      	nop			@ (mov r8, r8)
			 * Optimización de código, para que se necesite menos memoria
			 * CGM 21/04/2024
			 */
			//uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
			//if(VarAux_ % 2048 == 0){
			if(( ((uint32_t) dirPointer) & 0x7FF) == 0){
 8006d0c:	4b25      	ldr	r3, [pc, #148]	@ (8006da4 <ram_reserved+0xa8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	055b      	lsls	r3, r3, #21
 8006d12:	0d5b      	lsrs	r3, r3, #21
 8006d14:	d10a      	bne.n	8006d2c <ram_reserved+0x30>
				// Estamos a inicio de Pagina, es necesario un borrado, debido a que se necesita escribir
				uint32_t numberPage = getNumberPage((uint32_t) dirPointer); 		// Number the Page
 8006d16:	4b23      	ldr	r3, [pc, #140]	@ (8006da4 <ram_reserved+0xa8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7fb fc56 	bl	80025cc <getNumberPage>
 8006d20:	0003      	movs	r3, r0
 8006d22:	603b      	str	r3, [r7, #0]
				erasePage(numberPage);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7fb fc76 	bl	8002618 <erasePage>
//
//			}

			// Escritura de la FLASH
			// CGM 21/04/2025
			writeFLASH( (uint64_t *) dirPointer, (uint64_t *) dataPointer,16);
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006da4 <ram_reserved+0xa8>)
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <ram_reserved+0xac>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2210      	movs	r2, #16
 8006d36:	0019      	movs	r1, r3
 8006d38:	f7fb fca2 	bl	8002680 <writeFLASH>
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			//asm ("nop");
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 8006d3c:	e02b      	b.n	8006d96 <ram_reserved+0x9a>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 8006d3e:	46c0      	nop			@ (mov r8, r8)
//				dirPointer +=4;
//				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
//				asm ("nop");
//			}
			//HAL_IWDG_Refresh( &hiwdg );
			for(uint8_t i = 0; i < 128 ; i++){
 8006d40:	1dfb      	adds	r3, r7, #7
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e01f      	b.n	8006d88 <ram_reserved+0x8c>
				FlashManager((uint32_t)dirPointer, (uint32_t)*dataPointer);
 8006d48:	4b16      	ldr	r3, [pc, #88]	@ (8006da4 <ram_reserved+0xa8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	4b16      	ldr	r3, [pc, #88]	@ (8006da8 <ram_reserved+0xac>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	0019      	movs	r1, r3
 8006d56:	0010      	movs	r0, r2
 8006d58:	f7fc fa0c 	bl	8003174 <FlashManager>
				reePlantilla[i] = *dataPointer;		// Guardando el respaldo en RAM
 8006d5c:	4b12      	ldr	r3, [pc, #72]	@ (8006da8 <ram_reserved+0xac>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	1dfb      	adds	r3, r7, #7
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	7811      	ldrb	r1, [r2, #0]
 8006d66:	4a11      	ldr	r2, [pc, #68]	@ (8006dac <ram_reserved+0xb0>)
 8006d68:	54d1      	strb	r1, [r2, r3]
				dataPointer++;
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006da8 <ram_reserved+0xac>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <ram_reserved+0xac>)
 8006d72:	601a      	str	r2, [r3, #0]
				dirPointer++;
 8006d74:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <ram_reserved+0xa8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <ram_reserved+0xa8>)
 8006d7c:	601a      	str	r2, [r3, #0]
			for(uint8_t i = 0; i < 128 ; i++){
 8006d7e:	1dfb      	adds	r3, r7, #7
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	1dfb      	adds	r3, r7, #7
 8006d84:	3201      	adds	r2, #1
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	1dfb      	adds	r3, r7, #7
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dada      	bge.n	8006d48 <ram_reserved+0x4c>
				//HAL_IWDG_Refresh( &hiwdg );
			}



WAIT_FOR_GRAB_0:
 8006d92:	46c0      	nop			@ (mov r8, r8)
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8006d94:	46c0      	nop			@ (mov r8, r8)
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b002      	add	sp, #8
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	46c0      	nop			@ (mov r8, r8)
 8006da0:	20000e14 	.word	0x20000e14
 8006da4:	20000e18 	.word	0x20000e18
 8006da8:	20000e1c 	.word	0x20000e1c
 8006dac:	20000c88 	.word	0x20000c88

08006db0 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 8006db6:	1dbb      	adds	r3, r7, #6
 8006db8:	2200      	movs	r2, #0
 8006dba:	801a      	strh	r2, [r3, #0]
	foo= reePlantilla[eetiempoAhorro1]*360;
 8006dbc:	4b08      	ldr	r3, [pc, #32]	@ (8006de0 <load_tiempoAhorro1+0x30>)
 8006dbe:	226f      	movs	r2, #111	@ 0x6f
 8006dc0:	5c9b      	ldrb	r3, [r3, r2]
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	1dbb      	adds	r3, r7, #6
 8006dc6:	22b4      	movs	r2, #180	@ 0xb4
 8006dc8:	0052      	lsls	r2, r2, #1
 8006dca:	434a      	muls	r2, r1
 8006dcc:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 8006dce:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <load_tiempoAhorro1+0x34>)
 8006dd0:	1dba      	adds	r2, r7, #6
 8006dd2:	8812      	ldrh	r2, [r2, #0]
 8006dd4:	801a      	strh	r2, [r3, #0]
}
 8006dd6:	46c0      	nop			@ (mov r8, r8)
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	20000c88 	.word	0x20000c88
 8006de4:	20000c2c 	.word	0x20000c2c

08006de8 <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 8006dee:	1dbb      	adds	r3, r7, #6
 8006df0:	2200      	movs	r2, #0
 8006df2:	801a      	strh	r2, [r3, #0]
		foo= reePlantilla[eetiempoAhorro2]*360;
 8006df4:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <load_tiempoAhorro2+0x30>)
 8006df6:	2270      	movs	r2, #112	@ 0x70
 8006df8:	5c9b      	ldrb	r3, [r3, r2]
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	1dbb      	adds	r3, r7, #6
 8006dfe:	22b4      	movs	r2, #180	@ 0xb4
 8006e00:	0052      	lsls	r2, r2, #1
 8006e02:	434a      	muls	r2, r1
 8006e04:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 8006e06:	4b05      	ldr	r3, [pc, #20]	@ (8006e1c <load_tiempoAhorro2+0x34>)
 8006e08:	1dba      	adds	r2, r7, #6
 8006e0a:	8812      	ldrh	r2, [r2, #0]
 8006e0c:	801a      	strh	r2, [r3, #0]
}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b002      	add	sp, #8
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	20000c88 	.word	0x20000c88
 8006e1c:	20000c2e 	.word	0x20000c2e

08006e20 <load_timeNoct>:

void load_timeNoct(){
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
	//cntNoct_H = eePlantilla[eetimeNoct] * 60;
	cntNoct_H = reePlantilla[eetimeNoct]*60;
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <load_timeNoct+0x1c>)
 8006e26:	224b      	movs	r2, #75	@ 0x4b
 8006e28:	5c9b      	ldrb	r3, [r3, r2]
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	233c      	movs	r3, #60	@ 0x3c
 8006e2e:	4353      	muls	r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	4b03      	ldr	r3, [pc, #12]	@ (8006e40 <load_timeNoct+0x20>)
 8006e34:	801a      	strh	r2, [r3, #0]
}
 8006e36:	46c0      	nop			@ (mov r8, r8)
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000c88 	.word	0x20000c88
 8006e40:	20000c40 	.word	0x20000c40

08006e44 <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 8006e4a:	4b16      	ldr	r3, [pc, #88]	@ (8006ea4 <load_next_buffer+0x60>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 8006e50:	4b15      	ldr	r3, [pc, #84]	@ (8006ea8 <load_next_buffer+0x64>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	01db      	lsls	r3, r3, #7
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	4b14      	ldr	r3, [pc, #80]	@ (8006eac <load_next_buffer+0x68>)
 8006e5a:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8006e5c:	4b14      	ldr	r3, [pc, #80]	@ (8006eb0 <load_next_buffer+0x6c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a12      	ldr	r2, [pc, #72]	@ (8006eac <load_next_buffer+0x68>)
 8006e62:	8812      	ldrh	r2, [r2, #0]
 8006e64:	189b      	adds	r3, r3, r2
 8006e66:	607b      	str	r3, [r7, #4]
	wreg = 0;
 8006e68:	4b12      	ldr	r3, [pc, #72]	@ (8006eb4 <load_next_buffer+0x70>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	701a      	strb	r2, [r3, #0]
	point_X++;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	607b      	str	r3, [r7, #4]
	point_Y++;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	603b      	str	r3, [r7, #0]
	wreg++;
 8006e82:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <load_next_buffer+0x70>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb4 <load_next_buffer+0x70>)
 8006e8c:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 8006e8e:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <load_next_buffer+0x70>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	db00      	blt.n	8006e9a <load_next_buffer+0x56>
		goto load_next_buffer_01;
 8006e98:	e7e9      	b.n	8006e6e <load_next_buffer+0x2a>
	}
    asm ("nop");
 8006e9a:	46c0      	nop			@ (mov r8, r8)
}
 8006e9c:	46c0      	nop			@ (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000e2c 	.word	0x20000e2c
 8006ea8:	20000e22 	.word	0x20000e22
 8006eac:	200008d2 	.word	0x200008d2
 8006eb0:	20000e28 	.word	0x20000e28
 8006eb4:	20000b53 	.word	0x20000b53

08006eb8 <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
		//
		//waux = lowByte(cntReg);		// 		mov		waux,resull;
		//point_X++;  // cntRegPNT++;						//		incw	X
		//wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado

		FlashManager(cntRegPNT, cntReg);
 8006ebc:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <save_cntReg+0x1c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	001a      	movs	r2, r3
 8006ec2:	4b05      	ldr	r3, [pc, #20]	@ (8006ed8 <save_cntReg+0x20>)
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	0010      	movs	r0, r2
 8006eca:	f7fc f953 	bl	8003174 <FlashManager>


		//HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
		//
//		ret
}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	200020cc 	.word	0x200020cc
 8006ed8:	200020ca 	.word	0x200020ca

08006edc <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 8006ee0:	4b25      	ldr	r3, [pc, #148]	@ (8006f78 <save_timeUNIX+0x9c>)
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	0a1b      	lsrs	r3, r3, #8
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006eec:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 8006eee:	4b23      	ldr	r3, [pc, #140]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	001a      	movs	r2, r3
 8006ef4:	4b22      	ldr	r3, [pc, #136]	@ (8006f80 <save_timeUNIX+0xa4>)
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	0010      	movs	r0, r2
 8006efa:	f000 f9f9 	bl	80072f0 <wreeprom>
	reeTimeUnix1 = waux;
 8006efe:	4b1f      	ldr	r3, [pc, #124]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	4b20      	ldr	r3, [pc, #128]	@ (8006f84 <save_timeUNIX+0xa8>)
 8006f04:	701a      	strb	r2, [r3, #0]
	//HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 8006f06:	4b1c      	ldr	r3, [pc, #112]	@ (8006f78 <save_timeUNIX+0x9c>)
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f0e:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 8006f10:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	001a      	movs	r2, r3
 8006f16:	4b1c      	ldr	r3, [pc, #112]	@ (8006f88 <save_timeUNIX+0xac>)
 8006f18:	0019      	movs	r1, r3
 8006f1a:	0010      	movs	r0, r2
 8006f1c:	f000 f9e8 	bl	80072f0 <wreeprom>
	reeTimeUnix2 = waux;
 8006f20:	4b16      	ldr	r3, [pc, #88]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	4b19      	ldr	r3, [pc, #100]	@ (8006f8c <save_timeUNIX+0xb0>)
 8006f26:	701a      	strb	r2, [r3, #0]


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 8006f28:	4b19      	ldr	r3, [pc, #100]	@ (8006f90 <save_timeUNIX+0xb4>)
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4b12      	ldr	r3, [pc, #72]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f34:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 8006f36:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	4b15      	ldr	r3, [pc, #84]	@ (8006f94 <save_timeUNIX+0xb8>)
 8006f3e:	0019      	movs	r1, r3
 8006f40:	0010      	movs	r0, r2
 8006f42:	f000 f9d5 	bl	80072f0 <wreeprom>
	reeTimeUnix3 = waux;
 8006f46:	4b0d      	ldr	r3, [pc, #52]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	4b13      	ldr	r3, [pc, #76]	@ (8006f98 <save_timeUNIX+0xbc>)
 8006f4c:	701a      	strb	r2, [r3, #0]
	//HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8006f4e:	4b10      	ldr	r3, [pc, #64]	@ (8006f90 <save_timeUNIX+0xb4>)
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	4b09      	ldr	r3, [pc, #36]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f56:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 8006f58:	4b08      	ldr	r3, [pc, #32]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <save_timeUNIX+0xc0>)
 8006f60:	0019      	movs	r1, r3
 8006f62:	0010      	movs	r0, r2
 8006f64:	f000 f9c4 	bl	80072f0 <wreeprom>
	reeTimeUnix4 = waux;
 8006f68:	4b04      	ldr	r3, [pc, #16]	@ (8006f7c <save_timeUNIX+0xa0>)
 8006f6a:	781a      	ldrb	r2, [r3, #0]
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <save_timeUNIX+0xc4>)
 8006f6e:	701a      	strb	r2, [r3, #0]
	//HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria

}
 8006f70:	46c0      	nop			@ (mov r8, r8)
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	20001e3c 	.word	0x20001e3c
 8006f7c:	20000b52 	.word	0x20000b52
 8006f80:	0803f804 	.word	0x0803f804
 8006f84:	20000d09 	.word	0x20000d09
 8006f88:	0803f805 	.word	0x0803f805
 8006f8c:	20000d0a 	.word	0x20000d0a
 8006f90:	20001e3e 	.word	0x20001e3e
 8006f94:	0803f806 	.word	0x0803f806
 8006f98:	20000d0b 	.word	0x20000d0b
 8006f9c:	0803f807 	.word	0x0803f807
 8006fa0:	20000d0c 	.word	0x20000d0c

08006fa4 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	000a      	movs	r2, r1
 8006fae:	1cfb      	adds	r3, r7, #3
 8006fb0:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 8006fb2:	e011      	b.n	8006fd8 <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8006fb4:	210f      	movs	r1, #15
 8006fb6:	187b      	adds	r3, r7, r1
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 8006fbe:	187b      	adds	r3, r7, r1
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 f860 	bl	8007088 <build_chksum>
		*point_X++;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	607b      	str	r3, [r7, #4]
		waux--;
 8006fce:	1cfb      	adds	r3, r7, #3
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	1cfb      	adds	r3, r7, #3
 8006fd4:	3a01      	subs	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
	while (waux){
 8006fd8:	1cfb      	adds	r3, r7, #3
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e9      	bne.n	8006fb4 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 8006fe0:	46c0      	nop			@ (mov r8, r8)
 8006fe2:	46c0      	nop			@ (mov r8, r8)
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b004      	add	sp, #16
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 8006ff0:	4b05      	ldr	r3, [pc, #20]	@ (8007008 <ld_alarmDelay+0x1c>)
 8006ff2:	224e      	movs	r2, #78	@ 0x4e
 8006ff4:	5c9b      	ldrb	r3, [r3, r2]
 8006ff6:	001a      	movs	r2, r3
 8006ff8:	233c      	movs	r3, #60	@ 0x3c
 8006ffa:	4353      	muls	r3, r2
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	4b03      	ldr	r3, [pc, #12]	@ (800700c <ld_alarmDelay+0x20>)
 8007000:	801a      	strh	r2, [r3, #0]
}
 8007002:	46c0      	nop			@ (mov r8, r8)
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	200000b8 	.word	0x200000b8
 800700c:	2000202c 	.word	0x2000202c

08007010 <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	e007      	b.n	800702c <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 800701c:	4a07      	ldr	r2, [pc, #28]	@ (800703c <clean_buffer+0x2c>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	18d3      	adds	r3, r2, r3
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3301      	adds	r3, #1
 800702a:	607b      	str	r3, [r7, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007030:	ddf4      	ble.n	800701c <clean_buffer+0xc>
	}
}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b002      	add	sp, #8
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20000d14 	.word	0x20000d14

08007040 <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e00c      	b.n	800706a <copyVector+0x2a>
		*dstY = *srcX;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	701a      	strb	r2, [r3, #0]
		srcX++;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3301      	adds	r3, #1
 800705c:	607b      	str	r3, [r7, #4]
		dstY++;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <copyVector+0x44>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	001a      	movs	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4293      	cmp	r3, r2
 8007074:	dbec      	blt.n	8007050 <copyVector+0x10>
	}
	wreg = 0;
 8007076:	4b03      	ldr	r3, [pc, #12]	@ (8007084 <copyVector+0x44>)
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
}
 800707c:	46c0      	nop			@ (mov r8, r8)
 800707e:	46bd      	mov	sp, r7
 8007080:	b004      	add	sp, #16
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000b53 	.word	0x20000b53

08007088 <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	0002      	movs	r2, r0
 8007090:	1dfb      	adds	r3, r7, #7
 8007092:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8007094:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	4b04      	ldr	r3, [pc, #16]	@ (80070ac <build_chksum+0x24>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	18d2      	adds	r2, r2, r3
 80070a0:	4b02      	ldr	r3, [pc, #8]	@ (80070ac <build_chksum+0x24>)
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	46c0      	nop			@ (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b002      	add	sp, #8
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20001ec0 	.word	0x20001ec0

080070b0 <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 80070b4:	f7ff fe22 	bl	8006cfc <ram_reserved>
Return_RAM:

}
 80070b8:	46c0      	nop			@ (mov r8, r8)
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <decword+0x1c>
		(*decwreg_Reg)--;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	801a      	strh	r2, [r3, #0]
}
 80070da:	46c0      	nop			@ (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b002      	add	sp, #8
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <decwreg+0x1c>
		(*decwreg_Reg)--;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	701a      	strb	r2, [r3, #0]
}
 80070fe:	46c0      	nop			@ (mov r8, r8)
 8007100:	46bd      	mov	sp, r7
 8007102:	b002      	add	sp, #8
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 800710e:	4b40      	ldr	r3, [pc, #256]	@ (8007210 <buildmode+0x108>)
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 8007114:	4b3f      	ldr	r3, [pc, #252]	@ (8007214 <buildmode+0x10c>)
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 800711c:	4b3c      	ldr	r3, [pc, #240]	@ (8007210 <buildmode+0x108>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2201      	movs	r2, #1
 8007122:	4313      	orrs	r3, r2
 8007124:	b2da      	uxtb	r2, r3
 8007126:	4b3a      	ldr	r3, [pc, #232]	@ (8007210 <buildmode+0x108>)
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e000      	b.n	800712e <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 800712c:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 800712e:	1dbb      	adds	r3, r7, #6
 8007130:	2200      	movs	r2, #0
 8007132:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 8007134:	4b38      	ldr	r3, [pc, #224]	@ (8007218 <buildmode+0x110>)
 8007136:	2223      	movs	r2, #35	@ 0x23
 8007138:	5c9b      	ldrb	r3, [r3, r2]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	b29b      	uxth	r3, r3
 800713e:	4a36      	ldr	r2, [pc, #216]	@ (8007218 <buildmode+0x110>)
 8007140:	2124      	movs	r1, #36	@ 0x24
 8007142:	5c52      	ldrb	r2, [r2, r1]
 8007144:	189b      	adds	r3, r3, r2
 8007146:	b29a      	uxth	r2, r3
 8007148:	1dbb      	adds	r3, r7, #6
 800714a:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 800714c:	4b33      	ldr	r3, [pc, #204]	@ (800721c <buildmode+0x114>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	b29b      	uxth	r3, r3
 8007154:	4a32      	ldr	r2, [pc, #200]	@ (8007220 <buildmode+0x118>)
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	189b      	adds	r3, r3, r2
 800715a:	b29a      	uxth	r2, r3
 800715c:	4b31      	ldr	r3, [pc, #196]	@ (8007224 <buildmode+0x11c>)
 800715e:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8007160:	4b30      	ldr	r3, [pc, #192]	@ (8007224 <buildmode+0x11c>)
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b21b      	sxth	r3, r3
 8007166:	1dba      	adds	r2, r7, #6
 8007168:	2100      	movs	r1, #0
 800716a:	5e52      	ldrsh	r2, [r2, r1]
 800716c:	429a      	cmp	r2, r3
 800716e:	dc07      	bgt.n	8007180 <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 8007170:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <buildmode+0x108>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2202      	movs	r2, #2
 8007176:	4313      	orrs	r3, r2
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4b25      	ldr	r3, [pc, #148]	@ (8007210 <buildmode+0x108>)
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e000      	b.n	8007182 <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 8007180:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 8007182:	4b25      	ldr	r3, [pc, #148]	@ (8007218 <buildmode+0x110>)
 8007184:	2259      	movs	r2, #89	@ 0x59
 8007186:	5c9b      	ldrb	r3, [r3, r2]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d025      	beq.n	80071d8 <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 800718c:	4b26      	ldr	r3, [pc, #152]	@ (8007228 <buildmode+0x120>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	b29b      	uxth	r3, r3
 8007194:	4a25      	ldr	r2, [pc, #148]	@ (800722c <buildmode+0x124>)
 8007196:	7812      	ldrb	r2, [r2, #0]
 8007198:	189b      	adds	r3, r3, r2
 800719a:	b29a      	uxth	r2, r3
 800719c:	4b21      	ldr	r3, [pc, #132]	@ (8007224 <buildmode+0x11c>)
 800719e:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 80071a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007218 <buildmode+0x110>)
 80071a2:	2221      	movs	r2, #33	@ 0x21
 80071a4:	5c9b      	ldrb	r3, [r3, r2]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007218 <buildmode+0x110>)
 80071ac:	2122      	movs	r1, #34	@ 0x22
 80071ae:	5c52      	ldrb	r2, [r2, r1]
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	1dbb      	adds	r3, r7, #6
 80071b6:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 80071b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007224 <buildmode+0x11c>)
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b21b      	sxth	r3, r3
 80071be:	1dba      	adds	r2, r7, #6
 80071c0:	2100      	movs	r1, #0
 80071c2:	5e52      	ldrsh	r2, [r2, r1]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	dc09      	bgt.n	80071dc <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 80071c8:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <buildmode+0x108>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2210      	movs	r2, #16
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <buildmode+0x108>)
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	e002      	b.n	80071de <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 80071d8:	46c0      	nop			@ (mov r8, r8)
 80071da:	e000      	b.n	80071de <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 80071dc:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 80071de:	4b14      	ldr	r3, [pc, #80]	@ (8007230 <buildmode+0x128>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2201      	movs	r2, #1
 80071e4:	4053      	eors	r3, r2
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d108      	bne.n	80071fe <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 80071ec:	4b08      	ldr	r3, [pc, #32]	@ (8007210 <buildmode+0x108>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2280      	movs	r2, #128	@ 0x80
 80071f2:	4252      	negs	r2, r2
 80071f4:	4313      	orrs	r3, r2
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <buildmode+0x108>)
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	e000      	b.n	8007200 <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 80071fe:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 8007200:	4b03      	ldr	r3, [pc, #12]	@ (8007210 <buildmode+0x108>)
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <buildmode+0x12c>)
 8007206:	701a      	strb	r2, [r3, #0]

}
 8007208:	46c0      	nop			@ (mov r8, r8)
 800720a:	46bd      	mov	sp, r7
 800720c:	b002      	add	sp, #8
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000b52 	.word	0x20000b52
 8007214:	20000bb6 	.word	0x20000bb6
 8007218:	200000b8 	.word	0x200000b8
 800721c:	20000bac 	.word	0x20000bac
 8007220:	20000bad 	.word	0x20000bad
 8007224:	200008d2 	.word	0x200008d2
 8007228:	20000bae 	.word	0x20000bae
 800722c:	20000baf 	.word	0x20000baf
 8007230:	20000b74 	.word	0x20000b74
 8007234:	20000b50 	.word	0x20000b50

08007238 <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 800723e:	4b26      	ldr	r3, [pc, #152]	@ (80072d8 <memodriver+0xa0>)
 8007240:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 8007242:	4b26      	ldr	r3, [pc, #152]	@ (80072dc <memodriver+0xa4>)
 8007244:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 8007246:	4b26      	ldr	r3, [pc, #152]	@ (80072e0 <memodriver+0xa8>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2baa      	cmp	r3, #170	@ 0xaa
 800724c:	d11f      	bne.n	800728e <memodriver+0x56>
				goto  loaddat;
			}
grabmemo:
 800724e:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 8007250:	4b21      	ldr	r3, [pc, #132]	@ (80072d8 <memodriver+0xa0>)
 8007252:	781a      	ldrb	r2, [r3, #0]
 8007254:	4b23      	ldr	r3, [pc, #140]	@ (80072e4 <memodriver+0xac>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d025      	beq.n	80072a8 <memodriver+0x70>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 800725c:	4b21      	ldr	r3, [pc, #132]	@ (80072e4 <memodriver+0xac>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	001a      	movs	r2, r3
 8007262:	4b21      	ldr	r3, [pc, #132]	@ (80072e8 <memodriver+0xb0>)
 8007264:	5c9b      	ldrb	r3, [r3, r2]
 8007266:	0018      	movs	r0, r3
 8007268:	4b1e      	ldr	r3, [pc, #120]	@ (80072e4 <memodriver+0xac>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	001a      	movs	r2, r3
 800726e:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <memodriver+0xa4>)
 8007270:	18d3      	adds	r3, r2, r3
 8007272:	0019      	movs	r1, r3
 8007274:	f000 f83c 	bl	80072f0 <wreeprom>
			reePlantilla[cntmemo] = copiaPlantilla[cntmemo];
 8007278:	4b1a      	ldr	r3, [pc, #104]	@ (80072e4 <memodriver+0xac>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	0019      	movs	r1, r3
 800727e:	4b19      	ldr	r3, [pc, #100]	@ (80072e4 <memodriver+0xac>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	001a      	movs	r2, r3
 8007284:	4b18      	ldr	r3, [pc, #96]	@ (80072e8 <memodriver+0xb0>)
 8007286:	5c59      	ldrb	r1, [r3, r1]
 8007288:	4b18      	ldr	r3, [pc, #96]	@ (80072ec <memodriver+0xb4>)
 800728a:	5499      	strb	r1, [r3, r2]
			goto nextdat;
 800728c:	e00d      	b.n	80072aa <memodriver+0x72>
				goto  loaddat;
 800728e:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			//point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
			point_Y[cntmemo] = reePlantilla[cntmemo];
 8007290:	4b14      	ldr	r3, [pc, #80]	@ (80072e4 <memodriver+0xac>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	0019      	movs	r1, r3
 8007296:	4b13      	ldr	r3, [pc, #76]	@ (80072e4 <memodriver+0xac>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	001a      	movs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	189b      	adds	r3, r3, r2
 80072a0:	4a12      	ldr	r2, [pc, #72]	@ (80072ec <memodriver+0xb4>)
 80072a2:	5c52      	ldrb	r2, [r2, r1]
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e000      	b.n	80072aa <memodriver+0x72>
				goto nextdat;
 80072a8:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <memodriver+0xac>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	4b0c      	ldr	r3, [pc, #48]	@ (80072e4 <memodriver+0xac>)
 80072b4:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <memodriver+0xac>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da06      	bge.n	80072ce <memodriver+0x96>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 80072c0:	4b07      	ldr	r3, [pc, #28]	@ (80072e0 <memodriver+0xa8>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 80072c6:	4b07      	ldr	r3, [pc, #28]	@ (80072e4 <memodriver+0xac>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 80072cc:	e000      	b.n	80072d0 <memodriver+0x98>
				goto finmemodr;
 80072ce:	46c0      	nop			@ (mov r8, r8)
}
 80072d0:	46c0      	nop			@ (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b002      	add	sp, #8
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	200000b8 	.word	0x200000b8
 80072dc:	0803f000 	.word	0x0803f000
 80072e0:	20000c5f 	.word	0x20000c5f
 80072e4:	20000c60 	.word	0x20000c60
 80072e8:	20000138 	.word	0x20000138
 80072ec:	20000c88 	.word	0x20000c88

080072f0 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	0002      	movs	r2, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	1dfb      	adds	r3, r7, #7
 80072fc:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 80072fe:	1dfb      	adds	r3, r7, #7
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();
	FlashManager((uint32_t)AddressDestination, (uint32_t)Data);
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	0011      	movs	r1, r2
 800730a:	0018      	movs	r0, r3
 800730c:	f7fb ff32 	bl	8003174 <FlashManager>
}
 8007310:	46c0      	nop			@ (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	b004      	add	sp, #16
 8007316:	bd80      	pop	{r7, pc}

08007318 <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	0002      	movs	r2, r0
 8007320:	1dfb      	adds	r3, r7, #7
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	1dbb      	adds	r3, r7, #6
 8007326:	1c0a      	adds	r2, r1, #0
 8007328:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 800732a:	4b06      	ldr	r3, [pc, #24]	@ (8007344 <op_menu+0x2c>)
 800732c:	1dfa      	adds	r2, r7, #7
 800732e:	7812      	ldrb	r2, [r2, #0]
 8007330:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 8007332:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <op_menu+0x30>)
 8007334:	1dba      	adds	r2, r7, #6
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	701a      	strb	r2, [r3, #0]
}
 800733a:	46c0      	nop			@ (mov r8, r8)
 800733c:	46bd      	mov	sp, r7
 800733e:	b002      	add	sp, #8
 8007340:	bd80      	pop	{r7, pc}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	20000b4f 	.word	0x20000b4f
 8007348:	20000b4e 	.word	0x20000b4e

0800734c <datled_clear>:

void datled_clear()
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 8007350:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <datled_clear+0x18>)
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 8007356:	4b03      	ldr	r3, [pc, #12]	@ (8007364 <datled_clear+0x18>)
 8007358:	2200      	movs	r2, #0
 800735a:	705a      	strb	r2, [r3, #1]
}
 800735c:	46c0      	nop			@ (mov r8, r8)
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	46c0      	nop			@ (mov r8, r8)
 8007364:	20000b8c 	.word	0x20000b8c

08007368 <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	0004      	movs	r4, r0
 8007370:	0008      	movs	r0, r1
 8007372:	0011      	movs	r1, r2
 8007374:	1dfb      	adds	r3, r7, #7
 8007376:	1c22      	adds	r2, r4, #0
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	1dbb      	adds	r3, r7, #6
 800737c:	1c02      	adds	r2, r0, #0
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	1d7b      	adds	r3, r7, #5
 8007382:	1c0a      	adds	r2, r1, #0
 8007384:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 8007386:	4b0b      	ldr	r3, [pc, #44]	@ (80073b4 <wreg_waux_conf+0x4c>)
 8007388:	1dfa      	adds	r2, r7, #7
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 800738e:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <wreg_waux_conf+0x50>)
 8007390:	1dba      	adds	r2, r7, #6
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 8007396:	1d7b      	adds	r3, r7, #5
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 800739e:	4b07      	ldr	r3, [pc, #28]	@ (80073bc <wreg_waux_conf+0x54>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 80073a4:	e002      	b.n	80073ac <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 80073a6:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <wreg_waux_conf+0x54>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	701a      	strb	r2, [r3, #0]
}
 80073ac:	46c0      	nop			@ (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b003      	add	sp, #12
 80073b2:	bd90      	pop	{r4, r7, pc}
 80073b4:	20000b53 	.word	0x20000b53
 80073b8:	20000b52 	.word	0x20000b52
 80073bc:	20002024 	.word	0x20002024

080073c0 <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 80073c0:	b5b0      	push	{r4, r5, r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	0005      	movs	r5, r0
 80073c8:	000c      	movs	r4, r1
 80073ca:	0010      	movs	r0, r2
 80073cc:	0019      	movs	r1, r3
 80073ce:	1dbb      	adds	r3, r7, #6
 80073d0:	1c2a      	adds	r2, r5, #0
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	1c22      	adds	r2, r4, #0
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	1cbb      	adds	r3, r7, #2
 80073dc:	1c02      	adds	r2, r0, #0
 80073de:	801a      	strh	r2, [r3, #0]
 80073e0:	1c7b      	adds	r3, r7, #1
 80073e2:	1c0a      	adds	r2, r1, #0
 80073e4:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 80073e6:	4b14      	ldr	r3, [pc, #80]	@ (8007438 <opc_nv+0x78>)
 80073e8:	1dba      	adds	r2, r7, #6
 80073ea:	8812      	ldrh	r2, [r2, #0]
 80073ec:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 80073ee:	4b13      	ldr	r3, [pc, #76]	@ (800743c <opc_nv+0x7c>)
 80073f0:	1d3a      	adds	r2, r7, #4
 80073f2:	8812      	ldrh	r2, [r2, #0]
 80073f4:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 80073f6:	4b12      	ldr	r3, [pc, #72]	@ (8007440 <opc_nv+0x80>)
 80073f8:	1cba      	adds	r2, r7, #2
 80073fa:	8812      	ldrh	r2, [r2, #0]
 80073fc:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 80073fe:	f7fe ff9f 	bl	8006340 <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 8007402:	4b0f      	ldr	r3, [pc, #60]	@ (8007440 <opc_nv+0x80>)
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b29a      	uxth	r2, r3
 800740a:	1c7b      	adds	r3, r7, #1
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b2d1      	uxtb	r1, r2
 8007410:	4a0c      	ldr	r2, [pc, #48]	@ (8007444 <opc_nv+0x84>)
 8007412:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 8007414:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <opc_nv+0x80>)
 8007416:	881a      	ldrh	r2, [r3, #0]
 8007418:	2318      	movs	r3, #24
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2d1      	uxtb	r1, r2
 8007420:	4a08      	ldr	r2, [pc, #32]	@ (8007444 <opc_nv+0x84>)
 8007422:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 8007424:	4b06      	ldr	r3, [pc, #24]	@ (8007440 <opc_nv+0x80>)
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	0018      	movs	r0, r3
 800742a:	f7ff f97f 	bl	800672c <convadec_math>

}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	46bd      	mov	sp, r7
 8007432:	b002      	add	sp, #8
 8007434:	bdb0      	pop	{r4, r5, r7, pc}
 8007436:	46c0      	nop			@ (mov r8, r8)
 8007438:	20000bfe 	.word	0x20000bfe
 800743c:	20000c00 	.word	0x20000c00
 8007440:	200008d2 	.word	0x200008d2
 8007444:	20000138 	.word	0x20000138

08007448 <grabadoLoggerBloquesCompletos>:

void grabadoLoggerBloquesCompletos(uint64_t * pointX_, uint64_t * pointBuffer_){
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]

	uint64_t * pointInitPage_ = getAddressPage((uint32_t) pointX_); 		// Apuntador Inicio de Pagina
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	0018      	movs	r0, r3
 8007456:	f7fb f8cb 	bl	80025f0 <getAddressPage>
 800745a:	0002      	movs	r2, r0
 800745c:	000b      	movs	r3, r1
 800745e:	0013      	movs	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
	uint32_t sizeCopy = ( ((uint32_t) cntBlockFlash & 0xF)) << 4;			// Cantidad de Bloques de 128 Bytes Completos
 8007462:	4b1e      	ldr	r3, [pc, #120]	@ (80074dc <grabadoLoggerBloquesCompletos+0x94>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	22ff      	movs	r2, #255	@ 0xff
 800746a:	4013      	ands	r3, r2
 800746c:	617b      	str	r3, [r7, #20]
	uint8_t * pointX_126 = (uint8_t *) pointX_;								// Puntero para dirección 126 del Bloque de 128 Bytes
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	613b      	str	r3, [r7, #16]

	if(pointX_126[126] != 0 && pointX_126[126] != 0xFF){// Revisa si existe un Bloque de 128 Bytes esta incompleto
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	337e      	adds	r3, #126	@ 0x7e
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02b      	beq.n	80074d4 <grabadoLoggerBloquesCompletos+0x8c>
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	337e      	adds	r3, #126	@ 0x7e
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2bff      	cmp	r3, #255	@ 0xff
 8007484:	d026      	beq.n	80074d4 <grabadoLoggerBloquesCompletos+0x8c>
		// Lectura de la Pagina en FLASH, hasta los bloques que estan completos
		for(uint32_t i=0; i<sizeCopy; i++){
 8007486:	2300      	movs	r3, #0
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	e00e      	b.n	80074aa <grabadoLoggerBloquesCompletos+0x62>
			pointBuffer_[i] = pointInitPage_[i];// Copia de los bloques de 128 bytes completos
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	18d3      	adds	r3, r2, r3
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	00d2      	lsls	r2, r2, #3
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	1889      	adds	r1, r1, r2
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	600a      	str	r2, [r1, #0]
 80074a2:	604b      	str	r3, [r1, #4]
		for(uint32_t i=0; i<sizeCopy; i++){
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	3301      	adds	r3, #1
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d3ec      	bcc.n	800748c <grabadoLoggerBloquesCompletos+0x44>
		}

		// Realiza El borrado de la Pagina en caso de encontrar un Bloque de 128 Bytes Incompleto
		uint32_t numberPage_ = getNumberPage((uint32_t) pointX_);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7fb f889 	bl	80025cc <getNumberPage>
 80074ba:	0003      	movs	r3, r0
 80074bc:	60fb      	str	r3, [r7, #12]
		erasePage(numberPage_);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	0018      	movs	r0, r3
 80074c2:	f7fb f8a9 	bl	8002618 <erasePage>

		// Grabado de Bloques de 128 Bytes Completos
		writeFLASH(pointInitPage_, pointBuffer_,sizeCopy);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7fb f8d6 	bl	8002680 <writeFLASH>
	}

}
 80074d4:	46c0      	nop			@ (mov r8, r8)
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b008      	add	sp, #32
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000e22 	.word	0x20000e22

080074e0 <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 80074e6:	4b79      	ldr	r3, [pc, #484]	@ (80076cc <comunicacion+0x1ec>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	4b77      	ldr	r3, [pc, #476]	@ (80076cc <comunicacion+0x1ec>)
 80074f0:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 80074f2:	4b76      	ldr	r3, [pc, #472]	@ (80076cc <comunicacion+0x1ec>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2bff      	cmp	r3, #255	@ 0xff
 80074f8:	d103      	bne.n	8007502 <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80074fa:	4b75      	ldr	r3, [pc, #468]	@ (80076d0 <comunicacion+0x1f0>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8007500:	e0dd      	b.n	80076be <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 8007502:	4b72      	ldr	r3, [pc, #456]	@ (80076cc <comunicacion+0x1ec>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2bfe      	cmp	r3, #254	@ 0xfe
 8007508:	d103      	bne.n	8007512 <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 800750a:	4b71      	ldr	r3, [pc, #452]	@ (80076d0 <comunicacion+0x1f0>)
 800750c:	2201      	movs	r2, #1
 800750e:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 8007510:	e0d5      	b.n	80076be <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 8007512:	4b6e      	ldr	r3, [pc, #440]	@ (80076cc <comunicacion+0x1ec>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d000      	beq.n	800751c <comunicacion+0x3c>
 800751a:	e0cd      	b.n	80076b8 <comunicacion+0x1d8>
			goto comu_01;
 800751c:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 800751e:	4b6b      	ldr	r3, [pc, #428]	@ (80076cc <comunicacion+0x1ec>)
 8007520:	2205      	movs	r2, #5
 8007522:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 8007524:	4b6b      	ldr	r3, [pc, #428]	@ (80076d4 <comunicacion+0x1f4>)
 8007526:	0018      	movs	r0, r3
 8007528:	f00c fb08 	bl	8013b3c <HAL_I2C_GetState>
 800752c:	0003      	movs	r3, r0
 800752e:	2b20      	cmp	r3, #32
 8007530:	d000      	beq.n	8007534 <comunicacion+0x54>
 8007532:	e0ae      	b.n	8007692 <comunicacion+0x1b2>
				countResetI2C = 0;
 8007534:	4b68      	ldr	r3, [pc, #416]	@ (80076d8 <comunicacion+0x1f8>)
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 800753a:	4b68      	ldr	r3, [pc, #416]	@ (80076dc <comunicacion+0x1fc>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 8007540:	4b66      	ldr	r3, [pc, #408]	@ (80076dc <comunicacion+0x1fc>)
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8007546:	230f      	movs	r3, #15
 8007548:	18fb      	adds	r3, r7, r3
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	e00a      	b.n	8007566 <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 8007550:	200f      	movs	r0, #15
 8007552:	183b      	adds	r3, r7, r0
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	4a62      	ldr	r2, [pc, #392]	@ (80076e0 <comunicacion+0x200>)
 8007558:	2100      	movs	r1, #0
 800755a:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 800755c:	183b      	adds	r3, r7, r0
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	183b      	adds	r3, r7, r0
 8007562:	3201      	adds	r2, #1
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	230f      	movs	r3, #15
 8007568:	18fb      	adds	r3, r7, r3
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b06      	cmp	r3, #6
 800756e:	d9ef      	bls.n	8007550 <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 8007570:	4b5b      	ldr	r3, [pc, #364]	@ (80076e0 <comunicacion+0x200>)
 8007572:	2207      	movs	r2, #7
 8007574:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 8007576:	4b5a      	ldr	r3, [pc, #360]	@ (80076e0 <comunicacion+0x200>)
 8007578:	2209      	movs	r2, #9
 800757a:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 800757c:	4b59      	ldr	r3, [pc, #356]	@ (80076e4 <comunicacion+0x204>)
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	4b57      	ldr	r3, [pc, #348]	@ (80076e0 <comunicacion+0x200>)
 8007582:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 8007584:	4b58      	ldr	r3, [pc, #352]	@ (80076e8 <comunicacion+0x208>)
 8007586:	781a      	ldrb	r2, [r3, #0]
 8007588:	4b55      	ldr	r3, [pc, #340]	@ (80076e0 <comunicacion+0x200>)
 800758a:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 800758c:	4b54      	ldr	r3, [pc, #336]	@ (80076e0 <comunicacion+0x200>)
 800758e:	2200      	movs	r2, #0
 8007590:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 8007592:	230e      	movs	r3, #14
 8007594:	18fb      	adds	r3, r7, r3
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e015      	b.n	80075c8 <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 800759c:	4b50      	ldr	r3, [pc, #320]	@ (80076e0 <comunicacion+0x200>)
 800759e:	791a      	ldrb	r2, [r3, #4]
 80075a0:	200e      	movs	r0, #14
 80075a2:	183b      	adds	r3, r7, r0
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	4951      	ldr	r1, [pc, #324]	@ (80076ec <comunicacion+0x20c>)
 80075a8:	5ccb      	ldrb	r3, [r1, r3]
 80075aa:	0019      	movs	r1, r3
 80075ac:	183b      	adds	r3, r7, r0
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4099      	lsls	r1, r3
 80075b2:	000b      	movs	r3, r1
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	4313      	orrs	r3, r2
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	4b49      	ldr	r3, [pc, #292]	@ (80076e0 <comunicacion+0x200>)
 80075bc:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 80075be:	183b      	adds	r3, r7, r0
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	183b      	adds	r3, r7, r0
 80075c4:	3201      	adds	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]
 80075c8:	230e      	movs	r3, #14
 80075ca:	18fb      	adds	r3, r7, r3
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b07      	cmp	r3, #7
 80075d0:	d9e4      	bls.n	800759c <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 80075d2:	4b43      	ldr	r3, [pc, #268]	@ (80076e0 <comunicacion+0x200>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 80075d8:	4b41      	ldr	r3, [pc, #260]	@ (80076e0 <comunicacion+0x200>)
 80075da:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2106      	movs	r1, #6
 80075e0:	0018      	movs	r0, r3
 80075e2:	f7ff fcdf 	bl	8006fa4 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 80075e6:	4b3d      	ldr	r3, [pc, #244]	@ (80076dc <comunicacion+0x1fc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	4b3c      	ldr	r3, [pc, #240]	@ (80076e0 <comunicacion+0x200>)
 80075ee:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 80075f0:	4b3a      	ldr	r3, [pc, #232]	@ (80076dc <comunicacion+0x1fc>)
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 80075f6:	4b3e      	ldr	r3, [pc, #248]	@ (80076f0 <comunicacion+0x210>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d034      	beq.n	8007668 <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 80075fe:	4a3d      	ldr	r2, [pc, #244]	@ (80076f4 <comunicacion+0x214>)
 8007600:	4834      	ldr	r0, [pc, #208]	@ (80076d4 <comunicacion+0x1f4>)
 8007602:	2309      	movs	r3, #9
 8007604:	2154      	movs	r1, #84	@ 0x54
 8007606:	f00c f8bf 	bl	8013788 <HAL_I2C_Master_Receive_DMA>
 800760a:	1e03      	subs	r3, r0, #0
 800760c:	d123      	bne.n	8007656 <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 800760e:	230d      	movs	r3, #13
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	e015      	b.n	8007644 <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 8007618:	4b36      	ldr	r3, [pc, #216]	@ (80076f4 <comunicacion+0x214>)
 800761a:	799b      	ldrb	r3, [r3, #6]
 800761c:	001a      	movs	r2, r3
 800761e:	200d      	movs	r0, #13
 8007620:	183b      	adds	r3, r7, r0
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	411a      	asrs	r2, r3
 8007626:	0013      	movs	r3, r2
 8007628:	2201      	movs	r2, #1
 800762a:	401a      	ands	r2, r3
 800762c:	183b      	adds	r3, r7, r0
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	1e51      	subs	r1, r2, #1
 8007632:	418a      	sbcs	r2, r1
 8007634:	b2d1      	uxtb	r1, r2
 8007636:	4a30      	ldr	r2, [pc, #192]	@ (80076f8 <comunicacion+0x218>)
 8007638:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 800763a:	183b      	adds	r3, r7, r0
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	183b      	adds	r3, r7, r0
 8007640:	3201      	adds	r2, #1
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	230d      	movs	r3, #13
 8007646:	18fb      	adds	r3, r7, r3
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b07      	cmp	r3, #7
 800764c:	d9e4      	bls.n	8007618 <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 800764e:	4b28      	ldr	r3, [pc, #160]	@ (80076f0 <comunicacion+0x210>)
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	e033      	b.n	80076be <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8007656:	4b1f      	ldr	r3, [pc, #124]	@ (80076d4 <comunicacion+0x1f4>)
 8007658:	0018      	movs	r0, r3
 800765a:	f00b ff5f 	bl	801351c <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 800765e:	4b1d      	ldr	r3, [pc, #116]	@ (80076d4 <comunicacion+0x1f4>)
 8007660:	0018      	movs	r0, r3
 8007662:	f00b feb5 	bl	80133d0 <HAL_I2C_Init>
 8007666:	e02a      	b.n	80076be <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 8007668:	4a1d      	ldr	r2, [pc, #116]	@ (80076e0 <comunicacion+0x200>)
 800766a:	481a      	ldr	r0, [pc, #104]	@ (80076d4 <comunicacion+0x1f4>)
 800766c:	2307      	movs	r3, #7
 800766e:	2154      	movs	r1, #84	@ 0x54
 8007670:	f00b ff84 	bl	801357c <HAL_I2C_Master_Transmit_DMA>
 8007674:	1e03      	subs	r3, r0, #0
 8007676:	d103      	bne.n	8007680 <comunicacion+0x1a0>
					  FlagTx= 1;
 8007678:	4b1d      	ldr	r3, [pc, #116]	@ (80076f0 <comunicacion+0x210>)
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	e01e      	b.n	80076be <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8007680:	4b14      	ldr	r3, [pc, #80]	@ (80076d4 <comunicacion+0x1f4>)
 8007682:	0018      	movs	r0, r3
 8007684:	f00b ff4a 	bl	801351c <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 8007688:	4b12      	ldr	r3, [pc, #72]	@ (80076d4 <comunicacion+0x1f4>)
 800768a:	0018      	movs	r0, r3
 800768c:	f00b fea0 	bl	80133d0 <HAL_I2C_Init>
 8007690:	e015      	b.n	80076be <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 8007692:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <comunicacion+0x1f8>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	3301      	adds	r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	4b0f      	ldr	r3, [pc, #60]	@ (80076d8 <comunicacion+0x1f8>)
 800769c:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 800769e:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <comunicacion+0x1f8>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 80076a6:	4b0b      	ldr	r3, [pc, #44]	@ (80076d4 <comunicacion+0x1f4>)
 80076a8:	0018      	movs	r0, r3
 80076aa:	f00b ff37 	bl	801351c <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 80076ae:	4b09      	ldr	r3, [pc, #36]	@ (80076d4 <comunicacion+0x1f4>)
 80076b0:	0018      	movs	r0, r3
 80076b2:	f00b fe8d 	bl	80133d0 <HAL_I2C_Init>
 80076b6:	e002      	b.n	80076be <comunicacion+0x1de>
		goto fin_comu;
 80076b8:	46c0      	nop			@ (mov r8, r8)
 80076ba:	e000      	b.n	80076be <comunicacion+0x1de>
				}
			}
fin_comu:
 80076bc:	46c0      	nop			@ (mov r8, r8)
	detecta();
 80076be:	f000 f81d 	bl	80076fc <detecta>


}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b004      	add	sp, #16
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	46c0      	nop			@ (mov r8, r8)
 80076cc:	20000c74 	.word	0x20000c74
 80076d0:	20000b54 	.word	0x20000b54
 80076d4:	200003ec 	.word	0x200003ec
 80076d8:	20002142 	.word	0x20002142
 80076dc:	20001ec0 	.word	0x20001ec0
 80076e0:	20000004 	.word	0x20000004
 80076e4:	20000c75 	.word	0x20000c75
 80076e8:	20000c76 	.word	0x20000c76
 80076ec:	20000c78 	.word	0x20000c78
 80076f0:	200003de 	.word	0x200003de
 80076f4:	200003e0 	.word	0x200003e0
 80076f8:	20000c80 	.word	0x20000c80

080076fc <detecta>:

void detecta(void){
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 8007702:	4bb0      	ldr	r3, [pc, #704]	@ (80079c4 <detecta+0x2c8>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <detecta+0x12>
 800770a:	f000 fc2f 	bl	8007f6c <detecta+0x870>
		goto dete03;
 800770e:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 8007710:	4bad      	ldr	r3, [pc, #692]	@ (80079c8 <detecta+0x2cc>)
 8007712:	225b      	movs	r2, #91	@ 0x5b
 8007714:	5c9b      	ldrb	r3, [r3, r2]
 8007716:	001a      	movs	r2, r3
 8007718:	2301      	movs	r3, #1
 800771a:	4013      	ands	r3, r2
 800771c:	d004      	beq.n	8007728 <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 800771e:	f7ff fb47 	bl	8006db0 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007722:	f7ff fb61 	bl	8006de8 <load_tiempoAhorro2>
	goto closedoor_b;
 8007726:	e1cc      	b.n	8007ac2 <detecta+0x3c6>
		goto detectaPuerta;
 8007728:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 800772a:	4ba7      	ldr	r3, [pc, #668]	@ (80079c8 <detecta+0x2cc>)
 800772c:	2253      	movs	r2, #83	@ 0x53
 800772e:	5c9b      	ldrb	r3, [r3, r2]
 8007730:	001a      	movs	r2, r3
 8007732:	2308      	movs	r3, #8
 8007734:	4013      	ands	r3, r2
 8007736:	d045      	beq.n	80077c4 <detecta+0xc8>
		goto detecta_j01;
 8007738:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 800773a:	1dfb      	adds	r3, r7, #7
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e03a      	b.n	80077b8 <detecta+0xbc>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 8007742:	1dfb      	adds	r3, r7, #7
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	4ba1      	ldr	r3, [pc, #644]	@ (80079cc <detecta+0x2d0>)
 8007748:	0092      	lsls	r2, r2, #2
 800774a:	58d0      	ldr	r0, [r2, r3]
 800774c:	1dfb      	adds	r3, r7, #7
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4a9f      	ldr	r2, [pc, #636]	@ (80079d0 <detecta+0x2d4>)
 8007752:	5cd3      	ldrb	r3, [r2, r3]
 8007754:	2201      	movs	r2, #1
 8007756:	0019      	movs	r1, r3
 8007758:	f00b fddf 	bl	801331a <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 800775c:	1dbb      	adds	r3, r7, #6
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	e013      	b.n	800778c <detecta+0x90>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007764:	1dbb      	adds	r3, r7, #6
 8007766:	781a      	ldrb	r2, [r3, #0]
 8007768:	4b98      	ldr	r3, [pc, #608]	@ (80079cc <detecta+0x2d0>)
 800776a:	0092      	lsls	r2, r2, #2
 800776c:	58d0      	ldr	r0, [r2, r3]
 800776e:	1dbb      	adds	r3, r7, #6
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	4a97      	ldr	r2, [pc, #604]	@ (80079d0 <detecta+0x2d4>)
 8007774:	5cd3      	ldrb	r3, [r2, r3]
 8007776:	0019      	movs	r1, r3
 8007778:	f00b fdb2 	bl	80132e0 <HAL_GPIO_ReadPin>
 800777c:	1e03      	subs	r3, r0, #0
 800777e:	d100      	bne.n	8007782 <detecta+0x86>
 8007780:	e1cb      	b.n	8007b1a <detecta+0x41e>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007782:	1dbb      	adds	r3, r7, #6
 8007784:	781a      	ldrb	r2, [r3, #0]
 8007786:	1dbb      	adds	r3, r7, #6
 8007788:	3201      	adds	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	1dbb      	adds	r3, r7, #6
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b04      	cmp	r3, #4
 8007792:	d9e7      	bls.n	8007764 <detecta+0x68>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 8007794:	1dfb      	adds	r3, r7, #7
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	4b8c      	ldr	r3, [pc, #560]	@ (80079cc <detecta+0x2d0>)
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	58d0      	ldr	r0, [r2, r3]
 800779e:	1dfb      	adds	r3, r7, #7
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	4a8b      	ldr	r2, [pc, #556]	@ (80079d0 <detecta+0x2d4>)
 80077a4:	5cd3      	ldrb	r3, [r2, r3]
 80077a6:	2200      	movs	r2, #0
 80077a8:	0019      	movs	r1, r3
 80077aa:	f00b fdb6 	bl	801331a <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 80077ae:	1dfb      	adds	r3, r7, #7
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	1dfb      	adds	r3, r7, #7
 80077b4:	3201      	adds	r2, #1
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	1dfb      	adds	r3, r7, #7
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d9c0      	bls.n	8007742 <detecta+0x46>
	}
	goto detecta_j02;
 80077c0:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 80077c2:	e174      	b.n	8007aae <detecta+0x3b2>
	goto switch_no;
 80077c4:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 80077c6:	4b83      	ldr	r3, [pc, #524]	@ (80079d4 <detecta+0x2d8>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	425a      	negs	r2, r3
 80077cc:	4153      	adcs	r3, r2
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	001a      	movs	r2, r3
 80077d2:	4b81      	ldr	r3, [pc, #516]	@ (80079d8 <detecta+0x2dc>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	4013      	ands	r3, r2
 80077d8:	d022      	beq.n	8007820 <detecta+0x124>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 80077da:	4b80      	ldr	r3, [pc, #512]	@ (80079dc <detecta+0x2e0>)
 80077dc:	6858      	ldr	r0, [r3, #4]
 80077de:	4b80      	ldr	r3, [pc, #512]	@ (80079e0 <detecta+0x2e4>)
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2201      	movs	r2, #1
 80077e4:	0019      	movs	r1, r3
 80077e6:	f00b fd98 	bl	801331a <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80077ea:	200a      	movs	r0, #10
 80077ec:	f00a fc2a 	bl	8012044 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 80077f0:	4b76      	ldr	r3, [pc, #472]	@ (80079cc <detecta+0x2d0>)
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	4b76      	ldr	r3, [pc, #472]	@ (80079d0 <detecta+0x2d4>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	0019      	movs	r1, r3
 80077fa:	0010      	movs	r0, r2
 80077fc:	f00b fd70 	bl	80132e0 <HAL_GPIO_ReadPin>
 8007800:	1e03      	subs	r3, r0, #0
 8007802:	d002      	beq.n	800780a <detecta+0x10e>
			FlagPuertaX[4] = 1;// Puerta Abierta
 8007804:	4b77      	ldr	r3, [pc, #476]	@ (80079e4 <detecta+0x2e8>)
 8007806:	2201      	movs	r2, #1
 8007808:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 800780a:	4b74      	ldr	r3, [pc, #464]	@ (80079dc <detecta+0x2e0>)
 800780c:	6858      	ldr	r0, [r3, #4]
 800780e:	4b74      	ldr	r3, [pc, #464]	@ (80079e0 <detecta+0x2e4>)
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2201      	movs	r2, #1
 8007814:	0019      	movs	r1, r3
 8007816:	f00b fd80 	bl	801331a <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 800781a:	4b6f      	ldr	r3, [pc, #444]	@ (80079d8 <detecta+0x2dc>)
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 8007820:	4b6c      	ldr	r3, [pc, #432]	@ (80079d4 <detecta+0x2d8>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b0a      	cmp	r3, #10
 8007826:	d000      	beq.n	800782a <detecta+0x12e>
 8007828:	e083      	b.n	8007932 <detecta+0x236>
		for(uint8_t Px = 0; Px < 5; Px++){
 800782a:	1d7b      	adds	r3, r7, #5
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e048      	b.n	80078c4 <detecta+0x1c8>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007832:	1d7b      	adds	r3, r7, #5
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	4b65      	ldr	r3, [pc, #404]	@ (80079cc <detecta+0x2d0>)
 8007838:	0092      	lsls	r2, r2, #2
 800783a:	58d0      	ldr	r0, [r2, r3]
 800783c:	1d7b      	adds	r3, r7, #5
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4a63      	ldr	r2, [pc, #396]	@ (80079d0 <detecta+0x2d4>)
 8007842:	5cd3      	ldrb	r3, [r2, r3]
 8007844:	0019      	movs	r1, r3
 8007846:	f00b fd4b 	bl	80132e0 <HAL_GPIO_ReadPin>
 800784a:	1e03      	subs	r3, r0, #0
 800784c:	d00f      	beq.n	800786e <detecta+0x172>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 800784e:	4b66      	ldr	r3, [pc, #408]	@ (80079e8 <detecta+0x2ec>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	001a      	movs	r2, r3
 8007854:	0013      	movs	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	189a      	adds	r2, r3, r2
 800785a:	1d7b      	adds	r3, r7, #5
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	18d3      	adds	r3, r2, r3
 8007860:	4a62      	ldr	r2, [pc, #392]	@ (80079ec <detecta+0x2f0>)
 8007862:	5cd2      	ldrb	r2, [r2, r3]
 8007864:	3201      	adds	r2, #1
 8007866:	b2d1      	uxtb	r1, r2
 8007868:	4a60      	ldr	r2, [pc, #384]	@ (80079ec <detecta+0x2f0>)
 800786a:	54d1      	strb	r1, [r2, r3]
 800786c:	e025      	b.n	80078ba <detecta+0x1be>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 800786e:	1d7b      	adds	r3, r7, #5
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	4b56      	ldr	r3, [pc, #344]	@ (80079cc <detecta+0x2d0>)
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	58d0      	ldr	r0, [r2, r3]
 8007878:	1d7b      	adds	r3, r7, #5
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4a54      	ldr	r2, [pc, #336]	@ (80079d0 <detecta+0x2d4>)
 800787e:	5cd3      	ldrb	r3, [r2, r3]
 8007880:	0019      	movs	r1, r3
 8007882:	f00b fd2d 	bl	80132e0 <HAL_GPIO_ReadPin>
 8007886:	1e03      	subs	r3, r0, #0
 8007888:	d117      	bne.n	80078ba <detecta+0x1be>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 800788a:	4b57      	ldr	r3, [pc, #348]	@ (80079e8 <detecta+0x2ec>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	001a      	movs	r2, r3
 8007890:	0013      	movs	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	189a      	adds	r2, r3, r2
 8007896:	1d7b      	adds	r3, r7, #5
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	18d3      	adds	r3, r2, r3
 800789c:	4a51      	ldr	r2, [pc, #324]	@ (80079e4 <detecta+0x2e8>)
 800789e:	2100      	movs	r1, #0
 80078a0:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 80078a2:	4b51      	ldr	r3, [pc, #324]	@ (80079e8 <detecta+0x2ec>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	001a      	movs	r2, r3
 80078a8:	0013      	movs	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	189a      	adds	r2, r3, r2
 80078ae:	1d7b      	adds	r3, r7, #5
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	18d3      	adds	r3, r2, r3
 80078b4:	4a4d      	ldr	r2, [pc, #308]	@ (80079ec <detecta+0x2f0>)
 80078b6:	2100      	movs	r1, #0
 80078b8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 80078ba:	1d7b      	adds	r3, r7, #5
 80078bc:	781a      	ldrb	r2, [r3, #0]
 80078be:	1d7b      	adds	r3, r7, #5
 80078c0:	3201      	adds	r2, #1
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	1d7b      	adds	r3, r7, #5
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d9b2      	bls.n	8007832 <detecta+0x136>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 80078cc:	4b46      	ldr	r3, [pc, #280]	@ (80079e8 <detecta+0x2ec>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	001a      	movs	r2, r3
 80078d2:	4b42      	ldr	r3, [pc, #264]	@ (80079dc <detecta+0x2e0>)
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	58d0      	ldr	r0, [r2, r3]
 80078d8:	4b43      	ldr	r3, [pc, #268]	@ (80079e8 <detecta+0x2ec>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	001a      	movs	r2, r3
 80078de:	4b40      	ldr	r3, [pc, #256]	@ (80079e0 <detecta+0x2e4>)
 80078e0:	5c9b      	ldrb	r3, [r3, r2]
 80078e2:	2200      	movs	r2, #0
 80078e4:	0019      	movs	r1, r3
 80078e6:	f00b fd18 	bl	801331a <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 80078ea:	4b3f      	ldr	r3, [pc, #252]	@ (80079e8 <detecta+0x2ec>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d805      	bhi.n	80078fe <detecta+0x202>
			countMPx++;
 80078f2:	4b3d      	ldr	r3, [pc, #244]	@ (80079e8 <detecta+0x2ec>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	3301      	adds	r3, #1
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4b3b      	ldr	r3, [pc, #236]	@ (80079e8 <detecta+0x2ec>)
 80078fc:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 80078fe:	4b3a      	ldr	r3, [pc, #232]	@ (80079e8 <detecta+0x2ec>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b04      	cmp	r3, #4
 8007904:	d102      	bne.n	800790c <detecta+0x210>
			countMPx = 0;
 8007906:	4b38      	ldr	r3, [pc, #224]	@ (80079e8 <detecta+0x2ec>)
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 800790c:	4b36      	ldr	r3, [pc, #216]	@ (80079e8 <detecta+0x2ec>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	001a      	movs	r2, r3
 8007912:	4b32      	ldr	r3, [pc, #200]	@ (80079dc <detecta+0x2e0>)
 8007914:	0092      	lsls	r2, r2, #2
 8007916:	58d0      	ldr	r0, [r2, r3]
 8007918:	4b33      	ldr	r3, [pc, #204]	@ (80079e8 <detecta+0x2ec>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	001a      	movs	r2, r3
 800791e:	4b30      	ldr	r3, [pc, #192]	@ (80079e0 <detecta+0x2e4>)
 8007920:	5c9b      	ldrb	r3, [r3, r2]
 8007922:	2201      	movs	r2, #1
 8007924:	0019      	movs	r1, r3
 8007926:	f00b fcf8 	bl	801331a <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 800792a:	4b2a      	ldr	r3, [pc, #168]	@ (80079d4 <detecta+0x2d8>)
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e009      	b.n	8007946 <detecta+0x24a>
	}else if(countWaitPuerta < 10){
 8007932:	4b28      	ldr	r3, [pc, #160]	@ (80079d4 <detecta+0x2d8>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b09      	cmp	r3, #9
 8007938:	d805      	bhi.n	8007946 <detecta+0x24a>
		countWaitPuerta++;
 800793a:	4b26      	ldr	r3, [pc, #152]	@ (80079d4 <detecta+0x2d8>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	b2da      	uxtb	r2, r3
 8007942:	4b24      	ldr	r3, [pc, #144]	@ (80079d4 <detecta+0x2d8>)
 8007944:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007946:	1d3b      	adds	r3, r7, #4
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	e0a5      	b.n	8007a9a <detecta+0x39e>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 800794e:	1cfb      	adds	r3, r7, #3
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	e097      	b.n	8007a86 <detecta+0x38a>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 8007956:	1d3b      	adds	r3, r7, #4
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	0013      	movs	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	189a      	adds	r2, r3, r2
 8007960:	1cfb      	adds	r3, r7, #3
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	18d3      	adds	r3, r2, r3
 8007966:	4a21      	ldr	r2, [pc, #132]	@ (80079ec <detecta+0x2f0>)
 8007968:	5cd3      	ldrb	r3, [r2, r3]
 800796a:	1e5a      	subs	r2, r3, #1
 800796c:	4193      	sbcs	r3, r2
 800796e:	b2da      	uxtb	r2, r3
 8007970:	4b18      	ldr	r3, [pc, #96]	@ (80079d4 <detecta+0x2d8>)
 8007972:	7819      	ldrb	r1, [r3, #0]
 8007974:	2009      	movs	r0, #9
 8007976:	2300      	movs	r3, #0
 8007978:	4288      	cmp	r0, r1
 800797a:	415b      	adcs	r3, r3
 800797c:	b2db      	uxtb	r3, r3
 800797e:	4013      	ands	r3, r2
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d100      	bne.n	8007988 <detecta+0x28c>
 8007986:	e079      	b.n	8007a7c <detecta+0x380>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007988:	1cfb      	adds	r3, r7, #3
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	4b0f      	ldr	r3, [pc, #60]	@ (80079cc <detecta+0x2d0>)
 800798e:	0092      	lsls	r2, r2, #2
 8007990:	58d0      	ldr	r0, [r2, r3]
 8007992:	1cfb      	adds	r3, r7, #3
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	4a0e      	ldr	r2, [pc, #56]	@ (80079d0 <detecta+0x2d4>)
 8007998:	5cd3      	ldrb	r3, [r2, r3]
 800799a:	0019      	movs	r1, r3
 800799c:	f00b fca0 	bl	80132e0 <HAL_GPIO_ReadPin>
 80079a0:	1e03      	subs	r3, r0, #0
 80079a2:	d025      	beq.n	80079f0 <detecta+0x2f4>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 80079a4:	1d3b      	adds	r3, r7, #4
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	0013      	movs	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	189a      	adds	r2, r3, r2
 80079ae:	1cfb      	adds	r3, r7, #3
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	18d3      	adds	r3, r2, r3
 80079b4:	4a0d      	ldr	r2, [pc, #52]	@ (80079ec <detecta+0x2f0>)
 80079b6:	5cd2      	ldrb	r2, [r2, r3]
 80079b8:	3201      	adds	r2, #1
 80079ba:	b2d1      	uxtb	r1, r2
 80079bc:	4a0b      	ldr	r2, [pc, #44]	@ (80079ec <detecta+0x2f0>)
 80079be:	54d1      	strb	r1, [r2, r3]
 80079c0:	e03a      	b.n	8007a38 <detecta+0x33c>
 80079c2:	46c0      	nop			@ (mov r8, r8)
 80079c4:	20000b94 	.word	0x20000b94
 80079c8:	200000b8 	.word	0x200000b8
 80079cc:	200001f4 	.word	0x200001f4
 80079d0:	20000208 	.word	0x20000208
 80079d4:	2000216c 	.word	0x2000216c
 80079d8:	20000224 	.word	0x20000224
 80079dc:	20000210 	.word	0x20000210
 80079e0:	20000220 	.word	0x20000220
 80079e4:	20002144 	.word	0x20002144
 80079e8:	2000216d 	.word	0x2000216d
 80079ec:	20002158 	.word	0x20002158
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 80079f0:	1cfb      	adds	r3, r7, #3
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	4bcc      	ldr	r3, [pc, #816]	@ (8007d28 <detecta+0x62c>)
 80079f6:	0092      	lsls	r2, r2, #2
 80079f8:	58d0      	ldr	r0, [r2, r3]
 80079fa:	1cfb      	adds	r3, r7, #3
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	4acb      	ldr	r2, [pc, #812]	@ (8007d2c <detecta+0x630>)
 8007a00:	5cd3      	ldrb	r3, [r2, r3]
 8007a02:	0019      	movs	r1, r3
 8007a04:	f00b fc6c 	bl	80132e0 <HAL_GPIO_ReadPin>
 8007a08:	1e03      	subs	r3, r0, #0
 8007a0a:	d115      	bne.n	8007a38 <detecta+0x33c>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 8007a0c:	1d3b      	adds	r3, r7, #4
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	0013      	movs	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	189a      	adds	r2, r3, r2
 8007a16:	1cfb      	adds	r3, r7, #3
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	18d3      	adds	r3, r2, r3
 8007a1c:	4ac4      	ldr	r2, [pc, #784]	@ (8007d30 <detecta+0x634>)
 8007a1e:	2100      	movs	r1, #0
 8007a20:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	781a      	ldrb	r2, [r3, #0]
 8007a26:	0013      	movs	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	189a      	adds	r2, r3, r2
 8007a2c:	1cfb      	adds	r3, r7, #3
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	18d3      	adds	r3, r2, r3
 8007a32:	4ac0      	ldr	r2, [pc, #768]	@ (8007d34 <detecta+0x638>)
 8007a34:	2100      	movs	r1, #0
 8007a36:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 8007a38:	1d3b      	adds	r3, r7, #4
 8007a3a:	781a      	ldrb	r2, [r3, #0]
 8007a3c:	0013      	movs	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	189a      	adds	r2, r3, r2
 8007a42:	1cfb      	adds	r3, r7, #3
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	18d3      	adds	r3, r2, r3
 8007a48:	4aba      	ldr	r2, [pc, #744]	@ (8007d34 <detecta+0x638>)
 8007a4a:	5cd3      	ldrb	r3, [r2, r3]
 8007a4c:	2b0a      	cmp	r3, #10
 8007a4e:	d115      	bne.n	8007a7c <detecta+0x380>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 8007a50:	1d3b      	adds	r3, r7, #4
 8007a52:	781a      	ldrb	r2, [r3, #0]
 8007a54:	0013      	movs	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	189a      	adds	r2, r3, r2
 8007a5a:	1cfb      	adds	r3, r7, #3
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	18d3      	adds	r3, r2, r3
 8007a60:	4ab3      	ldr	r2, [pc, #716]	@ (8007d30 <detecta+0x634>)
 8007a62:	2101      	movs	r1, #1
 8007a64:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007a66:	1d3b      	adds	r3, r7, #4
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	0013      	movs	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	189a      	adds	r2, r3, r2
 8007a70:	1cfb      	adds	r3, r7, #3
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	18d3      	adds	r3, r2, r3
 8007a76:	4aaf      	ldr	r2, [pc, #700]	@ (8007d34 <detecta+0x638>)
 8007a78:	2100      	movs	r1, #0
 8007a7a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007a7c:	1cfb      	adds	r3, r7, #3
 8007a7e:	781a      	ldrb	r2, [r3, #0]
 8007a80:	1cfb      	adds	r3, r7, #3
 8007a82:	3201      	adds	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	1cfb      	adds	r3, r7, #3
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d800      	bhi.n	8007a90 <detecta+0x394>
 8007a8e:	e762      	b.n	8007956 <detecta+0x25a>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 8007a90:	1d3b      	adds	r3, r7, #4
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	1d3b      	adds	r3, r7, #4
 8007a96:	3201      	adds	r2, #1
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	1d3b      	adds	r3, r7, #4
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d800      	bhi.n	8007aa4 <detecta+0x3a8>
 8007aa2:	e754      	b.n	800794e <detecta+0x252>
			}
		}
	}


	if(FlagPuertaX[4]){
 8007aa4:	4ba2      	ldr	r3, [pc, #648]	@ (8007d30 <detecta+0x634>)
 8007aa6:	791b      	ldrb	r3, [r3, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d138      	bne.n	8007b1e <detecta+0x422>
		goto opendoor;
	}
	goto detecta_j03;
 8007aac:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 8007aae:	4ba2      	ldr	r3, [pc, #648]	@ (8007d38 <detecta+0x63c>)
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f7ff fb16 	bl	80070e2 <decwreg>
	if(debdoor == 0){
 8007ab6:	4ba0      	ldr	r3, [pc, #640]	@ (8007d38 <detecta+0x63c>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d000      	beq.n	8007ac0 <detecta+0x3c4>
 8007abe:	e0a2      	b.n	8007c06 <detecta+0x50a>
		goto closedoor_b;
 8007ac0:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 8007ac2:	4b9e      	ldr	r3, [pc, #632]	@ (8007d3c <detecta+0x640>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 8007ac8:	4b9d      	ldr	r3, [pc, #628]	@ (8007d40 <detecta+0x644>)
 8007aca:	2248      	movs	r2, #72	@ 0x48
 8007acc:	5c9a      	ldrb	r2, [r3, r2]
 8007ace:	4b9d      	ldr	r3, [pc, #628]	@ (8007d44 <detecta+0x648>)
 8007ad0:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 8007ad2:	4b9d      	ldr	r3, [pc, #628]	@ (8007d48 <detecta+0x64c>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 8007ad8:	f7fe fd14 	bl	8006504 <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 8007adc:	4b9b      	ldr	r3, [pc, #620]	@ (8007d4c <detecta+0x650>)
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d100      	bne.n	8007ae6 <detecta+0x3ea>
 8007ae4:	e091      	b.n	8007c0a <detecta+0x50e>
		goto detecta_j04;
 8007ae6:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 8007ae8:	4b98      	ldr	r3, [pc, #608]	@ (8007d4c <detecta+0x650>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 8007aee:	4b97      	ldr	r3, [pc, #604]	@ (8007d4c <detecta+0x650>)
 8007af0:	78db      	ldrb	r3, [r3, #3]
 8007af2:	2201      	movs	r2, #1
 8007af4:	4053      	eors	r3, r2
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d100      	bne.n	8007afe <detecta+0x402>
 8007afc:	e087      	b.n	8007c0e <detecta+0x512>
		goto det_j04;
 8007afe:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 8007b00:	f7ff f98e 	bl	8006e20 <load_timeNoct>
	durdhh=0;
 8007b04:	4b92      	ldr	r3, [pc, #584]	@ (8007d50 <detecta+0x654>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	801a      	strh	r2, [r3, #0]
	//durdhl=0;
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 8007b0a:	4b90      	ldr	r3, [pc, #576]	@ (8007d4c <detecta+0x650>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 8007b10:	4b90      	ldr	r3, [pc, #576]	@ (8007d54 <detecta+0x658>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 8007b16:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 8007b18:	e05e      	b.n	8007bd8 <detecta+0x4dc>
				goto opendoor;
 8007b1a:	46c0      	nop			@ (mov r8, r8)
 8007b1c:	e000      	b.n	8007b20 <detecta+0x424>
		goto opendoor;
 8007b1e:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 8007b20:	4b85      	ldr	r3, [pc, #532]	@ (8007d38 <detecta+0x63c>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	db06      	blt.n	8007b38 <detecta+0x43c>
	debdoor++;
 8007b2a:	4b83      	ldr	r3, [pc, #524]	@ (8007d38 <detecta+0x63c>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	4b81      	ldr	r3, [pc, #516]	@ (8007d38 <detecta+0x63c>)
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	e000      	b.n	8007b3a <detecta+0x43e>
		goto noinc;
 8007b38:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 8007b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007d38 <detecta+0x63c>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	b25b      	sxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da29      	bge.n	8007b98 <detecta+0x49c>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 8007b44:	4b7d      	ldr	r3, [pc, #500]	@ (8007d3c <detecta+0x640>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 8007b4a:	4b83      	ldr	r3, [pc, #524]	@ (8007d58 <detecta+0x65c>)
 8007b4c:	2205      	movs	r2, #5
 8007b4e:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 8007b50:	4b7b      	ldr	r3, [pc, #492]	@ (8007d40 <detecta+0x644>)
 8007b52:	224f      	movs	r2, #79	@ 0x4f
 8007b54:	5c9a      	ldrb	r2, [r3, r2]
 8007b56:	4b81      	ldr	r3, [pc, #516]	@ (8007d5c <detecta+0x660>)
 8007b58:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 8007b5a:	4b81      	ldr	r3, [pc, #516]	@ (8007d60 <detecta+0x664>)
 8007b5c:	2205      	movs	r2, #5
 8007b5e:	701a      	strb	r2, [r3, #0]
	if(reePlantilla[eetimepaf]!= 0){
 8007b60:	4b80      	ldr	r3, [pc, #512]	@ (8007d64 <detecta+0x668>)
 8007b62:	2248      	movs	r2, #72	@ 0x48
 8007b64:	5c9b      	ldrb	r3, [r3, r2]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <detecta+0x476>
	cnt_pta_fan=99;
 8007b6a:	4b76      	ldr	r3, [pc, #472]	@ (8007d44 <detecta+0x648>)
 8007b6c:	2263      	movs	r2, #99	@ 0x63
 8007b6e:	701a      	strb	r2, [r3, #0]
 8007b70:	e000      	b.n	8007b74 <detecta+0x478>
		goto no_ld_timepaf;
 8007b72:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 8007b74:	4b75      	ldr	r3, [pc, #468]	@ (8007d4c <detecta+0x650>)
 8007b76:	78db      	ldrb	r3, [r3, #3]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00f      	beq.n	8007b9c <detecta+0x4a0>
		goto detecta_j05;
 8007b7c:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 8007b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8007d68 <detecta+0x66c>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 8007b84:	4b71      	ldr	r3, [pc, #452]	@ (8007d4c <detecta+0x650>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 8007b8a:	4b72      	ldr	r3, [pc, #456]	@ (8007d54 <detecta+0x658>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 8007b90:	4b76      	ldr	r3, [pc, #472]	@ (8007d6c <detecta+0x670>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 8007b96:	e01f      	b.n	8007bd8 <detecta+0x4dc>
		goto revnocman;
 8007b98:	46c0      	nop			@ (mov r8, r8)
 8007b9a:	e000      	b.n	8007b9e <detecta+0x4a2>
	goto revnocman;
 8007b9c:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 8007b9e:	4b74      	ldr	r3, [pc, #464]	@ (8007d70 <detecta+0x674>)
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d113      	bne.n	8007bce <detecta+0x4d2>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 8007ba6:	4b67      	ldr	r3, [pc, #412]	@ (8007d44 <detecta+0x648>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d008      	beq.n	8007bc0 <detecta+0x4c4>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 8007bae:	4b64      	ldr	r3, [pc, #400]	@ (8007d40 <detecta+0x644>)
 8007bb0:	2249      	movs	r2, #73	@ 0x49
 8007bb2:	5c9b      	ldrb	r3, [r3, r2]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <detecta+0x4c8>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 8007bb8:	4b63      	ldr	r3, [pc, #396]	@ (8007d48 <detecta+0x64c>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 8007bbe:	e00b      	b.n	8007bd8 <detecta+0x4dc>
		goto cancelAlarmPA;
 8007bc0:	46c0      	nop			@ (mov r8, r8)
 8007bc2:	e000      	b.n	8007bc6 <detecta+0x4ca>
		goto cancelAlarmPA;
 8007bc4:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 8007bc6:	4b60      	ldr	r3, [pc, #384]	@ (8007d48 <detecta+0x64c>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	711a      	strb	r2, [r3, #4]
 8007bcc:	e004      	b.n	8007bd8 <detecta+0x4dc>
		goto ahorro_off;
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	e002      	b.n	8007bd8 <detecta+0x4dc>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 8007bd2:	46c0      	nop			@ (mov r8, r8)
 8007bd4:	e000      	b.n	8007bd8 <detecta+0x4dc>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 8007bd6:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 8007bd8:	4b58      	ldr	r3, [pc, #352]	@ (8007d3c <detecta+0x640>)
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4053      	eors	r3, r2
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <detecta+0x4f2>
	cntdpysp=0xF0;
 8007be6:	4b63      	ldr	r3, [pc, #396]	@ (8007d74 <detecta+0x678>)
 8007be8:	22f0      	movs	r2, #240	@ 0xf0
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	e000      	b.n	8007bf0 <detecta+0x4f4>
		goto ahorro_off_00;
 8007bee:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 8007bf0:	4b52      	ldr	r3, [pc, #328]	@ (8007d3c <detecta+0x640>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 8007bf6:	4b51      	ldr	r3, [pc, #324]	@ (8007d3c <detecta+0x640>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 8007bfc:	f7ff f8d8 	bl	8006db0 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007c00:	f7ff f8f2 	bl	8006de8 <load_tiempoAhorro2>
	goto fin_detecta;
 8007c04:	e047      	b.n	8007c96 <detecta+0x59a>
		goto revbotones;
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	e002      	b.n	8007c10 <detecta+0x514>
	goto revbotones;
 8007c0a:	46c0      	nop			@ (mov r8, r8)
 8007c0c:	e000      	b.n	8007c10 <detecta+0x514>
	goto revbotones;
 8007c0e:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 8007c10:	4b4a      	ldr	r3, [pc, #296]	@ (8007d3c <detecta+0x640>)
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10c      	bne.n	8007c32 <detecta+0x536>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 8007c18:	f7fe fc3e 	bl	8006498 <tdev_to_Word>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	b21c      	sxth	r4, r3
 8007c20:	4b55      	ldr	r3, [pc, #340]	@ (8007d78 <detecta+0x67c>)
 8007c22:	0018      	movs	r0, r3
 8007c24:	f7fe fc50 	bl	80064c8 <TwoByteInArrayToWord>
 8007c28:	0003      	movs	r3, r0
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	429c      	cmp	r4, r3
 8007c2e:	dad0      	bge.n	8007bd2 <detecta+0x4d6>
ask_ahorro:
 8007c30:	e000      	b.n	8007c34 <detecta+0x538>
		goto ask_ahorro;
 8007c32:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 8007c34:	4b41      	ldr	r3, [pc, #260]	@ (8007d3c <detecta+0x640>)
 8007c36:	79db      	ldrb	r3, [r3, #7]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0cc      	beq.n	8007bd6 <detecta+0x4da>
		goto ask_time_ahorro;
 8007c3c:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 8007c3e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d7c <detecta+0x680>)
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <detecta+0x55c>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 8007c46:	f7ff f8cf 	bl	8006de8 <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 8007c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8007d3c <detecta+0x640>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 8007c50:	4b3a      	ldr	r3, [pc, #232]	@ (8007d3c <detecta+0x640>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8007c56:	e01e      	b.n	8007c96 <detecta+0x59a>
		goto modoAhorro1_ON;
 8007c58:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8007c5a:	4b38      	ldr	r3, [pc, #224]	@ (8007d3c <detecta+0x640>)
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <detecta+0x56e>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 8007c62:	4b44      	ldr	r3, [pc, #272]	@ (8007d74 <detecta+0x678>)
 8007c64:	22f0      	movs	r2, #240	@ 0xf0
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e000      	b.n	8007c6c <detecta+0x570>
		goto modoAhorro1_ON_2;
 8007c6a:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8007c6c:	4b33      	ldr	r3, [pc, #204]	@ (8007d3c <detecta+0x640>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 8007c72:	4b43      	ldr	r3, [pc, #268]	@ (8007d80 <detecta+0x684>)
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10c      	bne.n	8007c94 <detecta+0x598>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8007c7a:	4b30      	ldr	r3, [pc, #192]	@ (8007d3c <detecta+0x640>)
 8007c7c:	789b      	ldrb	r3, [r3, #2]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <detecta+0x58e>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 8007c82:	4b3c      	ldr	r3, [pc, #240]	@ (8007d74 <detecta+0x678>)
 8007c84:	22f0      	movs	r2, #240	@ 0xf0
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e000      	b.n	8007c8c <detecta+0x590>
		goto modoAhorro1_ON_3;
 8007c8a:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d3c <detecta+0x640>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	709a      	strb	r2, [r3, #2]
 8007c92:	e000      	b.n	8007c96 <detecta+0x59a>
		goto fin_detecta;
 8007c94:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8007c96:	1cbb      	adds	r3, r7, #2
 8007c98:	2200      	movs	r2, #0
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	e013      	b.n	8007cc6 <detecta+0x5ca>
		btn_pr[k] = 0;
 8007c9e:	1cbb      	adds	r3, r7, #2
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	4a38      	ldr	r2, [pc, #224]	@ (8007d84 <detecta+0x688>)
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007ca8:	1cbb      	adds	r3, r7, #2
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	4a36      	ldr	r2, [pc, #216]	@ (8007d88 <detecta+0x68c>)
 8007cae:	2100      	movs	r1, #0
 8007cb0:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 8007cb2:	1cbb      	adds	r3, r7, #2
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	4a35      	ldr	r2, [pc, #212]	@ (8007d8c <detecta+0x690>)
 8007cb8:	2100      	movs	r1, #0
 8007cba:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007cbc:	1cbb      	adds	r3, r7, #2
 8007cbe:	781a      	ldrb	r2, [r3, #0]
 8007cc0:	1cbb      	adds	r3, r7, #2
 8007cc2:	3201      	adds	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	1cbb      	adds	r3, r7, #2
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b07      	cmp	r3, #7
 8007ccc:	d9e7      	bls.n	8007c9e <detecta+0x5a2>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 8007cce:	4b26      	ldr	r3, [pc, #152]	@ (8007d68 <detecta+0x66c>)
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d117      	bne.n	8007d06 <detecta+0x60a>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 8007cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8007d90 <detecta+0x694>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4053      	eors	r3, r2
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d112      	bne.n	8007d0a <detecta+0x60e>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 8007ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8007d90 <detecta+0x694>)
 8007ce6:	789b      	ldrb	r3, [r3, #2]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	4053      	eors	r3, r2
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10d      	bne.n	8007d0e <detecta+0x612>
		goto no2btn;
	}
	if(deb_2btn!=0){
 8007cf2:	4b28      	ldr	r3, [pc, #160]	@ (8007d94 <detecta+0x698>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <detecta+0x606>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 8007cfa:	4b24      	ldr	r3, [pc, #144]	@ (8007d8c <detecta+0x690>)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 8007d00:	e13d      	b.n	8007f7e <detecta+0x882>
		goto findet_jp;
 8007d02:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 8007d04:	e13b      	b.n	8007f7e <detecta+0x882>
		goto no2btn;
 8007d06:	46c0      	nop			@ (mov r8, r8)
 8007d08:	e002      	b.n	8007d10 <detecta+0x614>
		goto no2btn;
 8007d0a:	46c0      	nop			@ (mov r8, r8)
 8007d0c:	e000      	b.n	8007d10 <detecta+0x614>
		goto no2btn;
 8007d0e:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 8007d10:	4b20      	ldr	r3, [pc, #128]	@ (8007d94 <detecta+0x698>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b95      	cmp	r3, #149	@ 0x95
 8007d16:	d83f      	bhi.n	8007d98 <detecta+0x69c>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8007d18:	4b1e      	ldr	r3, [pc, #120]	@ (8007d94 <detecta+0x698>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	3303      	adds	r3, #3
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	4b1c      	ldr	r3, [pc, #112]	@ (8007d94 <detecta+0x698>)
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	e039      	b.n	8007d9a <detecta+0x69e>
 8007d26:	46c0      	nop			@ (mov r8, r8)
 8007d28:	200001f4 	.word	0x200001f4
 8007d2c:	20000208 	.word	0x20000208
 8007d30:	20002144 	.word	0x20002144
 8007d34:	20002158 	.word	0x20002158
 8007d38:	20000bbd 	.word	0x20000bbd
 8007d3c:	20000c38 	.word	0x20000c38
 8007d40:	200000b8 	.word	0x200000b8
 8007d44:	20000c23 	.word	0x20000c23
 8007d48:	20000b84 	.word	0x20000b84
 8007d4c:	20000b74 	.word	0x20000b74
 8007d50:	20000bb4 	.word	0x20000bb4
 8007d54:	20000b8c 	.word	0x20000b8c
 8007d58:	200020f2 	.word	0x200020f2
 8007d5c:	2000213c 	.word	0x2000213c
 8007d60:	20000b66 	.word	0x20000b66
 8007d64:	20000c88 	.word	0x20000c88
 8007d68:	20000be4 	.word	0x20000be4
 8007d6c:	20000c40 	.word	0x20000c40
 8007d70:	20000b62 	.word	0x20000b62
 8007d74:	20000bbe 	.word	0x20000bbe
 8007d78:	200000e1 	.word	0x200000e1
 8007d7c:	20000c2c 	.word	0x20000c2c
 8007d80:	20000c2e 	.word	0x20000c2e
 8007d84:	20000bec 	.word	0x20000bec
 8007d88:	20000b98 	.word	0x20000b98
 8007d8c:	20000c14 	.word	0x20000c14
 8007d90:	20000c80 	.word	0x20000c80
 8007d94:	20000c12 	.word	0x20000c12
		goto ask_btn2_f3;
 8007d98:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8007d9a:	4b9e      	ldr	r3, [pc, #632]	@ (8008014 <detecta+0x918>)
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d114      	bne.n	8007dcc <detecta+0x6d0>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 8007da2:	4b9d      	ldr	r3, [pc, #628]	@ (8008018 <detecta+0x91c>)
 8007da4:	785b      	ldrb	r3, [r3, #1]
 8007da6:	2201      	movs	r2, #1
 8007da8:	4053      	eors	r3, r2
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10f      	bne.n	8007dd0 <detecta+0x6d4>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 8007db0:	4b9a      	ldr	r3, [pc, #616]	@ (800801c <detecta+0x920>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d117      	bne.n	8007de8 <detecta+0x6ec>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 8007db8:	4b99      	ldr	r3, [pc, #612]	@ (8008020 <detecta+0x924>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 8007dbe:	4b99      	ldr	r3, [pc, #612]	@ (8008024 <detecta+0x928>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 8007dc4:	4b95      	ldr	r3, [pc, #596]	@ (800801c <detecta+0x920>)
 8007dc6:	221e      	movs	r2, #30
 8007dc8:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 8007dca:	e79b      	b.n	8007d04 <detecta+0x608>
		goto noBtn2F3;
 8007dcc:	46c0      	nop			@ (mov r8, r8)
 8007dce:	e000      	b.n	8007dd2 <detecta+0x6d6>
		goto noBtn2F3;
 8007dd0:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 8007dd2:	4b92      	ldr	r3, [pc, #584]	@ (800801c <detecta+0x920>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b1d      	cmp	r3, #29
 8007dd8:	d808      	bhi.n	8007dec <detecta+0x6f0>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 8007dda:	4b90      	ldr	r3, [pc, #576]	@ (800801c <detecta+0x920>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	3301      	adds	r3, #1
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	4b8e      	ldr	r3, [pc, #568]	@ (800801c <detecta+0x920>)
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e002      	b.n	8007dee <detecta+0x6f2>
		goto ask_btn1;
 8007de8:	46c0      	nop			@ (mov r8, r8)
 8007dea:	e000      	b.n	8007dee <detecta+0x6f2>
		goto ask_btn1;
 8007dec:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 8007dee:	4b8a      	ldr	r3, [pc, #552]	@ (8008018 <detecta+0x91c>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2201      	movs	r2, #1
 8007df4:	4053      	eors	r3, r2
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d12a      	bne.n	8007e52 <detecta+0x756>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 8007dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8008028 <detecta+0x92c>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d106      	bne.n	8007e12 <detecta+0x716>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 8007e04:	4b89      	ldr	r3, [pc, #548]	@ (800802c <detecta+0x930>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8007e0a:	4b89      	ldr	r3, [pc, #548]	@ (8008030 <detecta+0x934>)
 8007e0c:	2214      	movs	r2, #20
 8007e0e:	701a      	strb	r2, [r3, #0]
 8007e10:	e000      	b.n	8007e14 <detecta+0x718>
		goto ask_btn1_sec;
 8007e12:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 8007e14:	4b7f      	ldr	r3, [pc, #508]	@ (8008014 <detecta+0x918>)
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	4053      	eors	r3, r2
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d107      	bne.n	8007e32 <detecta+0x736>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 8007e22:	4b84      	ldr	r3, [pc, #528]	@ (8008034 <detecta+0x938>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e28:	d822      	bhi.n	8007e70 <detecta+0x774>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8007e2a:	4b80      	ldr	r3, [pc, #512]	@ (800802c <detecta+0x930>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	705a      	strb	r2, [r3, #1]
	goto findet;
 8007e30:	e0a5      	b.n	8007f7e <detecta+0x882>
		goto func_sec_norm_btn1;
 8007e32:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 8007e34:	4b80      	ldr	r3, [pc, #512]	@ (8008038 <detecta+0x93c>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d11b      	bne.n	8007e74 <detecta+0x778>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8007e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8008034 <detecta+0x938>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d119      	bne.n	8007e78 <detecta+0x77c>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 8007e44:	4b79      	ldr	r3, [pc, #484]	@ (800802c <detecta+0x930>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8007e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8008038 <detecta+0x93c>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 8007e50:	e095      	b.n	8007f7e <detecta+0x882>
		goto no_btn1;
 8007e52:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 8007e54:	4b78      	ldr	r3, [pc, #480]	@ (8008038 <detecta+0x93c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 8007e5a:	4b76      	ldr	r3, [pc, #472]	@ (8008034 <detecta+0x938>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b95      	cmp	r3, #149	@ 0x95
 8007e60:	d80c      	bhi.n	8007e7c <detecta+0x780>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 8007e62:	4b74      	ldr	r3, [pc, #464]	@ (8008034 <detecta+0x938>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	3303      	adds	r3, #3
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4b72      	ldr	r3, [pc, #456]	@ (8008034 <detecta+0x938>)
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	e006      	b.n	8007e7e <detecta+0x782>
		goto ask_btn2;
 8007e70:	46c0      	nop			@ (mov r8, r8)
 8007e72:	e004      	b.n	8007e7e <detecta+0x782>
		goto ask_btn2;
 8007e74:	46c0      	nop			@ (mov r8, r8)
 8007e76:	e002      	b.n	8007e7e <detecta+0x782>
		goto ask_btn2;
 8007e78:	46c0      	nop			@ (mov r8, r8)
 8007e7a:	e000      	b.n	8007e7e <detecta+0x782>
		goto ask_btn2;
 8007e7c:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 8007e7e:	4b66      	ldr	r3, [pc, #408]	@ (8008018 <detecta+0x91c>)
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2201      	movs	r2, #1
 8007e84:	4053      	eors	r3, r2
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11a      	bne.n	8007ec2 <detecta+0x7c6>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 8007e8c:	4b66      	ldr	r3, [pc, #408]	@ (8008028 <detecta+0x92c>)
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <detecta+0x7a6>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 8007e94:	4b65      	ldr	r3, [pc, #404]	@ (800802c <detecta+0x930>)
 8007e96:	2201      	movs	r2, #1
 8007e98:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 8007e9a:	4b65      	ldr	r3, [pc, #404]	@ (8008030 <detecta+0x934>)
 8007e9c:	2214      	movs	r2, #20
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	e000      	b.n	8007ea4 <detecta+0x7a8>
		goto ask_btn2_sec;
 8007ea2:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 8007ea4:	4b64      	ldr	r3, [pc, #400]	@ (8008038 <detecta+0x93c>)
 8007ea6:	789b      	ldrb	r3, [r3, #2]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d119      	bne.n	8007ee0 <detecta+0x7e4>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 8007eac:	4b63      	ldr	r3, [pc, #396]	@ (800803c <detecta+0x940>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d117      	bne.n	8007ee4 <detecta+0x7e8>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 8007eb4:	4b5d      	ldr	r3, [pc, #372]	@ (800802c <detecta+0x930>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 8007eba:	4b5f      	ldr	r3, [pc, #380]	@ (8008038 <detecta+0x93c>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	709a      	strb	r2, [r3, #2]
	goto findet;
 8007ec0:	e05d      	b.n	8007f7e <detecta+0x882>
		goto no_btn2;
 8007ec2:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 8007ec4:	4b5c      	ldr	r3, [pc, #368]	@ (8008038 <detecta+0x93c>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 8007eca:	4b5c      	ldr	r3, [pc, #368]	@ (800803c <detecta+0x940>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b95      	cmp	r3, #149	@ 0x95
 8007ed0:	d80a      	bhi.n	8007ee8 <detecta+0x7ec>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 8007ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800803c <detecta+0x940>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	3303      	adds	r3, #3
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	4b58      	ldr	r3, [pc, #352]	@ (800803c <detecta+0x940>)
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e004      	b.n	8007eea <detecta+0x7ee>
		goto ask_btn3;
 8007ee0:	46c0      	nop			@ (mov r8, r8)
 8007ee2:	e002      	b.n	8007eea <detecta+0x7ee>
		goto ask_btn3;
 8007ee4:	46c0      	nop			@ (mov r8, r8)
 8007ee6:	e000      	b.n	8007eea <detecta+0x7ee>
		goto ask_btn3;
 8007ee8:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 8007eea:	4b4b      	ldr	r3, [pc, #300]	@ (8008018 <detecta+0x91c>)
 8007eec:	789b      	ldrb	r3, [r3, #2]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4053      	eors	r3, r2
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d12a      	bne.n	8007f4e <detecta+0x852>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 8007ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8008028 <detecta+0x92c>)
 8007efa:	789b      	ldrb	r3, [r3, #2]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <detecta+0x812>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 8007f00:	4b4a      	ldr	r3, [pc, #296]	@ (800802c <detecta+0x930>)
 8007f02:	2201      	movs	r2, #1
 8007f04:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 8007f06:	4b4a      	ldr	r3, [pc, #296]	@ (8008030 <detecta+0x934>)
 8007f08:	2214      	movs	r2, #20
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e000      	b.n	8007f10 <detecta+0x814>
		goto ask_btn3_sec;
 8007f0e:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 8007f10:	4b40      	ldr	r3, [pc, #256]	@ (8008014 <detecta+0x918>)
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2201      	movs	r2, #1
 8007f16:	4053      	eors	r3, r2
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d107      	bne.n	8007f2e <detecta+0x832>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 8007f1e:	4b48      	ldr	r3, [pc, #288]	@ (8008040 <detecta+0x944>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f24:	d824      	bhi.n	8007f70 <detecta+0x874>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 8007f26:	4b41      	ldr	r3, [pc, #260]	@ (800802c <detecta+0x930>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	715a      	strb	r2, [r3, #5]
	goto findet;
 8007f2c:	e027      	b.n	8007f7e <detecta+0x882>
		goto func_sec_norm_btn3;
 8007f2e:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 8007f30:	4b41      	ldr	r3, [pc, #260]	@ (8008038 <detecta+0x93c>)
 8007f32:	791b      	ldrb	r3, [r3, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d11d      	bne.n	8007f74 <detecta+0x878>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8007f38:	4b41      	ldr	r3, [pc, #260]	@ (8008040 <detecta+0x944>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11b      	bne.n	8007f78 <detecta+0x87c>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 8007f40:	4b3a      	ldr	r3, [pc, #232]	@ (800802c <detecta+0x930>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 8007f46:	4b3c      	ldr	r3, [pc, #240]	@ (8008038 <detecta+0x93c>)
 8007f48:	2201      	movs	r2, #1
 8007f4a:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8007f4c:	e017      	b.n	8007f7e <detecta+0x882>
		goto no_btn3;
 8007f4e:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 8007f50:	4b39      	ldr	r3, [pc, #228]	@ (8008038 <detecta+0x93c>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 8007f56:	4b3a      	ldr	r3, [pc, #232]	@ (8008040 <detecta+0x944>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b95      	cmp	r3, #149	@ 0x95
 8007f5c:	d80e      	bhi.n	8007f7c <detecta+0x880>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 8007f5e:	4b38      	ldr	r3, [pc, #224]	@ (8008040 <detecta+0x944>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	3303      	adds	r3, #3
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	4b36      	ldr	r3, [pc, #216]	@ (8008040 <detecta+0x944>)
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e008      	b.n	8007f7e <detecta+0x882>
	goto findet;
 8007f6c:	46c0      	nop			@ (mov r8, r8)
 8007f6e:	e006      	b.n	8007f7e <detecta+0x882>
		goto ask_btn4;
 8007f70:	46c0      	nop			@ (mov r8, r8)
 8007f72:	e004      	b.n	8007f7e <detecta+0x882>
		goto ask_btn4;
 8007f74:	46c0      	nop			@ (mov r8, r8)
 8007f76:	e002      	b.n	8007f7e <detecta+0x882>
		goto ask_btn4;
 8007f78:	46c0      	nop			@ (mov r8, r8)
 8007f7a:	e000      	b.n	8007f7e <detecta+0x882>
		goto ask_btn4;
 8007f7c:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 8007f7e:	1c7b      	adds	r3, r7, #1
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e00c      	b.n	8007fa0 <detecta+0x8a4>
		Botones_COPY[k] = Botones_T[k];
 8007f86:	1c7b      	adds	r3, r7, #1
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	1c7b      	adds	r3, r7, #1
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	4922      	ldr	r1, [pc, #136]	@ (8008018 <detecta+0x91c>)
 8007f90:	5c89      	ldrb	r1, [r1, r2]
 8007f92:	4a25      	ldr	r2, [pc, #148]	@ (8008028 <detecta+0x92c>)
 8007f94:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 8007f96:	1c7b      	adds	r3, r7, #1
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	1c7b      	adds	r3, r7, #1
 8007f9c:	3201      	adds	r2, #1
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	1c7b      	adds	r3, r7, #1
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b07      	cmp	r3, #7
 8007fa6:	d9ee      	bls.n	8007f86 <detecta+0x88a>
	if(!flagsb[f_prog]){
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8008014 <detecta+0x918>)
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2201      	movs	r2, #1
 8007fae:	4053      	eors	r3, r2
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d11a      	bne.n	8007fec <detecta+0x8f0>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 8007fb6:	003b      	movs	r3, r7
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	e011      	b.n	8007fe2 <detecta+0x8e6>
		btn_pr[k] = botonst[k];
 8007fbe:	003b      	movs	r3, r7
 8007fc0:	781a      	ldrb	r2, [r3, #0]
 8007fc2:	003b      	movs	r3, r7
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	4919      	ldr	r1, [pc, #100]	@ (800802c <detecta+0x930>)
 8007fc8:	5c89      	ldrb	r1, [r1, r2]
 8007fca:	4a1e      	ldr	r2, [pc, #120]	@ (8008044 <detecta+0x948>)
 8007fcc:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007fce:	003b      	movs	r3, r7
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4a16      	ldr	r2, [pc, #88]	@ (800802c <detecta+0x930>)
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007fd8:	003b      	movs	r3, r7
 8007fda:	781a      	ldrb	r2, [r3, #0]
 8007fdc:	003b      	movs	r3, r7
 8007fde:	3201      	adds	r2, #1
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	003b      	movs	r3, r7
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b07      	cmp	r3, #7
 8007fe8:	d9e9      	bls.n	8007fbe <detecta+0x8c2>
	}

det_j18:
 8007fea:	e000      	b.n	8007fee <detecta+0x8f2>
		goto det_j18;
 8007fec:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 8007fee:	4b16      	ldr	r3, [pc, #88]	@ (8008048 <detecta+0x94c>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4053      	eors	r3, r2
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <detecta+0x90e>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800802c <detecta+0x930>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 8008002:	4b0a      	ldr	r3, [pc, #40]	@ (800802c <detecta+0x930>)
 8008004:	2200      	movs	r2, #0
 8008006:	711a      	strb	r2, [r3, #4]

det_j19:

}
 8008008:	e000      	b.n	800800c <detecta+0x910>
		goto det_j19;
 800800a:	46c0      	nop			@ (mov r8, r8)
}
 800800c:	46c0      	nop			@ (mov r8, r8)
 800800e:	46bd      	mov	sp, r7
 8008010:	b003      	add	sp, #12
 8008012:	bd90      	pop	{r4, r7, pc}
 8008014:	20000be4 	.word	0x20000be4
 8008018:	20000c80 	.word	0x20000c80
 800801c:	20002130 	.word	0x20002130
 8008020:	20000c14 	.word	0x20000c14
 8008024:	20000c38 	.word	0x20000c38
 8008028:	20000c04 	.word	0x20000c04
 800802c:	20000b98 	.word	0x20000b98
 8008030:	20002129 	.word	0x20002129
 8008034:	20000c0c 	.word	0x20000c0c
 8008038:	20000bcc 	.word	0x20000bcc
 800803c:	20000c0d 	.word	0x20000c0d
 8008040:	20000c0e 	.word	0x20000c0e
 8008044:	20000bec 	.word	0x20000bec
 8008048:	20002134 	.word	0x20002134

0800804c <display>:





void display (void){
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
	uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 8008052:	1dbb      	adds	r3, r7, #6
 8008054:	4abb      	ldr	r2, [pc, #748]	@ (8008344 <display+0x2f8>)
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 800805a:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 800805c:	4bba      	ldr	r3, [pc, #744]	@ (8008348 <display+0x2fc>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d100      	bne.n	8008066 <display+0x1a>
 8008064:	e092      	b.n	800818c <display+0x140>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 8008066:	4bb9      	ldr	r3, [pc, #740]	@ (800834c <display+0x300>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d114      	bne.n	8008098 <display+0x4c>
	//	goto display_00;
	//}

	//btjf    flagsTxControl,#f_statBLE,display_00   ;¿Esta conectado un dispositivo BLE?
	//btjf		flagsTX2,#2,display_00; Se ha respondido el token BLE alguna vez ?
	if((!flagsTxControl[f_statBLE]) || (!flagsTX2[2]))
 800806e:	4bb8      	ldr	r3, [pc, #736]	@ (8008350 <display+0x304>)
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	2201      	movs	r2, #1
 8008074:	4053      	eors	r3, r2
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10f      	bne.n	800809c <display+0x50>
 800807c:	4bb5      	ldr	r3, [pc, #724]	@ (8008354 <display+0x308>)
 800807e:	789b      	ldrb	r3, [r3, #2]
 8008080:	2201      	movs	r2, #1
 8008082:	4053      	eors	r3, r2
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d108      	bne.n	800809c <display+0x50>
		goto display_00;


	op_menu (0x0B, 0x11);
 800808a:	2111      	movs	r1, #17
 800808c:	200b      	movs	r0, #11
 800808e:	f7ff f943 	bl	8007318 <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 8008092:	f7ff f95b 	bl	800734c <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 8008096:	e01e      	b.n	80080d6 <display+0x8a>
		goto display_00;
 8008098:	46c0      	nop			@ (mov r8, r8)
 800809a:	e000      	b.n	800809e <display+0x52>
		goto display_00;
 800809c:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(estado1_Aux, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 800809e:	1dbb      	adds	r3, r7, #6
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2201      	movs	r2, #1
 80080a4:	4013      	ands	r3, r2
 80080a6:	d106      	bne.n	80080b6 <display+0x6a>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 80080a8:	2110      	movs	r1, #16
 80080aa:	2011      	movs	r0, #17
 80080ac:	f7ff f934 	bl	8007318 <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 80080b0:	f7ff f94c 	bl	800734c <datled_clear>
 80080b4:	e000      	b.n	80080b8 <display+0x6c>
		goto display_00b;
 80080b6:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 80080b8:	4ba7      	ldr	r3, [pc, #668]	@ (8008358 <display+0x30c>)
 80080ba:	78db      	ldrb	r3, [r3, #3]
 80080bc:	2201      	movs	r2, #1
 80080be:	4053      	eors	r3, r2
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <display+0x88>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 80080c6:	211d      	movs	r1, #29
 80080c8:	201f      	movs	r0, #31
 80080ca:	f7ff f925 	bl	8007318 <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 80080ce:	f7ff f93d 	bl	800734c <datled_clear>
 80080d2:	e000      	b.n	80080d6 <display+0x8a>
		goto display_01;
 80080d4:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 80080d6:	4ba1      	ldr	r3, [pc, #644]	@ (800835c <display+0x310>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d058      	beq.n	8008190 <display+0x144>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 80080de:	4b9f      	ldr	r3, [pc, #636]	@ (800835c <display+0x310>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80080e4:	d900      	bls.n	80080e8 <display+0x9c>
 80080e6:	e09e      	b.n	8008226 <display+0x1da>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 80080e8:	4b9c      	ldr	r3, [pc, #624]	@ (800835c <display+0x310>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b31      	cmp	r3, #49	@ 0x31
 80080ee:	d800      	bhi.n	80080f2 <display+0xa6>
 80080f0:	e09b      	b.n	800822a <display+0x1de>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 80080f2:	f7ff f92b 	bl	800734c <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 80080f6:	4b9a      	ldr	r3, [pc, #616]	@ (8008360 <display+0x314>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d10f      	bne.n	800811e <display+0xd2>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 80080fe:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 8008100:	2110      	movs	r1, #16
 8008102:	2011      	movs	r0, #17
 8008104:	f7ff f908 	bl	8007318 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(estado1_Aux, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 8008108:	1dbb      	adds	r3, r7, #6
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2201      	movs	r2, #1
 800810e:	4013      	ands	r3, r2
 8008110:	d003      	beq.n	800811a <display+0xce>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 8008112:	4b94      	ldr	r3, [pc, #592]	@ (8008364 <display+0x318>)
 8008114:	2201      	movs	r2, #1
 8008116:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8008118:	e0a0      	b.n	800825c <display+0x210>
		goto msg1_01;
 800811a:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 800811c:	e09e      	b.n	800825c <display+0x210>
		goto askMsg2; //jrne		askMsg2
 800811e:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 8008120:	4b8f      	ldr	r3, [pc, #572]	@ (8008360 <display+0x314>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d10f      	bne.n	8008148 <display+0xfc>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8008128:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 800812a:	2101      	movs	r1, #1
 800812c:	2011      	movs	r0, #17
 800812e:	f7ff f8f3 	bl	8007318 <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(estado1_Aux, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 8008132:	1dbb      	adds	r3, r7, #6
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2204      	movs	r2, #4
 8008138:	4013      	ands	r3, r2
 800813a:	d003      	beq.n	8008144 <display+0xf8>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 800813c:	4b8a      	ldr	r3, [pc, #552]	@ (8008368 <display+0x31c>)
 800813e:	2202      	movs	r2, #2
 8008140:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 8008142:	e08b      	b.n	800825c <display+0x210>
		goto	msg2_01;
 8008144:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 8008146:	e089      	b.n	800825c <display+0x210>
		goto askMsg3; //jrne		askMsg3
 8008148:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 800814a:	4b85      	ldr	r3, [pc, #532]	@ (8008360 <display+0x314>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b03      	cmp	r3, #3
 8008150:	d10f      	bne.n	8008172 <display+0x126>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 8008152:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 8008154:	2100      	movs	r1, #0
 8008156:	2011      	movs	r0, #17
 8008158:	f7ff f8de 	bl	8007318 <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(estado1_Aux, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 800815c:	1dbb      	adds	r3, r7, #6
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2240      	movs	r2, #64	@ 0x40
 8008162:	4013      	ands	r3, r2
 8008164:	d103      	bne.n	800816e <display+0x122>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 8008166:	4b7f      	ldr	r3, [pc, #508]	@ (8008364 <display+0x318>)
 8008168:	2201      	movs	r2, #1
 800816a:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 800816c:	e076      	b.n	800825c <display+0x210>
		goto msg3_01;
 800816e:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 8008170:	e074      	b.n	800825c <display+0x210>
		goto askMsg4;  //jrne askMsg4
 8008172:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 8008174:	4b7a      	ldr	r3, [pc, #488]	@ (8008360 <display+0x314>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d105      	bne.n	8008188 <display+0x13c>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 800817c:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 800817e:	211d      	movs	r1, #29
 8008180:	201f      	movs	r0, #31
 8008182:	f7ff f8c9 	bl	8007318 <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 8008186:	e069      	b.n	800825c <display+0x210>
		goto askMsg5;  //jrne		askMsg5
 8008188:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 800818a:	e067      	b.n	800825c <display+0x210>
		goto display_02;
 800818c:	46c0      	nop			@ (mov r8, r8)
 800818e:	e000      	b.n	8008192 <display+0x146>
		goto display_02;//jreq		display_02;
 8008190:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 8008192:	f7fd fc37 	bl	8005a04 <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 8008196:	4b6c      	ldr	r3, [pc, #432]	@ (8008348 <display+0x2fc>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d018      	beq.n	80081d0 <display+0x184>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 800819e:	4b73      	ldr	r3, [pc, #460]	@ (800836c <display+0x320>)
 80081a0:	79db      	ldrb	r3, [r3, #7]
 80081a2:	2201      	movs	r2, #1
 80081a4:	4053      	eors	r3, r2
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d113      	bne.n	80081d4 <display+0x188>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 80081ac:	210a      	movs	r1, #10
 80081ae:	200a      	movs	r0, #10
 80081b0:	f7ff f8b2 	bl	8007318 <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 80081b4:	4b6e      	ldr	r3, [pc, #440]	@ (8008370 <display+0x324>)
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	001a      	movs	r2, r3
 80081bc:	2340      	movs	r3, #64	@ 0x40
 80081be:	4013      	ands	r3, r2
 80081c0:	d104      	bne.n	80081cc <display+0x180>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 80081c2:	211f      	movs	r1, #31
 80081c4:	201f      	movs	r0, #31
 80081c6:	f7ff f8a7 	bl	8007318 <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 80081ca:	e047      	b.n	800825c <display+0x210>
    	goto blk_aa;
 80081cc:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 80081ce:	e045      	b.n	800825c <display+0x210>
    	goto display_norm3; //jreq		display_norm3;
 80081d0:	46c0      	nop			@ (mov r8, r8)
 80081d2:	e000      	b.n	80081d6 <display+0x18a>
    	goto display_norm3;
 80081d4:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 80081d6:	4b60      	ldr	r3, [pc, #384]	@ (8008358 <display+0x30c>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2201      	movs	r2, #1
 80081dc:	4053      	eors	r3, r2
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d02c      	beq.n	800823e <display+0x1f2>
    	  goto display_j00;
 80081e4:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 80081e6:	4b63      	ldr	r3, [pc, #396]	@ (8008374 <display+0x328>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d019      	beq.n	8008222 <display+0x1d6>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 80081ee:	4b61      	ldr	r3, [pc, #388]	@ (8008374 <display+0x328>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80081f4:	d81b      	bhi.n	800822e <display+0x1e2>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 80081f6:	4b5f      	ldr	r3, [pc, #380]	@ (8008374 <display+0x328>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b95      	cmp	r3, #149	@ 0x95
 80081fc:	d902      	bls.n	8008204 <display+0x1b8>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 80081fe:	f7fe f9df 	bl	80065c0 <sp_dpy>
      	  goto dpy07;
 8008202:	e02b      	b.n	800825c <display+0x210>
    	  goto dpydif;//jrult dpydif
 8008204:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 8008206:	4b5b      	ldr	r3, [pc, #364]	@ (8008374 <display+0x328>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b63      	cmp	r3, #99	@ 0x63
 800820c:	d811      	bhi.n	8008232 <display+0x1e6>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 800820e:	4b59      	ldr	r3, [pc, #356]	@ (8008374 <display+0x328>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b31      	cmp	r3, #49	@ 0x31
 8008214:	d90f      	bls.n	8008236 <display+0x1ea>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 8008216:	f7fe f9df 	bl	80065d8 <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 800821a:	4b52      	ldr	r3, [pc, #328]	@ (8008364 <display+0x318>)
 800821c:	2200      	movs	r2, #0
 800821e:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 8008220:	e01c      	b.n	800825c <display+0x210>
    	  goto dpy02;//jreq		dpy02;
 8008222:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 8008224:	e00c      	b.n	8008240 <display+0x1f4>
		goto dpy03; //************** ?
 8008226:	46c0      	nop			@ (mov r8, r8)
 8008228:	e006      	b.n	8008238 <display+0x1ec>
		goto dpy03;
 800822a:	46c0      	nop			@ (mov r8, r8)
 800822c:	e004      	b.n	8008238 <display+0x1ec>
    	  goto dpy03;//jruge		dpy03;
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	e002      	b.n	8008238 <display+0x1ec>
    	 goto dpy03;//jruge		dpy03;
 8008232:	46c0      	nop			@ (mov r8, r8)
 8008234:	e000      	b.n	8008238 <display+0x1ec>
    	 goto dpy03;//jrult		dpy03;
 8008236:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 8008238:	f7fe fd4e 	bl	8006cd8 <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 800823c:	e00e      	b.n	800825c <display+0x210>
      goto dpy06;//jra dpy06;
 800823e:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 8008240:	4b4a      	ldr	r3, [pc, #296]	@ (800836c <display+0x320>)
 8008242:	78db      	ldrb	r3, [r3, #3]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <display+0x20a>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 8008248:	4b4b      	ldr	r3, [pc, #300]	@ (8008378 <display+0x32c>)
 800824a:	785b      	ldrb	r3, [r3, #1]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <display+0x20e>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 8008250:	f7fe fbe2 	bl	8006a18 <fallas>
 8008254:	e002      	b.n	800825c <display+0x210>
	   goto dpy07;
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	e000      	b.n	800825c <display+0x210>
	   goto dpy07;
 800825a:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 800825c:	4b47      	ldr	r3, [pc, #284]	@ (800837c <display+0x330>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	001a      	movs	r2, r3
 8008262:	4b47      	ldr	r3, [pc, #284]	@ (8008380 <display+0x334>)
 8008264:	5c9a      	ldrb	r2, [r3, r2]
 8008266:	4b47      	ldr	r3, [pc, #284]	@ (8008384 <display+0x338>)
 8008268:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 800826a:	4b3f      	ldr	r3, [pc, #252]	@ (8008368 <display+0x31c>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	001a      	movs	r2, r3
 8008270:	4b43      	ldr	r3, [pc, #268]	@ (8008380 <display+0x334>)
 8008272:	5c9a      	ldrb	r2, [r3, r2]
 8008274:	4b44      	ldr	r3, [pc, #272]	@ (8008388 <display+0x33c>)
 8008276:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 8008278:	230f      	movs	r3, #15
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
 8008280:	e011      	b.n	80082a6 <display+0x25a>
			if(trefst[k] ){ //tnz  trefst ***************??
 8008282:	210f      	movs	r1, #15
 8008284:	187b      	adds	r3, r7, r1
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	4a40      	ldr	r2, [pc, #256]	@ (800838c <display+0x340>)
 800828a:	5cd3      	ldrb	r3, [r2, r3]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d113      	bne.n	80082b8 <display+0x26c>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 8008290:	187b      	adds	r3, r7, r1
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	4a3e      	ldr	r2, [pc, #248]	@ (8008390 <display+0x344>)
 8008296:	5cd3      	ldrb	r3, [r2, r3]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10f      	bne.n	80082bc <display+0x270>
		for(uint8_t k=0; k<8; k++){
 800829c:	187b      	adds	r3, r7, r1
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	3201      	adds	r2, #1
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	230f      	movs	r3, #15
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b07      	cmp	r3, #7
 80082ae:	d9e8      	bls.n	8008282 <display+0x236>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 80082b0:	4b38      	ldr	r3, [pc, #224]	@ (8008394 <display+0x348>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 80082b6:	e00d      	b.n	80082d4 <display+0x288>
				goto ask_snooze; //jrne	ask_snooze
 80082b8:	46c0      	nop			@ (mov r8, r8)
 80082ba:	e000      	b.n	80082be <display+0x272>
				goto ask_snooze;  //jrne	ask_snooze
 80082bc:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 80082be:	4b36      	ldr	r3, [pc, #216]	@ (8008398 <display+0x34c>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	4053      	eors	r3, r2
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <display+0x286>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 80082cc:	f7fe fe8e 	bl	8006fec <ld_alarmDelay>
 80082d0:	e000      	b.n	80082d4 <display+0x288>
			goto noLoadSnooze;
 80082d2:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 80082d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008394 <display+0x348>)
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <display+0x298>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 80082dc:	4b2f      	ldr	r3, [pc, #188]	@ (800839c <display+0x350>)
 80082de:	2201      	movs	r2, #1
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e000      	b.n	80082e6 <display+0x29a>
			goto no_snooze;//jreq no_snooze
 80082e4:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 80082e6:	4b2e      	ldr	r3, [pc, #184]	@ (80083a0 <display+0x354>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00e      	beq.n	800830c <display+0x2c0>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 80082ee:	4b2b      	ldr	r3, [pc, #172]	@ (800839c <display+0x350>)
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d108      	bne.n	8008308 <display+0x2bc>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 80082f6:	4b2b      	ldr	r3, [pc, #172]	@ (80083a4 <display+0x358>)
 80082f8:	2104      	movs	r1, #4
 80082fa:	0018      	movs	r0, r3
 80082fc:	f00f fd96 	bl	8017e2c <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 8008300:	4b26      	ldr	r3, [pc, #152]	@ (800839c <display+0x350>)
 8008302:	2201      	movs	r2, #1
 8008304:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 8008306:	e185      	b.n	8008614 <display+0x5c8>
			goto jp_termina_buzzer;
 8008308:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 800830a:	e183      	b.n	8008614 <display+0x5c8>
			goto noBtnBuzz; //jreq noBtnBuzz
 800830c:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 800830e:	4b23      	ldr	r3, [pc, #140]	@ (800839c <display+0x350>)
 8008310:	785b      	ldrb	r3, [r3, #1]
 8008312:	2201      	movs	r2, #1
 8008314:	4053      	eors	r3, r2
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d14f      	bne.n	80083bc <display+0x370>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 800831c:	4b22      	ldr	r3, [pc, #136]	@ (80083a8 <display+0x35c>)
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 8008322:	4b22      	ldr	r3, [pc, #136]	@ (80083ac <display+0x360>)
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008328:	4b1e      	ldr	r3, [pc, #120]	@ (80083a4 <display+0x358>)
 800832a:	2104      	movs	r1, #4
 800832c:	0018      	movs	r0, r3
 800832e:	f00f fe5f 	bl	8017ff0 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 8008332:	4b1f      	ldr	r3, [pc, #124]	@ (80083b0 <display+0x364>)
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	4a1f      	ldr	r2, [pc, #124]	@ (80083b4 <display+0x368>)
 8008338:	4694      	mov	ip, r2
 800833a:	4463      	add	r3, ip
 800833c:	b29a      	uxth	r2, r3
 800833e:	4b1e      	ldr	r3, [pc, #120]	@ (80083b8 <display+0x36c>)
 8008340:	801a      	strh	r2, [r3, #0]
 8008342:	e03c      	b.n	80083be <display+0x372>
 8008344:	200001ba 	.word	0x200001ba
 8008348:	20000b94 	.word	0x20000b94
 800834c:	20002134 	.word	0x20002134
 8008350:	20002178 	.word	0x20002178
 8008354:	20001fd0 	.word	0x20001fd0
 8008358:	20000b74 	.word	0x20000b74
 800835c:	200020f0 	.word	0x200020f0
 8008360:	200020f1 	.word	0x200020f1
 8008364:	20000b8c 	.word	0x20000b8c
 8008368:	20000b4e 	.word	0x20000b4e
 800836c:	20000bd4 	.word	0x20000bd4
 8008370:	20000b4c 	.word	0x20000b4c
 8008374:	20000bbe 	.word	0x20000bbe
 8008378:	20000be4 	.word	0x20000be4
 800837c:	20000b4f 	.word	0x20000b4f
 8008380:	2000000c 	.word	0x2000000c
 8008384:	20000c75 	.word	0x20000c75
 8008388:	20000c76 	.word	0x20000c76
 800838c:	20000b84 	.word	0x20000b84
 8008390:	20000b7c 	.word	0x20000b7c
 8008394:	2000202c 	.word	0x2000202c
 8008398:	20000b98 	.word	0x20000b98
 800839c:	20002024 	.word	0x20002024
 80083a0:	20002129 	.word	0x20002129
 80083a4:	20000590 	.word	0x20000590
 80083a8:	2000201c 	.word	0x2000201c
 80083ac:	20002014 	.word	0x20002014
 80083b0:	20002010 	.word	0x20002010
 80083b4:	00001388 	.word	0x00001388
 80083b8:	20002012 	.word	0x20002012
			goto noBtnBuzz_01;
 80083bc:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 80083be:	4bd0      	ldr	r3, [pc, #832]	@ (8008700 <display+0x6b4>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 80083c4:	4bce      	ldr	r3, [pc, #824]	@ (8008700 <display+0x6b4>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d111      	bne.n	80083f0 <display+0x3a4>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 80083cc:	4bcd      	ldr	r3, [pc, #820]	@ (8008704 <display+0x6b8>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 80083d2:	4bcd      	ldr	r3, [pc, #820]	@ (8008708 <display+0x6bc>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 80083d8:	4bcc      	ldr	r3, [pc, #816]	@ (800870c <display+0x6c0>)
 80083da:	2104      	movs	r1, #4
 80083dc:	0018      	movs	r0, r3
 80083de:	f00f fe07 	bl	8017ff0 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 80083e2:	4bcb      	ldr	r3, [pc, #812]	@ (8008710 <display+0x6c4>)
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	3364      	adds	r3, #100	@ 0x64
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	4bca      	ldr	r3, [pc, #808]	@ (8008714 <display+0x6c8>)
 80083ec:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 80083ee:	e111      	b.n	8008614 <display+0x5c8>
			goto buzzer_0;
 80083f0:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 80083f2:	4bc5      	ldr	r3, [pc, #788]	@ (8008708 <display+0x6bc>)
 80083f4:	2201      	movs	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 80083f8:	4bc7      	ldr	r3, [pc, #796]	@ (8008718 <display+0x6cc>)
 80083fa:	79db      	ldrb	r3, [r3, #7]
 80083fc:	2201      	movs	r2, #1
 80083fe:	4053      	eors	r3, r2
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d103      	bne.n	800840e <display+0x3c2>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008406:	4bc0      	ldr	r3, [pc, #768]	@ (8008708 <display+0x6bc>)
 8008408:	2202      	movs	r2, #2
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e000      	b.n	8008410 <display+0x3c4>
			goto buzzer_activado_04;
 800840e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 8008410:	4bc1      	ldr	r3, [pc, #772]	@ (8008718 <display+0x6cc>)
 8008412:	799b      	ldrb	r3, [r3, #6]
 8008414:	2201      	movs	r2, #1
 8008416:	4053      	eors	r3, r2
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <display+0x3da>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800841e:	4bba      	ldr	r3, [pc, #744]	@ (8008708 <display+0x6bc>)
 8008420:	2202      	movs	r2, #2
 8008422:	701a      	strb	r2, [r3, #0]
 8008424:	e000      	b.n	8008428 <display+0x3dc>
			goto buzzer_activado_05;
 8008426:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 8008428:	4bbc      	ldr	r3, [pc, #752]	@ (800871c <display+0x6d0>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2201      	movs	r2, #1
 800842e:	4053      	eors	r3, r2
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d103      	bne.n	800843e <display+0x3f2>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008436:	4bb4      	ldr	r3, [pc, #720]	@ (8008708 <display+0x6bc>)
 8008438:	2202      	movs	r2, #2
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	e000      	b.n	8008440 <display+0x3f4>
			goto buzzer_activado_08;
 800843e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 8008440:	4bb7      	ldr	r3, [pc, #732]	@ (8008720 <display+0x6d4>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2201      	movs	r2, #1
 8008446:	4053      	eors	r3, r2
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <display+0x40a>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800844e:	4bae      	ldr	r3, [pc, #696]	@ (8008708 <display+0x6bc>)
 8008450:	2202      	movs	r2, #2
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	e000      	b.n	8008458 <display+0x40c>
			goto buzzer_activado_01;
 8008456:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 8008458:	4bb1      	ldr	r3, [pc, #708]	@ (8008720 <display+0x6d4>)
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	2201      	movs	r2, #1
 800845e:	4053      	eors	r3, r2
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <display+0x422>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 8008466:	4ba8      	ldr	r3, [pc, #672]	@ (8008708 <display+0x6bc>)
 8008468:	2203      	movs	r2, #3
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e000      	b.n	8008470 <display+0x424>
			goto buzzer_activado_02;
 800846e:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 8008470:	4bab      	ldr	r3, [pc, #684]	@ (8008720 <display+0x6d4>)
 8008472:	789b      	ldrb	r3, [r3, #2]
 8008474:	2201      	movs	r2, #1
 8008476:	4053      	eors	r3, r2
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <display+0x43a>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 800847e:	4ba2      	ldr	r3, [pc, #648]	@ (8008708 <display+0x6bc>)
 8008480:	2201      	movs	r2, #1
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	e000      	b.n	8008488 <display+0x43c>
			goto buzzer_activado_03;
 8008486:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 8008488:	4ba4      	ldr	r3, [pc, #656]	@ (800871c <display+0x6d0>)
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	2201      	movs	r2, #1
 800848e:	4053      	eors	r3, r2
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d103      	bne.n	800849e <display+0x452>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008496:	4b9c      	ldr	r3, [pc, #624]	@ (8008708 <display+0x6bc>)
 8008498:	2201      	movs	r2, #1
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e000      	b.n	80084a0 <display+0x454>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 800849e:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 80084a0:	230e      	movs	r3, #14
 80084a2:	18fb      	adds	r3, r7, r3
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80084a8:	230d      	movs	r3, #13
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
 80084b0:	e015      	b.n	80084de <display+0x492>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 80084b2:	200d      	movs	r0, #13
 80084b4:	183b      	adds	r3, r7, r0
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	4a97      	ldr	r2, [pc, #604]	@ (8008718 <display+0x6cc>)
 80084ba:	5cd3      	ldrb	r3, [r2, r3]
 80084bc:	001a      	movs	r2, r3
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	409a      	lsls	r2, r3
 80084c4:	0013      	movs	r3, r2
 80084c6:	b2d9      	uxtb	r1, r3
 80084c8:	220e      	movs	r2, #14
 80084ca:	18bb      	adds	r3, r7, r2
 80084cc:	18ba      	adds	r2, r7, r2
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80084d4:	183b      	adds	r3, r7, r0
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	183b      	adds	r3, r7, r0
 80084da:	3201      	adds	r2, #1
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	230d      	movs	r3, #13
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b07      	cmp	r3, #7
 80084e6:	d9e4      	bls.n	80084b2 <display+0x466>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 80084e8:	230e      	movs	r3, #14
 80084ea:	18fb      	adds	r3, r7, r3
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	223f      	movs	r2, #63	@ 0x3f
 80084f0:	4013      	ands	r3, r2
 80084f2:	d003      	beq.n	80084fc <display+0x4b0>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80084f4:	4b84      	ldr	r3, [pc, #528]	@ (8008708 <display+0x6bc>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e000      	b.n	80084fe <display+0x4b2>
			goto buzzer_activado_06;
 80084fc:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 80084fe:	230e      	movs	r3, #14
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	2200      	movs	r2, #0
 8008504:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8008506:	2300      	movs	r3, #0
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	e013      	b.n	8008534 <display+0x4e8>
			trefst_aux_ |= trefst2[k]<<k;
 800850c:	4a85      	ldr	r2, [pc, #532]	@ (8008724 <display+0x6d8>)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	18d3      	adds	r3, r2, r3
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	001a      	movs	r2, r3
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	409a      	lsls	r2, r3
 800851a:	0013      	movs	r3, r2
 800851c:	b25a      	sxtb	r2, r3
 800851e:	210e      	movs	r1, #14
 8008520:	187b      	adds	r3, r7, r1
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	b25b      	sxtb	r3, r3
 8008526:	4313      	orrs	r3, r2
 8008528:	b25a      	sxtb	r2, r3
 800852a:	187b      	adds	r3, r7, r1
 800852c:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	3301      	adds	r3, #1
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b07      	cmp	r3, #7
 8008538:	dde8      	ble.n	800850c <display+0x4c0>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 800853a:	230e      	movs	r3, #14
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <display+0x500>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008544:	4b70      	ldr	r3, [pc, #448]	@ (8008708 <display+0x6bc>)
 8008546:	2201      	movs	r2, #1
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	e000      	b.n	800854e <display+0x502>
			goto buzzer_activado_07;
 800854c:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 800854e:	4b6e      	ldr	r3, [pc, #440]	@ (8008708 <display+0x6bc>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b04      	cmp	r3, #4
 8008554:	d85b      	bhi.n	800860e <display+0x5c2>
 8008556:	009a      	lsls	r2, r3, #2
 8008558:	4b73      	ldr	r3, [pc, #460]	@ (8008728 <display+0x6dc>)
 800855a:	18d3      	adds	r3, r2, r3
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 8008560:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 8008562:	4b6b      	ldr	r3, [pc, #428]	@ (8008710 <display+0x6c4>)
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	3364      	adds	r3, #100	@ 0x64
 8008568:	b29a      	uxth	r2, r3
 800856a:	4b6a      	ldr	r3, [pc, #424]	@ (8008714 <display+0x6c8>)
 800856c:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 800856e:	e051      	b.n	8008614 <display+0x5c8>
			case 1: goto buzzer_etapa_1;
 8008570:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 8008572:	4b6e      	ldr	r3, [pc, #440]	@ (800872c <display+0x6e0>)
 8008574:	22fa      	movs	r2, #250	@ 0xfa
 8008576:	0052      	lsls	r2, r2, #1
 8008578:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 800857a:	4b6d      	ldr	r3, [pc, #436]	@ (8008730 <display+0x6e4>)
 800857c:	22fa      	movs	r2, #250	@ 0xfa
 800857e:	0052      	lsls	r2, r2, #1
 8008580:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8008582:	e012      	b.n	80085aa <display+0x55e>
			case 2: goto buzzer_etapa_2;
 8008584:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 8008586:	4b69      	ldr	r3, [pc, #420]	@ (800872c <display+0x6e0>)
 8008588:	22fa      	movs	r2, #250	@ 0xfa
 800858a:	0052      	lsls	r2, r2, #1
 800858c:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 800858e:	4b68      	ldr	r3, [pc, #416]	@ (8008730 <display+0x6e4>)
 8008590:	4a68      	ldr	r2, [pc, #416]	@ (8008734 <display+0x6e8>)
 8008592:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 8008594:	e009      	b.n	80085aa <display+0x55e>
			case 3: goto buzzer_etapa_3;
 8008596:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 8008598:	4b64      	ldr	r3, [pc, #400]	@ (800872c <display+0x6e0>)
 800859a:	22fa      	movs	r2, #250	@ 0xfa
 800859c:	0052      	lsls	r2, r2, #1
 800859e:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 80085a0:	4b63      	ldr	r3, [pc, #396]	@ (8008730 <display+0x6e4>)
 80085a2:	4a65      	ldr	r2, [pc, #404]	@ (8008738 <display+0x6ec>)
 80085a4:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80085a6:	e000      	b.n	80085aa <display+0x55e>
			case 4: goto buzzer_etapa_4;
 80085a8:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 80085aa:	4b59      	ldr	r3, [pc, #356]	@ (8008710 <display+0x6c4>)
 80085ac:	881a      	ldrh	r2, [r3, #0]
 80085ae:	4b59      	ldr	r3, [pc, #356]	@ (8008714 <display+0x6c8>)
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d12d      	bne.n	8008612 <display+0x5c6>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 80085b6:	4b53      	ldr	r3, [pc, #332]	@ (8008704 <display+0x6b8>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2201      	movs	r2, #1
 80085bc:	4053      	eors	r3, r2
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	1e5a      	subs	r2, r3, #1
 80085c2:	4193      	sbcs	r3, r2
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008704 <display+0x6b8>)
 80085c8:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 80085ca:	4b4e      	ldr	r3, [pc, #312]	@ (8008704 <display+0x6b8>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10e      	bne.n	80085f0 <display+0x5a4>
			goto buzzer_on;
		}
buzzer_off:
 80085d2:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 80085d4:	4b4d      	ldr	r3, [pc, #308]	@ (800870c <display+0x6c0>)
 80085d6:	2104      	movs	r1, #4
 80085d8:	0018      	movs	r0, r3
 80085da:	f00f fd09 	bl	8017ff0 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 80085de:	4b4c      	ldr	r3, [pc, #304]	@ (8008710 <display+0x6c4>)
 80085e0:	881a      	ldrh	r2, [r3, #0]
 80085e2:	4b53      	ldr	r3, [pc, #332]	@ (8008730 <display+0x6e4>)
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	18d3      	adds	r3, r2, r3
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	4b4a      	ldr	r3, [pc, #296]	@ (8008714 <display+0x6c8>)
 80085ec:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 80085ee:	e011      	b.n	8008614 <display+0x5c8>
			goto buzzer_on;
 80085f0:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 80085f2:	4b46      	ldr	r3, [pc, #280]	@ (800870c <display+0x6c0>)
 80085f4:	2104      	movs	r1, #4
 80085f6:	0018      	movs	r0, r3
 80085f8:	f00f fc18 	bl	8017e2c <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 80085fc:	4b44      	ldr	r3, [pc, #272]	@ (8008710 <display+0x6c4>)
 80085fe:	881a      	ldrh	r2, [r3, #0]
 8008600:	4b4a      	ldr	r3, [pc, #296]	@ (800872c <display+0x6e0>)
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	18d3      	adds	r3, r2, r3
 8008606:	b29a      	uxth	r2, r3
 8008608:	4b42      	ldr	r3, [pc, #264]	@ (8008714 <display+0x6c8>)
 800860a:	801a      	strh	r2, [r3, #0]
 800860c:	e002      	b.n	8008614 <display+0x5c8>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 800860e:	46c0      	nop			@ (mov r8, r8)
 8008610:	e000      	b.n	8008614 <display+0x5c8>
			goto termina_buzzer;//jrne    termina_buzzer
 8008612:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 8008614:	1dfb      	adds	r3, r7, #7
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	e009      	b.n	8008630 <display+0x5e4>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 800861c:	1dfb      	adds	r3, r7, #7
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	4a46      	ldr	r2, [pc, #280]	@ (800873c <display+0x6f0>)
 8008622:	2101      	movs	r1, #1
 8008624:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 8008626:	1dfb      	adds	r3, r7, #7
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	1dfb      	adds	r3, r7, #7
 800862c:	3201      	adds	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	1dfb      	adds	r3, r7, #7
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b07      	cmp	r3, #7
 8008636:	d9f1      	bls.n	800861c <display+0x5d0>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 8008638:	4b41      	ldr	r3, [pc, #260]	@ (8008740 <display+0x6f4>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2201      	movs	r2, #1
 800863e:	4053      	eors	r3, r2
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <display+0x600>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 8008646:	4b3d      	ldr	r3, [pc, #244]	@ (800873c <display+0x6f0>)
 8008648:	2200      	movs	r2, #0
 800864a:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 800864c:	4b3c      	ldr	r3, [pc, #240]	@ (8008740 <display+0x6f4>)
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2201      	movs	r2, #1
 8008652:	4053      	eors	r3, r2
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <display+0x614>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 800865a:	4b38      	ldr	r3, [pc, #224]	@ (800873c <display+0x6f0>)
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 8008660:	4b37      	ldr	r3, [pc, #220]	@ (8008740 <display+0x6f4>)
 8008662:	789b      	ldrb	r3, [r3, #2]
 8008664:	2201      	movs	r2, #1
 8008666:	4053      	eors	r3, r2
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <display+0x628>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 800866e:	4b33      	ldr	r3, [pc, #204]	@ (800873c <display+0x6f0>)
 8008670:	2200      	movs	r2, #0
 8008672:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 8008674:	4b32      	ldr	r3, [pc, #200]	@ (8008740 <display+0x6f4>)
 8008676:	78db      	ldrb	r3, [r3, #3]
 8008678:	2201      	movs	r2, #1
 800867a:	4053      	eors	r3, r2
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <display+0x63c>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 8008682:	4b2e      	ldr	r3, [pc, #184]	@ (800873c <display+0x6f0>)
 8008684:	2200      	movs	r2, #0
 8008686:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 8008688:	4b2d      	ldr	r3, [pc, #180]	@ (8008740 <display+0x6f4>)
 800868a:	79db      	ldrb	r3, [r3, #7]
 800868c:	2201      	movs	r2, #1
 800868e:	4053      	eors	r3, r2
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d002      	beq.n	800869c <display+0x650>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 8008696:	4b29      	ldr	r3, [pc, #164]	@ (800873c <display+0x6f0>)
 8008698:	2200      	movs	r2, #0
 800869a:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 800869c:	4b28      	ldr	r3, [pc, #160]	@ (8008740 <display+0x6f4>)
 800869e:	791b      	ldrb	r3, [r3, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	4053      	eors	r3, r2
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <display+0x664>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 80086aa:	4b24      	ldr	r3, [pc, #144]	@ (800873c <display+0x6f0>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 80086b0:	4b24      	ldr	r3, [pc, #144]	@ (8008744 <display+0x6f8>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d803      	bhi.n	80086c0 <display+0x674>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 80086b8:	4b20      	ldr	r3, [pc, #128]	@ (800873c <display+0x6f0>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 80086be:	e058      	b.n	8008772 <display+0x726>
		goto	clt_ledInd;
 80086c0:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 80086c2:	4b1e      	ldr	r3, [pc, #120]	@ (800873c <display+0x6f0>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 80086c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008740 <display+0x6f4>)
 80086ca:	78db      	ldrb	r3, [r3, #3]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d141      	bne.n	8008754 <display+0x708>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 80086d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008748 <display+0x6fc>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d047      	beq.n	8008768 <display+0x71c>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 80086d8:	4b1c      	ldr	r3, [pc, #112]	@ (800874c <display+0x700>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2201      	movs	r2, #1
 80086de:	4053      	eors	r3, r2
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d142      	bne.n	800876c <display+0x720>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 80086e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008750 <display+0x704>)
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	001a      	movs	r2, r3
 80086ee:	2320      	movs	r3, #32
 80086f0:	4013      	ands	r3, r2
 80086f2:	d001      	beq.n	80086f8 <display+0x6ac>
	    asm ("nop");
 80086f4:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 80086f6:	e03c      	b.n	8008772 <display+0x726>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 80086f8:	4b10      	ldr	r3, [pc, #64]	@ (800873c <display+0x6f0>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 80086fe:	e038      	b.n	8008772 <display+0x726>
 8008700:	20002024 	.word	0x20002024
 8008704:	2000201c 	.word	0x2000201c
 8008708:	20002014 	.word	0x20002014
 800870c:	20000590 	.word	0x20000590
 8008710:	20002010 	.word	0x20002010
 8008714:	20002012 	.word	0x20002012
 8008718:	20000b84 	.word	0x20000b84
 800871c:	20002134 	.word	0x20002134
 8008720:	20002030 	.word	0x20002030
 8008724:	20000b7c 	.word	0x20000b7c
 8008728:	0801b044 	.word	0x0801b044
 800872c:	20002016 	.word	0x20002016
 8008730:	20002018 	.word	0x20002018
 8008734:	00007530 	.word	0x00007530
 8008738:	00003a98 	.word	0x00003a98
 800873c:	20000c78 	.word	0x20000c78
 8008740:	20000b8c 	.word	0x20000b8c
 8008744:	20000b94 	.word	0x20000b94
 8008748:	20000c23 	.word	0x20000c23
 800874c:	20000c38 	.word	0x20000c38
 8008750:	20000b4c 	.word	0x20000b4c
		goto	blink_dia;
 8008754:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 8008756:	4b0f      	ldr	r3, [pc, #60]	@ (8008794 <display+0x748>)
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b25b      	sxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	db07      	blt.n	8008770 <display+0x724>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 8008760:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <display+0x74c>)
 8008762:	2200      	movs	r2, #0
 8008764:	709a      	strb	r2, [r3, #2]
 8008766:	e004      	b.n	8008772 <display+0x726>
		goto	no_blk;
 8008768:	46c0      	nop			@ (mov r8, r8)
 800876a:	e002      	b.n	8008772 <display+0x726>
		goto	no_blk;
 800876c:	46c0      	nop			@ (mov r8, r8)
 800876e:	e000      	b.n	8008772 <display+0x726>
		goto	display_j11;
 8008770:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 8008772:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (estado1_Aux & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8008774:	1dbb      	adds	r3, r7, #6
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2201      	movs	r2, #1
 800877a:	4013      	ands	r3, r2
 800877c:	d104      	bne.n	8008788 <display+0x73c>
		goto	refriON;
	}
refriOFF_2:
 800877e:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 8008780:	4b05      	ldr	r3, [pc, #20]	@ (8008798 <display+0x74c>)
 8008782:	2201      	movs	r2, #1
 8008784:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 8008786:	e000      	b.n	800878a <display+0x73e>
		goto	refriON;
 8008788:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 800878a:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 800878c:	46c0      	nop			@ (mov r8, r8)
 800878e:	46bd      	mov	sp, r7
 8008790:	b004      	add	sp, #16
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20000b4c 	.word	0x20000b4c
 8008798:	20000c78 	.word	0x20000c78

0800879c <inicio>:
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 80087a2:	4b74      	ldr	r3, [pc, #464]	@ (8008974 <inicio+0x1d8>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 80087a8:	4b72      	ldr	r3, [pc, #456]	@ (8008974 <inicio+0x1d8>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 80087ae:	4b72      	ldr	r3, [pc, #456]	@ (8008978 <inicio+0x1dc>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 80087b4:	4b71      	ldr	r3, [pc, #452]	@ (800897c <inicio+0x1e0>)
 80087b6:	2281      	movs	r2, #129	@ 0x81
 80087b8:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 80087ba:	4b71      	ldr	r3, [pc, #452]	@ (8008980 <inicio+0x1e4>)
 80087bc:	2278      	movs	r2, #120	@ 0x78
 80087be:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 80087c0:	4b70      	ldr	r3, [pc, #448]	@ (8008984 <inicio+0x1e8>)
 80087c2:	2204      	movs	r2, #4
 80087c4:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 80087c6:	4b70      	ldr	r3, [pc, #448]	@ (8008988 <inicio+0x1ec>)
 80087c8:	22c5      	movs	r2, #197	@ 0xc5
 80087ca:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 80087cc:	4b6f      	ldr	r3, [pc, #444]	@ (800898c <inicio+0x1f0>)
 80087ce:	22a4      	movs	r2, #164	@ 0xa4
 80087d0:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 80087d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008990 <inicio+0x1f4>)
 80087d4:	220f      	movs	r2, #15
 80087d6:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 80087d8:	1dfb      	adds	r3, r7, #7
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	e009      	b.n	80087f4 <inicio+0x58>
		cruze_por_cero[k] = 0;
 80087e0:	1dfb      	adds	r3, r7, #7
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	4a6b      	ldr	r2, [pc, #428]	@ (8008994 <inicio+0x1f8>)
 80087e6:	2100      	movs	r1, #0
 80087e8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 80087ea:	1dfb      	adds	r3, r7, #7
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	1dfb      	adds	r3, r7, #7
 80087f0:	3201      	adds	r2, #1
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	1dfb      	adds	r3, r7, #7
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d9f1      	bls.n	80087e0 <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 80087fc:	4b66      	ldr	r3, [pc, #408]	@ (8008998 <inicio+0x1fc>)
 80087fe:	2200      	movs	r2, #0
 8008800:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 8008802:	4b66      	ldr	r3, [pc, #408]	@ (800899c <inicio+0x200>)
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	//Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
	Plantilla[protype] = reePlantilla[eeprotype];
 8008808:	4b65      	ldr	r3, [pc, #404]	@ (80089a0 <inicio+0x204>)
 800880a:	2257      	movs	r2, #87	@ 0x57
 800880c:	5c99      	ldrb	r1, [r3, r2]
 800880e:	4b65      	ldr	r3, [pc, #404]	@ (80089a4 <inicio+0x208>)
 8008810:	2257      	movs	r2, #87	@ 0x57
 8008812:	5499      	strb	r1, [r3, r2]
	voltl = 110;
 8008814:	4b64      	ldr	r3, [pc, #400]	@ (80089a8 <inicio+0x20c>)
 8008816:	226e      	movs	r2, #110	@ 0x6e
 8008818:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 800881a:	4b62      	ldr	r3, [pc, #392]	@ (80089a4 <inicio+0x208>)
 800881c:	2257      	movs	r2, #87	@ 0x57
 800881e:	5c9b      	ldrb	r3, [r3, r2]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d103      	bne.n	800882c <inicio+0x90>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 8008824:	4b60      	ldr	r3, [pc, #384]	@ (80089a8 <inicio+0x20c>)
 8008826:	22d2      	movs	r2, #210	@ 0xd2
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	e000      	b.n	800882e <inicio+0x92>
		goto no_ini_210;
 800882c:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 800882e:	4b5f      	ldr	r3, [pc, #380]	@ (80089ac <inicio+0x210>)
 8008830:	2201      	movs	r2, #1
 8008832:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 8008834:	4b5d      	ldr	r3, [pc, #372]	@ (80089ac <inicio+0x210>)
 8008836:	2200      	movs	r2, #0
 8008838:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 800883a:	4b5c      	ldr	r3, [pc, #368]	@ (80089ac <inicio+0x210>)
 800883c:	2200      	movs	r2, #0
 800883e:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 8008840:	4b5b      	ldr	r3, [pc, #364]	@ (80089b0 <inicio+0x214>)
 8008842:	2296      	movs	r2, #150	@ 0x96
 8008844:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 8008846:	4b5b      	ldr	r3, [pc, #364]	@ (80089b4 <inicio+0x218>)
 8008848:	2296      	movs	r2, #150	@ 0x96
 800884a:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 800884c:	4b5a      	ldr	r3, [pc, #360]	@ (80089b8 <inicio+0x21c>)
 800884e:	2296      	movs	r2, #150	@ 0x96
 8008850:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 8008852:	4b5a      	ldr	r3, [pc, #360]	@ (80089bc <inicio+0x220>)
 8008854:	2296      	movs	r2, #150	@ 0x96
 8008856:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 8008858:	4b52      	ldr	r3, [pc, #328]	@ (80089a4 <inicio+0x208>)
 800885a:	22aa      	movs	r2, #170	@ 0xaa
 800885c:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 800885e:	4b51      	ldr	r3, [pc, #324]	@ (80089a4 <inicio+0x208>)
 8008860:	2241      	movs	r2, #65	@ 0x41
 8008862:	2166      	movs	r1, #102	@ 0x66
 8008864:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 8008866:	4b4f      	ldr	r3, [pc, #316]	@ (80089a4 <inicio+0x208>)
 8008868:	227f      	movs	r2, #127	@ 0x7f
 800886a:	21cc      	movs	r1, #204	@ 0xcc
 800886c:	5499      	strb	r1, [r3, r2]

	//cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
	cnt_pta_fan = reePlantilla[eetimepaf];
 800886e:	4b4c      	ldr	r3, [pc, #304]	@ (80089a0 <inicio+0x204>)
 8008870:	2248      	movs	r2, #72	@ 0x48
 8008872:	5c9a      	ldrb	r2, [r3, r2]
 8008874:	4b52      	ldr	r3, [pc, #328]	@ (80089c0 <inicio+0x224>)
 8008876:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 8008878:	f7fe fa9a 	bl	8006db0 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 800887c:	f7fe fab4 	bl	8006de8 <load_tiempoAhorro2>
	//timeSeconds_HW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix1) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix2));		//	ldw		X,eeTimeUnix1
																									//	ldw		timeSeconds_HW,X
	//timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
	//timeSeconds_LW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix3) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix4));		//	ldw		X,eeTimeUnix3
																										//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 8008880:	4b50      	ldr	r3, [pc, #320]	@ (80089c4 <inicio+0x228>)
 8008882:	2200      	movs	r2, #0
 8008884:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 8008886:	4b50      	ldr	r3, [pc, #320]	@ (80089c8 <inicio+0x22c>)
 8008888:	2200      	movs	r2, #0
 800888a:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 800888c:	4b4f      	ldr	r3, [pc, #316]	@ (80089cc <inicio+0x230>)
 800888e:	2200      	movs	r2, #0
 8008890:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 8008892:	4b4f      	ldr	r3, [pc, #316]	@ (80089d0 <inicio+0x234>)
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 8008898:	4b4e      	ldr	r3, [pc, #312]	@ (80089d4 <inicio+0x238>)
 800889a:	2201      	movs	r2, #1
 800889c:	70da      	strb	r2, [r3, #3]


	//timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
							//	ldw		X,#300;
	timeTxTWF = 20;
 800889e:	4b4e      	ldr	r3, [pc, #312]	@ (80089d8 <inicio+0x23c>)
 80088a0:	2214      	movs	r2, #20
 80088a2:	701a      	strb	r2, [r3, #0]
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 80088a4:	4b4d      	ldr	r3, [pc, #308]	@ (80089dc <inicio+0x240>)
 80088a6:	2296      	movs	r2, #150	@ 0x96
 80088a8:	0052      	lsls	r2, r2, #1
 80088aa:	801a      	strh	r2, [r3, #0]
	// carga tiempo de envio de token BLE
	//	mov		timeTxTBLE,#10;
	//	ldw		X,#300;
	//	ldw		timeoutTBLE,X
	timeTxTBLE = 10;
 80088ac:	4b4c      	ldr	r3, [pc, #304]	@ (80089e0 <inicio+0x244>)
 80088ae:	220a      	movs	r2, #10
 80088b0:	701a      	strb	r2, [r3, #0]
	timeoutTBLE = 300;
 80088b2:	4b4c      	ldr	r3, [pc, #304]	@ (80089e4 <inicio+0x248>)
 80088b4:	2296      	movs	r2, #150	@ 0x96
 80088b6:	0052      	lsls	r2, r2, #1
 80088b8:	801a      	strh	r2, [r3, #0]

	/*
	 * Codigo comentado para Optimización
	 * CGM 23/04/2025
	 */
	findPointLogger(&dataLogger[0], &dataLoggerFin); // Obtenemos el Bloque que estamos y el Byte de tal bloque
 80088ba:	4a4b      	ldr	r2, [pc, #300]	@ (80089e8 <inicio+0x24c>)
 80088bc:	4b4b      	ldr	r3, [pc, #300]	@ (80089ec <inicio+0x250>)
 80088be:	0011      	movs	r1, r2
 80088c0:	0018      	movs	r0, r3
 80088c2:	f000 f925 	bl	8008b10 <findPointLogger>

	// Valores obtenidos de la funcion "findPointLogger"
	cntBlockDATA = cntBlockFlash;
 80088c6:	4b40      	ldr	r3, [pc, #256]	@ (80089c8 <inicio+0x22c>)
 80088c8:	781a      	ldrb	r2, [r3, #0]
 80088ca:	4b49      	ldr	r3, [pc, #292]	@ (80089f0 <inicio+0x254>)
 80088cc:	701a      	strb	r2, [r3, #0]
	cntByteBlockDATA = cntByteBlock;
 80088ce:	4b3f      	ldr	r3, [pc, #252]	@ (80089cc <inicio+0x230>)
 80088d0:	781a      	ldrb	r2, [r3, #0]
 80088d2:	4b48      	ldr	r3, [pc, #288]	@ (80089f4 <inicio+0x258>)
 80088d4:	701a      	strb	r2, [r3, #0]
//
//	cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
//	//cntByteBlockDATA = 0;


	dirBuffer = &data_buffer[0];
 80088d6:	4b48      	ldr	r3, [pc, #288]	@ (80089f8 <inicio+0x25c>)
 80088d8:	4a48      	ldr	r2, [pc, #288]	@ (80089fc <inicio+0x260>)
 80088da:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 80088dc:	4b48      	ldr	r3, [pc, #288]	@ (8008a00 <inicio+0x264>)
 80088de:	4a43      	ldr	r2, [pc, #268]	@ (80089ec <inicio+0x250>)
 80088e0:	601a      	str	r2, [r3, #0]
	//cntBlockFlash = cntBlockDATA;			// Con la optimización anterior, no es necesario esta instrucción CGM 23/04/2025
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 80088e2:	f7fe faaf 	bl	8006e44 <load_next_buffer>

	/*
	 * Codigo comentado para Optimización
	 * CGM 23/04/2025
	 */
	findPointLogger(&eventLogger[0], &eventLoggerFin); // Obtenemos el Bloque que estamos y el Byte de tal bloque
 80088e6:	4a47      	ldr	r2, [pc, #284]	@ (8008a04 <inicio+0x268>)
 80088e8:	4b47      	ldr	r3, [pc, #284]	@ (8008a08 <inicio+0x26c>)
 80088ea:	0011      	movs	r1, r2
 80088ec:	0018      	movs	r0, r3
 80088ee:	f000 f90f 	bl	8008b10 <findPointLogger>

	// Valores obtenidos de la funcion "findPointLogger"
	cntBlockEVENT= cntBlockFlash;
 80088f2:	4b35      	ldr	r3, [pc, #212]	@ (80089c8 <inicio+0x22c>)
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	4b45      	ldr	r3, [pc, #276]	@ (8008a0c <inicio+0x270>)
 80088f8:	701a      	strb	r2, [r3, #0]
	cntByteBlockEVENT = cntByteBlock;
 80088fa:	4b34      	ldr	r3, [pc, #208]	@ (80089cc <inicio+0x230>)
 80088fc:	781a      	ldrb	r2, [r3, #0]
 80088fe:	4b44      	ldr	r3, [pc, #272]	@ (8008a10 <inicio+0x274>)
 8008900:	701a      	strb	r2, [r3, #0]
//		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
//		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
//
//		cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
//		//cntByteBlockEVENT = 0;
		dirBuffer = &event_buffer[0];
 8008902:	4b3d      	ldr	r3, [pc, #244]	@ (80089f8 <inicio+0x25c>)
 8008904:	4a43      	ldr	r2, [pc, #268]	@ (8008a14 <inicio+0x278>)
 8008906:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 8008908:	4b3d      	ldr	r3, [pc, #244]	@ (8008a00 <inicio+0x264>)
 800890a:	4a3f      	ldr	r2, [pc, #252]	@ (8008a08 <inicio+0x26c>)
 800890c:	601a      	str	r2, [r3, #0]
		//cntBlockFlash = cntBlockEVENT;			// Con la optimización anterior, no es necesario esta instrucción CGM 23/04/2025
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 800890e:	f7fe fa99 	bl	8006e44 <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 8008912:	4b41      	ldr	r3, [pc, #260]	@ (8008a18 <inicio+0x27c>)
 8008914:	2200      	movs	r2, #0
 8008916:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 8008918:	4b3f      	ldr	r3, [pc, #252]	@ (8008a18 <inicio+0x27c>)
 800891a:	2200      	movs	r2, #0
 800891c:	719a      	strb	r2, [r3, #6]
		uint8_t estado1_Aux = reeEstado1; // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 800891e:	1dbb      	adds	r3, r7, #6
 8008920:	4a3e      	ldr	r2, [pc, #248]	@ (8008a1c <inicio+0x280>)
 8008922:	7812      	ldrb	r2, [r2, #0]
 8008924:	701a      	strb	r2, [r3, #0]
		if(!GetRegFlagState(estado1_Aux, est1Lamp)){
 8008926:	1dbb      	adds	r3, r7, #6
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2204      	movs	r2, #4
 800892c:	4013      	ands	r3, r2
 800892e:	d003      	beq.n	8008938 <inicio+0x19c>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 8008930:	4b39      	ldr	r3, [pc, #228]	@ (8008a18 <inicio+0x27c>)
 8008932:	2201      	movs	r2, #1
 8008934:	719a      	strb	r2, [r3, #6]
 8008936:	e000      	b.n	800893a <inicio+0x19e>
			goto initLampOFF;
 8008938:	46c0      	nop			@ (mov r8, r8)
initLampOFF:
		if(GetRegFlagState(Plantilla[logicos2], funReleDesh))//btjt		logicos2,#funReleDesh,deshTypeAct_02; omite estado Lock sí se eligio función deshielo para relevador
 800893a:	4b1a      	ldr	r3, [pc, #104]	@ (80089a4 <inicio+0x208>)
 800893c:	225b      	movs	r2, #91	@ 0x5b
 800893e:	5c9b      	ldrb	r3, [r3, r2]
 8008940:	001a      	movs	r2, r3
 8008942:	2308      	movs	r3, #8
 8008944:	4013      	ands	r3, r2
 8008946:	d10b      	bne.n	8008960 <inicio+0x1c4>
			goto deshTypeAct_02;
		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 8008948:	4b35      	ldr	r3, [pc, #212]	@ (8008a20 <inicio+0x284>)
 800894a:	2200      	movs	r2, #0
 800894c:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(estado1_Aux, est1LockDr)){
 800894e:	1dbb      	adds	r3, r7, #6
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2240      	movs	r2, #64	@ 0x40
 8008954:	4013      	ands	r3, r2
 8008956:	d005      	beq.n	8008964 <inicio+0x1c8>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 8008958:	4b31      	ldr	r3, [pc, #196]	@ (8008a20 <inicio+0x284>)
 800895a:	2201      	movs	r2, #1
 800895c:	705a      	strb	r2, [r3, #1]
 800895e:	e002      	b.n	8008966 <inicio+0x1ca>
			goto deshTypeAct_02;
 8008960:	46c0      	nop			@ (mov r8, r8)
 8008962:	e000      	b.n	8008966 <inicio+0x1ca>
			goto initLockDrOFF;
 8008964:	46c0      	nop			@ (mov r8, r8)
initLockDrOFF:
deshTypeAct_02:
//		ldw			X,#90
//		ldw			cntSetName,X
		cntSetName = 90;
 8008966:	4b2f      	ldr	r3, [pc, #188]	@ (8008a24 <inicio+0x288>)
 8008968:	225a      	movs	r2, #90	@ 0x5a
 800896a:	801a      	strh	r2, [r3, #0]
	//jp	end_init
}
 800896c:	46c0      	nop			@ (mov r8, r8)
 800896e:	46bd      	mov	sp, r7
 8008970:	b002      	add	sp, #8
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20000b74 	.word	0x20000b74
 8008978:	20000b4b 	.word	0x20000b4b
 800897c:	20000bc6 	.word	0x20000bc6
 8008980:	20000bc7 	.word	0x20000bc7
 8008984:	20000c53 	.word	0x20000c53
 8008988:	20000c54 	.word	0x20000c54
 800898c:	20000c52 	.word	0x20000c52
 8008990:	20000c55 	.word	0x20000c55
 8008994:	20000c58 	.word	0x20000c58
 8008998:	20000c5d 	.word	0x20000c5d
 800899c:	20000c5e 	.word	0x20000c5e
 80089a0:	20000c88 	.word	0x20000c88
 80089a4:	200000b8 	.word	0x200000b8
 80089a8:	20000bca 	.word	0x20000bca
 80089ac:	20000be4 	.word	0x20000be4
 80089b0:	20000c0c 	.word	0x20000c0c
 80089b4:	20000c0d 	.word	0x20000c0d
 80089b8:	20000c0e 	.word	0x20000c0e
 80089bc:	20000c0f 	.word	0x20000c0f
 80089c0:	20000c23 	.word	0x20000c23
 80089c4:	20000e20 	.word	0x20000e20
 80089c8:	20000e22 	.word	0x20000e22
 80089cc:	20000e23 	.word	0x20000e23
 80089d0:	20000e24 	.word	0x20000e24
 80089d4:	20001f54 	.word	0x20001f54
 80089d8:	20001fc6 	.word	0x20001fc6
 80089dc:	20001fd8 	.word	0x20001fd8
 80089e0:	20002186 	.word	0x20002186
 80089e4:	20002188 	.word	0x20002188
 80089e8:	0803efff 	.word	0x0803efff
 80089ec:	0803c000 	.word	0x0803c000
 80089f0:	20000e35 	.word	0x20000e35
 80089f4:	20000e34 	.word	0x20000e34
 80089f8:	20000e2c 	.word	0x20000e2c
 80089fc:	20000d14 	.word	0x20000d14
 8008a00:	20000e28 	.word	0x20000e28
 8008a04:	0803bfff 	.word	0x0803bfff
 8008a08:	08037000 	.word	0x08037000
 8008a0c:	20000e37 	.word	0x20000e37
 8008a10:	20000e36 	.word	0x20000e36
 8008a14:	20000d94 	.word	0x20000d94
 8008a18:	20000c38 	.word	0x20000c38
 8008a1c:	200001ba 	.word	0x200001ba
 8008a20:	20000ba0 	.word	0x20000ba0
 8008a24:	20002184 	.word	0x20002184

08008a28 <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 8008a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8008aac <timeBCD_to_UNIX+0x84>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	0018      	movs	r0, r3
 8008a32:	f000 f853 	bl	8008adc <BCDtoByte>
 8008a36:	0003      	movs	r3, r0
 8008a38:	22fa      	movs	r2, #250	@ 0xfa
 8008a3a:	00d2      	lsls	r2, r2, #3
 8008a3c:	4694      	mov	ip, r2
 8008a3e:	4463      	add	r3, ip
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab0 <timeBCD_to_UNIX+0x88>)
 8008a44:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 8008a46:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab4 <timeBCD_to_UNIX+0x8c>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	221f      	movs	r2, #31
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	0018      	movs	r0, r3
 8008a52:	f000 f843 	bl	8008adc <BCDtoByte>
 8008a56:	0003      	movs	r3, r0
 8008a58:	001a      	movs	r2, r3
 8008a5a:	4b17      	ldr	r3, [pc, #92]	@ (8008ab8 <timeBCD_to_UNIX+0x90>)
 8008a5c:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 8008a5e:	4b17      	ldr	r3, [pc, #92]	@ (8008abc <timeBCD_to_UNIX+0x94>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	0018      	movs	r0, r3
 8008a64:	f000 f83a 	bl	8008adc <BCDtoByte>
 8008a68:	0003      	movs	r3, r0
 8008a6a:	001a      	movs	r2, r3
 8008a6c:	4b14      	ldr	r3, [pc, #80]	@ (8008ac0 <timeBCD_to_UNIX+0x98>)
 8008a6e:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 8008a70:	4b14      	ldr	r3, [pc, #80]	@ (8008ac4 <timeBCD_to_UNIX+0x9c>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	0018      	movs	r0, r3
 8008a76:	f000 f831 	bl	8008adc <BCDtoByte>
 8008a7a:	0003      	movs	r3, r0
 8008a7c:	001a      	movs	r2, r3
 8008a7e:	4b12      	ldr	r3, [pc, #72]	@ (8008ac8 <timeBCD_to_UNIX+0xa0>)
 8008a80:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 8008a82:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <timeBCD_to_UNIX+0xa4>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	0018      	movs	r0, r3
 8008a88:	f000 f828 	bl	8008adc <BCDtoByte>
 8008a8c:	0003      	movs	r3, r0
 8008a8e:	001a      	movs	r2, r3
 8008a90:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad0 <timeBCD_to_UNIX+0xa8>)
 8008a92:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 8008a94:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad4 <timeBCD_to_UNIX+0xac>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f000 f81f 	bl	8008adc <BCDtoByte>
 8008a9e:	0003      	movs	r3, r0
 8008aa0:	001a      	movs	r2, r3
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <timeBCD_to_UNIX+0xb0>)
 8008aa4:	701a      	strb	r2, [r3, #0]
}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	200020fc 	.word	0x200020fc
 8008ab0:	2000211c 	.word	0x2000211c
 8008ab4:	200020fd 	.word	0x200020fd
 8008ab8:	2000211e 	.word	0x2000211e
 8008abc:	200020fe 	.word	0x200020fe
 8008ac0:	2000211f 	.word	0x2000211f
 8008ac4:	200020ff 	.word	0x200020ff
 8008ac8:	20002120 	.word	0x20002120
 8008acc:	20002100 	.word	0x20002100
 8008ad0:	20002121 	.word	0x20002121
 8008ad4:	20002101 	.word	0x20002101
 8008ad8:	20002122 	.word	0x20002122

08008adc <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	0002      	movs	r2, r0
 8008ae4:	1dfb      	adds	r3, r7, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 8008ae8:	1dfb      	adds	r3, r7, #7
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	220f      	movs	r2, #15
 8008aee:	4013      	ands	r3, r2
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	1dfb      	adds	r3, r7, #7
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	091b      	lsrs	r3, r3, #4
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	1c19      	adds	r1, r3, #0
 8008afc:	0089      	lsls	r1, r1, #2
 8008afe:	18cb      	adds	r3, r1, r3
 8008b00:	18db      	adds	r3, r3, r3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	18d3      	adds	r3, r2, r3
 8008b06:	b2db      	uxtb	r3, r3

}
 8008b08:	0018      	movs	r0, r3
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <findPointLogger>:

/*
 * Funcion para encontrar en donde se debe comenzar a escribir el logger en la FLASH, tanto para el Logger de Tiempos (Datos) y el Logger de Eventos
 * CGM 23/04/2025
 */
void findPointLogger(uint8_t * pointLogger_, uint8_t * pointLoggerFin_){
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
	uint16_t * pointFirstProgram =(uint16_t *) &pointLogger_[126]; // Apuntador utilizado para comenzar a llenar el logger apartir del inicio; Este apuntador abacar tanto el elemento 126 como el 127
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	337e      	adds	r3, #126	@ 0x7e
 8008b1e:	60fb      	str	r3, [r7, #12]
	uint8_t * pointLoggerX_ = pointLogger_;							// Apuntador que recorre todo el Logger almacenado en FLASH
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	617b      	str	r3, [r7, #20]
	uint8_t	cntBloques128 = 0;										// Contador de Bloques de 128 bytes;
 8008b24:	2313      	movs	r3, #19
 8008b26:	18fb      	adds	r3, r7, r3
 8008b28:	2200      	movs	r2, #0
 8008b2a:	701a      	strb	r2, [r3, #0]

	// El logger se llena desde el inicio
	if(*pointFirstProgram == 0){		// Verifica si el elemento 126 (posición del elemento del bloque de 128) es igual a 0 y
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d121      	bne.n	8008b78 <findPointLogger+0x68>
		cntBlockFlash = 0; 	// Inicia en el Bloque 0 de 128 bytes (FLASH)
 8008b34:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb4 <findPointLogger+0xa4>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	701a      	strb	r2, [r3, #0]
		cntByteBlock = 0;	// Inicia en la posición 0 del Buffer de 128 Bytes (RAM)
 8008b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb8 <findPointLogger+0xa8>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	701a      	strb	r2, [r3, #0]
		return ;
 8008b40:	e034      	b.n	8008bac <findPointLogger+0x9c>
	}

	// Se busca a partir de donde se comenzara la escritura del Logger
	while(pointLoggerX_[126] == 0){ 			// Se revisa elemento 126, ya que este almacena la posición de cual fue la ultima escritura del bloque de 128 bytes.
		if(pointLoggerX_[127] != pointLogger_[127]){ // Revisamos que estemos en el mismo ciclo del grabado de FLASH, esto representa el byte no. 127
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	337f      	adds	r3, #127	@ 0x7f
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	337f      	adds	r3, #127	@ 0x7f
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d118      	bne.n	8008b84 <findPointLogger+0x74>
			break;
		}
		pointLoggerX_ += 128;		// Apunta al siguiente bloque 128 bytes de su elemento 126
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	3380      	adds	r3, #128	@ 0x80
 8008b56:	617b      	str	r3, [r7, #20]
		cntBloques128++;
 8008b58:	2113      	movs	r1, #19
 8008b5a:	187b      	adds	r3, r7, r1
 8008b5c:	781a      	ldrb	r2, [r3, #0]
 8008b5e:	187b      	adds	r3, r7, r1
 8008b60:	3201      	adds	r2, #1
 8008b62:	701a      	strb	r2, [r3, #0]
		if(pointLoggerX_ > pointLoggerFin_){
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d905      	bls.n	8008b78 <findPointLogger+0x68>
			// El llenado comenzará desde el inicio del Logger, es decir desde el primer bloque.
			pointLoggerX_ = pointLogger_;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	617b      	str	r3, [r7, #20]
			cntBloques128 = 0;
 8008b70:	187b      	adds	r3, r7, r1
 8008b72:	2200      	movs	r2, #0
 8008b74:	701a      	strb	r2, [r3, #0]
			break;
 8008b76:	e006      	b.n	8008b86 <findPointLogger+0x76>
	while(pointLoggerX_[126] == 0){ 			// Se revisa elemento 126, ya que este almacena la posición de cual fue la ultima escritura del bloque de 128 bytes.
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	337e      	adds	r3, #126	@ 0x7e
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0df      	beq.n	8008b42 <findPointLogger+0x32>
 8008b82:	e000      	b.n	8008b86 <findPointLogger+0x76>
			break;
 8008b84:	46c0      	nop			@ (mov r8, r8)
		}
	}

	// Determinación de la posición de buffer, en caso de que tengamos todos los bloques completos
	if(pointLoggerX_[126] == 0xFF)
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	337e      	adds	r3, #126	@ 0x7e
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2bff      	cmp	r3, #255	@ 0xff
 8008b8e:	d103      	bne.n	8008b98 <findPointLogger+0x88>
		cntByteBlock = 0;						// Posición del Buffer de 128 Bytes que estamos ubicados
 8008b90:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <findPointLogger+0xa8>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	e004      	b.n	8008ba2 <findPointLogger+0x92>
	else
		cntByteBlock = pointLoggerX_[126];		// Posición del Buffer de 128 Bytes que estamos ubicados
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	227e      	movs	r2, #126	@ 0x7e
 8008b9c:	5c9a      	ldrb	r2, [r3, r2]
 8008b9e:	4b06      	ldr	r3, [pc, #24]	@ (8008bb8 <findPointLogger+0xa8>)
 8008ba0:	701a      	strb	r2, [r3, #0]

	cntBlockFlash = cntBloques128;				// Bloque en el que estamos ubicados dentro de la memoria Flash
 8008ba2:	4b04      	ldr	r3, [pc, #16]	@ (8008bb4 <findPointLogger+0xa4>)
 8008ba4:	2213      	movs	r2, #19
 8008ba6:	18ba      	adds	r2, r7, r2
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	701a      	strb	r2, [r3, #0]

}
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b006      	add	sp, #24
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	46c0      	nop			@ (mov r8, r8)
 8008bb4:	20000e22 	.word	0x20000e22
 8008bb8:	20000e23 	.word	0x20000e23

08008bbc <logger>:





void logger (void){
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 8008bc0:	4bb9      	ldr	r3, [pc, #740]	@ (8008ea8 <logger+0x2ec>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d800      	bhi.n	8008bca <logger+0xe>
 8008bc8:	e306      	b.n	80091d8 <logger+0x61c>
			goto logger_01;//jruge	logger_01;
 8008bca:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 8008bcc:	4bb7      	ldr	r3, [pc, #732]	@ (8008eac <logger+0x2f0>)
 8008bce:	79db      	ldrb	r3, [r3, #7]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d118      	bne.n	8008c06 <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 8008bd4:	4bb6      	ldr	r3, [pc, #728]	@ (8008eb0 <logger+0x2f4>)
 8008bd6:	2257      	movs	r2, #87	@ 0x57
 8008bd8:	5c9b      	ldrb	r3, [r3, r2]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d005      	beq.n	8008bea <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 8008bde:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 8008be0:	4bb4      	ldr	r3, [pc, #720]	@ (8008eb4 <logger+0x2f8>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b45      	cmp	r3, #69	@ 0x45
 8008be6:	d90a      	bls.n	8008bfe <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 8008be8:	e005      	b.n	8008bf6 <logger+0x3a>
			goto chk_220;//jreq	chk_220
 8008bea:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 8008bec:	4bb1      	ldr	r3, [pc, #708]	@ (8008eb4 <logger+0x2f8>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2ba9      	cmp	r3, #169	@ 0xa9
 8008bf2:	d906      	bls.n	8008c02 <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 8008bf4:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 8008bf6:	4bad      	ldr	r3, [pc, #692]	@ (8008eac <logger+0x2f0>)
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8008bfc:	e2ed      	b.n	80091da <logger+0x61e>
		goto voltArranFAIL;//jra	voltArranFAIL
 8008bfe:	46c0      	nop			@ (mov r8, r8)
 8008c00:	e2eb      	b.n	80091da <logger+0x61e>
		goto voltArranFAIL;//jra voltArranFAIL
 8008c02:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008c04:	e2e9      	b.n	80091da <logger+0x61e>
			goto voltFlagOK;
 8008c06:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(flagsWIFI[f_eventLoggerSend])	//btjt		flagsWIFI,#f_eventLoggerSend,event_logg_01; No loggear hasta terminar Tx
 8008c08:	4bab      	ldr	r3, [pc, #684]	@ (8008eb8 <logger+0x2fc>)
 8008c0a:	789b      	ldrb	r3, [r3, #2]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d107      	bne.n	8008c20 <logger+0x64>
			goto event_logg_01;
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8008c10:	4ba6      	ldr	r3, [pc, #664]	@ (8008eac <logger+0x2f0>)
 8008c12:	791b      	ldrb	r3, [r3, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	4053      	eors	r3, r2
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <logger+0x68>
			goto door_event;
		}
event_logg_01:
 8008c1e:	e000      	b.n	8008c22 <logger+0x66>
			goto event_logg_01;
 8008c20:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; // jp fin_logger
 8008c22:	e2da      	b.n	80091da <logger+0x61e>
			goto door_event;
 8008c24:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8008c26:	4ba5      	ldr	r3, [pc, #660]	@ (8008ebc <logger+0x300>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d136      	bne.n	8008c9c <logger+0xe0>
			goto ask_DE_end;
		}
ask_DE_start:
 8008c2e:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8008c30:	4ba3      	ldr	r3, [pc, #652]	@ (8008ec0 <logger+0x304>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d068      	beq.n	8008d0a <logger+0x14e>
			goto ask_DE_start_01;
 8008c38:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 8008c3a:	4ba2      	ldr	r3, [pc, #648]	@ (8008ec4 <logger+0x308>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	0a1b      	lsrs	r3, r3, #8
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	4ba0      	ldr	r3, [pc, #640]	@ (8008ec8 <logger+0x30c>)
 8008c46:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 8008c48:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec4 <logger+0x308>)
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec8 <logger+0x30c>)
 8008c50:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8008c52:	4b9e      	ldr	r3, [pc, #632]	@ (8008ecc <logger+0x310>)
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8008ec8 <logger+0x30c>)
 8008c5e:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008c60:	4b9a      	ldr	r3, [pc, #616]	@ (8008ecc <logger+0x310>)
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	4b98      	ldr	r3, [pc, #608]	@ (8008ec8 <logger+0x30c>)
 8008c68:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 8008c6a:	4b97      	ldr	r3, [pc, #604]	@ (8008ec8 <logger+0x30c>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 8008c70:	4b97      	ldr	r3, [pc, #604]	@ (8008ed0 <logger+0x314>)
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	4b94      	ldr	r3, [pc, #592]	@ (8008ec8 <logger+0x30c>)
 8008c76:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 8008c78:	4b96      	ldr	r3, [pc, #600]	@ (8008ed4 <logger+0x318>)
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	4b92      	ldr	r3, [pc, #584]	@ (8008ec8 <logger+0x30c>)
 8008c7e:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 8008c80:	4b8c      	ldr	r3, [pc, #560]	@ (8008eb4 <logger+0x2f8>)
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	4b90      	ldr	r3, [pc, #576]	@ (8008ec8 <logger+0x30c>)
 8008c86:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 8008c88:	4b8c      	ldr	r3, [pc, #560]	@ (8008ebc <logger+0x300>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 8008c8e:	4b88      	ldr	r3, [pc, #544]	@ (8008eb0 <logger+0x2f4>)
 8008c90:	2250      	movs	r2, #80	@ 0x50
 8008c92:	5c9b      	ldrb	r3, [r3, r2]
 8008c94:	001a      	movs	r2, r3
 8008c96:	4b90      	ldr	r3, [pc, #576]	@ (8008ed8 <logger+0x31c>)
 8008c98:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 8008c9a:	e039      	b.n	8008d10 <logger+0x154>
			goto ask_DE_end;
 8008c9c:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 8008c9e:	4b88      	ldr	r3, [pc, #544]	@ (8008ec0 <logger+0x304>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d133      	bne.n	8008d0e <logger+0x152>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 8008ca6:	4b8c      	ldr	r3, [pc, #560]	@ (8008ed8 <logger+0x31c>)
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <logger+0xfa>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 8008cae:	4b83      	ldr	r3, [pc, #524]	@ (8008ebc <logger+0x300>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 8008cb4:	e02c      	b.n	8008d10 <logger+0x154>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 8008cb6:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 8008cb8:	4b82      	ldr	r3, [pc, #520]	@ (8008ec4 <logger+0x308>)
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	0a1b      	lsrs	r3, r3, #8
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	4b81      	ldr	r3, [pc, #516]	@ (8008ec8 <logger+0x30c>)
 8008cc4:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 8008cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8008ec4 <logger+0x308>)
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8008ec8 <logger+0x30c>)
 8008cce:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8008ecc <logger+0x310>)
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	0a1b      	lsrs	r3, r3, #8
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	4b7b      	ldr	r3, [pc, #492]	@ (8008ec8 <logger+0x30c>)
 8008cdc:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8008cde:	4b7b      	ldr	r3, [pc, #492]	@ (8008ecc <logger+0x310>)
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	4b78      	ldr	r3, [pc, #480]	@ (8008ec8 <logger+0x30c>)
 8008ce6:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 8008ce8:	4b7c      	ldr	r3, [pc, #496]	@ (8008edc <logger+0x320>)
 8008cea:	781a      	ldrb	r2, [r3, #0]
 8008cec:	4b76      	ldr	r3, [pc, #472]	@ (8008ec8 <logger+0x30c>)
 8008cee:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008cf0:	4b7b      	ldr	r3, [pc, #492]	@ (8008ee0 <logger+0x324>)
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	4b74      	ldr	r3, [pc, #464]	@ (8008ec8 <logger+0x30c>)
 8008cf6:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 8008cf8:	4b7a      	ldr	r3, [pc, #488]	@ (8008ee4 <logger+0x328>)
 8008cfa:	4a7b      	ldr	r2, [pc, #492]	@ (8008ee8 <logger+0x32c>)
 8008cfc:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8008cfe:	f000 fac9 	bl	8009294 <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8008d02:	4b6e      	ldr	r3, [pc, #440]	@ (8008ebc <logger+0x300>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 8008d08:	e002      	b.n	8008d10 <logger+0x154>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 8008d0a:	46c0      	nop			@ (mov r8, r8)
 8008d0c:	e000      	b.n	8008d10 <logger+0x154>
			goto comp_event;
 8008d0e:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8008d10:	4b6a      	ldr	r3, [pc, #424]	@ (8008ebc <logger+0x300>)
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d130      	bne.n	8008d7a <logger+0x1be>
			goto ask_CE_end;
		}
ask_CE_start:
 8008d18:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 8008d1a:	4b74      	ldr	r3, [pc, #464]	@ (8008eec <logger+0x330>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d05a      	beq.n	8008dd8 <logger+0x21c>
			goto ask_CE_start_01;
 8008d22:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8008d24:	4b67      	ldr	r3, [pc, #412]	@ (8008ec4 <logger+0x308>)
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	0a1b      	lsrs	r3, r3, #8
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4b70      	ldr	r3, [pc, #448]	@ (8008ef0 <logger+0x334>)
 8008d30:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8008d32:	4b64      	ldr	r3, [pc, #400]	@ (8008ec4 <logger+0x308>)
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	4b6d      	ldr	r3, [pc, #436]	@ (8008ef0 <logger+0x334>)
 8008d3a:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 8008d3c:	4b63      	ldr	r3, [pc, #396]	@ (8008ecc <logger+0x310>)
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	0a1b      	lsrs	r3, r3, #8
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	4b6a      	ldr	r3, [pc, #424]	@ (8008ef0 <logger+0x334>)
 8008d48:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008d4a:	4b60      	ldr	r3, [pc, #384]	@ (8008ecc <logger+0x310>)
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	4b67      	ldr	r3, [pc, #412]	@ (8008ef0 <logger+0x334>)
 8008d52:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8008d54:	4b66      	ldr	r3, [pc, #408]	@ (8008ef0 <logger+0x334>)
 8008d56:	2202      	movs	r2, #2
 8008d58:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 8008d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8008ed0 <logger+0x314>)
 8008d5c:	781a      	ldrb	r2, [r3, #0]
 8008d5e:	4b64      	ldr	r3, [pc, #400]	@ (8008ef0 <logger+0x334>)
 8008d60:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8008d62:	4b5c      	ldr	r3, [pc, #368]	@ (8008ed4 <logger+0x318>)
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	4b62      	ldr	r3, [pc, #392]	@ (8008ef0 <logger+0x334>)
 8008d68:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 8008d6a:	4b52      	ldr	r3, [pc, #328]	@ (8008eb4 <logger+0x2f8>)
 8008d6c:	781a      	ldrb	r2, [r3, #0]
 8008d6e:	4b60      	ldr	r3, [pc, #384]	@ (8008ef0 <logger+0x334>)
 8008d70:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 8008d72:	4b52      	ldr	r3, [pc, #328]	@ (8008ebc <logger+0x300>)
 8008d74:	2201      	movs	r2, #1
 8008d76:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 8008d78:	e031      	b.n	8008dde <logger+0x222>
			goto ask_CE_end;
 8008d7a:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 8008d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8008eec <logger+0x330>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d12b      	bne.n	8008ddc <logger+0x220>
			goto desh_event;
		}
comp_event_end:
 8008d84:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 8008d86:	4b4f      	ldr	r3, [pc, #316]	@ (8008ec4 <logger+0x308>)
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	0a1b      	lsrs	r3, r3, #8
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	4b57      	ldr	r3, [pc, #348]	@ (8008ef0 <logger+0x334>)
 8008d92:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 8008d94:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec4 <logger+0x308>)
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	4b55      	ldr	r3, [pc, #340]	@ (8008ef0 <logger+0x334>)
 8008d9c:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8008ecc <logger+0x310>)
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	0a1b      	lsrs	r3, r3, #8
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	4b51      	ldr	r3, [pc, #324]	@ (8008ef0 <logger+0x334>)
 8008daa:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 8008dac:	4b47      	ldr	r3, [pc, #284]	@ (8008ecc <logger+0x310>)
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ef0 <logger+0x334>)
 8008db4:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 8008db6:	4b49      	ldr	r3, [pc, #292]	@ (8008edc <logger+0x320>)
 8008db8:	781a      	ldrb	r2, [r3, #0]
 8008dba:	4b4d      	ldr	r3, [pc, #308]	@ (8008ef0 <logger+0x334>)
 8008dbc:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008dbe:	4b48      	ldr	r3, [pc, #288]	@ (8008ee0 <logger+0x324>)
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef0 <logger+0x334>)
 8008dc4:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 8008dc6:	4b47      	ldr	r3, [pc, #284]	@ (8008ee4 <logger+0x328>)
 8008dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8008ef4 <logger+0x338>)
 8008dca:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 8008dcc:	f000 fa62 	bl	8009294 <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 8008dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8008ebc <logger+0x300>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8008dd6:	e002      	b.n	8008dde <logger+0x222>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 8008dd8:	46c0      	nop			@ (mov r8, r8)
 8008dda:	e000      	b.n	8008dde <logger+0x222>
			goto desh_event;
 8008ddc:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8008dde:	4b37      	ldr	r3, [pc, #220]	@ (8008ebc <logger+0x300>)
 8008de0:	789b      	ldrb	r3, [r3, #2]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d12f      	bne.n	8008e46 <logger+0x28a>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8008de6:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 8008de8:	4b2f      	ldr	r3, [pc, #188]	@ (8008ea8 <logger+0x2ec>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d159      	bne.n	8008ea4 <logger+0x2e8>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008df0:	4b34      	ldr	r3, [pc, #208]	@ (8008ec4 <logger+0x308>)
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8008ef8 <logger+0x33c>)
 8008dfc:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 8008dfe:	4b31      	ldr	r3, [pc, #196]	@ (8008ec4 <logger+0x308>)
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	4b3c      	ldr	r3, [pc, #240]	@ (8008ef8 <logger+0x33c>)
 8008e06:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008e08:	4b30      	ldr	r3, [pc, #192]	@ (8008ecc <logger+0x310>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	0a1b      	lsrs	r3, r3, #8
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	4b39      	ldr	r3, [pc, #228]	@ (8008ef8 <logger+0x33c>)
 8008e14:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008e16:	4b2d      	ldr	r3, [pc, #180]	@ (8008ecc <logger+0x310>)
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	4b36      	ldr	r3, [pc, #216]	@ (8008ef8 <logger+0x33c>)
 8008e1e:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 8008e20:	4b35      	ldr	r3, [pc, #212]	@ (8008ef8 <logger+0x33c>)
 8008e22:	2203      	movs	r2, #3
 8008e24:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 8008e26:	4b2a      	ldr	r3, [pc, #168]	@ (8008ed0 <logger+0x314>)
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	4b33      	ldr	r3, [pc, #204]	@ (8008ef8 <logger+0x33c>)
 8008e2c:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 8008e2e:	4b29      	ldr	r3, [pc, #164]	@ (8008ed4 <logger+0x318>)
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	4b31      	ldr	r3, [pc, #196]	@ (8008ef8 <logger+0x33c>)
 8008e34:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 8008e36:	4b1f      	ldr	r3, [pc, #124]	@ (8008eb4 <logger+0x2f8>)
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ef8 <logger+0x33c>)
 8008e3c:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 8008e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ebc <logger+0x300>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 8008e44:	e05d      	b.n	8008f02 <logger+0x346>
			goto ask_DhE_end;
 8008e46:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 8008e48:	4b17      	ldr	r3, [pc, #92]	@ (8008ea8 <logger+0x2ec>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d057      	beq.n	8008f00 <logger+0x344>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 8008e50:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008e52:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec4 <logger+0x308>)
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	0a1b      	lsrs	r3, r3, #8
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	4b26      	ldr	r3, [pc, #152]	@ (8008ef8 <logger+0x33c>)
 8008e5e:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 8008e60:	4b18      	ldr	r3, [pc, #96]	@ (8008ec4 <logger+0x308>)
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	4b24      	ldr	r3, [pc, #144]	@ (8008ef8 <logger+0x33c>)
 8008e68:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008e6a:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <logger+0x310>)
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	4b20      	ldr	r3, [pc, #128]	@ (8008ef8 <logger+0x33c>)
 8008e76:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 8008e78:	4b14      	ldr	r3, [pc, #80]	@ (8008ecc <logger+0x310>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef8 <logger+0x33c>)
 8008e80:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 8008e82:	4b16      	ldr	r3, [pc, #88]	@ (8008edc <logger+0x320>)
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef8 <logger+0x33c>)
 8008e88:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008e8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ee0 <logger+0x324>)
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef8 <logger+0x33c>)
 8008e90:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 8008e92:	4b14      	ldr	r3, [pc, #80]	@ (8008ee4 <logger+0x328>)
 8008e94:	4a19      	ldr	r2, [pc, #100]	@ (8008efc <logger+0x340>)
 8008e96:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 8008e98:	f000 f9fc 	bl	8009294 <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <logger+0x300>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 8008ea2:	e02e      	b.n	8008f02 <logger+0x346>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 8008ea4:	46c0      	nop			@ (mov r8, r8)
 8008ea6:	e02c      	b.n	8008f02 <logger+0x346>
 8008ea8:	20000b94 	.word	0x20000b94
 8008eac:	20001e90 	.word	0x20001e90
 8008eb0:	200000b8 	.word	0x200000b8
 8008eb4:	20000bca 	.word	0x20000bca
 8008eb8:	20001fdc 	.word	0x20001fdc
 8008ebc:	20001f54 	.word	0x20001f54
 8008ec0:	20000c38 	.word	0x20000c38
 8008ec4:	20001e3c 	.word	0x20001e3c
 8008ec8:	20001f78 	.word	0x20001f78
 8008ecc:	20001e3e 	.word	0x20001e3e
 8008ed0:	20000bac 	.word	0x20000bac
 8008ed4:	20000bad 	.word	0x20000bad
 8008ed8:	20001f64 	.word	0x20001f64
 8008edc:	20000bae 	.word	0x20000bae
 8008ee0:	20000baf 	.word	0x20000baf
 8008ee4:	20000e30 	.word	0x20000e30
 8008ee8:	20001f7c 	.word	0x20001f7c
 8008eec:	20000ba0 	.word	0x20000ba0
 8008ef0:	20001f8c 	.word	0x20001f8c
 8008ef4:	20001f90 	.word	0x20001f90
 8008ef8:	20001fa0 	.word	0x20001fa0
 8008efc:	20001fa4 	.word	0x20001fa4
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 8008f00:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 8008f02:	4bb7      	ldr	r3, [pc, #732]	@ (80091e0 <logger+0x624>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d14c      	bne.n	8008fa4 <logger+0x3e8>
			//goto alarm_event;//	jrne	alarm_event
			goto wifi_event;
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 8008f0a:	4bb6      	ldr	r3, [pc, #728]	@ (80091e4 <logger+0x628>)
 8008f0c:	78db      	ldrb	r3, [r3, #3]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d04a      	beq.n	8008fa8 <logger+0x3ec>
			goto power_event_end;
 8008f12:	46c0      	nop			@ (mov r8, r8)
//		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
//		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
//		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
//		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio

		BloqEventPwrOn[EPo_timeInit_4] = reeTimeUnix1;		//ldw	X,eeTimeUnix1
 8008f14:	4bb4      	ldr	r3, [pc, #720]	@ (80091e8 <logger+0x62c>)
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	4bb4      	ldr	r3, [pc, #720]	@ (80091ec <logger+0x630>)
 8008f1a:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = reeTimeUnix2;		//ldw	EPo_timeInit_HW,X
 8008f1c:	4bb4      	ldr	r3, [pc, #720]	@ (80091f0 <logger+0x634>)
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	4bb2      	ldr	r3, [pc, #712]	@ (80091ec <logger+0x630>)
 8008f22:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = reeTimeUnix3;		//ldw	X,eeTimeUnix3
 8008f24:	4bb3      	ldr	r3, [pc, #716]	@ (80091f4 <logger+0x638>)
 8008f26:	781a      	ldrb	r2, [r3, #0]
 8008f28:	4bb0      	ldr	r3, [pc, #704]	@ (80091ec <logger+0x630>)
 8008f2a:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = reeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008f2c:	4bb2      	ldr	r3, [pc, #712]	@ (80091f8 <logger+0x63c>)
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	4bae      	ldr	r3, [pc, #696]	@ (80091ec <logger+0x630>)
 8008f32:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 8008f34:	4bad      	ldr	r3, [pc, #692]	@ (80091ec <logger+0x630>)
 8008f36:	2204      	movs	r2, #4
 8008f38:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 8008f3a:	4bb0      	ldr	r3, [pc, #704]	@ (80091fc <logger+0x640>)
 8008f3c:	781a      	ldrb	r2, [r3, #0]
 8008f3e:	4bab      	ldr	r3, [pc, #684]	@ (80091ec <logger+0x630>)
 8008f40:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 8008f42:	4baf      	ldr	r3, [pc, #700]	@ (8009200 <logger+0x644>)
 8008f44:	781a      	ldrb	r2, [r3, #0]
 8008f46:	4ba9      	ldr	r3, [pc, #676]	@ (80091ec <logger+0x630>)
 8008f48:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 8008f4a:	4bae      	ldr	r3, [pc, #696]	@ (8009204 <logger+0x648>)
 8008f4c:	781a      	ldrb	r2, [r3, #0]
 8008f4e:	4ba7      	ldr	r3, [pc, #668]	@ (80091ec <logger+0x630>)
 8008f50:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008f52:	4bad      	ldr	r3, [pc, #692]	@ (8009208 <logger+0x64c>)
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	4ba3      	ldr	r3, [pc, #652]	@ (80091ec <logger+0x630>)
 8008f5e:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 8008f60:	4ba9      	ldr	r3, [pc, #676]	@ (8009208 <logger+0x64c>)
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	4ba1      	ldr	r3, [pc, #644]	@ (80091ec <logger+0x630>)
 8008f68:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008f6a:	4ba8      	ldr	r3, [pc, #672]	@ (800920c <logger+0x650>)
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	4b9d      	ldr	r3, [pc, #628]	@ (80091ec <logger+0x630>)
 8008f76:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 8008f78:	4ba4      	ldr	r3, [pc, #656]	@ (800920c <logger+0x650>)
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	4b9b      	ldr	r3, [pc, #620]	@ (80091ec <logger+0x630>)
 8008f80:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 8008f82:	4ba3      	ldr	r3, [pc, #652]	@ (8009210 <logger+0x654>)
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	4b99      	ldr	r3, [pc, #612]	@ (80091ec <logger+0x630>)
 8008f88:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008f8a:	4ba2      	ldr	r3, [pc, #648]	@ (8009214 <logger+0x658>)
 8008f8c:	781a      	ldrb	r2, [r3, #0]
 8008f8e:	4b97      	ldr	r3, [pc, #604]	@ (80091ec <logger+0x630>)
 8008f90:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 8008f92:	4ba1      	ldr	r3, [pc, #644]	@ (8009218 <logger+0x65c>)
 8008f94:	4aa1      	ldr	r2, [pc, #644]	@ (800921c <logger+0x660>)
 8008f96:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 8008f98:	f000 f97c 	bl	8009294 <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 8008f9c:	4b91      	ldr	r3, [pc, #580]	@ (80091e4 <logger+0x628>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	70da      	strb	r2, [r3, #3]
		goto wifi_event;		//jra		wifi_event;
 8008fa2:	e002      	b.n	8008faa <logger+0x3ee>
			goto wifi_event;
 8008fa4:	46c0      	nop			@ (mov r8, r8)
 8008fa6:	e000      	b.n	8008faa <logger+0x3ee>
		goto wifi_event;
 8008fa8:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
//;										Evento de wifi
//;----------------------------------------------------------
wifi_event:
		if(flagsEvent[4])		// btjt	flagsEvent,#4,ask_wfE_end;	/ ya había iniciado evento wifi? Sí, checa si ya se termina evento
 8008faa:	4b8e      	ldr	r3, [pc, #568]	@ (80091e4 <logger+0x628>)
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d133      	bne.n	800901a <logger+0x45e>
			goto ask_wfE_end;
ask_wfE_start:
 8008fb2:	46c0      	nop			@ (mov r8, r8)
		if(!flagsTxControl[f_statWIFI])// btjf	flagsTxControl,#f_statWIFI,wifi_event_start; Hubo desconexión con servidor Wifi ? Si, inicia evento falla wifi
 8008fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8009220 <logger+0x664>)
 8008fb6:	789b      	ldrb	r3, [r3, #2]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	4053      	eors	r3, r2
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d05a      	beq.n	8009078 <logger+0x4bc>
			goto wifi_event_start;
 8008fc2:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi

wifi_event_start:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeInit_4] = highByte(timeSeconds_HW);	//ldw		WF_timeInit_HW,X
 8008fc4:	4b90      	ldr	r3, [pc, #576]	@ (8009208 <logger+0x64c>)
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	0a1b      	lsrs	r3, r3, #8
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	4b95      	ldr	r3, [pc, #596]	@ (8009224 <logger+0x668>)
 8008fd0:	711a      	strb	r2, [r3, #4]
		BloqEventWiFiEx[WF_timeInit_3] = lowByte(timeSeconds_HW);
 8008fd2:	4b8d      	ldr	r3, [pc, #564]	@ (8009208 <logger+0x64c>)
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	4b92      	ldr	r3, [pc, #584]	@ (8009224 <logger+0x668>)
 8008fda:	715a      	strb	r2, [r3, #5]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeInit_2] = highByte(timeSeconds_LW);//ldw		WF_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008fdc:	4b8b      	ldr	r3, [pc, #556]	@ (800920c <logger+0x650>)
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	0a1b      	lsrs	r3, r3, #8
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	4b8f      	ldr	r3, [pc, #572]	@ (8009224 <logger+0x668>)
 8008fe8:	719a      	strb	r2, [r3, #6]
		BloqEventWiFiEx[WF_timeInit_1] = lowByte(timeSeconds_LW);
 8008fea:	4b88      	ldr	r3, [pc, #544]	@ (800920c <logger+0x650>)
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8009224 <logger+0x668>)
 8008ff2:	71da      	strb	r2, [r3, #7]

		BloqEventWiFiEx[WF_eventType] = 5;//mov		WF_eventType,#5;				/ carga el tipo de evento (5 para wifi)
 8008ff4:	4b8b      	ldr	r3, [pc, #556]	@ (8009224 <logger+0x668>)
 8008ff6:	2205      	movs	r2, #5
 8008ff8:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventWiFiEx[WF_tempAmbInit_H] = tdevl;		//ldw		WF_tempAmbInit,x;				/ carga temperatura ambiente
 8008ffa:	4b80      	ldr	r3, [pc, #512]	@ (80091fc <logger+0x640>)
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	4b89      	ldr	r3, [pc, #548]	@ (8009224 <logger+0x668>)
 8009000:	735a      	strb	r2, [r3, #13]
		BloqEventWiFiEx[WF_tempAmbInit_L] = tdevf;
 8009002:	4b7f      	ldr	r3, [pc, #508]	@ (8009200 <logger+0x644>)
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	4b87      	ldr	r3, [pc, #540]	@ (8009224 <logger+0x668>)
 8009008:	739a      	strb	r2, [r3, #14]
		BloqEventWiFiEx[WF_voltInit] = voltl;		//mov		WF_voltInit,voltl; /carga voltaje
 800900a:	4b7e      	ldr	r3, [pc, #504]	@ (8009204 <logger+0x648>)
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	4b85      	ldr	r3, [pc, #532]	@ (8009224 <logger+0x668>)
 8009010:	745a      	strb	r2, [r3, #17]
		flagsEvent[4] = 1;			//bset	flagsEvent,#4;					/ indica que el evento wifi ya inició
 8009012:	4b74      	ldr	r3, [pc, #464]	@ (80091e4 <logger+0x628>)
 8009014:	2201      	movs	r2, #1
 8009016:	711a      	strb	r2, [r3, #4]
		goto alarm_event;			//jp		alarm_event;						/ continúa
 8009018:	e031      	b.n	800907e <logger+0x4c2>
			goto ask_wfE_end;
 800901a:	46c0      	nop			@ (mov r8, r8)
ask_wfE_end:
		if(flagsTxControl[f_statWIFI])	//btjt	flagsTxControl,#f_statWIFI,wifi_event_end; Volvió la conexión wifi ? Sí, termina evento falla de wifi
 800901c:	4b80      	ldr	r3, [pc, #512]	@ (8009220 <logger+0x664>)
 800901e:	789b      	ldrb	r3, [r3, #2]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d02b      	beq.n	800907c <logger+0x4c0>
			goto wifi_event_end;
 8009024:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
wifi_event_end:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		WF_timeEnd_HW,X
 8009026:	4b78      	ldr	r3, [pc, #480]	@ (8009208 <logger+0x64c>)
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	0a1b      	lsrs	r3, r3, #8
 800902c:	b29b      	uxth	r3, r3
 800902e:	b2da      	uxtb	r2, r3
 8009030:	4b7c      	ldr	r3, [pc, #496]	@ (8009224 <logger+0x668>)
 8009032:	721a      	strb	r2, [r3, #8]
		BloqEventWiFiEx[WF_timeEnd_3] = lowByte(timeSeconds_HW);
 8009034:	4b74      	ldr	r3, [pc, #464]	@ (8009208 <logger+0x64c>)
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b2da      	uxtb	r2, r3
 800903a:	4b7a      	ldr	r3, [pc, #488]	@ (8009224 <logger+0x668>)
 800903c:	725a      	strb	r2, [r3, #9]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeEnd_2] = highByte(timeSeconds_LW);//ldw		WF_timeEnd_LW,X;				/ guarda el tiempo final
 800903e:	4b73      	ldr	r3, [pc, #460]	@ (800920c <logger+0x650>)
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	b2da      	uxtb	r2, r3
 8009048:	4b76      	ldr	r3, [pc, #472]	@ (8009224 <logger+0x668>)
 800904a:	729a      	strb	r2, [r3, #10]
		BloqEventWiFiEx[WF_timeEnd_1] = lowByte(timeSeconds_LW);
 800904c:	4b6f      	ldr	r3, [pc, #444]	@ (800920c <logger+0x650>)
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b2da      	uxtb	r2, r3
 8009052:	4b74      	ldr	r3, [pc, #464]	@ (8009224 <logger+0x668>)
 8009054:	72da      	strb	r2, [r3, #11]
		//ldw		X,teval
		BloqEventWiFiEx[WF_tempEvaEnd_H] = teval;//ldw		WF_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8009056:	4b6e      	ldr	r3, [pc, #440]	@ (8009210 <logger+0x654>)
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	4b72      	ldr	r3, [pc, #456]	@ (8009224 <logger+0x668>)
 800905c:	73da      	strb	r2, [r3, #15]
		BloqEventWiFiEx[WF_tempEvaEnd_L] = tevaf;
 800905e:	4b6d      	ldr	r3, [pc, #436]	@ (8009214 <logger+0x658>)
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	4b70      	ldr	r3, [pc, #448]	@ (8009224 <logger+0x668>)
 8009064:	741a      	strb	r2, [r3, #16]
		//ldw		X,#WF_timeInit_HW
		dirDataLoad = &BloqEventWiFiEx[WF_timeInit_4];//ldw		dirDataLoad,X;					/ indica el inicio del bloque de datos a cargar (evento wifi)
 8009066:	4b6c      	ldr	r3, [pc, #432]	@ (8009218 <logger+0x65c>)
 8009068:	4a6f      	ldr	r2, [pc, #444]	@ (8009228 <logger+0x66c>)
 800906a:	601a      	str	r2, [r3, #0]
		load_event();//call	load_event
 800906c:	f000 f912 	bl	8009294 <load_event>

		flagsEvent[4] = 0;//bres	flagsEvent,#4;
 8009070:	4b5c      	ldr	r3, [pc, #368]	@ (80091e4 <logger+0x628>)
 8009072:	2200      	movs	r2, #0
 8009074:	711a      	strb	r2, [r3, #4]

		goto alarm_event;//jra alarm_event;	/continúa
 8009076:	e002      	b.n	800907e <logger+0x4c2>
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi
 8009078:	46c0      	nop			@ (mov r8, r8)
 800907a:	e000      	b.n	800907e <logger+0x4c2>
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
 800907c:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 800907e:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsWIFI[f_timeLoggerSend])//btjt		flagsWIFI,#f_timeLoggerSend,jmp_fin_logger; No loggear hasta terminar Tx
 8009080:	4b6a      	ldr	r3, [pc, #424]	@ (800922c <logger+0x670>)
 8009082:	785b      	ldrb	r3, [r3, #1]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d108      	bne.n	800909a <logger+0x4de>
			goto jmp_fin_logger;
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 8009088:	4b69      	ldr	r3, [pc, #420]	@ (8009230 <logger+0x674>)
 800908a:	795b      	ldrb	r3, [r3, #5]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d106      	bne.n	800909e <logger+0x4e2>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 8009090:	4b68      	ldr	r3, [pc, #416]	@ (8009234 <logger+0x678>)
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <logger+0x4e6>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 8009098:	e002      	b.n	80090a0 <logger+0x4e4>
			goto jmp_fin_logger;
 800909a:	46c0      	nop			@ (mov r8, r8)
 800909c:	e09d      	b.n	80091da <logger+0x61e>
			goto jmp_fin_logger;
 800909e:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 80090a0:	e09b      	b.n	80091da <logger+0x61e>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 80090a2:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 80090a4:	4b64      	ldr	r3, [pc, #400]	@ (8009238 <logger+0x67c>)
 80090a6:	2251      	movs	r2, #81	@ 0x51
 80090a8:	5c9b      	ldrb	r3, [r3, r2]
 80090aa:	001a      	movs	r2, r3
 80090ac:	233c      	movs	r3, #60	@ 0x3c
 80090ae:	4353      	muls	r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	4b60      	ldr	r3, [pc, #384]	@ (8009234 <logger+0x678>)
 80090b4:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG
        //cntLogger_H = 30;  // valor de prueba a cada 10 segundos tomar muestras
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 80090b6:	4b54      	ldr	r3, [pc, #336]	@ (8009208 <logger+0x64c>)
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	0a1b      	lsrs	r3, r3, #8
 80090bc:	b29b      	uxth	r3, r3
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	4b5e      	ldr	r3, [pc, #376]	@ (800923c <logger+0x680>)
 80090c2:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 80090c4:	4b50      	ldr	r3, [pc, #320]	@ (8009208 <logger+0x64c>)
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	4b5c      	ldr	r3, [pc, #368]	@ (800923c <logger+0x680>)
 80090cc:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 80090ce:	4b4f      	ldr	r3, [pc, #316]	@ (800920c <logger+0x650>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	4b58      	ldr	r3, [pc, #352]	@ (800923c <logger+0x680>)
 80090da:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 80090dc:	4b4b      	ldr	r3, [pc, #300]	@ (800920c <logger+0x650>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4b56      	ldr	r3, [pc, #344]	@ (800923c <logger+0x680>)
 80090e4:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 80090e6:	4b45      	ldr	r3, [pc, #276]	@ (80091fc <logger+0x640>)
 80090e8:	781a      	ldrb	r2, [r3, #0]
 80090ea:	4b54      	ldr	r3, [pc, #336]	@ (800923c <logger+0x680>)
 80090ec:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 80090ee:	4b44      	ldr	r3, [pc, #272]	@ (8009200 <logger+0x644>)
 80090f0:	781a      	ldrb	r2, [r3, #0]
 80090f2:	4b52      	ldr	r3, [pc, #328]	@ (800923c <logger+0x680>)
 80090f4:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 80090f6:	4b46      	ldr	r3, [pc, #280]	@ (8009210 <logger+0x654>)
 80090f8:	781a      	ldrb	r2, [r3, #0]
 80090fa:	4b50      	ldr	r3, [pc, #320]	@ (800923c <logger+0x680>)
 80090fc:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 80090fe:	4b45      	ldr	r3, [pc, #276]	@ (8009214 <logger+0x658>)
 8009100:	781a      	ldrb	r2, [r3, #0]
 8009102:	4b4e      	ldr	r3, [pc, #312]	@ (800923c <logger+0x680>)
 8009104:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 8009106:	4b3f      	ldr	r3, [pc, #252]	@ (8009204 <logger+0x648>)
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	4b4c      	ldr	r3, [pc, #304]	@ (800923c <logger+0x680>)
 800910c:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 800910e:	4b4c      	ldr	r3, [pc, #304]	@ (8009240 <logger+0x684>)
 8009110:	4a4c      	ldr	r2, [pc, #304]	@ (8009244 <logger+0x688>)
 8009112:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 8009114:	4b40      	ldr	r3, [pc, #256]	@ (8009218 <logger+0x65c>)
 8009116:	4a49      	ldr	r2, [pc, #292]	@ (800923c <logger+0x680>)
 8009118:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 800911a:	4b4b      	ldr	r3, [pc, #300]	@ (8009248 <logger+0x68c>)
 800911c:	4a4b      	ldr	r2, [pc, #300]	@ (800924c <logger+0x690>)
 800911e:	601a      	str	r2, [r3, #0]

         // CGM 16/04/2025;  se agrega la direccion del buffer de la Pagina del logger de Datos.
         dirBufferPage = &bufferPageDATA[0];
 8009120:	4b4b      	ldr	r3, [pc, #300]	@ (8009250 <logger+0x694>)
 8009122:	4a4c      	ldr	r2, [pc, #304]	@ (8009254 <logger+0x698>)
 8009124:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 8009126:	4b4c      	ldr	r3, [pc, #304]	@ (8009258 <logger+0x69c>)
 8009128:	2260      	movs	r2, #96	@ 0x60
 800912a:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 800912c:	4b4b      	ldr	r3, [pc, #300]	@ (800925c <logger+0x6a0>)
 800912e:	2209      	movs	r2, #9
 8009130:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 8009132:	4b4b      	ldr	r3, [pc, #300]	@ (8009260 <logger+0x6a4>)
 8009134:	781a      	ldrb	r2, [r3, #0]
 8009136:	4b4b      	ldr	r3, [pc, #300]	@ (8009264 <logger+0x6a8>)
 8009138:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 800913a:	4b4b      	ldr	r3, [pc, #300]	@ (8009268 <logger+0x6ac>)
 800913c:	781a      	ldrb	r2, [r3, #0]
 800913e:	4b4b      	ldr	r3, [pc, #300]	@ (800926c <logger+0x6b0>)
 8009140:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 8009142:	4b46      	ldr	r3, [pc, #280]	@ (800925c <logger+0x6a0>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	0019      	movs	r1, r3
 8009148:	2080      	movs	r0, #128	@ 0x80
 800914a:	f7f7 f86f 	bl	800022c <__divsi3>
 800914e:	0003      	movs	r3, r0
 8009150:	b2da      	uxtb	r2, r3
 8009152:	4b47      	ldr	r3, [pc, #284]	@ (8009270 <logger+0x6b4>)
 8009154:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 8009156:	4b46      	ldr	r3, [pc, #280]	@ (8009270 <logger+0x6b4>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	4a40      	ldr	r2, [pc, #256]	@ (800925c <logger+0x6a0>)
 800915c:	7812      	ldrb	r2, [r2, #0]
 800915e:	4353      	muls	r3, r2
 8009160:	b2da      	uxtb	r2, r3
 8009162:	4b44      	ldr	r3, [pc, #272]	@ (8009274 <logger+0x6b8>)
 8009164:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         if(cntRegDATA>0)
 8009166:	4b44      	ldr	r3, [pc, #272]	@ (8009278 <logger+0x6bc>)
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <logger+0x5be>
        	 cntRegDATA++;	//incw	X
 800916e:	4b42      	ldr	r3, [pc, #264]	@ (8009278 <logger+0x6bc>)
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	b29a      	uxth	r2, r3
 8009176:	4b40      	ldr	r3, [pc, #256]	@ (8009278 <logger+0x6bc>)
 8009178:	801a      	strh	r2, [r3, #0]

		//;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
		//cpw		X,#1343
		if(cntRegDATA<1343)//jrult	no_clrREG_01
 800917a:	4b3f      	ldr	r3, [pc, #252]	@ (8009278 <logger+0x6bc>)
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	4a3f      	ldr	r2, [pc, #252]	@ (800927c <logger+0x6c0>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d903      	bls.n	800918c <logger+0x5d0>
			goto no_clrREG_01;
		cntRegDATA = 1343;// ldw		X,#1343
 8009184:	4b3c      	ldr	r3, [pc, #240]	@ (8009278 <logger+0x6bc>)
 8009186:	4a3e      	ldr	r2, [pc, #248]	@ (8009280 <logger+0x6c4>)
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	e000      	b.n	800918e <logger+0x5d2>
			goto no_clrREG_01;
 800918c:	46c0      	nop			@ (mov r8, r8)
no_clrREG_01:


         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 800918e:	4b3a      	ldr	r3, [pc, #232]	@ (8009278 <logger+0x6bc>)
 8009190:	881a      	ldrh	r2, [r3, #0]
 8009192:	4b3c      	ldr	r3, [pc, #240]	@ (8009284 <logger+0x6c8>)
 8009194:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 8009196:	4b3c      	ldr	r3, [pc, #240]	@ (8009288 <logger+0x6cc>)
 8009198:	4a3c      	ldr	r2, [pc, #240]	@ (800928c <logger+0x6d0>)
 800919a:	601a      	str	r2, [r3, #0]
 		 reeCntRegDATA = cntReg;
 800919c:	4b39      	ldr	r3, [pc, #228]	@ (8009284 <logger+0x6c8>)
 800919e:	881a      	ldrh	r2, [r3, #0]
 80091a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009290 <logger+0x6d4>)
 80091a2:	801a      	strh	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 80091a4:	f000 f904 	bl	80093b0 <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 80091a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009264 <logger+0x6a8>)
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	4b2c      	ldr	r3, [pc, #176]	@ (8009260 <logger+0x6a4>)
 80091ae:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 80091b0:	4b2e      	ldr	r3, [pc, #184]	@ (800926c <logger+0x6b0>)
 80091b2:	781a      	ldrb	r2, [r3, #0]
 80091b4:	4b2c      	ldr	r3, [pc, #176]	@ (8009268 <logger+0x6ac>)
 80091b6:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 80091b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009230 <logger+0x674>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2201      	movs	r2, #1
 80091be:	4053      	eors	r3, r2
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <logger+0x618>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 80091c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009230 <logger+0x674>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 80091cc:	4b18      	ldr	r3, [pc, #96]	@ (8009230 <logger+0x674>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 80091d2:	e002      	b.n	80091da <logger+0x61e>
        	 	 goto noFullLoggerDATA;
 80091d4:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 80091d6:	e000      	b.n	80091da <logger+0x61e>
		goto fin_logger; //jp fin_logger
 80091d8:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	2000212a 	.word	0x2000212a
 80091e4:	20001f54 	.word	0x20001f54
 80091e8:	20000d09 	.word	0x20000d09
 80091ec:	20001fb4 	.word	0x20001fb4
 80091f0:	20000d0a 	.word	0x20000d0a
 80091f4:	20000d0b 	.word	0x20000d0b
 80091f8:	20000d0c 	.word	0x20000d0c
 80091fc:	20000bac 	.word	0x20000bac
 8009200:	20000bad 	.word	0x20000bad
 8009204:	20000bca 	.word	0x20000bca
 8009208:	20001e3c 	.word	0x20001e3c
 800920c:	20001e3e 	.word	0x20001e3e
 8009210:	20000bae 	.word	0x20000bae
 8009214:	20000baf 	.word	0x20000baf
 8009218:	20000e30 	.word	0x20000e30
 800921c:	20001fb8 	.word	0x20001fb8
 8009220:	20002178 	.word	0x20002178
 8009224:	2000218c 	.word	0x2000218c
 8009228:	20002190 	.word	0x20002190
 800922c:	20001fdc 	.word	0x20001fdc
 8009230:	20001e90 	.word	0x20001e90
 8009234:	20000e20 	.word	0x20000e20
 8009238:	200000b8 	.word	0x200000b8
 800923c:	20001e40 	.word	0x20001e40
 8009240:	20000e2c 	.word	0x20000e2c
 8009244:	20000d14 	.word	0x20000d14
 8009248:	20000e28 	.word	0x20000e28
 800924c:	0803c000 	.word	0x0803c000
 8009250:	20001e38 	.word	0x20001e38
 8009254:	20000e38 	.word	0x20000e38
 8009258:	20000e25 	.word	0x20000e25
 800925c:	20000e26 	.word	0x20000e26
 8009260:	20000e35 	.word	0x20000e35
 8009264:	20000e22 	.word	0x20000e22
 8009268:	20000e34 	.word	0x20000e34
 800926c:	20000e23 	.word	0x20000e23
 8009270:	200008d0 	.word	0x200008d0
 8009274:	20000b53 	.word	0x20000b53
 8009278:	200020c6 	.word	0x200020c6
 800927c:	0000053e 	.word	0x0000053e
 8009280:	0000053f 	.word	0x0000053f
 8009284:	200020ca 	.word	0x200020ca
 8009288:	200020cc 	.word	0x200020cc
 800928c:	0803f810 	.word	0x0803f810
 8009290:	20000d0e 	.word	0x20000d0e

08009294 <load_event>:
void load_event(){
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 8009298:	4b2f      	ldr	r3, [pc, #188]	@ (8009358 <load_event+0xc4>)
 800929a:	4a30      	ldr	r2, [pc, #192]	@ (800935c <load_event+0xc8>)
 800929c:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 800929e:	4b30      	ldr	r3, [pc, #192]	@ (8009360 <load_event+0xcc>)
 80092a0:	4a30      	ldr	r2, [pc, #192]	@ (8009364 <load_event+0xd0>)
 80092a2:	601a      	str	r2, [r3, #0]

		// CGM 16/04/2025;  se agrega la direccion del buffer de la Pagina del logger de EVENTOS.
		dirBufferPage = &bufferPageEVENT[0];
 80092a4:	4b30      	ldr	r3, [pc, #192]	@ (8009368 <load_event+0xd4>)
 80092a6:	4a31      	ldr	r2, [pc, #196]	@ (800936c <load_event+0xd8>)
 80092a8:	601a      	str	r2, [r3, #0]

		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 80092aa:	4b31      	ldr	r3, [pc, #196]	@ (8009370 <load_event+0xdc>)
 80092ac:	22a0      	movs	r2, #160	@ 0xa0
 80092ae:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 80092b0:	4b30      	ldr	r3, [pc, #192]	@ (8009374 <load_event+0xe0>)
 80092b2:	220e      	movs	r2, #14
 80092b4:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 80092b6:	4b30      	ldr	r3, [pc, #192]	@ (8009378 <load_event+0xe4>)
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	4b30      	ldr	r3, [pc, #192]	@ (800937c <load_event+0xe8>)
 80092bc:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 80092be:	4b30      	ldr	r3, [pc, #192]	@ (8009380 <load_event+0xec>)
 80092c0:	781a      	ldrb	r2, [r3, #0]
 80092c2:	4b30      	ldr	r3, [pc, #192]	@ (8009384 <load_event+0xf0>)
 80092c4:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 80092c6:	4b2b      	ldr	r3, [pc, #172]	@ (8009374 <load_event+0xe0>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	0019      	movs	r1, r3
 80092cc:	2080      	movs	r0, #128	@ 0x80
 80092ce:	f7f6 ffad 	bl	800022c <__divsi3>
 80092d2:	0003      	movs	r3, r0
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009388 <load_event+0xf4>)
 80092d8:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 80092da:	4b2b      	ldr	r3, [pc, #172]	@ (8009388 <load_event+0xf4>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	4a25      	ldr	r2, [pc, #148]	@ (8009374 <load_event+0xe0>)
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	4353      	muls	r3, r2
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	4b29      	ldr	r3, [pc, #164]	@ (800938c <load_event+0xf8>)
 80092e8:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 80092ea:	4b29      	ldr	r3, [pc, #164]	@ (8009390 <load_event+0xfc>)
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	3301      	adds	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	4b27      	ldr	r3, [pc, #156]	@ (8009390 <load_event+0xfc>)
 80092f4:	801a      	strh	r2, [r3, #0]
//		;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
//		cpw		X,#1439
//		jrult	no_clrREG_02
//		;clrw	X
//		ldw		X,#1439
		if(cntRegEVENT<1439)
 80092f6:	4b26      	ldr	r3, [pc, #152]	@ (8009390 <load_event+0xfc>)
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	4a26      	ldr	r2, [pc, #152]	@ (8009394 <load_event+0x100>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d903      	bls.n	8009308 <load_event+0x74>
			goto no_clrREG_02;
		cntRegEVENT = 1439;
 8009300:	4b23      	ldr	r3, [pc, #140]	@ (8009390 <load_event+0xfc>)
 8009302:	4a25      	ldr	r2, [pc, #148]	@ (8009398 <load_event+0x104>)
 8009304:	801a      	strh	r2, [r3, #0]
 8009306:	e000      	b.n	800930a <load_event+0x76>
			goto no_clrREG_02;
 8009308:	46c0      	nop			@ (mov r8, r8)
no_clrREG_02:

		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800930a:	4b21      	ldr	r3, [pc, #132]	@ (8009390 <load_event+0xfc>)
 800930c:	881a      	ldrh	r2, [r3, #0]
 800930e:	4b23      	ldr	r3, [pc, #140]	@ (800939c <load_event+0x108>)
 8009310:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 8009312:	4b23      	ldr	r3, [pc, #140]	@ (80093a0 <load_event+0x10c>)
 8009314:	4a23      	ldr	r2, [pc, #140]	@ (80093a4 <load_event+0x110>)
 8009316:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 8009318:	4b20      	ldr	r3, [pc, #128]	@ (800939c <load_event+0x108>)
 800931a:	881a      	ldrh	r2, [r3, #0]
 800931c:	4b22      	ldr	r3, [pc, #136]	@ (80093a8 <load_event+0x114>)
 800931e:	801a      	strh	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 8009320:	f000 f846 	bl	80093b0 <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 8009324:	4b15      	ldr	r3, [pc, #84]	@ (800937c <load_event+0xe8>)
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	4b13      	ldr	r3, [pc, #76]	@ (8009378 <load_event+0xe4>)
 800932a:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 800932c:	4b15      	ldr	r3, [pc, #84]	@ (8009384 <load_event+0xf0>)
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	4b13      	ldr	r3, [pc, #76]	@ (8009380 <load_event+0xec>)
 8009332:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 8009334:	4b1d      	ldr	r3, [pc, #116]	@ (80093ac <load_event+0x118>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2201      	movs	r2, #1
 800933a:	4053      	eors	r3, r2
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <load_event+0xbc>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 8009342:	4b1a      	ldr	r3, [pc, #104]	@ (80093ac <load_event+0x118>)
 8009344:	2200      	movs	r2, #0
 8009346:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 8009348:	4b18      	ldr	r3, [pc, #96]	@ (80093ac <load_event+0x118>)
 800934a:	2201      	movs	r2, #1
 800934c:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 800934e:	e000      	b.n	8009352 <load_event+0xbe>
			goto noFullLoggerEVENT;
 8009350:	46c0      	nop			@ (mov r8, r8)
}
 8009352:	46c0      	nop			@ (mov r8, r8)
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20000e2c 	.word	0x20000e2c
 800935c:	20000d94 	.word	0x20000d94
 8009360:	20000e28 	.word	0x20000e28
 8009364:	08037000 	.word	0x08037000
 8009368:	20001e38 	.word	0x20001e38
 800936c:	20001638 	.word	0x20001638
 8009370:	20000e25 	.word	0x20000e25
 8009374:	20000e26 	.word	0x20000e26
 8009378:	20000e37 	.word	0x20000e37
 800937c:	20000e22 	.word	0x20000e22
 8009380:	20000e36 	.word	0x20000e36
 8009384:	20000e23 	.word	0x20000e23
 8009388:	200008d0 	.word	0x200008d0
 800938c:	20000b53 	.word	0x20000b53
 8009390:	200020c8 	.word	0x200020c8
 8009394:	0000059e 	.word	0x0000059e
 8009398:	0000059f 	.word	0x0000059f
 800939c:	200020ca 	.word	0x200020ca
 80093a0:	200020cc 	.word	0x200020cc
 80093a4:	0803f812 	.word	0x0803f812
 80093a8:	20000d10 	.word	0x20000d10
 80093ac:	20001e90 	.word	0x20001e90

080093b0 <load_buffer_logger>:

void load_buffer_logger(){
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 80093b6:	4b52      	ldr	r3, [pc, #328]	@ (8009500 <load_buffer_logger+0x150>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 80093bc:	4b51      	ldr	r3, [pc, #324]	@ (8009504 <load_buffer_logger+0x154>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 80093c2:	4b51      	ldr	r3, [pc, #324]	@ (8009508 <load_buffer_logger+0x158>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	001a      	movs	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	189b      	adds	r3, r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 80093ce:	4b4f      	ldr	r3, [pc, #316]	@ (800950c <load_buffer_logger+0x15c>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	781a      	ldrb	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 80093e8:	4b48      	ldr	r3, [pc, #288]	@ (800950c <load_buffer_logger+0x15c>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	3301      	adds	r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	4b46      	ldr	r3, [pc, #280]	@ (800950c <load_buffer_logger+0x15c>)
 80093f2:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 80093f4:	4b44      	ldr	r3, [pc, #272]	@ (8009508 <load_buffer_logger+0x158>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	4b42      	ldr	r3, [pc, #264]	@ (8009508 <load_buffer_logger+0x158>)
 80093fe:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 8009400:	4b41      	ldr	r3, [pc, #260]	@ (8009508 <load_buffer_logger+0x158>)
 8009402:	781a      	ldrb	r2, [r3, #0]
 8009404:	4b42      	ldr	r3, [pc, #264]	@ (8009510 <load_buffer_logger+0x160>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d36c      	bcc.n	80094e6 <load_buffer_logger+0x136>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 800940c:	4b3d      	ldr	r3, [pc, #244]	@ (8009504 <load_buffer_logger+0x154>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	337f      	adds	r3, #127	@ 0x7f
 8009412:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	4b3e      	ldr	r3, [pc, #248]	@ (8009514 <load_buffer_logger+0x164>)
 800941a:	701a      	strb	r2, [r3, #0]
		   //inc	A;	/ incrementa el byte
		// Parche CGM 29/04/2025
		// Se realiza este cambio para saber el ciclo del grabado del logger, este ciclo va de un valor de 0x1 a 0xFF y se graba en el byte 127  de cada bloque
		if(cntBlockFlash == 0){
 800941c:	4b3e      	ldr	r3, [pc, #248]	@ (8009518 <load_buffer_logger+0x168>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d111      	bne.n	8009448 <load_buffer_logger+0x98>
			STM8_A++;
 8009424:	4b3b      	ldr	r3, [pc, #236]	@ (8009514 <load_buffer_logger+0x164>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	3301      	adds	r3, #1
 800942a:	b2da      	uxtb	r2, r3
 800942c:	4b39      	ldr	r3, [pc, #228]	@ (8009514 <load_buffer_logger+0x164>)
 800942e:	701a      	strb	r2, [r3, #0]
			if(STM8_A == 0){
 8009430:	4b38      	ldr	r3, [pc, #224]	@ (8009514 <load_buffer_logger+0x164>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <load_buffer_logger+0x8e>
				STM8_A = 1;
 8009438:	4b36      	ldr	r3, [pc, #216]	@ (8009514 <load_buffer_logger+0x164>)
 800943a:	2201      	movs	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
			}
			*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
 800943e:	4b35      	ldr	r3, [pc, #212]	@ (8009514 <load_buffer_logger+0x164>)
 8009440:	781a      	ldrb	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e005      	b.n	8009454 <load_buffer_logger+0xa4>
		}
		else{
			*point_X = dirLogger[127];
 8009448:	4b34      	ldr	r3, [pc, #208]	@ (800951c <load_buffer_logger+0x16c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	227f      	movs	r2, #127	@ 0x7f
 800944e:	5c9a      	ldrb	r2, [r3, r2]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	701a      	strb	r2, [r3, #0]
		}
		//*point_X = 1;
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3b01      	subs	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 8009460:	4b2f      	ldr	r3, [pc, #188]	@ (8009520 <load_buffer_logger+0x170>)
 8009462:	22aa      	movs	r2, #170	@ 0xaa
 8009464:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 8009466:	4b2c      	ldr	r3, [pc, #176]	@ (8009518 <load_buffer_logger+0x168>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	01db      	lsls	r3, r3, #7
 800946c:	b29a      	uxth	r2, r3
 800946e:	4b2d      	ldr	r3, [pc, #180]	@ (8009524 <load_buffer_logger+0x174>)
 8009470:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 8009472:	4b2a      	ldr	r3, [pc, #168]	@ (800951c <load_buffer_logger+0x16c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a2b      	ldr	r2, [pc, #172]	@ (8009524 <load_buffer_logger+0x174>)
 8009478:	8812      	ldrh	r2, [r2, #0]
 800947a:	189a      	adds	r2, r3, r2
 800947c:	4b2a      	ldr	r3, [pc, #168]	@ (8009528 <load_buffer_logger+0x178>)
 800947e:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 8009480:	4b20      	ldr	r3, [pc, #128]	@ (8009504 <load_buffer_logger+0x154>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4b29      	ldr	r3, [pc, #164]	@ (800952c <load_buffer_logger+0x17c>)
 8009486:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	607b      	str	r3, [r7, #4]

		/*
		 * CGM 16/04/2025
		 * Se realiza una copia de la pagina actual en RAM y si existe un grabado de un bloquq de 128 bytes incompletos, se realizará un borrado de pagina y solo se escribiran  los bloques de 128 bytes que estan completos
		 */
		grabadoLoggerBloquesCompletos(dirPointer, dirBufferPage);
 800948c:	4b26      	ldr	r3, [pc, #152]	@ (8009528 <load_buffer_logger+0x178>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	4b27      	ldr	r3, [pc, #156]	@ (8009530 <load_buffer_logger+0x180>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	0019      	movs	r1, r3
 8009496:	0010      	movs	r0, r2
 8009498:	f7fd ffd6 	bl	8007448 <grabadoLoggerBloquesCompletos>

		GRABA_BLOCK();		//call	GRABA_BLOCK
 800949c:	f7fd fe08 	bl	80070b0 <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 80094a0:	f7fd fd1c 	bl	8006edc <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 80094a4:	f7fd fd08 	bl	8006eb8 <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 80094a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009518 <load_buffer_logger+0x168>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	4b19      	ldr	r3, [pc, #100]	@ (8009518 <load_buffer_logger+0x168>)
 80094b2:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 80094b4:	4b18      	ldr	r3, [pc, #96]	@ (8009518 <load_buffer_logger+0x168>)
 80094b6:	781a      	ldrb	r2, [r3, #0]
 80094b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009534 <load_buffer_logger+0x184>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d306      	bcc.n	80094ce <load_buffer_logger+0x11e>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 80094c0:	4b15      	ldr	r3, [pc, #84]	@ (8009518 <load_buffer_logger+0x168>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 80094c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009538 <load_buffer_logger+0x188>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	e000      	b.n	80094d0 <load_buffer_logger+0x120>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 80094ce:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 80094d0:	f7fd fcb8 	bl	8006e44 <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 80094d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009504 <load_buffer_logger+0x154>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 80094de:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <load_buffer_logger+0x158>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	701a      	strb	r2, [r3, #0]
 80094e4:	e000      	b.n	80094e8 <load_buffer_logger+0x138>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 80094e6:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 80094e8:	4b08      	ldr	r3, [pc, #32]	@ (800950c <load_buffer_logger+0x15c>)
 80094ea:	781a      	ldrb	r2, [r3, #0]
 80094ec:	4b13      	ldr	r3, [pc, #76]	@ (800953c <load_buffer_logger+0x18c>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d200      	bcs.n	80094f6 <load_buffer_logger+0x146>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 80094f4:	e76e      	b.n	80093d4 <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 80094f6:	46c0      	nop			@ (mov r8, r8)

}
 80094f8:	46c0      	nop			@ (mov r8, r8)
 80094fa:	46bd      	mov	sp, r7
 80094fc:	b004      	add	sp, #16
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20000e30 	.word	0x20000e30
 8009504:	20000e2c 	.word	0x20000e2c
 8009508:	20000e23 	.word	0x20000e23
 800950c:	20000e24 	.word	0x20000e24
 8009510:	20000b53 	.word	0x20000b53
 8009514:	200008d0 	.word	0x200008d0
 8009518:	20000e22 	.word	0x20000e22
 800951c:	20000e28 	.word	0x20000e28
 8009520:	20000e14 	.word	0x20000e14
 8009524:	200008d2 	.word	0x200008d2
 8009528:	20000e18 	.word	0x20000e18
 800952c:	20000e1c 	.word	0x20000e1c
 8009530:	20001e38 	.word	0x20001e38
 8009534:	20000e25 	.word	0x20000e25
 8009538:	20001e90 	.word	0x20001e90
 800953c:	20000e26 	.word	0x20000e26

08009540 <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0

    return timemilis;
 8009544:	4b02      	ldr	r3, [pc, #8]	@ (8009550 <millis+0x10>)
 8009546:	681b      	ldr	r3, [r3, #0]
}
 8009548:	0018      	movs	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	46c0      	nop			@ (mov r8, r8)
 8009550:	200008dc 	.word	0x200008dc

08009554 <reconfigura_perif>:

void reconfigura_perif(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
//	HAL_IWDG_Refresh(&hiwdg);
	initEEPROMEmulated(); // Init EEPROM Emulated
 8009558:	f7f9 f8ca 	bl	80026f0 <initEEPROMEmulated>

	HAL_Init();
 800955c:	f008 fcf7 	bl	8011f4e <HAL_Init>
	SystemClock_Config();
 8009560:	f000 fa78 	bl	8009a54 <SystemClock_Config>

	configura_perif_2();
 8009564:	f000 f80c 	bl	8009580 <configura_perif_2>

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8009568:	2007      	movs	r0, #7
 800956a:	f008 fe9c 	bl	80122a6 <HAL_NVIC_DisableIRQ>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800956e:	4b03      	ldr	r3, [pc, #12]	@ (800957c <reconfigura_perif+0x28>)
 8009570:	0018      	movs	r0, r3
 8009572:	f00e fb57 	bl	8017c24 <HAL_RTCEx_DeactivateWakeUpTimer>

}
 8009576:	46c0      	nop			@ (mov r8, r8)
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000514 	.word	0x20000514

08009580 <configura_perif_2>:

void configura_perif_2(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 8009584:	f001 f852 	bl	800a62c <MX_GPIO_Init>
	  MX_DMA_Init();
 8009588:	f001 f82a 	bl	800a5e0 <MX_DMA_Init>
	  MX_ADC1_Init();
 800958c:	f000 facc 	bl	8009b28 <MX_ADC1_Init>
	  MX_I2C1_Init();
 8009590:	f000 fd28 	bl	8009fe4 <MX_I2C1_Init>
	  MX_IWDG_Init();
 8009594:	f000 fd68 	bl	800a068 <MX_IWDG_Init>
	  MX_TIM3_Init();
 8009598:	f000 fec2 	bl	800a320 <MX_TIM3_Init>
	  MX_TIM1_Init();
 800959c:	f000 fdf2 	bl	800a184 <MX_TIM1_Init>
	  MX_TIM6_Init();
 80095a0:	f000 ff40 	bl	800a424 <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 80095a4:	f000 ff7e 	bl	800a4a4 <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 80095a8:	f000 ffca 	bl	800a540 <MX_USART4_UART_Init>


}
 80095ac:	46c0      	nop			@ (mov r8, r8)
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 80095b8:	4b21      	ldr	r3, [pc, #132]	@ (8009640 <check_Tick_1ms+0x8c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	4b20      	ldr	r3, [pc, #128]	@ (8009640 <check_Tick_1ms+0x8c>)
 80095c0:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)							// contador prescala 1ms =
 80095c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009640 <check_Tick_1ms+0x8c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	dd0f      	ble.n	80095ea <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 80095ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009640 <check_Tick_1ms+0x8c>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;							// Manuel, levanta flag 1ms
 80095d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009644 <check_Tick_1ms+0x90>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 80095d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009648 <check_Tick_1ms+0x94>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009648 <check_Tick_1ms+0x94>)
 80095de:	601a      	str	r2, [r3, #0]
						timemilis++;							// variable contadora de milisegundos
 80095e0:	4b1a      	ldr	r3, [pc, #104]	@ (800964c <check_Tick_1ms+0x98>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	4b19      	ldr	r3, [pc, #100]	@ (800964c <check_Tick_1ms+0x98>)
 80095e8:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)						// contador prescala 10ms
 80095ea:	4b17      	ldr	r3, [pc, #92]	@ (8009648 <check_Tick_1ms+0x94>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b09      	cmp	r3, #9
 80095f0:	dd0a      	ble.n	8009608 <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 80095f2:	4b15      	ldr	r3, [pc, #84]	@ (8009648 <check_Tick_1ms+0x94>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
						tick_10ms =1;							// flag base de tiempo 10ms
 80095f8:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <check_Tick_1ms+0x9c>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 80095fe:	4b15      	ldr	r3, [pc, #84]	@ (8009654 <check_Tick_1ms+0xa0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	4b13      	ldr	r3, [pc, #76]	@ (8009654 <check_Tick_1ms+0xa0>)
 8009606:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)						// contador prescala 100ms
 8009608:	4b12      	ldr	r3, [pc, #72]	@ (8009654 <check_Tick_1ms+0xa0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b09      	cmp	r3, #9
 800960e:	dd0a      	ble.n	8009626 <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 8009610:	4b10      	ldr	r3, [pc, #64]	@ (8009654 <check_Tick_1ms+0xa0>)
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
						tick_100ms =1;							// flag base de tiempo 100ms
 8009616:	4b10      	ldr	r3, [pc, #64]	@ (8009658 <check_Tick_1ms+0xa4>)
 8009618:	2201      	movs	r2, #1
 800961a:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 800961c:	4b0f      	ldr	r3, [pc, #60]	@ (800965c <check_Tick_1ms+0xa8>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	4b0e      	ldr	r3, [pc, #56]	@ (800965c <check_Tick_1ms+0xa8>)
 8009624:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)							// contador prescala 1s
 8009626:	4b0d      	ldr	r3, [pc, #52]	@ (800965c <check_Tick_1ms+0xa8>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b09      	cmp	r3, #9
 800962c:	dd05      	ble.n	800963a <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 800962e:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <check_Tick_1ms+0xa8>)
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 8009634:	4b0a      	ldr	r3, [pc, #40]	@ (8009660 <check_Tick_1ms+0xac>)
 8009636:	2201      	movs	r2, #1
 8009638:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 800963a:	46c0      	nop			@ (mov r8, r8)
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200008e0 	.word	0x200008e0
 8009644:	200008d4 	.word	0x200008d4
 8009648:	200008e4 	.word	0x200008e4
 800964c:	200008dc 	.word	0x200008dc
 8009650:	200008d5 	.word	0x200008d5
 8009654:	200008e8 	.word	0x200008e8
 8009658:	200008d6 	.word	0x200008d6
 800965c:	200008ec 	.word	0x200008ec
 8009660:	200008d7 	.word	0x200008d7

08009664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	//initEEPROMEmulated(); // Init EEPROM Emulated
	timeRstBLE = 1;
 800966a:	4bd2      	ldr	r3, [pc, #840]	@ (80099b4 <main+0x350>)
 800966c:	2201      	movs	r2, #1
 800966e:	701a      	strb	r2, [r3, #0]
	inicio ();
 8009670:	f7ff f894 	bl	800879c <inicio>

	ProcesosC = 6;
 8009674:	4bd0      	ldr	r3, [pc, #832]	@ (80099b8 <main+0x354>)
 8009676:	2206      	movs	r2, #6
 8009678:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800967a:	f008 fc68 	bl	8011f4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800967e:	f000 f9e9 	bl	8009a54 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  configura_perif_2();
 8009682:	f7ff ff7d 	bl	8009580 <configura_perif_2>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009686:	f000 ffd1 	bl	800a62c <MX_GPIO_Init>
  MX_DMA_Init();
 800968a:	f000 ffa9 	bl	800a5e0 <MX_DMA_Init>
  MX_ADC1_Init();
 800968e:	f000 fa4b 	bl	8009b28 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009692:	f000 fca7 	bl	8009fe4 <MX_I2C1_Init>
  MX_IWDG_Init();
 8009696:	f000 fce7 	bl	800a068 <MX_IWDG_Init>
  MX_RTC_Init();
 800969a:	f000 fd07 	bl	800a0ac <MX_RTC_Init>
  MX_TIM3_Init();
 800969e:	f000 fe3f 	bl	800a320 <MX_TIM3_Init>
  MX_TIM6_Init();
 80096a2:	f000 febf 	bl	800a424 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80096a6:	f000 fefd 	bl	800a4a4 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80096aa:	f000 ff49 	bl	800a540 <MX_USART4_UART_Init>
  MX_TIM1_Init();
 80096ae:	f000 fd69 	bl	800a184 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  initEEPROMEmulated(); // Init EEPROM Emulated
 80096b2:	f7f9 f81d 	bl	80026f0 <initEEPROMEmulated>

  Modbus_ModbusSalave ();
 80096b6:	f7fa ffc1 	bl	800463c <Modbus_ModbusSalave>
   //ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
  ModbusMaster_begin(reePlantilla[eeAddModBus]);
 80096ba:	4bc0      	ldr	r3, [pc, #768]	@ (80099bc <main+0x358>)
 80096bc:	2272      	movs	r2, #114	@ 0x72
 80096be:	5c9b      	ldrb	r3, [r3, r2]
 80096c0:	0018      	movs	r0, r3
 80096c2:	f7fa ffc1 	bl	8004648 <ModbusMaster_begin>
  TR485_Trasnmiting = 0;														//17-DIC-2021		El dispositivo inicialmente escucha
 80096c6:	4bbe      	ldr	r3, [pc, #760]	@ (80099c0 <main+0x35c>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 80096cc:	4bbd      	ldr	r3, [pc, #756]	@ (80099c4 <main+0x360>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	2104      	movs	r1, #4
 80096d2:	0018      	movs	r0, r3
 80096d4:	f009 fe21 	bl	801331a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 80096d8:	4bbb      	ldr	r3, [pc, #748]	@ (80099c8 <main+0x364>)
 80096da:	2203      	movs	r2, #3
 80096dc:	701a      	strb	r2, [r3, #0]
     timeRstBLE = 8;
 80096de:	4bb5      	ldr	r3, [pc, #724]	@ (80099b4 <main+0x350>)
 80096e0:	2208      	movs	r2, #8
 80096e2:	701a      	strb	r2, [r3, #0]
     BluetoothState = 1;
 80096e4:	4bb8      	ldr	r3, [pc, #736]	@ (80099c8 <main+0x364>)
 80096e6:	2201      	movs	r2, #1
 80096e8:	701a      	strb	r2, [r3, #0]
     HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 80096ea:	4bb8      	ldr	r3, [pc, #736]	@ (80099cc <main+0x368>)
 80096ec:	2201      	movs	r2, #1
 80096ee:	2120      	movs	r1, #32
 80096f0:	0018      	movs	r0, r3
 80096f2:	f009 fe12 	bl	801331a <HAL_GPIO_WritePin>

     HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80096f6:	2007      	movs	r0, #7
 80096f8:	f008 fdd5 	bl	80122a6 <HAL_NVIC_DisableIRQ>
     HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80096fc:	4bb4      	ldr	r3, [pc, #720]	@ (80099d0 <main+0x36c>)
 80096fe:	0018      	movs	r0, r3
 8009700:	f00e fa90 	bl	8017c24 <HAL_RTCEx_DeactivateWakeUpTimer>

     HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM   JTA eliminar buzer inicial
 8009704:	4bb3      	ldr	r3, [pc, #716]	@ (80099d4 <main+0x370>)
 8009706:	2104      	movs	r1, #4
 8009708:	0018      	movs	r0, r3
 800970a:	f00e fb8f 	bl	8017e2c <HAL_TIM_PWM_Start>
     while(Count_Test2 < 260000)
 800970e:	e012      	b.n	8009736 <main+0xd2>
     {
    	 HAL_IWDG_Refresh(&hiwdg);
 8009710:	4bb1      	ldr	r3, [pc, #708]	@ (80099d8 <main+0x374>)
 8009712:	0018      	movs	r0, r3
 8009714:	f00c f830 	bl	8015778 <HAL_IWDG_Refresh>
   		Count_Test2++;//  eliminar JTA buzzer
 8009718:	4bb0      	ldr	r3, [pc, #704]	@ (80099dc <main+0x378>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	4baf      	ldr	r3, [pc, #700]	@ (80099dc <main+0x378>)
 8009720:	601a      	str	r2, [r3, #0]
   		if(Count_Test2 == 259999 ) //eliminar JTA buzzer
 8009722:	4bae      	ldr	r3, [pc, #696]	@ (80099dc <main+0x378>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4aae      	ldr	r2, [pc, #696]	@ (80099e0 <main+0x37c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d104      	bne.n	8009736 <main+0xd2>
   		{
   			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2); //eliminar JTA buzzer
 800972c:	4ba9      	ldr	r3, [pc, #676]	@ (80099d4 <main+0x370>)
 800972e:	2104      	movs	r1, #4
 8009730:	0018      	movs	r0, r3
 8009732:	f00e fc5d 	bl	8017ff0 <HAL_TIM_PWM_Stop>
     while(Count_Test2 < 260000)
 8009736:	4ba9      	ldr	r3, [pc, #676]	@ (80099dc <main+0x378>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4aa9      	ldr	r2, [pc, #676]	@ (80099e0 <main+0x37c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d9e7      	bls.n	8009710 <main+0xac>
   			//Count_Test2 = 255;//eliminar JTA buzzer
   		}
     }
     Count_Test2 = 0;
 8009740:	4ba6      	ldr	r3, [pc, #664]	@ (80099dc <main+0x378>)
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]

     asm ("nop");
 8009746:	46c0      	nop			@ (mov r8, r8)

     for (int i = 0; i < 1000; i++)
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	e009      	b.n	8009762 <main+0xfe>
     {
   	  HAL_Delay (1);
 800974e:	2001      	movs	r0, #1
 8009750:	f008 fc78 	bl	8012044 <HAL_Delay>
   	  HAL_IWDG_Refresh(&hiwdg);
 8009754:	4ba0      	ldr	r3, [pc, #640]	@ (80099d8 <main+0x374>)
 8009756:	0018      	movs	r0, r3
 8009758:	f00c f80e 	bl	8015778 <HAL_IWDG_Refresh>
     for (int i = 0; i < 1000; i++)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	23fa      	movs	r3, #250	@ 0xfa
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	429a      	cmp	r2, r3
 800976a:	dbf0      	blt.n	800974e <main+0xea>


while (1)
{

   testTimmingProcess:
 800976c:	46c0      	nop			@ (mov r8, r8)
   	ProcesosC++;
 800976e:	4b92      	ldr	r3, [pc, #584]	@ (80099b8 <main+0x354>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	4b90      	ldr	r3, [pc, #576]	@ (80099b8 <main+0x354>)
 8009778:	701a      	strb	r2, [r3, #0]
       while ( !(TIM6->SR & 0x0001) ){
 800977a:	e000      	b.n	800977e <main+0x11a>
   		// Espera hasta que se cumpla el overflow del timer 6
   		// 125 us
   		asm ("nop");
 800977c:	46c0      	nop			@ (mov r8, r8)
       while ( !(TIM6->SR & 0x0001) ){
 800977e:	4b99      	ldr	r3, [pc, #612]	@ (80099e4 <main+0x380>)
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2201      	movs	r2, #1
 8009784:	4013      	ands	r3, r2
 8009786:	d0f9      	beq.n	800977c <main+0x118>
   	}
   	// Borra bandera de overflow
   	TIM6->SR &= ~TIM_SR_UIF;
 8009788:	4b96      	ldr	r3, [pc, #600]	@ (80099e4 <main+0x380>)
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	4b95      	ldr	r3, [pc, #596]	@ (80099e4 <main+0x380>)
 800978e:	2101      	movs	r1, #1
 8009790:	438a      	bics	r2, r1
 8009792:	611a      	str	r2, [r3, #16]
   	HAL_IWDG_Refresh( &hiwdg );
 8009794:	4b90      	ldr	r3, [pc, #576]	@ (80099d8 <main+0x374>)
 8009796:	0018      	movs	r0, r3
 8009798:	f00b ffee 	bl	8015778 <HAL_IWDG_Refresh>

   	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO6 toogle test
     	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 800979c:	4b92      	ldr	r3, [pc, #584]	@ (80099e8 <main+0x384>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	4b90      	ldr	r3, [pc, #576]	@ (80099e8 <main+0x384>)
 80097a6:	701a      	strb	r2, [r3, #0]
         asm ("nop");
 80097a8:	46c0      	nop			@ (mov r8, r8)


       main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80097aa:	f7fb ff1d 	bl	80055e8 <main10>

       muestreo();
 80097ae:	f001 f805 	bl	800a7bc <muestreo>

     	if(StateSleep == 0x55){
 80097b2:	4b8e      	ldr	r3, [pc, #568]	@ (80099ec <main+0x388>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b55      	cmp	r3, #85	@ 0x55
 80097b8:	d101      	bne.n	80097be <main+0x15a>
     		// C: Pendiente a Adaptar
     		//;Restablece el Tiempo RTC
     		asm ("nop");
 80097ba:	46c0      	nop			@ (mov r8, r8)
     		asm ("nop");
 80097bc:	46c0      	nop			@ (mov r8, r8)
     	}

     	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80097be:	f7fb ff95 	bl	80056ec <retardoDeActuadores>

     	asm ("nop");
 80097c2:	46c0      	nop			@ (mov r8, r8)
     	// procesa la base de tiempo para C y modbus
     	check_Tick_1ms();
 80097c4:	f7ff fef6 	bl	80095b4 <check_Tick_1ms>

     	/*
     	Falta parte por insertar
     	 */
     	if(timeRstBLE){
 80097c8:	4b7a      	ldr	r3, [pc, #488]	@ (80099b4 <main+0x350>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <main+0x180>
     		/* USART Disable */
     		// USART_Cmd(USART2, DISABLE);
           HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 80097d0:	4b7c      	ldr	r3, [pc, #496]	@ (80099c4 <main+0x360>)
 80097d2:	2201      	movs	r2, #1
 80097d4:	2140      	movs	r1, #64	@ 0x40
 80097d6:	0018      	movs	r0, r3
 80097d8:	f009 fd9f 	bl	801331a <HAL_GPIO_WritePin>
           //GPIOC->BSRR = GPIO_BSRR_BS_6;
     		BluetoothState = 1;
 80097dc:	4b7a      	ldr	r3, [pc, #488]	@ (80099c8 <main+0x364>)
 80097de:	2201      	movs	r2, #1
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	e018      	b.n	8009816 <main+0x1b2>
     	}
     	else{
     		/* USART Enable */
     		// USART_Cmd(USART2, ENABLE);
     		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 80097e4:	4b77      	ldr	r3, [pc, #476]	@ (80099c4 <main+0x360>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	2140      	movs	r1, #64	@ 0x40
 80097ea:	0018      	movs	r0, r3
 80097ec:	f009 fd95 	bl	801331a <HAL_GPIO_WritePin>
     		//GPIOC->BSRR = GPIO_BSRR_BR_6;

     		// State Machine Bluetooth    10-MAR-2022
     		switch(BluetoothState){
 80097f0:	4b75      	ldr	r3, [pc, #468]	@ (80099c8 <main+0x364>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d00b      	beq.n	8009810 <main+0x1ac>
 80097f8:	dc0d      	bgt.n	8009816 <main+0x1b2>
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d002      	beq.n	8009804 <main+0x1a0>
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d003      	beq.n	800980a <main+0x1a6>
 8009802:	e008      	b.n	8009816 <main+0x1b2>
     			case 1:
     				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 8009804:	f7fb fb26 	bl	8004e54 <SetUpBluetooth_Ble>
 8009808:	e005      	b.n	8009816 <main+0x1b2>
     			case 2:
     				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 800980a:	f7fb fb8b 	bl	8004f24 <GetParamBluetooth_Ble>
 800980e:	e002      	b.n	8009816 <main+0x1b2>
     			case 3:
     				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 8009810:	f7fb fbe8 	bl	8004fe4 <TransmitReceive_Ble>
 8009814:	46c0      	nop			@ (mov r8, r8)
     		}
     	}

     	Read_Inpunts_ble();				// 14-Mar-2022
 8009816:	f7fb fe3b 	bl	8005490 <Read_Inpunts_ble>
   //  			flagsLogger [5] = 0;				// permite loggeo de datos
   //  		}
   //  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
   //  	}

     	if(tick_1s){
 800981a:	4b75      	ldr	r3, [pc, #468]	@ (80099f0 <main+0x38c>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d006      	beq.n	8009830 <main+0x1cc>
     	  asm ("nop");
 8009822:	46c0      	nop			@ (mov r8, r8)
     	  Count_Test++;
 8009824:	4b73      	ldr	r3, [pc, #460]	@ (80099f4 <main+0x390>)
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	3301      	adds	r3, #1
 800982a:	b29a      	uxth	r2, r3
 800982c:	4b71      	ldr	r3, [pc, #452]	@ (80099f4 <main+0x390>)
 800982e:	801a      	strh	r2, [r3, #0]
     	    //  *** Prueba de activacion de rele compresor
     	    //portX[rel_co] =  portX[rel_co] 1;
     	    //  *** Prueba de activacion de rele compresor
     	}

     	if(tick_1ms == 1){
 8009830:	4b71      	ldr	r3, [pc, #452]	@ (80099f8 <main+0x394>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <main+0x1e0>
     		// tiempo para rutina buzzer
     		// #pragma asm
     		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 8009838:	4b70      	ldr	r3, [pc, #448]	@ (80099fc <main+0x398>)
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	3301      	adds	r3, #1
 800983e:	b29a      	uxth	r2, r3
 8009840:	4b6e      	ldr	r3, [pc, #440]	@ (80099fc <main+0x398>)
 8009842:	801a      	strh	r2, [r3, #0]
//   			    timeBCD_day = hRtcDate.Date;
//   			    timeBCD_hour = hRtcTime.Hours;
//   			    timeBCD_min = hRtcTime.Minutes;
//   			    timeBCD_sec = hRtcTime.Seconds;

   				uint32_t tmpreg1 = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8009844:	4b6e      	ldr	r3, [pc, #440]	@ (8009a00 <main+0x39c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a6e      	ldr	r2, [pc, #440]	@ (8009a04 <main+0x3a0>)
 800984a:	4013      	ands	r3, r2
 800984c:	60bb      	str	r3, [r7, #8]
     			uint32_t datetmpreg1 = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800984e:	4b6c      	ldr	r3, [pc, #432]	@ (8009a00 <main+0x39c>)
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	4a6d      	ldr	r2, [pc, #436]	@ (8009a08 <main+0x3a4>)
 8009854:	4013      	ands	r3, r2
 8009856:	607b      	str	r3, [r7, #4]

     		  	timeBCD_year = (uint8_t)((datetmpreg1 & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	0c1b      	lsrs	r3, r3, #16
 800985c:	b2da      	uxtb	r2, r3
 800985e:	4b6b      	ldr	r3, [pc, #428]	@ (8009a0c <main+0x3a8>)
 8009860:	701a      	strb	r2, [r3, #0]
     		  	timeBCD_month = (uint8_t)((datetmpreg1 & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	0a1b      	lsrs	r3, r3, #8
 8009866:	b2db      	uxtb	r3, r3
 8009868:	221f      	movs	r2, #31
 800986a:	4013      	ands	r3, r2
 800986c:	b2da      	uxtb	r2, r3
 800986e:	4b68      	ldr	r3, [pc, #416]	@ (8009a10 <main+0x3ac>)
 8009870:	701a      	strb	r2, [r3, #0]
     		  	timeBCD_day = (uint8_t)((datetmpreg1 & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	223f      	movs	r2, #63	@ 0x3f
 8009878:	4013      	ands	r3, r2
 800987a:	b2da      	uxtb	r2, r3
 800987c:	4b65      	ldr	r3, [pc, #404]	@ (8009a14 <main+0x3b0>)
 800987e:	701a      	strb	r2, [r3, #0]
     		  	timeBCD_hour = (uint8_t)((tmpreg1 & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	b2db      	uxtb	r3, r3
 8009886:	223f      	movs	r2, #63	@ 0x3f
 8009888:	4013      	ands	r3, r2
 800988a:	b2da      	uxtb	r2, r3
 800988c:	4b62      	ldr	r3, [pc, #392]	@ (8009a18 <main+0x3b4>)
 800988e:	701a      	strb	r2, [r3, #0]
       	  		timeBCD_min = (uint8_t)((tmpreg1 & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	0a1b      	lsrs	r3, r3, #8
 8009894:	b2db      	uxtb	r3, r3
 8009896:	227f      	movs	r2, #127	@ 0x7f
 8009898:	4013      	ands	r3, r2
 800989a:	b2da      	uxtb	r2, r3
 800989c:	4b5f      	ldr	r3, [pc, #380]	@ (8009a1c <main+0x3b8>)
 800989e:	701a      	strb	r2, [r3, #0]
     		  	timeBCD_sec = (uint8_t)((tmpreg1 & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	227f      	movs	r2, #127	@ 0x7f
 80098a6:	4013      	ands	r3, r2
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	4b5d      	ldr	r3, [pc, #372]	@ (8009a20 <main+0x3bc>)
 80098ac:	701a      	strb	r2, [r3, #0]

     		  	timeBCD_to_UNIX();
 80098ae:	f7ff f8bb 	bl	8008a28 <timeBCD_to_UNIX>
     		  	//------------------------------------------------------------------------------------------
     		  	calculando_tiempo_UNIX ();
 80098b2:	f7fb ffb9 	bl	8005828 <calculando_tiempo_UNIX>
   //------------------------------------------------------------------------------------------
//     		  		if(!flagsTime[f_timeConfigRTC]){
//     		  			goto noActTime;
//     		  		}

     		  		timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 80098b6:	4b5b      	ldr	r3, [pc, #364]	@ (8009a24 <main+0x3c0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	0c1b      	lsrs	r3, r3, #16
 80098bc:	b29a      	uxth	r2, r3
 80098be:	4b5a      	ldr	r3, [pc, #360]	@ (8009a28 <main+0x3c4>)
 80098c0:	801a      	strh	r2, [r3, #0]
     		  		timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 80098c2:	4b58      	ldr	r3, [pc, #352]	@ (8009a24 <main+0x3c0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	4b58      	ldr	r3, [pc, #352]	@ (8009a2c <main+0x3c8>)
 80098ca:	801a      	strh	r2, [r3, #0]

     		  		if(timeBCD_sec_ANT == timeBCD_sec){
 80098cc:	4b58      	ldr	r3, [pc, #352]	@ (8009a30 <main+0x3cc>)
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	4b53      	ldr	r3, [pc, #332]	@ (8009a20 <main+0x3bc>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d008      	beq.n	80098ea <main+0x286>
     		  			goto no_inc_cnt_sec;
     		  		}
     		  		timeBCD_sec_ANT = timeBCD_sec;
 80098d8:	4b51      	ldr	r3, [pc, #324]	@ (8009a20 <main+0x3bc>)
 80098da:	781a      	ldrb	r2, [r3, #0]
 80098dc:	4b54      	ldr	r3, [pc, #336]	@ (8009a30 <main+0x3cc>)
 80098de:	701a      	strb	r2, [r3, #0]
     		  		decword(&cntLogger_H);
 80098e0:	4b54      	ldr	r3, [pc, #336]	@ (8009a34 <main+0x3d0>)
 80098e2:	0018      	movs	r0, r3
 80098e4:	f7fd fbeb 	bl	80070be <decword>
 80098e8:	e000      	b.n	80098ec <main+0x288>
     		  			goto no_inc_cnt_sec;
 80098ea:	46c0      	nop			@ (mov r8, r8)
     		  no_inc_cnt_sec:
     		  noActTime:
   		  asm ("nop");
 80098ec:	46c0      	nop			@ (mov r8, r8)

     	  	switch(ProcesosC)
 80098ee:	4b32      	ldr	r3, [pc, #200]	@ (80099b8 <main+0x354>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b07      	cmp	r3, #7
 80098f4:	d84a      	bhi.n	800998c <main+0x328>
 80098f6:	009a      	lsls	r2, r3, #2
 80098f8:	4b4f      	ldr	r3, [pc, #316]	@ (8009a38 <main+0x3d4>)
 80098fa:	18d3      	adds	r3, r2, r3
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	469f      	mov	pc, r3
     	  	{
     	  		case 0:
     	  			comunicacion();
 8009900:	f7fd fdee 	bl	80074e0 <comunicacion>
     	  			break;		// ASM: Pendiente a traducir
 8009904:	e048      	b.n	8009998 <main+0x334>
     	  		case 1:
     	  			voltmetro();
 8009906:	f008 f8a9 	bl	8011a5c <voltmetro>
     	  			break;		// ASM: Pendiente a traducir
 800990a:	e045      	b.n	8009998 <main+0x334>
     	  		case 2:
     	  			temper();
 800990c:	f003 f8f8 	bl	800cb00 <temper>
     	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 8009910:	e042      	b.n	8009998 <main+0x334>
     	  		case 3:
     	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
     	  //				 asm ("nop");
     	  //			}
     	  			if(USART4->ISR & USART_ISR_TC){
 8009912:	4b4a      	ldr	r3, [pc, #296]	@ (8009a3c <main+0x3d8>)
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	2240      	movs	r2, #64	@ 0x40
 8009918:	4013      	ands	r3, r2
 800991a:	d005      	beq.n	8009928 <main+0x2c4>
     	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 800991c:	4b29      	ldr	r3, [pc, #164]	@ (80099c4 <main+0x360>)
 800991e:	2200      	movs	r2, #0
 8009920:	2104      	movs	r1, #4
 8009922:	0018      	movs	r0, r3
 8009924:	f009 fcf9 	bl	801331a <HAL_GPIO_WritePin>
     	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
     	  			}
     	  			ModbusMap ();
 8009928:	f7f9 fe52 	bl	80035d0 <ModbusMap>
     	  			noctar ();
 800992c:	f001 faf2 	bl	800af14 <noctar>
     	  			break;		// ASM: Pendiente a traducir
 8009930:	e032      	b.n	8009998 <main+0x334>
     	  		case 4:
     	  			if(bandera_act_fw_j == 0)    //Parche
 8009932:	4b43      	ldr	r3, [pc, #268]	@ (8009a40 <main+0x3dc>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2201      	movs	r2, #1
 8009938:	4053      	eors	r3, r2
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b00      	cmp	r3, #0
 800993e:	d028      	beq.n	8009992 <main+0x32e>
     	  			{
     	  				refrigera();
 8009940:	f001 faee 	bl	800af20 <refrigera>
     	  			}
     	  			break;		// ASM: Pendiente a traducir
 8009944:	e025      	b.n	8009992 <main+0x32e>
     	  		case 5:
     	  			display();
 8009946:	f7fe fb81 	bl	800804c <display>
     	  			break;		// ASM: Pendiente a traducir
 800994a:	e025      	b.n	8009998 <main+0x334>
     	  		case 6:
     	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 800994c:	f004 f88a 	bl	800da64 <tiempo>
     	  			if(bandera_act_fw_j == 0)    //Parche
 8009950:	4b3b      	ldr	r3, [pc, #236]	@ (8009a40 <main+0x3dc>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2201      	movs	r2, #1
 8009956:	4053      	eors	r3, r2
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <main+0x2fe>
     	  			{
     	  				logger ();				// ASM: Pendiente a traducir
 800995e:	f7ff f92d 	bl	8008bbc <logger>
     	  			}
    	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 8009962:	f004 fc17 	bl	800e194 <tx_control>
   //
     	  			if ( keyWrFirm == 0xAA){
 8009966:	4b37      	ldr	r3, [pc, #220]	@ (8009a44 <main+0x3e0>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2baa      	cmp	r3, #170	@ 0xaa
 800996c:	d113      	bne.n	8009996 <main+0x332>
     	  			    asm ("nop");
 800996e:	46c0      	nop			@ (mov r8, r8)
     	  				if	( keyTx == 00 )	{
 8009970:	4b35      	ldr	r3, [pc, #212]	@ (8009a48 <main+0x3e4>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10e      	bne.n	8009996 <main+0x332>
     	  				    asm ("nop");
 8009978:	46c0      	nop			@ (mov r8, r8)
   	  					bootloader();
 800997a:	f7fb fe25 	bl	80055c8 <bootloader>
     	  				}
     	  			}
     	  			break;		// ASM: Pendiente a traducir
 800997e:	e00a      	b.n	8009996 <main+0x332>
     	  		case 7:
     	  			watch();
 8009980:	f008 f9b4 	bl	8011cec <watch>
     	  			ProcesosC = 255;
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <main+0x354>)
 8009986:	22ff      	movs	r2, #255	@ 0xff
 8009988:	701a      	strb	r2, [r3, #0]
     	  			break;		// ASM: Pendiente a traducir
 800998a:	e005      	b.n	8009998 <main+0x334>
     	  		default:
     	  		    asm ("nop");
 800998c:	46c0      	nop			@ (mov r8, r8)
     	  			for (;;)      ;// Watch dog Reset
 800998e:	46c0      	nop			@ (mov r8, r8)
 8009990:	e7fd      	b.n	800998e <main+0x32a>
     	  			break;		// ASM: Pendiente a traducir
 8009992:	46c0      	nop			@ (mov r8, r8)
 8009994:	e000      	b.n	8009998 <main+0x334>
     	  			break;		// ASM: Pendiente a traducir
 8009996:	46c0      	nop			@ (mov r8, r8)
     	  		break;

     	  	}

   	  	// clear time flags
   	  	tick_1ms = 0;						// flag base de tiempo 1ms
 8009998:	4b17      	ldr	r3, [pc, #92]	@ (80099f8 <main+0x394>)
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
   	  	tick_10ms = 0;					// flag base de tiempo 10ms
 800999e:	4b2b      	ldr	r3, [pc, #172]	@ (8009a4c <main+0x3e8>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
   	  	tick_100ms = 0;					// flag base de tiempo 100ms
 80099a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009a50 <main+0x3ec>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	701a      	strb	r2, [r3, #0]
   	  	tick_1s = 0;
 80099aa:	4b11      	ldr	r3, [pc, #68]	@ (80099f0 <main+0x38c>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
{
 80099b0:	e6dd      	b.n	800976e <main+0x10a>
 80099b2:	46c0      	nop			@ (mov r8, r8)
 80099b4:	20001f74 	.word	0x20001f74
 80099b8:	200008f0 	.word	0x200008f0
 80099bc:	20000c88 	.word	0x20000c88
 80099c0:	200008d9 	.word	0x200008d9
 80099c4:	50000800 	.word	0x50000800
 80099c8:	2000004c 	.word	0x2000004c
 80099cc:	50000400 	.word	0x50000400
 80099d0:	20000514 	.word	0x20000514
 80099d4:	20000590 	.word	0x20000590
 80099d8:	20000500 	.word	0x20000500
 80099dc:	20002170 	.word	0x20002170
 80099e0:	0003f79f 	.word	0x0003f79f
 80099e4:	40001000 	.word	0x40001000
 80099e8:	200003dd 	.word	0x200003dd
 80099ec:	200008f1 	.word	0x200008f1
 80099f0:	200008d7 	.word	0x200008d7
 80099f4:	20000b02 	.word	0x20000b02
 80099f8:	200008d4 	.word	0x200008d4
 80099fc:	20002010 	.word	0x20002010
 8009a00:	40002800 	.word	0x40002800
 8009a04:	007f7f7f 	.word	0x007f7f7f
 8009a08:	00ffff3f 	.word	0x00ffff3f
 8009a0c:	200020fc 	.word	0x200020fc
 8009a10:	200020fd 	.word	0x200020fd
 8009a14:	200020fe 	.word	0x200020fe
 8009a18:	200020ff 	.word	0x200020ff
 8009a1c:	20002100 	.word	0x20002100
 8009a20:	20002101 	.word	0x20002101
 8009a24:	20002124 	.word	0x20002124
 8009a28:	20001e3c 	.word	0x20001e3c
 8009a2c:	20001e3e 	.word	0x20001e3e
 8009a30:	20002175 	.word	0x20002175
 8009a34:	20000e20 	.word	0x20000e20
 8009a38:	0801b058 	.word	0x0801b058
 8009a3c:	40004c00 	.word	0x40004c00
 8009a40:	20002174 	.word	0x20002174
 8009a44:	20001f70 	.word	0x20001f70
 8009a48:	20001ea5 	.word	0x20001ea5
 8009a4c:	200008d5 	.word	0x200008d5
 8009a50:	200008d6 	.word	0x200008d6

08009a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b099      	sub	sp, #100	@ 0x64
 8009a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009a5a:	2414      	movs	r4, #20
 8009a5c:	193b      	adds	r3, r7, r4
 8009a5e:	0018      	movs	r0, r3
 8009a60:	234c      	movs	r3, #76	@ 0x4c
 8009a62:	001a      	movs	r2, r3
 8009a64:	2100      	movs	r1, #0
 8009a66:	f011 f855 	bl	801ab14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009a6a:	1d3b      	adds	r3, r7, #4
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	2310      	movs	r3, #16
 8009a70:	001a      	movs	r2, r3
 8009a72:	2100      	movs	r1, #0
 8009a74:	f011 f84e 	bl	801ab14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a78:	2380      	movs	r3, #128	@ 0x80
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f00b fe99 	bl	80157b4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009a82:	f00b fe89 	bl	8015798 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009a86:	4a27      	ldr	r2, [pc, #156]	@ (8009b24 <SystemClock_Config+0xd0>)
 8009a88:	2390      	movs	r3, #144	@ 0x90
 8009a8a:	58d3      	ldr	r3, [r2, r3]
 8009a8c:	4925      	ldr	r1, [pc, #148]	@ (8009b24 <SystemClock_Config+0xd0>)
 8009a8e:	2218      	movs	r2, #24
 8009a90:	4393      	bics	r3, r2
 8009a92:	2290      	movs	r2, #144	@ 0x90
 8009a94:	508b      	str	r3, [r1, r2]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8009a96:	193b      	adds	r3, r7, r4
 8009a98:	2206      	movs	r2, #6
 8009a9a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009a9c:	193b      	adds	r3, r7, r4
 8009a9e:	2281      	movs	r2, #129	@ 0x81
 8009aa0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009aa2:	193b      	adds	r3, r7, r4
 8009aa4:	2280      	movs	r2, #128	@ 0x80
 8009aa6:	0052      	lsls	r2, r2, #1
 8009aa8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009aaa:	0021      	movs	r1, r4
 8009aac:	187b      	adds	r3, r7, r1
 8009aae:	2240      	movs	r2, #64	@ 0x40
 8009ab0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ab2:	187b      	adds	r3, r7, r1
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009ab8:	187b      	adds	r3, r7, r1
 8009aba:	2202      	movs	r2, #2
 8009abc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8009abe:	187b      	adds	r3, r7, r1
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 7;
 8009ac4:	187b      	adds	r3, r7, r1
 8009ac6:	2207      	movs	r2, #7
 8009ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009aca:	187b      	adds	r3, r7, r1
 8009acc:	2280      	movs	r2, #128	@ 0x80
 8009ace:	0292      	lsls	r2, r2, #10
 8009ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009ad2:	187b      	adds	r3, r7, r1
 8009ad4:	2280      	movs	r2, #128	@ 0x80
 8009ad6:	0492      	lsls	r2, r2, #18
 8009ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009ada:	187b      	adds	r3, r7, r1
 8009adc:	2280      	movs	r2, #128	@ 0x80
 8009ade:	0592      	lsls	r2, r2, #22
 8009ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009ae2:	187b      	adds	r3, r7, r1
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f00b ff05 	bl	80158f4 <HAL_RCC_OscConfig>
 8009aea:	1e03      	subs	r3, r0, #0
 8009aec:	d001      	beq.n	8009af2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8009aee:	f000 fe5f 	bl	800a7b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009af2:	1d3b      	adds	r3, r7, #4
 8009af4:	2207      	movs	r2, #7
 8009af6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009af8:	1d3b      	adds	r3, r7, #4
 8009afa:	2203      	movs	r2, #3
 8009afc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009afe:	1d3b      	adds	r3, r7, #4
 8009b00:	2200      	movs	r2, #0
 8009b02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009b04:	1d3b      	adds	r3, r7, #4
 8009b06:	2200      	movs	r2, #0
 8009b08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009b0a:	1d3b      	adds	r3, r7, #4
 8009b0c:	2102      	movs	r1, #2
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f00c fb1a 	bl	8016148 <HAL_RCC_ClockConfig>
 8009b14:	1e03      	subs	r3, r0, #0
 8009b16:	d001      	beq.n	8009b1c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8009b18:	f000 fe4a 	bl	800a7b0 <Error_Handler>
  }
}
 8009b1c:	46c0      	nop			@ (mov r8, r8)
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	b019      	add	sp, #100	@ 0x64
 8009b22:	bd90      	pop	{r4, r7, pc}
 8009b24:	40021000 	.word	0x40021000

08009b28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b098      	sub	sp, #96	@ 0x60
 8009b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	uint8_t val_analog = 0x03;
 8009b2e:	204f      	movs	r0, #79	@ 0x4f
 8009b30:	183b      	adds	r3, r7, r0
 8009b32:	2203      	movs	r2, #3
 8009b34:	701a      	strb	r2, [r3, #0]
	uint32_t wait_loop_index = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint32_t tmp_cfgr1 = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t tmp_cfgr2 = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t AWDThresholdHighValue = 0;
 8009b42:	2300      	movs	r3, #0
 8009b44:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t AWDThresholdLowValue = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	63fb      	str	r3, [r7, #60]	@ 0x3c

	//ACTIVACION DE RELOJ
	MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, (uint32_t)(RCC_ADCCLKSOURCE_SYSCLK));
 8009b4a:	4ae1      	ldr	r2, [pc, #900]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b4c:	2388      	movs	r3, #136	@ 0x88
 8009b4e:	58d3      	ldr	r3, [r2, r3]
 8009b50:	49df      	ldr	r1, [pc, #892]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b52:	4ae0      	ldr	r2, [pc, #896]	@ (8009ed4 <MX_ADC1_Init+0x3ac>)
 8009b54:	4013      	ands	r3, r2
 8009b56:	2288      	movs	r2, #136	@ 0x88
 8009b58:	508b      	str	r3, [r1, r2]
	__HAL_RCC_ADC_CLK_ENABLE();
 8009b5a:	4bdd      	ldr	r3, [pc, #884]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009b5e:	4bdc      	ldr	r3, [pc, #880]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b60:	2180      	movs	r1, #128	@ 0x80
 8009b62:	0349      	lsls	r1, r1, #13
 8009b64:	430a      	orrs	r2, r1
 8009b66:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b68:	4bd9      	ldr	r3, [pc, #868]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b6a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009b6c:	2380      	movs	r3, #128	@ 0x80
 8009b6e:	035b      	lsls	r3, r3, #13
 8009b70:	4013      	ands	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]

	//PINES ANALOGICOS PARA CANALES DE MUESTRA

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009b76:	4bd6      	ldr	r3, [pc, #856]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b7a:	4bd5      	ldr	r3, [pc, #852]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b7c:	2104      	movs	r1, #4
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009b82:	4bd3      	ldr	r3, [pc, #844]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b86:	2204      	movs	r2, #4
 8009b88:	4013      	ands	r3, r2
 8009b8a:	60bb      	str	r3, [r7, #8]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009b8e:	4bd0      	ldr	r3, [pc, #832]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b92:	4bcf      	ldr	r3, [pc, #828]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b94:	2101      	movs	r1, #1
 8009b96:	430a      	orrs	r2, r1
 8009b98:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009b9a:	4bcd      	ldr	r3, [pc, #820]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	607b      	str	r3, [r7, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009ba6:	4bca      	ldr	r3, [pc, #808]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009ba8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009baa:	4bc9      	ldr	r3, [pc, #804]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009bac:	2102      	movs	r1, #2
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009bb2:	4bc7      	ldr	r3, [pc, #796]	@ (8009ed0 <MX_ADC1_Init+0x3a8>)
 8009bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	4013      	ands	r3, r2
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]

	// ---------------------- GPIOC ----------------------
	// PC0
	MODIFY_REG(GPIOC->MODER, GPIO_MODER_MODE0_Msk, val_analog);
 8009bbe:	4bc6      	ldr	r3, [pc, #792]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2203      	movs	r2, #3
 8009bc4:	4393      	bics	r3, r2
 8009bc6:	0019      	movs	r1, r3
 8009bc8:	183b      	adds	r3, r7, r0
 8009bca:	781a      	ldrb	r2, [r3, #0]
 8009bcc:	4bc2      	ldr	r3, [pc, #776]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	601a      	str	r2, [r3, #0]
	// PC1
	MODIFY_REG(GPIOC->MODER, GPIO_MODER_MODE1_Msk, val_analog);
 8009bd2:	4bc1      	ldr	r3, [pc, #772]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	220c      	movs	r2, #12
 8009bd8:	4393      	bics	r3, r2
 8009bda:	0019      	movs	r1, r3
 8009bdc:	183b      	adds	r3, r7, r0
 8009bde:	781a      	ldrb	r2, [r3, #0]
 8009be0:	4bbd      	ldr	r3, [pc, #756]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009be2:	430a      	orrs	r2, r1
 8009be4:	601a      	str	r2, [r3, #0]
	// PC4
	MODIFY_REG(GPIOC->MODER, GPIO_MODER_MODE4_Msk, val_analog);
 8009be6:	4bbc      	ldr	r3, [pc, #752]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4abc      	ldr	r2, [pc, #752]	@ (8009edc <MX_ADC1_Init+0x3b4>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	0019      	movs	r1, r3
 8009bf0:	183b      	adds	r3, r7, r0
 8009bf2:	781a      	ldrb	r2, [r3, #0]
 8009bf4:	4bb8      	ldr	r3, [pc, #736]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	601a      	str	r2, [r3, #0]

	// Sin pull-up/pull-down para PC0, PC1, PC4
	CLEAR_BIT(GPIOC->PUPDR, GPIO_PUPDR_PUPD0_Msk | GPIO_PUPDR_PUPD1_Msk | GPIO_PUPDR_PUPD4_Msk);
 8009bfa:	4bb7      	ldr	r3, [pc, #732]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	4bb6      	ldr	r3, [pc, #728]	@ (8009ed8 <MX_ADC1_Init+0x3b0>)
 8009c00:	49b7      	ldr	r1, [pc, #732]	@ (8009ee0 <MX_ADC1_Init+0x3b8>)
 8009c02:	400a      	ands	r2, r1
 8009c04:	60da      	str	r2, [r3, #12]

	// ---------------------- GPIOA ----------------------
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODE5_Msk, val_analog);
 8009c06:	23a0      	movs	r3, #160	@ 0xa0
 8009c08:	05db      	lsls	r3, r3, #23
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4ab5      	ldr	r2, [pc, #724]	@ (8009ee4 <MX_ADC1_Init+0x3bc>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	0019      	movs	r1, r3
 8009c12:	183b      	adds	r3, r7, r0
 8009c14:	781a      	ldrb	r2, [r3, #0]
 8009c16:	23a0      	movs	r3, #160	@ 0xa0
 8009c18:	05db      	lsls	r3, r3, #23
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODE6_Msk, val_analog);
 8009c1e:	23a0      	movs	r3, #160	@ 0xa0
 8009c20:	05db      	lsls	r3, r3, #23
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4ab0      	ldr	r2, [pc, #704]	@ (8009ee8 <MX_ADC1_Init+0x3c0>)
 8009c26:	4013      	ands	r3, r2
 8009c28:	0019      	movs	r1, r3
 8009c2a:	183b      	adds	r3, r7, r0
 8009c2c:	781a      	ldrb	r2, [r3, #0]
 8009c2e:	23a0      	movs	r3, #160	@ 0xa0
 8009c30:	05db      	lsls	r3, r3, #23
 8009c32:	430a      	orrs	r2, r1
 8009c34:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODE7_Msk, val_analog);
 8009c36:	23a0      	movs	r3, #160	@ 0xa0
 8009c38:	05db      	lsls	r3, r3, #23
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4aab      	ldr	r2, [pc, #684]	@ (8009eec <MX_ADC1_Init+0x3c4>)
 8009c3e:	4013      	ands	r3, r2
 8009c40:	0019      	movs	r1, r3
 8009c42:	183b      	adds	r3, r7, r0
 8009c44:	781a      	ldrb	r2, [r3, #0]
 8009c46:	23a0      	movs	r3, #160	@ 0xa0
 8009c48:	05db      	lsls	r3, r3, #23
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPD5_Msk | GPIO_PUPDR_PUPD6_Msk | GPIO_PUPDR_PUPD7_Msk);
 8009c4e:	23a0      	movs	r3, #160	@ 0xa0
 8009c50:	05db      	lsls	r3, r3, #23
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	23a0      	movs	r3, #160	@ 0xa0
 8009c56:	05db      	lsls	r3, r3, #23
 8009c58:	49a5      	ldr	r1, [pc, #660]	@ (8009ef0 <MX_ADC1_Init+0x3c8>)
 8009c5a:	400a      	ands	r2, r1
 8009c5c:	60da      	str	r2, [r3, #12]

	// ---------------------- GPIOB ----------------------
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODE1_Msk, val_analog);
 8009c5e:	4ba5      	ldr	r3, [pc, #660]	@ (8009ef4 <MX_ADC1_Init+0x3cc>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	220c      	movs	r2, #12
 8009c64:	4393      	bics	r3, r2
 8009c66:	0019      	movs	r1, r3
 8009c68:	183b      	adds	r3, r7, r0
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	4ba1      	ldr	r3, [pc, #644]	@ (8009ef4 <MX_ADC1_Init+0x3cc>)
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD1_Msk);
 8009c72:	4ba0      	ldr	r3, [pc, #640]	@ (8009ef4 <MX_ADC1_Init+0x3cc>)
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	4b9f      	ldr	r3, [pc, #636]	@ (8009ef4 <MX_ADC1_Init+0x3cc>)
 8009c78:	210c      	movs	r1, #12
 8009c7a:	438a      	bics	r2, r1
 8009c7c:	60da      	str	r2, [r3, #12]

	//Activar el regulador del ADC
	MODIFY_REG(ADC1->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8009c7e:	4b9e      	ldr	r3, [pc, #632]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	4a9e      	ldr	r2, [pc, #632]	@ (8009efc <MX_ADC1_Init+0x3d4>)
 8009c84:	401a      	ands	r2, r3
 8009c86:	4b9c      	ldr	r3, [pc, #624]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009c88:	2180      	movs	r1, #128	@ 0x80
 8009c8a:	0549      	lsls	r1, r1, #21
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	609a      	str	r2, [r3, #8]

	wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009c90:	4b9b      	ldr	r3, [pc, #620]	@ (8009f00 <MX_ADC1_Init+0x3d8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	499b      	ldr	r1, [pc, #620]	@ (8009f04 <MX_ADC1_Init+0x3dc>)
 8009c96:	0018      	movs	r0, r3
 8009c98:	f7f6 fa3e 	bl	8000118 <__udivsi3>
 8009c9c:	0003      	movs	r3, r0
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	while (wait_loop_index != 0UL)
 8009ca4:	e002      	b.n	8009cac <MX_ADC1_Init+0x184>
	{
		wait_loop_index--;
 8009ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	while (wait_loop_index != 0UL)
 8009cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1f9      	bne.n	8009ca6 <MX_ADC1_Init+0x17e>
	}

	//Llenar el registro ADC_CFGR1

	tmp_cfgr1 |= 	   (ADC_RESOLUTION_10B                         |
 8009cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
	                    ADC_CFGR1_CONTINUOUS((uint32_t)DISABLE)    |
	                    ADC_CFGR1_OVERRUN(ADC_OVR_DATA_PRESERVED)  |
	                    ADC_DATAALIGN_RIGHT                        |
	                    ADC_SCAN_SEQ_MODE(ADC_SCAN_SEQ_FIXED)      |
	                    ADC_CFGR1_DMACONTREQ((uint32_t)DISABLE));
	MODIFY_REG(ADC1->CFGR1,
 8009cba:	4b8f      	ldr	r3, [pc, #572]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4a92      	ldr	r2, [pc, #584]	@ (8009f08 <MX_ADC1_Init+0x3e0>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	0019      	movs	r1, r3
 8009cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	60da      	str	r2, [r3, #12]
	                 ADC_CFGR1_DMACFG,
	                 tmp_cfgr1);

	//Llenar el registro ADC_CFGR2

	tmp_cfgr2 |= ((ADC_CLOCK_SYNC_PCLK_DIV1 & ADC_CFGR2_CKMODE) |
 8009ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cce:	22e0      	movs	r2, #224	@ 0xe0
 8009cd0:	0612      	lsls	r2, r2, #24
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	647b      	str	r3, [r7, #68]	@ 0x44
	                    	ADC_TRIGGER_FREQ_LOW);

	MODIFY_REG(ADC1->CFGR2,
 8009cd6:	4b88      	ldr	r3, [pc, #544]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	4a8c      	ldr	r2, [pc, #560]	@ (8009f0c <MX_ADC1_Init+0x3e4>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	0019      	movs	r1, r3
 8009ce0:	4b85      	ldr	r3, [pc, #532]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	611a      	str	r2, [r3, #16]
	                 ADC_CFGR2_OVSS   |
	                 ADC_CFGR2_TOVS,
	                 tmp_cfgr2);
	//Configuracion de canales

	SET_BIT(ADC1->CHSELR, (ADC_CHANNEL_0 & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009ce8:	4b83      	ldr	r3, [pc, #524]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009cea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cec:	4b82      	ldr	r3, [pc, #520]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009cee:	2101      	movs	r1, #1
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	629a      	str	r2, [r3, #40]	@ 0x28
	SET_BIT(ADC1->CHSELR, (ADC_CHANNEL_1 & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009cf4:	4b80      	ldr	r3, [pc, #512]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009cfa:	2102      	movs	r1, #2
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	629a      	str	r2, [r3, #40]	@ 0x28
	SET_BIT(ADC1->CHSELR, (ADC_CHANNEL_9 & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009d00:	4b7d      	ldr	r3, [pc, #500]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d04:	4b7c      	ldr	r3, [pc, #496]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d06:	2180      	movs	r1, #128	@ 0x80
 8009d08:	0089      	lsls	r1, r1, #2
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	629a      	str	r2, [r3, #40]	@ 0x28
	SET_BIT(ADC1->CHSELR, (ADC_CHANNEL_10 & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d12:	4b79      	ldr	r3, [pc, #484]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d14:	2180      	movs	r1, #128	@ 0x80
 8009d16:	00c9      	lsls	r1, r1, #3
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	629a      	str	r2, [r3, #40]	@ 0x28
	SET_BIT(ADC1->CHSELR, (ADC_CHANNEL_14 & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009d1c:	4b76      	ldr	r3, [pc, #472]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d20:	4b75      	ldr	r3, [pc, #468]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d22:	2180      	movs	r1, #128	@ 0x80
 8009d24:	01c9      	lsls	r1, r1, #7
 8009d26:	430a      	orrs	r2, r1
 8009d28:	629a      	str	r2, [r3, #40]	@ 0x28
	SET_BIT(ADC1->CHSELR, (ADC_CHANNEL_15 & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009d2a:	4b73      	ldr	r3, [pc, #460]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d2e:	4b72      	ldr	r3, [pc, #456]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d30:	2180      	movs	r1, #128	@ 0x80
 8009d32:	0209      	lsls	r1, r1, #8
 8009d34:	430a      	orrs	r2, r1
 8009d36:	629a      	str	r2, [r3, #40]	@ 0x28
	SET_BIT(ADC1->CHSELR, (ADC_CHANNEL_18 & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009d38:	4b6f      	ldr	r3, [pc, #444]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d3c:	4b6e      	ldr	r3, [pc, #440]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009d3e:	2180      	movs	r1, #128	@ 0x80
 8009d40:	02c9      	lsls	r1, r1, #11
 8009d42:	430a      	orrs	r2, r1
 8009d44:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d46:	4b72      	ldr	r3, [pc, #456]	@ (8009f10 <MX_ADC1_Init+0x3e8>)
 8009d48:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8009d4a:	231f      	movs	r3, #31
 8009d4c:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	085b      	lsrs	r3, r3, #1
 8009d56:	61bb      	str	r3, [r7, #24]
 8009d58:	e00e      	b.n	8009d78 <MX_ADC1_Init+0x250>
    result <<= 1U;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	2201      	movs	r2, #1
 8009d64:	4013      	ands	r3, r2
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	613b      	str	r3, [r7, #16]
    s--;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	085b      	lsrs	r3, r3, #1
 8009d76:	61bb      	str	r3, [r7, #24]
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1ed      	bne.n	8009d5a <MX_ADC1_Init+0x232>
  result <<= s;                        /* shift when v's highest bits are zero */
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	409a      	lsls	r2, r3
 8009d84:	0013      	movs	r3, r2
 8009d86:	613b      	str	r3, [r7, #16]
  return result;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <MX_ADC1_Init+0x26e>
    return 32U;
 8009d92:	2320      	movs	r3, #32
 8009d94:	e004      	b.n	8009da0 <MX_ADC1_Init+0x278>
  return __builtin_clz(value);
 8009d96:	69f8      	ldr	r0, [r7, #28]
 8009d98:	f7f6 fb72 	bl	8000480 <__clzsi2>
 8009d9c:	0003      	movs	r3, r0
 8009d9e:	b2db      	uxtb	r3, r3

	//Watch_Dogs

	SET_BIT(ADC1 -> AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(ADC_ANALOGWATCHDOG_2)));
 8009da0:	001a      	movs	r2, r3
 8009da2:	2301      	movs	r3, #1
 8009da4:	4093      	lsls	r3, r2
 8009da6:	001a      	movs	r2, r3
 8009da8:	4953      	ldr	r1, [pc, #332]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009daa:	23a0      	movs	r3, #160	@ 0xa0
 8009dac:	58cb      	ldr	r3, [r1, r3]
 8009dae:	4952      	ldr	r1, [pc, #328]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	22a0      	movs	r2, #160	@ 0xa0
 8009db4:	508b      	str	r3, [r1, r2]
	WRITE_REG(ADC1->ISR, LL_ADC_FLAG_AWD2);
 8009db6:	4b50      	ldr	r3, [pc, #320]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009db8:	2280      	movs	r2, #128	@ 0x80
 8009dba:	0052      	lsls	r2, r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(ADC1->IER, LL_ADC_IT_AWD2);
 8009dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009dc4:	4953      	ldr	r1, [pc, #332]	@ (8009f14 <MX_ADC1_Init+0x3ec>)
 8009dc6:	400a      	ands	r2, r1
 8009dc8:	605a      	str	r2, [r3, #4]

	__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADC1->AWD1TR,
 8009dca:	4b53      	ldr	r3, [pc, #332]	@ (8009f18 <MX_ADC1_Init+0x3f0>)
 8009dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
	                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
	                                             + ((ADC_AWD_CR3_REGOFFSET & ADC_ANALOGWATCHDOG_2)
	                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
	                                            );

	MODIFY_REG(*preg,
 8009dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a52      	ldr	r2, [pc, #328]	@ (8009f1c <MX_ADC1_Init+0x3f4>)
 8009dd4:	401a      	ands	r2, r3
 8009dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd8:	0419      	lsls	r1, r3, #16
 8009dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	431a      	orrs	r2, r3
 8009de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	4b4e      	ldr	r3, [pc, #312]	@ (8009f20 <MX_ADC1_Init+0x3f8>)
 8009de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8009de8:	231f      	movs	r3, #31
 8009dea:	627b      	str	r3, [r7, #36]	@ 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dee:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8009df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df2:	085b      	lsrs	r3, r3, #1
 8009df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009df6:	e00e      	b.n	8009e16 <MX_ADC1_Init+0x2ee>
    result <<= 1U;
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8009dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e00:	2201      	movs	r2, #1
 8009e02:	4013      	ands	r3, r2
 8009e04:	6a3a      	ldr	r2, [r7, #32]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	623b      	str	r3, [r7, #32]
    s--;
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8009e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e12:	085b      	lsrs	r3, r3, #1
 8009e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1ed      	bne.n	8009df8 <MX_ADC1_Init+0x2d0>
  result <<= s;                        /* shift when v's highest bits are zero */
 8009e1c:	6a3a      	ldr	r2, [r7, #32]
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	409a      	lsls	r2, r3
 8009e22:	0013      	movs	r3, r2
 8009e24:	623b      	str	r3, [r7, #32]
  return result;
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8009e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <MX_ADC1_Init+0x30c>
    return 32U;
 8009e30:	2320      	movs	r3, #32
 8009e32:	e004      	b.n	8009e3e <MX_ADC1_Init+0x316>
  return __builtin_clz(value);
 8009e34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e36:	f7f6 fb23 	bl	8000480 <__clzsi2>
 8009e3a:	0003      	movs	r3, r0
 8009e3c:	b2db      	uxtb	r3, r3
	             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
	             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);

	SET_BIT(ADC1->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(ADC_ANALOGWATCHDOG_3)));
 8009e3e:	001a      	movs	r2, r3
 8009e40:	2301      	movs	r3, #1
 8009e42:	4093      	lsls	r3, r2
 8009e44:	001a      	movs	r2, r3
 8009e46:	492c      	ldr	r1, [pc, #176]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009e48:	23a4      	movs	r3, #164	@ 0xa4
 8009e4a:	58cb      	ldr	r3, [r1, r3]
 8009e4c:	492a      	ldr	r1, [pc, #168]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	22a4      	movs	r2, #164	@ 0xa4
 8009e52:	508b      	str	r3, [r1, r2]
	WRITE_REG(ADC1->ISR, LL_ADC_FLAG_AWD3);
 8009e54:	4b28      	ldr	r3, [pc, #160]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009e56:	2280      	movs	r2, #128	@ 0x80
 8009e58:	0092      	lsls	r2, r2, #2
 8009e5a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(ADC1->IER, LL_ADC_IT_AWD3);
 8009e5c:	4b26      	ldr	r3, [pc, #152]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	4b25      	ldr	r3, [pc, #148]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009e62:	4930      	ldr	r1, [pc, #192]	@ (8009f24 <MX_ADC1_Init+0x3fc>)
 8009e64:	400a      	ands	r2, r1
 8009e66:	605a      	str	r2, [r3, #4]

	__IO uint32_t *preg1 = __ADC_PTR_REG_OFFSET(ADC1->AWD1TR,
 8009e68:	4b2f      	ldr	r3, [pc, #188]	@ (8009f28 <MX_ADC1_Init+0x400>)
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
	                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
	                                             + ((ADC_AWD_CR3_REGOFFSET & ADC_ANALOGWATCHDOG_3)
	                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
	                                            );

	MODIFY_REG(*preg1,
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a2a      	ldr	r2, [pc, #168]	@ (8009f1c <MX_ADC1_Init+0x3f4>)
 8009e72:	401a      	ands	r2, r3
 8009e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e76:	0419      	lsls	r1, r3, #16
 8009e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e7a:	430b      	orrs	r3, r1
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e80:	601a      	str	r2, [r3, #0]
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

	  uint32_t backup_setting_cfgr1;
	  uint32_t calibration_index;
	  uint32_t calibration_factor_accumulated = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	657b      	str	r3, [r7, #84]	@ 0x54
	  uint32_t wait_loop_index1 = 0UL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	653b      	str	r3, [r7, #80]	@ 0x50

	  if ((ADC1->CR & ADC_CR_ADEN) == 0UL)
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4013      	ands	r3, r2
 8009e92:	d000      	beq.n	8009e96 <MX_ADC1_Init+0x36e>
 8009e94:	e09d      	b.n	8009fd2 <MX_ADC1_Init+0x4aa>
	  {
	  	backup_setting_cfgr1 = ADC1->CFGR1 & (ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8009e96:	4b18      	ldr	r3, [pc, #96]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	4a24      	ldr	r2, [pc, #144]	@ (8009f2c <MX_ADC1_Init+0x404>)
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	633b      	str	r3, [r7, #48]	@ 0x30
	  	ADC1->CFGR1 &= ~(ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8009ea0:	4b15      	ldr	r3, [pc, #84]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	4b14      	ldr	r3, [pc, #80]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009ea6:	4922      	ldr	r1, [pc, #136]	@ (8009f30 <MX_ADC1_Init+0x408>)
 8009ea8:	400a      	ands	r2, r1
 8009eaa:	60da      	str	r2, [r3, #12]

	     	for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8009eac:	2300      	movs	r3, #0
 8009eae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eb0:	e058      	b.n	8009f64 <MX_ADC1_Init+0x43c>
	      	{
	     		ADC1->CR &= ~ADC_CR_BITS_PROPERTY_RS;    // Limpiar los bits de la propiedad rs
 8009eb2:	4b11      	ldr	r3, [pc, #68]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009eb4:	689a      	ldr	r2, [r3, #8]
 8009eb6:	4b10      	ldr	r3, [pc, #64]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009eb8:	491e      	ldr	r1, [pc, #120]	@ (8009f34 <MX_ADC1_Init+0x40c>)
 8009eba:	400a      	ands	r2, r1
 8009ebc:	609a      	str	r2, [r3, #8]
	     		ADC1->CR |= ADC_CR_ADCAL;                // Establecer el bit ADC_CR_ADCAL para iniciar la calibración
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009ec0:	689a      	ldr	r2, [r3, #8]
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef8 <MX_ADC1_Init+0x3d0>)
 8009ec4:	2180      	movs	r1, #128	@ 0x80
 8009ec6:	0609      	lsls	r1, r1, #24
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	609a      	str	r2, [r3, #8]

	     		while ((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL)
 8009ecc:	e037      	b.n	8009f3e <MX_ADC1_Init+0x416>
 8009ece:	46c0      	nop			@ (mov r8, r8)
 8009ed0:	40021000 	.word	0x40021000
 8009ed4:	cfffffff 	.word	0xcfffffff
 8009ed8:	50000800 	.word	0x50000800
 8009edc:	fffffcff 	.word	0xfffffcff
 8009ee0:	fffffcf0 	.word	0xfffffcf0
 8009ee4:	fffff3ff 	.word	0xfffff3ff
 8009ee8:	ffffcfff 	.word	0xffffcfff
 8009eec:	ffff3fff 	.word	0xffff3fff
 8009ef0:	ffff03ff 	.word	0xffff03ff
 8009ef4:	50000400 	.word	0x50000400
 8009ef8:	40012400 	.word	0x40012400
 8009efc:	6fffffe8 	.word	0x6fffffe8
 8009f00:	2000025c 	.word	0x2000025c
 8009f04:	00030d40 	.word	0x00030d40
 8009f08:	ffde0201 	.word	0xffde0201
 8009f0c:	1ffffc02 	.word	0x1ffffc02
 8009f10:	0017ffff 	.word	0x0017ffff
 8009f14:	fffffeff 	.word	0xfffffeff
 8009f18:	40012424 	.word	0x40012424
 8009f1c:	f000f000 	.word	0xf000f000
 8009f20:	0027ffff 	.word	0x0027ffff
 8009f24:	fffffdff 	.word	0xfffffdff
 8009f28:	4001242c 	.word	0x4001242c
 8009f2c:	00008003 	.word	0x00008003
 8009f30:	ffff7ffc 	.word	0xffff7ffc
 8009f34:	7fffffe8 	.word	0x7fffffe8
	     		{
	     			wait_loop_index1++;
 8009f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	653b      	str	r3, [r7, #80]	@ 0x50
	     		while ((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL)
 8009f3e:	4b27      	ldr	r3, [pc, #156]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	0fdb      	lsrs	r3, r3, #31
 8009f44:	07da      	lsls	r2, r3, #31
 8009f46:	2380      	movs	r3, #128	@ 0x80
 8009f48:	061b      	lsls	r3, r3, #24
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d0f4      	beq.n	8009f38 <MX_ADC1_Init+0x410>
	     		}

	     		calibration_factor_accumulated += ADC1->CALFACT & ADC_CALFACT_CALFACT;
 8009f4e:	4a23      	ldr	r2, [pc, #140]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f50:	23b4      	movs	r3, #180	@ 0xb4
 8009f52:	58d3      	ldr	r3, [r2, r3]
 8009f54:	227f      	movs	r2, #127	@ 0x7f
 8009f56:	4013      	ands	r3, r2
 8009f58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f5a:	18d3      	adds	r3, r2, r3
 8009f5c:	657b      	str	r3, [r7, #84]	@ 0x54
	     	for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8009f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f60:	3301      	adds	r3, #1
 8009f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f66:	2b07      	cmp	r3, #7
 8009f68:	d9a3      	bls.n	8009eb2 <MX_ADC1_Init+0x38a>
	      	}
	  	calibration_factor_accumulated /= calibration_index;
 8009f6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f6c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009f6e:	f7f6 f8d3 	bl	8000118 <__udivsi3>
 8009f72:	0003      	movs	r3, r0
 8009f74:	657b      	str	r3, [r7, #84]	@ 0x54

	  	ADC1->CR &= ~ADC_CR_BITS_PROPERTY_RS;    // Limpiar los bits de la propiedad rs
 8009f76:	4b19      	ldr	r3, [pc, #100]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	4b18      	ldr	r3, [pc, #96]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f7c:	4918      	ldr	r1, [pc, #96]	@ (8009fe0 <MX_ADC1_Init+0x4b8>)
 8009f7e:	400a      	ands	r2, r1
 8009f80:	609a      	str	r2, [r3, #8]
	  	ADC1->CR |= ADC_CR_ADEN;                  // Establecer el bit ADC_CR_ADEN para habilitar el ADC
 8009f82:	4b16      	ldr	r3, [pc, #88]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	4b15      	ldr	r3, [pc, #84]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f88:	2101      	movs	r1, #1
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	609a      	str	r2, [r3, #8]


	  	ADC1->CALFACT &= ~ADC_CALFACT_CALFACT;         // Limpiar los bits de calibración existentes
 8009f8e:	4a13      	ldr	r2, [pc, #76]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f90:	23b4      	movs	r3, #180	@ 0xb4
 8009f92:	58d3      	ldr	r3, [r2, r3]
 8009f94:	4911      	ldr	r1, [pc, #68]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009f96:	227f      	movs	r2, #127	@ 0x7f
 8009f98:	4393      	bics	r3, r2
 8009f9a:	22b4      	movs	r2, #180	@ 0xb4
 8009f9c:	508b      	str	r3, [r1, r2]
	  	ADC1->CALFACT |= calibration_factor_accumulated; // Establecer el nuevo factor de calibración
 8009f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fa0:	23b4      	movs	r3, #180	@ 0xb4
 8009fa2:	58d2      	ldr	r2, [r2, r3]
 8009fa4:	490d      	ldr	r1, [pc, #52]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	22b4      	movs	r2, #180	@ 0xb4
 8009fac:	508b      	str	r3, [r1, r2]


	  	ADC1->CR &= ~ADC_CR_BITS_PROPERTY_RS;     // Limpiar los bits de la propiedad rs
 8009fae:	4b0b      	ldr	r3, [pc, #44]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fb0:	689a      	ldr	r2, [r3, #8]
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fb4:	490a      	ldr	r1, [pc, #40]	@ (8009fe0 <MX_ADC1_Init+0x4b8>)
 8009fb6:	400a      	ands	r2, r1
 8009fb8:	609a      	str	r2, [r3, #8]
	  	ADC1->CR |= ADC_CR_ADDIS;                  // Establecer el bit ADC_CR_ADDIS para deshabilitar el ADC
 8009fba:	4b08      	ldr	r3, [pc, #32]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fbc:	689a      	ldr	r2, [r3, #8]
 8009fbe:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fc0:	2102      	movs	r1, #2
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	609a      	str	r2, [r3, #8]

	  	ADC1->CFGR1 |= backup_setting_cfgr1;  // Establecer los bits de CFGR1 según el valor de backup_setting_cfgr1
 8009fc6:	4b05      	ldr	r3, [pc, #20]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fc8:	68d9      	ldr	r1, [r3, #12]
 8009fca:	4b04      	ldr	r3, [pc, #16]	@ (8009fdc <MX_ADC1_Init+0x4b4>)
 8009fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	60da      	str	r2, [r3, #12]
	  }
  /* USER CODE END ADC1_Init 2 */

}
 8009fd2:	46c0      	nop			@ (mov r8, r8)
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	b018      	add	sp, #96	@ 0x60
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	46c0      	nop			@ (mov r8, r8)
 8009fdc:	40012400 	.word	0x40012400
 8009fe0:	7fffffe8 	.word	0x7fffffe8

08009fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800a05c <MX_I2C1_Init+0x78>)
 8009fea:	4a1d      	ldr	r2, [pc, #116]	@ (800a060 <MX_I2C1_Init+0x7c>)
 8009fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 8009fee:	4b1b      	ldr	r3, [pc, #108]	@ (800a05c <MX_I2C1_Init+0x78>)
 8009ff0:	4a1c      	ldr	r2, [pc, #112]	@ (800a064 <MX_I2C1_Init+0x80>)
 8009ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009ff4:	4b19      	ldr	r3, [pc, #100]	@ (800a05c <MX_I2C1_Init+0x78>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009ffa:	4b18      	ldr	r3, [pc, #96]	@ (800a05c <MX_I2C1_Init+0x78>)
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a000:	4b16      	ldr	r3, [pc, #88]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a002:	2200      	movs	r2, #0
 800a004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a006:	4b15      	ldr	r3, [pc, #84]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a008:	2200      	movs	r2, #0
 800a00a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a00c:	4b13      	ldr	r3, [pc, #76]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a00e:	2200      	movs	r2, #0
 800a010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a012:	4b12      	ldr	r3, [pc, #72]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a014:	2200      	movs	r2, #0
 800a016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a018:	4b10      	ldr	r3, [pc, #64]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a01e:	4b0f      	ldr	r3, [pc, #60]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a020:	0018      	movs	r0, r3
 800a022:	f009 f9d5 	bl	80133d0 <HAL_I2C_Init>
 800a026:	1e03      	subs	r3, r0, #0
 800a028:	d001      	beq.n	800a02e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a02a:	f000 fbc1 	bl	800a7b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800a02e:	2380      	movs	r3, #128	@ 0x80
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	4b0a      	ldr	r3, [pc, #40]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a034:	0011      	movs	r1, r2
 800a036:	0018      	movs	r0, r3
 800a038:	f00b fa7c 	bl	8015534 <HAL_I2CEx_ConfigAnalogFilter>
 800a03c:	1e03      	subs	r3, r0, #0
 800a03e:	d001      	beq.n	800a044 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800a040:	f000 fbb6 	bl	800a7b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a044:	4b05      	ldr	r3, [pc, #20]	@ (800a05c <MX_I2C1_Init+0x78>)
 800a046:	2100      	movs	r1, #0
 800a048:	0018      	movs	r0, r3
 800a04a:	f00b fabf 	bl	80155cc <HAL_I2CEx_ConfigDigitalFilter>
 800a04e:	1e03      	subs	r3, r0, #0
 800a050:	d001      	beq.n	800a056 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800a052:	f000 fbad 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a056:	46c0      	nop			@ (mov r8, r8)
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	200003ec 	.word	0x200003ec
 800a060:	40005400 	.word	0x40005400
 800a064:	201060ff 	.word	0x201060ff

0800a068 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a06c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a4 <MX_IWDG_Init+0x3c>)
 800a06e:	4a0e      	ldr	r2, [pc, #56]	@ (800a0a8 <MX_IWDG_Init+0x40>)
 800a070:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800a072:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a4 <MX_IWDG_Init+0x3c>)
 800a074:	2200      	movs	r2, #0
 800a076:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 800;
 800a078:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a4 <MX_IWDG_Init+0x3c>)
 800a07a:	22c8      	movs	r2, #200	@ 0xc8
 800a07c:	0092      	lsls	r2, r2, #2
 800a07e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 800;
 800a080:	4b08      	ldr	r3, [pc, #32]	@ (800a0a4 <MX_IWDG_Init+0x3c>)
 800a082:	22c8      	movs	r2, #200	@ 0xc8
 800a084:	0092      	lsls	r2, r2, #2
 800a086:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 800a088:	4b06      	ldr	r3, [pc, #24]	@ (800a0a4 <MX_IWDG_Init+0x3c>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a08e:	4b05      	ldr	r3, [pc, #20]	@ (800a0a4 <MX_IWDG_Init+0x3c>)
 800a090:	0018      	movs	r0, r3
 800a092:	f00b fae7 	bl	8015664 <HAL_IWDG_Init>
 800a096:	1e03      	subs	r3, r0, #0
 800a098:	d001      	beq.n	800a09e <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 800a09a:	f000 fb89 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a09e:	46c0      	nop			@ (mov r8, r8)
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20000500 	.word	0x20000500
 800a0a8:	40003000 	.word	0x40003000

0800a0ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */


  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a0b2:	1d3b      	adds	r3, r7, #4
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	2314      	movs	r3, #20
 800a0b8:	001a      	movs	r2, r3
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	f010 fd2a 	bl	801ab14 <memset>
  RTC_DateTypeDef sDate = {0};
 800a0c0:	003b      	movs	r3, r7
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a0c6:	4b2d      	ldr	r3, [pc, #180]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0c8:	4a2d      	ldr	r2, [pc, #180]	@ (800a180 <MX_RTC_Init+0xd4>)
 800a0ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a0cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a0d2:	4b2a      	ldr	r3, [pc, #168]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0d4:	227f      	movs	r2, #127	@ 0x7f
 800a0d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a0d8:	4b28      	ldr	r3, [pc, #160]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0da:	22ff      	movs	r2, #255	@ 0xff
 800a0dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a0de:	4b27      	ldr	r3, [pc, #156]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a0e4:	4b25      	ldr	r3, [pc, #148]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a0ea:	4b24      	ldr	r3, [pc, #144]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a0f0:	4b22      	ldr	r3, [pc, #136]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0f2:	2280      	movs	r2, #128	@ 0x80
 800a0f4:	05d2      	lsls	r2, r2, #23
 800a0f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a0f8:	4b20      	ldr	r3, [pc, #128]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800a0fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a100:	2200      	movs	r2, #0
 800a102:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a104:	4b1d      	ldr	r3, [pc, #116]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a106:	0018      	movs	r0, r3
 800a108:	f00d fa64 	bl	80175d4 <HAL_RTC_Init>
 800a10c:	1e03      	subs	r3, r0, #0
 800a10e:	d001      	beq.n	800a114 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 800a110:	f000 fb4e 	bl	800a7b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800a114:	1d3b      	adds	r3, r7, #4
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800a11a:	1d3b      	adds	r3, r7, #4
 800a11c:	2200      	movs	r2, #0
 800a11e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800a120:	1d3b      	adds	r3, r7, #4
 800a122:	2200      	movs	r2, #0
 800a124:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a126:	1d3b      	adds	r3, r7, #4
 800a128:	2200      	movs	r2, #0
 800a12a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a12c:	1d3b      	adds	r3, r7, #4
 800a12e:	2200      	movs	r2, #0
 800a130:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a132:	1d39      	adds	r1, r7, #4
 800a134:	4b11      	ldr	r3, [pc, #68]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a136:	2201      	movs	r2, #1
 800a138:	0018      	movs	r0, r3
 800a13a:	f00d faf1 	bl	8017720 <HAL_RTC_SetTime>
 800a13e:	1e03      	subs	r3, r0, #0
 800a140:	d001      	beq.n	800a146 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800a142:	f000 fb35 	bl	800a7b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a146:	003b      	movs	r3, r7
 800a148:	2201      	movs	r2, #1
 800a14a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800a14c:	003b      	movs	r3, r7
 800a14e:	2201      	movs	r2, #1
 800a150:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800a152:	003b      	movs	r3, r7
 800a154:	2201      	movs	r2, #1
 800a156:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800a158:	003b      	movs	r3, r7
 800a15a:	2200      	movs	r2, #0
 800a15c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a15e:	0039      	movs	r1, r7
 800a160:	4b06      	ldr	r3, [pc, #24]	@ (800a17c <MX_RTC_Init+0xd0>)
 800a162:	2201      	movs	r2, #1
 800a164:	0018      	movs	r0, r3
 800a166:	f00d fb9b 	bl	80178a0 <HAL_RTC_SetDate>
 800a16a:	1e03      	subs	r3, r0, #0
 800a16c:	d001      	beq.n	800a172 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800a16e:	f000 fb1f 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a172:	46c0      	nop			@ (mov r8, r8)
 800a174:	46bd      	mov	sp, r7
 800a176:	b006      	add	sp, #24
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	46c0      	nop			@ (mov r8, r8)
 800a17c:	20000514 	.word	0x20000514
 800a180:	40002800 	.word	0x40002800

0800a184 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b09c      	sub	sp, #112	@ 0x70
 800a188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a18a:	2360      	movs	r3, #96	@ 0x60
 800a18c:	18fb      	adds	r3, r7, r3
 800a18e:	0018      	movs	r0, r3
 800a190:	2310      	movs	r3, #16
 800a192:	001a      	movs	r2, r3
 800a194:	2100      	movs	r1, #0
 800a196:	f010 fcbd 	bl	801ab14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a19a:	2354      	movs	r3, #84	@ 0x54
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	0018      	movs	r0, r3
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	001a      	movs	r2, r3
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	f010 fcb5 	bl	801ab14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1aa:	2338      	movs	r3, #56	@ 0x38
 800a1ac:	18fb      	adds	r3, r7, r3
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	231c      	movs	r3, #28
 800a1b2:	001a      	movs	r2, r3
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	f010 fcad 	bl	801ab14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a1ba:	1d3b      	adds	r3, r7, #4
 800a1bc:	0018      	movs	r0, r3
 800a1be:	2334      	movs	r3, #52	@ 0x34
 800a1c0:	001a      	movs	r2, r3
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	f010 fca6 	bl	801ab14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a1c8:	4b51      	ldr	r3, [pc, #324]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1ca:	4a52      	ldr	r2, [pc, #328]	@ (800a314 <MX_TIM1_Init+0x190>)
 800a1cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a1ce:	4b50      	ldr	r3, [pc, #320]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1d4:	4b4e      	ldr	r3, [pc, #312]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14000;
 800a1da:	4b4d      	ldr	r3, [pc, #308]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1dc:	4a4e      	ldr	r2, [pc, #312]	@ (800a318 <MX_TIM1_Init+0x194>)
 800a1de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1e0:	4b4b      	ldr	r3, [pc, #300]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a1e6:	4b4a      	ldr	r3, [pc, #296]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1ec:	4b48      	ldr	r3, [pc, #288]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a1f2:	4b47      	ldr	r3, [pc, #284]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f00d fd61 	bl	8017cbc <HAL_TIM_Base_Init>
 800a1fa:	1e03      	subs	r3, r0, #0
 800a1fc:	d001      	beq.n	800a202 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800a1fe:	f000 fad7 	bl	800a7b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a202:	2160      	movs	r1, #96	@ 0x60
 800a204:	187b      	adds	r3, r7, r1
 800a206:	2280      	movs	r2, #128	@ 0x80
 800a208:	0152      	lsls	r2, r2, #5
 800a20a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a20c:	187a      	adds	r2, r7, r1
 800a20e:	4b40      	ldr	r3, [pc, #256]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a210:	0011      	movs	r1, r2
 800a212:	0018      	movs	r0, r3
 800a214:	f00e f872 	bl	80182fc <HAL_TIM_ConfigClockSource>
 800a218:	1e03      	subs	r3, r0, #0
 800a21a:	d001      	beq.n	800a220 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800a21c:	f000 fac8 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a220:	4b3b      	ldr	r3, [pc, #236]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a222:	0018      	movs	r0, r3
 800a224:	f00d fda2 	bl	8017d6c <HAL_TIM_PWM_Init>
 800a228:	1e03      	subs	r3, r0, #0
 800a22a:	d001      	beq.n	800a230 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800a22c:	f000 fac0 	bl	800a7b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a230:	2154      	movs	r1, #84	@ 0x54
 800a232:	187b      	adds	r3, r7, r1
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a238:	187b      	adds	r3, r7, r1
 800a23a:	2200      	movs	r2, #0
 800a23c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a23e:	187b      	adds	r3, r7, r1
 800a240:	2200      	movs	r2, #0
 800a242:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a244:	187a      	adds	r2, r7, r1
 800a246:	4b32      	ldr	r3, [pc, #200]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a248:	0011      	movs	r1, r2
 800a24a:	0018      	movs	r0, r3
 800a24c:	f00e fd0c 	bl	8018c68 <HAL_TIMEx_MasterConfigSynchronization>
 800a250:	1e03      	subs	r3, r0, #0
 800a252:	d001      	beq.n	800a258 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800a254:	f000 faac 	bl	800a7b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a258:	2138      	movs	r1, #56	@ 0x38
 800a25a:	187b      	adds	r3, r7, r1
 800a25c:	2260      	movs	r2, #96	@ 0x60
 800a25e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7000;
 800a260:	187b      	adds	r3, r7, r1
 800a262:	4a2e      	ldr	r2, [pc, #184]	@ (800a31c <MX_TIM1_Init+0x198>)
 800a264:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a266:	187b      	adds	r3, r7, r1
 800a268:	2200      	movs	r2, #0
 800a26a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a26c:	187b      	adds	r3, r7, r1
 800a26e:	2200      	movs	r2, #0
 800a270:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a272:	187b      	adds	r3, r7, r1
 800a274:	2200      	movs	r2, #0
 800a276:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a278:	187b      	adds	r3, r7, r1
 800a27a:	2200      	movs	r2, #0
 800a27c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a27e:	187b      	adds	r3, r7, r1
 800a280:	2200      	movs	r2, #0
 800a282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a284:	1879      	adds	r1, r7, r1
 800a286:	4b22      	ldr	r3, [pc, #136]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a288:	2208      	movs	r2, #8
 800a28a:	0018      	movs	r0, r3
 800a28c:	f00d ff36 	bl	80180fc <HAL_TIM_PWM_ConfigChannel>
 800a290:	1e03      	subs	r3, r0, #0
 800a292:	d001      	beq.n	800a298 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800a294:	f000 fa8c 	bl	800a7b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a298:	1d3b      	adds	r3, r7, #4
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a29e:	1d3b      	adds	r3, r7, #4
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a2a4:	1d3b      	adds	r3, r7, #4
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a2aa:	1d3b      	adds	r3, r7, #4
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a2b0:	1d3b      	adds	r3, r7, #4
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a2b6:	1d3b      	adds	r3, r7, #4
 800a2b8:	2280      	movs	r2, #128	@ 0x80
 800a2ba:	0192      	lsls	r2, r2, #6
 800a2bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a2be:	1d3b      	adds	r3, r7, #4
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a2c4:	1d3b      	adds	r3, r7, #4
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a2ca:	1d3b      	adds	r3, r7, #4
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a2d0:	1d3b      	adds	r3, r7, #4
 800a2d2:	2280      	movs	r2, #128	@ 0x80
 800a2d4:	0492      	lsls	r2, r2, #18
 800a2d6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a2d8:	1d3b      	adds	r3, r7, #4
 800a2da:	2200      	movs	r2, #0
 800a2dc:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a2de:	1d3b      	adds	r3, r7, #4
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a2e4:	1d3b      	adds	r3, r7, #4
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a2ea:	1d3a      	adds	r2, r7, #4
 800a2ec:	4b08      	ldr	r3, [pc, #32]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a2ee:	0011      	movs	r1, r2
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f00e fd27 	bl	8018d44 <HAL_TIMEx_ConfigBreakDeadTime>
 800a2f6:	1e03      	subs	r3, r0, #0
 800a2f8:	d001      	beq.n	800a2fe <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800a2fa:	f000 fa59 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a2fe:	4b04      	ldr	r3, [pc, #16]	@ (800a310 <MX_TIM1_Init+0x18c>)
 800a300:	0018      	movs	r0, r3
 800a302:	f002 f8dd 	bl	800c4c0 <HAL_TIM_MspPostInit>

}
 800a306:	46c0      	nop			@ (mov r8, r8)
 800a308:	46bd      	mov	sp, r7
 800a30a:	b01c      	add	sp, #112	@ 0x70
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	46c0      	nop			@ (mov r8, r8)
 800a310:	20000544 	.word	0x20000544
 800a314:	40012c00 	.word	0x40012c00
 800a318:	000036b0 	.word	0x000036b0
 800a31c:	00001b58 	.word	0x00001b58

0800a320 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08e      	sub	sp, #56	@ 0x38
 800a324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a326:	2328      	movs	r3, #40	@ 0x28
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	0018      	movs	r0, r3
 800a32c:	2310      	movs	r3, #16
 800a32e:	001a      	movs	r2, r3
 800a330:	2100      	movs	r1, #0
 800a332:	f010 fbef 	bl	801ab14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a336:	231c      	movs	r3, #28
 800a338:	18fb      	adds	r3, r7, r3
 800a33a:	0018      	movs	r0, r3
 800a33c:	230c      	movs	r3, #12
 800a33e:	001a      	movs	r2, r3
 800a340:	2100      	movs	r1, #0
 800a342:	f010 fbe7 	bl	801ab14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a346:	003b      	movs	r3, r7
 800a348:	0018      	movs	r0, r3
 800a34a:	231c      	movs	r3, #28
 800a34c:	001a      	movs	r2, r3
 800a34e:	2100      	movs	r1, #0
 800a350:	f010 fbe0 	bl	801ab14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a354:	4b2f      	ldr	r3, [pc, #188]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a356:	4a30      	ldr	r2, [pc, #192]	@ (800a418 <MX_TIM3_Init+0xf8>)
 800a358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a35a:	4b2e      	ldr	r3, [pc, #184]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a360:	4b2c      	ldr	r3, [pc, #176]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a362:	2200      	movs	r2, #0
 800a364:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14000;
 800a366:	4b2b      	ldr	r3, [pc, #172]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a368:	4a2c      	ldr	r2, [pc, #176]	@ (800a41c <MX_TIM3_Init+0xfc>)
 800a36a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a36c:	4b29      	ldr	r3, [pc, #164]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a36e:	2200      	movs	r2, #0
 800a370:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a372:	4b28      	ldr	r3, [pc, #160]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a374:	2200      	movs	r2, #0
 800a376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a378:	4b26      	ldr	r3, [pc, #152]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a37a:	0018      	movs	r0, r3
 800a37c:	f00d fc9e 	bl	8017cbc <HAL_TIM_Base_Init>
 800a380:	1e03      	subs	r3, r0, #0
 800a382:	d001      	beq.n	800a388 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800a384:	f000 fa14 	bl	800a7b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a388:	2128      	movs	r1, #40	@ 0x28
 800a38a:	187b      	adds	r3, r7, r1
 800a38c:	2280      	movs	r2, #128	@ 0x80
 800a38e:	0152      	lsls	r2, r2, #5
 800a390:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a392:	187a      	adds	r2, r7, r1
 800a394:	4b1f      	ldr	r3, [pc, #124]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a396:	0011      	movs	r1, r2
 800a398:	0018      	movs	r0, r3
 800a39a:	f00d ffaf 	bl	80182fc <HAL_TIM_ConfigClockSource>
 800a39e:	1e03      	subs	r3, r0, #0
 800a3a0:	d001      	beq.n	800a3a6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800a3a2:	f000 fa05 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a3a6:	4b1b      	ldr	r3, [pc, #108]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f00d fcdf 	bl	8017d6c <HAL_TIM_PWM_Init>
 800a3ae:	1e03      	subs	r3, r0, #0
 800a3b0:	d001      	beq.n	800a3b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800a3b2:	f000 f9fd 	bl	800a7b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a3b6:	211c      	movs	r1, #28
 800a3b8:	187b      	adds	r3, r7, r1
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3be:	187b      	adds	r3, r7, r1
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a3c4:	187a      	adds	r2, r7, r1
 800a3c6:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a3c8:	0011      	movs	r1, r2
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f00e fc4c 	bl	8018c68 <HAL_TIMEx_MasterConfigSynchronization>
 800a3d0:	1e03      	subs	r3, r0, #0
 800a3d2:	d001      	beq.n	800a3d8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800a3d4:	f000 f9ec 	bl	800a7b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a3d8:	003b      	movs	r3, r7
 800a3da:	2260      	movs	r2, #96	@ 0x60
 800a3dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7000;
 800a3de:	003b      	movs	r3, r7
 800a3e0:	4a0f      	ldr	r2, [pc, #60]	@ (800a420 <MX_TIM3_Init+0x100>)
 800a3e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a3e4:	003b      	movs	r3, r7
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3ea:	003b      	movs	r3, r7
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a3f0:	0039      	movs	r1, r7
 800a3f2:	4b08      	ldr	r3, [pc, #32]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a3f4:	2204      	movs	r2, #4
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f00d fe80 	bl	80180fc <HAL_TIM_PWM_ConfigChannel>
 800a3fc:	1e03      	subs	r3, r0, #0
 800a3fe:	d001      	beq.n	800a404 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800a400:	f000 f9d6 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a404:	4b03      	ldr	r3, [pc, #12]	@ (800a414 <MX_TIM3_Init+0xf4>)
 800a406:	0018      	movs	r0, r3
 800a408:	f002 f85a 	bl	800c4c0 <HAL_TIM_MspPostInit>

}
 800a40c:	46c0      	nop			@ (mov r8, r8)
 800a40e:	46bd      	mov	sp, r7
 800a410:	b00e      	add	sp, #56	@ 0x38
 800a412:	bd80      	pop	{r7, pc}
 800a414:	20000590 	.word	0x20000590
 800a418:	40000400 	.word	0x40000400
 800a41c:	000036b0 	.word	0x000036b0
 800a420:	00001b58 	.word	0x00001b58

0800a424 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a42a:	1d3b      	adds	r3, r7, #4
 800a42c:	0018      	movs	r0, r3
 800a42e:	230c      	movs	r3, #12
 800a430:	001a      	movs	r2, r3
 800a432:	2100      	movs	r1, #0
 800a434:	f010 fb6e 	bl	801ab14 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a438:	4b18      	ldr	r3, [pc, #96]	@ (800a49c <MX_TIM6_Init+0x78>)
 800a43a:	4a19      	ldr	r2, [pc, #100]	@ (800a4a0 <MX_TIM6_Init+0x7c>)
 800a43c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 800a43e:	4b17      	ldr	r3, [pc, #92]	@ (800a49c <MX_TIM6_Init+0x78>)
 800a440:	221f      	movs	r2, #31
 800a442:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a444:	4b15      	ldr	r3, [pc, #84]	@ (800a49c <MX_TIM6_Init+0x78>)
 800a446:	2200      	movs	r2, #0
 800a448:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 438;
 800a44a:	4b14      	ldr	r3, [pc, #80]	@ (800a49c <MX_TIM6_Init+0x78>)
 800a44c:	22db      	movs	r2, #219	@ 0xdb
 800a44e:	0052      	lsls	r2, r2, #1
 800a450:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a452:	4b12      	ldr	r3, [pc, #72]	@ (800a49c <MX_TIM6_Init+0x78>)
 800a454:	2200      	movs	r2, #0
 800a456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a458:	4b10      	ldr	r3, [pc, #64]	@ (800a49c <MX_TIM6_Init+0x78>)
 800a45a:	0018      	movs	r0, r3
 800a45c:	f00d fc2e 	bl	8017cbc <HAL_TIM_Base_Init>
 800a460:	1e03      	subs	r3, r0, #0
 800a462:	d001      	beq.n	800a468 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 800a464:	f000 f9a4 	bl	800a7b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a468:	1d3b      	adds	r3, r7, #4
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a46e:	1d3b      	adds	r3, r7, #4
 800a470:	2200      	movs	r2, #0
 800a472:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a474:	1d3a      	adds	r2, r7, #4
 800a476:	4b09      	ldr	r3, [pc, #36]	@ (800a49c <MX_TIM6_Init+0x78>)
 800a478:	0011      	movs	r1, r2
 800a47a:	0018      	movs	r0, r3
 800a47c:	f00e fbf4 	bl	8018c68 <HAL_TIMEx_MasterConfigSynchronization>
 800a480:	1e03      	subs	r3, r0, #0
 800a482:	d001      	beq.n	800a488 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 800a484:	f000 f994 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 800a488:	4b05      	ldr	r3, [pc, #20]	@ (800a4a0 <MX_TIM6_Init+0x7c>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	4b04      	ldr	r3, [pc, #16]	@ (800a4a0 <MX_TIM6_Init+0x7c>)
 800a48e:	2101      	movs	r1, #1
 800a490:	430a      	orrs	r2, r1
 800a492:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 800a494:	46c0      	nop			@ (mov r8, r8)
 800a496:	46bd      	mov	sp, r7
 800a498:	b004      	add	sp, #16
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	200005dc 	.word	0x200005dc
 800a4a0:	40001000 	.word	0x40001000

0800a4a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a4a8:	4b23      	ldr	r3, [pc, #140]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4aa:	4a24      	ldr	r2, [pc, #144]	@ (800a53c <MX_USART2_UART_Init+0x98>)
 800a4ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a4ae:	4b22      	ldr	r3, [pc, #136]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4b0:	22e1      	movs	r2, #225	@ 0xe1
 800a4b2:	0252      	lsls	r2, r2, #9
 800a4b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a4b6:	4b20      	ldr	r3, [pc, #128]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a4bc:	4b1e      	ldr	r3, [pc, #120]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4ca:	220c      	movs	r2, #12
 800a4cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4d4:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a4da:	4b17      	ldr	r3, [pc, #92]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a4e0:	4b15      	ldr	r3, [pc, #84]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a4e6:	4b14      	ldr	r3, [pc, #80]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a4ec:	4b12      	ldr	r3, [pc, #72]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4ee:	0018      	movs	r0, r3
 800a4f0:	f00e fcc4 	bl	8018e7c <HAL_UART_Init>
 800a4f4:	1e03      	subs	r3, r0, #0
 800a4f6:	d001      	beq.n	800a4fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a4f8:	f000 f95a 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a4fe:	2100      	movs	r1, #0
 800a500:	0018      	movs	r0, r3
 800a502:	f010 f953 	bl	801a7ac <HAL_UARTEx_SetTxFifoThreshold>
 800a506:	1e03      	subs	r3, r0, #0
 800a508:	d001      	beq.n	800a50e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a50a:	f000 f951 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a50e:	4b0a      	ldr	r3, [pc, #40]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a510:	2100      	movs	r1, #0
 800a512:	0018      	movs	r0, r3
 800a514:	f010 f98a 	bl	801a82c <HAL_UARTEx_SetRxFifoThreshold>
 800a518:	1e03      	subs	r3, r0, #0
 800a51a:	d001      	beq.n	800a520 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a51c:	f000 f948 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a520:	4b05      	ldr	r3, [pc, #20]	@ (800a538 <MX_USART2_UART_Init+0x94>)
 800a522:	0018      	movs	r0, r3
 800a524:	f010 f908 	bl	801a738 <HAL_UARTEx_DisableFifoMode>
 800a528:	1e03      	subs	r3, r0, #0
 800a52a:	d001      	beq.n	800a530 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a52c:	f000 f940 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a530:	46c0      	nop			@ (mov r8, r8)
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	46c0      	nop			@ (mov r8, r8)
 800a538:	20000628 	.word	0x20000628
 800a53c:	40004400 	.word	0x40004400

0800a540 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800a544:	4b24      	ldr	r3, [pc, #144]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a546:	4a25      	ldr	r2, [pc, #148]	@ (800a5dc <MX_USART4_UART_Init+0x9c>)
 800a548:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800a54a:	4b23      	ldr	r3, [pc, #140]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a54c:	2296      	movs	r2, #150	@ 0x96
 800a54e:	0212      	lsls	r2, r2, #8
 800a550:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800a552:	4b21      	ldr	r3, [pc, #132]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a554:	2280      	movs	r2, #128	@ 0x80
 800a556:	0152      	lsls	r2, r2, #5
 800a558:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a55a:	4b1f      	ldr	r3, [pc, #124]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800a560:	4b1d      	ldr	r3, [pc, #116]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a562:	2280      	movs	r2, #128	@ 0x80
 800a564:	00d2      	lsls	r2, r2, #3
 800a566:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a568:	4b1b      	ldr	r3, [pc, #108]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a56a:	220c      	movs	r2, #12
 800a56c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a56e:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a570:	2200      	movs	r2, #0
 800a572:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a574:	4b18      	ldr	r3, [pc, #96]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a576:	2200      	movs	r2, #0
 800a578:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a57a:	4b17      	ldr	r3, [pc, #92]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a580:	4b15      	ldr	r3, [pc, #84]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a582:	2200      	movs	r2, #0
 800a584:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a586:	4b14      	ldr	r3, [pc, #80]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a588:	2200      	movs	r2, #0
 800a58a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a58c:	4b12      	ldr	r3, [pc, #72]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a58e:	0018      	movs	r0, r3
 800a590:	f00e fc74 	bl	8018e7c <HAL_UART_Init>
 800a594:	1e03      	subs	r3, r0, #0
 800a596:	d001      	beq.n	800a59c <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 800a598:	f000 f90a 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a59c:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a59e:	2100      	movs	r1, #0
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	f010 f903 	bl	801a7ac <HAL_UARTEx_SetTxFifoThreshold>
 800a5a6:	1e03      	subs	r3, r0, #0
 800a5a8:	d001      	beq.n	800a5ae <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 800a5aa:	f000 f901 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f010 f93a 	bl	801a82c <HAL_UARTEx_SetRxFifoThreshold>
 800a5b8:	1e03      	subs	r3, r0, #0
 800a5ba:	d001      	beq.n	800a5c0 <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 800a5bc:	f000 f8f8 	bl	800a7b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800a5c0:	4b05      	ldr	r3, [pc, #20]	@ (800a5d8 <MX_USART4_UART_Init+0x98>)
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f010 f8b8 	bl	801a738 <HAL_UARTEx_DisableFifoMode>
 800a5c8:	1e03      	subs	r3, r0, #0
 800a5ca:	d001      	beq.n	800a5d0 <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 800a5cc:	f000 f8f0 	bl	800a7b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a5d0:	46c0      	nop			@ (mov r8, r8)
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	46c0      	nop			@ (mov r8, r8)
 800a5d8:	200006bc 	.word	0x200006bc
 800a5dc:	40004c00 	.word	0x40004c00

0800a5e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a5e6:	4b10      	ldr	r3, [pc, #64]	@ (800a628 <MX_DMA_Init+0x48>)
 800a5e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a628 <MX_DMA_Init+0x48>)
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	649a      	str	r2, [r3, #72]	@ 0x48
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a628 <MX_DMA_Init+0x48>)
 800a5f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	607b      	str	r3, [r7, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a5fe:	2200      	movs	r2, #0
 800a600:	2100      	movs	r1, #0
 800a602:	200a      	movs	r0, #10
 800a604:	f007 fe2a 	bl	801225c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a608:	200a      	movs	r0, #10
 800a60a:	f007 fe3c 	bl	8012286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 800a60e:	2200      	movs	r2, #0
 800a610:	2100      	movs	r1, #0
 800a612:	200b      	movs	r0, #11
 800a614:	f007 fe22 	bl	801225c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a618:	200b      	movs	r0, #11
 800a61a:	f007 fe34 	bl	8012286 <HAL_NVIC_EnableIRQ>

}
 800a61e:	46c0      	nop			@ (mov r8, r8)
 800a620:	46bd      	mov	sp, r7
 800a622:	b002      	add	sp, #8
 800a624:	bd80      	pop	{r7, pc}
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	40021000 	.word	0x40021000

0800a62c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b089      	sub	sp, #36	@ 0x24
 800a630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a632:	240c      	movs	r4, #12
 800a634:	193b      	adds	r3, r7, r4
 800a636:	0018      	movs	r0, r3
 800a638:	2314      	movs	r3, #20
 800a63a:	001a      	movs	r2, r3
 800a63c:	2100      	movs	r1, #0
 800a63e:	f010 fa69 	bl	801ab14 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a642:	4b55      	ldr	r3, [pc, #340]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a644:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a646:	4b54      	ldr	r3, [pc, #336]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a648:	2104      	movs	r1, #4
 800a64a:	430a      	orrs	r2, r1
 800a64c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a64e:	4b52      	ldr	r3, [pc, #328]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a652:	2204      	movs	r2, #4
 800a654:	4013      	ands	r3, r2
 800a656:	60bb      	str	r3, [r7, #8]
 800a658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a65a:	4b4f      	ldr	r3, [pc, #316]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a65c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a65e:	4b4e      	ldr	r3, [pc, #312]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a660:	2101      	movs	r1, #1
 800a662:	430a      	orrs	r2, r1
 800a664:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a666:	4b4c      	ldr	r3, [pc, #304]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a66a:	2201      	movs	r2, #1
 800a66c:	4013      	ands	r3, r2
 800a66e:	607b      	str	r3, [r7, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a672:	4b49      	ldr	r3, [pc, #292]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a674:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a676:	4b48      	ldr	r3, [pc, #288]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a678:	2102      	movs	r1, #2
 800a67a:	430a      	orrs	r2, r1
 800a67c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a67e:	4b46      	ldr	r3, [pc, #280]	@ (800a798 <MX_GPIO_Init+0x16c>)
 800a680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a682:	2202      	movs	r2, #2
 800a684:	4013      	ands	r3, r2
 800a686:	603b      	str	r3, [r7, #0]
 800a688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a68a:	4944      	ldr	r1, [pc, #272]	@ (800a79c <MX_GPIO_Init+0x170>)
 800a68c:	4b44      	ldr	r3, [pc, #272]	@ (800a7a0 <MX_GPIO_Init+0x174>)
 800a68e:	2200      	movs	r2, #0
 800a690:	0018      	movs	r0, r3
 800a692:	f008 fe42 	bl	801331a <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a696:	4943      	ldr	r1, [pc, #268]	@ (800a7a4 <MX_GPIO_Init+0x178>)
 800a698:	4b43      	ldr	r3, [pc, #268]	@ (800a7a8 <MX_GPIO_Init+0x17c>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	0018      	movs	r0, r3
 800a69e:	f008 fe3c 	bl	801331a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800a6a2:	23b0      	movs	r3, #176	@ 0xb0
 800a6a4:	0119      	lsls	r1, r3, #4
 800a6a6:	23a0      	movs	r3, #160	@ 0xa0
 800a6a8:	05db      	lsls	r3, r3, #23
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f008 fe34 	bl	801331a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a6b2:	193b      	adds	r3, r7, r4
 800a6b4:	4a39      	ldr	r2, [pc, #228]	@ (800a79c <MX_GPIO_Init+0x170>)
 800a6b6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6b8:	193b      	adds	r3, r7, r4
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6be:	193b      	adds	r3, r7, r4
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6c4:	193b      	adds	r3, r7, r4
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6ca:	193b      	adds	r3, r7, r4
 800a6cc:	4a34      	ldr	r2, [pc, #208]	@ (800a7a0 <MX_GPIO_Init+0x174>)
 800a6ce:	0019      	movs	r1, r3
 800a6d0:	0010      	movs	r0, r2
 800a6d2:	f008 fbb1 	bl	8012e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a6d6:	193b      	adds	r3, r7, r4
 800a6d8:	4a32      	ldr	r2, [pc, #200]	@ (800a7a4 <MX_GPIO_Init+0x178>)
 800a6da:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6dc:	193b      	adds	r3, r7, r4
 800a6de:	2201      	movs	r2, #1
 800a6e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6e2:	193b      	adds	r3, r7, r4
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6e8:	193b      	adds	r3, r7, r4
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6ee:	193b      	adds	r3, r7, r4
 800a6f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a7a8 <MX_GPIO_Init+0x17c>)
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	0010      	movs	r0, r2
 800a6f6:	f008 fb9f 	bl	8012e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_4;
 800a6fa:	193b      	adds	r3, r7, r4
 800a6fc:	4a2b      	ldr	r2, [pc, #172]	@ (800a7ac <MX_GPIO_Init+0x180>)
 800a6fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a700:	193b      	adds	r3, r7, r4
 800a702:	2200      	movs	r2, #0
 800a704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a706:	193b      	adds	r3, r7, r4
 800a708:	2200      	movs	r2, #0
 800a70a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a70c:	193b      	adds	r3, r7, r4
 800a70e:	4a26      	ldr	r2, [pc, #152]	@ (800a7a8 <MX_GPIO_Init+0x17c>)
 800a710:	0019      	movs	r1, r3
 800a712:	0010      	movs	r0, r2
 800a714:	f008 fb90 	bl	8012e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800a718:	0021      	movs	r1, r4
 800a71a:	187b      	adds	r3, r7, r1
 800a71c:	22b0      	movs	r2, #176	@ 0xb0
 800a71e:	0112      	lsls	r2, r2, #4
 800a720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a722:	000c      	movs	r4, r1
 800a724:	193b      	adds	r3, r7, r4
 800a726:	2201      	movs	r2, #1
 800a728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a72a:	193b      	adds	r3, r7, r4
 800a72c:	2200      	movs	r2, #0
 800a72e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a730:	193b      	adds	r3, r7, r4
 800a732:	2200      	movs	r2, #0
 800a734:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a736:	193a      	adds	r2, r7, r4
 800a738:	23a0      	movs	r3, #160	@ 0xa0
 800a73a:	05db      	lsls	r3, r3, #23
 800a73c:	0011      	movs	r1, r2
 800a73e:	0018      	movs	r0, r3
 800a740:	f008 fb7a 	bl	8012e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a744:	0021      	movs	r1, r4
 800a746:	187b      	adds	r3, r7, r1
 800a748:	2280      	movs	r2, #128	@ 0x80
 800a74a:	0212      	lsls	r2, r2, #8
 800a74c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a74e:	187b      	adds	r3, r7, r1
 800a750:	2288      	movs	r2, #136	@ 0x88
 800a752:	0352      	lsls	r2, r2, #13
 800a754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a756:	187b      	adds	r3, r7, r1
 800a758:	2200      	movs	r2, #0
 800a75a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a75c:	187a      	adds	r2, r7, r1
 800a75e:	23a0      	movs	r3, #160	@ 0xa0
 800a760:	05db      	lsls	r3, r3, #23
 800a762:	0011      	movs	r1, r2
 800a764:	0018      	movs	r0, r3
 800a766:	f008 fb67 	bl	8012e38 <HAL_GPIO_Init>
  /* EXTI interrupt init*/
  /*HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 800a76a:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a8 <MX_GPIO_Init+0x17c>)
 800a76c:	2201      	movs	r2, #1
 800a76e:	2108      	movs	r1, #8
 800a770:	0018      	movs	r0, r3
 800a772:	f008 fdd2 	bl	801331a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET);
 800a776:	2380      	movs	r3, #128	@ 0x80
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	4809      	ldr	r0, [pc, #36]	@ (800a7a0 <MX_GPIO_Init+0x174>)
 800a77c:	2201      	movs	r2, #1
 800a77e:	0019      	movs	r1, r3
 800a780:	f008 fdcb 	bl	801331a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);
 800a784:	4b08      	ldr	r3, [pc, #32]	@ (800a7a8 <MX_GPIO_Init+0x17c>)
 800a786:	2201      	movs	r2, #1
 800a788:	2120      	movs	r1, #32
 800a78a:	0018      	movs	r0, r3
 800a78c:	f008 fdc5 	bl	801331a <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800a790:	46c0      	nop			@ (mov r8, r8)
 800a792:	46bd      	mov	sp, r7
 800a794:	b009      	add	sp, #36	@ 0x24
 800a796:	bd90      	pop	{r4, r7, pc}
 800a798:	40021000 	.word	0x40021000
 800a79c:	0000074c 	.word	0x0000074c
 800a7a0:	50000800 	.word	0x50000800
 800a7a4:	0000142c 	.word	0x0000142c
 800a7a8:	50000400 	.word	0x50000400
 800a7ac:	00004810 	.word	0x00004810

0800a7b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a7b4:	b672      	cpsid	i
}
 800a7b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a7b8:	46c0      	nop			@ (mov r8, r8)
 800a7ba:	e7fd      	b.n	800a7b8 <Error_Handler+0x8>

0800a7bc <muestreo>:
#include "stm32u0xx_hal_pwr_ex.h"

uint32_t cnt_veces_muestreo_2 = 0;
//*************************************************************************************************

void muestreo(void){
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0


	     //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);  PIn TEST


		cnt_veces_muestreo++; //inc cnt_veces_muestreo/// A,cnt_veces_muestreo
 800a7c2:	4bde      	ldr	r3, [pc, #888]	@ (800ab3c <muestreo+0x380>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	4bdc      	ldr	r3, [pc, #880]	@ (800ab3c <muestreo+0x380>)
 800a7cc:	701a      	strb	r2, [r3, #0]


		if(cnt_veces_muestreo <= 200){ // 200){ //cp  A,#200
 800a7ce:	4bdb      	ldr	r3, [pc, #876]	@ (800ab3c <muestreo+0x380>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	2bc8      	cmp	r3, #200	@ 0xc8
 800a7d4:	d800      	bhi.n	800a7d8 <muestreo+0x1c>
 800a7d6:	e152      	b.n	800aa7e <muestreo+0x2c2>
//			cnt_veces_muestreo_2 = 0;
//
//		if(cnt_veces_muestreo_2 < 200)
//			goto detecta_flanco;

	    cnt_veces_muestreo = 0;  //clr cnt_veces_muestreo
 800a7d8:	4bd8      	ldr	r3, [pc, #864]	@ (800ab3c <muestreo+0x380>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
	    cruze_por_cero[0] = 1;		//bset    cruze_por_cero,#0
 800a7de:	4bd8      	ldr	r3, [pc, #864]	@ (800ab40 <muestreo+0x384>)
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	701a      	strb	r2, [r3, #0]
//        }
//	  	flagsLogger2 [2] = 1;//bset	flagsLogger2,#2
//	  	goto error_muestreo; //jp error_muestreo

//batOFF_OK:
	    flagsLogger2 [0] = 1; //bset flagsLogger2,#0
 800a7e4:	4bd7      	ldr	r3, [pc, #860]	@ (800ab44 <muestreo+0x388>)
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	701a      	strb	r2, [r3, #0]


grabadoEmergencia:
		//;primero guarda lo que aun hay en el buffer .

		cntBlockFlash = cntBlockDATA;//mov		cntBlockFlash,cntBlockDATA;
 800a7ea:	4bd7      	ldr	r3, [pc, #860]	@ (800ab48 <muestreo+0x38c>)
 800a7ec:	781a      	ldrb	r2, [r3, #0]
 800a7ee:	4bd7      	ldr	r3, [pc, #860]	@ (800ab4c <muestreo+0x390>)
 800a7f0:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800a7f2:	4bd7      	ldr	r3, [pc, #860]	@ (800ab50 <muestreo+0x394>)
 800a7f4:	781a      	ldrb	r2, [r3, #0]
 800a7f6:	4bd7      	ldr	r3, [pc, #860]	@ (800ab54 <muestreo+0x398>)
 800a7f8:	701a      	strb	r2, [r3, #0]
		//ldw		X,#data_buffer
		//ldw		dirBuffer,X
		dirBuffer = &data_buffer[0]; //--------------------
 800a7fa:	4bd7      	ldr	r3, [pc, #860]	@ (800ab58 <muestreo+0x39c>)
 800a7fc:	4ad7      	ldr	r2, [pc, #860]	@ (800ab5c <muestreo+0x3a0>)
 800a7fe:	601a      	str	r2, [r3, #0]
		//ldw		X,#dataLogger
		//ldw		dirLogger,X
		dirLogger = &dataLogger[0];// ------------------------
 800a800:	4bd7      	ldr	r3, [pc, #860]	@ (800ab60 <muestreo+0x3a4>)
 800a802:	4ad8      	ldr	r2, [pc, #864]	@ (800ab64 <muestreo+0x3a8>)
 800a804:	601a      	str	r2, [r3, #0]
//	    dirBuffer = dirBuffer + 126; //addw	X,resulh
        //ld		A,cntByteBlock

		// Se agrega este parche debido a la naturaleza de la memoria
		// CGM 23/04/2025
		if(cntByteBlock == 0){
 800a806:	4bd3      	ldr	r3, [pc, #844]	@ (800ab54 <muestreo+0x398>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d105      	bne.n	800a81a <muestreo+0x5e>
			dirBuffer[126] = 0xFF;	//ld		(X),A ---------?
 800a80e:	4bd2      	ldr	r3, [pc, #840]	@ (800ab58 <muestreo+0x39c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	337e      	adds	r3, #126	@ 0x7e
 800a814:	22ff      	movs	r2, #255	@ 0xff
 800a816:	701a      	strb	r2, [r3, #0]
 800a818:	e005      	b.n	800a826 <muestreo+0x6a>
		}
		else{
			dirBuffer[126] = cntByteBlock;	//ld		(X),A ---------?
 800a81a:	4bcf      	ldr	r3, [pc, #828]	@ (800ab58 <muestreo+0x39c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	337e      	adds	r3, #126	@ 0x7e
 800a820:	4acc      	ldr	r2, [pc, #816]	@ (800ab54 <muestreo+0x398>)
 800a822:	7812      	ldrb	r2, [r2, #0]
 800a824:	701a      	strb	r2, [r3, #0]
		}



		//;---- Graba buffer en bloque de flash
	    ProgMemCode = 0xAA; //mov ProgMemCode,#$AA;
 800a826:	4bd0      	ldr	r3, [pc, #832]	@ (800ab68 <muestreo+0x3ac>)
 800a828:	22aa      	movs	r2, #170	@ 0xaa
 800a82a:	701a      	strb	r2, [r3, #0]
	                   //ld    A,cntBlockFlash;
	                   //ldw		X,#128;
	    			   //mul		X,A; -----------------?
	    			   //addw	X,dirLogger;--------------?
//	    dirPointer = dirLogger + (128 * cntBlockFlash);//LDW dirPointer,X
	    dirPointer = &dirLogger[128*cntBlockFlash];
 800a82c:	4bcc      	ldr	r3, [pc, #816]	@ (800ab60 <muestreo+0x3a4>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4ac6      	ldr	r2, [pc, #792]	@ (800ab4c <muestreo+0x390>)
 800a832:	7812      	ldrb	r2, [r2, #0]
 800a834:	01d2      	lsls	r2, r2, #7
 800a836:	189a      	adds	r2, r3, r2
 800a838:	4bcc      	ldr	r3, [pc, #816]	@ (800ab6c <muestreo+0x3b0>)
 800a83a:	601a      	str	r2, [r3, #0]
	    // cntBlockFlash = dirBuffer;//LDW X,dirBuffer;
	    dataPointer = &dirBuffer[0];//LDW dataPointer,X
 800a83c:	4bc6      	ldr	r3, [pc, #792]	@ (800ab58 <muestreo+0x39c>)
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	4bcb      	ldr	r3, [pc, #812]	@ (800ab70 <muestreo+0x3b4>)
 800a842:	601a      	str	r2, [r3, #0]

	    dirBufferPage = &bufferPageDATA[0];
 800a844:	4bcb      	ldr	r3, [pc, #812]	@ (800ab74 <muestreo+0x3b8>)
 800a846:	4acc      	ldr	r2, [pc, #816]	@ (800ab78 <muestreo+0x3bc>)
 800a848:	601a      	str	r2, [r3, #0]

	    grabadoLoggerBloquesCompletos(dirPointer, dirBufferPage);
 800a84a:	4bc8      	ldr	r3, [pc, #800]	@ (800ab6c <muestreo+0x3b0>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	4bc9      	ldr	r3, [pc, #804]	@ (800ab74 <muestreo+0x3b8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	0019      	movs	r1, r3
 800a854:	0010      	movs	r0, r2
 800a856:	f7fc fdf7 	bl	8007448 <grabadoLoggerBloquesCompletos>

	    GRABA_BLOCK();			//call GRABA_BLOCK
 800a85a:	f7fc fc29 	bl	80070b0 <GRABA_BLOCK>



	//---------------------------------------------------------------------------------------------
	    // ldw		X,cntRegDATA
	    cntReg = cntRegDATA;//ldw cntReg,X
 800a85e:	4bc7      	ldr	r3, [pc, #796]	@ (800ab7c <muestreo+0x3c0>)
 800a860:	881a      	ldrh	r2, [r3, #0]
 800a862:	4bc7      	ldr	r3, [pc, #796]	@ (800ab80 <muestreo+0x3c4>)
 800a864:	801a      	strh	r2, [r3, #0]
	    // ldw X,#eeCntRegDATA
	    cntRegPNT = &eeCntRegDATA;//ldw cntRegPNT,X
 800a866:	4bc7      	ldr	r3, [pc, #796]	@ (800ab84 <muestreo+0x3c8>)
 800a868:	4ac7      	ldr	r2, [pc, #796]	@ (800ab88 <muestreo+0x3cc>)
 800a86a:	601a      	str	r2, [r3, #0]
	    // call save_cntReg
	    save_cntReg();
 800a86c:	f7fc fb24 	bl	8006eb8 <save_cntReg>

	    //;primero guarda lo que aun hay en el buffer .
	    cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT
 800a870:	4bc6      	ldr	r3, [pc, #792]	@ (800ab8c <muestreo+0x3d0>)
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	4bb5      	ldr	r3, [pc, #724]	@ (800ab4c <muestreo+0x390>)
 800a876:	701a      	strb	r2, [r3, #0]
	    cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800a878:	4bc5      	ldr	r3, [pc, #788]	@ (800ab90 <muestreo+0x3d4>)
 800a87a:	781a      	ldrb	r2, [r3, #0]
 800a87c:	4bb5      	ldr	r3, [pc, #724]	@ (800ab54 <muestreo+0x398>)
 800a87e:	701a      	strb	r2, [r3, #0]
	    //ldw X,#event_buffer
	    //ldw dirBuffer,X
	    dirBuffer = &event_buffer[0];
 800a880:	4bb5      	ldr	r3, [pc, #724]	@ (800ab58 <muestreo+0x39c>)
 800a882:	4ac4      	ldr	r2, [pc, #784]	@ (800ab94 <muestreo+0x3d8>)
 800a884:	601a      	str	r2, [r3, #0]
	    //ldw X,#eventLogger
	    //ldw dirLogger,X
	    dirLogger = &eventLogger[0];
 800a886:	4bb6      	ldr	r3, [pc, #728]	@ (800ab60 <muestreo+0x3a4>)
 800a888:	4ac3      	ldr	r2, [pc, #780]	@ (800ab98 <muestreo+0x3dc>)
 800a88a:	601a      	str	r2, [r3, #0]
//	    point_X = dirBuffer + 126; //addw	X,resulh
	    //ld		A,cntByteBlock
//	    *point_X = cntByteBlock;//ld (X),A ----------------?
	    // Se agrega este parche debido a la naturaleza de la memoria
	    // CGM 23/04/2025
	    if(cntByteBlock == 0){
 800a88c:	4bb1      	ldr	r3, [pc, #708]	@ (800ab54 <muestreo+0x398>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d105      	bne.n	800a8a0 <muestreo+0xe4>
	    	dirBuffer[126] = 0xFF;	//ld		(X),A ---------?
 800a894:	4bb0      	ldr	r3, [pc, #704]	@ (800ab58 <muestreo+0x39c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	337e      	adds	r3, #126	@ 0x7e
 800a89a:	22ff      	movs	r2, #255	@ 0xff
 800a89c:	701a      	strb	r2, [r3, #0]
 800a89e:	e005      	b.n	800a8ac <muestreo+0xf0>
	    }
	    else{
	    	dirBuffer[126] = cntByteBlock;	//ld		(X),A ---------?
 800a8a0:	4bad      	ldr	r3, [pc, #692]	@ (800ab58 <muestreo+0x39c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	337e      	adds	r3, #126	@ 0x7e
 800a8a6:	4aab      	ldr	r2, [pc, #684]	@ (800ab54 <muestreo+0x398>)
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	701a      	strb	r2, [r3, #0]
	    }

	    //;---- Graba buffer en bloque de flash
	    ProgMemCode = 0xAA; //mov		ProgMemCode,#$AA;
 800a8ac:	4bae      	ldr	r3, [pc, #696]	@ (800ab68 <muestreo+0x3ac>)
 800a8ae:	22aa      	movs	r2, #170	@ 0xaa
 800a8b0:	701a      	strb	r2, [r3, #0]
	    //ldw		X,#128;
	    //;//mul		X,A;
	    //addw	X,dirLogger; ------------------?
	    //LDW		dirPointer,X
	    //LDW		X,dirBuffer;
	    dirPointer = &dirLogger[128 * cntBlockFlash]; // -----------------------------------?
 800a8b2:	4bab      	ldr	r3, [pc, #684]	@ (800ab60 <muestreo+0x3a4>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4aa5      	ldr	r2, [pc, #660]	@ (800ab4c <muestreo+0x390>)
 800a8b8:	7812      	ldrb	r2, [r2, #0]
 800a8ba:	01d2      	lsls	r2, r2, #7
 800a8bc:	189a      	adds	r2, r3, r2
 800a8be:	4bab      	ldr	r3, [pc, #684]	@ (800ab6c <muestreo+0x3b0>)
 800a8c0:	601a      	str	r2, [r3, #0]
	    //LDW		dataPointer,X
	    dataPointer = &dirBuffer[0];//------------------------------------?
 800a8c2:	4ba5      	ldr	r3, [pc, #660]	@ (800ab58 <muestreo+0x39c>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4baa      	ldr	r3, [pc, #680]	@ (800ab70 <muestreo+0x3b4>)
 800a8c8:	601a      	str	r2, [r3, #0]

	    dirBufferPage = &bufferPageEVENT[0];
 800a8ca:	4baa      	ldr	r3, [pc, #680]	@ (800ab74 <muestreo+0x3b8>)
 800a8cc:	4ab3      	ldr	r2, [pc, #716]	@ (800ab9c <muestreo+0x3e0>)
 800a8ce:	601a      	str	r2, [r3, #0]

	    grabadoLoggerBloquesCompletos(dirPointer, dirBufferPage);
 800a8d0:	4ba6      	ldr	r3, [pc, #664]	@ (800ab6c <muestreo+0x3b0>)
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	4ba7      	ldr	r3, [pc, #668]	@ (800ab74 <muestreo+0x3b8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	0019      	movs	r1, r3
 800a8da:	0010      	movs	r0, r2
 800a8dc:	f7fc fdb4 	bl	8007448 <grabadoLoggerBloquesCompletos>

	    GRABA_BLOCK();//call GRABA_BLOCK
 800a8e0:	f7fc fbe6 	bl	80070b0 <GRABA_BLOCK>

	    //ldw		X,cntRegEVENT
	    //ldw		cntReg,X
	    cntReg = cntRegEVENT;
 800a8e4:	4bae      	ldr	r3, [pc, #696]	@ (800aba0 <muestreo+0x3e4>)
 800a8e6:	881a      	ldrh	r2, [r3, #0]
 800a8e8:	4ba5      	ldr	r3, [pc, #660]	@ (800ab80 <muestreo+0x3c4>)
 800a8ea:	801a      	strh	r2, [r3, #0]
	    //ldw		X,#eeCntRegEVENT
	    //ldw		cntRegPNT,X
	    cntRegPNT = &eeCntRegEVENT;
 800a8ec:	4ba5      	ldr	r3, [pc, #660]	@ (800ab84 <muestreo+0x3c8>)
 800a8ee:	4aad      	ldr	r2, [pc, #692]	@ (800aba4 <muestreo+0x3e8>)
 800a8f0:	601a      	str	r2, [r3, #0]
	    save_cntReg();		//call	save_cntReg
 800a8f2:	f7fc fae1 	bl	8006eb8 <save_cntReg>
	    save_timeUNIX();	//call	save_timeUNIX
 800a8f6:	f7fc faf1 	bl	8006edc <save_timeUNIX>

	    for(uint8_t i=0; i<8; i++)
 800a8fa:	1dfb      	adds	r3, r7, #7
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e009      	b.n	800a916 <muestreo+0x15a>
	    	flagsEvent[i] = 0;
 800a902:	1dfb      	adds	r3, r7, #7
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	4aa8      	ldr	r2, [pc, #672]	@ (800aba8 <muestreo+0x3ec>)
 800a908:	2100      	movs	r1, #0
 800a90a:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t i=0; i<8; i++)
 800a90c:	1dfb      	adds	r3, r7, #7
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	1dfb      	adds	r3, r7, #7
 800a912:	3201      	adds	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	1dfb      	adds	r3, r7, #7
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	2b07      	cmp	r3, #7
 800a91c:	d9f1      	bls.n	800a902 <muestreo+0x146>


grabadoEmergenciaFin:
 800a91e:	46c0      	nop			@ (mov r8, r8)

	GPIOA->MODER |= 0x3FFFFFFF;
 800a920:	23a0      	movs	r3, #160	@ 0xa0
 800a922:	05db      	lsls	r3, r3, #23
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	23a0      	movs	r3, #160	@ 0xa0
 800a928:	05db      	lsls	r3, r3, #23
 800a92a:	49a0      	ldr	r1, [pc, #640]	@ (800abac <muestreo+0x3f0>)
 800a92c:	430a      	orrs	r2, r1
 800a92e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 0xFFFFFFFF;
 800a930:	4b9f      	ldr	r3, [pc, #636]	@ (800abb0 <muestreo+0x3f4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4b9e      	ldr	r3, [pc, #632]	@ (800abb0 <muestreo+0x3f4>)
 800a936:	2201      	movs	r2, #1
 800a938:	4252      	negs	r2, r2
 800a93a:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= 0xFFFDFFFF;
 800a93c:	4b9d      	ldr	r3, [pc, #628]	@ (800abb4 <muestreo+0x3f8>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	4b9c      	ldr	r3, [pc, #624]	@ (800abb4 <muestreo+0x3f8>)
 800a942:	499d      	ldr	r1, [pc, #628]	@ (800abb8 <muestreo+0x3fc>)
 800a944:	430a      	orrs	r2, r1
 800a946:	601a      	str	r2, [r3, #0]
	GPIOD->MODER |= 0xFFFFFFFF;
 800a948:	4b9c      	ldr	r3, [pc, #624]	@ (800abbc <muestreo+0x400>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4b9b      	ldr	r3, [pc, #620]	@ (800abbc <muestreo+0x400>)
 800a94e:	2201      	movs	r2, #1
 800a950:	4252      	negs	r2, r2
 800a952:	601a      	str	r2, [r3, #0]
	GPIOE->MODER |= 0xFFFFFFFF;
 800a954:	4b9a      	ldr	r3, [pc, #616]	@ (800abc0 <muestreo+0x404>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4b99      	ldr	r3, [pc, #612]	@ (800abc0 <muestreo+0x404>)
 800a95a:	2201      	movs	r2, #1
 800a95c:	4252      	negs	r2, r2
 800a95e:	601a      	str	r2, [r3, #0]
	GPIOF->MODER |= 0xFFFFFFFF;
 800a960:	4b98      	ldr	r3, [pc, #608]	@ (800abc4 <muestreo+0x408>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4b97      	ldr	r3, [pc, #604]	@ (800abc4 <muestreo+0x408>)
 800a966:	2201      	movs	r2, #1
 800a968:	4252      	negs	r2, r2
 800a96a:	601a      	str	r2, [r3, #0]

	__HAL_RCC_GPIOB_CLK_DISABLE();
 800a96c:	4b96      	ldr	r3, [pc, #600]	@ (800abc8 <muestreo+0x40c>)
 800a96e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a970:	4b95      	ldr	r3, [pc, #596]	@ (800abc8 <muestreo+0x40c>)
 800a972:	2102      	movs	r1, #2
 800a974:	438a      	bics	r2, r1
 800a976:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 800a978:	4b93      	ldr	r3, [pc, #588]	@ (800abc8 <muestreo+0x40c>)
 800a97a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a97c:	4b92      	ldr	r3, [pc, #584]	@ (800abc8 <muestreo+0x40c>)
 800a97e:	2108      	movs	r1, #8
 800a980:	438a      	bics	r2, r1
 800a982:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOE_CLK_DISABLE();
 800a984:	4b90      	ldr	r3, [pc, #576]	@ (800abc8 <muestreo+0x40c>)
 800a986:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a988:	4b8f      	ldr	r3, [pc, #572]	@ (800abc8 <muestreo+0x40c>)
 800a98a:	2110      	movs	r1, #16
 800a98c:	438a      	bics	r2, r1
 800a98e:	64da      	str	r2, [r3, #76]	@ 0x4c
	__HAL_RCC_GPIOF_CLK_DISABLE();
 800a990:	4b8d      	ldr	r3, [pc, #564]	@ (800abc8 <muestreo+0x40c>)
 800a992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a994:	4b8c      	ldr	r3, [pc, #560]	@ (800abc8 <muestreo+0x40c>)
 800a996:	2120      	movs	r1, #32
 800a998:	438a      	bics	r2, r1
 800a99a:	64da      	str	r2, [r3, #76]	@ 0x4c

	while(HAL_I2C_DeInit(&hi2c1) != HAL_OK);
 800a99c:	46c0      	nop			@ (mov r8, r8)
 800a99e:	4b8b      	ldr	r3, [pc, #556]	@ (800abcc <muestreo+0x410>)
 800a9a0:	0018      	movs	r0, r3
 800a9a2:	f008 fdbb 	bl	801351c <HAL_I2C_DeInit>
 800a9a6:	1e03      	subs	r3, r0, #0
 800a9a8:	d1f9      	bne.n	800a99e <muestreo+0x1e2>
	while(HAL_UART_DeInit(&huart2) != HAL_OK);
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	4b88      	ldr	r3, [pc, #544]	@ (800abd0 <muestreo+0x414>)
 800a9ae:	0018      	movs	r0, r3
 800a9b0:	f00e faba 	bl	8018f28 <HAL_UART_DeInit>
 800a9b4:	1e03      	subs	r3, r0, #0
 800a9b6:	d1f9      	bne.n	800a9ac <muestreo+0x1f0>
	while(HAL_UART_DeInit(&huart4) != HAL_OK);
 800a9b8:	46c0      	nop			@ (mov r8, r8)
 800a9ba:	4b86      	ldr	r3, [pc, #536]	@ (800abd4 <muestreo+0x418>)
 800a9bc:	0018      	movs	r0, r3
 800a9be:	f00e fab3 	bl	8018f28 <HAL_UART_DeInit>
 800a9c2:	1e03      	subs	r3, r0, #0
 800a9c4:	d1f9      	bne.n	800a9ba <muestreo+0x1fe>
	ADC_Deinit_Func();
 800a9c6:	f000 f9df 	bl	800ad88 <ADC_Deinit_Func>
	//while(HAL_ADC_DeInit(&hadc1) != HAL_OK);
	__HAL_RCC_DMA1_CLK_DISABLE();
 800a9ca:	4b7f      	ldr	r3, [pc, #508]	@ (800abc8 <muestreo+0x40c>)
 800a9cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a9ce:	4b7e      	ldr	r3, [pc, #504]	@ (800abc8 <muestreo+0x40c>)
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	438a      	bics	r2, r1
 800a9d4:	649a      	str	r2, [r3, #72]	@ 0x48

	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a9d6:	4b80      	ldr	r3, [pc, #512]	@ (800abd8 <muestreo+0x41c>)
 800a9d8:	2204      	movs	r2, #4
 800a9da:	65da      	str	r2, [r3, #92]	@ 0x5c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 800a9dc:	2380      	movs	r3, #128	@ 0x80
 800a9de:	0199      	lsls	r1, r3, #6
 800a9e0:	487e      	ldr	r0, [pc, #504]	@ (800abdc <muestreo+0x420>)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f00d f87b 	bl	8017ae0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a9ea:	1e03      	subs	r3, r0, #0
 800a9ec:	d001      	beq.n	800a9f2 <muestreo+0x236>
	{
		Error_Handler();
 800a9ee:	f7ff fedf 	bl	800a7b0 <Error_Handler>
	}

	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a9f2:	2007      	movs	r0, #7
 800a9f4:	f007 fc47 	bl	8012286 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 800a9f8:	200a      	movs	r0, #10
 800a9fa:	f007 fc54 	bl	80122a6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a9fe:	200b      	movs	r0, #11
 800aa00:	f007 fc51 	bl	80122a6 <HAL_NVIC_DisableIRQ>



sleep_rt:

	HAL_SuspendTick();
 800aa04:	f007 fb40 	bl	8012088 <HAL_SuspendTick>

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800aa08:	2001      	movs	r0, #1
 800aa0a:	f00a ff3f 	bl	801588c <HAL_PWREx_EnterSTOP2Mode>

	HAL_ResumeTick();
 800aa0e:	f007 fb49 	bl	80120a4 <HAL_ResumeTick>
	if(bandera_RTC)
 800aa12:	4b73      	ldr	r3, [pc, #460]	@ (800abe0 <muestreo+0x424>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <muestreo+0x266>
	{
		bandera_RTC = 0;
 800aa1a:	4b71      	ldr	r3, [pc, #452]	@ (800abe0 <muestreo+0x424>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	701a      	strb	r2, [r3, #0]
		goto sleep_rt;
 800aa20:	e7f0      	b.n	800aa04 <muestreo+0x248>
	}

	//HAL_IWDG_Refresh(&hiwdg);
	reconfigura_perif();
 800aa22:	f7fe fd97 	bl	8009554 <reconfigura_perif>

	cnt_veces_muestreo_2 = 0;
 800aa26:	4b6f      	ldr	r3, [pc, #444]	@ (800abe4 <muestreo+0x428>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]

	flagsEvent[3] = 1;
 800aa2c:	4b5e      	ldr	r3, [pc, #376]	@ (800aba8 <muestreo+0x3ec>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	70da      	strb	r2, [r3, #3]
	retPowerOn = 10;
 800aa32:	4b6d      	ldr	r3, [pc, #436]	@ (800abe8 <muestreo+0x42c>)
 800aa34:	220a      	movs	r2, #10
 800aa36:	701a      	strb	r2, [r3, #0]
	edorefri = 0;
 800aa38:	4b6c      	ldr	r3, [pc, #432]	@ (800abec <muestreo+0x430>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
	cntblkh = 0;
 800aa3e:	4b6c      	ldr	r3, [pc, #432]	@ (800abf0 <muestreo+0x434>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	801a      	strh	r2, [r3, #0]
	flagsa[7] = 1;// flagsa = 0x81;
 800aa44:	4b6b      	ldr	r3, [pc, #428]	@ (800abf4 <muestreo+0x438>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 800aa4a:	4b6a      	ldr	r3, [pc, #424]	@ (800abf4 <muestreo+0x438>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	701a      	strb	r2, [r3, #0]
	cntseg = 0;
 800aa50:	4b69      	ldr	r3, [pc, #420]	@ (800abf8 <muestreo+0x43c>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0; k<8; k++)
 800aa56:	1dbb      	adds	r3, r7, #6
 800aa58:	2200      	movs	r2, #0
 800aa5a:	701a      	strb	r2, [r3, #0]
 800aa5c:	e009      	b.n	800aa72 <muestreo+0x2b6>
		flagsBattery[k] = 0;
 800aa5e:	1dbb      	adds	r3, r7, #6
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	4a66      	ldr	r2, [pc, #408]	@ (800abfc <muestreo+0x440>)
 800aa64:	2100      	movs	r1, #0
 800aa66:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++)
 800aa68:	1dbb      	adds	r3, r7, #6
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	1dbb      	adds	r3, r7, #6
 800aa6e:	3201      	adds	r2, #1
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	1dbb      	adds	r3, r7, #6
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b07      	cmp	r3, #7
 800aa78:	d9f1      	bls.n	800aa5e <muestreo+0x2a2>

		//;Apaga Perifericos RGM_07-AGO-2023


ibus_ocupado_halt:
 800aa7a:	46c0      	nop			@ (mov r8, r8)


DoSleep:
goto error_muestreo;//jp error_muestreo
 800aa7c:	e15b      	b.n	800ad36 <muestreo+0x57a>
			goto detecta_flanco;//jrule detecta_flanco
 800aa7e:	46c0      	nop			@ (mov r8, r8)

//;=========================================  Rutina DETECCIÓN DE FLANCO DE SUBIDA
//;La detección de cruce por cero se realiza por umbral en el pin de MUESTREO.

detecta_flanco:						 //;Más de 50ms sin cruces por cero
		s_reloj[2] = 0;//bres s_reloj,#2
 800aa80:	4b5f      	ldr	r3, [pc, #380]	@ (800ac00 <muestreo+0x444>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	709a      	strb	r2, [r3, #2]

up_anterior:

		if(s_reloj[0]){	//btjt s_reloj,#0,alto   [actual]	   ;¿El valor de la bandera "actual" es 1?
 800aa86:	4b5e      	ldr	r3, [pc, #376]	@ (800ac00 <muestreo+0x444>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d103      	bne.n	800aa96 <muestreo+0x2da>
			goto alto;
		}
		s_reloj[1] = 0;   				//bres s_reloj,#1    ;[anterior]  ;NO: Anterior <- 0
 800aa8e:	4b5c      	ldr	r3, [pc, #368]	@ (800ac00 <muestreo+0x444>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	705a      	strb	r2, [r3, #1]
		goto end_up_anterior;//jra end_up_anterior
 800aa94:	e003      	b.n	800aa9e <muestreo+0x2e2>
			goto alto;
 800aa96:	46c0      	nop			@ (mov r8, r8)

alto:
		s_reloj[1] = 1; 	//bset s_reloj,#1		;[anterior]   ;SI: Anterior <- 1
 800aa98:	4b59      	ldr	r3, [pc, #356]	@ (800ac00 <muestreo+0x444>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	705a      	strb	r2, [r3, #1]
			// 19-AGO-2024		HAL_ADC_Stop(&hadc);
		// ----------------------Codigo Julio Torres
//---Toogle  GPIOA->BSRR = GPIO_BSRR_BS_11;
		//ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
//		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
		ADC1->CHSELR = 0;
 800aa9e:	4b59      	ldr	r3, [pc, #356]	@ (800ac04 <muestreo+0x448>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	629a      	str	r2, [r3, #40]	@ 0x28

		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800aaa4:	4b57      	ldr	r3, [pc, #348]	@ (800ac04 <muestreo+0x448>)
 800aaa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aaa8:	4b56      	ldr	r3, [pc, #344]	@ (800ac04 <muestreo+0x448>)
 800aaaa:	2180      	movs	r1, #128	@ 0x80
 800aaac:	0089      	lsls	r1, r1, #2
 800aaae:	430a      	orrs	r2, r1
 800aab0:	629a      	str	r2, [r3, #40]	@ 0x28
		//ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
		//ADC->CCR |= ADC_CCR_VREFEN;
		capturaAD();
 800aab2:	f002 ff1b 	bl	800d8ec <capturaAD>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
		//---Toogle  GPIOA->BSRR = GPIO_BSRR_BR_11;
		// ----------------------Codigo Julio Torres

		asm ("nop");
 800aab6:	46c0      	nop			@ (mov r8, r8)
		//if(adcramh >= 10){//cpw     Y,#10
		//if(adcramh >= 20){//cpw     Y,#10
		//if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
		if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
 800aab8:	4b53      	ldr	r3, [pc, #332]	@ (800ac08 <muestreo+0x44c>)
 800aaba:	881b      	ldrh	r3, [r3, #0]
 800aabc:	2b22      	cmp	r3, #34	@ 0x22
 800aabe:	d803      	bhi.n	800aac8 <muestreo+0x30c>

			goto pin_cruce_alto;//jruge   pin_cruce_alto
		}
		s_reloj[0] = 0;		// bres    s_reloj,#0;
 800aac0:	4b4f      	ldr	r3, [pc, #316]	@ (800ac00 <muestreo+0x444>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
		goto end_up_actual;//jra     end_up_actual;
 800aac6:	e003      	b.n	800aad0 <muestreo+0x314>
			goto pin_cruce_alto;//jruge   pin_cruce_alto
 800aac8:	46c0      	nop			@ (mov r8, r8)
pin_cruce_alto:
		s_reloj[0] = 1;	 		//bset    s_reloj,#0;
 800aaca:	4b4d      	ldr	r3, [pc, #308]	@ (800ac00 <muestreo+0x444>)
 800aacc:	2201      	movs	r2, #1
 800aace:	701a      	strb	r2, [r3, #0]

determina_flanco: //---------------------------------------------------------?
		//ld A,s_reloj
		//and A,#$03
		//-----if(!(s_reloj[0] | s_reloj[1])){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
        if((!s_reloj[1]) & (s_reloj[0]) ){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
 800aad0:	4b4b      	ldr	r3, [pc, #300]	@ (800ac00 <muestreo+0x444>)
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2201      	movs	r2, #1
 800aad6:	4053      	eors	r3, r2
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	001a      	movs	r2, r3
 800aadc:	4b48      	ldr	r3, [pc, #288]	@ (800ac00 <muestreo+0x444>)
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	4013      	ands	r3, r2
 800aae2:	d007      	beq.n	800aaf4 <muestreo+0x338>

			goto flanco_subida;			//jreq flanco_subida/ salta si z=1
 800aae4:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_detecta_flanco;//jra fin_detecta_flanco


flanco_subida:
		s_reloj[2] = 1;	//bset    s_reloj,#2								;[b_flancos]	;Activar bandera de flanco de subida
 800aae6:	4b46      	ldr	r3, [pc, #280]	@ (800ac00 <muestreo+0x444>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	709a      	strb	r2, [r3, #2]
		//bcpl    PA_ODR,#0					// Test por, prueba
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
		cruze_por_cero[0] = 1;			//bset    cruze_por_cero,#0			;Activa bandera de cruce por cero
 800aaec:	4b14      	ldr	r3, [pc, #80]	@ (800ab40 <muestreo+0x384>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	e000      	b.n	800aaf6 <muestreo+0x33a>
		goto fin_detecta_flanco;//jra fin_detecta_flanco
 800aaf4:	46c0      	nop			@ (mov r8, r8)

fin_detecta_flanco:

//;=====================================  FIN Rutina DETECCIÓN DE FLANCO DE BAJADA

		if(s_reloj[2]){			//btjt    s_reloj,#2,pregunta_edo_muestreo
 800aaf6:	4b42      	ldr	r3, [pc, #264]	@ (800ac00 <muestreo+0x444>)
 800aaf8:	789b      	ldrb	r3, [r3, #2]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d105      	bne.n	800ab0a <muestreo+0x34e>
			goto pregunta_edo_muestreo;
		}
		//ld    A,edo_muestreo
		if(edo_muestreo == 1){//cp    A,#1 ***************???
 800aafe:	4b43      	ldr	r3, [pc, #268]	@ (800ac0c <muestreo+0x450>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d000      	beq.n	800ab08 <muestreo+0x34c>
 800ab06:	e120      	b.n	800ad4a <muestreo+0x58e>
			goto muestrea; //jreq  muestrea
 800ab08:	e009      	b.n	800ab1e <muestreo+0x362>
			goto pregunta_edo_muestreo;
 800ab0a:	46c0      	nop			@ (mov r8, r8)


pregunta_edo_muestreo:

		//ld A,cnt_mues
		if(cnt_mues == 0){//cp A,#0
 800ab0c:	4b40      	ldr	r3, [pc, #256]	@ (800ac10 <muestreo+0x454>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d000      	beq.n	800ab16 <muestreo+0x35a>
 800ab14:	e10e      	b.n	800ad34 <muestreo+0x578>
			goto no_error_muestreo;//jreq no_error_muestreo
 800ab16:	46c0      	nop			@ (mov r8, r8)
		}
		goto error_muestreo;//jp error_muestreo


no_error_muestreo:
		edo_muestreo = 1; //mov edo_muestreo,#1
 800ab18:	4b3c      	ldr	r3, [pc, #240]	@ (800ac0c <muestreo+0x450>)
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	701a      	strb	r2, [r3, #0]


muestrea:
	    //ld A,cnt_mues
		if(cnt_mues != 32 ){ //cp A,#32 ****************
 800ab1e:	4b3c      	ldr	r3, [pc, #240]	@ (800ac10 <muestreo+0x454>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d178      	bne.n	800ac18 <muestreo+0x45c>
			goto adq_muesn; //jrne    adq_muesn
		}
		cnt_mues = 0;//clr     cnt_mues         ;SI, limpia el contador de muestras
 800ab26:	4b3a      	ldr	r3, [pc, #232]	@ (800ac10 <muestreo+0x454>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	701a      	strb	r2, [r3, #0]
		edo_muestreo = 0;//mov     edo_muestreo,#0
 800ab2c:	4b37      	ldr	r3, [pc, #220]	@ (800ac0c <muestreo+0x450>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	 //28-May-2024: Salida IO7 toogle test
		goto voltaje_rms;//jp      voltaje_rms
 800ab32:	46c0      	nop			@ (mov r8, r8)
voltaje_rms:
		//sigma_cuad_sampl_1 = 0;			//clr     sigma_cuad_sampl_1
		//sigma_cuad_sampl_2 = 0;			//clr     sigma_cuad_sampl_2
		//sigma_cuad_sampl_3 = 0;			//clr     sigma_cuad_sampl_3
		//sigma_cuad_sampl_4 = 0;			//clr     sigma_cuad_sampl_4
		sigma_cuad_sampl = 0;
 800ab34:	4b37      	ldr	r3, [pc, #220]	@ (800ac14 <muestreo+0x458>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	e096      	b.n	800ac6a <muestreo+0x4ae>
 800ab3c:	20000b44 	.word	0x20000b44
 800ab40:	20000c58 	.word	0x20000c58
 800ab44:	20002008 	.word	0x20002008
 800ab48:	20000e35 	.word	0x20000e35
 800ab4c:	20000e22 	.word	0x20000e22
 800ab50:	20000e34 	.word	0x20000e34
 800ab54:	20000e23 	.word	0x20000e23
 800ab58:	20000e2c 	.word	0x20000e2c
 800ab5c:	20000d14 	.word	0x20000d14
 800ab60:	20000e28 	.word	0x20000e28
 800ab64:	0803c000 	.word	0x0803c000
 800ab68:	20000e14 	.word	0x20000e14
 800ab6c:	20000e18 	.word	0x20000e18
 800ab70:	20000e1c 	.word	0x20000e1c
 800ab74:	20001e38 	.word	0x20001e38
 800ab78:	20000e38 	.word	0x20000e38
 800ab7c:	200020c6 	.word	0x200020c6
 800ab80:	200020ca 	.word	0x200020ca
 800ab84:	200020cc 	.word	0x200020cc
 800ab88:	0803f810 	.word	0x0803f810
 800ab8c:	20000e37 	.word	0x20000e37
 800ab90:	20000e36 	.word	0x20000e36
 800ab94:	20000d94 	.word	0x20000d94
 800ab98:	08037000 	.word	0x08037000
 800ab9c:	20001638 	.word	0x20001638
 800aba0:	200020c8 	.word	0x200020c8
 800aba4:	0803f812 	.word	0x0803f812
 800aba8:	20001f54 	.word	0x20001f54
 800abac:	3fffffff 	.word	0x3fffffff
 800abb0:	50000400 	.word	0x50000400
 800abb4:	50000800 	.word	0x50000800
 800abb8:	fffdffff 	.word	0xfffdffff
 800abbc:	50000c00 	.word	0x50000c00
 800abc0:	50001000 	.word	0x50001000
 800abc4:	50001400 	.word	0x50001400
 800abc8:	40021000 	.word	0x40021000
 800abcc:	200003ec 	.word	0x200003ec
 800abd0:	20000628 	.word	0x20000628
 800abd4:	200006bc 	.word	0x200006bc
 800abd8:	40002800 	.word	0x40002800
 800abdc:	20000514 	.word	0x20000514
 800abe0:	2000216e 	.word	0x2000216e
 800abe4:	200021a0 	.word	0x200021a0
 800abe8:	2000212a 	.word	0x2000212a
 800abec:	20000b94 	.word	0x20000b94
 800abf0:	20000b4c 	.word	0x20000b4c
 800abf4:	20000b74 	.word	0x20000b74
 800abf8:	20000b4b 	.word	0x20000b4b
 800abfc:	20002134 	.word	0x20002134
 800ac00:	20000b18 	.word	0x20000b18
 800ac04:	40012400 	.word	0x40012400
 800ac08:	20000b5c 	.word	0x20000b5c
 800ac0c:	20000b46 	.word	0x20000b46
 800ac10:	20000b1b 	.word	0x20000b1b
 800ac14:	20000b1c 	.word	0x20000b1c
			goto adq_muesn; //jrne    adq_muesn
 800ac18:	46c0      	nop			@ (mov r8, r8)
		ADC1->CHSELR = 0;
 800ac1a:	4b4e      	ldr	r3, [pc, #312]	@ (800ad54 <muestreo+0x598>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;  // Canal 0
 800ac20:	4b4c      	ldr	r3, [pc, #304]	@ (800ad54 <muestreo+0x598>)
 800ac22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac24:	4b4b      	ldr	r3, [pc, #300]	@ (800ad54 <muestreo+0x598>)
 800ac26:	2180      	movs	r1, #128	@ 0x80
 800ac28:	0089      	lsls	r1, r1, #2
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD();
 800ac2e:	f002 fe5d 	bl	800d8ec <capturaAD>
		asm ("nop");
 800ac32:	46c0      	nop			@ (mov r8, r8)
		adcramh >>= 1;    			//srlw    Y             ;Convierte la muestra de 10 bits en 9 bits ****************?????
 800ac34:	4b48      	ldr	r3, [pc, #288]	@ (800ad58 <muestreo+0x59c>)
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	085b      	lsrs	r3, r3, #1
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	4b46      	ldr	r3, [pc, #280]	@ (800ad58 <muestreo+0x59c>)
 800ac3e:	801a      	strh	r2, [r3, #0]
		adcramh >>= 1; 				//srlw    Y             ;Convierte la muestra de  9 bits en 8 bits ****************???
 800ac40:	4b45      	ldr	r3, [pc, #276]	@ (800ad58 <muestreo+0x59c>)
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	085b      	lsrs	r3, r3, #1
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	4b43      	ldr	r3, [pc, #268]	@ (800ad58 <muestreo+0x59c>)
 800ac4a:	801a      	strh	r2, [r3, #0]
		vl_ram [cnt_mues] = (uint8_t) adcramh;
 800ac4c:	4b42      	ldr	r3, [pc, #264]	@ (800ad58 <muestreo+0x59c>)
 800ac4e:	8819      	ldrh	r1, [r3, #0]
 800ac50:	4b42      	ldr	r3, [pc, #264]	@ (800ad5c <muestreo+0x5a0>)
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	001a      	movs	r2, r3
 800ac56:	b2c9      	uxtb	r1, r1
 800ac58:	4b41      	ldr	r3, [pc, #260]	@ (800ad60 <muestreo+0x5a4>)
 800ac5a:	5499      	strb	r1, [r3, r2]
		cnt_mues++;			//inc     cnt_mues			;Una muestra más
 800ac5c:	4b3f      	ldr	r3, [pc, #252]	@ (800ad5c <muestreo+0x5a0>)
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	4b3d      	ldr	r3, [pc, #244]	@ (800ad5c <muestreo+0x5a0>)
 800ac66:	701a      	strb	r2, [r3, #0]
		goto fin_voltrms;//jp      fin_voltrms
 800ac68:	e070      	b.n	800ad4c <muestreo+0x590>
				// ldw X,#vl_ram
				// ld A,XL
				// add A,cnt_mues
				// ld  XL,A
				// ld A,(X)  ////////////?????
				wreg= vl_ram[cnt_mues]; //ld wreg,A
 800ac6a:	4b3c      	ldr	r3, [pc, #240]	@ (800ad5c <muestreo+0x5a0>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	001a      	movs	r2, r3
 800ac70:	4b3b      	ldr	r3, [pc, #236]	@ (800ad60 <muestreo+0x5a4>)
 800ac72:	5c9a      	ldrb	r2, [r3, r2]
 800ac74:	4b3b      	ldr	r3, [pc, #236]	@ (800ad64 <muestreo+0x5a8>)
 800ac76:	701a      	strb	r2, [r3, #0]
take_sampling:
//----------------------- Factor
					//ldw     X,waux
					//ld      A,eevolt_mul
	                //eevolt_mul = waux * eevolt_mul;//mul     X,A ***************************????
					uint16_t	foo = 0;
 800ac78:	1d3b      	adds	r3, r7, #4
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	801a      	strh	r2, [r3, #0]
					//foo = (uint16_t)(wreg * eevolt_mul);
					foo = (uint16_t)(wreg * reevolt_mul);
 800ac7e:	4b39      	ldr	r3, [pc, #228]	@ (800ad64 <muestreo+0x5a8>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	001a      	movs	r2, r3
 800ac84:	4b38      	ldr	r3, [pc, #224]	@ (800ad68 <muestreo+0x5ac>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	0019      	movs	r1, r3
 800ac8a:	1d3b      	adds	r3, r7, #4
 800ac8c:	434a      	muls	r2, r1
 800ac8e:	801a      	strh	r2, [r3, #0]
					//resul = (uint16_t)(wreg * 100);
					//ld      A,eevolt_div
					//div     X,A
	                //eevolt_div = waux / eevolt_div; //************************************?????
					//foo = foo / eevolt_div;
					foo = foo / reevolt_div;
 800ac90:	1d3b      	adds	r3, r7, #4
 800ac92:	881a      	ldrh	r2, [r3, #0]
 800ac94:	4b35      	ldr	r3, [pc, #212]	@ (800ad6c <muestreo+0x5b0>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	0019      	movs	r1, r3
 800ac9a:	0010      	movs	r0, r2
 800ac9c:	f7f5 fac6 	bl	800022c <__divsi3>
 800aca0:	0003      	movs	r3, r0
 800aca2:	001a      	movs	r2, r3
 800aca4:	1d3b      	adds	r3, r7, #4
 800aca6:	801a      	strh	r2, [r3, #0]
					//ld      XL,A
					//ld      A,resulh //----------------------------------------------?
					//mul     X,A
	                //resulh = waux*resulh;
	                //level_4st_mult_H = resulh;//ldw level_4st_mult_H,X
					level_4st_mult = (uint32_t)(foo * foo);
 800aca8:	1d3b      	adds	r3, r7, #4
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	1d3a      	adds	r2, r7, #4
 800acae:	8812      	ldrh	r2, [r2, #0]
 800acb0:	4353      	muls	r3, r2
 800acb2:	001a      	movs	r2, r3
 800acb4:	4b2e      	ldr	r3, [pc, #184]	@ (800ad70 <muestreo+0x5b4>)
 800acb6:	601a      	str	r2, [r3, #0]
			//addw X,level_2st_result_H
			//level_2st_result_H = waux + level_2st_result_H;
			//addw X,sigma_cuad_sampl_4
			//ldw sigma_cuad_sampl_4,X
			//sigma_cuad_sampl_4 = waux + sigma_cuad_sampl_4;
              sigma_cuad_sampl +=  level_4st_mult;
 800acb8:	4b2e      	ldr	r3, [pc, #184]	@ (800ad74 <muestreo+0x5b8>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	4b2c      	ldr	r3, [pc, #176]	@ (800ad70 <muestreo+0x5b4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	18d2      	adds	r2, r2, r3
 800acc2:	4b2c      	ldr	r3, [pc, #176]	@ (800ad74 <muestreo+0x5b8>)
 800acc4:	601a      	str	r2, [r3, #0]

	//================================================= FIN Rutina CALCULA SUMATORIA

			cnt_mues++;//inc cnt_mues
 800acc6:	4b25      	ldr	r3, [pc, #148]	@ (800ad5c <muestreo+0x5a0>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	b2da      	uxtb	r2, r3
 800acce:	4b23      	ldr	r3, [pc, #140]	@ (800ad5c <muestreo+0x5a0>)
 800acd0:	701a      	strb	r2, [r3, #0]
			//ld      A,cnt_mues
			if(cnt_mues >= 32){//cp A,#32 -------------------------?
 800acd2:	4b22      	ldr	r3, [pc, #136]	@ (800ad5c <muestreo+0x5a0>)
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b1f      	cmp	r3, #31
 800acd8:	d800      	bhi.n	800acdc <muestreo+0x520>
				goto sumatoria_completa;//jreq sumatoria_completa
			}
			goto suma_cuad;//jp suma_cuad
 800acda:	e7c6      	b.n	800ac6a <muestreo+0x4ae>
				goto sumatoria_completa;//jreq sumatoria_completa
 800acdc:	46c0      	nop			@ (mov r8, r8)

sumatoria_completa:
			cnt_mues = 0;//clr cnt_mues
 800acde:	4b1f      	ldr	r3, [pc, #124]	@ (800ad5c <muestreo+0x5a0>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	701a      	strb	r2, [r3, #0]
			//		   goto taking_prom;//jrne taking_prom
			//	   }
				   //ldw X,sigma_cuad_sampl_2
				   //ldw	sigma_prom_h,X
			//	   sigma_prom_h = sigma_cuad_sampl_2;
			sigma_cuad_sampl  >>= 5;
 800ace4:	4b23      	ldr	r3, [pc, #140]	@ (800ad74 <muestreo+0x5b8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	095a      	lsrs	r2, r3, #5
 800acea:	4b22      	ldr	r3, [pc, #136]	@ (800ad74 <muestreo+0x5b8>)
 800acec:	601a      	str	r2, [r3, #0]
	//				addw sp,#6

					//ld A, XL
					//ld volt_trms, A
					//volt_trms = sigma_prom_h;
					volt_trms = (uint8_t)(sqrt(sigma_cuad_sampl));
 800acee:	4b21      	ldr	r3, [pc, #132]	@ (800ad74 <muestreo+0x5b8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	0018      	movs	r0, r3
 800acf4:	f7f7 fc3a 	bl	800256c <__aeabi_ui2d>
 800acf8:	0002      	movs	r2, r0
 800acfa:	000b      	movs	r3, r1
 800acfc:	0010      	movs	r0, r2
 800acfe:	0019      	movs	r1, r3
 800ad00:	f00f ffc6 	bl	801ac90 <sqrt>
 800ad04:	0002      	movs	r2, r0
 800ad06:	000b      	movs	r3, r1
 800ad08:	0010      	movs	r0, r2
 800ad0a:	0019      	movs	r1, r3
 800ad0c:	f7f5 fbf6 	bl	80004fc <__aeabi_d2uiz>
 800ad10:	0003      	movs	r3, r0
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	4b18      	ldr	r3, [pc, #96]	@ (800ad78 <muestreo+0x5bc>)
 800ad16:	701a      	strb	r2, [r3, #0]
					cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800ad18:	4b18      	ldr	r3, [pc, #96]	@ (800ad7c <muestreo+0x5c0>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	701a      	strb	r2, [r3, #0]

					flagsLogger2[0] = 0;//bres flagsLogger2, #0
 800ad1e:	4b18      	ldr	r3, [pc, #96]	@ (800ad80 <muestreo+0x5c4>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
					flagsLogger2[1] = 0;//bres flagsLogger2, #1
 800ad24:	4b16      	ldr	r3, [pc, #88]	@ (800ad80 <muestreo+0x5c4>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	705a      	strb	r2, [r3, #1]
					flagsLogger2[2] = 0;//BRES flagsLogger2, #2
 800ad2a:	4b15      	ldr	r3, [pc, #84]	@ (800ad80 <muestreo+0x5c4>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	709a      	strb	r2, [r3, #2]

					// SAlto por lo mientras
					goto fin_calibra_voltaje;
 800ad30:	46c0      	nop			@ (mov r8, r8)
			asm ("nop");
			asm ("nop");
	        goto calibra_reset;//jp      calibra_reset

fin_calibra_voltaje:
	        goto fin_voltrms;// jp fin_voltrms
 800ad32:	e00b      	b.n	800ad4c <muestreo+0x590>
		goto error_muestreo;//jp error_muestreo
 800ad34:	46c0      	nop			@ (mov r8, r8)
error_muestreo:
			cnt_mues = 0;//clr cnt_mues
 800ad36:	4b09      	ldr	r3, [pc, #36]	@ (800ad5c <muestreo+0x5a0>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	701a      	strb	r2, [r3, #0]
			cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad7c <muestreo+0x5c0>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
			edo_muestreo = 0;//mov edo_muestreo,#0
 800ad42:	4b10      	ldr	r3, [pc, #64]	@ (800ad84 <muestreo+0x5c8>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	701a      	strb	r2, [r3, #0]
fin_voltrms:


}
 800ad48:	e000      	b.n	800ad4c <muestreo+0x590>
		goto fin_voltrms;//jp fin_voltrms
 800ad4a:	46c0      	nop			@ (mov r8, r8)
}
 800ad4c:	46c0      	nop			@ (mov r8, r8)
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	b002      	add	sp, #8
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	40012400 	.word	0x40012400
 800ad58:	20000b5c 	.word	0x20000b5c
 800ad5c:	20000b1b 	.word	0x20000b1b
 800ad60:	20000b24 	.word	0x20000b24
 800ad64:	20000b53 	.word	0x20000b53
 800ad68:	200001b9 	.word	0x200001b9
 800ad6c:	200001b8 	.word	0x200001b8
 800ad70:	20000b20 	.word	0x20000b20
 800ad74:	20000b1c 	.word	0x20000b1c
 800ad78:	20000b45 	.word	0x20000b45
 800ad7c:	20000b44 	.word	0x20000b44
 800ad80:	20002008 	.word	0x20002008
 800ad84:	20000b46 	.word	0x20000b46

0800ad88 <ADC_Deinit_Func>:

void ADC_Deinit_Func()
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 	const uint32_t tmp_adc_is_disable_on_going = ((ADC1->CR & ADC_CR_ADDIS) != 0) ? 1UL : 0UL;
 800ad8e:	4b53      	ldr	r3, [pc, #332]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	2202      	movs	r2, #2
 800ad94:	4013      	ands	r3, r2
 800ad96:	d001      	beq.n	800ad9c <ADC_Deinit_Func+0x14>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e000      	b.n	800ad9e <ADC_Deinit_Func+0x16>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	607b      	str	r3, [r7, #4]


	if (((ADC1->CR & ADC_CR_ADEN) != 0) && (tmp_adc_is_disable_on_going == 0UL))
 800ada0:	4b4e      	ldr	r3, [pc, #312]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	2201      	movs	r2, #1
 800ada6:	4013      	ands	r3, r2
 800ada8:	d100      	bne.n	800adac <ADC_Deinit_Func+0x24>
 800adaa:	e092      	b.n	800aed2 <ADC_Deinit_Func+0x14a>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d000      	beq.n	800adb4 <ADC_Deinit_Func+0x2c>
 800adb2:	e08e      	b.n	800aed2 <ADC_Deinit_Func+0x14a>
	{
		if ((ADC1->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800adb4:	4b49      	ldr	r3, [pc, #292]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	2205      	movs	r2, #5
 800adba:	4013      	ands	r3, r2
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d10a      	bne.n	800add6 <ADC_Deinit_Func+0x4e>
		{
			ADC1->CR = (ADC1->CR & ~ADC_CR_BITS_PROPERTY_RS) | ADC_CR_ADDIS;
 800adc0:	4b46      	ldr	r3, [pc, #280]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	4a46      	ldr	r2, [pc, #280]	@ (800aee0 <ADC_Deinit_Func+0x158>)
 800adc6:	401a      	ands	r2, r3
 800adc8:	4b44      	ldr	r3, [pc, #272]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800adca:	2102      	movs	r1, #2
 800adcc:	430a      	orrs	r2, r1
 800adce:	609a      	str	r2, [r3, #8]
			ADC1->ISR = (ADC_FLAG_EOSMP | ADC_FLAG_RDY);
 800add0:	4b42      	ldr	r3, [pc, #264]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800add2:	2203      	movs	r2, #3
 800add4:	601a      	str	r2, [r3, #0]
		}

		CLEAR_BIT(ADC1->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800add6:	4b41      	ldr	r3, [pc, #260]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	4b40      	ldr	r3, [pc, #256]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800addc:	4941      	ldr	r1, [pc, #260]	@ (800aee4 <ADC_Deinit_Func+0x15c>)
 800adde:	400a      	ands	r2, r1
 800ade0:	609a      	str	r2, [r3, #8]

		ADC1->IER &= ~(ADC_IT_AWD3 | ADC_IT_AWD2 | ADC_IT_AWD1 | ADC_IT_OVR |
 800ade2:	4b3e      	ldr	r3, [pc, #248]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	4b3d      	ldr	r3, [pc, #244]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ade8:	493f      	ldr	r1, [pc, #252]	@ (800aee8 <ADC_Deinit_Func+0x160>)
 800adea:	400a      	ands	r2, r1
 800adec:	605a      	str	r2, [r3, #4]
	               ADC_IT_EOS | ADC_IT_EOC | ADC_IT_EOCAL | ADC_IT_EOSMP | ADC_IT_RDY);

		ADC1->ISR = (ADC_FLAG_AWD3 | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 | ADC_FLAG_OVR |
 800adee:	4b3b      	ldr	r3, [pc, #236]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800adf0:	4a3e      	ldr	r2, [pc, #248]	@ (800aeec <ADC_Deinit_Func+0x164>)
 800adf2:	601a      	str	r2, [r3, #0]
	             ADC_FLAG_EOS | ADC_FLAG_EOC | ADC_FLAG_EOCAL | ADC_FLAG_EOSMP | ADC_FLAG_RDY);

		ADC1->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800adf4:	4b39      	ldr	r3, [pc, #228]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800adf6:	68da      	ldr	r2, [r3, #12]
 800adf8:	4b38      	ldr	r3, [pc, #224]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800adfa:	493d      	ldr	r1, [pc, #244]	@ (800aef0 <ADC_Deinit_Func+0x168>)
 800adfc:	400a      	ands	r2, r1
 800adfe:	60da      	str	r2, [r3, #12]
	                 ADC_CFGR1_CHSELRMOD | ADC_CFGR1_AUTOFF |
	                 ADC_CFGR1_WAIT | ADC_CFGR1_CONT | ADC_CFGR1_OVRMOD |
	                 ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
	                 ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

		ADC1->SMPR &= ~ADC_SMPR_SMP1;
 800ae00:	4b36      	ldr	r3, [pc, #216]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae02:	695a      	ldr	r2, [r3, #20]
 800ae04:	4b35      	ldr	r3, [pc, #212]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae06:	2107      	movs	r1, #7
 800ae08:	438a      	bics	r2, r1
 800ae0a:	615a      	str	r2, [r3, #20]
		ADC1->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800ae0c:	4b33      	ldr	r3, [pc, #204]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae10:	4b32      	ldr	r3, [pc, #200]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	629a      	str	r2, [r3, #40]	@ 0x28

	  	ADC1->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800ae16:	4b31      	ldr	r3, [pc, #196]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae18:	6a1a      	ldr	r2, [r3, #32]
 800ae1a:	4b30      	ldr	r3, [pc, #192]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae1c:	4935      	ldr	r1, [pc, #212]	@ (800aef4 <ADC_Deinit_Func+0x16c>)
 800ae1e:	400a      	ands	r2, r1
 800ae20:	621a      	str	r2, [r3, #32]
		ADC1->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800ae22:	4b2e      	ldr	r3, [pc, #184]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae26:	4b2d      	ldr	r3, [pc, #180]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae28:	4932      	ldr	r1, [pc, #200]	@ (800aef4 <ADC_Deinit_Func+0x16c>)
 800ae2a:	400a      	ands	r2, r1
 800ae2c:	625a      	str	r2, [r3, #36]	@ 0x24
	  	ADC1->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800ae2e:	4b2b      	ldr	r3, [pc, #172]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae32:	4b2a      	ldr	r3, [pc, #168]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae34:	492f      	ldr	r1, [pc, #188]	@ (800aef4 <ADC_Deinit_Func+0x16c>)
 800ae36:	400a      	ands	r2, r1
 800ae38:	62da      	str	r2, [r3, #44]	@ 0x2c

		ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800ae3a:	4b28      	ldr	r3, [pc, #160]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae3c:	691a      	ldr	r2, [r3, #16]
 800ae3e:	4b27      	ldr	r3, [pc, #156]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae40:	0092      	lsls	r2, r2, #2
 800ae42:	0892      	lsrs	r2, r2, #2
 800ae44:	611a      	str	r2, [r3, #16]

		ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800ae46:	4b2c      	ldr	r3, [pc, #176]	@ (800aef8 <ADC_Deinit_Func+0x170>)
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	4b2b      	ldr	r3, [pc, #172]	@ (800aef8 <ADC_Deinit_Func+0x170>)
 800ae4c:	492b      	ldr	r1, [pc, #172]	@ (800aefc <ADC_Deinit_Func+0x174>)
 800ae4e:	400a      	ands	r2, r1
 800ae50:	601a      	str	r2, [r3, #0]

		__HAL_RCC_ADC_CLK_DISABLE();
 800ae52:	4b2b      	ldr	r3, [pc, #172]	@ (800af00 <ADC_Deinit_Func+0x178>)
 800ae54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ae56:	4b2a      	ldr	r3, [pc, #168]	@ (800af00 <ADC_Deinit_Func+0x178>)
 800ae58:	492a      	ldr	r1, [pc, #168]	@ (800af04 <ADC_Deinit_Func+0x17c>)
 800ae5a:	400a      	ands	r2, r1
 800ae5c:	661a      	str	r2, [r3, #96]	@ 0x60

	    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4);
 800ae5e:	4b2a      	ldr	r3, [pc, #168]	@ (800af08 <ADC_Deinit_Func+0x180>)
 800ae60:	2113      	movs	r1, #19
 800ae62:	0018      	movs	r0, r3
 800ae64:	f008 f95c 	bl	8013120 <HAL_GPIO_DeInit>
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800ae68:	23a0      	movs	r3, #160	@ 0xa0
 800ae6a:	05db      	lsls	r3, r3, #23
 800ae6c:	21e0      	movs	r1, #224	@ 0xe0
 800ae6e:	0018      	movs	r0, r3
 800ae70:	f008 f956 	bl	8013120 <HAL_GPIO_DeInit>
	    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 800ae74:	4b25      	ldr	r3, [pc, #148]	@ (800af0c <ADC_Deinit_Func+0x184>)
 800ae76:	2102      	movs	r1, #2
 800ae78:	0018      	movs	r0, r3
 800ae7a:	f008 f951 	bl	8013120 <HAL_GPIO_DeInit>

		//ADC1-> ADCGroupRegularSequencerRanks = 0x00000000UL;

		ADC1 -> ISR 	= 0x00000000;
 800ae7e:	4b17      	ldr	r3, [pc, #92]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
		ADC1 -> IER 	= 0x00000000;
 800ae84:	4b15      	ldr	r3, [pc, #84]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	605a      	str	r2, [r3, #4]
		ADC1 -> CR  	= 0x00000000;
 800ae8a:	4b14      	ldr	r3, [pc, #80]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	609a      	str	r2, [r3, #8]
		ADC1 -> CFGR1 	= 0x00000000;
 800ae90:	4b12      	ldr	r3, [pc, #72]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	60da      	str	r2, [r3, #12]
		ADC1 -> CFGR2   = 0x00000000;
 800ae96:	4b11      	ldr	r3, [pc, #68]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	611a      	str	r2, [r3, #16]
		ADC1 -> SMPR    = 0x00000000;
 800ae9c:	4b0f      	ldr	r3, [pc, #60]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	615a      	str	r2, [r3, #20]
		ADC1 -> AWD1TR  = 0x0FFF0000;
 800aea2:	4b0e      	ldr	r3, [pc, #56]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800aea4:	4a1a      	ldr	r2, [pc, #104]	@ (800af10 <ADC_Deinit_Func+0x188>)
 800aea6:	621a      	str	r2, [r3, #32]
		ADC1 -> CHSELR  = 0x00000000;
 800aea8:	4b0c      	ldr	r3, [pc, #48]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1 -> AWD3TR  = 0x0FFF0000;
 800aeae:	4b0b      	ldr	r3, [pc, #44]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800aeb0:	4a17      	ldr	r2, [pc, #92]	@ (800af10 <ADC_Deinit_Func+0x188>)
 800aeb2:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC1 -> DR      = 0x00000000;
 800aeb4:	4b09      	ldr	r3, [pc, #36]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	641a      	str	r2, [r3, #64]	@ 0x40
		ADC1 -> AWD2CR  = 0x00000000;
 800aeba:	4a08      	ldr	r2, [pc, #32]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800aebc:	23a0      	movs	r3, #160	@ 0xa0
 800aebe:	2100      	movs	r1, #0
 800aec0:	50d1      	str	r1, [r2, r3]
		ADC1 -> AWD3CR  = 0x00000000;
 800aec2:	4a06      	ldr	r2, [pc, #24]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800aec4:	23a4      	movs	r3, #164	@ 0xa4
 800aec6:	2100      	movs	r1, #0
 800aec8:	50d1      	str	r1, [r2, r3]
		ADC1 -> CALFACT = 0x00000000;
 800aeca:	4a04      	ldr	r2, [pc, #16]	@ (800aedc <ADC_Deinit_Func+0x154>)
 800aecc:	23b4      	movs	r3, #180	@ 0xb4
 800aece:	2100      	movs	r1, #0
 800aed0:	50d1      	str	r1, [r2, r3]
		//ADC1 -> CCR     = 0x00000000;
	}

}
 800aed2:	46c0      	nop			@ (mov r8, r8)
 800aed4:	46bd      	mov	sp, r7
 800aed6:	b002      	add	sp, #8
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	46c0      	nop			@ (mov r8, r8)
 800aedc:	40012400 	.word	0x40012400
 800aee0:	7fffffe8 	.word	0x7fffffe8
 800aee4:	6fffffe8 	.word	0x6fffffe8
 800aee8:	fffff460 	.word	0xfffff460
 800aeec:	00000b9f 	.word	0x00000b9f
 800aef0:	831e0200 	.word	0x831e0200
 800aef4:	f000f000 	.word	0xf000f000
 800aef8:	40012708 	.word	0x40012708
 800aefc:	fe03ffff 	.word	0xfe03ffff
 800af00:	40021000 	.word	0x40021000
 800af04:	ffefffff 	.word	0xffefffff
 800af08:	50000800 	.word	0x50000800
 800af0c:	50000400 	.word	0x50000400
 800af10:	0fff0000 	.word	0x0fff0000

0800af14 <noctar>:


void noctar (void){
 800af14:	b580      	push	{r7, lr}
 800af16:	af00      	add	r7, sp, #0

	asm ("nop");
 800af18:	46c0      	nop			@ (mov r8, r8)

}
 800af1a:	46c0      	nop			@ (mov r8, r8)
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"
#include "ELTEC_EmulatedEEPROM.h"


void refrigera (void){
 800af20:	b590      	push	{r4, r7, lr}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800af26:	2300      	movs	r3, #0
 800af28:	617b      	str	r3, [r7, #20]
 800af2a:	e00c      	b.n	800af46 <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 800af2c:	4ad4      	ldr	r2, [pc, #848]	@ (800b280 <refrigera+0x360>)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	18d3      	adds	r3, r2, r3
 800af32:	2200      	movs	r2, #0
 800af34:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 800af36:	4ad3      	ldr	r2, [pc, #844]	@ (800b284 <refrigera+0x364>)
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	18d3      	adds	r3, r2, r3
 800af3c:	2200      	movs	r2, #0
 800af3e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	3301      	adds	r3, #1
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b07      	cmp	r3, #7
 800af4a:	ddef      	ble.n	800af2c <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 800af4c:	4bce      	ldr	r3, [pc, #824]	@ (800b288 <refrigera+0x368>)
 800af4e:	2253      	movs	r2, #83	@ 0x53
 800af50:	5c9a      	ldrb	r2, [r3, r2]
 800af52:	4bce      	ldr	r3, [pc, #824]	@ (800b28c <refrigera+0x36c>)
 800af54:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 800af56:	4bcd      	ldr	r3, [pc, #820]	@ (800b28c <refrigera+0x36c>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	001a      	movs	r2, r3
 800af5c:	2301      	movs	r3, #1
 800af5e:	4013      	ands	r3, r2
 800af60:	d003      	beq.n	800af6a <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 800af62:	4bc7      	ldr	r3, [pc, #796]	@ (800b280 <refrigera+0x360>)
 800af64:	2201      	movs	r2, #1
 800af66:	70da      	strb	r2, [r3, #3]
 800af68:	e000      	b.n	800af6c <refrigera+0x4c>
					goto refrigera_j00;
 800af6a:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 800af6c:	4bc7      	ldr	r3, [pc, #796]	@ (800b28c <refrigera+0x36c>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	001a      	movs	r2, r3
 800af72:	2302      	movs	r3, #2
 800af74:	4013      	ands	r3, r2
 800af76:	d003      	beq.n	800af80 <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 800af78:	4bc1      	ldr	r3, [pc, #772]	@ (800b280 <refrigera+0x360>)
 800af7a:	2201      	movs	r2, #1
 800af7c:	711a      	strb	r2, [r3, #4]
 800af7e:	e000      	b.n	800af82 <refrigera+0x62>
					goto refrigera_j01;
 800af80:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 800af82:	4bc1      	ldr	r3, [pc, #772]	@ (800b288 <refrigera+0x368>)
 800af84:	2262      	movs	r2, #98	@ 0x62
 800af86:	5c9a      	ldrb	r2, [r3, r2]
 800af88:	4bc0      	ldr	r3, [pc, #768]	@ (800b28c <refrigera+0x36c>)
 800af8a:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 800af8c:	f7fb fce6 	bl	800695c <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 800af90:	4bbd      	ldr	r3, [pc, #756]	@ (800b288 <refrigera+0x368>)
 800af92:	2257      	movs	r2, #87	@ 0x57
 800af94:	5c9b      	ldrb	r3, [r3, r2]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d11e      	bne.n	800afd8 <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 800af9a:	4bbb      	ldr	r3, [pc, #748]	@ (800b288 <refrigera+0x368>)
 800af9c:	2243      	movs	r2, #67	@ 0x43
 800af9e:	5c9b      	ldrb	r3, [r3, r2]
 800afa0:	3364      	adds	r3, #100	@ 0x64
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	4bba      	ldr	r3, [pc, #744]	@ (800b290 <refrigera+0x370>)
 800afa6:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 800afa8:	4bb9      	ldr	r3, [pc, #740]	@ (800b290 <refrigera+0x370>)
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	4bb9      	ldr	r3, [pc, #740]	@ (800b294 <refrigera+0x374>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	18d3      	adds	r3, r2, r3
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	4bb8      	ldr	r3, [pc, #736]	@ (800b298 <refrigera+0x378>)
 800afb6:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 800afb8:	4bb3      	ldr	r3, [pc, #716]	@ (800b288 <refrigera+0x368>)
 800afba:	2244      	movs	r2, #68	@ 0x44
 800afbc:	5c9b      	ldrb	r3, [r3, r2]
 800afbe:	3b38      	subs	r3, #56	@ 0x38
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	4bb6      	ldr	r3, [pc, #728]	@ (800b29c <refrigera+0x37c>)
 800afc4:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 800afc6:	4bb5      	ldr	r3, [pc, #724]	@ (800b29c <refrigera+0x37c>)
 800afc8:	781a      	ldrb	r2, [r3, #0]
 800afca:	4bb0      	ldr	r3, [pc, #704]	@ (800b28c <refrigera+0x36c>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	4bb3      	ldr	r3, [pc, #716]	@ (800b2a0 <refrigera+0x380>)
 800afd4:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 800afd6:	e021      	b.n	800b01c <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 800afd8:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 800afda:	4bab      	ldr	r3, [pc, #684]	@ (800b288 <refrigera+0x368>)
 800afdc:	2257      	movs	r2, #87	@ 0x57
 800afde:	5c9b      	ldrb	r3, [r3, r2]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d11f      	bne.n	800b024 <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 800afe4:	4ba8      	ldr	r3, [pc, #672]	@ (800b288 <refrigera+0x368>)
 800afe6:	2242      	movs	r2, #66	@ 0x42
 800afe8:	5c9a      	ldrb	r2, [r3, r2]
 800afea:	4ba9      	ldr	r3, [pc, #676]	@ (800b290 <refrigera+0x370>)
 800afec:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 800afee:	4ba8      	ldr	r3, [pc, #672]	@ (800b290 <refrigera+0x370>)
 800aff0:	781a      	ldrb	r2, [r3, #0]
 800aff2:	4ba8      	ldr	r3, [pc, #672]	@ (800b294 <refrigera+0x374>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	18d3      	adds	r3, r2, r3
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	4ba7      	ldr	r3, [pc, #668]	@ (800b298 <refrigera+0x378>)
 800affc:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 800affe:	4ba2      	ldr	r3, [pc, #648]	@ (800b288 <refrigera+0x368>)
 800b000:	2243      	movs	r2, #67	@ 0x43
 800b002:	5c9b      	ldrb	r3, [r3, r2]
 800b004:	3364      	adds	r3, #100	@ 0x64
 800b006:	b2da      	uxtb	r2, r3
 800b008:	4ba4      	ldr	r3, [pc, #656]	@ (800b29c <refrigera+0x37c>)
 800b00a:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 800b00c:	4ba3      	ldr	r3, [pc, #652]	@ (800b29c <refrigera+0x37c>)
 800b00e:	781a      	ldrb	r2, [r3, #0]
 800b010:	4b9e      	ldr	r3, [pc, #632]	@ (800b28c <refrigera+0x36c>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	b2da      	uxtb	r2, r3
 800b018:	4ba1      	ldr	r3, [pc, #644]	@ (800b2a0 <refrigera+0x380>)
 800b01a:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 800b01c:	4b98      	ldr	r3, [pc, #608]	@ (800b280 <refrigera+0x360>)
 800b01e:	2201      	movs	r2, #1
 800b020:	719a      	strb	r2, [r3, #6]
 800b022:	e000      	b.n	800b026 <refrigera+0x106>
					goto refrige05;//jrne refrige05
 800b024:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 800b026:	4b97      	ldr	r3, [pc, #604]	@ (800b284 <refrigera+0x364>)
 800b028:	2201      	movs	r2, #1
 800b02a:	705a      	strb	r2, [r3, #1]
				if(GetRegFlagState(Plantilla[logicos2],funReleDesh))	// btjt		logicos2,#funReleDesh,deshTypeAct_01
 800b02c:	4b96      	ldr	r3, [pc, #600]	@ (800b288 <refrigera+0x368>)
 800b02e:	225b      	movs	r2, #91	@ 0x5b
 800b030:	5c9b      	ldrb	r3, [r3, r2]
 800b032:	001a      	movs	r2, r3
 800b034:	2308      	movs	r3, #8
 800b036:	4013      	ands	r3, r2
 800b038:	d104      	bne.n	800b044 <refrigera+0x124>
					goto deshTypeAct_01;
				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 800b03a:	4b93      	ldr	r3, [pc, #588]	@ (800b288 <refrigera+0x368>)
 800b03c:	2255      	movs	r2, #85	@ 0x55
 800b03e:	2100      	movs	r1, #0
 800b040:	5499      	strb	r1, [r3, r2]
 800b042:	e000      	b.n	800b046 <refrigera+0x126>
					goto deshTypeAct_01;
 800b044:	46c0      	nop			@ (mov r8, r8)
deshTypeAct_01:
              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 800b046:	4b97      	ldr	r3, [pc, #604]	@ (800b2a4 <refrigera+0x384>)
 800b048:	0018      	movs	r0, r3
 800b04a:	f7fb fa3d 	bl	80064c8 <TwoByteInArrayToWord>
 800b04e:	0003      	movs	r3, r0
 800b050:	b29a      	uxth	r2, r3
 800b052:	4b95      	ldr	r3, [pc, #596]	@ (800b2a8 <refrigera+0x388>)
 800b054:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 800b056:	4b95      	ldr	r3, [pc, #596]	@ (800b2ac <refrigera+0x38c>)
 800b058:	0018      	movs	r0, r3
 800b05a:	f7fb fa35 	bl	80064c8 <TwoByteInArrayToWord>
 800b05e:	0003      	movs	r3, r0
 800b060:	b29a      	uxth	r2, r3
 800b062:	4b91      	ldr	r3, [pc, #580]	@ (800b2a8 <refrigera+0x388>)
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	18d3      	adds	r3, r2, r3
 800b068:	b29a      	uxth	r2, r3
 800b06a:	4b91      	ldr	r3, [pc, #580]	@ (800b2b0 <refrigera+0x390>)
 800b06c:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 800b06e:	4b91      	ldr	r3, [pc, #580]	@ (800b2b4 <refrigera+0x394>)
 800b070:	785b      	ldrb	r3, [r3, #1]
 800b072:	2201      	movs	r2, #1
 800b074:	4053      	eors	r3, r2
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d137      	bne.n	800b0ec <refrigera+0x1cc>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800b07c:	4b8e      	ldr	r3, [pc, #568]	@ (800b2b8 <refrigera+0x398>)
 800b07e:	0018      	movs	r0, r3
 800b080:	f7fb fa22 	bl	80064c8 <TwoByteInArrayToWord>
 800b084:	0003      	movs	r3, r0
 800b086:	b29a      	uxth	r2, r3
 800b088:	4b87      	ldr	r3, [pc, #540]	@ (800b2a8 <refrigera+0x388>)
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	18d3      	adds	r3, r2, r3
 800b08e:	b29a      	uxth	r2, r3
 800b090:	4b85      	ldr	r3, [pc, #532]	@ (800b2a8 <refrigera+0x388>)
 800b092:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800b094:	4b88      	ldr	r3, [pc, #544]	@ (800b2b8 <refrigera+0x398>)
 800b096:	0018      	movs	r0, r3
 800b098:	f7fb fa16 	bl	80064c8 <TwoByteInArrayToWord>
 800b09c:	0003      	movs	r3, r0
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	4b83      	ldr	r3, [pc, #524]	@ (800b2b0 <refrigera+0x390>)
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	18d3      	adds	r3, r2, r3
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	4b81      	ldr	r3, [pc, #516]	@ (800b2b0 <refrigera+0x390>)
 800b0aa:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 800b0ac:	4b81      	ldr	r3, [pc, #516]	@ (800b2b4 <refrigera+0x394>)
 800b0ae:	789b      	ldrb	r3, [r3, #2]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	4053      	eors	r3, r2
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d11a      	bne.n	800b0f0 <refrigera+0x1d0>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800b0ba:	4b80      	ldr	r3, [pc, #512]	@ (800b2bc <refrigera+0x39c>)
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f7fb fa03 	bl	80064c8 <TwoByteInArrayToWord>
 800b0c2:	0003      	movs	r3, r0
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	4b78      	ldr	r3, [pc, #480]	@ (800b2a8 <refrigera+0x388>)
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	18d3      	adds	r3, r2, r3
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	4b76      	ldr	r3, [pc, #472]	@ (800b2a8 <refrigera+0x388>)
 800b0d0:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800b0d2:	4b7a      	ldr	r3, [pc, #488]	@ (800b2bc <refrigera+0x39c>)
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	f7fb f9f7 	bl	80064c8 <TwoByteInArrayToWord>
 800b0da:	0003      	movs	r3, r0
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	4b74      	ldr	r3, [pc, #464]	@ (800b2b0 <refrigera+0x390>)
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	18d3      	adds	r3, r2, r3
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	4b72      	ldr	r3, [pc, #456]	@ (800b2b0 <refrigera+0x390>)
 800b0e8:	801a      	strh	r2, [r3, #0]
 800b0ea:	e002      	b.n	800b0f2 <refrigera+0x1d2>
					goto no_ahorro1;
 800b0ec:	46c0      	nop			@ (mov r8, r8)
 800b0ee:	e000      	b.n	800b0f2 <refrigera+0x1d2>
					goto no_ahorro1;
 800b0f0:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 800b0f2:	4b73      	ldr	r3, [pc, #460]	@ (800b2c0 <refrigera+0x3a0>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	001a      	movs	r2, r3
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	d138      	bne.n	800b170 <refrigera+0x250>
					goto refrigera_j04;
 800b0fe:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 800b100:	f7fb fdea 	bl	8006cd8 <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 800b104:	2313      	movs	r3, #19
 800b106:	18fb      	adds	r3, r7, r3
 800b108:	2200      	movs	r2, #0
 800b10a:	701a      	strb	r2, [r3, #0]
 800b10c:	e00f      	b.n	800b12e <refrigera+0x20e>
					if(k!=4)
 800b10e:	2213      	movs	r2, #19
 800b110:	18bb      	adds	r3, r7, r2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b04      	cmp	r3, #4
 800b116:	d004      	beq.n	800b122 <refrigera+0x202>
						datled[k] = 0;
 800b118:	18bb      	adds	r3, r7, r2
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	4a69      	ldr	r2, [pc, #420]	@ (800b2c4 <refrigera+0x3a4>)
 800b11e:	2100      	movs	r1, #0
 800b120:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 800b122:	2113      	movs	r1, #19
 800b124:	187b      	adds	r3, r7, r1
 800b126:	781a      	ldrb	r2, [r3, #0]
 800b128:	187b      	adds	r3, r7, r1
 800b12a:	3201      	adds	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	2313      	movs	r3, #19
 800b130:	18fb      	adds	r3, r7, r3
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b06      	cmp	r3, #6
 800b136:	d9ea      	bls.n	800b10e <refrigera+0x1ee>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 800b138:	4b61      	ldr	r3, [pc, #388]	@ (800b2c0 <refrigera+0x3a0>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	001a      	movs	r2, r3
 800b13e:	2301      	movs	r3, #1
 800b140:	4013      	ands	r3, r2
 800b142:	d100      	bne.n	800b146 <refrigera+0x226>
 800b144:	e1fb      	b.n	800b53e <refrigera+0x61e>
					goto refrigera_j05;
 800b146:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 800b148:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 800b14a:	4b5f      	ldr	r3, [pc, #380]	@ (800b2c8 <refrigera+0x3a8>)
 800b14c:	781a      	ldrb	r2, [r3, #0]
 800b14e:	4b4f      	ldr	r3, [pc, #316]	@ (800b28c <refrigera+0x36c>)
 800b150:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 800b152:	4b4e      	ldr	r3, [pc, #312]	@ (800b28c <refrigera+0x36c>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	001a      	movs	r2, r3
 800b158:	4b5c      	ldr	r3, [pc, #368]	@ (800b2cc <refrigera+0x3ac>)
 800b15a:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 800b15c:	f7fb fa06 	bl	800656c <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 800b160:	4b4a      	ldr	r3, [pc, #296]	@ (800b28c <refrigera+0x36c>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <refrigera+0x24c>
 800b168:	f000 fb98 	bl	800b89c <refrigera+0x97c>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 800b16c:	f000 fb9a 	bl	800b8a4 <refrigera+0x984>
				goto refrige10;
 800b170:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 800b172:	f7fb fa6b 	bl	800664c <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 800b176:	4953      	ldr	r1, [pc, #332]	@ (800b2c4 <refrigera+0x3a4>)
 800b178:	4852      	ldr	r0, [pc, #328]	@ (800b2c4 <refrigera+0x3a4>)
 800b17a:	2303      	movs	r3, #3
 800b17c:	2202      	movs	r2, #2
 800b17e:	f002 fc56 	bl	800da2e <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 800b182:	4b53      	ldr	r3, [pc, #332]	@ (800b2d0 <refrigera+0x3b0>)
 800b184:	791b      	ldrb	r3, [r3, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	4053      	eors	r3, r2
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d137      	bne.n	800b200 <refrigera+0x2e0>
            cntMsgCmd = 250;
 800b190:	4b50      	ldr	r3, [pc, #320]	@ (800b2d4 <refrigera+0x3b4>)
 800b192:	22fa      	movs	r2, #250	@ 0xfa
 800b194:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 800b196:	4b50      	ldr	r3, [pc, #320]	@ (800b2d8 <refrigera+0x3b8>)
 800b198:	2203      	movs	r2, #3
 800b19a:	701a      	strb	r2, [r3, #0]
            estado1[est1LockDr] ^= 0x1;
 800b19c:	4b4f      	ldr	r3, [pc, #316]	@ (800b2dc <refrigera+0x3bc>)
 800b19e:	799b      	ldrb	r3, [r3, #6]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	4053      	eors	r3, r2
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	1e5a      	subs	r2, r3, #1
 800b1a8:	4193      	sbcs	r3, r2
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	4b4b      	ldr	r3, [pc, #300]	@ (800b2dc <refrigera+0x3bc>)
 800b1ae:	719a      	strb	r2, [r3, #6]
            waux = reeEstado1;
 800b1b0:	4b4b      	ldr	r3, [pc, #300]	@ (800b2e0 <refrigera+0x3c0>)
 800b1b2:	781a      	ldrb	r2, [r3, #0]
 800b1b4:	4b37      	ldr	r3, [pc, #220]	@ (800b294 <refrigera+0x374>)
 800b1b6:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 800b1b8:	4b36      	ldr	r3, [pc, #216]	@ (800b294 <refrigera+0x374>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2240      	movs	r2, #64	@ 0x40
 800b1be:	4393      	bics	r3, r2
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	4b34      	ldr	r3, [pc, #208]	@ (800b294 <refrigera+0x374>)
 800b1c4:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 800b1c6:	4b45      	ldr	r3, [pc, #276]	@ (800b2dc <refrigera+0x3bc>)
 800b1c8:	799b      	ldrb	r3, [r3, #6]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	4053      	eors	r3, r2
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d107      	bne.n	800b1e4 <refrigera+0x2c4>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 800b1d4:	4b2f      	ldr	r3, [pc, #188]	@ (800b294 <refrigera+0x374>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2240      	movs	r2, #64	@ 0x40
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	4b2d      	ldr	r3, [pc, #180]	@ (800b294 <refrigera+0x374>)
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	e000      	b.n	800b1e6 <refrigera+0x2c6>
            	goto func_lock_01;
 800b1e4:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 800b1e6:	4b2b      	ldr	r3, [pc, #172]	@ (800b294 <refrigera+0x374>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	001a      	movs	r2, r3
 800b1ec:	4b3d      	ldr	r3, [pc, #244]	@ (800b2e4 <refrigera+0x3c4>)
 800b1ee:	0019      	movs	r1, r3
 800b1f0:	0010      	movs	r0, r2
 800b1f2:	f7fc f87d 	bl	80072f0 <wreeprom>
			reeEstado1 = waux;
 800b1f6:	4b27      	ldr	r3, [pc, #156]	@ (800b294 <refrigera+0x374>)
 800b1f8:	781a      	ldrb	r2, [r3, #0]
 800b1fa:	4b39      	ldr	r3, [pc, #228]	@ (800b2e0 <refrigera+0x3c0>)
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	e000      	b.n	800b202 <refrigera+0x2e2>
            	goto no_Func_Lock;
 800b200:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 800b202:	4b33      	ldr	r3, [pc, #204]	@ (800b2d0 <refrigera+0x3b0>)
 800b204:	789b      	ldrb	r3, [r3, #2]
 800b206:	2201      	movs	r2, #1
 800b208:	4053      	eors	r3, r2
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d16b      	bne.n	800b2e8 <refrigera+0x3c8>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 800b210:	4b30      	ldr	r3, [pc, #192]	@ (800b2d4 <refrigera+0x3b4>)
 800b212:	22fa      	movs	r2, #250	@ 0xfa
 800b214:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 800b216:	4b30      	ldr	r3, [pc, #192]	@ (800b2d8 <refrigera+0x3b8>)
 800b218:	2202      	movs	r2, #2
 800b21a:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 800b21c:	4b25      	ldr	r3, [pc, #148]	@ (800b2b4 <refrigera+0x394>)
 800b21e:	799b      	ldrb	r3, [r3, #6]
 800b220:	2201      	movs	r2, #1
 800b222:	4053      	eors	r3, r2
 800b224:	b2db      	uxtb	r3, r3
 800b226:	1e5a      	subs	r2, r3, #1
 800b228:	4193      	sbcs	r3, r2
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	4b21      	ldr	r3, [pc, #132]	@ (800b2b4 <refrigera+0x394>)
 800b22e:	719a      	strb	r2, [r3, #6]
               waux = reeEstado1;
 800b230:	4b2b      	ldr	r3, [pc, #172]	@ (800b2e0 <refrigera+0x3c0>)
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	4b17      	ldr	r3, [pc, #92]	@ (800b294 <refrigera+0x374>)
 800b236:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 800b238:	4b16      	ldr	r3, [pc, #88]	@ (800b294 <refrigera+0x374>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2204      	movs	r2, #4
 800b23e:	4393      	bics	r3, r2
 800b240:	b2da      	uxtb	r2, r3
 800b242:	4b14      	ldr	r3, [pc, #80]	@ (800b294 <refrigera+0x374>)
 800b244:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 800b246:	4b1b      	ldr	r3, [pc, #108]	@ (800b2b4 <refrigera+0x394>)
 800b248:	799b      	ldrb	r3, [r3, #6]
 800b24a:	2201      	movs	r2, #1
 800b24c:	4053      	eors	r3, r2
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d107      	bne.n	800b264 <refrigera+0x344>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 800b254:	4b0f      	ldr	r3, [pc, #60]	@ (800b294 <refrigera+0x374>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2204      	movs	r2, #4
 800b25a:	4313      	orrs	r3, r2
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	4b0d      	ldr	r3, [pc, #52]	@ (800b294 <refrigera+0x374>)
 800b260:	701a      	strb	r2, [r3, #0]
 800b262:	e000      	b.n	800b266 <refrigera+0x346>
            	   goto refrigera_j06d;
 800b264:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 800b266:	4b0b      	ldr	r3, [pc, #44]	@ (800b294 <refrigera+0x374>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	001a      	movs	r2, r3
 800b26c:	4b1d      	ldr	r3, [pc, #116]	@ (800b2e4 <refrigera+0x3c4>)
 800b26e:	0019      	movs	r1, r3
 800b270:	0010      	movs	r0, r2
 800b272:	f7fc f83d 	bl	80072f0 <wreeprom>
				reeEstado1 = waux;
 800b276:	4b07      	ldr	r3, [pc, #28]	@ (800b294 <refrigera+0x374>)
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	4b19      	ldr	r3, [pc, #100]	@ (800b2e0 <refrigera+0x3c0>)
 800b27c:	701a      	strb	r2, [r3, #0]
 800b27e:	e034      	b.n	800b2ea <refrigera+0x3ca>
 800b280:	20000ba0 	.word	0x20000ba0
 800b284:	20000bdc 	.word	0x20000bdc
 800b288:	200000b8 	.word	0x200000b8
 800b28c:	20000b53 	.word	0x20000b53
 800b290:	20000c20 	.word	0x20000c20
 800b294:	20000b52 	.word	0x20000b52
 800b298:	20000c22 	.word	0x20000c22
 800b29c:	20000c1f 	.word	0x20000c1f
 800b2a0:	20000c21 	.word	0x20000c21
 800b2a4:	200000b9 	.word	0x200000b9
 800b2a8:	20000ba8 	.word	0x20000ba8
 800b2ac:	200000bb 	.word	0x200000bb
 800b2b0:	20000baa 	.word	0x20000baa
 800b2b4:	20000c38 	.word	0x20000c38
 800b2b8:	200000d3 	.word	0x200000d3
 800b2bc:	200000d5 	.word	0x200000d5
 800b2c0:	20000b94 	.word	0x20000b94
 800b2c4:	20000b8c 	.word	0x20000b8c
 800b2c8:	20000b68 	.word	0x20000b68
 800b2cc:	20000bb6 	.word	0x20000bb6
 800b2d0:	20000b98 	.word	0x20000b98
 800b2d4:	200020f0 	.word	0x200020f0
 800b2d8:	200020f1 	.word	0x200020f1
 800b2dc:	200020d0 	.word	0x200020d0
 800b2e0:	200001ba 	.word	0x200001ba
 800b2e4:	0803f803 	.word	0x0803f803
            	   goto refrigera_j06c;
 800b2e8:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 800b2ea:	4bd0      	ldr	r3, [pc, #832]	@ (800b62c <refrigera+0x70c>)
 800b2ec:	789b      	ldrb	r3, [r3, #2]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d121      	bne.n	800b336 <refrigera+0x416>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 800b2f2:	4bcf      	ldr	r3, [pc, #828]	@ (800b630 <refrigera+0x710>)
 800b2f4:	78db      	ldrb	r3, [r3, #3]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d11f      	bne.n	800b33a <refrigera+0x41a>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 800b2fa:	4bce      	ldr	r3, [pc, #824]	@ (800b634 <refrigera+0x714>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	2201      	movs	r2, #1
 800b300:	4053      	eors	r3, r2
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	d11a      	bne.n	800b33e <refrigera+0x41e>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 800b308:	4bc8      	ldr	r3, [pc, #800]	@ (800b62c <refrigera+0x70c>)
 800b30a:	799b      	ldrb	r3, [r3, #6]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10b      	bne.n	800b328 <refrigera+0x408>
                if(retLampOff != 0){ //tnz retLampOff
 800b310:	4bc9      	ldr	r3, [pc, #804]	@ (800b638 <refrigera+0x718>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d109      	bne.n	800b32c <refrigera+0x40c>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 800b318:	4bc4      	ldr	r3, [pc, #784]	@ (800b62c <refrigera+0x70c>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2201      	movs	r2, #1
 800b31e:	4053      	eors	r3, r2
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10d      	bne.n	800b342 <refrigera+0x422>
refrigera_j06a:
 800b326:	e002      	b.n	800b32e <refrigera+0x40e>
                	goto refrigera_j06a;
 800b328:	46c0      	nop			@ (mov r8, r8)
 800b32a:	e000      	b.n	800b32e <refrigera+0x40e>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 800b32c:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 800b32e:	4bc3      	ldr	r3, [pc, #780]	@ (800b63c <refrigera+0x71c>)
 800b330:	2201      	movs	r2, #1
 800b332:	709a      	strb	r2, [r3, #2]
 800b334:	e006      	b.n	800b344 <refrigera+0x424>
                	goto refrigera_j06;
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	e004      	b.n	800b344 <refrigera+0x424>
                	goto refrigera_j06;
 800b33a:	46c0      	nop			@ (mov r8, r8)
 800b33c:	e002      	b.n	800b344 <refrigera+0x424>
                	goto refrigera_j06;
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	e000      	b.n	800b344 <refrigera+0x424>
                	goto refrigera_j06;
 800b342:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 800b344:	4bbe      	ldr	r3, [pc, #760]	@ (800b640 <refrigera+0x720>)
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	001a      	movs	r2, r3
 800b34a:	2301      	movs	r3, #1
 800b34c:	4013      	ands	r3, r2
 800b34e:	d101      	bne.n	800b354 <refrigera+0x434>
 800b350:	f000 fc16 	bl	800bb80 <refrigera+0xc60>
                	goto refrigera_j07;
 800b354:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 800b356:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 800b358:	49ba      	ldr	r1, [pc, #744]	@ (800b644 <refrigera+0x724>)
 800b35a:	48ba      	ldr	r0, [pc, #744]	@ (800b644 <refrigera+0x724>)
 800b35c:	2307      	movs	r3, #7
 800b35e:	2203      	movs	r2, #3
 800b360:	f002 fb4a 	bl	800d9f8 <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 800b364:	4bb8      	ldr	r3, [pc, #736]	@ (800b648 <refrigera+0x728>)
 800b366:	2259      	movs	r2, #89	@ 0x59
 800b368:	5c9b      	ldrb	r3, [r3, r2]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d001      	beq.n	800b372 <refrigera+0x452>
 800b36e:	f000 fe40 	bl	800bff2 <refrigera+0x10d2>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 800b372:	f000 fe4e 	bl	800c012 <refrigera+0x10f2>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 800b376:	4bb5      	ldr	r3, [pc, #724]	@ (800b64c <refrigera+0x72c>)
 800b378:	2200      	movs	r2, #0
 800b37a:	801a      	strh	r2, [r3, #0]
				goto finref;
 800b37c:	e061      	b.n	800b442 <refrigera+0x522>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 800b37e:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 800b380:	4bb1      	ldr	r3, [pc, #708]	@ (800b648 <refrigera+0x728>)
 800b382:	2264      	movs	r2, #100	@ 0x64
 800b384:	5c9a      	ldrb	r2, [r3, r2]
 800b386:	4bb2      	ldr	r3, [pc, #712]	@ (800b650 <refrigera+0x730>)
 800b388:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 800b38a:	f7fb fae7 	bl	800695c <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 800b38e:	4bb1      	ldr	r3, [pc, #708]	@ (800b654 <refrigera+0x734>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	001a      	movs	r2, r3
 800b394:	233c      	movs	r3, #60	@ 0x3c
 800b396:	4353      	muls	r3, r2
 800b398:	b29a      	uxth	r2, r3
 800b39a:	4baf      	ldr	r3, [pc, #700]	@ (800b658 <refrigera+0x738>)
 800b39c:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 800b39e:	4bac      	ldr	r3, [pc, #688]	@ (800b650 <refrigera+0x730>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	001a      	movs	r2, r3
 800b3a4:	233c      	movs	r3, #60	@ 0x3c
 800b3a6:	4353      	muls	r3, r2
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	4bac      	ldr	r3, [pc, #688]	@ (800b65c <refrigera+0x73c>)
 800b3ac:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 800b3ae:	f7fb f92d 	bl	800660c <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 800b3b2:	4ba3      	ldr	r3, [pc, #652]	@ (800b640 <refrigera+0x720>)
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 800b3b8:	e040      	b.n	800b43c <refrigera+0x51c>
				retvent = 20;
 800b3ba:	4ba9      	ldr	r3, [pc, #676]	@ (800b660 <refrigera+0x740>)
 800b3bc:	2214      	movs	r2, #20
 800b3be:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 800b3c0:	4ba8      	ldr	r3, [pc, #672]	@ (800b664 <refrigera+0x744>)
 800b3c2:	2232      	movs	r2, #50	@ 0x32
 800b3c4:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 800b3c6:	4b9e      	ldr	r3, [pc, #632]	@ (800b640 <refrigera+0x720>)
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	701a      	strb	r2, [r3, #0]
				goto todh20;
 800b3cc:	e036      	b.n	800b43c <refrigera+0x51c>
                  goto todh; //jp todh
 800b3ce:	46c0      	nop			@ (mov r8, r8)
 800b3d0:	e000      	b.n	800b3d4 <refrigera+0x4b4>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 800b3d2:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 800b3d4:	4ba4      	ldr	r3, [pc, #656]	@ (800b668 <refrigera+0x748>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 800b3da:	f7fb f8a5 	bl	8006528 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 800b3de:	4b9a      	ldr	r3, [pc, #616]	@ (800b648 <refrigera+0x728>)
 800b3e0:	2247      	movs	r2, #71	@ 0x47
 800b3e2:	5c9a      	ldrb	r2, [r3, r2]
 800b3e4:	4b9a      	ldr	r3, [pc, #616]	@ (800b650 <refrigera+0x730>)
 800b3e6:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 800b3e8:	4b97      	ldr	r3, [pc, #604]	@ (800b648 <refrigera+0x728>)
 800b3ea:	2255      	movs	r2, #85	@ 0x55
 800b3ec:	5c9b      	ldrb	r3, [r3, r2]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d102      	bne.n	800b3f8 <refrigera+0x4d8>
				BaBentre10_math();					//call BaBentre10_math
 800b3f2:	f7fb fab3 	bl	800695c <BaBentre10_math>
				goto todh2;
 800b3f6:	e014      	b.n	800b422 <refrigera+0x502>
					goto todh1;
 800b3f8:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 800b3fa:	4b95      	ldr	r3, [pc, #596]	@ (800b650 <refrigera+0x730>)
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	001a      	movs	r2, r3
 800b400:	233c      	movs	r3, #60	@ 0x3c
 800b402:	4353      	muls	r3, r2
 800b404:	b29a      	uxth	r2, r3
 800b406:	4b99      	ldr	r3, [pc, #612]	@ (800b66c <refrigera+0x74c>)
 800b408:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 800b40a:	4b98      	ldr	r3, [pc, #608]	@ (800b66c <refrigera+0x74c>)
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	0a1b      	lsrs	r3, r3, #8
 800b410:	b29b      	uxth	r3, r3
 800b412:	b2da      	uxtb	r2, r3
 800b414:	4b96      	ldr	r3, [pc, #600]	@ (800b670 <refrigera+0x750>)
 800b416:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 800b418:	4b94      	ldr	r3, [pc, #592]	@ (800b66c <refrigera+0x74c>)
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	4b95      	ldr	r3, [pc, #596]	@ (800b674 <refrigera+0x754>)
 800b420:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 800b422:	4b93      	ldr	r3, [pc, #588]	@ (800b670 <refrigera+0x750>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	b29b      	uxth	r3, r3
 800b42a:	4a92      	ldr	r2, [pc, #584]	@ (800b674 <refrigera+0x754>)
 800b42c:	7812      	ldrb	r2, [r2, #0]
 800b42e:	189b      	adds	r3, r3, r2
 800b430:	b29a      	uxth	r2, r3
 800b432:	4b91      	ldr	r3, [pc, #580]	@ (800b678 <refrigera+0x758>)
 800b434:	801a      	strh	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 800b436:	4b82      	ldr	r3, [pc, #520]	@ (800b640 <refrigera+0x720>)
 800b438:	2203      	movs	r2, #3
 800b43a:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 800b43c:	4b8f      	ldr	r3, [pc, #572]	@ (800b67c <refrigera+0x75c>)
 800b43e:	2204      	movs	r2, #4
 800b440:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 800b442:	4b7e      	ldr	r3, [pc, #504]	@ (800b63c <refrigera+0x71c>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d103      	bne.n	800b452 <refrigera+0x532>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 800b44a:	4b7e      	ldr	r3, [pc, #504]	@ (800b644 <refrigera+0x724>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	709a      	strb	r2, [r3, #2]
 800b450:	e000      	b.n	800b454 <refrigera+0x534>
                	goto refrigera_j11;
 800b452:	46c0      	nop			@ (mov r8, r8)
				estado1_Aux = reeEstado1;
 800b454:	1dfb      	adds	r3, r7, #7
 800b456:	4a8a      	ldr	r2, [pc, #552]	@ (800b680 <refrigera+0x760>)
 800b458:	7812      	ldrb	r2, [r2, #0]
 800b45a:	701a      	strb	r2, [r3, #0]
                if(!GetRegFlagState(estado1_Aux,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 800b45c:	1dfb      	adds	r3, r7, #7
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2240      	movs	r2, #64	@ 0x40
 800b462:	4013      	ands	r3, r2
 800b464:	d003      	beq.n	800b46e <refrigera+0x54e>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 800b466:	4b75      	ldr	r3, [pc, #468]	@ (800b63c <refrigera+0x71c>)
 800b468:	2201      	movs	r2, #1
 800b46a:	705a      	strb	r2, [r3, #1]
 800b46c:	e000      	b.n	800b470 <refrigera+0x550>
                	goto refrigeraLockDrOFF;
 800b46e:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 800b470:	4b84      	ldr	r3, [pc, #528]	@ (800b684 <refrigera+0x764>)
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00f      	beq.n	800b498 <refrigera+0x578>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 800b478:	4b70      	ldr	r3, [pc, #448]	@ (800b63c <refrigera+0x71c>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 800b47e:	4b6f      	ldr	r3, [pc, #444]	@ (800b63c <refrigera+0x71c>)
 800b480:	2200      	movs	r2, #0
 800b482:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 800b484:	4b80      	ldr	r3, [pc, #512]	@ (800b688 <refrigera+0x768>)
 800b486:	2200      	movs	r2, #0
 800b488:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 800b48a:	496e      	ldr	r1, [pc, #440]	@ (800b644 <refrigera+0x724>)
 800b48c:	486d      	ldr	r0, [pc, #436]	@ (800b644 <refrigera+0x724>)
 800b48e:	2307      	movs	r3, #7
 800b490:	2202      	movs	r2, #2
 800b492:	f002 facc 	bl	800da2e <Bclear_Clear_trfst>
               goto endNoct;
 800b496:	e01b      	b.n	800b4d0 <refrigera+0x5b0>
            	   goto endNocturno;
 800b498:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 800b49a:	4b65      	ldr	r3, [pc, #404]	@ (800b630 <refrigera+0x710>)
 800b49c:	78db      	ldrb	r3, [r3, #3]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	4053      	eors	r3, r2
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d112      	bne.n	800b4ce <refrigera+0x5ae>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 800b4a8:	4961      	ldr	r1, [pc, #388]	@ (800b630 <refrigera+0x710>)
 800b4aa:	4862      	ldr	r0, [pc, #392]	@ (800b634 <refrigera+0x714>)
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f002 faa2 	bl	800d9f8 <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 800b4b4:	4963      	ldr	r1, [pc, #396]	@ (800b644 <refrigera+0x724>)
 800b4b6:	485d      	ldr	r0, [pc, #372]	@ (800b62c <refrigera+0x70c>)
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f002 fa9c 	bl	800d9f8 <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 800b4c0:	4b72      	ldr	r3, [pc, #456]	@ (800b68c <refrigera+0x76c>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 800b4c6:	4b72      	ldr	r3, [pc, #456]	@ (800b690 <refrigera+0x770>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	801a      	strh	r2, [r3, #0]
 800b4cc:	e000      	b.n	800b4d0 <refrigera+0x5b0>
            	  goto endNoct;
 800b4ce:	46c0      	nop			@ (mov r8, r8)
			estado1_Aux = reeEstado1;
 800b4d0:	1dfb      	adds	r3, r7, #7
 800b4d2:	4a6b      	ldr	r2, [pc, #428]	@ (800b680 <refrigera+0x760>)
 800b4d4:	7812      	ldrb	r2, [r2, #0]
 800b4d6:	701a      	strb	r2, [r3, #0]
			if(GetRegFlagState (estado1_Aux, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 800b4d8:	1dfb      	adds	r3, r7, #7
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	4013      	ands	r3, r2
 800b4e0:	d118      	bne.n	800b514 <refrigera+0x5f4>
refriOFF:
 800b4e2:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 800b4e4:	f000 fe08 	bl	800c0f8 <st_refri>
           for(uint8_t k=0; k<8; k++){
 800b4e8:	2312      	movs	r3, #18
 800b4ea:	18fb      	adds	r3, r7, r3
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	e00a      	b.n	800b508 <refrigera+0x5e8>
        	   datled[k] = 0;
 800b4f2:	2012      	movs	r0, #18
 800b4f4:	183b      	adds	r3, r7, r0
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	4a52      	ldr	r2, [pc, #328]	@ (800b644 <refrigera+0x724>)
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 800b4fe:	183b      	adds	r3, r7, r0
 800b500:	781a      	ldrb	r2, [r3, #0]
 800b502:	183b      	adds	r3, r7, r0
 800b504:	3201      	adds	r2, #1
 800b506:	701a      	strb	r2, [r3, #0]
 800b508:	2312      	movs	r3, #18
 800b50a:	18fb      	adds	r3, r7, r3
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	2b07      	cmp	r3, #7
 800b510:	d9ef      	bls.n	800b4f2 <refrigera+0x5d2>
refriON:
 800b512:	e000      	b.n	800b516 <refrigera+0x5f6>
            	 goto refriON;
 800b514:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 800b516:	4b5f      	ldr	r3, [pc, #380]	@ (800b694 <refrigera+0x774>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2201      	movs	r2, #1
 800b51c:	4053      	eors	r3, r2
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d109      	bne.n	800b538 <refrigera+0x618>
         st_refri();
 800b524:	f000 fde8 	bl	800c0f8 <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 800b528:	4b5b      	ldr	r3, [pc, #364]	@ (800b698 <refrigera+0x778>)
 800b52a:	2201      	movs	r2, #1
 800b52c:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 800b52e:	4b3f      	ldr	r3, [pc, #252]	@ (800b62c <refrigera+0x70c>)
 800b530:	2201      	movs	r2, #1
 800b532:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 800b534:	f000 fda2 	bl	800c07c <refrigera+0x115c>
        	 goto ac_OK;
 800b538:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 800b53a:	f000 fd9f 	bl	800c07c <refrigera+0x115c>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 800b53e:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 800b540:	4b56      	ldr	r3, [pc, #344]	@ (800b69c <refrigera+0x77c>)
 800b542:	2200      	movs	r2, #0
 800b544:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 800b546:	f7fa ffd5 	bl	80064f4 <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 800b54a:	f7fa ffdb 	bl	8006504 <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 800b54e:	4954      	ldr	r1, [pc, #336]	@ (800b6a0 <refrigera+0x780>)
 800b550:	4853      	ldr	r0, [pc, #332]	@ (800b6a0 <refrigera+0x780>)
 800b552:	2307      	movs	r3, #7
 800b554:	2206      	movs	r2, #6
 800b556:	f002 fa6a 	bl	800da2e <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 800b55a:	4b52      	ldr	r3, [pc, #328]	@ (800b6a4 <refrigera+0x784>)
 800b55c:	2202      	movs	r2, #2
 800b55e:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 800b560:	4b3b      	ldr	r3, [pc, #236]	@ (800b650 <refrigera+0x730>)
 800b562:	2205      	movs	r2, #5
 800b564:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 800b566:	4b4d      	ldr	r3, [pc, #308]	@ (800b69c <refrigera+0x77c>)
 800b568:	799b      	ldrb	r3, [r3, #6]
 800b56a:	2201      	movs	r2, #1
 800b56c:	4053      	eors	r3, r2
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <refrigera+0x65c>
          wreg = 0x01;
 800b574:	4b36      	ldr	r3, [pc, #216]	@ (800b650 <refrigera+0x730>)
 800b576:	2201      	movs	r2, #1
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	e000      	b.n	800b57e <refrigera+0x65e>
        	  goto no_change_time;
 800b57c:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 800b57e:	4b34      	ldr	r3, [pc, #208]	@ (800b650 <refrigera+0x730>)
 800b580:	781a      	ldrb	r2, [r3, #0]
 800b582:	4b37      	ldr	r3, [pc, #220]	@ (800b660 <refrigera+0x740>)
 800b584:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 800b586:	4b32      	ldr	r3, [pc, #200]	@ (800b650 <refrigera+0x730>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	001a      	movs	r2, r3
 800b58c:	4b46      	ldr	r3, [pc, #280]	@ (800b6a8 <refrigera+0x788>)
 800b58e:	801a      	strh	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 800b590:	f7fa ffec 	bl	800656c <blink_640>
			if(cntblkh < 100){//cpw X,#100
 800b594:	4b2d      	ldr	r3, [pc, #180]	@ (800b64c <refrigera+0x72c>)
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	2b63      	cmp	r3, #99	@ 0x63
 800b59a:	d929      	bls.n	800b5f0 <refrigera+0x6d0>
			if(cntblkh <= 250){
 800b59c:	4b2b      	ldr	r3, [pc, #172]	@ (800b64c <refrigera+0x72c>)
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	2bfa      	cmp	r3, #250	@ 0xfa
 800b5a2:	d92d      	bls.n	800b600 <refrigera+0x6e0>
			if(cntblkh < 300){
 800b5a4:	4b29      	ldr	r3, [pc, #164]	@ (800b64c <refrigera+0x72c>)
 800b5a6:	881a      	ldrh	r2, [r3, #0]
 800b5a8:	2396      	movs	r3, #150	@ 0x96
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d321      	bcc.n	800b5f4 <refrigera+0x6d4>
			if(cntblkh < 450){
 800b5b0:	4b26      	ldr	r3, [pc, #152]	@ (800b64c <refrigera+0x72c>)
 800b5b2:	881a      	ldrh	r2, [r3, #0]
 800b5b4:	23e1      	movs	r3, #225	@ 0xe1
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d200      	bcs.n	800b5be <refrigera+0x69e>
 800b5bc:	e08d      	b.n	800b6da <refrigera+0x7ba>
			if(cntblkh < 500){
 800b5be:	4b23      	ldr	r3, [pc, #140]	@ (800b64c <refrigera+0x72c>)
 800b5c0:	881a      	ldrh	r2, [r3, #0]
 800b5c2:	23fa      	movs	r3, #250	@ 0xfa
 800b5c4:	005b      	lsls	r3, r3, #1
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d316      	bcc.n	800b5f8 <refrigera+0x6d8>
			if(cntblkh < 650){
 800b5ca:	4b20      	ldr	r3, [pc, #128]	@ (800b64c <refrigera+0x72c>)
 800b5cc:	881b      	ldrh	r3, [r3, #0]
 800b5ce:	4a37      	ldr	r2, [pc, #220]	@ (800b6ac <refrigera+0x78c>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d800      	bhi.n	800b5d6 <refrigera+0x6b6>
 800b5d4:	e0d8      	b.n	800b788 <refrigera+0x868>
			if(cntblkh < 700){
 800b5d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b64c <refrigera+0x72c>)
 800b5d8:	881a      	ldrh	r2, [r3, #0]
 800b5da:	23af      	movs	r3, #175	@ 0xaf
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d30c      	bcc.n	800b5fc <refrigera+0x6dc>
			if(cntblkh < 850){
 800b5e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b64c <refrigera+0x72c>)
 800b5e4:	881b      	ldrh	r3, [r3, #0]
 800b5e6:	4a32      	ldr	r2, [pc, #200]	@ (800b6b0 <refrigera+0x790>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d800      	bhi.n	800b5ee <refrigera+0x6ce>
 800b5ec:	e0ea      	b.n	800b7c4 <refrigera+0x8a4>
indi_off:
 800b5ee:	e006      	b.n	800b5fe <refrigera+0x6de>
				goto indi_off; //jrult	indi_off
 800b5f0:	46c0      	nop			@ (mov r8, r8)
 800b5f2:	e105      	b.n	800b800 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b5f4:	46c0      	nop			@ (mov r8, r8)
 800b5f6:	e103      	b.n	800b800 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b5f8:	46c0      	nop			@ (mov r8, r8)
 800b5fa:	e101      	b.n	800b800 <refrigera+0x8e0>
				goto indi_off; //rult indi_off
 800b5fc:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 800b5fe:	e0ff      	b.n	800b800 <refrigera+0x8e0>
				goto Indi_int; //jrule	Indi_int
 800b600:	46c0      	nop			@ (mov r8, r8)
			soloent (reePlantilla[interdh]);
 800b602:	4b2c      	ldr	r3, [pc, #176]	@ (800b6b4 <refrigera+0x794>)
 800b604:	2246      	movs	r2, #70	@ 0x46
 800b606:	5c9b      	ldrb	r3, [r3, r2]
 800b608:	0018      	movs	r0, r3
 800b60a:	f7fb f975 	bl	80068f8 <soloent>
			op_menu (reePlantilla[eeD1_Msg1] , reePlantilla[eeD2_Msg1]);
 800b60e:	4b29      	ldr	r3, [pc, #164]	@ (800b6b4 <refrigera+0x794>)
 800b610:	225f      	movs	r2, #95	@ 0x5f
 800b612:	5c9a      	ldrb	r2, [r3, r2]
 800b614:	4b27      	ldr	r3, [pc, #156]	@ (800b6b4 <refrigera+0x794>)
 800b616:	2160      	movs	r1, #96	@ 0x60
 800b618:	5c5b      	ldrb	r3, [r3, r1]
 800b61a:	0019      	movs	r1, r3
 800b61c:	0010      	movs	r0, r2
 800b61e:	f7fb fe7b 	bl	8007318 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b622:	2311      	movs	r3, #17
 800b624:	18fb      	adds	r3, r7, r3
 800b626:	2200      	movs	r2, #0
 800b628:	701a      	strb	r2, [r3, #0]
 800b62a:	e050      	b.n	800b6ce <refrigera+0x7ae>
 800b62c:	20000c38 	.word	0x20000c38
 800b630:	20000b74 	.word	0x20000b74
 800b634:	20000be4 	.word	0x20000be4
 800b638:	200020f2 	.word	0x200020f2
 800b63c:	20000ba0 	.word	0x20000ba0
 800b640:	20000b94 	.word	0x20000b94
 800b644:	20000b8c 	.word	0x20000b8c
 800b648:	200000b8 	.word	0x200000b8
 800b64c:	20000b4c 	.word	0x20000b4c
 800b650:	20000b53 	.word	0x20000b53
 800b654:	20000b52 	.word	0x20000b52
 800b658:	20000bf6 	.word	0x20000bf6
 800b65c:	20000bf8 	.word	0x20000bf8
 800b660:	20000b66 	.word	0x20000b66
 800b664:	20000b5e 	.word	0x20000b5e
 800b668:	20000b69 	.word	0x20000b69
 800b66c:	200008d2 	.word	0x200008d2
 800b670:	20000b47 	.word	0x20000b47
 800b674:	20000b48 	.word	0x20000b48
 800b678:	20000bb4 	.word	0x20000bb4
 800b67c:	20000b67 	.word	0x20000b67
 800b680:	200001ba 	.word	0x200001ba
 800b684:	20000c40 	.word	0x20000c40
 800b688:	20000bdc 	.word	0x20000bdc
 800b68c:	20000c2c 	.word	0x20000c2c
 800b690:	20000c2e 	.word	0x20000c2e
 800b694:	20002134 	.word	0x20002134
 800b698:	20001f74 	.word	0x20001f74
 800b69c:	20000bd4 	.word	0x20000bd4
 800b6a0:	20000b84 	.word	0x20000b84
 800b6a4:	20000b6a 	.word	0x20000b6a
 800b6a8:	20000bb2 	.word	0x20000bb2
 800b6ac:	00000289 	.word	0x00000289
 800b6b0:	00000351 	.word	0x00000351
 800b6b4:	20000c88 	.word	0x20000c88
            	 datled[k] = 0;
 800b6b8:	2011      	movs	r0, #17
 800b6ba:	183b      	adds	r3, r7, r0
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	4ac0      	ldr	r2, [pc, #768]	@ (800b9c0 <refrigera+0xaa0>)
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b6c4:	183b      	adds	r3, r7, r0
 800b6c6:	781a      	ldrb	r2, [r3, #0]
 800b6c8:	183b      	adds	r3, r7, r0
 800b6ca:	3201      	adds	r2, #1
 800b6cc:	701a      	strb	r2, [r3, #0]
 800b6ce:	2311      	movs	r3, #17
 800b6d0:	18fb      	adds	r3, r7, r3
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b07      	cmp	r3, #7
 800b6d6:	d9ef      	bls.n	800b6b8 <refrigera+0x798>
             goto defindi;
 800b6d8:	e092      	b.n	800b800 <refrigera+0x8e0>
				goto Indi_time;//rult Indi_time
 800b6da:	46c0      	nop			@ (mov r8, r8)
            if(reePlantilla[dhmode] != 1){
 800b6dc:	4bb9      	ldr	r3, [pc, #740]	@ (800b9c4 <refrigera+0xaa4>)
 800b6de:	2255      	movs	r2, #85	@ 0x55
 800b6e0:	5c9b      	ldrb	r3, [r3, r2]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d109      	bne.n	800b6fa <refrigera+0x7da>
            soloent( reePlantilla[timedh] );
 800b6e6:	4bb7      	ldr	r3, [pc, #732]	@ (800b9c4 <refrigera+0xaa4>)
 800b6e8:	2247      	movs	r2, #71	@ 0x47
 800b6ea:	5c9b      	ldrb	r3, [r3, r2]
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	f7fb f903 	bl	80068f8 <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 800b6f2:	4bb3      	ldr	r3, [pc, #716]	@ (800b9c0 <refrigera+0xaa0>)
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800b6f8:	e082      	b.n	800b800 <refrigera+0x8e0>
				goto indica45;
 800b6fa:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800b6fc:	4bb2      	ldr	r3, [pc, #712]	@ (800b9c8 <refrigera+0xaa8>)
 800b6fe:	2247      	movs	r2, #71	@ 0x47
 800b700:	5c9b      	ldrb	r3, [r3, r2]
 800b702:	0018      	movs	r0, r3
 800b704:	f7fb f8c2 	bl	800688c <convad10>
            if(reePlantilla[eeprotype]){
 800b708:	4bae      	ldr	r3, [pc, #696]	@ (800b9c4 <refrigera+0xaa4>)
 800b70a:	2257      	movs	r2, #87	@ 0x57
 800b70c:	5c9b      	ldrb	r3, [r3, r2]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10c      	bne.n	800b72c <refrigera+0x80c>
            if(reePlantilla[eeprotype] == 2){
 800b712:	4bac      	ldr	r3, [pc, #688]	@ (800b9c4 <refrigera+0xaa4>)
 800b714:	2257      	movs	r2, #87	@ 0x57
 800b716:	5c9b      	ldrb	r3, [r3, r2]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d00f      	beq.n	800b73c <refrigera+0x81c>
indica_na:
 800b71c:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 800b71e:	4bab      	ldr	r3, [pc, #684]	@ (800b9cc <refrigera+0xaac>)
 800b720:	2226      	movs	r2, #38	@ 0x26
 800b722:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 800b724:	4baa      	ldr	r3, [pc, #680]	@ (800b9d0 <refrigera+0xab0>)
 800b726:	2226      	movs	r2, #38	@ 0x26
 800b728:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800b72a:	e00f      	b.n	800b74c <refrigera+0x82c>
            	goto indica_110v; //jreq indica_110v
 800b72c:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 800b72e:	4ba7      	ldr	r3, [pc, #668]	@ (800b9cc <refrigera+0xaac>)
 800b730:	221f      	movs	r2, #31
 800b732:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 800b734:	4ba6      	ldr	r3, [pc, #664]	@ (800b9d0 <refrigera+0xab0>)
 800b736:	220b      	movs	r2, #11
 800b738:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 800b73a:	e007      	b.n	800b74c <refrigera+0x82c>
            	goto indica_220v; //jreq indica_220v
 800b73c:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800b73e:	4ba3      	ldr	r3, [pc, #652]	@ (800b9cc <refrigera+0xaac>)
 800b740:	221f      	movs	r2, #31
 800b742:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 800b744:	4ba2      	ldr	r3, [pc, #648]	@ (800b9d0 <refrigera+0xab0>)
 800b746:	220a      	movs	r2, #10
 800b748:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 800b74a:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 800b74c:	4b9f      	ldr	r3, [pc, #636]	@ (800b9cc <refrigera+0xaac>)
 800b74e:	781a      	ldrb	r2, [r3, #0]
 800b750:	4b9f      	ldr	r3, [pc, #636]	@ (800b9d0 <refrigera+0xab0>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	0019      	movs	r1, r3
 800b756:	0010      	movs	r0, r2
 800b758:	f7fb fdde 	bl	8007318 <op_menu>
             for(uint8_t k=0; k<8; k++){
 800b75c:	2310      	movs	r3, #16
 800b75e:	18fb      	adds	r3, r7, r3
 800b760:	2200      	movs	r2, #0
 800b762:	701a      	strb	r2, [r3, #0]
 800b764:	e00a      	b.n	800b77c <refrigera+0x85c>
            	 datled[k] = 0;
 800b766:	2010      	movs	r0, #16
 800b768:	183b      	adds	r3, r7, r0
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	4a94      	ldr	r2, [pc, #592]	@ (800b9c0 <refrigera+0xaa0>)
 800b76e:	2100      	movs	r1, #0
 800b770:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800b772:	183b      	adds	r3, r7, r0
 800b774:	781a      	ldrb	r2, [r3, #0]
 800b776:	183b      	adds	r3, r7, r0
 800b778:	3201      	adds	r2, #1
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	2310      	movs	r3, #16
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b07      	cmp	r3, #7
 800b784:	d9ef      	bls.n	800b766 <refrigera+0x846>
             goto defindi;
 800b786:	e03b      	b.n	800b800 <refrigera+0x8e0>
				goto Indi_sp; //rult Indi_sp
 800b788:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 800b78a:	f7fa ff19 	bl	80065c0 <sp_dpy>
			soloent(versionFirm1);		//call soloent
 800b78e:	4b91      	ldr	r3, [pc, #580]	@ (800b9d4 <refrigera+0xab4>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	0018      	movs	r0, r3
 800b794:	f7fb f8b0 	bl	80068f8 <soloent>
			for(uint8_t k=0; k<8; k++){
 800b798:	230f      	movs	r3, #15
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e00a      	b.n	800b7b8 <refrigera+0x898>
				datled[k] = 0;
 800b7a2:	200f      	movs	r0, #15
 800b7a4:	183b      	adds	r3, r7, r0
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	4a85      	ldr	r2, [pc, #532]	@ (800b9c0 <refrigera+0xaa0>)
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 800b7ae:	183b      	adds	r3, r7, r0
 800b7b0:	781a      	ldrb	r2, [r3, #0]
 800b7b2:	183b      	adds	r3, r7, r0
 800b7b4:	3201      	adds	r2, #1
 800b7b6:	701a      	strb	r2, [r3, #0]
 800b7b8:	230f      	movs	r3, #15
 800b7ba:	18fb      	adds	r3, r7, r3
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b07      	cmp	r3, #7
 800b7c0:	d9ef      	bls.n	800b7a2 <refrigera+0x882>
			goto defindi;
 800b7c2:	e01d      	b.n	800b800 <refrigera+0x8e0>
				goto Indi_dif; //rult Indi_dif
 800b7c4:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 800b7c6:	f7fa ff07 	bl	80065d8 <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 800b7ca:	4b83      	ldr	r3, [pc, #524]	@ (800b9d8 <refrigera+0xab8>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	0018      	movs	r0, r3
 800b7d0:	f7fb f892 	bl	80068f8 <soloent>
            for(uint8_t k=0; k<8; k++){
 800b7d4:	230e      	movs	r3, #14
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	2200      	movs	r2, #0
 800b7da:	701a      	strb	r2, [r3, #0]
 800b7dc:	e00a      	b.n	800b7f4 <refrigera+0x8d4>
            	datled[k] = 0;
 800b7de:	200e      	movs	r0, #14
 800b7e0:	183b      	adds	r3, r7, r0
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	4a76      	ldr	r2, [pc, #472]	@ (800b9c0 <refrigera+0xaa0>)
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 800b7ea:	183b      	adds	r3, r7, r0
 800b7ec:	781a      	ldrb	r2, [r3, #0]
 800b7ee:	183b      	adds	r3, r7, r0
 800b7f0:	3201      	adds	r2, #1
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	230e      	movs	r3, #14
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b07      	cmp	r3, #7
 800b7fc:	d9ef      	bls.n	800b7de <refrigera+0x8be>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 800b7fe:	46c0      	nop			@ (mov r8, r8)
 800b800:	f7fb fc82 	bl	8007108 <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 800b804:	4b75      	ldr	r3, [pc, #468]	@ (800b9dc <refrigera+0xabc>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	b25b      	sxtb	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	db2a      	blt.n	800b864 <refrigera+0x944>
        	   goto indica_j00;
 800b80e:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 800b810:	4b6d      	ldr	r3, [pc, #436]	@ (800b9c8 <refrigera+0xaa8>)
 800b812:	2259      	movs	r2, #89	@ 0x59
 800b814:	5c9b      	ldrb	r3, [r3, r2]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d104      	bne.n	800b824 <refrigera+0x904>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b81a:	4b71      	ldr	r3, [pc, #452]	@ (800b9e0 <refrigera+0xac0>)
 800b81c:	791b      	ldrb	r3, [r3, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d01c      	beq.n	800b85c <refrigera+0x93c>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800b822:	e018      	b.n	800b856 <refrigera+0x936>
            	goto indica_j00b;
 800b824:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 800b826:	4b6f      	ldr	r3, [pc, #444]	@ (800b9e4 <refrigera+0xac4>)
 800b828:	78db      	ldrb	r3, [r3, #3]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10e      	bne.n	800b84c <refrigera+0x92c>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 800b82e:	4b6d      	ldr	r3, [pc, #436]	@ (800b9e4 <refrigera+0xac4>)
 800b830:	789b      	ldrb	r3, [r3, #2]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10c      	bne.n	800b850 <refrigera+0x930>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 800b836:	4b6a      	ldr	r3, [pc, #424]	@ (800b9e0 <refrigera+0xac0>)
 800b838:	791b      	ldrb	r3, [r3, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <refrigera+0x934>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 800b83e:	4b67      	ldr	r3, [pc, #412]	@ (800b9dc <refrigera+0xabc>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	001a      	movs	r2, r3
 800b844:	2310      	movs	r3, #16
 800b846:	4013      	ands	r3, r2
 800b848:	d00a      	beq.n	800b860 <refrigera+0x940>
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b84a:	e004      	b.n	800b856 <refrigera+0x936>
            	 goto indica_j01;
 800b84c:	46c0      	nop			@ (mov r8, r8)
 800b84e:	e002      	b.n	800b856 <refrigera+0x936>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 800b850:	46c0      	nop			@ (mov r8, r8)
 800b852:	e000      	b.n	800b856 <refrigera+0x936>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 800b854:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 800b856:	f7fa fe67 	bl	8006528 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b85a:	e5ae      	b.n	800b3ba <refrigera+0x49a>
            goto indica_j02;
 800b85c:	46c0      	nop			@ (mov r8, r8)
 800b85e:	e5ac      	b.n	800b3ba <refrigera+0x49a>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 800b860:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800b862:	e5aa      	b.n	800b3ba <refrigera+0x49a>
           goto defind10;				/// No, pregunta por otro modo
 800b864:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 800b866:	4b60      	ldr	r3, [pc, #384]	@ (800b9e8 <refrigera+0xac8>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d112      	bne.n	800b894 <refrigera+0x974>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 800b86e:	4b5d      	ldr	r3, [pc, #372]	@ (800b9e4 <refrigera+0xac4>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d010      	beq.n	800b898 <refrigera+0x978>
            	 goto indica_j04;
 800b876:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 800b878:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 800b87a:	4b5c      	ldr	r3, [pc, #368]	@ (800b9ec <refrigera+0xacc>)
 800b87c:	2211      	movs	r2, #17
 800b87e:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 800b880:	4b5b      	ldr	r3, [pc, #364]	@ (800b9f0 <refrigera+0xad0>)
 800b882:	2208      	movs	r2, #8
 800b884:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 800b886:	4b5b      	ldr	r3, [pc, #364]	@ (800b9f4 <refrigera+0xad4>)
 800b888:	2201      	movs	r2, #1
 800b88a:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 800b88c:	4b5a      	ldr	r3, [pc, #360]	@ (800b9f8 <refrigera+0xad8>)
 800b88e:	2200      	movs	r2, #0
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	e570      	b.n	800b376 <refrigera+0x456>
            	 goto finindi;
 800b894:	46c0      	nop			@ (mov r8, r8)
 800b896:	e5d4      	b.n	800b442 <refrigera+0x522>
             goto finindi;
 800b898:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 800b89a:	e5d2      	b.n	800b442 <refrigera+0x522>
            fauto[7] = 1;						//bset		fauto,#7
 800b89c:	4b57      	ldr	r3, [pc, #348]	@ (800b9fc <refrigera+0xadc>)
 800b89e:	2201      	movs	r2, #1
 800b8a0:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 800b8a2:	e156      	b.n	800bb52 <refrigera+0xc32>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 800b8a4:	4b55      	ldr	r3, [pc, #340]	@ (800b9fc <refrigera+0xadc>)
 800b8a6:	785b      	ldrb	r3, [r3, #1]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d150      	bne.n	800b94e <refrigera+0xa2e>
			wreg = num_ver;			//;		/ Versión del Firmware
 800b8ac:	4b47      	ldr	r3, [pc, #284]	@ (800b9cc <refrigera+0xaac>)
 800b8ae:	2205      	movs	r2, #5
 800b8b0:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 800b8b2:	f7fb f83f 	bl	8006934 <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 800b8b6:	4b42      	ldr	r3, [pc, #264]	@ (800b9c0 <refrigera+0xaa0>)
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 800b8bc:	4b4f      	ldr	r3, [pc, #316]	@ (800b9fc <refrigera+0xadc>)
 800b8be:	2201      	movs	r2, #1
 800b8c0:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 800b8c2:	4b4a      	ldr	r3, [pc, #296]	@ (800b9ec <refrigera+0xacc>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b10      	cmp	r3, #16
 800b8c8:	d90c      	bls.n	800b8e4 <refrigera+0x9c4>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 800b8ca:	4b4d      	ldr	r3, [pc, #308]	@ (800ba00 <refrigera+0xae0>)
 800b8cc:	2110      	movs	r1, #16
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f007 fd06 	bl	80132e0 <HAL_GPIO_ReadPin>
 800b8d4:	1e03      	subs	r3, r0, #0
 800b8d6:	d003      	beq.n	800b8e0 <refrigera+0x9c0>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 800b8d8:	4b42      	ldr	r3, [pc, #264]	@ (800b9e4 <refrigera+0xac4>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 800b8de:	e020      	b.n	800b922 <refrigera+0xa02>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 800b8e0:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 800b8e2:	e136      	b.n	800bb52 <refrigera+0xc32>
        	   goto door_det; //jrule door_det
 800b8e4:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 800b8e6:	4b41      	ldr	r3, [pc, #260]	@ (800b9ec <refrigera+0xacc>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b0d      	cmp	r3, #13
 800b8ec:	d915      	bls.n	800b91a <refrigera+0x9fa>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 800b8ee:	4b34      	ldr	r3, [pc, #208]	@ (800b9c0 <refrigera+0xaa0>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 800b8f4:	4b42      	ldr	r3, [pc, #264]	@ (800ba00 <refrigera+0xae0>)
 800b8f6:	2110      	movs	r1, #16
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f007 fcf1 	bl	80132e0 <HAL_GPIO_ReadPin>
 800b8fe:	1e03      	subs	r3, r0, #0
 800b900:	d009      	beq.n	800b916 <refrigera+0x9f6>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 800b902:	4b3e      	ldr	r3, [pc, #248]	@ (800b9fc <refrigera+0xadc>)
 800b904:	2201      	movs	r2, #1
 800b906:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 800b908:	4b2d      	ldr	r3, [pc, #180]	@ (800b9c0 <refrigera+0xaa0>)
 800b90a:	2201      	movs	r2, #1
 800b90c:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 800b90e:	4b3d      	ldr	r3, [pc, #244]	@ (800ba04 <refrigera+0xae4>)
 800b910:	2200      	movs	r2, #0
 800b912:	705a      	strb	r2, [r3, #1]
			goto defap;
 800b914:	e11d      	b.n	800bb52 <refrigera+0xc32>
            	goto no_det_door;				//	¿La puerta está abierta?
 800b916:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 800b918:	e11b      	b.n	800bb52 <refrigera+0xc32>
            	goto do_sec;
 800b91a:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 800b91c:	4b37      	ldr	r3, [pc, #220]	@ (800b9fc <refrigera+0xadc>)
 800b91e:	2200      	movs	r2, #0
 800b920:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 800b922:	2300      	movs	r3, #0
 800b924:	60bb      	str	r3, [r7, #8]
 800b926:	e00e      	b.n	800b946 <refrigera+0xa26>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 800b928:	4a2e      	ldr	r2, [pc, #184]	@ (800b9e4 <refrigera+0xac4>)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	18d3      	adds	r3, r2, r3
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10e      	bne.n	800b952 <refrigera+0xa32>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 800b934:	4a34      	ldr	r2, [pc, #208]	@ (800ba08 <refrigera+0xae8>)
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	18d3      	adds	r3, r2, r3
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <refrigera+0xa36>
			for(int k=0;k<8;k++){
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	3301      	adds	r3, #1
 800b944:	60bb      	str	r3, [r7, #8]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b07      	cmp	r3, #7
 800b94a:	dded      	ble.n	800b928 <refrigera+0xa08>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 800b94c:	e085      	b.n	800ba5a <refrigera+0xb3a>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 800b94e:	46c0      	nop			@ (mov r8, r8)
 800b950:	e004      	b.n	800b95c <refrigera+0xa3c>
           		   goto fail_det;//jrne fail_det
 800b952:	46c0      	nop			@ (mov r8, r8)
 800b954:	e002      	b.n	800b95c <refrigera+0xa3c>
           		   goto fail_det; //jrne fail_det
 800b956:	46c0      	nop			@ (mov r8, r8)
 800b958:	e000      	b.n	800b95c <refrigera+0xa3c>
				goto fail_det;
 800b95a:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 800b95c:	210a      	movs	r1, #10
 800b95e:	200a      	movs	r0, #10
 800b960:	f7fb fcda 	bl	8007318 <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 800b964:	4b29      	ldr	r3, [pc, #164]	@ (800ba0c <refrigera+0xaec>)
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	001a      	movs	r2, r3
 800b96c:	2340      	movs	r3, #64	@ 0x40
 800b96e:	4013      	ands	r3, r2
 800b970:	d104      	bne.n	800b97c <refrigera+0xa5c>
			op_menu (0x1F, 0X1F);
 800b972:	211f      	movs	r1, #31
 800b974:	201f      	movs	r0, #31
 800b976:	f7fb fccf 	bl	8007318 <op_menu>
 800b97a:	e000      	b.n	800b97e <refrigera+0xa5e>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 800b97c:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 800b97e:	4b1f      	ldr	r3, [pc, #124]	@ (800b9fc <refrigera+0xadc>)
 800b980:	2201      	movs	r2, #1
 800b982:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 800b984:	4b1d      	ldr	r3, [pc, #116]	@ (800b9fc <refrigera+0xadc>)
 800b986:	2201      	movs	r2, #1
 800b988:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 800b98a:	4b16      	ldr	r3, [pc, #88]	@ (800b9e4 <refrigera+0xac4>)
 800b98c:	79db      	ldrb	r3, [r3, #7]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d107      	bne.n	800b9a2 <refrigera+0xa82>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 800b992:	4b14      	ldr	r3, [pc, #80]	@ (800b9e4 <refrigera+0xac4>)
 800b994:	799b      	ldrb	r3, [r3, #6]
 800b996:	2201      	movs	r2, #1
 800b998:	4053      	eors	r3, r2
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d15a      	bne.n	800ba56 <refrigera+0xb36>
dpy_volt_f:
 800b9a0:	e000      	b.n	800b9a4 <refrigera+0xa84>
        	   goto dpy_volt_f;
 800b9a2:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 800b9a4:	4b15      	ldr	r3, [pc, #84]	@ (800b9fc <refrigera+0xadc>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 800b9aa:	4b11      	ldr	r3, [pc, #68]	@ (800b9f0 <refrigera+0xad0>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	001a      	movs	r2, r3
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	d12c      	bne.n	800ba10 <refrigera+0xaf0>
              fauto[3] = 1;					//bset		fauto,#3
 800b9b6:	4b11      	ldr	r3, [pc, #68]	@ (800b9fc <refrigera+0xadc>)
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	70da      	strb	r2, [r3, #3]
 800b9bc:	e029      	b.n	800ba12 <refrigera+0xaf2>
 800b9be:	46c0      	nop			@ (mov r8, r8)
 800b9c0:	20000b8c 	.word	0x20000b8c
 800b9c4:	20000c88 	.word	0x20000c88
 800b9c8:	200000b8 	.word	0x200000b8
 800b9cc:	20000b53 	.word	0x20000b53
 800b9d0:	20000b52 	.word	0x20000b52
 800b9d4:	0801eff0 	.word	0x0801eff0
 800b9d8:	0801eff1 	.word	0x0801eff1
 800b9dc:	20000b50 	.word	0x20000b50
 800b9e0:	20000ba0 	.word	0x20000ba0
 800b9e4:	20000b84 	.word	0x20000b84
 800b9e8:	20000b51 	.word	0x20000b51
 800b9ec:	20000b68 	.word	0x20000b68
 800b9f0:	20000c24 	.word	0x20000c24
 800b9f4:	20000b94 	.word	0x20000b94
 800b9f8:	20000b4b 	.word	0x20000b4b
 800b9fc:	20000bd4 	.word	0x20000bd4
 800ba00:	50000400 	.word	0x50000400
 800ba04:	20000bdc 	.word	0x20000bdc
 800ba08:	20000b7c 	.word	0x20000b7c
 800ba0c:	20000b4c 	.word	0x20000b4c
            	  goto no_dpy_f;
 800ba10:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 800ba12:	4bc0      	ldr	r3, [pc, #768]	@ (800bd14 <refrigera+0xdf4>)
 800ba14:	781a      	ldrb	r2, [r3, #0]
 800ba16:	4bc0      	ldr	r3, [pc, #768]	@ (800bd18 <refrigera+0xdf8>)
 800ba18:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 800ba1a:	4bbf      	ldr	r3, [pc, #764]	@ (800bd18 <refrigera+0xdf8>)
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b63      	cmp	r3, #99	@ 0x63
 800ba20:	d910      	bls.n	800ba44 <refrigera+0xb24>
				wreg = wreg - 100;
 800ba22:	4bbd      	ldr	r3, [pc, #756]	@ (800bd18 <refrigera+0xdf8>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	3b64      	subs	r3, #100	@ 0x64
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	4bbb      	ldr	r3, [pc, #748]	@ (800bd18 <refrigera+0xdf8>)
 800ba2c:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800ba2e:	4bba      	ldr	r3, [pc, #744]	@ (800bd18 <refrigera+0xdf8>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	2b63      	cmp	r3, #99	@ 0x63
 800ba34:	d908      	bls.n	800ba48 <refrigera+0xb28>
				wreg = wreg - 100;
 800ba36:	4bb8      	ldr	r3, [pc, #736]	@ (800bd18 <refrigera+0xdf8>)
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	3b64      	subs	r3, #100	@ 0x64
 800ba3c:	b2da      	uxtb	r2, r3
 800ba3e:	4bb6      	ldr	r3, [pc, #728]	@ (800bd18 <refrigera+0xdf8>)
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	e002      	b.n	800ba4a <refrigera+0xb2a>
					goto under_100_f; //jrult under_100_f
 800ba44:	46c0      	nop			@ (mov r8, r8)
 800ba46:	e000      	b.n	800ba4a <refrigera+0xb2a>
					goto under_100_f;
 800ba48:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 800ba4a:	f7fa ff73 	bl	8006934 <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 800ba4e:	4bb3      	ldr	r3, [pc, #716]	@ (800bd1c <refrigera+0xdfc>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 800ba54:	e07d      	b.n	800bb52 <refrigera+0xc32>
        	   goto no_dpy_volt_f;
 800ba56:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 800ba58:	e07b      	b.n	800bb52 <refrigera+0xc32>
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 800ba5a:	4bb1      	ldr	r3, [pc, #708]	@ (800bd20 <refrigera+0xe00>)
 800ba5c:	789b      	ldrb	r3, [r3, #2]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d100      	bne.n	800ba64 <refrigera+0xb44>
 800ba62:	e77a      	b.n	800b95a <refrigera+0xa3a>
					goto on_compres;
 800ba64:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 800ba66:	4baf      	ldr	r3, [pc, #700]	@ (800bd24 <refrigera+0xe04>)
 800ba68:	2201      	movs	r2, #1
 800ba6a:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 800ba6c:	4bab      	ldr	r3, [pc, #684]	@ (800bd1c <refrigera+0xdfc>)
 800ba6e:	2201      	movs	r2, #1
 800ba70:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 800ba72:	4bad      	ldr	r3, [pc, #692]	@ (800bd28 <refrigera+0xe08>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b0b      	cmp	r3, #11
 800ba78:	d864      	bhi.n	800bb44 <refrigera+0xc24>
            	 	 goto on_desh;
 800ba7a:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 800ba7c:	4ba9      	ldr	r3, [pc, #676]	@ (800bd24 <refrigera+0xe04>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 800ba82:	49a6      	ldr	r1, [pc, #664]	@ (800bd1c <refrigera+0xdfc>)
 800ba84:	48a5      	ldr	r0, [pc, #660]	@ (800bd1c <refrigera+0xdfc>)
 800ba86:	2302      	movs	r3, #2
 800ba88:	2203      	movs	r2, #3
 800ba8a:	f001 ffb5 	bl	800d9f8 <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 800ba8e:	4ba5      	ldr	r3, [pc, #660]	@ (800bd24 <refrigera+0xe04>)
 800ba90:	2201      	movs	r2, #1
 800ba92:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 800ba94:	4ba1      	ldr	r3, [pc, #644]	@ (800bd1c <refrigera+0xdfc>)
 800ba96:	2201      	movs	r2, #1
 800ba98:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 800ba9a:	4ba3      	ldr	r3, [pc, #652]	@ (800bd28 <refrigera+0xe08>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	2b09      	cmp	r3, #9
 800baa0:	d852      	bhi.n	800bb48 <refrigera+0xc28>
            		goto on_vent;//jrule on_vent
 800baa2:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 800baa4:	4b9f      	ldr	r3, [pc, #636]	@ (800bd24 <refrigera+0xe04>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 800baaa:	499c      	ldr	r1, [pc, #624]	@ (800bd1c <refrigera+0xdfc>)
 800baac:	489b      	ldr	r0, [pc, #620]	@ (800bd1c <refrigera+0xdfc>)
 800baae:	2303      	movs	r3, #3
 800bab0:	2207      	movs	r2, #7
 800bab2:	f001 ffa1 	bl	800d9f8 <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 800bab6:	4b9d      	ldr	r3, [pc, #628]	@ (800bd2c <refrigera+0xe0c>)
 800bab8:	2201      	movs	r2, #1
 800baba:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 800babc:	4b9a      	ldr	r3, [pc, #616]	@ (800bd28 <refrigera+0xe08>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b07      	cmp	r3, #7
 800bac2:	d843      	bhi.n	800bb4c <refrigera+0xc2c>
					goto on_lamp; //jrule	on_lamp
 800bac4:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 800bac6:	4b99      	ldr	r3, [pc, #612]	@ (800bd2c <refrigera+0xe0c>)
 800bac8:	2200      	movs	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 800bacc:	4993      	ldr	r1, [pc, #588]	@ (800bd1c <refrigera+0xdfc>)
 800bace:	4893      	ldr	r0, [pc, #588]	@ (800bd1c <refrigera+0xdfc>)
 800bad0:	2307      	movs	r3, #7
 800bad2:	2204      	movs	r2, #4
 800bad4:	f001 ff90 	bl	800d9f8 <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 800bad8:	4b92      	ldr	r3, [pc, #584]	@ (800bd24 <refrigera+0xe04>)
 800bada:	2201      	movs	r2, #1
 800badc:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 800bade:	4b92      	ldr	r3, [pc, #584]	@ (800bd28 <refrigera+0xe08>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	d834      	bhi.n	800bb50 <refrigera+0xc30>
					goto dpy_volt; //jrule	dpy_volt
 800bae6:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 800bae8:	4b8e      	ldr	r3, [pc, #568]	@ (800bd24 <refrigera+0xe04>)
 800baea:	2200      	movs	r2, #0
 800baec:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 800baee:	4b8b      	ldr	r3, [pc, #556]	@ (800bd1c <refrigera+0xdfc>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 800baf4:	4b87      	ldr	r3, [pc, #540]	@ (800bd14 <refrigera+0xdf4>)
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	4b87      	ldr	r3, [pc, #540]	@ (800bd18 <refrigera+0xdf8>)
 800bafa:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800bafc:	4b86      	ldr	r3, [pc, #536]	@ (800bd18 <refrigera+0xdf8>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b63      	cmp	r3, #99	@ 0x63
 800bb02:	d910      	bls.n	800bb26 <refrigera+0xc06>
				wreg = wreg - 100;
 800bb04:	4b84      	ldr	r3, [pc, #528]	@ (800bd18 <refrigera+0xdf8>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	3b64      	subs	r3, #100	@ 0x64
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	4b82      	ldr	r3, [pc, #520]	@ (800bd18 <refrigera+0xdf8>)
 800bb0e:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800bb10:	4b81      	ldr	r3, [pc, #516]	@ (800bd18 <refrigera+0xdf8>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b63      	cmp	r3, #99	@ 0x63
 800bb16:	d908      	bls.n	800bb2a <refrigera+0xc0a>
				wreg = wreg - 100;
 800bb18:	4b7f      	ldr	r3, [pc, #508]	@ (800bd18 <refrigera+0xdf8>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	3b64      	subs	r3, #100	@ 0x64
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	4b7d      	ldr	r3, [pc, #500]	@ (800bd18 <refrigera+0xdf8>)
 800bb22:	701a      	strb	r2, [r3, #0]
 800bb24:	e002      	b.n	800bb2c <refrigera+0xc0c>
					goto under_100; //jrult	under_100
 800bb26:	46c0      	nop			@ (mov r8, r8)
 800bb28:	e000      	b.n	800bb2c <refrigera+0xc0c>
					goto under_100;
 800bb2a:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 800bb2c:	f7fa ff02 	bl	8006934 <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 800bb30:	4b7a      	ldr	r3, [pc, #488]	@ (800bd1c <refrigera+0xdfc>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 800bb36:	4b7a      	ldr	r3, [pc, #488]	@ (800bd20 <refrigera+0xe00>)
 800bb38:	2201      	movs	r2, #1
 800bb3a:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 800bb3c:	4b78      	ldr	r3, [pc, #480]	@ (800bd20 <refrigera+0xe00>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	71da      	strb	r2, [r3, #7]
 800bb42:	e006      	b.n	800bb52 <refrigera+0xc32>
             	 goto defap;
 800bb44:	46c0      	nop			@ (mov r8, r8)
 800bb46:	e004      	b.n	800bb52 <refrigera+0xc32>
            	goto defap;
 800bb48:	46c0      	nop			@ (mov r8, r8)
 800bb4a:	e002      	b.n	800bb52 <refrigera+0xc32>
				goto defap;
 800bb4c:	46c0      	nop			@ (mov r8, r8)
 800bb4e:	e000      	b.n	800bb52 <refrigera+0xc32>
				goto defap;
 800bb50:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 800bb52:	f7fb fad9 	bl	8007108 <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 800bb56:	4b76      	ldr	r3, [pc, #472]	@ (800bd30 <refrigera+0xe10>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	001a      	movs	r2, r3
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	4013      	ands	r3, r2
 800bb60:	d00c      	beq.n	800bb7c <refrigera+0xc5c>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 800bb62:	46c0      	nop			@ (mov r8, r8)
 800bb64:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 800bb66:	4b73      	ldr	r3, [pc, #460]	@ (800bd34 <refrigera+0xe14>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 800bb6c:	4b72      	ldr	r3, [pc, #456]	@ (800bd38 <refrigera+0xe18>)
 800bb6e:	2202      	movs	r2, #2
 800bb70:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 800bb72:	4b72      	ldr	r3, [pc, #456]	@ (800bd3c <refrigera+0xe1c>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 800bb78:	f7ff fbfd 	bl	800b376 <refrigera+0x456>
					goto finap;
 800bb7c:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 800bb7e:	e460      	b.n	800b442 <refrigera+0x522>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 800bb80:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 800bb82:	4b66      	ldr	r3, [pc, #408]	@ (800bd1c <refrigera+0xdfc>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 800bb88:	4b6d      	ldr	r3, [pc, #436]	@ (800bd40 <refrigera+0xe20>)
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d000      	beq.n	800bb92 <refrigera+0xc72>
 800bb90:	e060      	b.n	800bc54 <refrigera+0xd34>
					goto ask_door_fan; //jreq ask_door_fan
 800bb92:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800bb94:	4b6b      	ldr	r3, [pc, #428]	@ (800bd44 <refrigera+0xe24>)
 800bb96:	225b      	movs	r2, #91	@ 0x5b
 800bb98:	5c9b      	ldrb	r3, [r3, r2]
 800bb9a:	001a      	movs	r2, r3
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	4013      	ands	r3, r2
 800bba0:	d108      	bne.n	800bbb4 <refrigera+0xc94>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 800bba2:	4b69      	ldr	r3, [pc, #420]	@ (800bd48 <refrigera+0xe28>)
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d006      	beq.n	800bbb8 <refrigera+0xc98>
               if(retvent == 0){ //tnz retvent
 800bbaa:	4b68      	ldr	r3, [pc, #416]	@ (800bd4c <refrigera+0xe2c>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d152      	bne.n	800bc58 <refrigera+0xd38>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 800bbb2:	e002      	b.n	800bbba <refrigera+0xc9a>
            	   goto ask_fan_on;
 800bbb4:	46c0      	nop			@ (mov r8, r8)
 800bbb6:	e000      	b.n	800bbba <refrigera+0xc9a>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 800bbb8:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 800bbba:	4b65      	ldr	r3, [pc, #404]	@ (800bd50 <refrigera+0xe30>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4053      	eors	r3, r2
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d104      	bne.n	800bbd2 <refrigera+0xcb2>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 800bbc8:	4b62      	ldr	r3, [pc, #392]	@ (800bd54 <refrigera+0xe34>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d033      	beq.n	800bc38 <refrigera+0xd18>
					goto fan_off; //jrne fan_off
 800bbd0:	e047      	b.n	800bc62 <refrigera+0xd42>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800bbd2:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 800bbd4:	4b5b      	ldr	r3, [pc, #364]	@ (800bd44 <refrigera+0xe24>)
 800bbd6:	2268      	movs	r2, #104	@ 0x68
 800bbd8:	5c9a      	ldrb	r2, [r3, r2]
 800bbda:	4b4f      	ldr	r3, [pc, #316]	@ (800bd18 <refrigera+0xdf8>)
 800bbdc:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 800bbde:	f7fa febd 	bl	800695c <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 800bbe2:	4b5d      	ldr	r3, [pc, #372]	@ (800bd58 <refrigera+0xe38>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d038      	beq.n	800bc5c <refrigera+0xd3c>
					goto ciclof_00;					// No, pregunta por parte baja
 800bbea:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 800bbec:	4b4a      	ldr	r3, [pc, #296]	@ (800bd18 <refrigera+0xdf8>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d023      	beq.n	800bc3c <refrigera+0xd1c>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 800bbf4:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 800bbf6:	4b56      	ldr	r3, [pc, #344]	@ (800bd50 <refrigera+0xe30>)
 800bbf8:	78db      	ldrb	r3, [r3, #3]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	4053      	eors	r3, r2
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00e      	beq.n	800bc22 <refrigera+0xd02>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 800bc04:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 800bc06:	4b55      	ldr	r3, [pc, #340]	@ (800bd5c <refrigera+0xe3c>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d128      	bne.n	800bc60 <refrigera+0xd40>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 800bc0e:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 800bc10:	4b53      	ldr	r3, [pc, #332]	@ (800bd60 <refrigera+0xe40>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d113      	bne.n	800bc40 <refrigera+0xd20>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 800bc18:	4b4f      	ldr	r3, [pc, #316]	@ (800bd58 <refrigera+0xe38>)
 800bc1a:	781a      	ldrb	r2, [r3, #0]
 800bc1c:	4b50      	ldr	r3, [pc, #320]	@ (800bd60 <refrigera+0xe40>)
 800bc1e:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 800bc20:	e011      	b.n	800bc46 <refrigera+0xd26>
				goto ciclo_on;					/// Si, ciclo de encendido
 800bc22:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 800bc24:	4b4e      	ldr	r3, [pc, #312]	@ (800bd60 <refrigera+0xe40>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10b      	bne.n	800bc44 <refrigera+0xd24>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 800bc2c:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 800bc2e:	4b3a      	ldr	r3, [pc, #232]	@ (800bd18 <refrigera+0xdf8>)
 800bc30:	781a      	ldrb	r2, [r3, #0]
 800bc32:	4b4a      	ldr	r3, [pc, #296]	@ (800bd5c <refrigera+0xe3c>)
 800bc34:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 800bc36:	e014      	b.n	800bc62 <refrigera+0xd42>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 800bc38:	46c0      	nop			@ (mov r8, r8)
 800bc3a:	e004      	b.n	800bc46 <refrigera+0xd26>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 800bc3c:	46c0      	nop			@ (mov r8, r8)
 800bc3e:	e002      	b.n	800bc46 <refrigera+0xd26>
					goto fan_on; //jrne fan_on
 800bc40:	46c0      	nop			@ (mov r8, r8)
 800bc42:	e000      	b.n	800bc46 <refrigera+0xd26>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 800bc44:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 800bc46:	4b39      	ldr	r3, [pc, #228]	@ (800bd2c <refrigera+0xe0c>)
 800bc48:	2201      	movs	r2, #1
 800bc4a:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 800bc4c:	4b33      	ldr	r3, [pc, #204]	@ (800bd1c <refrigera+0xdfc>)
 800bc4e:	2201      	movs	r2, #1
 800bc50:	71da      	strb	r2, [r3, #7]
 800bc52:	e006      	b.n	800bc62 <refrigera+0xd42>
				goto fan_off;
 800bc54:	46c0      	nop			@ (mov r8, r8)
 800bc56:	e004      	b.n	800bc62 <refrigera+0xd42>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 800bc58:	46c0      	nop			@ (mov r8, r8)
 800bc5a:	e002      	b.n	800bc62 <refrigera+0xd42>
				goto fan_off;							// Si, manten apagado el ventilador
 800bc5c:	46c0      	nop			@ (mov r8, r8)
 800bc5e:	e000      	b.n	800bc62 <refrigera+0xd42>
				goto fan_off;						// No, manten apagado el ventilador
 800bc60:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 800bc62:	4b40      	ldr	r3, [pc, #256]	@ (800bd64 <refrigera+0xe44>)
 800bc64:	881a      	ldrh	r2, [r3, #0]
 800bc66:	4b40      	ldr	r3, [pc, #256]	@ (800bd68 <refrigera+0xe48>)
 800bc68:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 800bc6a:	4b40      	ldr	r3, [pc, #256]	@ (800bd6c <refrigera+0xe4c>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d107      	bne.n	800bc82 <refrigera+0xd62>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 800bc72:	4b3e      	ldr	r3, [pc, #248]	@ (800bd6c <refrigera+0xe4c>)
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	2201      	movs	r2, #1
 800bc78:	4053      	eors	r3, r2
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d103      	bne.n	800bc88 <refrigera+0xd68>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 800bc80:	e000      	b.n	800bc84 <refrigera+0xd64>
            	   goto control_j02;
 800bc82:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 800bc84:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 800bc86:	e029      	b.n	800bcdc <refrigera+0xdbc>
            	   goto control_j03;
 800bc88:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 800bc8a:	4b39      	ldr	r3, [pc, #228]	@ (800bd70 <refrigera+0xe50>)
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d13a      	bne.n	800bd08 <refrigera+0xde8>
ctl13:
 800bc92:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 800bc94:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 800bc96:	f7fa fbff 	bl	8006498 <tdev_to_Word>
 800bc9a:	0003      	movs	r3, r0
 800bc9c:	b21a      	sxth	r2, r3
 800bc9e:	4b35      	ldr	r3, [pc, #212]	@ (800bd74 <refrigera+0xe54>)
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	b21b      	sxth	r3, r3
 800bca4:	429a      	cmp	r2, r3
 800bca6:	db09      	blt.n	800bcbc <refrigera+0xd9c>
ctl15:			//	ld			A,tminstopl;
 800bca8:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 800bcaa:	4b33      	ldr	r3, [pc, #204]	@ (800bd78 <refrigera+0xe58>)
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d12c      	bne.n	800bd0c <refrigera+0xdec>
				if(drp_comph != 0){
 800bcb2:	4b32      	ldr	r3, [pc, #200]	@ (800bd7c <refrigera+0xe5c>)
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d01e      	beq.n	800bcf8 <refrigera+0xdd8>
					goto defctl;
 800bcba:	e066      	b.n	800bd8a <refrigera+0xe6a>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 800bcbc:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 800bcbe:	f7fa fbeb 	bl	8006498 <tdev_to_Word>
 800bcc2:	0003      	movs	r3, r0
 800bcc4:	b21a      	sxth	r2, r3
 800bcc6:	4b2e      	ldr	r3, [pc, #184]	@ (800bd80 <refrigera+0xe60>)
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	b21b      	sxth	r3, r3
 800bccc:	429a      	cmp	r2, r3
 800bcce:	dc0d      	bgt.n	800bcec <refrigera+0xdcc>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 800bcd0:	4912      	ldr	r1, [pc, #72]	@ (800bd1c <refrigera+0xdfc>)
 800bcd2:	482c      	ldr	r0, [pc, #176]	@ (800bd84 <refrigera+0xe64>)
 800bcd4:	2306      	movs	r3, #6
 800bcd6:	2207      	movs	r2, #7
 800bcd8:	f001 fe8e 	bl	800d9f8 <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800bcdc:	4b1c      	ldr	r3, [pc, #112]	@ (800bd50 <refrigera+0xe30>)
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d015      	beq.n	800bd10 <refrigera+0xdf0>
					goto control_j04;
 800bce4:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 800bce6:	f7fa fc91 	bl	800660c <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 800bcea:	e04e      	b.n	800bd8a <refrigera+0xe6a>
					goto equal;
 800bcec:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 800bcee:	4b18      	ldr	r3, [pc, #96]	@ (800bd50 <refrigera+0xe30>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d048      	beq.n	800bd88 <refrigera+0xe68>
					goto control_j05;
 800bcf6:	e000      	b.n	800bcfa <refrigera+0xdda>
				goto on_comp;						// Enciende el compresor
 800bcf8:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 800bcfa:	4b0a      	ldr	r3, [pc, #40]	@ (800bd24 <refrigera+0xe04>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 800bd00:	4b06      	ldr	r3, [pc, #24]	@ (800bd1c <refrigera+0xdfc>)
 800bd02:	2201      	movs	r2, #1
 800bd04:	709a      	strb	r2, [r3, #2]
				goto defctl;
 800bd06:	e040      	b.n	800bd8a <refrigera+0xe6a>
             		 goto defctl;
 800bd08:	46c0      	nop			@ (mov r8, r8)
 800bd0a:	e03e      	b.n	800bd8a <refrigera+0xe6a>
					goto defctl;					// No, espera
 800bd0c:	46c0      	nop			@ (mov r8, r8)
 800bd0e:	e03c      	b.n	800bd8a <refrigera+0xe6a>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 800bd10:	46c0      	nop			@ (mov r8, r8)
 800bd12:	e03a      	b.n	800bd8a <refrigera+0xe6a>
 800bd14:	20000bca 	.word	0x20000bca
 800bd18:	20000b53 	.word	0x20000b53
 800bd1c:	20000b8c 	.word	0x20000b8c
 800bd20:	20000bd4 	.word	0x20000bd4
 800bd24:	20000ba0 	.word	0x20000ba0
 800bd28:	20000b68 	.word	0x20000b68
 800bd2c:	20000bdc 	.word	0x20000bdc
 800bd30:	20000b50 	.word	0x20000b50
 800bd34:	20000b74 	.word	0x20000b74
 800bd38:	20000b4b 	.word	0x20000b4b
 800bd3c:	20000b94 	.word	0x20000b94
 800bd40:	20000bf8 	.word	0x20000bf8
 800bd44:	200000b8 	.word	0x200000b8
 800bd48:	20000c23 	.word	0x20000c23
 800bd4c:	20000b66 	.word	0x20000b66
 800bd50:	20000b54 	.word	0x20000b54
 800bd54:	20000b70 	.word	0x20000b70
 800bd58:	20000b52 	.word	0x20000b52
 800bd5c:	20000bf5 	.word	0x20000bf5
 800bd60:	20000bf4 	.word	0x20000bf4
 800bd64:	20000bb2 	.word	0x20000bb2
 800bd68:	20000bb6 	.word	0x20000bb6
 800bd6c:	20000b84 	.word	0x20000b84
 800bd70:	20000b7c 	.word	0x20000b7c
 800bd74:	20000baa 	.word	0x20000baa
 800bd78:	20000b5e 	.word	0x20000b5e
 800bd7c:	20000bf6 	.word	0x20000bf6
 800bd80:	20000ba8 	.word	0x20000ba8
 800bd84:	20000c38 	.word	0x20000c38
        		goto defctl;
 800bd88:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 800bd8a:	4bbe      	ldr	r3, [pc, #760]	@ (800c084 <refrigera+0x1164>)
 800bd8c:	224d      	movs	r2, #77	@ 0x4d
 800bd8e:	2100      	movs	r1, #0
 800bd90:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 800bd92:	4bbc      	ldr	r3, [pc, #752]	@ (800c084 <refrigera+0x1164>)
 800bd94:	224d      	movs	r2, #77	@ 0x4d
 800bd96:	5c9b      	ldrb	r3, [r3, r2]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d100      	bne.n	800bd9e <refrigera+0xe7e>
 800bd9c:	e0a4      	b.n	800bee8 <refrigera+0xfc8>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800bd9e:	4bba      	ldr	r3, [pc, #744]	@ (800c088 <refrigera+0x1168>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d120      	bne.n	800bde8 <refrigera+0xec8>
				STM8_16_X = Plantilla[timeDefi] *60;
 800bda6:	4bb7      	ldr	r3, [pc, #732]	@ (800c084 <refrigera+0x1164>)
 800bda8:	224d      	movs	r2, #77	@ 0x4d
 800bdaa:	5c9b      	ldrb	r3, [r3, r2]
 800bdac:	001a      	movs	r2, r3
 800bdae:	233c      	movs	r3, #60	@ 0x3c
 800bdb0:	4353      	muls	r3, r2
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	4bb5      	ldr	r3, [pc, #724]	@ (800c08c <refrigera+0x116c>)
 800bdb6:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 800bdb8:	4bb4      	ldr	r3, [pc, #720]	@ (800c08c <refrigera+0x116c>)
 800bdba:	881a      	ldrh	r2, [r3, #0]
 800bdbc:	4bb4      	ldr	r3, [pc, #720]	@ (800c090 <refrigera+0x1170>)
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d005      	beq.n	800bdd0 <refrigera+0xeb0>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 800bdc4:	4baf      	ldr	r3, [pc, #700]	@ (800c084 <refrigera+0x1164>)
 800bdc6:	2259      	movs	r2, #89	@ 0x59
 800bdc8:	5c9b      	ldrb	r3, [r3, r2]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d134      	bne.n	800be38 <refrigera+0xf18>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 800bdce:	e05c      	b.n	800be8a <refrigera+0xf6a>
					goto loadDefiCnts;
 800bdd0:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 800bdd2:	4bae      	ldr	r3, [pc, #696]	@ (800c08c <refrigera+0x116c>)
 800bdd4:	881a      	ldrh	r2, [r3, #0]
 800bdd6:	4bae      	ldr	r3, [pc, #696]	@ (800c090 <refrigera+0x1170>)
 800bdd8:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 800bdda:	4bac      	ldr	r3, [pc, #688]	@ (800c08c <refrigera+0x116c>)
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	4bac      	ldr	r3, [pc, #688]	@ (800c094 <refrigera+0x1174>)
 800bde4:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 800bde6:	e084      	b.n	800bef2 <refrigera+0xfd2>
					goto chkTimeDefi;
 800bde8:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 800bdea:	4ba6      	ldr	r3, [pc, #664]	@ (800c084 <refrigera+0x1164>)
 800bdec:	2259      	movs	r2, #89	@ 0x59
 800bdee:	5c9b      	ldrb	r3, [r3, r2]
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d03c      	beq.n	800be6e <refrigera+0xf4e>
chkTimeDefi_1s:
 800bdf4:	46c0      	nop			@ (mov r8, r8)
 800bdf6:	e002      	b.n	800bdfe <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800bdf8:	46c0      	nop			@ (mov r8, r8)
 800bdfa:	e000      	b.n	800bdfe <refrigera+0xede>
                	   goto chkTimeDefi_1s;
 800bdfc:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 800bdfe:	4ba6      	ldr	r3, [pc, #664]	@ (800c098 <refrigera+0x1178>)
 800be00:	791b      	ldrb	r3, [r3, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d000      	beq.n	800be08 <refrigera+0xee8>
 800be06:	e066      	b.n	800bed6 <refrigera+0xfb6>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 800be08:	4ba3      	ldr	r3, [pc, #652]	@ (800c098 <refrigera+0x1178>)
 800be0a:	795b      	ldrb	r3, [r3, #5]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d000      	beq.n	800be12 <refrigera+0xef2>
 800be10:	e063      	b.n	800beda <refrigera+0xfba>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 800be12:	4b9f      	ldr	r3, [pc, #636]	@ (800c090 <refrigera+0x1170>)
 800be14:	881a      	ldrh	r2, [r3, #0]
 800be16:	4b9f      	ldr	r3, [pc, #636]	@ (800c094 <refrigera+0x1174>)
 800be18:	881b      	ldrh	r3, [r3, #0]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d106      	bne.n	800be2c <refrigera+0xf0c>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800be1e:	f7fa fb3b 	bl	8006498 <tdev_to_Word>
 800be22:	0003      	movs	r3, r0
 800be24:	b29a      	uxth	r2, r3
 800be26:	4b9d      	ldr	r3, [pc, #628]	@ (800c09c <refrigera+0x117c>)
 800be28:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 800be2a:	e062      	b.n	800bef2 <refrigera+0xfd2>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 800be2c:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800be2e:	4b98      	ldr	r3, [pc, #608]	@ (800c090 <refrigera+0x1170>)
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d15a      	bne.n	800beec <refrigera+0xfcc>
chkTimeDefi_1s_02:
 800be36:	e000      	b.n	800be3a <refrigera+0xf1a>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 800be38:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 800be3a:	4b98      	ldr	r3, [pc, #608]	@ (800c09c <refrigera+0x117c>)
 800be3c:	881a      	ldrh	r2, [r3, #0]
 800be3e:	4b93      	ldr	r3, [pc, #588]	@ (800c08c <refrigera+0x116c>)
 800be40:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 800be42:	4b92      	ldr	r3, [pc, #584]	@ (800c08c <refrigera+0x116c>)
 800be44:	881c      	ldrh	r4, [r3, #0]
 800be46:	f7fa fb27 	bl	8006498 <tdev_to_Word>
 800be4a:	0003      	movs	r3, r0
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	1ae3      	subs	r3, r4, r3
 800be50:	b29a      	uxth	r2, r3
 800be52:	4b8e      	ldr	r3, [pc, #568]	@ (800c08c <refrigera+0x116c>)
 800be54:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800be56:	4b92      	ldr	r3, [pc, #584]	@ (800c0a0 <refrigera+0x1180>)
 800be58:	0018      	movs	r0, r3
 800be5a:	f7fa fb35 	bl	80064c8 <TwoByteInArrayToWord>
 800be5e:	0003      	movs	r3, r0
 800be60:	b21a      	sxth	r2, r3
 800be62:	4b8a      	ldr	r3, [pc, #552]	@ (800c08c <refrigera+0x116c>)
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	b21b      	sxth	r3, r3
 800be68:	429a      	cmp	r2, r3
 800be6a:	dc28      	bgt.n	800bebe <refrigera+0xf9e>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 800be6c:	e038      	b.n	800bee0 <refrigera+0xfc0>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 800be6e:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 800be70:	4b89      	ldr	r3, [pc, #548]	@ (800c098 <refrigera+0x1178>)
 800be72:	791b      	ldrb	r3, [r3, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1bf      	bne.n	800bdf8 <refrigera+0xed8>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 800be78:	4b87      	ldr	r3, [pc, #540]	@ (800c098 <refrigera+0x1178>)
 800be7a:	795b      	ldrb	r3, [r3, #5]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1bd      	bne.n	800bdfc <refrigera+0xedc>
                   if(cntDefi_H != 1){ //cpw X,#1
 800be80:	4b83      	ldr	r3, [pc, #524]	@ (800c090 <refrigera+0x1170>)
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d133      	bne.n	800bef0 <refrigera+0xfd0>
chkTimeDefi_3s_01:
 800be88:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 800be8a:	f7fa fb05 	bl	8006498 <tdev_to_Word>
 800be8e:	0003      	movs	r3, r0
 800be90:	b29a      	uxth	r2, r3
 800be92:	4b7e      	ldr	r3, [pc, #504]	@ (800c08c <refrigera+0x116c>)
 800be94:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 800be96:	4b7d      	ldr	r3, [pc, #500]	@ (800c08c <refrigera+0x116c>)
 800be98:	881a      	ldrh	r2, [r3, #0]
 800be9a:	4b82      	ldr	r3, [pc, #520]	@ (800c0a4 <refrigera+0x1184>)
 800be9c:	881b      	ldrh	r3, [r3, #0]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	4b7a      	ldr	r3, [pc, #488]	@ (800c08c <refrigera+0x116c>)
 800bea4:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800bea6:	4b7e      	ldr	r3, [pc, #504]	@ (800c0a0 <refrigera+0x1180>)
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7fa fb0d 	bl	80064c8 <TwoByteInArrayToWord>
 800beae:	0003      	movs	r3, r0
 800beb0:	b21a      	sxth	r2, r3
 800beb2:	4b76      	ldr	r3, [pc, #472]	@ (800c08c <refrigera+0x116c>)
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	b21b      	sxth	r3, r3
 800beb8:	429a      	cmp	r2, r3
 800beba:	dd10      	ble.n	800bede <refrigera+0xfbe>
alarmDefi:
 800bebc:	e000      	b.n	800bec0 <refrigera+0xfa0>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 800bebe:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 800bec0:	4b75      	ldr	r3, [pc, #468]	@ (800c098 <refrigera+0x1178>)
 800bec2:	2201      	movs	r2, #1
 800bec4:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 800bec6:	4b78      	ldr	r3, [pc, #480]	@ (800c0a8 <refrigera+0x1188>)
 800bec8:	2200      	movs	r2, #0
 800beca:	801a      	strh	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 800becc:	4b76      	ldr	r3, [pc, #472]	@ (800c0a8 <refrigera+0x1188>)
 800bece:	881a      	ldrh	r2, [r3, #0]
 800bed0:	4b76      	ldr	r3, [pc, #472]	@ (800c0ac <refrigera+0x118c>)
 800bed2:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 800bed4:	e00d      	b.n	800bef2 <refrigera+0xfd2>
                	  goto noAlarmDefi;
 800bed6:	46c0      	nop			@ (mov r8, r8)
 800bed8:	e002      	b.n	800bee0 <refrigera+0xfc0>
                	  goto noAlarmDefi;
 800beda:	46c0      	nop			@ (mov r8, r8)
 800bedc:	e000      	b.n	800bee0 <refrigera+0xfc0>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 800bede:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 800bee0:	4b6d      	ldr	r3, [pc, #436]	@ (800c098 <refrigera+0x1178>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	719a      	strb	r2, [r3, #6]
 800bee6:	e004      	b.n	800bef2 <refrigera+0xfd2>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 800bee8:	46c0      	nop			@ (mov r8, r8)
 800beea:	e002      	b.n	800bef2 <refrigera+0xfd2>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 800beec:	46c0      	nop			@ (mov r8, r8)
 800beee:	e000      	b.n	800bef2 <refrigera+0xfd2>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 800bef0:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 800bef2:	f7fa fad1 	bl	8006498 <tdev_to_Word>
 800bef6:	0003      	movs	r3, r0
 800bef8:	b29a      	uxth	r2, r3
 800befa:	4b64      	ldr	r3, [pc, #400]	@ (800c08c <refrigera+0x116c>)
 800befc:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 800befe:	4b6c      	ldr	r3, [pc, #432]	@ (800c0b0 <refrigera+0x1190>)
 800bf00:	0018      	movs	r0, r3
 800bf02:	f7fa fae1 	bl	80064c8 <TwoByteInArrayToWord>
 800bf06:	0003      	movs	r3, r0
 800bf08:	b21a      	sxth	r2, r3
 800bf0a:	4b60      	ldr	r3, [pc, #384]	@ (800c08c <refrigera+0x116c>)
 800bf0c:	881b      	ldrh	r3, [r3, #0]
 800bf0e:	b21b      	sxth	r3, r3
 800bf10:	429a      	cmp	r2, r3
 800bf12:	dc02      	bgt.n	800bf1a <refrigera+0xffa>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 800bf14:	f7fa fb08 	bl	8006528 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 800bf18:	e058      	b.n	800bfcc <refrigera+0x10ac>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 800bf1a:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800bf1c:	4b59      	ldr	r3, [pc, #356]	@ (800c084 <refrigera+0x1164>)
 800bf1e:	2259      	movs	r2, #89	@ 0x59
 800bf20:	5c9b      	ldrb	r3, [r3, r2]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d03c      	beq.n	800bfa0 <refrigera+0x1080>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800bf26:	4b63      	ldr	r3, [pc, #396]	@ (800c0b4 <refrigera+0x1194>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	021b      	lsls	r3, r3, #8
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	4a62      	ldr	r2, [pc, #392]	@ (800c0b8 <refrigera+0x1198>)
 800bf30:	7812      	ldrb	r2, [r2, #0]
 800bf32:	189b      	adds	r3, r3, r2
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	4b55      	ldr	r3, [pc, #340]	@ (800c08c <refrigera+0x116c>)
 800bf38:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 800bf3a:	4b60      	ldr	r3, [pc, #384]	@ (800c0bc <refrigera+0x119c>)
 800bf3c:	785b      	ldrb	r3, [r3, #1]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d130      	bne.n	800bfa4 <refrigera+0x1084>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 800bf42:	4b5e      	ldr	r3, [pc, #376]	@ (800c0bc <refrigera+0x119c>)
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d12e      	bne.n	800bfa8 <refrigera+0x1088>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 800bf4a:	4b5d      	ldr	r3, [pc, #372]	@ (800c0c0 <refrigera+0x11a0>)
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	f7fa fabb 	bl	80064c8 <TwoByteInArrayToWord>
 800bf52:	0003      	movs	r3, r0
 800bf54:	b21a      	sxth	r2, r3
 800bf56:	4b4d      	ldr	r3, [pc, #308]	@ (800c08c <refrigera+0x116c>)
 800bf58:	881b      	ldrh	r3, [r3, #0]
 800bf5a:	b21b      	sxth	r3, r3
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	dd25      	ble.n	800bfac <refrigera+0x108c>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 800bf60:	4b58      	ldr	r3, [pc, #352]	@ (800c0c4 <refrigera+0x11a4>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	021b      	lsls	r3, r3, #8
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	4a57      	ldr	r2, [pc, #348]	@ (800c0c8 <refrigera+0x11a8>)
 800bf6a:	7812      	ldrb	r2, [r2, #0]
 800bf6c:	189b      	adds	r3, r3, r2
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	4b46      	ldr	r3, [pc, #280]	@ (800c08c <refrigera+0x116c>)
 800bf72:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 800bf74:	4b51      	ldr	r3, [pc, #324]	@ (800c0bc <refrigera+0x119c>)
 800bf76:	78db      	ldrb	r3, [r3, #3]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d119      	bne.n	800bfb0 <refrigera+0x1090>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 800bf7c:	4b4f      	ldr	r3, [pc, #316]	@ (800c0bc <refrigera+0x119c>)
 800bf7e:	789b      	ldrb	r3, [r3, #2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d117      	bne.n	800bfb4 <refrigera+0x1094>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 800bf84:	4b51      	ldr	r3, [pc, #324]	@ (800c0cc <refrigera+0x11ac>)
 800bf86:	0018      	movs	r0, r3
 800bf88:	f7fa fa9e 	bl	80064c8 <TwoByteInArrayToWord>
 800bf8c:	0003      	movs	r3, r0
 800bf8e:	b21a      	sxth	r2, r3
 800bf90:	4b3e      	ldr	r3, [pc, #248]	@ (800c08c <refrigera+0x116c>)
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	b21b      	sxth	r3, r3
 800bf96:	429a      	cmp	r2, r3
 800bf98:	dd01      	ble.n	800bf9e <refrigera+0x107e>
 800bf9a:	f7ff fa18 	bl	800b3ce <refrigera+0x4ae>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 800bf9e:	e00a      	b.n	800bfb6 <refrigera+0x1096>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 800bfa0:	46c0      	nop			@ (mov r8, r8)
 800bfa2:	e008      	b.n	800bfb6 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bfa4:	46c0      	nop			@ (mov r8, r8)
 800bfa6:	e006      	b.n	800bfb6 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bfa8:	46c0      	nop			@ (mov r8, r8)
 800bfaa:	e004      	b.n	800bfb6 <refrigera+0x1096>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 800bfac:	46c0      	nop			@ (mov r8, r8)
 800bfae:	e002      	b.n	800bfb6 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bfb0:	46c0      	nop			@ (mov r8, r8)
 800bfb2:	e000      	b.n	800bfb6 <refrigera+0x1096>
                	  goto noDeshXTemp;
 800bfb4:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 800bfb6:	f7fb f8a7 	bl	8007108 <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 800bfba:	4b45      	ldr	r3, [pc, #276]	@ (800c0d0 <refrigera+0x11b0>)
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	001a      	movs	r2, r3
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	d001      	beq.n	800bfca <refrigera+0x10aa>
 800bfc6:	f7ff fa04 	bl	800b3d2 <refrigera+0x4b2>
            	   goto control_j06;
 800bfca:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 800bfcc:	4b41      	ldr	r3, [pc, #260]	@ (800c0d4 <refrigera+0x11b4>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d108      	bne.n	800bfe6 <refrigera+0x10c6>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 800bfd4:	4b40      	ldr	r3, [pc, #256]	@ (800c0d8 <refrigera+0x11b8>)
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d007      	beq.n	800bfec <refrigera+0x10cc>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 800bfdc:	4b3e      	ldr	r3, [pc, #248]	@ (800c0d8 <refrigera+0x11b8>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 800bfe2:	f7ff f9f7 	bl	800b3d4 <refrigera+0x4b4>
					goto finctl; //jrne	finctl;
 800bfe6:	46c0      	nop			@ (mov r8, r8)
 800bfe8:	f7ff fa2b 	bl	800b442 <refrigera+0x522>
            		goto control_j07;
 800bfec:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 800bfee:	f7ff fa28 	bl	800b442 <refrigera+0x522>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 800bff2:	4b24      	ldr	r3, [pc, #144]	@ (800c084 <refrigera+0x1164>)
 800bff4:	2255      	movs	r2, #85	@ 0x55
 800bff6:	5c9b      	ldrb	r3, [r3, r2]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d103      	bne.n	800c004 <refrigera+0x10e4>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 800bffc:	4b37      	ldr	r3, [pc, #220]	@ (800c0dc <refrigera+0x11bc>)
 800bffe:	2201      	movs	r2, #1
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	e000      	b.n	800c006 <refrigera+0x10e6>
					goto deshie20;				/// No
 800c004:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 800c006:	4b1f      	ldr	r3, [pc, #124]	@ (800c084 <refrigera+0x1164>)
 800c008:	2255      	movs	r2, #85	@ 0x55
 800c00a:	5c9b      	ldrb	r3, [r3, r2]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d114      	bne.n	800c03a <refrigera+0x111a>
deshXvent:
 800c010:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800c012:	4b1c      	ldr	r3, [pc, #112]	@ (800c084 <refrigera+0x1164>)
 800c014:	225b      	movs	r2, #91	@ 0x5b
 800c016:	5c9b      	ldrb	r3, [r3, r2]
 800c018:	001a      	movs	r2, r3
 800c01a:	2302      	movs	r3, #2
 800c01c:	4013      	ands	r3, r2
 800c01e:	d104      	bne.n	800c02a <refrigera+0x110a>
				if(retvent != 0){ //tnz retvent
 800c020:	4b2f      	ldr	r3, [pc, #188]	@ (800c0e0 <refrigera+0x11c0>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10d      	bne.n	800c044 <refrigera+0x1124>
deshie24:
 800c028:	e000      	b.n	800c02c <refrigera+0x110c>
					goto deshie24;
 800c02a:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 800c02c:	4b2d      	ldr	r3, [pc, #180]	@ (800c0e4 <refrigera+0x11c4>)
 800c02e:	2201      	movs	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 800c032:	4b2d      	ldr	r3, [pc, #180]	@ (800c0e8 <refrigera+0x11c8>)
 800c034:	2201      	movs	r2, #1
 800c036:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 800c038:	e005      	b.n	800c046 <refrigera+0x1126>
					goto deshie25;				//;		/ No, acciona el deshielo
 800c03a:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 800c03c:	4b27      	ldr	r3, [pc, #156]	@ (800c0dc <refrigera+0x11bc>)
 800c03e:	2201      	movs	r2, #1
 800c040:	705a      	strb	r2, [r3, #1]
 800c042:	e000      	b.n	800c046 <refrigera+0x1126>
					goto deshie30; //jrne		deshie30;		/ No, espera
 800c044:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 800c046:	4b29      	ldr	r3, [pc, #164]	@ (800c0ec <refrigera+0x11cc>)
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 800c04c:	4b0d      	ldr	r3, [pc, #52]	@ (800c084 <refrigera+0x1164>)
 800c04e:	224c      	movs	r2, #76	@ 0x4c
 800c050:	5c9a      	ldrb	r2, [r3, r2]
 800c052:	4b27      	ldr	r3, [pc, #156]	@ (800c0f0 <refrigera+0x11d0>)
 800c054:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 800c056:	4b27      	ldr	r3, [pc, #156]	@ (800c0f4 <refrigera+0x11d4>)
 800c058:	881a      	ldrh	r2, [r3, #0]
 800c05a:	4b14      	ldr	r3, [pc, #80]	@ (800c0ac <refrigera+0x118c>)
 800c05c:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 800c05e:	f7fb f853 	bl	8007108 <buildmode>
				 if((0x13 & modo ) == 0){
 800c062:	4b1b      	ldr	r3, [pc, #108]	@ (800c0d0 <refrigera+0x11b0>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2213      	movs	r2, #19
 800c068:	4013      	ands	r3, r2
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d001      	beq.n	800c074 <refrigera+0x1154>
 800c070:	f7ff f985 	bl	800b37e <refrigera+0x45e>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 800c074:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 800c076:	46c0      	nop			@ (mov r8, r8)
 800c078:	f7ff f9e3 	bl	800b442 <refrigera+0x522>


main_refrigera:


}
 800c07c:	46c0      	nop			@ (mov r8, r8)
 800c07e:	46bd      	mov	sp, r7
 800c080:	b007      	add	sp, #28
 800c082:	bd90      	pop	{r4, r7, pc}
 800c084:	200000b8 	.word	0x200000b8
 800c088:	20000b54 	.word	0x20000b54
 800c08c:	200008d2 	.word	0x200008d2
 800c090:	20000c32 	.word	0x20000c32
 800c094:	20000c36 	.word	0x20000c36
 800c098:	20000b7c 	.word	0x20000b7c
 800c09c:	20000c34 	.word	0x20000c34
 800c0a0:	200000eb 	.word	0x200000eb
 800c0a4:	20000c50 	.word	0x20000c50
 800c0a8:	20000bb2 	.word	0x20000bb2
 800c0ac:	20000bb6 	.word	0x20000bb6
 800c0b0:	200000cb 	.word	0x200000cb
 800c0b4:	20000bac 	.word	0x20000bac
 800c0b8:	20000bad 	.word	0x20000bad
 800c0bc:	20000b84 	.word	0x20000b84
 800c0c0:	200000cf 	.word	0x200000cf
 800c0c4:	20000bae 	.word	0x20000bae
 800c0c8:	20000baf 	.word	0x20000baf
 800c0cc:	200000cd 	.word	0x200000cd
 800c0d0:	20000b50 	.word	0x20000b50
 800c0d4:	20000b67 	.word	0x20000b67
 800c0d8:	20000c4c 	.word	0x20000c4c
 800c0dc:	20000ba0 	.word	0x20000ba0
 800c0e0:	20000b66 	.word	0x20000b66
 800c0e4:	20000bdc 	.word	0x20000bdc
 800c0e8:	20000b8c 	.word	0x20000b8c
 800c0ec:	20000b51 	.word	0x20000b51
 800c0f0:	20000bc3 	.word	0x20000bc3
 800c0f4:	20000bb4 	.word	0x20000bb4

0800c0f8 <st_refri>:

void st_refri (void)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c128 <st_refri+0x30>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 800c102:	4b09      	ldr	r3, [pc, #36]	@ (800c128 <st_refri+0x30>)
 800c104:	2200      	movs	r2, #0
 800c106:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 800c108:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <st_refri+0x30>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 800c10e:	4b07      	ldr	r3, [pc, #28]	@ (800c12c <st_refri+0x34>)
 800c110:	2200      	movs	r2, #0
 800c112:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 800c114:	f7fa fa7a 	bl	800660c <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 800c118:	4b05      	ldr	r3, [pc, #20]	@ (800c130 <st_refri+0x38>)
 800c11a:	2202      	movs	r2, #2
 800c11c:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 800c11e:	f7fa fa03 	bl	8006528 <ldadaptivo>
}
 800c122:	46c0      	nop			@ (mov r8, r8)
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	20000ba0 	.word	0x20000ba0
 800c12c:	20000bdc 	.word	0x20000bdc
 800c130:	20000b94 	.word	0x20000b94

0800c134 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800c13a:	4b0f      	ldr	r3, [pc, #60]	@ (800c178 <HAL_MspInit+0x44>)
 800c13c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c13e:	4b0e      	ldr	r3, [pc, #56]	@ (800c178 <HAL_MspInit+0x44>)
 800c140:	2180      	movs	r1, #128	@ 0x80
 800c142:	0549      	lsls	r1, r1, #21
 800c144:	430a      	orrs	r2, r1
 800c146:	659a      	str	r2, [r3, #88]	@ 0x58
 800c148:	4b0b      	ldr	r3, [pc, #44]	@ (800c178 <HAL_MspInit+0x44>)
 800c14a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c14c:	2380      	movs	r3, #128	@ 0x80
 800c14e:	055b      	lsls	r3, r3, #21
 800c150:	4013      	ands	r3, r2
 800c152:	607b      	str	r3, [r7, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c156:	4b08      	ldr	r3, [pc, #32]	@ (800c178 <HAL_MspInit+0x44>)
 800c158:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c15a:	4b07      	ldr	r3, [pc, #28]	@ (800c178 <HAL_MspInit+0x44>)
 800c15c:	2101      	movs	r1, #1
 800c15e:	430a      	orrs	r2, r1
 800c160:	661a      	str	r2, [r3, #96]	@ 0x60
 800c162:	4b05      	ldr	r3, [pc, #20]	@ (800c178 <HAL_MspInit+0x44>)
 800c164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c166:	2201      	movs	r2, #1
 800c168:	4013      	ands	r3, r2
 800c16a:	603b      	str	r3, [r7, #0]
 800c16c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c16e:	46c0      	nop			@ (mov r8, r8)
 800c170:	46bd      	mov	sp, r7
 800c172:	b002      	add	sp, #8
 800c174:	bd80      	pop	{r7, pc}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	40021000 	.word	0x40021000

0800c17c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c17c:	b590      	push	{r4, r7, lr}
 800c17e:	b09b      	sub	sp, #108	@ 0x6c
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c184:	2354      	movs	r3, #84	@ 0x54
 800c186:	18fb      	adds	r3, r7, r3
 800c188:	0018      	movs	r0, r3
 800c18a:	2314      	movs	r3, #20
 800c18c:	001a      	movs	r2, r3
 800c18e:	2100      	movs	r1, #0
 800c190:	f00e fcc0 	bl	801ab14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c194:	2410      	movs	r4, #16
 800c196:	193b      	adds	r3, r7, r4
 800c198:	0018      	movs	r0, r3
 800c19a:	2344      	movs	r3, #68	@ 0x44
 800c19c:	001a      	movs	r2, r3
 800c19e:	2100      	movs	r1, #0
 800c1a0:	f00e fcb8 	bl	801ab14 <memset>
  if(hi2c->Instance==I2C1)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a50      	ldr	r2, [pc, #320]	@ (800c2ec <HAL_I2C_MspInit+0x170>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d000      	beq.n	800c1b0 <HAL_I2C_MspInit+0x34>
 800c1ae:	e099      	b.n	800c2e4 <HAL_I2C_MspInit+0x168>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800c1b0:	193b      	adds	r3, r7, r4
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800c1b6:	193b      	adds	r3, r7, r4
 800c1b8:	2280      	movs	r2, #128	@ 0x80
 800c1ba:	0192      	lsls	r2, r2, #6
 800c1bc:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c1be:	193b      	adds	r3, r7, r4
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	f00a f9d7 	bl	8016574 <HAL_RCCEx_PeriphCLKConfig>
 800c1c6:	1e03      	subs	r3, r0, #0
 800c1c8:	d001      	beq.n	800c1ce <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800c1ca:	f7fe faf1 	bl	800a7b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1ce:	4b48      	ldr	r3, [pc, #288]	@ (800c2f0 <HAL_I2C_MspInit+0x174>)
 800c1d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1d2:	4b47      	ldr	r3, [pc, #284]	@ (800c2f0 <HAL_I2C_MspInit+0x174>)
 800c1d4:	2102      	movs	r1, #2
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c1da:	4b45      	ldr	r3, [pc, #276]	@ (800c2f0 <HAL_I2C_MspInit+0x174>)
 800c1dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1de:	2202      	movs	r2, #2
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c1e6:	2154      	movs	r1, #84	@ 0x54
 800c1e8:	187b      	adds	r3, r7, r1
 800c1ea:	22c0      	movs	r2, #192	@ 0xc0
 800c1ec:	0092      	lsls	r2, r2, #2
 800c1ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c1f0:	187b      	adds	r3, r7, r1
 800c1f2:	2212      	movs	r2, #18
 800c1f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1f6:	187b      	adds	r3, r7, r1
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1fc:	187b      	adds	r3, r7, r1
 800c1fe:	2203      	movs	r2, #3
 800c200:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c202:	187b      	adds	r3, r7, r1
 800c204:	2204      	movs	r2, #4
 800c206:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c208:	187b      	adds	r3, r7, r1
 800c20a:	4a3a      	ldr	r2, [pc, #232]	@ (800c2f4 <HAL_I2C_MspInit+0x178>)
 800c20c:	0019      	movs	r1, r3
 800c20e:	0010      	movs	r0, r2
 800c210:	f006 fe12 	bl	8012e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c214:	4b36      	ldr	r3, [pc, #216]	@ (800c2f0 <HAL_I2C_MspInit+0x174>)
 800c216:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c218:	4b35      	ldr	r3, [pc, #212]	@ (800c2f0 <HAL_I2C_MspInit+0x174>)
 800c21a:	2180      	movs	r1, #128	@ 0x80
 800c21c:	0389      	lsls	r1, r1, #14
 800c21e:	430a      	orrs	r2, r1
 800c220:	659a      	str	r2, [r3, #88]	@ 0x58
 800c222:	4b33      	ldr	r3, [pc, #204]	@ (800c2f0 <HAL_I2C_MspInit+0x174>)
 800c224:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c226:	2380      	movs	r3, #128	@ 0x80
 800c228:	039b      	lsls	r3, r3, #14
 800c22a:	4013      	ands	r3, r2
 800c22c:	60bb      	str	r3, [r7, #8]
 800c22e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800c230:	4b31      	ldr	r3, [pc, #196]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c232:	4a32      	ldr	r2, [pc, #200]	@ (800c2fc <HAL_I2C_MspInit+0x180>)
 800c234:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800c236:	4b30      	ldr	r3, [pc, #192]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c238:	2209      	movs	r2, #9
 800c23a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c23c:	4b2e      	ldr	r3, [pc, #184]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c23e:	2200      	movs	r2, #0
 800c240:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c242:	4b2d      	ldr	r3, [pc, #180]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c244:	2200      	movs	r2, #0
 800c246:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c248:	4b2b      	ldr	r3, [pc, #172]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c24a:	2280      	movs	r2, #128	@ 0x80
 800c24c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c24e:	4b2a      	ldr	r3, [pc, #168]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c250:	2200      	movs	r2, #0
 800c252:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c254:	4b28      	ldr	r3, [pc, #160]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c256:	2200      	movs	r2, #0
 800c258:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c25a:	4b27      	ldr	r3, [pc, #156]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c260:	4b25      	ldr	r3, [pc, #148]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c262:	2200      	movs	r2, #0
 800c264:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c266:	4b24      	ldr	r3, [pc, #144]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c268:	0018      	movs	r0, r3
 800c26a:	f006 f839 	bl	80122e0 <HAL_DMA_Init>
 800c26e:	1e03      	subs	r3, r0, #0
 800c270:	d001      	beq.n	800c276 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800c272:	f7fe fa9d 	bl	800a7b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a1f      	ldr	r2, [pc, #124]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c27a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c27c:	4b1e      	ldr	r3, [pc, #120]	@ (800c2f8 <HAL_I2C_MspInit+0x17c>)
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800c282:	4b1f      	ldr	r3, [pc, #124]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c284:	4a1f      	ldr	r2, [pc, #124]	@ (800c304 <HAL_I2C_MspInit+0x188>)
 800c286:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800c288:	4b1d      	ldr	r3, [pc, #116]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c28a:	220a      	movs	r2, #10
 800c28c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c28e:	4b1c      	ldr	r3, [pc, #112]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c290:	2210      	movs	r2, #16
 800c292:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c294:	4b1a      	ldr	r3, [pc, #104]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c296:	2200      	movs	r2, #0
 800c298:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c29a:	4b19      	ldr	r3, [pc, #100]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c29c:	2280      	movs	r2, #128	@ 0x80
 800c29e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c2a0:	4b17      	ldr	r3, [pc, #92]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c2a6:	4b16      	ldr	r3, [pc, #88]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c2ac:	4b14      	ldr	r3, [pc, #80]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c2b2:	4b13      	ldr	r3, [pc, #76]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c2b8:	4b11      	ldr	r3, [pc, #68]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f006 f810 	bl	80122e0 <HAL_DMA_Init>
 800c2c0:	1e03      	subs	r3, r0, #0
 800c2c2:	d001      	beq.n	800c2c8 <HAL_I2C_MspInit+0x14c>
    {
      Error_Handler();
 800c2c4:	f7fe fa74 	bl	800a7b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a0d      	ldr	r2, [pc, #52]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c2cc:	639a      	str	r2, [r3, #56]	@ 0x38
 800c2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c300 <HAL_I2C_MspInit+0x184>)
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	2017      	movs	r0, #23
 800c2da:	f005 ffbf 	bl	801225c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c2de:	2017      	movs	r0, #23
 800c2e0:	f005 ffd1 	bl	8012286 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800c2e4:	46c0      	nop			@ (mov r8, r8)
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b01b      	add	sp, #108	@ 0x6c
 800c2ea:	bd90      	pop	{r4, r7, pc}
 800c2ec:	40005400 	.word	0x40005400
 800c2f0:	40021000 	.word	0x40021000
 800c2f4:	50000400 	.word	0x50000400
 800c2f8:	20000440 	.word	0x20000440
 800c2fc:	40020080 	.word	0x40020080
 800c300:	200004a0 	.word	0x200004a0
 800c304:	4002006c 	.word	0x4002006c

0800c308 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a13      	ldr	r2, [pc, #76]	@ (800c364 <HAL_I2C_MspDeInit+0x5c>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d120      	bne.n	800c35c <HAL_I2C_MspDeInit+0x54>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800c31a:	4b13      	ldr	r3, [pc, #76]	@ (800c368 <HAL_I2C_MspDeInit+0x60>)
 800c31c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c31e:	4b12      	ldr	r3, [pc, #72]	@ (800c368 <HAL_I2C_MspDeInit+0x60>)
 800c320:	4912      	ldr	r1, [pc, #72]	@ (800c36c <HAL_I2C_MspDeInit+0x64>)
 800c322:	400a      	ands	r2, r1
 800c324:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800c326:	2380      	movs	r3, #128	@ 0x80
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	4a11      	ldr	r2, [pc, #68]	@ (800c370 <HAL_I2C_MspDeInit+0x68>)
 800c32c:	0019      	movs	r1, r3
 800c32e:	0010      	movs	r0, r2
 800c330:	f006 fef6 	bl	8013120 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800c334:	2380      	movs	r3, #128	@ 0x80
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4a0d      	ldr	r2, [pc, #52]	@ (800c370 <HAL_I2C_MspDeInit+0x68>)
 800c33a:	0019      	movs	r1, r3
 800c33c:	0010      	movs	r0, r2
 800c33e:	f006 feef 	bl	8013120 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c346:	0018      	movs	r0, r3
 800c348:	f006 f876 	bl	8012438 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c350:	0018      	movs	r0, r3
 800c352:	f006 f871 	bl	8012438 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800c356:	2017      	movs	r0, #23
 800c358:	f005 ffa5 	bl	80122a6 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800c35c:	46c0      	nop			@ (mov r8, r8)
 800c35e:	46bd      	mov	sp, r7
 800c360:	b002      	add	sp, #8
 800c362:	bd80      	pop	{r7, pc}
 800c364:	40005400 	.word	0x40005400
 800c368:	40021000 	.word	0x40021000
 800c36c:	ffdfffff 	.word	0xffdfffff
 800c370:	50000400 	.word	0x50000400

0800c374 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b095      	sub	sp, #84	@ 0x54
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c37c:	240c      	movs	r4, #12
 800c37e:	193b      	adds	r3, r7, r4
 800c380:	0018      	movs	r0, r3
 800c382:	2344      	movs	r3, #68	@ 0x44
 800c384:	001a      	movs	r2, r3
 800c386:	2100      	movs	r1, #0
 800c388:	f00e fbc4 	bl	801ab14 <memset>
  if(hrtc->Instance==RTC)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a1a      	ldr	r2, [pc, #104]	@ (800c3fc <HAL_RTC_MspInit+0x88>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d12e      	bne.n	800c3f4 <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c396:	193b      	adds	r3, r7, r4
 800c398:	2280      	movs	r2, #128	@ 0x80
 800c39a:	0212      	lsls	r2, r2, #8
 800c39c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c39e:	193b      	adds	r3, r7, r4
 800c3a0:	2280      	movs	r2, #128	@ 0x80
 800c3a2:	0052      	lsls	r2, r2, #1
 800c3a4:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c3a6:	193b      	adds	r3, r7, r4
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	f00a f8e3 	bl	8016574 <HAL_RCCEx_PeriphCLKConfig>
 800c3ae:	1e03      	subs	r3, r0, #0
 800c3b0:	d001      	beq.n	800c3b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800c3b2:	f7fe f9fd 	bl	800a7b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c3b6:	4a12      	ldr	r2, [pc, #72]	@ (800c400 <HAL_RTC_MspInit+0x8c>)
 800c3b8:	2390      	movs	r3, #144	@ 0x90
 800c3ba:	58d3      	ldr	r3, [r2, r3]
 800c3bc:	4910      	ldr	r1, [pc, #64]	@ (800c400 <HAL_RTC_MspInit+0x8c>)
 800c3be:	2280      	movs	r2, #128	@ 0x80
 800c3c0:	0212      	lsls	r2, r2, #8
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	2290      	movs	r2, #144	@ 0x90
 800c3c6:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800c3c8:	4b0d      	ldr	r3, [pc, #52]	@ (800c400 <HAL_RTC_MspInit+0x8c>)
 800c3ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c400 <HAL_RTC_MspInit+0x8c>)
 800c3ce:	2180      	movs	r1, #128	@ 0x80
 800c3d0:	00c9      	lsls	r1, r1, #3
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	659a      	str	r2, [r3, #88]	@ 0x58
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c400 <HAL_RTC_MspInit+0x8c>)
 800c3d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c3da:	2380      	movs	r3, #128	@ 0x80
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	4013      	ands	r3, r2
 800c3e0:	60bb      	str	r3, [r7, #8]
 800c3e2:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	2002      	movs	r0, #2
 800c3ea:	f005 ff37 	bl	801225c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800c3ee:	2002      	movs	r0, #2
 800c3f0:	f005 ff49 	bl	8012286 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800c3f4:	46c0      	nop			@ (mov r8, r8)
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	b015      	add	sp, #84	@ 0x54
 800c3fa:	bd90      	pop	{r4, r7, pc}
 800c3fc:	40002800 	.word	0x40002800
 800c400:	40021000 	.word	0x40021000

0800c404 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c404:	b590      	push	{r4, r7, lr}
 800c406:	b097      	sub	sp, #92	@ 0x5c
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c40c:	2414      	movs	r4, #20
 800c40e:	193b      	adds	r3, r7, r4
 800c410:	0018      	movs	r0, r3
 800c412:	2344      	movs	r3, #68	@ 0x44
 800c414:	001a      	movs	r2, r3
 800c416:	2100      	movs	r1, #0
 800c418:	f00e fb7c 	bl	801ab14 <memset>
  if(htim_base->Instance==TIM1)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a23      	ldr	r2, [pc, #140]	@ (800c4b0 <HAL_TIM_Base_MspInit+0xac>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d11d      	bne.n	800c462 <HAL_TIM_Base_MspInit+0x5e>

    /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800c426:	193b      	adds	r3, r7, r4
 800c428:	2280      	movs	r2, #128	@ 0x80
 800c42a:	00d2      	lsls	r2, r2, #3
 800c42c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800c42e:	193b      	adds	r3, r7, r4
 800c430:	2200      	movs	r2, #0
 800c432:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c434:	193b      	adds	r3, r7, r4
 800c436:	0018      	movs	r0, r3
 800c438:	f00a f89c 	bl	8016574 <HAL_RCCEx_PeriphCLKConfig>
 800c43c:	1e03      	subs	r3, r0, #0
 800c43e:	d001      	beq.n	800c444 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800c440:	f7fe f9b6 	bl	800a7b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c444:	4b1b      	ldr	r3, [pc, #108]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c446:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c448:	4b1a      	ldr	r3, [pc, #104]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c44a:	2180      	movs	r1, #128	@ 0x80
 800c44c:	0109      	lsls	r1, r1, #4
 800c44e:	430a      	orrs	r2, r1
 800c450:	661a      	str	r2, [r3, #96]	@ 0x60
 800c452:	4b18      	ldr	r3, [pc, #96]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c454:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c456:	2380      	movs	r3, #128	@ 0x80
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	4013      	ands	r3, r2
 800c45c:	613b      	str	r3, [r7, #16]
 800c45e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800c460:	e022      	b.n	800c4a8 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM3)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a14      	ldr	r2, [pc, #80]	@ (800c4b8 <HAL_TIM_Base_MspInit+0xb4>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d10c      	bne.n	800c486 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c46c:	4b11      	ldr	r3, [pc, #68]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c46e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c470:	4b10      	ldr	r3, [pc, #64]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c472:	2102      	movs	r1, #2
 800c474:	430a      	orrs	r2, r1
 800c476:	659a      	str	r2, [r3, #88]	@ 0x58
 800c478:	4b0e      	ldr	r3, [pc, #56]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c47a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c47c:	2202      	movs	r2, #2
 800c47e:	4013      	ands	r3, r2
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	68fb      	ldr	r3, [r7, #12]
}
 800c484:	e010      	b.n	800c4a8 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM6)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a0c      	ldr	r2, [pc, #48]	@ (800c4bc <HAL_TIM_Base_MspInit+0xb8>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d10b      	bne.n	800c4a8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c490:	4b08      	ldr	r3, [pc, #32]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c492:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c494:	4b07      	ldr	r3, [pc, #28]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c496:	2110      	movs	r1, #16
 800c498:	430a      	orrs	r2, r1
 800c49a:	659a      	str	r2, [r3, #88]	@ 0x58
 800c49c:	4b05      	ldr	r3, [pc, #20]	@ (800c4b4 <HAL_TIM_Base_MspInit+0xb0>)
 800c49e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4a0:	2210      	movs	r2, #16
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	60bb      	str	r3, [r7, #8]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
}
 800c4a8:	46c0      	nop			@ (mov r8, r8)
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	b017      	add	sp, #92	@ 0x5c
 800c4ae:	bd90      	pop	{r4, r7, pc}
 800c4b0:	40012c00 	.word	0x40012c00
 800c4b4:	40021000 	.word	0x40021000
 800c4b8:	40000400 	.word	0x40000400
 800c4bc:	40001000 	.word	0x40001000

0800c4c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c4c0:	b590      	push	{r4, r7, lr}
 800c4c2:	b08b      	sub	sp, #44	@ 0x2c
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4c8:	2414      	movs	r4, #20
 800c4ca:	193b      	adds	r3, r7, r4
 800c4cc:	0018      	movs	r0, r3
 800c4ce:	2314      	movs	r3, #20
 800c4d0:	001a      	movs	r2, r3
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f00e fb1e 	bl	801ab14 <memset>
  if(htim->Instance==TIM1)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a29      	ldr	r2, [pc, #164]	@ (800c584 <HAL_TIM_MspPostInit+0xc4>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d124      	bne.n	800c52c <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4e2:	4b29      	ldr	r3, [pc, #164]	@ (800c588 <HAL_TIM_MspPostInit+0xc8>)
 800c4e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4e6:	4b28      	ldr	r3, [pc, #160]	@ (800c588 <HAL_TIM_MspPostInit+0xc8>)
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	430a      	orrs	r2, r1
 800c4ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c4ee:	4b26      	ldr	r3, [pc, #152]	@ (800c588 <HAL_TIM_MspPostInit+0xc8>)
 800c4f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c4fa:	193b      	adds	r3, r7, r4
 800c4fc:	2280      	movs	r2, #128	@ 0x80
 800c4fe:	00d2      	lsls	r2, r2, #3
 800c500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c502:	0021      	movs	r1, r4
 800c504:	187b      	adds	r3, r7, r1
 800c506:	2202      	movs	r2, #2
 800c508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c50a:	187b      	adds	r3, r7, r1
 800c50c:	2200      	movs	r2, #0
 800c50e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c510:	187b      	adds	r3, r7, r1
 800c512:	2200      	movs	r2, #0
 800c514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c516:	187b      	adds	r3, r7, r1
 800c518:	2201      	movs	r2, #1
 800c51a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c51c:	187a      	adds	r2, r7, r1
 800c51e:	23a0      	movs	r3, #160	@ 0xa0
 800c520:	05db      	lsls	r3, r3, #23
 800c522:	0011      	movs	r1, r2
 800c524:	0018      	movs	r0, r3
 800c526:	f006 fc87 	bl	8012e38 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c52a:	e026      	b.n	800c57a <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a16      	ldr	r2, [pc, #88]	@ (800c58c <HAL_TIM_MspPostInit+0xcc>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d121      	bne.n	800c57a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c536:	4b14      	ldr	r3, [pc, #80]	@ (800c588 <HAL_TIM_MspPostInit+0xc8>)
 800c538:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c53a:	4b13      	ldr	r3, [pc, #76]	@ (800c588 <HAL_TIM_MspPostInit+0xc8>)
 800c53c:	2104      	movs	r1, #4
 800c53e:	430a      	orrs	r2, r1
 800c540:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c542:	4b11      	ldr	r3, [pc, #68]	@ (800c588 <HAL_TIM_MspPostInit+0xc8>)
 800c544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c546:	2204      	movs	r2, #4
 800c548:	4013      	ands	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c54e:	2114      	movs	r1, #20
 800c550:	187b      	adds	r3, r7, r1
 800c552:	2280      	movs	r2, #128	@ 0x80
 800c554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c556:	187b      	adds	r3, r7, r1
 800c558:	2202      	movs	r2, #2
 800c55a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c55c:	187b      	adds	r3, r7, r1
 800c55e:	2200      	movs	r2, #0
 800c560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c562:	187b      	adds	r3, r7, r1
 800c564:	2200      	movs	r2, #0
 800c566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c568:	187b      	adds	r3, r7, r1
 800c56a:	2202      	movs	r2, #2
 800c56c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c56e:	187b      	adds	r3, r7, r1
 800c570:	4a07      	ldr	r2, [pc, #28]	@ (800c590 <HAL_TIM_MspPostInit+0xd0>)
 800c572:	0019      	movs	r1, r3
 800c574:	0010      	movs	r0, r2
 800c576:	f006 fc5f 	bl	8012e38 <HAL_GPIO_Init>
}
 800c57a:	46c0      	nop			@ (mov r8, r8)
 800c57c:	46bd      	mov	sp, r7
 800c57e:	b00b      	add	sp, #44	@ 0x2c
 800c580:	bd90      	pop	{r4, r7, pc}
 800c582:	46c0      	nop			@ (mov r8, r8)
 800c584:	40012c00 	.word	0x40012c00
 800c588:	40021000 	.word	0x40021000
 800c58c:	40000400 	.word	0x40000400
 800c590:	50000800 	.word	0x50000800

0800c594 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c594:	b590      	push	{r4, r7, lr}
 800c596:	b09d      	sub	sp, #116	@ 0x74
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c59c:	235c      	movs	r3, #92	@ 0x5c
 800c59e:	18fb      	adds	r3, r7, r3
 800c5a0:	0018      	movs	r0, r3
 800c5a2:	2314      	movs	r3, #20
 800c5a4:	001a      	movs	r2, r3
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	f00e fab4 	bl	801ab14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c5ac:	2418      	movs	r4, #24
 800c5ae:	193b      	adds	r3, r7, r4
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	2344      	movs	r3, #68	@ 0x44
 800c5b4:	001a      	movs	r2, r3
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	f00e faac 	bl	801ab14 <memset>
  if(huart->Instance==USART2)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4aa0      	ldr	r2, [pc, #640]	@ (800c844 <HAL_UART_MspInit+0x2b0>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d000      	beq.n	800c5c8 <HAL_UART_MspInit+0x34>
 800c5c6:	e09a      	b.n	800c6fe <HAL_UART_MspInit+0x16a>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c5c8:	193b      	adds	r3, r7, r4
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c5ce:	193b      	adds	r3, r7, r4
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c5d4:	193b      	adds	r3, r7, r4
 800c5d6:	0018      	movs	r0, r3
 800c5d8:	f009 ffcc 	bl	8016574 <HAL_RCCEx_PeriphCLKConfig>
 800c5dc:	1e03      	subs	r3, r0, #0
 800c5de:	d001      	beq.n	800c5e4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800c5e0:	f7fe f8e6 	bl	800a7b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c5e4:	4b98      	ldr	r3, [pc, #608]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c5e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c5e8:	4b97      	ldr	r3, [pc, #604]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c5ea:	2180      	movs	r1, #128	@ 0x80
 800c5ec:	0289      	lsls	r1, r1, #10
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	659a      	str	r2, [r3, #88]	@ 0x58
 800c5f2:	4b95      	ldr	r3, [pc, #596]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c5f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c5f6:	2380      	movs	r3, #128	@ 0x80
 800c5f8:	029b      	lsls	r3, r3, #10
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	617b      	str	r3, [r7, #20]
 800c5fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c600:	4b91      	ldr	r3, [pc, #580]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c604:	4b90      	ldr	r3, [pc, #576]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c606:	2101      	movs	r1, #1
 800c608:	430a      	orrs	r2, r1
 800c60a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c60c:	4b8e      	ldr	r3, [pc, #568]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c60e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c610:	2201      	movs	r2, #1
 800c612:	4013      	ands	r3, r2
 800c614:	613b      	str	r3, [r7, #16]
 800c616:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c618:	215c      	movs	r1, #92	@ 0x5c
 800c61a:	187b      	adds	r3, r7, r1
 800c61c:	220c      	movs	r2, #12
 800c61e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c620:	187b      	adds	r3, r7, r1
 800c622:	2202      	movs	r2, #2
 800c624:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c626:	187b      	adds	r3, r7, r1
 800c628:	2200      	movs	r2, #0
 800c62a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c62c:	187b      	adds	r3, r7, r1
 800c62e:	2200      	movs	r2, #0
 800c630:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c632:	187b      	adds	r3, r7, r1
 800c634:	2207      	movs	r2, #7
 800c636:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c638:	187a      	adds	r2, r7, r1
 800c63a:	23a0      	movs	r3, #160	@ 0xa0
 800c63c:	05db      	lsls	r3, r3, #23
 800c63e:	0011      	movs	r1, r2
 800c640:	0018      	movs	r0, r3
 800c642:	f006 fbf9 	bl	8012e38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800c646:	4b81      	ldr	r3, [pc, #516]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c648:	4a81      	ldr	r2, [pc, #516]	@ (800c850 <HAL_UART_MspInit+0x2bc>)
 800c64a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800c64c:	4b7f      	ldr	r3, [pc, #508]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c64e:	2247      	movs	r2, #71	@ 0x47
 800c650:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c652:	4b7e      	ldr	r3, [pc, #504]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c654:	2200      	movs	r2, #0
 800c656:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c658:	4b7c      	ldr	r3, [pc, #496]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c65e:	4b7b      	ldr	r3, [pc, #492]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c660:	2280      	movs	r2, #128	@ 0x80
 800c662:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c664:	4b79      	ldr	r3, [pc, #484]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c666:	2200      	movs	r2, #0
 800c668:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c66a:	4b78      	ldr	r3, [pc, #480]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800c670:	4b76      	ldr	r3, [pc, #472]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c672:	2200      	movs	r2, #0
 800c674:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c676:	4b75      	ldr	r3, [pc, #468]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c678:	2200      	movs	r2, #0
 800c67a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c67c:	4b73      	ldr	r3, [pc, #460]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c67e:	0018      	movs	r0, r3
 800c680:	f005 fe2e 	bl	80122e0 <HAL_DMA_Init>
 800c684:	1e03      	subs	r3, r0, #0
 800c686:	d001      	beq.n	800c68c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800c688:	f7fe f892 	bl	800a7b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2180      	movs	r1, #128	@ 0x80
 800c690:	4a6e      	ldr	r2, [pc, #440]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c692:	505a      	str	r2, [r3, r1]
 800c694:	4b6d      	ldr	r3, [pc, #436]	@ (800c84c <HAL_UART_MspInit+0x2b8>)
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800c69a:	4b6e      	ldr	r3, [pc, #440]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c69c:	4a6e      	ldr	r2, [pc, #440]	@ (800c858 <HAL_UART_MspInit+0x2c4>)
 800c69e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800c6a0:	4b6c      	ldr	r3, [pc, #432]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6a2:	2248      	movs	r2, #72	@ 0x48
 800c6a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c6a6:	4b6b      	ldr	r3, [pc, #428]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6a8:	2210      	movs	r2, #16
 800c6aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c6ac:	4b69      	ldr	r3, [pc, #420]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c6b2:	4b68      	ldr	r3, [pc, #416]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6b4:	2280      	movs	r2, #128	@ 0x80
 800c6b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c6b8:	4b66      	ldr	r3, [pc, #408]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c6be:	4b65      	ldr	r3, [pc, #404]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800c6c4:	4b63      	ldr	r3, [pc, #396]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c6ca:	4b62      	ldr	r3, [pc, #392]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800c6d0:	4b60      	ldr	r3, [pc, #384]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6d2:	0018      	movs	r0, r3
 800c6d4:	f005 fe04 	bl	80122e0 <HAL_DMA_Init>
 800c6d8:	1e03      	subs	r3, r0, #0
 800c6da:	d001      	beq.n	800c6e0 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 800c6dc:	f7fe f868 	bl	800a7b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a5c      	ldr	r2, [pc, #368]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6e4:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c6e6:	4b5b      	ldr	r3, [pc, #364]	@ (800c854 <HAL_UART_MspInit+0x2c0>)
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	201c      	movs	r0, #28
 800c6f2:	f005 fdb3 	bl	801225c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800c6f6:	201c      	movs	r0, #28
 800c6f8:	f005 fdc5 	bl	8012286 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART4_MspInit 1 */

    /* USER CODE END USART4_MspInit 1 */
  }

}
 800c6fc:	e09e      	b.n	800c83c <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a56      	ldr	r2, [pc, #344]	@ (800c85c <HAL_UART_MspInit+0x2c8>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d000      	beq.n	800c70a <HAL_UART_MspInit+0x176>
 800c708:	e098      	b.n	800c83c <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 800c70a:	2118      	movs	r1, #24
 800c70c:	187b      	adds	r3, r7, r1
 800c70e:	2280      	movs	r2, #128	@ 0x80
 800c710:	0292      	lsls	r2, r2, #10
 800c712:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c714:	187b      	adds	r3, r7, r1
 800c716:	0018      	movs	r0, r3
 800c718:	f009 ff2c 	bl	8016574 <HAL_RCCEx_PeriphCLKConfig>
 800c71c:	1e03      	subs	r3, r0, #0
 800c71e:	d001      	beq.n	800c724 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800c720:	f7fe f846 	bl	800a7b0 <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 800c724:	4b48      	ldr	r3, [pc, #288]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c726:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c728:	4b47      	ldr	r3, [pc, #284]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c72a:	2180      	movs	r1, #128	@ 0x80
 800c72c:	0309      	lsls	r1, r1, #12
 800c72e:	430a      	orrs	r2, r1
 800c730:	659a      	str	r2, [r3, #88]	@ 0x58
 800c732:	4b45      	ldr	r3, [pc, #276]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c734:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c736:	2380      	movs	r3, #128	@ 0x80
 800c738:	031b      	lsls	r3, r3, #12
 800c73a:	4013      	ands	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c740:	4b41      	ldr	r3, [pc, #260]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c744:	4b40      	ldr	r3, [pc, #256]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c746:	2101      	movs	r1, #1
 800c748:	430a      	orrs	r2, r1
 800c74a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c74c:	4b3e      	ldr	r3, [pc, #248]	@ (800c848 <HAL_UART_MspInit+0x2b4>)
 800c74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c750:	2201      	movs	r2, #1
 800c752:	4013      	ands	r3, r2
 800c754:	60bb      	str	r3, [r7, #8]
 800c756:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c758:	215c      	movs	r1, #92	@ 0x5c
 800c75a:	187b      	adds	r3, r7, r1
 800c75c:	2203      	movs	r2, #3
 800c75e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c760:	187b      	adds	r3, r7, r1
 800c762:	2202      	movs	r2, #2
 800c764:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c766:	187b      	adds	r3, r7, r1
 800c768:	2200      	movs	r2, #0
 800c76a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c76c:	187b      	adds	r3, r7, r1
 800c76e:	2200      	movs	r2, #0
 800c770:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 800c772:	187b      	adds	r3, r7, r1
 800c774:	2208      	movs	r2, #8
 800c776:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c778:	187a      	adds	r2, r7, r1
 800c77a:	23a0      	movs	r3, #160	@ 0xa0
 800c77c:	05db      	lsls	r3, r3, #23
 800c77e:	0011      	movs	r1, r2
 800c780:	0018      	movs	r0, r3
 800c782:	f006 fb59 	bl	8012e38 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800c786:	4b36      	ldr	r3, [pc, #216]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c788:	4a36      	ldr	r2, [pc, #216]	@ (800c864 <HAL_UART_MspInit+0x2d0>)
 800c78a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800c78c:	4b34      	ldr	r3, [pc, #208]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c78e:	224b      	movs	r2, #75	@ 0x4b
 800c790:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c792:	4b33      	ldr	r3, [pc, #204]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c794:	2200      	movs	r2, #0
 800c796:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c798:	4b31      	ldr	r3, [pc, #196]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c79e:	4b30      	ldr	r3, [pc, #192]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7a0:	2280      	movs	r2, #128	@ 0x80
 800c7a2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c7a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c7aa:	4b2d      	ldr	r3, [pc, #180]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800c7b0:	4b2b      	ldr	r3, [pc, #172]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c7b6:	4b2a      	ldr	r3, [pc, #168]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800c7bc:	4b28      	ldr	r3, [pc, #160]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7be:	0018      	movs	r0, r3
 800c7c0:	f005 fd8e 	bl	80122e0 <HAL_DMA_Init>
 800c7c4:	1e03      	subs	r3, r0, #0
 800c7c6:	d001      	beq.n	800c7cc <HAL_UART_MspInit+0x238>
      Error_Handler();
 800c7c8:	f7fd fff2 	bl	800a7b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2180      	movs	r1, #128	@ 0x80
 800c7d0:	4a23      	ldr	r2, [pc, #140]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7d2:	505a      	str	r2, [r3, r1]
 800c7d4:	4b22      	ldr	r3, [pc, #136]	@ (800c860 <HAL_UART_MspInit+0x2cc>)
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 800c7da:	4b23      	ldr	r3, [pc, #140]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c7dc:	4a23      	ldr	r2, [pc, #140]	@ (800c86c <HAL_UART_MspInit+0x2d8>)
 800c7de:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800c7e0:	4b21      	ldr	r3, [pc, #132]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c7e2:	224c      	movs	r2, #76	@ 0x4c
 800c7e4:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c7e6:	4b20      	ldr	r3, [pc, #128]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c7e8:	2210      	movs	r2, #16
 800c7ea:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c7ec:	4b1e      	ldr	r3, [pc, #120]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c7f4:	2280      	movs	r2, #128	@ 0x80
 800c7f6:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c800:	2200      	movs	r2, #0
 800c802:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800c804:	4b18      	ldr	r3, [pc, #96]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c806:	2200      	movs	r2, #0
 800c808:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c80a:	4b17      	ldr	r3, [pc, #92]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800c810:	4b15      	ldr	r3, [pc, #84]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c812:	0018      	movs	r0, r3
 800c814:	f005 fd64 	bl	80122e0 <HAL_DMA_Init>
 800c818:	1e03      	subs	r3, r0, #0
 800c81a:	d001      	beq.n	800c820 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 800c81c:	f7fd ffc8 	bl	800a7b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a11      	ldr	r2, [pc, #68]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c824:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c826:	4b10      	ldr	r3, [pc, #64]	@ (800c868 <HAL_UART_MspInit+0x2d4>)
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 800c82c:	2200      	movs	r2, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	201e      	movs	r0, #30
 800c832:	f005 fd13 	bl	801225c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 800c836:	201e      	movs	r0, #30
 800c838:	f005 fd25 	bl	8012286 <HAL_NVIC_EnableIRQ>
}
 800c83c:	46c0      	nop			@ (mov r8, r8)
 800c83e:	46bd      	mov	sp, r7
 800c840:	b01d      	add	sp, #116	@ 0x74
 800c842:	bd90      	pop	{r4, r7, pc}
 800c844:	40004400 	.word	0x40004400
 800c848:	40021000 	.word	0x40021000
 800c84c:	20000750 	.word	0x20000750
 800c850:	40020058 	.word	0x40020058
 800c854:	200007b0 	.word	0x200007b0
 800c858:	40020044 	.word	0x40020044
 800c85c:	40004c00 	.word	0x40004c00
 800c860:	20000810 	.word	0x20000810
 800c864:	4002001c 	.word	0x4002001c
 800c868:	20000870 	.word	0x20000870
 800c86c:	40020030 	.word	0x40020030

0800c870 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a20      	ldr	r2, [pc, #128]	@ (800c900 <HAL_UART_MspDeInit+0x90>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d11a      	bne.n	800c8b8 <HAL_UART_MspDeInit+0x48>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800c882:	4b20      	ldr	r3, [pc, #128]	@ (800c904 <HAL_UART_MspDeInit+0x94>)
 800c884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c886:	4b1f      	ldr	r3, [pc, #124]	@ (800c904 <HAL_UART_MspDeInit+0x94>)
 800c888:	491f      	ldr	r1, [pc, #124]	@ (800c908 <HAL_UART_MspDeInit+0x98>)
 800c88a:	400a      	ands	r2, r1
 800c88c:	659a      	str	r2, [r3, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800c88e:	23a0      	movs	r3, #160	@ 0xa0
 800c890:	05db      	lsls	r3, r3, #23
 800c892:	210c      	movs	r1, #12
 800c894:	0018      	movs	r0, r3
 800c896:	f006 fc43 	bl	8013120 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2280      	movs	r2, #128	@ 0x80
 800c89e:	589b      	ldr	r3, [r3, r2]
 800c8a0:	0018      	movs	r0, r3
 800c8a2:	f005 fdc9 	bl	8012438 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	f005 fdc4 	bl	8012438 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_LPUART2_IRQn);
 800c8b0:	201c      	movs	r0, #28
 800c8b2:	f005 fcf8 	bl	80122a6 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART4_MspDeInit 1 */

    /* USER CODE END USART4_MspDeInit 1 */
  }

}
 800c8b6:	e01e      	b.n	800c8f6 <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==USART4)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a13      	ldr	r2, [pc, #76]	@ (800c90c <HAL_UART_MspDeInit+0x9c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d119      	bne.n	800c8f6 <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_USART4_CLK_DISABLE();
 800c8c2:	4b10      	ldr	r3, [pc, #64]	@ (800c904 <HAL_UART_MspDeInit+0x94>)
 800c8c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c904 <HAL_UART_MspDeInit+0x94>)
 800c8c8:	4911      	ldr	r1, [pc, #68]	@ (800c910 <HAL_UART_MspDeInit+0xa0>)
 800c8ca:	400a      	ands	r2, r1
 800c8cc:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800c8ce:	23a0      	movs	r3, #160	@ 0xa0
 800c8d0:	05db      	lsls	r3, r3, #23
 800c8d2:	2103      	movs	r1, #3
 800c8d4:	0018      	movs	r0, r3
 800c8d6:	f006 fc23 	bl	8013120 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2280      	movs	r2, #128	@ 0x80
 800c8de:	589b      	ldr	r3, [r3, r2]
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	f005 fda9 	bl	8012438 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8ea:	0018      	movs	r0, r3
 800c8ec:	f005 fda4 	bl	8012438 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART4_LPUART3_IRQn);
 800c8f0:	201e      	movs	r0, #30
 800c8f2:	f005 fcd8 	bl	80122a6 <HAL_NVIC_DisableIRQ>
}
 800c8f6:	46c0      	nop			@ (mov r8, r8)
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	b002      	add	sp, #8
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	46c0      	nop			@ (mov r8, r8)
 800c900:	40004400 	.word	0x40004400
 800c904:	40021000 	.word	0x40021000
 800c908:	fffdffff 	.word	0xfffdffff
 800c90c:	40004c00 	.word	0x40004c00
 800c910:	fff7ffff 	.word	0xfff7ffff

0800c914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c918:	46c0      	nop			@ (mov r8, r8)
 800c91a:	e7fd      	b.n	800c918 <NMI_Handler+0x4>

0800c91c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c920:	46c0      	nop			@ (mov r8, r8)
 800c922:	e7fd      	b.n	800c920 <HardFault_Handler+0x4>

0800c924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c928:	46c0      	nop			@ (mov r8, r8)
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c932:	46c0      	nop			@ (mov r8, r8)
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c93c:	f005 fb68 	bl	8012010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c940:	46c0      	nop			@ (mov r8, r8)
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
	...

0800c948 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800c94c:	4b04      	ldr	r3, [pc, #16]	@ (800c960 <RTC_TAMP_IRQHandler+0x18>)
 800c94e:	0018      	movs	r0, r3
 800c950:	f00b f992 	bl	8017c78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_8);    //Pin de prueba bajo consumo
  bandera_RTC = 1;
 800c954:	4b03      	ldr	r3, [pc, #12]	@ (800c964 <RTC_TAMP_IRQHandler+0x1c>)
 800c956:	2201      	movs	r2, #1
 800c958:	701a      	strb	r2, [r3, #0]
  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800c95a:	46c0      	nop			@ (mov r8, r8)
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20000514 	.word	0x20000514
 800c964:	2000216e 	.word	0x2000216e

0800c968 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800c96c:	2380      	movs	r3, #128	@ 0x80
 800c96e:	021b      	lsls	r3, r3, #8
 800c970:	0018      	movs	r0, r3
 800c972:	f006 fcef 	bl	8013354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800c976:	46c0      	nop			@ (mov r8, r8)
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800c980:	4b05      	ldr	r3, [pc, #20]	@ (800c998 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800c982:	0018      	movs	r0, r3
 800c984:	f005 ff3e 	bl	8012804 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800c988:	4b04      	ldr	r3, [pc, #16]	@ (800c99c <DMA1_Channel2_3_IRQHandler+0x20>)
 800c98a:	0018      	movs	r0, r3
 800c98c:	f005 ff3a 	bl	8012804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c990:	46c0      	nop			@ (mov r8, r8)
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	20000810 	.word	0x20000810
 800c99c:	20000870 	.word	0x20000870

0800c9a0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c9a4:	4b09      	ldr	r3, [pc, #36]	@ (800c9cc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	f005 ff2c 	bl	8012804 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c9ac:	4b08      	ldr	r3, [pc, #32]	@ (800c9d0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 800c9ae:	0018      	movs	r0, r3
 800c9b0:	f005 ff28 	bl	8012804 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c9b4:	4b07      	ldr	r3, [pc, #28]	@ (800c9d4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 800c9b6:	0018      	movs	r0, r3
 800c9b8:	f005 ff24 	bl	8012804 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c9bc:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 800c9be:	0018      	movs	r0, r3
 800c9c0:	f005 ff20 	bl	8012804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 800c9c4:	46c0      	nop			@ (mov r8, r8)
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	46c0      	nop			@ (mov r8, r8)
 800c9cc:	200007b0 	.word	0x200007b0
 800c9d0:	20000750 	.word	0x20000750
 800c9d4:	200004a0 	.word	0x200004a0
 800c9d8:	20000440 	.word	0x20000440

0800c9dc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800c9e0:	4b09      	ldr	r3, [pc, #36]	@ (800ca08 <I2C1_IRQHandler+0x2c>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	699a      	ldr	r2, [r3, #24]
 800c9e6:	23e0      	movs	r3, #224	@ 0xe0
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	d004      	beq.n	800c9f8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800c9ee:	4b06      	ldr	r3, [pc, #24]	@ (800ca08 <I2C1_IRQHandler+0x2c>)
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	f006 ffe9 	bl	80139c8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800c9f6:	e003      	b.n	800ca00 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c9f8:	4b03      	ldr	r3, [pc, #12]	@ (800ca08 <I2C1_IRQHandler+0x2c>)
 800c9fa:	0018      	movs	r0, r3
 800c9fc:	f006 ffca 	bl	8013994 <HAL_I2C_EV_IRQHandler>
}
 800ca00:	46c0      	nop			@ (mov r8, r8)
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	46c0      	nop			@ (mov r8, r8)
 800ca08:	200003ec 	.word	0x200003ec

0800ca0c <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ca10:	4b03      	ldr	r3, [pc, #12]	@ (800ca20 <USART2_LPUART2_IRQHandler+0x14>)
 800ca12:	0018      	movs	r0, r3
 800ca14:	f00c fc7a 	bl	801930c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800ca18:	46c0      	nop			@ (mov r8, r8)
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	46c0      	nop			@ (mov r8, r8)
 800ca20:	20000628 	.word	0x20000628

0800ca24 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ca28:	4b03      	ldr	r3, [pc, #12]	@ (800ca38 <USART4_LPUART3_IRQHandler+0x14>)
 800ca2a:	0018      	movs	r0, r3
 800ca2c:	f00c fc6e 	bl	801930c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 800ca30:	46c0      	nop			@ (mov r8, r8)
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	46c0      	nop			@ (mov r8, r8)
 800ca38:	200006bc 	.word	0x200006bc

0800ca3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b086      	sub	sp, #24
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ca44:	4a14      	ldr	r2, [pc, #80]	@ (800ca98 <_sbrk+0x5c>)
 800ca46:	4b15      	ldr	r3, [pc, #84]	@ (800ca9c <_sbrk+0x60>)
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ca50:	4b13      	ldr	r3, [pc, #76]	@ (800caa0 <_sbrk+0x64>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ca58:	4b11      	ldr	r3, [pc, #68]	@ (800caa0 <_sbrk+0x64>)
 800ca5a:	4a12      	ldr	r2, [pc, #72]	@ (800caa4 <_sbrk+0x68>)
 800ca5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ca5e:	4b10      	ldr	r3, [pc, #64]	@ (800caa0 <_sbrk+0x64>)
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	18d3      	adds	r3, r2, r3
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d207      	bcs.n	800ca7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ca6c:	f00e f890 	bl	801ab90 <__errno>
 800ca70:	0003      	movs	r3, r0
 800ca72:	220c      	movs	r2, #12
 800ca74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ca76:	2301      	movs	r3, #1
 800ca78:	425b      	negs	r3, r3
 800ca7a:	e009      	b.n	800ca90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ca7c:	4b08      	ldr	r3, [pc, #32]	@ (800caa0 <_sbrk+0x64>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ca82:	4b07      	ldr	r3, [pc, #28]	@ (800caa0 <_sbrk+0x64>)
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	18d2      	adds	r2, r2, r3
 800ca8a:	4b05      	ldr	r3, [pc, #20]	@ (800caa0 <_sbrk+0x64>)
 800ca8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
}
 800ca90:	0018      	movs	r0, r3
 800ca92:	46bd      	mov	sp, r7
 800ca94:	b006      	add	sp, #24
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	20008000 	.word	0x20008000
 800ca9c:	00000400 	.word	0x00000400
 800caa0:	200021a4 	.word	0x200021a4
 800caa4:	20002378 	.word	0x20002378

0800caa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800caae:	4b12      	ldr	r3, [pc, #72]	@ (800caf8 <SystemInit+0x50>)
 800cab0:	2280      	movs	r2, #128	@ 0x80
 800cab2:	0512      	lsls	r2, r2, #20
 800cab4:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800cab6:	4a11      	ldr	r2, [pc, #68]	@ (800cafc <SystemInit+0x54>)
 800cab8:	2380      	movs	r3, #128	@ 0x80
 800caba:	58d3      	ldr	r3, [r2, r3]
 800cabc:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800cabe:	4b0f      	ldr	r3, [pc, #60]	@ (800cafc <SystemInit+0x54>)
 800cac0:	6a1b      	ldr	r3, [r3, #32]
 800cac2:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	2380      	movs	r3, #128	@ 0x80
 800cac8:	025b      	lsls	r3, r3, #9
 800caca:	4013      	ands	r3, r2
 800cacc:	d010      	beq.n	800caf0 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	22ff      	movs	r2, #255	@ 0xff
 800cad2:	4013      	ands	r3, r2
 800cad4:	2bcc      	cmp	r3, #204	@ 0xcc
 800cad6:	d00b      	beq.n	800caf0 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	22ff      	movs	r2, #255	@ 0xff
 800cadc:	4013      	ands	r3, r2
 800cade:	2baa      	cmp	r3, #170	@ 0xaa
 800cae0:	d006      	beq.n	800caf0 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800cae2:	4b06      	ldr	r3, [pc, #24]	@ (800cafc <SystemInit+0x54>)
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	4b05      	ldr	r3, [pc, #20]	@ (800cafc <SystemInit+0x54>)
 800cae8:	2180      	movs	r1, #128	@ 0x80
 800caea:	02c9      	lsls	r1, r1, #11
 800caec:	430a      	orrs	r2, r1
 800caee:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800caf0:	46c0      	nop			@ (mov r8, r8)
 800caf2:	46bd      	mov	sp, r7
 800caf4:	b002      	add	sp, #8
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	e000ed00 	.word	0xe000ed00
 800cafc:	40022000 	.word	0x40022000

0800cb00 <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0


	cnttemp++;
 800cb06:	4bcc      	ldr	r3, [pc, #816]	@ (800ce38 <temper+0x338>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	4bca      	ldr	r3, [pc, #808]	@ (800ce38 <temper+0x338>)
 800cb10:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 800cb12:	4bc9      	ldr	r3, [pc, #804]	@ (800ce38 <temper+0x338>)
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	4bc9      	ldr	r3, [pc, #804]	@ (800ce3c <temper+0x33c>)
 800cb18:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 800cb1a:	4bc8      	ldr	r3, [pc, #800]	@ (800ce3c <temper+0x33c>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	2b31      	cmp	r3, #49	@ 0x31
 800cb20:	d801      	bhi.n	800cb26 <temper+0x26>
 800cb22:	f000 fd57 	bl	800d5d4 <temper+0xad4>
		goto tempe05;  // Sí no tomes muestras
 800cb26:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 800cb28:	4bc5      	ldr	r3, [pc, #788]	@ (800ce40 <temper+0x340>)
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	f7fa fad9 	bl	80070e2 <decwreg>
		decwreg(&retcncfe);
 800cb30:	4bc4      	ldr	r3, [pc, #784]	@ (800ce44 <temper+0x344>)
 800cb32:	0018      	movs	r0, r3
 800cb34:	f7fa fad5 	bl	80070e2 <decwreg>
		decwreg(&retcncfr);
 800cb38:	4bc3      	ldr	r3, [pc, #780]	@ (800ce48 <temper+0x348>)
 800cb3a:	0018      	movs	r0, r3
 800cb3c:	f7fa fad1 	bl	80070e2 <decwreg>
		decwreg(&retcncfc);
 800cb40:	4bc2      	ldr	r3, [pc, #776]	@ (800ce4c <temper+0x34c>)
 800cb42:	0018      	movs	r0, r3
 800cb44:	f7fa facd 	bl	80070e2 <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 800cb48:	4bbb      	ldr	r3, [pc, #748]	@ (800ce38 <temper+0x338>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	701a      	strb	r2, [r3, #0]

		/*
		 * PRUEBAS DEBUGGER // Comentar de ser necesario
		 */

		ADC1->CHSELR = 0;
 800cb4e:	4bc0      	ldr	r3, [pc, #768]	@ (800ce50 <temper+0x350>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	629a      	str	r2, [r3, #40]	@ 0x28
		ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 800cb54:	4bbe      	ldr	r3, [pc, #760]	@ (800ce50 <temper+0x350>)
 800cb56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cb58:	4bbd      	ldr	r3, [pc, #756]	@ (800ce50 <temper+0x350>)
 800cb5a:	2180      	movs	r1, #128	@ 0x80
 800cb5c:	0209      	lsls	r1, r1, #8
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	629a      	str	r2, [r3, #40]	@ 0x28
		capturaAD ();
 800cb62:	f000 fec3 	bl	800d8ec <capturaAD>
		tRTP1000[cntmues] = adcramh;
 800cb66:	4bbb      	ldr	r3, [pc, #748]	@ (800ce54 <temper+0x354>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	001a      	movs	r2, r3
 800cb6c:	4bba      	ldr	r3, [pc, #744]	@ (800ce58 <temper+0x358>)
 800cb6e:	8819      	ldrh	r1, [r3, #0]
 800cb70:	4bba      	ldr	r3, [pc, #744]	@ (800ce5c <temper+0x35c>)
 800cb72:	0052      	lsls	r2, r2, #1
 800cb74:	52d1      	strh	r1, [r2, r3]
		if(cntmues == 7){
 800cb76:	4bb7      	ldr	r3, [pc, #732]	@ (800ce54 <temper+0x354>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b07      	cmp	r3, #7
 800cb7c:	d171      	bne.n	800cc62 <temper+0x162>
			tRTP1000_p = 0;
 800cb7e:	4bb8      	ldr	r3, [pc, #736]	@ (800ce60 <temper+0x360>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800cb84:	230f      	movs	r3, #15
 800cb86:	18fb      	adds	r3, r7, r3
 800cb88:	2200      	movs	r2, #0
 800cb8a:	701a      	strb	r2, [r3, #0]
 800cb8c:	e010      	b.n	800cbb0 <temper+0xb0>
				tRTP1000_p += tRTP1000[i];
 800cb8e:	210f      	movs	r1, #15
 800cb90:	187b      	adds	r3, r7, r1
 800cb92:	781a      	ldrb	r2, [r3, #0]
 800cb94:	4bb1      	ldr	r3, [pc, #708]	@ (800ce5c <temper+0x35c>)
 800cb96:	0052      	lsls	r2, r2, #1
 800cb98:	5ad2      	ldrh	r2, [r2, r3]
 800cb9a:	4bb1      	ldr	r3, [pc, #708]	@ (800ce60 <temper+0x360>)
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	18d3      	adds	r3, r2, r3
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	4baf      	ldr	r3, [pc, #700]	@ (800ce60 <temper+0x360>)
 800cba4:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i<8; i++){
 800cba6:	187b      	adds	r3, r7, r1
 800cba8:	781a      	ldrb	r2, [r3, #0]
 800cbaa:	187b      	adds	r3, r7, r1
 800cbac:	3201      	adds	r2, #1
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	230f      	movs	r3, #15
 800cbb2:	18fb      	adds	r3, r7, r3
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2b07      	cmp	r3, #7
 800cbb8:	d9e9      	bls.n	800cb8e <temper+0x8e>
			}

			tRTP1000_p = tRTP1000_p/8;
 800cbba:	4ba9      	ldr	r3, [pc, #676]	@ (800ce60 <temper+0x360>)
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	08db      	lsrs	r3, r3, #3
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	4ba7      	ldr	r3, [pc, #668]	@ (800ce60 <temper+0x360>)
 800cbc4:	801a      	strh	r2, [r3, #0]
			vRTP1000_p = 330*tRTP1000_p/1024;
 800cbc6:	4ba6      	ldr	r3, [pc, #664]	@ (800ce60 <temper+0x360>)
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	001a      	movs	r2, r3
 800cbcc:	0013      	movs	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	189b      	adds	r3, r3, r2
 800cbd2:	015a      	lsls	r2, r3, #5
 800cbd4:	189b      	adds	r3, r3, r2
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	d502      	bpl.n	800cbe0 <temper+0xe0>
 800cbda:	4aa2      	ldr	r2, [pc, #648]	@ (800ce64 <temper+0x364>)
 800cbdc:	4694      	mov	ip, r2
 800cbde:	4463      	add	r3, ip
 800cbe0:	129b      	asrs	r3, r3, #10
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	4ba0      	ldr	r3, [pc, #640]	@ (800ce68 <temper+0x368>)
 800cbe6:	801a      	strh	r2, [r3, #0]
			uint32_t mul1 = vRTP1000_p+(R169/1000)*VSEN/R170;
 800cbe8:	4b9f      	ldr	r3, [pc, #636]	@ (800ce68 <temper+0x368>)
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	4a9f      	ldr	r2, [pc, #636]	@ (800ce6c <temper+0x36c>)
 800cbee:	4694      	mov	ip, r2
 800cbf0:	4463      	add	r3, ip
 800cbf2:	607b      	str	r3, [r7, #4]
			uint32_t mul2 = ((2*R169/R170+1000)*VSEN)/1000;
 800cbf4:	4b9e      	ldr	r3, [pc, #632]	@ (800ce70 <temper+0x370>)
 800cbf6:	603b      	str	r3, [r7, #0]
			constantRTP = 1000*mul1/mul2;
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	0013      	movs	r3, r2
 800cbfc:	015b      	lsls	r3, r3, #5
 800cbfe:	1a9b      	subs	r3, r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	189b      	adds	r3, r3, r2
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	0018      	movs	r0, r3
 800cc0a:	f7f3 fa85 	bl	8000118 <__udivsi3>
 800cc0e:	0003      	movs	r3, r0
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	4b98      	ldr	r3, [pc, #608]	@ (800ce74 <temper+0x374>)
 800cc14:	801a      	strh	r2, [r3, #0]
			RTP1000 = constantRTP*R157/(1000-constantRTP);
 800cc16:	4b97      	ldr	r3, [pc, #604]	@ (800ce74 <temper+0x374>)
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	001a      	movs	r2, r3
 800cc1c:	0013      	movs	r3, r2
 800cc1e:	015b      	lsls	r3, r3, #5
 800cc20:	1a9b      	subs	r3, r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	189b      	adds	r3, r3, r2
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	0018      	movs	r0, r3
 800cc2a:	4b92      	ldr	r3, [pc, #584]	@ (800ce74 <temper+0x374>)
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	001a      	movs	r2, r3
 800cc30:	23fa      	movs	r3, #250	@ 0xfa
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	1a9b      	subs	r3, r3, r2
 800cc36:	0019      	movs	r1, r3
 800cc38:	f7f3 faf8 	bl	800022c <__divsi3>
 800cc3c:	0003      	movs	r3, r0
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	4b8d      	ldr	r3, [pc, #564]	@ (800ce78 <temper+0x378>)
 800cc42:	801a      	strh	r2, [r3, #0]
			temperatureRTP = pendienteRTP*RTP1000/100 + (ordenadaRTP*10) ;
 800cc44:	4b8c      	ldr	r3, [pc, #560]	@ (800ce78 <temper+0x378>)
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	021b      	lsls	r3, r3, #8
 800cc4a:	2164      	movs	r1, #100	@ 0x64
 800cc4c:	0018      	movs	r0, r3
 800cc4e:	f7f3 faed 	bl	800022c <__divsi3>
 800cc52:	0003      	movs	r3, r0
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	4a89      	ldr	r2, [pc, #548]	@ (800ce7c <temper+0x37c>)
 800cc58:	4694      	mov	ip, r2
 800cc5a:	4463      	add	r3, ip
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	4b88      	ldr	r3, [pc, #544]	@ (800ce80 <temper+0x380>)
 800cc60:	801a      	strh	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
						ADC1->CHSELR = 0;
 800cc62:	4b7b      	ldr	r3, [pc, #492]	@ (800ce50 <temper+0x350>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 800cc68:	4b79      	ldr	r3, [pc, #484]	@ (800ce50 <temper+0x350>)
 800cc6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc6c:	4b78      	ldr	r3, [pc, #480]	@ (800ce50 <temper+0x350>)
 800cc6e:	2101      	movs	r1, #1
 800cc70:	430a      	orrs	r2, r1
 800cc72:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 800cc74:	f000 fe3a 	bl	800d8ec <capturaAD>

//lookshort_S4:
		Y_A();
 800cc78:	f000 fea8 	bl	800d9cc <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 800cc7c:	4b6f      	ldr	r3, [pc, #444]	@ (800ce3c <temper+0x33c>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d005      	beq.n	800cc90 <temper+0x190>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cc84:	4b7f      	ldr	r3, [pc, #508]	@ (800ce84 <temper+0x384>)
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	4a7f      	ldr	r2, [pc, #508]	@ (800ce88 <temper+0x388>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d808      	bhi.n	800cca0 <temper+0x1a0>
			goto lookopen_S04;          // No, revise límite inferior
 800cc8e:	e010      	b.n	800ccb2 <temper+0x1b2>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 800cc90:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cc92:	4b7c      	ldr	r3, [pc, #496]	@ (800ce84 <temper+0x384>)
 800cc94:	881a      	ldrh	r2, [r3, #0]
 800cc96:	23e2      	movs	r3, #226	@ 0xe2
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d308      	bcc.n	800ccb0 <temper+0x1b0>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 800cc9e:	e000      	b.n	800cca2 <temper+0x1a2>
		goto sens_short_S04;
 800cca0:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800cca2:	497a      	ldr	r1, [pc, #488]	@ (800ce8c <temper+0x38c>)
 800cca4:	487a      	ldr	r0, [pc, #488]	@ (800ce90 <temper+0x390>)
 800cca6:	2307      	movs	r3, #7
 800cca8:	2205      	movs	r2, #5
 800ccaa:	f000 fea5 	bl	800d9f8 <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 800ccae:	e01c      	b.n	800ccea <temper+0x1ea>
			goto lookopen_S04;          // No, revise límite inferior
 800ccb0:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 800ccb2:	4b78      	ldr	r3, [pc, #480]	@ (800ce94 <temper+0x394>)
 800ccb4:	781a      	ldrb	r2, [r3, #0]
 800ccb6:	4b61      	ldr	r3, [pc, #388]	@ (800ce3c <temper+0x33c>)
 800ccb8:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800ccba:	4b60      	ldr	r3, [pc, #384]	@ (800ce3c <temper+0x33c>)
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d004      	beq.n	800cccc <temper+0x1cc>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800ccc2:	4b70      	ldr	r3, [pc, #448]	@ (800ce84 <temper+0x384>)
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccc8:	d908      	bls.n	800ccdc <temper+0x1dc>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800ccca:	e013      	b.n	800ccf4 <temper+0x1f4>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 800cccc:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 800ccce:	4b6d      	ldr	r3, [pc, #436]	@ (800ce84 <temper+0x384>)
 800ccd0:	881a      	ldrh	r2, [r3, #0]
 800ccd2:	23d7      	movs	r3, #215	@ 0xd7
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d20b      	bcs.n	800ccf2 <temper+0x1f2>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 800ccda:	e000      	b.n	800ccde <temper+0x1de>
		goto sens_open_S04;
 800ccdc:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 800ccde:	496c      	ldr	r1, [pc, #432]	@ (800ce90 <temper+0x390>)
 800cce0:	486a      	ldr	r0, [pc, #424]	@ (800ce8c <temper+0x38c>)
 800cce2:	2305      	movs	r3, #5
 800cce4:	2207      	movs	r2, #7
 800cce6:	f000 fe87 	bl	800d9f8 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 800ccea:	4b58      	ldr	r3, [pc, #352]	@ (800ce4c <temper+0x34c>)
 800ccec:	220f      	movs	r2, #15
 800ccee:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 800ccf0:	e010      	b.n	800cd14 <temper+0x214>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800ccf2:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 800ccf4:	4b55      	ldr	r3, [pc, #340]	@ (800ce4c <temper+0x34c>)
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	4b50      	ldr	r3, [pc, #320]	@ (800ce3c <temper+0x33c>)
 800ccfa:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 800ccfc:	4b4f      	ldr	r3, [pc, #316]	@ (800ce3c <temper+0x33c>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <temper+0x212>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800cd04:	4961      	ldr	r1, [pc, #388]	@ (800ce8c <temper+0x38c>)
 800cd06:	4862      	ldr	r0, [pc, #392]	@ (800ce90 <temper+0x390>)
 800cd08:	2307      	movs	r3, #7
 800cd0a:	2205      	movs	r2, #5
 800cd0c:	f000 fe8f 	bl	800da2e <Bclear_Clear_trfst>
 800cd10:	e000      	b.n	800cd14 <temper+0x214>
			goto tempeLoad_s04;
 800cd12:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cd14:	4b4f      	ldr	r3, [pc, #316]	@ (800ce54 <temper+0x354>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	001a      	movs	r2, r3
 800cd1a:	4b4f      	ldr	r3, [pc, #316]	@ (800ce58 <temper+0x358>)
 800cd1c:	8819      	ldrh	r1, [r3, #0]
 800cd1e:	4b5e      	ldr	r3, [pc, #376]	@ (800ce98 <temper+0x398>)
 800cd20:	0052      	lsls	r2, r2, #1
 800cd22:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
					ADC1->CHSELR = 0;
 800cd24:	4b4a      	ldr	r3, [pc, #296]	@ (800ce50 <temper+0x350>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 800cd2a:	4b49      	ldr	r3, [pc, #292]	@ (800ce50 <temper+0x350>)
 800cd2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd2e:	4b48      	ldr	r3, [pc, #288]	@ (800ce50 <temper+0x350>)
 800cd30:	2180      	movs	r1, #128	@ 0x80
 800cd32:	02c9      	lsls	r1, r1, #11
 800cd34:	430a      	orrs	r2, r1
 800cd36:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 800cd38:	f000 fdd8 	bl	800d8ec <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 800cd3c:	f000 fe46 	bl	800d9cc <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800cd40:	4b3e      	ldr	r3, [pc, #248]	@ (800ce3c <temper+0x33c>)
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d005      	beq.n	800cd54 <temper+0x254>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cd48:	4b4e      	ldr	r3, [pc, #312]	@ (800ce84 <temper+0x384>)
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	4a53      	ldr	r2, [pc, #332]	@ (800ce9c <temper+0x39c>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d808      	bhi.n	800cd64 <temper+0x264>
		goto lookopen_S03;      // No, revise límite inferior
 800cd52:	e010      	b.n	800cd76 <temper+0x276>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 800cd54:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cd56:	4b4b      	ldr	r3, [pc, #300]	@ (800ce84 <temper+0x384>)
 800cd58:	881a      	ldrh	r2, [r3, #0]
 800cd5a:	23e2      	movs	r3, #226	@ 0xe2
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d308      	bcc.n	800cd74 <temper+0x274>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 800cd62:	e000      	b.n	800cd66 <temper+0x266>
	goto sens_short_S03;
 800cd64:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800cd66:	4949      	ldr	r1, [pc, #292]	@ (800ce8c <temper+0x38c>)
 800cd68:	4848      	ldr	r0, [pc, #288]	@ (800ce8c <temper+0x38c>)
 800cd6a:	2305      	movs	r3, #5
 800cd6c:	2204      	movs	r2, #4
 800cd6e:	f000 fe43 	bl	800d9f8 <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 800cd72:	e01c      	b.n	800cdae <temper+0x2ae>
			goto lookopen_S03; // No, revise límite inferior
 800cd74:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 800cd76:	4b47      	ldr	r3, [pc, #284]	@ (800ce94 <temper+0x394>)
 800cd78:	781a      	ldrb	r2, [r3, #0]
 800cd7a:	4b30      	ldr	r3, [pc, #192]	@ (800ce3c <temper+0x33c>)
 800cd7c:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800cd7e:	4b2f      	ldr	r3, [pc, #188]	@ (800ce3c <temper+0x33c>)
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d004      	beq.n	800cd90 <temper+0x290>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 800cd86:	4b3f      	ldr	r3, [pc, #252]	@ (800ce84 <temper+0x384>)
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd8c:	d908      	bls.n	800cda0 <temper+0x2a0>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800cd8e:	e013      	b.n	800cdb8 <temper+0x2b8>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 800cd90:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cd92:	4b3c      	ldr	r3, [pc, #240]	@ (800ce84 <temper+0x384>)
 800cd94:	881a      	ldrh	r2, [r3, #0]
 800cd96:	23d7      	movs	r3, #215	@ 0xd7
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d20b      	bcs.n	800cdb6 <temper+0x2b6>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 800cd9e:	e000      	b.n	800cda2 <temper+0x2a2>
		goto sens_open_S03;
 800cda0:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 800cda2:	493a      	ldr	r1, [pc, #232]	@ (800ce8c <temper+0x38c>)
 800cda4:	4839      	ldr	r0, [pc, #228]	@ (800ce8c <temper+0x38c>)
 800cda6:	2304      	movs	r3, #4
 800cda8:	2205      	movs	r2, #5
 800cdaa:	f000 fe25 	bl	800d9f8 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 800cdae:	4b26      	ldr	r3, [pc, #152]	@ (800ce48 <temper+0x348>)
 800cdb0:	220f      	movs	r2, #15
 800cdb2:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 800cdb4:	e010      	b.n	800cdd8 <temper+0x2d8>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800cdb6:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 800cdb8:	4b23      	ldr	r3, [pc, #140]	@ (800ce48 <temper+0x348>)
 800cdba:	781a      	ldrb	r2, [r3, #0]
 800cdbc:	4b1f      	ldr	r3, [pc, #124]	@ (800ce3c <temper+0x33c>)
 800cdbe:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 800cdc0:	4b1e      	ldr	r3, [pc, #120]	@ (800ce3c <temper+0x33c>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d106      	bne.n	800cdd6 <temper+0x2d6>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800cdc8:	4930      	ldr	r1, [pc, #192]	@ (800ce8c <temper+0x38c>)
 800cdca:	4830      	ldr	r0, [pc, #192]	@ (800ce8c <temper+0x38c>)
 800cdcc:	2305      	movs	r3, #5
 800cdce:	2204      	movs	r2, #4
 800cdd0:	f000 fe2d 	bl	800da2e <Bclear_Clear_trfst>
 800cdd4:	e000      	b.n	800cdd8 <temper+0x2d8>
			goto tempeLoad_s03;
 800cdd6:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cdd8:	4b1e      	ldr	r3, [pc, #120]	@ (800ce54 <temper+0x354>)
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	001a      	movs	r2, r3
 800cdde:	4b1e      	ldr	r3, [pc, #120]	@ (800ce58 <temper+0x358>)
 800cde0:	8819      	ldrh	r1, [r3, #0]
 800cde2:	4b2f      	ldr	r3, [pc, #188]	@ (800cea0 <temper+0x3a0>)
 800cde4:	0052      	lsls	r2, r2, #1
 800cde6:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

				ADC1->CHSELR = 0;
 800cde8:	4b19      	ldr	r3, [pc, #100]	@ (800ce50 <temper+0x350>)
 800cdea:	2200      	movs	r2, #0
 800cdec:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 800cdee:	4b18      	ldr	r3, [pc, #96]	@ (800ce50 <temper+0x350>)
 800cdf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cdf2:	4b17      	ldr	r3, [pc, #92]	@ (800ce50 <temper+0x350>)
 800cdf4:	2180      	movs	r1, #128	@ 0x80
 800cdf6:	00c9      	lsls	r1, r1, #3
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 800cdfc:	f000 fd76 	bl	800d8ec <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 800ce00:	f000 fde4 	bl	800d9cc <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 800ce04:	4b0d      	ldr	r3, [pc, #52]	@ (800ce3c <temper+0x33c>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d005      	beq.n	800ce18 <temper+0x318>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800ce0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ce84 <temper+0x384>)
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	4a22      	ldr	r2, [pc, #136]	@ (800ce9c <temper+0x39c>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d808      	bhi.n	800ce28 <temper+0x328>
			goto lookopen;     // No, revise límite inferior
 800ce16:	e046      	b.n	800cea6 <temper+0x3a6>
			goto cmp_man_01;   // En autoprueba deja estos límites
 800ce18:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800ce1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ce84 <temper+0x384>)
 800ce1c:	881a      	ldrh	r2, [r3, #0]
 800ce1e:	23e2      	movs	r3, #226	@ 0xe2
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d33e      	bcc.n	800cea4 <temper+0x3a4>
			goto lookopen;     // No, revise límite inferior

sens_short:
 800ce26:	e000      	b.n	800ce2a <temper+0x32a>
		goto sens_short;
 800ce28:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800ce2a:	4919      	ldr	r1, [pc, #100]	@ (800ce90 <temper+0x390>)
 800ce2c:	4818      	ldr	r0, [pc, #96]	@ (800ce90 <temper+0x390>)
 800ce2e:	2301      	movs	r3, #1
 800ce30:	2200      	movs	r2, #0
 800ce32:	f000 fde1 	bl	800d9f8 <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 800ce36:	e052      	b.n	800cede <temper+0x3de>
 800ce38:	20000bbb 	.word	0x20000bbb
 800ce3c:	200021f6 	.word	0x200021f6
 800ce40:	20000bc0 	.word	0x20000bc0
 800ce44:	20000bc1 	.word	0x20000bc1
 800ce48:	20000c4e 	.word	0x20000c4e
 800ce4c:	20000c4f 	.word	0x20000c4f
 800ce50:	40012400 	.word	0x40012400
 800ce54:	20000bbc 	.word	0x20000bbc
 800ce58:	20000b5c 	.word	0x20000b5c
 800ce5c:	20000260 	.word	0x20000260
 800ce60:	200021a8 	.word	0x200021a8
 800ce64:	000003ff 	.word	0x000003ff
 800ce68:	200021aa 	.word	0x200021aa
 800ce6c:	000003e2 	.word	0x000003e2
 800ce70:	00000903 	.word	0x00000903
 800ce74:	200021ac 	.word	0x200021ac
 800ce78:	200021ae 	.word	0x200021ae
 800ce7c:	fffff600 	.word	0xfffff600
 800ce80:	200021b0 	.word	0x200021b0
 800ce84:	200021f8 	.word	0x200021f8
 800ce88:	000003ad 	.word	0x000003ad
 800ce8c:	20000b7c 	.word	0x20000b7c
 800ce90:	20000b84 	.word	0x20000b84
 800ce94:	20000b94 	.word	0x20000b94
 800ce98:	200021b4 	.word	0x200021b4
 800ce9c:	000003b5 	.word	0x000003b5
 800cea0:	200021c4 	.word	0x200021c4
			goto lookopen;     // No, revise límite inferior
 800cea4:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 800cea6:	4bcc      	ldr	r3, [pc, #816]	@ (800d1d8 <temper+0x6d8>)
 800cea8:	781a      	ldrb	r2, [r3, #0]
 800ceaa:	4bcc      	ldr	r3, [pc, #816]	@ (800d1dc <temper+0x6dc>)
 800ceac:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800ceae:	4bcb      	ldr	r3, [pc, #812]	@ (800d1dc <temper+0x6dc>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d004      	beq.n	800cec0 <temper+0x3c0>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800ceb6:	4bca      	ldr	r3, [pc, #808]	@ (800d1e0 <temper+0x6e0>)
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	2b2a      	cmp	r3, #42	@ 0x2a
 800cebc:	d908      	bls.n	800ced0 <temper+0x3d0>
			goto sens_ok;       // Sí, indica sensor OK
 800cebe:	e016      	b.n	800ceee <temper+0x3ee>
			goto cmp_man_02;    // En autoprueba deja estos límites
 800cec0:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cec2:	4bc7      	ldr	r3, [pc, #796]	@ (800d1e0 <temper+0x6e0>)
 800cec4:	881a      	ldrh	r2, [r3, #0]
 800cec6:	23d7      	movs	r3, #215	@ 0xd7
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d20e      	bcs.n	800ceec <temper+0x3ec>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 800cece:	e000      	b.n	800ced2 <temper+0x3d2>
		goto sens_open;
 800ced0:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 800ced2:	49c4      	ldr	r1, [pc, #784]	@ (800d1e4 <temper+0x6e4>)
 800ced4:	48c3      	ldr	r0, [pc, #780]	@ (800d1e4 <temper+0x6e4>)
 800ced6:	2300      	movs	r3, #0
 800ced8:	2201      	movs	r2, #1
 800ceda:	f000 fd8d 	bl	800d9f8 <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 800cede:	4bc2      	ldr	r3, [pc, #776]	@ (800d1e8 <temper+0x6e8>)
 800cee0:	220f      	movs	r2, #15
 800cee2:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 800cee4:	4bc1      	ldr	r3, [pc, #772]	@ (800d1ec <temper+0x6ec>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 800ceea:	e010      	b.n	800cf0e <temper+0x40e>
			goto sens_ok;       // Sí, indica sensor OK
 800ceec:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 800ceee:	4bbe      	ldr	r3, [pc, #760]	@ (800d1e8 <temper+0x6e8>)
 800cef0:	781a      	ldrb	r2, [r3, #0]
 800cef2:	4bba      	ldr	r3, [pc, #744]	@ (800d1dc <temper+0x6dc>)
 800cef4:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 800cef6:	4bb9      	ldr	r3, [pc, #740]	@ (800d1dc <temper+0x6dc>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <temper+0x40c>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800cefe:	49b9      	ldr	r1, [pc, #740]	@ (800d1e4 <temper+0x6e4>)
 800cf00:	48b8      	ldr	r0, [pc, #736]	@ (800d1e4 <temper+0x6e4>)
 800cf02:	2301      	movs	r3, #1
 800cf04:	2200      	movs	r2, #0
 800cf06:	f000 fd92 	bl	800da2e <Bclear_Clear_trfst>
 800cf0a:	e000      	b.n	800cf0e <temper+0x40e>
			goto tempe13;
 800cf0c:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cf0e:	4bb8      	ldr	r3, [pc, #736]	@ (800d1f0 <temper+0x6f0>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	001a      	movs	r2, r3
 800cf14:	4bb7      	ldr	r3, [pc, #732]	@ (800d1f4 <temper+0x6f4>)
 800cf16:	8819      	ldrh	r1, [r3, #0]
 800cf18:	4bb7      	ldr	r3, [pc, #732]	@ (800d1f8 <temper+0x6f8>)
 800cf1a:	0052      	lsls	r2, r2, #1
 800cf1c:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			ADC1->CHSELR = 0;
 800cf1e:	4bb7      	ldr	r3, [pc, #732]	@ (800d1fc <temper+0x6fc>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 800cf24:	4bb5      	ldr	r3, [pc, #724]	@ (800d1fc <temper+0x6fc>)
 800cf26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf28:	4bb4      	ldr	r3, [pc, #720]	@ (800d1fc <temper+0x6fc>)
 800cf2a:	2180      	movs	r1, #128	@ 0x80
 800cf2c:	01c9      	lsls	r1, r1, #7
 800cf2e:	430a      	orrs	r2, r1
 800cf30:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 800cf32:	f000 fcdb 	bl	800d8ec <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 800cf36:	f000 fd49 	bl	800d9cc <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800cf3a:	4ba8      	ldr	r3, [pc, #672]	@ (800d1dc <temper+0x6dc>)
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d005      	beq.n	800cf4e <temper+0x44e>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800cf42:	4ba7      	ldr	r3, [pc, #668]	@ (800d1e0 <temper+0x6e0>)
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	4aae      	ldr	r2, [pc, #696]	@ (800d200 <temper+0x700>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d808      	bhi.n	800cf5e <temper+0x45e>
		goto lookopene;    // No, revise límite inferior
 800cf4c:	e010      	b.n	800cf70 <temper+0x470>
		goto cmp_man_03;   // En autoprueba deja estos límites
 800cf4e:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800cf50:	4ba3      	ldr	r3, [pc, #652]	@ (800d1e0 <temper+0x6e0>)
 800cf52:	881a      	ldrh	r2, [r3, #0]
 800cf54:	23e2      	movs	r3, #226	@ 0xe2
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d308      	bcc.n	800cf6e <temper+0x46e>
		goto lookopene;    // No, revise límite inferior

senshorte:
 800cf5c:	e000      	b.n	800cf60 <temper+0x460>
	goto senshorte;
 800cf5e:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800cf60:	49a0      	ldr	r1, [pc, #640]	@ (800d1e4 <temper+0x6e4>)
 800cf62:	48a0      	ldr	r0, [pc, #640]	@ (800d1e4 <temper+0x6e4>)
 800cf64:	2303      	movs	r3, #3
 800cf66:	2202      	movs	r2, #2
 800cf68:	f000 fd46 	bl	800d9f8 <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 800cf6c:	e01c      	b.n	800cfa8 <temper+0x4a8>
		goto lookopene;    // No, revise límite inferior
 800cf6e:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 800cf70:	4b99      	ldr	r3, [pc, #612]	@ (800d1d8 <temper+0x6d8>)
 800cf72:	781a      	ldrb	r2, [r3, #0]
 800cf74:	4b99      	ldr	r3, [pc, #612]	@ (800d1dc <temper+0x6dc>)
 800cf76:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800cf78:	4b98      	ldr	r3, [pc, #608]	@ (800d1dc <temper+0x6dc>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d004      	beq.n	800cf8a <temper+0x48a>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800cf80:	4b97      	ldr	r3, [pc, #604]	@ (800d1e0 <temper+0x6e0>)
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf86:	d908      	bls.n	800cf9a <temper+0x49a>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800cf88:	e013      	b.n	800cfb2 <temper+0x4b2>
		goto cmp_man_04;   // En autoprueba deja estos límites
 800cf8a:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800cf8c:	4b94      	ldr	r3, [pc, #592]	@ (800d1e0 <temper+0x6e0>)
 800cf8e:	881a      	ldrh	r2, [r3, #0]
 800cf90:	23d7      	movs	r3, #215	@ 0xd7
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d20b      	bcs.n	800cfb0 <temper+0x4b0>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800cf98:	e000      	b.n	800cf9c <temper+0x49c>
	goto sens_opene;
 800cf9a:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 800cf9c:	4991      	ldr	r1, [pc, #580]	@ (800d1e4 <temper+0x6e4>)
 800cf9e:	4891      	ldr	r0, [pc, #580]	@ (800d1e4 <temper+0x6e4>)
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	2203      	movs	r2, #3
 800cfa4:	f000 fd28 	bl	800d9f8 <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800cfa8:	4b96      	ldr	r3, [pc, #600]	@ (800d204 <temper+0x704>)
 800cfaa:	2214      	movs	r2, #20
 800cfac:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 800cfae:	e010      	b.n	800cfd2 <temper+0x4d2>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800cfb0:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 800cfb2:	4b94      	ldr	r3, [pc, #592]	@ (800d204 <temper+0x704>)
 800cfb4:	781a      	ldrb	r2, [r3, #0]
 800cfb6:	4b89      	ldr	r3, [pc, #548]	@ (800d1dc <temper+0x6dc>)
 800cfb8:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 800cfba:	4b88      	ldr	r3, [pc, #544]	@ (800d1dc <temper+0x6dc>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d106      	bne.n	800cfd0 <temper+0x4d0>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800cfc2:	4988      	ldr	r1, [pc, #544]	@ (800d1e4 <temper+0x6e4>)
 800cfc4:	4887      	ldr	r0, [pc, #540]	@ (800d1e4 <temper+0x6e4>)
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	2202      	movs	r2, #2
 800cfca:	f000 fd30 	bl	800da2e <Bclear_Clear_trfst>
 800cfce:	e000      	b.n	800cfd2 <temper+0x4d2>
		goto tempe16;
 800cfd0:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 800cfd2:	4b84      	ldr	r3, [pc, #528]	@ (800d1e4 <temper+0x6e4>)
 800cfd4:	789b      	ldrb	r3, [r3, #2]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d004      	beq.n	800cfe4 <temper+0x4e4>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 800cfda:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 800cfdc:	4b85      	ldr	r3, [pc, #532]	@ (800d1f4 <temper+0x6f4>)
 800cfde:	220a      	movs	r2, #10
 800cfe0:	801a      	strh	r2, [r3, #0]
 800cfe2:	e000      	b.n	800cfe6 <temper+0x4e6>
	goto tempe16a;                 // No, revisa temperatura alta
 800cfe4:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800cfe6:	4b82      	ldr	r3, [pc, #520]	@ (800d1f0 <temper+0x6f0>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	001a      	movs	r2, r3
 800cfec:	4b81      	ldr	r3, [pc, #516]	@ (800d1f4 <temper+0x6f4>)
 800cfee:	8819      	ldrh	r1, [r3, #0]
 800cff0:	4b85      	ldr	r3, [pc, #532]	@ (800d208 <temper+0x708>)
 800cff2:	0052      	lsls	r2, r2, #1
 800cff4:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 800cff6:	4b7e      	ldr	r3, [pc, #504]	@ (800d1f0 <temper+0x6f0>)
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	4b7c      	ldr	r3, [pc, #496]	@ (800d1f0 <temper+0x6f0>)
 800d000:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 800d002:	4b7b      	ldr	r3, [pc, #492]	@ (800d1f0 <temper+0x6f0>)
 800d004:	781a      	ldrb	r2, [r3, #0]
 800d006:	4b75      	ldr	r3, [pc, #468]	@ (800d1dc <temper+0x6dc>)
 800d008:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 800d00a:	4b74      	ldr	r3, [pc, #464]	@ (800d1dc <temper+0x6dc>)
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b07      	cmp	r3, #7
 800d010:	d800      	bhi.n	800d014 <temper+0x514>
 800d012:	e2e1      	b.n	800d5d8 <temper+0xad8>
			goto tempe17;  // Si, obten el promedio
 800d014:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 800d016:	4b7d      	ldr	r3, [pc, #500]	@ (800d20c <temper+0x70c>)
 800d018:	2200      	movs	r2, #0
 800d01a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d01c:	230e      	movs	r3, #14
 800d01e:	18fb      	adds	r3, r7, r3
 800d020:	2200      	movs	r2, #0
 800d022:	701a      	strb	r2, [r3, #0]
 800d024:	e010      	b.n	800d048 <temper+0x548>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 800d026:	210e      	movs	r1, #14
 800d028:	187b      	adds	r3, r7, r1
 800d02a:	781a      	ldrb	r2, [r3, #0]
 800d02c:	4b78      	ldr	r3, [pc, #480]	@ (800d210 <temper+0x710>)
 800d02e:	0052      	lsls	r2, r2, #1
 800d030:	5ad2      	ldrh	r2, [r2, r3]
 800d032:	4b76      	ldr	r3, [pc, #472]	@ (800d20c <temper+0x70c>)
 800d034:	881b      	ldrh	r3, [r3, #0]
 800d036:	18d3      	adds	r3, r2, r3
 800d038:	b29a      	uxth	r2, r3
 800d03a:	4b74      	ldr	r3, [pc, #464]	@ (800d20c <temper+0x70c>)
 800d03c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d03e:	187b      	adds	r3, r7, r1
 800d040:	781a      	ldrb	r2, [r3, #0]
 800d042:	187b      	adds	r3, r7, r1
 800d044:	3201      	adds	r2, #1
 800d046:	701a      	strb	r2, [r3, #0]
 800d048:	230e      	movs	r3, #14
 800d04a:	18fb      	adds	r3, r7, r3
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b07      	cmp	r3, #7
 800d050:	d9e9      	bls.n	800d026 <temper+0x526>
	}
	resul = resul / 8;
 800d052:	4b6e      	ldr	r3, [pc, #440]	@ (800d20c <temper+0x70c>)
 800d054:	881b      	ldrh	r3, [r3, #0]
 800d056:	08db      	lsrs	r3, r3, #3
 800d058:	b29a      	uxth	r2, r3
 800d05a:	4b6c      	ldr	r3, [pc, #432]	@ (800d20c <temper+0x70c>)
 800d05c:	801a      	strh	r2, [r3, #0]
	linealiza();
 800d05e:	f000 fb0d 	bl	800d67c <linealiza>
	X = tempo;
 800d062:	4b6c      	ldr	r3, [pc, #432]	@ (800d214 <temper+0x714>)
 800d064:	881a      	ldrh	r2, [r3, #0]
 800d066:	4b6c      	ldr	r3, [pc, #432]	@ (800d218 <temper+0x718>)
 800d068:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800d06a:	4b6b      	ldr	r3, [pc, #428]	@ (800d218 <temper+0x718>)
 800d06c:	881a      	ldrh	r2, [r3, #0]
 800d06e:	4b6b      	ldr	r3, [pc, #428]	@ (800d21c <temper+0x71c>)
 800d070:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800d072:	4b66      	ldr	r3, [pc, #408]	@ (800d20c <temper+0x70c>)
 800d074:	2200      	movs	r2, #0
 800d076:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d078:	230d      	movs	r3, #13
 800d07a:	18fb      	adds	r3, r7, r3
 800d07c:	2200      	movs	r2, #0
 800d07e:	701a      	strb	r2, [r3, #0]
 800d080:	e010      	b.n	800d0a4 <temper+0x5a4>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 800d082:	210d      	movs	r1, #13
 800d084:	187b      	adds	r3, r7, r1
 800d086:	781a      	ldrb	r2, [r3, #0]
 800d088:	4b65      	ldr	r3, [pc, #404]	@ (800d220 <temper+0x720>)
 800d08a:	0052      	lsls	r2, r2, #1
 800d08c:	5ad2      	ldrh	r2, [r2, r3]
 800d08e:	4b5f      	ldr	r3, [pc, #380]	@ (800d20c <temper+0x70c>)
 800d090:	881b      	ldrh	r3, [r3, #0]
 800d092:	18d3      	adds	r3, r2, r3
 800d094:	b29a      	uxth	r2, r3
 800d096:	4b5d      	ldr	r3, [pc, #372]	@ (800d20c <temper+0x70c>)
 800d098:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d09a:	187b      	adds	r3, r7, r1
 800d09c:	781a      	ldrb	r2, [r3, #0]
 800d09e:	187b      	adds	r3, r7, r1
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	701a      	strb	r2, [r3, #0]
 800d0a4:	230d      	movs	r3, #13
 800d0a6:	18fb      	adds	r3, r7, r3
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b07      	cmp	r3, #7
 800d0ac:	d9e9      	bls.n	800d082 <temper+0x582>
	}
	resul = resul / 8;
 800d0ae:	4b57      	ldr	r3, [pc, #348]	@ (800d20c <temper+0x70c>)
 800d0b0:	881b      	ldrh	r3, [r3, #0]
 800d0b2:	08db      	lsrs	r3, r3, #3
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	4b55      	ldr	r3, [pc, #340]	@ (800d20c <temper+0x70c>)
 800d0b8:	801a      	strh	r2, [r3, #0]
	linealiza();
 800d0ba:	f000 fadf 	bl	800d67c <linealiza>
	X = tempo;
 800d0be:	4b55      	ldr	r3, [pc, #340]	@ (800d214 <temper+0x714>)
 800d0c0:	881a      	ldrh	r2, [r3, #0]
 800d0c2:	4b55      	ldr	r3, [pc, #340]	@ (800d218 <temper+0x718>)
 800d0c4:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 800d0c6:	4b54      	ldr	r3, [pc, #336]	@ (800d218 <temper+0x718>)
 800d0c8:	881a      	ldrh	r2, [r3, #0]
 800d0ca:	4b56      	ldr	r3, [pc, #344]	@ (800d224 <temper+0x724>)
 800d0cc:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800d0ce:	4b4f      	ldr	r3, [pc, #316]	@ (800d20c <temper+0x70c>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d0d4:	230c      	movs	r3, #12
 800d0d6:	18fb      	adds	r3, r7, r3
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
 800d0dc:	e010      	b.n	800d100 <temper+0x600>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 800d0de:	210c      	movs	r1, #12
 800d0e0:	187b      	adds	r3, r7, r1
 800d0e2:	781a      	ldrb	r2, [r3, #0]
 800d0e4:	4b48      	ldr	r3, [pc, #288]	@ (800d208 <temper+0x708>)
 800d0e6:	0052      	lsls	r2, r2, #1
 800d0e8:	5ad2      	ldrh	r2, [r2, r3]
 800d0ea:	4b48      	ldr	r3, [pc, #288]	@ (800d20c <temper+0x70c>)
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	18d3      	adds	r3, r2, r3
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	4b46      	ldr	r3, [pc, #280]	@ (800d20c <temper+0x70c>)
 800d0f4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d0f6:	187b      	adds	r3, r7, r1
 800d0f8:	781a      	ldrb	r2, [r3, #0]
 800d0fa:	187b      	adds	r3, r7, r1
 800d0fc:	3201      	adds	r2, #1
 800d0fe:	701a      	strb	r2, [r3, #0]
 800d100:	230c      	movs	r3, #12
 800d102:	18fb      	adds	r3, r7, r3
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b07      	cmp	r3, #7
 800d108:	d9e9      	bls.n	800d0de <temper+0x5de>
	}
	resul = resul / 8;
 800d10a:	4b40      	ldr	r3, [pc, #256]	@ (800d20c <temper+0x70c>)
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	08db      	lsrs	r3, r3, #3
 800d110:	b29a      	uxth	r2, r3
 800d112:	4b3e      	ldr	r3, [pc, #248]	@ (800d20c <temper+0x70c>)
 800d114:	801a      	strh	r2, [r3, #0]
	linealiza();
 800d116:	f000 fab1 	bl	800d67c <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 800d11a:	4b3e      	ldr	r3, [pc, #248]	@ (800d214 <temper+0x714>)
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	4b41      	ldr	r3, [pc, #260]	@ (800d228 <temper+0x728>)
 800d122:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 800d124:	4b3b      	ldr	r3, [pc, #236]	@ (800d214 <temper+0x714>)
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	0a1b      	lsrs	r3, r3, #8
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	4b3f      	ldr	r3, [pc, #252]	@ (800d22c <temper+0x72c>)
 800d130:	701a      	strb	r2, [r3, #0]

	resul = 0;
 800d132:	4b36      	ldr	r3, [pc, #216]	@ (800d20c <temper+0x70c>)
 800d134:	2200      	movs	r2, #0
 800d136:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d138:	230b      	movs	r3, #11
 800d13a:	18fb      	adds	r3, r7, r3
 800d13c:	2200      	movs	r2, #0
 800d13e:	701a      	strb	r2, [r3, #0]
 800d140:	e010      	b.n	800d164 <temper+0x664>
	{
		resul = resul + tambram[i];    // Calcula el promedio
 800d142:	210b      	movs	r1, #11
 800d144:	187b      	adds	r3, r7, r1
 800d146:	781a      	ldrb	r2, [r3, #0]
 800d148:	4b2b      	ldr	r3, [pc, #172]	@ (800d1f8 <temper+0x6f8>)
 800d14a:	0052      	lsls	r2, r2, #1
 800d14c:	5ad2      	ldrh	r2, [r2, r3]
 800d14e:	4b2f      	ldr	r3, [pc, #188]	@ (800d20c <temper+0x70c>)
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	18d3      	adds	r3, r2, r3
 800d154:	b29a      	uxth	r2, r3
 800d156:	4b2d      	ldr	r3, [pc, #180]	@ (800d20c <temper+0x70c>)
 800d158:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800d15a:	187b      	adds	r3, r7, r1
 800d15c:	781a      	ldrb	r2, [r3, #0]
 800d15e:	187b      	adds	r3, r7, r1
 800d160:	3201      	adds	r2, #1
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	230b      	movs	r3, #11
 800d166:	18fb      	adds	r3, r7, r3
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b07      	cmp	r3, #7
 800d16c:	d9e9      	bls.n	800d142 <temper+0x642>
	}
	resul = resul / 8;
 800d16e:	4b27      	ldr	r3, [pc, #156]	@ (800d20c <temper+0x70c>)
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	08db      	lsrs	r3, r3, #3
 800d174:	b29a      	uxth	r2, r3
 800d176:	4b25      	ldr	r3, [pc, #148]	@ (800d20c <temper+0x70c>)
 800d178:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 800d17a:	4b2d      	ldr	r3, [pc, #180]	@ (800d230 <temper+0x730>)
 800d17c:	881a      	ldrh	r2, [r3, #0]
 800d17e:	4b18      	ldr	r3, [pc, #96]	@ (800d1e0 <temper+0x6e0>)
 800d180:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 800d182:	4b17      	ldr	r3, [pc, #92]	@ (800d1e0 <temper+0x6e0>)
 800d184:	881a      	ldrh	r2, [r3, #0]
 800d186:	4b21      	ldr	r3, [pc, #132]	@ (800d20c <temper+0x70c>)
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	4b14      	ldr	r3, [pc, #80]	@ (800d1e0 <temper+0x6e0>)
 800d190:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800d192:	4b13      	ldr	r3, [pc, #76]	@ (800d1e0 <temper+0x6e0>)
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d100      	bne.n	800d19c <temper+0x69c>
 800d19a:	e0ab      	b.n	800d2f4 <temper+0x7f4>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 800d19c:	4b10      	ldr	r3, [pc, #64]	@ (800d1e0 <temper+0x6e0>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	b21b      	sxth	r3, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	da46      	bge.n	800d234 <temper+0x734>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 800d1a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d1e0 <temper+0x6e0>)
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d1e0 <temper+0x6e0>)
 800d1b0:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800d1b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d1e0 <temper+0x6e0>)
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d056      	beq.n	800d268 <temper+0x768>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 800d1ba:	4b14      	ldr	r3, [pc, #80]	@ (800d20c <temper+0x70c>)
 800d1bc:	881a      	ldrh	r2, [r3, #0]
 800d1be:	4b08      	ldr	r3, [pc, #32]	@ (800d1e0 <temper+0x6e0>)
 800d1c0:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 800d1c2:	4b07      	ldr	r3, [pc, #28]	@ (800d1e0 <temper+0x6e0>)
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	4b05      	ldr	r3, [pc, #20]	@ (800d1e0 <temper+0x6e0>)
 800d1cc:	801a      	strh	r2, [r3, #0]
	resul = Y;
 800d1ce:	4b04      	ldr	r3, [pc, #16]	@ (800d1e0 <temper+0x6e0>)
 800d1d0:	881a      	ldrh	r2, [r3, #0]
 800d1d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d20c <temper+0x70c>)
 800d1d4:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 800d1d6:	e076      	b.n	800d2c6 <temper+0x7c6>
 800d1d8:	20000b94 	.word	0x20000b94
 800d1dc:	200021f6 	.word	0x200021f6
 800d1e0:	200021f8 	.word	0x200021f8
 800d1e4:	20000b84 	.word	0x20000b84
 800d1e8:	20000bc0 	.word	0x20000bc0
 800d1ec:	20000bc3 	.word	0x20000bc3
 800d1f0:	20000bbc 	.word	0x20000bbc
 800d1f4:	20000b5c 	.word	0x20000b5c
 800d1f8:	200021d4 	.word	0x200021d4
 800d1fc:	40012400 	.word	0x40012400
 800d200:	000003b5 	.word	0x000003b5
 800d204:	20000bc1 	.word	0x20000bc1
 800d208:	200021e4 	.word	0x200021e4
 800d20c:	200021fc 	.word	0x200021fc
 800d210:	200021b4 	.word	0x200021b4
 800d214:	200021fe 	.word	0x200021fe
 800d218:	200021fa 	.word	0x200021fa
 800d21c:	2000212c 	.word	0x2000212c
 800d220:	200021c4 	.word	0x200021c4
 800d224:	20000c50 	.word	0x20000c50
 800d228:	20000baf 	.word	0x20000baf
 800d22c:	20000bae 	.word	0x20000bae
 800d230:	20002202 	.word	0x20002202
		goto tempe25b;            //La diferencia de promedios es positiva?
 800d234:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 800d236:	4bc4      	ldr	r3, [pc, #784]	@ (800d548 <temper+0xa48>)
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	4bc2      	ldr	r3, [pc, #776]	@ (800d548 <temper+0xa48>)
 800d240:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d242:	4bc1      	ldr	r3, [pc, #772]	@ (800d548 <temper+0xa48>)
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d010      	beq.n	800d26c <temper+0x76c>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 800d24a:	4bc0      	ldr	r3, [pc, #768]	@ (800d54c <temper+0xa4c>)
 800d24c:	881a      	ldrh	r2, [r3, #0]
 800d24e:	4bbe      	ldr	r3, [pc, #760]	@ (800d548 <temper+0xa48>)
 800d250:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 800d252:	4bbd      	ldr	r3, [pc, #756]	@ (800d548 <temper+0xa48>)
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	3301      	adds	r3, #1
 800d258:	b29a      	uxth	r2, r3
 800d25a:	4bbb      	ldr	r3, [pc, #748]	@ (800d548 <temper+0xa48>)
 800d25c:	801a      	strh	r2, [r3, #0]
		resul = Y;
 800d25e:	4bba      	ldr	r3, [pc, #744]	@ (800d548 <temper+0xa48>)
 800d260:	881a      	ldrh	r2, [r3, #0]
 800d262:	4bba      	ldr	r3, [pc, #744]	@ (800d54c <temper+0xa4c>)
 800d264:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 800d266:	e02e      	b.n	800d2c6 <temper+0x7c6>
		goto vesiestab;  		  // Si, revisa estabilidad
 800d268:	46c0      	nop			@ (mov r8, r8)
 800d26a:	e000      	b.n	800d26e <temper+0x76e>
			goto vesiestab;       // Si, revisa estabilidad
 800d26c:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 800d26e:	4bb8      	ldr	r3, [pc, #736]	@ (800d550 <temper+0xa50>)
 800d270:	881a      	ldrh	r2, [r3, #0]
 800d272:	4bb5      	ldr	r3, [pc, #724]	@ (800d548 <temper+0xa48>)
 800d274:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 800d276:	4bb4      	ldr	r3, [pc, #720]	@ (800d548 <temper+0xa48>)
 800d278:	881a      	ldrh	r2, [r3, #0]
 800d27a:	4bb4      	ldr	r3, [pc, #720]	@ (800d54c <temper+0xa4c>)
 800d27c:	881b      	ldrh	r3, [r3, #0]
 800d27e:	1ad3      	subs	r3, r2, r3
 800d280:	b29a      	uxth	r2, r3
 800d282:	4bb1      	ldr	r3, [pc, #708]	@ (800d548 <temper+0xa48>)
 800d284:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d286:	4bb0      	ldr	r3, [pc, #704]	@ (800d548 <temper+0xa48>)
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <temper+0x796>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 800d28e:	4bb1      	ldr	r3, [pc, #708]	@ (800d554 <temper+0xa54>)
 800d290:	2200      	movs	r2, #0
 800d292:	701a      	strb	r2, [r3, #0]
		goto noestab;
 800d294:	e006      	b.n	800d2a4 <temper+0x7a4>
			goto estable;  // El nuevo dato es igual a último?
 800d296:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 800d298:	4bae      	ldr	r3, [pc, #696]	@ (800d554 <temper+0xa54>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	3301      	adds	r3, #1
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	4bac      	ldr	r3, [pc, #688]	@ (800d554 <temper+0xa54>)
 800d2a2:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 800d2a4:	4ba9      	ldr	r3, [pc, #676]	@ (800d54c <temper+0xa4c>)
 800d2a6:	881a      	ldrh	r2, [r3, #0]
 800d2a8:	4ba7      	ldr	r3, [pc, #668]	@ (800d548 <temper+0xa48>)
 800d2aa:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 800d2ac:	4ba6      	ldr	r3, [pc, #664]	@ (800d548 <temper+0xa48>)
 800d2ae:	881a      	ldrh	r2, [r3, #0]
 800d2b0:	4ba7      	ldr	r3, [pc, #668]	@ (800d550 <temper+0xa50>)
 800d2b2:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 800d2b4:	4ba7      	ldr	r3, [pc, #668]	@ (800d554 <temper+0xa54>)
 800d2b6:	781a      	ldrb	r2, [r3, #0]
 800d2b8:	4ba7      	ldr	r3, [pc, #668]	@ (800d558 <temper+0xa58>)
 800d2ba:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 800d2bc:	4ba6      	ldr	r3, [pc, #664]	@ (800d558 <temper+0xa58>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b0e      	cmp	r3, #14
 800d2c2:	d920      	bls.n	800d306 <temper+0x806>
			goto tempe29;

tempe26:
 800d2c4:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 800d2c6:	4ba1      	ldr	r3, [pc, #644]	@ (800d54c <temper+0xa4c>)
 800d2c8:	881a      	ldrh	r2, [r3, #0]
 800d2ca:	4ba4      	ldr	r3, [pc, #656]	@ (800d55c <temper+0xa5c>)
 800d2cc:	801a      	strh	r2, [r3, #0]
		promant = X;
 800d2ce:	4ba3      	ldr	r3, [pc, #652]	@ (800d55c <temper+0xa5c>)
 800d2d0:	881a      	ldrh	r2, [r3, #0]
 800d2d2:	4ba3      	ldr	r3, [pc, #652]	@ (800d560 <temper+0xa60>)
 800d2d4:	801a      	strh	r2, [r3, #0]
		linealiza();
 800d2d6:	f000 f9d1 	bl	800d67c <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 800d2da:	4ba2      	ldr	r3, [pc, #648]	@ (800d564 <temper+0xa64>)
 800d2dc:	881b      	ldrh	r3, [r3, #0]
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	4ba1      	ldr	r3, [pc, #644]	@ (800d568 <temper+0xa68>)
 800d2e2:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 800d2e4:	4b9f      	ldr	r3, [pc, #636]	@ (800d564 <temper+0xa64>)
 800d2e6:	881b      	ldrh	r3, [r3, #0]
 800d2e8:	0a1b      	lsrs	r3, r3, #8
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	4b9f      	ldr	r3, [pc, #636]	@ (800d56c <temper+0xa6c>)
 800d2f0:	701a      	strb	r2, [r3, #0]
 800d2f2:	e000      	b.n	800d2f6 <temper+0x7f6>
		goto tempe27;                //nota1: checar comparaciones
 800d2f4:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 800d2f6:	4b9a      	ldr	r3, [pc, #616]	@ (800d560 <temper+0xa60>)
 800d2f8:	881a      	ldrh	r2, [r3, #0]
 800d2fa:	4b95      	ldr	r3, [pc, #596]	@ (800d550 <temper+0xa50>)
 800d2fc:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 800d2fe:	4b95      	ldr	r3, [pc, #596]	@ (800d554 <temper+0xa54>)
 800d300:	2200      	movs	r2, #0
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	e000      	b.n	800d308 <temper+0x808>
			goto tempe29;
 800d306:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 800d308:	f7f9 f8c6 	bl	8006498 <tdev_to_Word>
 800d30c:	0003      	movs	r3, r0
 800d30e:	b29a      	uxth	r2, r3
 800d310:	4b92      	ldr	r3, [pc, #584]	@ (800d55c <temper+0xa5c>)
 800d312:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d314:	4b91      	ldr	r3, [pc, #580]	@ (800d55c <temper+0xa5c>)
 800d316:	881a      	ldrh	r2, [r3, #0]
 800d318:	4b95      	ldr	r3, [pc, #596]	@ (800d570 <temper+0xa70>)
 800d31a:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 800d31c:	4b95      	ldr	r3, [pc, #596]	@ (800d574 <temper+0xa74>)
 800d31e:	2259      	movs	r2, #89	@ 0x59
 800d320:	5c9a      	ldrb	r2, [r3, r2]
 800d322:	4b8d      	ldr	r3, [pc, #564]	@ (800d558 <temper+0xa58>)
 800d324:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 800d326:	4b8c      	ldr	r3, [pc, #560]	@ (800d558 <temper+0xa58>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d91d      	bls.n	800d36a <temper+0x86a>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 800d32e:	4b91      	ldr	r3, [pc, #580]	@ (800d574 <temper+0xa74>)
 800d330:	2253      	movs	r2, #83	@ 0x53
 800d332:	5c9b      	ldrb	r3, [r3, r2]
 800d334:	b25b      	sxtb	r3, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	da19      	bge.n	800d36e <temper+0x86e>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 800d33a:	4b8f      	ldr	r3, [pc, #572]	@ (800d578 <temper+0xa78>)
 800d33c:	791b      	ldrb	r3, [r3, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d107      	bne.n	800d352 <temper+0x852>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 800d342:	4b8d      	ldr	r3, [pc, #564]	@ (800d578 <temper+0xa78>)
 800d344:	795b      	ldrb	r3, [r3, #5]
 800d346:	2201      	movs	r2, #1
 800d348:	4053      	eors	r3, r2
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d102      	bne.n	800d356 <temper+0x856>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 800d350:	e000      	b.n	800d354 <temper+0x854>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 800d352:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 800d354:	e00c      	b.n	800d370 <temper+0x870>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 800d356:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 800d358:	4b88      	ldr	r3, [pc, #544]	@ (800d57c <temper+0xa7c>)
 800d35a:	881a      	ldrh	r2, [r3, #0]
 800d35c:	4b7f      	ldr	r3, [pc, #508]	@ (800d55c <temper+0xa5c>)
 800d35e:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800d360:	4b7e      	ldr	r3, [pc, #504]	@ (800d55c <temper+0xa5c>)
 800d362:	881a      	ldrh	r2, [r3, #0]
 800d364:	4b82      	ldr	r3, [pc, #520]	@ (800d570 <temper+0xa70>)
 800d366:	801a      	strh	r2, [r3, #0]
 800d368:	e002      	b.n	800d370 <temper+0x870>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 800d36a:	46c0      	nop			@ (mov r8, r8)
 800d36c:	e000      	b.n	800d370 <temper+0x870>
			goto tempe26a;
 800d36e:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 800d370:	4b83      	ldr	r3, [pc, #524]	@ (800d580 <temper+0xa80>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d014      	beq.n	800d3a2 <temper+0x8a2>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 800d378:	4b81      	ldr	r3, [pc, #516]	@ (800d580 <temper+0xa80>)
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2b08      	cmp	r3, #8
 800d37e:	d800      	bhi.n	800d382 <temper+0x882>
 800d380:	e073      	b.n	800d46a <temper+0x96a>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 800d382:	4b76      	ldr	r3, [pc, #472]	@ (800d55c <temper+0xa5c>)
 800d384:	4a7f      	ldr	r2, [pc, #508]	@ (800d584 <temper+0xa84>)
 800d386:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 800d388:	4b74      	ldr	r3, [pc, #464]	@ (800d55c <temper+0xa5c>)
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	0a1b      	lsrs	r3, r3, #8
 800d38e:	b29b      	uxth	r3, r3
 800d390:	b2da      	uxtb	r2, r3
 800d392:	4b76      	ldr	r3, [pc, #472]	@ (800d56c <temper+0xa6c>)
 800d394:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 800d396:	4b71      	ldr	r3, [pc, #452]	@ (800d55c <temper+0xa5c>)
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	4b72      	ldr	r3, [pc, #456]	@ (800d568 <temper+0xa68>)
 800d39e:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 800d3a0:	e0a2      	b.n	800d4e8 <temper+0x9e8>
			goto tempe30;              // Si
 800d3a2:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 800d3a4:	4b78      	ldr	r3, [pc, #480]	@ (800d588 <temper+0xa88>)
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	4053      	eors	r3, r2
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d05d      	beq.n	800d46e <temper+0x96e>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 800d3b2:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 800d3b4:	4b75      	ldr	r3, [pc, #468]	@ (800d58c <temper+0xa8c>)
 800d3b6:	881a      	ldrh	r2, [r3, #0]
 800d3b8:	4b63      	ldr	r3, [pc, #396]	@ (800d548 <temper+0xa48>)
 800d3ba:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 800d3bc:	4b62      	ldr	r3, [pc, #392]	@ (800d548 <temper+0xa48>)
 800d3be:	881a      	ldrh	r2, [r3, #0]
 800d3c0:	4b6b      	ldr	r3, [pc, #428]	@ (800d570 <temper+0xa70>)
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	4b5f      	ldr	r3, [pc, #380]	@ (800d548 <temper+0xa48>)
 800d3ca:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800d3cc:	4b5e      	ldr	r3, [pc, #376]	@ (800d548 <temper+0xa48>)
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d100      	bne.n	800d3d6 <temper+0x8d6>
 800d3d4:	e083      	b.n	800d4de <temper+0x9de>
			goto tempe40;
		else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 800d3d6:	4b5c      	ldr	r3, [pc, #368]	@ (800d548 <temper+0xa48>)
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	b21b      	sxth	r3, r3
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	da48      	bge.n	800d472 <temper+0x972>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 800d3e0:	4b64      	ldr	r3, [pc, #400]	@ (800d574 <temper+0xa74>)
 800d3e2:	2254      	movs	r2, #84	@ 0x54
 800d3e4:	5c9a      	ldrb	r2, [r3, r2]
 800d3e6:	4b5c      	ldr	r3, [pc, #368]	@ (800d558 <temper+0xa58>)
 800d3e8:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 800d3ea:	4b5b      	ldr	r3, [pc, #364]	@ (800d558 <temper+0xa58>)
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d041      	beq.n	800d476 <temper+0x976>
			goto tempe39;
		A = A << 1;
 800d3f2:	4b59      	ldr	r3, [pc, #356]	@ (800d558 <temper+0xa58>)
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	18db      	adds	r3, r3, r3
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	4b57      	ldr	r3, [pc, #348]	@ (800d558 <temper+0xa58>)
 800d3fc:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 800d3fe:	4b64      	ldr	r3, [pc, #400]	@ (800d590 <temper+0xa90>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	3301      	adds	r3, #1
 800d404:	b2da      	uxtb	r2, r3
 800d406:	4b62      	ldr	r3, [pc, #392]	@ (800d590 <temper+0xa90>)
 800d408:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 800d40a:	4b53      	ldr	r3, [pc, #332]	@ (800d558 <temper+0xa58>)
 800d40c:	781a      	ldrb	r2, [r3, #0]
 800d40e:	4b60      	ldr	r3, [pc, #384]	@ (800d590 <temper+0xa90>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	429a      	cmp	r2, r3
 800d414:	d900      	bls.n	800d418 <temper+0x918>
 800d416:	e06b      	b.n	800d4f0 <temper+0x9f0>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 800d418:	4b4b      	ldr	r3, [pc, #300]	@ (800d548 <temper+0xa48>)
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	425b      	negs	r3, r3
 800d41e:	b29a      	uxth	r2, r3
 800d420:	4b49      	ldr	r3, [pc, #292]	@ (800d548 <temper+0xa48>)
 800d422:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 800d424:	4b48      	ldr	r3, [pc, #288]	@ (800d548 <temper+0xa48>)
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	2b0a      	cmp	r3, #10
 800d42a:	d90e      	bls.n	800d44a <temper+0x94a>
			goto tempe37b;

		X = tDisplay_w;
 800d42c:	4b50      	ldr	r3, [pc, #320]	@ (800d570 <temper+0xa70>)
 800d42e:	881a      	ldrh	r2, [r3, #0]
 800d430:	4b4a      	ldr	r3, [pc, #296]	@ (800d55c <temper+0xa5c>)
 800d432:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 800d434:	4b49      	ldr	r3, [pc, #292]	@ (800d55c <temper+0xa5c>)
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	3b0a      	subs	r3, #10
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	4b47      	ldr	r3, [pc, #284]	@ (800d55c <temper+0xa5c>)
 800d43e:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d440:	4b46      	ldr	r3, [pc, #280]	@ (800d55c <temper+0xa5c>)
 800d442:	881a      	ldrh	r2, [r3, #0]
 800d444:	4b53      	ldr	r3, [pc, #332]	@ (800d594 <temper+0xa94>)
 800d446:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d448:	e021      	b.n	800d48e <temper+0x98e>
			goto tempe37b;
 800d44a:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 800d44c:	4b4f      	ldr	r3, [pc, #316]	@ (800d58c <temper+0xa8c>)
 800d44e:	881a      	ldrh	r2, [r3, #0]
 800d450:	4b42      	ldr	r3, [pc, #264]	@ (800d55c <temper+0xa5c>)
 800d452:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 800d454:	4b41      	ldr	r3, [pc, #260]	@ (800d55c <temper+0xa5c>)
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	3301      	adds	r3, #1
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	4b3f      	ldr	r3, [pc, #252]	@ (800d55c <temper+0xa5c>)
 800d45e:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d460:	4b3e      	ldr	r3, [pc, #248]	@ (800d55c <temper+0xa5c>)
 800d462:	881a      	ldrh	r2, [r3, #0]
 800d464:	4b4b      	ldr	r3, [pc, #300]	@ (800d594 <temper+0xa94>)
 800d466:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800d468:	e011      	b.n	800d48e <temper+0x98e>
			goto tempe39;              // Si, cargalo al display
 800d46a:	46c0      	nop			@ (mov r8, r8)
 800d46c:	e004      	b.n	800d478 <temper+0x978>
		goto tempe39;
 800d46e:	46c0      	nop			@ (mov r8, r8)
 800d470:	e002      	b.n	800d478 <temper+0x978>
			goto tempe39;      // La diferencia es positiva?
 800d472:	46c0      	nop			@ (mov r8, r8)
 800d474:	e000      	b.n	800d478 <temper+0x978>
			goto tempe39;
 800d476:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 800d478:	4b3d      	ldr	r3, [pc, #244]	@ (800d570 <temper+0xa70>)
 800d47a:	881a      	ldrh	r2, [r3, #0]
 800d47c:	4b37      	ldr	r3, [pc, #220]	@ (800d55c <temper+0xa5c>)
 800d47e:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800d480:	4b36      	ldr	r3, [pc, #216]	@ (800d55c <temper+0xa5c>)
 800d482:	881a      	ldrh	r2, [r3, #0]
 800d484:	4b43      	ldr	r3, [pc, #268]	@ (800d594 <temper+0xa94>)
 800d486:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 800d488:	4b43      	ldr	r3, [pc, #268]	@ (800d598 <temper+0xa98>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	701a      	strb	r2, [r3, #0]
tempe39a:
//		tnz			cntHoldP;		/ Ya terminó el tiempo de bloqueo por puerta?
//		jrne		tempe40;  / no, congela display
//		;sí, pregunta por tiemmpo de bloqueo por deshielo

		if(cntHoldP)
 800d48e:	4b43      	ldr	r3, [pc, #268]	@ (800d59c <temper+0xa9c>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d125      	bne.n	800d4e2 <temper+0x9e2>
			goto tempe40;

		A = cnthold;
 800d496:	4b40      	ldr	r3, [pc, #256]	@ (800d598 <temper+0xa98>)
 800d498:	781a      	ldrb	r2, [r3, #0]
 800d49a:	4b2f      	ldr	r3, [pc, #188]	@ (800d558 <temper+0xa58>)
 800d49c:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 800d49e:	4b2e      	ldr	r3, [pc, #184]	@ (800d558 <temper+0xa58>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d011      	beq.n	800d4ca <temper+0x9ca>
			goto tempe39b;            // Si, carga el dato a tdevdpy

		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 800d4a6:	4b3e      	ldr	r3, [pc, #248]	@ (800d5a0 <temper+0xaa0>)
 800d4a8:	881a      	ldrh	r2, [r3, #0]
 800d4aa:	4b27      	ldr	r3, [pc, #156]	@ (800d548 <temper+0xa48>)
 800d4ac:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 800d4ae:	4b26      	ldr	r3, [pc, #152]	@ (800d548 <temper+0xa48>)
 800d4b0:	881a      	ldrh	r2, [r3, #0]
 800d4b2:	4b38      	ldr	r3, [pc, #224]	@ (800d594 <temper+0xa94>)
 800d4b4:	881b      	ldrh	r3, [r3, #0]
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	4b23      	ldr	r3, [pc, #140]	@ (800d548 <temper+0xa48>)
 800d4bc:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 800d4be:	4b22      	ldr	r3, [pc, #136]	@ (800d548 <temper+0xa48>)
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	b21b      	sxth	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	db0e      	blt.n	800d4e6 <temper+0x9e6>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 800d4c8:	e000      	b.n	800d4cc <temper+0x9cc>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 800d4ca:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 800d4cc:	4b31      	ldr	r3, [pc, #196]	@ (800d594 <temper+0xa94>)
 800d4ce:	881a      	ldrh	r2, [r3, #0]
 800d4d0:	4b22      	ldr	r3, [pc, #136]	@ (800d55c <temper+0xa5c>)
 800d4d2:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 800d4d4:	4b21      	ldr	r3, [pc, #132]	@ (800d55c <temper+0xa5c>)
 800d4d6:	881a      	ldrh	r2, [r3, #0]
 800d4d8:	4b2c      	ldr	r3, [pc, #176]	@ (800d58c <temper+0xa8c>)
 800d4da:	801a      	strh	r2, [r3, #0]
 800d4dc:	e004      	b.n	800d4e8 <temper+0x9e8>
			goto tempe40;
 800d4de:	46c0      	nop			@ (mov r8, r8)
 800d4e0:	e002      	b.n	800d4e8 <temper+0x9e8>
			goto tempe40;
 800d4e2:	46c0      	nop			@ (mov r8, r8)
 800d4e4:	e000      	b.n	800d4e8 <temper+0x9e8>
			goto tempe40;             // Si, congela el display en limsup
 800d4e6:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 800d4e8:	4b29      	ldr	r3, [pc, #164]	@ (800d590 <temper+0xa90>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	e000      	b.n	800d4f2 <temper+0x9f2>
			goto tempe50;
 800d4f0:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 800d4f2:	4b2c      	ldr	r3, [pc, #176]	@ (800d5a4 <temper+0xaa4>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 800d4f8:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a8 <temper+0xaa8>)
 800d4fa:	78db      	ldrb	r3, [r3, #3]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	4053      	eors	r3, r2
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10f      	bne.n	800d526 <temper+0xa26>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 800d506:	4b15      	ldr	r3, [pc, #84]	@ (800d55c <temper+0xa5c>)
 800d508:	4a1e      	ldr	r2, [pc, #120]	@ (800d584 <temper+0xa84>)
 800d50a:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 800d50c:	4b13      	ldr	r3, [pc, #76]	@ (800d55c <temper+0xa5c>)
 800d50e:	881b      	ldrh	r3, [r3, #0]
 800d510:	b2da      	uxtb	r2, r3
 800d512:	4b26      	ldr	r3, [pc, #152]	@ (800d5ac <temper+0xaac>)
 800d514:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 800d516:	4b11      	ldr	r3, [pc, #68]	@ (800d55c <temper+0xa5c>)
 800d518:	881b      	ldrh	r3, [r3, #0]
 800d51a:	0a1b      	lsrs	r3, r3, #8
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	4b23      	ldr	r3, [pc, #140]	@ (800d5b0 <temper+0xab0>)
 800d522:	701a      	strb	r2, [r3, #0]
 800d524:	e000      	b.n	800d528 <temper+0xa28>
			goto tempe52;
 800d526:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 800d528:	4b13      	ldr	r3, [pc, #76]	@ (800d578 <temper+0xa78>)
 800d52a:	795b      	ldrb	r3, [r3, #5]
 800d52c:	2201      	movs	r2, #1
 800d52e:	4053      	eors	r3, r2
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d13e      	bne.n	800d5b4 <temper+0xab4>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 800d536:	4b09      	ldr	r3, [pc, #36]	@ (800d55c <temper+0xa5c>)
 800d538:	4a12      	ldr	r2, [pc, #72]	@ (800d584 <temper+0xa84>)
 800d53a:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 800d53c:	4b07      	ldr	r3, [pc, #28]	@ (800d55c <temper+0xa5c>)
 800d53e:	881a      	ldrh	r2, [r3, #0]
 800d540:	4b0e      	ldr	r3, [pc, #56]	@ (800d57c <temper+0xa7c>)
 800d542:	801a      	strh	r2, [r3, #0]
 800d544:	e037      	b.n	800d5b6 <temper+0xab6>
 800d546:	46c0      	nop			@ (mov r8, r8)
 800d548:	200021f8 	.word	0x200021f8
 800d54c:	200021fc 	.word	0x200021fc
 800d550:	20002204 	.word	0x20002204
 800d554:	20000bc2 	.word	0x20000bc2
 800d558:	200021f6 	.word	0x200021f6
 800d55c:	200021fa 	.word	0x200021fa
 800d560:	20002202 	.word	0x20002202
 800d564:	200021fe 	.word	0x200021fe
 800d568:	20000bad 	.word	0x20000bad
 800d56c:	20000bac 	.word	0x20000bac
 800d570:	2000212e 	.word	0x2000212e
 800d574:	200000b8 	.word	0x200000b8
 800d578:	20000b7c 	.word	0x20000b7c
 800d57c:	20000c50 	.word	0x20000c50
 800d580:	20000bc0 	.word	0x20000bc0
 800d584:	fffffe34 	.word	0xfffffe34
 800d588:	20000b74 	.word	0x20000b74
 800d58c:	20000bb0 	.word	0x20000bb0
 800d590:	20000bbf 	.word	0x20000bbf
 800d594:	20002200 	.word	0x20002200
 800d598:	20000bc3 	.word	0x20000bc3
 800d59c:	2000213c 	.word	0x2000213c
 800d5a0:	20000baa 	.word	0x20000baa
 800d5a4:	20000bbc 	.word	0x20000bbc
 800d5a8:	20000b84 	.word	0x20000b84
 800d5ac:	20000baf 	.word	0x20000baf
 800d5b0:	20000bae 	.word	0x20000bae
			goto tempe53;
 800d5b4:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 800d5b6:	4b29      	ldr	r3, [pc, #164]	@ (800d65c <temper+0xb5c>)
 800d5b8:	79db      	ldrb	r3, [r3, #7]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	4053      	eors	r3, r2
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10b      	bne.n	800d5dc <temper+0xadc>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 800d5c4:	4b26      	ldr	r3, [pc, #152]	@ (800d660 <temper+0xb60>)
 800d5c6:	4a27      	ldr	r2, [pc, #156]	@ (800d664 <temper+0xb64>)
 800d5c8:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 800d5ca:	4b25      	ldr	r3, [pc, #148]	@ (800d660 <temper+0xb60>)
 800d5cc:	881a      	ldrh	r2, [r3, #0]
 800d5ce:	4b26      	ldr	r3, [pc, #152]	@ (800d668 <temper+0xb68>)
 800d5d0:	801a      	strh	r2, [r3, #0]
 800d5d2:	e004      	b.n	800d5de <temper+0xade>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 800d5d4:	46c0      	nop			@ (mov r8, r8)
 800d5d6:	e002      	b.n	800d5de <temper+0xade>
			goto fintemp;
 800d5d8:	46c0      	nop			@ (mov r8, r8)
 800d5da:	e000      	b.n	800d5de <temper+0xade>
			goto fintemp;
 800d5dc:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 800d5de:	4b23      	ldr	r3, [pc, #140]	@ (800d66c <temper+0xb6c>)
 800d5e0:	781a      	ldrb	r2, [r3, #0]
 800d5e2:	4b23      	ldr	r3, [pc, #140]	@ (800d670 <temper+0xb70>)
 800d5e4:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 800d5e6:	4b22      	ldr	r3, [pc, #136]	@ (800d670 <temper+0xb70>)
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d02c      	beq.n	800d648 <temper+0xb48>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 800d5ee:	4b21      	ldr	r3, [pc, #132]	@ (800d674 <temper+0xb74>)
 800d5f0:	2259      	movs	r2, #89	@ 0x59
 800d5f2:	5c9a      	ldrb	r2, [r3, r2]
 800d5f4:	4b1e      	ldr	r3, [pc, #120]	@ (800d670 <temper+0xb70>)
 800d5f6:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 800d5f8:	4b1d      	ldr	r3, [pc, #116]	@ (800d670 <temper+0xb70>)
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	2b04      	cmp	r3, #4
 800d5fe:	d025      	beq.n	800d64c <temper+0xb4c>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 800d600:	4b1b      	ldr	r3, [pc, #108]	@ (800d670 <temper+0xb70>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b03      	cmp	r3, #3
 800d606:	d017      	beq.n	800d638 <temper+0xb38>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 800d608:	4b19      	ldr	r3, [pc, #100]	@ (800d670 <temper+0xb70>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d00b      	beq.n	800d628 <temper+0xb28>
			goto clrRetFail;
		if (A != 1)
 800d610:	4b17      	ldr	r3, [pc, #92]	@ (800d670 <temper+0xb70>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d11b      	bne.n	800d650 <temper+0xb50>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 800d618:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 800d61a:	4917      	ldr	r1, [pc, #92]	@ (800d678 <temper+0xb78>)
 800d61c:	4816      	ldr	r0, [pc, #88]	@ (800d678 <temper+0xb78>)
 800d61e:	2303      	movs	r3, #3
 800d620:	2202      	movs	r2, #2
 800d622:	f000 fa04 	bl	800da2e <Bclear_Clear_trfst>
 800d626:	e000      	b.n	800d62a <temper+0xb2a>
			goto clrRetFail;
 800d628:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 800d62a:	490c      	ldr	r1, [pc, #48]	@ (800d65c <temper+0xb5c>)
 800d62c:	480b      	ldr	r0, [pc, #44]	@ (800d65c <temper+0xb5c>)
 800d62e:	2305      	movs	r3, #5
 800d630:	2204      	movs	r2, #4
 800d632:	f000 f9fc 	bl	800da2e <Bclear_Clear_trfst>
 800d636:	e000      	b.n	800d63a <temper+0xb3a>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 800d638:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 800d63a:	4908      	ldr	r1, [pc, #32]	@ (800d65c <temper+0xb5c>)
 800d63c:	480e      	ldr	r0, [pc, #56]	@ (800d678 <temper+0xb78>)
 800d63e:	2307      	movs	r3, #7
 800d640:	2205      	movs	r2, #5
 800d642:	f000 f9f4 	bl	800da2e <Bclear_Clear_trfst>
 800d646:	e004      	b.n	800d652 <temper+0xb52>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 800d648:	46c0      	nop			@ (mov r8, r8)
 800d64a:	e002      	b.n	800d652 <temper+0xb52>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 800d64c:	46c0      	nop			@ (mov r8, r8)
 800d64e:	e000      	b.n	800d652 <temper+0xb52>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 800d650:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 800d652:	46c0      	nop			@ (mov r8, r8)




}
 800d654:	46c0      	nop			@ (mov r8, r8)
 800d656:	46bd      	mov	sp, r7
 800d658:	b004      	add	sp, #16
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20000b7c 	.word	0x20000b7c
 800d660:	200021fa 	.word	0x200021fa
 800d664:	fffffe34 	.word	0xfffffe34
 800d668:	2000212c 	.word	0x2000212c
 800d66c:	20000b94 	.word	0x20000b94
 800d670:	200021f6 	.word	0x200021f6
 800d674:	200000b8 	.word	0x200000b8
 800d678:	20000b84 	.word	0x20000b84

0800d67c <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	af00      	add	r7, sp, #0
	tempo = 0;
 800d680:	4b57      	ldr	r3, [pc, #348]	@ (800d7e0 <linealiza+0x164>)
 800d682:	2200      	movs	r2, #0
 800d684:	801a      	strh	r2, [r3, #0]
	Y = resul;
 800d686:	4b57      	ldr	r3, [pc, #348]	@ (800d7e4 <linealiza+0x168>)
 800d688:	881a      	ldrh	r2, [r3, #0]
 800d68a:	4b57      	ldr	r3, [pc, #348]	@ (800d7e8 <linealiza+0x16c>)
 800d68c:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 800d68e:	4b56      	ldr	r3, [pc, #344]	@ (800d7e8 <linealiza+0x16c>)
 800d690:	881a      	ldrh	r2, [r3, #0]
 800d692:	4b56      	ldr	r3, [pc, #344]	@ (800d7ec <linealiza+0x170>)
 800d694:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 800d696:	4b55      	ldr	r3, [pc, #340]	@ (800d7ec <linealiza+0x170>)
 800d698:	881b      	ldrh	r3, [r3, #0]
 800d69a:	4a55      	ldr	r2, [pc, #340]	@ (800d7f0 <linealiza+0x174>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d80e      	bhi.n	800d6be <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 800d6a0:	4b52      	ldr	r3, [pc, #328]	@ (800d7ec <linealiza+0x170>)
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	4a53      	ldr	r2, [pc, #332]	@ (800d7f4 <linealiza+0x178>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d810      	bhi.n	800d6cc <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 800d6aa:	4b50      	ldr	r3, [pc, #320]	@ (800d7ec <linealiza+0x170>)
 800d6ac:	881b      	ldrh	r3, [r3, #0]
 800d6ae:	4a52      	ldr	r2, [pc, #328]	@ (800d7f8 <linealiza+0x17c>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d812      	bhi.n	800d6da <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 800d6b4:	4b4d      	ldr	r3, [pc, #308]	@ (800d7ec <linealiza+0x170>)
 800d6b6:	881b      	ldrh	r3, [r3, #0]
 800d6b8:	2bca      	cmp	r3, #202	@ 0xca
 800d6ba:	d91c      	bls.n	800d6f6 <linealiza+0x7a>
		goto lil_principal;
 800d6bc:	e015      	b.n	800d6ea <linealiza+0x6e>
		goto wise_hot_3;
 800d6be:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 800d6c0:	4b4e      	ldr	r3, [pc, #312]	@ (800d7fc <linealiza+0x180>)
 800d6c2:	0019      	movs	r1, r3
 800d6c4:	2053      	movs	r0, #83	@ 0x53
 800d6c6:	f000 f94d 	bl	800d964 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 800d6ca:	e01b      	b.n	800d704 <linealiza+0x88>
		goto wise_hot_2;
 800d6cc:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 800d6ce:	4b4c      	ldr	r3, [pc, #304]	@ (800d800 <linealiza+0x184>)
 800d6d0:	0019      	movs	r1, r3
 800d6d2:	2034      	movs	r0, #52	@ 0x34
 800d6d4:	f000 f946 	bl	800d964 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 800d6d8:	e014      	b.n	800d704 <linealiza+0x88>
		goto wise_hot_1;
 800d6da:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 800d6dc:	2393      	movs	r3, #147	@ 0x93
 800d6de:	01db      	lsls	r3, r3, #7
 800d6e0:	0019      	movs	r1, r3
 800d6e2:	201d      	movs	r0, #29
 800d6e4:	f000 f93e 	bl	800d964 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 800d6e8:	e00c      	b.n	800d704 <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 800d6ea:	4b46      	ldr	r3, [pc, #280]	@ (800d804 <linealiza+0x188>)
 800d6ec:	0019      	movs	r1, r3
 800d6ee:	2013      	movs	r0, #19
 800d6f0:	f000 f938 	bl	800d964 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 800d6f4:	e006      	b.n	800d704 <linealiza+0x88>
		goto curva_fria;
 800d6f6:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 800d6f8:	23de      	movs	r3, #222	@ 0xde
 800d6fa:	019b      	lsls	r3, r3, #6
 800d6fc:	0019      	movs	r1, r3
 800d6fe:	201e      	movs	r0, #30
 800d700:	f000 f930 	bl	800d964 <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 800d704:	4b36      	ldr	r3, [pc, #216]	@ (800d7e0 <linealiza+0x164>)
 800d706:	881a      	ldrh	r2, [r3, #0]
 800d708:	4b3f      	ldr	r3, [pc, #252]	@ (800d808 <linealiza+0x18c>)
 800d70a:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 800d70c:	4b3e      	ldr	r3, [pc, #248]	@ (800d808 <linealiza+0x18c>)
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	4b35      	ldr	r3, [pc, #212]	@ (800d7e8 <linealiza+0x16c>)
 800d712:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 800d714:	4b34      	ldr	r3, [pc, #208]	@ (800d7e8 <linealiza+0x16c>)
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	b21b      	sxth	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	da05      	bge.n	800d72a <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 800d71e:	4b3a      	ldr	r3, [pc, #232]	@ (800d808 <linealiza+0x18c>)
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	425b      	negs	r3, r3
 800d724:	b29a      	uxth	r2, r3
 800d726:	4b38      	ldr	r3, [pc, #224]	@ (800d808 <linealiza+0x18c>)
 800d728:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 800d72a:	4b37      	ldr	r3, [pc, #220]	@ (800d808 <linealiza+0x18c>)
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	0a1b      	lsrs	r3, r3, #8
 800d730:	b29b      	uxth	r3, r3
 800d732:	b2da      	uxtb	r2, r3
 800d734:	4b35      	ldr	r3, [pc, #212]	@ (800d80c <linealiza+0x190>)
 800d736:	701a      	strb	r2, [r3, #0]
	waux = A;
 800d738:	4b34      	ldr	r3, [pc, #208]	@ (800d80c <linealiza+0x190>)
 800d73a:	781a      	ldrb	r2, [r3, #0]
 800d73c:	4b34      	ldr	r3, [pc, #208]	@ (800d810 <linealiza+0x194>)
 800d73e:	701a      	strb	r2, [r3, #0]
	A = 10;
 800d740:	4b32      	ldr	r3, [pc, #200]	@ (800d80c <linealiza+0x190>)
 800d742:	220a      	movs	r2, #10
 800d744:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 800d746:	4b30      	ldr	r3, [pc, #192]	@ (800d808 <linealiza+0x18c>)
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	001a      	movs	r2, r3
 800d74e:	4b2f      	ldr	r3, [pc, #188]	@ (800d80c <linealiza+0x190>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	4353      	muls	r3, r2
 800d754:	b29a      	uxth	r2, r3
 800d756:	4b2c      	ldr	r3, [pc, #176]	@ (800d808 <linealiza+0x18c>)
 800d758:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 800d75a:	4b2b      	ldr	r3, [pc, #172]	@ (800d808 <linealiza+0x18c>)
 800d75c:	881b      	ldrh	r3, [r3, #0]
 800d75e:	0a1b      	lsrs	r3, r3, #8
 800d760:	b29b      	uxth	r3, r3
 800d762:	b2da      	uxtb	r2, r3
 800d764:	4b29      	ldr	r3, [pc, #164]	@ (800d80c <linealiza+0x190>)
 800d766:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 800d768:	4b27      	ldr	r3, [pc, #156]	@ (800d808 <linealiza+0x18c>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	801a      	strh	r2, [r3, #0]
	X = A;
 800d76e:	4b27      	ldr	r3, [pc, #156]	@ (800d80c <linealiza+0x190>)
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	001a      	movs	r2, r3
 800d774:	4b24      	ldr	r3, [pc, #144]	@ (800d808 <linealiza+0x18c>)
 800d776:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 800d778:	4b23      	ldr	r3, [pc, #140]	@ (800d808 <linealiza+0x18c>)
 800d77a:	881a      	ldrh	r2, [r3, #0]
 800d77c:	4b18      	ldr	r3, [pc, #96]	@ (800d7e0 <linealiza+0x164>)
 800d77e:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 800d780:	4b23      	ldr	r3, [pc, #140]	@ (800d810 <linealiza+0x194>)
 800d782:	781a      	ldrb	r2, [r3, #0]
 800d784:	4b21      	ldr	r3, [pc, #132]	@ (800d80c <linealiza+0x190>)
 800d786:	701a      	strb	r2, [r3, #0]
	X = A;
 800d788:	4b20      	ldr	r3, [pc, #128]	@ (800d80c <linealiza+0x190>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	001a      	movs	r2, r3
 800d78e:	4b1e      	ldr	r3, [pc, #120]	@ (800d808 <linealiza+0x18c>)
 800d790:	801a      	strh	r2, [r3, #0]

	A = 10;
 800d792:	4b1e      	ldr	r3, [pc, #120]	@ (800d80c <linealiza+0x190>)
 800d794:	220a      	movs	r2, #10
 800d796:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800d798:	4b1b      	ldr	r3, [pc, #108]	@ (800d808 <linealiza+0x18c>)
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	001a      	movs	r2, r3
 800d7a0:	4b1a      	ldr	r3, [pc, #104]	@ (800d80c <linealiza+0x190>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	4353      	muls	r3, r2
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	4b17      	ldr	r3, [pc, #92]	@ (800d808 <linealiza+0x18c>)
 800d7aa:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800d7ac:	4b16      	ldr	r3, [pc, #88]	@ (800d808 <linealiza+0x18c>)
 800d7ae:	881a      	ldrh	r2, [r3, #0]
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e0 <linealiza+0x164>)
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	18d3      	adds	r3, r2, r3
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	4b13      	ldr	r3, [pc, #76]	@ (800d808 <linealiza+0x18c>)
 800d7ba:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e8 <linealiza+0x16c>)
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	b21b      	sxth	r3, r3
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	da05      	bge.n	800d7d2 <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800d7c6:	4b10      	ldr	r3, [pc, #64]	@ (800d808 <linealiza+0x18c>)
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	425b      	negs	r3, r3
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d808 <linealiza+0x18c>)
 800d7d0:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800d7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d808 <linealiza+0x18c>)
 800d7d4:	881a      	ldrh	r2, [r3, #0]
 800d7d6:	4b02      	ldr	r3, [pc, #8]	@ (800d7e0 <linealiza+0x164>)
 800d7d8:	801a      	strh	r2, [r3, #0]
}
 800d7da:	46c0      	nop			@ (mov r8, r8)
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	200021fe 	.word	0x200021fe
 800d7e4:	200021fc 	.word	0x200021fc
 800d7e8:	200021f8 	.word	0x200021f8
 800d7ec:	200021f4 	.word	0x200021f4
 800d7f0:	0000038d 	.word	0x0000038d
 800d7f4:	00000339 	.word	0x00000339
 800d7f8:	000002aa 	.word	0x000002aa
 800d7fc:	0000ffff 	.word	0x0000ffff
 800d800:	000093cc 	.word	0x000093cc
 800d804:	00002ecc 	.word	0x00002ecc
 800d808:	200021fa 	.word	0x200021fa
 800d80c:	200021f6 	.word	0x200021f6
 800d810:	20000b52 	.word	0x20000b52

0800d814 <mult1x2>:

void mult1x2(void)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800d818:	4b2f      	ldr	r3, [pc, #188]	@ (800d8d8 <mult1x2+0xc4>)
 800d81a:	881a      	ldrh	r2, [r3, #0]
 800d81c:	4b2f      	ldr	r3, [pc, #188]	@ (800d8dc <mult1x2+0xc8>)
 800d81e:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800d820:	4b2e      	ldr	r3, [pc, #184]	@ (800d8dc <mult1x2+0xc8>)
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	0a1b      	lsrs	r3, r3, #8
 800d826:	b29b      	uxth	r3, r3
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	4b2d      	ldr	r3, [pc, #180]	@ (800d8e0 <mult1x2+0xcc>)
 800d82c:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d82e:	4b2c      	ldr	r3, [pc, #176]	@ (800d8e0 <mult1x2+0xcc>)
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	001a      	movs	r2, r3
 800d834:	4b28      	ldr	r3, [pc, #160]	@ (800d8d8 <mult1x2+0xc4>)
 800d836:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d838:	4b2a      	ldr	r3, [pc, #168]	@ (800d8e4 <mult1x2+0xd0>)
 800d83a:	781a      	ldrb	r2, [r3, #0]
 800d83c:	4b28      	ldr	r3, [pc, #160]	@ (800d8e0 <mult1x2+0xcc>)
 800d83e:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800d840:	4b27      	ldr	r3, [pc, #156]	@ (800d8e0 <mult1x2+0xcc>)
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	001a      	movs	r2, r3
 800d846:	4b24      	ldr	r3, [pc, #144]	@ (800d8d8 <mult1x2+0xc4>)
 800d848:	881b      	ldrh	r3, [r3, #0]
 800d84a:	4353      	muls	r3, r2
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	4b22      	ldr	r3, [pc, #136]	@ (800d8d8 <mult1x2+0xc4>)
 800d850:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800d852:	4b21      	ldr	r3, [pc, #132]	@ (800d8d8 <mult1x2+0xc4>)
 800d854:	881a      	ldrh	r2, [r3, #0]
 800d856:	4b24      	ldr	r3, [pc, #144]	@ (800d8e8 <mult1x2+0xd4>)
 800d858:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800d85a:	4b20      	ldr	r3, [pc, #128]	@ (800d8dc <mult1x2+0xc8>)
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	4b1f      	ldr	r3, [pc, #124]	@ (800d8e0 <mult1x2+0xcc>)
 800d862:	701a      	strb	r2, [r3, #0]
	Y = A;
 800d864:	4b1e      	ldr	r3, [pc, #120]	@ (800d8e0 <mult1x2+0xcc>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	001a      	movs	r2, r3
 800d86a:	4b1b      	ldr	r3, [pc, #108]	@ (800d8d8 <mult1x2+0xc4>)
 800d86c:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800d86e:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e4 <mult1x2+0xd0>)
 800d870:	781a      	ldrb	r2, [r3, #0]
 800d872:	4b1b      	ldr	r3, [pc, #108]	@ (800d8e0 <mult1x2+0xcc>)
 800d874:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800d876:	4b1a      	ldr	r3, [pc, #104]	@ (800d8e0 <mult1x2+0xcc>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	001a      	movs	r2, r3
 800d87c:	4b16      	ldr	r3, [pc, #88]	@ (800d8d8 <mult1x2+0xc4>)
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	4353      	muls	r3, r2
 800d882:	b29a      	uxth	r2, r3
 800d884:	4b14      	ldr	r3, [pc, #80]	@ (800d8d8 <mult1x2+0xc4>)
 800d886:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800d888:	4b13      	ldr	r3, [pc, #76]	@ (800d8d8 <mult1x2+0xc4>)
 800d88a:	881b      	ldrh	r3, [r3, #0]
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	4b14      	ldr	r3, [pc, #80]	@ (800d8e0 <mult1x2+0xcc>)
 800d890:	701a      	strb	r2, [r3, #0]
	resul = A;
 800d892:	4b13      	ldr	r3, [pc, #76]	@ (800d8e0 <mult1x2+0xcc>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	001a      	movs	r2, r3
 800d898:	4b10      	ldr	r3, [pc, #64]	@ (800d8dc <mult1x2+0xc8>)
 800d89a:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800d89c:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d8 <mult1x2+0xc4>)
 800d89e:	881b      	ldrh	r3, [r3, #0]
 800d8a0:	0a1b      	lsrs	r3, r3, #8
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d8e0 <mult1x2+0xcc>)
 800d8a8:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800d8aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d8e8 <mult1x2+0xd4>)
 800d8ac:	881b      	ldrh	r3, [r3, #0]
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d8e0 <mult1x2+0xcc>)
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	18d3      	adds	r3, r2, r3
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	4b09      	ldr	r3, [pc, #36]	@ (800d8e0 <mult1x2+0xcc>)
 800d8ba:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800d8bc:	4b08      	ldr	r3, [pc, #32]	@ (800d8e0 <mult1x2+0xcc>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	021b      	lsls	r3, r3, #8
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	4b05      	ldr	r3, [pc, #20]	@ (800d8dc <mult1x2+0xc8>)
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	18d3      	adds	r3, r2, r3
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	4b03      	ldr	r3, [pc, #12]	@ (800d8dc <mult1x2+0xc8>)
 800d8ce:	801a      	strh	r2, [r3, #0]
}
 800d8d0:	46c0      	nop			@ (mov r8, r8)
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	46c0      	nop			@ (mov r8, r8)
 800d8d8:	200021f8 	.word	0x200021f8
 800d8dc:	200021fc 	.word	0x200021fc
 800d8e0:	200021f6 	.word	0x200021f6
 800d8e4:	20000b53 	.word	0x20000b53
 800d8e8:	20002200 	.word	0x20002200

0800d8ec <capturaAD>:

void capturaAD (void)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800d8f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d95c <capturaAD+0x70>)
 800d8f4:	689a      	ldr	r2, [r3, #8]
 800d8f6:	4b19      	ldr	r3, [pc, #100]	@ (800d95c <capturaAD+0x70>)
 800d8f8:	2101      	movs	r1, #1
 800d8fa:	430a      	orrs	r2, r1
 800d8fc:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800d8fe:	4b17      	ldr	r3, [pc, #92]	@ (800d95c <capturaAD+0x70>)
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	4b16      	ldr	r3, [pc, #88]	@ (800d95c <capturaAD+0x70>)
 800d904:	211c      	movs	r1, #28
 800d906:	430a      	orrs	r2, r1
 800d908:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800d90a:	4b14      	ldr	r3, [pc, #80]	@ (800d95c <capturaAD+0x70>)
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	4b13      	ldr	r3, [pc, #76]	@ (800d95c <capturaAD+0x70>)
 800d910:	2104      	movs	r1, #4
 800d912:	430a      	orrs	r2, r1
 800d914:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800d916:	46c0      	nop			@ (mov r8, r8)
 800d918:	4b10      	ldr	r3, [pc, #64]	@ (800d95c <capturaAD+0x70>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2204      	movs	r2, #4
 800d91e:	4013      	ands	r3, r2
 800d920:	d0fa      	beq.n	800d918 <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800d922:	4b0e      	ldr	r3, [pc, #56]	@ (800d95c <capturaAD+0x70>)
 800d924:	689a      	ldr	r2, [r3, #8]
 800d926:	4b0d      	ldr	r3, [pc, #52]	@ (800d95c <capturaAD+0x70>)
 800d928:	210c      	movs	r1, #12
 800d92a:	438a      	bics	r2, r1
 800d92c:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 10; i++);
 800d92e:	1dfb      	adds	r3, r7, #7
 800d930:	2200      	movs	r2, #0
 800d932:	701a      	strb	r2, [r3, #0]
 800d934:	e004      	b.n	800d940 <capturaAD+0x54>
 800d936:	1dfb      	adds	r3, r7, #7
 800d938:	781a      	ldrb	r2, [r3, #0]
 800d93a:	1dfb      	adds	r3, r7, #7
 800d93c:	3201      	adds	r2, #1
 800d93e:	701a      	strb	r2, [r3, #0]
 800d940:	1dfb      	adds	r3, r7, #7
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b09      	cmp	r3, #9
 800d946:	d9f6      	bls.n	800d936 <capturaAD+0x4a>

	adcramh = ADC1->DR;
 800d948:	4b04      	ldr	r3, [pc, #16]	@ (800d95c <capturaAD+0x70>)
 800d94a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	4b04      	ldr	r3, [pc, #16]	@ (800d960 <capturaAD+0x74>)
 800d950:	801a      	strh	r2, [r3, #0]
}
 800d952:	46c0      	nop			@ (mov r8, r8)
 800d954:	46bd      	mov	sp, r7
 800d956:	b002      	add	sp, #8
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	46c0      	nop			@ (mov r8, r8)
 800d95c:	40012400 	.word	0x40012400
 800d960:	20000b5c 	.word	0x20000b5c

0800d964 <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	0002      	movs	r2, r0
 800d96c:	1dfb      	adds	r3, r7, #7
 800d96e:	701a      	strb	r2, [r3, #0]
 800d970:	1d3b      	adds	r3, r7, #4
 800d972:	1c0a      	adds	r2, r1, #0
 800d974:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800d976:	4b0f      	ldr	r3, [pc, #60]	@ (800d9b4 <wise_hot_rep+0x50>)
 800d978:	1dfa      	adds	r2, r7, #7
 800d97a:	7812      	ldrb	r2, [r2, #0]
 800d97c:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800d97e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9b8 <wise_hot_rep+0x54>)
 800d980:	881a      	ldrh	r2, [r3, #0]
 800d982:	4b0e      	ldr	r3, [pc, #56]	@ (800d9bc <wise_hot_rep+0x58>)
 800d984:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800d986:	f7ff ff45 	bl	800d814 <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800d98a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c0 <wise_hot_rep+0x5c>)
 800d98c:	881a      	ldrh	r2, [r3, #0]
 800d98e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c4 <wise_hot_rep+0x60>)
 800d990:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800d992:	4b0c      	ldr	r3, [pc, #48]	@ (800d9c4 <wise_hot_rep+0x60>)
 800d994:	881a      	ldrh	r2, [r3, #0]
 800d996:	1d3b      	adds	r3, r7, #4
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	4b09      	ldr	r3, [pc, #36]	@ (800d9c4 <wise_hot_rep+0x60>)
 800d9a0:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800d9a2:	4b08      	ldr	r3, [pc, #32]	@ (800d9c4 <wise_hot_rep+0x60>)
 800d9a4:	881a      	ldrh	r2, [r3, #0]
 800d9a6:	4b08      	ldr	r3, [pc, #32]	@ (800d9c8 <wise_hot_rep+0x64>)
 800d9a8:	801a      	strh	r2, [r3, #0]
}
 800d9aa:	46c0      	nop			@ (mov r8, r8)
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	b002      	add	sp, #8
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	46c0      	nop			@ (mov r8, r8)
 800d9b4:	20000b53 	.word	0x20000b53
 800d9b8:	200021f4 	.word	0x200021f4
 800d9bc:	200021f8 	.word	0x200021f8
 800d9c0:	200021fc 	.word	0x200021fc
 800d9c4:	200021fa 	.word	0x200021fa
 800d9c8:	200021fe 	.word	0x200021fe

0800d9cc <Y_A>:

void Y_A (void)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
	Y = adcramh;
 800d9d0:	4b05      	ldr	r3, [pc, #20]	@ (800d9e8 <Y_A+0x1c>)
 800d9d2:	881a      	ldrh	r2, [r3, #0]
 800d9d4:	4b05      	ldr	r3, [pc, #20]	@ (800d9ec <Y_A+0x20>)
 800d9d6:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800d9d8:	4b05      	ldr	r3, [pc, #20]	@ (800d9f0 <Y_A+0x24>)
 800d9da:	781a      	ldrb	r2, [r3, #0]
 800d9dc:	4b05      	ldr	r3, [pc, #20]	@ (800d9f4 <Y_A+0x28>)
 800d9de:	701a      	strb	r2, [r3, #0]
}
 800d9e0:	46c0      	nop			@ (mov r8, r8)
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	46c0      	nop			@ (mov r8, r8)
 800d9e8:	20000b5c 	.word	0x20000b5c
 800d9ec:	200021f8 	.word	0x200021f8
 800d9f0:	20000b94 	.word	0x20000b94
 800d9f4:	200021f6 	.word	0x200021f6

0800d9f8 <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	0019      	movs	r1, r3
 800da04:	1dfb      	adds	r3, r7, #7
 800da06:	701a      	strb	r2, [r3, #0]
 800da08:	1dbb      	adds	r3, r7, #6
 800da0a:	1c0a      	adds	r2, r1, #0
 800da0c:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800da0e:	1dfb      	adds	r3, r7, #7
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	18d3      	adds	r3, r2, r3
 800da16:	2201      	movs	r2, #1
 800da18:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800da1a:	1dbb      	adds	r3, r7, #6
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	18d3      	adds	r3, r2, r3
 800da22:	2200      	movs	r2, #0
 800da24:	701a      	strb	r2, [r3, #0]
}
 800da26:	46c0      	nop			@ (mov r8, r8)
 800da28:	46bd      	mov	sp, r7
 800da2a:	b004      	add	sp, #16
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b084      	sub	sp, #16
 800da32:	af00      	add	r7, sp, #0
 800da34:	60f8      	str	r0, [r7, #12]
 800da36:	60b9      	str	r1, [r7, #8]
 800da38:	0019      	movs	r1, r3
 800da3a:	1dfb      	adds	r3, r7, #7
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	1dbb      	adds	r3, r7, #6
 800da40:	1c0a      	adds	r2, r1, #0
 800da42:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800da44:	1dfb      	adds	r3, r7, #7
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	18d3      	adds	r3, r2, r3
 800da4c:	2200      	movs	r2, #0
 800da4e:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800da50:	1dbb      	adds	r3, r7, #6
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	18d3      	adds	r3, r2, r3
 800da58:	2200      	movs	r2, #0
 800da5a:	701a      	strb	r2, [r3, #0]
}
 800da5c:	46c0      	nop			@ (mov r8, r8)
 800da5e:	46bd      	mov	sp, r7
 800da60:	b004      	add	sp, #16
 800da62:	bd80      	pop	{r7, pc}

0800da64 <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800da64:	b580      	push	{r7, lr}
 800da66:	af00      	add	r7, sp, #0

    asm ("nop");
 800da68:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800da6a:	4bcf      	ldr	r3, [pc, #828]	@ (800dda8 <tiempo+0x344>)
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	2b07      	cmp	r3, #7
 800da70:	d900      	bls.n	800da74 <tiempo+0x10>
 800da72:	e25b      	b.n	800df2c <tiempo+0x4c8>
			goto tiempo10;				//	jrult		tiempo10;
 800da74:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800da76:	4bcd      	ldr	r3, [pc, #820]	@ (800ddac <tiempo+0x348>)
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	3301      	adds	r3, #1
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	4bcb      	ldr	r3, [pc, #812]	@ (800ddac <tiempo+0x348>)
 800da80:	801a      	strh	r2, [r3, #0]

			   decwreg(&delayComStat);
 800da82:	4bcb      	ldr	r3, [pc, #812]	@ (800ddb0 <tiempo+0x34c>)
 800da84:	0018      	movs	r0, r3
 800da86:	f7f9 fb2c 	bl	80070e2 <decwreg>
			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800da8a:	4bca      	ldr	r3, [pc, #808]	@ (800ddb4 <tiempo+0x350>)
 800da8c:	0018      	movs	r0, r3
 800da8e:	f7f9 fb28 	bl	80070e2 <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800da92:	4bc9      	ldr	r3, [pc, #804]	@ (800ddb8 <tiempo+0x354>)
 800da94:	0018      	movs	r0, r3
 800da96:	f7f9 fb24 	bl	80070e2 <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800da9a:	4bc8      	ldr	r3, [pc, #800]	@ (800ddbc <tiempo+0x358>)
 800da9c:	0018      	movs	r0, r3
 800da9e:	f7f9 fb20 	bl	80070e2 <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800daa2:	4bc7      	ldr	r3, [pc, #796]	@ (800ddc0 <tiempo+0x35c>)
 800daa4:	0018      	movs	r0, r3
 800daa6:	f7f9 fb1c 	bl	80070e2 <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800daaa:	4bc6      	ldr	r3, [pc, #792]	@ (800ddc4 <tiempo+0x360>)
 800daac:	0018      	movs	r0, r3
 800daae:	f7f9 fb18 	bl	80070e2 <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800dab2:	4bc5      	ldr	r3, [pc, #788]	@ (800ddc8 <tiempo+0x364>)
 800dab4:	0018      	movs	r0, r3
 800dab6:	f7f9 fb14 	bl	80070e2 <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800daba:	4bc4      	ldr	r3, [pc, #784]	@ (800ddcc <tiempo+0x368>)
 800dabc:	0018      	movs	r0, r3
 800dabe:	f7f9 fb10 	bl	80070e2 <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800dac2:	4bc3      	ldr	r3, [pc, #780]	@ (800ddd0 <tiempo+0x36c>)
 800dac4:	0018      	movs	r0, r3
 800dac6:	f7f9 fb0c 	bl	80070e2 <decwreg>

		       cntcent++;					//	Una centésima más
 800daca:	4bc2      	ldr	r3, [pc, #776]	@ (800ddd4 <tiempo+0x370>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	3301      	adds	r3, #1
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	4bc0      	ldr	r3, [pc, #768]	@ (800ddd4 <tiempo+0x370>)
 800dad4:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800dad6:	4bbf      	ldr	r3, [pc, #764]	@ (800ddd4 <tiempo+0x370>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	001a      	movs	r2, r3
 800dadc:	2301      	movs	r3, #1
 800dade:	4013      	ands	r3, r2
 800dae0:	d01c      	beq.n	800db1c <tiempo+0xb8>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800dae2:	4bbd      	ldr	r3, [pc, #756]	@ (800ddd8 <tiempo+0x374>)
 800dae4:	0018      	movs	r0, r3
 800dae6:	f7f9 fafc 	bl	80070e2 <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800daea:	4bbc      	ldr	r3, [pc, #752]	@ (800dddc <tiempo+0x378>)
 800daec:	0018      	movs	r0, r3
 800daee:	f7f9 faf8 	bl	80070e2 <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800daf2:	4bbb      	ldr	r3, [pc, #748]	@ (800dde0 <tiempo+0x37c>)
 800daf4:	0018      	movs	r0, r3
 800daf6:	f7f9 faf4 	bl	80070e2 <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800dafa:	4bba      	ldr	r3, [pc, #744]	@ (800dde4 <tiempo+0x380>)
 800dafc:	0018      	movs	r0, r3
 800dafe:	f7f9 faf0 	bl	80070e2 <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800db02:	4bb9      	ldr	r3, [pc, #740]	@ (800dde8 <tiempo+0x384>)
 800db04:	0018      	movs	r0, r3
 800db06:	f7f9 faec 	bl	80070e2 <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800db0a:	4bb8      	ldr	r3, [pc, #736]	@ (800ddec <tiempo+0x388>)
 800db0c:	0018      	movs	r0, r3
 800db0e:	f7f9 fae8 	bl	80070e2 <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800db12:	4bb7      	ldr	r3, [pc, #732]	@ (800ddf0 <tiempo+0x38c>)
 800db14:	0018      	movs	r0, r3
 800db16:	f7f9 fae4 	bl	80070e2 <decwreg>
 800db1a:	e000      	b.n	800db1e <tiempo+0xba>
			        goto no_dec_deb;
 800db1c:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800db1e:	4bad      	ldr	r3, [pc, #692]	@ (800ddd4 <tiempo+0x370>)
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	2b63      	cmp	r3, #99	@ 0x63
 800db24:	d800      	bhi.n	800db28 <tiempo+0xc4>
 800db26:	e203      	b.n	800df30 <tiempo+0x4cc>
		        	goto tiempo12;			//;jruge		tiempo12
 800db28:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;				//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800db2a:	4baa      	ldr	r3, [pc, #680]	@ (800ddd4 <tiempo+0x370>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
//;-----------------------------------------------------------------------------------

				//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
				//ld			A,BluetoothState
				//cp			A,#3
				if(BluetoothState!=3)//jrne		endSelect
 800db30:	4bb0      	ldr	r3, [pc, #704]	@ (800ddf4 <tiempo+0x390>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b03      	cmp	r3, #3
 800db36:	d142      	bne.n	800dbbe <tiempo+0x15a>
					goto endSelect;
				//ldw			X,#cntSetName;
				decword(&cntSetName);//call		decword
 800db38:	4baf      	ldr	r3, [pc, #700]	@ (800ddf8 <tiempo+0x394>)
 800db3a:	0018      	movs	r0, r3
 800db3c:	f7f9 fabf 	bl	80070be <decword>
				//btjt	flagsTxControl,#f_statBLE,no_toggleCOM;  Con conexión BLE activa no cambies el canal de comunicacion
				//; no cambies de canal de comunicación si se está transmitiendo algun logger via wifi
				//btjt	flagsWIFI,#f_timeLoggerCmd,no_toggleCOM;
				//btjt	flagsWIFI,#f_eventLoggerCmd,no_toggleCOM;

				if(flagsTxControl[f_statBLE] || flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800db40:	4bae      	ldr	r3, [pc, #696]	@ (800ddfc <tiempo+0x398>)
 800db42:	785b      	ldrb	r3, [r3, #1]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d11e      	bne.n	800db86 <tiempo+0x122>
 800db48:	4bad      	ldr	r3, [pc, #692]	@ (800de00 <tiempo+0x39c>)
 800db4a:	78db      	ldrb	r3, [r3, #3]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d11a      	bne.n	800db86 <tiempo+0x122>
 800db50:	4bab      	ldr	r3, [pc, #684]	@ (800de00 <tiempo+0x39c>)
 800db52:	791b      	ldrb	r3, [r3, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d116      	bne.n	800db86 <tiempo+0x122>
					goto no_toggleCOM;

toggleCOM:
 800db58:	46c0      	nop			@ (mov r8, r8)
				//; no cambies el canal de comunicación si hay una respuesta en transmisión en progreso
				//tnz		keyTx
				if(keyTx)//jrne	no_toggleCOM
 800db5a:	4baa      	ldr	r3, [pc, #680]	@ (800de04 <tiempo+0x3a0>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d113      	bne.n	800db8a <tiempo+0x126>
					goto no_toggleCOM;
				flagsTxControl[f_select] = !(flagsTxControl[f_select]);// bcpl		flagsTxControl,#f_select
 800db62:	4ba6      	ldr	r3, [pc, #664]	@ (800ddfc <tiempo+0x398>)
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	1e5a      	subs	r2, r3, #1
 800db68:	4193      	sbcs	r3, r2
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	2201      	movs	r2, #1
 800db6e:	4053      	eors	r3, r2
 800db70:	b2db      	uxtb	r3, r3
 800db72:	1c1a      	adds	r2, r3, #0
 800db74:	2301      	movs	r3, #1
 800db76:	4013      	ands	r3, r2
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	4ba0      	ldr	r3, [pc, #640]	@ (800ddfc <tiempo+0x398>)
 800db7c:	701a      	strb	r2, [r3, #0]
				delayComStat = 10;//mov			delayComStat,#10
 800db7e:	4b8c      	ldr	r3, [pc, #560]	@ (800ddb0 <tiempo+0x34c>)
 800db80:	220a      	movs	r2, #10
 800db82:	701a      	strb	r2, [r3, #0]
 800db84:	e002      	b.n	800db8c <tiempo+0x128>
					goto no_toggleCOM;
 800db86:	46c0      	nop			@ (mov r8, r8)
 800db88:	e000      	b.n	800db8c <tiempo+0x128>
					goto no_toggleCOM;
 800db8a:	46c0      	nop			@ (mov r8, r8)
no_toggleCOM:

				if(!flagsTxControl[f_select])//btjf		flagsTxControl,#f_select,BLEselect
 800db8c:	4b9b      	ldr	r3, [pc, #620]	@ (800ddfc <tiempo+0x398>)
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2201      	movs	r2, #1
 800db92:	4053      	eors	r3, r2
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b00      	cmp	r3, #0
 800db98:	d108      	bne.n	800dbac <tiempo+0x148>
					goto BLEselect;
WIFIselect:
 800db9a:	46c0      	nop			@ (mov r8, r8)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);//bset		PE_ODR,#2
 800db9c:	2380      	movs	r3, #128	@ 0x80
 800db9e:	015b      	lsls	r3, r3, #5
 800dba0:	4899      	ldr	r0, [pc, #612]	@ (800de08 <tiempo+0x3a4>)
 800dba2:	2201      	movs	r2, #1
 800dba4:	0019      	movs	r1, r3
 800dba6:	f005 fbb8 	bl	801331a <HAL_GPIO_WritePin>
				goto endSelect;//jra			endSelect
 800dbaa:	e009      	b.n	800dbc0 <tiempo+0x15c>
					goto BLEselect;
 800dbac:	46c0      	nop			@ (mov r8, r8)
BLEselect:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);//bres		PE_ODR,#2
 800dbae:	2380      	movs	r3, #128	@ 0x80
 800dbb0:	015b      	lsls	r3, r3, #5
 800dbb2:	4895      	ldr	r0, [pc, #596]	@ (800de08 <tiempo+0x3a4>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	0019      	movs	r1, r3
 800dbb8:	f005 fbaf 	bl	801331a <HAL_GPIO_WritePin>
 800dbbc:	e000      	b.n	800dbc0 <tiempo+0x15c>
					goto endSelect;
 800dbbe:	46c0      	nop			@ (mov r8, r8)
//    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
//no_inc_timeH:
//
//noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800dbc0:	4b92      	ldr	r3, [pc, #584]	@ (800de0c <tiempo+0x3a8>)
 800dbc2:	0018      	movs	r0, r3
 800dbc4:	f7f9 fa7b 	bl	80070be <decword>
	            decwreg(&timeTxTBLE);
 800dbc8:	4b91      	ldr	r3, [pc, #580]	@ (800de10 <tiempo+0x3ac>)
 800dbca:	0018      	movs	r0, r3
 800dbcc:	f7f9 fa89 	bl	80070e2 <decwreg>
				decword(&timeoutTBLE);
 800dbd0:	4b90      	ldr	r3, [pc, #576]	@ (800de14 <tiempo+0x3b0>)
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	f7f9 fa73 	bl	80070be <decword>
	            decwreg(&timeTxTWF);
 800dbd8:	4b8f      	ldr	r3, [pc, #572]	@ (800de18 <tiempo+0x3b4>)
 800dbda:	0018      	movs	r0, r3
 800dbdc:	f7f9 fa81 	bl	80070e2 <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800dbe0:	4b8e      	ldr	r3, [pc, #568]	@ (800de1c <tiempo+0x3b8>)
 800dbe2:	0018      	movs	r0, r3
 800dbe4:	f7f9 fa6b 	bl	80070be <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800dbe8:	4b8d      	ldr	r3, [pc, #564]	@ (800de20 <tiempo+0x3bc>)
 800dbea:	0018      	movs	r0, r3
 800dbec:	f7f9 fa79 	bl	80070e2 <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800dbf0:	4b8c      	ldr	r3, [pc, #560]	@ (800de24 <tiempo+0x3c0>)
 800dbf2:	0018      	movs	r0, r3
 800dbf4:	f7f9 fa75 	bl	80070e2 <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800dbf8:	4b8b      	ldr	r3, [pc, #556]	@ (800de28 <tiempo+0x3c4>)
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f7f9 fa71 	bl	80070e2 <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800dc00:	4b8a      	ldr	r3, [pc, #552]	@ (800de2c <tiempo+0x3c8>)
 800dc02:	0018      	movs	r0, r3
 800dc04:	f7f9 fa6d 	bl	80070e2 <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800dc08:	4b89      	ldr	r3, [pc, #548]	@ (800de30 <tiempo+0x3cc>)
 800dc0a:	0018      	movs	r0, r3
 800dc0c:	f7f9 fa69 	bl	80070e2 <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800dc10:	4b88      	ldr	r3, [pc, #544]	@ (800de34 <tiempo+0x3d0>)
 800dc12:	0018      	movs	r0, r3
 800dc14:	f7f9 fa65 	bl	80070e2 <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800dc18:	4b87      	ldr	r3, [pc, #540]	@ (800de38 <tiempo+0x3d4>)
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	f7f9 fa4f 	bl	80070be <decword>
		    	decword(&timePreDh_h);
 800dc20:	4b86      	ldr	r3, [pc, #536]	@ (800de3c <tiempo+0x3d8>)
 800dc22:	0018      	movs	r0, r3
 800dc24:	f7f9 fa4b 	bl	80070be <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800dc28:	4b85      	ldr	r3, [pc, #532]	@ (800de40 <tiempo+0x3dc>)
 800dc2a:	0018      	movs	r0, r3
 800dc2c:	f7f9 fa59 	bl	80070e2 <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800dc30:	4b84      	ldr	r3, [pc, #528]	@ (800de44 <tiempo+0x3e0>)
 800dc32:	0018      	movs	r0, r3
 800dc34:	f7f9 fa55 	bl	80070e2 <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800dc38:	4b83      	ldr	r3, [pc, #524]	@ (800de48 <tiempo+0x3e4>)
 800dc3a:	0018      	movs	r0, r3
 800dc3c:	f7f9 fa51 	bl	80070e2 <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800dc40:	4b82      	ldr	r3, [pc, #520]	@ (800de4c <tiempo+0x3e8>)
 800dc42:	0018      	movs	r0, r3
 800dc44:	f7f9 fa4d 	bl	80070e2 <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800dc48:	4b81      	ldr	r3, [pc, #516]	@ (800de50 <tiempo+0x3ec>)
 800dc4a:	0018      	movs	r0, r3
 800dc4c:	f7f9 fa49 	bl	80070e2 <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800dc50:	4b80      	ldr	r3, [pc, #512]	@ (800de54 <tiempo+0x3f0>)
 800dc52:	0018      	movs	r0, r3
 800dc54:	f7f9 fa45 	bl	80070e2 <decwreg>
		    	decwreg(&valflvl);//
 800dc58:	4b7f      	ldr	r3, [pc, #508]	@ (800de58 <tiempo+0x3f4>)
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f7f9 fa41 	bl	80070e2 <decwreg>
		    	decwreg(&valfhvl);//
 800dc60:	4b7e      	ldr	r3, [pc, #504]	@ (800de5c <tiempo+0x3f8>)
 800dc62:	0018      	movs	r0, r3
 800dc64:	f7f9 fa3d 	bl	80070e2 <decwreg>
		    	decwreg(&cnt_prog);//
 800dc68:	4b7d      	ldr	r3, [pc, #500]	@ (800de60 <tiempo+0x3fc>)
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	f7f9 fa39 	bl	80070e2 <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800dc70:	4b7c      	ldr	r3, [pc, #496]	@ (800de64 <tiempo+0x400>)
 800dc72:	0018      	movs	r0, r3
 800dc74:	f7f9 fa35 	bl	80070e2 <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800dc78:	4b7b      	ldr	r3, [pc, #492]	@ (800de68 <tiempo+0x404>)
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	f7f9 fa31 	bl	80070e2 <decwreg>
		    	decwreg(&End_sec);//
 800dc80:	4b7a      	ldr	r3, [pc, #488]	@ (800de6c <tiempo+0x408>)
 800dc82:	0018      	movs	r0, r3
 800dc84:	f7f9 fa2d 	bl	80070e2 <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800dc88:	4b79      	ldr	r3, [pc, #484]	@ (800de70 <tiempo+0x40c>)
 800dc8a:	0018      	movs	r0, r3
 800dc8c:	f7f9 fa17 	bl	80070be <decword>

		    	decwreg(&timeOutRst);
 800dc90:	4b78      	ldr	r3, [pc, #480]	@ (800de74 <tiempo+0x410>)
 800dc92:	0018      	movs	r0, r3
 800dc94:	f7f9 fa25 	bl	80070e2 <decwreg>
		    	decwreg(&timeOutRx);
 800dc98:	4b77      	ldr	r3, [pc, #476]	@ (800de78 <tiempo+0x414>)
 800dc9a:	0018      	movs	r0, r3
 800dc9c:	f7f9 fa21 	bl	80070e2 <decwreg>
		    	decwreg(&timeRstBLE);
 800dca0:	4b76      	ldr	r3, [pc, #472]	@ (800de7c <tiempo+0x418>)
 800dca2:	0018      	movs	r0, r3
 800dca4:	f7f9 fa1d 	bl	80070e2 <decwreg>
		    	//decword(&cntLogger_H);			// decrementra contador de logger
		    	decwreg(&cntInitTx);
 800dca8:	4b75      	ldr	r3, [pc, #468]	@ (800de80 <tiempo+0x41c>)
 800dcaa:	0018      	movs	r0, r3
 800dcac:	f7f9 fa19 	bl	80070e2 <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800dcb0:	4b74      	ldr	r3, [pc, #464]	@ (800de84 <tiempo+0x420>)
 800dcb2:	0018      	movs	r0, r3
 800dcb4:	f7f9 fa03 	bl	80070be <decword>

		    	decword(&t_ahorro1_H);
 800dcb8:	4b73      	ldr	r3, [pc, #460]	@ (800de88 <tiempo+0x424>)
 800dcba:	0018      	movs	r0, r3
 800dcbc:	f7f9 f9ff 	bl	80070be <decword>
		    	decword(&t_ahorro2_H);
 800dcc0:	4b72      	ldr	r3, [pc, #456]	@ (800de8c <tiempo+0x428>)
 800dcc2:	0018      	movs	r0, r3
 800dcc4:	f7f9 f9fb 	bl	80070be <decword>
		    	decword(&cntNoct_H);
 800dcc8:	4b71      	ldr	r3, [pc, #452]	@ (800de90 <tiempo+0x42c>)
 800dcca:	0018      	movs	r0, r3
 800dccc:	f7f9 f9f7 	bl	80070be <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800dcd0:	4b5d      	ldr	r3, [pc, #372]	@ (800de48 <tiempo+0x3e4>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	001a      	movs	r2, r3
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	4013      	ands	r3, r2
 800dcda:	d104      	bne.n	800dce6 <tiempo+0x282>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800dcdc:	4b6d      	ldr	r3, [pc, #436]	@ (800de94 <tiempo+0x430>)
 800dcde:	0018      	movs	r0, r3
 800dce0:	f7f9 f9ff 	bl	80070e2 <decwreg>
 800dce4:	e000      	b.n	800dce8 <tiempo+0x284>
		    		goto no_dec2;
 800dce6:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800dce8:	4b6b      	ldr	r3, [pc, #428]	@ (800de98 <tiempo+0x434>)
 800dcea:	0018      	movs	r0, r3
 800dcec:	f7f9 f9e7 	bl	80070be <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800dcf0:	4b6a      	ldr	r3, [pc, #424]	@ (800de9c <tiempo+0x438>)
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	f7f9 f9e3 	bl	80070be <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800dcf8:	4b69      	ldr	r3, [pc, #420]	@ (800dea0 <tiempo+0x43c>)
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f7f9 f9df 	bl	80070be <decword>
		    	decword(&drp_fanh);
 800dd00:	4b68      	ldr	r3, [pc, #416]	@ (800dea4 <tiempo+0x440>)
 800dd02:	0018      	movs	r0, r3
 800dd04:	f7f9 f9db 	bl	80070be <decword>
		    	decword(&drp_comph);
 800dd08:	4b67      	ldr	r3, [pc, #412]	@ (800dea8 <tiempo+0x444>)
 800dd0a:	0018      	movs	r0, r3
 800dd0c:	f7f9 f9d7 	bl	80070be <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800dd10:	4b66      	ldr	r3, [pc, #408]	@ (800deac <tiempo+0x448>)
 800dd12:	881a      	ldrh	r2, [r3, #0]
 800dd14:	4b66      	ldr	r3, [pc, #408]	@ (800deb0 <tiempo+0x44c>)
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d204      	bcs.n	800dd26 <tiempo+0x2c2>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800dd1c:	4b65      	ldr	r3, [pc, #404]	@ (800deb4 <tiempo+0x450>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d006      	beq.n	800dd32 <tiempo+0x2ce>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800dd24:	e000      	b.n	800dd28 <tiempo+0x2c4>
		    		goto tiempo_17;
 800dd26:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800dd28:	4b60      	ldr	r3, [pc, #384]	@ (800deac <tiempo+0x448>)
 800dd2a:	0018      	movs	r0, r3
 800dd2c:	f7f9 f9c7 	bl	80070be <decword>
 800dd30:	e000      	b.n	800dd34 <tiempo+0x2d0>
	        	goto tiempo20; //jra tiempo20
 800dd32:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800dd34:	4b60      	ldr	r3, [pc, #384]	@ (800deb8 <tiempo+0x454>)
 800dd36:	0018      	movs	r0, r3
 800dd38:	f7f9 f9c1 	bl	80070be <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800dd3c:	4b5f      	ldr	r3, [pc, #380]	@ (800debc <tiempo+0x458>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	3301      	adds	r3, #1
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	4b5d      	ldr	r3, [pc, #372]	@ (800debc <tiempo+0x458>)
 800dd46:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800dd48:	4b5c      	ldr	r3, [pc, #368]	@ (800debc <tiempo+0x458>)
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	2b3b      	cmp	r3, #59	@ 0x3b
 800dd4e:	d907      	bls.n	800dd60 <tiempo+0x2fc>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800dd50:	4b5a      	ldr	r3, [pc, #360]	@ (800debc <tiempo+0x458>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800dd56:	4b5a      	ldr	r3, [pc, #360]	@ (800dec0 <tiempo+0x45c>)
 800dd58:	0018      	movs	r0, r3
 800dd5a:	f7f9 f9c2 	bl	80070e2 <decwreg>
 800dd5e:	e000      	b.n	800dd62 <tiempo+0x2fe>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800dd60:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
				if(GetRegFlagState(cntseg, 3)){
 800dd62:	4b58      	ldr	r3, [pc, #352]	@ (800dec4 <tiempo+0x460>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	001a      	movs	r2, r3
 800dd68:	2308      	movs	r3, #8
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	d001      	beq.n	800dd72 <tiempo+0x30e>
					asm ("nop");
 800dd6e:	46c0      	nop			@ (mov r8, r8)
 800dd70:	e000      	b.n	800dd74 <tiempo+0x310>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800dd72:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800dd74:	4b53      	ldr	r3, [pc, #332]	@ (800dec4 <tiempo+0x460>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	4b51      	ldr	r3, [pc, #324]	@ (800dec4 <tiempo+0x460>)
 800dd7e:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800dd80:	4b50      	ldr	r3, [pc, #320]	@ (800dec4 <tiempo+0x460>)
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	2b08      	cmp	r3, #8
 800dd86:	d903      	bls.n	800dd90 <tiempo+0x32c>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800dd88:	4b4f      	ldr	r3, [pc, #316]	@ (800dec8 <tiempo+0x464>)
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	701a      	strb	r2, [r3, #0]
 800dd8e:	e000      	b.n	800dd92 <tiempo+0x32e>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800dd90:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800dd92:	4b4c      	ldr	r3, [pc, #304]	@ (800dec4 <tiempo+0x460>)
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	001a      	movs	r2, r3
 800dd98:	2310      	movs	r3, #16
 800dd9a:	4013      	ands	r3, r2
 800dd9c:	d100      	bne.n	800dda0 <tiempo+0x33c>
 800dd9e:	e095      	b.n	800decc <tiempo+0x468>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800dda0:	4b49      	ldr	r3, [pc, #292]	@ (800dec8 <tiempo+0x464>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	71da      	strb	r2, [r3, #7]
 800dda6:	e092      	b.n	800dece <tiempo+0x46a>
 800dda8:	20000bba 	.word	0x20000bba
 800ddac:	20000b4c 	.word	0x20000b4c
 800ddb0:	20002180 	.word	0x20002180
 800ddb4:	200020f0 	.word	0x200020f0
 800ddb8:	20002129 	.word	0x20002129
 800ddbc:	20000bbe 	.word	0x20000bbe
 800ddc0:	20000bc5 	.word	0x20000bc5
 800ddc4:	20000c1c 	.word	0x20000c1c
 800ddc8:	20000c1d 	.word	0x20000c1d
 800ddcc:	20000c1e 	.word	0x20000c1e
 800ddd0:	20000c30 	.word	0x20000c30
 800ddd4:	20000b4a 	.word	0x20000b4a
 800ddd8:	20000c0c 	.word	0x20000c0c
 800dddc:	20000c0d 	.word	0x20000c0d
 800dde0:	20000c0e 	.word	0x20000c0e
 800dde4:	20000c0f 	.word	0x20000c0f
 800dde8:	20000c10 	.word	0x20000c10
 800ddec:	20000c11 	.word	0x20000c11
 800ddf0:	20000c12 	.word	0x20000c12
 800ddf4:	2000004c 	.word	0x2000004c
 800ddf8:	20002184 	.word	0x20002184
 800ddfc:	20002178 	.word	0x20002178
 800de00:	20001fdc 	.word	0x20001fdc
 800de04:	20001ea5 	.word	0x20001ea5
 800de08:	50000400 	.word	0x50000400
 800de0c:	20001f64 	.word	0x20001f64
 800de10:	20002186 	.word	0x20002186
 800de14:	20002188 	.word	0x20002188
 800de18:	20001fc6 	.word	0x20001fc6
 800de1c:	20001fd8 	.word	0x20001fd8
 800de20:	20002006 	.word	0x20002006
 800de24:	20002007 	.word	0x20002007
 800de28:	200020f2 	.word	0x200020f2
 800de2c:	2000212a 	.word	0x2000212a
 800de30:	20001f73 	.word	0x20001f73
 800de34:	20002130 	.word	0x20002130
 800de38:	2000202c 	.word	0x2000202c
 800de3c:	2000218a 	.word	0x2000218a
 800de40:	20000b66 	.word	0x20000b66
 800de44:	20000b67 	.word	0x20000b67
 800de48:	20000b68 	.word	0x20000b68
 800de4c:	20000b69 	.word	0x20000b69
 800de50:	20000b6a 	.word	0x20000b6a
 800de54:	20000b6b 	.word	0x20000b6b
 800de58:	20000b6c 	.word	0x20000b6c
 800de5c:	20000b6d 	.word	0x20000b6d
 800de60:	20000b6e 	.word	0x20000b6e
 800de64:	20000b6f 	.word	0x20000b6f
 800de68:	20000b70 	.word	0x20000b70
 800de6c:	20000b71 	.word	0x20000b71
 800de70:	20000c32 	.word	0x20000c32
 800de74:	20001f71 	.word	0x20001f71
 800de78:	20001f72 	.word	0x20001f72
 800de7c:	20001f74 	.word	0x20001f74
 800de80:	20001ea6 	.word	0x20001ea6
 800de84:	20001fda 	.word	0x20001fda
 800de88:	20000c2c 	.word	0x20000c2c
 800de8c:	20000c2e 	.word	0x20000c2e
 800de90:	20000c40 	.word	0x20000c40
 800de94:	20000c24 	.word	0x20000c24
 800de98:	20000b64 	.word	0x20000b64
 800de9c:	20000b5e 	.word	0x20000b5e
 800dea0:	20000b62 	.word	0x20000b62
 800dea4:	20000bf8 	.word	0x20000bf8
 800dea8:	20000bf6 	.word	0x20000bf6
 800deac:	20000bb2 	.word	0x20000bb2
 800deb0:	20000bb8 	.word	0x20000bb8
 800deb4:	20000b54 	.word	0x20000b54
 800deb8:	20000bb4 	.word	0x20000bb4
 800debc:	20000b51 	.word	0x20000b51
 800dec0:	20000bc3 	.word	0x20000bc3
 800dec4:	20000b4b 	.word	0x20000b4b
 800dec8:	20000b74 	.word	0x20000b74
					goto	tiempo_j01;		// Ya son 16 segundos?
 800decc:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800dece:	4b1c      	ldr	r3, [pc, #112]	@ (800df40 <tiempo+0x4dc>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b3b      	cmp	r3, #59	@ 0x3b
 800ded4:	d92e      	bls.n	800df34 <tiempo+0x4d0>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800ded6:	4b1a      	ldr	r3, [pc, #104]	@ (800df40 <tiempo+0x4dc>)
 800ded8:	2200      	movs	r2, #0
 800deda:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800dedc:	4b19      	ldr	r3, [pc, #100]	@ (800df44 <tiempo+0x4e0>)
 800dede:	2200      	movs	r2, #0
 800dee0:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800dee2:	4b19      	ldr	r3, [pc, #100]	@ (800df48 <tiempo+0x4e4>)
 800dee4:	0018      	movs	r0, r3
 800dee6:	f7f9 f8fc 	bl	80070e2 <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800deea:	4b18      	ldr	r3, [pc, #96]	@ (800df4c <tiempo+0x4e8>)
 800deec:	0018      	movs	r0, r3
 800deee:	f7f9 f8f8 	bl	80070e2 <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800def2:	4b17      	ldr	r3, [pc, #92]	@ (800df50 <tiempo+0x4ec>)
 800def4:	0018      	movs	r0, r3
 800def6:	f7f9 f8f4 	bl	80070e2 <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800defa:	4b16      	ldr	r3, [pc, #88]	@ (800df54 <tiempo+0x4f0>)
 800defc:	0018      	movs	r0, r3
 800defe:	f7f9 f8f0 	bl	80070e2 <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800df02:	4b15      	ldr	r3, [pc, #84]	@ (800df58 <tiempo+0x4f4>)
 800df04:	0018      	movs	r0, r3
 800df06:	f7f9 f8ec 	bl	80070e2 <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800df0a:	4b14      	ldr	r3, [pc, #80]	@ (800df5c <tiempo+0x4f8>)
 800df0c:	0018      	movs	r0, r3
 800df0e:	f7f9 f8d6 	bl	80070be <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800df12:	4b13      	ldr	r3, [pc, #76]	@ (800df60 <tiempo+0x4fc>)
 800df14:	0018      	movs	r0, r3
 800df16:	f7f9 f8d2 	bl	80070be <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800df1a:	4b12      	ldr	r3, [pc, #72]	@ (800df64 <tiempo+0x500>)
 800df1c:	0018      	movs	r0, r3
 800df1e:	f7f9 f8ce 	bl	80070be <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800df22:	4b11      	ldr	r3, [pc, #68]	@ (800df68 <tiempo+0x504>)
 800df24:	0018      	movs	r0, r3
 800df26:	f7f9 f8dc 	bl	80070e2 <decwreg>
	    		 goto fintiem;
 800df2a:	e004      	b.n	800df36 <tiempo+0x4d2>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800df2c:	46c0      	nop			@ (mov r8, r8)
 800df2e:	e002      	b.n	800df36 <tiempo+0x4d2>
		        goto fintiem;
 800df30:	46c0      	nop			@ (mov r8, r8)
 800df32:	e000      	b.n	800df36 <tiempo+0x4d2>
					goto fintiem;				//jrult fintiem
 800df34:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800df36:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800df38:	46c0      	nop			@ (mov r8, r8)
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	46c0      	nop			@ (mov r8, r8)
 800df40:	20000b4b 	.word	0x20000b4b
 800df44:	20000bd4 	.word	0x20000bd4
 800df48:	20000c23 	.word	0x20000c23
 800df4c:	20000bf4 	.word	0x20000bf4
 800df50:	20000bf5 	.word	0x20000bf5
 800df54:	20000bc4 	.word	0x20000bc4
 800df58:	20000bc7 	.word	0x20000bc7
 800df5c:	20000b60 	.word	0x20000b60
 800df60:	20000c28 	.word	0x20000c28
 800df64:	20000c2a 	.word	0x20000c2a
 800df68:	20000c4d 	.word	0x20000c4d

0800df6c <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800df72:	4b6f      	ldr	r3, [pc, #444]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800df74:	789b      	ldrb	r3, [r3, #2]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d023      	beq.n	800dfc2 <tx_buffer_prep+0x56>
			goto	tx_header;
 800df7a:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800df7c:	4b6d      	ldr	r3, [pc, #436]	@ (800e134 <tx_buffer_prep+0x1c8>)
 800df7e:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800df80:	4b6d      	ldr	r3, [pc, #436]	@ (800e138 <tx_buffer_prep+0x1cc>)
 800df82:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	781a      	ldrb	r2, [r3, #0]
 800df88:	4b6c      	ldr	r3, [pc, #432]	@ (800e13c <tx_buffer_prep+0x1d0>)
 800df8a:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800df8c:	4b6b      	ldr	r3, [pc, #428]	@ (800e13c <tx_buffer_prep+0x1d0>)
 800df8e:	781a      	ldrb	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800df94:	4b69      	ldr	r3, [pc, #420]	@ (800e13c <tx_buffer_prep+0x1d0>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	0018      	movs	r0, r3
 800df9a:	f7f9 f875 	bl	8007088 <build_chksum>
	    	point_X++;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	4b64      	ldr	r3, [pc, #400]	@ (800e140 <tx_buffer_prep+0x1d4>)
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d800      	bhi.n	800dfb4 <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800dfb2:	e7e7      	b.n	800df84 <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800dfb4:	4b63      	ldr	r3, [pc, #396]	@ (800e144 <tx_buffer_prep+0x1d8>)
 800dfb6:	2208      	movs	r2, #8
 800dfb8:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800dfba:	4b5d      	ldr	r3, [pc, #372]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800dfc0:	e0b1      	b.n	800e126 <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800dfc2:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800dfc4:	4b5a      	ldr	r3, [pc, #360]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	4053      	eors	r3, r2
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d107      	bne.n	800dfe2 <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800dfd2:	4b57      	ldr	r3, [pc, #348]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800dfd4:	785b      	ldrb	r3, [r3, #1]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	4053      	eors	r3, r2
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d140      	bne.n	800e062 <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800dfe0:	e000      	b.n	800dfe4 <tx_buffer_prep+0x78>
			goto	notest;
 800dfe2:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800dfe4:	4b58      	ldr	r3, [pc, #352]	@ (800e148 <tx_buffer_prep+0x1dc>)
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	4b58      	ldr	r3, [pc, #352]	@ (800e14c <tx_buffer_prep+0x1e0>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d33a      	bcc.n	800e066 <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800dff0:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800dff2:	4b4f      	ldr	r3, [pc, #316]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800dff4:	78db      	ldrb	r3, [r3, #3]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d122      	bne.n	800e040 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800dffa:	4b4f      	ldr	r3, [pc, #316]	@ (800e138 <tx_buffer_prep+0x1cc>)
 800dffc:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800dffe:	4b54      	ldr	r3, [pc, #336]	@ (800e150 <tx_buffer_prep+0x1e4>)
 800e000:	2200      	movs	r2, #0
 800e002:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800e004:	4b53      	ldr	r3, [pc, #332]	@ (800e154 <tx_buffer_prep+0x1e8>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	0e1b      	lsrs	r3, r3, #24
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	4b4a      	ldr	r3, [pc, #296]	@ (800e138 <tx_buffer_prep+0x1cc>)
 800e00e:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800e010:	4b50      	ldr	r3, [pc, #320]	@ (800e154 <tx_buffer_prep+0x1e8>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	0c1b      	lsrs	r3, r3, #16
 800e016:	b2da      	uxtb	r2, r3
 800e018:	4b47      	ldr	r3, [pc, #284]	@ (800e138 <tx_buffer_prep+0x1cc>)
 800e01a:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800e01c:	4b4d      	ldr	r3, [pc, #308]	@ (800e154 <tx_buffer_prep+0x1e8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	0a1b      	lsrs	r3, r3, #8
 800e022:	b2da      	uxtb	r2, r3
 800e024:	4b44      	ldr	r3, [pc, #272]	@ (800e138 <tx_buffer_prep+0x1cc>)
 800e026:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800e028:	4b4a      	ldr	r3, [pc, #296]	@ (800e154 <tx_buffer_prep+0x1e8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	4b42      	ldr	r3, [pc, #264]	@ (800e138 <tx_buffer_prep+0x1cc>)
 800e030:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800e032:	4b44      	ldr	r3, [pc, #272]	@ (800e144 <tx_buffer_prep+0x1d8>)
 800e034:	2204      	movs	r2, #4
 800e036:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800e038:	4b3d      	ldr	r3, [pc, #244]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800e03e:	e072      	b.n	800e126 <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800e040:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800e042:	4b45      	ldr	r3, [pc, #276]	@ (800e158 <tx_buffer_prep+0x1ec>)
 800e044:	2200      	movs	r2, #0
 800e046:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800e048:	4b39      	ldr	r3, [pc, #228]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800e04e:	4b38      	ldr	r3, [pc, #224]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800e050:	2200      	movs	r2, #0
 800e052:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 0;				// permite loggeo de eventos
 800e054:	4b41      	ldr	r3, [pc, #260]	@ (800e15c <tx_buffer_prep+0x1f0>)
 800e056:	2200      	movs	r2, #0
 800e058:	711a      	strb	r2, [r3, #4]
		flagsLogger[5] = 0;				// permite loggeo de datos
 800e05a:	4b40      	ldr	r3, [pc, #256]	@ (800e15c <tx_buffer_prep+0x1f0>)
 800e05c:	2200      	movs	r2, #0
 800e05e:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800e060:	e061      	b.n	800e126 <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800e062:	46c0      	nop			@ (mov r8, r8)
 800e064:	e000      	b.n	800e068 <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800e066:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800e068:	4b37      	ldr	r3, [pc, #220]	@ (800e148 <tx_buffer_prep+0x1dc>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800e06e:	4b32      	ldr	r3, [pc, #200]	@ (800e138 <tx_buffer_prep+0x1cc>)
 800e070:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800e072:	4b37      	ldr	r3, [pc, #220]	@ (800e150 <tx_buffer_prep+0x1e4>)
 800e074:	2200      	movs	r2, #0
 800e076:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	781a      	ldrb	r2, [r3, #0]
 800e07c:	4b2f      	ldr	r3, [pc, #188]	@ (800e13c <tx_buffer_prep+0x1d0>)
 800e07e:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800e080:	4b37      	ldr	r3, [pc, #220]	@ (800e160 <tx_buffer_prep+0x1f4>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d111      	bne.n	800e0ac <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800e088:	4b34      	ldr	r3, [pc, #208]	@ (800e15c <tx_buffer_prep+0x1f0>)
 800e08a:	791b      	ldrb	r3, [r3, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d107      	bne.n	800e0a0 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800e090:	4b32      	ldr	r3, [pc, #200]	@ (800e15c <tx_buffer_prep+0x1f0>)
 800e092:	795b      	ldrb	r3, [r3, #5]
 800e094:	2201      	movs	r2, #1
 800e096:	4053      	eors	r3, r2
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d108      	bne.n	800e0b0 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800e09e:	e000      	b.n	800e0a2 <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800e0a0:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	781a      	ldrb	r2, [r3, #0]
 800e0a6:	4b25      	ldr	r3, [pc, #148]	@ (800e13c <tx_buffer_prep+0x1d0>)
 800e0a8:	701a      	strb	r2, [r3, #0]
 800e0aa:	e002      	b.n	800e0b2 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800e0ac:	46c0      	nop			@ (mov r8, r8)
 800e0ae:	e000      	b.n	800e0b2 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800e0b0:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800e0b2:	4b22      	ldr	r3, [pc, #136]	@ (800e13c <tx_buffer_prep+0x1d0>)
 800e0b4:	781a      	ldrb	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800e0c6:	4b22      	ldr	r3, [pc, #136]	@ (800e150 <tx_buffer_prep+0x1e4>)
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	4b20      	ldr	r3, [pc, #128]	@ (800e150 <tx_buffer_prep+0x1e4>)
 800e0d0:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800e0d2:	4b1a      	ldr	r3, [pc, #104]	@ (800e13c <tx_buffer_prep+0x1d0>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	0018      	movs	r0, r3
 800e0d8:	f7f8 ffd6 	bl	8007088 <build_chksum>

		if(!flagsTX [0]){
 800e0dc:	4b14      	ldr	r3, [pc, #80]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	4053      	eors	r3, r2
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10b      	bne.n	800e102 <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800e0ea:	4b1e      	ldr	r3, [pc, #120]	@ (800e164 <tx_buffer_prep+0x1f8>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	683a      	ldr	r2, [r7, #0]
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d108      	bne.n	800e106 <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800e0f4:	4b1c      	ldr	r3, [pc, #112]	@ (800e168 <tx_buffer_prep+0x1fc>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800e0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e130 <tx_buffer_prep+0x1c4>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	705a      	strb	r2, [r3, #1]
 800e100:	e002      	b.n	800e108 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800e102:	46c0      	nop			@ (mov r8, r8)
 800e104:	e000      	b.n	800e108 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800e106:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800e108:	4b11      	ldr	r3, [pc, #68]	@ (800e150 <tx_buffer_prep+0x1e4>)
 800e10a:	781a      	ldrb	r2, [r3, #0]
 800e10c:	4b17      	ldr	r3, [pc, #92]	@ (800e16c <tx_buffer_prep+0x200>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	429a      	cmp	r2, r3
 800e112:	d200      	bcs.n	800e116 <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800e114:	e7b0      	b.n	800e078 <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800e116:	4b0c      	ldr	r3, [pc, #48]	@ (800e148 <tx_buffer_prep+0x1dc>)
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800e11c:	4b13      	ldr	r3, [pc, #76]	@ (800e16c <tx_buffer_prep+0x200>)
 800e11e:	781a      	ldrb	r2, [r3, #0]
 800e120:	4b08      	ldr	r3, [pc, #32]	@ (800e144 <tx_buffer_prep+0x1d8>)
 800e122:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800e124:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800e126:	46c0      	nop			@ (mov r8, r8)
 800e128:	46bd      	mov	sp, r7
 800e12a:	b002      	add	sp, #8
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	46c0      	nop			@ (mov r8, r8)
 800e130:	20001ea8 	.word	0x20001ea8
 800e134:	20001e64 	.word	0x20001e64
 800e138:	20001ec4 	.word	0x20001ec4
 800e13c:	200008d0 	.word	0x200008d0
 800e140:	20001e6b 	.word	0x20001e6b
 800e144:	20001ebe 	.word	0x20001ebe
 800e148:	20001ea0 	.word	0x20001ea0
 800e14c:	20001e9c 	.word	0x20001e9c
 800e150:	20001ea4 	.word	0x20001ea4
 800e154:	20001ec0 	.word	0x20001ec0
 800e158:	20001ea5 	.word	0x20001ea5
 800e15c:	20001e90 	.word	0x20001e90
 800e160:	20001f68 	.word	0x20001f68
 800e164:	20001eb8 	.word	0x20001eb8
 800e168:	20001eb4 	.word	0x20001eb4
 800e16c:	20001ebc 	.word	0x20001ebc

0800e170 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e174:	f3bf 8f4f 	dsb	sy
}
 800e178:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e17a:	4b04      	ldr	r3, [pc, #16]	@ (800e18c <__NVIC_SystemReset+0x1c>)
 800e17c:	4a04      	ldr	r2, [pc, #16]	@ (800e190 <__NVIC_SystemReset+0x20>)
 800e17e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e180:	f3bf 8f4f 	dsb	sy
}
 800e184:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e186:	46c0      	nop			@ (mov r8, r8)
 800e188:	e7fd      	b.n	800e186 <__NVIC_SystemReset+0x16>
 800e18a:	46c0      	nop			@ (mov r8, r8)
 800e18c:	e000ed00 	.word	0xe000ed00
 800e190:	05fa0004 	.word	0x05fa0004

0800e194 <tx_control>:

uint32_t   chksum_to_compare = 0;
uint8_t    contador_bloques_fw = 16;


void tx_control(void){
 800e194:	b580      	push	{r7, lr}
 800e196:	b092      	sub	sp, #72	@ 0x48
 800e198:	af00      	add	r7, sp, #0

	//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
	//ld			A,BluetoothState
	//cp			A,#3
	//jrne		end_tx_control_b ; directamente sal de tx_control
	if(BluetoothState != 3)
 800e19a:	4bd9      	ldr	r3, [pc, #868]	@ (800e500 <tx_control+0x36c>)
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d001      	beq.n	800e1a6 <tx_control+0x12>
 800e1a2:	f003 f927 	bl	80113f4 <tx_control+0x3260>
		goto end_tx_control_b;

	//; / define el estado actual de la conexion correspondiente
	//tnz			delayComStat
	//jrne		end_tx_control
	if(delayComStat)
 800e1a6:	4bd7      	ldr	r3, [pc, #860]	@ (800e504 <tx_control+0x370>)
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d001      	beq.n	800e1b2 <tx_control+0x1e>
 800e1ae:	f002 f893 	bl	80102d8 <tx_control+0x2144>
		goto end_tx_control;
statDef:
 800e1b2:	46c0      	nop			@ (mov r8, r8)
	//tnz			statComFlag
	//jreq		statDef_clr
	if(statComFlag==0)
 800e1b4:	4bd4      	ldr	r3, [pc, #848]	@ (800e508 <tx_control+0x374>)
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d029      	beq.n	800e210 <tx_control+0x7c>
		goto statDef_clr;
	//;si el pin de estado está en 1 , pregunta por que comunicacion está activa
	if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,statDef_WIFI
 800e1bc:	4bd3      	ldr	r3, [pc, #844]	@ (800e50c <tx_control+0x378>)
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d11d      	bne.n	800e200 <tx_control+0x6c>
		goto statDef_WIFI;
statDef_BLE:
 800e1c4:	46c0      	nop			@ (mov r8, r8)
	flagsTxControl[f_statBLE] = 1;	//bset		flagsTxControl,#f_statBLE
 800e1c6:	4bd1      	ldr	r3, [pc, #836]	@ (800e50c <tx_control+0x378>)
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	705a      	strb	r2, [r3, #1]
	//ldw		X,#300;
	timeoutTWF = 300;	//ldw		timeoutTWF,X;					/ manten carga time out de Token (5 min)
 800e1cc:	4bd0      	ldr	r3, [pc, #832]	@ (800e510 <tx_control+0x37c>)
 800e1ce:	2296      	movs	r2, #150	@ 0x96
 800e1d0:	0052      	lsls	r2, r2, #1
 800e1d2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800e1d4:	233f      	movs	r3, #63	@ 0x3f
 800e1d6:	18fb      	adds	r3, r7, r3
 800e1d8:	2200      	movs	r2, #0
 800e1da:	701a      	strb	r2, [r3, #0]
 800e1dc:	e00a      	b.n	800e1f4 <tx_control+0x60>
		flagsWIFI[i] = 0;
 800e1de:	203f      	movs	r0, #63	@ 0x3f
 800e1e0:	183b      	adds	r3, r7, r0
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	4acb      	ldr	r2, [pc, #812]	@ (800e514 <tx_control+0x380>)
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800e1ea:	183b      	adds	r3, r7, r0
 800e1ec:	781a      	ldrb	r2, [r3, #0]
 800e1ee:	183b      	adds	r3, r7, r0
 800e1f0:	3201      	adds	r2, #1
 800e1f2:	701a      	strb	r2, [r3, #0]
 800e1f4:	233f      	movs	r3, #63	@ 0x3f
 800e1f6:	18fb      	adds	r3, r7, r3
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	2b07      	cmp	r3, #7
 800e1fc:	d9ef      	bls.n	800e1de <tx_control+0x4a>
	goto end_statDef;//jra			end_statDef
 800e1fe:	e047      	b.n	800e290 <tx_control+0xfc>
		goto statDef_WIFI;
 800e200:	46c0      	nop			@ (mov r8, r8)
statDef_WIFI:
	flagsTxControl[f_statWIFI] = 1;	//bset		flagsTxControl,#f_statWIFI
 800e202:	4bc2      	ldr	r3, [pc, #776]	@ (800e50c <tx_control+0x378>)
 800e204:	2201      	movs	r2, #1
 800e206:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 255;			// mov			statComWIFIFlag,#255
 800e208:	4bc3      	ldr	r3, [pc, #780]	@ (800e518 <tx_control+0x384>)
 800e20a:	22ff      	movs	r2, #255	@ 0xff
 800e20c:	701a      	strb	r2, [r3, #0]
	goto end_statDef;				// jra			end_statDef
 800e20e:	e03f      	b.n	800e290 <tx_control+0xfc>
		goto statDef_clr;
 800e210:	46c0      	nop			@ (mov r8, r8)
statDef_clr:
	//;pregunta por que comunicacion está inactiva
	//btjt		flagsTxControl,#f_select,statDef_clrWIFI
	if(flagsTxControl[f_select])
 800e212:	4bbe      	ldr	r3, [pc, #760]	@ (800e50c <tx_control+0x378>)
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d133      	bne.n	800e282 <tx_control+0xee>
		goto statDef_clrWIFI;
statDef_clrBLE:
 800e21a:	46c0      	nop			@ (mov r8, r8)

	//btjf	flagsTxControl,#f_statBLE,noCancelTx ;// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
	if(!flagsTxControl[f_statBLE])
 800e21c:	4bbb      	ldr	r3, [pc, #748]	@ (800e50c <tx_control+0x378>)
 800e21e:	785b      	ldrb	r3, [r3, #1]
 800e220:	2201      	movs	r2, #1
 800e222:	4053      	eors	r3, r2
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b00      	cmp	r3, #0
 800e228:	d123      	bne.n	800e272 <tx_control+0xde>
		goto noCancelTx;

	keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 800e22a:	4bbc      	ldr	r3, [pc, #752]	@ (800e51c <tx_control+0x388>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	701a      	strb	r2, [r3, #0]
	// clr		flagsTX
	//clr		flagsRxFirm
	for(uint8_t i=0 ; i<8 ; i++){
 800e230:	233e      	movs	r3, #62	@ 0x3e
 800e232:	18fb      	adds	r3, r7, r3
 800e234:	2200      	movs	r2, #0
 800e236:	701a      	strb	r2, [r3, #0]
 800e238:	e00f      	b.n	800e25a <tx_control+0xc6>
		flagsTX[i] = 0;
 800e23a:	203e      	movs	r0, #62	@ 0x3e
 800e23c:	183b      	adds	r3, r7, r0
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	4ab7      	ldr	r2, [pc, #732]	@ (800e520 <tx_control+0x38c>)
 800e242:	2100      	movs	r1, #0
 800e244:	54d1      	strb	r1, [r2, r3]
		flagsRxFirm[i] = 0;
 800e246:	183b      	adds	r3, r7, r0
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	4ab6      	ldr	r2, [pc, #728]	@ (800e524 <tx_control+0x390>)
 800e24c:	2100      	movs	r1, #0
 800e24e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0 ; i<8 ; i++){
 800e250:	183b      	adds	r3, r7, r0
 800e252:	781a      	ldrb	r2, [r3, #0]
 800e254:	183b      	adds	r3, r7, r0
 800e256:	3201      	adds	r2, #1
 800e258:	701a      	strb	r2, [r3, #0]
 800e25a:	233e      	movs	r3, #62	@ 0x3e
 800e25c:	18fb      	adds	r3, r7, r3
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	2b07      	cmp	r3, #7
 800e262:	d9ea      	bls.n	800e23a <tx_control+0xa6>
	}

	flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 800e264:	4bb0      	ldr	r3, [pc, #704]	@ (800e528 <tx_control+0x394>)
 800e266:	2200      	movs	r2, #0
 800e268:	711a      	strb	r2, [r3, #4]
	flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 800e26a:	4baf      	ldr	r3, [pc, #700]	@ (800e528 <tx_control+0x394>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	715a      	strb	r2, [r3, #5]
 800e270:	e000      	b.n	800e274 <tx_control+0xe0>
		goto noCancelTx;
 800e272:	46c0      	nop			@ (mov r8, r8)
noCancelTx:

	flagsTxControl[f_statBLE] = 0;		//bres		flagsTxControl,#f_statBLE
 800e274:	4ba5      	ldr	r3, [pc, #660]	@ (800e50c <tx_control+0x378>)
 800e276:	2200      	movs	r2, #0
 800e278:	705a      	strb	r2, [r3, #1]
	DevLock = 0;						//clr			DevLock;			sí se pierde conexión BLE el candado vuelve a estar activo
 800e27a:	4bac      	ldr	r3, [pc, #688]	@ (800e52c <tx_control+0x398>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	701a      	strb	r2, [r3, #0]
	goto end_statDef;					//jra			end_statDef
 800e280:	e006      	b.n	800e290 <tx_control+0xfc>
		goto statDef_clrWIFI;
 800e282:	46c0      	nop			@ (mov r8, r8)
statDef_clrWIFI:
	flagsTxControl[f_statWIFI] = 0;		//bres		flagsTxControl,#f_statWIFI
 800e284:	4ba1      	ldr	r3, [pc, #644]	@ (800e50c <tx_control+0x378>)
 800e286:	2200      	movs	r2, #0
 800e288:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 0;				//clr			statComWIFIFlag
 800e28a:	4ba3      	ldr	r3, [pc, #652]	@ (800e518 <tx_control+0x384>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	701a      	strb	r2, [r3, #0]
//;===========================================================
//;										TOKEN BLE
//;===========================================================
tokenBLE:
	//;Token solo se manda cuando está seleccionada la comunicación BLE
	if(!flagsTxControl[f_select])//btjf	flagsTxControl,#f_select,tokenBLE_01
 800e290:	4b9e      	ldr	r3, [pc, #632]	@ (800e50c <tx_control+0x378>)
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	2201      	movs	r2, #1
 800e296:	4053      	eors	r3, r2
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d058      	beq.n	800e350 <tx_control+0x1bc>
		goto tokenBLE_01;
 800e29e:	46c0      	nop			@ (mov r8, r8)
tokenBLE_01:

//	btjt	flagsRxFirm,#0,tokenBLE_02; Empezó recepción de Firmware ?
//	btjt	flagsLogger,#5,tokenBLE_02; Empezó Tx logger datos
//	btjt	flagsLogger,#4,tokenBLE_02; Empezó Tx logger eventos
	if(flagsRxFirm[0] || flagsLogger[4] || flagsLogger[5])
 800e2a0:	4ba0      	ldr	r3, [pc, #640]	@ (800e524 <tx_control+0x390>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d117      	bne.n	800e2d8 <tx_control+0x144>
 800e2a8:	4b9f      	ldr	r3, [pc, #636]	@ (800e528 <tx_control+0x394>)
 800e2aa:	791b      	ldrb	r3, [r3, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d113      	bne.n	800e2d8 <tx_control+0x144>
 800e2b0:	4b9d      	ldr	r3, [pc, #628]	@ (800e528 <tx_control+0x394>)
 800e2b2:	795b      	ldrb	r3, [r3, #5]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d10f      	bne.n	800e2d8 <tx_control+0x144>
		goto tokenBLE_02;

	//tnz		codeTX
	if(codeTX == 0)//jreq	tx_tokenBLE;			/se recibió algun comando valido? No, checa sí hay que mandar token
 800e2b8:	4b9d      	ldr	r3, [pc, #628]	@ (800e530 <tx_control+0x39c>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d019      	beq.n	800e2f4 <tx_control+0x160>
		goto tx_tokenBLE;
	//;Interpreta comando

	//ld		A,codeTX
	//cp		A,#$80;						/ se recibió respuesta WIFI ?
	if(codeTX == 0x80)		//jreq	finTokenBLE
 800e2c0:	4b9b      	ldr	r3, [pc, #620]	@ (800e530 <tx_control+0x39c>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b80      	cmp	r3, #128	@ 0x80
 800e2c6:	d045      	beq.n	800e354 <tx_control+0x1c0>
		goto finTokenBLE;
	//cp		A,#$81;						/ se recibió respuesta BLE ?
	if(codeTX != 0x81)		//jrne	tokenBLE_03;			/ no, es otro comando, deja correr la ejecución
 800e2c8:	4b99      	ldr	r3, [pc, #612]	@ (800e530 <tx_control+0x39c>)
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	2b81      	cmp	r3, #129	@ 0x81
 800e2ce:	d108      	bne.n	800e2e2 <tx_control+0x14e>
		goto tokenBLE_03;
	codeTX = 0;				// clr		codeTX;						/ sí, limpia código de Tx
 800e2d0:	4b97      	ldr	r3, [pc, #604]	@ (800e530 <tx_control+0x39c>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	e000      	b.n	800e2da <tx_control+0x146>
		goto tokenBLE_02;
 800e2d8:	46c0      	nop			@ (mov r8, r8)
tokenBLE_02:
	flagsTX2[2] = 1;		//bset	flagsTX2,#2;			/ sí se recibió repuesta, levanta bandera de token recibido
 800e2da:	4b96      	ldr	r3, [pc, #600]	@ (800e534 <tx_control+0x3a0>)
 800e2dc:	2201      	movs	r2, #1
 800e2de:	709a      	strb	r2, [r3, #2]
 800e2e0:	e000      	b.n	800e2e4 <tx_control+0x150>
		goto tokenBLE_03;
 800e2e2:	46c0      	nop			@ (mov r8, r8)

tokenBLE_03:
	//; la recepccion de cualquier comando tomala como una respuesta de  modulo de counicación
	timeTxTBLE = 20;			//mov		timeTxTBLE,#20;		/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800e2e4:	4b94      	ldr	r3, [pc, #592]	@ (800e538 <tx_control+0x3a4>)
 800e2e6:	2214      	movs	r2, #20
 800e2e8:	701a      	strb	r2, [r3, #0]
	//ldw		X,#300;
	timeoutTBLE = 300;			//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 800e2ea:	4b94      	ldr	r3, [pc, #592]	@ (800e53c <tx_control+0x3a8>)
 800e2ec:	2296      	movs	r2, #150	@ 0x96
 800e2ee:	0052      	lsls	r2, r2, #1
 800e2f0:	801a      	strh	r2, [r3, #0]
	goto finTokenBLE;			//jra		finTokenBLE
 800e2f2:	e034      	b.n	800e35e <tx_control+0x1ca>
		goto tx_tokenBLE;
 800e2f4:	46c0      	nop			@ (mov r8, r8)

tx_tokenBLE:
	//tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx)//jrne	finTokenBLE;						/ espera a que terminé
 800e2f6:	4b89      	ldr	r3, [pc, #548]	@ (800e51c <tx_control+0x388>)
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d12c      	bne.n	800e358 <tx_control+0x1c4>
		goto finTokenBLE;
	//tnz		timeTxTBLE;						/ ya se cumplió tiempo para enviar Token Wifi ?
	if(timeTxTBLE)//jrne	finTokenBLE;					/ no, continua
 800e2fe:	4b8e      	ldr	r3, [pc, #568]	@ (800e538 <tx_control+0x3a4>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d12a      	bne.n	800e35c <tx_control+0x1c8>
		goto finTokenBLE;

	timeTxTBLE = 20;//mov		timeTxTBLE,#20;				/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800e306:	4b8c      	ldr	r3, [pc, #560]	@ (800e538 <tx_control+0x3a4>)
 800e308:	2214      	movs	r2, #20
 800e30a:	701a      	strb	r2, [r3, #0]

	//ldw		X,#$40FA
	//ldw		bufferTxControl,X
	bufferTxControl[0] = 0x40;
 800e30c:	4b8c      	ldr	r3, [pc, #560]	@ (800e540 <tx_control+0x3ac>)
 800e30e:	2240      	movs	r2, #64	@ 0x40
 800e310:	701a      	strb	r2, [r3, #0]
	bufferTxControl[1] = 0xFA;
 800e312:	4b8b      	ldr	r3, [pc, #556]	@ (800e540 <tx_control+0x3ac>)
 800e314:	22fa      	movs	r2, #250	@ 0xfa
 800e316:	705a      	strb	r2, [r3, #1]
	flagsTX[2] = 0;				//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e318:	4b81      	ldr	r3, [pc, #516]	@ (800e520 <tx_control+0x38c>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	709a      	strb	r2, [r3, #2]
	//ldw		pointTx,X
	//ldw		pointInitTx,X
	//incw	X
	//ldw		pointEndTx,X
	//mov		blockSizeTX,#2
	pointTx = &bufferTxControl[0];
 800e31e:	4b89      	ldr	r3, [pc, #548]	@ (800e544 <tx_control+0x3b0>)
 800e320:	4a87      	ldr	r2, [pc, #540]	@ (800e540 <tx_control+0x3ac>)
 800e322:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e324:	4b88      	ldr	r3, [pc, #544]	@ (800e548 <tx_control+0x3b4>)
 800e326:	4a86      	ldr	r2, [pc, #536]	@ (800e540 <tx_control+0x3ac>)
 800e328:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[2];
 800e32a:	4b88      	ldr	r3, [pc, #544]	@ (800e54c <tx_control+0x3b8>)
 800e32c:	4a88      	ldr	r2, [pc, #544]	@ (800e550 <tx_control+0x3bc>)
 800e32e:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800e330:	4b88      	ldr	r3, [pc, #544]	@ (800e554 <tx_control+0x3c0>)
 800e332:	2202      	movs	r2, #2
 800e334:	701a      	strb	r2, [r3, #0]

	//clrw	X
	//ldw		chksum_HW,X
	//ldw		chksum_LW,X;					/ limpia registros de checksum
	chksum_32_HW_LW = 0;
 800e336:	4b88      	ldr	r3, [pc, #544]	@ (800e558 <tx_control+0x3c4>)
 800e338:	2200      	movs	r2, #0
 800e33a:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;					// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e33c:	4b78      	ldr	r3, [pc, #480]	@ (800e520 <tx_control+0x38c>)
 800e33e:	2201      	movs	r2, #1
 800e340:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;					//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e342:	4b76      	ldr	r3, [pc, #472]	@ (800e51c <tx_control+0x388>)
 800e344:	2255      	movs	r2, #85	@ 0x55
 800e346:	701a      	strb	r2, [r3, #0]
	codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800e348:	4b79      	ldr	r3, [pc, #484]	@ (800e530 <tx_control+0x39c>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	701a      	strb	r2, [r3, #0]

	goto finTokenBLE;//jra		finTokenBLE
 800e34e:	e006      	b.n	800e35e <tx_control+0x1ca>
	goto finTokenBLE;//jra		finTokenBLE
 800e350:	46c0      	nop			@ (mov r8, r8)
 800e352:	e004      	b.n	800e35e <tx_control+0x1ca>
		goto finTokenBLE;
 800e354:	46c0      	nop			@ (mov r8, r8)
 800e356:	e002      	b.n	800e35e <tx_control+0x1ca>
		goto finTokenBLE;
 800e358:	46c0      	nop			@ (mov r8, r8)
 800e35a:	e000      	b.n	800e35e <tx_control+0x1ca>
		goto finTokenBLE;
 800e35c:	46c0      	nop			@ (mov r8, r8)
//;										TOKEN WiFi
//;===========================================================
tokenWiFi:

	//;Token solo se manda cuando está seleccionada la comunicación WIFI
	if(flagsTxControl[f_select])	//btjt	flagsTxControl,#f_select,tokenWiFi_01
 800e35e:	4b6b      	ldr	r3, [pc, #428]	@ (800e50c <tx_control+0x378>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d100      	bne.n	800e368 <tx_control+0x1d4>
 800e366:	e12f      	b.n	800e5c8 <tx_control+0x434>
		goto tokenWiFi_01;
 800e368:	46c0      	nop			@ (mov r8, r8)
	goto finTokenWiFi;				//jra		finTokenWiFi
tokenWiFi_01:

	//btjt	flagsWIFI,#f_timeLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	//btjt	flagsWIFI,#f_eventLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	if(flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800e36a:	4b6a      	ldr	r3, [pc, #424]	@ (800e514 <tx_control+0x380>)
 800e36c:	78db      	ldrb	r3, [r3, #3]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d130      	bne.n	800e3d4 <tx_control+0x240>
 800e372:	4b68      	ldr	r3, [pc, #416]	@ (800e514 <tx_control+0x380>)
 800e374:	791b      	ldrb	r3, [r3, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d12c      	bne.n	800e3d4 <tx_control+0x240>
		goto tokenWiFi_02;

	//ldw		X,cntSetName
	//tnzw	X
	if(cntSetName)//jrne	tokenWiFi_02
 800e37a:	4b78      	ldr	r3, [pc, #480]	@ (800e55c <tx_control+0x3c8>)
 800e37c:	881b      	ldrh	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d12a      	bne.n	800e3d8 <tx_control+0x244>
		goto tokenWiFi_02;

	//ldw			X,#600
	cntSetName = 600;	//ldw			cntSetName,X
 800e382:	4b76      	ldr	r3, [pc, #472]	@ (800e55c <tx_control+0x3c8>)
 800e384:	2296      	movs	r2, #150	@ 0x96
 800e386:	0092      	lsls	r2, r2, #2
 800e388:	801a      	strh	r2, [r3, #0]

	//;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
	//;copia los datos al buffer de tx
	//ldw		X,#difName
	//ldw		Y,#bufferTxControl
	wreg = 50;//mov		wreg,#50
 800e38a:	4b75      	ldr	r3, [pc, #468]	@ (800e560 <tx_control+0x3cc>)
 800e38c:	2232      	movs	r2, #50	@ 0x32
 800e38e:	701a      	strb	r2, [r3, #0]
	copyVector(&difName[0],&bufferTxControl[0]);//call	copyVector
 800e390:	4a6b      	ldr	r2, [pc, #428]	@ (800e540 <tx_control+0x3ac>)
 800e392:	4b74      	ldr	r3, [pc, #464]	@ (800e564 <tx_control+0x3d0>)
 800e394:	0011      	movs	r1, r2
 800e396:	0018      	movs	r0, r3
 800e398:	f7f8 fe52 	bl	8007040 <copyVector>
//	ldw		pointTx,X
//	ldw		pointInitTx,X
//	ldw		X,#(bufferTxControl+50)
//	ldw		pointEndTx,X
//	mov		blockSizeTX,#50
	pointTx = &bufferTxControl[0];
 800e39c:	4b69      	ldr	r3, [pc, #420]	@ (800e544 <tx_control+0x3b0>)
 800e39e:	4a68      	ldr	r2, [pc, #416]	@ (800e540 <tx_control+0x3ac>)
 800e3a0:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800e3a2:	4b69      	ldr	r3, [pc, #420]	@ (800e548 <tx_control+0x3b4>)
 800e3a4:	4a66      	ldr	r2, [pc, #408]	@ (800e540 <tx_control+0x3ac>)
 800e3a6:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[50];
 800e3a8:	4b68      	ldr	r3, [pc, #416]	@ (800e54c <tx_control+0x3b8>)
 800e3aa:	4a6f      	ldr	r2, [pc, #444]	@ (800e568 <tx_control+0x3d4>)
 800e3ac:	601a      	str	r2, [r3, #0]
	blockSizeTX = 50;
 800e3ae:	4b69      	ldr	r3, [pc, #420]	@ (800e554 <tx_control+0x3c0>)
 800e3b0:	2232      	movs	r2, #50	@ 0x32
 800e3b2:	701a      	strb	r2, [r3, #0]

	flagsTX[2] = 0;		//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e3b4:	4b5a      	ldr	r3, [pc, #360]	@ (800e520 <tx_control+0x38c>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	709a      	strb	r2, [r3, #2]

	//clrw	X
	//ldw		chksum_HW,X
	chksum_32_HW_LW = 0;		//ldw		chksum_LW,X;					/ limpia registros de checksum
 800e3ba:	4b67      	ldr	r3, [pc, #412]	@ (800e558 <tx_control+0x3c4>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;				//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e3c0:	4b57      	ldr	r3, [pc, #348]	@ (800e520 <tx_control+0x38c>)
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;				//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e3c6:	4b55      	ldr	r3, [pc, #340]	@ (800e51c <tx_control+0x388>)
 800e3c8:	2255      	movs	r2, #85	@ 0x55
 800e3ca:	701a      	strb	r2, [r3, #0]
	codeTX= 0;					//clr		codeTX;								/ limpia código de Tx
 800e3cc:	4b58      	ldr	r3, [pc, #352]	@ (800e530 <tx_control+0x39c>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	701a      	strb	r2, [r3, #0]

	goto finTokenWiFi;//jra		finTokenWiFi
 800e3d2:	e0fe      	b.n	800e5d2 <tx_control+0x43e>
		goto tokenWiFi_02;
 800e3d4:	46c0      	nop			@ (mov r8, r8)
 800e3d6:	e000      	b.n	800e3da <tx_control+0x246>
		goto tokenWiFi_02;
 800e3d8:	46c0      	nop			@ (mov r8, r8)
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800e3da:	4b52      	ldr	r3, [pc, #328]	@ (800e524 <tx_control+0x390>)
 800e3dc:	781a      	ldrb	r2, [r3, #0]
 800e3de:	4b52      	ldr	r3, [pc, #328]	@ (800e528 <tx_control+0x394>)
 800e3e0:	795b      	ldrb	r3, [r3, #5]
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	4b50      	ldr	r3, [pc, #320]	@ (800e528 <tx_control+0x394>)
 800e3e8:	791b      	ldrb	r3, [r3, #4]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	4b49      	ldr	r3, [pc, #292]	@ (800e514 <tx_control+0x380>)
 800e3f0:	78db      	ldrb	r3, [r3, #3]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	4b47      	ldr	r3, [pc, #284]	@ (800e514 <tx_control+0x380>)
 800e3f8:	791b      	ldrb	r3, [r3, #4]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d000      	beq.n	800e404 <tx_control+0x270>
 800e402:	e0d9      	b.n	800e5b8 <tx_control+0x424>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800e404:	4b4a      	ldr	r3, [pc, #296]	@ (800e530 <tx_control+0x39c>)
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d000      	beq.n	800e40e <tx_control+0x27a>
 800e40c:	e0ca      	b.n	800e5a4 <tx_control+0x410>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800e40e:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800e410:	4b42      	ldr	r3, [pc, #264]	@ (800e51c <tx_control+0x388>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d000      	beq.n	800e41a <tx_control+0x286>
 800e418:	e0d8      	b.n	800e5cc <tx_control+0x438>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800e41a:	4b54      	ldr	r3, [pc, #336]	@ (800e56c <tx_control+0x3d8>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d152      	bne.n	800e4c8 <tx_control+0x334>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800e422:	4b52      	ldr	r3, [pc, #328]	@ (800e56c <tx_control+0x3d8>)
 800e424:	221e      	movs	r2, #30
 800e426:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800e428:	4b45      	ldr	r3, [pc, #276]	@ (800e540 <tx_control+0x3ac>)
 800e42a:	2240      	movs	r2, #64	@ 0x40
 800e42c:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800e42e:	4b44      	ldr	r3, [pc, #272]	@ (800e540 <tx_control+0x3ac>)
 800e430:	22f8      	movs	r2, #248	@ 0xf8
 800e432:	705a      	strb	r2, [r3, #1]
//		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
//		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
//		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
//		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X

		bufferTxControl[2] = reeLat1;	//ldw X,eeLat1
 800e434:	4b4e      	ldr	r3, [pc, #312]	@ (800e570 <tx_control+0x3dc>)
 800e436:	781a      	ldrb	r2, [r3, #0]
 800e438:	4b41      	ldr	r3, [pc, #260]	@ (800e540 <tx_control+0x3ac>)
 800e43a:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = reeLat2;	//ldw bufferTxControl+2,X
 800e43c:	4b4d      	ldr	r3, [pc, #308]	@ (800e574 <tx_control+0x3e0>)
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	4b3f      	ldr	r3, [pc, #252]	@ (800e540 <tx_control+0x3ac>)
 800e442:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = reeLat3;	//ldw X,eeLat3
 800e444:	4b4c      	ldr	r3, [pc, #304]	@ (800e578 <tx_control+0x3e4>)
 800e446:	781a      	ldrb	r2, [r3, #0]
 800e448:	4b3d      	ldr	r3, [pc, #244]	@ (800e540 <tx_control+0x3ac>)
 800e44a:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = reeLat4;	//ldw bufferTxControl+4,X
 800e44c:	4b4b      	ldr	r3, [pc, #300]	@ (800e57c <tx_control+0x3e8>)
 800e44e:	781a      	ldrb	r2, [r3, #0]
 800e450:	4b3b      	ldr	r3, [pc, #236]	@ (800e540 <tx_control+0x3ac>)
 800e452:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = reeLong1;	//ldw X,eeLong1
 800e454:	4b4a      	ldr	r3, [pc, #296]	@ (800e580 <tx_control+0x3ec>)
 800e456:	781a      	ldrb	r2, [r3, #0]
 800e458:	4b39      	ldr	r3, [pc, #228]	@ (800e540 <tx_control+0x3ac>)
 800e45a:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = reeLong2;	//ldw bufferTxControl+6,X
 800e45c:	4b49      	ldr	r3, [pc, #292]	@ (800e584 <tx_control+0x3f0>)
 800e45e:	781a      	ldrb	r2, [r3, #0]
 800e460:	4b37      	ldr	r3, [pc, #220]	@ (800e540 <tx_control+0x3ac>)
 800e462:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = reeLong3;	//ldw X,eeLong3
 800e464:	4b48      	ldr	r3, [pc, #288]	@ (800e588 <tx_control+0x3f4>)
 800e466:	781a      	ldrb	r2, [r3, #0]
 800e468:	4b35      	ldr	r3, [pc, #212]	@ (800e540 <tx_control+0x3ac>)
 800e46a:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = reeLong4;	//ldw bufferTxControl+8,X
 800e46c:	4b47      	ldr	r3, [pc, #284]	@ (800e58c <tx_control+0x3f8>)
 800e46e:	781a      	ldrb	r2, [r3, #0]
 800e470:	4b33      	ldr	r3, [pc, #204]	@ (800e540 <tx_control+0x3ac>)
 800e472:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = versionFirm1;
 800e474:	4b46      	ldr	r3, [pc, #280]	@ (800e590 <tx_control+0x3fc>)
 800e476:	781a      	ldrb	r2, [r3, #0]
 800e478:	4b31      	ldr	r3, [pc, #196]	@ (800e540 <tx_control+0x3ac>)
 800e47a:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = versionFirm2;
 800e47c:	4b45      	ldr	r3, [pc, #276]	@ (800e594 <tx_control+0x400>)
 800e47e:	781a      	ldrb	r2, [r3, #0]
 800e480:	4b2f      	ldr	r3, [pc, #188]	@ (800e540 <tx_control+0x3ac>)
 800e482:	72da      	strb	r2, [r3, #11]
		bufferTxControl[12] = fm_hardware;
 800e484:	4b44      	ldr	r3, [pc, #272]	@ (800e598 <tx_control+0x404>)
 800e486:	781a      	ldrb	r2, [r3, #0]
 800e488:	4b2d      	ldr	r3, [pc, #180]	@ (800e540 <tx_control+0x3ac>)
 800e48a:	731a      	strb	r2, [r3, #12]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800e48c:	4b24      	ldr	r3, [pc, #144]	@ (800e520 <tx_control+0x38c>)
 800e48e:	2200      	movs	r2, #0
 800e490:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800e492:	4b2b      	ldr	r3, [pc, #172]	@ (800e540 <tx_control+0x3ac>)
 800e494:	647b      	str	r3, [r7, #68]	@ 0x44
		pointTx = point_X;				// ldw		pointTx,X
 800e496:	4b2b      	ldr	r3, [pc, #172]	@ (800e544 <tx_control+0x3b0>)
 800e498:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e49a:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800e49c:	4b2a      	ldr	r3, [pc, #168]	@ (800e548 <tx_control+0x3b4>)
 800e49e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4a0:	601a      	str	r2, [r3, #0]

		//pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
    										// ldw		pointEndTx,X
		pointEndTx = &bufferTxControl[13];
 800e4a2:	4b2a      	ldr	r3, [pc, #168]	@ (800e54c <tx_control+0x3b8>)
 800e4a4:	4a3d      	ldr	r2, [pc, #244]	@ (800e59c <tx_control+0x408>)
 800e4a6:	601a      	str	r2, [r3, #0]
		//blockSizeTX = 10;						// mov		blockSizeTX,#10
		blockSizeTX = 13;
 800e4a8:	4b2a      	ldr	r3, [pc, #168]	@ (800e554 <tx_control+0x3c0>)
 800e4aa:	220d      	movs	r2, #13
 800e4ac:	701a      	strb	r2, [r3, #0]
		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800e4ae:	4b2a      	ldr	r3, [pc, #168]	@ (800e558 <tx_control+0x3c4>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800e4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800e520 <tx_control+0x38c>)
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800e4ba:	4b18      	ldr	r3, [pc, #96]	@ (800e51c <tx_control+0x388>)
 800e4bc:	2255      	movs	r2, #85	@ 0x55
 800e4be:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800e4c0:	4b1b      	ldr	r3, [pc, #108]	@ (800e530 <tx_control+0x39c>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800e4c6:	e084      	b.n	800e5d2 <tx_control+0x43e>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800e4c8:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800e4ca:	4b19      	ldr	r3, [pc, #100]	@ (800e530 <tx_control+0x39c>)
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b80      	cmp	r3, #128	@ 0x80
 800e4d0:	d00f      	beq.n	800e4f2 <tx_control+0x35e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800e4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e510 <tx_control+0x37c>)
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d000      	beq.n	800e4dc <tx_control+0x348>
 800e4da:	e079      	b.n	800e5d0 <tx_control+0x43c>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800e4dc:	4b15      	ldr	r3, [pc, #84]	@ (800e534 <tx_control+0x3a0>)
 800e4de:	2200      	movs	r2, #0
 800e4e0:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800e4e2:	4b2f      	ldr	r3, [pc, #188]	@ (800e5a0 <tx_control+0x40c>)
 800e4e4:	2205      	movs	r2, #5
 800e4e6:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800e4e8:	4b09      	ldr	r3, [pc, #36]	@ (800e510 <tx_control+0x37c>)
 800e4ea:	2296      	movs	r2, #150	@ 0x96
 800e4ec:	0052      	lsls	r2, r2, #1
 800e4ee:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800e4f0:	e06f      	b.n	800e5d2 <tx_control+0x43e>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800e4f2:	46c0      	nop			@ (mov r8, r8)
 800e4f4:	e000      	b.n	800e4f8 <tx_control+0x364>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800e4f6:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800e4f8:	4b0d      	ldr	r3, [pc, #52]	@ (800e530 <tx_control+0x39c>)
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	701a      	strb	r2, [r3, #0]
 800e4fe:	e052      	b.n	800e5a6 <tx_control+0x412>
 800e500:	2000004c 	.word	0x2000004c
 800e504:	20002180 	.word	0x20002180
 800e508:	20002182 	.word	0x20002182
 800e50c:	20002178 	.word	0x20002178
 800e510:	20001fd8 	.word	0x20001fd8
 800e514:	20001fdc 	.word	0x20001fdc
 800e518:	20002183 	.word	0x20002183
 800e51c:	20001ea5 	.word	0x20001ea5
 800e520:	20001ea8 	.word	0x20001ea8
 800e524:	20001f68 	.word	0x20001f68
 800e528:	20001e90 	.word	0x20001e90
 800e52c:	20002181 	.word	0x20002181
 800e530:	20001eb0 	.word	0x20001eb0
 800e534:	20001fd0 	.word	0x20001fd0
 800e538:	20002186 	.word	0x20002186
 800e53c:	20002188 	.word	0x20002188
 800e540:	20002034 	.word	0x20002034
 800e544:	20001ea0 	.word	0x20001ea0
 800e548:	20001e98 	.word	0x20001e98
 800e54c:	20001e9c 	.word	0x20001e9c
 800e550:	20002036 	.word	0x20002036
 800e554:	20001ebc 	.word	0x20001ebc
 800e558:	20001ec0 	.word	0x20001ec0
 800e55c:	20002184 	.word	0x20002184
 800e560:	20000b53 	.word	0x20000b53
 800e564:	20000228 	.word	0x20000228
 800e568:	20002066 	.word	0x20002066
 800e56c:	20001fc6 	.word	0x20001fc6
 800e570:	200001bb 	.word	0x200001bb
 800e574:	200001bc 	.word	0x200001bc
 800e578:	200001bd 	.word	0x200001bd
 800e57c:	200001be 	.word	0x200001be
 800e580:	200001bf 	.word	0x200001bf
 800e584:	200001c0 	.word	0x200001c0
 800e588:	200001c1 	.word	0x200001c1
 800e58c:	200001c2 	.word	0x200001c2
 800e590:	0801eff0 	.word	0x0801eff0
 800e594:	0801eff1 	.word	0x0801eff1
 800e598:	0801eff2 	.word	0x0801eff2
 800e59c:	20002041 	.word	0x20002041
 800e5a0:	20001f74 	.word	0x20001f74
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800e5a4:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800e5a6:	4be8      	ldr	r3, [pc, #928]	@ (800e948 <tx_control+0x7b4>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	2b80      	cmp	r3, #128	@ 0x80
 800e5ac:	d0a3      	beq.n	800e4f6 <tx_control+0x362>
		}
		timeoutTWF = 300;
 800e5ae:	4be7      	ldr	r3, [pc, #924]	@ (800e94c <tx_control+0x7b8>)
 800e5b0:	2296      	movs	r2, #150	@ 0x96
 800e5b2:	0052      	lsls	r2, r2, #1
 800e5b4:	801a      	strh	r2, [r3, #0]
 800e5b6:	e000      	b.n	800e5ba <tx_control+0x426>
			goto rx_tokenWiFi_02;
 800e5b8:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi_02:

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800e5ba:	4be5      	ldr	r3, [pc, #916]	@ (800e950 <tx_control+0x7bc>)
 800e5bc:	221e      	movs	r2, #30
 800e5be:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800e5c0:	4be4      	ldr	r3, [pc, #912]	@ (800e954 <tx_control+0x7c0>)
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		//timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800e5c6:	e004      	b.n	800e5d2 <tx_control+0x43e>
	goto finTokenWiFi;				//jra		finTokenWiFi
 800e5c8:	46c0      	nop			@ (mov r8, r8)
 800e5ca:	e002      	b.n	800e5d2 <tx_control+0x43e>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800e5cc:	46c0      	nop			@ (mov r8, r8)
 800e5ce:	e000      	b.n	800e5d2 <tx_control+0x43e>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800e5d0:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800e5d2:	4be0      	ldr	r3, [pc, #896]	@ (800e954 <tx_control+0x7c0>)
 800e5d4:	785b      	ldrb	r3, [r3, #1]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <tx_control+0x44a>
 800e5da:	f001 fe7f 	bl	80102dc <tx_control+0x2148>
			goto tokenWiFi_OK;
 800e5de:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800e5e0:	4bdd      	ldr	r3, [pc, #884]	@ (800e958 <tx_control+0x7c4>)
 800e5e2:	78db      	ldrb	r3, [r3, #3]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	4053      	eors	r3, r2
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <tx_control+0x45e>
 800e5ee:	f000 fcd1 	bl	800ef94 <tx_control+0xe00>
			goto tx_control_00;
 800e5f2:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800e5f4:	4bd8      	ldr	r3, [pc, #864]	@ (800e958 <tx_control+0x7c4>)
 800e5f6:	791b      	ldrb	r3, [r3, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	4053      	eors	r3, r2
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d101      	bne.n	800e606 <tx_control+0x472>
 800e602:	f000 fcc9 	bl	800ef98 <tx_control+0xe04>
			goto tx_control_00b;
 800e606:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800e608:	4bd4      	ldr	r3, [pc, #848]	@ (800e95c <tx_control+0x7c8>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2201      	movs	r2, #1
 800e60e:	4053      	eors	r3, r2
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d13d      	bne.n	800e692 <tx_control+0x4fe>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e616:	4bd2      	ldr	r3, [pc, #840]	@ (800e960 <tx_control+0x7cc>)
 800e618:	22f1      	movs	r2, #241	@ 0xf1
 800e61a:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800e61c:	4bcb      	ldr	r3, [pc, #812]	@ (800e94c <tx_control+0x7b8>)
 800e61e:	2296      	movs	r2, #150	@ 0x96
 800e620:	0052      	lsls	r2, r2, #1
 800e622:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 800e624:	4bcf      	ldr	r3, [pc, #828]	@ (800e964 <tx_control+0x7d0>)
 800e626:	2296      	movs	r2, #150	@ 0x96
 800e628:	0052      	lsls	r2, r2, #1
 800e62a:	801a      	strh	r2, [r3, #0]
		if(timeOutRx != 0){//tnz timeOutRx
 800e62c:	4bce      	ldr	r3, [pc, #824]	@ (800e968 <tx_control+0x7d4>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d118      	bne.n	800e666 <tx_control+0x4d2>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e634:	233d      	movs	r3, #61	@ 0x3d
 800e636:	18fb      	adds	r3, r7, r3
 800e638:	2200      	movs	r2, #0
 800e63a:	701a      	strb	r2, [r3, #0]
 800e63c:	e00a      	b.n	800e654 <tx_control+0x4c0>
			flagsRxFirm [i]= 0;
 800e63e:	203d      	movs	r0, #61	@ 0x3d
 800e640:	183b      	adds	r3, r7, r0
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	4ac5      	ldr	r2, [pc, #788]	@ (800e95c <tx_control+0x7c8>)
 800e646:	2100      	movs	r1, #0
 800e648:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800e64a:	183b      	adds	r3, r7, r0
 800e64c:	781a      	ldrb	r2, [r3, #0]
 800e64e:	183b      	adds	r3, r7, r0
 800e650:	3201      	adds	r2, #1
 800e652:	701a      	strb	r2, [r3, #0]
 800e654:	233d      	movs	r3, #61	@ 0x3d
 800e656:	18fb      	adds	r3, r7, r3
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	2b07      	cmp	r3, #7
 800e65c:	d9ef      	bls.n	800e63e <tx_control+0x4aa>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800e65e:	4bba      	ldr	r3, [pc, #744]	@ (800e948 <tx_control+0x7b4>)
 800e660:	2200      	movs	r2, #0
 800e662:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800e664:	e016      	b.n	800e694 <tx_control+0x500>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800e666:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800e668:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			bandera_act_fw_j = 1;
 800e66a:	4bc0      	ldr	r3, [pc, #768]	@ (800e96c <tx_control+0x7d8>)
 800e66c:	2201      	movs	r2, #1
 800e66e:	701a      	strb	r2, [r3, #0]
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800e670:	4bbf      	ldr	r3, [pc, #764]	@ (800e970 <tx_control+0x7dc>)
 800e672:	2201      	movs	r2, #1
 800e674:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800e676:	4bbe      	ldr	r3, [pc, #760]	@ (800e970 <tx_control+0x7dc>)
 800e678:	2201      	movs	r2, #1
 800e67a:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800e67c:	4bb7      	ldr	r3, [pc, #732]	@ (800e95c <tx_control+0x7c8>)
 800e67e:	78db      	ldrb	r3, [r3, #3]
 800e680:	2201      	movs	r2, #1
 800e682:	4053      	eors	r3, r2
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <tx_control+0x4fa>
 800e68a:	f001 f930 	bl	800f8ee <tx_control+0x175a>
				goto rx_firmware01;
 800e68e:	f001 f828 	bl	800f6e2 <tx_control+0x154e>
			goto ask_tx_control_01;
 800e692:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800e694:	4bac      	ldr	r3, [pc, #688]	@ (800e948 <tx_control+0x7b4>)
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b21      	cmp	r3, #33	@ 0x21
 800e69a:	d131      	bne.n	800e700 <tx_control+0x56c>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e69c:	4bb0      	ldr	r3, [pc, #704]	@ (800e960 <tx_control+0x7cc>)
 800e69e:	22f1      	movs	r2, #241	@ 0xf1
 800e6a0:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800e6a2:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800e6a4:	4bb3      	ldr	r3, [pc, #716]	@ (800e974 <tx_control+0x7e0>)
 800e6a6:	22f1      	movs	r2, #241	@ 0xf1
 800e6a8:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800e6aa:	4bb2      	ldr	r3, [pc, #712]	@ (800e974 <tx_control+0x7e0>)
 800e6ac:	223f      	movs	r2, #63	@ 0x3f
 800e6ae:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800e6b0:	4bb1      	ldr	r3, [pc, #708]	@ (800e978 <tx_control+0x7e4>)
 800e6b2:	781a      	ldrb	r2, [r3, #0]
 800e6b4:	4baf      	ldr	r3, [pc, #700]	@ (800e974 <tx_control+0x7e0>)
 800e6b6:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800e6b8:	4bb0      	ldr	r3, [pc, #704]	@ (800e97c <tx_control+0x7e8>)
 800e6ba:	781a      	ldrb	r2, [r3, #0]
 800e6bc:	4bad      	ldr	r3, [pc, #692]	@ (800e974 <tx_control+0x7e0>)
 800e6be:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800e6c0:	4baf      	ldr	r3, [pc, #700]	@ (800e980 <tx_control+0x7ec>)
 800e6c2:	781a      	ldrb	r2, [r3, #0]
 800e6c4:	4bab      	ldr	r3, [pc, #684]	@ (800e974 <tx_control+0x7e0>)
 800e6c6:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800e6c8:	4bae      	ldr	r3, [pc, #696]	@ (800e984 <tx_control+0x7f0>)
 800e6ca:	227d      	movs	r2, #125	@ 0x7d
 800e6cc:	5c9a      	ldrb	r2, [r3, r2]
 800e6ce:	4ba9      	ldr	r3, [pc, #676]	@ (800e974 <tx_control+0x7e0>)
 800e6d0:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800e6d2:	4bac      	ldr	r3, [pc, #688]	@ (800e984 <tx_control+0x7f0>)
 800e6d4:	227e      	movs	r2, #126	@ 0x7e
 800e6d6:	5c9a      	ldrb	r2, [r3, r2]
 800e6d8:	4ba6      	ldr	r3, [pc, #664]	@ (800e974 <tx_control+0x7e0>)
 800e6da:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800e6dc:	4baa      	ldr	r3, [pc, #680]	@ (800e988 <tx_control+0x7f4>)
 800e6de:	781a      	ldrb	r2, [r3, #0]
 800e6e0:	4ba4      	ldr	r3, [pc, #656]	@ (800e974 <tx_control+0x7e0>)
 800e6e2:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800e6e4:	4ba9      	ldr	r3, [pc, #676]	@ (800e98c <tx_control+0x7f8>)
 800e6e6:	781a      	ldrb	r2, [r3, #0]
 800e6e8:	4ba2      	ldr	r3, [pc, #648]	@ (800e974 <tx_control+0x7e0>)
 800e6ea:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800e6ec:	4ba1      	ldr	r3, [pc, #644]	@ (800e974 <tx_control+0x7e0>)
 800e6ee:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800e6f0:	4ba7      	ldr	r3, [pc, #668]	@ (800e990 <tx_control+0x7fc>)
 800e6f2:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800e6f4:	233c      	movs	r3, #60	@ 0x3c
 800e6f6:	18fb      	adds	r3, r7, r3
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	701a      	strb	r2, [r3, #0]
 800e6fc:	f000 fc68 	bl	800efd0 <tx_control+0xe3c>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800e700:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800e702:	4b95      	ldr	r3, [pc, #596]	@ (800e958 <tx_control+0x7c4>)
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d14e      	bne.n	800e7a8 <tx_control+0x614>
		if(codeTX != 0x60){//	cp	A,#$60
 800e70a:	4b8f      	ldr	r3, [pc, #572]	@ (800e948 <tx_control+0x7b4>)
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	2b60      	cmp	r3, #96	@ 0x60
 800e710:	d122      	bne.n	800e758 <tx_control+0x5c4>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800e712:	4b93      	ldr	r3, [pc, #588]	@ (800e960 <tx_control+0x7cc>)
 800e714:	22f1      	movs	r2, #241	@ 0xf1
 800e716:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800e718:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800e71a:	4b9e      	ldr	r3, [pc, #632]	@ (800e994 <tx_control+0x800>)
 800e71c:	781a      	ldrb	r2, [r3, #0]
 800e71e:	4b9e      	ldr	r3, [pc, #632]	@ (800e998 <tx_control+0x804>)
 800e720:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800e722:	4b9e      	ldr	r3, [pc, #632]	@ (800e99c <tx_control+0x808>)
 800e724:	781a      	ldrb	r2, [r3, #0]
 800e726:	4b9e      	ldr	r3, [pc, #632]	@ (800e9a0 <tx_control+0x80c>)
 800e728:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e72a:	4b9e      	ldr	r3, [pc, #632]	@ (800e9a4 <tx_control+0x810>)
 800e72c:	2203      	movs	r2, #3
 800e72e:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800e730:	4b9d      	ldr	r3, [pc, #628]	@ (800e9a8 <tx_control+0x814>)
 800e732:	4a9e      	ldr	r2, [pc, #632]	@ (800e9ac <tx_control+0x818>)
 800e734:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800e736:	4b9e      	ldr	r3, [pc, #632]	@ (800e9b0 <tx_control+0x81c>)
 800e738:	4a9e      	ldr	r2, [pc, #632]	@ (800e9b4 <tx_control+0x820>)
 800e73a:	601a      	str	r2, [r3, #0]
		dirBufferPage = &bufferPageDATA[0];
 800e73c:	4b9e      	ldr	r3, [pc, #632]	@ (800e9b8 <tx_control+0x824>)
 800e73e:	4a9f      	ldr	r2, [pc, #636]	@ (800e9bc <tx_control+0x828>)
 800e740:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800e742:	4b8b      	ldr	r3, [pc, #556]	@ (800e970 <tx_control+0x7dc>)
 800e744:	785b      	ldrb	r3, [r3, #1]
 800e746:	2201      	movs	r2, #1
 800e748:	4053      	eors	r3, r2
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d101      	bne.n	800e754 <tx_control+0x5c0>
 800e750:	f000 fc85 	bl	800f05e <tx_control+0xeca>
			goto noFullFlagTXDATA;
 800e754:	f000 fc86 	bl	800f064 <tx_control+0xed0>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800e758:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800e75a:	4b7b      	ldr	r3, [pc, #492]	@ (800e948 <tx_control+0x7b4>)
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b61      	cmp	r3, #97	@ 0x61
 800e760:	d124      	bne.n	800e7ac <tx_control+0x618>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800e762:	4b7f      	ldr	r3, [pc, #508]	@ (800e960 <tx_control+0x7cc>)
 800e764:	22f1      	movs	r2, #241	@ 0xf1
 800e766:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800e768:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800e76a:	4b95      	ldr	r3, [pc, #596]	@ (800e9c0 <tx_control+0x82c>)
 800e76c:	781a      	ldrb	r2, [r3, #0]
 800e76e:	4b8a      	ldr	r3, [pc, #552]	@ (800e998 <tx_control+0x804>)
 800e770:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800e772:	4b94      	ldr	r3, [pc, #592]	@ (800e9c4 <tx_control+0x830>)
 800e774:	781a      	ldrb	r2, [r3, #0]
 800e776:	4b8a      	ldr	r3, [pc, #552]	@ (800e9a0 <tx_control+0x80c>)
 800e778:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800e77a:	4b8a      	ldr	r3, [pc, #552]	@ (800e9a4 <tx_control+0x810>)
 800e77c:	220a      	movs	r2, #10
 800e77e:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800e780:	4b89      	ldr	r3, [pc, #548]	@ (800e9a8 <tx_control+0x814>)
 800e782:	4a91      	ldr	r2, [pc, #580]	@ (800e9c8 <tx_control+0x834>)
 800e784:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800e786:	4b8a      	ldr	r3, [pc, #552]	@ (800e9b0 <tx_control+0x81c>)
 800e788:	4a90      	ldr	r2, [pc, #576]	@ (800e9cc <tx_control+0x838>)
 800e78a:	601a      	str	r2, [r3, #0]
		dirBufferPage = &bufferPageEVENT[0];
 800e78c:	4b8a      	ldr	r3, [pc, #552]	@ (800e9b8 <tx_control+0x824>)
 800e78e:	4a90      	ldr	r2, [pc, #576]	@ (800e9d0 <tx_control+0x83c>)
 800e790:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800e792:	4b77      	ldr	r3, [pc, #476]	@ (800e970 <tx_control+0x7dc>)
 800e794:	789b      	ldrb	r3, [r3, #2]
 800e796:	2201      	movs	r2, #1
 800e798:	4053      	eors	r3, r2
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d101      	bne.n	800e7a4 <tx_control+0x610>
 800e7a0:	f000 fcae 	bl	800f100 <tx_control+0xf6c>
			goto noFullFlagTXEVENT;
 800e7a4:	f000 fcaf 	bl	800f106 <tx_control+0xf72>
			goto ask_tx_control_04;
 800e7a8:	46c0      	nop			@ (mov r8, r8)
 800e7aa:	e000      	b.n	800e7ae <tx_control+0x61a>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800e7ac:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800e7ae:	4b66      	ldr	r3, [pc, #408]	@ (800e948 <tx_control+0x7b4>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b53      	cmp	r3, #83	@ 0x53
 800e7b4:	d12e      	bne.n	800e814 <tx_control+0x680>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800e7b6:	4b6a      	ldr	r3, [pc, #424]	@ (800e960 <tx_control+0x7cc>)
 800e7b8:	22f1      	movs	r2, #241	@ 0xf1
 800e7ba:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800e7bc:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800e7be:	4b85      	ldr	r3, [pc, #532]	@ (800e9d4 <tx_control+0x840>)
 800e7c0:	781a      	ldrb	r2, [r3, #0]
 800e7c2:	4b85      	ldr	r3, [pc, #532]	@ (800e9d8 <tx_control+0x844>)
 800e7c4:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800e7c6:	4b85      	ldr	r3, [pc, #532]	@ (800e9dc <tx_control+0x848>)
 800e7c8:	781a      	ldrb	r2, [r3, #0]
 800e7ca:	4b83      	ldr	r3, [pc, #524]	@ (800e9d8 <tx_control+0x844>)
 800e7cc:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800e7ce:	4b84      	ldr	r3, [pc, #528]	@ (800e9e0 <tx_control+0x84c>)
 800e7d0:	781a      	ldrb	r2, [r3, #0]
 800e7d2:	4b81      	ldr	r3, [pc, #516]	@ (800e9d8 <tx_control+0x844>)
 800e7d4:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800e7d6:	4b83      	ldr	r3, [pc, #524]	@ (800e9e4 <tx_control+0x850>)
 800e7d8:	781a      	ldrb	r2, [r3, #0]
 800e7da:	4b7f      	ldr	r3, [pc, #508]	@ (800e9d8 <tx_control+0x844>)
 800e7dc:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800e7de:	4b82      	ldr	r3, [pc, #520]	@ (800e9e8 <tx_control+0x854>)
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	0a1b      	lsrs	r3, r3, #8
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	4b7b      	ldr	r3, [pc, #492]	@ (800e9d8 <tx_control+0x844>)
 800e7ea:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800e7ec:	4b7e      	ldr	r3, [pc, #504]	@ (800e9e8 <tx_control+0x854>)
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	b2da      	uxtb	r2, r3
 800e7f2:	4b79      	ldr	r3, [pc, #484]	@ (800e9d8 <tx_control+0x844>)
 800e7f4:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800e7f6:	4b7d      	ldr	r3, [pc, #500]	@ (800e9ec <tx_control+0x858>)
 800e7f8:	781a      	ldrb	r2, [r3, #0]
 800e7fa:	4b77      	ldr	r3, [pc, #476]	@ (800e9d8 <tx_control+0x844>)
 800e7fc:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800e7fe:	4b76      	ldr	r3, [pc, #472]	@ (800e9d8 <tx_control+0x844>)
 800e800:	2200      	movs	r2, #0
 800e802:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_comp])											// compresor activo ?
 800e804:	4b7a      	ldr	r3, [pc, #488]	@ (800e9f0 <tx_control+0x85c>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d101      	bne.n	800e810 <tx_control+0x67c>
 800e80c:	f000 fd17 	bl	800f23e <tx_control+0x10aa>
 800e810:	f000 fd0e 	bl	800f230 <tx_control+0x109c>
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800e814:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800e816:	4b4c      	ldr	r3, [pc, #304]	@ (800e948 <tx_control+0x7b4>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b51      	cmp	r3, #81	@ 0x51
 800e81c:	d125      	bne.n	800e86a <tx_control+0x6d6>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800e81e:	4b50      	ldr	r3, [pc, #320]	@ (800e960 <tx_control+0x7cc>)
 800e820:	22f1      	movs	r2, #241	@ 0xf1
 800e822:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800e824:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800e826:	4b73      	ldr	r3, [pc, #460]	@ (800e9f4 <tx_control+0x860>)
 800e828:	227b      	movs	r2, #123	@ 0x7b
 800e82a:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800e82c:	4b71      	ldr	r3, [pc, #452]	@ (800e9f4 <tx_control+0x860>)
 800e82e:	227c      	movs	r2, #124	@ 0x7c
 800e830:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800e832:	4b70      	ldr	r3, [pc, #448]	@ (800e9f4 <tx_control+0x860>)
 800e834:	2200      	movs	r2, #0
 800e836:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800e838:	4b6e      	ldr	r3, [pc, #440]	@ (800e9f4 <tx_control+0x860>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800e83e:	4b6d      	ldr	r3, [pc, #436]	@ (800e9f4 <tx_control+0x860>)
 800e840:	2200      	movs	r2, #0
 800e842:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800e844:	4b6b      	ldr	r3, [pc, #428]	@ (800e9f4 <tx_control+0x860>)
 800e846:	2201      	movs	r2, #1
 800e848:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800e84a:	4b6a      	ldr	r3, [pc, #424]	@ (800e9f4 <tx_control+0x860>)
 800e84c:	2204      	movs	r2, #4
 800e84e:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800e850:	4b68      	ldr	r3, [pc, #416]	@ (800e9f4 <tx_control+0x860>)
 800e852:	2280      	movs	r2, #128	@ 0x80
 800e854:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800e856:	4b67      	ldr	r3, [pc, #412]	@ (800e9f4 <tx_control+0x860>)
 800e858:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800e85a:	4b4d      	ldr	r3, [pc, #308]	@ (800e990 <tx_control+0x7fc>)
 800e85c:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800e85e:	2334      	movs	r3, #52	@ 0x34
 800e860:	18fb      	adds	r3, r7, r3
 800e862:	2200      	movs	r2, #0
 800e864:	701a      	strb	r2, [r3, #0]
 800e866:	f000 fe26 	bl	800f4b6 <tx_control+0x1322>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800e86a:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800e86c:	4b36      	ldr	r3, [pc, #216]	@ (800e948 <tx_control+0x7b4>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b50      	cmp	r3, #80	@ 0x50
 800e872:	d10f      	bne.n	800e894 <tx_control+0x700>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800e874:	4b3a      	ldr	r3, [pc, #232]	@ (800e960 <tx_control+0x7cc>)
 800e876:	22f1      	movs	r2, #241	@ 0xf1
 800e878:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800e87a:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == reePlantilla[eeversion1]){
 800e87c:	4b5e      	ldr	r3, [pc, #376]	@ (800e9f8 <tx_control+0x864>)
 800e87e:	227d      	movs	r2, #125	@ 0x7d
 800e880:	5c9a      	ldrb	r2, [r3, r2]
 800e882:	4b5e      	ldr	r3, [pc, #376]	@ (800e9fc <tx_control+0x868>)
 800e884:	217b      	movs	r1, #123	@ 0x7b
 800e886:	5c5b      	ldrb	r3, [r3, r1]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d001      	beq.n	800e890 <tx_control+0x6fc>
 800e88c:	f000 ff01 	bl	800f692 <tx_control+0x14fe>
				goto 	verifica_version2;		//jreq	verifica_version2
 800e890:	f000 fe9e 	bl	800f5d0 <tx_control+0x143c>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800e894:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800e896:	4b2c      	ldr	r3, [pc, #176]	@ (800e948 <tx_control+0x7b4>)
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b46      	cmp	r3, #70	@ 0x46
 800e89c:	d129      	bne.n	800e8f2 <tx_control+0x75e>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e89e:	4b30      	ldr	r3, [pc, #192]	@ (800e960 <tx_control+0x7cc>)
 800e8a0:	22f1      	movs	r2, #241	@ 0xf1
 800e8a2:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800e8a4:	46c0      	nop			@ (mov r8, r8)
			bandera_act_fw_j = 1;   //Parche para parar loggeo
 800e8a6:	4b31      	ldr	r3, [pc, #196]	@ (800e96c <tx_control+0x7d8>)
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800e8ac:	4b31      	ldr	r3, [pc, #196]	@ (800e974 <tx_control+0x7e0>)
 800e8ae:	22f1      	movs	r2, #241	@ 0xf1
 800e8b0:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X03;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800e8b2:	4b30      	ldr	r3, [pc, #192]	@ (800e974 <tx_control+0x7e0>)
 800e8b4:	2203      	movs	r2, #3
 800e8b6:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800e8b8:	4b28      	ldr	r3, [pc, #160]	@ (800e95c <tx_control+0x7c8>)
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800e8be:	4b50      	ldr	r3, [pc, #320]	@ (800ea00 <tx_control+0x86c>)
 800e8c0:	4a2c      	ldr	r2, [pc, #176]	@ (800e974 <tx_control+0x7e0>)
 800e8c2:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800e8c4:	4b4f      	ldr	r3, [pc, #316]	@ (800ea04 <tx_control+0x870>)
 800e8c6:	4a2b      	ldr	r2, [pc, #172]	@ (800e974 <tx_control+0x7e0>)
 800e8c8:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800e8ca:	4b4f      	ldr	r3, [pc, #316]	@ (800ea08 <tx_control+0x874>)
 800e8cc:	4a4f      	ldr	r2, [pc, #316]	@ (800ea0c <tx_control+0x878>)
 800e8ce:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800e8d0:	4b4f      	ldr	r3, [pc, #316]	@ (800ea10 <tx_control+0x87c>)
 800e8d2:	2202      	movs	r2, #2
 800e8d4:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800e8d6:	4b4f      	ldr	r3, [pc, #316]	@ (800ea14 <tx_control+0x880>)
 800e8d8:	2201      	movs	r2, #1
 800e8da:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800e8dc:	4b4e      	ldr	r3, [pc, #312]	@ (800ea18 <tx_control+0x884>)
 800e8de:	2255      	movs	r2, #85	@ 0x55
 800e8e0:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800e8e2:	4b19      	ldr	r3, [pc, #100]	@ (800e948 <tx_control+0x7b4>)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800e8e8:	4b1f      	ldr	r3, [pc, #124]	@ (800e968 <tx_control+0x7d4>)
 800e8ea:	2205      	movs	r2, #5
 800e8ec:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800e8ee:	f001 fcf8 	bl	80102e2 <tx_control+0x214e>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800e8f2:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800e8f4:	4b14      	ldr	r3, [pc, #80]	@ (800e948 <tx_control+0x7b4>)
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	2b54      	cmp	r3, #84	@ 0x54
 800e8fa:	d11a      	bne.n	800e932 <tx_control+0x79e>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800e8fc:	4b18      	ldr	r3, [pc, #96]	@ (800e960 <tx_control+0x7cc>)
 800e8fe:	22f1      	movs	r2, #241	@ 0xf1
 800e900:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800e902:	46c0      	nop			@ (mov r8, r8)

//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:

			clean_buffer();	//	call	clean_buffer
 800e904:	f7f8 fb84 	bl	8007010 <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800e908:	4b44      	ldr	r3, [pc, #272]	@ (800ea1c <tx_control+0x888>)
 800e90a:	2200      	movs	r2, #0
 800e90c:	801a      	strh	r2, [r3, #0]


tx_clean_logger_loop:
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800e90e:	4b44      	ldr	r3, [pc, #272]	@ (800ea20 <tx_control+0x88c>)
 800e910:	22aa      	movs	r2, #170	@ 0xaa
 800e912:	701a      	strb	r2, [r3, #0]
			// ldw		X,#data_buffer
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800e914:	4b43      	ldr	r3, [pc, #268]	@ (800ea24 <tx_control+0x890>)
 800e916:	4a25      	ldr	r2, [pc, #148]	@ (800e9ac <tx_control+0x818>)
 800e918:	601a      	str	r2, [r3, #0]

			// ld    A,cntBloqFirm;				/ Toma el número de bloques recibidos al momento
			// ldw		X,#128;								/ Carga el tamaño de los bloques (128 bytes)
			// mul		X,A;									/ Multiplicalos
			// addw	X,#eventLogger;						/	apunta al inicio de la Memoria de logger + el número de bloques grabados
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800e91a:	4b40      	ldr	r3, [pc, #256]	@ (800ea1c <tx_control+0x888>)
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	01db      	lsls	r3, r3, #7
 800e920:	001a      	movs	r2, r3
 800e922:	4b2a      	ldr	r3, [pc, #168]	@ (800e9cc <tx_control+0x838>)
 800e924:	18d2      	adds	r2, r2, r3
 800e926:	4b40      	ldr	r3, [pc, #256]	@ (800ea28 <tx_control+0x894>)
 800e928:	601a      	str	r2, [r3, #0]
			 * CGM 10/04/2025
			 * Borrado Total de todo el Logger, es decir de la pagina 110 a la pagina 125 serán borradas.
			 * Logger de Eventos:			110 - 119 pagina
			 * Logger de Datos o Tiempo:	120 - 125 pagina
			 */
			for(uint32_t i = 110; i<126; i++){
 800e92a:	236e      	movs	r3, #110	@ 0x6e
 800e92c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e92e:	f001 f89c 	bl	800fa6a <tx_control+0x18d6>
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800e932:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800e934:	4b04      	ldr	r3, [pc, #16]	@ (800e948 <tx_control+0x7b4>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	2b55      	cmp	r3, #85	@ 0x55
 800e93a:	d177      	bne.n	800ea2c <tx_control+0x898>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e93c:	4b08      	ldr	r3, [pc, #32]	@ (800e960 <tx_control+0x7cc>)
 800e93e:	22f0      	movs	r2, #240	@ 0xf0
 800e940:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800e942:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800e944:	f001 fccd 	bl	80102e2 <tx_control+0x214e>
 800e948:	20001eb0 	.word	0x20001eb0
 800e94c:	20001fd8 	.word	0x20001fd8
 800e950:	20001fc6 	.word	0x20001fc6
 800e954:	20001fd0 	.word	0x20001fd0
 800e958:	20001fdc 	.word	0x20001fdc
 800e95c:	20001f68 	.word	0x20001f68
 800e960:	20001f71 	.word	0x20001f71
 800e964:	20002188 	.word	0x20002188
 800e968:	20001f72 	.word	0x20001f72
 800e96c:	20002174 	.word	0x20002174
 800e970:	20001e90 	.word	0x20001e90
 800e974:	20001e6c 	.word	0x20001e6c
 800e978:	0801eff4 	.word	0x0801eff4
 800e97c:	0801eff0 	.word	0x0801eff0
 800e980:	0801eff1 	.word	0x0801eff1
 800e984:	200000b8 	.word	0x200000b8
 800e988:	0801eff3 	.word	0x0801eff3
 800e98c:	0801eff2 	.word	0x0801eff2
 800e990:	20002034 	.word	0x20002034
 800e994:	20000e35 	.word	0x20000e35
 800e998:	20000e22 	.word	0x20000e22
 800e99c:	20000e34 	.word	0x20000e34
 800e9a0:	20000e23 	.word	0x20000e23
 800e9a4:	20001ebd 	.word	0x20001ebd
 800e9a8:	20000e2c 	.word	0x20000e2c
 800e9ac:	20000d14 	.word	0x20000d14
 800e9b0:	20000e28 	.word	0x20000e28
 800e9b4:	0803c000 	.word	0x0803c000
 800e9b8:	20001e38 	.word	0x20001e38
 800e9bc:	20000e38 	.word	0x20000e38
 800e9c0:	20000e37 	.word	0x20000e37
 800e9c4:	20000e36 	.word	0x20000e36
 800e9c8:	20000d94 	.word	0x20000d94
 800e9cc:	08037000 	.word	0x08037000
 800e9d0:	20001638 	.word	0x20001638
 800e9d4:	20000bac 	.word	0x20000bac
 800e9d8:	20001e84 	.word	0x20001e84
 800e9dc:	20000bad 	.word	0x20000bad
 800e9e0:	20000bae 	.word	0x20000bae
 800e9e4:	20000baf 	.word	0x20000baf
 800e9e8:	20000c50 	.word	0x20000c50
 800e9ec:	20000bca 	.word	0x20000bca
 800e9f0:	20000ba0 	.word	0x20000ba0
 800e9f4:	20001e64 	.word	0x20001e64
 800e9f8:	20000984 	.word	0x20000984
 800e9fc:	20000c88 	.word	0x20000c88
 800ea00:	20001ea0 	.word	0x20001ea0
 800ea04:	20001e98 	.word	0x20001e98
 800ea08:	20001e9c 	.word	0x20001e9c
 800ea0c:	20001e6d 	.word	0x20001e6d
 800ea10:	20001ebc 	.word	0x20001ebc
 800ea14:	20001ea8 	.word	0x20001ea8
 800ea18:	20001ea5 	.word	0x20001ea5
 800ea1c:	20001f5e 	.word	0x20001f5e
 800ea20:	20000e14 	.word	0x20000e14
 800ea24:	20000e1c 	.word	0x20000e1c
 800ea28:	20000e18 	.word	0x20000e18
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800ea2c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800ea2e:	4bec      	ldr	r3, [pc, #944]	@ (800ede0 <tx_control+0xc4c>)
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	2b56      	cmp	r3, #86	@ 0x56
 800ea34:	d132      	bne.n	800ea9c <tx_control+0x908>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ea36:	4beb      	ldr	r3, [pc, #940]	@ (800ede4 <tx_control+0xc50>)
 800ea38:	22f0      	movs	r2, #240	@ 0xf0
 800ea3a:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800ea3c:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ea3e:	4bea      	ldr	r3, [pc, #936]	@ (800ede8 <tx_control+0xc54>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800ea44:	4be9      	ldr	r3, [pc, #932]	@ (800edec <tx_control+0xc58>)
 800ea46:	2200      	movs	r2, #0
 800ea48:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800ea4a:	4be9      	ldr	r3, [pc, #932]	@ (800edf0 <tx_control+0xc5c>)
 800ea4c:	2206      	movs	r2, #6
 800ea4e:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800ea50:	4be8      	ldr	r3, [pc, #928]	@ (800edf4 <tx_control+0xc60>)
 800ea52:	2106      	movs	r1, #6
 800ea54:	0018      	movs	r0, r3
 800ea56:	f7f8 faa5 	bl	8006fa4 <buildChksumBloq>
			chksum_to_compare = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800ea5e:	4be5      	ldr	r3, [pc, #916]	@ (800edf4 <tx_control+0xc60>)
 800ea60:	799b      	ldrb	r3, [r3, #6]
 800ea62:	061b      	lsls	r3, r3, #24
 800ea64:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800ea66:	4be3      	ldr	r3, [pc, #908]	@ (800edf4 <tx_control+0xc60>)
 800ea68:	79db      	ldrb	r3, [r3, #7]
 800ea6a:	041b      	lsls	r3, r3, #16
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	18d3      	adds	r3, r2, r3
 800ea70:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800ea72:	4be0      	ldr	r3, [pc, #896]	@ (800edf4 <tx_control+0xc60>)
 800ea74:	7a1b      	ldrb	r3, [r3, #8]
 800ea76:	021b      	lsls	r3, r3, #8
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	18d3      	adds	r3, r2, r3
 800ea7c:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800ea7e:	4bdd      	ldr	r3, [pc, #884]	@ (800edf4 <tx_control+0xc60>)
 800ea80:	7a5b      	ldrb	r3, [r3, #9]
 800ea82:	001a      	movs	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	189b      	adds	r3, r3, r2
 800ea88:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800ea8a:	4bd7      	ldr	r3, [pc, #860]	@ (800ede8 <tx_control+0xc54>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d101      	bne.n	800ea98 <tx_control+0x904>
 800ea94:	f001 f83c 	bl	800fb10 <tx_control+0x197c>
				goto tx_write_status_error;
 800ea98:	f001 f8ee 	bl	800fc78 <tx_control+0x1ae4>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800ea9c:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800ea9e:	4bd0      	ldr	r3, [pc, #832]	@ (800ede0 <tx_control+0xc4c>)
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	2b57      	cmp	r3, #87	@ 0x57
 800eaa4:	d10b      	bne.n	800eabe <tx_control+0x92a>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eaa6:	4bcf      	ldr	r3, [pc, #828]	@ (800ede4 <tx_control+0xc50>)
 800eaa8:	22f0      	movs	r2, #240	@ 0xf0
 800eaaa:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800eaac:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		uint8_t estado1_Aux = reeEstado1;
 800eaae:	1cfb      	adds	r3, r7, #3
 800eab0:	4ad1      	ldr	r2, [pc, #836]	@ (800edf8 <tx_control+0xc64>)
 800eab2:	7812      	ldrb	r2, [r2, #0]
 800eab4:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800eab6:	2300      	movs	r3, #0
 800eab8:	61fb      	str	r3, [r7, #28]
 800eaba:	f001 f90b 	bl	800fcd4 <tx_control+0x1b40>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800eabe:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800eac0:	4bc7      	ldr	r3, [pc, #796]	@ (800ede0 <tx_control+0xc4c>)
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b58      	cmp	r3, #88	@ 0x58
 800eac6:	d132      	bne.n	800eb2e <tx_control+0x99a>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800eac8:	4bc6      	ldr	r3, [pc, #792]	@ (800ede4 <tx_control+0xc50>)
 800eaca:	22f0      	movs	r2, #240	@ 0xf0
 800eacc:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800eace:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800ead0:	4bc5      	ldr	r3, [pc, #788]	@ (800ede8 <tx_control+0xc54>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800ead6:	4bc5      	ldr	r3, [pc, #788]	@ (800edec <tx_control+0xc58>)
 800ead8:	2200      	movs	r2, #0
 800eada:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800eadc:	4bc4      	ldr	r3, [pc, #784]	@ (800edf0 <tx_control+0xc5c>)
 800eade:	2206      	movs	r2, #6
 800eae0:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800eae2:	4bc4      	ldr	r3, [pc, #784]	@ (800edf4 <tx_control+0xc60>)
 800eae4:	2106      	movs	r1, #6
 800eae6:	0018      	movs	r0, r3
 800eae8:	f7f8 fa5c 	bl	8006fa4 <buildChksumBloq>
		chksum_to_compare = 0;
 800eaec:	2300      	movs	r3, #0
 800eaee:	607b      	str	r3, [r7, #4]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800eaf0:	4bc0      	ldr	r3, [pc, #768]	@ (800edf4 <tx_control+0xc60>)
 800eaf2:	799b      	ldrb	r3, [r3, #6]
 800eaf4:	061b      	lsls	r3, r3, #24
 800eaf6:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800eaf8:	4bbe      	ldr	r3, [pc, #760]	@ (800edf4 <tx_control+0xc60>)
 800eafa:	79db      	ldrb	r3, [r3, #7]
 800eafc:	041b      	lsls	r3, r3, #16
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	18d3      	adds	r3, r2, r3
 800eb02:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800eb04:	4bbb      	ldr	r3, [pc, #748]	@ (800edf4 <tx_control+0xc60>)
 800eb06:	7a1b      	ldrb	r3, [r3, #8]
 800eb08:	021b      	lsls	r3, r3, #8
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	18d3      	adds	r3, r2, r3
 800eb0e:	607b      	str	r3, [r7, #4]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800eb10:	4bb8      	ldr	r3, [pc, #736]	@ (800edf4 <tx_control+0xc60>)
 800eb12:	7a5b      	ldrb	r3, [r3, #9]
 800eb14:	001a      	movs	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	189b      	adds	r3, r3, r2
 800eb1a:	607b      	str	r3, [r7, #4]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800eb1c:	4bb2      	ldr	r3, [pc, #712]	@ (800ede8 <tx_control+0xc54>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d101      	bne.n	800eb2a <tx_control+0x996>
 800eb26:	f001 fa39 	bl	800ff9c <tx_control+0x1e08>
			goto tx_write_status_error;
 800eb2a:	f001 f8a5 	bl	800fc78 <tx_control+0x1ae4>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800eb2e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800eb30:	4bab      	ldr	r3, [pc, #684]	@ (800ede0 <tx_control+0xc4c>)
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b59      	cmp	r3, #89	@ 0x59
 800eb36:	d132      	bne.n	800eb9e <tx_control+0xa0a>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800eb38:	4baa      	ldr	r3, [pc, #680]	@ (800ede4 <tx_control+0xc50>)
 800eb3a:	22f0      	movs	r2, #240	@ 0xf0
 800eb3c:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800eb3e:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800eb40:	4ba9      	ldr	r3, [pc, #676]	@ (800ede8 <tx_control+0xc54>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800eb46:	4ba9      	ldr	r3, [pc, #676]	@ (800edec <tx_control+0xc58>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800eb4c:	4ba8      	ldr	r3, [pc, #672]	@ (800edf0 <tx_control+0xc5c>)
 800eb4e:	220a      	movs	r2, #10
 800eb50:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800eb52:	4ba8      	ldr	r3, [pc, #672]	@ (800edf4 <tx_control+0xc60>)
 800eb54:	210a      	movs	r1, #10
 800eb56:	0018      	movs	r0, r3
 800eb58:	f7f8 fa24 	bl	8006fa4 <buildChksumBloq>
			chksum_to_compare = 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800eb60:	4ba4      	ldr	r3, [pc, #656]	@ (800edf4 <tx_control+0xc60>)
 800eb62:	7a9b      	ldrb	r3, [r3, #10]
 800eb64:	061b      	lsls	r3, r3, #24
 800eb66:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800eb68:	4ba2      	ldr	r3, [pc, #648]	@ (800edf4 <tx_control+0xc60>)
 800eb6a:	7adb      	ldrb	r3, [r3, #11]
 800eb6c:	041b      	lsls	r3, r3, #16
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	18d3      	adds	r3, r2, r3
 800eb72:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800eb74:	4b9f      	ldr	r3, [pc, #636]	@ (800edf4 <tx_control+0xc60>)
 800eb76:	7b1b      	ldrb	r3, [r3, #12]
 800eb78:	021b      	lsls	r3, r3, #8
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	18d3      	adds	r3, r2, r3
 800eb7e:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800eb80:	4b9c      	ldr	r3, [pc, #624]	@ (800edf4 <tx_control+0xc60>)
 800eb82:	7b5b      	ldrb	r3, [r3, #13]
 800eb84:	001a      	movs	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	189b      	adds	r3, r3, r2
 800eb8a:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800eb8c:	4b96      	ldr	r3, [pc, #600]	@ (800ede8 <tx_control+0xc54>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d101      	bne.n	800eb9a <tx_control+0xa06>
 800eb96:	f001 fa1e 	bl	800ffd6 <tx_control+0x1e42>
				goto tx_write_GEO_error;
 800eb9a:	f001 fa83 	bl	80100a4 <tx_control+0x1f10>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800eb9e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800eba0:	4b8f      	ldr	r3, [pc, #572]	@ (800ede0 <tx_control+0xc4c>)
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	2b5a      	cmp	r3, #90	@ 0x5a
 800eba6:	d000      	beq.n	800ebaa <tx_control+0xa16>
 800eba8:	e089      	b.n	800ecbe <tx_control+0xb2a>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ebaa:	4b8e      	ldr	r3, [pc, #568]	@ (800ede4 <tx_control+0xc50>)
 800ebac:	22f0      	movs	r2, #240	@ 0xf0
 800ebae:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800ebb0:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800ebb2:	4b92      	ldr	r3, [pc, #584]	@ (800edfc <tx_control+0xc68>)
 800ebb4:	2208      	movs	r2, #8
 800ebb6:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800ebb8:	4b91      	ldr	r3, [pc, #580]	@ (800ee00 <tx_control+0xc6c>)
 800ebba:	227c      	movs	r2, #124	@ 0x7c
 800ebbc:	5c9a      	ldrb	r2, [r3, r2]
 800ebbe:	4b91      	ldr	r3, [pc, #580]	@ (800ee04 <tx_control+0xc70>)
 800ebc0:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ebc2:	4b90      	ldr	r3, [pc, #576]	@ (800ee04 <tx_control+0xc70>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800ebc8:	4b8e      	ldr	r3, [pc, #568]	@ (800ee04 <tx_control+0xc70>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ebce:	4b8d      	ldr	r3, [pc, #564]	@ (800ee04 <tx_control+0xc70>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800ebd4:	4b8b      	ldr	r3, [pc, #556]	@ (800ee04 <tx_control+0xc70>)
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800ebda:	4b8a      	ldr	r3, [pc, #552]	@ (800ee04 <tx_control+0xc70>)
 800ebdc:	2206      	movs	r2, #6
 800ebde:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800ebe0:	4b86      	ldr	r3, [pc, #536]	@ (800edfc <tx_control+0xc68>)
 800ebe2:	781a      	ldrb	r2, [r3, #0]
 800ebe4:	4b87      	ldr	r3, [pc, #540]	@ (800ee04 <tx_control+0xc70>)
 800ebe6:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800ebe8:	4b80      	ldr	r3, [pc, #512]	@ (800edec <tx_control+0xc58>)
 800ebea:	2208      	movs	r2, #8
 800ebec:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800ebee:	4a86      	ldr	r2, [pc, #536]	@ (800ee08 <tx_control+0xc74>)
 800ebf0:	4b84      	ldr	r3, [pc, #528]	@ (800ee04 <tx_control+0xc70>)
 800ebf2:	0011      	movs	r1, r2
 800ebf4:	0018      	movs	r0, r3
 800ebf6:	f7f8 fa23 	bl	8007040 <copyVector>
//			bufferTxControl[12]	= eeLong1;
//			bufferTxControl[13]	= eeLong2;
//			bufferTxControl[14] = eeLong3;
//			bufferTxControl[15] = eeLong4;

			bufferTxControl[8] = reeLat1;
 800ebfa:	4b84      	ldr	r3, [pc, #528]	@ (800ee0c <tx_control+0xc78>)
 800ebfc:	781a      	ldrb	r2, [r3, #0]
 800ebfe:	4b82      	ldr	r3, [pc, #520]	@ (800ee08 <tx_control+0xc74>)
 800ec00:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = reeLat2;
 800ec02:	4b83      	ldr	r3, [pc, #524]	@ (800ee10 <tx_control+0xc7c>)
 800ec04:	781a      	ldrb	r2, [r3, #0]
 800ec06:	4b80      	ldr	r3, [pc, #512]	@ (800ee08 <tx_control+0xc74>)
 800ec08:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = reeLat3;
 800ec0a:	4b82      	ldr	r3, [pc, #520]	@ (800ee14 <tx_control+0xc80>)
 800ec0c:	781a      	ldrb	r2, [r3, #0]
 800ec0e:	4b7e      	ldr	r3, [pc, #504]	@ (800ee08 <tx_control+0xc74>)
 800ec10:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = reeLat4;
 800ec12:	4b81      	ldr	r3, [pc, #516]	@ (800ee18 <tx_control+0xc84>)
 800ec14:	781a      	ldrb	r2, [r3, #0]
 800ec16:	4b7c      	ldr	r3, [pc, #496]	@ (800ee08 <tx_control+0xc74>)
 800ec18:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= reeLong1;
 800ec1a:	4b80      	ldr	r3, [pc, #512]	@ (800ee1c <tx_control+0xc88>)
 800ec1c:	781a      	ldrb	r2, [r3, #0]
 800ec1e:	4b7a      	ldr	r3, [pc, #488]	@ (800ee08 <tx_control+0xc74>)
 800ec20:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= reeLong2;
 800ec22:	4b7f      	ldr	r3, [pc, #508]	@ (800ee20 <tx_control+0xc8c>)
 800ec24:	781a      	ldrb	r2, [r3, #0]
 800ec26:	4b78      	ldr	r3, [pc, #480]	@ (800ee08 <tx_control+0xc74>)
 800ec28:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = reeLong3;
 800ec2a:	4b7e      	ldr	r3, [pc, #504]	@ (800ee24 <tx_control+0xc90>)
 800ec2c:	781a      	ldrb	r2, [r3, #0]
 800ec2e:	4b76      	ldr	r3, [pc, #472]	@ (800ee08 <tx_control+0xc74>)
 800ec30:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = reeLong4;
 800ec32:	4b7d      	ldr	r3, [pc, #500]	@ (800ee28 <tx_control+0xc94>)
 800ec34:	781a      	ldrb	r2, [r3, #0]
 800ec36:	4b74      	ldr	r3, [pc, #464]	@ (800ee08 <tx_control+0xc74>)
 800ec38:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ec3a:	4b6b      	ldr	r3, [pc, #428]	@ (800ede8 <tx_control+0xc54>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800ec40:	4b6a      	ldr	r3, [pc, #424]	@ (800edec <tx_control+0xc58>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800ec46:	4b6a      	ldr	r3, [pc, #424]	@ (800edf0 <tx_control+0xc5c>)
 800ec48:	2210      	movs	r2, #16
 800ec4a:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800ec4c:	4b68      	ldr	r3, [pc, #416]	@ (800edf0 <tx_control+0xc5c>)
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	001a      	movs	r2, r3
 800ec52:	4b6d      	ldr	r3, [pc, #436]	@ (800ee08 <tx_control+0xc74>)
 800ec54:	0011      	movs	r1, r2
 800ec56:	0018      	movs	r0, r3
 800ec58:	f7f8 f9a4 	bl	8006fa4 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800ec5c:	4b62      	ldr	r3, [pc, #392]	@ (800ede8 <tx_control+0xc54>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	0e1b      	lsrs	r3, r3, #24
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	4b68      	ldr	r3, [pc, #416]	@ (800ee08 <tx_control+0xc74>)
 800ec66:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800ec68:	4b5f      	ldr	r3, [pc, #380]	@ (800ede8 <tx_control+0xc54>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	0c1b      	lsrs	r3, r3, #16
 800ec6e:	b2da      	uxtb	r2, r3
 800ec70:	4b65      	ldr	r3, [pc, #404]	@ (800ee08 <tx_control+0xc74>)
 800ec72:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800ec74:	4b5c      	ldr	r3, [pc, #368]	@ (800ede8 <tx_control+0xc54>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	0a1b      	lsrs	r3, r3, #8
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	4b62      	ldr	r3, [pc, #392]	@ (800ee08 <tx_control+0xc74>)
 800ec7e:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800ec80:	4b59      	ldr	r3, [pc, #356]	@ (800ede8 <tx_control+0xc54>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	4b60      	ldr	r3, [pc, #384]	@ (800ee08 <tx_control+0xc74>)
 800ec88:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800ec8a:	4b68      	ldr	r3, [pc, #416]	@ (800ee2c <tx_control+0xc98>)
 800ec8c:	4a5e      	ldr	r2, [pc, #376]	@ (800ee08 <tx_control+0xc74>)
 800ec8e:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800ec90:	4b67      	ldr	r3, [pc, #412]	@ (800ee30 <tx_control+0xc9c>)
 800ec92:	4a5d      	ldr	r2, [pc, #372]	@ (800ee08 <tx_control+0xc74>)
 800ec94:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800ec96:	4b67      	ldr	r3, [pc, #412]	@ (800ee34 <tx_control+0xca0>)
 800ec98:	4a67      	ldr	r2, [pc, #412]	@ (800ee38 <tx_control+0xca4>)
 800ec9a:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800ec9c:	4b57      	ldr	r3, [pc, #348]	@ (800edfc <tx_control+0xc68>)
 800ec9e:	2214      	movs	r2, #20
 800eca0:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800eca2:	4b66      	ldr	r3, [pc, #408]	@ (800ee3c <tx_control+0xca8>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800eca8:	4b64      	ldr	r3, [pc, #400]	@ (800ee3c <tx_control+0xca8>)
 800ecaa:	2201      	movs	r2, #1
 800ecac:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ecae:	4b64      	ldr	r3, [pc, #400]	@ (800ee40 <tx_control+0xcac>)
 800ecb0:	2255      	movs	r2, #85	@ 0x55
 800ecb2:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800ecb4:	4b4a      	ldr	r3, [pc, #296]	@ (800ede0 <tx_control+0xc4c>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800ecba:	f001 fb12 	bl	80102e2 <tx_control+0x214e>
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800ecbe:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800ecc0:	4b47      	ldr	r3, [pc, #284]	@ (800ede0 <tx_control+0xc4c>)
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	2b5b      	cmp	r3, #91	@ 0x5b
 800ecc6:	d000      	beq.n	800ecca <tx_control+0xb36>
 800ecc8:	e0c2      	b.n	800ee50 <tx_control+0xcbc>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ecca:	4b46      	ldr	r3, [pc, #280]	@ (800ede4 <tx_control+0xc50>)
 800eccc:	22f0      	movs	r2, #240	@ 0xf0
 800ecce:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800ecd0:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800ecd2:	4b4a      	ldr	r3, [pc, #296]	@ (800edfc <tx_control+0xc68>)
 800ecd4:	2204      	movs	r2, #4
 800ecd6:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800ecd8:	4b49      	ldr	r3, [pc, #292]	@ (800ee00 <tx_control+0xc6c>)
 800ecda:	227b      	movs	r2, #123	@ 0x7b
 800ecdc:	5c9a      	ldrb	r2, [r3, r2]
 800ecde:	4b49      	ldr	r3, [pc, #292]	@ (800ee04 <tx_control+0xc70>)
 800ece0:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800ece2:	4b47      	ldr	r3, [pc, #284]	@ (800ee00 <tx_control+0xc6c>)
 800ece4:	227c      	movs	r2, #124	@ 0x7c
 800ece6:	5c9a      	ldrb	r2, [r3, r2]
 800ece8:	4b46      	ldr	r3, [pc, #280]	@ (800ee04 <tx_control+0xc70>)
 800ecea:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ecec:	4b45      	ldr	r3, [pc, #276]	@ (800ee04 <tx_control+0xc70>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800ecf2:	4b44      	ldr	r3, [pc, #272]	@ (800ee04 <tx_control+0xc70>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ecf8:	4b42      	ldr	r3, [pc, #264]	@ (800ee04 <tx_control+0xc70>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800ecfe:	4b41      	ldr	r3, [pc, #260]	@ (800ee04 <tx_control+0xc70>)
 800ed00:	2201      	movs	r2, #1
 800ed02:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800ed04:	4b3f      	ldr	r3, [pc, #252]	@ (800ee04 <tx_control+0xc70>)
 800ed06:	2207      	movs	r2, #7
 800ed08:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800ed0a:	4b3c      	ldr	r3, [pc, #240]	@ (800edfc <tx_control+0xc68>)
 800ed0c:	781a      	ldrb	r2, [r3, #0]
 800ed0e:	4b3d      	ldr	r3, [pc, #244]	@ (800ee04 <tx_control+0xc70>)
 800ed10:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800ed12:	4b4a      	ldr	r3, [pc, #296]	@ (800ee3c <tx_control+0xca8>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800ed18:	4b34      	ldr	r3, [pc, #208]	@ (800edec <tx_control+0xc58>)
 800ed1a:	2208      	movs	r2, #8
 800ed1c:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800ed1e:	4a3a      	ldr	r2, [pc, #232]	@ (800ee08 <tx_control+0xc74>)
 800ed20:	4b38      	ldr	r3, [pc, #224]	@ (800ee04 <tx_control+0xc70>)
 800ed22:	0011      	movs	r1, r2
 800ed24:	0018      	movs	r0, r3
 800ed26:	f7f8 f98b 	bl	8007040 <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800ed2a:	4b46      	ldr	r3, [pc, #280]	@ (800ee44 <tx_control+0xcb0>)
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	0a1b      	lsrs	r3, r3, #8
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	4b34      	ldr	r3, [pc, #208]	@ (800ee08 <tx_control+0xc74>)
 800ed36:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800ed38:	4b42      	ldr	r3, [pc, #264]	@ (800ee44 <tx_control+0xcb0>)
 800ed3a:	881b      	ldrh	r3, [r3, #0]
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	4b32      	ldr	r3, [pc, #200]	@ (800ee08 <tx_control+0xc74>)
 800ed40:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800ed42:	4b41      	ldr	r3, [pc, #260]	@ (800ee48 <tx_control+0xcb4>)
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	0a1b      	lsrs	r3, r3, #8
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	4b2e      	ldr	r3, [pc, #184]	@ (800ee08 <tx_control+0xc74>)
 800ed4e:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800ed50:	4b3d      	ldr	r3, [pc, #244]	@ (800ee48 <tx_control+0xcb4>)
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	b2da      	uxtb	r2, r3
 800ed56:	4b2c      	ldr	r3, [pc, #176]	@ (800ee08 <tx_control+0xc74>)
 800ed58:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ed5a:	4b23      	ldr	r3, [pc, #140]	@ (800ede8 <tx_control+0xc54>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800ed60:	4b22      	ldr	r3, [pc, #136]	@ (800edec <tx_control+0xc58>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800ed66:	4b22      	ldr	r3, [pc, #136]	@ (800edf0 <tx_control+0xc5c>)
 800ed68:	220c      	movs	r2, #12
 800ed6a:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800ed6c:	4b20      	ldr	r3, [pc, #128]	@ (800edf0 <tx_control+0xc5c>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	001a      	movs	r2, r3
 800ed72:	4b25      	ldr	r3, [pc, #148]	@ (800ee08 <tx_control+0xc74>)
 800ed74:	0011      	movs	r1, r2
 800ed76:	0018      	movs	r0, r3
 800ed78:	f7f8 f914 	bl	8006fa4 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800ed7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ede8 <tx_control+0xc54>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	0e1b      	lsrs	r3, r3, #24
 800ed82:	b2da      	uxtb	r2, r3
 800ed84:	4b20      	ldr	r3, [pc, #128]	@ (800ee08 <tx_control+0xc74>)
 800ed86:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800ed88:	4b17      	ldr	r3, [pc, #92]	@ (800ede8 <tx_control+0xc54>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	0c1b      	lsrs	r3, r3, #16
 800ed8e:	b2da      	uxtb	r2, r3
 800ed90:	4b1d      	ldr	r3, [pc, #116]	@ (800ee08 <tx_control+0xc74>)
 800ed92:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800ed94:	4b14      	ldr	r3, [pc, #80]	@ (800ede8 <tx_control+0xc54>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	0a1b      	lsrs	r3, r3, #8
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ee08 <tx_control+0xc74>)
 800ed9e:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800eda0:	4b11      	ldr	r3, [pc, #68]	@ (800ede8 <tx_control+0xc54>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	b2da      	uxtb	r2, r3
 800eda6:	4b18      	ldr	r3, [pc, #96]	@ (800ee08 <tx_control+0xc74>)
 800eda8:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800edaa:	4b20      	ldr	r3, [pc, #128]	@ (800ee2c <tx_control+0xc98>)
 800edac:	4a16      	ldr	r2, [pc, #88]	@ (800ee08 <tx_control+0xc74>)
 800edae:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800edb0:	4b1f      	ldr	r3, [pc, #124]	@ (800ee30 <tx_control+0xc9c>)
 800edb2:	4a15      	ldr	r2, [pc, #84]	@ (800ee08 <tx_control+0xc74>)
 800edb4:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800edb6:	4b1f      	ldr	r3, [pc, #124]	@ (800ee34 <tx_control+0xca0>)
 800edb8:	4a24      	ldr	r2, [pc, #144]	@ (800ee4c <tx_control+0xcb8>)
 800edba:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800edbc:	4b0f      	ldr	r3, [pc, #60]	@ (800edfc <tx_control+0xc68>)
 800edbe:	2210      	movs	r2, #16
 800edc0:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800edc2:	4b1e      	ldr	r3, [pc, #120]	@ (800ee3c <tx_control+0xca8>)
 800edc4:	2200      	movs	r2, #0
 800edc6:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800edc8:	4b1c      	ldr	r3, [pc, #112]	@ (800ee3c <tx_control+0xca8>)
 800edca:	2201      	movs	r2, #1
 800edcc:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800edce:	4b1c      	ldr	r3, [pc, #112]	@ (800ee40 <tx_control+0xcac>)
 800edd0:	2255      	movs	r2, #85	@ 0x55
 800edd2:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800edd4:	4b02      	ldr	r3, [pc, #8]	@ (800ede0 <tx_control+0xc4c>)
 800edd6:	2200      	movs	r2, #0
 800edd8:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800edda:	f001 fa82 	bl	80102e2 <tx_control+0x214e>
 800edde:	46c0      	nop			@ (mov r8, r8)
 800ede0:	20001eb0 	.word	0x20001eb0
 800ede4:	20001f71 	.word	0x20001f71
 800ede8:	20001ec0 	.word	0x20001ec0
 800edec:	20000b53 	.word	0x20000b53
 800edf0:	20000b52 	.word	0x20000b52
 800edf4:	20000984 	.word	0x20000984
 800edf8:	200001ba 	.word	0x200001ba
 800edfc:	20001ebc 	.word	0x20001ebc
 800ee00:	200000b8 	.word	0x200000b8
 800ee04:	20001e64 	.word	0x20001e64
 800ee08:	20002034 	.word	0x20002034
 800ee0c:	200001bb 	.word	0x200001bb
 800ee10:	200001bc 	.word	0x200001bc
 800ee14:	200001bd 	.word	0x200001bd
 800ee18:	200001be 	.word	0x200001be
 800ee1c:	200001bf 	.word	0x200001bf
 800ee20:	200001c0 	.word	0x200001c0
 800ee24:	200001c1 	.word	0x200001c1
 800ee28:	200001c2 	.word	0x200001c2
 800ee2c:	20001ea0 	.word	0x20001ea0
 800ee30:	20001e98 	.word	0x20001e98
 800ee34:	20001e9c 	.word	0x20001e9c
 800ee38:	20002048 	.word	0x20002048
 800ee3c:	20001ea8 	.word	0x20001ea8
 800ee40:	20001ea5 	.word	0x20001ea5
 800ee44:	20001e3c 	.word	0x20001e3c
 800ee48:	20001e3e 	.word	0x20001e3e
 800ee4c:	20002044 	.word	0x20002044
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800ee50:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800ee52:	4bd4      	ldr	r3, [pc, #848]	@ (800f1a4 <tx_control+0x1010>)
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	2b5c      	cmp	r3, #92	@ 0x5c
 800ee58:	d132      	bne.n	800eec0 <tx_control+0xd2c>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ee5a:	4bd3      	ldr	r3, [pc, #844]	@ (800f1a8 <tx_control+0x1014>)
 800ee5c:	22f0      	movs	r2, #240	@ 0xf0
 800ee5e:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800ee60:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ee62:	4bd2      	ldr	r3, [pc, #840]	@ (800f1ac <tx_control+0x1018>)
 800ee64:	2200      	movs	r2, #0
 800ee66:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800ee68:	4bd1      	ldr	r3, [pc, #836]	@ (800f1b0 <tx_control+0x101c>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800ee6e:	4bd1      	ldr	r3, [pc, #836]	@ (800f1b4 <tx_control+0x1020>)
 800ee70:	220b      	movs	r2, #11
 800ee72:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800ee74:	4bd0      	ldr	r3, [pc, #832]	@ (800f1b8 <tx_control+0x1024>)
 800ee76:	210b      	movs	r1, #11
 800ee78:	0018      	movs	r0, r3
 800ee7a:	f7f8 f893 	bl	8006fa4 <buildChksumBloq>
			chksum_to_compare = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800ee82:	4bcd      	ldr	r3, [pc, #820]	@ (800f1b8 <tx_control+0x1024>)
 800ee84:	7adb      	ldrb	r3, [r3, #11]
 800ee86:	061b      	lsls	r3, r3, #24
 800ee88:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800ee8a:	4bcb      	ldr	r3, [pc, #812]	@ (800f1b8 <tx_control+0x1024>)
 800ee8c:	7b1b      	ldrb	r3, [r3, #12]
 800ee8e:	041b      	lsls	r3, r3, #16
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	18d3      	adds	r3, r2, r3
 800ee94:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800ee96:	4bc8      	ldr	r3, [pc, #800]	@ (800f1b8 <tx_control+0x1024>)
 800ee98:	7b5b      	ldrb	r3, [r3, #13]
 800ee9a:	021b      	lsls	r3, r3, #8
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	18d3      	adds	r3, r2, r3
 800eea0:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800eea2:	4bc5      	ldr	r3, [pc, #788]	@ (800f1b8 <tx_control+0x1024>)
 800eea4:	7b9b      	ldrb	r3, [r3, #14]
 800eea6:	001a      	movs	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	189b      	adds	r3, r3, r2
 800eeac:	607b      	str	r3, [r7, #4]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800eeae:	4bbf      	ldr	r3, [pc, #764]	@ (800f1ac <tx_control+0x1018>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d101      	bne.n	800eebc <tx_control+0xd28>
 800eeb8:	f001 f910 	bl	80100dc <tx_control+0x1f48>
				goto tx_timeBCD_error;
 800eebc:	f001 f9f0 	bl	80102a0 <tx_control+0x210c>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800eec0:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800eec2:	4bb8      	ldr	r3, [pc, #736]	@ (800f1a4 <tx_control+0x1010>)
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	2b5f      	cmp	r3, #95	@ 0x5f
 800eec8:	d142      	bne.n	800ef50 <tx_control+0xdbc>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800eeca:	4bb7      	ldr	r3, [pc, #732]	@ (800f1a8 <tx_control+0x1014>)
 800eecc:	22f0      	movs	r2, #240	@ 0xf0
 800eece:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800eed0:	46c0      	nop			@ (mov r8, r8)
			//typeClock = 0;					// mov		typeClock,#0;				Reloj interno
			// ;mov		typeClock,#1;				Reloj con señal de CA
			//if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
			//	goto noCristal;
			//}
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800eed2:	4bba      	ldr	r3, [pc, #744]	@ (800f1bc <tx_control+0x1028>)
 800eed4:	2202      	movs	r2, #2
 800eed6:	701a      	strb	r2, [r3, #0]
//noCristal:

			// ldw		X,#typeClock;				/ inicio del bloque
			pointTx = &typeClock ;				// ldw		pointTx,X
 800eed8:	4bb9      	ldr	r3, [pc, #740]	@ (800f1c0 <tx_control+0x102c>)
 800eeda:	4ab8      	ldr	r2, [pc, #736]	@ (800f1bc <tx_control+0x1028>)
 800eedc:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800eede:	4bb9      	ldr	r3, [pc, #740]	@ (800f1c4 <tx_control+0x1030>)
 800eee0:	4ab6      	ldr	r2, [pc, #728]	@ (800f1bc <tx_control+0x1028>)
 800eee2:	601a      	str	r2, [r3, #0]
			// ldw		X,#(typeClock + 1);				/ fin del bloque
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800eee4:	4bb7      	ldr	r3, [pc, #732]	@ (800f1c4 <tx_control+0x1030>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	1c5a      	adds	r2, r3, #1
 800eeea:	4bb7      	ldr	r3, [pc, #732]	@ (800f1c8 <tx_control+0x1034>)
 800eeec:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800eeee:	4bb7      	ldr	r3, [pc, #732]	@ (800f1cc <tx_control+0x1038>)
 800eef0:	2201      	movs	r2, #1
 800eef2:	701a      	strb	r2, [r3, #0]

			//; Carga datos de Header
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800eef4:	4bb6      	ldr	r3, [pc, #728]	@ (800f1d0 <tx_control+0x103c>)
 800eef6:	227b      	movs	r2, #123	@ 0x7b
 800eef8:	5c9a      	ldrb	r2, [r3, r2]
 800eefa:	4bb6      	ldr	r3, [pc, #728]	@ (800f1d4 <tx_control+0x1040>)
 800eefc:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800eefe:	4bb4      	ldr	r3, [pc, #720]	@ (800f1d0 <tx_control+0x103c>)
 800ef00:	227c      	movs	r2, #124	@ 0x7c
 800ef02:	5c9a      	ldrb	r2, [r3, r2]
 800ef04:	4bb3      	ldr	r3, [pc, #716]	@ (800f1d4 <tx_control+0x1040>)
 800ef06:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800ef08:	4bb2      	ldr	r3, [pc, #712]	@ (800f1d4 <tx_control+0x1040>)
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800ef0e:	4bb1      	ldr	r3, [pc, #708]	@ (800f1d4 <tx_control+0x1040>)
 800ef10:	2200      	movs	r2, #0
 800ef12:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800ef14:	4baf      	ldr	r3, [pc, #700]	@ (800f1d4 <tx_control+0x1040>)
 800ef16:	2200      	movs	r2, #0
 800ef18:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800ef1a:	4bae      	ldr	r3, [pc, #696]	@ (800f1d4 <tx_control+0x1040>)
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800ef20:	4bac      	ldr	r3, [pc, #688]	@ (800f1d4 <tx_control+0x1040>)
 800ef22:	2209      	movs	r2, #9
 800ef24:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800ef26:	4ba9      	ldr	r3, [pc, #676]	@ (800f1cc <tx_control+0x1038>)
 800ef28:	781a      	ldrb	r2, [r3, #0]
 800ef2a:	4baa      	ldr	r3, [pc, #680]	@ (800f1d4 <tx_control+0x1040>)
 800ef2c:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800ef2e:	4baa      	ldr	r3, [pc, #680]	@ (800f1d8 <tx_control+0x1044>)
 800ef30:	2201      	movs	r2, #1
 800ef32:	709a      	strb	r2, [r3, #2]

			//clrw	X
			//ldw		chksum_HW,X
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800ef34:	4b9d      	ldr	r3, [pc, #628]	@ (800f1ac <tx_control+0x1018>)
 800ef36:	2200      	movs	r2, #0
 800ef38:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800ef3a:	4ba7      	ldr	r3, [pc, #668]	@ (800f1d8 <tx_control+0x1044>)
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ef40:	4ba6      	ldr	r3, [pc, #664]	@ (800f1dc <tx_control+0x1048>)
 800ef42:	2255      	movs	r2, #85	@ 0x55
 800ef44:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800ef46:	4b97      	ldr	r3, [pc, #604]	@ (800f1a4 <tx_control+0x1010>)
 800ef48:	2200      	movs	r2, #0
 800ef4a:	701a      	strb	r2, [r3, #0]

fin_tx_infoReloj:
			goto end_tx_control;		//jp		end_tx_control
 800ef4c:	f001 f9c9 	bl	80102e2 <tx_control+0x214e>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800ef50:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x62)//jrne	ask_tx_control_19
 800ef52:	4b94      	ldr	r3, [pc, #592]	@ (800f1a4 <tx_control+0x1010>)
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b62      	cmp	r3, #98	@ 0x62
 800ef58:	d10b      	bne.n	800ef72 <tx_control+0xdde>
			timeOutRst = 240; //mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ef5a:	4b93      	ldr	r3, [pc, #588]	@ (800f1a8 <tx_control+0x1014>)
 800ef5c:	22f0      	movs	r2, #240	@ 0xf0
 800ef5e:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_datalogger;//jp		tx_wifi_datalogger
 800ef60:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_wifi_datalogger:

			flagsWIFI[f_timeLoggerSend] = 1;	//bset		flagsWIFI,#f_timeLoggerSend;
 800ef62:	4b9f      	ldr	r3, [pc, #636]	@ (800f1e0 <tx_control+0x104c>)
 800ef64:	2201      	movs	r2, #1
 800ef66:	705a      	strb	r2, [r3, #1]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800ef68:	4b8e      	ldr	r3, [pc, #568]	@ (800f1a4 <tx_control+0x1010>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800ef6e:	f001 f9b8 	bl	80102e2 <tx_control+0x214e>
				goto ask_tx_control_19;
 800ef72:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x63)//jrne	ask_tx_control_20
 800ef74:	4b8b      	ldr	r3, [pc, #556]	@ (800f1a4 <tx_control+0x1010>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	2b63      	cmp	r3, #99	@ 0x63
 800ef7a:	d10f      	bne.n	800ef9c <tx_control+0xe08>
			timeOutRst = 240;		//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800ef7c:	4b8a      	ldr	r3, [pc, #552]	@ (800f1a8 <tx_control+0x1014>)
 800ef7e:	22f0      	movs	r2, #240	@ 0xf0
 800ef80:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_eventlogger;//jp		tx_wifi_eventlogger
 800ef82:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
tx_wifi_eventlogger:
			flagsWIFI[f_eventLoggerSend] = 1;	//bset		flagsWIFI,#f_eventLoggerSend;
 800ef84:	4b96      	ldr	r3, [pc, #600]	@ (800f1e0 <tx_control+0x104c>)
 800ef86:	2201      	movs	r2, #1
 800ef88:	709a      	strb	r2, [r3, #2]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800ef8a:	4b86      	ldr	r3, [pc, #536]	@ (800f1a4 <tx_control+0x1010>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800ef90:	f001 f9a7 	bl	80102e2 <tx_control+0x214e>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800ef94:	46c0      	nop			@ (mov r8, r8)
 800ef96:	e002      	b.n	800ef9e <tx_control+0xe0a>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800ef98:	46c0      	nop			@ (mov r8, r8)
 800ef9a:	e000      	b.n	800ef9e <tx_control+0xe0a>
				goto ask_tx_control_20;
 800ef9c:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800ef9e:	46c0      	nop			@ (mov r8, r8)

		//if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
		//	goto tx_wifi_OK;
		//}
		//; logger, telemetria y eventos por servidor solo están permitidos con comunicación WiFi seleccionada
		if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,tx_wifi_01
 800efa0:	4b90      	ldr	r3, [pc, #576]	@ (800f1e4 <tx_control+0x1050>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d101      	bne.n	800efac <tx_control+0xe18>
 800efa8:	f002 fa12 	bl	80113d0 <tx_control+0x323c>
			goto tx_wifi_01;
 800efac:	f001 f9bf 	bl	801032e <tx_control+0x219a>
	     	point_Y[i] = point_X[i];
 800efb0:	203c      	movs	r0, #60	@ 0x3c
 800efb2:	183b      	adds	r3, r7, r0
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800efb8:	18d2      	adds	r2, r2, r3
 800efba:	183b      	adds	r3, r7, r0
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800efc0:	18cb      	adds	r3, r1, r3
 800efc2:	7812      	ldrb	r2, [r2, #0]
 800efc4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800efc6:	183b      	adds	r3, r7, r0
 800efc8:	781a      	ldrb	r2, [r3, #0]
 800efca:	183b      	adds	r3, r7, r0
 800efcc:	3201      	adds	r2, #1
 800efce:	701a      	strb	r2, [r3, #0]
 800efd0:	233c      	movs	r3, #60	@ 0x3c
 800efd2:	18fb      	adds	r3, r7, r3
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b14      	cmp	r3, #20
 800efd8:	d9ea      	bls.n	800efb0 <tx_control+0xe1c>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800efda:	4b74      	ldr	r3, [pc, #464]	@ (800f1ac <tx_control+0x1018>)
 800efdc:	2200      	movs	r2, #0
 800efde:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800efe0:	4b81      	ldr	r3, [pc, #516]	@ (800f1e8 <tx_control+0x1054>)
 800efe2:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, size_handshake);
 800efe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efe6:	2115      	movs	r1, #21
 800efe8:	0018      	movs	r0, r3
 800efea:	f7f7 ffdb 	bl	8006fa4 <buildChksumBloq>
		asm ("nop");
 800efee:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800eff0:	4b6e      	ldr	r3, [pc, #440]	@ (800f1ac <tx_control+0x1018>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	0e1b      	lsrs	r3, r3, #24
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	4b7b      	ldr	r3, [pc, #492]	@ (800f1e8 <tx_control+0x1054>)
 800effa:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800effc:	4b6b      	ldr	r3, [pc, #428]	@ (800f1ac <tx_control+0x1018>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	0c1b      	lsrs	r3, r3, #16
 800f002:	b2da      	uxtb	r2, r3
 800f004:	4b78      	ldr	r3, [pc, #480]	@ (800f1e8 <tx_control+0x1054>)
 800f006:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f008:	4b68      	ldr	r3, [pc, #416]	@ (800f1ac <tx_control+0x1018>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	0a1b      	lsrs	r3, r3, #8
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	4b75      	ldr	r3, [pc, #468]	@ (800f1e8 <tx_control+0x1054>)
 800f012:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f014:	4b65      	ldr	r3, [pc, #404]	@ (800f1ac <tx_control+0x1018>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	4b73      	ldr	r3, [pc, #460]	@ (800f1e8 <tx_control+0x1054>)
 800f01c:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800f01e:	4b68      	ldr	r3, [pc, #416]	@ (800f1c0 <tx_control+0x102c>)
 800f020:	4a71      	ldr	r2, [pc, #452]	@ (800f1e8 <tx_control+0x1054>)
 800f022:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f024:	4b67      	ldr	r3, [pc, #412]	@ (800f1c4 <tx_control+0x1030>)
 800f026:	4a70      	ldr	r2, [pc, #448]	@ (800f1e8 <tx_control+0x1054>)
 800f028:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800f02a:	4b67      	ldr	r3, [pc, #412]	@ (800f1c8 <tx_control+0x1034>)
 800f02c:	4a6f      	ldr	r2, [pc, #444]	@ (800f1ec <tx_control+0x1058>)
 800f02e:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800f030:	4b66      	ldr	r3, [pc, #408]	@ (800f1cc <tx_control+0x1038>)
 800f032:	2219      	movs	r2, #25
 800f034:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800f036:	4b68      	ldr	r3, [pc, #416]	@ (800f1d8 <tx_control+0x1044>)
 800f038:	2201      	movs	r2, #1
 800f03a:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800f03c:	4b66      	ldr	r3, [pc, #408]	@ (800f1d8 <tx_control+0x1044>)
 800f03e:	2200      	movs	r2, #0
 800f040:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f042:	4b5a      	ldr	r3, [pc, #360]	@ (800f1ac <tx_control+0x1018>)
 800f044:	2200      	movs	r2, #0
 800f046:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800f048:	4b63      	ldr	r3, [pc, #396]	@ (800f1d8 <tx_control+0x1044>)
 800f04a:	2201      	movs	r2, #1
 800f04c:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f04e:	4b63      	ldr	r3, [pc, #396]	@ (800f1dc <tx_control+0x1048>)
 800f050:	2255      	movs	r2, #85	@ 0x55
 800f052:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800f054:	4b53      	ldr	r3, [pc, #332]	@ (800f1a4 <tx_control+0x1010>)
 800f056:	2200      	movs	r2, #0
 800f058:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800f05a:	f001 f942 	bl	80102e2 <tx_control+0x214e>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800f05e:	4b5e      	ldr	r3, [pc, #376]	@ (800f1d8 <tx_control+0x1044>)
 800f060:	2201      	movs	r2, #1
 800f062:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800f064:	4b59      	ldr	r3, [pc, #356]	@ (800f1cc <tx_control+0x1038>)
 800f066:	2208      	movs	r2, #8
 800f068:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800f06a:	4b61      	ldr	r3, [pc, #388]	@ (800f1f0 <tx_control+0x105c>)
 800f06c:	2201      	movs	r2, #1
 800f06e:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800f070:	4b60      	ldr	r3, [pc, #384]	@ (800f1f4 <tx_control+0x1060>)
 800f072:	4a61      	ldr	r2, [pc, #388]	@ (800f1f8 <tx_control+0x1064>)
 800f074:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800f076:	4b61      	ldr	r3, [pc, #388]	@ (800f1fc <tx_control+0x1068>)
 800f078:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;		//incw X ******************************************
 800f07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f07c:	3301      	adds	r3, #1
 800f07e:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800f080:	4b5f      	ldr	r3, [pc, #380]	@ (800f200 <tx_control+0x106c>)
 800f082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f084:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800f086:	4b5f      	ldr	r3, [pc, #380]	@ (800f204 <tx_control+0x1070>)
 800f088:	2260      	movs	r2, #96	@ 0x60
 800f08a:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800f08c:	4b5e      	ldr	r3, [pc, #376]	@ (800f208 <tx_control+0x1074>)
 800f08e:	881a      	ldrh	r2, [r3, #0]
 800f090:	4b5e      	ldr	r3, [pc, #376]	@ (800f20c <tx_control+0x1078>)
 800f092:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800f094:	4b5e      	ldr	r3, [pc, #376]	@ (800f210 <tx_control+0x107c>)
 800f096:	4a5f      	ldr	r2, [pc, #380]	@ (800f214 <tx_control+0x1080>)
 800f098:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 800f09a:	4b5c      	ldr	r3, [pc, #368]	@ (800f20c <tx_control+0x1078>)
 800f09c:	881a      	ldrh	r2, [r3, #0]
 800f09e:	4b5e      	ldr	r3, [pc, #376]	@ (800f218 <tx_control+0x1084>)
 800f0a0:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800f0a2:	f002 f9cb 	bl	801143c <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f0a6:	4b4a      	ldr	r3, [pc, #296]	@ (800f1d0 <tx_control+0x103c>)
 800f0a8:	227b      	movs	r2, #123	@ 0x7b
 800f0aa:	5c9a      	ldrb	r2, [r3, r2]
 800f0ac:	4b49      	ldr	r3, [pc, #292]	@ (800f1d4 <tx_control+0x1040>)
 800f0ae:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800f0b0:	4b47      	ldr	r3, [pc, #284]	@ (800f1d0 <tx_control+0x103c>)
 800f0b2:	227c      	movs	r2, #124	@ 0x7c
 800f0b4:	5c9a      	ldrb	r2, [r3, r2]
 800f0b6:	4b47      	ldr	r3, [pc, #284]	@ (800f1d4 <tx_control+0x1040>)
 800f0b8:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800f0ba:	4b46      	ldr	r3, [pc, #280]	@ (800f1d4 <tx_control+0x1040>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800f0c0:	4b44      	ldr	r3, [pc, #272]	@ (800f1d4 <tx_control+0x1040>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800f0c6:	4b43      	ldr	r3, [pc, #268]	@ (800f1d4 <tx_control+0x1040>)
 800f0c8:	2205      	movs	r2, #5
 800f0ca:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800f0cc:	4b41      	ldr	r3, [pc, #260]	@ (800f1d4 <tx_control+0x1040>)
 800f0ce:	2240      	movs	r2, #64	@ 0x40
 800f0d0:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800f0d2:	4b40      	ldr	r3, [pc, #256]	@ (800f1d4 <tx_control+0x1040>)
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800f0d8:	4b3e      	ldr	r3, [pc, #248]	@ (800f1d4 <tx_control+0x1040>)
 800f0da:	2209      	movs	r2, #9
 800f0dc:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800f0de:	4b3e      	ldr	r3, [pc, #248]	@ (800f1d8 <tx_control+0x1044>)
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800f0e4:	4b31      	ldr	r3, [pc, #196]	@ (800f1ac <tx_control+0x1018>)
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800f0ea:	4b3b      	ldr	r3, [pc, #236]	@ (800f1d8 <tx_control+0x1044>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800f0f0:	4b3a      	ldr	r3, [pc, #232]	@ (800f1dc <tx_control+0x1048>)
 800f0f2:	2255      	movs	r2, #85	@ 0x55
 800f0f4:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800f0f6:	4b2b      	ldr	r3, [pc, #172]	@ (800f1a4 <tx_control+0x1010>)
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800f0fc:	f001 f8f1 	bl	80102e2 <tx_control+0x214e>
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800f100:	4b35      	ldr	r3, [pc, #212]	@ (800f1d8 <tx_control+0x1044>)
 800f102:	2201      	movs	r2, #1
 800f104:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800f106:	4b31      	ldr	r3, [pc, #196]	@ (800f1cc <tx_control+0x1038>)
 800f108:	2208      	movs	r2, #8
 800f10a:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800f10c:	4b38      	ldr	r3, [pc, #224]	@ (800f1f0 <tx_control+0x105c>)
 800f10e:	2201      	movs	r2, #1
 800f110:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800f112:	4b38      	ldr	r3, [pc, #224]	@ (800f1f4 <tx_control+0x1060>)
 800f114:	4a41      	ldr	r2, [pc, #260]	@ (800f21c <tx_control+0x1088>)
 800f116:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800f118:	4b41      	ldr	r3, [pc, #260]	@ (800f220 <tx_control+0x108c>)
 800f11a:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;						//incw	X ******************
 800f11c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f11e:	3301      	adds	r3, #1
 800f120:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800f122:	4b37      	ldr	r3, [pc, #220]	@ (800f200 <tx_control+0x106c>)
 800f124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f126:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800f128:	4b36      	ldr	r3, [pc, #216]	@ (800f204 <tx_control+0x1070>)
 800f12a:	22a0      	movs	r2, #160	@ 0xa0
 800f12c:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800f12e:	4b3d      	ldr	r3, [pc, #244]	@ (800f224 <tx_control+0x1090>)
 800f130:	881a      	ldrh	r2, [r3, #0]
 800f132:	4b36      	ldr	r3, [pc, #216]	@ (800f20c <tx_control+0x1078>)
 800f134:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800f136:	4b36      	ldr	r3, [pc, #216]	@ (800f210 <tx_control+0x107c>)
 800f138:	4a3b      	ldr	r2, [pc, #236]	@ (800f228 <tx_control+0x1094>)
 800f13a:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 800f13c:	4b33      	ldr	r3, [pc, #204]	@ (800f20c <tx_control+0x1078>)
 800f13e:	881a      	ldrh	r2, [r3, #0]
 800f140:	4b3a      	ldr	r3, [pc, #232]	@ (800f22c <tx_control+0x1098>)
 800f142:	801a      	strh	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800f144:	f002 f97a 	bl	801143c <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f148:	4b21      	ldr	r3, [pc, #132]	@ (800f1d0 <tx_control+0x103c>)
 800f14a:	227b      	movs	r2, #123	@ 0x7b
 800f14c:	5c9a      	ldrb	r2, [r3, r2]
 800f14e:	4b21      	ldr	r3, [pc, #132]	@ (800f1d4 <tx_control+0x1040>)
 800f150:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800f152:	4b1f      	ldr	r3, [pc, #124]	@ (800f1d0 <tx_control+0x103c>)
 800f154:	227c      	movs	r2, #124	@ 0x7c
 800f156:	5c9a      	ldrb	r2, [r3, r2]
 800f158:	4b1e      	ldr	r3, [pc, #120]	@ (800f1d4 <tx_control+0x1040>)
 800f15a:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800f15c:	4b1d      	ldr	r3, [pc, #116]	@ (800f1d4 <tx_control+0x1040>)
 800f15e:	2200      	movs	r2, #0
 800f160:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800f162:	4b1c      	ldr	r3, [pc, #112]	@ (800f1d4 <tx_control+0x1040>)
 800f164:	2200      	movs	r2, #0
 800f166:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800f168:	4b1a      	ldr	r3, [pc, #104]	@ (800f1d4 <tx_control+0x1040>)
 800f16a:	2205      	movs	r2, #5
 800f16c:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800f16e:	4b19      	ldr	r3, [pc, #100]	@ (800f1d4 <tx_control+0x1040>)
 800f170:	22a0      	movs	r2, #160	@ 0xa0
 800f172:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800f174:	4b17      	ldr	r3, [pc, #92]	@ (800f1d4 <tx_control+0x1040>)
 800f176:	2202      	movs	r2, #2
 800f178:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800f17a:	4b16      	ldr	r3, [pc, #88]	@ (800f1d4 <tx_control+0x1040>)
 800f17c:	220e      	movs	r2, #14
 800f17e:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800f180:	4b15      	ldr	r3, [pc, #84]	@ (800f1d8 <tx_control+0x1044>)
 800f182:	2201      	movs	r2, #1
 800f184:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800f186:	4b09      	ldr	r3, [pc, #36]	@ (800f1ac <tx_control+0x1018>)
 800f188:	2200      	movs	r2, #0
 800f18a:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800f18c:	4b12      	ldr	r3, [pc, #72]	@ (800f1d8 <tx_control+0x1044>)
 800f18e:	2200      	movs	r2, #0
 800f190:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800f192:	4b12      	ldr	r3, [pc, #72]	@ (800f1dc <tx_control+0x1048>)
 800f194:	2255      	movs	r2, #85	@ 0x55
 800f196:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800f198:	4b02      	ldr	r3, [pc, #8]	@ (800f1a4 <tx_control+0x1010>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800f19e:	f001 f8a0 	bl	80102e2 <tx_control+0x214e>
 800f1a2:	46c0      	nop			@ (mov r8, r8)
 800f1a4:	20001eb0 	.word	0x20001eb0
 800f1a8:	20001f71 	.word	0x20001f71
 800f1ac:	20001ec0 	.word	0x20001ec0
 800f1b0:	20000b53 	.word	0x20000b53
 800f1b4:	20000b52 	.word	0x20000b52
 800f1b8:	20000984 	.word	0x20000984
 800f1bc:	2000213d 	.word	0x2000213d
 800f1c0:	20001ea0 	.word	0x20001ea0
 800f1c4:	20001e98 	.word	0x20001e98
 800f1c8:	20001e9c 	.word	0x20001e9c
 800f1cc:	20001ebc 	.word	0x20001ebc
 800f1d0:	200000b8 	.word	0x200000b8
 800f1d4:	20001e64 	.word	0x20001e64
 800f1d8:	20001ea8 	.word	0x20001ea8
 800f1dc:	20001ea5 	.word	0x20001ea5
 800f1e0:	20001fdc 	.word	0x20001fdc
 800f1e4:	20002178 	.word	0x20002178
 800f1e8:	20002034 	.word	0x20002034
 800f1ec:	2000204d 	.word	0x2000204d
 800f1f0:	20001e90 	.word	0x20001e90
 800f1f4:	20001eb4 	.word	0x20001eb4
 800f1f8:	0803c000 	.word	0x0803c000
 800f1fc:	0803efff 	.word	0x0803efff
 800f200:	20001eb8 	.word	0x20001eb8
 800f204:	20000e25 	.word	0x20000e25
 800f208:	200020c6 	.word	0x200020c6
 800f20c:	200020ca 	.word	0x200020ca
 800f210:	200020cc 	.word	0x200020cc
 800f214:	0803f810 	.word	0x0803f810
 800f218:	20000d0e 	.word	0x20000d0e
 800f21c:	08037000 	.word	0x08037000
 800f220:	0803bfff 	.word	0x0803bfff
 800f224:	200020c8 	.word	0x200020c8
 800f228:	0803f812 	.word	0x0803f812
 800f22c:	20000d10 	.word	0x20000d10
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800f230:	4bd1      	ldr	r3, [pc, #836]	@ (800f578 <tx_control+0x13e4>)
 800f232:	79db      	ldrb	r3, [r3, #7]
 800f234:	2201      	movs	r2, #1
 800f236:	4313      	orrs	r3, r2
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	4bcf      	ldr	r3, [pc, #828]	@ (800f578 <tx_control+0x13e4>)
 800f23c:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_dh])												// deshielo activo ?
 800f23e:	4bcf      	ldr	r3, [pc, #828]	@ (800f57c <tx_control+0x13e8>)
 800f240:	785b      	ldrb	r3, [r3, #1]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d006      	beq.n	800f254 <tx_control+0x10c0>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800f246:	4bcc      	ldr	r3, [pc, #816]	@ (800f578 <tx_control+0x13e4>)
 800f248:	79db      	ldrb	r3, [r3, #7]
 800f24a:	2202      	movs	r2, #2
 800f24c:	4313      	orrs	r3, r2
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	4bc9      	ldr	r3, [pc, #804]	@ (800f578 <tx_control+0x13e4>)
 800f252:	71da      	strb	r2, [r3, #7]
		if (flagsC[0])													// puerta abierta ?
 800f254:	4bca      	ldr	r3, [pc, #808]	@ (800f580 <tx_control+0x13ec>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d006      	beq.n	800f26a <tx_control+0x10d6>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800f25c:	4bc6      	ldr	r3, [pc, #792]	@ (800f578 <tx_control+0x13e4>)
 800f25e:	79db      	ldrb	r3, [r3, #7]
 800f260:	2204      	movs	r2, #4
 800f262:	4313      	orrs	r3, r2
 800f264:	b2da      	uxtb	r2, r3
 800f266:	4bc4      	ldr	r3, [pc, #784]	@ (800f578 <tx_control+0x13e4>)
 800f268:	71da      	strb	r2, [r3, #7]
		if (flagsC[1])													// Modo ahorro 1 activo ?
 800f26a:	4bc5      	ldr	r3, [pc, #788]	@ (800f580 <tx_control+0x13ec>)
 800f26c:	785b      	ldrb	r3, [r3, #1]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d006      	beq.n	800f280 <tx_control+0x10ec>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800f272:	4bc1      	ldr	r3, [pc, #772]	@ (800f578 <tx_control+0x13e4>)
 800f274:	79db      	ldrb	r3, [r3, #7]
 800f276:	2208      	movs	r2, #8
 800f278:	4313      	orrs	r3, r2
 800f27a:	b2da      	uxtb	r2, r3
 800f27c:	4bbe      	ldr	r3, [pc, #760]	@ (800f578 <tx_control+0x13e4>)
 800f27e:	71da      	strb	r2, [r3, #7]
		if (flagsC[2])													// Modo ahorro 1 activo ?
 800f280:	4bbf      	ldr	r3, [pc, #764]	@ (800f580 <tx_control+0x13ec>)
 800f282:	789b      	ldrb	r3, [r3, #2]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d006      	beq.n	800f296 <tx_control+0x1102>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800f288:	4bbb      	ldr	r3, [pc, #748]	@ (800f578 <tx_control+0x13e4>)
 800f28a:	79db      	ldrb	r3, [r3, #7]
 800f28c:	2210      	movs	r2, #16
 800f28e:	4313      	orrs	r3, r2
 800f290:	b2da      	uxtb	r2, r3
 800f292:	4bb9      	ldr	r3, [pc, #740]	@ (800f578 <tx_control+0x13e4>)
 800f294:	71da      	strb	r2, [r3, #7]
		if (flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800f296:	4bbb      	ldr	r3, [pc, #748]	@ (800f584 <tx_control+0x13f0>)
 800f298:	78db      	ldrb	r3, [r3, #3]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d006      	beq.n	800f2ac <tx_control+0x1118>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800f29e:	4bb6      	ldr	r3, [pc, #728]	@ (800f578 <tx_control+0x13e4>)
 800f2a0:	79db      	ldrb	r3, [r3, #7]
 800f2a2:	2220      	movs	r2, #32
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	4bb3      	ldr	r3, [pc, #716]	@ (800f578 <tx_control+0x13e4>)
 800f2aa:	71da      	strb	r2, [r3, #7]
		if (GPIOR1 [f_fan])												// ventilador activo ?
 800f2ac:	4bb6      	ldr	r3, [pc, #728]	@ (800f588 <tx_control+0x13f4>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d006      	beq.n	800f2c2 <tx_control+0x112e>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800f2b4:	4bb0      	ldr	r3, [pc, #704]	@ (800f578 <tx_control+0x13e4>)
 800f2b6:	79db      	ldrb	r3, [r3, #7]
 800f2b8:	2240      	movs	r2, #64	@ 0x40
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	4bae      	ldr	r3, [pc, #696]	@ (800f578 <tx_control+0x13e4>)
 800f2c0:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800f2c2:	4bae      	ldr	r3, [pc, #696]	@ (800f57c <tx_control+0x13e8>)
 800f2c4:	789b      	ldrb	r3, [r3, #2]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d007      	beq.n	800f2da <tx_control+0x1146>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800f2ca:	4bab      	ldr	r3, [pc, #684]	@ (800f578 <tx_control+0x13e4>)
 800f2cc:	79db      	ldrb	r3, [r3, #7]
 800f2ce:	2280      	movs	r2, #128	@ 0x80
 800f2d0:	4252      	negs	r2, r2
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	b2da      	uxtb	r2, r3
 800f2d6:	4ba8      	ldr	r3, [pc, #672]	@ (800f578 <tx_control+0x13e4>)
 800f2d8:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800f2da:	4ba7      	ldr	r3, [pc, #668]	@ (800f578 <tx_control+0x13e4>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f2e4:	e011      	b.n	800f30a <tx_control+0x1176>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800f2e6:	4ba4      	ldr	r3, [pc, #656]	@ (800f578 <tx_control+0x13e4>)
 800f2e8:	7a1a      	ldrb	r2, [r3, #8]
 800f2ea:	49a8      	ldr	r1, [pc, #672]	@ (800f58c <tx_control+0x13f8>)
 800f2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ee:	18cb      	adds	r3, r1, r3
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	0019      	movs	r1, r3
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f6:	4099      	lsls	r1, r3
 800f2f8:	000b      	movs	r3, r1
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	b2da      	uxtb	r2, r3
 800f300:	4b9d      	ldr	r3, [pc, #628]	@ (800f578 <tx_control+0x13e4>)
 800f302:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800f304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f306:	3301      	adds	r3, #1
 800f308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f30c:	2b07      	cmp	r3, #7
 800f30e:	ddea      	ble.n	800f2e6 <tx_control+0x1152>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800f310:	4b99      	ldr	r3, [pc, #612]	@ (800f578 <tx_control+0x13e4>)
 800f312:	7a1b      	ldrb	r3, [r3, #8]
 800f314:	2201      	movs	r2, #1
 800f316:	4393      	bics	r3, r2
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	4b97      	ldr	r3, [pc, #604]	@ (800f578 <tx_control+0x13e4>)
 800f31c:	721a      	strb	r2, [r3, #8]
		for(uint8_t k=0; k<8; k++){
 800f31e:	2337      	movs	r3, #55	@ 0x37
 800f320:	18fb      	adds	r3, r7, r3
 800f322:	2200      	movs	r2, #0
 800f324:	701a      	strb	r2, [r3, #0]
 800f326:	e017      	b.n	800f358 <tx_control+0x11c4>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800f328:	4b93      	ldr	r3, [pc, #588]	@ (800f578 <tx_control+0x13e4>)
 800f32a:	7a5b      	ldrb	r3, [r3, #9]
 800f32c:	b25a      	sxtb	r2, r3
 800f32e:	2037      	movs	r0, #55	@ 0x37
 800f330:	183b      	adds	r3, r7, r0
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	4996      	ldr	r1, [pc, #600]	@ (800f590 <tx_control+0x13fc>)
 800f336:	5ccb      	ldrb	r3, [r1, r3]
 800f338:	0019      	movs	r1, r3
 800f33a:	183b      	adds	r3, r7, r0
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	4099      	lsls	r1, r3
 800f340:	000b      	movs	r3, r1
 800f342:	b25b      	sxtb	r3, r3
 800f344:	4313      	orrs	r3, r2
 800f346:	b25b      	sxtb	r3, r3
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	4b8b      	ldr	r3, [pc, #556]	@ (800f578 <tx_control+0x13e4>)
 800f34c:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800f34e:	183b      	adds	r3, r7, r0
 800f350:	781a      	ldrb	r2, [r3, #0]
 800f352:	183b      	adds	r3, r7, r0
 800f354:	3201      	adds	r2, #1
 800f356:	701a      	strb	r2, [r3, #0]
 800f358:	2337      	movs	r3, #55	@ 0x37
 800f35a:	18fb      	adds	r3, r7, r3
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	2b07      	cmp	r3, #7
 800f360:	d9e2      	bls.n	800f328 <tx_control+0x1194>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800f362:	4b8c      	ldr	r3, [pc, #560]	@ (800f594 <tx_control+0x1400>)
 800f364:	220a      	movs	r2, #10
 800f366:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800f368:	4b8b      	ldr	r3, [pc, #556]	@ (800f598 <tx_control+0x1404>)
 800f36a:	227b      	movs	r2, #123	@ 0x7b
 800f36c:	5c9a      	ldrb	r2, [r3, r2]
 800f36e:	4b8b      	ldr	r3, [pc, #556]	@ (800f59c <tx_control+0x1408>)
 800f370:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800f372:	4b89      	ldr	r3, [pc, #548]	@ (800f598 <tx_control+0x1404>)
 800f374:	227c      	movs	r2, #124	@ 0x7c
 800f376:	5c9a      	ldrb	r2, [r3, r2]
 800f378:	4b88      	ldr	r3, [pc, #544]	@ (800f59c <tx_control+0x1408>)
 800f37a:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800f37c:	4b87      	ldr	r3, [pc, #540]	@ (800f59c <tx_control+0x1408>)
 800f37e:	2200      	movs	r2, #0
 800f380:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800f382:	4b86      	ldr	r3, [pc, #536]	@ (800f59c <tx_control+0x1408>)
 800f384:	2200      	movs	r2, #0
 800f386:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800f388:	4b84      	ldr	r3, [pc, #528]	@ (800f59c <tx_control+0x1408>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800f38e:	4b83      	ldr	r3, [pc, #524]	@ (800f59c <tx_control+0x1408>)
 800f390:	2201      	movs	r2, #1
 800f392:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800f394:	4b81      	ldr	r3, [pc, #516]	@ (800f59c <tx_control+0x1408>)
 800f396:	2203      	movs	r2, #3
 800f398:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800f39a:	4b7e      	ldr	r3, [pc, #504]	@ (800f594 <tx_control+0x1400>)
 800f39c:	781a      	ldrb	r2, [r3, #0]
 800f39e:	4b7f      	ldr	r3, [pc, #508]	@ (800f59c <tx_control+0x1408>)
 800f3a0:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800f3a2:	4b7f      	ldr	r3, [pc, #508]	@ (800f5a0 <tx_control+0x140c>)
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800f3a8:	4b7c      	ldr	r3, [pc, #496]	@ (800f59c <tx_control+0x1408>)
 800f3aa:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800f3ac:	4b7d      	ldr	r3, [pc, #500]	@ (800f5a4 <tx_control+0x1410>)
 800f3ae:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800f3b0:	2336      	movs	r3, #54	@ 0x36
 800f3b2:	18fb      	adds	r3, r7, r3
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	701a      	strb	r2, [r3, #0]
 800f3b8:	e00f      	b.n	800f3da <tx_control+0x1246>
			point_Y[i] = point_X[i];
 800f3ba:	2036      	movs	r0, #54	@ 0x36
 800f3bc:	183b      	adds	r3, r7, r0
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3c2:	18d2      	adds	r2, r2, r3
 800f3c4:	183b      	adds	r3, r7, r0
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f3ca:	18cb      	adds	r3, r1, r3
 800f3cc:	7812      	ldrb	r2, [r2, #0]
 800f3ce:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f3d0:	183b      	adds	r3, r7, r0
 800f3d2:	781a      	ldrb	r2, [r3, #0]
 800f3d4:	183b      	adds	r3, r7, r0
 800f3d6:	3201      	adds	r2, #1
 800f3d8:	701a      	strb	r2, [r3, #0]
 800f3da:	2336      	movs	r3, #54	@ 0x36
 800f3dc:	18fb      	adds	r3, r7, r3
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	2b07      	cmp	r3, #7
 800f3e2:	d9ea      	bls.n	800f3ba <tx_control+0x1226>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800f3e4:	4b64      	ldr	r3, [pc, #400]	@ (800f578 <tx_control+0x13e4>)
 800f3e6:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[8];	 //
 800f3e8:	4b6f      	ldr	r3, [pc, #444]	@ (800f5a8 <tx_control+0x1414>)
 800f3ea:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 10 ; i++ )
 800f3ec:	2335      	movs	r3, #53	@ 0x35
 800f3ee:	18fb      	adds	r3, r7, r3
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]
 800f3f4:	e00f      	b.n	800f416 <tx_control+0x1282>
			point_Y[i] = point_X[i];
 800f3f6:	2035      	movs	r0, #53	@ 0x35
 800f3f8:	183b      	adds	r3, r7, r0
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3fe:	18d2      	adds	r2, r2, r3
 800f400:	183b      	adds	r3, r7, r0
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f406:	18cb      	adds	r3, r1, r3
 800f408:	7812      	ldrb	r2, [r2, #0]
 800f40a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800f40c:	183b      	adds	r3, r7, r0
 800f40e:	781a      	ldrb	r2, [r3, #0]
 800f410:	183b      	adds	r3, r7, r0
 800f412:	3201      	adds	r2, #1
 800f414:	701a      	strb	r2, [r3, #0]
 800f416:	2335      	movs	r3, #53	@ 0x35
 800f418:	18fb      	adds	r3, r7, r3
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	2b09      	cmp	r3, #9
 800f41e:	d9ea      	bls.n	800f3f6 <tx_control+0x1262>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f420:	4b62      	ldr	r3, [pc, #392]	@ (800f5ac <tx_control+0x1418>)
 800f422:	2200      	movs	r2, #0
 800f424:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f426:	4b5f      	ldr	r3, [pc, #380]	@ (800f5a4 <tx_control+0x1410>)
 800f428:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800f42a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f42c:	2112      	movs	r1, #18
 800f42e:	0018      	movs	r0, r3
 800f430:	f7f7 fdb8 	bl	8006fa4 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f434:	4b5d      	ldr	r3, [pc, #372]	@ (800f5ac <tx_control+0x1418>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	0e1b      	lsrs	r3, r3, #24
 800f43a:	b2da      	uxtb	r2, r3
 800f43c:	4b59      	ldr	r3, [pc, #356]	@ (800f5a4 <tx_control+0x1410>)
 800f43e:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f440:	4b5a      	ldr	r3, [pc, #360]	@ (800f5ac <tx_control+0x1418>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	0c1b      	lsrs	r3, r3, #16
 800f446:	b2da      	uxtb	r2, r3
 800f448:	4b56      	ldr	r3, [pc, #344]	@ (800f5a4 <tx_control+0x1410>)
 800f44a:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f44c:	4b57      	ldr	r3, [pc, #348]	@ (800f5ac <tx_control+0x1418>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	0a1b      	lsrs	r3, r3, #8
 800f452:	b2da      	uxtb	r2, r3
 800f454:	4b53      	ldr	r3, [pc, #332]	@ (800f5a4 <tx_control+0x1410>)
 800f456:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f458:	4b54      	ldr	r3, [pc, #336]	@ (800f5ac <tx_control+0x1418>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	b2da      	uxtb	r2, r3
 800f45e:	4b51      	ldr	r3, [pc, #324]	@ (800f5a4 <tx_control+0x1410>)
 800f460:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800f462:	4b53      	ldr	r3, [pc, #332]	@ (800f5b0 <tx_control+0x141c>)
 800f464:	4a4f      	ldr	r2, [pc, #316]	@ (800f5a4 <tx_control+0x1410>)
 800f466:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f468:	4b52      	ldr	r3, [pc, #328]	@ (800f5b4 <tx_control+0x1420>)
 800f46a:	4a4e      	ldr	r2, [pc, #312]	@ (800f5a4 <tx_control+0x1410>)
 800f46c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800f46e:	4b52      	ldr	r3, [pc, #328]	@ (800f5b8 <tx_control+0x1424>)
 800f470:	4a52      	ldr	r2, [pc, #328]	@ (800f5bc <tx_control+0x1428>)
 800f472:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f474:	4b47      	ldr	r3, [pc, #284]	@ (800f594 <tx_control+0x1400>)
 800f476:	2216      	movs	r2, #22
 800f478:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800f47a:	4b49      	ldr	r3, [pc, #292]	@ (800f5a0 <tx_control+0x140c>)
 800f47c:	2200      	movs	r2, #0
 800f47e:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800f480:	4b47      	ldr	r3, [pc, #284]	@ (800f5a0 <tx_control+0x140c>)
 800f482:	2201      	movs	r2, #1
 800f484:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f486:	4b4e      	ldr	r3, [pc, #312]	@ (800f5c0 <tx_control+0x142c>)
 800f488:	2255      	movs	r2, #85	@ 0x55
 800f48a:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f48c:	4b4d      	ldr	r3, [pc, #308]	@ (800f5c4 <tx_control+0x1430>)
 800f48e:	2200      	movs	r2, #0
 800f490:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f492:	f000 ff26 	bl	80102e2 <tx_control+0x214e>
			point_Y[i] = point_X[i];
 800f496:	2034      	movs	r0, #52	@ 0x34
 800f498:	183b      	adds	r3, r7, r0
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f49e:	18d2      	adds	r2, r2, r3
 800f4a0:	183b      	adds	r3, r7, r0
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4a6:	18cb      	adds	r3, r1, r3
 800f4a8:	7812      	ldrb	r2, [r2, #0]
 800f4aa:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800f4ac:	183b      	adds	r3, r7, r0
 800f4ae:	781a      	ldrb	r2, [r3, #0]
 800f4b0:	183b      	adds	r3, r7, r0
 800f4b2:	3201      	adds	r2, #1
 800f4b4:	701a      	strb	r2, [r3, #0]
 800f4b6:	2334      	movs	r3, #52	@ 0x34
 800f4b8:	18fb      	adds	r3, r7, r3
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	2b07      	cmp	r3, #7
 800f4be:	d9ea      	bls.n	800f496 <tx_control+0x1302>
		point_Y = &bufferTxControl[8];	 //
 800f4c0:	4b39      	ldr	r3, [pc, #228]	@ (800f5a8 <tx_control+0x1414>)
 800f4c2:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 128 ; i++ )
 800f4c4:	2333      	movs	r3, #51	@ 0x33
 800f4c6:	18fb      	adds	r3, r7, r3
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	701a      	strb	r2, [r3, #0]
 800f4cc:	e00e      	b.n	800f4ec <tx_control+0x1358>
			point_Y[i] = reePlantilla[i];
 800f4ce:	2033      	movs	r0, #51	@ 0x33
 800f4d0:	183b      	adds	r3, r7, r0
 800f4d2:	781a      	ldrb	r2, [r3, #0]
 800f4d4:	183b      	adds	r3, r7, r0
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4da:	18cb      	adds	r3, r1, r3
 800f4dc:	493a      	ldr	r1, [pc, #232]	@ (800f5c8 <tx_control+0x1434>)
 800f4de:	5c8a      	ldrb	r2, [r1, r2]
 800f4e0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800f4e2:	183b      	adds	r3, r7, r0
 800f4e4:	781a      	ldrb	r2, [r3, #0]
 800f4e6:	183b      	adds	r3, r7, r0
 800f4e8:	3201      	adds	r2, #1
 800f4ea:	701a      	strb	r2, [r3, #0]
 800f4ec:	2333      	movs	r3, #51	@ 0x33
 800f4ee:	18fb      	adds	r3, r7, r3
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	b25b      	sxtb	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	daea      	bge.n	800f4ce <tx_control+0x133a>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f4f8:	4b2c      	ldr	r3, [pc, #176]	@ (800f5ac <tx_control+0x1418>)
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800f4fe:	4b29      	ldr	r3, [pc, #164]	@ (800f5a4 <tx_control+0x1410>)
 800f500:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800f502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f504:	2188      	movs	r1, #136	@ 0x88
 800f506:	0018      	movs	r0, r3
 800f508:	f7f7 fd4c 	bl	8006fa4 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800f50c:	4b27      	ldr	r3, [pc, #156]	@ (800f5ac <tx_control+0x1418>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	0e1b      	lsrs	r3, r3, #24
 800f512:	b2d9      	uxtb	r1, r3
 800f514:	4b23      	ldr	r3, [pc, #140]	@ (800f5a4 <tx_control+0x1410>)
 800f516:	2288      	movs	r2, #136	@ 0x88
 800f518:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800f51a:	4b24      	ldr	r3, [pc, #144]	@ (800f5ac <tx_control+0x1418>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	0c1b      	lsrs	r3, r3, #16
 800f520:	b2d9      	uxtb	r1, r3
 800f522:	4b20      	ldr	r3, [pc, #128]	@ (800f5a4 <tx_control+0x1410>)
 800f524:	2289      	movs	r2, #137	@ 0x89
 800f526:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800f528:	4b20      	ldr	r3, [pc, #128]	@ (800f5ac <tx_control+0x1418>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	0a1b      	lsrs	r3, r3, #8
 800f52e:	b2d9      	uxtb	r1, r3
 800f530:	4b1c      	ldr	r3, [pc, #112]	@ (800f5a4 <tx_control+0x1410>)
 800f532:	228a      	movs	r2, #138	@ 0x8a
 800f534:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800f536:	4b1d      	ldr	r3, [pc, #116]	@ (800f5ac <tx_control+0x1418>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	b2d9      	uxtb	r1, r3
 800f53c:	4b19      	ldr	r3, [pc, #100]	@ (800f5a4 <tx_control+0x1410>)
 800f53e:	228b      	movs	r2, #139	@ 0x8b
 800f540:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800f542:	4b1b      	ldr	r3, [pc, #108]	@ (800f5b0 <tx_control+0x141c>)
 800f544:	4a17      	ldr	r2, [pc, #92]	@ (800f5a4 <tx_control+0x1410>)
 800f546:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800f548:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b4 <tx_control+0x1420>)
 800f54a:	4a16      	ldr	r2, [pc, #88]	@ (800f5a4 <tx_control+0x1410>)
 800f54c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800f54e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b8 <tx_control+0x1424>)
 800f550:	4a1e      	ldr	r2, [pc, #120]	@ (800f5cc <tx_control+0x1438>)
 800f552:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f554:	4b0f      	ldr	r3, [pc, #60]	@ (800f594 <tx_control+0x1400>)
 800f556:	228c      	movs	r2, #140	@ 0x8c
 800f558:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800f55a:	4b11      	ldr	r3, [pc, #68]	@ (800f5a0 <tx_control+0x140c>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800f560:	4b0f      	ldr	r3, [pc, #60]	@ (800f5a0 <tx_control+0x140c>)
 800f562:	2201      	movs	r2, #1
 800f564:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800f566:	4b16      	ldr	r3, [pc, #88]	@ (800f5c0 <tx_control+0x142c>)
 800f568:	2255      	movs	r2, #85	@ 0x55
 800f56a:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800f56c:	4b15      	ldr	r3, [pc, #84]	@ (800f5c4 <tx_control+0x1430>)
 800f56e:	2200      	movs	r2, #0
 800f570:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800f572:	f000 feb6 	bl	80102e2 <tx_control+0x214e>
 800f576:	46c0      	nop			@ (mov r8, r8)
 800f578:	20001e84 	.word	0x20001e84
 800f57c:	20000ba0 	.word	0x20000ba0
 800f580:	20000c38 	.word	0x20000c38
 800f584:	20000b74 	.word	0x20000b74
 800f588:	20000bdc 	.word	0x20000bdc
 800f58c:	20000b7c 	.word	0x20000b7c
 800f590:	20000b84 	.word	0x20000b84
 800f594:	20001ebc 	.word	0x20001ebc
 800f598:	200000b8 	.word	0x200000b8
 800f59c:	20001e64 	.word	0x20001e64
 800f5a0:	20001ea8 	.word	0x20001ea8
 800f5a4:	20002034 	.word	0x20002034
 800f5a8:	2000203c 	.word	0x2000203c
 800f5ac:	20001ec0 	.word	0x20001ec0
 800f5b0:	20001ea0 	.word	0x20001ea0
 800f5b4:	20001e98 	.word	0x20001e98
 800f5b8:	20001e9c 	.word	0x20001e9c
 800f5bc:	2000204a 	.word	0x2000204a
 800f5c0:	20001ea5 	.word	0x20001ea5
 800f5c4:	20001eb0 	.word	0x20001eb0
 800f5c8:	20000c88 	.word	0x20000c88
 800f5cc:	200020c0 	.word	0x200020c0
				goto 	verifica_version2;		//jreq	verifica_version2
 800f5d0:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[126] == reePlantilla[eeversion2]){
 800f5d2:	4be5      	ldr	r3, [pc, #916]	@ (800f968 <tx_control+0x17d4>)
 800f5d4:	227e      	movs	r2, #126	@ 0x7e
 800f5d6:	5c9a      	ldrb	r2, [r3, r2]
 800f5d8:	4be4      	ldr	r3, [pc, #912]	@ (800f96c <tx_control+0x17d8>)
 800f5da:	217c      	movs	r1, #124	@ 0x7c
 800f5dc:	5c5b      	ldrb	r3, [r3, r1]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d159      	bne.n	800f696 <tx_control+0x1502>
				goto 	verifica_version3;		//jreq	verifica_version3
 800f5e2:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800f5e4:	4be0      	ldr	r3, [pc, #896]	@ (800f968 <tx_control+0x17d4>)
 800f5e6:	789b      	ldrb	r3, [r3, #2]
 800f5e8:	2baa      	cmp	r3, #170	@ 0xaa
 800f5ea:	d156      	bne.n	800f69a <tx_control+0x1506>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800f5ec:	4bde      	ldr	r3, [pc, #888]	@ (800f968 <tx_control+0x17d4>)
 800f5ee:	2243      	movs	r2, #67	@ 0x43
 800f5f0:	5c9b      	ldrb	r3, [r3, r2]
 800f5f2:	2b66      	cmp	r3, #102	@ 0x66
 800f5f4:	d153      	bne.n	800f69e <tx_control+0x150a>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800f5f6:	4bdc      	ldr	r3, [pc, #880]	@ (800f968 <tx_control+0x17d4>)
 800f5f8:	2281      	movs	r2, #129	@ 0x81
 800f5fa:	5c9b      	ldrb	r3, [r3, r2]
 800f5fc:	2bcc      	cmp	r3, #204	@ 0xcc
 800f5fe:	d150      	bne.n	800f6a2 <tx_control+0x150e>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800f600:	4bdb      	ldr	r3, [pc, #876]	@ (800f970 <tx_control+0x17dc>)
 800f602:	2200      	movs	r2, #0
 800f604:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800f606:	4bd8      	ldr	r3, [pc, #864]	@ (800f968 <tx_control+0x17d4>)
 800f608:	647b      	str	r3, [r7, #68]	@ 0x44
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800f60a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f60c:	2182      	movs	r1, #130	@ 0x82
 800f60e:	0018      	movs	r0, r3
 800f610:	f7f7 fcc8 	bl	8006fa4 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800f614:	2300      	movs	r3, #0
 800f616:	607b      	str	r3, [r7, #4]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800f618:	4bd3      	ldr	r3, [pc, #844]	@ (800f968 <tx_control+0x17d4>)
 800f61a:	2282      	movs	r2, #130	@ 0x82
 800f61c:	5c9b      	ldrb	r3, [r3, r2]
 800f61e:	061b      	lsls	r3, r3, #24
 800f620:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800f622:	4bd1      	ldr	r3, [pc, #836]	@ (800f968 <tx_control+0x17d4>)
 800f624:	2283      	movs	r2, #131	@ 0x83
 800f626:	5c9b      	ldrb	r3, [r3, r2]
 800f628:	041b      	lsls	r3, r3, #16
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	18d3      	adds	r3, r2, r3
 800f62e:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800f630:	4bcd      	ldr	r3, [pc, #820]	@ (800f968 <tx_control+0x17d4>)
 800f632:	2284      	movs	r2, #132	@ 0x84
 800f634:	5c9b      	ldrb	r3, [r3, r2]
 800f636:	021b      	lsls	r3, r3, #8
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	18d3      	adds	r3, r2, r3
 800f63c:	607b      	str	r3, [r7, #4]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800f63e:	4bca      	ldr	r3, [pc, #808]	@ (800f968 <tx_control+0x17d4>)
 800f640:	2285      	movs	r2, #133	@ 0x85
 800f642:	5c9b      	ldrb	r3, [r3, r2]
 800f644:	001a      	movs	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	189b      	adds	r3, r3, r2
 800f64a:	607b      	str	r3, [r7, #4]
			if (chksum_32_HW_LW != chksum_to_compare){
 800f64c:	4bc8      	ldr	r3, [pc, #800]	@ (800f970 <tx_control+0x17dc>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	429a      	cmp	r2, r3
 800f654:	d127      	bne.n	800f6a6 <tx_control+0x1512>
write_param:
 800f656:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800f658:	4bc6      	ldr	r3, [pc, #792]	@ (800f974 <tx_control+0x17e0>)
 800f65a:	2255      	movs	r2, #85	@ 0x55
 800f65c:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800f65e:	4bc2      	ldr	r3, [pc, #776]	@ (800f968 <tx_control+0x17d4>)
 800f660:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f664:	3301      	adds	r3, #1
 800f666:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800f668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f66a:	3301      	adds	r3, #1
 800f66c:	647b      	str	r3, [r7, #68]	@ 0x44
			dataPointer =	point_X;	// LDW		dataPointer,X
 800f66e:	4bc2      	ldr	r3, [pc, #776]	@ (800f978 <tx_control+0x17e4>)
 800f670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f672:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800f674:	4bc1      	ldr	r3, [pc, #772]	@ (800f97c <tx_control+0x17e8>)
 800f676:	4ac2      	ldr	r2, [pc, #776]	@ (800f980 <tx_control+0x17ec>)
 800f678:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800f67a:	f7f7 fd19 	bl	80070b0 <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800f67e:	4bc1      	ldr	r3, [pc, #772]	@ (800f984 <tx_control+0x17f0>)
 800f680:	22f1      	movs	r2, #241	@ 0xf1
 800f682:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f684:	4bbf      	ldr	r3, [pc, #764]	@ (800f984 <tx_control+0x17f0>)
 800f686:	223d      	movs	r2, #61	@ 0x3d
 800f688:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800f68a:	4bbf      	ldr	r3, [pc, #764]	@ (800f988 <tx_control+0x17f4>)
 800f68c:	2201      	movs	r2, #1
 800f68e:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800f690:	e010      	b.n	800f6b4 <tx_control+0x1520>
			goto	no_writeParam;				//jp		no_writeParam
 800f692:	46c0      	nop			@ (mov r8, r8)
 800f694:	e008      	b.n	800f6a8 <tx_control+0x1514>
			goto	no_writeParam;				//jp		no_writeParam
 800f696:	46c0      	nop			@ (mov r8, r8)
 800f698:	e006      	b.n	800f6a8 <tx_control+0x1514>
				goto	no_writeParam;			//jrne	no_writeParam
 800f69a:	46c0      	nop			@ (mov r8, r8)
 800f69c:	e004      	b.n	800f6a8 <tx_control+0x1514>
				goto	no_writeParam;			//jrne	no_writeParam
 800f69e:	46c0      	nop			@ (mov r8, r8)
 800f6a0:	e002      	b.n	800f6a8 <tx_control+0x1514>
				goto	no_writeParam;			//jrne	no_writeParam
 800f6a2:	46c0      	nop			@ (mov r8, r8)
 800f6a4:	e000      	b.n	800f6a8 <tx_control+0x1514>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800f6a6:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800f6a8:	4bb6      	ldr	r3, [pc, #728]	@ (800f984 <tx_control+0x17f0>)
 800f6aa:	22f1      	movs	r2, #241	@ 0xf1
 800f6ac:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f6ae:	4bb5      	ldr	r3, [pc, #724]	@ (800f984 <tx_control+0x17f0>)
 800f6b0:	223e      	movs	r2, #62	@ 0x3e
 800f6b2:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800f6b4:	4bb5      	ldr	r3, [pc, #724]	@ (800f98c <tx_control+0x17f8>)
 800f6b6:	4ab3      	ldr	r2, [pc, #716]	@ (800f984 <tx_control+0x17f0>)
 800f6b8:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800f6ba:	4bb5      	ldr	r3, [pc, #724]	@ (800f990 <tx_control+0x17fc>)
 800f6bc:	4ab1      	ldr	r2, [pc, #708]	@ (800f984 <tx_control+0x17f0>)
 800f6be:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800f6c0:	4bb4      	ldr	r3, [pc, #720]	@ (800f994 <tx_control+0x1800>)
 800f6c2:	4ab5      	ldr	r2, [pc, #724]	@ (800f998 <tx_control+0x1804>)
 800f6c4:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800f6c6:	4bb5      	ldr	r3, [pc, #724]	@ (800f99c <tx_control+0x1808>)
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800f6cc:	4bae      	ldr	r3, [pc, #696]	@ (800f988 <tx_control+0x17f4>)
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800f6d2:	4bb3      	ldr	r3, [pc, #716]	@ (800f9a0 <tx_control+0x180c>)
 800f6d4:	2255      	movs	r2, #85	@ 0x55
 800f6d6:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800f6d8:	4bb2      	ldr	r3, [pc, #712]	@ (800f9a4 <tx_control+0x1810>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f6de:	f000 fe00 	bl	80102e2 <tx_control+0x214e>
				goto rx_firmware01;
 800f6e2:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800f6e4:	4bb0      	ldr	r3, [pc, #704]	@ (800f9a8 <tx_control+0x1814>)
 800f6e6:	785b      	ldrb	r3, [r3, #1]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d13c      	bne.n	800f766 <tx_control+0x15d2>
rx_numBloqFirm:
 800f6ec:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800f6ee:	4bad      	ldr	r3, [pc, #692]	@ (800f9a4 <tx_control+0x1810>)
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	2b49      	cmp	r3, #73	@ 0x49
 800f6f4:	d000      	beq.n	800f6f8 <tx_control+0x1564>
 800f6f6:	e1a8      	b.n	800fa4a <tx_control+0x18b6>
				goto rx_numBloqFirm_01;
 800f6f8:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = (RxBuffer_Ble[2] << 8) | RxBuffer_Ble[3] ;
 800f6fa:	4b9b      	ldr	r3, [pc, #620]	@ (800f968 <tx_control+0x17d4>)
 800f6fc:	789b      	ldrb	r3, [r3, #2]
 800f6fe:	b21b      	sxth	r3, r3
 800f700:	021b      	lsls	r3, r3, #8
 800f702:	b21a      	sxth	r2, r3
 800f704:	4b98      	ldr	r3, [pc, #608]	@ (800f968 <tx_control+0x17d4>)
 800f706:	78db      	ldrb	r3, [r3, #3]
 800f708:	b21b      	sxth	r3, r3
 800f70a:	4313      	orrs	r3, r2
 800f70c:	b21b      	sxth	r3, r3
 800f70e:	b29a      	uxth	r2, r3
 800f710:	4ba6      	ldr	r3, [pc, #664]	@ (800f9ac <tx_control+0x1818>)
 800f712:	801a      	strh	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800f714:	4ba6      	ldr	r3, [pc, #664]	@ (800f9b0 <tx_control+0x181c>)
 800f716:	2200      	movs	r2, #0
 800f718:	801a      	strh	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800f71a:	4ba6      	ldr	r3, [pc, #664]	@ (800f9b4 <tx_control+0x1820>)
 800f71c:	22f1      	movs	r2, #241	@ 0xf1
 800f71e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800f720:	4ba4      	ldr	r3, [pc, #656]	@ (800f9b4 <tx_control+0x1820>)
 800f722:	2207      	movs	r2, #7
 800f724:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800f726:	4ba0      	ldr	r3, [pc, #640]	@ (800f9a8 <tx_control+0x1814>)
 800f728:	2201      	movs	r2, #1
 800f72a:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800f72c:	4ba2      	ldr	r3, [pc, #648]	@ (800f9b8 <tx_control+0x1824>)
 800f72e:	2200      	movs	r2, #0
 800f730:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800f732:	4b96      	ldr	r3, [pc, #600]	@ (800f98c <tx_control+0x17f8>)
 800f734:	4a9f      	ldr	r2, [pc, #636]	@ (800f9b4 <tx_control+0x1820>)
 800f736:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f738:	4b95      	ldr	r3, [pc, #596]	@ (800f990 <tx_control+0x17fc>)
 800f73a:	4a9e      	ldr	r2, [pc, #632]	@ (800f9b4 <tx_control+0x1820>)
 800f73c:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800f73e:	4b95      	ldr	r3, [pc, #596]	@ (800f994 <tx_control+0x1800>)
 800f740:	4a9e      	ldr	r2, [pc, #632]	@ (800f9bc <tx_control+0x1828>)
 800f742:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f744:	4b95      	ldr	r3, [pc, #596]	@ (800f99c <tx_control+0x1808>)
 800f746:	2202      	movs	r2, #2
 800f748:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800f74a:	4b8f      	ldr	r3, [pc, #572]	@ (800f988 <tx_control+0x17f4>)
 800f74c:	2201      	movs	r2, #1
 800f74e:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f750:	4b93      	ldr	r3, [pc, #588]	@ (800f9a0 <tx_control+0x180c>)
 800f752:	2255      	movs	r2, #85	@ 0x55
 800f754:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800f756:	4b93      	ldr	r3, [pc, #588]	@ (800f9a4 <tx_control+0x1810>)
 800f758:	2200      	movs	r2, #0
 800f75a:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;
 800f75c:	4b98      	ldr	r3, [pc, #608]	@ (800f9c0 <tx_control+0x182c>)
 800f75e:	2205      	movs	r2, #5
 800f760:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800f762:	f000 fdbe 	bl	80102e2 <tx_control+0x214e>
				goto rxBloqFirm;
 800f766:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800f768:	4b8f      	ldr	r3, [pc, #572]	@ (800f9a8 <tx_control+0x1814>)
 800f76a:	789b      	ldrb	r3, [r3, #2]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d101      	bne.n	800f774 <tx_control+0x15e0>
 800f770:	f000 fdb6 	bl	80102e0 <tx_control+0x214c>
				goto rxBloqFirm_01;
 800f774:	46c0      	nop			@ (mov r8, r8)
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800f776:	4b8c      	ldr	r3, [pc, #560]	@ (800f9a8 <tx_control+0x1814>)
 800f778:	2200      	movs	r2, #0
 800f77a:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800f77c:	4b7c      	ldr	r3, [pc, #496]	@ (800f970 <tx_control+0x17dc>)
 800f77e:	2200      	movs	r2, #0
 800f780:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800f782:	4b90      	ldr	r3, [pc, #576]	@ (800f9c4 <tx_control+0x1830>)
 800f784:	2200      	movs	r2, #0
 800f786:	701a      	strb	r2, [r3, #0]
			cksum_aux = 0;
 800f788:	4b8f      	ldr	r3, [pc, #572]	@ (800f9c8 <tx_control+0x1834>)
 800f78a:	2200      	movs	r2, #0
 800f78c:	601a      	str	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[wreg]); // call	build_chksum;	/ ve calculando el checksum
 800f78e:	4b8d      	ldr	r3, [pc, #564]	@ (800f9c4 <tx_control+0x1830>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	001a      	movs	r2, r3
 800f794:	4b74      	ldr	r3, [pc, #464]	@ (800f968 <tx_control+0x17d4>)
 800f796:	5c9b      	ldrb	r3, [r3, r2]
 800f798:	0018      	movs	r0, r3
 800f79a:	f7f7 fc75 	bl	8007088 <build_chksum>
			wreg++;			// inc		wreg
 800f79e:	4b89      	ldr	r3, [pc, #548]	@ (800f9c4 <tx_control+0x1830>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	b2da      	uxtb	r2, r3
 800f7a6:	4b87      	ldr	r3, [pc, #540]	@ (800f9c4 <tx_control+0x1830>)
 800f7a8:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800f7aa:	4b86      	ldr	r3, [pc, #536]	@ (800f9c4 <tx_control+0x1830>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	b25b      	sxtb	r3, r3
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	db00      	blt.n	800f7b6 <tx_control+0x1622>
				goto load_bloqFirm;
 800f7b4:	e7eb      	b.n	800f78e <tx_control+0x15fa>
			cksum_aux = (RxBuffer_Ble[128] << 24) | (RxBuffer_Ble[129] << 16) |(RxBuffer_Ble[130] << 8) | RxBuffer_Ble[131];
 800f7b6:	4b6c      	ldr	r3, [pc, #432]	@ (800f968 <tx_control+0x17d4>)
 800f7b8:	2280      	movs	r2, #128	@ 0x80
 800f7ba:	5c9b      	ldrb	r3, [r3, r2]
 800f7bc:	061a      	lsls	r2, r3, #24
 800f7be:	4b6a      	ldr	r3, [pc, #424]	@ (800f968 <tx_control+0x17d4>)
 800f7c0:	2181      	movs	r1, #129	@ 0x81
 800f7c2:	5c5b      	ldrb	r3, [r3, r1]
 800f7c4:	041b      	lsls	r3, r3, #16
 800f7c6:	431a      	orrs	r2, r3
 800f7c8:	4b67      	ldr	r3, [pc, #412]	@ (800f968 <tx_control+0x17d4>)
 800f7ca:	2182      	movs	r1, #130	@ 0x82
 800f7cc:	5c5b      	ldrb	r3, [r3, r1]
 800f7ce:	021b      	lsls	r3, r3, #8
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	4a65      	ldr	r2, [pc, #404]	@ (800f968 <tx_control+0x17d4>)
 800f7d4:	2183      	movs	r1, #131	@ 0x83
 800f7d6:	5c52      	ldrb	r2, [r2, r1]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	001a      	movs	r2, r3
 800f7dc:	4b7a      	ldr	r3, [pc, #488]	@ (800f9c8 <tx_control+0x1834>)
 800f7de:	601a      	str	r2, [r3, #0]
			if(cksum_aux != chksum_32_HW_LW){
 800f7e0:	4b79      	ldr	r3, [pc, #484]	@ (800f9c8 <tx_control+0x1834>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	4b62      	ldr	r3, [pc, #392]	@ (800f970 <tx_control+0x17dc>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d145      	bne.n	800f878 <tx_control+0x16e4>
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800f7ec:	4b72      	ldr	r3, [pc, #456]	@ (800f9b8 <tx_control+0x1824>)
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	4b5f      	ldr	r3, [pc, #380]	@ (800f970 <tx_control+0x17dc>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	18d2      	adds	r2, r2, r3
 800f7f6:	4b70      	ldr	r3, [pc, #448]	@ (800f9b8 <tx_control+0x1824>)
 800f7f8:	601a      	str	r2, [r3, #0]
			if(direccion_fw >= 0x803F000)
 800f7fa:	4b74      	ldr	r3, [pc, #464]	@ (800f9cc <tx_control+0x1838>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a74      	ldr	r2, [pc, #464]	@ (800f9d0 <tx_control+0x183c>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d901      	bls.n	800f808 <tx_control+0x1674>
				NVIC_SystemReset();
 800f804:	f7fe fcb4 	bl	800e170 <__NVIC_SystemReset>
			if(contador_bloques_fw == 16)
 800f808:	4b72      	ldr	r3, [pc, #456]	@ (800f9d4 <tx_control+0x1840>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b10      	cmp	r3, #16
 800f80e:	d107      	bne.n	800f820 <tx_control+0x168c>
				borra_pagina_logger(pagina_borrado);
 800f810:	4b71      	ldr	r3, [pc, #452]	@ (800f9d8 <tx_control+0x1844>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	0018      	movs	r0, r3
 800f816:	f001 fea5 	bl	8011564 <borra_pagina_logger>
				contador_bloques_fw = 0;
 800f81a:	4b6e      	ldr	r3, [pc, #440]	@ (800f9d4 <tx_control+0x1840>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	701a      	strb	r2, [r3, #0]
			contador_bloques_fw++;
 800f820:	4b6c      	ldr	r3, [pc, #432]	@ (800f9d4 <tx_control+0x1840>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	3301      	adds	r3, #1
 800f826:	b2da      	uxtb	r2, r3
 800f828:	4b6a      	ldr	r3, [pc, #424]	@ (800f9d4 <tx_control+0x1840>)
 800f82a:	701a      	strb	r2, [r3, #0]
			graba_bloque_fw();
 800f82c:	f001 feca 	bl	80115c4 <graba_bloque_fw>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800f830:	4b5f      	ldr	r3, [pc, #380]	@ (800f9b0 <tx_control+0x181c>)
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	3301      	adds	r3, #1
 800f836:	b29a      	uxth	r2, r3
 800f838:	4b5d      	ldr	r3, [pc, #372]	@ (800f9b0 <tx_control+0x181c>)
 800f83a:	801a      	strh	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800f83c:	4b5c      	ldr	r3, [pc, #368]	@ (800f9b0 <tx_control+0x181c>)
 800f83e:	881a      	ldrh	r2, [r3, #0]
 800f840:	4b5a      	ldr	r3, [pc, #360]	@ (800f9ac <tx_control+0x1818>)
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	429a      	cmp	r2, r3
 800f846:	d10c      	bne.n	800f862 <tx_control+0x16ce>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800f848:	4b57      	ldr	r3, [pc, #348]	@ (800f9a8 <tx_control+0x1814>)
 800f84a:	2201      	movs	r2, #1
 800f84c:	70da      	strb	r2, [r3, #3]
			direccion_fw = 0x8020000;
 800f84e:	4b5f      	ldr	r3, [pc, #380]	@ (800f9cc <tx_control+0x1838>)
 800f850:	4a62      	ldr	r2, [pc, #392]	@ (800f9dc <tx_control+0x1848>)
 800f852:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f854:	4b60      	ldr	r3, [pc, #384]	@ (800f9d8 <tx_control+0x1844>)
 800f856:	2240      	movs	r2, #64	@ 0x40
 800f858:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f85a:	4b5e      	ldr	r3, [pc, #376]	@ (800f9d4 <tx_control+0x1840>)
 800f85c:	2210      	movs	r2, #16
 800f85e:	701a      	strb	r2, [r3, #0]
 800f860:	e000      	b.n	800f864 <tx_control+0x16d0>
				goto rxFirm_noComplete ;
 800f862:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f864:	4b53      	ldr	r3, [pc, #332]	@ (800f9b4 <tx_control+0x1820>)
 800f866:	22f1      	movs	r2, #241	@ 0xf1
 800f868:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f86a:	4b52      	ldr	r3, [pc, #328]	@ (800f9b4 <tx_control+0x1820>)
 800f86c:	223d      	movs	r2, #61	@ 0x3d
 800f86e:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f870:	4b53      	ldr	r3, [pc, #332]	@ (800f9c0 <tx_control+0x182c>)
 800f872:	2205      	movs	r2, #5
 800f874:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800f876:	e023      	b.n	800f8c0 <tx_control+0x172c>
				goto no_writeBloqFirm;
 800f878:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800f87a:	4b4e      	ldr	r3, [pc, #312]	@ (800f9b4 <tx_control+0x1820>)
 800f87c:	22f1      	movs	r2, #241	@ 0xf1
 800f87e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f880:	4b4c      	ldr	r3, [pc, #304]	@ (800f9b4 <tx_control+0x1820>)
 800f882:	223e      	movs	r2, #62	@ 0x3e
 800f884:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f886:	2300      	movs	r3, #0
 800f888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f88a:	e007      	b.n	800f89c <tx_control+0x1708>
				flagsRxFirm[i]=0;
 800f88c:	4a46      	ldr	r2, [pc, #280]	@ (800f9a8 <tx_control+0x1814>)
 800f88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f890:	18d3      	adds	r3, r2, r3
 800f892:	2200      	movs	r2, #0
 800f894:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f898:	3301      	adds	r3, #1
 800f89a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89e:	2b07      	cmp	r3, #7
 800f8a0:	ddf4      	ble.n	800f88c <tx_control+0x16f8>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800f8a2:	4b40      	ldr	r3, [pc, #256]	@ (800f9a4 <tx_control+0x1810>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	701a      	strb	r2, [r3, #0]
			bandera_act_fw_j = 0;
 800f8a8:	4b4d      	ldr	r3, [pc, #308]	@ (800f9e0 <tx_control+0x184c>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	701a      	strb	r2, [r3, #0]
			direccion_fw = 0x8020000;
 800f8ae:	4b47      	ldr	r3, [pc, #284]	@ (800f9cc <tx_control+0x1838>)
 800f8b0:	4a4a      	ldr	r2, [pc, #296]	@ (800f9dc <tx_control+0x1848>)
 800f8b2:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800f8b4:	4b48      	ldr	r3, [pc, #288]	@ (800f9d8 <tx_control+0x1844>)
 800f8b6:	2240      	movs	r2, #64	@ 0x40
 800f8b8:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800f8ba:	4b46      	ldr	r3, [pc, #280]	@ (800f9d4 <tx_control+0x1840>)
 800f8bc:	2210      	movs	r2, #16
 800f8be:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f8c0:	4b32      	ldr	r3, [pc, #200]	@ (800f98c <tx_control+0x17f8>)
 800f8c2:	4a3c      	ldr	r2, [pc, #240]	@ (800f9b4 <tx_control+0x1820>)
 800f8c4:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f8c6:	4b32      	ldr	r3, [pc, #200]	@ (800f990 <tx_control+0x17fc>)
 800f8c8:	4a3a      	ldr	r2, [pc, #232]	@ (800f9b4 <tx_control+0x1820>)
 800f8ca:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f8cc:	4b31      	ldr	r3, [pc, #196]	@ (800f994 <tx_control+0x1800>)
 800f8ce:	4a3b      	ldr	r2, [pc, #236]	@ (800f9bc <tx_control+0x1828>)
 800f8d0:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800f8d2:	4b32      	ldr	r3, [pc, #200]	@ (800f99c <tx_control+0x1808>)
 800f8d4:	2202      	movs	r2, #2
 800f8d6:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800f8d8:	4b2b      	ldr	r3, [pc, #172]	@ (800f988 <tx_control+0x17f4>)
 800f8da:	2201      	movs	r2, #1
 800f8dc:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f8de:	4b30      	ldr	r3, [pc, #192]	@ (800f9a0 <tx_control+0x180c>)
 800f8e0:	2255      	movs	r2, #85	@ 0x55
 800f8e2:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800f8e4:	4b2f      	ldr	r3, [pc, #188]	@ (800f9a4 <tx_control+0x1810>)
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;
 800f8ea:	f000 fcfa 	bl	80102e2 <tx_control+0x214e>
			goto rxChkFirm;				// jp		rxChkFirm;
 800f8ee:	46c0      	nop			@ (mov r8, r8)
			cksum_gral_aux = 0;
 800f8f0:	4b3c      	ldr	r3, [pc, #240]	@ (800f9e4 <tx_control+0x1850>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	601a      	str	r2, [r3, #0]
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800f8f6:	4b2c      	ldr	r3, [pc, #176]	@ (800f9a8 <tx_control+0x1814>)
 800f8f8:	791b      	ldrb	r3, [r3, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d000      	beq.n	800f900 <tx_control+0x176c>
 800f8fe:	e0a7      	b.n	800fa50 <tx_control+0x18bc>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800f900:	4b28      	ldr	r3, [pc, #160]	@ (800f9a4 <tx_control+0x1810>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2b4a      	cmp	r3, #74	@ 0x4a
 800f906:	d000      	beq.n	800f90a <tx_control+0x1776>
 800f908:	e0a5      	b.n	800fa56 <tx_control+0x18c2>
			cksum_gral_aux = (RxBuffer_Ble[2] << 24) | (RxBuffer_Ble[3] << 16) | (RxBuffer_Ble[4] << 8) | RxBuffer_Ble[5];
 800f90a:	4b17      	ldr	r3, [pc, #92]	@ (800f968 <tx_control+0x17d4>)
 800f90c:	789b      	ldrb	r3, [r3, #2]
 800f90e:	061a      	lsls	r2, r3, #24
 800f910:	4b15      	ldr	r3, [pc, #84]	@ (800f968 <tx_control+0x17d4>)
 800f912:	78db      	ldrb	r3, [r3, #3]
 800f914:	041b      	lsls	r3, r3, #16
 800f916:	431a      	orrs	r2, r3
 800f918:	4b13      	ldr	r3, [pc, #76]	@ (800f968 <tx_control+0x17d4>)
 800f91a:	791b      	ldrb	r3, [r3, #4]
 800f91c:	021b      	lsls	r3, r3, #8
 800f91e:	4313      	orrs	r3, r2
 800f920:	4a11      	ldr	r2, [pc, #68]	@ (800f968 <tx_control+0x17d4>)
 800f922:	7952      	ldrb	r2, [r2, #5]
 800f924:	4313      	orrs	r3, r2
 800f926:	001a      	movs	r2, r3
 800f928:	4b2e      	ldr	r3, [pc, #184]	@ (800f9e4 <tx_control+0x1850>)
 800f92a:	601a      	str	r2, [r3, #0]
			if(cksum_gral_aux != chksumFirm_HW_LW){
 800f92c:	4b2d      	ldr	r3, [pc, #180]	@ (800f9e4 <tx_control+0x1850>)
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	4b21      	ldr	r3, [pc, #132]	@ (800f9b8 <tx_control+0x1824>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	429a      	cmp	r2, r3
 800f936:	d10c      	bne.n	800f952 <tx_control+0x17be>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f938:	4b1e      	ldr	r3, [pc, #120]	@ (800f9b4 <tx_control+0x1820>)
 800f93a:	22f1      	movs	r2, #241	@ 0xf1
 800f93c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;
 800f93e:	4b1d      	ldr	r3, [pc, #116]	@ (800f9b4 <tx_control+0x1820>)
 800f940:	223d      	movs	r2, #61	@ 0x3d
 800f942:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800f944:	4b18      	ldr	r3, [pc, #96]	@ (800f9a8 <tx_control+0x1814>)
 800f946:	2201      	movs	r2, #1
 800f948:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800f94a:	4b1d      	ldr	r3, [pc, #116]	@ (800f9c0 <tx_control+0x182c>)
 800f94c:	2205      	movs	r2, #5
 800f94e:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800f950:	e064      	b.n	800fa1c <tx_control+0x1888>
				goto rxFirmErr;
 800f952:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800f954:	4b17      	ldr	r3, [pc, #92]	@ (800f9b4 <tx_control+0x1820>)
 800f956:	22f1      	movs	r2, #241	@ 0xf1
 800f958:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f95a:	4b16      	ldr	r3, [pc, #88]	@ (800f9b4 <tx_control+0x1820>)
 800f95c:	223e      	movs	r2, #62	@ 0x3e
 800f95e:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f960:	2300      	movs	r3, #0
 800f962:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f964:	e048      	b.n	800f9f8 <tx_control+0x1864>
 800f966:	46c0      	nop			@ (mov r8, r8)
 800f968:	20000984 	.word	0x20000984
 800f96c:	20000c88 	.word	0x20000c88
 800f970:	20001ec0 	.word	0x20001ec0
 800f974:	20000e14 	.word	0x20000e14
 800f978:	20000e1c 	.word	0x20000e1c
 800f97c:	20000e18 	.word	0x20000e18
 800f980:	0803f000 	.word	0x0803f000
 800f984:	20001e6c 	.word	0x20001e6c
 800f988:	20001ea8 	.word	0x20001ea8
 800f98c:	20001ea0 	.word	0x20001ea0
 800f990:	20001e98 	.word	0x20001e98
 800f994:	20001e9c 	.word	0x20001e9c
 800f998:	20001e6d 	.word	0x20001e6d
 800f99c:	20001ebc 	.word	0x20001ebc
 800f9a0:	20001ea5 	.word	0x20001ea5
 800f9a4:	20001eb0 	.word	0x20001eb0
 800f9a8:	20001f68 	.word	0x20001f68
 800f9ac:	20001f5c 	.word	0x20001f5c
 800f9b0:	20001f5e 	.word	0x20001f5e
 800f9b4:	20001e40 	.word	0x20001e40
 800f9b8:	20001f60 	.word	0x20001f60
 800f9bc:	20001e41 	.word	0x20001e41
 800f9c0:	20001f72 	.word	0x20001f72
 800f9c4:	20000b53 	.word	0x20000b53
 800f9c8:	20002208 	.word	0x20002208
 800f9cc:	20000274 	.word	0x20000274
 800f9d0:	0803efff 	.word	0x0803efff
 800f9d4:	20000278 	.word	0x20000278
 800f9d8:	20000270 	.word	0x20000270
 800f9dc:	08020000 	.word	0x08020000
 800f9e0:	20002174 	.word	0x20002174
 800f9e4:	2000220c 	.word	0x2000220c
				flagsRxFirm[i]=0;
 800f9e8:	4ada      	ldr	r2, [pc, #872]	@ (800fd54 <tx_control+0x1bc0>)
 800f9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ec:	18d3      	adds	r3, r2, r3
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800f9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9fa:	2b07      	cmp	r3, #7
 800f9fc:	ddf4      	ble.n	800f9e8 <tx_control+0x1854>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800f9fe:	4bd6      	ldr	r3, [pc, #856]	@ (800fd58 <tx_control+0x1bc4>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	701a      	strb	r2, [r3, #0]
			bandera_act_fw_j = 0;
 800fa04:	4bd5      	ldr	r3, [pc, #852]	@ (800fd5c <tx_control+0x1bc8>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	701a      	strb	r2, [r3, #0]
			direccion_fw = 0x8020000;
 800fa0a:	4bd5      	ldr	r3, [pc, #852]	@ (800fd60 <tx_control+0x1bcc>)
 800fa0c:	4ad5      	ldr	r2, [pc, #852]	@ (800fd64 <tx_control+0x1bd0>)
 800fa0e:	601a      	str	r2, [r3, #0]
			pagina_borrado = 64;
 800fa10:	4bd5      	ldr	r3, [pc, #852]	@ (800fd68 <tx_control+0x1bd4>)
 800fa12:	2240      	movs	r2, #64	@ 0x40
 800fa14:	601a      	str	r2, [r3, #0]
			contador_bloques_fw = 16;
 800fa16:	4bd5      	ldr	r3, [pc, #852]	@ (800fd6c <tx_control+0x1bd8>)
 800fa18:	2210      	movs	r2, #16
 800fa1a:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800fa1c:	4bd4      	ldr	r3, [pc, #848]	@ (800fd70 <tx_control+0x1bdc>)
 800fa1e:	4ad5      	ldr	r2, [pc, #852]	@ (800fd74 <tx_control+0x1be0>)
 800fa20:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800fa22:	4bd5      	ldr	r3, [pc, #852]	@ (800fd78 <tx_control+0x1be4>)
 800fa24:	4ad3      	ldr	r2, [pc, #844]	@ (800fd74 <tx_control+0x1be0>)
 800fa26:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800fa28:	4bd4      	ldr	r3, [pc, #848]	@ (800fd7c <tx_control+0x1be8>)
 800fa2a:	4ad5      	ldr	r2, [pc, #852]	@ (800fd80 <tx_control+0x1bec>)
 800fa2c:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800fa2e:	4bd5      	ldr	r3, [pc, #852]	@ (800fd84 <tx_control+0x1bf0>)
 800fa30:	2202      	movs	r2, #2
 800fa32:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800fa34:	4bd4      	ldr	r3, [pc, #848]	@ (800fd88 <tx_control+0x1bf4>)
 800fa36:	2201      	movs	r2, #1
 800fa38:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800fa3a:	4bd4      	ldr	r3, [pc, #848]	@ (800fd8c <tx_control+0x1bf8>)
 800fa3c:	2255      	movs	r2, #85	@ 0x55
 800fa3e:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800fa40:	4bc5      	ldr	r3, [pc, #788]	@ (800fd58 <tx_control+0x1bc4>)
 800fa42:	2200      	movs	r2, #0
 800fa44:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800fa46:	f000 fc4c 	bl	80102e2 <tx_control+0x214e>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800fa4a:	46c0      	nop			@ (mov r8, r8)
 800fa4c:	f000 fc49 	bl	80102e2 <tx_control+0x214e>
				goto end_rx_firmware;
 800fa50:	46c0      	nop			@ (mov r8, r8)
 800fa52:	f000 fc46 	bl	80102e2 <tx_control+0x214e>
					goto end_rx_firmware;
 800fa56:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800fa58:	f000 fc43 	bl	80102e2 <tx_control+0x214e>
				erasePage(i);
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa5e:	0018      	movs	r0, r3
 800fa60:	f7f2 fdda 	bl	8002618 <erasePage>
			for(uint32_t i = 110; i<126; i++){
 800fa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa66:	3301      	adds	r3, #1
 800fa68:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa6c:	2b7d      	cmp	r3, #125	@ 0x7d
 800fa6e:	d9f5      	bls.n	800fa5c <tx_control+0x18c8>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800fa70:	4bc0      	ldr	r3, [pc, #768]	@ (800fd74 <tx_control+0x1be0>)
 800fa72:	22f1      	movs	r2, #241	@ 0xf1
 800fa74:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fa76:	4bbf      	ldr	r3, [pc, #764]	@ (800fd74 <tx_control+0x1be0>)
 800fa78:	223d      	movs	r2, #61	@ 0x3d
 800fa7a:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800fa7c:	4bc4      	ldr	r3, [pc, #784]	@ (800fd90 <tx_control+0x1bfc>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800fa82:	4bc4      	ldr	r3, [pc, #784]	@ (800fd94 <tx_control+0x1c00>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800fa88:	4bc3      	ldr	r3, [pc, #780]	@ (800fd98 <tx_control+0x1c04>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800fa8e:	4bc3      	ldr	r3, [pc, #780]	@ (800fd9c <tx_control+0x1c08>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800fa94:	4bc2      	ldr	r3, [pc, #776]	@ (800fda0 <tx_control+0x1c0c>)
 800fa96:	4ac3      	ldr	r2, [pc, #780]	@ (800fda4 <tx_control+0x1c10>)
 800fa98:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800fa9a:	4bc3      	ldr	r3, [pc, #780]	@ (800fda8 <tx_control+0x1c14>)
 800fa9c:	4ac3      	ldr	r2, [pc, #780]	@ (800fdac <tx_control+0x1c18>)
 800fa9e:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800faa0:	4bbc      	ldr	r3, [pc, #752]	@ (800fd94 <tx_control+0x1c00>)
 800faa2:	781a      	ldrb	r2, [r3, #0]
 800faa4:	4bc2      	ldr	r3, [pc, #776]	@ (800fdb0 <tx_control+0x1c1c>)
 800faa6:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800faa8:	f7f7 f9cc 	bl	8006e44 <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800faac:	4bbc      	ldr	r3, [pc, #752]	@ (800fda0 <tx_control+0x1c0c>)
 800faae:	4ac1      	ldr	r2, [pc, #772]	@ (800fdb4 <tx_control+0x1c20>)
 800fab0:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800fab2:	4bbd      	ldr	r3, [pc, #756]	@ (800fda8 <tx_control+0x1c14>)
 800fab4:	4ac0      	ldr	r2, [pc, #768]	@ (800fdb8 <tx_control+0x1c24>)
 800fab6:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800fab8:	4bb8      	ldr	r3, [pc, #736]	@ (800fd9c <tx_control+0x1c08>)
 800faba:	781a      	ldrb	r2, [r3, #0]
 800fabc:	4bbc      	ldr	r3, [pc, #752]	@ (800fdb0 <tx_control+0x1c1c>)
 800fabe:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800fac0:	f7f7 f9c0 	bl	8006e44 <load_next_buffer>
			for(int i = 0; i<8; i++)
 800fac4:	2300      	movs	r3, #0
 800fac6:	623b      	str	r3, [r7, #32]
 800fac8:	e007      	b.n	800fada <tx_control+0x1946>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800faca:	4abc      	ldr	r2, [pc, #752]	@ (800fdbc <tx_control+0x1c28>)
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	18d3      	adds	r3, r2, r3
 800fad0:	2200      	movs	r2, #0
 800fad2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800fad4:	6a3b      	ldr	r3, [r7, #32]
 800fad6:	3301      	adds	r3, #1
 800fad8:	623b      	str	r3, [r7, #32]
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	2b07      	cmp	r3, #7
 800fade:	ddf4      	ble.n	800faca <tx_control+0x1936>
			goto ok_clean_logger; //jp		ok_clean_logger
 800fae0:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800fae2:	4ba3      	ldr	r3, [pc, #652]	@ (800fd70 <tx_control+0x1bdc>)
 800fae4:	4aa3      	ldr	r2, [pc, #652]	@ (800fd74 <tx_control+0x1be0>)
 800fae6:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800fae8:	4ba3      	ldr	r3, [pc, #652]	@ (800fd78 <tx_control+0x1be4>)
 800faea:	4aa2      	ldr	r2, [pc, #648]	@ (800fd74 <tx_control+0x1be0>)
 800faec:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800faee:	4ba3      	ldr	r3, [pc, #652]	@ (800fd7c <tx_control+0x1be8>)
 800faf0:	4aa3      	ldr	r2, [pc, #652]	@ (800fd80 <tx_control+0x1bec>)
 800faf2:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800faf4:	4ba3      	ldr	r3, [pc, #652]	@ (800fd84 <tx_control+0x1bf0>)
 800faf6:	2202      	movs	r2, #2
 800faf8:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800fafa:	4ba3      	ldr	r3, [pc, #652]	@ (800fd88 <tx_control+0x1bf4>)
 800fafc:	2201      	movs	r2, #1
 800fafe:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fb00:	4ba2      	ldr	r3, [pc, #648]	@ (800fd8c <tx_control+0x1bf8>)
 800fb02:	2255      	movs	r2, #85	@ 0x55
 800fb04:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800fb06:	4b94      	ldr	r3, [pc, #592]	@ (800fd58 <tx_control+0x1bc4>)
 800fb08:	2200      	movs	r2, #0
 800fb0a:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800fb0c:	f000 fbe9 	bl	80102e2 <tx_control+0x214e>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800fb10:	4bab      	ldr	r3, [pc, #684]	@ (800fdc0 <tx_control+0x1c2c>)
 800fb12:	789a      	ldrb	r2, [r3, #2]
 800fb14:	4bab      	ldr	r3, [pc, #684]	@ (800fdc4 <tx_control+0x1c30>)
 800fb16:	701a      	strb	r2, [r3, #0]
			waux = reeEstado1;
 800fb18:	4bab      	ldr	r3, [pc, #684]	@ (800fdc8 <tx_control+0x1c34>)
 800fb1a:	781a      	ldrb	r2, [r3, #0]
 800fb1c:	4bab      	ldr	r3, [pc, #684]	@ (800fdcc <tx_control+0x1c38>)
 800fb1e:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800fb20:	4ba8      	ldr	r3, [pc, #672]	@ (800fdc4 <tx_control+0x1c30>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	001a      	movs	r2, r3
 800fb26:	2301      	movs	r3, #1
 800fb28:	4013      	ands	r3, r2
 800fb2a:	d00d      	beq.n	800fb48 <tx_control+0x19b4>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800fb2c:	4ba7      	ldr	r3, [pc, #668]	@ (800fdcc <tx_control+0x1c38>)
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2201      	movs	r2, #1
 800fb32:	4053      	eors	r3, r2
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	4ba5      	ldr	r3, [pc, #660]	@ (800fdcc <tx_control+0x1c38>)
 800fb38:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800fb3a:	4ba5      	ldr	r3, [pc, #660]	@ (800fdd0 <tx_control+0x1c3c>)
 800fb3c:	22fa      	movs	r2, #250	@ 0xfa
 800fb3e:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800fb40:	4ba4      	ldr	r3, [pc, #656]	@ (800fdd4 <tx_control+0x1c40>)
 800fb42:	2201      	movs	r2, #1
 800fb44:	701a      	strb	r2, [r3, #0]
 800fb46:	e000      	b.n	800fb4a <tx_control+0x19b6>
				goto chk_est1_b1;
 800fb48:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800fb4a:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800fb4c:	4b9d      	ldr	r3, [pc, #628]	@ (800fdc4 <tx_control+0x1c30>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	001a      	movs	r2, r3
 800fb52:	2304      	movs	r3, #4
 800fb54:	4013      	ands	r3, r2
 800fb56:	d027      	beq.n	800fba8 <tx_control+0x1a14>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800fb58:	4b9f      	ldr	r3, [pc, #636]	@ (800fdd8 <tx_control+0x1c44>)
 800fb5a:	799b      	ldrb	r3, [r3, #6]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	4053      	eors	r3, r2
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	1e5a      	subs	r2, r3, #1
 800fb64:	4193      	sbcs	r3, r2
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	4b9b      	ldr	r3, [pc, #620]	@ (800fdd8 <tx_control+0x1c44>)
 800fb6a:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800fb6c:	4b97      	ldr	r3, [pc, #604]	@ (800fdcc <tx_control+0x1c38>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	2204      	movs	r2, #4
 800fb72:	4393      	bics	r3, r2
 800fb74:	b2da      	uxtb	r2, r3
 800fb76:	4b95      	ldr	r3, [pc, #596]	@ (800fdcc <tx_control+0x1c38>)
 800fb78:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800fb7a:	4b97      	ldr	r3, [pc, #604]	@ (800fdd8 <tx_control+0x1c44>)
 800fb7c:	799b      	ldrb	r3, [r3, #6]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	4053      	eors	r3, r2
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d107      	bne.n	800fb98 <tx_control+0x1a04>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800fb88:	4b90      	ldr	r3, [pc, #576]	@ (800fdcc <tx_control+0x1c38>)
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	2204      	movs	r2, #4
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	b2da      	uxtb	r2, r3
 800fb92:	4b8e      	ldr	r3, [pc, #568]	@ (800fdcc <tx_control+0x1c38>)
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	e000      	b.n	800fb9a <tx_control+0x1a06>
				goto chk_est1_b2_01;
 800fb98:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800fb9a:	4b8d      	ldr	r3, [pc, #564]	@ (800fdd0 <tx_control+0x1c3c>)
 800fb9c:	22fa      	movs	r2, #250	@ 0xfa
 800fb9e:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800fba0:	4b8c      	ldr	r3, [pc, #560]	@ (800fdd4 <tx_control+0x1c40>)
 800fba2:	2202      	movs	r2, #2
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	e000      	b.n	800fbaa <tx_control+0x1a16>
				goto chk_est1_b3;
 800fba8:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800fbaa:	4b86      	ldr	r3, [pc, #536]	@ (800fdc4 <tx_control+0x1c30>)
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	001a      	movs	r2, r3
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	d019      	beq.n	800fbea <tx_control+0x1a56>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800fbb6:	4b88      	ldr	r3, [pc, #544]	@ (800fdd8 <tx_control+0x1c44>)
 800fbb8:	789b      	ldrb	r3, [r3, #2]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d106      	bne.n	800fbcc <tx_control+0x1a38>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800fbbe:	4b87      	ldr	r3, [pc, #540]	@ (800fddc <tx_control+0x1c48>)
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800fbc4:	4b86      	ldr	r3, [pc, #536]	@ (800fde0 <tx_control+0x1c4c>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800fbca:	e00f      	b.n	800fbec <tx_control+0x1a58>
				goto chk_est1_b3_01;
 800fbcc:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800fbce:	4b85      	ldr	r3, [pc, #532]	@ (800fde4 <tx_control+0x1c50>)
 800fbd0:	22f0      	movs	r2, #240	@ 0xf0
 800fbd2:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800fbd4:	4b80      	ldr	r3, [pc, #512]	@ (800fdd8 <tx_control+0x1c44>)
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800fbda:	4b7f      	ldr	r3, [pc, #508]	@ (800fdd8 <tx_control+0x1c44>)
 800fbdc:	2200      	movs	r2, #0
 800fbde:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800fbe0:	f7f7 f8e6 	bl	8006db0 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800fbe4:	f7f7 f900 	bl	8006de8 <load_tiempoAhorro2>
 800fbe8:	e000      	b.n	800fbec <tx_control+0x1a58>
				goto chk_est1_b4;
 800fbea:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800fbec:	4b75      	ldr	r3, [pc, #468]	@ (800fdc4 <tx_control+0x1c30>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	001a      	movs	r2, r3
 800fbf2:	2310      	movs	r3, #16
 800fbf4:	4013      	ands	r3, r2
 800fbf6:	d003      	beq.n	800fc00 <tx_control+0x1a6c>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800fbf8:	4b7b      	ldr	r3, [pc, #492]	@ (800fde8 <tx_control+0x1c54>)
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	711a      	strb	r2, [r3, #4]
 800fbfe:	e000      	b.n	800fc02 <tx_control+0x1a6e>
				goto chk_est1_b5;
 800fc00:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800fc02:	4b70      	ldr	r3, [pc, #448]	@ (800fdc4 <tx_control+0x1c30>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	001a      	movs	r2, r3
 800fc08:	2320      	movs	r3, #32
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	d002      	beq.n	800fc14 <tx_control+0x1a80>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800fc0e:	f7f7 f9ed 	bl	8006fec <ld_alarmDelay>
 800fc12:	e000      	b.n	800fc16 <tx_control+0x1a82>
				goto chk_est1_b6;
 800fc14:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState(Plantilla[logicos2],funReleDesh)){
 800fc16:	4b75      	ldr	r3, [pc, #468]	@ (800fdec <tx_control+0x1c58>)
 800fc18:	225b      	movs	r2, #91	@ 0x5b
 800fc1a:	5c9b      	ldrb	r3, [r3, r2]
 800fc1c:	001a      	movs	r2, r3
 800fc1e:	2308      	movs	r3, #8
 800fc20:	4013      	ands	r3, r2
 800fc22:	d113      	bne.n	800fc4c <tx_control+0x1ab8>
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800fc24:	4b67      	ldr	r3, [pc, #412]	@ (800fdc4 <tx_control+0x1c30>)
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	001a      	movs	r2, r3
 800fc2a:	2340      	movs	r3, #64	@ 0x40
 800fc2c:	4013      	ands	r3, r2
 800fc2e:	d00f      	beq.n	800fc50 <tx_control+0x1abc>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800fc30:	4b66      	ldr	r3, [pc, #408]	@ (800fdcc <tx_control+0x1c38>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	2240      	movs	r2, #64	@ 0x40
 800fc36:	4053      	eors	r3, r2
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	4b64      	ldr	r3, [pc, #400]	@ (800fdcc <tx_control+0x1c38>)
 800fc3c:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800fc3e:	4b64      	ldr	r3, [pc, #400]	@ (800fdd0 <tx_control+0x1c3c>)
 800fc40:	22fa      	movs	r2, #250	@ 0xfa
 800fc42:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800fc44:	4b63      	ldr	r3, [pc, #396]	@ (800fdd4 <tx_control+0x1c40>)
 800fc46:	2203      	movs	r2, #3
 800fc48:	701a      	strb	r2, [r3, #0]
 800fc4a:	e002      	b.n	800fc52 <tx_control+0x1abe>
				goto deshTypeAct_05;
 800fc4c:	46c0      	nop			@ (mov r8, r8)
 800fc4e:	e000      	b.n	800fc52 <tx_control+0x1abe>
				goto chk_est1_b7;
 800fc50:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800fc52:	4b5e      	ldr	r3, [pc, #376]	@ (800fdcc <tx_control+0x1c38>)
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	001a      	movs	r2, r3
 800fc58:	4b65      	ldr	r3, [pc, #404]	@ (800fdf0 <tx_control+0x1c5c>)
 800fc5a:	0019      	movs	r1, r3
 800fc5c:	0010      	movs	r0, r2
 800fc5e:	f7f7 fb47 	bl	80072f0 <wreeprom>
			reeEstado1 = waux;
 800fc62:	4b5a      	ldr	r3, [pc, #360]	@ (800fdcc <tx_control+0x1c38>)
 800fc64:	781a      	ldrb	r2, [r3, #0]
 800fc66:	4b58      	ldr	r3, [pc, #352]	@ (800fdc8 <tx_control+0x1c34>)
 800fc68:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fc6a:	4b42      	ldr	r3, [pc, #264]	@ (800fd74 <tx_control+0x1be0>)
 800fc6c:	22f1      	movs	r2, #241	@ 0xf1
 800fc6e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fc70:	4b40      	ldr	r3, [pc, #256]	@ (800fd74 <tx_control+0x1be0>)
 800fc72:	223d      	movs	r2, #61	@ 0x3d
 800fc74:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800fc76:	e005      	b.n	800fc84 <tx_control+0x1af0>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800fc78:	4b3e      	ldr	r3, [pc, #248]	@ (800fd74 <tx_control+0x1be0>)
 800fc7a:	22f1      	movs	r2, #241	@ 0xf1
 800fc7c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800fc7e:	4b3d      	ldr	r3, [pc, #244]	@ (800fd74 <tx_control+0x1be0>)
 800fc80:	223d      	movs	r2, #61	@ 0x3d
 800fc82:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800fc84:	4b3a      	ldr	r3, [pc, #232]	@ (800fd70 <tx_control+0x1bdc>)
 800fc86:	4a3b      	ldr	r2, [pc, #236]	@ (800fd74 <tx_control+0x1be0>)
 800fc88:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800fc8a:	4b3b      	ldr	r3, [pc, #236]	@ (800fd78 <tx_control+0x1be4>)
 800fc8c:	4a39      	ldr	r2, [pc, #228]	@ (800fd74 <tx_control+0x1be0>)
 800fc8e:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800fc90:	4b3a      	ldr	r3, [pc, #232]	@ (800fd7c <tx_control+0x1be8>)
 800fc92:	4a3b      	ldr	r2, [pc, #236]	@ (800fd80 <tx_control+0x1bec>)
 800fc94:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800fc96:	4b3b      	ldr	r3, [pc, #236]	@ (800fd84 <tx_control+0x1bf0>)
 800fc98:	2202      	movs	r2, #2
 800fc9a:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800fc9c:	4b3a      	ldr	r3, [pc, #232]	@ (800fd88 <tx_control+0x1bf4>)
 800fc9e:	2201      	movs	r2, #1
 800fca0:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fca2:	4b3a      	ldr	r3, [pc, #232]	@ (800fd8c <tx_control+0x1bf8>)
 800fca4:	2255      	movs	r2, #85	@ 0x55
 800fca6:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800fca8:	4b2b      	ldr	r3, [pc, #172]	@ (800fd58 <tx_control+0x1bc4>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800fcae:	e318      	b.n	80102e2 <tx_control+0x214e>
			estado1[k] = ((estado1_Aux>>k) & 0x1);
 800fcb0:	1cfb      	adds	r3, r7, #3
 800fcb2:	781a      	ldrb	r2, [r3, #0]
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	411a      	asrs	r2, r3
 800fcb8:	0013      	movs	r3, r2
 800fcba:	2201      	movs	r2, #1
 800fcbc:	4013      	ands	r3, r2
 800fcbe:	1e5a      	subs	r2, r3, #1
 800fcc0:	4193      	sbcs	r3, r2
 800fcc2:	b2d9      	uxtb	r1, r3
 800fcc4:	4a48      	ldr	r2, [pc, #288]	@ (800fde8 <tx_control+0x1c54>)
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	18d3      	adds	r3, r2, r3
 800fcca:	1c0a      	adds	r2, r1, #0
 800fccc:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	61fb      	str	r3, [r7, #28]
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	2b07      	cmp	r3, #7
 800fcd8:	ddea      	ble.n	800fcb0 <tx_control+0x1b1c>
estado1_b1:
 800fcda:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800fcdc:	4b42      	ldr	r3, [pc, #264]	@ (800fde8 <tx_control+0x1c54>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800fce2:	4b44      	ldr	r3, [pc, #272]	@ (800fdf4 <tx_control+0x1c60>)
 800fce4:	78db      	ldrb	r3, [r3, #3]
 800fce6:	2201      	movs	r2, #1
 800fce8:	4053      	eors	r3, r2
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d103      	bne.n	800fcf8 <tx_control+0x1b64>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800fcf0:	4b3d      	ldr	r3, [pc, #244]	@ (800fde8 <tx_control+0x1c54>)
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	705a      	strb	r2, [r3, #1]
 800fcf6:	e000      	b.n	800fcfa <tx_control+0x1b66>
			goto estado1_b2;
 800fcf8:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800fcfa:	4b3b      	ldr	r3, [pc, #236]	@ (800fde8 <tx_control+0x1c54>)
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800fd00:	4b3d      	ldr	r3, [pc, #244]	@ (800fdf8 <tx_control+0x1c64>)
 800fd02:	789b      	ldrb	r3, [r3, #2]
 800fd04:	2201      	movs	r2, #1
 800fd06:	4053      	eors	r3, r2
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d103      	bne.n	800fd16 <tx_control+0x1b82>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800fd0e:	4b36      	ldr	r3, [pc, #216]	@ (800fde8 <tx_control+0x1c54>)
 800fd10:	2201      	movs	r2, #1
 800fd12:	709a      	strb	r2, [r3, #2]
 800fd14:	e000      	b.n	800fd18 <tx_control+0x1b84>
			goto estado1_b3;
 800fd16:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800fd18:	4b33      	ldr	r3, [pc, #204]	@ (800fde8 <tx_control+0x1c54>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800fd1e:	4b2e      	ldr	r3, [pc, #184]	@ (800fdd8 <tx_control+0x1c44>)
 800fd20:	789b      	ldrb	r3, [r3, #2]
 800fd22:	2201      	movs	r2, #1
 800fd24:	4053      	eors	r3, r2
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d103      	bne.n	800fd34 <tx_control+0x1ba0>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800fd2c:	4b2e      	ldr	r3, [pc, #184]	@ (800fde8 <tx_control+0x1c54>)
 800fd2e:	2201      	movs	r2, #1
 800fd30:	70da      	strb	r2, [r3, #3]
 800fd32:	e000      	b.n	800fd36 <tx_control+0x1ba2>
			goto estado1_b4;
 800fd34:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800fd36:	4b2c      	ldr	r3, [pc, #176]	@ (800fde8 <tx_control+0x1c54>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800fd3c:	4b2f      	ldr	r3, [pc, #188]	@ (800fdfc <tx_control+0x1c68>)
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	2201      	movs	r2, #1
 800fd42:	4053      	eors	r3, r2
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d15a      	bne.n	800fe00 <tx_control+0x1c6c>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800fd4a:	4b27      	ldr	r3, [pc, #156]	@ (800fde8 <tx_control+0x1c54>)
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	715a      	strb	r2, [r3, #5]
 800fd50:	e057      	b.n	800fe02 <tx_control+0x1c6e>
 800fd52:	46c0      	nop			@ (mov r8, r8)
 800fd54:	20001f68 	.word	0x20001f68
 800fd58:	20001eb0 	.word	0x20001eb0
 800fd5c:	20002174 	.word	0x20002174
 800fd60:	20000274 	.word	0x20000274
 800fd64:	08020000 	.word	0x08020000
 800fd68:	20000270 	.word	0x20000270
 800fd6c:	20000278 	.word	0x20000278
 800fd70:	20001ea0 	.word	0x20001ea0
 800fd74:	20001e40 	.word	0x20001e40
 800fd78:	20001e98 	.word	0x20001e98
 800fd7c:	20001e9c 	.word	0x20001e9c
 800fd80:	20001e41 	.word	0x20001e41
 800fd84:	20001ebc 	.word	0x20001ebc
 800fd88:	20001ea8 	.word	0x20001ea8
 800fd8c:	20001ea5 	.word	0x20001ea5
 800fd90:	20000e34 	.word	0x20000e34
 800fd94:	20000e35 	.word	0x20000e35
 800fd98:	20000e36 	.word	0x20000e36
 800fd9c:	20000e37 	.word	0x20000e37
 800fda0:	20000e2c 	.word	0x20000e2c
 800fda4:	20000d14 	.word	0x20000d14
 800fda8:	20000e28 	.word	0x20000e28
 800fdac:	0803c000 	.word	0x0803c000
 800fdb0:	20000e22 	.word	0x20000e22
 800fdb4:	20000d94 	.word	0x20000d94
 800fdb8:	08037000 	.word	0x08037000
 800fdbc:	20001f54 	.word	0x20001f54
 800fdc0:	20000984 	.word	0x20000984
 800fdc4:	20000b53 	.word	0x20000b53
 800fdc8:	200001ba 	.word	0x200001ba
 800fdcc:	20000b52 	.word	0x20000b52
 800fdd0:	200020f0 	.word	0x200020f0
 800fdd4:	200020f1 	.word	0x200020f1
 800fdd8:	20000c38 	.word	0x20000c38
 800fddc:	20000c2c 	.word	0x20000c2c
 800fde0:	20000c2e 	.word	0x20000c2e
 800fde4:	20000bbe 	.word	0x20000bbe
 800fde8:	200020d0 	.word	0x200020d0
 800fdec:	200000b8 	.word	0x200000b8
 800fdf0:	0803f803 	.word	0x0803f803
 800fdf4:	20000b74 	.word	0x20000b74
 800fdf8:	20000ba0 	.word	0x20000ba0
 800fdfc:	20002024 	.word	0x20002024
			goto estado1_b6;
 800fe00:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800fe02:	4bf6      	ldr	r3, [pc, #984]	@ (80101dc <tx_control+0x2048>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800fe08:	4bf5      	ldr	r3, [pc, #980]	@ (80101e0 <tx_control+0x204c>)
 800fe0a:	785b      	ldrb	r3, [r3, #1]
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	4053      	eors	r3, r2
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d103      	bne.n	800fe1e <tx_control+0x1c8a>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800fe16:	4bf1      	ldr	r3, [pc, #964]	@ (80101dc <tx_control+0x2048>)
 800fe18:	2201      	movs	r2, #1
 800fe1a:	719a      	strb	r2, [r3, #6]
 800fe1c:	e000      	b.n	800fe20 <tx_control+0x1c8c>
			goto estado1_b7;
 800fe1e:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800fe20:	4bf0      	ldr	r3, [pc, #960]	@ (80101e4 <tx_control+0x2050>)
 800fe22:	2204      	movs	r2, #4
 800fe24:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800fe26:	4bf0      	ldr	r3, [pc, #960]	@ (80101e8 <tx_control+0x2054>)
 800fe28:	227b      	movs	r2, #123	@ 0x7b
 800fe2a:	5c9a      	ldrb	r2, [r3, r2]
 800fe2c:	4bef      	ldr	r3, [pc, #956]	@ (80101ec <tx_control+0x2058>)
 800fe2e:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800fe30:	4bed      	ldr	r3, [pc, #948]	@ (80101e8 <tx_control+0x2054>)
 800fe32:	227c      	movs	r2, #124	@ 0x7c
 800fe34:	5c9a      	ldrb	r2, [r3, r2]
 800fe36:	4bed      	ldr	r3, [pc, #948]	@ (80101ec <tx_control+0x2058>)
 800fe38:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800fe3a:	4bec      	ldr	r3, [pc, #944]	@ (80101ec <tx_control+0x2058>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800fe40:	4bea      	ldr	r3, [pc, #936]	@ (80101ec <tx_control+0x2058>)
 800fe42:	2200      	movs	r2, #0
 800fe44:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800fe46:	4be9      	ldr	r3, [pc, #932]	@ (80101ec <tx_control+0x2058>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800fe4c:	4be7      	ldr	r3, [pc, #924]	@ (80101ec <tx_control+0x2058>)
 800fe4e:	2201      	movs	r2, #1
 800fe50:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800fe52:	4be6      	ldr	r3, [pc, #920]	@ (80101ec <tx_control+0x2058>)
 800fe54:	2205      	movs	r2, #5
 800fe56:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800fe58:	4be2      	ldr	r3, [pc, #904]	@ (80101e4 <tx_control+0x2050>)
 800fe5a:	781a      	ldrb	r2, [r3, #0]
 800fe5c:	4be3      	ldr	r3, [pc, #908]	@ (80101ec <tx_control+0x2058>)
 800fe5e:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800fe60:	4be3      	ldr	r3, [pc, #908]	@ (80101f0 <tx_control+0x205c>)
 800fe62:	2201      	movs	r2, #1
 800fe64:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800fe66:	4be3      	ldr	r3, [pc, #908]	@ (80101f4 <tx_control+0x2060>)
 800fe68:	2208      	movs	r2, #8
 800fe6a:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800fe6c:	4ae2      	ldr	r2, [pc, #904]	@ (80101f8 <tx_control+0x2064>)
 800fe6e:	4bdf      	ldr	r3, [pc, #892]	@ (80101ec <tx_control+0x2058>)
 800fe70:	0011      	movs	r1, r2
 800fe72:	0018      	movs	r0, r3
 800fe74:	f7f7 f8e4 	bl	8007040 <copyVector>
		bufferTxControl[8] = 0;
 800fe78:	4bdf      	ldr	r3, [pc, #892]	@ (80101f8 <tx_control+0x2064>)
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800fe7e:	4bde      	ldr	r3, [pc, #888]	@ (80101f8 <tx_control+0x2064>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800fe84:	4bdc      	ldr	r3, [pc, #880]	@ (80101f8 <tx_control+0x2064>)
 800fe86:	2200      	movs	r2, #0
 800fe88:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800fe8a:	4bdb      	ldr	r3, [pc, #876]	@ (80101f8 <tx_control+0x2064>)
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800fe90:	2300      	movs	r3, #0
 800fe92:	61bb      	str	r3, [r7, #24]
 800fe94:	e03e      	b.n	800ff14 <tx_control+0x1d80>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800fe96:	4bd8      	ldr	r3, [pc, #864]	@ (80101f8 <tx_control+0x2064>)
 800fe98:	7a1a      	ldrb	r2, [r3, #8]
 800fe9a:	49d0      	ldr	r1, [pc, #832]	@ (80101dc <tx_control+0x2048>)
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	18cb      	adds	r3, r1, r3
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	0019      	movs	r1, r3
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	4099      	lsls	r1, r3
 800fea8:	000b      	movs	r3, r1
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	4313      	orrs	r3, r2
 800feae:	b2da      	uxtb	r2, r3
 800feb0:	4bd1      	ldr	r3, [pc, #836]	@ (80101f8 <tx_control+0x2064>)
 800feb2:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800feb4:	4bd0      	ldr	r3, [pc, #832]	@ (80101f8 <tx_control+0x2064>)
 800feb6:	7a5a      	ldrb	r2, [r3, #9]
 800feb8:	49d0      	ldr	r1, [pc, #832]	@ (80101fc <tx_control+0x2068>)
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	18cb      	adds	r3, r1, r3
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	0019      	movs	r1, r3
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	4099      	lsls	r1, r3
 800fec6:	000b      	movs	r3, r1
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	4313      	orrs	r3, r2
 800fecc:	b2da      	uxtb	r2, r3
 800fece:	4bca      	ldr	r3, [pc, #808]	@ (80101f8 <tx_control+0x2064>)
 800fed0:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800fed2:	4bc9      	ldr	r3, [pc, #804]	@ (80101f8 <tx_control+0x2064>)
 800fed4:	7a9a      	ldrb	r2, [r3, #10]
 800fed6:	49ca      	ldr	r1, [pc, #808]	@ (8010200 <tx_control+0x206c>)
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	18cb      	adds	r3, r1, r3
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	0019      	movs	r1, r3
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	4099      	lsls	r1, r3
 800fee4:	000b      	movs	r3, r1
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	4313      	orrs	r3, r2
 800feea:	b2da      	uxtb	r2, r3
 800feec:	4bc2      	ldr	r3, [pc, #776]	@ (80101f8 <tx_control+0x2064>)
 800feee:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800fef0:	4bc1      	ldr	r3, [pc, #772]	@ (80101f8 <tx_control+0x2064>)
 800fef2:	7ada      	ldrb	r2, [r3, #11]
 800fef4:	49c3      	ldr	r1, [pc, #780]	@ (8010204 <tx_control+0x2070>)
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	18cb      	adds	r3, r1, r3
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	0019      	movs	r1, r3
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	4099      	lsls	r1, r3
 800ff02:	000b      	movs	r3, r1
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	4313      	orrs	r3, r2
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	4bbb      	ldr	r3, [pc, #748]	@ (80101f8 <tx_control+0x2064>)
 800ff0c:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	3301      	adds	r3, #1
 800ff12:	61bb      	str	r3, [r7, #24]
 800ff14:	69bb      	ldr	r3, [r7, #24]
 800ff16:	2b07      	cmp	r3, #7
 800ff18:	ddbd      	ble.n	800fe96 <tx_control+0x1d02>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ff1a:	4bbb      	ldr	r3, [pc, #748]	@ (8010208 <tx_control+0x2074>)
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800ff20:	4bb4      	ldr	r3, [pc, #720]	@ (80101f4 <tx_control+0x2060>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800ff26:	4bb9      	ldr	r3, [pc, #740]	@ (801020c <tx_control+0x2078>)
 800ff28:	220c      	movs	r2, #12
 800ff2a:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800ff2c:	4bb7      	ldr	r3, [pc, #732]	@ (801020c <tx_control+0x2078>)
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	001a      	movs	r2, r3
 800ff32:	4bb1      	ldr	r3, [pc, #708]	@ (80101f8 <tx_control+0x2064>)
 800ff34:	0011      	movs	r1, r2
 800ff36:	0018      	movs	r0, r3
 800ff38:	f7f7 f834 	bl	8006fa4 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800ff3c:	4bb2      	ldr	r3, [pc, #712]	@ (8010208 <tx_control+0x2074>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	0e1b      	lsrs	r3, r3, #24
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	4bac      	ldr	r3, [pc, #688]	@ (80101f8 <tx_control+0x2064>)
 800ff46:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800ff48:	4baf      	ldr	r3, [pc, #700]	@ (8010208 <tx_control+0x2074>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	0c1b      	lsrs	r3, r3, #16
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	4ba9      	ldr	r3, [pc, #676]	@ (80101f8 <tx_control+0x2064>)
 800ff52:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800ff54:	4bac      	ldr	r3, [pc, #688]	@ (8010208 <tx_control+0x2074>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	0a1b      	lsrs	r3, r3, #8
 800ff5a:	b2da      	uxtb	r2, r3
 800ff5c:	4ba6      	ldr	r3, [pc, #664]	@ (80101f8 <tx_control+0x2064>)
 800ff5e:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800ff60:	4ba9      	ldr	r3, [pc, #676]	@ (8010208 <tx_control+0x2074>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	b2da      	uxtb	r2, r3
 800ff66:	4ba4      	ldr	r3, [pc, #656]	@ (80101f8 <tx_control+0x2064>)
 800ff68:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800ff6a:	4ba9      	ldr	r3, [pc, #676]	@ (8010210 <tx_control+0x207c>)
 800ff6c:	4aa2      	ldr	r2, [pc, #648]	@ (80101f8 <tx_control+0x2064>)
 800ff6e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800ff70:	4ba8      	ldr	r3, [pc, #672]	@ (8010214 <tx_control+0x2080>)
 800ff72:	4aa1      	ldr	r2, [pc, #644]	@ (80101f8 <tx_control+0x2064>)
 800ff74:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800ff76:	4ba8      	ldr	r3, [pc, #672]	@ (8010218 <tx_control+0x2084>)
 800ff78:	4aa8      	ldr	r2, [pc, #672]	@ (801021c <tx_control+0x2088>)
 800ff7a:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800ff7c:	4b99      	ldr	r3, [pc, #612]	@ (80101e4 <tx_control+0x2050>)
 800ff7e:	2210      	movs	r2, #16
 800ff80:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800ff82:	4b9b      	ldr	r3, [pc, #620]	@ (80101f0 <tx_control+0x205c>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800ff88:	4b99      	ldr	r3, [pc, #612]	@ (80101f0 <tx_control+0x205c>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ff8e:	4ba4      	ldr	r3, [pc, #656]	@ (8010220 <tx_control+0x208c>)
 800ff90:	2255      	movs	r2, #85	@ 0x55
 800ff92:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800ff94:	4ba3      	ldr	r3, [pc, #652]	@ (8010224 <tx_control+0x2090>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800ff9a:	e1a2      	b.n	80102e2 <tx_control+0x214e>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800ff9c:	4ba2      	ldr	r3, [pc, #648]	@ (8010228 <tx_control+0x2094>)
 800ff9e:	22f1      	movs	r2, #241	@ 0xf1
 800ffa0:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800ffa2:	4ba1      	ldr	r3, [pc, #644]	@ (8010228 <tx_control+0x2094>)
 800ffa4:	223d      	movs	r2, #61	@ 0x3d
 800ffa6:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800ffa8:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800ffaa:	4b99      	ldr	r3, [pc, #612]	@ (8010210 <tx_control+0x207c>)
 800ffac:	4a9e      	ldr	r2, [pc, #632]	@ (8010228 <tx_control+0x2094>)
 800ffae:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800ffb0:	4b98      	ldr	r3, [pc, #608]	@ (8010214 <tx_control+0x2080>)
 800ffb2:	4a9d      	ldr	r2, [pc, #628]	@ (8010228 <tx_control+0x2094>)
 800ffb4:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800ffb6:	4b98      	ldr	r3, [pc, #608]	@ (8010218 <tx_control+0x2084>)
 800ffb8:	4a9c      	ldr	r2, [pc, #624]	@ (801022c <tx_control+0x2098>)
 800ffba:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800ffbc:	4b89      	ldr	r3, [pc, #548]	@ (80101e4 <tx_control+0x2050>)
 800ffbe:	2202      	movs	r2, #2
 800ffc0:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800ffc2:	4b8b      	ldr	r3, [pc, #556]	@ (80101f0 <tx_control+0x205c>)
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ffc8:	4b95      	ldr	r3, [pc, #596]	@ (8010220 <tx_control+0x208c>)
 800ffca:	2255      	movs	r2, #85	@ 0x55
 800ffcc:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800ffce:	4b95      	ldr	r3, [pc, #596]	@ (8010224 <tx_control+0x2090>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800ffd4:	e185      	b.n	80102e2 <tx_control+0x214e>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800ffd6:	4b96      	ldr	r3, [pc, #600]	@ (8010230 <tx_control+0x209c>)
 800ffd8:	789b      	ldrb	r3, [r3, #2]
 800ffda:	001a      	movs	r2, r3
 800ffdc:	4b95      	ldr	r3, [pc, #596]	@ (8010234 <tx_control+0x20a0>)
 800ffde:	0019      	movs	r1, r3
 800ffe0:	0010      	movs	r0, r2
 800ffe2:	f7f7 f985 	bl	80072f0 <wreeprom>
			reeLat1 = RxBuffer_Ble[2];
 800ffe6:	4b92      	ldr	r3, [pc, #584]	@ (8010230 <tx_control+0x209c>)
 800ffe8:	789a      	ldrb	r2, [r3, #2]
 800ffea:	4b93      	ldr	r3, [pc, #588]	@ (8010238 <tx_control+0x20a4>)
 800ffec:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800ffee:	4b90      	ldr	r3, [pc, #576]	@ (8010230 <tx_control+0x209c>)
 800fff0:	78db      	ldrb	r3, [r3, #3]
 800fff2:	001a      	movs	r2, r3
 800fff4:	4b91      	ldr	r3, [pc, #580]	@ (801023c <tx_control+0x20a8>)
 800fff6:	0019      	movs	r1, r3
 800fff8:	0010      	movs	r0, r2
 800fffa:	f7f7 f979 	bl	80072f0 <wreeprom>
			reeLat2 = RxBuffer_Ble[3];
 800fffe:	4b8c      	ldr	r3, [pc, #560]	@ (8010230 <tx_control+0x209c>)
 8010000:	78da      	ldrb	r2, [r3, #3]
 8010002:	4b8f      	ldr	r3, [pc, #572]	@ (8010240 <tx_control+0x20ac>)
 8010004:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 8010006:	4b8a      	ldr	r3, [pc, #552]	@ (8010230 <tx_control+0x209c>)
 8010008:	791b      	ldrb	r3, [r3, #4]
 801000a:	001a      	movs	r2, r3
 801000c:	4b8d      	ldr	r3, [pc, #564]	@ (8010244 <tx_control+0x20b0>)
 801000e:	0019      	movs	r1, r3
 8010010:	0010      	movs	r0, r2
 8010012:	f7f7 f96d 	bl	80072f0 <wreeprom>
			reeLat3 = RxBuffer_Ble[4];
 8010016:	4b86      	ldr	r3, [pc, #536]	@ (8010230 <tx_control+0x209c>)
 8010018:	791a      	ldrb	r2, [r3, #4]
 801001a:	4b8b      	ldr	r3, [pc, #556]	@ (8010248 <tx_control+0x20b4>)
 801001c:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 801001e:	4b84      	ldr	r3, [pc, #528]	@ (8010230 <tx_control+0x209c>)
 8010020:	795b      	ldrb	r3, [r3, #5]
 8010022:	001a      	movs	r2, r3
 8010024:	4b89      	ldr	r3, [pc, #548]	@ (801024c <tx_control+0x20b8>)
 8010026:	0019      	movs	r1, r3
 8010028:	0010      	movs	r0, r2
 801002a:	f7f7 f961 	bl	80072f0 <wreeprom>
			reeLat4 = RxBuffer_Ble[5];
 801002e:	4b80      	ldr	r3, [pc, #512]	@ (8010230 <tx_control+0x209c>)
 8010030:	795a      	ldrb	r2, [r3, #5]
 8010032:	4b87      	ldr	r3, [pc, #540]	@ (8010250 <tx_control+0x20bc>)
 8010034:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 8010036:	4b7e      	ldr	r3, [pc, #504]	@ (8010230 <tx_control+0x209c>)
 8010038:	799b      	ldrb	r3, [r3, #6]
 801003a:	001a      	movs	r2, r3
 801003c:	4b85      	ldr	r3, [pc, #532]	@ (8010254 <tx_control+0x20c0>)
 801003e:	0019      	movs	r1, r3
 8010040:	0010      	movs	r0, r2
 8010042:	f7f7 f955 	bl	80072f0 <wreeprom>
			reeLong1 = RxBuffer_Ble[6];
 8010046:	4b7a      	ldr	r3, [pc, #488]	@ (8010230 <tx_control+0x209c>)
 8010048:	799a      	ldrb	r2, [r3, #6]
 801004a:	4b83      	ldr	r3, [pc, #524]	@ (8010258 <tx_control+0x20c4>)
 801004c:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 801004e:	4b78      	ldr	r3, [pc, #480]	@ (8010230 <tx_control+0x209c>)
 8010050:	79db      	ldrb	r3, [r3, #7]
 8010052:	001a      	movs	r2, r3
 8010054:	4b81      	ldr	r3, [pc, #516]	@ (801025c <tx_control+0x20c8>)
 8010056:	0019      	movs	r1, r3
 8010058:	0010      	movs	r0, r2
 801005a:	f7f7 f949 	bl	80072f0 <wreeprom>
			reeLong2 = RxBuffer_Ble[7];
 801005e:	4b74      	ldr	r3, [pc, #464]	@ (8010230 <tx_control+0x209c>)
 8010060:	79da      	ldrb	r2, [r3, #7]
 8010062:	4b7f      	ldr	r3, [pc, #508]	@ (8010260 <tx_control+0x20cc>)
 8010064:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 8010066:	4b72      	ldr	r3, [pc, #456]	@ (8010230 <tx_control+0x209c>)
 8010068:	7a1b      	ldrb	r3, [r3, #8]
 801006a:	001a      	movs	r2, r3
 801006c:	4b7d      	ldr	r3, [pc, #500]	@ (8010264 <tx_control+0x20d0>)
 801006e:	0019      	movs	r1, r3
 8010070:	0010      	movs	r0, r2
 8010072:	f7f7 f93d 	bl	80072f0 <wreeprom>
			reeLong3 = RxBuffer_Ble[8];
 8010076:	4b6e      	ldr	r3, [pc, #440]	@ (8010230 <tx_control+0x209c>)
 8010078:	7a1a      	ldrb	r2, [r3, #8]
 801007a:	4b7b      	ldr	r3, [pc, #492]	@ (8010268 <tx_control+0x20d4>)
 801007c:	701a      	strb	r2, [r3, #0]
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 801007e:	4b6c      	ldr	r3, [pc, #432]	@ (8010230 <tx_control+0x209c>)
 8010080:	7a5b      	ldrb	r3, [r3, #9]
 8010082:	001a      	movs	r2, r3
 8010084:	4b79      	ldr	r3, [pc, #484]	@ (801026c <tx_control+0x20d8>)
 8010086:	0019      	movs	r1, r3
 8010088:	0010      	movs	r0, r2
 801008a:	f7f7 f931 	bl	80072f0 <wreeprom>
			reeLong4 = RxBuffer_Ble[9];
 801008e:	4b68      	ldr	r3, [pc, #416]	@ (8010230 <tx_control+0x209c>)
 8010090:	7a5a      	ldrb	r2, [r3, #9]
 8010092:	4b77      	ldr	r3, [pc, #476]	@ (8010270 <tx_control+0x20dc>)
 8010094:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 8010096:	4b64      	ldr	r3, [pc, #400]	@ (8010228 <tx_control+0x2094>)
 8010098:	22f1      	movs	r2, #241	@ 0xf1
 801009a:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 801009c:	4b62      	ldr	r3, [pc, #392]	@ (8010228 <tx_control+0x2094>)
 801009e:	223d      	movs	r2, #61	@ 0x3d
 80100a0:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 80100a2:	e005      	b.n	80100b0 <tx_control+0x1f1c>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 80100a4:	4b60      	ldr	r3, [pc, #384]	@ (8010228 <tx_control+0x2094>)
 80100a6:	22f1      	movs	r2, #241	@ 0xf1
 80100a8:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 80100aa:	4b5f      	ldr	r3, [pc, #380]	@ (8010228 <tx_control+0x2094>)
 80100ac:	223e      	movs	r2, #62	@ 0x3e
 80100ae:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 80100b0:	4b57      	ldr	r3, [pc, #348]	@ (8010210 <tx_control+0x207c>)
 80100b2:	4a5d      	ldr	r2, [pc, #372]	@ (8010228 <tx_control+0x2094>)
 80100b4:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 80100b6:	4b57      	ldr	r3, [pc, #348]	@ (8010214 <tx_control+0x2080>)
 80100b8:	4a5b      	ldr	r2, [pc, #364]	@ (8010228 <tx_control+0x2094>)
 80100ba:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 80100bc:	4b56      	ldr	r3, [pc, #344]	@ (8010218 <tx_control+0x2084>)
 80100be:	4a5b      	ldr	r2, [pc, #364]	@ (801022c <tx_control+0x2098>)
 80100c0:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 80100c2:	4b48      	ldr	r3, [pc, #288]	@ (80101e4 <tx_control+0x2050>)
 80100c4:	2202      	movs	r2, #2
 80100c6:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 80100c8:	4b49      	ldr	r3, [pc, #292]	@ (80101f0 <tx_control+0x205c>)
 80100ca:	2201      	movs	r2, #1
 80100cc:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 80100ce:	4b54      	ldr	r3, [pc, #336]	@ (8010220 <tx_control+0x208c>)
 80100d0:	2255      	movs	r2, #85	@ 0x55
 80100d2:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 80100d4:	4b53      	ldr	r3, [pc, #332]	@ (8010224 <tx_control+0x2090>)
 80100d6:	2200      	movs	r2, #0
 80100d8:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 80100da:	e102      	b.n	80102e2 <tx_control+0x214e>
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 80100dc:	4b54      	ldr	r3, [pc, #336]	@ (8010230 <tx_control+0x209c>)
 80100de:	789a      	ldrb	r2, [r3, #2]
 80100e0:	4b64      	ldr	r3, [pc, #400]	@ (8010274 <tx_control+0x20e0>)
 80100e2:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 80100e4:	4b52      	ldr	r3, [pc, #328]	@ (8010230 <tx_control+0x209c>)
 80100e6:	78da      	ldrb	r2, [r3, #3]
 80100e8:	4b63      	ldr	r3, [pc, #396]	@ (8010278 <tx_control+0x20e4>)
 80100ea:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 80100ec:	4b50      	ldr	r3, [pc, #320]	@ (8010230 <tx_control+0x209c>)
 80100ee:	791a      	ldrb	r2, [r3, #4]
 80100f0:	4b62      	ldr	r3, [pc, #392]	@ (801027c <tx_control+0x20e8>)
 80100f2:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 80100f4:	4b4e      	ldr	r3, [pc, #312]	@ (8010230 <tx_control+0x209c>)
 80100f6:	795a      	ldrb	r2, [r3, #5]
 80100f8:	4b61      	ldr	r3, [pc, #388]	@ (8010280 <tx_control+0x20ec>)
 80100fa:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 80100fc:	4b4c      	ldr	r3, [pc, #304]	@ (8010230 <tx_control+0x209c>)
 80100fe:	799a      	ldrb	r2, [r3, #6]
 8010100:	4b60      	ldr	r3, [pc, #384]	@ (8010284 <tx_control+0x20f0>)
 8010102:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 8010104:	4b4a      	ldr	r3, [pc, #296]	@ (8010230 <tx_control+0x209c>)
 8010106:	79da      	ldrb	r2, [r3, #7]
 8010108:	4b5f      	ldr	r3, [pc, #380]	@ (8010288 <tx_control+0x20f4>)
 801010a:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 801010c:	4b48      	ldr	r3, [pc, #288]	@ (8010230 <tx_control+0x209c>)
 801010e:	7a1a      	ldrb	r2, [r3, #8]
 8010110:	4b3e      	ldr	r3, [pc, #248]	@ (801020c <tx_control+0x2078>)
 8010112:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 8010114:	4b3d      	ldr	r3, [pc, #244]	@ (801020c <tx_control+0x2078>)
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	015b      	lsls	r3, r3, #5
 801011a:	b2da      	uxtb	r2, r3
 801011c:	4b3b      	ldr	r3, [pc, #236]	@ (801020c <tx_control+0x2078>)
 801011e:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 8010120:	4b3a      	ldr	r3, [pc, #232]	@ (801020c <tx_control+0x2078>)
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	b25b      	sxtb	r3, r3
 8010126:	221f      	movs	r2, #31
 8010128:	4393      	bics	r3, r2
 801012a:	b25a      	sxtb	r2, r3
 801012c:	4b52      	ldr	r3, [pc, #328]	@ (8010278 <tx_control+0x20e4>)
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	b25b      	sxtb	r3, r3
 8010132:	4313      	orrs	r3, r2
 8010134:	b25b      	sxtb	r3, r3
 8010136:	b2da      	uxtb	r2, r3
 8010138:	4b4f      	ldr	r3, [pc, #316]	@ (8010278 <tx_control+0x20e4>)
 801013a:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 801013c:	4b3c      	ldr	r3, [pc, #240]	@ (8010230 <tx_control+0x209c>)
 801013e:	7a5a      	ldrb	r2, [r3, #9]
 8010140:	4b32      	ldr	r3, [pc, #200]	@ (801020c <tx_control+0x2078>)
 8010142:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 8010144:	4b4e      	ldr	r3, [pc, #312]	@ (8010280 <tx_control+0x20ec>)
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2240      	movs	r2, #64	@ 0x40
 801014a:	4393      	bics	r3, r2
 801014c:	b2da      	uxtb	r2, r3
 801014e:	4b4c      	ldr	r3, [pc, #304]	@ (8010280 <tx_control+0x20ec>)
 8010150:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 8010152:	4b48      	ldr	r3, [pc, #288]	@ (8010274 <tx_control+0x20e0>)
 8010154:	781a      	ldrb	r2, [r3, #0]
 8010156:	4b4d      	ldr	r3, [pc, #308]	@ (801028c <tx_control+0x20f8>)
 8010158:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 801015a:	4b47      	ldr	r3, [pc, #284]	@ (8010278 <tx_control+0x20e4>)
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	221f      	movs	r2, #31
 8010160:	4013      	ands	r3, r2
 8010162:	b2da      	uxtb	r2, r3
 8010164:	4b49      	ldr	r3, [pc, #292]	@ (801028c <tx_control+0x20f8>)
 8010166:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 8010168:	4b44      	ldr	r3, [pc, #272]	@ (801027c <tx_control+0x20e8>)
 801016a:	781a      	ldrb	r2, [r3, #0]
 801016c:	4b47      	ldr	r3, [pc, #284]	@ (801028c <tx_control+0x20f8>)
 801016e:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 8010170:	4b41      	ldr	r3, [pc, #260]	@ (8010278 <tx_control+0x20e4>)
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	095b      	lsrs	r3, r3, #5
 8010176:	b2da      	uxtb	r2, r3
 8010178:	4b44      	ldr	r3, [pc, #272]	@ (801028c <tx_control+0x20f8>)
 801017a:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 801017c:	4943      	ldr	r1, [pc, #268]	@ (801028c <tx_control+0x20f8>)
 801017e:	4b44      	ldr	r3, [pc, #272]	@ (8010290 <tx_control+0x20fc>)
 8010180:	2201      	movs	r2, #1
 8010182:	0018      	movs	r0, r3
 8010184:	f007 fb8c 	bl	80178a0 <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 8010188:	4b3d      	ldr	r3, [pc, #244]	@ (8010280 <tx_control+0x20ec>)
 801018a:	781a      	ldrb	r2, [r3, #0]
 801018c:	4b41      	ldr	r3, [pc, #260]	@ (8010294 <tx_control+0x2100>)
 801018e:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 8010190:	4b3c      	ldr	r3, [pc, #240]	@ (8010284 <tx_control+0x20f0>)
 8010192:	781a      	ldrb	r2, [r3, #0]
 8010194:	4b3f      	ldr	r3, [pc, #252]	@ (8010294 <tx_control+0x2100>)
 8010196:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 8010198:	4b3b      	ldr	r3, [pc, #236]	@ (8010288 <tx_control+0x20f4>)
 801019a:	781a      	ldrb	r2, [r3, #0]
 801019c:	4b3d      	ldr	r3, [pc, #244]	@ (8010294 <tx_control+0x2100>)
 801019e:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 80101a0:	4b23      	ldr	r3, [pc, #140]	@ (8010230 <tx_control+0x209c>)
 80101a2:	7a5a      	ldrb	r2, [r3, #9]
 80101a4:	4b3b      	ldr	r3, [pc, #236]	@ (8010294 <tx_control+0x2100>)
 80101a6:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80101a8:	4b3a      	ldr	r3, [pc, #232]	@ (8010294 <tx_control+0x2100>)
 80101aa:	2200      	movs	r2, #0
 80101ac:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80101ae:	4b39      	ldr	r3, [pc, #228]	@ (8010294 <tx_control+0x2100>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 80101b4:	4937      	ldr	r1, [pc, #220]	@ (8010294 <tx_control+0x2100>)
 80101b6:	4b36      	ldr	r3, [pc, #216]	@ (8010290 <tx_control+0x20fc>)
 80101b8:	2201      	movs	r2, #1
 80101ba:	0018      	movs	r0, r3
 80101bc:	f007 fab0 	bl	8017720 <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 80101c0:	4b31      	ldr	r3, [pc, #196]	@ (8010288 <tx_control+0x20f4>)
 80101c2:	781a      	ldrb	r2, [r3, #0]
 80101c4:	4b34      	ldr	r3, [pc, #208]	@ (8010298 <tx_control+0x2104>)
 80101c6:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=0;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 80101c8:	4b34      	ldr	r3, [pc, #208]	@ (801029c <tx_control+0x2108>)
 80101ca:	2200      	movs	r2, #0
 80101cc:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 80101ce:	4b16      	ldr	r3, [pc, #88]	@ (8010228 <tx_control+0x2094>)
 80101d0:	22f1      	movs	r2, #241	@ 0xf1
 80101d2:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 80101d4:	4b14      	ldr	r3, [pc, #80]	@ (8010228 <tx_control+0x2094>)
 80101d6:	223d      	movs	r2, #61	@ 0x3d
 80101d8:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 80101da:	e067      	b.n	80102ac <tx_control+0x2118>
 80101dc:	200020d0 	.word	0x200020d0
 80101e0:	20000ba0 	.word	0x20000ba0
 80101e4:	20001ebc 	.word	0x20001ebc
 80101e8:	200000b8 	.word	0x200000b8
 80101ec:	20001e64 	.word	0x20001e64
 80101f0:	20001ea8 	.word	0x20001ea8
 80101f4:	20000b53 	.word	0x20000b53
 80101f8:	20002034 	.word	0x20002034
 80101fc:	200020d8 	.word	0x200020d8
 8010200:	200020e0 	.word	0x200020e0
 8010204:	200020e8 	.word	0x200020e8
 8010208:	20001ec0 	.word	0x20001ec0
 801020c:	20000b52 	.word	0x20000b52
 8010210:	20001ea0 	.word	0x20001ea0
 8010214:	20001e98 	.word	0x20001e98
 8010218:	20001e9c 	.word	0x20001e9c
 801021c:	20002044 	.word	0x20002044
 8010220:	20001ea5 	.word	0x20001ea5
 8010224:	20001eb0 	.word	0x20001eb0
 8010228:	20001e40 	.word	0x20001e40
 801022c:	20001e41 	.word	0x20001e41
 8010230:	20000984 	.word	0x20000984
 8010234:	0803f808 	.word	0x0803f808
 8010238:	200001bb 	.word	0x200001bb
 801023c:	0803f809 	.word	0x0803f809
 8010240:	200001bc 	.word	0x200001bc
 8010244:	0803f80a 	.word	0x0803f80a
 8010248:	200001bd 	.word	0x200001bd
 801024c:	0803f80b 	.word	0x0803f80b
 8010250:	200001be 	.word	0x200001be
 8010254:	0803f80c 	.word	0x0803f80c
 8010258:	200001bf 	.word	0x200001bf
 801025c:	0803f80d 	.word	0x0803f80d
 8010260:	200001c0 	.word	0x200001c0
 8010264:	0803f80e 	.word	0x0803f80e
 8010268:	200001c1 	.word	0x200001c1
 801026c:	0803f80f 	.word	0x0803f80f
 8010270:	200001c2 	.word	0x200001c2
 8010274:	200020fc 	.word	0x200020fc
 8010278:	200020fd 	.word	0x200020fd
 801027c:	200020fe 	.word	0x200020fe
 8010280:	200020ff 	.word	0x200020ff
 8010284:	20002100 	.word	0x20002100
 8010288:	20002101 	.word	0x20002101
 801028c:	20002118 	.word	0x20002118
 8010290:	20000514 	.word	0x20000514
 8010294:	20002104 	.word	0x20002104
 8010298:	20002175 	.word	0x20002175
 801029c:	200020f4 	.word	0x200020f4
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 80102a0:	4bd2      	ldr	r3, [pc, #840]	@ (80105ec <tx_control+0x2458>)
 80102a2:	22f1      	movs	r2, #241	@ 0xf1
 80102a4:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 80102a6:	4bd1      	ldr	r3, [pc, #836]	@ (80105ec <tx_control+0x2458>)
 80102a8:	223e      	movs	r2, #62	@ 0x3e
 80102aa:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 80102ac:	4bd0      	ldr	r3, [pc, #832]	@ (80105f0 <tx_control+0x245c>)
 80102ae:	4acf      	ldr	r2, [pc, #828]	@ (80105ec <tx_control+0x2458>)
 80102b0:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 80102b2:	4bd0      	ldr	r3, [pc, #832]	@ (80105f4 <tx_control+0x2460>)
 80102b4:	4acd      	ldr	r2, [pc, #820]	@ (80105ec <tx_control+0x2458>)
 80102b6:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 80102b8:	4bcf      	ldr	r3, [pc, #828]	@ (80105f8 <tx_control+0x2464>)
 80102ba:	4ad0      	ldr	r2, [pc, #832]	@ (80105fc <tx_control+0x2468>)
 80102bc:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 80102be:	4bd0      	ldr	r3, [pc, #832]	@ (8010600 <tx_control+0x246c>)
 80102c0:	2202      	movs	r2, #2
 80102c2:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 80102c4:	4bcf      	ldr	r3, [pc, #828]	@ (8010604 <tx_control+0x2470>)
 80102c6:	2201      	movs	r2, #1
 80102c8:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 80102ca:	4bcf      	ldr	r3, [pc, #828]	@ (8010608 <tx_control+0x2474>)
 80102cc:	2255      	movs	r2, #85	@ 0x55
 80102ce:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 80102d0:	4bce      	ldr	r3, [pc, #824]	@ (801060c <tx_control+0x2478>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 80102d6:	e004      	b.n	80102e2 <tx_control+0x214e>
		goto end_tx_control;
 80102d8:	46c0      	nop			@ (mov r8, r8)
 80102da:	e002      	b.n	80102e2 <tx_control+0x214e>
		goto end_tx_control;//	jp end_tx_control
 80102dc:	46c0      	nop			@ (mov r8, r8)
 80102de:	e000      	b.n	80102e2 <tx_control+0x214e>
			goto end_tx_control;		//jp		end_tx_control
 80102e0:	46c0      	nop			@ (mov r8, r8)
		if (keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 80102e2:	4bc9      	ldr	r3, [pc, #804]	@ (8010608 <tx_control+0x2474>)
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d11b      	bne.n	8010322 <tx_control+0x218e>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 80102ea:	4bc9      	ldr	r3, [pc, #804]	@ (8010610 <tx_control+0x247c>)
 80102ec:	791b      	ldrb	r3, [r3, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	4053      	eors	r3, r2
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d103      	bne.n	8010300 <tx_control+0x216c>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 80102f8:	4bc6      	ldr	r3, [pc, #792]	@ (8010614 <tx_control+0x2480>)
 80102fa:	22aa      	movs	r2, #170	@ 0xaa
 80102fc:	701a      	strb	r2, [r3, #0]
 80102fe:	e000      	b.n	8010302 <tx_control+0x216e>
			goto ask_resetLoopTx;
 8010300:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 8010302:	4bc5      	ldr	r3, [pc, #788]	@ (8010618 <tx_control+0x2484>)
 8010304:	791b      	ldrb	r3, [r3, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d109      	bne.n	801031e <tx_control+0x218a>
resetLoopTx:
 801030a:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 801030c:	4bbd      	ldr	r3, [pc, #756]	@ (8010604 <tx_control+0x2470>)
 801030e:	795b      	ldrb	r3, [r3, #5]
 8010310:	2201      	movs	r2, #1
 8010312:	4053      	eors	r3, r2
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <tx_control+0x2194>
		asm ("nop");
 801031a:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 801031c:	e7f6      	b.n	801030c <tx_control+0x2178>
		asm ("nop");
 801031e:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx_2;
 8010320:	e7fd      	b.n	801031e <tx_control+0x218a>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 8010322:	46c0      	nop			@ (mov r8, r8)
 8010324:	f001 f867 	bl	80113f6 <tx_control+0x3262>
			goto no_resetLoopTx;
 8010328:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 801032a:	f001 f864 	bl	80113f6 <tx_control+0x3262>
			goto tx_wifi_01;
 801032e:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;//jp			end_tx_wifi
tx_wifi_01:
		//;  Pregunta por el estado de la conexión a Servidor
		if(flagsTxControl[f_statWIFI])//btjt		flagsTxControl,#f_statWIFI,tx_wifi_OK
 8010330:	4bba      	ldr	r3, [pc, #744]	@ (801061c <tx_control+0x2488>)
 8010332:	789b      	ldrb	r3, [r3, #2]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d119      	bne.n	801036c <tx_control+0x21d8>
			goto tx_wifi_OK;
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 8010338:	4bb9      	ldr	r3, [pc, #740]	@ (8010620 <tx_control+0x248c>)
 801033a:	2200      	movs	r2, #0
 801033c:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 801033e:	4bb8      	ldr	r3, [pc, #736]	@ (8010620 <tx_control+0x248c>)
 8010340:	2200      	movs	r2, #0
 8010342:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 8010344:	4bb6      	ldr	r3, [pc, #728]	@ (8010620 <tx_control+0x248c>)
 8010346:	2200      	movs	r2, #0
 8010348:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 801034a:	4bb5      	ldr	r3, [pc, #724]	@ (8010620 <tx_control+0x248c>)
 801034c:	2200      	movs	r2, #0
 801034e:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 8010350:	4bb3      	ldr	r3, [pc, #716]	@ (8010620 <tx_control+0x248c>)
 8010352:	2200      	movs	r2, #0
 8010354:	711a      	strb	r2, [r3, #4]
		cntRegTxWifi = 0;
 8010356:	4bb3      	ldr	r3, [pc, #716]	@ (8010624 <tx_control+0x2490>)
 8010358:	2200      	movs	r2, #0
 801035a:	801a      	strh	r2, [r3, #0]
		blockLoggWifi = 0;
 801035c:	4bb2      	ldr	r3, [pc, #712]	@ (8010628 <tx_control+0x2494>)
 801035e:	2200      	movs	r2, #0
 8010360:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;
 8010362:	4bb2      	ldr	r3, [pc, #712]	@ (801062c <tx_control+0x2498>)
 8010364:	2200      	movs	r2, #0
 8010366:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp			end_tx_wifi
 8010368:	f001 f842 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_OK;
 801036c:	46c0      	nop			@ (mov r8, r8)

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 801036e:	4bac      	ldr	r3, [pc, #688]	@ (8010620 <tx_control+0x248c>)
 8010370:	2201      	movs	r2, #1
 8010372:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 8010374:	4ba6      	ldr	r3, [pc, #664]	@ (8010610 <tx_control+0x247c>)
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	2201      	movs	r2, #1
 801037a:	4053      	eors	r3, r2
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d101      	bne.n	8010386 <tx_control+0x21f2>
 8010382:	f001 f828 	bl	80113d6 <tx_control+0x3242>
			goto tx_wifi_OK_01;
 8010386:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 8010388:	4b9f      	ldr	r3, [pc, #636]	@ (8010608 <tx_control+0x2474>)
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <tx_control+0x2200>
 8010390:	f001 f824 	bl	80113dc <tx_control+0x3248>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 8010394:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		//if(!flagsWIFI[f_timeLoggerSend]){
		if(flagsWIFI[f_timeLoggerSend]){
 8010396:	4ba2      	ldr	r3, [pc, #648]	@ (8010620 <tx_control+0x248c>)
 8010398:	785b      	ldrb	r3, [r3, #1]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d100      	bne.n	80103a0 <tx_control+0x220c>
 801039e:	e1e9      	b.n	8010774 <tx_control+0x25e0>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 80103a0:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 80103a2:	4b9f      	ldr	r3, [pc, #636]	@ (8010620 <tx_control+0x248c>)
 80103a4:	78db      	ldrb	r3, [r3, #3]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d000      	beq.n	80103ac <tx_control+0x2218>
 80103aa:	e0b8      	b.n	801051e <tx_control+0x238a>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 80103ac:	4b9c      	ldr	r3, [pc, #624]	@ (8010620 <tx_control+0x248c>)
 80103ae:	2201      	movs	r2, #1
 80103b0:	70da      	strb	r2, [r3, #3]
		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_cmd
		if(cntRegTxWifi)
 80103b2:	4b9c      	ldr	r3, [pc, #624]	@ (8010624 <tx_control+0x2490>)
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d134      	bne.n	8010424 <tx_control+0x2290>
			goto tx_wifi_timeLogger_cmd;

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 80103ba:	4b9d      	ldr	r3, [pc, #628]	@ (8010630 <tx_control+0x249c>)
 80103bc:	781a      	ldrb	r2, [r3, #0]
 80103be:	4b9d      	ldr	r3, [pc, #628]	@ (8010634 <tx_control+0x24a0>)
 80103c0:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 80103c2:	4b9d      	ldr	r3, [pc, #628]	@ (8010638 <tx_control+0x24a4>)
 80103c4:	781a      	ldrb	r2, [r3, #0]
 80103c6:	4b9d      	ldr	r3, [pc, #628]	@ (801063c <tx_control+0x24a8>)
 80103c8:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 80103ca:	4b9d      	ldr	r3, [pc, #628]	@ (8010640 <tx_control+0x24ac>)
 80103cc:	4a9d      	ldr	r2, [pc, #628]	@ (8010644 <tx_control+0x24b0>)
 80103ce:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 80103d0:	4b9d      	ldr	r3, [pc, #628]	@ (8010648 <tx_control+0x24b4>)
 80103d2:	4a9e      	ldr	r2, [pc, #632]	@ (801064c <tx_control+0x24b8>)
 80103d4:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 80103d6:	4b9a      	ldr	r3, [pc, #616]	@ (8010640 <tx_control+0x24ac>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	337e      	adds	r3, #126	@ 0x7e
 80103dc:	4a97      	ldr	r2, [pc, #604]	@ (801063c <tx_control+0x24a8>)
 80103de:	7812      	ldrb	r2, [r2, #0]
 80103e0:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 80103e2:	4b9b      	ldr	r3, [pc, #620]	@ (8010650 <tx_control+0x24bc>)
 80103e4:	22aa      	movs	r2, #170	@ 0xaa
 80103e6:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 80103e8:	4b97      	ldr	r3, [pc, #604]	@ (8010648 <tx_control+0x24b4>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a91      	ldr	r2, [pc, #580]	@ (8010634 <tx_control+0x24a0>)
 80103ee:	7812      	ldrb	r2, [r2, #0]
 80103f0:	01d2      	lsls	r2, r2, #7
 80103f2:	189a      	adds	r2, r3, r2
 80103f4:	4b97      	ldr	r3, [pc, #604]	@ (8010654 <tx_control+0x24c0>)
 80103f6:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 80103f8:	4b91      	ldr	r3, [pc, #580]	@ (8010640 <tx_control+0x24ac>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	4b96      	ldr	r3, [pc, #600]	@ (8010658 <tx_control+0x24c4>)
 80103fe:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 8010400:	f7f6 fe56 	bl	80070b0 <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 8010404:	4b95      	ldr	r3, [pc, #596]	@ (801065c <tx_control+0x24c8>)
 8010406:	881a      	ldrh	r2, [r3, #0]
 8010408:	4b95      	ldr	r3, [pc, #596]	@ (8010660 <tx_control+0x24cc>)
 801040a:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 801040c:	4b95      	ldr	r3, [pc, #596]	@ (8010664 <tx_control+0x24d0>)
 801040e:	4a96      	ldr	r2, [pc, #600]	@ (8010668 <tx_control+0x24d4>)
 8010410:	601a      	str	r2, [r3, #0]
		reeCntRegDATA = cntReg;
 8010412:	4b93      	ldr	r3, [pc, #588]	@ (8010660 <tx_control+0x24cc>)
 8010414:	881a      	ldrh	r2, [r3, #0]
 8010416:	4b95      	ldr	r3, [pc, #596]	@ (801066c <tx_control+0x24d8>)
 8010418:	801a      	strh	r2, [r3, #0]

		save_cntReg();// call	save_cntReg
 801041a:	f7f6 fd4d 	bl	8006eb8 <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 801041e:	f7f6 fd5d 	bl	8006edc <save_timeUNIX>
 8010422:	e000      	b.n	8010426 <tx_control+0x2292>
			goto tx_wifi_timeLogger_cmd;
 8010424:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_cmd:
		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 8010426:	4b92      	ldr	r3, [pc, #584]	@ (8010670 <tx_control+0x24dc>)
 8010428:	2240      	movs	r2, #64	@ 0x40
 801042a:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 801042c:	4b90      	ldr	r3, [pc, #576]	@ (8010670 <tx_control+0x24dc>)
 801042e:	2285      	movs	r2, #133	@ 0x85
 8010430:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
//		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
//		bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 8010432:	4b90      	ldr	r3, [pc, #576]	@ (8010674 <tx_control+0x24e0>)
 8010434:	227b      	movs	r2, #123	@ 0x7b
 8010436:	5c9a      	ldrb	r2, [r3, r2]
 8010438:	4b8d      	ldr	r3, [pc, #564]	@ (8010670 <tx_control+0x24dc>)
 801043a:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 801043c:	4b8d      	ldr	r3, [pc, #564]	@ (8010674 <tx_control+0x24e0>)
 801043e:	227c      	movs	r2, #124	@ 0x7c
 8010440:	5c9a      	ldrb	r2, [r3, r2]
 8010442:	4b8b      	ldr	r3, [pc, #556]	@ (8010670 <tx_control+0x24dc>)
 8010444:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 8010446:	4b8c      	ldr	r3, [pc, #560]	@ (8010678 <tx_control+0x24e4>)
 8010448:	881b      	ldrh	r3, [r3, #0]
 801044a:	0a1b      	lsrs	r3, r3, #8
 801044c:	b29b      	uxth	r3, r3
 801044e:	b2da      	uxtb	r2, r3
 8010450:	4b87      	ldr	r3, [pc, #540]	@ (8010670 <tx_control+0x24dc>)
 8010452:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 8010454:	4b88      	ldr	r3, [pc, #544]	@ (8010678 <tx_control+0x24e4>)
 8010456:	881b      	ldrh	r3, [r3, #0]
 8010458:	b2da      	uxtb	r2, r3
 801045a:	4b85      	ldr	r3, [pc, #532]	@ (8010670 <tx_control+0x24dc>)
 801045c:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 801045e:	4b87      	ldr	r3, [pc, #540]	@ (801067c <tx_control+0x24e8>)
 8010460:	881b      	ldrh	r3, [r3, #0]
 8010462:	0a1b      	lsrs	r3, r3, #8
 8010464:	b29b      	uxth	r3, r3
 8010466:	b2da      	uxtb	r2, r3
 8010468:	4b81      	ldr	r3, [pc, #516]	@ (8010670 <tx_control+0x24dc>)
 801046a:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 801046c:	4b83      	ldr	r3, [pc, #524]	@ (801067c <tx_control+0x24e8>)
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	b2da      	uxtb	r2, r3
 8010472:	4b7f      	ldr	r3, [pc, #508]	@ (8010670 <tx_control+0x24dc>)
 8010474:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[11] = eeLat4;
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;
		bufferWifiTx[8] = reeLat1;
 8010476:	4b82      	ldr	r3, [pc, #520]	@ (8010680 <tx_control+0x24ec>)
 8010478:	781a      	ldrb	r2, [r3, #0]
 801047a:	4b7d      	ldr	r3, [pc, #500]	@ (8010670 <tx_control+0x24dc>)
 801047c:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 801047e:	4b81      	ldr	r3, [pc, #516]	@ (8010684 <tx_control+0x24f0>)
 8010480:	781a      	ldrb	r2, [r3, #0]
 8010482:	4b7b      	ldr	r3, [pc, #492]	@ (8010670 <tx_control+0x24dc>)
 8010484:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 8010486:	4b80      	ldr	r3, [pc, #512]	@ (8010688 <tx_control+0x24f4>)
 8010488:	781a      	ldrb	r2, [r3, #0]
 801048a:	4b79      	ldr	r3, [pc, #484]	@ (8010670 <tx_control+0x24dc>)
 801048c:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 801048e:	4b7f      	ldr	r3, [pc, #508]	@ (801068c <tx_control+0x24f8>)
 8010490:	781a      	ldrb	r2, [r3, #0]
 8010492:	4b77      	ldr	r3, [pc, #476]	@ (8010670 <tx_control+0x24dc>)
 8010494:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 8010496:	4b7e      	ldr	r3, [pc, #504]	@ (8010690 <tx_control+0x24fc>)
 8010498:	781a      	ldrb	r2, [r3, #0]
 801049a:	4b75      	ldr	r3, [pc, #468]	@ (8010670 <tx_control+0x24dc>)
 801049c:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 801049e:	4b7d      	ldr	r3, [pc, #500]	@ (8010694 <tx_control+0x2500>)
 80104a0:	781a      	ldrb	r2, [r3, #0]
 80104a2:	4b73      	ldr	r3, [pc, #460]	@ (8010670 <tx_control+0x24dc>)
 80104a4:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 80104a6:	4b7c      	ldr	r3, [pc, #496]	@ (8010698 <tx_control+0x2504>)
 80104a8:	781a      	ldrb	r2, [r3, #0]
 80104aa:	4b71      	ldr	r3, [pc, #452]	@ (8010670 <tx_control+0x24dc>)
 80104ac:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 80104ae:	4b7b      	ldr	r3, [pc, #492]	@ (801069c <tx_control+0x2508>)
 80104b0:	781a      	ldrb	r2, [r3, #0]
 80104b2:	4b6f      	ldr	r3, [pc, #444]	@ (8010670 <tx_control+0x24dc>)
 80104b4:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 80104b6:	4b4e      	ldr	r3, [pc, #312]	@ (80105f0 <tx_control+0x245c>)
 80104b8:	4a6d      	ldr	r2, [pc, #436]	@ (8010670 <tx_control+0x24dc>)
 80104ba:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80104bc:	4b4d      	ldr	r3, [pc, #308]	@ (80105f4 <tx_control+0x2460>)
 80104be:	4a6c      	ldr	r2, [pc, #432]	@ (8010670 <tx_control+0x24dc>)
 80104c0:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 80104c2:	4b4d      	ldr	r3, [pc, #308]	@ (80105f8 <tx_control+0x2464>)
 80104c4:	4a76      	ldr	r2, [pc, #472]	@ (80106a0 <tx_control+0x250c>)
 80104c6:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 80104c8:	4b4d      	ldr	r3, [pc, #308]	@ (8010600 <tx_control+0x246c>)
 80104ca:	2210      	movs	r2, #16
 80104cc:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80104ce:	4b4d      	ldr	r3, [pc, #308]	@ (8010604 <tx_control+0x2470>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80104d4:	4b73      	ldr	r3, [pc, #460]	@ (80106a4 <tx_control+0x2510>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80104da:	4b4a      	ldr	r3, [pc, #296]	@ (8010604 <tx_control+0x2470>)
 80104dc:	2201      	movs	r2, #1
 80104de:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 80104e0:	4b49      	ldr	r3, [pc, #292]	@ (8010608 <tx_control+0x2474>)
 80104e2:	2255      	movs	r2, #85	@ 0x55
 80104e4:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 80104e6:	4b49      	ldr	r3, [pc, #292]	@ (801060c <tx_control+0x2478>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	701a      	strb	r2, [r3, #0]

		//;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_noInit
		if(cntRegTxWifi)
 80104ec:	4b4d      	ldr	r3, [pc, #308]	@ (8010624 <tx_control+0x2490>)
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10b      	bne.n	801050c <tx_control+0x2378>
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 80104f4:	4b4e      	ldr	r3, [pc, #312]	@ (8010630 <tx_control+0x249c>)
 80104f6:	781a      	ldrb	r2, [r3, #0]
 80104f8:	4b4b      	ldr	r3, [pc, #300]	@ (8010628 <tx_control+0x2494>)
 80104fa:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 80104fc:	4b4e      	ldr	r3, [pc, #312]	@ (8010638 <tx_control+0x24a4>)
 80104fe:	781a      	ldrb	r2, [r3, #0]
 8010500:	4b4a      	ldr	r3, [pc, #296]	@ (801062c <tx_control+0x2498>)
 8010502:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 8010504:	4b47      	ldr	r3, [pc, #284]	@ (8010624 <tx_control+0x2490>)
 8010506:	2200      	movs	r2, #0
 8010508:	801a      	strh	r2, [r3, #0]
 801050a:	e000      	b.n	801050e <tx_control+0x237a>
			goto tx_wifi_timeLogger_noInit;
 801050c:	46c0      	nop			@ (mov r8, r8)
tx_wifi_timeLogger_noInit:
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 801050e:	4b66      	ldr	r3, [pc, #408]	@ (80106a8 <tx_control+0x2514>)
 8010510:	2203      	movs	r2, #3
 8010512:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegDATA) == 0){
		//	goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegDATA;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegDATA);
		numRegTx = 1343;
 8010514:	4b65      	ldr	r3, [pc, #404]	@ (80106ac <tx_control+0x2518>)
 8010516:	4a66      	ldr	r2, [pc, #408]	@ (80106b0 <tx_control+0x251c>)
 8010518:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 801051a:	f000 ff69 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_timeLogger_01;
 801051e:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 8010520:	4b3a      	ldr	r3, [pc, #232]	@ (801060c <tx_control+0x2478>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	2b3d      	cmp	r3, #61	@ 0x3d
 8010526:	d00e      	beq.n	8010546 <tx_control+0x23b2>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		codeTX = 0;
 8010528:	4b38      	ldr	r3, [pc, #224]	@ (801060c <tx_control+0x2478>)
 801052a:	2200      	movs	r2, #0
 801052c:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 801052e:	4b5e      	ldr	r3, [pc, #376]	@ (80106a8 <tx_control+0x2514>)
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d104      	bne.n	8010540 <tx_control+0x23ac>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 8010536:	4b3a      	ldr	r3, [pc, #232]	@ (8010620 <tx_control+0x248c>)
 8010538:	2200      	movs	r2, #0
 801053a:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 801053c:	f000 ff58 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 8010540:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 8010542:	f000 ff55 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 8010546:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 8010548:	4b5a      	ldr	r3, [pc, #360]	@ (80106b4 <tx_control+0x2520>)
 801054a:	2296      	movs	r2, #150	@ 0x96
 801054c:	0052      	lsls	r2, r2, #1
 801054e:	801a      	strh	r2, [r3, #0]
		//ldw		X,#300;
		timeoutTBLE = 300;//ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
 8010550:	4b59      	ldr	r3, [pc, #356]	@ (80106b8 <tx_control+0x2524>)
 8010552:	2296      	movs	r2, #150	@ 0x96
 8010554:	0052      	lsls	r2, r2, #1
 8010556:	801a      	strh	r2, [r3, #0]

		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 8010558:	4b53      	ldr	r3, [pc, #332]	@ (80106a8 <tx_control+0x2514>)
 801055a:	2203      	movs	r2, #3
 801055c:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 801055e:	4b53      	ldr	r3, [pc, #332]	@ (80106ac <tx_control+0x2518>)
 8010560:	881a      	ldrh	r2, [r3, #0]
 8010562:	4b30      	ldr	r3, [pc, #192]	@ (8010624 <tx_control+0x2490>)
 8010564:	881b      	ldrh	r3, [r3, #0]
 8010566:	429a      	cmp	r2, r3
 8010568:	d314      	bcc.n	8010594 <tx_control+0x2400>
		//cntReg = 0;// ldw		cntReg,X
		// ldw		X,#eeCntRegDATA
		//cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
		//save_cntReg();// call	save_cntReg

tx_wifi_timeLogger_END:
 801056a:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
		flagsWIFI[f_timeLoggerSend] = 0;
 801056c:	4b2c      	ldr	r3, [pc, #176]	@ (8010620 <tx_control+0x248c>)
 801056e:	2200      	movs	r2, #0
 8010570:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 8010572:	4b2b      	ldr	r3, [pc, #172]	@ (8010620 <tx_control+0x248c>)
 8010574:	2200      	movs	r2, #0
 8010576:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 8010578:	4b50      	ldr	r3, [pc, #320]	@ (80106bc <tx_control+0x2528>)
 801057a:	220a      	movs	r2, #10
 801057c:	701a      	strb	r2, [r3, #0]

		blockLoggWifi = 0; 		//clr	blockLoggWifi
 801057e:	4b2a      	ldr	r3, [pc, #168]	@ (8010628 <tx_control+0x2494>)
 8010580:	2200      	movs	r2, #0
 8010582:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;		//clr		byteLoggWifi
 8010584:	4b29      	ldr	r3, [pc, #164]	@ (801062c <tx_control+0x2498>)
 8010586:	2200      	movs	r2, #0
 8010588:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 801058a:	4b26      	ldr	r3, [pc, #152]	@ (8010624 <tx_control+0x2490>)
 801058c:	2200      	movs	r2, #0
 801058e:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 8010590:	f000 ff2e 	bl	80113f0 <tx_control+0x325c>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 8010594:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 8010596:	4b36      	ldr	r3, [pc, #216]	@ (8010670 <tx_control+0x24dc>)
 8010598:	2240      	movs	r2, #64	@ 0x40
 801059a:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 801059c:	4b34      	ldr	r3, [pc, #208]	@ (8010670 <tx_control+0x24dc>)
 801059e:	2283      	movs	r2, #131	@ 0x83
 80105a0:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 80105a2:	4b33      	ldr	r3, [pc, #204]	@ (8010670 <tx_control+0x24dc>)
 80105a4:	2203      	movs	r2, #3
 80105a6:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 80105a8:	4b32      	ldr	r3, [pc, #200]	@ (8010674 <tx_control+0x24e0>)
 80105aa:	227b      	movs	r2, #123	@ 0x7b
 80105ac:	5c9a      	ldrb	r2, [r3, r2]
 80105ae:	4b30      	ldr	r3, [pc, #192]	@ (8010670 <tx_control+0x24dc>)
 80105b0:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 80105b2:	4b30      	ldr	r3, [pc, #192]	@ (8010674 <tx_control+0x24e0>)
 80105b4:	227c      	movs	r2, #124	@ 0x7c
 80105b6:	5c9a      	ldrb	r2, [r3, r2]
 80105b8:	4b2d      	ldr	r3, [pc, #180]	@ (8010670 <tx_control+0x24dc>)
 80105ba:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 80105bc:	4b1b      	ldr	r3, [pc, #108]	@ (801062c <tx_control+0x2498>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d000      	beq.n	80105c6 <tx_control+0x2432>
 80105c4:	e07c      	b.n	80106c0 <tx_control+0x252c>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 80105c6:	4b19      	ldr	r3, [pc, #100]	@ (801062c <tx_control+0x2498>)
 80105c8:	227e      	movs	r2, #126	@ 0x7e
 80105ca:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 80105cc:	4b16      	ldr	r3, [pc, #88]	@ (8010628 <tx_control+0x2494>)
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d103      	bne.n	80105dc <tx_control+0x2448>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 80105d4:	4b14      	ldr	r3, [pc, #80]	@ (8010628 <tx_control+0x2494>)
 80105d6:	2260      	movs	r2, #96	@ 0x60
 80105d8:	701a      	strb	r2, [r3, #0]
 80105da:	e000      	b.n	80105de <tx_control+0x244a>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 80105dc:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 80105de:	4b12      	ldr	r3, [pc, #72]	@ (8010628 <tx_control+0x2494>)
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	3b01      	subs	r3, #1
 80105e4:	b2da      	uxtb	r2, r3
 80105e6:	4b10      	ldr	r3, [pc, #64]	@ (8010628 <tx_control+0x2494>)
 80105e8:	701a      	strb	r2, [r3, #0]
 80105ea:	e06a      	b.n	80106c2 <tx_control+0x252e>
 80105ec:	20001e40 	.word	0x20001e40
 80105f0:	20001ea0 	.word	0x20001ea0
 80105f4:	20001e98 	.word	0x20001e98
 80105f8:	20001e9c 	.word	0x20001e9c
 80105fc:	20001e41 	.word	0x20001e41
 8010600:	20001ebc 	.word	0x20001ebc
 8010604:	20001ea8 	.word	0x20001ea8
 8010608:	20001ea5 	.word	0x20001ea5
 801060c:	20001eb0 	.word	0x20001eb0
 8010610:	20001f68 	.word	0x20001f68
 8010614:	20001f70 	.word	0x20001f70
 8010618:	200020d0 	.word	0x200020d0
 801061c:	20002178 	.word	0x20002178
 8010620:	20001fdc 	.word	0x20001fdc
 8010624:	20002004 	.word	0x20002004
 8010628:	20002002 	.word	0x20002002
 801062c:	20002003 	.word	0x20002003
 8010630:	20000e35 	.word	0x20000e35
 8010634:	20000e22 	.word	0x20000e22
 8010638:	20000e34 	.word	0x20000e34
 801063c:	20000e23 	.word	0x20000e23
 8010640:	20000e2c 	.word	0x20000e2c
 8010644:	20000d14 	.word	0x20000d14
 8010648:	20000e28 	.word	0x20000e28
 801064c:	0803c000 	.word	0x0803c000
 8010650:	20000e14 	.word	0x20000e14
 8010654:	20000e18 	.word	0x20000e18
 8010658:	20000e1c 	.word	0x20000e1c
 801065c:	200020c6 	.word	0x200020c6
 8010660:	200020ca 	.word	0x200020ca
 8010664:	200020cc 	.word	0x200020cc
 8010668:	0803f810 	.word	0x0803f810
 801066c:	20000d0e 	.word	0x20000d0e
 8010670:	20001fe4 	.word	0x20001fe4
 8010674:	20000c88 	.word	0x20000c88
 8010678:	20001e3c 	.word	0x20001e3c
 801067c:	20001e3e 	.word	0x20001e3e
 8010680:	200001bb 	.word	0x200001bb
 8010684:	200001bc 	.word	0x200001bc
 8010688:	200001bd 	.word	0x200001bd
 801068c:	200001be 	.word	0x200001be
 8010690:	200001bf 	.word	0x200001bf
 8010694:	200001c0 	.word	0x200001c0
 8010698:	200001c1 	.word	0x200001c1
 801069c:	200001c2 	.word	0x200001c2
 80106a0:	20001ff4 	.word	0x20001ff4
 80106a4:	20001ec0 	.word	0x20001ec0
 80106a8:	20002006 	.word	0x20002006
 80106ac:	200020c4 	.word	0x200020c4
 80106b0:	0000053f 	.word	0x0000053f
 80106b4:	20001fd8 	.word	0x20001fd8
 80106b8:	20002188 	.word	0x20002188
 80106bc:	20002007 	.word	0x20002007
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 80106c0:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 80106c2:	4bd8      	ldr	r3, [pc, #864]	@ (8010a24 <tx_control+0x2890>)
 80106c4:	643b      	str	r3, [r7, #64]	@ 0x40
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 80106c6:	4bd8      	ldr	r3, [pc, #864]	@ (8010a28 <tx_control+0x2894>)
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	01db      	lsls	r3, r3, #7
 80106cc:	4ad7      	ldr	r2, [pc, #860]	@ (8010a2c <tx_control+0x2898>)
 80106ce:	7812      	ldrb	r2, [r2, #0]
 80106d0:	189a      	adds	r2, r3, r2
 80106d2:	4bd7      	ldr	r3, [pc, #860]	@ (8010a30 <tx_control+0x289c>)
 80106d4:	18d3      	adds	r3, r2, r3
 80106d6:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 80106d8:	4bd6      	ldr	r3, [pc, #856]	@ (8010a34 <tx_control+0x28a0>)
 80106da:	2200      	movs	r2, #0
 80106dc:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 80106de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106e0:	3b01      	subs	r3, #1
 80106e2:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 80106e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106e6:	3b01      	subs	r3, #1
 80106e8:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 80106ea:	4bd0      	ldr	r3, [pc, #832]	@ (8010a2c <tx_control+0x2898>)
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	3b01      	subs	r3, #1
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	4bce      	ldr	r3, [pc, #824]	@ (8010a2c <tx_control+0x2898>)
 80106f4:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 80106f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80106f8:	2380      	movs	r3, #128	@ 0x80
 80106fa:	025b      	lsls	r3, r3, #9
 80106fc:	5cd2      	ldrb	r2, [r2, r3]
 80106fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010700:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 8010702:	4bcc      	ldr	r3, [pc, #816]	@ (8010a34 <tx_control+0x28a0>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	3301      	adds	r3, #1
 8010708:	b2da      	uxtb	r2, r3
 801070a:	4bca      	ldr	r3, [pc, #808]	@ (8010a34 <tx_control+0x28a0>)
 801070c:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 801070e:	4bc9      	ldr	r3, [pc, #804]	@ (8010a34 <tx_control+0x28a0>)
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	2b08      	cmp	r3, #8
 8010714:	d800      	bhi.n	8010718 <tx_control+0x2584>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 8010716:	e7e2      	b.n	80106de <tx_control+0x254a>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 8010718:	4bc7      	ldr	r3, [pc, #796]	@ (8010a38 <tx_control+0x28a4>)
 801071a:	7b5a      	ldrb	r2, [r3, #13]
 801071c:	4bc7      	ldr	r3, [pc, #796]	@ (8010a3c <tx_control+0x28a8>)
 801071e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 8010720:	4bc5      	ldr	r3, [pc, #788]	@ (8010a38 <tx_control+0x28a4>)
 8010722:	2200      	movs	r2, #0
 8010724:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 8010726:	4bc5      	ldr	r3, [pc, #788]	@ (8010a3c <tx_control+0x28a8>)
 8010728:	781a      	ldrb	r2, [r3, #0]
 801072a:	4bc3      	ldr	r3, [pc, #780]	@ (8010a38 <tx_control+0x28a4>)
 801072c:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 801072e:	4bc4      	ldr	r3, [pc, #784]	@ (8010a40 <tx_control+0x28ac>)
 8010730:	4ac1      	ldr	r2, [pc, #772]	@ (8010a38 <tx_control+0x28a4>)
 8010732:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010734:	4bc3      	ldr	r3, [pc, #780]	@ (8010a44 <tx_control+0x28b0>)
 8010736:	4ac0      	ldr	r2, [pc, #768]	@ (8010a38 <tx_control+0x28a4>)
 8010738:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 801073a:	4bc3      	ldr	r3, [pc, #780]	@ (8010a48 <tx_control+0x28b4>)
 801073c:	4ac3      	ldr	r2, [pc, #780]	@ (8010a4c <tx_control+0x28b8>)
 801073e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 8010740:	4bc3      	ldr	r3, [pc, #780]	@ (8010a50 <tx_control+0x28bc>)
 8010742:	220f      	movs	r2, #15
 8010744:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010746:	4bc3      	ldr	r3, [pc, #780]	@ (8010a54 <tx_control+0x28c0>)
 8010748:	2200      	movs	r2, #0
 801074a:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 801074c:	4bc2      	ldr	r3, [pc, #776]	@ (8010a58 <tx_control+0x28c4>)
 801074e:	2200      	movs	r2, #0
 8010750:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010752:	4bc0      	ldr	r3, [pc, #768]	@ (8010a54 <tx_control+0x28c0>)
 8010754:	2201      	movs	r2, #1
 8010756:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010758:	4bc0      	ldr	r3, [pc, #768]	@ (8010a5c <tx_control+0x28c8>)
 801075a:	2255      	movs	r2, #85	@ 0x55
 801075c:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 801075e:	4bc0      	ldr	r3, [pc, #768]	@ (8010a60 <tx_control+0x28cc>)
 8010760:	2200      	movs	r2, #0
 8010762:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 8010764:	4bbf      	ldr	r3, [pc, #764]	@ (8010a64 <tx_control+0x28d0>)
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	3301      	adds	r3, #1
 801076a:	b29a      	uxth	r2, r3
 801076c:	4bbd      	ldr	r3, [pc, #756]	@ (8010a64 <tx_control+0x28d0>)
 801076e:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 8010770:	f000 fe3e 	bl	80113f0 <tx_control+0x325c>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 8010774:	46c0      	nop			@ (mov r8, r8)
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		//if(!flagsWIFI[f_eventLoggerSend]){
		if(flagsWIFI[f_eventLoggerSend]){
 8010776:	4bbc      	ldr	r3, [pc, #752]	@ (8010a68 <tx_control+0x28d4>)
 8010778:	789b      	ldrb	r3, [r3, #2]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d100      	bne.n	8010780 <tx_control+0x25ec>
 801077e:	e1e9      	b.n	8010b54 <tx_control+0x29c0>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 8010780:	46c0      	nop			@ (mov r8, r8)
//tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 8010782:	4bb9      	ldr	r3, [pc, #740]	@ (8010a68 <tx_control+0x28d4>)
 8010784:	791b      	ldrb	r3, [r3, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d000      	beq.n	801078c <tx_control+0x25f8>
 801078a:	e0b7      	b.n	80108fc <tx_control+0x2768>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 801078c:	4bb6      	ldr	r3, [pc, #728]	@ (8010a68 <tx_control+0x28d4>)
 801078e:	2201      	movs	r2, #1
 8010790:	711a      	strb	r2, [r3, #4]

		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_eventLogger_cmd
		if(cntRegTxWifi)
 8010792:	4bb4      	ldr	r3, [pc, #720]	@ (8010a64 <tx_control+0x28d0>)
 8010794:	881b      	ldrh	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d133      	bne.n	8010802 <tx_control+0x266e>
			goto tx_wifi_eventLogger_cmd;
		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 801079a:	4bb4      	ldr	r3, [pc, #720]	@ (8010a6c <tx_control+0x28d8>)
 801079c:	781a      	ldrb	r2, [r3, #0]
 801079e:	4bb4      	ldr	r3, [pc, #720]	@ (8010a70 <tx_control+0x28dc>)
 80107a0:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 80107a2:	4bb4      	ldr	r3, [pc, #720]	@ (8010a74 <tx_control+0x28e0>)
 80107a4:	781a      	ldrb	r2, [r3, #0]
 80107a6:	4bb4      	ldr	r3, [pc, #720]	@ (8010a78 <tx_control+0x28e4>)
 80107a8:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 80107aa:	4bb4      	ldr	r3, [pc, #720]	@ (8010a7c <tx_control+0x28e8>)
 80107ac:	4ab4      	ldr	r2, [pc, #720]	@ (8010a80 <tx_control+0x28ec>)
 80107ae:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 80107b0:	4bb4      	ldr	r3, [pc, #720]	@ (8010a84 <tx_control+0x28f0>)
 80107b2:	4ab5      	ldr	r2, [pc, #724]	@ (8010a88 <tx_control+0x28f4>)
 80107b4:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 80107b6:	4bb0      	ldr	r3, [pc, #704]	@ (8010a78 <tx_control+0x28e4>)
 80107b8:	7819      	ldrb	r1, [r3, #0]
 80107ba:	4bb1      	ldr	r3, [pc, #708]	@ (8010a80 <tx_control+0x28ec>)
 80107bc:	227e      	movs	r2, #126	@ 0x7e
 80107be:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 80107c0:	4bb2      	ldr	r3, [pc, #712]	@ (8010a8c <tx_control+0x28f8>)
 80107c2:	22aa      	movs	r2, #170	@ 0xaa
 80107c4:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 80107c6:	4baf      	ldr	r3, [pc, #700]	@ (8010a84 <tx_control+0x28f0>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4aa9      	ldr	r2, [pc, #676]	@ (8010a70 <tx_control+0x28dc>)
 80107cc:	7812      	ldrb	r2, [r2, #0]
 80107ce:	01d2      	lsls	r2, r2, #7
 80107d0:	189a      	adds	r2, r3, r2
 80107d2:	4baf      	ldr	r3, [pc, #700]	@ (8010a90 <tx_control+0x28fc>)
 80107d4:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 80107d6:	4ba9      	ldr	r3, [pc, #676]	@ (8010a7c <tx_control+0x28e8>)
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	4bae      	ldr	r3, [pc, #696]	@ (8010a94 <tx_control+0x2900>)
 80107dc:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 80107de:	f7f6 fc67 	bl	80070b0 <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 80107e2:	4bad      	ldr	r3, [pc, #692]	@ (8010a98 <tx_control+0x2904>)
 80107e4:	881a      	ldrh	r2, [r3, #0]
 80107e6:	4bad      	ldr	r3, [pc, #692]	@ (8010a9c <tx_control+0x2908>)
 80107e8:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 80107ea:	4bad      	ldr	r3, [pc, #692]	@ (8010aa0 <tx_control+0x290c>)
 80107ec:	4aad      	ldr	r2, [pc, #692]	@ (8010aa4 <tx_control+0x2910>)
 80107ee:	601a      	str	r2, [r3, #0]
		reeCntRegEVENT = cntReg;
 80107f0:	4baa      	ldr	r3, [pc, #680]	@ (8010a9c <tx_control+0x2908>)
 80107f2:	881a      	ldrh	r2, [r3, #0]
 80107f4:	4bac      	ldr	r3, [pc, #688]	@ (8010aa8 <tx_control+0x2914>)
 80107f6:	801a      	strh	r2, [r3, #0]

		save_cntReg();		// call	save_cntReg
 80107f8:	f7f6 fb5e 	bl	8006eb8 <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 80107fc:	f7f6 fb6e 	bl	8006edc <save_timeUNIX>
 8010800:	e000      	b.n	8010804 <tx_control+0x2670>
			goto tx_wifi_eventLogger_cmd;
 8010802:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_cmd:
		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 8010804:	4b8c      	ldr	r3, [pc, #560]	@ (8010a38 <tx_control+0x28a4>)
 8010806:	2240      	movs	r2, #64	@ 0x40
 8010808:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 801080a:	4b8b      	ldr	r3, [pc, #556]	@ (8010a38 <tx_control+0x28a4>)
 801080c:	2286      	movs	r2, #134	@ 0x86
 801080e:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
		//bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = reePlantilla[eeversion1];
 8010810:	4ba6      	ldr	r3, [pc, #664]	@ (8010aac <tx_control+0x2918>)
 8010812:	227b      	movs	r2, #123	@ 0x7b
 8010814:	5c9a      	ldrb	r2, [r3, r2]
 8010816:	4b88      	ldr	r3, [pc, #544]	@ (8010a38 <tx_control+0x28a4>)
 8010818:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion2];
 801081a:	4ba4      	ldr	r3, [pc, #656]	@ (8010aac <tx_control+0x2918>)
 801081c:	227c      	movs	r2, #124	@ 0x7c
 801081e:	5c9a      	ldrb	r2, [r3, r2]
 8010820:	4b85      	ldr	r3, [pc, #532]	@ (8010a38 <tx_control+0x28a4>)
 8010822:	70da      	strb	r2, [r3, #3]
		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 8010824:	4ba2      	ldr	r3, [pc, #648]	@ (8010ab0 <tx_control+0x291c>)
 8010826:	881b      	ldrh	r3, [r3, #0]
 8010828:	0a1b      	lsrs	r3, r3, #8
 801082a:	b29b      	uxth	r3, r3
 801082c:	b2da      	uxtb	r2, r3
 801082e:	4b82      	ldr	r3, [pc, #520]	@ (8010a38 <tx_control+0x28a4>)
 8010830:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 8010832:	4b9f      	ldr	r3, [pc, #636]	@ (8010ab0 <tx_control+0x291c>)
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	b2da      	uxtb	r2, r3
 8010838:	4b7f      	ldr	r3, [pc, #508]	@ (8010a38 <tx_control+0x28a4>)
 801083a:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 801083c:	4b9d      	ldr	r3, [pc, #628]	@ (8010ab4 <tx_control+0x2920>)
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	0a1b      	lsrs	r3, r3, #8
 8010842:	b29b      	uxth	r3, r3
 8010844:	b2da      	uxtb	r2, r3
 8010846:	4b7c      	ldr	r3, [pc, #496]	@ (8010a38 <tx_control+0x28a4>)
 8010848:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 801084a:	4b9a      	ldr	r3, [pc, #616]	@ (8010ab4 <tx_control+0x2920>)
 801084c:	881b      	ldrh	r3, [r3, #0]
 801084e:	b2da      	uxtb	r2, r3
 8010850:	4b79      	ldr	r3, [pc, #484]	@ (8010a38 <tx_control+0x28a4>)
 8010852:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;

		bufferWifiTx[8] = reeLat1;
 8010854:	4b98      	ldr	r3, [pc, #608]	@ (8010ab8 <tx_control+0x2924>)
 8010856:	781a      	ldrb	r2, [r3, #0]
 8010858:	4b77      	ldr	r3, [pc, #476]	@ (8010a38 <tx_control+0x28a4>)
 801085a:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = reeLat2;
 801085c:	4b97      	ldr	r3, [pc, #604]	@ (8010abc <tx_control+0x2928>)
 801085e:	781a      	ldrb	r2, [r3, #0]
 8010860:	4b75      	ldr	r3, [pc, #468]	@ (8010a38 <tx_control+0x28a4>)
 8010862:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = reeLat3;
 8010864:	4b96      	ldr	r3, [pc, #600]	@ (8010ac0 <tx_control+0x292c>)
 8010866:	781a      	ldrb	r2, [r3, #0]
 8010868:	4b73      	ldr	r3, [pc, #460]	@ (8010a38 <tx_control+0x28a4>)
 801086a:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = reeLat4;
 801086c:	4b95      	ldr	r3, [pc, #596]	@ (8010ac4 <tx_control+0x2930>)
 801086e:	781a      	ldrb	r2, [r3, #0]
 8010870:	4b71      	ldr	r3, [pc, #452]	@ (8010a38 <tx_control+0x28a4>)
 8010872:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = reeLong1;
 8010874:	4b94      	ldr	r3, [pc, #592]	@ (8010ac8 <tx_control+0x2934>)
 8010876:	781a      	ldrb	r2, [r3, #0]
 8010878:	4b6f      	ldr	r3, [pc, #444]	@ (8010a38 <tx_control+0x28a4>)
 801087a:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = reeLong2;
 801087c:	4b93      	ldr	r3, [pc, #588]	@ (8010acc <tx_control+0x2938>)
 801087e:	781a      	ldrb	r2, [r3, #0]
 8010880:	4b6d      	ldr	r3, [pc, #436]	@ (8010a38 <tx_control+0x28a4>)
 8010882:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = reeLong3;
 8010884:	4b92      	ldr	r3, [pc, #584]	@ (8010ad0 <tx_control+0x293c>)
 8010886:	781a      	ldrb	r2, [r3, #0]
 8010888:	4b6b      	ldr	r3, [pc, #428]	@ (8010a38 <tx_control+0x28a4>)
 801088a:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = reeLong4;
 801088c:	4b91      	ldr	r3, [pc, #580]	@ (8010ad4 <tx_control+0x2940>)
 801088e:	781a      	ldrb	r2, [r3, #0]
 8010890:	4b69      	ldr	r3, [pc, #420]	@ (8010a38 <tx_control+0x28a4>)
 8010892:	73da      	strb	r2, [r3, #15]


		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010894:	4b6a      	ldr	r3, [pc, #424]	@ (8010a40 <tx_control+0x28ac>)
 8010896:	4a68      	ldr	r2, [pc, #416]	@ (8010a38 <tx_control+0x28a4>)
 8010898:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 801089a:	4b6a      	ldr	r3, [pc, #424]	@ (8010a44 <tx_control+0x28b0>)
 801089c:	4a66      	ldr	r2, [pc, #408]	@ (8010a38 <tx_control+0x28a4>)
 801089e:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 80108a0:	4b69      	ldr	r3, [pc, #420]	@ (8010a48 <tx_control+0x28b4>)
 80108a2:	4a8d      	ldr	r2, [pc, #564]	@ (8010ad8 <tx_control+0x2944>)
 80108a4:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 80108a6:	4b6a      	ldr	r3, [pc, #424]	@ (8010a50 <tx_control+0x28bc>)
 80108a8:	2210      	movs	r2, #16
 80108aa:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80108ac:	4b69      	ldr	r3, [pc, #420]	@ (8010a54 <tx_control+0x28c0>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80108b2:	4b69      	ldr	r3, [pc, #420]	@ (8010a58 <tx_control+0x28c4>)
 80108b4:	2200      	movs	r2, #0
 80108b6:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80108b8:	4b66      	ldr	r3, [pc, #408]	@ (8010a54 <tx_control+0x28c0>)
 80108ba:	2201      	movs	r2, #1
 80108bc:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 80108be:	4b67      	ldr	r3, [pc, #412]	@ (8010a5c <tx_control+0x28c8>)
 80108c0:	2255      	movs	r2, #85	@ 0x55
 80108c2:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 80108c4:	4b66      	ldr	r3, [pc, #408]	@ (8010a60 <tx_control+0x28cc>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	701a      	strb	r2, [r3, #0]

//		;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
//		ldw		X,cntRegTxWifi
//		tnzw	X
//		jrne	tx_wifi_eventLogger_noInit
		if(cntRegTxWifi)
 80108ca:	4b66      	ldr	r3, [pc, #408]	@ (8010a64 <tx_control+0x28d0>)
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10b      	bne.n	80108ea <tx_control+0x2756>

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 80108d2:	4b66      	ldr	r3, [pc, #408]	@ (8010a6c <tx_control+0x28d8>)
 80108d4:	781a      	ldrb	r2, [r3, #0]
 80108d6:	4b54      	ldr	r3, [pc, #336]	@ (8010a28 <tx_control+0x2894>)
 80108d8:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 80108da:	4b66      	ldr	r3, [pc, #408]	@ (8010a74 <tx_control+0x28e0>)
 80108dc:	781a      	ldrb	r2, [r3, #0]
 80108de:	4b53      	ldr	r3, [pc, #332]	@ (8010a2c <tx_control+0x2898>)
 80108e0:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 80108e2:	4b60      	ldr	r3, [pc, #384]	@ (8010a64 <tx_control+0x28d0>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	801a      	strh	r2, [r3, #0]
 80108e8:	e000      	b.n	80108ec <tx_control+0x2758>
			goto tx_wifi_eventLogger_noInit;
 80108ea:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_noInit:
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 80108ec:	4b7b      	ldr	r3, [pc, #492]	@ (8010adc <tx_control+0x2948>)
 80108ee:	2203      	movs	r2, #3
 80108f0:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegEVENT)==0){
		//	goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegEVENT);
		numRegTx = 1439;
 80108f2:	4b7b      	ldr	r3, [pc, #492]	@ (8010ae0 <tx_control+0x294c>)
 80108f4:	4a7b      	ldr	r2, [pc, #492]	@ (8010ae4 <tx_control+0x2950>)
 80108f6:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 80108f8:	f000 fd7a 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 80108fc:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 80108fe:	4b58      	ldr	r3, [pc, #352]	@ (8010a60 <tx_control+0x28cc>)
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	2b3d      	cmp	r3, #61	@ 0x3d
 8010904:	d00e      	beq.n	8010924 <tx_control+0x2790>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		codeTX = 0;
 8010906:	4b56      	ldr	r3, [pc, #344]	@ (8010a60 <tx_control+0x28cc>)
 8010908:	2200      	movs	r2, #0
 801090a:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 801090c:	4b73      	ldr	r3, [pc, #460]	@ (8010adc <tx_control+0x2948>)
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d104      	bne.n	801091e <tx_control+0x278a>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 8010914:	4b54      	ldr	r3, [pc, #336]	@ (8010a68 <tx_control+0x28d4>)
 8010916:	2200      	movs	r2, #0
 8010918:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 801091a:	f000 fd69 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 801091e:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 8010920:	f000 fd66 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 8010924:	46c0      	nop			@ (mov r8, r8)
//		; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
//		ldw		X,#300;
//		ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
//		ldw		X,#300;
//		ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
		timeoutTWF = 300;
 8010926:	4b70      	ldr	r3, [pc, #448]	@ (8010ae8 <tx_control+0x2954>)
 8010928:	2296      	movs	r2, #150	@ 0x96
 801092a:	0052      	lsls	r2, r2, #1
 801092c:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 801092e:	4b6f      	ldr	r3, [pc, #444]	@ (8010aec <tx_control+0x2958>)
 8010930:	2296      	movs	r2, #150	@ 0x96
 8010932:	0052      	lsls	r2, r2, #1
 8010934:	801a      	strh	r2, [r3, #0]
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 8010936:	4b69      	ldr	r3, [pc, #420]	@ (8010adc <tx_control+0x2948>)
 8010938:	2203      	movs	r2, #3
 801093a:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 801093c:	4b68      	ldr	r3, [pc, #416]	@ (8010ae0 <tx_control+0x294c>)
 801093e:	881a      	ldrh	r2, [r3, #0]
 8010940:	4b48      	ldr	r3, [pc, #288]	@ (8010a64 <tx_control+0x28d0>)
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	429a      	cmp	r2, r3
 8010946:	d314      	bcc.n	8010972 <tx_control+0x27de>
//		cntReg = 0;// ldw		cntReg,X
//		// ldw		X,#eeCntRegEVENT
//		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
//		save_cntReg();// call	save_cntReg

tx_wifi_eventLogger_END:
 8010948:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
		flagsWIFI[f_eventLoggerSend] = 0;
 801094a:	4b47      	ldr	r3, [pc, #284]	@ (8010a68 <tx_control+0x28d4>)
 801094c:	2200      	movs	r2, #0
 801094e:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 8010950:	4b45      	ldr	r3, [pc, #276]	@ (8010a68 <tx_control+0x28d4>)
 8010952:	2200      	movs	r2, #0
 8010954:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 8010956:	4b66      	ldr	r3, [pc, #408]	@ (8010af0 <tx_control+0x295c>)
 8010958:	220a      	movs	r2, #10
 801095a:	701a      	strb	r2, [r3, #0]
		blockLoggWifi = 0;//clr		blockLoggWifi
 801095c:	4b32      	ldr	r3, [pc, #200]	@ (8010a28 <tx_control+0x2894>)
 801095e:	2200      	movs	r2, #0
 8010960:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;//clr		byteLoggWifi
 8010962:	4b32      	ldr	r3, [pc, #200]	@ (8010a2c <tx_control+0x2898>)
 8010964:	2200      	movs	r2, #0
 8010966:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 8010968:	4b3e      	ldr	r3, [pc, #248]	@ (8010a64 <tx_control+0x28d0>)
 801096a:	2200      	movs	r2, #0
 801096c:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;//jp		end_tx_wifi
 801096e:	f000 fd3f 	bl	80113f0 <tx_control+0x325c>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 8010972:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 8010974:	4b30      	ldr	r3, [pc, #192]	@ (8010a38 <tx_control+0x28a4>)
 8010976:	2240      	movs	r2, #64	@ 0x40
 8010978:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 801097a:	4b2f      	ldr	r3, [pc, #188]	@ (8010a38 <tx_control+0x28a4>)
 801097c:	2284      	movs	r2, #132	@ 0x84
 801097e:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010980:	4b2d      	ldr	r3, [pc, #180]	@ (8010a38 <tx_control+0x28a4>)
 8010982:	2203      	movs	r2, #3
 8010984:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = reePlantilla[eeversion1];
 8010986:	4b49      	ldr	r3, [pc, #292]	@ (8010aac <tx_control+0x2918>)
 8010988:	227b      	movs	r2, #123	@ 0x7b
 801098a:	5c9a      	ldrb	r2, [r3, r2]
 801098c:	4b2a      	ldr	r3, [pc, #168]	@ (8010a38 <tx_control+0x28a4>)
 801098e:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8010990:	4b46      	ldr	r3, [pc, #280]	@ (8010aac <tx_control+0x2918>)
 8010992:	227c      	movs	r2, #124	@ 0x7c
 8010994:	5c9a      	ldrb	r2, [r3, r2]
 8010996:	4b28      	ldr	r3, [pc, #160]	@ (8010a38 <tx_control+0x28a4>)
 8010998:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 801099a:	4b24      	ldr	r3, [pc, #144]	@ (8010a2c <tx_control+0x2898>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d112      	bne.n	80109c8 <tx_control+0x2834>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 80109a2:	4b22      	ldr	r3, [pc, #136]	@ (8010a2c <tx_control+0x2898>)
 80109a4:	227e      	movs	r2, #126	@ 0x7e
 80109a6:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 80109a8:	4b1f      	ldr	r3, [pc, #124]	@ (8010a28 <tx_control+0x2894>)
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d103      	bne.n	80109b8 <tx_control+0x2824>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 80109b0:	4b1d      	ldr	r3, [pc, #116]	@ (8010a28 <tx_control+0x2894>)
 80109b2:	22a0      	movs	r2, #160	@ 0xa0
 80109b4:	701a      	strb	r2, [r3, #0]
 80109b6:	e000      	b.n	80109ba <tx_control+0x2826>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 80109b8:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 80109ba:	4b1b      	ldr	r3, [pc, #108]	@ (8010a28 <tx_control+0x2894>)
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	3b01      	subs	r3, #1
 80109c0:	b2da      	uxtb	r2, r3
 80109c2:	4b19      	ldr	r3, [pc, #100]	@ (8010a28 <tx_control+0x2894>)
 80109c4:	701a      	strb	r2, [r3, #0]
 80109c6:	e000      	b.n	80109ca <tx_control+0x2836>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 80109c8:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 80109ca:	4b4a      	ldr	r3, [pc, #296]	@ (8010af4 <tx_control+0x2960>)
 80109cc:	643b      	str	r3, [r7, #64]	@ 0x40
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 80109ce:	4b17      	ldr	r3, [pc, #92]	@ (8010a2c <tx_control+0x2898>)
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	001a      	movs	r2, r3
 80109d4:	4b14      	ldr	r3, [pc, #80]	@ (8010a28 <tx_control+0x2894>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	01db      	lsls	r3, r3, #7
 80109da:	18d2      	adds	r2, r2, r3
 80109dc:	4b2a      	ldr	r3, [pc, #168]	@ (8010a88 <tx_control+0x28f4>)
 80109de:	18d3      	adds	r3, r2, r3
 80109e0:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 80109e2:	4b14      	ldr	r3, [pc, #80]	@ (8010a34 <tx_control+0x28a0>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 80109e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109ea:	3b01      	subs	r3, #1
 80109ec:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 80109ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109f0:	3b01      	subs	r3, #1
 80109f2:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 80109f4:	4b0d      	ldr	r3, [pc, #52]	@ (8010a2c <tx_control+0x2898>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	3b01      	subs	r3, #1
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	4b0b      	ldr	r3, [pc, #44]	@ (8010a2c <tx_control+0x2898>)
 80109fe:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 8010a00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a02:	2380      	movs	r3, #128	@ 0x80
 8010a04:	025b      	lsls	r3, r3, #9
 8010a06:	5cd2      	ldrb	r2, [r2, r3]
 8010a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a0a:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 8010a0c:	4b09      	ldr	r3, [pc, #36]	@ (8010a34 <tx_control+0x28a0>)
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	3301      	adds	r3, #1
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	4b07      	ldr	r3, [pc, #28]	@ (8010a34 <tx_control+0x28a0>)
 8010a16:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 8010a18:	4b06      	ldr	r3, [pc, #24]	@ (8010a34 <tx_control+0x28a0>)
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	2b0d      	cmp	r3, #13
 8010a1e:	d86b      	bhi.n	8010af8 <tx_control+0x2964>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 8010a20:	e7e2      	b.n	80109e8 <tx_control+0x2854>
 8010a22:	46c0      	nop			@ (mov r8, r8)
 8010a24:	20001ff2 	.word	0x20001ff2
 8010a28:	20002002 	.word	0x20002002
 8010a2c:	20002003 	.word	0x20002003
 8010a30:	0803c000 	.word	0x0803c000
 8010a34:	20000b53 	.word	0x20000b53
 8010a38:	20001fe4 	.word	0x20001fe4
 8010a3c:	20000b52 	.word	0x20000b52
 8010a40:	20001ea0 	.word	0x20001ea0
 8010a44:	20001e98 	.word	0x20001e98
 8010a48:	20001e9c 	.word	0x20001e9c
 8010a4c:	20001ff3 	.word	0x20001ff3
 8010a50:	20001ebc 	.word	0x20001ebc
 8010a54:	20001ea8 	.word	0x20001ea8
 8010a58:	20001ec0 	.word	0x20001ec0
 8010a5c:	20001ea5 	.word	0x20001ea5
 8010a60:	20001eb0 	.word	0x20001eb0
 8010a64:	20002004 	.word	0x20002004
 8010a68:	20001fdc 	.word	0x20001fdc
 8010a6c:	20000e37 	.word	0x20000e37
 8010a70:	20000e22 	.word	0x20000e22
 8010a74:	20000e36 	.word	0x20000e36
 8010a78:	20000e23 	.word	0x20000e23
 8010a7c:	20000e2c 	.word	0x20000e2c
 8010a80:	20000d94 	.word	0x20000d94
 8010a84:	20000e28 	.word	0x20000e28
 8010a88:	08037000 	.word	0x08037000
 8010a8c:	20000e14 	.word	0x20000e14
 8010a90:	20000e18 	.word	0x20000e18
 8010a94:	20000e1c 	.word	0x20000e1c
 8010a98:	200020c8 	.word	0x200020c8
 8010a9c:	200020ca 	.word	0x200020ca
 8010aa0:	200020cc 	.word	0x200020cc
 8010aa4:	0803f812 	.word	0x0803f812
 8010aa8:	20000d10 	.word	0x20000d10
 8010aac:	20000c88 	.word	0x20000c88
 8010ab0:	20001e3c 	.word	0x20001e3c
 8010ab4:	20001e3e 	.word	0x20001e3e
 8010ab8:	200001bb 	.word	0x200001bb
 8010abc:	200001bc 	.word	0x200001bc
 8010ac0:	200001bd 	.word	0x200001bd
 8010ac4:	200001be 	.word	0x200001be
 8010ac8:	200001bf 	.word	0x200001bf
 8010acc:	200001c0 	.word	0x200001c0
 8010ad0:	200001c1 	.word	0x200001c1
 8010ad4:	200001c2 	.word	0x200001c2
 8010ad8:	20001ff4 	.word	0x20001ff4
 8010adc:	20002006 	.word	0x20002006
 8010ae0:	200020c4 	.word	0x200020c4
 8010ae4:	0000059f 	.word	0x0000059f
 8010ae8:	20001fd8 	.word	0x20001fd8
 8010aec:	20002188 	.word	0x20002188
 8010af0:	20002007 	.word	0x20002007
 8010af4:	20001ff7 	.word	0x20001ff7
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 8010af8:	4bdf      	ldr	r3, [pc, #892]	@ (8010e78 <tx_control+0x2ce4>)
 8010afa:	7c9a      	ldrb	r2, [r3, #18]
 8010afc:	4bdf      	ldr	r3, [pc, #892]	@ (8010e7c <tx_control+0x2ce8>)
 8010afe:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 8010b00:	4bdd      	ldr	r3, [pc, #884]	@ (8010e78 <tx_control+0x2ce4>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 8010b06:	4bdd      	ldr	r3, [pc, #884]	@ (8010e7c <tx_control+0x2ce8>)
 8010b08:	781a      	ldrb	r2, [r3, #0]
 8010b0a:	4bdb      	ldr	r3, [pc, #876]	@ (8010e78 <tx_control+0x2ce4>)
 8010b0c:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8010b0e:	4bdc      	ldr	r3, [pc, #880]	@ (8010e80 <tx_control+0x2cec>)
 8010b10:	4ad9      	ldr	r2, [pc, #868]	@ (8010e78 <tx_control+0x2ce4>)
 8010b12:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 8010b14:	4bdb      	ldr	r3, [pc, #876]	@ (8010e84 <tx_control+0x2cf0>)
 8010b16:	4ad8      	ldr	r2, [pc, #864]	@ (8010e78 <tx_control+0x2ce4>)
 8010b18:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 8010b1a:	4bdb      	ldr	r3, [pc, #876]	@ (8010e88 <tx_control+0x2cf4>)
 8010b1c:	4adb      	ldr	r2, [pc, #876]	@ (8010e8c <tx_control+0x2cf8>)
 8010b1e:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 8010b20:	4bdb      	ldr	r3, [pc, #876]	@ (8010e90 <tx_control+0x2cfc>)
 8010b22:	2214      	movs	r2, #20
 8010b24:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010b26:	4bdb      	ldr	r3, [pc, #876]	@ (8010e94 <tx_control+0x2d00>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010b2c:	4bda      	ldr	r3, [pc, #872]	@ (8010e98 <tx_control+0x2d04>)
 8010b2e:	2200      	movs	r2, #0
 8010b30:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010b32:	4bd8      	ldr	r3, [pc, #864]	@ (8010e94 <tx_control+0x2d00>)
 8010b34:	2201      	movs	r2, #1
 8010b36:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010b38:	4bd8      	ldr	r3, [pc, #864]	@ (8010e9c <tx_control+0x2d08>)
 8010b3a:	2255      	movs	r2, #85	@ 0x55
 8010b3c:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 8010b3e:	4bd8      	ldr	r3, [pc, #864]	@ (8010ea0 <tx_control+0x2d0c>)
 8010b40:	2200      	movs	r2, #0
 8010b42:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 8010b44:	4bd7      	ldr	r3, [pc, #860]	@ (8010ea4 <tx_control+0x2d10>)
 8010b46:	881b      	ldrh	r3, [r3, #0]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	4bd5      	ldr	r3, [pc, #852]	@ (8010ea4 <tx_control+0x2d10>)
 8010b4e:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 8010b50:	f000 fc4e 	bl	80113f0 <tx_control+0x325c>
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 8010b54:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 8010b56:	4bd4      	ldr	r3, [pc, #848]	@ (8010ea8 <tx_control+0x2d14>)
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d001      	beq.n	8010b62 <tx_control+0x29ce>
 8010b5e:	f000 fc40 	bl	80113e2 <tx_control+0x324e>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 8010b62:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 8010b64:	4bcd      	ldr	r3, [pc, #820]	@ (8010e9c <tx_control+0x2d08>)
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d001      	beq.n	8010b70 <tx_control+0x29dc>
 8010b6c:	f000 fc3c 	bl	80113e8 <tx_control+0x3254>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 8010b70:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 8010b72:	4bce      	ldr	r3, [pc, #824]	@ (8010eac <tx_control+0x2d18>)
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d147      	bne.n	8010c0a <tx_control+0x2a76>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 8010b7a:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 8010b7c:	4bcc      	ldr	r3, [pc, #816]	@ (8010eb0 <tx_control+0x2d1c>)
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d100      	bne.n	8010b86 <tx_control+0x29f2>
 8010b84:	e07f      	b.n	8010c86 <tx_control+0x2af2>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 8010b86:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 8010b88:	4bca      	ldr	r3, [pc, #808]	@ (8010eb4 <tx_control+0x2d20>)
 8010b8a:	2240      	movs	r2, #64	@ 0x40
 8010b8c:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 8010b8e:	4bc9      	ldr	r3, [pc, #804]	@ (8010eb4 <tx_control+0x2d20>)
 8010b90:	2282      	movs	r2, #130	@ 0x82
 8010b92:	705a      	strb	r2, [r3, #1]
		//BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
		//BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
		BloqEventPuerta[softVersion1EP] = reePlantilla[eeversion1];
 8010b94:	4bc8      	ldr	r3, [pc, #800]	@ (8010eb8 <tx_control+0x2d24>)
 8010b96:	227b      	movs	r2, #123	@ 0x7b
 8010b98:	5c9a      	ldrb	r2, [r3, r2]
 8010b9a:	4bc6      	ldr	r3, [pc, #792]	@ (8010eb4 <tx_control+0x2d20>)
 8010b9c:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = reePlantilla[eeversion2];
 8010b9e:	4bc6      	ldr	r3, [pc, #792]	@ (8010eb8 <tx_control+0x2d24>)
 8010ba0:	227c      	movs	r2, #124	@ 0x7c
 8010ba2:	5c9a      	ldrb	r2, [r3, r2]
 8010ba4:	4bc3      	ldr	r3, [pc, #780]	@ (8010eb4 <tx_control+0x2d20>)
 8010ba6:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 8010ba8:	4bc4      	ldr	r3, [pc, #784]	@ (8010ebc <tx_control+0x2d28>)
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	0a1b      	lsrs	r3, r3, #8
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	b2da      	uxtb	r2, r3
 8010bb2:	4bc0      	ldr	r3, [pc, #768]	@ (8010eb4 <tx_control+0x2d20>)
 8010bb4:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010bb6:	4bc1      	ldr	r3, [pc, #772]	@ (8010ebc <tx_control+0x2d28>)
 8010bb8:	881b      	ldrh	r3, [r3, #0]
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	4bbd      	ldr	r3, [pc, #756]	@ (8010eb4 <tx_control+0x2d20>)
 8010bbe:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8010bc0:	4bbf      	ldr	r3, [pc, #764]	@ (8010ec0 <tx_control+0x2d2c>)
 8010bc2:	881b      	ldrh	r3, [r3, #0]
 8010bc4:	0a1b      	lsrs	r3, r3, #8
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	b2da      	uxtb	r2, r3
 8010bca:	4bba      	ldr	r3, [pc, #744]	@ (8010eb4 <tx_control+0x2d20>)
 8010bcc:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010bce:	4bbc      	ldr	r3, [pc, #752]	@ (8010ec0 <tx_control+0x2d2c>)
 8010bd0:	881b      	ldrh	r3, [r3, #0]
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	4bb7      	ldr	r3, [pc, #732]	@ (8010eb4 <tx_control+0x2d20>)
 8010bd6:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 8010bd8:	4bb6      	ldr	r3, [pc, #728]	@ (8010eb4 <tx_control+0x2d20>)
 8010bda:	2201      	movs	r2, #1
 8010bdc:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 8010bde:	4bb9      	ldr	r3, [pc, #740]	@ (8010ec4 <tx_control+0x2d30>)
 8010be0:	781a      	ldrb	r2, [r3, #0]
 8010be2:	4bb4      	ldr	r3, [pc, #720]	@ (8010eb4 <tx_control+0x2d20>)
 8010be4:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 8010be6:	4bb8      	ldr	r3, [pc, #736]	@ (8010ec8 <tx_control+0x2d34>)
 8010be8:	781a      	ldrb	r2, [r3, #0]
 8010bea:	4bb2      	ldr	r3, [pc, #712]	@ (8010eb4 <tx_control+0x2d20>)
 8010bec:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 8010bee:	4bb7      	ldr	r3, [pc, #732]	@ (8010ecc <tx_control+0x2d38>)
 8010bf0:	781a      	ldrb	r2, [r3, #0]
 8010bf2:	4bb0      	ldr	r3, [pc, #704]	@ (8010eb4 <tx_control+0x2d20>)
 8010bf4:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 8010bf6:	4bad      	ldr	r3, [pc, #692]	@ (8010eac <tx_control+0x2d18>)
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 8010bfc:	4bb4      	ldr	r3, [pc, #720]	@ (8010ed0 <tx_control+0x2d3c>)
 8010bfe:	2250      	movs	r2, #80	@ 0x50
 8010c00:	5c9b      	ldrb	r3, [r3, r2]
 8010c02:	001a      	movs	r2, r3
 8010c04:	4bb3      	ldr	r3, [pc, #716]	@ (8010ed4 <tx_control+0x2d40>)
 8010c06:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 8010c08:	e040      	b.n	8010c8c <tx_control+0x2af8>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8010c0a:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 8010c0c:	4ba8      	ldr	r3, [pc, #672]	@ (8010eb0 <tx_control+0x2d1c>)
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d13a      	bne.n	8010c8a <tx_control+0x2af6>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 8010c14:	4baf      	ldr	r3, [pc, #700]	@ (8010ed4 <tx_control+0x2d40>)
 8010c16:	881b      	ldrh	r3, [r3, #0]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d003      	beq.n	8010c24 <tx_control+0x2a90>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8010eac <tx_control+0x2d18>)
 8010c1e:	2200      	movs	r2, #0
 8010c20:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 8010c22:	e033      	b.n	8010c8c <tx_control+0x2af8>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 8010c24:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 8010c26:	4ba5      	ldr	r3, [pc, #660]	@ (8010ebc <tx_control+0x2d28>)
 8010c28:	881b      	ldrh	r3, [r3, #0]
 8010c2a:	0a1b      	lsrs	r3, r3, #8
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	b2da      	uxtb	r2, r3
 8010c30:	4ba0      	ldr	r3, [pc, #640]	@ (8010eb4 <tx_control+0x2d20>)
 8010c32:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 8010c34:	4ba1      	ldr	r3, [pc, #644]	@ (8010ebc <tx_control+0x2d28>)
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	4b9e      	ldr	r3, [pc, #632]	@ (8010eb4 <tx_control+0x2d20>)
 8010c3c:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 8010c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8010ec0 <tx_control+0x2d2c>)
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	0a1b      	lsrs	r3, r3, #8
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	4b9a      	ldr	r3, [pc, #616]	@ (8010eb4 <tx_control+0x2d20>)
 8010c4a:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8010c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8010ec0 <tx_control+0x2d2c>)
 8010c4e:	881b      	ldrh	r3, [r3, #0]
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	4b98      	ldr	r3, [pc, #608]	@ (8010eb4 <tx_control+0x2d20>)
 8010c54:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8010c56:	4ba0      	ldr	r3, [pc, #640]	@ (8010ed8 <tx_control+0x2d44>)
 8010c58:	781a      	ldrb	r2, [r3, #0]
 8010c5a:	4b96      	ldr	r3, [pc, #600]	@ (8010eb4 <tx_control+0x2d20>)
 8010c5c:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 8010c5e:	4b9f      	ldr	r3, [pc, #636]	@ (8010edc <tx_control+0x2d48>)
 8010c60:	781a      	ldrb	r2, [r3, #0]
 8010c62:	4b94      	ldr	r3, [pc, #592]	@ (8010eb4 <tx_control+0x2d20>)
 8010c64:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010c66:	4b91      	ldr	r3, [pc, #580]	@ (8010eac <tx_control+0x2d18>)
 8010c68:	2200      	movs	r2, #0
 8010c6a:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 8010c6c:	4b84      	ldr	r3, [pc, #528]	@ (8010e80 <tx_control+0x2cec>)
 8010c6e:	4a9c      	ldr	r2, [pc, #624]	@ (8010ee0 <tx_control+0x2d4c>)
 8010c70:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 8010c72:	4b84      	ldr	r3, [pc, #528]	@ (8010e84 <tx_control+0x2cf0>)
 8010c74:	4a9a      	ldr	r2, [pc, #616]	@ (8010ee0 <tx_control+0x2d4c>)
 8010c76:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 8010c78:	4b83      	ldr	r3, [pc, #524]	@ (8010e88 <tx_control+0x2cf4>)
 8010c7a:	4a9a      	ldr	r2, [pc, #616]	@ (8010ee4 <tx_control+0x2d50>)
 8010c7c:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 8010c7e:	4b84      	ldr	r3, [pc, #528]	@ (8010e90 <tx_control+0x2cfc>)
 8010c80:	2212      	movs	r2, #18
 8010c82:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010c84:	e1b0      	b.n	8010fe8 <tx_control+0x2e54>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 8010c86:	46c0      	nop			@ (mov r8, r8)
 8010c88:	e000      	b.n	8010c8c <tx_control+0x2af8>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 8010c8a:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 8010c8c:	4b87      	ldr	r3, [pc, #540]	@ (8010eac <tx_control+0x2d18>)
 8010c8e:	785b      	ldrb	r3, [r3, #1]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d140      	bne.n	8010d16 <tx_control+0x2b82>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 8010c94:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 8010c96:	4b94      	ldr	r3, [pc, #592]	@ (8010ee8 <tx_control+0x2d54>)
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d071      	beq.n	8010d82 <tx_control+0x2bee>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 8010c9e:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 8010ca0:	4b92      	ldr	r3, [pc, #584]	@ (8010eec <tx_control+0x2d58>)
 8010ca2:	2240      	movs	r2, #64	@ 0x40
 8010ca4:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 8010ca6:	4b91      	ldr	r3, [pc, #580]	@ (8010eec <tx_control+0x2d58>)
 8010ca8:	2282      	movs	r2, #130	@ 0x82
 8010caa:	705a      	strb	r2, [r3, #1]
//		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
//		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
		BloqEventComp[softVersion1EC] = reePlantilla[eeversion1];
 8010cac:	4b82      	ldr	r3, [pc, #520]	@ (8010eb8 <tx_control+0x2d24>)
 8010cae:	227b      	movs	r2, #123	@ 0x7b
 8010cb0:	5c9a      	ldrb	r2, [r3, r2]
 8010cb2:	4b8e      	ldr	r3, [pc, #568]	@ (8010eec <tx_control+0x2d58>)
 8010cb4:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = reePlantilla[eeversion2];
 8010cb6:	4b80      	ldr	r3, [pc, #512]	@ (8010eb8 <tx_control+0x2d24>)
 8010cb8:	227c      	movs	r2, #124	@ 0x7c
 8010cba:	5c9a      	ldrb	r2, [r3, r2]
 8010cbc:	4b8b      	ldr	r3, [pc, #556]	@ (8010eec <tx_control+0x2d58>)
 8010cbe:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8010ebc <tx_control+0x2d28>)
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	0a1b      	lsrs	r3, r3, #8
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	b2da      	uxtb	r2, r3
 8010cca:	4b88      	ldr	r3, [pc, #544]	@ (8010eec <tx_control+0x2d58>)
 8010ccc:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010cce:	4b7b      	ldr	r3, [pc, #492]	@ (8010ebc <tx_control+0x2d28>)
 8010cd0:	881b      	ldrh	r3, [r3, #0]
 8010cd2:	b2da      	uxtb	r2, r3
 8010cd4:	4b85      	ldr	r3, [pc, #532]	@ (8010eec <tx_control+0x2d58>)
 8010cd6:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 8010cd8:	4b79      	ldr	r3, [pc, #484]	@ (8010ec0 <tx_control+0x2d2c>)
 8010cda:	881b      	ldrh	r3, [r3, #0]
 8010cdc:	0a1b      	lsrs	r3, r3, #8
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	b2da      	uxtb	r2, r3
 8010ce2:	4b82      	ldr	r3, [pc, #520]	@ (8010eec <tx_control+0x2d58>)
 8010ce4:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010ce6:	4b76      	ldr	r3, [pc, #472]	@ (8010ec0 <tx_control+0x2d2c>)
 8010ce8:	881b      	ldrh	r3, [r3, #0]
 8010cea:	b2da      	uxtb	r2, r3
 8010cec:	4b7f      	ldr	r3, [pc, #508]	@ (8010eec <tx_control+0x2d58>)
 8010cee:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 8010cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8010eec <tx_control+0x2d58>)
 8010cf2:	2202      	movs	r2, #2
 8010cf4:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8010cf6:	4b73      	ldr	r3, [pc, #460]	@ (8010ec4 <tx_control+0x2d30>)
 8010cf8:	781a      	ldrb	r2, [r3, #0]
 8010cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8010eec <tx_control+0x2d58>)
 8010cfc:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 8010cfe:	4b72      	ldr	r3, [pc, #456]	@ (8010ec8 <tx_control+0x2d34>)
 8010d00:	781a      	ldrb	r2, [r3, #0]
 8010d02:	4b7a      	ldr	r3, [pc, #488]	@ (8010eec <tx_control+0x2d58>)
 8010d04:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 8010d06:	4b71      	ldr	r3, [pc, #452]	@ (8010ecc <tx_control+0x2d38>)
 8010d08:	781a      	ldrb	r2, [r3, #0]
 8010d0a:	4b78      	ldr	r3, [pc, #480]	@ (8010eec <tx_control+0x2d58>)
 8010d0c:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 8010d0e:	4b67      	ldr	r3, [pc, #412]	@ (8010eac <tx_control+0x2d18>)
 8010d10:	2201      	movs	r2, #1
 8010d12:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 8010d14:	e038      	b.n	8010d88 <tx_control+0x2bf4>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8010d16:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 8010d18:	4b73      	ldr	r3, [pc, #460]	@ (8010ee8 <tx_control+0x2d54>)
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d132      	bne.n	8010d86 <tx_control+0x2bf2>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 8010d20:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010d22:	4b66      	ldr	r3, [pc, #408]	@ (8010ebc <tx_control+0x2d28>)
 8010d24:	881b      	ldrh	r3, [r3, #0]
 8010d26:	0a1b      	lsrs	r3, r3, #8
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	b2da      	uxtb	r2, r3
 8010d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8010eec <tx_control+0x2d58>)
 8010d2e:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010d30:	4b62      	ldr	r3, [pc, #392]	@ (8010ebc <tx_control+0x2d28>)
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	4b6d      	ldr	r3, [pc, #436]	@ (8010eec <tx_control+0x2d58>)
 8010d38:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010d3a:	4b61      	ldr	r3, [pc, #388]	@ (8010ec0 <tx_control+0x2d2c>)
 8010d3c:	881b      	ldrh	r3, [r3, #0]
 8010d3e:	0a1b      	lsrs	r3, r3, #8
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	4b69      	ldr	r3, [pc, #420]	@ (8010eec <tx_control+0x2d58>)
 8010d46:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010d48:	4b5d      	ldr	r3, [pc, #372]	@ (8010ec0 <tx_control+0x2d2c>)
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	4b67      	ldr	r3, [pc, #412]	@ (8010eec <tx_control+0x2d58>)
 8010d50:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 8010d52:	4b61      	ldr	r3, [pc, #388]	@ (8010ed8 <tx_control+0x2d44>)
 8010d54:	781a      	ldrb	r2, [r3, #0]
 8010d56:	4b65      	ldr	r3, [pc, #404]	@ (8010eec <tx_control+0x2d58>)
 8010d58:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 8010d5a:	4b60      	ldr	r3, [pc, #384]	@ (8010edc <tx_control+0x2d48>)
 8010d5c:	781a      	ldrb	r2, [r3, #0]
 8010d5e:	4b63      	ldr	r3, [pc, #396]	@ (8010eec <tx_control+0x2d58>)
 8010d60:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 8010d62:	4b52      	ldr	r3, [pc, #328]	@ (8010eac <tx_control+0x2d18>)
 8010d64:	2200      	movs	r2, #0
 8010d66:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 8010d68:	4b45      	ldr	r3, [pc, #276]	@ (8010e80 <tx_control+0x2cec>)
 8010d6a:	4a60      	ldr	r2, [pc, #384]	@ (8010eec <tx_control+0x2d58>)
 8010d6c:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 8010d6e:	4b45      	ldr	r3, [pc, #276]	@ (8010e84 <tx_control+0x2cf0>)
 8010d70:	4a5e      	ldr	r2, [pc, #376]	@ (8010eec <tx_control+0x2d58>)
 8010d72:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 8010d74:	4b44      	ldr	r3, [pc, #272]	@ (8010e88 <tx_control+0x2cf4>)
 8010d76:	4a5e      	ldr	r2, [pc, #376]	@ (8010ef0 <tx_control+0x2d5c>)
 8010d78:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010d7a:	4b45      	ldr	r3, [pc, #276]	@ (8010e90 <tx_control+0x2cfc>)
 8010d7c:	2212      	movs	r2, #18
 8010d7e:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 8010d80:	e132      	b.n	8010fe8 <tx_control+0x2e54>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 8010d82:	46c0      	nop			@ (mov r8, r8)
 8010d84:	e000      	b.n	8010d88 <tx_control+0x2bf4>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 8010d86:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 8010d88:	4b48      	ldr	r3, [pc, #288]	@ (8010eac <tx_control+0x2d18>)
 8010d8a:	789b      	ldrb	r3, [r3, #2]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d139      	bne.n	8010e04 <tx_control+0x2c70>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 8010d90:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 8010d92:	4b58      	ldr	r3, [pc, #352]	@ (8010ef4 <tx_control+0x2d60>)
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	2b03      	cmp	r3, #3
 8010d98:	d16b      	bne.n	8010e72 <tx_control+0x2cde>
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
//		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
//		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
		BloqEventDesh[softVersion1ED] = reePlantilla[eeversion1];
 8010d9a:	4b47      	ldr	r3, [pc, #284]	@ (8010eb8 <tx_control+0x2d24>)
 8010d9c:	227b      	movs	r2, #123	@ 0x7b
 8010d9e:	5c9a      	ldrb	r2, [r3, r2]
 8010da0:	4b55      	ldr	r3, [pc, #340]	@ (8010ef8 <tx_control+0x2d64>)
 8010da2:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = reePlantilla[eeversion2];
 8010da4:	4b44      	ldr	r3, [pc, #272]	@ (8010eb8 <tx_control+0x2d24>)
 8010da6:	227c      	movs	r2, #124	@ 0x7c
 8010da8:	5c9a      	ldrb	r2, [r3, r2]
 8010daa:	4b53      	ldr	r3, [pc, #332]	@ (8010ef8 <tx_control+0x2d64>)
 8010dac:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010dae:	4b43      	ldr	r3, [pc, #268]	@ (8010ebc <tx_control+0x2d28>)
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	0a1b      	lsrs	r3, r3, #8
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	b2da      	uxtb	r2, r3
 8010db8:	4b4f      	ldr	r3, [pc, #316]	@ (8010ef8 <tx_control+0x2d64>)
 8010dba:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8010ebc <tx_control+0x2d28>)
 8010dbe:	881b      	ldrh	r3, [r3, #0]
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8010ef8 <tx_control+0x2d64>)
 8010dc4:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8010ec0 <tx_control+0x2d2c>)
 8010dc8:	881b      	ldrh	r3, [r3, #0]
 8010dca:	0a1b      	lsrs	r3, r3, #8
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	b2da      	uxtb	r2, r3
 8010dd0:	4b49      	ldr	r3, [pc, #292]	@ (8010ef8 <tx_control+0x2d64>)
 8010dd2:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8010ec0 <tx_control+0x2d2c>)
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	4b47      	ldr	r3, [pc, #284]	@ (8010ef8 <tx_control+0x2d64>)
 8010ddc:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 8010dde:	4b46      	ldr	r3, [pc, #280]	@ (8010ef8 <tx_control+0x2d64>)
 8010de0:	2203      	movs	r2, #3
 8010de2:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 8010de4:	4b37      	ldr	r3, [pc, #220]	@ (8010ec4 <tx_control+0x2d30>)
 8010de6:	781a      	ldrb	r2, [r3, #0]
 8010de8:	4b43      	ldr	r3, [pc, #268]	@ (8010ef8 <tx_control+0x2d64>)
 8010dea:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 8010dec:	4b36      	ldr	r3, [pc, #216]	@ (8010ec8 <tx_control+0x2d34>)
 8010dee:	781a      	ldrb	r2, [r3, #0]
 8010df0:	4b41      	ldr	r3, [pc, #260]	@ (8010ef8 <tx_control+0x2d64>)
 8010df2:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 8010df4:	4b35      	ldr	r3, [pc, #212]	@ (8010ecc <tx_control+0x2d38>)
 8010df6:	781a      	ldrb	r2, [r3, #0]
 8010df8:	4b3f      	ldr	r3, [pc, #252]	@ (8010ef8 <tx_control+0x2d64>)
 8010dfa:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 8010dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8010eac <tx_control+0x2d18>)
 8010dfe:	2201      	movs	r2, #1
 8010e00:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 8010e02:	e07e      	b.n	8010f02 <tx_control+0x2d6e>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8010e04:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 8010e06:	4b3b      	ldr	r3, [pc, #236]	@ (8010ef4 <tx_control+0x2d60>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d100      	bne.n	8010e10 <tx_control+0x2c7c>
 8010e0e:	e077      	b.n	8010f00 <tx_control+0x2d6c>
			goto power_event_WF;
		}
desh_event_end_WF:
 8010e10:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010e12:	4b2a      	ldr	r3, [pc, #168]	@ (8010ebc <tx_control+0x2d28>)
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	0a1b      	lsrs	r3, r3, #8
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	4b36      	ldr	r3, [pc, #216]	@ (8010ef8 <tx_control+0x2d64>)
 8010e1e:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010e20:	4b26      	ldr	r3, [pc, #152]	@ (8010ebc <tx_control+0x2d28>)
 8010e22:	881b      	ldrh	r3, [r3, #0]
 8010e24:	b2da      	uxtb	r2, r3
 8010e26:	4b34      	ldr	r3, [pc, #208]	@ (8010ef8 <tx_control+0x2d64>)
 8010e28:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 8010e2a:	4b25      	ldr	r3, [pc, #148]	@ (8010ec0 <tx_control+0x2d2c>)
 8010e2c:	881b      	ldrh	r3, [r3, #0]
 8010e2e:	0a1b      	lsrs	r3, r3, #8
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	4b30      	ldr	r3, [pc, #192]	@ (8010ef8 <tx_control+0x2d64>)
 8010e36:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 8010e38:	4b21      	ldr	r3, [pc, #132]	@ (8010ec0 <tx_control+0x2d2c>)
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	b2da      	uxtb	r2, r3
 8010e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8010ef8 <tx_control+0x2d64>)
 8010e40:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 8010e42:	4b25      	ldr	r3, [pc, #148]	@ (8010ed8 <tx_control+0x2d44>)
 8010e44:	781a      	ldrb	r2, [r3, #0]
 8010e46:	4b2c      	ldr	r3, [pc, #176]	@ (8010ef8 <tx_control+0x2d64>)
 8010e48:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 8010e4a:	4b24      	ldr	r3, [pc, #144]	@ (8010edc <tx_control+0x2d48>)
 8010e4c:	781a      	ldrb	r2, [r3, #0]
 8010e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8010ef8 <tx_control+0x2d64>)
 8010e50:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 8010e52:	4b16      	ldr	r3, [pc, #88]	@ (8010eac <tx_control+0x2d18>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 8010e58:	4b09      	ldr	r3, [pc, #36]	@ (8010e80 <tx_control+0x2cec>)
 8010e5a:	4a27      	ldr	r2, [pc, #156]	@ (8010ef8 <tx_control+0x2d64>)
 8010e5c:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 8010e5e:	4b09      	ldr	r3, [pc, #36]	@ (8010e84 <tx_control+0x2cf0>)
 8010e60:	4a25      	ldr	r2, [pc, #148]	@ (8010ef8 <tx_control+0x2d64>)
 8010e62:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 8010e64:	4b08      	ldr	r3, [pc, #32]	@ (8010e88 <tx_control+0x2cf4>)
 8010e66:	4a25      	ldr	r2, [pc, #148]	@ (8010efc <tx_control+0x2d68>)
 8010e68:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010e6a:	4b09      	ldr	r3, [pc, #36]	@ (8010e90 <tx_control+0x2cfc>)
 8010e6c:	2212      	movs	r2, #18
 8010e6e:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010e70:	e0ba      	b.n	8010fe8 <tx_control+0x2e54>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	e045      	b.n	8010f02 <tx_control+0x2d6e>
 8010e76:	46c0      	nop			@ (mov r8, r8)
 8010e78:	20001fe4 	.word	0x20001fe4
 8010e7c:	20000b52 	.word	0x20000b52
 8010e80:	20001ea0 	.word	0x20001ea0
 8010e84:	20001e98 	.word	0x20001e98
 8010e88:	20001e9c 	.word	0x20001e9c
 8010e8c:	20001ff8 	.word	0x20001ff8
 8010e90:	20001ebc 	.word	0x20001ebc
 8010e94:	20001ea8 	.word	0x20001ea8
 8010e98:	20001ec0 	.word	0x20001ec0
 8010e9c:	20001ea5 	.word	0x20001ea5
 8010ea0:	20001eb0 	.word	0x20001eb0
 8010ea4:	20002004 	.word	0x20002004
 8010ea8:	20002007 	.word	0x20002007
 8010eac:	20001fc8 	.word	0x20001fc8
 8010eb0:	20000c38 	.word	0x20000c38
 8010eb4:	20001f78 	.word	0x20001f78
 8010eb8:	20000c88 	.word	0x20000c88
 8010ebc:	20001e3c 	.word	0x20001e3c
 8010ec0:	20001e3e 	.word	0x20001e3e
 8010ec4:	20000bac 	.word	0x20000bac
 8010ec8:	20000bad 	.word	0x20000bad
 8010ecc:	20000bca 	.word	0x20000bca
 8010ed0:	200000b8 	.word	0x200000b8
 8010ed4:	20001f64 	.word	0x20001f64
 8010ed8:	20000bae 	.word	0x20000bae
 8010edc:	20000baf 	.word	0x20000baf
 8010ee0:	20001fb4 	.word	0x20001fb4
 8010ee4:	20001fc5 	.word	0x20001fc5
 8010ee8:	20000ba0 	.word	0x20000ba0
 8010eec:	20001f8c 	.word	0x20001f8c
 8010ef0:	20001f9d 	.word	0x20001f9d
 8010ef4:	20000b94 	.word	0x20000b94
 8010ef8:	20001fa0 	.word	0x20001fa0
 8010efc:	20001fb1 	.word	0x20001fb1
			goto power_event_WF;
 8010f00:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 8010f02:	4bd6      	ldr	r3, [pc, #856]	@ (801125c <tx_control+0x30c8>)
 8010f04:	78db      	ldrb	r3, [r3, #3]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d067      	beq.n	8010fda <tx_control+0x2e46>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 8010f0a:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 8010f0c:	4bd4      	ldr	r3, [pc, #848]	@ (8011260 <tx_control+0x30cc>)
 8010f0e:	2240      	movs	r2, #64	@ 0x40
 8010f10:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 8010f12:	4bd3      	ldr	r3, [pc, #844]	@ (8011260 <tx_control+0x30cc>)
 8010f14:	2282      	movs	r2, #130	@ 0x82
 8010f16:	705a      	strb	r2, [r3, #1]

//		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
//		BloqEventPwrOn[softVersion2EPo] = eePlantilla[eeversion2];

		BloqEventPwrOn[softVersion1EPo] = reePlantilla[eeversion1];
 8010f18:	4bd2      	ldr	r3, [pc, #840]	@ (8011264 <tx_control+0x30d0>)
 8010f1a:	227b      	movs	r2, #123	@ 0x7b
 8010f1c:	5c9a      	ldrb	r2, [r3, r2]
 8010f1e:	4bd0      	ldr	r3, [pc, #832]	@ (8011260 <tx_control+0x30cc>)
 8010f20:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion2EPo] = reePlantilla[eeversion2];
 8010f22:	4bd0      	ldr	r3, [pc, #832]	@ (8011264 <tx_control+0x30d0>)
 8010f24:	227c      	movs	r2, #124	@ 0x7c
 8010f26:	5c9a      	ldrb	r2, [r3, r2]
 8010f28:	4bcd      	ldr	r3, [pc, #820]	@ (8011260 <tx_control+0x30cc>)
 8010f2a:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010f2c:	4bce      	ldr	r3, [pc, #824]	@ (8011268 <tx_control+0x30d4>)
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	0a1b      	lsrs	r3, r3, #8
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	b2da      	uxtb	r2, r3
 8010f36:	4bca      	ldr	r3, [pc, #808]	@ (8011260 <tx_control+0x30cc>)
 8010f38:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010f3a:	4bcb      	ldr	r3, [pc, #812]	@ (8011268 <tx_control+0x30d4>)
 8010f3c:	881b      	ldrh	r3, [r3, #0]
 8010f3e:	b2da      	uxtb	r2, r3
 8010f40:	4bc7      	ldr	r3, [pc, #796]	@ (8011260 <tx_control+0x30cc>)
 8010f42:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010f44:	4bc9      	ldr	r3, [pc, #804]	@ (801126c <tx_control+0x30d8>)
 8010f46:	881b      	ldrh	r3, [r3, #0]
 8010f48:	0a1b      	lsrs	r3, r3, #8
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	4bc4      	ldr	r3, [pc, #784]	@ (8011260 <tx_control+0x30cc>)
 8010f50:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010f52:	4bc6      	ldr	r3, [pc, #792]	@ (801126c <tx_control+0x30d8>)
 8010f54:	881b      	ldrh	r3, [r3, #0]
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	4bc1      	ldr	r3, [pc, #772]	@ (8011260 <tx_control+0x30cc>)
 8010f5a:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 8010f5c:	4bc0      	ldr	r3, [pc, #768]	@ (8011260 <tx_control+0x30cc>)
 8010f5e:	2204      	movs	r2, #4
 8010f60:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 8010f62:	4bc3      	ldr	r3, [pc, #780]	@ (8011270 <tx_control+0x30dc>)
 8010f64:	781a      	ldrb	r2, [r3, #0]
 8010f66:	4bbe      	ldr	r3, [pc, #760]	@ (8011260 <tx_control+0x30cc>)
 8010f68:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 8010f6a:	4bc2      	ldr	r3, [pc, #776]	@ (8011274 <tx_control+0x30e0>)
 8010f6c:	781a      	ldrb	r2, [r3, #0]
 8010f6e:	4bbc      	ldr	r3, [pc, #752]	@ (8011260 <tx_control+0x30cc>)
 8010f70:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 8010f72:	4bc1      	ldr	r3, [pc, #772]	@ (8011278 <tx_control+0x30e4>)
 8010f74:	781a      	ldrb	r2, [r3, #0]
 8010f76:	4bba      	ldr	r3, [pc, #744]	@ (8011260 <tx_control+0x30cc>)
 8010f78:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010f7a:	4bbb      	ldr	r3, [pc, #748]	@ (8011268 <tx_control+0x30d4>)
 8010f7c:	881b      	ldrh	r3, [r3, #0]
 8010f7e:	0a1b      	lsrs	r3, r3, #8
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	b2da      	uxtb	r2, r3
 8010f84:	4bb6      	ldr	r3, [pc, #728]	@ (8011260 <tx_control+0x30cc>)
 8010f86:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010f88:	4bb7      	ldr	r3, [pc, #732]	@ (8011268 <tx_control+0x30d4>)
 8010f8a:	881b      	ldrh	r3, [r3, #0]
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	4bb4      	ldr	r3, [pc, #720]	@ (8011260 <tx_control+0x30cc>)
 8010f90:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 8010f92:	4bb6      	ldr	r3, [pc, #728]	@ (801126c <tx_control+0x30d8>)
 8010f94:	881b      	ldrh	r3, [r3, #0]
 8010f96:	0a1b      	lsrs	r3, r3, #8
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	4bb0      	ldr	r3, [pc, #704]	@ (8011260 <tx_control+0x30cc>)
 8010f9e:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010fa0:	4bb2      	ldr	r3, [pc, #712]	@ (801126c <tx_control+0x30d8>)
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	4bae      	ldr	r3, [pc, #696]	@ (8011260 <tx_control+0x30cc>)
 8010fa8:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 8010faa:	4bb4      	ldr	r3, [pc, #720]	@ (801127c <tx_control+0x30e8>)
 8010fac:	781a      	ldrb	r2, [r3, #0]
 8010fae:	4bac      	ldr	r3, [pc, #688]	@ (8011260 <tx_control+0x30cc>)
 8010fb0:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 8010fb2:	4bb3      	ldr	r3, [pc, #716]	@ (8011280 <tx_control+0x30ec>)
 8010fb4:	781a      	ldrb	r2, [r3, #0]
 8010fb6:	4baa      	ldr	r3, [pc, #680]	@ (8011260 <tx_control+0x30cc>)
 8010fb8:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 8010fba:	4ba8      	ldr	r3, [pc, #672]	@ (801125c <tx_control+0x30c8>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 8010fc0:	4bb0      	ldr	r3, [pc, #704]	@ (8011284 <tx_control+0x30f0>)
 8010fc2:	4aa7      	ldr	r2, [pc, #668]	@ (8011260 <tx_control+0x30cc>)
 8010fc4:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 8010fc6:	4bb0      	ldr	r3, [pc, #704]	@ (8011288 <tx_control+0x30f4>)
 8010fc8:	4aa5      	ldr	r2, [pc, #660]	@ (8011260 <tx_control+0x30cc>)
 8010fca:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 8010fcc:	4baf      	ldr	r3, [pc, #700]	@ (801128c <tx_control+0x30f8>)
 8010fce:	4ab0      	ldr	r2, [pc, #704]	@ (8011290 <tx_control+0x30fc>)
 8010fd0:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010fd2:	4bb0      	ldr	r3, [pc, #704]	@ (8011294 <tx_control+0x3100>)
 8010fd4:	2212      	movs	r2, #18
 8010fd6:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010fd8:	e006      	b.n	8010fe8 <tx_control+0x2e54>
		goto alarm_event_WF;// jra		alarm_event_WF
 8010fda:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 8010fdc:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 8010fde:	4bae      	ldr	r3, [pc, #696]	@ (8011298 <tx_control+0x3104>)
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d045      	beq.n	8011072 <tx_control+0x2ede>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 8010fe6:	e203      	b.n	80113f0 <tx_control+0x325c>
		bufferWifiTx[0] = 0x40;
 8010fe8:	4bac      	ldr	r3, [pc, #688]	@ (801129c <tx_control+0x3108>)
 8010fea:	2240      	movs	r2, #64	@ 0x40
 8010fec:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 8010fee:	4bab      	ldr	r3, [pc, #684]	@ (801129c <tx_control+0x3108>)
 8010ff0:	2282      	movs	r2, #130	@ 0x82
 8010ff2:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010ff4:	4ba9      	ldr	r3, [pc, #676]	@ (801129c <tx_control+0x3108>)
 8010ff6:	2203      	movs	r2, #3
 8010ff8:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = reePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
 8010ffa:	4b9a      	ldr	r3, [pc, #616]	@ (8011264 <tx_control+0x30d0>)
 8010ffc:	227b      	movs	r2, #123	@ 0x7b
 8010ffe:	5c9a      	ldrb	r2, [r3, r2]
 8011000:	4ba6      	ldr	r3, [pc, #664]	@ (801129c <tx_control+0x3108>)
 8011002:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 8011004:	4b97      	ldr	r3, [pc, #604]	@ (8011264 <tx_control+0x30d0>)
 8011006:	227c      	movs	r2, #124	@ 0x7c
 8011008:	5c9a      	ldrb	r2, [r3, r2]
 801100a:	4ba4      	ldr	r3, [pc, #656]	@ (801129c <tx_control+0x3108>)
 801100c:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 801100e:	4ba4      	ldr	r3, [pc, #656]	@ (80112a0 <tx_control+0x310c>)
 8011010:	220e      	movs	r2, #14
 8011012:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 8011014:	4b9b      	ldr	r3, [pc, #620]	@ (8011284 <tx_control+0x30f0>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	3304      	adds	r3, #4
 801101a:	4aa2      	ldr	r2, [pc, #648]	@ (80112a4 <tx_control+0x3110>)
 801101c:	0011      	movs	r1, r2
 801101e:	0018      	movs	r0, r3
 8011020:	f7f6 f80e 	bl	8007040 <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 8011024:	4b9d      	ldr	r3, [pc, #628]	@ (801129c <tx_control+0x3108>)
 8011026:	7c9a      	ldrb	r2, [r3, #18]
 8011028:	4b9f      	ldr	r3, [pc, #636]	@ (80112a8 <tx_control+0x3114>)
 801102a:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 801102c:	4b9b      	ldr	r3, [pc, #620]	@ (801129c <tx_control+0x3108>)
 801102e:	2200      	movs	r2, #0
 8011030:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 8011032:	4b9d      	ldr	r3, [pc, #628]	@ (80112a8 <tx_control+0x3114>)
 8011034:	781a      	ldrb	r2, [r3, #0]
 8011036:	4b99      	ldr	r3, [pc, #612]	@ (801129c <tx_control+0x3108>)
 8011038:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 801103a:	4b92      	ldr	r3, [pc, #584]	@ (8011284 <tx_control+0x30f0>)
 801103c:	4a97      	ldr	r2, [pc, #604]	@ (801129c <tx_control+0x3108>)
 801103e:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 8011040:	4b91      	ldr	r3, [pc, #580]	@ (8011288 <tx_control+0x30f4>)
 8011042:	4a96      	ldr	r2, [pc, #600]	@ (801129c <tx_control+0x3108>)
 8011044:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 8011046:	4b91      	ldr	r3, [pc, #580]	@ (801128c <tx_control+0x30f8>)
 8011048:	4a98      	ldr	r2, [pc, #608]	@ (80112ac <tx_control+0x3118>)
 801104a:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 801104c:	4b91      	ldr	r3, [pc, #580]	@ (8011294 <tx_control+0x3100>)
 801104e:	2214      	movs	r2, #20
 8011050:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8011052:	4b97      	ldr	r3, [pc, #604]	@ (80112b0 <tx_control+0x311c>)
 8011054:	2200      	movs	r2, #0
 8011056:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 8011058:	4b96      	ldr	r3, [pc, #600]	@ (80112b4 <tx_control+0x3120>)
 801105a:	2200      	movs	r2, #0
 801105c:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801105e:	4b94      	ldr	r3, [pc, #592]	@ (80112b0 <tx_control+0x311c>)
 8011060:	2201      	movs	r2, #1
 8011062:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8011064:	4b8c      	ldr	r3, [pc, #560]	@ (8011298 <tx_control+0x3104>)
 8011066:	2255      	movs	r2, #85	@ 0x55
 8011068:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 801106a:	4b93      	ldr	r3, [pc, #588]	@ (80112b8 <tx_control+0x3124>)
 801106c:	2200      	movs	r2, #0
 801106e:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 8011070:	e1be      	b.n	80113f0 <tx_control+0x325c>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 8011072:	4b92      	ldr	r3, [pc, #584]	@ (80112bc <tx_control+0x3128>)
 8011074:	881b      	ldrh	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d000      	beq.n	801107c <tx_control+0x2ee8>
 801107a:	e1b8      	b.n	80113ee <tx_control+0x325a>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 801107c:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 801107e:	4b90      	ldr	r3, [pc, #576]	@ (80112c0 <tx_control+0x312c>)
 8011080:	2251      	movs	r2, #81	@ 0x51
 8011082:	5c9a      	ldrb	r2, [r3, r2]
 8011084:	4b86      	ldr	r3, [pc, #536]	@ (80112a0 <tx_control+0x310c>)
 8011086:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 8011088:	4b85      	ldr	r3, [pc, #532]	@ (80112a0 <tx_control+0x310c>)
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	001a      	movs	r2, r3
 801108e:	233c      	movs	r3, #60	@ 0x3c
 8011090:	4353      	muls	r3, r2
 8011092:	b29a      	uxth	r2, r3
 8011094:	4b89      	ldr	r3, [pc, #548]	@ (80112bc <tx_control+0x3128>)
 8011096:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 8011098:	4b8a      	ldr	r3, [pc, #552]	@ (80112c4 <tx_control+0x3130>)
 801109a:	781a      	ldrb	r2, [r3, #0]
 801109c:	4b8a      	ldr	r3, [pc, #552]	@ (80112c8 <tx_control+0x3134>)
 801109e:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 80110a0:	4b88      	ldr	r3, [pc, #544]	@ (80112c4 <tx_control+0x3130>)
 80110a2:	785a      	ldrb	r2, [r3, #1]
 80110a4:	4b88      	ldr	r3, [pc, #544]	@ (80112c8 <tx_control+0x3134>)
 80110a6:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 80110a8:	4b87      	ldr	r3, [pc, #540]	@ (80112c8 <tx_control+0x3134>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 80110ae:	4b86      	ldr	r3, [pc, #536]	@ (80112c8 <tx_control+0x3134>)
 80110b0:	2200      	movs	r2, #0
 80110b2:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 80110b4:	4b84      	ldr	r3, [pc, #528]	@ (80112c8 <tx_control+0x3134>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 80110ba:	4b83      	ldr	r3, [pc, #524]	@ (80112c8 <tx_control+0x3134>)
 80110bc:	2200      	movs	r2, #0
 80110be:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 80110c0:	4b81      	ldr	r3, [pc, #516]	@ (80112c8 <tx_control+0x3134>)
 80110c2:	2200      	movs	r2, #0
 80110c4:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 80110c6:	4b80      	ldr	r3, [pc, #512]	@ (80112c8 <tx_control+0x3134>)
 80110c8:	2200      	movs	r2, #0
 80110ca:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 80110cc:	4b7f      	ldr	r3, [pc, #508]	@ (80112cc <tx_control+0x3138>)
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	2201      	movs	r2, #1
 80110d2:	4053      	eors	r3, r2
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d103      	bne.n	80110e2 <tx_control+0x2f4e>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 80110da:	4b7b      	ldr	r3, [pc, #492]	@ (80112c8 <tx_control+0x3134>)
 80110dc:	2201      	movs	r2, #1
 80110de:	709a      	strb	r2, [r3, #2]
 80110e0:	e000      	b.n	80110e4 <tx_control+0x2f50>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 80110e2:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 80110e4:	4b79      	ldr	r3, [pc, #484]	@ (80112cc <tx_control+0x3138>)
 80110e6:	785b      	ldrb	r3, [r3, #1]
 80110e8:	2201      	movs	r2, #1
 80110ea:	4053      	eors	r3, r2
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d103      	bne.n	80110fa <tx_control+0x2f66>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 80110f2:	4b75      	ldr	r3, [pc, #468]	@ (80112c8 <tx_control+0x3134>)
 80110f4:	2201      	movs	r2, #1
 80110f6:	70da      	strb	r2, [r3, #3]
 80110f8:	e000      	b.n	80110fc <tx_control+0x2f68>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 80110fa:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 80110fc:	4b73      	ldr	r3, [pc, #460]	@ (80112cc <tx_control+0x3138>)
 80110fe:	789b      	ldrb	r3, [r3, #2]
 8011100:	2201      	movs	r2, #1
 8011102:	4053      	eors	r3, r2
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	d103      	bne.n	8011112 <tx_control+0x2f7e>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 801110a:	4b6f      	ldr	r3, [pc, #444]	@ (80112c8 <tx_control+0x3134>)
 801110c:	2201      	movs	r2, #1
 801110e:	711a      	strb	r2, [r3, #4]
 8011110:	e000      	b.n	8011114 <tx_control+0x2f80>
			goto noFlag_ahorro2_TD;
 8011112:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 8011114:	4b6e      	ldr	r3, [pc, #440]	@ (80112d0 <tx_control+0x313c>)
 8011116:	78db      	ldrb	r3, [r3, #3]
 8011118:	2201      	movs	r2, #1
 801111a:	4053      	eors	r3, r2
 801111c:	b2db      	uxtb	r3, r3
 801111e:	2b00      	cmp	r3, #0
 8011120:	d103      	bne.n	801112a <tx_control+0x2f96>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 8011122:	4b69      	ldr	r3, [pc, #420]	@ (80112c8 <tx_control+0x3134>)
 8011124:	2201      	movs	r2, #1
 8011126:	715a      	strb	r2, [r3, #5]
 8011128:	e000      	b.n	801112c <tx_control+0x2f98>
			goto noFlag_nocturno_TD;
 801112a:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 801112c:	4b69      	ldr	r3, [pc, #420]	@ (80112d4 <tx_control+0x3140>)
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	2201      	movs	r2, #1
 8011132:	4053      	eors	r3, r2
 8011134:	b2db      	uxtb	r3, r3
 8011136:	2b00      	cmp	r3, #0
 8011138:	d103      	bne.n	8011142 <tx_control+0x2fae>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 801113a:	4b63      	ldr	r3, [pc, #396]	@ (80112c8 <tx_control+0x3134>)
 801113c:	2201      	movs	r2, #1
 801113e:	719a      	strb	r2, [r3, #6]
 8011140:	e000      	b.n	8011144 <tx_control+0x2fb0>
			goto noFlag_vent_TD;
 8011142:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 8011144:	4b5f      	ldr	r3, [pc, #380]	@ (80112c4 <tx_control+0x3130>)
 8011146:	789b      	ldrb	r3, [r3, #2]
 8011148:	2201      	movs	r2, #1
 801114a:	4053      	eors	r3, r2
 801114c:	b2db      	uxtb	r3, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	d103      	bne.n	801115a <tx_control+0x2fc6>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 8011152:	4b5d      	ldr	r3, [pc, #372]	@ (80112c8 <tx_control+0x3134>)
 8011154:	2201      	movs	r2, #1
 8011156:	71da      	strb	r2, [r3, #7]
 8011158:	e000      	b.n	801115c <tx_control+0x2fc8>
			goto noFlag_Aux_TD;
 801115a:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 801115c:	2317      	movs	r3, #23
 801115e:	18fb      	adds	r3, r7, r3
 8011160:	2200      	movs	r2, #0
 8011162:	701a      	strb	r2, [r3, #0]
 8011164:	e00d      	b.n	8011182 <tx_control+0x2fee>
			alarmas2_TD[k] = (trefst2[k]);
 8011166:	2017      	movs	r0, #23
 8011168:	183b      	adds	r3, r7, r0
 801116a:	781a      	ldrb	r2, [r3, #0]
 801116c:	183b      	adds	r3, r7, r0
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	4959      	ldr	r1, [pc, #356]	@ (80112d8 <tx_control+0x3144>)
 8011172:	5c89      	ldrb	r1, [r1, r2]
 8011174:	4a59      	ldr	r2, [pc, #356]	@ (80112dc <tx_control+0x3148>)
 8011176:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 8011178:	183b      	adds	r3, r7, r0
 801117a:	781a      	ldrb	r2, [r3, #0]
 801117c:	183b      	adds	r3, r7, r0
 801117e:	3201      	adds	r2, #1
 8011180:	701a      	strb	r2, [r3, #0]
 8011182:	2317      	movs	r3, #23
 8011184:	18fb      	adds	r3, r7, r3
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	2b07      	cmp	r3, #7
 801118a:	d9ec      	bls.n	8011166 <tx_control+0x2fd2>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 801118c:	4b53      	ldr	r3, [pc, #332]	@ (80112dc <tx_control+0x3148>)
 801118e:	2200      	movs	r2, #0
 8011190:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 8011192:	4b53      	ldr	r3, [pc, #332]	@ (80112e0 <tx_control+0x314c>)
 8011194:	2200      	movs	r2, #0
 8011196:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8011198:	2300      	movs	r3, #0
 801119a:	613b      	str	r3, [r7, #16]
 801119c:	e013      	b.n	80111c6 <tx_control+0x3032>
			alarmas_TD |= (trefst[k] << k);
 801119e:	4a51      	ldr	r2, [pc, #324]	@ (80112e4 <tx_control+0x3150>)
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	18d3      	adds	r3, r2, r3
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	001a      	movs	r2, r3
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	409a      	lsls	r2, r3
 80111ac:	0013      	movs	r3, r2
 80111ae:	b25a      	sxtb	r2, r3
 80111b0:	4b4b      	ldr	r3, [pc, #300]	@ (80112e0 <tx_control+0x314c>)
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	b25b      	sxtb	r3, r3
 80111b6:	4313      	orrs	r3, r2
 80111b8:	b25b      	sxtb	r3, r3
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	4b48      	ldr	r3, [pc, #288]	@ (80112e0 <tx_control+0x314c>)
 80111be:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	3301      	adds	r3, #1
 80111c4:	613b      	str	r3, [r7, #16]
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	2b07      	cmp	r3, #7
 80111ca:	dde8      	ble.n	801119e <tx_control+0x300a>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 80111cc:	4b33      	ldr	r3, [pc, #204]	@ (801129c <tx_control+0x3108>)
 80111ce:	2240      	movs	r2, #64	@ 0x40
 80111d0:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 80111d2:	4b32      	ldr	r3, [pc, #200]	@ (801129c <tx_control+0x3108>)
 80111d4:	2281      	movs	r2, #129	@ 0x81
 80111d6:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 80111d8:	4b30      	ldr	r3, [pc, #192]	@ (801129c <tx_control+0x3108>)
 80111da:	2207      	movs	r2, #7
 80111dc:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
//		// ldw		X,eeversion1
//		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
//		bufferWifiTx[4] = eePlantilla[eeveTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
		bufferWifiTx[3] = reePlantilla[eeversion1];
 80111de:	4b21      	ldr	r3, [pc, #132]	@ (8011264 <tx_control+0x30d0>)
 80111e0:	227b      	movs	r2, #123	@ 0x7b
 80111e2:	5c9a      	ldrb	r2, [r3, r2]
 80111e4:	4b2d      	ldr	r3, [pc, #180]	@ (801129c <tx_control+0x3108>)
 80111e6:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = reePlantilla[eeversion2];
 80111e8:	4b1e      	ldr	r3, [pc, #120]	@ (8011264 <tx_control+0x30d0>)
 80111ea:	227c      	movs	r2, #124	@ 0x7c
 80111ec:	5c9a      	ldrb	r2, [r3, r2]
 80111ee:	4b2b      	ldr	r3, [pc, #172]	@ (801129c <tx_control+0x3108>)
 80111f0:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 80111f2:	4b1d      	ldr	r3, [pc, #116]	@ (8011268 <tx_control+0x30d4>)
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	0a1b      	lsrs	r3, r3, #8
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	4b27      	ldr	r3, [pc, #156]	@ (801129c <tx_control+0x3108>)
 80111fe:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 8011200:	4b19      	ldr	r3, [pc, #100]	@ (8011268 <tx_control+0x30d4>)
 8011202:	881b      	ldrh	r3, [r3, #0]
 8011204:	b2da      	uxtb	r2, r3
 8011206:	4b25      	ldr	r3, [pc, #148]	@ (801129c <tx_control+0x3108>)
 8011208:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 801120a:	4b18      	ldr	r3, [pc, #96]	@ (801126c <tx_control+0x30d8>)
 801120c:	881b      	ldrh	r3, [r3, #0]
 801120e:	0a1b      	lsrs	r3, r3, #8
 8011210:	b29b      	uxth	r3, r3
 8011212:	b2da      	uxtb	r2, r3
 8011214:	4b21      	ldr	r3, [pc, #132]	@ (801129c <tx_control+0x3108>)
 8011216:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 8011218:	4b14      	ldr	r3, [pc, #80]	@ (801126c <tx_control+0x30d8>)
 801121a:	881b      	ldrh	r3, [r3, #0]
 801121c:	b2da      	uxtb	r2, r3
 801121e:	4b1f      	ldr	r3, [pc, #124]	@ (801129c <tx_control+0x3108>)
 8011220:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 8011222:	4b13      	ldr	r3, [pc, #76]	@ (8011270 <tx_control+0x30dc>)
 8011224:	781a      	ldrb	r2, [r3, #0]
 8011226:	4b1d      	ldr	r3, [pc, #116]	@ (801129c <tx_control+0x3108>)
 8011228:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 801122a:	4b12      	ldr	r3, [pc, #72]	@ (8011274 <tx_control+0x30e0>)
 801122c:	781a      	ldrb	r2, [r3, #0]
 801122e:	4b1b      	ldr	r3, [pc, #108]	@ (801129c <tx_control+0x3108>)
 8011230:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 8011232:	4b12      	ldr	r3, [pc, #72]	@ (801127c <tx_control+0x30e8>)
 8011234:	781a      	ldrb	r2, [r3, #0]
 8011236:	4b19      	ldr	r3, [pc, #100]	@ (801129c <tx_control+0x3108>)
 8011238:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 801123a:	4b11      	ldr	r3, [pc, #68]	@ (8011280 <tx_control+0x30ec>)
 801123c:	781a      	ldrb	r2, [r3, #0]
 801123e:	4b17      	ldr	r3, [pc, #92]	@ (801129c <tx_control+0x3108>)
 8011240:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 8011242:	4b16      	ldr	r3, [pc, #88]	@ (801129c <tx_control+0x3108>)
 8011244:	2200      	movs	r2, #0
 8011246:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 8011248:	4b0b      	ldr	r3, [pc, #44]	@ (8011278 <tx_control+0x30e4>)
 801124a:	781a      	ldrb	r2, [r3, #0]
 801124c:	4b13      	ldr	r3, [pc, #76]	@ (801129c <tx_control+0x3108>)
 801124e:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 8011250:	4b12      	ldr	r3, [pc, #72]	@ (801129c <tx_control+0x3108>)
 8011252:	2200      	movs	r2, #0
 8011254:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 8011256:	2300      	movs	r3, #0
 8011258:	60fb      	str	r3, [r7, #12]
 801125a:	e057      	b.n	801130c <tx_control+0x3178>
 801125c:	20001fc8 	.word	0x20001fc8
 8011260:	20001fb4 	.word	0x20001fb4
 8011264:	20000c88 	.word	0x20000c88
 8011268:	20001e3c 	.word	0x20001e3c
 801126c:	20001e3e 	.word	0x20001e3e
 8011270:	20000bac 	.word	0x20000bac
 8011274:	20000bad 	.word	0x20000bad
 8011278:	20000bca 	.word	0x20000bca
 801127c:	20000bae 	.word	0x20000bae
 8011280:	20000baf 	.word	0x20000baf
 8011284:	20001ea0 	.word	0x20001ea0
 8011288:	20001e98 	.word	0x20001e98
 801128c:	20001e9c 	.word	0x20001e9c
 8011290:	20001fc5 	.word	0x20001fc5
 8011294:	20001ebc 	.word	0x20001ebc
 8011298:	20001ea5 	.word	0x20001ea5
 801129c:	20001fe4 	.word	0x20001fe4
 80112a0:	20000b53 	.word	0x20000b53
 80112a4:	20001fe9 	.word	0x20001fe9
 80112a8:	20000b52 	.word	0x20000b52
 80112ac:	20001ff8 	.word	0x20001ff8
 80112b0:	20001ea8 	.word	0x20001ea8
 80112b4:	20001ec0 	.word	0x20001ec0
 80112b8:	20001eb0 	.word	0x20001eb0
 80112bc:	20001fda 	.word	0x20001fda
 80112c0:	200000b8 	.word	0x200000b8
 80112c4:	20000ba0 	.word	0x20000ba0
 80112c8:	20001e4c 	.word	0x20001e4c
 80112cc:	20000c38 	.word	0x20000c38
 80112d0:	20000b74 	.word	0x20000b74
 80112d4:	20000bdc 	.word	0x20000bdc
 80112d8:	20000b7c 	.word	0x20000b7c
 80112dc:	20001e58 	.word	0x20001e58
 80112e0:	20001e60 	.word	0x20001e60
 80112e4:	20000b84 	.word	0x20000b84
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 80112e8:	4b45      	ldr	r3, [pc, #276]	@ (8011400 <tx_control+0x326c>)
 80112ea:	7bda      	ldrb	r2, [r3, #15]
 80112ec:	4945      	ldr	r1, [pc, #276]	@ (8011404 <tx_control+0x3270>)
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	18cb      	adds	r3, r1, r3
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	0019      	movs	r1, r3
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	4099      	lsls	r1, r3
 80112fa:	000b      	movs	r3, r1
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	4313      	orrs	r3, r2
 8011300:	b2da      	uxtb	r2, r3
 8011302:	4b3f      	ldr	r3, [pc, #252]	@ (8011400 <tx_control+0x326c>)
 8011304:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	3301      	adds	r3, #1
 801130a:	60fb      	str	r3, [r7, #12]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2b07      	cmp	r3, #7
 8011310:	ddea      	ble.n	80112e8 <tx_control+0x3154>
		}
		bufferWifiTx[16] =estados_TD;
 8011312:	4b3d      	ldr	r3, [pc, #244]	@ (8011408 <tx_control+0x3274>)
 8011314:	781a      	ldrb	r2, [r3, #0]
 8011316:	4b3a      	ldr	r3, [pc, #232]	@ (8011400 <tx_control+0x326c>)
 8011318:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 801131a:	4b39      	ldr	r3, [pc, #228]	@ (8011400 <tx_control+0x326c>)
 801131c:	2200      	movs	r2, #0
 801131e:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 8011320:	230b      	movs	r3, #11
 8011322:	18fb      	adds	r3, r7, r3
 8011324:	2200      	movs	r2, #0
 8011326:	701a      	strb	r2, [r3, #0]
 8011328:	e015      	b.n	8011356 <tx_control+0x31c2>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 801132a:	4b35      	ldr	r3, [pc, #212]	@ (8011400 <tx_control+0x326c>)
 801132c:	7c5a      	ldrb	r2, [r3, #17]
 801132e:	200b      	movs	r0, #11
 8011330:	183b      	adds	r3, r7, r0
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	4935      	ldr	r1, [pc, #212]	@ (801140c <tx_control+0x3278>)
 8011336:	5ccb      	ldrb	r3, [r1, r3]
 8011338:	0019      	movs	r1, r3
 801133a:	183b      	adds	r3, r7, r0
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	4099      	lsls	r1, r3
 8011340:	000b      	movs	r3, r1
 8011342:	b2db      	uxtb	r3, r3
 8011344:	4313      	orrs	r3, r2
 8011346:	b2da      	uxtb	r2, r3
 8011348:	4b2d      	ldr	r3, [pc, #180]	@ (8011400 <tx_control+0x326c>)
 801134a:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 801134c:	183b      	adds	r3, r7, r0
 801134e:	781a      	ldrb	r2, [r3, #0]
 8011350:	183b      	adds	r3, r7, r0
 8011352:	3201      	adds	r2, #1
 8011354:	701a      	strb	r2, [r3, #0]
 8011356:	230b      	movs	r3, #11
 8011358:	18fb      	adds	r3, r7, r3
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2b07      	cmp	r3, #7
 801135e:	d9e4      	bls.n	801132a <tx_control+0x3196>
		}

		bufferWifiTx[18] = alarmas_TD;
 8011360:	4b2b      	ldr	r3, [pc, #172]	@ (8011410 <tx_control+0x327c>)
 8011362:	781a      	ldrb	r2, [r3, #0]
 8011364:	4b26      	ldr	r3, [pc, #152]	@ (8011400 <tx_control+0x326c>)
 8011366:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 8011368:	4b2a      	ldr	r3, [pc, #168]	@ (8011414 <tx_control+0x3280>)
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	0a1b      	lsrs	r3, r3, #8
 801136e:	b29b      	uxth	r3, r3
 8011370:	b2da      	uxtb	r2, r3
 8011372:	4b23      	ldr	r3, [pc, #140]	@ (8011400 <tx_control+0x326c>)
 8011374:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 8011376:	4b27      	ldr	r3, [pc, #156]	@ (8011414 <tx_control+0x3280>)
 8011378:	881b      	ldrh	r3, [r3, #0]
 801137a:	b2da      	uxtb	r2, r3
 801137c:	4b20      	ldr	r3, [pc, #128]	@ (8011400 <tx_control+0x326c>)
 801137e:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 8011380:	4b24      	ldr	r3, [pc, #144]	@ (8011414 <tx_control+0x3280>)
 8011382:	881b      	ldrh	r3, [r3, #0]
 8011384:	0a1b      	lsrs	r3, r3, #8
 8011386:	b29b      	uxth	r3, r3
 8011388:	b2da      	uxtb	r2, r3
 801138a:	4b1d      	ldr	r3, [pc, #116]	@ (8011400 <tx_control+0x326c>)
 801138c:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 801138e:	4b21      	ldr	r3, [pc, #132]	@ (8011414 <tx_control+0x3280>)
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	b2da      	uxtb	r2, r3
 8011394:	4b1a      	ldr	r3, [pc, #104]	@ (8011400 <tx_control+0x326c>)
 8011396:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 8011398:	4b1f      	ldr	r3, [pc, #124]	@ (8011418 <tx_control+0x3284>)
 801139a:	4a19      	ldr	r2, [pc, #100]	@ (8011400 <tx_control+0x326c>)
 801139c:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 801139e:	4b1f      	ldr	r3, [pc, #124]	@ (801141c <tx_control+0x3288>)
 80113a0:	4a17      	ldr	r2, [pc, #92]	@ (8011400 <tx_control+0x326c>)
 80113a2:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 80113a4:	4b1e      	ldr	r3, [pc, #120]	@ (8011420 <tx_control+0x328c>)
 80113a6:	4a1f      	ldr	r2, [pc, #124]	@ (8011424 <tx_control+0x3290>)
 80113a8:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 80113aa:	4b1f      	ldr	r3, [pc, #124]	@ (8011428 <tx_control+0x3294>)
 80113ac:	2217      	movs	r2, #23
 80113ae:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80113b0:	4b1e      	ldr	r3, [pc, #120]	@ (801142c <tx_control+0x3298>)
 80113b2:	2200      	movs	r2, #0
 80113b4:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80113b6:	4b1e      	ldr	r3, [pc, #120]	@ (8011430 <tx_control+0x329c>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80113bc:	4b1b      	ldr	r3, [pc, #108]	@ (801142c <tx_control+0x3298>)
 80113be:	2201      	movs	r2, #1
 80113c0:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 80113c2:	4b1c      	ldr	r3, [pc, #112]	@ (8011434 <tx_control+0x32a0>)
 80113c4:	2255      	movs	r2, #85	@ 0x55
 80113c6:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 80113c8:	4b1b      	ldr	r3, [pc, #108]	@ (8011438 <tx_control+0x32a4>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 80113ce:	e00f      	b.n	80113f0 <tx_control+0x325c>
		goto end_tx_wifi;//jp			end_tx_wifi
 80113d0:	46c0      	nop			@ (mov r8, r8)
 80113d2:	f7fe ff86 	bl	80102e2 <tx_control+0x214e>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 80113d6:	46c0      	nop			@ (mov r8, r8)
 80113d8:	f7fe ff83 	bl	80102e2 <tx_control+0x214e>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 80113dc:	46c0      	nop			@ (mov r8, r8)
 80113de:	f7fe ff80 	bl	80102e2 <tx_control+0x214e>
		goto end_tx_wifi;// jp		end_tx_wifi
 80113e2:	46c0      	nop			@ (mov r8, r8)
 80113e4:	f7fe ff7d 	bl	80102e2 <tx_control+0x214e>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 80113e8:	46c0      	nop			@ (mov r8, r8)
 80113ea:	f7fe ff7a 	bl	80102e2 <tx_control+0x214e>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 80113ee:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 80113f0:	f7fe ff77 	bl	80102e2 <tx_control+0x214e>
		goto end_tx_control_b;
 80113f4:	46c0      	nop			@ (mov r8, r8)

end_tx_control_b:
		asm ("nop");
 80113f6:	46c0      	nop			@ (mov r8, r8)

}
 80113f8:	46c0      	nop			@ (mov r8, r8)
 80113fa:	46bd      	mov	sp, r7
 80113fc:	b012      	add	sp, #72	@ 0x48
 80113fe:	bd80      	pop	{r7, pc}
 8011400:	20001fe4 	.word	0x20001fe4
 8011404:	20001e4c 	.word	0x20001e4c
 8011408:	20001e54 	.word	0x20001e54
 801140c:	20001e58 	.word	0x20001e58
 8011410:	20001e60 	.word	0x20001e60
 8011414:	20000c50 	.word	0x20000c50
 8011418:	20001ea0 	.word	0x20001ea0
 801141c:	20001e98 	.word	0x20001e98
 8011420:	20001e9c 	.word	0x20001e9c
 8011424:	20001ffb 	.word	0x20001ffb
 8011428:	20001ebc 	.word	0x20001ebc
 801142c:	20001ea8 	.word	0x20001ea8
 8011430:	20001ec0 	.word	0x20001ec0
 8011434:	20001ea5 	.word	0x20001ea5
 8011438:	20001eb0 	.word	0x20001eb0

0801143c <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 8011442:	4b38      	ldr	r3, [pc, #224]	@ (8011524 <prepTXlogg_2+0xe8>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	607b      	str	r3, [r7, #4]
			//addw	X,resulh
			//ld	A,cntByteBlock

			// Se agrega este parche debido a la naturaleza de la memoria
			// CGM 23/04/2025
			if(cntByteBlock == 0){
 8011448:	4b37      	ldr	r3, [pc, #220]	@ (8011528 <prepTXlogg_2+0xec>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d104      	bne.n	801145a <prepTXlogg_2+0x1e>
				point_X[126] = 0xFF;	//ld		(X),A ---------?
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	337e      	adds	r3, #126	@ 0x7e
 8011454:	22ff      	movs	r2, #255	@ 0xff
 8011456:	701a      	strb	r2, [r3, #0]
 8011458:	e004      	b.n	8011464 <prepTXlogg_2+0x28>
			}
			else{
				point_X[126] = cntByteBlock;	//ld		(X),A ---------?
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	337e      	adds	r3, #126	@ 0x7e
 801145e:	4a32      	ldr	r2, [pc, #200]	@ (8011528 <prepTXlogg_2+0xec>)
 8011460:	7812      	ldrb	r2, [r2, #0]
 8011462:	701a      	strb	r2, [r3, #0]
			 */
			//point_X[126] = 0;
			//point_X[127] = 1;

			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 8011464:	4b31      	ldr	r3, [pc, #196]	@ (801152c <prepTXlogg_2+0xf0>)
 8011466:	22aa      	movs	r2, #170	@ 0xaa
 8011468:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 801146a:	4b31      	ldr	r3, [pc, #196]	@ (8011530 <prepTXlogg_2+0xf4>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	01db      	lsls	r3, r3, #7
 8011470:	b29a      	uxth	r2, r3
 8011472:	4b30      	ldr	r3, [pc, #192]	@ (8011534 <prepTXlogg_2+0xf8>)
 8011474:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 8011476:	4b30      	ldr	r3, [pc, #192]	@ (8011538 <prepTXlogg_2+0xfc>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4a2e      	ldr	r2, [pc, #184]	@ (8011534 <prepTXlogg_2+0xf8>)
 801147c:	8812      	ldrh	r2, [r2, #0]
 801147e:	189a      	adds	r2, r3, r2
 8011480:	4b2e      	ldr	r3, [pc, #184]	@ (801153c <prepTXlogg_2+0x100>)
 8011482:	601a      	str	r2, [r3, #0]

			/*
			 * CGM 16/04/2025
			 * Se realiza una copia de la pagina actual en RAM y si existe un grabado de un bloquq de 128 bytes incompletos, se realizará un borrado de pagina y solo se escribiran  los bloques de 128 bytes que estan completos
			 */
			grabadoLoggerBloquesCompletos(dirPointer, dirBufferPage);
 8011484:	4b2d      	ldr	r3, [pc, #180]	@ (801153c <prepTXlogg_2+0x100>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	4b2d      	ldr	r3, [pc, #180]	@ (8011540 <prepTXlogg_2+0x104>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	0019      	movs	r1, r3
 801148e:	0010      	movs	r0, r2
 8011490:	f7f5 ffda 	bl	8007448 <grabadoLoggerBloquesCompletos>

			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 8011494:	4b23      	ldr	r3, [pc, #140]	@ (8011524 <prepTXlogg_2+0xe8>)
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	4b2a      	ldr	r3, [pc, #168]	@ (8011544 <prepTXlogg_2+0x108>)
 801149a:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 801149c:	f7f5 fe08 	bl	80070b0 <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 80114a0:	f7f5 fd1c 	bl	8006edc <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 80114a4:	f7f5 fd08 	bl	8006eb8 <save_cntReg>

			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 80114a8:	4b21      	ldr	r3, [pc, #132]	@ (8011530 <prepTXlogg_2+0xf4>)
 80114aa:	781a      	ldrb	r2, [r3, #0]
 80114ac:	4b26      	ldr	r3, [pc, #152]	@ (8011548 <prepTXlogg_2+0x10c>)
 80114ae:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 80114b0:	4b1d      	ldr	r3, [pc, #116]	@ (8011528 <prepTXlogg_2+0xec>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d006      	beq.n	80114c6 <prepTXlogg_2+0x8a>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 80114b8:	4b23      	ldr	r3, [pc, #140]	@ (8011548 <prepTXlogg_2+0x10c>)
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	3301      	adds	r3, #1
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	4b21      	ldr	r3, [pc, #132]	@ (8011548 <prepTXlogg_2+0x10c>)
 80114c2:	701a      	strb	r2, [r3, #0]
 80114c4:	e000      	b.n	80114c8 <prepTXlogg_2+0x8c>
				goto noIncBlock;//jreq	noIncBlock
 80114c6:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 80114c8:	4b1f      	ldr	r3, [pc, #124]	@ (8011548 <prepTXlogg_2+0x10c>)
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	01db      	lsls	r3, r3, #7
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	4b18      	ldr	r3, [pc, #96]	@ (8011534 <prepTXlogg_2+0xf8>)
 80114d2:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 80114d4:	4b18      	ldr	r3, [pc, #96]	@ (8011538 <prepTXlogg_2+0xfc>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4a16      	ldr	r2, [pc, #88]	@ (8011534 <prepTXlogg_2+0xf8>)
 80114da:	8812      	ldrh	r2, [r2, #0]
 80114dc:	189b      	adds	r3, r3, r2
 80114de:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 80114e0:	4b1a      	ldr	r3, [pc, #104]	@ (801154c <prepTXlogg_2+0x110>)
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 80114e6:	4b1a      	ldr	r3, [pc, #104]	@ (8011550 <prepTXlogg_2+0x114>)
 80114e8:	687a      	ldr	r2, [r7, #4]
 80114ea:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 80114ec:	4b19      	ldr	r3, [pc, #100]	@ (8011554 <prepTXlogg_2+0x118>)
 80114ee:	2201      	movs	r2, #1
 80114f0:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 80114f2:	4b17      	ldr	r3, [pc, #92]	@ (8011550 <prepTXlogg_2+0x114>)
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	4b18      	ldr	r3, [pc, #96]	@ (8011558 <prepTXlogg_2+0x11c>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d106      	bne.n	801150c <prepTXlogg_2+0xd0>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 80114fe:	4b17      	ldr	r3, [pc, #92]	@ (801155c <prepTXlogg_2+0x120>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 8011504:	4b13      	ldr	r3, [pc, #76]	@ (8011554 <prepTXlogg_2+0x118>)
 8011506:	2200      	movs	r2, #0
 8011508:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 801150a:	e003      	b.n	8011514 <prepTXlogg_2+0xd8>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 801150c:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	3b01      	subs	r3, #1
 8011512:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 8011514:	4b12      	ldr	r3, [pc, #72]	@ (8011560 <prepTXlogg_2+0x124>)
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	601a      	str	r2, [r3, #0]
			//ret
}
 801151a:	46c0      	nop			@ (mov r8, r8)
 801151c:	46bd      	mov	sp, r7
 801151e:	b002      	add	sp, #8
 8011520:	bd80      	pop	{r7, pc}
 8011522:	46c0      	nop			@ (mov r8, r8)
 8011524:	20000e2c 	.word	0x20000e2c
 8011528:	20000e23 	.word	0x20000e23
 801152c:	20000e14 	.word	0x20000e14
 8011530:	20000e22 	.word	0x20000e22
 8011534:	200008d2 	.word	0x200008d2
 8011538:	20000e28 	.word	0x20000e28
 801153c:	20000e18 	.word	0x20000e18
 8011540:	20001e38 	.word	0x20001e38
 8011544:	20000e1c 	.word	0x20000e1c
 8011548:	200008d0 	.word	0x200008d0
 801154c:	20001e98 	.word	0x20001e98
 8011550:	20001ea0 	.word	0x20001ea0
 8011554:	20001ea8 	.word	0x20001ea8
 8011558:	20001eb4 	.word	0x20001eb4
 801155c:	20001eb8 	.word	0x20001eb8
 8011560:	20001e9c 	.word	0x20001e9c

08011564 <borra_pagina_logger>:
	BloqDatalooger[comando1] =	0xF1; // mov		comando1,#$F1
	BloqDatalooger[comando2] = 	0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
}

void borra_pagina_logger(uint32_t pagina)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b088      	sub	sp, #32
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	60fb      	str	r3, [r7, #12]

    while (HAL_FLASH_Unlock() != HAL_OK);
 8011570:	46c0      	nop			@ (mov r8, r8)
 8011572:	f001 fb19 	bl	8012ba8 <HAL_FLASH_Unlock>
 8011576:	1e03      	subs	r3, r0, #0
 8011578:	d1fb      	bne.n	8011572 <borra_pagina_logger+0xe>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // Borrado por páginas
 801157a:	2110      	movs	r1, #16
 801157c:	187b      	adds	r3, r7, r1
 801157e:	2202      	movs	r2, #2
 8011580:	601a      	str	r2, [r3, #0]
    eraseInitStruct.Page = pagina;                   // Página inicial a borrar
 8011582:	187b      	adds	r3, r7, r1
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	609a      	str	r2, [r3, #8]
    eraseInitStruct.NbPages = 1;
 8011588:	187b      	adds	r3, r7, r1
 801158a:	2201      	movs	r2, #1
 801158c:	60da      	str	r2, [r3, #12]

    while (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK);
 801158e:	46c0      	nop			@ (mov r8, r8)
 8011590:	230c      	movs	r3, #12
 8011592:	18fa      	adds	r2, r7, r3
 8011594:	2310      	movs	r3, #16
 8011596:	18fb      	adds	r3, r7, r3
 8011598:	0011      	movs	r1, r2
 801159a:	0018      	movs	r0, r3
 801159c:	f001 fbb2 	bl	8012d04 <HAL_FLASHEx_Erase>
 80115a0:	1e03      	subs	r3, r0, #0
 80115a2:	d1f5      	bne.n	8011590 <borra_pagina_logger+0x2c>
    while (HAL_FLASH_Lock() != HAL_OK);
 80115a4:	46c0      	nop			@ (mov r8, r8)
 80115a6:	f001 fb23 	bl	8012bf0 <HAL_FLASH_Lock>
 80115aa:	1e03      	subs	r3, r0, #0
 80115ac:	d1fb      	bne.n	80115a6 <borra_pagina_logger+0x42>

    pagina_borrado++;
 80115ae:	4b04      	ldr	r3, [pc, #16]	@ (80115c0 <borra_pagina_logger+0x5c>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	1c5a      	adds	r2, r3, #1
 80115b4:	4b02      	ldr	r3, [pc, #8]	@ (80115c0 <borra_pagina_logger+0x5c>)
 80115b6:	601a      	str	r2, [r3, #0]
}
 80115b8:	46c0      	nop			@ (mov r8, r8)
 80115ba:	46bd      	mov	sp, r7
 80115bc:	b008      	add	sp, #32
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	20000270 	.word	0x20000270

080115c4 <graba_bloque_fw>:

void graba_bloque_fw (void)
{
 80115c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115c6:	b0b1      	sub	sp, #196	@ 0xc4
 80115c8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80115ca:	2357      	movs	r3, #87	@ 0x57
 80115cc:	2168      	movs	r1, #104	@ 0x68
 80115ce:	185b      	adds	r3, r3, r1
 80115d0:	19da      	adds	r2, r3, r7
 80115d2:	2300      	movs	r3, #0
 80115d4:	7013      	strb	r3, [r2, #0]
	uint8_t j = 0;
 80115d6:	2356      	movs	r3, #86	@ 0x56
 80115d8:	185b      	adds	r3, r3, r1
 80115da:	19da      	adds	r2, r3, r7
 80115dc:	2300      	movs	r3, #0
 80115de:	7013      	strb	r3, [r2, #0]

	uint8_t a = 0;
 80115e0:	2355      	movs	r3, #85	@ 0x55
 80115e2:	185b      	adds	r3, r3, r1
 80115e4:	19da      	adds	r2, r3, r7
 80115e6:	2300      	movs	r3, #0
 80115e8:	7013      	strb	r3, [r2, #0]
	uint8_t b = 1;
 80115ea:	2354      	movs	r3, #84	@ 0x54
 80115ec:	185b      	adds	r3, r3, r1
 80115ee:	19da      	adds	r2, r3, r7
 80115f0:	2301      	movs	r3, #1
 80115f2:	7013      	strb	r3, [r2, #0]
	uint8_t c = 2;
 80115f4:	2353      	movs	r3, #83	@ 0x53
 80115f6:	185b      	adds	r3, r3, r1
 80115f8:	19da      	adds	r2, r3, r7
 80115fa:	2302      	movs	r3, #2
 80115fc:	7013      	strb	r3, [r2, #0]
	uint8_t d = 3;
 80115fe:	2352      	movs	r3, #82	@ 0x52
 8011600:	185b      	adds	r3, r3, r1
 8011602:	19da      	adds	r2, r3, r7
 8011604:	2303      	movs	r3, #3
 8011606:	7013      	strb	r3, [r2, #0]
	uint8_t e = 4;
 8011608:	2351      	movs	r3, #81	@ 0x51
 801160a:	185b      	adds	r3, r3, r1
 801160c:	19da      	adds	r2, r3, r7
 801160e:	2304      	movs	r3, #4
 8011610:	7013      	strb	r3, [r2, #0]
	uint8_t f = 5;
 8011612:	2350      	movs	r3, #80	@ 0x50
 8011614:	185b      	adds	r3, r3, r1
 8011616:	19da      	adds	r2, r3, r7
 8011618:	2305      	movs	r3, #5
 801161a:	7013      	strb	r3, [r2, #0]
	uint8_t g = 6;
 801161c:	234f      	movs	r3, #79	@ 0x4f
 801161e:	185b      	adds	r3, r3, r1
 8011620:	19da      	adds	r2, r3, r7
 8011622:	2306      	movs	r3, #6
 8011624:	7013      	strb	r3, [r2, #0]
	uint8_t h = 7;
 8011626:	234e      	movs	r3, #78	@ 0x4e
 8011628:	185b      	adds	r3, r3, r1
 801162a:	19da      	adds	r2, r3, r7
 801162c:	2307      	movs	r3, #7
 801162e:	7013      	strb	r3, [r2, #0]

//	uint32_t buffer_recepcion = 0;

	uint64_t buffer_recepcion = 0;
 8011630:	2200      	movs	r2, #0
 8011632:	2300      	movs	r3, #0
 8011634:	673a      	str	r2, [r7, #112]	@ 0x70
 8011636:	677b      	str	r3, [r7, #116]	@ 0x74

	uint64_t contenido1 = 0;
 8011638:	2200      	movs	r2, #0
 801163a:	2300      	movs	r3, #0
 801163c:	21a8      	movs	r1, #168	@ 0xa8
 801163e:	1879      	adds	r1, r7, r1
 8011640:	600a      	str	r2, [r1, #0]
 8011642:	604b      	str	r3, [r1, #4]
	uint64_t contenido2 = 0;
 8011644:	2200      	movs	r2, #0
 8011646:	2300      	movs	r3, #0
 8011648:	21a0      	movs	r1, #160	@ 0xa0
 801164a:	1879      	adds	r1, r7, r1
 801164c:	600a      	str	r2, [r1, #0]
 801164e:	604b      	str	r3, [r1, #4]
	uint64_t contenido3 = 0;
 8011650:	2200      	movs	r2, #0
 8011652:	2300      	movs	r3, #0
 8011654:	2198      	movs	r1, #152	@ 0x98
 8011656:	1879      	adds	r1, r7, r1
 8011658:	600a      	str	r2, [r1, #0]
 801165a:	604b      	str	r3, [r1, #4]
	uint64_t contenido4 = 0;
 801165c:	2200      	movs	r2, #0
 801165e:	2300      	movs	r3, #0
 8011660:	2190      	movs	r1, #144	@ 0x90
 8011662:	1879      	adds	r1, r7, r1
 8011664:	600a      	str	r2, [r1, #0]
 8011666:	604b      	str	r3, [r1, #4]
	uint64_t contenido5 = 0;
 8011668:	2200      	movs	r2, #0
 801166a:	2300      	movs	r3, #0
 801166c:	2188      	movs	r1, #136	@ 0x88
 801166e:	1879      	adds	r1, r7, r1
 8011670:	600a      	str	r2, [r1, #0]
 8011672:	604b      	str	r3, [r1, #4]
	uint64_t contenido6 = 0;
 8011674:	2200      	movs	r2, #0
 8011676:	2300      	movs	r3, #0
 8011678:	2180      	movs	r1, #128	@ 0x80
 801167a:	1879      	adds	r1, r7, r1
 801167c:	600a      	str	r2, [r1, #0]
 801167e:	604b      	str	r3, [r1, #4]
	uint64_t contenido7 = 0;
 8011680:	2200      	movs	r2, #0
 8011682:	2300      	movs	r3, #0
 8011684:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011686:	67fb      	str	r3, [r7, #124]	@ 0x7c
	uint64_t contenido8 = 0;
 8011688:	2200      	movs	r2, #0
 801168a:	2300      	movs	r3, #0
 801168c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801168e:	66fb      	str	r3, [r7, #108]	@ 0x6c

	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8011690:	46c0      	nop			@ (mov r8, r8)
 8011692:	f001 fa89 	bl	8012ba8 <HAL_FLASH_Unlock>
 8011696:	1e03      	subs	r3, r0, #0
 8011698:	d1fb      	bne.n	8011692 <graba_bloque_fw+0xce>
	for(i = 0; i < 16; i++)
 801169a:	2357      	movs	r3, #87	@ 0x57
 801169c:	2268      	movs	r2, #104	@ 0x68
 801169e:	189b      	adds	r3, r3, r2
 80116a0:	19da      	adds	r2, r3, r7
 80116a2:	2300      	movs	r3, #0
 80116a4:	7013      	strb	r3, [r2, #0]
 80116a6:	e1c0      	b.n	8011a2a <graba_bloque_fw+0x466>
	{
		switch (j)
 80116a8:	2356      	movs	r3, #86	@ 0x56
 80116aa:	2268      	movs	r2, #104	@ 0x68
 80116ac:	189b      	adds	r3, r3, r2
 80116ae:	19db      	adds	r3, r3, r7
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	2b07      	cmp	r3, #7
 80116b4:	d900      	bls.n	80116b8 <graba_bloque_fw+0xf4>
 80116b6:	e1af      	b.n	8011a18 <graba_bloque_fw+0x454>
 80116b8:	009a      	lsls	r2, r3, #2
 80116ba:	4be5      	ldr	r3, [pc, #916]	@ (8011a50 <graba_bloque_fw+0x48c>)
 80116bc:	18d3      	adds	r3, r2, r3
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	469f      	mov	pc, r3
		{
			case 0:
				contenido1 =  RxBuffer_Ble[a];
 80116c2:	2355      	movs	r3, #85	@ 0x55
 80116c4:	2168      	movs	r1, #104	@ 0x68
 80116c6:	185b      	adds	r3, r3, r1
 80116c8:	19db      	adds	r3, r3, r7
 80116ca:	781a      	ldrb	r2, [r3, #0]
 80116cc:	4be1      	ldr	r3, [pc, #900]	@ (8011a54 <graba_bloque_fw+0x490>)
 80116ce:	5c9b      	ldrb	r3, [r3, r2]
 80116d0:	22a8      	movs	r2, #168	@ 0xa8
 80116d2:	18ba      	adds	r2, r7, r2
 80116d4:	6013      	str	r3, [r2, #0]
 80116d6:	2300      	movs	r3, #0
 80116d8:	22ac      	movs	r2, #172	@ 0xac
 80116da:	18ba      	adds	r2, r7, r2
 80116dc:	6013      	str	r3, [r2, #0]
				j++;
 80116de:	2256      	movs	r2, #86	@ 0x56
 80116e0:	1853      	adds	r3, r2, r1
 80116e2:	19db      	adds	r3, r3, r7
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	1852      	adds	r2, r2, r1
 80116e8:	19d2      	adds	r2, r2, r7
 80116ea:	3301      	adds	r3, #1
 80116ec:	7013      	strb	r3, [r2, #0]
			case 1:

				contenido2 =  RxBuffer_Ble[b];
 80116ee:	2354      	movs	r3, #84	@ 0x54
 80116f0:	2068      	movs	r0, #104	@ 0x68
 80116f2:	181b      	adds	r3, r3, r0
 80116f4:	19db      	adds	r3, r3, r7
 80116f6:	781a      	ldrb	r2, [r3, #0]
 80116f8:	4bd6      	ldr	r3, [pc, #856]	@ (8011a54 <graba_bloque_fw+0x490>)
 80116fa:	5c9b      	ldrb	r3, [r3, r2]
 80116fc:	21a0      	movs	r1, #160	@ 0xa0
 80116fe:	187a      	adds	r2, r7, r1
 8011700:	6013      	str	r3, [r2, #0]
 8011702:	2300      	movs	r3, #0
 8011704:	26a4      	movs	r6, #164	@ 0xa4
 8011706:	19ba      	adds	r2, r7, r6
 8011708:	6013      	str	r3, [r2, #0]
				contenido2 = contenido2 << 8;
 801170a:	187b      	adds	r3, r7, r1
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	0e1a      	lsrs	r2, r3, #24
 8011710:	19bb      	adds	r3, r7, r6
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	021d      	lsls	r5, r3, #8
 8011716:	4315      	orrs	r5, r2
 8011718:	187b      	adds	r3, r7, r1
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	021c      	lsls	r4, r3, #8
 801171e:	187b      	adds	r3, r7, r1
 8011720:	601c      	str	r4, [r3, #0]
 8011722:	605d      	str	r5, [r3, #4]
				j++;
 8011724:	2256      	movs	r2, #86	@ 0x56
 8011726:	1813      	adds	r3, r2, r0
 8011728:	19db      	adds	r3, r3, r7
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	1812      	adds	r2, r2, r0
 801172e:	19d2      	adds	r2, r2, r7
 8011730:	3301      	adds	r3, #1
 8011732:	7013      	strb	r3, [r2, #0]

			case 2:
				contenido3 =  RxBuffer_Ble[c];
 8011734:	2353      	movs	r3, #83	@ 0x53
 8011736:	2068      	movs	r0, #104	@ 0x68
 8011738:	181b      	adds	r3, r3, r0
 801173a:	19db      	adds	r3, r3, r7
 801173c:	781a      	ldrb	r2, [r3, #0]
 801173e:	4bc5      	ldr	r3, [pc, #788]	@ (8011a54 <graba_bloque_fw+0x490>)
 8011740:	5c9b      	ldrb	r3, [r3, r2]
 8011742:	2198      	movs	r1, #152	@ 0x98
 8011744:	187a      	adds	r2, r7, r1
 8011746:	6013      	str	r3, [r2, #0]
 8011748:	2300      	movs	r3, #0
 801174a:	269c      	movs	r6, #156	@ 0x9c
 801174c:	19ba      	adds	r2, r7, r6
 801174e:	6013      	str	r3, [r2, #0]
				contenido3 = contenido3 << 16;
 8011750:	187b      	adds	r3, r7, r1
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	0c1a      	lsrs	r2, r3, #16
 8011756:	19bb      	adds	r3, r7, r6
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	041b      	lsls	r3, r3, #16
 801175c:	667b      	str	r3, [r7, #100]	@ 0x64
 801175e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011760:	4313      	orrs	r3, r2
 8011762:	667b      	str	r3, [r7, #100]	@ 0x64
 8011764:	187b      	adds	r3, r7, r1
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	041b      	lsls	r3, r3, #16
 801176a:	663b      	str	r3, [r7, #96]	@ 0x60
 801176c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801176e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011770:	1879      	adds	r1, r7, r1
 8011772:	600a      	str	r2, [r1, #0]
 8011774:	604b      	str	r3, [r1, #4]
				j++;
 8011776:	2256      	movs	r2, #86	@ 0x56
 8011778:	1813      	adds	r3, r2, r0
 801177a:	19db      	adds	r3, r3, r7
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	1812      	adds	r2, r2, r0
 8011780:	19d2      	adds	r2, r2, r7
 8011782:	3301      	adds	r3, #1
 8011784:	7013      	strb	r3, [r2, #0]

			case 3:
				contenido4 =  RxBuffer_Ble[d];
 8011786:	2352      	movs	r3, #82	@ 0x52
 8011788:	2068      	movs	r0, #104	@ 0x68
 801178a:	181b      	adds	r3, r3, r0
 801178c:	19db      	adds	r3, r3, r7
 801178e:	781a      	ldrb	r2, [r3, #0]
 8011790:	4bb0      	ldr	r3, [pc, #704]	@ (8011a54 <graba_bloque_fw+0x490>)
 8011792:	5c9b      	ldrb	r3, [r3, r2]
 8011794:	2190      	movs	r1, #144	@ 0x90
 8011796:	187a      	adds	r2, r7, r1
 8011798:	6013      	str	r3, [r2, #0]
 801179a:	2300      	movs	r3, #0
 801179c:	2694      	movs	r6, #148	@ 0x94
 801179e:	19ba      	adds	r2, r7, r6
 80117a0:	6013      	str	r3, [r2, #0]
				contenido4 = contenido4 << 24;
 80117a2:	187b      	adds	r3, r7, r1
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	0a1a      	lsrs	r2, r3, #8
 80117a8:	19bb      	adds	r3, r7, r6
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	061b      	lsls	r3, r3, #24
 80117ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80117b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117b2:	4313      	orrs	r3, r2
 80117b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80117b6:	187b      	adds	r3, r7, r1
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	061b      	lsls	r3, r3, #24
 80117bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80117c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117c2:	1879      	adds	r1, r7, r1
 80117c4:	600a      	str	r2, [r1, #0]
 80117c6:	604b      	str	r3, [r1, #4]
				j++;
 80117c8:	2256      	movs	r2, #86	@ 0x56
 80117ca:	1813      	adds	r3, r2, r0
 80117cc:	19db      	adds	r3, r3, r7
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	1812      	adds	r2, r2, r0
 80117d2:	19d2      	adds	r2, r2, r7
 80117d4:	3301      	adds	r3, #1
 80117d6:	7013      	strb	r3, [r2, #0]

			case 4:
				contenido5 =  RxBuffer_Ble[e];
 80117d8:	2351      	movs	r3, #81	@ 0x51
 80117da:	2068      	movs	r0, #104	@ 0x68
 80117dc:	181b      	adds	r3, r3, r0
 80117de:	19db      	adds	r3, r3, r7
 80117e0:	781a      	ldrb	r2, [r3, #0]
 80117e2:	4b9c      	ldr	r3, [pc, #624]	@ (8011a54 <graba_bloque_fw+0x490>)
 80117e4:	5c9b      	ldrb	r3, [r3, r2]
 80117e6:	2188      	movs	r1, #136	@ 0x88
 80117e8:	187a      	adds	r2, r7, r1
 80117ea:	6013      	str	r3, [r2, #0]
 80117ec:	2300      	movs	r3, #0
 80117ee:	228c      	movs	r2, #140	@ 0x8c
 80117f0:	18ba      	adds	r2, r7, r2
 80117f2:	6013      	str	r3, [r2, #0]
				contenido5 = contenido5 << 32;
 80117f4:	187b      	adds	r3, r7, r1
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	001b      	movs	r3, r3
 80117fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80117fc:	2300      	movs	r3, #0
 80117fe:	623b      	str	r3, [r7, #32]
 8011800:	6a3a      	ldr	r2, [r7, #32]
 8011802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011804:	1879      	adds	r1, r7, r1
 8011806:	600a      	str	r2, [r1, #0]
 8011808:	604b      	str	r3, [r1, #4]
				j++;
 801180a:	2256      	movs	r2, #86	@ 0x56
 801180c:	1813      	adds	r3, r2, r0
 801180e:	19db      	adds	r3, r3, r7
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	1812      	adds	r2, r2, r0
 8011814:	19d2      	adds	r2, r2, r7
 8011816:	3301      	adds	r3, #1
 8011818:	7013      	strb	r3, [r2, #0]

			case 5:
				contenido6 = RxBuffer_Ble[f];
 801181a:	2350      	movs	r3, #80	@ 0x50
 801181c:	2068      	movs	r0, #104	@ 0x68
 801181e:	181b      	adds	r3, r3, r0
 8011820:	19db      	adds	r3, r3, r7
 8011822:	781a      	ldrb	r2, [r3, #0]
 8011824:	4b8b      	ldr	r3, [pc, #556]	@ (8011a54 <graba_bloque_fw+0x490>)
 8011826:	5c9b      	ldrb	r3, [r3, r2]
 8011828:	2180      	movs	r1, #128	@ 0x80
 801182a:	187a      	adds	r2, r7, r1
 801182c:	6013      	str	r3, [r2, #0]
 801182e:	2300      	movs	r3, #0
 8011830:	2284      	movs	r2, #132	@ 0x84
 8011832:	18ba      	adds	r2, r7, r2
 8011834:	6013      	str	r3, [r2, #0]
				contenido6 = contenido6 << 40;
 8011836:	187b      	adds	r3, r7, r1
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	021b      	lsls	r3, r3, #8
 801183c:	61fb      	str	r3, [r7, #28]
 801183e:	2300      	movs	r3, #0
 8011840:	61bb      	str	r3, [r7, #24]
 8011842:	69ba      	ldr	r2, [r7, #24]
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	1879      	adds	r1, r7, r1
 8011848:	600a      	str	r2, [r1, #0]
 801184a:	604b      	str	r3, [r1, #4]
				j++;
 801184c:	2256      	movs	r2, #86	@ 0x56
 801184e:	1813      	adds	r3, r2, r0
 8011850:	19db      	adds	r3, r3, r7
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	1812      	adds	r2, r2, r0
 8011856:	19d2      	adds	r2, r2, r7
 8011858:	3301      	adds	r3, #1
 801185a:	7013      	strb	r3, [r2, #0]

			case 6:
				contenido7 = RxBuffer_Ble[g];
 801185c:	234f      	movs	r3, #79	@ 0x4f
 801185e:	2168      	movs	r1, #104	@ 0x68
 8011860:	185b      	adds	r3, r3, r1
 8011862:	19db      	adds	r3, r3, r7
 8011864:	781a      	ldrb	r2, [r3, #0]
 8011866:	4b7b      	ldr	r3, [pc, #492]	@ (8011a54 <graba_bloque_fw+0x490>)
 8011868:	5c9b      	ldrb	r3, [r3, r2]
 801186a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801186c:	2300      	movs	r3, #0
 801186e:	67fb      	str	r3, [r7, #124]	@ 0x7c
				contenido7 = contenido7 << 48;
 8011870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011872:	041b      	lsls	r3, r3, #16
 8011874:	617b      	str	r3, [r7, #20]
 8011876:	2300      	movs	r3, #0
 8011878:	613b      	str	r3, [r7, #16]
 801187a:	693a      	ldr	r2, [r7, #16]
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011880:	67fb      	str	r3, [r7, #124]	@ 0x7c
				j++;
 8011882:	2256      	movs	r2, #86	@ 0x56
 8011884:	1853      	adds	r3, r2, r1
 8011886:	19db      	adds	r3, r3, r7
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	1852      	adds	r2, r2, r1
 801188c:	19d2      	adds	r2, r2, r7
 801188e:	3301      	adds	r3, #1
 8011890:	7013      	strb	r3, [r2, #0]

			case 7:
				contenido8 = RxBuffer_Ble[h];
 8011892:	234e      	movs	r3, #78	@ 0x4e
 8011894:	2268      	movs	r2, #104	@ 0x68
 8011896:	189b      	adds	r3, r3, r2
 8011898:	19db      	adds	r3, r3, r7
 801189a:	781a      	ldrb	r2, [r3, #0]
 801189c:	4b6d      	ldr	r3, [pc, #436]	@ (8011a54 <graba_bloque_fw+0x490>)
 801189e:	5c9b      	ldrb	r3, [r3, r2]
 80118a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80118a2:	2300      	movs	r3, #0
 80118a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
				contenido8 = contenido8 << 56;
 80118a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80118a8:	061b      	lsls	r3, r3, #24
 80118aa:	60fb      	str	r3, [r7, #12]
 80118ac:	2300      	movs	r3, #0
 80118ae:	60bb      	str	r3, [r7, #8]
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80118b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

				buffer_recepcion = contenido1 | contenido2 | contenido3 | contenido4 | contenido5 |contenido6 | contenido7 |contenido8;
 80118b8:	23a8      	movs	r3, #168	@ 0xa8
 80118ba:	18fb      	adds	r3, r7, r3
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	23a0      	movs	r3, #160	@ 0xa0
 80118c0:	18fb      	adds	r3, r7, r3
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	431a      	orrs	r2, r3
 80118c6:	653a      	str	r2, [r7, #80]	@ 0x50
 80118c8:	23ac      	movs	r3, #172	@ 0xac
 80118ca:	18fb      	adds	r3, r7, r3
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	23a4      	movs	r3, #164	@ 0xa4
 80118d0:	18fb      	adds	r3, r7, r3
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	431a      	orrs	r2, r3
 80118d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80118d8:	2398      	movs	r3, #152	@ 0x98
 80118da:	18fb      	adds	r3, r7, r3
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80118e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80118e2:	0008      	movs	r0, r1
 80118e4:	4318      	orrs	r0, r3
 80118e6:	64b8      	str	r0, [r7, #72]	@ 0x48
 80118e8:	239c      	movs	r3, #156	@ 0x9c
 80118ea:	18fb      	adds	r3, r7, r3
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	431a      	orrs	r2, r3
 80118f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80118f2:	2390      	movs	r3, #144	@ 0x90
 80118f4:	18fb      	adds	r3, r7, r3
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80118fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80118fc:	0008      	movs	r0, r1
 80118fe:	4318      	orrs	r0, r3
 8011900:	6438      	str	r0, [r7, #64]	@ 0x40
 8011902:	2394      	movs	r3, #148	@ 0x94
 8011904:	18fb      	adds	r3, r7, r3
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	431a      	orrs	r2, r3
 801190a:	647a      	str	r2, [r7, #68]	@ 0x44
 801190c:	2388      	movs	r3, #136	@ 0x88
 801190e:	18fb      	adds	r3, r7, r3
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011914:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011916:	0008      	movs	r0, r1
 8011918:	4318      	orrs	r0, r3
 801191a:	63b8      	str	r0, [r7, #56]	@ 0x38
 801191c:	238c      	movs	r3, #140	@ 0x8c
 801191e:	18fb      	adds	r3, r7, r3
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	431a      	orrs	r2, r3
 8011924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011926:	2380      	movs	r3, #128	@ 0x80
 8011928:	18fb      	adds	r3, r7, r3
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801192e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011930:	0008      	movs	r0, r1
 8011932:	4318      	orrs	r0, r3
 8011934:	6338      	str	r0, [r7, #48]	@ 0x30
 8011936:	2384      	movs	r3, #132	@ 0x84
 8011938:	18fb      	adds	r3, r7, r3
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	431a      	orrs	r2, r3
 801193e:	637a      	str	r2, [r7, #52]	@ 0x34
 8011940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011942:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011944:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011946:	0008      	movs	r0, r1
 8011948:	4318      	orrs	r0, r3
 801194a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801194c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801194e:	431a      	orrs	r2, r3
 8011950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011958:	0008      	movs	r0, r1
 801195a:	4318      	orrs	r0, r3
 801195c:	6038      	str	r0, [r7, #0]
 801195e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011960:	431a      	orrs	r2, r3
 8011962:	607a      	str	r2, [r7, #4]
 8011964:	683a      	ldr	r2, [r7, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	673a      	str	r2, [r7, #112]	@ 0x70
 801196a:	677b      	str	r3, [r7, #116]	@ 0x74
				while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, direccion_fw, buffer_recepcion) != HAL_OK);
 801196c:	46c0      	nop			@ (mov r8, r8)
 801196e:	4b3a      	ldr	r3, [pc, #232]	@ (8011a58 <graba_bloque_fw+0x494>)
 8011970:	6819      	ldr	r1, [r3, #0]
 8011972:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011974:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011976:	2001      	movs	r0, #1
 8011978:	f001 f8c8 	bl	8012b0c <HAL_FLASH_Program>
 801197c:	1e03      	subs	r3, r0, #0
 801197e:	d1f6      	bne.n	801196e <graba_bloque_fw+0x3aa>
				//while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion)!=  HAL_OK);
				//HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, direccion_fw, buffer_recepcion);
				direccion_fw = direccion_fw + 8;
 8011980:	4b35      	ldr	r3, [pc, #212]	@ (8011a58 <graba_bloque_fw+0x494>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	3308      	adds	r3, #8
 8011986:	001a      	movs	r2, r3
 8011988:	4b33      	ldr	r3, [pc, #204]	@ (8011a58 <graba_bloque_fw+0x494>)
 801198a:	601a      	str	r2, [r3, #0]
				j = 0;
 801198c:	2356      	movs	r3, #86	@ 0x56
 801198e:	2168      	movs	r1, #104	@ 0x68
 8011990:	185b      	adds	r3, r3, r1
 8011992:	19da      	adds	r2, r3, r7
 8011994:	2300      	movs	r3, #0
 8011996:	7013      	strb	r3, [r2, #0]
				a = a + 8;
 8011998:	2355      	movs	r3, #85	@ 0x55
 801199a:	185a      	adds	r2, r3, r1
 801199c:	19d2      	adds	r2, r2, r7
 801199e:	185b      	adds	r3, r3, r1
 80119a0:	19db      	adds	r3, r3, r7
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	3308      	adds	r3, #8
 80119a6:	7013      	strb	r3, [r2, #0]
				b = b + 8;
 80119a8:	2354      	movs	r3, #84	@ 0x54
 80119aa:	185a      	adds	r2, r3, r1
 80119ac:	19d2      	adds	r2, r2, r7
 80119ae:	185b      	adds	r3, r3, r1
 80119b0:	19db      	adds	r3, r3, r7
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	3308      	adds	r3, #8
 80119b6:	7013      	strb	r3, [r2, #0]
				c = c + 8;
 80119b8:	2353      	movs	r3, #83	@ 0x53
 80119ba:	185a      	adds	r2, r3, r1
 80119bc:	19d2      	adds	r2, r2, r7
 80119be:	185b      	adds	r3, r3, r1
 80119c0:	19db      	adds	r3, r3, r7
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	3308      	adds	r3, #8
 80119c6:	7013      	strb	r3, [r2, #0]
				d = d + 8;
 80119c8:	2352      	movs	r3, #82	@ 0x52
 80119ca:	185a      	adds	r2, r3, r1
 80119cc:	19d2      	adds	r2, r2, r7
 80119ce:	185b      	adds	r3, r3, r1
 80119d0:	19db      	adds	r3, r3, r7
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	3308      	adds	r3, #8
 80119d6:	7013      	strb	r3, [r2, #0]
				e = e + 8;
 80119d8:	2351      	movs	r3, #81	@ 0x51
 80119da:	185a      	adds	r2, r3, r1
 80119dc:	19d2      	adds	r2, r2, r7
 80119de:	185b      	adds	r3, r3, r1
 80119e0:	19db      	adds	r3, r3, r7
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	3308      	adds	r3, #8
 80119e6:	7013      	strb	r3, [r2, #0]
				f = f + 8;
 80119e8:	2350      	movs	r3, #80	@ 0x50
 80119ea:	185a      	adds	r2, r3, r1
 80119ec:	19d2      	adds	r2, r2, r7
 80119ee:	185b      	adds	r3, r3, r1
 80119f0:	19db      	adds	r3, r3, r7
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	3308      	adds	r3, #8
 80119f6:	7013      	strb	r3, [r2, #0]
				g = g + 8;
 80119f8:	234f      	movs	r3, #79	@ 0x4f
 80119fa:	185a      	adds	r2, r3, r1
 80119fc:	19d2      	adds	r2, r2, r7
 80119fe:	185b      	adds	r3, r3, r1
 8011a00:	19db      	adds	r3, r3, r7
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	3308      	adds	r3, #8
 8011a06:	7013      	strb	r3, [r2, #0]
				h = h + 8;
 8011a08:	234e      	movs	r3, #78	@ 0x4e
 8011a0a:	185a      	adds	r2, r3, r1
 8011a0c:	19d2      	adds	r2, r2, r7
 8011a0e:	185b      	adds	r3, r3, r1
 8011a10:	19db      	adds	r3, r3, r7
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	3308      	adds	r3, #8
 8011a16:	7013      	strb	r3, [r2, #0]
	for(i = 0; i < 16; i++)
 8011a18:	2257      	movs	r2, #87	@ 0x57
 8011a1a:	2168      	movs	r1, #104	@ 0x68
 8011a1c:	1853      	adds	r3, r2, r1
 8011a1e:	19db      	adds	r3, r3, r7
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	1852      	adds	r2, r2, r1
 8011a24:	19d2      	adds	r2, r2, r7
 8011a26:	3301      	adds	r3, #1
 8011a28:	7013      	strb	r3, [r2, #0]
 8011a2a:	2357      	movs	r3, #87	@ 0x57
 8011a2c:	2268      	movs	r2, #104	@ 0x68
 8011a2e:	189b      	adds	r3, r3, r2
 8011a30:	19db      	adds	r3, r3, r7
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	2b0f      	cmp	r3, #15
 8011a36:	d800      	bhi.n	8011a3a <graba_bloque_fw+0x476>
 8011a38:	e636      	b.n	80116a8 <graba_bloque_fw+0xe4>
		}


	}
	while(HAL_FLASH_Lock() != HAL_OK );
 8011a3a:	46c0      	nop			@ (mov r8, r8)
 8011a3c:	f001 f8d8 	bl	8012bf0 <HAL_FLASH_Lock>
 8011a40:	1e03      	subs	r3, r0, #0
 8011a42:	d1fb      	bne.n	8011a3c <graba_bloque_fw+0x478>
}
 8011a44:	46c0      	nop			@ (mov r8, r8)
 8011a46:	46c0      	nop			@ (mov r8, r8)
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	b031      	add	sp, #196	@ 0xc4
 8011a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a4e:	46c0      	nop			@ (mov r8, r8)
 8011a50:	0801b0c0 	.word	0x0801b0c0
 8011a54:	20000984 	.word	0x20000984
 8011a58:	20000274 	.word	0x20000274

08011a5c <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 8011a60:	4b8b      	ldr	r3, [pc, #556]	@ (8011c90 <voltmetro+0x234>)
 8011a62:	799b      	ldrb	r3, [r3, #6]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d100      	bne.n	8011a6a <voltmetro+0xe>
 8011a68:	e0fb      	b.n	8011c62 <voltmetro+0x206>
					goto voltmetro1;
 8011a6a:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 8011a6c:	4b89      	ldr	r3, [pc, #548]	@ (8011c94 <voltmetro+0x238>)
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	3301      	adds	r3, #1
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	4b87      	ldr	r3, [pc, #540]	@ (8011c94 <voltmetro+0x238>)
 8011a76:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 8011a78:	4b86      	ldr	r3, [pc, #536]	@ (8011c94 <voltmetro+0x238>)
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	2b18      	cmp	r3, #24
 8011a7e:	d800      	bhi.n	8011a82 <voltmetro+0x26>
 8011a80:	e06f      	b.n	8011b62 <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 8011a82:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 8011a84:	4b83      	ldr	r3, [pc, #524]	@ (8011c94 <voltmetro+0x238>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 8011a8a:	4b83      	ldr	r3, [pc, #524]	@ (8011c98 <voltmetro+0x23c>)
 8011a8c:	781a      	ldrb	r2, [r3, #0]
 8011a8e:	4b83      	ldr	r3, [pc, #524]	@ (8011c9c <voltmetro+0x240>)
 8011a90:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 8011a92:	4b82      	ldr	r3, [pc, #520]	@ (8011c9c <voltmetro+0x240>)
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	2bff      	cmp	r3, #255	@ 0xff
 8011a98:	d10a      	bne.n	8011ab0 <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 8011a9a:	4b81      	ldr	r3, [pc, #516]	@ (8011ca0 <voltmetro+0x244>)
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	2b02      	cmp	r3, #2
 8011aa0:	d019      	beq.n	8011ad6 <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 8011aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8011ca0 <voltmetro+0x244>)
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8011ca0 <voltmetro+0x244>)
 8011aac:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8011aae:	e05b      	b.n	8011b68 <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 8011ab0:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 8011ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8011ca0 <voltmetro+0x244>)
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 8011ab8:	4b78      	ldr	r3, [pc, #480]	@ (8011c9c <voltmetro+0x240>)
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	2b32      	cmp	r3, #50	@ 0x32
 8011abe:	d82a      	bhi.n	8011b16 <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 8011ac0:	4b78      	ldr	r3, [pc, #480]	@ (8011ca4 <voltmetro+0x248>)
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	d008      	beq.n	8011ada <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 8011ac8:	4b76      	ldr	r3, [pc, #472]	@ (8011ca4 <voltmetro+0x248>)
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	3301      	adds	r3, #1
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	4b74      	ldr	r3, [pc, #464]	@ (8011ca4 <voltmetro+0x248>)
 8011ad2:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8011ad4:	e048      	b.n	8011b68 <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 8011ad6:	46c0      	nop			@ (mov r8, r8)
 8011ad8:	e000      	b.n	8011adc <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 8011ada:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8011adc:	4b72      	ldr	r3, [pc, #456]	@ (8011ca8 <voltmetro+0x24c>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 8011ae2:	4b72      	ldr	r3, [pc, #456]	@ (8011cac <voltmetro+0x250>)
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d103      	bne.n	8011af2 <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 8011aea:	4b6f      	ldr	r3, [pc, #444]	@ (8011ca8 <voltmetro+0x24c>)
 8011aec:	2201      	movs	r2, #1
 8011aee:	701a      	strb	r2, [r3, #0]
 8011af0:	e000      	b.n	8011af4 <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 8011af2:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 8011af4:	4b6e      	ldr	r3, [pc, #440]	@ (8011cb0 <voltmetro+0x254>)
 8011af6:	2200      	movs	r2, #0
 8011af8:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 8011afa:	4b6e      	ldr	r3, [pc, #440]	@ (8011cb4 <voltmetro+0x258>)
 8011afc:	2273      	movs	r2, #115	@ 0x73
 8011afe:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 8011b00:	4b6d      	ldr	r3, [pc, #436]	@ (8011cb8 <voltmetro+0x25c>)
 8011b02:	2257      	movs	r2, #87	@ 0x57
 8011b04:	5c9b      	ldrb	r3, [r3, r2]
 8011b06:	2b02      	cmp	r3, #2
 8011b08:	d103      	bne.n	8011b12 <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 8011b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8011cb4 <voltmetro+0x258>)
 8011b0c:	22d2      	movs	r2, #210	@ 0xd2
 8011b0e:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 8011b10:	e02a      	b.n	8011b68 <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 8011b12:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 8011b14:	e028      	b.n	8011b68 <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 8011b16:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 8011b18:	4b62      	ldr	r3, [pc, #392]	@ (8011ca4 <voltmetro+0x248>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8011b1e:	4b62      	ldr	r3, [pc, #392]	@ (8011ca8 <voltmetro+0x24c>)
 8011b20:	2200      	movs	r2, #0
 8011b22:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 8011b24:	4b62      	ldr	r3, [pc, #392]	@ (8011cb0 <voltmetro+0x254>)
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	001a      	movs	r2, r3
 8011b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8011c9c <voltmetro+0x240>)
 8011b2c:	7819      	ldrb	r1, [r3, #0]
 8011b2e:	4b63      	ldr	r3, [pc, #396]	@ (8011cbc <voltmetro+0x260>)
 8011b30:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 8011b32:	4b5f      	ldr	r3, [pc, #380]	@ (8011cb0 <voltmetro+0x254>)
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	3301      	adds	r3, #1
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8011cb0 <voltmetro+0x254>)
 8011b3c:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 8011b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8011cb0 <voltmetro+0x254>)
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	2b07      	cmp	r3, #7
 8011b44:	d90f      	bls.n	8011b66 <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 8011b46:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 8011b48:	4b59      	ldr	r3, [pc, #356]	@ (8011cb0 <voltmetro+0x254>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 8011b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8011cbc <voltmetro+0x260>)
 8011b50:	2108      	movs	r1, #8
 8011b52:	0018      	movs	r0, r3
 8011b54:	f7f3 ff1a 	bl	800598c <prom8m1b>
 8011b58:	0003      	movs	r3, r0
 8011b5a:	b2da      	uxtb	r2, r3
 8011b5c:	4b55      	ldr	r3, [pc, #340]	@ (8011cb4 <voltmetro+0x258>)
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	e002      	b.n	8011b68 <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 8011b62:	46c0      	nop			@ (mov r8, r8)
 8011b64:	e000      	b.n	8011b68 <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 8011b66:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 8011b68:	4b55      	ldr	r3, [pc, #340]	@ (8011cc0 <voltmetro+0x264>)
 8011b6a:	79db      	ldrb	r3, [r3, #7]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d104      	bne.n	8011b7a <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 8011b70:	4b54      	ldr	r3, [pc, #336]	@ (8011cc4 <voltmetro+0x268>)
 8011b72:	781a      	ldrb	r2, [r3, #0]
 8011b74:	4b54      	ldr	r3, [pc, #336]	@ (8011cc8 <voltmetro+0x26c>)
 8011b76:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 8011b78:	e004      	b.n	8011b84 <voltmetro+0x128>
					goto hist_vla;
 8011b7a:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 8011b7c:	4b53      	ldr	r3, [pc, #332]	@ (8011ccc <voltmetro+0x270>)
 8011b7e:	781a      	ldrb	r2, [r3, #0]
 8011b80:	4b51      	ldr	r3, [pc, #324]	@ (8011cc8 <voltmetro+0x26c>)
 8011b82:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 8011b84:	4b50      	ldr	r3, [pc, #320]	@ (8011cc8 <voltmetro+0x26c>)
 8011b86:	781a      	ldrb	r2, [r3, #0]
 8011b88:	4b4a      	ldr	r3, [pc, #296]	@ (8011cb4 <voltmetro+0x258>)
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d80c      	bhi.n	8011baa <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 8011b90:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 8011b92:	4b4f      	ldr	r3, [pc, #316]	@ (8011cd0 <voltmetro+0x274>)
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d165      	bne.n	8011c66 <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 8011b9a:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 8011b9c:	4948      	ldr	r1, [pc, #288]	@ (8011cc0 <voltmetro+0x264>)
 8011b9e:	4848      	ldr	r0, [pc, #288]	@ (8011cc0 <voltmetro+0x264>)
 8011ba0:	2306      	movs	r3, #6
 8011ba2:	2207      	movs	r2, #7
 8011ba4:	f7fb ff28 	bl	800d9f8 <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 8011ba8:	e02e      	b.n	8011c08 <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 8011baa:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 8011bac:	4b42      	ldr	r3, [pc, #264]	@ (8011cb8 <voltmetro+0x25c>)
 8011bae:	2245      	movs	r2, #69	@ 0x45
 8011bb0:	5c9a      	ldrb	r2, [r3, r2]
 8011bb2:	4b47      	ldr	r3, [pc, #284]	@ (8011cd0 <voltmetro+0x274>)
 8011bb4:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 8011bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8011cac <voltmetro+0x250>)
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d103      	bne.n	8011bc6 <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 8011bbe:	4b44      	ldr	r3, [pc, #272]	@ (8011cd0 <voltmetro+0x274>)
 8011bc0:	2202      	movs	r2, #2
 8011bc2:	701a      	strb	r2, [r3, #0]
 8011bc4:	e000      	b.n	8011bc8 <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 8011bc6:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 8011bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8011cc0 <voltmetro+0x264>)
 8011bca:	799b      	ldrb	r3, [r3, #6]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d104      	bne.n	8011bda <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 8011bd0:	4b40      	ldr	r3, [pc, #256]	@ (8011cd4 <voltmetro+0x278>)
 8011bd2:	781a      	ldrb	r2, [r3, #0]
 8011bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8011cc8 <voltmetro+0x26c>)
 8011bd6:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 8011bd8:	e004      	b.n	8011be4 <voltmetro+0x188>
						goto hist_vlb; //
 8011bda:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 8011bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8011cd8 <voltmetro+0x27c>)
 8011bde:	781a      	ldrb	r2, [r3, #0]
 8011be0:	4b39      	ldr	r3, [pc, #228]	@ (8011cc8 <voltmetro+0x26c>)
 8011be2:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 8011be4:	4b38      	ldr	r3, [pc, #224]	@ (8011cc8 <voltmetro+0x26c>)
 8011be6:	781a      	ldrb	r2, [r3, #0]
 8011be8:	4b32      	ldr	r3, [pc, #200]	@ (8011cb4 <voltmetro+0x258>)
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d31d      	bcc.n	8011c2c <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 8011bf0:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 8011bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8011cdc <voltmetro+0x280>)
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d137      	bne.n	8011c6a <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 8011bfa:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 8011bfc:	4930      	ldr	r1, [pc, #192]	@ (8011cc0 <voltmetro+0x264>)
 8011bfe:	4830      	ldr	r0, [pc, #192]	@ (8011cc0 <voltmetro+0x264>)
 8011c00:	2307      	movs	r3, #7
 8011c02:	2206      	movs	r2, #6
 8011c04:	f7fb fef8 	bl	800d9f8 <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 8011c08:	4b2b      	ldr	r3, [pc, #172]	@ (8011cb8 <voltmetro+0x25c>)
 8011c0a:	2263      	movs	r2, #99	@ 0x63
 8011c0c:	5c9a      	ldrb	r2, [r3, r2]
 8011c0e:	4b23      	ldr	r3, [pc, #140]	@ (8011c9c <voltmetro+0x240>)
 8011c10:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 8011c12:	f7f4 fea3 	bl	800695c <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 8011c16:	4b32      	ldr	r3, [pc, #200]	@ (8011ce0 <voltmetro+0x284>)
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	021b      	lsls	r3, r3, #8
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	4a31      	ldr	r2, [pc, #196]	@ (8011ce4 <voltmetro+0x288>)
 8011c20:	7812      	ldrb	r2, [r2, #0]
 8011c22:	189b      	adds	r3, r3, r2
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	4b30      	ldr	r3, [pc, #192]	@ (8011ce8 <voltmetro+0x28c>)
 8011c28:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 8011c2a:	e021      	b.n	8011c70 <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 8011c2c:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 8011c2e:	4b22      	ldr	r3, [pc, #136]	@ (8011cb8 <voltmetro+0x25c>)
 8011c30:	2245      	movs	r2, #69	@ 0x45
 8011c32:	5c9a      	ldrb	r2, [r3, r2]
 8011c34:	4b29      	ldr	r3, [pc, #164]	@ (8011cdc <voltmetro+0x280>)
 8011c36:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 8011c38:	4b1c      	ldr	r3, [pc, #112]	@ (8011cac <voltmetro+0x250>)
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d103      	bne.n	8011c48 <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 8011c40:	4b26      	ldr	r3, [pc, #152]	@ (8011cdc <voltmetro+0x280>)
 8011c42:	2202      	movs	r2, #2
 8011c44:	701a      	strb	r2, [r3, #0]
 8011c46:	e000      	b.n	8011c4a <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 8011c48:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 8011c4a:	4b27      	ldr	r3, [pc, #156]	@ (8011ce8 <voltmetro+0x28c>)
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d10d      	bne.n	8011c6e <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 8011c52:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8011c54:	491a      	ldr	r1, [pc, #104]	@ (8011cc0 <voltmetro+0x264>)
 8011c56:	481a      	ldr	r0, [pc, #104]	@ (8011cc0 <voltmetro+0x264>)
 8011c58:	2307      	movs	r3, #7
 8011c5a:	2206      	movs	r2, #6
 8011c5c:	f7fb fee7 	bl	800da2e <Bclear_Clear_trfst>
 8011c60:	e006      	b.n	8011c70 <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 8011c62:	46c0      	nop			@ (mov r8, r8)
 8011c64:	e004      	b.n	8011c70 <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 8011c66:	46c0      	nop			@ (mov r8, r8)
 8011c68:	e002      	b.n	8011c70 <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 8011c6a:	46c0      	nop			@ (mov r8, r8)
 8011c6c:	e000      	b.n	8011c70 <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 8011c6e:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 8011c70:	4b07      	ldr	r3, [pc, #28]	@ (8011c90 <voltmetro+0x234>)
 8011c72:	799b      	ldrb	r3, [r3, #6]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d106      	bne.n	8011c86 <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8011c78:	4911      	ldr	r1, [pc, #68]	@ (8011cc0 <voltmetro+0x264>)
 8011c7a:	4811      	ldr	r0, [pc, #68]	@ (8011cc0 <voltmetro+0x264>)
 8011c7c:	2307      	movs	r3, #7
 8011c7e:	2206      	movs	r2, #6
 8011c80:	f7fb fed5 	bl	800da2e <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 8011c84:	e000      	b.n	8011c88 <voltmetro+0x22c>
						goto fin_voltmetro1;
 8011c86:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 8011c88:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 8011c8a:	46c0      	nop			@ (mov r8, r8)
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	20000ba0 	.word	0x20000ba0
 8011c94:	20000bc8 	.word	0x20000bc8
 8011c98:	20000b45 	.word	0x20000b45
 8011c9c:	20000b53 	.word	0x20000b53
 8011ca0:	20000c26 	.word	0x20000c26
 8011ca4:	20000c25 	.word	0x20000c25
 8011ca8:	20000b7c 	.word	0x20000b7c
 8011cac:	20000b94 	.word	0x20000b94
 8011cb0:	20000bc9 	.word	0x20000bc9
 8011cb4:	20000bca 	.word	0x20000bca
 8011cb8:	200000b8 	.word	0x200000b8
 8011cbc:	20000c64 	.word	0x20000c64
 8011cc0:	20000b84 	.word	0x20000b84
 8011cc4:	20000c1f 	.word	0x20000c1f
 8011cc8:	200008d0 	.word	0x200008d0
 8011ccc:	20000c21 	.word	0x20000c21
 8011cd0:	20000b6d 	.word	0x20000b6d
 8011cd4:	20000c20 	.word	0x20000c20
 8011cd8:	20000c22 	.word	0x20000c22
 8011cdc:	20000b6c 	.word	0x20000b6c
 8011ce0:	20000b47 	.word	0x20000b47
 8011ce4:	20000b48 	.word	0x20000b48
 8011ce8:	20000b64 	.word	0x20000b64

08011cec <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0


			memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 8011cf2:	f7f5 faa1 	bl	8007238 <memodriver>
//;------------------------------------------------------------------------------------------------------------------
//;							supervicion de timeout token wifi - ble
//;------------------------------------------------------------------------------------------------------------------
			//ldw		X,timeoutTBLE;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTBLE == 1)//jreq	resetComMod;					/
 8011cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8011ea8 <watch+0x1bc>)
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d004      	beq.n	8011d08 <watch+0x1c>
				goto resetComMod;
			//ldw		X,timeoutTWF;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTWF != 1)//jrne	fallas_temp;					/ No, continúa
 8011cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8011eac <watch+0x1c0>)
 8011d00:	881b      	ldrh	r3, [r3, #0]
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d143      	bne.n	8011d8e <watch+0xa2>
				goto fallas_temp;
resetComMod:
 8011d06:	e000      	b.n	8011d0a <watch+0x1e>
				goto resetComMod;
 8011d08:	46c0      	nop			@ (mov r8, r8)
			timeTxTBLE = 20;	//mov		timeTxTBLE,#20
 8011d0a:	4b69      	ldr	r3, [pc, #420]	@ (8011eb0 <watch+0x1c4>)
 8011d0c:	2214      	movs	r2, #20
 8011d0e:	701a      	strb	r2, [r3, #0]
			flagsTX2[2] =0;		//bres	flagsTX2,#2;					/ sí, cancela bandera de token recibido
 8011d10:	4b68      	ldr	r3, [pc, #416]	@ (8011eb4 <watch+0x1c8>)
 8011d12:	2200      	movs	r2, #0
 8011d14:	709a      	strb	r2, [r3, #2]
			//ldw		X,#300;
			timeoutTBLE = 300;	//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 8011d16:	4b64      	ldr	r3, [pc, #400]	@ (8011ea8 <watch+0x1bc>)
 8011d18:	2296      	movs	r2, #150	@ 0x96
 8011d1a:	0052      	lsls	r2, r2, #1
 8011d1c:	801a      	strh	r2, [r3, #0]

			timeTxTWF = 30;			//mov		timeTxTWF,#30
 8011d1e:	4b66      	ldr	r3, [pc, #408]	@ (8011eb8 <watch+0x1cc>)
 8011d20:	221e      	movs	r2, #30
 8011d22:	701a      	strb	r2, [r3, #0]
			flagsTX2 [1] = 0; 		//bres	flagsTX2,#1;					/ sí, cancela bandera de token recibido
 8011d24:	4b63      	ldr	r3, [pc, #396]	@ (8011eb4 <watch+0x1c8>)
 8011d26:	2200      	movs	r2, #0
 8011d28:	705a      	strb	r2, [r3, #1]
			timeRstBLE = 5;			//mov		timeRstBLE,#5;				/ carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 8011d2a:	4b64      	ldr	r3, [pc, #400]	@ (8011ebc <watch+0x1d0>)
 8011d2c:	2205      	movs	r2, #5
 8011d2e:	701a      	strb	r2, [r3, #0]
			//ldw		X,#300;
			timeoutTWF = 300;		//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 8011d30:	4b5e      	ldr	r3, [pc, #376]	@ (8011eac <watch+0x1c0>)
 8011d32:	2296      	movs	r2, #150	@ 0x96
 8011d34:	0052      	lsls	r2, r2, #1
 8011d36:	801a      	strh	r2, [r3, #0]
			keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 8011d38:	4b61      	ldr	r3, [pc, #388]	@ (8011ec0 <watch+0x1d4>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<8; i++){
 8011d3e:	1dfb      	adds	r3, r7, #7
 8011d40:	2200      	movs	r2, #0
 8011d42:	701a      	strb	r2, [r3, #0]
 8011d44:	e018      	b.n	8011d78 <watch+0x8c>
				flagsTX[i] = 0;		//clr		flagsTX
 8011d46:	1dfb      	adds	r3, r7, #7
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8011ec4 <watch+0x1d8>)
 8011d4c:	2100      	movs	r1, #0
 8011d4e:	54d1      	strb	r1, [r2, r3]
				flagsRxFirm[i]= 0;	//clr		flagsRxFirm
 8011d50:	1dfb      	adds	r3, r7, #7
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	4a5c      	ldr	r2, [pc, #368]	@ (8011ec8 <watch+0x1dc>)
 8011d56:	2100      	movs	r1, #0
 8011d58:	54d1      	strb	r1, [r2, r3]
				flagsTxControl[i] = 0; // clr		flagsTxControl
 8011d5a:	1dfb      	adds	r3, r7, #7
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8011ecc <watch+0x1e0>)
 8011d60:	2100      	movs	r1, #0
 8011d62:	54d1      	strb	r1, [r2, r3]
				flagsWIFI[i] = 0; 		//clr		flagsWIFI
 8011d64:	1dfb      	adds	r3, r7, #7
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	4a59      	ldr	r2, [pc, #356]	@ (8011ed0 <watch+0x1e4>)
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<8; i++){
 8011d6e:	1dfb      	adds	r3, r7, #7
 8011d70:	781a      	ldrb	r2, [r3, #0]
 8011d72:	1dfb      	adds	r3, r7, #7
 8011d74:	3201      	adds	r2, #1
 8011d76:	701a      	strb	r2, [r3, #0]
 8011d78:	1dfb      	adds	r3, r7, #7
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	2b07      	cmp	r3, #7
 8011d7e:	d9e2      	bls.n	8011d46 <watch+0x5a>
			}

			flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 8011d80:	4b54      	ldr	r3, [pc, #336]	@ (8011ed4 <watch+0x1e8>)
 8011d82:	2200      	movs	r2, #0
 8011d84:	711a      	strb	r2, [r3, #4]
			flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 8011d86:	4b53      	ldr	r3, [pc, #332]	@ (8011ed4 <watch+0x1e8>)
 8011d88:	2200      	movs	r2, #0
 8011d8a:	715a      	strb	r2, [r3, #5]
 8011d8c:	e000      	b.n	8011d90 <watch+0xa4>
				goto fallas_temp;
 8011d8e:	46c0      	nop			@ (mov r8, r8)
fallas_temp:

////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 8011d90:	4b51      	ldr	r3, [pc, #324]	@ (8011ed8 <watch+0x1ec>)
 8011d92:	2200      	movs	r2, #0
 8011d94:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 8011d96:	4b50      	ldr	r3, [pc, #320]	@ (8011ed8 <watch+0x1ec>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 8011d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8011ed8 <watch+0x1ec>)
 8011d9e:	2200      	movs	r2, #0
 8011da0:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 8011da2:	4b4d      	ldr	r3, [pc, #308]	@ (8011ed8 <watch+0x1ec>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 8011da8:	4b4b      	ldr	r3, [pc, #300]	@ (8011ed8 <watch+0x1ec>)
 8011daa:	2200      	movs	r2, #0
 8011dac:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 8011dae:	4b4b      	ldr	r3, [pc, #300]	@ (8011edc <watch+0x1f0>)
 8011db0:	785b      	ldrb	r3, [r3, #1]
 8011db2:	2201      	movs	r2, #1
 8011db4:	4053      	eors	r3, r2
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d103      	bne.n	8011dc4 <watch+0xd8>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 8011dbc:	4b46      	ldr	r3, [pc, #280]	@ (8011ed8 <watch+0x1ec>)
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	715a      	strb	r2, [r3, #5]
 8011dc2:	e000      	b.n	8011dc6 <watch+0xda>
					goto	jmp_watch_02;
 8011dc4:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 8011dc6:	4b46      	ldr	r3, [pc, #280]	@ (8011ee0 <watch+0x1f4>)
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d000      	beq.n	8011dd0 <watch+0xe4>
 8011dce:	e064      	b.n	8011e9a <watch+0x1ae>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 8011dd0:	4b44      	ldr	r3, [pc, #272]	@ (8011ee4 <watch+0x1f8>)
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	4053      	eors	r3, r2
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d107      	bne.n	8011dee <watch+0x102>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 8011dde:	4b42      	ldr	r3, [pc, #264]	@ (8011ee8 <watch+0x1fc>)
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d108      	bne.n	8011df8 <watch+0x10c>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 8011de6:	4b3c      	ldr	r3, [pc, #240]	@ (8011ed8 <watch+0x1ec>)
 8011de8:	2201      	movs	r2, #1
 8011dea:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 8011dec:	e005      	b.n	8011dfa <watch+0x10e>
					goto	jmp_watch_03_00;
 8011dee:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8011df0:	4b3d      	ldr	r3, [pc, #244]	@ (8011ee8 <watch+0x1fc>)
 8011df2:	22a4      	movs	r2, #164	@ 0xa4
 8011df4:	701a      	strb	r2, [r3, #0]
 8011df6:	e000      	b.n	8011dfa <watch+0x10e>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 8011df8:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 8011dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8011ee4 <watch+0x1f8>)
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d10c      	bne.n	8011e1c <watch+0x130>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 8011e02:	4b36      	ldr	r3, [pc, #216]	@ (8011edc <watch+0x1f0>)
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d103      	bne.n	8011e12 <watch+0x126>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 8011e0a:	4b38      	ldr	r3, [pc, #224]	@ (8011eec <watch+0x200>)
 8011e0c:	220f      	movs	r2, #15
 8011e0e:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 8011e10:	e005      	b.n	8011e1e <watch+0x132>
					goto	jmp_watch_04;
 8011e12:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 8011e14:	4b35      	ldr	r3, [pc, #212]	@ (8011eec <watch+0x200>)
 8011e16:	2200      	movs	r2, #0
 8011e18:	701a      	strb	r2, [r3, #0]
 8011e1a:	e000      	b.n	8011e1e <watch+0x132>
					goto	jmp_watch_05;
 8011e1c:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 8011e1e:	4b31      	ldr	r3, [pc, #196]	@ (8011ee4 <watch+0x1f8>)
 8011e20:	785b      	ldrb	r3, [r3, #1]
 8011e22:	2201      	movs	r2, #1
 8011e24:	4053      	eors	r3, r2
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d107      	bne.n	8011e3c <watch+0x150>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 8011e2c:	4b30      	ldr	r3, [pc, #192]	@ (8011ef0 <watch+0x204>)
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d108      	bne.n	8011e46 <watch+0x15a>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 8011e34:	4b28      	ldr	r3, [pc, #160]	@ (8011ed8 <watch+0x1ec>)
 8011e36:	2201      	movs	r2, #1
 8011e38:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 8011e3a:	e005      	b.n	8011e48 <watch+0x15c>
					goto	jmp_watch_07_00;
 8011e3c:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8011e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8011ef0 <watch+0x204>)
 8011e40:	2204      	movs	r2, #4
 8011e42:	701a      	strb	r2, [r3, #0]
 8011e44:	e000      	b.n	8011e48 <watch+0x15c>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 8011e46:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 8011e48:	4b26      	ldr	r3, [pc, #152]	@ (8011ee4 <watch+0x1f8>)
 8011e4a:	789b      	ldrb	r3, [r3, #2]
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	4053      	eors	r3, r2
 8011e50:	b2db      	uxtb	r3, r3
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d107      	bne.n	8011e66 <watch+0x17a>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 8011e56:	4b27      	ldr	r3, [pc, #156]	@ (8011ef4 <watch+0x208>)
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d108      	bne.n	8011e70 <watch+0x184>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 8011e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ed8 <watch+0x1ec>)
 8011e60:	2201      	movs	r2, #1
 8011e62:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 8011e64:	e005      	b.n	8011e72 <watch+0x186>
					goto	jmp_watch_11_00;
 8011e66:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8011e68:	4b22      	ldr	r3, [pc, #136]	@ (8011ef4 <watch+0x208>)
 8011e6a:	220f      	movs	r2, #15
 8011e6c:	701a      	strb	r2, [r3, #0]
 8011e6e:	e000      	b.n	8011e72 <watch+0x186>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 8011e70:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 8011e72:	4b1a      	ldr	r3, [pc, #104]	@ (8011edc <watch+0x1f0>)
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	2201      	movs	r2, #1
 8011e78:	4053      	eors	r3, r2
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d107      	bne.n	8011e90 <watch+0x1a4>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 8011e80:	4b1d      	ldr	r3, [pc, #116]	@ (8011ef8 <watch+0x20c>)
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10a      	bne.n	8011e9e <watch+0x1b2>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 8011e88:	4b13      	ldr	r3, [pc, #76]	@ (8011ed8 <watch+0x1ec>)
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 8011e8e:	e007      	b.n	8011ea0 <watch+0x1b4>
					goto jmp_watch_12_00;
 8011e90:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8011e92:	4b19      	ldr	r3, [pc, #100]	@ (8011ef8 <watch+0x20c>)
 8011e94:	22c5      	movs	r2, #197	@ 0xc5
 8011e96:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 8011e98:	e002      	b.n	8011ea0 <watch+0x1b4>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 8011e9a:	46c0      	nop			@ (mov r8, r8)
 8011e9c:	e000      	b.n	8011ea0 <watch+0x1b4>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 8011e9e:	46c0      	nop			@ (mov r8, r8)
}
 8011ea0:	46c0      	nop			@ (mov r8, r8)
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	b002      	add	sp, #8
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	20002188 	.word	0x20002188
 8011eac:	20001fd8 	.word	0x20001fd8
 8011eb0:	20002186 	.word	0x20002186
 8011eb4:	20001fd0 	.word	0x20001fd0
 8011eb8:	20001fc6 	.word	0x20001fc6
 8011ebc:	20001f74 	.word	0x20001f74
 8011ec0:	20001ea5 	.word	0x20001ea5
 8011ec4:	20001ea8 	.word	0x20001ea8
 8011ec8:	20001f68 	.word	0x20001f68
 8011ecc:	20002178 	.word	0x20002178
 8011ed0:	20001fdc 	.word	0x20001fdc
 8011ed4:	20001e90 	.word	0x20001e90
 8011ed8:	20000b54 	.word	0x20000b54
 8011edc:	20000bdc 	.word	0x20000bdc
 8011ee0:	20000c4d 	.word	0x20000c4d
 8011ee4:	20000ba0 	.word	0x20000ba0
 8011ee8:	20000c52 	.word	0x20000c52
 8011eec:	20000b70 	.word	0x20000b70
 8011ef0:	20000c53 	.word	0x20000c53
 8011ef4:	20000c55 	.word	0x20000c55
 8011ef8:	20000c54 	.word	0x20000c54

08011efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011efc:	480d      	ldr	r0, [pc, #52]	@ (8011f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011efe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011f00:	f7fa fdd2 	bl	800caa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011f04:	480c      	ldr	r0, [pc, #48]	@ (8011f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8011f06:	490d      	ldr	r1, [pc, #52]	@ (8011f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8011f08:	4a0d      	ldr	r2, [pc, #52]	@ (8011f40 <LoopForever+0xe>)
  movs r3, #0
 8011f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011f0c:	e002      	b.n	8011f14 <LoopCopyDataInit>

08011f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011f12:	3304      	adds	r3, #4

08011f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011f18:	d3f9      	bcc.n	8011f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8011f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8011f48 <LoopForever+0x16>)
  movs r3, #0
 8011f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011f20:	e001      	b.n	8011f26 <LoopFillZerobss>

08011f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011f24:	3204      	adds	r2, #4

08011f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011f28:	d3fb      	bcc.n	8011f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8011f2a:	f008 fe37 	bl	801ab9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011f2e:	f7f7 fb99 	bl	8009664 <main>

08011f32 <LoopForever>:

LoopForever:
  b LoopForever
 8011f32:	e7fe      	b.n	8011f32 <LoopForever>
  ldr   r0, =_estack
 8011f34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8011f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011f3c:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8011f40:	0801b200 	.word	0x0801b200
  ldr r2, =_sbss
 8011f44:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8011f48:	20002378 	.word	0x20002378

08011f4c <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011f4c:	e7fe      	b.n	8011f4c <ADC_COMP1_2_IRQHandler>

08011f4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011f4e:	b580      	push	{r7, lr}
 8011f50:	b082      	sub	sp, #8
 8011f52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011f54:	1dfb      	adds	r3, r7, #7
 8011f56:	2200      	movs	r2, #0
 8011f58:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011f5a:	2003      	movs	r0, #3
 8011f5c:	f000 f80e 	bl	8011f7c <HAL_InitTick>
 8011f60:	1e03      	subs	r3, r0, #0
 8011f62:	d003      	beq.n	8011f6c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8011f64:	1dfb      	adds	r3, r7, #7
 8011f66:	2201      	movs	r2, #1
 8011f68:	701a      	strb	r2, [r3, #0]
 8011f6a:	e001      	b.n	8011f70 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011f6c:	f7fa f8e2 	bl	800c134 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011f70:	1dfb      	adds	r3, r7, #7
 8011f72:	781b      	ldrb	r3, [r3, #0]
}
 8011f74:	0018      	movs	r0, r3
 8011f76:	46bd      	mov	sp, r7
 8011f78:	b002      	add	sp, #8
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011f7c:	b590      	push	{r4, r7, lr}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8011f84:	230f      	movs	r3, #15
 8011f86:	18fb      	adds	r3, r7, r3
 8011f88:	2200      	movs	r2, #0
 8011f8a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8011f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8012004 <HAL_InitTick+0x88>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d02b      	beq.n	8011fec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8011f94:	4b1c      	ldr	r3, [pc, #112]	@ (8012008 <HAL_InitTick+0x8c>)
 8011f96:	681c      	ldr	r4, [r3, #0]
 8011f98:	4b1a      	ldr	r3, [pc, #104]	@ (8012004 <HAL_InitTick+0x88>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	0019      	movs	r1, r3
 8011f9e:	23fa      	movs	r3, #250	@ 0xfa
 8011fa0:	0098      	lsls	r0, r3, #2
 8011fa2:	f7ee f8b9 	bl	8000118 <__udivsi3>
 8011fa6:	0003      	movs	r3, r0
 8011fa8:	0019      	movs	r1, r3
 8011faa:	0020      	movs	r0, r4
 8011fac:	f7ee f8b4 	bl	8000118 <__udivsi3>
 8011fb0:	0003      	movs	r3, r0
 8011fb2:	0018      	movs	r0, r3
 8011fb4:	f000 f987 	bl	80122c6 <HAL_SYSTICK_Config>
 8011fb8:	1e03      	subs	r3, r0, #0
 8011fba:	d112      	bne.n	8011fe2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2b03      	cmp	r3, #3
 8011fc0:	d80a      	bhi.n	8011fd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011fc2:	6879      	ldr	r1, [r7, #4]
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	425b      	negs	r3, r3
 8011fc8:	2200      	movs	r2, #0
 8011fca:	0018      	movs	r0, r3
 8011fcc:	f000 f946 	bl	801225c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011fd0:	4b0e      	ldr	r3, [pc, #56]	@ (801200c <HAL_InitTick+0x90>)
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	601a      	str	r2, [r3, #0]
 8011fd6:	e00d      	b.n	8011ff4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8011fd8:	230f      	movs	r3, #15
 8011fda:	18fb      	adds	r3, r7, r3
 8011fdc:	2201      	movs	r2, #1
 8011fde:	701a      	strb	r2, [r3, #0]
 8011fe0:	e008      	b.n	8011ff4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011fe2:	230f      	movs	r3, #15
 8011fe4:	18fb      	adds	r3, r7, r3
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	e003      	b.n	8011ff4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011fec:	230f      	movs	r3, #15
 8011fee:	18fb      	adds	r3, r7, r3
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8011ff4:	230f      	movs	r3, #15
 8011ff6:	18fb      	adds	r3, r7, r3
 8011ff8:	781b      	ldrb	r3, [r3, #0]
}
 8011ffa:	0018      	movs	r0, r3
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	b005      	add	sp, #20
 8012000:	bd90      	pop	{r4, r7, pc}
 8012002:	46c0      	nop			@ (mov r8, r8)
 8012004:	20000280 	.word	0x20000280
 8012008:	2000025c 	.word	0x2000025c
 801200c:	2000027c 	.word	0x2000027c

08012010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012014:	4b04      	ldr	r3, [pc, #16]	@ (8012028 <HAL_IncTick+0x18>)
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	4b04      	ldr	r3, [pc, #16]	@ (801202c <HAL_IncTick+0x1c>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	18d2      	adds	r2, r2, r3
 801201e:	4b02      	ldr	r3, [pc, #8]	@ (8012028 <HAL_IncTick+0x18>)
 8012020:	601a      	str	r2, [r3, #0]
}
 8012022:	46c0      	nop			@ (mov r8, r8)
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	20002210 	.word	0x20002210
 801202c:	20000280 	.word	0x20000280

08012030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	af00      	add	r7, sp, #0
  return uwTick;
 8012034:	4b02      	ldr	r3, [pc, #8]	@ (8012040 <HAL_GetTick+0x10>)
 8012036:	681b      	ldr	r3, [r3, #0]
}
 8012038:	0018      	movs	r0, r3
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	46c0      	nop			@ (mov r8, r8)
 8012040:	20002210 	.word	0x20002210

08012044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801204c:	f7ff fff0 	bl	8012030 <HAL_GetTick>
 8012050:	0003      	movs	r3, r0
 8012052:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	3301      	adds	r3, #1
 801205c:	d004      	beq.n	8012068 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801205e:	4b09      	ldr	r3, [pc, #36]	@ (8012084 <HAL_Delay+0x40>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	68fa      	ldr	r2, [r7, #12]
 8012064:	18d3      	adds	r3, r2, r3
 8012066:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012068:	46c0      	nop			@ (mov r8, r8)
 801206a:	f7ff ffe1 	bl	8012030 <HAL_GetTick>
 801206e:	0002      	movs	r2, r0
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	429a      	cmp	r2, r3
 8012078:	d8f7      	bhi.n	801206a <HAL_Delay+0x26>
  {
  }
}
 801207a:	46c0      	nop			@ (mov r8, r8)
 801207c:	46c0      	nop			@ (mov r8, r8)
 801207e:	46bd      	mov	sp, r7
 8012080:	b004      	add	sp, #16
 8012082:	bd80      	pop	{r7, pc}
 8012084:	20000280 	.word	0x20000280

08012088 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 801208c:	4b04      	ldr	r3, [pc, #16]	@ (80120a0 <HAL_SuspendTick+0x18>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	4b03      	ldr	r3, [pc, #12]	@ (80120a0 <HAL_SuspendTick+0x18>)
 8012092:	2102      	movs	r1, #2
 8012094:	438a      	bics	r2, r1
 8012096:	601a      	str	r2, [r3, #0]
}
 8012098:	46c0      	nop			@ (mov r8, r8)
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	46c0      	nop			@ (mov r8, r8)
 80120a0:	e000e010 	.word	0xe000e010

080120a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80120a8:	4b04      	ldr	r3, [pc, #16]	@ (80120bc <HAL_ResumeTick+0x18>)
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	4b03      	ldr	r3, [pc, #12]	@ (80120bc <HAL_ResumeTick+0x18>)
 80120ae:	2102      	movs	r1, #2
 80120b0:	430a      	orrs	r2, r1
 80120b2:	601a      	str	r2, [r3, #0]
}
 80120b4:	46c0      	nop			@ (mov r8, r8)
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	46c0      	nop			@ (mov r8, r8)
 80120bc:	e000e010 	.word	0xe000e010

080120c0 <__NVIC_EnableIRQ>:
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	0002      	movs	r2, r0
 80120c8:	1dfb      	adds	r3, r7, #7
 80120ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80120cc:	1dfb      	adds	r3, r7, #7
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80120d2:	d809      	bhi.n	80120e8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80120d4:	1dfb      	adds	r3, r7, #7
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	001a      	movs	r2, r3
 80120da:	231f      	movs	r3, #31
 80120dc:	401a      	ands	r2, r3
 80120de:	4b04      	ldr	r3, [pc, #16]	@ (80120f0 <__NVIC_EnableIRQ+0x30>)
 80120e0:	2101      	movs	r1, #1
 80120e2:	4091      	lsls	r1, r2
 80120e4:	000a      	movs	r2, r1
 80120e6:	601a      	str	r2, [r3, #0]
}
 80120e8:	46c0      	nop			@ (mov r8, r8)
 80120ea:	46bd      	mov	sp, r7
 80120ec:	b002      	add	sp, #8
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	e000e100 	.word	0xe000e100

080120f4 <__NVIC_DisableIRQ>:
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	0002      	movs	r2, r0
 80120fc:	1dfb      	adds	r3, r7, #7
 80120fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012100:	1dfb      	adds	r3, r7, #7
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b7f      	cmp	r3, #127	@ 0x7f
 8012106:	d810      	bhi.n	801212a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012108:	1dfb      	adds	r3, r7, #7
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	001a      	movs	r2, r3
 801210e:	231f      	movs	r3, #31
 8012110:	4013      	ands	r3, r2
 8012112:	4908      	ldr	r1, [pc, #32]	@ (8012134 <__NVIC_DisableIRQ+0x40>)
 8012114:	2201      	movs	r2, #1
 8012116:	409a      	lsls	r2, r3
 8012118:	0013      	movs	r3, r2
 801211a:	2280      	movs	r2, #128	@ 0x80
 801211c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 801211e:	f3bf 8f4f 	dsb	sy
}
 8012122:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8012124:	f3bf 8f6f 	isb	sy
}
 8012128:	46c0      	nop			@ (mov r8, r8)
}
 801212a:	46c0      	nop			@ (mov r8, r8)
 801212c:	46bd      	mov	sp, r7
 801212e:	b002      	add	sp, #8
 8012130:	bd80      	pop	{r7, pc}
 8012132:	46c0      	nop			@ (mov r8, r8)
 8012134:	e000e100 	.word	0xe000e100

08012138 <__NVIC_SetPriority>:
{
 8012138:	b590      	push	{r4, r7, lr}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	0002      	movs	r2, r0
 8012140:	6039      	str	r1, [r7, #0]
 8012142:	1dfb      	adds	r3, r7, #7
 8012144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012146:	1dfb      	adds	r3, r7, #7
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	2b7f      	cmp	r3, #127	@ 0x7f
 801214c:	d828      	bhi.n	80121a0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801214e:	4a2f      	ldr	r2, [pc, #188]	@ (801220c <__NVIC_SetPriority+0xd4>)
 8012150:	1dfb      	adds	r3, r7, #7
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	b25b      	sxtb	r3, r3
 8012156:	089b      	lsrs	r3, r3, #2
 8012158:	33c0      	adds	r3, #192	@ 0xc0
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	589b      	ldr	r3, [r3, r2]
 801215e:	1dfa      	adds	r2, r7, #7
 8012160:	7812      	ldrb	r2, [r2, #0]
 8012162:	0011      	movs	r1, r2
 8012164:	2203      	movs	r2, #3
 8012166:	400a      	ands	r2, r1
 8012168:	00d2      	lsls	r2, r2, #3
 801216a:	21ff      	movs	r1, #255	@ 0xff
 801216c:	4091      	lsls	r1, r2
 801216e:	000a      	movs	r2, r1
 8012170:	43d2      	mvns	r2, r2
 8012172:	401a      	ands	r2, r3
 8012174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	019b      	lsls	r3, r3, #6
 801217a:	22ff      	movs	r2, #255	@ 0xff
 801217c:	401a      	ands	r2, r3
 801217e:	1dfb      	adds	r3, r7, #7
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	0018      	movs	r0, r3
 8012184:	2303      	movs	r3, #3
 8012186:	4003      	ands	r3, r0
 8012188:	00db      	lsls	r3, r3, #3
 801218a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801218c:	481f      	ldr	r0, [pc, #124]	@ (801220c <__NVIC_SetPriority+0xd4>)
 801218e:	1dfb      	adds	r3, r7, #7
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	b25b      	sxtb	r3, r3
 8012194:	089b      	lsrs	r3, r3, #2
 8012196:	430a      	orrs	r2, r1
 8012198:	33c0      	adds	r3, #192	@ 0xc0
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	501a      	str	r2, [r3, r0]
}
 801219e:	e031      	b.n	8012204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80121a0:	4a1b      	ldr	r2, [pc, #108]	@ (8012210 <__NVIC_SetPriority+0xd8>)
 80121a2:	1dfb      	adds	r3, r7, #7
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	0019      	movs	r1, r3
 80121a8:	230f      	movs	r3, #15
 80121aa:	400b      	ands	r3, r1
 80121ac:	3b08      	subs	r3, #8
 80121ae:	089b      	lsrs	r3, r3, #2
 80121b0:	3306      	adds	r3, #6
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	18d3      	adds	r3, r2, r3
 80121b6:	3304      	adds	r3, #4
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	1dfa      	adds	r2, r7, #7
 80121bc:	7812      	ldrb	r2, [r2, #0]
 80121be:	0011      	movs	r1, r2
 80121c0:	2203      	movs	r2, #3
 80121c2:	400a      	ands	r2, r1
 80121c4:	00d2      	lsls	r2, r2, #3
 80121c6:	21ff      	movs	r1, #255	@ 0xff
 80121c8:	4091      	lsls	r1, r2
 80121ca:	000a      	movs	r2, r1
 80121cc:	43d2      	mvns	r2, r2
 80121ce:	401a      	ands	r2, r3
 80121d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	019b      	lsls	r3, r3, #6
 80121d6:	22ff      	movs	r2, #255	@ 0xff
 80121d8:	401a      	ands	r2, r3
 80121da:	1dfb      	adds	r3, r7, #7
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	0018      	movs	r0, r3
 80121e0:	2303      	movs	r3, #3
 80121e2:	4003      	ands	r3, r0
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80121e8:	4809      	ldr	r0, [pc, #36]	@ (8012210 <__NVIC_SetPriority+0xd8>)
 80121ea:	1dfb      	adds	r3, r7, #7
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	001c      	movs	r4, r3
 80121f0:	230f      	movs	r3, #15
 80121f2:	4023      	ands	r3, r4
 80121f4:	3b08      	subs	r3, #8
 80121f6:	089b      	lsrs	r3, r3, #2
 80121f8:	430a      	orrs	r2, r1
 80121fa:	3306      	adds	r3, #6
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	18c3      	adds	r3, r0, r3
 8012200:	3304      	adds	r3, #4
 8012202:	601a      	str	r2, [r3, #0]
}
 8012204:	46c0      	nop			@ (mov r8, r8)
 8012206:	46bd      	mov	sp, r7
 8012208:	b003      	add	sp, #12
 801220a:	bd90      	pop	{r4, r7, pc}
 801220c:	e000e100 	.word	0xe000e100
 8012210:	e000ed00 	.word	0xe000ed00

08012214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	1e5a      	subs	r2, r3, #1
 8012220:	2380      	movs	r3, #128	@ 0x80
 8012222:	045b      	lsls	r3, r3, #17
 8012224:	429a      	cmp	r2, r3
 8012226:	d301      	bcc.n	801222c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012228:	2301      	movs	r3, #1
 801222a:	e010      	b.n	801224e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801222c:	4b0a      	ldr	r3, [pc, #40]	@ (8012258 <SysTick_Config+0x44>)
 801222e:	687a      	ldr	r2, [r7, #4]
 8012230:	3a01      	subs	r2, #1
 8012232:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012234:	2301      	movs	r3, #1
 8012236:	425b      	negs	r3, r3
 8012238:	2103      	movs	r1, #3
 801223a:	0018      	movs	r0, r3
 801223c:	f7ff ff7c 	bl	8012138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012240:	4b05      	ldr	r3, [pc, #20]	@ (8012258 <SysTick_Config+0x44>)
 8012242:	2200      	movs	r2, #0
 8012244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012246:	4b04      	ldr	r3, [pc, #16]	@ (8012258 <SysTick_Config+0x44>)
 8012248:	2207      	movs	r2, #7
 801224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801224c:	2300      	movs	r3, #0
}
 801224e:	0018      	movs	r0, r3
 8012250:	46bd      	mov	sp, r7
 8012252:	b002      	add	sp, #8
 8012254:	bd80      	pop	{r7, pc}
 8012256:	46c0      	nop			@ (mov r8, r8)
 8012258:	e000e010 	.word	0xe000e010

0801225c <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	60b9      	str	r1, [r7, #8]
 8012264:	607a      	str	r2, [r7, #4]
 8012266:	210f      	movs	r1, #15
 8012268:	187b      	adds	r3, r7, r1
 801226a:	1c02      	adds	r2, r0, #0
 801226c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 801226e:	68ba      	ldr	r2, [r7, #8]
 8012270:	187b      	adds	r3, r7, r1
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	b25b      	sxtb	r3, r3
 8012276:	0011      	movs	r1, r2
 8012278:	0018      	movs	r0, r3
 801227a:	f7ff ff5d 	bl	8012138 <__NVIC_SetPriority>
}
 801227e:	46c0      	nop			@ (mov r8, r8)
 8012280:	46bd      	mov	sp, r7
 8012282:	b004      	add	sp, #16
 8012284:	bd80      	pop	{r7, pc}

08012286 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012286:	b580      	push	{r7, lr}
 8012288:	b082      	sub	sp, #8
 801228a:	af00      	add	r7, sp, #0
 801228c:	0002      	movs	r2, r0
 801228e:	1dfb      	adds	r3, r7, #7
 8012290:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012292:	1dfb      	adds	r3, r7, #7
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	b25b      	sxtb	r3, r3
 8012298:	0018      	movs	r0, r3
 801229a:	f7ff ff11 	bl	80120c0 <__NVIC_EnableIRQ>
}
 801229e:	46c0      	nop			@ (mov r8, r8)
 80122a0:	46bd      	mov	sp, r7
 80122a2:	b002      	add	sp, #8
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b082      	sub	sp, #8
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	0002      	movs	r2, r0
 80122ae:	1dfb      	adds	r3, r7, #7
 80122b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80122b2:	1dfb      	adds	r3, r7, #7
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	b25b      	sxtb	r3, r3
 80122b8:	0018      	movs	r0, r3
 80122ba:	f7ff ff1b 	bl	80120f4 <__NVIC_DisableIRQ>
}
 80122be:	46c0      	nop			@ (mov r8, r8)
 80122c0:	46bd      	mov	sp, r7
 80122c2:	b002      	add	sp, #8
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b082      	sub	sp, #8
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	0018      	movs	r0, r3
 80122d2:	f7ff ff9f 	bl	8012214 <SysTick_Config>
 80122d6:	0003      	movs	r3, r0
}
 80122d8:	0018      	movs	r0, r3
 80122da:	46bd      	mov	sp, r7
 80122dc:	b002      	add	sp, #8
 80122de:	bd80      	pop	{r7, pc}

080122e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d101      	bne.n	80122f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80122ee:	2301      	movs	r3, #1
 80122f0:	e091      	b.n	8012416 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	001a      	movs	r2, r3
 80122f8:	4b49      	ldr	r3, [pc, #292]	@ (8012420 <HAL_DMA_Init+0x140>)
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d810      	bhi.n	8012320 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	4a48      	ldr	r2, [pc, #288]	@ (8012424 <HAL_DMA_Init+0x144>)
 8012304:	4694      	mov	ip, r2
 8012306:	4463      	add	r3, ip
 8012308:	2114      	movs	r1, #20
 801230a:	0018      	movs	r0, r3
 801230c:	f7ed ff04 	bl	8000118 <__udivsi3>
 8012310:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8012312:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	4a43      	ldr	r2, [pc, #268]	@ (8012428 <HAL_DMA_Init+0x148>)
 801231c:	641a      	str	r2, [r3, #64]	@ 0x40
 801231e:	e00f      	b.n	8012340 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	4a41      	ldr	r2, [pc, #260]	@ (801242c <HAL_DMA_Init+0x14c>)
 8012326:	4694      	mov	ip, r2
 8012328:	4463      	add	r3, ip
 801232a:	2114      	movs	r1, #20
 801232c:	0018      	movs	r0, r3
 801232e:	f7ed fef3 	bl	8000118 <__udivsi3>
 8012332:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8012334:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4a3c      	ldr	r2, [pc, #240]	@ (8012430 <HAL_DMA_Init+0x150>)
 801233e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2225      	movs	r2, #37	@ 0x25
 8012344:	2102      	movs	r1, #2
 8012346:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4938      	ldr	r1, [pc, #224]	@ (8012434 <HAL_DMA_Init+0x154>)
 8012354:	400a      	ands	r2, r1
 8012356:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	6819      	ldr	r1, [r3, #0]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	689a      	ldr	r2, [r3, #8]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	431a      	orrs	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	691b      	ldr	r3, [r3, #16]
 801236c:	431a      	orrs	r2, r3
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	695b      	ldr	r3, [r3, #20]
 8012372:	431a      	orrs	r2, r3
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	699b      	ldr	r3, [r3, #24]
 8012378:	431a      	orrs	r2, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	69db      	ldr	r3, [r3, #28]
 801237e:	431a      	orrs	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a1b      	ldr	r3, [r3, #32]
 8012384:	431a      	orrs	r2, r3
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	430a      	orrs	r2, r1
 801238c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	0018      	movs	r0, r3
 8012392:	f000 fb4d 	bl	8012a30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	689a      	ldr	r2, [r3, #8]
 801239a:	2380      	movs	r3, #128	@ 0x80
 801239c:	01db      	lsls	r3, r3, #7
 801239e:	429a      	cmp	r2, r3
 80123a0:	d102      	bne.n	80123a8 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2200      	movs	r2, #0
 80123a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123b0:	21ff      	movs	r1, #255	@ 0xff
 80123b2:	400a      	ands	r2, r1
 80123b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123ba:	687a      	ldr	r2, [r7, #4]
 80123bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80123be:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d011      	beq.n	80123ec <HAL_DMA_Init+0x10c>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	2b04      	cmp	r3, #4
 80123ce:	d80d      	bhi.n	80123ec <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	0018      	movs	r0, r3
 80123d4:	f000 fb76 	bl	8012ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123dc:	2200      	movs	r2, #0
 80123de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80123e8:	605a      	str	r2, [r3, #4]
 80123ea:	e008      	b.n	80123fe <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2200      	movs	r2, #0
 80123f6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2200      	movs	r2, #0
 8012402:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2225      	movs	r2, #37	@ 0x25
 8012408:	2101      	movs	r1, #1
 801240a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2224      	movs	r2, #36	@ 0x24
 8012410:	2100      	movs	r1, #0
 8012412:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012414:	2300      	movs	r3, #0
}
 8012416:	0018      	movs	r0, r3
 8012418:	46bd      	mov	sp, r7
 801241a:	b002      	add	sp, #8
 801241c:	bd80      	pop	{r7, pc}
 801241e:	46c0      	nop			@ (mov r8, r8)
 8012420:	40020407 	.word	0x40020407
 8012424:	bffdfff8 	.word	0xbffdfff8
 8012428:	40020000 	.word	0x40020000
 801242c:	bffdfbf8 	.word	0xbffdfbf8
 8012430:	40020400 	.word	0x40020400
 8012434:	ffff800f 	.word	0xffff800f

08012438 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d101      	bne.n	801244a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8012446:	2301      	movs	r3, #1
 8012448:	e07f      	b.n	801254a <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	2101      	movs	r1, #1
 8012456:	438a      	bics	r2, r1
 8012458:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	001a      	movs	r2, r3
 8012460:	4b3c      	ldr	r3, [pc, #240]	@ (8012554 <HAL_DMA_DeInit+0x11c>)
 8012462:	429a      	cmp	r2, r3
 8012464:	d810      	bhi.n	8012488 <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	4a3b      	ldr	r2, [pc, #236]	@ (8012558 <HAL_DMA_DeInit+0x120>)
 801246c:	4694      	mov	ip, r2
 801246e:	4463      	add	r3, ip
 8012470:	2114      	movs	r1, #20
 8012472:	0018      	movs	r0, r3
 8012474:	f7ed fe50 	bl	8000118 <__udivsi3>
 8012478:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801247a:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	4a36      	ldr	r2, [pc, #216]	@ (801255c <HAL_DMA_DeInit+0x124>)
 8012484:	641a      	str	r2, [r3, #64]	@ 0x40
 8012486:	e00f      	b.n	80124a8 <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4a34      	ldr	r2, [pc, #208]	@ (8012560 <HAL_DMA_DeInit+0x128>)
 801248e:	4694      	mov	ip, r2
 8012490:	4463      	add	r3, ip
 8012492:	2114      	movs	r1, #20
 8012494:	0018      	movs	r0, r3
 8012496:	f7ed fe3f 	bl	8000118 <__udivsi3>
 801249a:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801249c:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4a2f      	ldr	r2, [pc, #188]	@ (8012564 <HAL_DMA_DeInit+0x12c>)
 80124a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	2200      	movs	r2, #0
 80124ae:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124b4:	221c      	movs	r2, #28
 80124b6:	401a      	ands	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124bc:	2101      	movs	r1, #1
 80124be:	4091      	lsls	r1, r2
 80124c0:	000a      	movs	r2, r1
 80124c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	0018      	movs	r0, r3
 80124c8:	f000 fab2 	bl	8012a30 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124d0:	2200      	movs	r2, #0
 80124d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124d8:	687a      	ldr	r2, [r7, #4]
 80124da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80124dc:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d010      	beq.n	8012508 <HAL_DMA_DeInit+0xd0>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	2b04      	cmp	r3, #4
 80124ec:	d80c      	bhi.n	8012508 <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	0018      	movs	r0, r3
 80124f2:	f000 fae7 	bl	8012ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124fa:	2200      	movs	r2, #0
 80124fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012506:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2200      	movs	r2, #0
 8012512:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2200      	movs	r2, #0
 8012518:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2200      	movs	r2, #0
 8012524:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2200      	movs	r2, #0
 801252a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2200      	movs	r2, #0
 8012530:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2200      	movs	r2, #0
 8012536:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2225      	movs	r2, #37	@ 0x25
 801253c:	2100      	movs	r1, #0
 801253e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2224      	movs	r2, #36	@ 0x24
 8012544:	2100      	movs	r1, #0
 8012546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012548:	2300      	movs	r3, #0
}
 801254a:	0018      	movs	r0, r3
 801254c:	46bd      	mov	sp, r7
 801254e:	b002      	add	sp, #8
 8012550:	bd80      	pop	{r7, pc}
 8012552:	46c0      	nop			@ (mov r8, r8)
 8012554:	40020407 	.word	0x40020407
 8012558:	bffdfff8 	.word	0xbffdfff8
 801255c:	40020000 	.word	0x40020000
 8012560:	bffdfbf8 	.word	0xbffdfbf8
 8012564:	40020400 	.word	0x40020400

08012568 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b086      	sub	sp, #24
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012576:	2317      	movs	r3, #23
 8012578:	18fb      	adds	r3, r7, r3
 801257a:	2200      	movs	r2, #0
 801257c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	2224      	movs	r2, #36	@ 0x24
 8012582:	5c9b      	ldrb	r3, [r3, r2]
 8012584:	2b01      	cmp	r3, #1
 8012586:	d101      	bne.n	801258c <HAL_DMA_Start_IT+0x24>
 8012588:	2302      	movs	r3, #2
 801258a:	e06f      	b.n	801266c <HAL_DMA_Start_IT+0x104>
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	2224      	movs	r2, #36	@ 0x24
 8012590:	2101      	movs	r1, #1
 8012592:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2225      	movs	r2, #37	@ 0x25
 8012598:	5c9b      	ldrb	r3, [r3, r2]
 801259a:	b2db      	uxtb	r3, r3
 801259c:	2b01      	cmp	r3, #1
 801259e:	d157      	bne.n	8012650 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2225      	movs	r2, #37	@ 0x25
 80125a4:	2102      	movs	r1, #2
 80125a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2200      	movs	r2, #0
 80125ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2101      	movs	r1, #1
 80125ba:	438a      	bics	r2, r1
 80125bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	68b9      	ldr	r1, [r7, #8]
 80125c4:	68f8      	ldr	r0, [r7, #12]
 80125c6:	f000 f9f7 	bl	80129b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d008      	beq.n	80125e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	210e      	movs	r1, #14
 80125de:	430a      	orrs	r2, r1
 80125e0:	601a      	str	r2, [r3, #0]
 80125e2:	e00f      	b.n	8012604 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2104      	movs	r1, #4
 80125f0:	438a      	bics	r2, r1
 80125f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	210a      	movs	r1, #10
 8012600:	430a      	orrs	r2, r1
 8012602:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	2380      	movs	r3, #128	@ 0x80
 801260c:	025b      	lsls	r3, r3, #9
 801260e:	4013      	ands	r3, r2
 8012610:	d008      	beq.n	8012624 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801261c:	2180      	movs	r1, #128	@ 0x80
 801261e:	0049      	lsls	r1, r1, #1
 8012620:	430a      	orrs	r2, r1
 8012622:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012628:	2b00      	cmp	r3, #0
 801262a:	d008      	beq.n	801263e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012630:	681a      	ldr	r2, [r3, #0]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012636:	2180      	movs	r1, #128	@ 0x80
 8012638:	0049      	lsls	r1, r1, #1
 801263a:	430a      	orrs	r2, r1
 801263c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	681a      	ldr	r2, [r3, #0]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	2101      	movs	r1, #1
 801264a:	430a      	orrs	r2, r1
 801264c:	601a      	str	r2, [r3, #0]
 801264e:	e00a      	b.n	8012666 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2280      	movs	r2, #128	@ 0x80
 8012654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2224      	movs	r2, #36	@ 0x24
 801265a:	2100      	movs	r1, #0
 801265c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 801265e:	2317      	movs	r3, #23
 8012660:	18fb      	adds	r3, r7, r3
 8012662:	2201      	movs	r2, #1
 8012664:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012666:	2317      	movs	r3, #23
 8012668:	18fb      	adds	r3, r7, r3
 801266a:	781b      	ldrb	r3, [r3, #0]
}
 801266c:	0018      	movs	r0, r3
 801266e:	46bd      	mov	sp, r7
 8012670:	b006      	add	sp, #24
 8012672:	bd80      	pop	{r7, pc}

08012674 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d101      	bne.n	8012686 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8012682:	2301      	movs	r3, #1
 8012684:	e04f      	b.n	8012726 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2225      	movs	r2, #37	@ 0x25
 801268a:	5c9b      	ldrb	r3, [r3, r2]
 801268c:	b2db      	uxtb	r3, r3
 801268e:	2b02      	cmp	r3, #2
 8012690:	d008      	beq.n	80126a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2204      	movs	r2, #4
 8012696:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2224      	movs	r2, #36	@ 0x24
 801269c:	2100      	movs	r1, #0
 801269e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80126a0:	2301      	movs	r3, #1
 80126a2:	e040      	b.n	8012726 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	210e      	movs	r1, #14
 80126b0:	438a      	bics	r2, r1
 80126b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80126be:	491c      	ldr	r1, [pc, #112]	@ (8012730 <HAL_DMA_Abort+0xbc>)
 80126c0:	400a      	ands	r2, r1
 80126c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2101      	movs	r1, #1
 80126d0:	438a      	bics	r2, r1
 80126d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126d8:	221c      	movs	r2, #28
 80126da:	401a      	ands	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126e0:	2101      	movs	r1, #1
 80126e2:	4091      	lsls	r1, r2
 80126e4:	000a      	movs	r2, r1
 80126e6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80126f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d00c      	beq.n	8012714 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012704:	490a      	ldr	r1, [pc, #40]	@ (8012730 <HAL_DMA_Abort+0xbc>)
 8012706:	400a      	ands	r2, r1
 8012708:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012712:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2225      	movs	r2, #37	@ 0x25
 8012718:	2101      	movs	r1, #1
 801271a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2224      	movs	r2, #36	@ 0x24
 8012720:	2100      	movs	r1, #0
 8012722:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8012724:	2300      	movs	r3, #0
}
 8012726:	0018      	movs	r0, r3
 8012728:	46bd      	mov	sp, r7
 801272a:	b002      	add	sp, #8
 801272c:	bd80      	pop	{r7, pc}
 801272e:	46c0      	nop			@ (mov r8, r8)
 8012730:	fffffeff 	.word	0xfffffeff

08012734 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801273c:	210f      	movs	r1, #15
 801273e:	187b      	adds	r3, r7, r1
 8012740:	2200      	movs	r2, #0
 8012742:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2225      	movs	r2, #37	@ 0x25
 8012748:	5c9b      	ldrb	r3, [r3, r2]
 801274a:	b2db      	uxtb	r3, r3
 801274c:	2b02      	cmp	r3, #2
 801274e:	d006      	beq.n	801275e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2204      	movs	r2, #4
 8012754:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8012756:	187b      	adds	r3, r7, r1
 8012758:	2201      	movs	r2, #1
 801275a:	701a      	strb	r2, [r3, #0]
 801275c:	e048      	b.n	80127f0 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	210e      	movs	r1, #14
 801276a:	438a      	bics	r2, r1
 801276c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2101      	movs	r1, #1
 801277a:	438a      	bics	r2, r1
 801277c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012788:	491d      	ldr	r1, [pc, #116]	@ (8012800 <HAL_DMA_Abort_IT+0xcc>)
 801278a:	400a      	ands	r2, r1
 801278c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012792:	221c      	movs	r2, #28
 8012794:	401a      	ands	r2, r3
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801279a:	2101      	movs	r1, #1
 801279c:	4091      	lsls	r1, r2
 801279e:	000a      	movs	r2, r1
 80127a0:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80127aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d00c      	beq.n	80127ce <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127b8:	681a      	ldr	r2, [r3, #0]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127be:	4910      	ldr	r1, [pc, #64]	@ (8012800 <HAL_DMA_Abort_IT+0xcc>)
 80127c0:	400a      	ands	r2, r1
 80127c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127c8:	687a      	ldr	r2, [r7, #4]
 80127ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80127cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2225      	movs	r2, #37	@ 0x25
 80127d2:	2101      	movs	r1, #1
 80127d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2224      	movs	r2, #36	@ 0x24
 80127da:	2100      	movs	r1, #0
 80127dc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d004      	beq.n	80127f0 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127ea:	687a      	ldr	r2, [r7, #4]
 80127ec:	0010      	movs	r0, r2
 80127ee:	4798      	blx	r3
    }
  }
  return status;
 80127f0:	230f      	movs	r3, #15
 80127f2:	18fb      	adds	r3, r7, r3
 80127f4:	781b      	ldrb	r3, [r3, #0]
}
 80127f6:	0018      	movs	r0, r3
 80127f8:	46bd      	mov	sp, r7
 80127fa:	b004      	add	sp, #16
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	46c0      	nop			@ (mov r8, r8)
 8012800:	fffffeff 	.word	0xfffffeff

08012804 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012820:	221c      	movs	r2, #28
 8012822:	4013      	ands	r3, r2
 8012824:	2204      	movs	r2, #4
 8012826:	409a      	lsls	r2, r3
 8012828:	0013      	movs	r3, r2
 801282a:	68fa      	ldr	r2, [r7, #12]
 801282c:	4013      	ands	r3, r2
 801282e:	d026      	beq.n	801287e <HAL_DMA_IRQHandler+0x7a>
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	2204      	movs	r2, #4
 8012834:	4013      	ands	r3, r2
 8012836:	d022      	beq.n	801287e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2220      	movs	r2, #32
 8012840:	4013      	ands	r3, r2
 8012842:	d107      	bne.n	8012854 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2104      	movs	r1, #4
 8012850:	438a      	bics	r2, r1
 8012852:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012858:	221c      	movs	r2, #28
 801285a:	401a      	ands	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012860:	2104      	movs	r1, #4
 8012862:	4091      	lsls	r1, r2
 8012864:	000a      	movs	r2, r1
 8012866:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801286c:	2b00      	cmp	r3, #0
 801286e:	d100      	bne.n	8012872 <HAL_DMA_IRQHandler+0x6e>
 8012870:	e080      	b.n	8012974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	0010      	movs	r0, r2
 801287a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801287c:	e07a      	b.n	8012974 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012882:	221c      	movs	r2, #28
 8012884:	4013      	ands	r3, r2
 8012886:	2202      	movs	r2, #2
 8012888:	409a      	lsls	r2, r3
 801288a:	0013      	movs	r3, r2
 801288c:	68fa      	ldr	r2, [r7, #12]
 801288e:	4013      	ands	r3, r2
 8012890:	d03c      	beq.n	801290c <HAL_DMA_IRQHandler+0x108>
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	2202      	movs	r2, #2
 8012896:	4013      	ands	r3, r2
 8012898:	d038      	beq.n	801290c <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2220      	movs	r2, #32
 80128a2:	4013      	ands	r3, r2
 80128a4:	d10b      	bne.n	80128be <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	210a      	movs	r1, #10
 80128b2:	438a      	bics	r2, r1
 80128b4:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2225      	movs	r2, #37	@ 0x25
 80128ba:	2101      	movs	r1, #1
 80128bc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	001a      	movs	r2, r3
 80128c4:	4b2e      	ldr	r3, [pc, #184]	@ (8012980 <HAL_DMA_IRQHandler+0x17c>)
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d909      	bls.n	80128de <HAL_DMA_IRQHandler+0xda>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128ce:	221c      	movs	r2, #28
 80128d0:	401a      	ands	r2, r3
 80128d2:	4b2c      	ldr	r3, [pc, #176]	@ (8012984 <HAL_DMA_IRQHandler+0x180>)
 80128d4:	2102      	movs	r1, #2
 80128d6:	4091      	lsls	r1, r2
 80128d8:	000a      	movs	r2, r1
 80128da:	605a      	str	r2, [r3, #4]
 80128dc:	e008      	b.n	80128f0 <HAL_DMA_IRQHandler+0xec>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128e2:	221c      	movs	r2, #28
 80128e4:	401a      	ands	r2, r3
 80128e6:	4b28      	ldr	r3, [pc, #160]	@ (8012988 <HAL_DMA_IRQHandler+0x184>)
 80128e8:	2102      	movs	r1, #2
 80128ea:	4091      	lsls	r1, r2
 80128ec:	000a      	movs	r2, r1
 80128ee:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2224      	movs	r2, #36	@ 0x24
 80128f4:	2100      	movs	r1, #0
 80128f6:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d039      	beq.n	8012974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	0010      	movs	r0, r2
 8012908:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801290a:	e033      	b.n	8012974 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012910:	221c      	movs	r2, #28
 8012912:	4013      	ands	r3, r2
 8012914:	2208      	movs	r2, #8
 8012916:	409a      	lsls	r2, r3
 8012918:	0013      	movs	r3, r2
 801291a:	68fa      	ldr	r2, [r7, #12]
 801291c:	4013      	ands	r3, r2
 801291e:	d02a      	beq.n	8012976 <HAL_DMA_IRQHandler+0x172>
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	2208      	movs	r2, #8
 8012924:	4013      	ands	r3, r2
 8012926:	d026      	beq.n	8012976 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	210e      	movs	r1, #14
 8012934:	438a      	bics	r2, r1
 8012936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801293c:	221c      	movs	r2, #28
 801293e:	401a      	ands	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012944:	2101      	movs	r1, #1
 8012946:	4091      	lsls	r1, r2
 8012948:	000a      	movs	r2, r1
 801294a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2201      	movs	r2, #1
 8012950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2225      	movs	r2, #37	@ 0x25
 8012956:	2101      	movs	r1, #1
 8012958:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2224      	movs	r2, #36	@ 0x24
 801295e:	2100      	movs	r1, #0
 8012960:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012966:	2b00      	cmp	r3, #0
 8012968:	d005      	beq.n	8012976 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	0010      	movs	r0, r2
 8012972:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012974:	46c0      	nop			@ (mov r8, r8)
 8012976:	46c0      	nop			@ (mov r8, r8)
}
 8012978:	46bd      	mov	sp, r7
 801297a:	b004      	add	sp, #16
 801297c:	bd80      	pop	{r7, pc}
 801297e:	46c0      	nop			@ (mov r8, r8)
 8012980:	40020080 	.word	0x40020080
 8012984:	40020400 	.word	0x40020400
 8012988:	40020000 	.word	0x40020000

0801298c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2225      	movs	r2, #37	@ 0x25
 8012998:	5c9b      	ldrb	r3, [r3, r2]
 801299a:	b2db      	uxtb	r3, r3
}
 801299c:	0018      	movs	r0, r3
 801299e:	46bd      	mov	sp, r7
 80129a0:	b002      	add	sp, #8
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80129b0:	0018      	movs	r0, r3
 80129b2:	46bd      	mov	sp, r7
 80129b4:	b002      	add	sp, #8
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	607a      	str	r2, [r7, #4]
 80129c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80129ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d004      	beq.n	80129e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129dc:	68fa      	ldr	r2, [r7, #12]
 80129de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80129e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129e6:	221c      	movs	r2, #28
 80129e8:	401a      	ands	r2, r3
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129ee:	2101      	movs	r1, #1
 80129f0:	4091      	lsls	r1, r2
 80129f2:	000a      	movs	r2, r1
 80129f4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	2b10      	cmp	r3, #16
 8012a04:	d108      	bne.n	8012a18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	68ba      	ldr	r2, [r7, #8]
 8012a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012a16:	e007      	b.n	8012a28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	60da      	str	r2, [r3, #12]
}
 8012a28:	46c0      	nop			@ (mov r8, r8)
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	b004      	add	sp, #16
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	001a      	movs	r2, r3
 8012a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8012ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d814      	bhi.n	8012a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a48:	089b      	lsrs	r3, r3, #2
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8012ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8012a4e:	189a      	adds	r2, r3, r2
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	001a      	movs	r2, r3
 8012a5a:	23ff      	movs	r3, #255	@ 0xff
 8012a5c:	4013      	ands	r3, r2
 8012a5e:	3b08      	subs	r3, #8
 8012a60:	2114      	movs	r1, #20
 8012a62:	0018      	movs	r0, r3
 8012a64:	f7ed fb58 	bl	8000118 <__udivsi3>
 8012a68:	0003      	movs	r3, r0
 8012a6a:	60fb      	str	r3, [r7, #12]
 8012a6c:	e014      	b.n	8012a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a72:	089b      	lsrs	r3, r3, #2
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	4a11      	ldr	r2, [pc, #68]	@ (8012abc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8012a78:	189a      	adds	r2, r3, r2
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	001a      	movs	r2, r3
 8012a84:	23ff      	movs	r3, #255	@ 0xff
 8012a86:	4013      	ands	r3, r2
 8012a88:	3b08      	subs	r3, #8
 8012a8a:	2114      	movs	r1, #20
 8012a8c:	0018      	movs	r0, r3
 8012a8e:	f7ed fb43 	bl	8000118 <__udivsi3>
 8012a92:	0003      	movs	r3, r0
 8012a94:	3307      	adds	r3, #7
 8012a96:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	4a09      	ldr	r2, [pc, #36]	@ (8012ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8012a9c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	221f      	movs	r2, #31
 8012aa2:	4013      	ands	r3, r2
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	409a      	lsls	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8012aac:	46c0      	nop			@ (mov r8, r8)
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	b004      	add	sp, #16
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	40020407 	.word	0x40020407
 8012ab8:	40020800 	.word	0x40020800
 8012abc:	4002081c 	.word	0x4002081c
 8012ac0:	40020880 	.word	0x40020880

08012ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	22ff      	movs	r2, #255	@ 0xff
 8012ad2:	4013      	ands	r3, r2
 8012ad4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8012b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8012ada:	4694      	mov	ip, r2
 8012adc:	4463      	add	r3, ip
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	001a      	movs	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	4a07      	ldr	r2, [pc, #28]	@ (8012b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8012aea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	3b01      	subs	r3, #1
 8012af0:	2203      	movs	r2, #3
 8012af2:	4013      	ands	r3, r2
 8012af4:	2201      	movs	r2, #1
 8012af6:	409a      	lsls	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8012afc:	46c0      	nop			@ (mov r8, r8)
 8012afe:	46bd      	mov	sp, r7
 8012b00:	b004      	add	sp, #16
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	1000823f 	.word	0x1000823f
 8012b08:	40020940 	.word	0x40020940

08012b0c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8012b0c:	b5b0      	push	{r4, r5, r7, lr}
 8012b0e:	b086      	sub	sp, #24
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	603a      	str	r2, [r7, #0]
 8012b18:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012b1a:	4b21      	ldr	r3, [pc, #132]	@ (8012ba0 <HAL_FLASH_Program+0x94>)
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	d101      	bne.n	8012b26 <HAL_FLASH_Program+0x1a>
 8012b22:	2302      	movs	r3, #2
 8012b24:	e038      	b.n	8012b98 <HAL_FLASH_Program+0x8c>
 8012b26:	4b1e      	ldr	r3, [pc, #120]	@ (8012ba0 <HAL_FLASH_Program+0x94>)
 8012b28:	2201      	movs	r2, #1
 8012b2a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8012ba0 <HAL_FLASH_Program+0x94>)
 8012b2e:	2200      	movs	r2, #0
 8012b30:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012b32:	2517      	movs	r5, #23
 8012b34:	197c      	adds	r4, r7, r5
 8012b36:	23fa      	movs	r3, #250	@ 0xfa
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	f000 f874 	bl	8012c28 <FLASH_WaitForLastOperation>
 8012b40:	0003      	movs	r3, r0
 8012b42:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012b44:	197b      	adds	r3, r7, r5
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d11f      	bne.n	8012b8c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d106      	bne.n	8012b60 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8012b52:	683a      	ldr	r2, [r7, #0]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	68b9      	ldr	r1, [r7, #8]
 8012b58:	0008      	movs	r0, r1
 8012b5a:	f000 f8b3 	bl	8012cc4 <FLASH_Program_DoubleWord>
 8012b5e:	e005      	b.n	8012b6c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8012b60:	683a      	ldr	r2, [r7, #0]
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	0011      	movs	r1, r2
 8012b66:	0018      	movs	r0, r3
 8012b68:	f008 f9aa 	bl	801aec0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012b6c:	2317      	movs	r3, #23
 8012b6e:	18fc      	adds	r4, r7, r3
 8012b70:	23fa      	movs	r3, #250	@ 0xfa
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	0018      	movs	r0, r3
 8012b76:	f000 f857 	bl	8012c28 <FLASH_WaitForLastOperation>
 8012b7a:	0003      	movs	r3, r0
 8012b7c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8012b7e:	4b09      	ldr	r3, [pc, #36]	@ (8012ba4 <HAL_FLASH_Program+0x98>)
 8012b80:	695a      	ldr	r2, [r3, #20]
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	43d9      	mvns	r1, r3
 8012b86:	4b07      	ldr	r3, [pc, #28]	@ (8012ba4 <HAL_FLASH_Program+0x98>)
 8012b88:	400a      	ands	r2, r1
 8012b8a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012b8c:	4b04      	ldr	r3, [pc, #16]	@ (8012ba0 <HAL_FLASH_Program+0x94>)
 8012b8e:	2200      	movs	r2, #0
 8012b90:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8012b92:	2317      	movs	r3, #23
 8012b94:	18fb      	adds	r3, r7, r3
 8012b96:	781b      	ldrb	r3, [r3, #0]
}
 8012b98:	0018      	movs	r0, r3
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	b006      	add	sp, #24
 8012b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8012ba0:	20002214 	.word	0x20002214
 8012ba4:	40022000 	.word	0x40022000

08012ba8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8012bae:	1dfb      	adds	r3, r7, #7
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8012bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8012be4 <HAL_FLASH_Unlock+0x3c>)
 8012bb6:	695b      	ldr	r3, [r3, #20]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	da0c      	bge.n	8012bd6 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012bbc:	4b09      	ldr	r3, [pc, #36]	@ (8012be4 <HAL_FLASH_Unlock+0x3c>)
 8012bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8012be8 <HAL_FLASH_Unlock+0x40>)
 8012bc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012bc2:	4b08      	ldr	r3, [pc, #32]	@ (8012be4 <HAL_FLASH_Unlock+0x3c>)
 8012bc4:	4a09      	ldr	r2, [pc, #36]	@ (8012bec <HAL_FLASH_Unlock+0x44>)
 8012bc6:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8012bc8:	4b06      	ldr	r3, [pc, #24]	@ (8012be4 <HAL_FLASH_Unlock+0x3c>)
 8012bca:	695b      	ldr	r3, [r3, #20]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	da02      	bge.n	8012bd6 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8012bd0:	1dfb      	adds	r3, r7, #7
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8012bd6:	1dfb      	adds	r3, r7, #7
 8012bd8:	781b      	ldrb	r3, [r3, #0]
}
 8012bda:	0018      	movs	r0, r3
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	b002      	add	sp, #8
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	46c0      	nop			@ (mov r8, r8)
 8012be4:	40022000 	.word	0x40022000
 8012be8:	45670123 	.word	0x45670123
 8012bec:	cdef89ab 	.word	0xcdef89ab

08012bf0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8012bf6:	1dfb      	adds	r3, r7, #7
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8012bfc:	4b09      	ldr	r3, [pc, #36]	@ (8012c24 <HAL_FLASH_Lock+0x34>)
 8012bfe:	695a      	ldr	r2, [r3, #20]
 8012c00:	4b08      	ldr	r3, [pc, #32]	@ (8012c24 <HAL_FLASH_Lock+0x34>)
 8012c02:	2180      	movs	r1, #128	@ 0x80
 8012c04:	0609      	lsls	r1, r1, #24
 8012c06:	430a      	orrs	r2, r1
 8012c08:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8012c0a:	4b06      	ldr	r3, [pc, #24]	@ (8012c24 <HAL_FLASH_Lock+0x34>)
 8012c0c:	695b      	ldr	r3, [r3, #20]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	da02      	bge.n	8012c18 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8012c12:	1dfb      	adds	r3, r7, #7
 8012c14:	2200      	movs	r2, #0
 8012c16:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012c18:	1dfb      	adds	r3, r7, #7
 8012c1a:	781b      	ldrb	r3, [r3, #0]
}
 8012c1c:	0018      	movs	r0, r3
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	b002      	add	sp, #8
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	40022000 	.word	0x40022000

08012c28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8012c30:	f7ff f9fe 	bl	8012030 <HAL_GetTick>
 8012c34:	0002      	movs	r2, r0
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	189b      	adds	r3, r3, r2
 8012c3a:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 8012c3c:	2380      	movs	r3, #128	@ 0x80
 8012c3e:	025b      	lsls	r3, r3, #9
 8012c40:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 8012c42:	e007      	b.n	8012c54 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8012c44:	f7ff f9f4 	bl	8012030 <HAL_GetTick>
 8012c48:	0002      	movs	r2, r0
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	d801      	bhi.n	8012c54 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8012c50:	2303      	movs	r3, #3
 8012c52:	e02a      	b.n	8012caa <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8012c54:	4b17      	ldr	r3, [pc, #92]	@ (8012cb4 <FLASH_WaitForLastOperation+0x8c>)
 8012c56:	691b      	ldr	r3, [r3, #16]
 8012c58:	68ba      	ldr	r2, [r7, #8]
 8012c5a:	4013      	ands	r3, r2
 8012c5c:	d1f2      	bne.n	8012c44 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8012c5e:	4b15      	ldr	r3, [pc, #84]	@ (8012cb4 <FLASH_WaitForLastOperation+0x8c>)
 8012c60:	691b      	ldr	r3, [r3, #16]
 8012c62:	4a15      	ldr	r2, [pc, #84]	@ (8012cb8 <FLASH_WaitForLastOperation+0x90>)
 8012c64:	4013      	ands	r3, r2
 8012c66:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8012c68:	4b12      	ldr	r3, [pc, #72]	@ (8012cb4 <FLASH_WaitForLastOperation+0x8c>)
 8012c6a:	4a14      	ldr	r2, [pc, #80]	@ (8012cbc <FLASH_WaitForLastOperation+0x94>)
 8012c6c:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d004      	beq.n	8012c7e <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8012c74:	4b12      	ldr	r3, [pc, #72]	@ (8012cc0 <FLASH_WaitForLastOperation+0x98>)
 8012c76:	68ba      	ldr	r2, [r7, #8]
 8012c78:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	e015      	b.n	8012caa <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8012c7e:	f7ff f9d7 	bl	8012030 <HAL_GetTick>
 8012c82:	0002      	movs	r2, r0
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	189b      	adds	r3, r3, r2
 8012c88:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8012c8a:	e007      	b.n	8012c9c <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8012c8c:	f7ff f9d0 	bl	8012030 <HAL_GetTick>
 8012c90:	0002      	movs	r2, r0
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	4293      	cmp	r3, r2
 8012c96:	d801      	bhi.n	8012c9c <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8012c98:	2303      	movs	r3, #3
 8012c9a:	e006      	b.n	8012caa <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8012c9c:	4b05      	ldr	r3, [pc, #20]	@ (8012cb4 <FLASH_WaitForLastOperation+0x8c>)
 8012c9e:	691a      	ldr	r2, [r3, #16]
 8012ca0:	2380      	movs	r3, #128	@ 0x80
 8012ca2:	02db      	lsls	r3, r3, #11
 8012ca4:	4013      	ands	r3, r2
 8012ca6:	d1f1      	bne.n	8012c8c <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	0018      	movs	r0, r3
 8012cac:	46bd      	mov	sp, r7
 8012cae:	b004      	add	sp, #16
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	46c0      	nop			@ (mov r8, r8)
 8012cb4:	40022000 	.word	0x40022000
 8012cb8:	000083fa 	.word	0x000083fa
 8012cbc:	000083fb 	.word	0x000083fb
 8012cc0:	20002214 	.word	0x20002214

08012cc4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8012cc4:	b5b0      	push	{r4, r5, r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	603a      	str	r2, [r7, #0]
 8012cce:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8012cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8012d00 <FLASH_Program_DoubleWord+0x3c>)
 8012cd2:	695a      	ldr	r2, [r3, #20]
 8012cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8012d00 <FLASH_Program_DoubleWord+0x3c>)
 8012cd6:	2101      	movs	r1, #1
 8012cd8:	430a      	orrs	r2, r1
 8012cda:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8012ce2:	f3bf 8f6f 	isb	sy
}
 8012ce6:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	001c      	movs	r4, r3
 8012cec:	2300      	movs	r3, #0
 8012cee:	001d      	movs	r5, r3
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	3304      	adds	r3, #4
 8012cf4:	0022      	movs	r2, r4
 8012cf6:	601a      	str	r2, [r3, #0]
}
 8012cf8:	46c0      	nop			@ (mov r8, r8)
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	b004      	add	sp, #16
 8012cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8012d00:	40022000 	.word	0x40022000

08012d04 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8012d04:	b5b0      	push	{r4, r5, r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012d0e:	4b32      	ldr	r3, [pc, #200]	@ (8012dd8 <HAL_FLASHEx_Erase+0xd4>)
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d101      	bne.n	8012d1a <HAL_FLASHEx_Erase+0x16>
 8012d16:	2302      	movs	r3, #2
 8012d18:	e059      	b.n	8012dce <HAL_FLASHEx_Erase+0xca>
 8012d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8012dd8 <HAL_FLASHEx_Erase+0xd4>)
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012d20:	4b2d      	ldr	r3, [pc, #180]	@ (8012dd8 <HAL_FLASHEx_Erase+0xd4>)
 8012d22:	2200      	movs	r2, #0
 8012d24:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012d26:	250f      	movs	r5, #15
 8012d28:	197c      	adds	r4, r7, r5
 8012d2a:	23fa      	movs	r3, #250	@ 0xfa
 8012d2c:	009b      	lsls	r3, r3, #2
 8012d2e:	0018      	movs	r0, r3
 8012d30:	f7ff ff7a 	bl	8012c28 <FLASH_WaitForLastOperation>
 8012d34:	0003      	movs	r3, r0
 8012d36:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012d38:	002c      	movs	r4, r5
 8012d3a:	193b      	adds	r3, r7, r4
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d13f      	bne.n	8012dc2 <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2201      	movs	r2, #1
 8012d46:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b04      	cmp	r3, #4
 8012d4e:	d10a      	bne.n	8012d66 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8012d50:	f000 f846 	bl	8012de0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012d54:	193c      	adds	r4, r7, r4
 8012d56:	23fa      	movs	r3, #250	@ 0xfa
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	0018      	movs	r0, r3
 8012d5c:	f7ff ff64 	bl	8012c28 <FLASH_WaitForLastOperation>
 8012d60:	0003      	movs	r3, r0
 8012d62:	7023      	strb	r3, [r4, #0]
 8012d64:	e02d      	b.n	8012dc2 <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	2201      	movs	r2, #1
 8012d6a:	4252      	negs	r2, r2
 8012d6c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	689b      	ldr	r3, [r3, #8]
 8012d72:	60bb      	str	r3, [r7, #8]
 8012d74:	e017      	b.n	8012da6 <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	0018      	movs	r0, r3
 8012d7a:	f000 f841 	bl	8012e00 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012d7e:	250f      	movs	r5, #15
 8012d80:	197c      	adds	r4, r7, r5
 8012d82:	23fa      	movs	r3, #250	@ 0xfa
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	0018      	movs	r0, r3
 8012d88:	f7ff ff4e 	bl	8012c28 <FLASH_WaitForLastOperation>
 8012d8c:	0003      	movs	r3, r0
 8012d8e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8012d90:	197b      	adds	r3, r7, r5
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d003      	beq.n	8012da0 <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	68ba      	ldr	r2, [r7, #8]
 8012d9c:	601a      	str	r2, [r3, #0]
          break;
 8012d9e:	e00a      	b.n	8012db6 <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	3301      	adds	r3, #1
 8012da4:	60bb      	str	r3, [r7, #8]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	689a      	ldr	r2, [r3, #8]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	18d3      	adds	r3, r2, r3
 8012db0:	68ba      	ldr	r2, [r7, #8]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d3df      	bcc.n	8012d76 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8012db6:	4b09      	ldr	r3, [pc, #36]	@ (8012ddc <HAL_FLASHEx_Erase+0xd8>)
 8012db8:	695a      	ldr	r2, [r3, #20]
 8012dba:	4b08      	ldr	r3, [pc, #32]	@ (8012ddc <HAL_FLASHEx_Erase+0xd8>)
 8012dbc:	2102      	movs	r1, #2
 8012dbe:	438a      	bics	r2, r1
 8012dc0:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012dc2:	4b05      	ldr	r3, [pc, #20]	@ (8012dd8 <HAL_FLASHEx_Erase+0xd4>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8012dc8:	230f      	movs	r3, #15
 8012dca:	18fb      	adds	r3, r7, r3
 8012dcc:	781b      	ldrb	r3, [r3, #0]
}
 8012dce:	0018      	movs	r0, r3
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	b004      	add	sp, #16
 8012dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8012dd6:	46c0      	nop			@ (mov r8, r8)
 8012dd8:	20002214 	.word	0x20002214
 8012ddc:	40022000 	.word	0x40022000

08012de0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 8012de4:	4b04      	ldr	r3, [pc, #16]	@ (8012df8 <FLASH_MassErase+0x18>)
 8012de6:	695a      	ldr	r2, [r3, #20]
 8012de8:	4b03      	ldr	r3, [pc, #12]	@ (8012df8 <FLASH_MassErase+0x18>)
 8012dea:	4904      	ldr	r1, [pc, #16]	@ (8012dfc <FLASH_MassErase+0x1c>)
 8012dec:	430a      	orrs	r2, r1
 8012dee:	615a      	str	r2, [r3, #20]
}
 8012df0:	46c0      	nop			@ (mov r8, r8)
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	46c0      	nop			@ (mov r8, r8)
 8012df8:	40022000 	.word	0x40022000
 8012dfc:	00010004 	.word	0x00010004

08012e00 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8012e08:	4b08      	ldr	r3, [pc, #32]	@ (8012e2c <FLASH_PageErase+0x2c>)
 8012e0a:	695b      	ldr	r3, [r3, #20]
 8012e0c:	4a08      	ldr	r2, [pc, #32]	@ (8012e30 <FLASH_PageErase+0x30>)
 8012e0e:	4013      	ands	r3, r2
 8012e10:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	00da      	lsls	r2, r3, #3
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	431a      	orrs	r2, r3
 8012e1a:	4b04      	ldr	r3, [pc, #16]	@ (8012e2c <FLASH_PageErase+0x2c>)
 8012e1c:	4905      	ldr	r1, [pc, #20]	@ (8012e34 <FLASH_PageErase+0x34>)
 8012e1e:	430a      	orrs	r2, r1
 8012e20:	615a      	str	r2, [r3, #20]
}
 8012e22:	46c0      	nop			@ (mov r8, r8)
 8012e24:	46bd      	mov	sp, r7
 8012e26:	b004      	add	sp, #16
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	46c0      	nop			@ (mov r8, r8)
 8012e2c:	40022000 	.word	0x40022000
 8012e30:	fffffc07 	.word	0xfffffc07
 8012e34:	00010002 	.word	0x00010002

08012e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b086      	sub	sp, #24
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8012e42:	2300      	movs	r3, #0
 8012e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8012e46:	e153      	b.n	80130f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2101      	movs	r1, #1
 8012e4e:	697a      	ldr	r2, [r7, #20]
 8012e50:	4091      	lsls	r1, r2
 8012e52:	000a      	movs	r2, r1
 8012e54:	4013      	ands	r3, r2
 8012e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d100      	bne.n	8012e60 <HAL_GPIO_Init+0x28>
 8012e5e:	e144      	b.n	80130ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	2203      	movs	r2, #3
 8012e66:	4013      	ands	r3, r2
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d005      	beq.n	8012e78 <HAL_GPIO_Init+0x40>
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	2203      	movs	r2, #3
 8012e72:	4013      	ands	r3, r2
 8012e74:	2b02      	cmp	r3, #2
 8012e76:	d130      	bne.n	8012eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	005b      	lsls	r3, r3, #1
 8012e82:	2203      	movs	r2, #3
 8012e84:	409a      	lsls	r2, r3
 8012e86:	0013      	movs	r3, r2
 8012e88:	43da      	mvns	r2, r3
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	4013      	ands	r3, r2
 8012e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	68da      	ldr	r2, [r3, #12]
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	005b      	lsls	r3, r3, #1
 8012e98:	409a      	lsls	r2, r3
 8012e9a:	0013      	movs	r3, r2
 8012e9c:	693a      	ldr	r2, [r7, #16]
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	693a      	ldr	r2, [r7, #16]
 8012ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8012eae:	2201      	movs	r2, #1
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	409a      	lsls	r2, r3
 8012eb4:	0013      	movs	r3, r2
 8012eb6:	43da      	mvns	r2, r3
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	4013      	ands	r3, r2
 8012ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	091b      	lsrs	r3, r3, #4
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	401a      	ands	r2, r3
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	409a      	lsls	r2, r3
 8012ecc:	0013      	movs	r3, r2
 8012ece:	693a      	ldr	r2, [r7, #16]
 8012ed0:	4313      	orrs	r3, r2
 8012ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	693a      	ldr	r2, [r7, #16]
 8012ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	2203      	movs	r2, #3
 8012ee0:	4013      	ands	r3, r2
 8012ee2:	2b03      	cmp	r3, #3
 8012ee4:	d017      	beq.n	8012f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	005b      	lsls	r3, r3, #1
 8012ef0:	2203      	movs	r2, #3
 8012ef2:	409a      	lsls	r2, r3
 8012ef4:	0013      	movs	r3, r2
 8012ef6:	43da      	mvns	r2, r3
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	4013      	ands	r3, r2
 8012efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	689a      	ldr	r2, [r3, #8]
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	005b      	lsls	r3, r3, #1
 8012f06:	409a      	lsls	r2, r3
 8012f08:	0013      	movs	r3, r2
 8012f0a:	693a      	ldr	r2, [r7, #16]
 8012f0c:	4313      	orrs	r3, r2
 8012f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	693a      	ldr	r2, [r7, #16]
 8012f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	2203      	movs	r2, #3
 8012f1c:	4013      	ands	r3, r2
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	d123      	bne.n	8012f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	08da      	lsrs	r2, r3, #3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	3208      	adds	r2, #8
 8012f2a:	0092      	lsls	r2, r2, #2
 8012f2c:	58d3      	ldr	r3, [r2, r3]
 8012f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	2207      	movs	r2, #7
 8012f34:	4013      	ands	r3, r2
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	220f      	movs	r2, #15
 8012f3a:	409a      	lsls	r2, r3
 8012f3c:	0013      	movs	r3, r2
 8012f3e:	43da      	mvns	r2, r3
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	4013      	ands	r3, r2
 8012f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	691a      	ldr	r2, [r3, #16]
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	2107      	movs	r1, #7
 8012f4e:	400b      	ands	r3, r1
 8012f50:	009b      	lsls	r3, r3, #2
 8012f52:	409a      	lsls	r2, r3
 8012f54:	0013      	movs	r3, r2
 8012f56:	693a      	ldr	r2, [r7, #16]
 8012f58:	4313      	orrs	r3, r2
 8012f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	08da      	lsrs	r2, r3, #3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	3208      	adds	r2, #8
 8012f64:	0092      	lsls	r2, r2, #2
 8012f66:	6939      	ldr	r1, [r7, #16]
 8012f68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	005b      	lsls	r3, r3, #1
 8012f74:	2203      	movs	r2, #3
 8012f76:	409a      	lsls	r2, r3
 8012f78:	0013      	movs	r3, r2
 8012f7a:	43da      	mvns	r2, r3
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	4013      	ands	r3, r2
 8012f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	2203      	movs	r2, #3
 8012f88:	401a      	ands	r2, r3
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	005b      	lsls	r3, r3, #1
 8012f8e:	409a      	lsls	r2, r3
 8012f90:	0013      	movs	r3, r2
 8012f92:	693a      	ldr	r2, [r7, #16]
 8012f94:	4313      	orrs	r3, r2
 8012f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	693a      	ldr	r2, [r7, #16]
 8012f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	685a      	ldr	r2, [r3, #4]
 8012fa2:	23c0      	movs	r3, #192	@ 0xc0
 8012fa4:	029b      	lsls	r3, r3, #10
 8012fa6:	4013      	ands	r3, r2
 8012fa8:	d100      	bne.n	8012fac <HAL_GPIO_Init+0x174>
 8012faa:	e09e      	b.n	80130ea <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8012fac:	4a56      	ldr	r2, [pc, #344]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	089b      	lsrs	r3, r3, #2
 8012fb2:	3318      	adds	r3, #24
 8012fb4:	009b      	lsls	r3, r3, #2
 8012fb6:	589b      	ldr	r3, [r3, r2]
 8012fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	2203      	movs	r2, #3
 8012fbe:	4013      	ands	r3, r2
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	220f      	movs	r2, #15
 8012fc4:	409a      	lsls	r2, r3
 8012fc6:	0013      	movs	r3, r2
 8012fc8:	43da      	mvns	r2, r3
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	4013      	ands	r3, r2
 8012fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	23a0      	movs	r3, #160	@ 0xa0
 8012fd4:	05db      	lsls	r3, r3, #23
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d01f      	beq.n	801301a <HAL_GPIO_Init+0x1e2>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4a4b      	ldr	r2, [pc, #300]	@ (801310c <HAL_GPIO_Init+0x2d4>)
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d019      	beq.n	8013016 <HAL_GPIO_Init+0x1de>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8013110 <HAL_GPIO_Init+0x2d8>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d013      	beq.n	8013012 <HAL_GPIO_Init+0x1da>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4a49      	ldr	r2, [pc, #292]	@ (8013114 <HAL_GPIO_Init+0x2dc>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d00d      	beq.n	801300e <HAL_GPIO_Init+0x1d6>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4a48      	ldr	r2, [pc, #288]	@ (8013118 <HAL_GPIO_Init+0x2e0>)
 8012ff6:	4293      	cmp	r3, r2
 8012ff8:	d007      	beq.n	801300a <HAL_GPIO_Init+0x1d2>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4a47      	ldr	r2, [pc, #284]	@ (801311c <HAL_GPIO_Init+0x2e4>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d101      	bne.n	8013006 <HAL_GPIO_Init+0x1ce>
 8013002:	2305      	movs	r3, #5
 8013004:	e00a      	b.n	801301c <HAL_GPIO_Init+0x1e4>
 8013006:	2306      	movs	r3, #6
 8013008:	e008      	b.n	801301c <HAL_GPIO_Init+0x1e4>
 801300a:	2304      	movs	r3, #4
 801300c:	e006      	b.n	801301c <HAL_GPIO_Init+0x1e4>
 801300e:	2303      	movs	r3, #3
 8013010:	e004      	b.n	801301c <HAL_GPIO_Init+0x1e4>
 8013012:	2302      	movs	r3, #2
 8013014:	e002      	b.n	801301c <HAL_GPIO_Init+0x1e4>
 8013016:	2301      	movs	r3, #1
 8013018:	e000      	b.n	801301c <HAL_GPIO_Init+0x1e4>
 801301a:	2300      	movs	r3, #0
 801301c:	697a      	ldr	r2, [r7, #20]
 801301e:	2103      	movs	r1, #3
 8013020:	400a      	ands	r2, r1
 8013022:	00d2      	lsls	r2, r2, #3
 8013024:	4093      	lsls	r3, r2
 8013026:	693a      	ldr	r2, [r7, #16]
 8013028:	4313      	orrs	r3, r2
 801302a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 801302c:	4936      	ldr	r1, [pc, #216]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	089b      	lsrs	r3, r3, #2
 8013032:	3318      	adds	r3, #24
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	693a      	ldr	r2, [r7, #16]
 8013038:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801303a:	4b33      	ldr	r3, [pc, #204]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	43da      	mvns	r2, r3
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	4013      	ands	r3, r2
 8013048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	685a      	ldr	r2, [r3, #4]
 801304e:	2380      	movs	r3, #128	@ 0x80
 8013050:	035b      	lsls	r3, r3, #13
 8013052:	4013      	ands	r3, r2
 8013054:	d003      	beq.n	801305e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8013056:	693a      	ldr	r2, [r7, #16]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	4313      	orrs	r3, r2
 801305c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801305e:	4b2a      	ldr	r3, [pc, #168]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 8013060:	693a      	ldr	r2, [r7, #16]
 8013062:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8013064:	4b28      	ldr	r3, [pc, #160]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	43da      	mvns	r2, r3
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	4013      	ands	r3, r2
 8013072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	685a      	ldr	r2, [r3, #4]
 8013078:	2380      	movs	r3, #128	@ 0x80
 801307a:	039b      	lsls	r3, r3, #14
 801307c:	4013      	ands	r3, r2
 801307e:	d003      	beq.n	8013088 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8013080:	693a      	ldr	r2, [r7, #16]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	4313      	orrs	r3, r2
 8013086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8013088:	4b1f      	ldr	r3, [pc, #124]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 801308a:	693a      	ldr	r2, [r7, #16]
 801308c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801308e:	4a1e      	ldr	r2, [pc, #120]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 8013090:	2384      	movs	r3, #132	@ 0x84
 8013092:	58d3      	ldr	r3, [r2, r3]
 8013094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	43da      	mvns	r2, r3
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	4013      	ands	r3, r2
 801309e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	685a      	ldr	r2, [r3, #4]
 80130a4:	2380      	movs	r3, #128	@ 0x80
 80130a6:	029b      	lsls	r3, r3, #10
 80130a8:	4013      	ands	r3, r2
 80130aa:	d003      	beq.n	80130b4 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 80130ac:	693a      	ldr	r2, [r7, #16]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	4313      	orrs	r3, r2
 80130b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80130b4:	4914      	ldr	r1, [pc, #80]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 80130b6:	2284      	movs	r2, #132	@ 0x84
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80130bc:	4a12      	ldr	r2, [pc, #72]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 80130be:	2380      	movs	r3, #128	@ 0x80
 80130c0:	58d3      	ldr	r3, [r2, r3]
 80130c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	43da      	mvns	r2, r3
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	4013      	ands	r3, r2
 80130cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	685a      	ldr	r2, [r3, #4]
 80130d2:	2380      	movs	r3, #128	@ 0x80
 80130d4:	025b      	lsls	r3, r3, #9
 80130d6:	4013      	ands	r3, r2
 80130d8:	d003      	beq.n	80130e2 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80130da:	693a      	ldr	r2, [r7, #16]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	4313      	orrs	r3, r2
 80130e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80130e2:	4909      	ldr	r1, [pc, #36]	@ (8013108 <HAL_GPIO_Init+0x2d0>)
 80130e4:	2280      	movs	r2, #128	@ 0x80
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	3301      	adds	r3, #1
 80130ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	40da      	lsrs	r2, r3
 80130f8:	1e13      	subs	r3, r2, #0
 80130fa:	d000      	beq.n	80130fe <HAL_GPIO_Init+0x2c6>
 80130fc:	e6a4      	b.n	8012e48 <HAL_GPIO_Init+0x10>
  }
}
 80130fe:	46c0      	nop			@ (mov r8, r8)
 8013100:	46c0      	nop			@ (mov r8, r8)
 8013102:	46bd      	mov	sp, r7
 8013104:	b006      	add	sp, #24
 8013106:	bd80      	pop	{r7, pc}
 8013108:	40021800 	.word	0x40021800
 801310c:	50000400 	.word	0x50000400
 8013110:	50000800 	.word	0x50000800
 8013114:	50000c00 	.word	0x50000c00
 8013118:	50001000 	.word	0x50001000
 801311c:	50001400 	.word	0x50001400

08013120 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b086      	sub	sp, #24
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801312a:	2300      	movs	r3, #0
 801312c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801312e:	e0c0      	b.n	80132b2 <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8013130:	2201      	movs	r2, #1
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	409a      	lsls	r2, r3
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	4013      	ands	r3, r2
 801313a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d100      	bne.n	8013144 <HAL_GPIO_DeInit+0x24>
 8013142:	e0b3      	b.n	80132ac <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8013144:	4a60      	ldr	r2, [pc, #384]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	089b      	lsrs	r3, r3, #2
 801314a:	3318      	adds	r3, #24
 801314c:	009b      	lsls	r3, r3, #2
 801314e:	589b      	ldr	r3, [r3, r2]
 8013150:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	2203      	movs	r2, #3
 8013156:	4013      	ands	r3, r2
 8013158:	00db      	lsls	r3, r3, #3
 801315a:	220f      	movs	r2, #15
 801315c:	409a      	lsls	r2, r3
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	4013      	ands	r3, r2
 8013162:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	23a0      	movs	r3, #160	@ 0xa0
 8013168:	05db      	lsls	r3, r3, #23
 801316a:	429a      	cmp	r2, r3
 801316c:	d01f      	beq.n	80131ae <HAL_GPIO_DeInit+0x8e>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	4a56      	ldr	r2, [pc, #344]	@ (80132cc <HAL_GPIO_DeInit+0x1ac>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d019      	beq.n	80131aa <HAL_GPIO_DeInit+0x8a>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	4a55      	ldr	r2, [pc, #340]	@ (80132d0 <HAL_GPIO_DeInit+0x1b0>)
 801317a:	4293      	cmp	r3, r2
 801317c:	d013      	beq.n	80131a6 <HAL_GPIO_DeInit+0x86>
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	4a54      	ldr	r2, [pc, #336]	@ (80132d4 <HAL_GPIO_DeInit+0x1b4>)
 8013182:	4293      	cmp	r3, r2
 8013184:	d00d      	beq.n	80131a2 <HAL_GPIO_DeInit+0x82>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	4a53      	ldr	r2, [pc, #332]	@ (80132d8 <HAL_GPIO_DeInit+0x1b8>)
 801318a:	4293      	cmp	r3, r2
 801318c:	d007      	beq.n	801319e <HAL_GPIO_DeInit+0x7e>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	4a52      	ldr	r2, [pc, #328]	@ (80132dc <HAL_GPIO_DeInit+0x1bc>)
 8013192:	4293      	cmp	r3, r2
 8013194:	d101      	bne.n	801319a <HAL_GPIO_DeInit+0x7a>
 8013196:	2305      	movs	r3, #5
 8013198:	e00a      	b.n	80131b0 <HAL_GPIO_DeInit+0x90>
 801319a:	2306      	movs	r3, #6
 801319c:	e008      	b.n	80131b0 <HAL_GPIO_DeInit+0x90>
 801319e:	2304      	movs	r3, #4
 80131a0:	e006      	b.n	80131b0 <HAL_GPIO_DeInit+0x90>
 80131a2:	2303      	movs	r3, #3
 80131a4:	e004      	b.n	80131b0 <HAL_GPIO_DeInit+0x90>
 80131a6:	2302      	movs	r3, #2
 80131a8:	e002      	b.n	80131b0 <HAL_GPIO_DeInit+0x90>
 80131aa:	2301      	movs	r3, #1
 80131ac:	e000      	b.n	80131b0 <HAL_GPIO_DeInit+0x90>
 80131ae:	2300      	movs	r3, #0
 80131b0:	697a      	ldr	r2, [r7, #20]
 80131b2:	2103      	movs	r1, #3
 80131b4:	400a      	ands	r2, r1
 80131b6:	00d2      	lsls	r2, r2, #3
 80131b8:	4093      	lsls	r3, r2
 80131ba:	68fa      	ldr	r2, [r7, #12]
 80131bc:	429a      	cmp	r2, r3
 80131be:	d136      	bne.n	801322e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80131c0:	4a41      	ldr	r2, [pc, #260]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131c2:	2380      	movs	r3, #128	@ 0x80
 80131c4:	58d3      	ldr	r3, [r2, r3]
 80131c6:	693a      	ldr	r2, [r7, #16]
 80131c8:	43d2      	mvns	r2, r2
 80131ca:	493f      	ldr	r1, [pc, #252]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131cc:	4013      	ands	r3, r2
 80131ce:	2280      	movs	r2, #128	@ 0x80
 80131d0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80131d2:	4a3d      	ldr	r2, [pc, #244]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131d4:	2384      	movs	r3, #132	@ 0x84
 80131d6:	58d3      	ldr	r3, [r2, r3]
 80131d8:	693a      	ldr	r2, [r7, #16]
 80131da:	43d2      	mvns	r2, r2
 80131dc:	493a      	ldr	r1, [pc, #232]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131de:	4013      	ands	r3, r2
 80131e0:	2284      	movs	r2, #132	@ 0x84
 80131e2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80131e4:	4b38      	ldr	r3, [pc, #224]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131e6:	685a      	ldr	r2, [r3, #4]
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	43d9      	mvns	r1, r3
 80131ec:	4b36      	ldr	r3, [pc, #216]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131ee:	400a      	ands	r2, r1
 80131f0:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80131f2:	4b35      	ldr	r3, [pc, #212]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	43d9      	mvns	r1, r3
 80131fa:	4b33      	ldr	r3, [pc, #204]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 80131fc:	400a      	ands	r2, r1
 80131fe:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	2203      	movs	r2, #3
 8013204:	4013      	ands	r3, r2
 8013206:	00db      	lsls	r3, r3, #3
 8013208:	220f      	movs	r2, #15
 801320a:	409a      	lsls	r2, r3
 801320c:	0013      	movs	r3, r2
 801320e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8013210:	4a2d      	ldr	r2, [pc, #180]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	089b      	lsrs	r3, r3, #2
 8013216:	3318      	adds	r3, #24
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	589a      	ldr	r2, [r3, r2]
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	43d9      	mvns	r1, r3
 8013220:	4829      	ldr	r0, [pc, #164]	@ (80132c8 <HAL_GPIO_DeInit+0x1a8>)
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	089b      	lsrs	r3, r3, #2
 8013226:	400a      	ands	r2, r1
 8013228:	3318      	adds	r3, #24
 801322a:	009b      	lsls	r3, r3, #2
 801322c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	2103      	movs	r1, #3
 8013238:	4099      	lsls	r1, r3
 801323a:	000b      	movs	r3, r1
 801323c:	431a      	orrs	r2, r3
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	08da      	lsrs	r2, r3, #3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	3208      	adds	r2, #8
 801324a:	0092      	lsls	r2, r2, #2
 801324c:	58d3      	ldr	r3, [r2, r3]
 801324e:	697a      	ldr	r2, [r7, #20]
 8013250:	2107      	movs	r1, #7
 8013252:	400a      	ands	r2, r1
 8013254:	0092      	lsls	r2, r2, #2
 8013256:	210f      	movs	r1, #15
 8013258:	4091      	lsls	r1, r2
 801325a:	000a      	movs	r2, r1
 801325c:	43d1      	mvns	r1, r2
 801325e:	697a      	ldr	r2, [r7, #20]
 8013260:	08d2      	lsrs	r2, r2, #3
 8013262:	4019      	ands	r1, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	3208      	adds	r2, #8
 8013268:	0092      	lsls	r2, r2, #2
 801326a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	689b      	ldr	r3, [r3, #8]
 8013270:	697a      	ldr	r2, [r7, #20]
 8013272:	0052      	lsls	r2, r2, #1
 8013274:	2103      	movs	r1, #3
 8013276:	4091      	lsls	r1, r2
 8013278:	000a      	movs	r2, r1
 801327a:	43d2      	mvns	r2, r2
 801327c:	401a      	ands	r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	2101      	movs	r1, #1
 8013288:	697a      	ldr	r2, [r7, #20]
 801328a:	4091      	lsls	r1, r2
 801328c:	000a      	movs	r2, r1
 801328e:	43d2      	mvns	r2, r2
 8013290:	401a      	ands	r2, r3
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	0052      	lsls	r2, r2, #1
 801329e:	2103      	movs	r1, #3
 80132a0:	4091      	lsls	r1, r2
 80132a2:	000a      	movs	r2, r1
 80132a4:	43d2      	mvns	r2, r2
 80132a6:	401a      	ands	r2, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	60da      	str	r2, [r3, #12]
    }

    position++;
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	3301      	adds	r3, #1
 80132b0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80132b2:	683a      	ldr	r2, [r7, #0]
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	40da      	lsrs	r2, r3
 80132b8:	1e13      	subs	r3, r2, #0
 80132ba:	d000      	beq.n	80132be <HAL_GPIO_DeInit+0x19e>
 80132bc:	e738      	b.n	8013130 <HAL_GPIO_DeInit+0x10>
  }
}
 80132be:	46c0      	nop			@ (mov r8, r8)
 80132c0:	46c0      	nop			@ (mov r8, r8)
 80132c2:	46bd      	mov	sp, r7
 80132c4:	b006      	add	sp, #24
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	40021800 	.word	0x40021800
 80132cc:	50000400 	.word	0x50000400
 80132d0:	50000800 	.word	0x50000800
 80132d4:	50000c00 	.word	0x50000c00
 80132d8:	50001000 	.word	0x50001000
 80132dc:	50001400 	.word	0x50001400

080132e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	000a      	movs	r2, r1
 80132ea:	1cbb      	adds	r3, r7, #2
 80132ec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	691b      	ldr	r3, [r3, #16]
 80132f2:	1cba      	adds	r2, r7, #2
 80132f4:	8812      	ldrh	r2, [r2, #0]
 80132f6:	4013      	ands	r3, r2
 80132f8:	d004      	beq.n	8013304 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80132fa:	230f      	movs	r3, #15
 80132fc:	18fb      	adds	r3, r7, r3
 80132fe:	2201      	movs	r2, #1
 8013300:	701a      	strb	r2, [r3, #0]
 8013302:	e003      	b.n	801330c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013304:	230f      	movs	r3, #15
 8013306:	18fb      	adds	r3, r7, r3
 8013308:	2200      	movs	r2, #0
 801330a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 801330c:	230f      	movs	r3, #15
 801330e:	18fb      	adds	r3, r7, r3
 8013310:	781b      	ldrb	r3, [r3, #0]
}
 8013312:	0018      	movs	r0, r3
 8013314:	46bd      	mov	sp, r7
 8013316:	b004      	add	sp, #16
 8013318:	bd80      	pop	{r7, pc}

0801331a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801331a:	b580      	push	{r7, lr}
 801331c:	b082      	sub	sp, #8
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]
 8013322:	0008      	movs	r0, r1
 8013324:	0011      	movs	r1, r2
 8013326:	1cbb      	adds	r3, r7, #2
 8013328:	1c02      	adds	r2, r0, #0
 801332a:	801a      	strh	r2, [r3, #0]
 801332c:	1c7b      	adds	r3, r7, #1
 801332e:	1c0a      	adds	r2, r1, #0
 8013330:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013332:	1c7b      	adds	r3, r7, #1
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d004      	beq.n	8013344 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801333a:	1cbb      	adds	r3, r7, #2
 801333c:	881a      	ldrh	r2, [r3, #0]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013342:	e003      	b.n	801334c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8013344:	1cbb      	adds	r3, r7, #2
 8013346:	881a      	ldrh	r2, [r3, #0]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801334c:	46c0      	nop			@ (mov r8, r8)
 801334e:	46bd      	mov	sp, r7
 8013350:	b002      	add	sp, #8
 8013352:	bd80      	pop	{r7, pc}

08013354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	0002      	movs	r2, r0
 801335c:	1dbb      	adds	r3, r7, #6
 801335e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8013360:	4b10      	ldr	r3, [pc, #64]	@ (80133a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	1dba      	adds	r2, r7, #6
 8013366:	8812      	ldrh	r2, [r2, #0]
 8013368:	4013      	ands	r3, r2
 801336a:	d008      	beq.n	801337e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 801336c:	4b0d      	ldr	r3, [pc, #52]	@ (80133a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801336e:	1dba      	adds	r2, r7, #6
 8013370:	8812      	ldrh	r2, [r2, #0]
 8013372:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8013374:	1dbb      	adds	r3, r7, #6
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	0018      	movs	r0, r3
 801337a:	f000 f815 	bl	80133a8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 801337e:	4b09      	ldr	r3, [pc, #36]	@ (80133a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8013380:	691b      	ldr	r3, [r3, #16]
 8013382:	1dba      	adds	r2, r7, #6
 8013384:	8812      	ldrh	r2, [r2, #0]
 8013386:	4013      	ands	r3, r2
 8013388:	d008      	beq.n	801339c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801338a:	4b06      	ldr	r3, [pc, #24]	@ (80133a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801338c:	1dba      	adds	r2, r7, #6
 801338e:	8812      	ldrh	r2, [r2, #0]
 8013390:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8013392:	1dbb      	adds	r3, r7, #6
 8013394:	881b      	ldrh	r3, [r3, #0]
 8013396:	0018      	movs	r0, r3
 8013398:	f000 f810 	bl	80133bc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 801339c:	46c0      	nop			@ (mov r8, r8)
 801339e:	46bd      	mov	sp, r7
 80133a0:	b002      	add	sp, #8
 80133a2:	bd80      	pop	{r7, pc}
 80133a4:	40021800 	.word	0x40021800

080133a8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	0002      	movs	r2, r0
 80133b0:	1dbb      	adds	r3, r7, #6
 80133b2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80133b4:	46c0      	nop			@ (mov r8, r8)
 80133b6:	46bd      	mov	sp, r7
 80133b8:	b002      	add	sp, #8
 80133ba:	bd80      	pop	{r7, pc}

080133bc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	0002      	movs	r2, r0
 80133c4:	1dbb      	adds	r3, r7, #6
 80133c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80133c8:	46c0      	nop			@ (mov r8, r8)
 80133ca:	46bd      	mov	sp, r7
 80133cc:	b002      	add	sp, #8
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d101      	bne.n	80133e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80133de:	2301      	movs	r3, #1
 80133e0:	e08f      	b.n	8013502 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2241      	movs	r2, #65	@ 0x41
 80133e6:	5c9b      	ldrb	r3, [r3, r2]
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d107      	bne.n	80133fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2240      	movs	r2, #64	@ 0x40
 80133f2:	2100      	movs	r1, #0
 80133f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	0018      	movs	r0, r3
 80133fa:	f7f8 febf 	bl	800c17c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2241      	movs	r2, #65	@ 0x41
 8013402:	2124      	movs	r1, #36	@ 0x24
 8013404:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	681a      	ldr	r2, [r3, #0]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2101      	movs	r1, #1
 8013412:	438a      	bics	r2, r1
 8013414:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	685a      	ldr	r2, [r3, #4]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	493b      	ldr	r1, [pc, #236]	@ (801350c <HAL_I2C_Init+0x13c>)
 8013420:	400a      	ands	r2, r1
 8013422:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	689a      	ldr	r2, [r3, #8]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	4938      	ldr	r1, [pc, #224]	@ (8013510 <HAL_I2C_Init+0x140>)
 8013430:	400a      	ands	r2, r1
 8013432:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	2b01      	cmp	r3, #1
 801343a:	d108      	bne.n	801344e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	689a      	ldr	r2, [r3, #8]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	2180      	movs	r1, #128	@ 0x80
 8013446:	0209      	lsls	r1, r1, #8
 8013448:	430a      	orrs	r2, r1
 801344a:	609a      	str	r2, [r3, #8]
 801344c:	e007      	b.n	801345e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	689a      	ldr	r2, [r3, #8]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2184      	movs	r1, #132	@ 0x84
 8013458:	0209      	lsls	r1, r1, #8
 801345a:	430a      	orrs	r2, r1
 801345c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	2b02      	cmp	r3, #2
 8013464:	d109      	bne.n	801347a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	685a      	ldr	r2, [r3, #4]
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2180      	movs	r1, #128	@ 0x80
 8013472:	0109      	lsls	r1, r1, #4
 8013474:	430a      	orrs	r2, r1
 8013476:	605a      	str	r2, [r3, #4]
 8013478:	e007      	b.n	801348a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	685a      	ldr	r2, [r3, #4]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4923      	ldr	r1, [pc, #140]	@ (8013514 <HAL_I2C_Init+0x144>)
 8013486:	400a      	ands	r2, r1
 8013488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	685a      	ldr	r2, [r3, #4]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	4920      	ldr	r1, [pc, #128]	@ (8013518 <HAL_I2C_Init+0x148>)
 8013496:	430a      	orrs	r2, r1
 8013498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	68da      	ldr	r2, [r3, #12]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	491a      	ldr	r1, [pc, #104]	@ (8013510 <HAL_I2C_Init+0x140>)
 80134a6:	400a      	ands	r2, r1
 80134a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	691a      	ldr	r2, [r3, #16]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	695b      	ldr	r3, [r3, #20]
 80134b2:	431a      	orrs	r2, r3
 80134b4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	699b      	ldr	r3, [r3, #24]
 80134ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	430a      	orrs	r2, r1
 80134c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	69d9      	ldr	r1, [r3, #28]
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6a1a      	ldr	r2, [r3, #32]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	430a      	orrs	r2, r1
 80134d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	681a      	ldr	r2, [r3, #0]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2101      	movs	r1, #1
 80134e0:	430a      	orrs	r2, r1
 80134e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2200      	movs	r2, #0
 80134e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2241      	movs	r2, #65	@ 0x41
 80134ee:	2120      	movs	r1, #32
 80134f0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2200      	movs	r2, #0
 80134f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2242      	movs	r2, #66	@ 0x42
 80134fc:	2100      	movs	r1, #0
 80134fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013500:	2300      	movs	r3, #0
}
 8013502:	0018      	movs	r0, r3
 8013504:	46bd      	mov	sp, r7
 8013506:	b002      	add	sp, #8
 8013508:	bd80      	pop	{r7, pc}
 801350a:	46c0      	nop			@ (mov r8, r8)
 801350c:	f0ffffff 	.word	0xf0ffffff
 8013510:	ffff7fff 	.word	0xffff7fff
 8013514:	fffff7ff 	.word	0xfffff7ff
 8013518:	02008000 	.word	0x02008000

0801351c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d101      	bne.n	801352e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801352a:	2301      	movs	r3, #1
 801352c:	e022      	b.n	8013574 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2241      	movs	r2, #65	@ 0x41
 8013532:	2124      	movs	r1, #36	@ 0x24
 8013534:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2101      	movs	r1, #1
 8013542:	438a      	bics	r2, r1
 8013544:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	0018      	movs	r0, r3
 801354a:	f7f8 fedd 	bl	800c308 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2200      	movs	r2, #0
 8013552:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2241      	movs	r2, #65	@ 0x41
 8013558:	2100      	movs	r1, #0
 801355a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2200      	movs	r2, #0
 8013560:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2242      	movs	r2, #66	@ 0x42
 8013566:	2100      	movs	r1, #0
 8013568:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2240      	movs	r2, #64	@ 0x40
 801356e:	2100      	movs	r1, #0
 8013570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013572:	2300      	movs	r3, #0
}
 8013574:	0018      	movs	r0, r3
 8013576:	46bd      	mov	sp, r7
 8013578:	b002      	add	sp, #8
 801357a:	bd80      	pop	{r7, pc}

0801357c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 801357c:	b5b0      	push	{r4, r5, r7, lr}
 801357e:	b088      	sub	sp, #32
 8013580:	af02      	add	r7, sp, #8
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	0008      	movs	r0, r1
 8013586:	607a      	str	r2, [r7, #4]
 8013588:	0019      	movs	r1, r3
 801358a:	230a      	movs	r3, #10
 801358c:	18fb      	adds	r3, r7, r3
 801358e:	1c02      	adds	r2, r0, #0
 8013590:	801a      	strh	r2, [r3, #0]
 8013592:	2308      	movs	r3, #8
 8013594:	18fb      	adds	r3, r7, r3
 8013596:	1c0a      	adds	r2, r1, #0
 8013598:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2241      	movs	r2, #65	@ 0x41
 801359e:	5c9b      	ldrb	r3, [r3, r2]
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	2b20      	cmp	r3, #32
 80135a4:	d000      	beq.n	80135a8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80135a6:	e0dd      	b.n	8013764 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	699a      	ldr	r2, [r3, #24]
 80135ae:	2380      	movs	r3, #128	@ 0x80
 80135b0:	021b      	lsls	r3, r3, #8
 80135b2:	401a      	ands	r2, r3
 80135b4:	2380      	movs	r3, #128	@ 0x80
 80135b6:	021b      	lsls	r3, r3, #8
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d101      	bne.n	80135c0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80135bc:	2302      	movs	r3, #2
 80135be:	e0d2      	b.n	8013766 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2240      	movs	r2, #64	@ 0x40
 80135c4:	5c9b      	ldrb	r3, [r3, r2]
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d101      	bne.n	80135ce <HAL_I2C_Master_Transmit_DMA+0x52>
 80135ca:	2302      	movs	r3, #2
 80135cc:	e0cb      	b.n	8013766 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2240      	movs	r2, #64	@ 0x40
 80135d2:	2101      	movs	r1, #1
 80135d4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2241      	movs	r2, #65	@ 0x41
 80135da:	2121      	movs	r1, #33	@ 0x21
 80135dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2242      	movs	r2, #66	@ 0x42
 80135e2:	2110      	movs	r1, #16
 80135e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2200      	movs	r2, #0
 80135ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2208      	movs	r2, #8
 80135f6:	18ba      	adds	r2, r7, r2
 80135f8:	8812      	ldrh	r2, [r2, #0]
 80135fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	4a5c      	ldr	r2, [pc, #368]	@ (8013770 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8013600:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	4a5b      	ldr	r2, [pc, #364]	@ (8013774 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8013606:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801360c:	b29b      	uxth	r3, r3
 801360e:	2bff      	cmp	r3, #255	@ 0xff
 8013610:	d906      	bls.n	8013620 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	22ff      	movs	r2, #255	@ 0xff
 8013616:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013618:	2380      	movs	r3, #128	@ 0x80
 801361a:	045b      	lsls	r3, r3, #17
 801361c:	617b      	str	r3, [r7, #20]
 801361e:	e007      	b.n	8013630 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013624:	b29a      	uxth	r2, r3
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801362a:	2380      	movs	r3, #128	@ 0x80
 801362c:	049b      	lsls	r3, r3, #18
 801362e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013634:	2b00      	cmp	r3, #0
 8013636:	d100      	bne.n	801363a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8013638:	e078      	b.n	801372c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801363e:	2b00      	cmp	r3, #0
 8013640:	d023      	beq.n	801368a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013646:	4a4c      	ldr	r2, [pc, #304]	@ (8013778 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8013648:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801364e:	4a4b      	ldr	r2, [pc, #300]	@ (801377c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8013650:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013656:	2200      	movs	r2, #0
 8013658:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801365e:	2200      	movs	r2, #0
 8013660:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013666:	6879      	ldr	r1, [r7, #4]
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	3328      	adds	r3, #40	@ 0x28
 801366e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013674:	2513      	movs	r5, #19
 8013676:	197c      	adds	r4, r7, r5
 8013678:	f7fe ff76 	bl	8012568 <HAL_DMA_Start_IT>
 801367c:	0003      	movs	r3, r0
 801367e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013680:	197b      	adds	r3, r7, r5
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d13d      	bne.n	8013704 <HAL_I2C_Master_Transmit_DMA+0x188>
 8013688:	e013      	b.n	80136b2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2241      	movs	r2, #65	@ 0x41
 801368e:	2120      	movs	r1, #32
 8013690:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2242      	movs	r2, #66	@ 0x42
 8013696:	2100      	movs	r1, #0
 8013698:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801369e:	2280      	movs	r2, #128	@ 0x80
 80136a0:	431a      	orrs	r2, r3
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	2240      	movs	r2, #64	@ 0x40
 80136aa:	2100      	movs	r1, #0
 80136ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80136ae:	2301      	movs	r3, #1
 80136b0:	e059      	b.n	8013766 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	697c      	ldr	r4, [r7, #20]
 80136ba:	230a      	movs	r3, #10
 80136bc:	18fb      	adds	r3, r7, r3
 80136be:	8819      	ldrh	r1, [r3, #0]
 80136c0:	68f8      	ldr	r0, [r7, #12]
 80136c2:	4b2f      	ldr	r3, [pc, #188]	@ (8013780 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	0023      	movs	r3, r4
 80136c8:	f001 fe0c 	bl	80152e4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	b29a      	uxth	r2, r3
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	2240      	movs	r2, #64	@ 0x40
 80136e2:	2100      	movs	r1, #0
 80136e4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2110      	movs	r1, #16
 80136ea:	0018      	movs	r0, r3
 80136ec:	f001 fe34 	bl	8015358 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	2180      	movs	r1, #128	@ 0x80
 80136fc:	01c9      	lsls	r1, r1, #7
 80136fe:	430a      	orrs	r2, r1
 8013700:	601a      	str	r2, [r3, #0]
 8013702:	e02d      	b.n	8013760 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2241      	movs	r2, #65	@ 0x41
 8013708:	2120      	movs	r1, #32
 801370a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2242      	movs	r2, #66	@ 0x42
 8013710:	2100      	movs	r1, #0
 8013712:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013718:	2210      	movs	r2, #16
 801371a:	431a      	orrs	r2, r3
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2240      	movs	r2, #64	@ 0x40
 8013724:	2100      	movs	r1, #0
 8013726:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013728:	2301      	movs	r3, #1
 801372a:	e01c      	b.n	8013766 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	4a15      	ldr	r2, [pc, #84]	@ (8013784 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8013730:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013736:	b2da      	uxtb	r2, r3
 8013738:	2380      	movs	r3, #128	@ 0x80
 801373a:	049c      	lsls	r4, r3, #18
 801373c:	230a      	movs	r3, #10
 801373e:	18fb      	adds	r3, r7, r3
 8013740:	8819      	ldrh	r1, [r3, #0]
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	4b0e      	ldr	r3, [pc, #56]	@ (8013780 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013746:	9300      	str	r3, [sp, #0]
 8013748:	0023      	movs	r3, r4
 801374a:	f001 fdcb 	bl	80152e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2240      	movs	r2, #64	@ 0x40
 8013752:	2100      	movs	r1, #0
 8013754:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	2101      	movs	r1, #1
 801375a:	0018      	movs	r0, r3
 801375c:	f001 fdfc 	bl	8015358 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013760:	2300      	movs	r3, #0
 8013762:	e000      	b.n	8013766 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013764:	2302      	movs	r3, #2
  }
}
 8013766:	0018      	movs	r0, r3
 8013768:	46bd      	mov	sp, r7
 801376a:	b006      	add	sp, #24
 801376c:	bdb0      	pop	{r4, r5, r7, pc}
 801376e:	46c0      	nop			@ (mov r8, r8)
 8013770:	ffff0000 	.word	0xffff0000
 8013774:	08014001 	.word	0x08014001
 8013778:	08015135 	.word	0x08015135
 801377c:	08015275 	.word	0x08015275
 8013780:	80002000 	.word	0x80002000
 8013784:	08013b55 	.word	0x08013b55

08013788 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8013788:	b5b0      	push	{r4, r5, r7, lr}
 801378a:	b088      	sub	sp, #32
 801378c:	af02      	add	r7, sp, #8
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	0008      	movs	r0, r1
 8013792:	607a      	str	r2, [r7, #4]
 8013794:	0019      	movs	r1, r3
 8013796:	230a      	movs	r3, #10
 8013798:	18fb      	adds	r3, r7, r3
 801379a:	1c02      	adds	r2, r0, #0
 801379c:	801a      	strh	r2, [r3, #0]
 801379e:	2308      	movs	r3, #8
 80137a0:	18fb      	adds	r3, r7, r3
 80137a2:	1c0a      	adds	r2, r1, #0
 80137a4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2241      	movs	r2, #65	@ 0x41
 80137aa:	5c9b      	ldrb	r3, [r3, r2]
 80137ac:	b2db      	uxtb	r3, r3
 80137ae:	2b20      	cmp	r3, #32
 80137b0:	d000      	beq.n	80137b4 <HAL_I2C_Master_Receive_DMA+0x2c>
 80137b2:	e0dd      	b.n	8013970 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	699a      	ldr	r2, [r3, #24]
 80137ba:	2380      	movs	r3, #128	@ 0x80
 80137bc:	021b      	lsls	r3, r3, #8
 80137be:	401a      	ands	r2, r3
 80137c0:	2380      	movs	r3, #128	@ 0x80
 80137c2:	021b      	lsls	r3, r3, #8
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d101      	bne.n	80137cc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80137c8:	2302      	movs	r3, #2
 80137ca:	e0d2      	b.n	8013972 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	2240      	movs	r2, #64	@ 0x40
 80137d0:	5c9b      	ldrb	r3, [r3, r2]
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d101      	bne.n	80137da <HAL_I2C_Master_Receive_DMA+0x52>
 80137d6:	2302      	movs	r3, #2
 80137d8:	e0cb      	b.n	8013972 <HAL_I2C_Master_Receive_DMA+0x1ea>
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2240      	movs	r2, #64	@ 0x40
 80137de:	2101      	movs	r1, #1
 80137e0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2241      	movs	r2, #65	@ 0x41
 80137e6:	2122      	movs	r1, #34	@ 0x22
 80137e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2242      	movs	r2, #66	@ 0x42
 80137ee:	2110      	movs	r1, #16
 80137f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2200      	movs	r2, #0
 80137f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	687a      	ldr	r2, [r7, #4]
 80137fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2208      	movs	r2, #8
 8013802:	18ba      	adds	r2, r7, r2
 8013804:	8812      	ldrh	r2, [r2, #0]
 8013806:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	4a5c      	ldr	r2, [pc, #368]	@ (801397c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 801380c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	4a5b      	ldr	r2, [pc, #364]	@ (8013980 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8013812:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013818:	b29b      	uxth	r3, r3
 801381a:	2bff      	cmp	r3, #255	@ 0xff
 801381c:	d906      	bls.n	801382c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	22ff      	movs	r2, #255	@ 0xff
 8013822:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013824:	2380      	movs	r3, #128	@ 0x80
 8013826:	045b      	lsls	r3, r3, #17
 8013828:	617b      	str	r3, [r7, #20]
 801382a:	e007      	b.n	801383c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013830:	b29a      	uxth	r2, r3
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013836:	2380      	movs	r3, #128	@ 0x80
 8013838:	049b      	lsls	r3, r3, #18
 801383a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013840:	2b00      	cmp	r3, #0
 8013842:	d100      	bne.n	8013846 <HAL_I2C_Master_Receive_DMA+0xbe>
 8013844:	e078      	b.n	8013938 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801384a:	2b00      	cmp	r3, #0
 801384c:	d023      	beq.n	8013896 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013852:	4a4c      	ldr	r2, [pc, #304]	@ (8013984 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8013854:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801385a:	4a4b      	ldr	r2, [pc, #300]	@ (8013988 <HAL_I2C_Master_Receive_DMA+0x200>)
 801385c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013862:	2200      	movs	r2, #0
 8013864:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801386a:	2200      	movs	r2, #0
 801386c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	3324      	adds	r3, #36	@ 0x24
 8013878:	0019      	movs	r1, r3
 801387a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013880:	2513      	movs	r5, #19
 8013882:	197c      	adds	r4, r7, r5
 8013884:	f7fe fe70 	bl	8012568 <HAL_DMA_Start_IT>
 8013888:	0003      	movs	r3, r0
 801388a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801388c:	197b      	adds	r3, r7, r5
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d13d      	bne.n	8013910 <HAL_I2C_Master_Receive_DMA+0x188>
 8013894:	e013      	b.n	80138be <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2241      	movs	r2, #65	@ 0x41
 801389a:	2120      	movs	r1, #32
 801389c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	2242      	movs	r2, #66	@ 0x42
 80138a2:	2100      	movs	r1, #0
 80138a4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138aa:	2280      	movs	r2, #128	@ 0x80
 80138ac:	431a      	orrs	r2, r3
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2240      	movs	r2, #64	@ 0x40
 80138b6:	2100      	movs	r1, #0
 80138b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80138ba:	2301      	movs	r3, #1
 80138bc:	e059      	b.n	8013972 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138c2:	b2da      	uxtb	r2, r3
 80138c4:	697c      	ldr	r4, [r7, #20]
 80138c6:	230a      	movs	r3, #10
 80138c8:	18fb      	adds	r3, r7, r3
 80138ca:	8819      	ldrh	r1, [r3, #0]
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	4b2f      	ldr	r3, [pc, #188]	@ (801398c <HAL_I2C_Master_Receive_DMA+0x204>)
 80138d0:	9300      	str	r3, [sp, #0]
 80138d2:	0023      	movs	r3, r4
 80138d4:	f001 fd06 	bl	80152e4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138dc:	b29a      	uxth	r2, r3
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138e2:	1ad3      	subs	r3, r2, r3
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2240      	movs	r2, #64	@ 0x40
 80138ee:	2100      	movs	r1, #0
 80138f0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2110      	movs	r1, #16
 80138f6:	0018      	movs	r0, r3
 80138f8:	f001 fd2e 	bl	8015358 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2180      	movs	r1, #128	@ 0x80
 8013908:	0209      	lsls	r1, r1, #8
 801390a:	430a      	orrs	r2, r1
 801390c:	601a      	str	r2, [r3, #0]
 801390e:	e02d      	b.n	801396c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2241      	movs	r2, #65	@ 0x41
 8013914:	2120      	movs	r1, #32
 8013916:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2242      	movs	r2, #66	@ 0x42
 801391c:	2100      	movs	r1, #0
 801391e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013924:	2210      	movs	r2, #16
 8013926:	431a      	orrs	r2, r3
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2240      	movs	r2, #64	@ 0x40
 8013930:	2100      	movs	r1, #0
 8013932:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013934:	2301      	movs	r3, #1
 8013936:	e01c      	b.n	8013972 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	4a15      	ldr	r2, [pc, #84]	@ (8013990 <HAL_I2C_Master_Receive_DMA+0x208>)
 801393c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013942:	b2da      	uxtb	r2, r3
 8013944:	2380      	movs	r3, #128	@ 0x80
 8013946:	049c      	lsls	r4, r3, #18
 8013948:	230a      	movs	r3, #10
 801394a:	18fb      	adds	r3, r7, r3
 801394c:	8819      	ldrh	r1, [r3, #0]
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	4b0e      	ldr	r3, [pc, #56]	@ (801398c <HAL_I2C_Master_Receive_DMA+0x204>)
 8013952:	9300      	str	r3, [sp, #0]
 8013954:	0023      	movs	r3, r4
 8013956:	f001 fcc5 	bl	80152e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	2240      	movs	r2, #64	@ 0x40
 801395e:	2100      	movs	r1, #0
 8013960:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2102      	movs	r1, #2
 8013966:	0018      	movs	r0, r3
 8013968:	f001 fcf6 	bl	8015358 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 801396c:	2300      	movs	r3, #0
 801396e:	e000      	b.n	8013972 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013970:	2302      	movs	r3, #2
  }
}
 8013972:	0018      	movs	r0, r3
 8013974:	46bd      	mov	sp, r7
 8013976:	b006      	add	sp, #24
 8013978:	bdb0      	pop	{r4, r5, r7, pc}
 801397a:	46c0      	nop			@ (mov r8, r8)
 801397c:	ffff0000 	.word	0xffff0000
 8013980:	08014001 	.word	0x08014001
 8013984:	080151d5 	.word	0x080151d5
 8013988:	08015275 	.word	0x08015275
 801398c:	80002400 	.word	0x80002400
 8013990:	08013b55 	.word	0x08013b55

08013994 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	699b      	ldr	r3, [r3, #24]
 80139a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d005      	beq.n	80139c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139b8:	68ba      	ldr	r2, [r7, #8]
 80139ba:	68f9      	ldr	r1, [r7, #12]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	4798      	blx	r3
  }
}
 80139c0:	46c0      	nop			@ (mov r8, r8)
 80139c2:	46bd      	mov	sp, r7
 80139c4:	b004      	add	sp, #16
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	699b      	ldr	r3, [r3, #24]
 80139d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	0a1b      	lsrs	r3, r3, #8
 80139e4:	001a      	movs	r2, r3
 80139e6:	2301      	movs	r3, #1
 80139e8:	4013      	ands	r3, r2
 80139ea:	d010      	beq.n	8013a0e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	09db      	lsrs	r3, r3, #7
 80139f0:	001a      	movs	r2, r3
 80139f2:	2301      	movs	r3, #1
 80139f4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80139f6:	d00a      	beq.n	8013a0e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139fc:	2201      	movs	r2, #1
 80139fe:	431a      	orrs	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	2280      	movs	r2, #128	@ 0x80
 8013a0a:	0052      	lsls	r2, r2, #1
 8013a0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	0a9b      	lsrs	r3, r3, #10
 8013a12:	001a      	movs	r2, r3
 8013a14:	2301      	movs	r3, #1
 8013a16:	4013      	ands	r3, r2
 8013a18:	d010      	beq.n	8013a3c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	09db      	lsrs	r3, r3, #7
 8013a1e:	001a      	movs	r2, r3
 8013a20:	2301      	movs	r3, #1
 8013a22:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013a24:	d00a      	beq.n	8013a3c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a2a:	2208      	movs	r2, #8
 8013a2c:	431a      	orrs	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2280      	movs	r2, #128	@ 0x80
 8013a38:	00d2      	lsls	r2, r2, #3
 8013a3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	0a5b      	lsrs	r3, r3, #9
 8013a40:	001a      	movs	r2, r3
 8013a42:	2301      	movs	r3, #1
 8013a44:	4013      	ands	r3, r2
 8013a46:	d010      	beq.n	8013a6a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	09db      	lsrs	r3, r3, #7
 8013a4c:	001a      	movs	r2, r3
 8013a4e:	2301      	movs	r3, #1
 8013a50:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013a52:	d00a      	beq.n	8013a6a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a58:	2202      	movs	r2, #2
 8013a5a:	431a      	orrs	r2, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2280      	movs	r2, #128	@ 0x80
 8013a66:	0092      	lsls	r2, r2, #2
 8013a68:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a6e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	220b      	movs	r2, #11
 8013a74:	4013      	ands	r3, r2
 8013a76:	d005      	beq.n	8013a84 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8013a78:	68fa      	ldr	r2, [r7, #12]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	0011      	movs	r1, r2
 8013a7e:	0018      	movs	r0, r3
 8013a80:	f001 fa0a 	bl	8014e98 <I2C_ITError>
  }
}
 8013a84:	46c0      	nop			@ (mov r8, r8)
 8013a86:	46bd      	mov	sp, r7
 8013a88:	b006      	add	sp, #24
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8013a94:	46c0      	nop			@ (mov r8, r8)
 8013a96:	46bd      	mov	sp, r7
 8013a98:	b002      	add	sp, #8
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b082      	sub	sp, #8
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8013aa4:	46c0      	nop			@ (mov r8, r8)
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	b002      	add	sp, #8
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8013ab4:	46c0      	nop			@ (mov r8, r8)
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	b002      	add	sp, #8
 8013aba:	bd80      	pop	{r7, pc}

08013abc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8013ac4:	46c0      	nop			@ (mov r8, r8)
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	b002      	add	sp, #8
 8013aca:	bd80      	pop	{r7, pc}

08013acc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	0008      	movs	r0, r1
 8013ad6:	0011      	movs	r1, r2
 8013ad8:	1cfb      	adds	r3, r7, #3
 8013ada:	1c02      	adds	r2, r0, #0
 8013adc:	701a      	strb	r2, [r3, #0]
 8013ade:	003b      	movs	r3, r7
 8013ae0:	1c0a      	adds	r2, r1, #0
 8013ae2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8013ae4:	46c0      	nop			@ (mov r8, r8)
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	b002      	add	sp, #8
 8013aea:	bd80      	pop	{r7, pc}

08013aec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8013af4:	46c0      	nop			@ (mov r8, r8)
 8013af6:	46bd      	mov	sp, r7
 8013af8:	b002      	add	sp, #8
 8013afa:	bd80      	pop	{r7, pc}

08013afc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8013b04:	46c0      	nop			@ (mov r8, r8)
 8013b06:	46bd      	mov	sp, r7
 8013b08:	b002      	add	sp, #8
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8013b14:	46c0      	nop			@ (mov r8, r8)
 8013b16:	46bd      	mov	sp, r7
 8013b18:	b002      	add	sp, #8
 8013b1a:	bd80      	pop	{r7, pc}

08013b1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8013b24:	46c0      	nop			@ (mov r8, r8)
 8013b26:	46bd      	mov	sp, r7
 8013b28:	b002      	add	sp, #8
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8013b34:	46c0      	nop			@ (mov r8, r8)
 8013b36:	46bd      	mov	sp, r7
 8013b38:	b002      	add	sp, #8
 8013b3a:	bd80      	pop	{r7, pc}

08013b3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b082      	sub	sp, #8
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2241      	movs	r2, #65	@ 0x41
 8013b48:	5c9b      	ldrb	r3, [r3, r2]
 8013b4a:	b2db      	uxtb	r3, r3
}
 8013b4c:	0018      	movs	r0, r3
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	b002      	add	sp, #8
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8013b54:	b590      	push	{r4, r7, lr}
 8013b56:	b089      	sub	sp, #36	@ 0x24
 8013b58:	af02      	add	r7, sp, #8
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2240      	movs	r2, #64	@ 0x40
 8013b68:	5c9b      	ldrb	r3, [r3, r2]
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d101      	bne.n	8013b72 <I2C_Master_ISR_IT+0x1e>
 8013b6e:	2302      	movs	r3, #2
 8013b70:	e12b      	b.n	8013dca <I2C_Master_ISR_IT+0x276>
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2240      	movs	r2, #64	@ 0x40
 8013b76:	2101      	movs	r1, #1
 8013b78:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	091b      	lsrs	r3, r3, #4
 8013b7e:	001a      	movs	r2, r3
 8013b80:	2301      	movs	r3, #1
 8013b82:	4013      	ands	r3, r2
 8013b84:	d014      	beq.n	8013bb0 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	091b      	lsrs	r3, r3, #4
 8013b8a:	001a      	movs	r2, r3
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013b90:	d00e      	beq.n	8013bb0 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2210      	movs	r2, #16
 8013b98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b9e:	2204      	movs	r2, #4
 8013ba0:	431a      	orrs	r2, r3
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	0018      	movs	r0, r3
 8013baa:	f001 faa0 	bl	80150ee <I2C_Flush_TXDR>
 8013bae:	e0f5      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	089b      	lsrs	r3, r3, #2
 8013bb4:	001a      	movs	r2, r3
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	4013      	ands	r3, r2
 8013bba:	d023      	beq.n	8013c04 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	089b      	lsrs	r3, r3, #2
 8013bc0:	001a      	movs	r2, r3
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013bc6:	d01d      	beq.n	8013c04 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	2204      	movs	r2, #4
 8013bcc:	4393      	bics	r3, r2
 8013bce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bda:	b2d2      	uxtb	r2, r2
 8013bdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013be2:	1c5a      	adds	r2, r3, #1
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013bec:	3b01      	subs	r3, #1
 8013bee:	b29a      	uxth	r2, r3
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013c02:	e0cb      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	085b      	lsrs	r3, r3, #1
 8013c08:	001a      	movs	r2, r3
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	4013      	ands	r3, r2
 8013c0e:	d01e      	beq.n	8013c4e <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	085b      	lsrs	r3, r3, #1
 8013c14:	001a      	movs	r2, r3
 8013c16:	2301      	movs	r3, #1
 8013c18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013c1a:	d018      	beq.n	8013c4e <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c20:	781a      	ldrb	r2, [r3, #0]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c2c:	1c5a      	adds	r2, r3, #1
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c36:	3b01      	subs	r3, #1
 8013c38:	b29a      	uxth	r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	3b01      	subs	r3, #1
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013c4c:	e0a6      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	09db      	lsrs	r3, r3, #7
 8013c52:	001a      	movs	r2, r3
 8013c54:	2301      	movs	r3, #1
 8013c56:	4013      	ands	r3, r2
 8013c58:	d100      	bne.n	8013c5c <I2C_Master_ISR_IT+0x108>
 8013c5a:	e06b      	b.n	8013d34 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	099b      	lsrs	r3, r3, #6
 8013c60:	001a      	movs	r2, r3
 8013c62:	2301      	movs	r3, #1
 8013c64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8013c66:	d065      	beq.n	8013d34 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d04a      	beq.n	8013d08 <I2C_Master_ISR_IT+0x1b4>
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d146      	bne.n	8013d08 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	b29a      	uxth	r2, r3
 8013c82:	2112      	movs	r1, #18
 8013c84:	187b      	adds	r3, r7, r1
 8013c86:	0592      	lsls	r2, r2, #22
 8013c88:	0d92      	lsrs	r2, r2, #22
 8013c8a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	2bff      	cmp	r3, #255	@ 0xff
 8013c94:	d910      	bls.n	8013cb8 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	22ff      	movs	r2, #255	@ 0xff
 8013c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ca0:	b2da      	uxtb	r2, r3
 8013ca2:	2380      	movs	r3, #128	@ 0x80
 8013ca4:	045c      	lsls	r4, r3, #17
 8013ca6:	187b      	adds	r3, r7, r1
 8013ca8:	8819      	ldrh	r1, [r3, #0]
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	2300      	movs	r3, #0
 8013cae:	9300      	str	r3, [sp, #0]
 8013cb0:	0023      	movs	r3, r4
 8013cb2:	f001 fb17 	bl	80152e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013cb6:	e03c      	b.n	8013d32 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cc6:	4a43      	ldr	r2, [pc, #268]	@ (8013dd4 <I2C_Master_ISR_IT+0x280>)
 8013cc8:	4293      	cmp	r3, r2
 8013cca:	d00e      	beq.n	8013cea <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cd0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013cd6:	2312      	movs	r3, #18
 8013cd8:	18fb      	adds	r3, r7, r3
 8013cda:	8819      	ldrh	r1, [r3, #0]
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	2300      	movs	r3, #0
 8013ce0:	9300      	str	r3, [sp, #0]
 8013ce2:	0023      	movs	r3, r4
 8013ce4:	f001 fafe 	bl	80152e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013ce8:	e023      	b.n	8013d32 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cee:	b2da      	uxtb	r2, r3
 8013cf0:	2380      	movs	r3, #128	@ 0x80
 8013cf2:	049c      	lsls	r4, r3, #18
 8013cf4:	2312      	movs	r3, #18
 8013cf6:	18fb      	adds	r3, r7, r3
 8013cf8:	8819      	ldrh	r1, [r3, #0]
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	0023      	movs	r3, r4
 8013d02:	f001 faef 	bl	80152e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013d06:	e014      	b.n	8013d32 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	685a      	ldr	r2, [r3, #4]
 8013d0e:	2380      	movs	r3, #128	@ 0x80
 8013d10:	049b      	lsls	r3, r3, #18
 8013d12:	401a      	ands	r2, r3
 8013d14:	2380      	movs	r3, #128	@ 0x80
 8013d16:	049b      	lsls	r3, r3, #18
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d004      	beq.n	8013d26 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	0018      	movs	r0, r3
 8013d20:	f000 fd56 	bl	80147d0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013d24:	e03a      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2140      	movs	r1, #64	@ 0x40
 8013d2a:	0018      	movs	r0, r3
 8013d2c:	f001 f8b4 	bl	8014e98 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013d30:	e034      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
 8013d32:	e033      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	099b      	lsrs	r3, r3, #6
 8013d38:	001a      	movs	r2, r3
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	4013      	ands	r3, r2
 8013d3e:	d02d      	beq.n	8013d9c <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	099b      	lsrs	r3, r3, #6
 8013d44:	001a      	movs	r2, r3
 8013d46:	2301      	movs	r3, #1
 8013d48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8013d4a:	d027      	beq.n	8013d9c <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d11d      	bne.n	8013d92 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	685a      	ldr	r2, [r3, #4]
 8013d5c:	2380      	movs	r3, #128	@ 0x80
 8013d5e:	049b      	lsls	r3, r3, #18
 8013d60:	401a      	ands	r2, r3
 8013d62:	2380      	movs	r3, #128	@ 0x80
 8013d64:	049b      	lsls	r3, r3, #18
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d018      	beq.n	8013d9c <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d6e:	4a19      	ldr	r2, [pc, #100]	@ (8013dd4 <I2C_Master_ISR_IT+0x280>)
 8013d70:	4293      	cmp	r3, r2
 8013d72:	d109      	bne.n	8013d88 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	685a      	ldr	r2, [r3, #4]
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2180      	movs	r1, #128	@ 0x80
 8013d80:	01c9      	lsls	r1, r1, #7
 8013d82:	430a      	orrs	r2, r1
 8013d84:	605a      	str	r2, [r3, #4]
 8013d86:	e009      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	0018      	movs	r0, r3
 8013d8c:	f000 fd20 	bl	80147d0 <I2C_ITMasterSeqCplt>
 8013d90:	e004      	b.n	8013d9c <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2140      	movs	r1, #64	@ 0x40
 8013d96:	0018      	movs	r0, r3
 8013d98:	f001 f87e 	bl	8014e98 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	095b      	lsrs	r3, r3, #5
 8013da0:	001a      	movs	r2, r3
 8013da2:	2301      	movs	r3, #1
 8013da4:	4013      	ands	r3, r2
 8013da6:	d00b      	beq.n	8013dc0 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	095b      	lsrs	r3, r3, #5
 8013dac:	001a      	movs	r2, r3
 8013dae:	2301      	movs	r3, #1
 8013db0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013db2:	d005      	beq.n	8013dc0 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8013db4:	697a      	ldr	r2, [r7, #20]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	0011      	movs	r1, r2
 8013dba:	0018      	movs	r0, r3
 8013dbc:	f000 fdb0 	bl	8014920 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2240      	movs	r2, #64	@ 0x40
 8013dc4:	2100      	movs	r1, #0
 8013dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013dc8:	2300      	movs	r3, #0
}
 8013dca:	0018      	movs	r0, r3
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	b007      	add	sp, #28
 8013dd0:	bd90      	pop	{r4, r7, pc}
 8013dd2:	46c0      	nop			@ (mov r8, r8)
 8013dd4:	ffff0000 	.word	0xffff0000

08013dd8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b086      	sub	sp, #24
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	60b9      	str	r1, [r7, #8]
 8013de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013de8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2240      	movs	r2, #64	@ 0x40
 8013df2:	5c9b      	ldrb	r3, [r3, r2]
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d101      	bne.n	8013dfc <I2C_Slave_ISR_IT+0x24>
 8013df8:	2302      	movs	r3, #2
 8013dfa:	e0fb      	b.n	8013ff4 <I2C_Slave_ISR_IT+0x21c>
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2240      	movs	r2, #64	@ 0x40
 8013e00:	2101      	movs	r1, #1
 8013e02:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	095b      	lsrs	r3, r3, #5
 8013e08:	001a      	movs	r2, r3
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	4013      	ands	r3, r2
 8013e0e:	d00c      	beq.n	8013e2a <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	095b      	lsrs	r3, r3, #5
 8013e14:	001a      	movs	r2, r3
 8013e16:	2301      	movs	r3, #1
 8013e18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013e1a:	d006      	beq.n	8013e2a <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8013e1c:	693a      	ldr	r2, [r7, #16]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	0011      	movs	r1, r2
 8013e22:	0018      	movs	r0, r3
 8013e24:	f000 fe4e 	bl	8014ac4 <I2C_ITSlaveCplt>
 8013e28:	e0df      	b.n	8013fea <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	091b      	lsrs	r3, r3, #4
 8013e2e:	001a      	movs	r2, r3
 8013e30:	2301      	movs	r3, #1
 8013e32:	4013      	ands	r3, r2
 8013e34:	d054      	beq.n	8013ee0 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	091b      	lsrs	r3, r3, #4
 8013e3a:	001a      	movs	r2, r3
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013e40:	d04e      	beq.n	8013ee0 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d12d      	bne.n	8013ea8 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	2241      	movs	r2, #65	@ 0x41
 8013e50:	5c9b      	ldrb	r3, [r3, r2]
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	2b28      	cmp	r3, #40	@ 0x28
 8013e56:	d10b      	bne.n	8013e70 <I2C_Slave_ISR_IT+0x98>
 8013e58:	697a      	ldr	r2, [r7, #20]
 8013e5a:	2380      	movs	r3, #128	@ 0x80
 8013e5c:	049b      	lsls	r3, r3, #18
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d106      	bne.n	8013e70 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8013e62:	693a      	ldr	r2, [r7, #16]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	0011      	movs	r1, r2
 8013e68:	0018      	movs	r0, r3
 8013e6a:	f000 ffbb 	bl	8014de4 <I2C_ITListenCplt>
 8013e6e:	e036      	b.n	8013ede <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2241      	movs	r2, #65	@ 0x41
 8013e74:	5c9b      	ldrb	r3, [r3, r2]
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	2b29      	cmp	r3, #41	@ 0x29
 8013e7a:	d110      	bne.n	8013e9e <I2C_Slave_ISR_IT+0xc6>
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8013ffc <I2C_Slave_ISR_IT+0x224>)
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d00c      	beq.n	8013e9e <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	2210      	movs	r2, #16
 8013e8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	0018      	movs	r0, r3
 8013e90:	f001 f92d 	bl	80150ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	0018      	movs	r0, r3
 8013e98:	f000 fcdc 	bl	8014854 <I2C_ITSlaveSeqCplt>
 8013e9c:	e01f      	b.n	8013ede <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2210      	movs	r2, #16
 8013ea4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8013ea6:	e09d      	b.n	8013fe4 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2210      	movs	r2, #16
 8013eae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013eb4:	2204      	movs	r2, #4
 8013eb6:	431a      	orrs	r2, r3
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d005      	beq.n	8013ece <I2C_Slave_ISR_IT+0xf6>
 8013ec2:	697a      	ldr	r2, [r7, #20]
 8013ec4:	2380      	movs	r3, #128	@ 0x80
 8013ec6:	045b      	lsls	r3, r3, #17
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d000      	beq.n	8013ece <I2C_Slave_ISR_IT+0xf6>
 8013ecc:	e08a      	b.n	8013fe4 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	0011      	movs	r1, r2
 8013ed6:	0018      	movs	r0, r3
 8013ed8:	f000 ffde 	bl	8014e98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013edc:	e082      	b.n	8013fe4 <I2C_Slave_ISR_IT+0x20c>
 8013ede:	e081      	b.n	8013fe4 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	089b      	lsrs	r3, r3, #2
 8013ee4:	001a      	movs	r2, r3
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	4013      	ands	r3, r2
 8013eea:	d031      	beq.n	8013f50 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	089b      	lsrs	r3, r3, #2
 8013ef0:	001a      	movs	r2, r3
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013ef6:	d02b      	beq.n	8013f50 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d018      	beq.n	8013f34 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f0c:	b2d2      	uxtb	r2, r2
 8013f0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f14:	1c5a      	adds	r2, r3, #1
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f1e:	3b01      	subs	r3, #1
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	3b01      	subs	r3, #1
 8013f2e:	b29a      	uxth	r2, r3
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d154      	bne.n	8013fe8 <I2C_Slave_ISR_IT+0x210>
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	4a2e      	ldr	r2, [pc, #184]	@ (8013ffc <I2C_Slave_ISR_IT+0x224>)
 8013f42:	4293      	cmp	r3, r2
 8013f44:	d050      	beq.n	8013fe8 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	0018      	movs	r0, r3
 8013f4a:	f000 fc83 	bl	8014854 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8013f4e:	e04b      	b.n	8013fe8 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	08db      	lsrs	r3, r3, #3
 8013f54:	001a      	movs	r2, r3
 8013f56:	2301      	movs	r3, #1
 8013f58:	4013      	ands	r3, r2
 8013f5a:	d00c      	beq.n	8013f76 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	08db      	lsrs	r3, r3, #3
 8013f60:	001a      	movs	r2, r3
 8013f62:	2301      	movs	r3, #1
 8013f64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013f66:	d006      	beq.n	8013f76 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8013f68:	693a      	ldr	r2, [r7, #16]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	0011      	movs	r1, r2
 8013f6e:	0018      	movs	r0, r3
 8013f70:	f000 fb8a 	bl	8014688 <I2C_ITAddrCplt>
 8013f74:	e039      	b.n	8013fea <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	085b      	lsrs	r3, r3, #1
 8013f7a:	001a      	movs	r2, r3
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	4013      	ands	r3, r2
 8013f80:	d033      	beq.n	8013fea <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	085b      	lsrs	r3, r3, #1
 8013f86:	001a      	movs	r2, r3
 8013f88:	2301      	movs	r3, #1
 8013f8a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013f8c:	d02d      	beq.n	8013fea <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d018      	beq.n	8013fca <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f9c:	781a      	ldrb	r2, [r3, #0]
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fa8:	1c5a      	adds	r2, r3, #1
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	b29a      	uxth	r2, r3
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013fc0:	3b01      	subs	r3, #1
 8013fc2:	b29a      	uxth	r2, r3
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013fc8:	e00f      	b.n	8013fea <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8013fca:	697a      	ldr	r2, [r7, #20]
 8013fcc:	2380      	movs	r3, #128	@ 0x80
 8013fce:	045b      	lsls	r3, r3, #17
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d002      	beq.n	8013fda <I2C_Slave_ISR_IT+0x202>
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d107      	bne.n	8013fea <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	0018      	movs	r0, r3
 8013fde:	f000 fc39 	bl	8014854 <I2C_ITSlaveSeqCplt>
 8013fe2:	e002      	b.n	8013fea <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8013fe4:	46c0      	nop			@ (mov r8, r8)
 8013fe6:	e000      	b.n	8013fea <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8013fe8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2240      	movs	r2, #64	@ 0x40
 8013fee:	2100      	movs	r1, #0
 8013ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	0018      	movs	r0, r3
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	b006      	add	sp, #24
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	ffff0000 	.word	0xffff0000

08014000 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8014000:	b590      	push	{r4, r7, lr}
 8014002:	b089      	sub	sp, #36	@ 0x24
 8014004:	af02      	add	r7, sp, #8
 8014006:	60f8      	str	r0, [r7, #12]
 8014008:	60b9      	str	r1, [r7, #8]
 801400a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2240      	movs	r2, #64	@ 0x40
 8014010:	5c9b      	ldrb	r3, [r3, r2]
 8014012:	2b01      	cmp	r3, #1
 8014014:	d101      	bne.n	801401a <I2C_Master_ISR_DMA+0x1a>
 8014016:	2302      	movs	r3, #2
 8014018:	e0f7      	b.n	801420a <I2C_Master_ISR_DMA+0x20a>
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2240      	movs	r2, #64	@ 0x40
 801401e:	2101      	movs	r1, #1
 8014020:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	091b      	lsrs	r3, r3, #4
 8014026:	001a      	movs	r2, r3
 8014028:	2301      	movs	r3, #1
 801402a:	4013      	ands	r3, r2
 801402c:	d019      	beq.n	8014062 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	091b      	lsrs	r3, r3, #4
 8014032:	001a      	movs	r2, r3
 8014034:	2301      	movs	r3, #1
 8014036:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014038:	d013      	beq.n	8014062 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2210      	movs	r2, #16
 8014040:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014046:	2204      	movs	r2, #4
 8014048:	431a      	orrs	r2, r3
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2120      	movs	r1, #32
 8014052:	0018      	movs	r0, r3
 8014054:	f001 f980 	bl	8015358 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	0018      	movs	r0, r3
 801405c:	f001 f847 	bl	80150ee <I2C_Flush_TXDR>
 8014060:	e0ce      	b.n	8014200 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	09db      	lsrs	r3, r3, #7
 8014066:	001a      	movs	r2, r3
 8014068:	2301      	movs	r3, #1
 801406a:	4013      	ands	r3, r2
 801406c:	d100      	bne.n	8014070 <I2C_Master_ISR_DMA+0x70>
 801406e:	e07e      	b.n	801416e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	099b      	lsrs	r3, r3, #6
 8014074:	001a      	movs	r2, r3
 8014076:	2301      	movs	r3, #1
 8014078:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801407a:	d100      	bne.n	801407e <I2C_Master_ISR_DMA+0x7e>
 801407c:	e077      	b.n	801416e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2140      	movs	r1, #64	@ 0x40
 801408a:	438a      	bics	r2, r1
 801408c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014092:	b29b      	uxth	r3, r3
 8014094:	2b00      	cmp	r3, #0
 8014096:	d055      	beq.n	8014144 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	685b      	ldr	r3, [r3, #4]
 801409e:	b29a      	uxth	r2, r3
 80140a0:	2312      	movs	r3, #18
 80140a2:	18fb      	adds	r3, r7, r3
 80140a4:	0592      	lsls	r2, r2, #22
 80140a6:	0d92      	lsrs	r2, r2, #22
 80140a8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	2bff      	cmp	r3, #255	@ 0xff
 80140b2:	d906      	bls.n	80140c2 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	22ff      	movs	r2, #255	@ 0xff
 80140b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80140ba:	2380      	movs	r3, #128	@ 0x80
 80140bc:	045b      	lsls	r3, r3, #17
 80140be:	617b      	str	r3, [r7, #20]
 80140c0:	e010      	b.n	80140e4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140c6:	b29a      	uxth	r2, r3
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140d0:	4a50      	ldr	r2, [pc, #320]	@ (8014214 <I2C_Master_ISR_DMA+0x214>)
 80140d2:	4293      	cmp	r3, r2
 80140d4:	d003      	beq.n	80140de <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140da:	617b      	str	r3, [r7, #20]
 80140dc:	e002      	b.n	80140e4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80140de:	2380      	movs	r3, #128	@ 0x80
 80140e0:	049b      	lsls	r3, r3, #18
 80140e2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80140e8:	b2da      	uxtb	r2, r3
 80140ea:	697c      	ldr	r4, [r7, #20]
 80140ec:	2312      	movs	r3, #18
 80140ee:	18fb      	adds	r3, r7, r3
 80140f0:	8819      	ldrh	r1, [r3, #0]
 80140f2:	68f8      	ldr	r0, [r7, #12]
 80140f4:	2300      	movs	r3, #0
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	0023      	movs	r3, r4
 80140fa:	f001 f8f3 	bl	80152e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014102:	b29a      	uxth	r2, r3
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014108:	1ad3      	subs	r3, r2, r3
 801410a:	b29a      	uxth	r2, r3
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	2241      	movs	r2, #65	@ 0x41
 8014114:	5c9b      	ldrb	r3, [r3, r2]
 8014116:	b2db      	uxtb	r3, r3
 8014118:	2b22      	cmp	r3, #34	@ 0x22
 801411a:	d109      	bne.n	8014130 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2180      	movs	r1, #128	@ 0x80
 8014128:	0209      	lsls	r1, r1, #8
 801412a:	430a      	orrs	r2, r1
 801412c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801412e:	e067      	b.n	8014200 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2180      	movs	r1, #128	@ 0x80
 801413c:	01c9      	lsls	r1, r1, #7
 801413e:	430a      	orrs	r2, r1
 8014140:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014142:	e05d      	b.n	8014200 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	685a      	ldr	r2, [r3, #4]
 801414a:	2380      	movs	r3, #128	@ 0x80
 801414c:	049b      	lsls	r3, r3, #18
 801414e:	401a      	ands	r2, r3
 8014150:	2380      	movs	r3, #128	@ 0x80
 8014152:	049b      	lsls	r3, r3, #18
 8014154:	429a      	cmp	r2, r3
 8014156:	d004      	beq.n	8014162 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	0018      	movs	r0, r3
 801415c:	f000 fb38 	bl	80147d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8014160:	e04e      	b.n	8014200 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2140      	movs	r1, #64	@ 0x40
 8014166:	0018      	movs	r0, r3
 8014168:	f000 fe96 	bl	8014e98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801416c:	e048      	b.n	8014200 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	099b      	lsrs	r3, r3, #6
 8014172:	001a      	movs	r2, r3
 8014174:	2301      	movs	r3, #1
 8014176:	4013      	ands	r3, r2
 8014178:	d02e      	beq.n	80141d8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	099b      	lsrs	r3, r3, #6
 801417e:	001a      	movs	r2, r3
 8014180:	2301      	movs	r3, #1
 8014182:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014184:	d028      	beq.n	80141d8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801418a:	b29b      	uxth	r3, r3
 801418c:	2b00      	cmp	r3, #0
 801418e:	d11d      	bne.n	80141cc <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	685a      	ldr	r2, [r3, #4]
 8014196:	2380      	movs	r3, #128	@ 0x80
 8014198:	049b      	lsls	r3, r3, #18
 801419a:	401a      	ands	r2, r3
 801419c:	2380      	movs	r3, #128	@ 0x80
 801419e:	049b      	lsls	r3, r3, #18
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d02c      	beq.n	80141fe <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141a8:	4a1a      	ldr	r2, [pc, #104]	@ (8014214 <I2C_Master_ISR_DMA+0x214>)
 80141aa:	4293      	cmp	r3, r2
 80141ac:	d109      	bne.n	80141c2 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	685a      	ldr	r2, [r3, #4]
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	2180      	movs	r1, #128	@ 0x80
 80141ba:	01c9      	lsls	r1, r1, #7
 80141bc:	430a      	orrs	r2, r1
 80141be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80141c0:	e01d      	b.n	80141fe <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	0018      	movs	r0, r3
 80141c6:	f000 fb03 	bl	80147d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80141ca:	e018      	b.n	80141fe <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2140      	movs	r1, #64	@ 0x40
 80141d0:	0018      	movs	r0, r3
 80141d2:	f000 fe61 	bl	8014e98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80141d6:	e012      	b.n	80141fe <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	095b      	lsrs	r3, r3, #5
 80141dc:	001a      	movs	r2, r3
 80141de:	2301      	movs	r3, #1
 80141e0:	4013      	ands	r3, r2
 80141e2:	d00d      	beq.n	8014200 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	095b      	lsrs	r3, r3, #5
 80141e8:	001a      	movs	r2, r3
 80141ea:	2301      	movs	r3, #1
 80141ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80141ee:	d007      	beq.n	8014200 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80141f0:	68ba      	ldr	r2, [r7, #8]
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	0011      	movs	r1, r2
 80141f6:	0018      	movs	r0, r3
 80141f8:	f000 fb92 	bl	8014920 <I2C_ITMasterCplt>
 80141fc:	e000      	b.n	8014200 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80141fe:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	2240      	movs	r2, #64	@ 0x40
 8014204:	2100      	movs	r1, #0
 8014206:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014208:	2300      	movs	r3, #0
}
 801420a:	0018      	movs	r0, r3
 801420c:	46bd      	mov	sp, r7
 801420e:	b007      	add	sp, #28
 8014210:	bd90      	pop	{r4, r7, pc}
 8014212:	46c0      	nop			@ (mov r8, r8)
 8014214:	ffff0000 	.word	0xffff0000

08014218 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8014218:	b590      	push	{r4, r7, lr}
 801421a:	b089      	sub	sp, #36	@ 0x24
 801421c:	af02      	add	r7, sp, #8
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	60b9      	str	r1, [r7, #8]
 8014222:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8014224:	4b9a      	ldr	r3, [pc, #616]	@ (8014490 <I2C_Mem_ISR_DMA+0x278>)
 8014226:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2240      	movs	r2, #64	@ 0x40
 801422c:	5c9b      	ldrb	r3, [r3, r2]
 801422e:	2b01      	cmp	r3, #1
 8014230:	d101      	bne.n	8014236 <I2C_Mem_ISR_DMA+0x1e>
 8014232:	2302      	movs	r3, #2
 8014234:	e127      	b.n	8014486 <I2C_Mem_ISR_DMA+0x26e>
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2240      	movs	r2, #64	@ 0x40
 801423a:	2101      	movs	r1, #1
 801423c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	091b      	lsrs	r3, r3, #4
 8014242:	001a      	movs	r2, r3
 8014244:	2301      	movs	r3, #1
 8014246:	4013      	ands	r3, r2
 8014248:	d019      	beq.n	801427e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	091b      	lsrs	r3, r3, #4
 801424e:	001a      	movs	r2, r3
 8014250:	2301      	movs	r3, #1
 8014252:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014254:	d013      	beq.n	801427e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	2210      	movs	r2, #16
 801425c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014262:	2204      	movs	r2, #4
 8014264:	431a      	orrs	r2, r3
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	2120      	movs	r1, #32
 801426e:	0018      	movs	r0, r3
 8014270:	f001 f872 	bl	8015358 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	0018      	movs	r0, r3
 8014278:	f000 ff39 	bl	80150ee <I2C_Flush_TXDR>
 801427c:	e0fe      	b.n	801447c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	085b      	lsrs	r3, r3, #1
 8014282:	001a      	movs	r2, r3
 8014284:	2301      	movs	r3, #1
 8014286:	4013      	ands	r3, r2
 8014288:	d00f      	beq.n	80142aa <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	085b      	lsrs	r3, r3, #1
 801428e:	001a      	movs	r2, r3
 8014290:	2301      	movs	r3, #1
 8014292:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014294:	d009      	beq.n	80142aa <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	68fa      	ldr	r2, [r7, #12]
 801429c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801429e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2201      	movs	r2, #1
 80142a4:	4252      	negs	r2, r2
 80142a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80142a8:	e0e8      	b.n	801447c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	09db      	lsrs	r3, r3, #7
 80142ae:	001a      	movs	r2, r3
 80142b0:	2301      	movs	r3, #1
 80142b2:	4013      	ands	r3, r2
 80142b4:	d065      	beq.n	8014382 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	099b      	lsrs	r3, r3, #6
 80142ba:	001a      	movs	r2, r3
 80142bc:	2301      	movs	r3, #1
 80142be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80142c0:	d05f      	beq.n	8014382 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	2101      	movs	r1, #1
 80142c6:	0018      	movs	r0, r3
 80142c8:	f001 f8d0 	bl	801546c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2110      	movs	r1, #16
 80142d0:	0018      	movs	r0, r3
 80142d2:	f001 f841 	bl	8015358 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80142da:	b29b      	uxth	r3, r3
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d04a      	beq.n	8014376 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	2bff      	cmp	r3, #255	@ 0xff
 80142e8:	d910      	bls.n	801430c <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	22ff      	movs	r2, #255	@ 0xff
 80142ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80142f4:	b299      	uxth	r1, r3
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	2380      	movs	r3, #128	@ 0x80
 80142fe:	045b      	lsls	r3, r3, #17
 8014300:	68f8      	ldr	r0, [r7, #12]
 8014302:	2400      	movs	r4, #0
 8014304:	9400      	str	r4, [sp, #0]
 8014306:	f000 ffed 	bl	80152e4 <I2C_TransferConfig>
 801430a:	e011      	b.n	8014330 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014310:	b29a      	uxth	r2, r3
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801431a:	b299      	uxth	r1, r3
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014320:	b2da      	uxtb	r2, r3
 8014322:	2380      	movs	r3, #128	@ 0x80
 8014324:	049b      	lsls	r3, r3, #18
 8014326:	68f8      	ldr	r0, [r7, #12]
 8014328:	2400      	movs	r4, #0
 801432a:	9400      	str	r4, [sp, #0]
 801432c:	f000 ffda 	bl	80152e4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014334:	b29a      	uxth	r2, r3
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	b29a      	uxth	r2, r3
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2241      	movs	r2, #65	@ 0x41
 8014346:	5c9b      	ldrb	r3, [r3, r2]
 8014348:	b2db      	uxtb	r3, r3
 801434a:	2b22      	cmp	r3, #34	@ 0x22
 801434c:	d109      	bne.n	8014362 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	681a      	ldr	r2, [r3, #0]
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	2180      	movs	r1, #128	@ 0x80
 801435a:	0209      	lsls	r1, r1, #8
 801435c:	430a      	orrs	r2, r1
 801435e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014360:	e08c      	b.n	801447c <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	681a      	ldr	r2, [r3, #0]
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2180      	movs	r1, #128	@ 0x80
 801436e:	01c9      	lsls	r1, r1, #7
 8014370:	430a      	orrs	r2, r1
 8014372:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014374:	e082      	b.n	801447c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	2140      	movs	r1, #64	@ 0x40
 801437a:	0018      	movs	r0, r3
 801437c:	f000 fd8c 	bl	8014e98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014380:	e07c      	b.n	801447c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	099b      	lsrs	r3, r3, #6
 8014386:	001a      	movs	r2, r3
 8014388:	2301      	movs	r3, #1
 801438a:	4013      	ands	r3, r2
 801438c:	d064      	beq.n	8014458 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	099b      	lsrs	r3, r3, #6
 8014392:	001a      	movs	r2, r3
 8014394:	2301      	movs	r3, #1
 8014396:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014398:	d05e      	beq.n	8014458 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	2101      	movs	r1, #1
 801439e:	0018      	movs	r0, r3
 80143a0:	f001 f864 	bl	801546c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2110      	movs	r1, #16
 80143a8:	0018      	movs	r0, r3
 80143aa:	f000 ffd5 	bl	8015358 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2241      	movs	r2, #65	@ 0x41
 80143b2:	5c9b      	ldrb	r3, [r3, r2]
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	2b22      	cmp	r3, #34	@ 0x22
 80143b8:	d101      	bne.n	80143be <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
 80143ba:	4b36      	ldr	r3, [pc, #216]	@ (8014494 <I2C_Mem_ISR_DMA+0x27c>)
 80143bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	2bff      	cmp	r3, #255	@ 0xff
 80143c6:	d911      	bls.n	80143ec <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	22ff      	movs	r2, #255	@ 0xff
 80143cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80143d2:	b299      	uxth	r1, r3
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80143d8:	b2da      	uxtb	r2, r3
 80143da:	2380      	movs	r3, #128	@ 0x80
 80143dc:	045c      	lsls	r4, r3, #17
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	0023      	movs	r3, r4
 80143e6:	f000 ff7d 	bl	80152e4 <I2C_TransferConfig>
 80143ea:	e012      	b.n	8014412 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80143f0:	b29a      	uxth	r2, r3
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80143fa:	b299      	uxth	r1, r3
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014400:	b2da      	uxtb	r2, r3
 8014402:	2380      	movs	r3, #128	@ 0x80
 8014404:	049c      	lsls	r4, r3, #18
 8014406:	68f8      	ldr	r0, [r7, #12]
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	0023      	movs	r3, r4
 801440e:	f000 ff69 	bl	80152e4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014416:	b29a      	uxth	r2, r3
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801441c:	1ad3      	subs	r3, r2, r3
 801441e:	b29a      	uxth	r2, r3
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2241      	movs	r2, #65	@ 0x41
 8014428:	5c9b      	ldrb	r3, [r3, r2]
 801442a:	b2db      	uxtb	r3, r3
 801442c:	2b22      	cmp	r3, #34	@ 0x22
 801442e:	d109      	bne.n	8014444 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	681a      	ldr	r2, [r3, #0]
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2180      	movs	r1, #128	@ 0x80
 801443c:	0209      	lsls	r1, r1, #8
 801443e:	430a      	orrs	r2, r1
 8014440:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014442:	e01b      	b.n	801447c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	2180      	movs	r1, #128	@ 0x80
 8014450:	01c9      	lsls	r1, r1, #7
 8014452:	430a      	orrs	r2, r1
 8014454:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014456:	e011      	b.n	801447c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	095b      	lsrs	r3, r3, #5
 801445c:	001a      	movs	r2, r3
 801445e:	2301      	movs	r3, #1
 8014460:	4013      	ands	r3, r2
 8014462:	d00b      	beq.n	801447c <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	095b      	lsrs	r3, r3, #5
 8014468:	001a      	movs	r2, r3
 801446a:	2301      	movs	r3, #1
 801446c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801446e:	d005      	beq.n	801447c <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014470:	68ba      	ldr	r2, [r7, #8]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	0011      	movs	r1, r2
 8014476:	0018      	movs	r0, r3
 8014478:	f000 fa52 	bl	8014920 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	2240      	movs	r2, #64	@ 0x40
 8014480:	2100      	movs	r1, #0
 8014482:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014484:	2300      	movs	r3, #0
}
 8014486:	0018      	movs	r0, r3
 8014488:	46bd      	mov	sp, r7
 801448a:	b007      	add	sp, #28
 801448c:	bd90      	pop	{r4, r7, pc}
 801448e:	46c0      	nop			@ (mov r8, r8)
 8014490:	80002000 	.word	0x80002000
 8014494:	80002400 	.word	0x80002400

08014498 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af00      	add	r7, sp, #0
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80144aa:	2300      	movs	r3, #0
 80144ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	2240      	movs	r2, #64	@ 0x40
 80144b2:	5c9b      	ldrb	r3, [r3, r2]
 80144b4:	2b01      	cmp	r3, #1
 80144b6:	d101      	bne.n	80144bc <I2C_Slave_ISR_DMA+0x24>
 80144b8:	2302      	movs	r3, #2
 80144ba:	e0de      	b.n	801467a <I2C_Slave_ISR_DMA+0x1e2>
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2240      	movs	r2, #64	@ 0x40
 80144c0:	2101      	movs	r1, #1
 80144c2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	095b      	lsrs	r3, r3, #5
 80144c8:	001a      	movs	r2, r3
 80144ca:	2301      	movs	r3, #1
 80144cc:	4013      	ands	r3, r2
 80144ce:	d00c      	beq.n	80144ea <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	095b      	lsrs	r3, r3, #5
 80144d4:	001a      	movs	r2, r3
 80144d6:	2301      	movs	r3, #1
 80144d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80144da:	d006      	beq.n	80144ea <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80144dc:	68ba      	ldr	r2, [r7, #8]
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	0011      	movs	r1, r2
 80144e2:	0018      	movs	r0, r3
 80144e4:	f000 faee 	bl	8014ac4 <I2C_ITSlaveCplt>
 80144e8:	e0c2      	b.n	8014670 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	091b      	lsrs	r3, r3, #4
 80144ee:	001a      	movs	r2, r3
 80144f0:	2301      	movs	r3, #1
 80144f2:	4013      	ands	r3, r2
 80144f4:	d100      	bne.n	80144f8 <I2C_Slave_ISR_DMA+0x60>
 80144f6:	e0a9      	b.n	801464c <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	091b      	lsrs	r3, r3, #4
 80144fc:	001a      	movs	r2, r3
 80144fe:	2301      	movs	r3, #1
 8014500:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014502:	d100      	bne.n	8014506 <I2C_Slave_ISR_DMA+0x6e>
 8014504:	e0a2      	b.n	801464c <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	0b9b      	lsrs	r3, r3, #14
 801450a:	001a      	movs	r2, r3
 801450c:	2301      	movs	r3, #1
 801450e:	4013      	ands	r3, r2
 8014510:	d106      	bne.n	8014520 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	0bdb      	lsrs	r3, r3, #15
 8014516:	001a      	movs	r2, r3
 8014518:	2301      	movs	r3, #1
 801451a:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801451c:	d100      	bne.n	8014520 <I2C_Slave_ISR_DMA+0x88>
 801451e:	e08e      	b.n	801463e <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014524:	2b00      	cmp	r3, #0
 8014526:	d00d      	beq.n	8014544 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	0bdb      	lsrs	r3, r3, #15
 801452c:	001a      	movs	r2, r3
 801452e:	2301      	movs	r3, #1
 8014530:	4013      	ands	r3, r2
 8014532:	d007      	beq.n	8014544 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d101      	bne.n	8014544 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
 8014540:	2301      	movs	r3, #1
 8014542:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00d      	beq.n	8014568 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	0b9b      	lsrs	r3, r3, #14
 8014550:	001a      	movs	r2, r3
 8014552:	2301      	movs	r3, #1
 8014554:	4013      	ands	r3, r2
 8014556:	d007      	beq.n	8014568 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	685b      	ldr	r3, [r3, #4]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d101      	bne.n	8014568 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
 8014564:	2301      	movs	r3, #1
 8014566:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	2b01      	cmp	r3, #1
 801456c:	d12d      	bne.n	80145ca <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2241      	movs	r2, #65	@ 0x41
 8014572:	5c9b      	ldrb	r3, [r3, r2]
 8014574:	b2db      	uxtb	r3, r3
 8014576:	2b28      	cmp	r3, #40	@ 0x28
 8014578:	d10b      	bne.n	8014592 <I2C_Slave_ISR_DMA+0xfa>
 801457a:	69ba      	ldr	r2, [r7, #24]
 801457c:	2380      	movs	r3, #128	@ 0x80
 801457e:	049b      	lsls	r3, r3, #18
 8014580:	429a      	cmp	r2, r3
 8014582:	d106      	bne.n	8014592 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8014584:	68ba      	ldr	r2, [r7, #8]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	0011      	movs	r1, r2
 801458a:	0018      	movs	r0, r3
 801458c:	f000 fc2a 	bl	8014de4 <I2C_ITListenCplt>
 8014590:	e054      	b.n	801463c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2241      	movs	r2, #65	@ 0x41
 8014596:	5c9b      	ldrb	r3, [r3, r2]
 8014598:	b2db      	uxtb	r3, r3
 801459a:	2b29      	cmp	r3, #41	@ 0x29
 801459c:	d110      	bne.n	80145c0 <I2C_Slave_ISR_DMA+0x128>
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	4a38      	ldr	r2, [pc, #224]	@ (8014684 <I2C_Slave_ISR_DMA+0x1ec>)
 80145a2:	4293      	cmp	r3, r2
 80145a4:	d00c      	beq.n	80145c0 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2210      	movs	r2, #16
 80145ac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	0018      	movs	r0, r3
 80145b2:	f000 fd9c 	bl	80150ee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	0018      	movs	r0, r3
 80145ba:	f000 f94b 	bl	8014854 <I2C_ITSlaveSeqCplt>
 80145be:	e03d      	b.n	801463c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2210      	movs	r2, #16
 80145c6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80145c8:	e03e      	b.n	8014648 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	2210      	movs	r2, #16
 80145d0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145d6:	2204      	movs	r2, #4
 80145d8:	431a      	orrs	r2, r3
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80145de:	2317      	movs	r3, #23
 80145e0:	18fb      	adds	r3, r7, r3
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	2141      	movs	r1, #65	@ 0x41
 80145e6:	5c52      	ldrb	r2, [r2, r1]
 80145e8:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d004      	beq.n	80145fa <I2C_Slave_ISR_DMA+0x162>
 80145f0:	69ba      	ldr	r2, [r7, #24]
 80145f2:	2380      	movs	r3, #128	@ 0x80
 80145f4:	045b      	lsls	r3, r3, #17
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d126      	bne.n	8014648 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80145fa:	2217      	movs	r2, #23
 80145fc:	18bb      	adds	r3, r7, r2
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	2b21      	cmp	r3, #33	@ 0x21
 8014602:	d003      	beq.n	801460c <I2C_Slave_ISR_DMA+0x174>
 8014604:	18bb      	adds	r3, r7, r2
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	2b29      	cmp	r3, #41	@ 0x29
 801460a:	d103      	bne.n	8014614 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2221      	movs	r2, #33	@ 0x21
 8014610:	631a      	str	r2, [r3, #48]	@ 0x30
 8014612:	e00b      	b.n	801462c <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014614:	2217      	movs	r2, #23
 8014616:	18bb      	adds	r3, r7, r2
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	2b22      	cmp	r3, #34	@ 0x22
 801461c:	d003      	beq.n	8014626 <I2C_Slave_ISR_DMA+0x18e>
 801461e:	18bb      	adds	r3, r7, r2
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	2b2a      	cmp	r3, #42	@ 0x2a
 8014624:	d102      	bne.n	801462c <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	2222      	movs	r2, #34	@ 0x22
 801462a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	0011      	movs	r1, r2
 8014634:	0018      	movs	r0, r3
 8014636:	f000 fc2f 	bl	8014e98 <I2C_ITError>
      if (treatdmanack == 1U)
 801463a:	e005      	b.n	8014648 <I2C_Slave_ISR_DMA+0x1b0>
 801463c:	e004      	b.n	8014648 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2210      	movs	r2, #16
 8014644:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014646:	e013      	b.n	8014670 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
 8014648:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801464a:	e011      	b.n	8014670 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	08db      	lsrs	r3, r3, #3
 8014650:	001a      	movs	r2, r3
 8014652:	2301      	movs	r3, #1
 8014654:	4013      	ands	r3, r2
 8014656:	d00b      	beq.n	8014670 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	08db      	lsrs	r3, r3, #3
 801465c:	001a      	movs	r2, r3
 801465e:	2301      	movs	r3, #1
 8014660:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014662:	d005      	beq.n	8014670 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8014664:	68ba      	ldr	r2, [r7, #8]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	0011      	movs	r1, r2
 801466a:	0018      	movs	r0, r3
 801466c:	f000 f80c 	bl	8014688 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2240      	movs	r2, #64	@ 0x40
 8014674:	2100      	movs	r1, #0
 8014676:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014678:	2300      	movs	r3, #0
}
 801467a:	0018      	movs	r0, r3
 801467c:	46bd      	mov	sp, r7
 801467e:	b008      	add	sp, #32
 8014680:	bd80      	pop	{r7, pc}
 8014682:	46c0      	nop			@ (mov r8, r8)
 8014684:	ffff0000 	.word	0xffff0000

08014688 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014688:	b5b0      	push	{r4, r5, r7, lr}
 801468a:	b084      	sub	sp, #16
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	2241      	movs	r2, #65	@ 0x41
 8014696:	5c9b      	ldrb	r3, [r3, r2]
 8014698:	b2db      	uxtb	r3, r3
 801469a:	001a      	movs	r2, r3
 801469c:	2328      	movs	r3, #40	@ 0x28
 801469e:	4013      	ands	r3, r2
 80146a0:	2b28      	cmp	r3, #40	@ 0x28
 80146a2:	d000      	beq.n	80146a6 <I2C_ITAddrCplt+0x1e>
 80146a4:	e088      	b.n	80147b8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	699b      	ldr	r3, [r3, #24]
 80146ac:	0c1b      	lsrs	r3, r3, #16
 80146ae:	b2da      	uxtb	r2, r3
 80146b0:	250f      	movs	r5, #15
 80146b2:	197b      	adds	r3, r7, r5
 80146b4:	2101      	movs	r1, #1
 80146b6:	400a      	ands	r2, r1
 80146b8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	699b      	ldr	r3, [r3, #24]
 80146c0:	0c1b      	lsrs	r3, r3, #16
 80146c2:	b29a      	uxth	r2, r3
 80146c4:	200c      	movs	r0, #12
 80146c6:	183b      	adds	r3, r7, r0
 80146c8:	21fe      	movs	r1, #254	@ 0xfe
 80146ca:	400a      	ands	r2, r1
 80146cc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	689b      	ldr	r3, [r3, #8]
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	240a      	movs	r4, #10
 80146d8:	193b      	adds	r3, r7, r4
 80146da:	0592      	lsls	r2, r2, #22
 80146dc:	0d92      	lsrs	r2, r2, #22
 80146de:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	68db      	ldr	r3, [r3, #12]
 80146e6:	b29a      	uxth	r2, r3
 80146e8:	2308      	movs	r3, #8
 80146ea:	18fb      	adds	r3, r7, r3
 80146ec:	21fe      	movs	r1, #254	@ 0xfe
 80146ee:	400a      	ands	r2, r1
 80146f0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	2b02      	cmp	r3, #2
 80146f8:	d148      	bne.n	801478c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80146fa:	0021      	movs	r1, r4
 80146fc:	187b      	adds	r3, r7, r1
 80146fe:	881b      	ldrh	r3, [r3, #0]
 8014700:	09db      	lsrs	r3, r3, #7
 8014702:	b29a      	uxth	r2, r3
 8014704:	183b      	adds	r3, r7, r0
 8014706:	881b      	ldrh	r3, [r3, #0]
 8014708:	4053      	eors	r3, r2
 801470a:	b29b      	uxth	r3, r3
 801470c:	001a      	movs	r2, r3
 801470e:	2306      	movs	r3, #6
 8014710:	4013      	ands	r3, r2
 8014712:	d120      	bne.n	8014756 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8014714:	183b      	adds	r3, r7, r0
 8014716:	187a      	adds	r2, r7, r1
 8014718:	8812      	ldrh	r2, [r2, #0]
 801471a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014720:	1c5a      	adds	r2, r3, #1
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801472a:	2b02      	cmp	r3, #2
 801472c:	d14c      	bne.n	80147c8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2200      	movs	r2, #0
 8014732:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2208      	movs	r2, #8
 801473a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2240      	movs	r2, #64	@ 0x40
 8014740:	2100      	movs	r1, #0
 8014742:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014744:	183b      	adds	r3, r7, r0
 8014746:	881a      	ldrh	r2, [r3, #0]
 8014748:	197b      	adds	r3, r7, r5
 801474a:	7819      	ldrb	r1, [r3, #0]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	0018      	movs	r0, r3
 8014750:	f7ff f9bc 	bl	8013acc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8014754:	e038      	b.n	80147c8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8014756:	240c      	movs	r4, #12
 8014758:	193b      	adds	r3, r7, r4
 801475a:	2208      	movs	r2, #8
 801475c:	18ba      	adds	r2, r7, r2
 801475e:	8812      	ldrh	r2, [r2, #0]
 8014760:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8014762:	2380      	movs	r3, #128	@ 0x80
 8014764:	021a      	lsls	r2, r3, #8
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	0011      	movs	r1, r2
 801476a:	0018      	movs	r0, r3
 801476c:	f000 fe7e 	bl	801546c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2240      	movs	r2, #64	@ 0x40
 8014774:	2100      	movs	r1, #0
 8014776:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014778:	193b      	adds	r3, r7, r4
 801477a:	881a      	ldrh	r2, [r3, #0]
 801477c:	230f      	movs	r3, #15
 801477e:	18fb      	adds	r3, r7, r3
 8014780:	7819      	ldrb	r1, [r3, #0]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	0018      	movs	r0, r3
 8014786:	f7ff f9a1 	bl	8013acc <HAL_I2C_AddrCallback>
}
 801478a:	e01d      	b.n	80147c8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801478c:	2380      	movs	r3, #128	@ 0x80
 801478e:	021a      	lsls	r2, r3, #8
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	0011      	movs	r1, r2
 8014794:	0018      	movs	r0, r3
 8014796:	f000 fe69 	bl	801546c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2240      	movs	r2, #64	@ 0x40
 801479e:	2100      	movs	r1, #0
 80147a0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80147a2:	230c      	movs	r3, #12
 80147a4:	18fb      	adds	r3, r7, r3
 80147a6:	881a      	ldrh	r2, [r3, #0]
 80147a8:	230f      	movs	r3, #15
 80147aa:	18fb      	adds	r3, r7, r3
 80147ac:	7819      	ldrb	r1, [r3, #0]
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	0018      	movs	r0, r3
 80147b2:	f7ff f98b 	bl	8013acc <HAL_I2C_AddrCallback>
}
 80147b6:	e007      	b.n	80147c8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2208      	movs	r2, #8
 80147be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2240      	movs	r2, #64	@ 0x40
 80147c4:	2100      	movs	r1, #0
 80147c6:	5499      	strb	r1, [r3, r2]
}
 80147c8:	46c0      	nop			@ (mov r8, r8)
 80147ca:	46bd      	mov	sp, r7
 80147cc:	b004      	add	sp, #16
 80147ce:	bdb0      	pop	{r4, r5, r7, pc}

080147d0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2242      	movs	r2, #66	@ 0x42
 80147dc:	2100      	movs	r1, #0
 80147de:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2241      	movs	r2, #65	@ 0x41
 80147e4:	5c9b      	ldrb	r3, [r3, r2]
 80147e6:	b2db      	uxtb	r3, r3
 80147e8:	2b21      	cmp	r3, #33	@ 0x21
 80147ea:	d117      	bne.n	801481c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2241      	movs	r2, #65	@ 0x41
 80147f0:	2120      	movs	r1, #32
 80147f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2211      	movs	r2, #17
 80147f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2200      	movs	r2, #0
 80147fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2101      	movs	r1, #1
 8014804:	0018      	movs	r0, r3
 8014806:	f000 fe31 	bl	801546c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2240      	movs	r2, #64	@ 0x40
 801480e:	2100      	movs	r1, #0
 8014810:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	0018      	movs	r0, r3
 8014816:	f7ff f939 	bl	8013a8c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801481a:	e016      	b.n	801484a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2241      	movs	r2, #65	@ 0x41
 8014820:	2120      	movs	r1, #32
 8014822:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2212      	movs	r2, #18
 8014828:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	2200      	movs	r2, #0
 801482e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2102      	movs	r1, #2
 8014834:	0018      	movs	r0, r3
 8014836:	f000 fe19 	bl	801546c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2240      	movs	r2, #64	@ 0x40
 801483e:	2100      	movs	r1, #0
 8014840:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	0018      	movs	r0, r3
 8014846:	f7ff f929 	bl	8013a9c <HAL_I2C_MasterRxCpltCallback>
}
 801484a:	46c0      	nop			@ (mov r8, r8)
 801484c:	46bd      	mov	sp, r7
 801484e:	b002      	add	sp, #8
 8014850:	bd80      	pop	{r7, pc}
	...

08014854 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2242      	movs	r2, #66	@ 0x42
 8014868:	2100      	movs	r1, #0
 801486a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	0b9b      	lsrs	r3, r3, #14
 8014870:	001a      	movs	r2, r3
 8014872:	2301      	movs	r3, #1
 8014874:	4013      	ands	r3, r2
 8014876:	d008      	beq.n	801488a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4925      	ldr	r1, [pc, #148]	@ (8014918 <I2C_ITSlaveSeqCplt+0xc4>)
 8014884:	400a      	ands	r2, r1
 8014886:	601a      	str	r2, [r3, #0]
 8014888:	e00d      	b.n	80148a6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	0bdb      	lsrs	r3, r3, #15
 801488e:	001a      	movs	r2, r3
 8014890:	2301      	movs	r3, #1
 8014892:	4013      	ands	r3, r2
 8014894:	d007      	beq.n	80148a6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	491e      	ldr	r1, [pc, #120]	@ (801491c <I2C_ITSlaveSeqCplt+0xc8>)
 80148a2:	400a      	ands	r2, r1
 80148a4:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	2241      	movs	r2, #65	@ 0x41
 80148aa:	5c9b      	ldrb	r3, [r3, r2]
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	2b29      	cmp	r3, #41	@ 0x29
 80148b0:	d114      	bne.n	80148dc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2241      	movs	r2, #65	@ 0x41
 80148b6:	2128      	movs	r1, #40	@ 0x28
 80148b8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2221      	movs	r2, #33	@ 0x21
 80148be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2101      	movs	r1, #1
 80148c4:	0018      	movs	r0, r3
 80148c6:	f000 fdd1 	bl	801546c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2240      	movs	r2, #64	@ 0x40
 80148ce:	2100      	movs	r1, #0
 80148d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	0018      	movs	r0, r3
 80148d6:	f7ff f8e9 	bl	8013aac <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80148da:	e019      	b.n	8014910 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2241      	movs	r2, #65	@ 0x41
 80148e0:	5c9b      	ldrb	r3, [r3, r2]
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80148e6:	d113      	bne.n	8014910 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2241      	movs	r2, #65	@ 0x41
 80148ec:	2128      	movs	r1, #40	@ 0x28
 80148ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2222      	movs	r2, #34	@ 0x22
 80148f4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2102      	movs	r1, #2
 80148fa:	0018      	movs	r0, r3
 80148fc:	f000 fdb6 	bl	801546c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2240      	movs	r2, #64	@ 0x40
 8014904:	2100      	movs	r1, #0
 8014906:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	0018      	movs	r0, r3
 801490c:	f7ff f8d6 	bl	8013abc <HAL_I2C_SlaveRxCpltCallback>
}
 8014910:	46c0      	nop			@ (mov r8, r8)
 8014912:	46bd      	mov	sp, r7
 8014914:	b004      	add	sp, #16
 8014916:	bd80      	pop	{r7, pc}
 8014918:	ffffbfff 	.word	0xffffbfff
 801491c:	ffff7fff 	.word	0xffff7fff

08014920 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b086      	sub	sp, #24
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2220      	movs	r2, #32
 8014934:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2241      	movs	r2, #65	@ 0x41
 801493a:	5c9b      	ldrb	r3, [r3, r2]
 801493c:	b2db      	uxtb	r3, r3
 801493e:	2b21      	cmp	r3, #33	@ 0x21
 8014940:	d108      	bne.n	8014954 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2101      	movs	r1, #1
 8014946:	0018      	movs	r0, r3
 8014948:	f000 fd90 	bl	801546c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2211      	movs	r2, #17
 8014950:	631a      	str	r2, [r3, #48]	@ 0x30
 8014952:	e00d      	b.n	8014970 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2241      	movs	r2, #65	@ 0x41
 8014958:	5c9b      	ldrb	r3, [r3, r2]
 801495a:	b2db      	uxtb	r3, r3
 801495c:	2b22      	cmp	r3, #34	@ 0x22
 801495e:	d107      	bne.n	8014970 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2102      	movs	r1, #2
 8014964:	0018      	movs	r0, r3
 8014966:	f000 fd81 	bl	801546c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2212      	movs	r2, #18
 801496e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	685a      	ldr	r2, [r3, #4]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	4950      	ldr	r1, [pc, #320]	@ (8014abc <I2C_ITMasterCplt+0x19c>)
 801497c:	400a      	ands	r2, r1
 801497e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2200      	movs	r2, #0
 8014984:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4a4d      	ldr	r2, [pc, #308]	@ (8014ac0 <I2C_ITMasterCplt+0x1a0>)
 801498a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	091b      	lsrs	r3, r3, #4
 8014990:	001a      	movs	r2, r3
 8014992:	2301      	movs	r3, #1
 8014994:	4013      	ands	r3, r2
 8014996:	d009      	beq.n	80149ac <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	2210      	movs	r2, #16
 801499e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149a4:	2204      	movs	r2, #4
 80149a6:	431a      	orrs	r2, r3
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2241      	movs	r2, #65	@ 0x41
 80149b0:	5c9b      	ldrb	r3, [r3, r2]
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	2b60      	cmp	r3, #96	@ 0x60
 80149b6:	d10b      	bne.n	80149d0 <I2C_ITMasterCplt+0xb0>
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	089b      	lsrs	r3, r3, #2
 80149bc:	001a      	movs	r2, r3
 80149be:	2301      	movs	r3, #1
 80149c0:	4013      	ands	r3, r2
 80149c2:	d005      	beq.n	80149d0 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149ca:	b2db      	uxtb	r3, r3
 80149cc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80149ce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	0018      	movs	r0, r3
 80149d4:	f000 fb8b 	bl	80150ee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149dc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2241      	movs	r2, #65	@ 0x41
 80149e2:	5c9b      	ldrb	r3, [r3, r2]
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	2b60      	cmp	r3, #96	@ 0x60
 80149e8:	d002      	beq.n	80149f0 <I2C_ITMasterCplt+0xd0>
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d007      	beq.n	8014a00 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	0011      	movs	r1, r2
 80149f8:	0018      	movs	r0, r3
 80149fa:	f000 fa4d 	bl	8014e98 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80149fe:	e058      	b.n	8014ab2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2241      	movs	r2, #65	@ 0x41
 8014a04:	5c9b      	ldrb	r3, [r3, r2]
 8014a06:	b2db      	uxtb	r3, r3
 8014a08:	2b21      	cmp	r3, #33	@ 0x21
 8014a0a:	d126      	bne.n	8014a5a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2241      	movs	r2, #65	@ 0x41
 8014a10:	2120      	movs	r1, #32
 8014a12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2200      	movs	r2, #0
 8014a18:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2242      	movs	r2, #66	@ 0x42
 8014a1e:	5c9b      	ldrb	r3, [r3, r2]
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	2b40      	cmp	r3, #64	@ 0x40
 8014a24:	d10c      	bne.n	8014a40 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2242      	movs	r2, #66	@ 0x42
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2240      	movs	r2, #64	@ 0x40
 8014a32:	2100      	movs	r1, #0
 8014a34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	0018      	movs	r0, r3
 8014a3a:	f7ff f85f 	bl	8013afc <HAL_I2C_MemTxCpltCallback>
}
 8014a3e:	e038      	b.n	8014ab2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2242      	movs	r2, #66	@ 0x42
 8014a44:	2100      	movs	r1, #0
 8014a46:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2240      	movs	r2, #64	@ 0x40
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	0018      	movs	r0, r3
 8014a54:	f7ff f81a 	bl	8013a8c <HAL_I2C_MasterTxCpltCallback>
}
 8014a58:	e02b      	b.n	8014ab2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2241      	movs	r2, #65	@ 0x41
 8014a5e:	5c9b      	ldrb	r3, [r3, r2]
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	2b22      	cmp	r3, #34	@ 0x22
 8014a64:	d125      	bne.n	8014ab2 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2241      	movs	r2, #65	@ 0x41
 8014a6a:	2120      	movs	r1, #32
 8014a6c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2200      	movs	r2, #0
 8014a72:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2242      	movs	r2, #66	@ 0x42
 8014a78:	5c9b      	ldrb	r3, [r3, r2]
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	2b40      	cmp	r3, #64	@ 0x40
 8014a7e:	d10c      	bne.n	8014a9a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	2242      	movs	r2, #66	@ 0x42
 8014a84:	2100      	movs	r1, #0
 8014a86:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2240      	movs	r2, #64	@ 0x40
 8014a8c:	2100      	movs	r1, #0
 8014a8e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	0018      	movs	r0, r3
 8014a94:	f7ff f83a 	bl	8013b0c <HAL_I2C_MemRxCpltCallback>
}
 8014a98:	e00b      	b.n	8014ab2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2242      	movs	r2, #66	@ 0x42
 8014a9e:	2100      	movs	r1, #0
 8014aa0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	2240      	movs	r2, #64	@ 0x40
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	0018      	movs	r0, r3
 8014aae:	f7fe fff5 	bl	8013a9c <HAL_I2C_MasterRxCpltCallback>
}
 8014ab2:	46c0      	nop			@ (mov r8, r8)
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	b006      	add	sp, #24
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	46c0      	nop			@ (mov r8, r8)
 8014abc:	fe00e800 	.word	0xfe00e800
 8014ac0:	ffff0000 	.word	0xffff0000

08014ac4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ade:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8014ae0:	200b      	movs	r0, #11
 8014ae2:	183b      	adds	r3, r7, r0
 8014ae4:	687a      	ldr	r2, [r7, #4]
 8014ae6:	2141      	movs	r1, #65	@ 0x41
 8014ae8:	5c52      	ldrb	r2, [r2, r1]
 8014aea:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	2220      	movs	r2, #32
 8014af2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014af4:	183b      	adds	r3, r7, r0
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	2b21      	cmp	r3, #33	@ 0x21
 8014afa:	d003      	beq.n	8014b04 <I2C_ITSlaveCplt+0x40>
 8014afc:	183b      	adds	r3, r7, r0
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	2b29      	cmp	r3, #41	@ 0x29
 8014b02:	d109      	bne.n	8014b18 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8014b04:	4ab0      	ldr	r2, [pc, #704]	@ (8014dc8 <I2C_ITSlaveCplt+0x304>)
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	0011      	movs	r1, r2
 8014b0a:	0018      	movs	r0, r3
 8014b0c:	f000 fcae 	bl	801546c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2221      	movs	r2, #33	@ 0x21
 8014b14:	631a      	str	r2, [r3, #48]	@ 0x30
 8014b16:	e020      	b.n	8014b5a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014b18:	220b      	movs	r2, #11
 8014b1a:	18bb      	adds	r3, r7, r2
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	2b22      	cmp	r3, #34	@ 0x22
 8014b20:	d003      	beq.n	8014b2a <I2C_ITSlaveCplt+0x66>
 8014b22:	18bb      	adds	r3, r7, r2
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b28:	d109      	bne.n	8014b3e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8014b2a:	4aa8      	ldr	r2, [pc, #672]	@ (8014dcc <I2C_ITSlaveCplt+0x308>)
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	0011      	movs	r1, r2
 8014b30:	0018      	movs	r0, r3
 8014b32:	f000 fc9b 	bl	801546c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2222      	movs	r2, #34	@ 0x22
 8014b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014b3c:	e00d      	b.n	8014b5a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8014b3e:	230b      	movs	r3, #11
 8014b40:	18fb      	adds	r3, r7, r3
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	2b28      	cmp	r3, #40	@ 0x28
 8014b46:	d108      	bne.n	8014b5a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8014b48:	4aa1      	ldr	r2, [pc, #644]	@ (8014dd0 <I2C_ITSlaveCplt+0x30c>)
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	0011      	movs	r1, r2
 8014b4e:	0018      	movs	r0, r3
 8014b50:	f000 fc8c 	bl	801546c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2200      	movs	r2, #0
 8014b58:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	685a      	ldr	r2, [r3, #4]
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	2180      	movs	r1, #128	@ 0x80
 8014b66:	0209      	lsls	r1, r1, #8
 8014b68:	430a      	orrs	r2, r1
 8014b6a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	685a      	ldr	r2, [r3, #4]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	4997      	ldr	r1, [pc, #604]	@ (8014dd4 <I2C_ITSlaveCplt+0x310>)
 8014b78:	400a      	ands	r2, r1
 8014b7a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	0018      	movs	r0, r3
 8014b80:	f000 fab5 	bl	80150ee <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	0b9b      	lsrs	r3, r3, #14
 8014b88:	001a      	movs	r2, r3
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	4013      	ands	r3, r2
 8014b8e:	d013      	beq.n	8014bb8 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	681a      	ldr	r2, [r3, #0]
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	498f      	ldr	r1, [pc, #572]	@ (8014dd8 <I2C_ITSlaveCplt+0x314>)
 8014b9c:	400a      	ands	r2, r1
 8014b9e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d020      	beq.n	8014bea <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	b29a      	uxth	r2, r3
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014bb6:	e018      	b.n	8014bea <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	0bdb      	lsrs	r3, r3, #15
 8014bbc:	001a      	movs	r2, r3
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	4013      	ands	r3, r2
 8014bc2:	d012      	beq.n	8014bea <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	4983      	ldr	r1, [pc, #524]	@ (8014ddc <I2C_ITSlaveCplt+0x318>)
 8014bd0:	400a      	ands	r2, r1
 8014bd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d006      	beq.n	8014bea <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	b29a      	uxth	r2, r3
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	089b      	lsrs	r3, r3, #2
 8014bee:	001a      	movs	r2, r3
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	4013      	ands	r3, r2
 8014bf4:	d020      	beq.n	8014c38 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	2204      	movs	r2, #4
 8014bfa:	4393      	bics	r3, r2
 8014bfc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c08:	b2d2      	uxtb	r2, r2
 8014c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c10:	1c5a      	adds	r2, r3, #1
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00c      	beq.n	8014c38 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c22:	3b01      	subs	r3, #1
 8014c24:	b29a      	uxth	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	3b01      	subs	r3, #1
 8014c32:	b29a      	uxth	r2, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d005      	beq.n	8014c4e <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c46:	2204      	movs	r2, #4
 8014c48:	431a      	orrs	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	091b      	lsrs	r3, r3, #4
 8014c52:	001a      	movs	r2, r3
 8014c54:	2301      	movs	r3, #1
 8014c56:	4013      	ands	r3, r2
 8014c58:	d051      	beq.n	8014cfe <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	091b      	lsrs	r3, r3, #4
 8014c5e:	001a      	movs	r2, r3
 8014c60:	2301      	movs	r3, #1
 8014c62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014c64:	d04b      	beq.n	8014cfe <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c6a:	b29b      	uxth	r3, r3
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d12d      	bne.n	8014ccc <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2241      	movs	r2, #65	@ 0x41
 8014c74:	5c9b      	ldrb	r3, [r3, r2]
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	2b28      	cmp	r3, #40	@ 0x28
 8014c7a:	d10b      	bne.n	8014c94 <I2C_ITSlaveCplt+0x1d0>
 8014c7c:	68fa      	ldr	r2, [r7, #12]
 8014c7e:	2380      	movs	r3, #128	@ 0x80
 8014c80:	049b      	lsls	r3, r3, #18
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d106      	bne.n	8014c94 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8014c86:	697a      	ldr	r2, [r7, #20]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	0011      	movs	r1, r2
 8014c8c:	0018      	movs	r0, r3
 8014c8e:	f000 f8a9 	bl	8014de4 <I2C_ITListenCplt>
 8014c92:	e034      	b.n	8014cfe <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2241      	movs	r2, #65	@ 0x41
 8014c98:	5c9b      	ldrb	r3, [r3, r2]
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b29      	cmp	r3, #41	@ 0x29
 8014c9e:	d110      	bne.n	8014cc2 <I2C_ITSlaveCplt+0x1fe>
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	4a4f      	ldr	r2, [pc, #316]	@ (8014de0 <I2C_ITSlaveCplt+0x31c>)
 8014ca4:	4293      	cmp	r3, r2
 8014ca6:	d00c      	beq.n	8014cc2 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	2210      	movs	r2, #16
 8014cae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	0018      	movs	r0, r3
 8014cb4:	f000 fa1b 	bl	80150ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	0018      	movs	r0, r3
 8014cbc:	f7ff fdca 	bl	8014854 <I2C_ITSlaveSeqCplt>
 8014cc0:	e01d      	b.n	8014cfe <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	2210      	movs	r2, #16
 8014cc8:	61da      	str	r2, [r3, #28]
 8014cca:	e018      	b.n	8014cfe <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2210      	movs	r2, #16
 8014cd2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cd8:	2204      	movs	r2, #4
 8014cda:	431a      	orrs	r2, r3
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d004      	beq.n	8014cf0 <I2C_ITSlaveCplt+0x22c>
 8014ce6:	68fa      	ldr	r2, [r7, #12]
 8014ce8:	2380      	movs	r3, #128	@ 0x80
 8014cea:	045b      	lsls	r3, r3, #17
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d106      	bne.n	8014cfe <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	0011      	movs	r1, r2
 8014cf8:	0018      	movs	r0, r3
 8014cfa:	f000 f8cd 	bl	8014e98 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2242      	movs	r2, #66	@ 0x42
 8014d02:	2100      	movs	r1, #0
 8014d04:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d013      	beq.n	8014d3c <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	0011      	movs	r1, r2
 8014d1c:	0018      	movs	r0, r3
 8014d1e:	f000 f8bb 	bl	8014e98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2241      	movs	r2, #65	@ 0x41
 8014d26:	5c9b      	ldrb	r3, [r3, r2]
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	2b28      	cmp	r3, #40	@ 0x28
 8014d2c:	d147      	bne.n	8014dbe <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8014d2e:	697a      	ldr	r2, [r7, #20]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	0011      	movs	r1, r2
 8014d34:	0018      	movs	r0, r3
 8014d36:	f000 f855 	bl	8014de4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014d3a:	e040      	b.n	8014dbe <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d40:	4a27      	ldr	r2, [pc, #156]	@ (8014de0 <I2C_ITSlaveCplt+0x31c>)
 8014d42:	4293      	cmp	r3, r2
 8014d44:	d016      	beq.n	8014d74 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	0018      	movs	r0, r3
 8014d4a:	f7ff fd83 	bl	8014854 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	4a23      	ldr	r2, [pc, #140]	@ (8014de0 <I2C_ITSlaveCplt+0x31c>)
 8014d52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	2241      	movs	r2, #65	@ 0x41
 8014d58:	2120      	movs	r1, #32
 8014d5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2240      	movs	r2, #64	@ 0x40
 8014d66:	2100      	movs	r1, #0
 8014d68:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	0018      	movs	r0, r3
 8014d6e:	f7fe febd 	bl	8013aec <HAL_I2C_ListenCpltCallback>
}
 8014d72:	e024      	b.n	8014dbe <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2241      	movs	r2, #65	@ 0x41
 8014d78:	5c9b      	ldrb	r3, [r3, r2]
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	2b22      	cmp	r3, #34	@ 0x22
 8014d7e:	d10f      	bne.n	8014da0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2241      	movs	r2, #65	@ 0x41
 8014d84:	2120      	movs	r1, #32
 8014d86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2240      	movs	r2, #64	@ 0x40
 8014d92:	2100      	movs	r1, #0
 8014d94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	0018      	movs	r0, r3
 8014d9a:	f7fe fe8f 	bl	8013abc <HAL_I2C_SlaveRxCpltCallback>
}
 8014d9e:	e00e      	b.n	8014dbe <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2241      	movs	r2, #65	@ 0x41
 8014da4:	2120      	movs	r1, #32
 8014da6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2200      	movs	r2, #0
 8014dac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	2240      	movs	r2, #64	@ 0x40
 8014db2:	2100      	movs	r1, #0
 8014db4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	0018      	movs	r0, r3
 8014dba:	f7fe fe77 	bl	8013aac <HAL_I2C_SlaveTxCpltCallback>
}
 8014dbe:	46c0      	nop			@ (mov r8, r8)
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	b006      	add	sp, #24
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	46c0      	nop			@ (mov r8, r8)
 8014dc8:	00008001 	.word	0x00008001
 8014dcc:	00008002 	.word	0x00008002
 8014dd0:	00008003 	.word	0x00008003
 8014dd4:	fe00e800 	.word	0xfe00e800
 8014dd8:	ffffbfff 	.word	0xffffbfff
 8014ddc:	ffff7fff 	.word	0xffff7fff
 8014de0:	ffff0000 	.word	0xffff0000

08014de4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	4a27      	ldr	r2, [pc, #156]	@ (8014e90 <I2C_ITListenCplt+0xac>)
 8014df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2200      	movs	r2, #0
 8014df8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2241      	movs	r2, #65	@ 0x41
 8014dfe:	2120      	movs	r1, #32
 8014e00:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2242      	movs	r2, #66	@ 0x42
 8014e06:	2100      	movs	r1, #0
 8014e08:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	089b      	lsrs	r3, r3, #2
 8014e14:	001a      	movs	r2, r3
 8014e16:	2301      	movs	r3, #1
 8014e18:	4013      	ands	r3, r2
 8014e1a:	d022      	beq.n	8014e62 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e26:	b2d2      	uxtb	r2, r2
 8014e28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e2e:	1c5a      	adds	r2, r3, #1
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d012      	beq.n	8014e62 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e40:	3b01      	subs	r3, #1
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e5a:	2204      	movs	r2, #4
 8014e5c:	431a      	orrs	r2, r3
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014e62:	4a0c      	ldr	r2, [pc, #48]	@ (8014e94 <I2C_ITListenCplt+0xb0>)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	0011      	movs	r1, r2
 8014e68:	0018      	movs	r0, r3
 8014e6a:	f000 faff 	bl	801546c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	2210      	movs	r2, #16
 8014e74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2240      	movs	r2, #64	@ 0x40
 8014e7a:	2100      	movs	r1, #0
 8014e7c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	0018      	movs	r0, r3
 8014e82:	f7fe fe33 	bl	8013aec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8014e86:	46c0      	nop			@ (mov r8, r8)
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	b002      	add	sp, #8
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	46c0      	nop			@ (mov r8, r8)
 8014e90:	ffff0000 	.word	0xffff0000
 8014e94:	00008003 	.word	0x00008003

08014e98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b084      	sub	sp, #16
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
 8014ea0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8014ea2:	200f      	movs	r0, #15
 8014ea4:	183b      	adds	r3, r7, r0
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	2141      	movs	r1, #65	@ 0x41
 8014eaa:	5c52      	ldrb	r2, [r2, r1]
 8014eac:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2242      	movs	r2, #66	@ 0x42
 8014eb2:	2100      	movs	r1, #0
 8014eb4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	4a72      	ldr	r2, [pc, #456]	@ (8015084 <I2C_ITError+0x1ec>)
 8014eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	431a      	orrs	r2, r3
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8014ece:	183b      	adds	r3, r7, r0
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	2b28      	cmp	r3, #40	@ 0x28
 8014ed4:	d007      	beq.n	8014ee6 <I2C_ITError+0x4e>
 8014ed6:	183b      	adds	r3, r7, r0
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	2b29      	cmp	r3, #41	@ 0x29
 8014edc:	d003      	beq.n	8014ee6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8014ede:	183b      	adds	r3, r7, r0
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ee4:	d10c      	bne.n	8014f00 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2103      	movs	r1, #3
 8014eea:	0018      	movs	r0, r3
 8014eec:	f000 fabe 	bl	801546c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2241      	movs	r2, #65	@ 0x41
 8014ef4:	2128      	movs	r1, #40	@ 0x28
 8014ef6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4a63      	ldr	r2, [pc, #396]	@ (8015088 <I2C_ITError+0x1f0>)
 8014efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8014efe:	e032      	b.n	8014f66 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014f00:	4a62      	ldr	r2, [pc, #392]	@ (801508c <I2C_ITError+0x1f4>)
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	0011      	movs	r1, r2
 8014f06:	0018      	movs	r0, r3
 8014f08:	f000 fab0 	bl	801546c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	0018      	movs	r0, r3
 8014f10:	f000 f8ed 	bl	80150ee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2241      	movs	r2, #65	@ 0x41
 8014f18:	5c9b      	ldrb	r3, [r3, r2]
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	2b60      	cmp	r3, #96	@ 0x60
 8014f1e:	d01f      	beq.n	8014f60 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2241      	movs	r2, #65	@ 0x41
 8014f24:	2120      	movs	r1, #32
 8014f26:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	699b      	ldr	r3, [r3, #24]
 8014f2e:	2220      	movs	r2, #32
 8014f30:	4013      	ands	r3, r2
 8014f32:	2b20      	cmp	r3, #32
 8014f34:	d114      	bne.n	8014f60 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	699b      	ldr	r3, [r3, #24]
 8014f3c:	2210      	movs	r2, #16
 8014f3e:	4013      	ands	r3, r2
 8014f40:	2b10      	cmp	r3, #16
 8014f42:	d109      	bne.n	8014f58 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2210      	movs	r2, #16
 8014f4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f50:	2204      	movs	r2, #4
 8014f52:	431a      	orrs	r2, r3
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2220      	movs	r2, #32
 8014f5e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2200      	movs	r2, #0
 8014f64:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d03b      	beq.n	8014fec <I2C_ITError+0x154>
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	2b11      	cmp	r3, #17
 8014f78:	d002      	beq.n	8014f80 <I2C_ITError+0xe8>
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	2b21      	cmp	r3, #33	@ 0x21
 8014f7e:	d135      	bne.n	8014fec <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	681a      	ldr	r2, [r3, #0]
 8014f86:	2380      	movs	r3, #128	@ 0x80
 8014f88:	01db      	lsls	r3, r3, #7
 8014f8a:	401a      	ands	r2, r3
 8014f8c:	2380      	movs	r3, #128	@ 0x80
 8014f8e:	01db      	lsls	r3, r3, #7
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d107      	bne.n	8014fa4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	493c      	ldr	r1, [pc, #240]	@ (8015090 <I2C_ITError+0x1f8>)
 8014fa0:	400a      	ands	r2, r1
 8014fa2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fa8:	0018      	movs	r0, r3
 8014faa:	f7fd fcef 	bl	801298c <HAL_DMA_GetState>
 8014fae:	0003      	movs	r3, r0
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d016      	beq.n	8014fe2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fb8:	4a36      	ldr	r2, [pc, #216]	@ (8015094 <I2C_ITError+0x1fc>)
 8014fba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2240      	movs	r2, #64	@ 0x40
 8014fc0:	2100      	movs	r1, #0
 8014fc2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fc8:	0018      	movs	r0, r3
 8014fca:	f7fd fbb3 	bl	8012734 <HAL_DMA_Abort_IT>
 8014fce:	1e03      	subs	r3, r0, #0
 8014fd0:	d051      	beq.n	8015076 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014fdc:	0018      	movs	r0, r3
 8014fde:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014fe0:	e049      	b.n	8015076 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	0018      	movs	r0, r3
 8014fe6:	f000 f859 	bl	801509c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014fea:	e044      	b.n	8015076 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d03b      	beq.n	801506c <I2C_ITError+0x1d4>
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	2b12      	cmp	r3, #18
 8014ff8:	d002      	beq.n	8015000 <I2C_ITError+0x168>
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	2b22      	cmp	r3, #34	@ 0x22
 8014ffe:	d135      	bne.n	801506c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	681a      	ldr	r2, [r3, #0]
 8015006:	2380      	movs	r3, #128	@ 0x80
 8015008:	021b      	lsls	r3, r3, #8
 801500a:	401a      	ands	r2, r3
 801500c:	2380      	movs	r3, #128	@ 0x80
 801500e:	021b      	lsls	r3, r3, #8
 8015010:	429a      	cmp	r2, r3
 8015012:	d107      	bne.n	8015024 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	491e      	ldr	r1, [pc, #120]	@ (8015098 <I2C_ITError+0x200>)
 8015020:	400a      	ands	r2, r1
 8015022:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015028:	0018      	movs	r0, r3
 801502a:	f7fd fcaf 	bl	801298c <HAL_DMA_GetState>
 801502e:	0003      	movs	r3, r0
 8015030:	2b01      	cmp	r3, #1
 8015032:	d016      	beq.n	8015062 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015038:	4a16      	ldr	r2, [pc, #88]	@ (8015094 <I2C_ITError+0x1fc>)
 801503a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2240      	movs	r2, #64	@ 0x40
 8015040:	2100      	movs	r1, #0
 8015042:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015048:	0018      	movs	r0, r3
 801504a:	f7fd fb73 	bl	8012734 <HAL_DMA_Abort_IT>
 801504e:	1e03      	subs	r3, r0, #0
 8015050:	d013      	beq.n	801507a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801505c:	0018      	movs	r0, r3
 801505e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015060:	e00b      	b.n	801507a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	0018      	movs	r0, r3
 8015066:	f000 f819 	bl	801509c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801506a:	e006      	b.n	801507a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	0018      	movs	r0, r3
 8015070:	f000 f814 	bl	801509c <I2C_TreatErrorCallback>
  }
}
 8015074:	e002      	b.n	801507c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015076:	46c0      	nop			@ (mov r8, r8)
 8015078:	e000      	b.n	801507c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801507a:	46c0      	nop			@ (mov r8, r8)
}
 801507c:	46c0      	nop			@ (mov r8, r8)
 801507e:	46bd      	mov	sp, r7
 8015080:	b004      	add	sp, #16
 8015082:	bd80      	pop	{r7, pc}
 8015084:	ffff0000 	.word	0xffff0000
 8015088:	08013dd9 	.word	0x08013dd9
 801508c:	00008003 	.word	0x00008003
 8015090:	ffffbfff 	.word	0xffffbfff
 8015094:	080152a7 	.word	0x080152a7
 8015098:	ffff7fff 	.word	0xffff7fff

0801509c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2241      	movs	r2, #65	@ 0x41
 80150a8:	5c9b      	ldrb	r3, [r3, r2]
 80150aa:	b2db      	uxtb	r3, r3
 80150ac:	2b60      	cmp	r3, #96	@ 0x60
 80150ae:	d10f      	bne.n	80150d0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2241      	movs	r2, #65	@ 0x41
 80150b4:	2120      	movs	r1, #32
 80150b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2200      	movs	r2, #0
 80150bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2240      	movs	r2, #64	@ 0x40
 80150c2:	2100      	movs	r1, #0
 80150c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	0018      	movs	r0, r3
 80150ca:	f7fe fd2f 	bl	8013b2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80150ce:	e00a      	b.n	80150e6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2200      	movs	r2, #0
 80150d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2240      	movs	r2, #64	@ 0x40
 80150da:	2100      	movs	r1, #0
 80150dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	0018      	movs	r0, r3
 80150e2:	f7fe fd1b 	bl	8013b1c <HAL_I2C_ErrorCallback>
}
 80150e6:	46c0      	nop			@ (mov r8, r8)
 80150e8:	46bd      	mov	sp, r7
 80150ea:	b002      	add	sp, #8
 80150ec:	bd80      	pop	{r7, pc}

080150ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80150ee:	b580      	push	{r7, lr}
 80150f0:	b082      	sub	sp, #8
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	699b      	ldr	r3, [r3, #24]
 80150fc:	2202      	movs	r2, #2
 80150fe:	4013      	ands	r3, r2
 8015100:	2b02      	cmp	r3, #2
 8015102:	d103      	bne.n	801510c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2200      	movs	r2, #0
 801510a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	699b      	ldr	r3, [r3, #24]
 8015112:	2201      	movs	r2, #1
 8015114:	4013      	ands	r3, r2
 8015116:	2b01      	cmp	r3, #1
 8015118:	d007      	beq.n	801512a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	699a      	ldr	r2, [r3, #24]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2101      	movs	r1, #1
 8015126:	430a      	orrs	r2, r1
 8015128:	619a      	str	r2, [r3, #24]
  }
}
 801512a:	46c0      	nop			@ (mov r8, r8)
 801512c:	46bd      	mov	sp, r7
 801512e:	b002      	add	sp, #8
 8015130:	bd80      	pop	{r7, pc}
	...

08015134 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015140:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4920      	ldr	r1, [pc, #128]	@ (80151d0 <I2C_DMAMasterTransmitCplt+0x9c>)
 801514e:	400a      	ands	r2, r1
 8015150:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015156:	b29b      	uxth	r3, r3
 8015158:	2b00      	cmp	r3, #0
 801515a:	d105      	bne.n	8015168 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2120      	movs	r1, #32
 8015160:	0018      	movs	r0, r3
 8015162:	f000 f8f9 	bl	8015358 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015166:	e02e      	b.n	80151c6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801516c:	68fa      	ldr	r2, [r7, #12]
 801516e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015170:	189a      	adds	r2, r3, r2
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801517a:	b29b      	uxth	r3, r3
 801517c:	2bff      	cmp	r3, #255	@ 0xff
 801517e:	d903      	bls.n	8015188 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	22ff      	movs	r2, #255	@ 0xff
 8015184:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015186:	e004      	b.n	8015192 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801518c:	b29a      	uxth	r2, r3
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801519a:	0019      	movs	r1, r3
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	3328      	adds	r3, #40	@ 0x28
 80151a2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80151a8:	f7fd f9de 	bl	8012568 <HAL_DMA_Start_IT>
 80151ac:	1e03      	subs	r3, r0, #0
 80151ae:	d005      	beq.n	80151bc <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2110      	movs	r1, #16
 80151b4:	0018      	movs	r0, r3
 80151b6:	f7ff fe6f 	bl	8014e98 <I2C_ITError>
}
 80151ba:	e004      	b.n	80151c6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2140      	movs	r1, #64	@ 0x40
 80151c0:	0018      	movs	r0, r3
 80151c2:	f000 f8c9 	bl	8015358 <I2C_Enable_IRQ>
}
 80151c6:	46c0      	nop			@ (mov r8, r8)
 80151c8:	46bd      	mov	sp, r7
 80151ca:	b004      	add	sp, #16
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	46c0      	nop			@ (mov r8, r8)
 80151d0:	ffffbfff 	.word	0xffffbfff

080151d4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151e0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	4920      	ldr	r1, [pc, #128]	@ (8015270 <I2C_DMAMasterReceiveCplt+0x9c>)
 80151ee:	400a      	ands	r2, r1
 80151f0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d105      	bne.n	8015208 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2120      	movs	r1, #32
 8015200:	0018      	movs	r0, r3
 8015202:	f000 f8a9 	bl	8015358 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015206:	e02e      	b.n	8015266 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801520c:	68fa      	ldr	r2, [r7, #12]
 801520e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015210:	189a      	adds	r2, r3, r2
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801521a:	b29b      	uxth	r3, r3
 801521c:	2bff      	cmp	r3, #255	@ 0xff
 801521e:	d903      	bls.n	8015228 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	22ff      	movs	r2, #255	@ 0xff
 8015224:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015226:	e004      	b.n	8015232 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801522c:	b29a      	uxth	r2, r3
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	3324      	adds	r3, #36	@ 0x24
 801523c:	0019      	movs	r1, r3
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015242:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015248:	f7fd f98e 	bl	8012568 <HAL_DMA_Start_IT>
 801524c:	1e03      	subs	r3, r0, #0
 801524e:	d005      	beq.n	801525c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2110      	movs	r1, #16
 8015254:	0018      	movs	r0, r3
 8015256:	f7ff fe1f 	bl	8014e98 <I2C_ITError>
}
 801525a:	e004      	b.n	8015266 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2140      	movs	r1, #64	@ 0x40
 8015260:	0018      	movs	r0, r3
 8015262:	f000 f879 	bl	8015358 <I2C_Enable_IRQ>
}
 8015266:	46c0      	nop			@ (mov r8, r8)
 8015268:	46bd      	mov	sp, r7
 801526a:	b004      	add	sp, #16
 801526c:	bd80      	pop	{r7, pc}
 801526e:	46c0      	nop			@ (mov r8, r8)
 8015270:	ffff7fff 	.word	0xffff7fff

08015274 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015280:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	685a      	ldr	r2, [r3, #4]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	2180      	movs	r1, #128	@ 0x80
 801528e:	0209      	lsls	r1, r1, #8
 8015290:	430a      	orrs	r2, r1
 8015292:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2110      	movs	r1, #16
 8015298:	0018      	movs	r0, r3
 801529a:	f7ff fdfd 	bl	8014e98 <I2C_ITError>
}
 801529e:	46c0      	nop			@ (mov r8, r8)
 80152a0:	46bd      	mov	sp, r7
 80152a2:	b004      	add	sp, #16
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b084      	sub	sp, #16
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d003      	beq.n	80152c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152c0:	2200      	movs	r2, #0
 80152c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d003      	beq.n	80152d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152d0:	2200      	movs	r2, #0
 80152d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	0018      	movs	r0, r3
 80152d8:	f7ff fee0 	bl	801509c <I2C_TreatErrorCallback>
}
 80152dc:	46c0      	nop			@ (mov r8, r8)
 80152de:	46bd      	mov	sp, r7
 80152e0:	b004      	add	sp, #16
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80152e4:	b590      	push	{r4, r7, lr}
 80152e6:	b087      	sub	sp, #28
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	0008      	movs	r0, r1
 80152ee:	0011      	movs	r1, r2
 80152f0:	607b      	str	r3, [r7, #4]
 80152f2:	240a      	movs	r4, #10
 80152f4:	193b      	adds	r3, r7, r4
 80152f6:	1c02      	adds	r2, r0, #0
 80152f8:	801a      	strh	r2, [r3, #0]
 80152fa:	2009      	movs	r0, #9
 80152fc:	183b      	adds	r3, r7, r0
 80152fe:	1c0a      	adds	r2, r1, #0
 8015300:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015302:	193b      	adds	r3, r7, r4
 8015304:	881b      	ldrh	r3, [r3, #0]
 8015306:	059b      	lsls	r3, r3, #22
 8015308:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801530a:	183b      	adds	r3, r7, r0
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	0419      	lsls	r1, r3, #16
 8015310:	23ff      	movs	r3, #255	@ 0xff
 8015312:	041b      	lsls	r3, r3, #16
 8015314:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015316:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801531e:	4313      	orrs	r3, r2
 8015320:	005b      	lsls	r3, r3, #1
 8015322:	085b      	lsrs	r3, r3, #1
 8015324:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	685b      	ldr	r3, [r3, #4]
 801532c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801532e:	0d51      	lsrs	r1, r2, #21
 8015330:	2280      	movs	r2, #128	@ 0x80
 8015332:	00d2      	lsls	r2, r2, #3
 8015334:	400a      	ands	r2, r1
 8015336:	4907      	ldr	r1, [pc, #28]	@ (8015354 <I2C_TransferConfig+0x70>)
 8015338:	430a      	orrs	r2, r1
 801533a:	43d2      	mvns	r2, r2
 801533c:	401a      	ands	r2, r3
 801533e:	0011      	movs	r1, r2
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	697a      	ldr	r2, [r7, #20]
 8015346:	430a      	orrs	r2, r1
 8015348:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801534a:	46c0      	nop			@ (mov r8, r8)
 801534c:	46bd      	mov	sp, r7
 801534e:	b007      	add	sp, #28
 8015350:	bd90      	pop	{r4, r7, pc}
 8015352:	46c0      	nop			@ (mov r8, r8)
 8015354:	03ff63ff 	.word	0x03ff63ff

08015358 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b084      	sub	sp, #16
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	000a      	movs	r2, r1
 8015362:	1cbb      	adds	r3, r7, #2
 8015364:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8015366:	2300      	movs	r3, #0
 8015368:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801536e:	4b3c      	ldr	r3, [pc, #240]	@ (8015460 <I2C_Enable_IRQ+0x108>)
 8015370:	429a      	cmp	r2, r3
 8015372:	d035      	beq.n	80153e0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8015378:	4b3a      	ldr	r3, [pc, #232]	@ (8015464 <I2C_Enable_IRQ+0x10c>)
 801537a:	429a      	cmp	r2, r3
 801537c:	d030      	beq.n	80153e0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015382:	4b39      	ldr	r3, [pc, #228]	@ (8015468 <I2C_Enable_IRQ+0x110>)
 8015384:	429a      	cmp	r2, r3
 8015386:	d02b      	beq.n	80153e0 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8015388:	1cbb      	adds	r3, r7, #2
 801538a:	2200      	movs	r2, #0
 801538c:	5e9b      	ldrsh	r3, [r3, r2]
 801538e:	2b00      	cmp	r3, #0
 8015390:	da03      	bge.n	801539a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	22b8      	movs	r2, #184	@ 0xb8
 8015396:	4313      	orrs	r3, r2
 8015398:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801539a:	1cbb      	adds	r3, r7, #2
 801539c:	881b      	ldrh	r3, [r3, #0]
 801539e:	2201      	movs	r2, #1
 80153a0:	4013      	ands	r3, r2
 80153a2:	d003      	beq.n	80153ac <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	22f2      	movs	r2, #242	@ 0xf2
 80153a8:	4313      	orrs	r3, r2
 80153aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80153ac:	1cbb      	adds	r3, r7, #2
 80153ae:	881b      	ldrh	r3, [r3, #0]
 80153b0:	2202      	movs	r2, #2
 80153b2:	4013      	ands	r3, r2
 80153b4:	d003      	beq.n	80153be <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	22f4      	movs	r2, #244	@ 0xf4
 80153ba:	4313      	orrs	r3, r2
 80153bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80153be:	1cbb      	adds	r3, r7, #2
 80153c0:	881b      	ldrh	r3, [r3, #0]
 80153c2:	2b10      	cmp	r3, #16
 80153c4:	d103      	bne.n	80153ce <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	2290      	movs	r2, #144	@ 0x90
 80153ca:	4313      	orrs	r3, r2
 80153cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80153ce:	1cbb      	adds	r3, r7, #2
 80153d0:	881b      	ldrh	r3, [r3, #0]
 80153d2:	2b20      	cmp	r3, #32
 80153d4:	d137      	bne.n	8015446 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2220      	movs	r2, #32
 80153da:	4313      	orrs	r3, r2
 80153dc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80153de:	e032      	b.n	8015446 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80153e0:	1cbb      	adds	r3, r7, #2
 80153e2:	2200      	movs	r2, #0
 80153e4:	5e9b      	ldrsh	r3, [r3, r2]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	da03      	bge.n	80153f2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	22b8      	movs	r2, #184	@ 0xb8
 80153ee:	4313      	orrs	r3, r2
 80153f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80153f2:	1cbb      	adds	r3, r7, #2
 80153f4:	881b      	ldrh	r3, [r3, #0]
 80153f6:	2201      	movs	r2, #1
 80153f8:	4013      	ands	r3, r2
 80153fa:	d003      	beq.n	8015404 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	22f2      	movs	r2, #242	@ 0xf2
 8015400:	4313      	orrs	r3, r2
 8015402:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8015404:	1cbb      	adds	r3, r7, #2
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	2202      	movs	r2, #2
 801540a:	4013      	ands	r3, r2
 801540c:	d003      	beq.n	8015416 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	22f4      	movs	r2, #244	@ 0xf4
 8015412:	4313      	orrs	r3, r2
 8015414:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015416:	1cbb      	adds	r3, r7, #2
 8015418:	881b      	ldrh	r3, [r3, #0]
 801541a:	2b10      	cmp	r3, #16
 801541c:	d103      	bne.n	8015426 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2290      	movs	r2, #144	@ 0x90
 8015422:	4313      	orrs	r3, r2
 8015424:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015426:	1cbb      	adds	r3, r7, #2
 8015428:	881b      	ldrh	r3, [r3, #0]
 801542a:	2b20      	cmp	r3, #32
 801542c:	d103      	bne.n	8015436 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2260      	movs	r2, #96	@ 0x60
 8015432:	4313      	orrs	r3, r2
 8015434:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8015436:	1cbb      	adds	r3, r7, #2
 8015438:	881b      	ldrh	r3, [r3, #0]
 801543a:	2b40      	cmp	r3, #64	@ 0x40
 801543c:	d103      	bne.n	8015446 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2240      	movs	r2, #64	@ 0x40
 8015442:	4313      	orrs	r3, r2
 8015444:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	6819      	ldr	r1, [r3, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	68fa      	ldr	r2, [r7, #12]
 8015452:	430a      	orrs	r2, r1
 8015454:	601a      	str	r2, [r3, #0]
}
 8015456:	46c0      	nop			@ (mov r8, r8)
 8015458:	46bd      	mov	sp, r7
 801545a:	b004      	add	sp, #16
 801545c:	bd80      	pop	{r7, pc}
 801545e:	46c0      	nop			@ (mov r8, r8)
 8015460:	08014001 	.word	0x08014001
 8015464:	08014499 	.word	0x08014499
 8015468:	08014219 	.word	0x08014219

0801546c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b084      	sub	sp, #16
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	000a      	movs	r2, r1
 8015476:	1cbb      	adds	r3, r7, #2
 8015478:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801547a:	2300      	movs	r3, #0
 801547c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801547e:	1cbb      	adds	r3, r7, #2
 8015480:	881b      	ldrh	r3, [r3, #0]
 8015482:	2201      	movs	r2, #1
 8015484:	4013      	ands	r3, r2
 8015486:	d010      	beq.n	80154aa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2242      	movs	r2, #66	@ 0x42
 801548c:	4313      	orrs	r3, r2
 801548e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2241      	movs	r2, #65	@ 0x41
 8015494:	5c9b      	ldrb	r3, [r3, r2]
 8015496:	b2db      	uxtb	r3, r3
 8015498:	001a      	movs	r2, r3
 801549a:	2328      	movs	r3, #40	@ 0x28
 801549c:	4013      	ands	r3, r2
 801549e:	2b28      	cmp	r3, #40	@ 0x28
 80154a0:	d003      	beq.n	80154aa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	22b0      	movs	r2, #176	@ 0xb0
 80154a6:	4313      	orrs	r3, r2
 80154a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80154aa:	1cbb      	adds	r3, r7, #2
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	2202      	movs	r2, #2
 80154b0:	4013      	ands	r3, r2
 80154b2:	d010      	beq.n	80154d6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	2244      	movs	r2, #68	@ 0x44
 80154b8:	4313      	orrs	r3, r2
 80154ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2241      	movs	r2, #65	@ 0x41
 80154c0:	5c9b      	ldrb	r3, [r3, r2]
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	001a      	movs	r2, r3
 80154c6:	2328      	movs	r3, #40	@ 0x28
 80154c8:	4013      	ands	r3, r2
 80154ca:	2b28      	cmp	r3, #40	@ 0x28
 80154cc:	d003      	beq.n	80154d6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	22b0      	movs	r2, #176	@ 0xb0
 80154d2:	4313      	orrs	r3, r2
 80154d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80154d6:	1cbb      	adds	r3, r7, #2
 80154d8:	2200      	movs	r2, #0
 80154da:	5e9b      	ldrsh	r3, [r3, r2]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	da03      	bge.n	80154e8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	22b8      	movs	r2, #184	@ 0xb8
 80154e4:	4313      	orrs	r3, r2
 80154e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80154e8:	1cbb      	adds	r3, r7, #2
 80154ea:	881b      	ldrh	r3, [r3, #0]
 80154ec:	2b10      	cmp	r3, #16
 80154ee:	d103      	bne.n	80154f8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	2290      	movs	r2, #144	@ 0x90
 80154f4:	4313      	orrs	r3, r2
 80154f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80154f8:	1cbb      	adds	r3, r7, #2
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	2b20      	cmp	r3, #32
 80154fe:	d103      	bne.n	8015508 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	2220      	movs	r2, #32
 8015504:	4313      	orrs	r3, r2
 8015506:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8015508:	1cbb      	adds	r3, r7, #2
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	2b40      	cmp	r3, #64	@ 0x40
 801550e:	d103      	bne.n	8015518 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2240      	movs	r2, #64	@ 0x40
 8015514:	4313      	orrs	r3, r2
 8015516:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	681a      	ldr	r2, [r3, #0]
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	43d9      	mvns	r1, r3
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	400a      	ands	r2, r1
 8015528:	601a      	str	r2, [r3, #0]
}
 801552a:	46c0      	nop			@ (mov r8, r8)
 801552c:	46bd      	mov	sp, r7
 801552e:	b004      	add	sp, #16
 8015530:	bd80      	pop	{r7, pc}
	...

08015534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2241      	movs	r2, #65	@ 0x41
 8015542:	5c9b      	ldrb	r3, [r3, r2]
 8015544:	b2db      	uxtb	r3, r3
 8015546:	2b20      	cmp	r3, #32
 8015548:	d138      	bne.n	80155bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2240      	movs	r2, #64	@ 0x40
 801554e:	5c9b      	ldrb	r3, [r3, r2]
 8015550:	2b01      	cmp	r3, #1
 8015552:	d101      	bne.n	8015558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8015554:	2302      	movs	r3, #2
 8015556:	e032      	b.n	80155be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2240      	movs	r2, #64	@ 0x40
 801555c:	2101      	movs	r1, #1
 801555e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2241      	movs	r2, #65	@ 0x41
 8015564:	2124      	movs	r1, #36	@ 0x24
 8015566:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	681a      	ldr	r2, [r3, #0]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2101      	movs	r1, #1
 8015574:	438a      	bics	r2, r1
 8015576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	4911      	ldr	r1, [pc, #68]	@ (80155c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8015584:	400a      	ands	r2, r1
 8015586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	6819      	ldr	r1, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	683a      	ldr	r2, [r7, #0]
 8015594:	430a      	orrs	r2, r1
 8015596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	681a      	ldr	r2, [r3, #0]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	2101      	movs	r1, #1
 80155a4:	430a      	orrs	r2, r1
 80155a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2241      	movs	r2, #65	@ 0x41
 80155ac:	2120      	movs	r1, #32
 80155ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2240      	movs	r2, #64	@ 0x40
 80155b4:	2100      	movs	r1, #0
 80155b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80155b8:	2300      	movs	r3, #0
 80155ba:	e000      	b.n	80155be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80155bc:	2302      	movs	r3, #2
  }
}
 80155be:	0018      	movs	r0, r3
 80155c0:	46bd      	mov	sp, r7
 80155c2:	b002      	add	sp, #8
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	46c0      	nop			@ (mov r8, r8)
 80155c8:	ffffefff 	.word	0xffffefff

080155cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b084      	sub	sp, #16
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2241      	movs	r2, #65	@ 0x41
 80155da:	5c9b      	ldrb	r3, [r3, r2]
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	2b20      	cmp	r3, #32
 80155e0:	d139      	bne.n	8015656 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2240      	movs	r2, #64	@ 0x40
 80155e6:	5c9b      	ldrb	r3, [r3, r2]
 80155e8:	2b01      	cmp	r3, #1
 80155ea:	d101      	bne.n	80155f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80155ec:	2302      	movs	r3, #2
 80155ee:	e033      	b.n	8015658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2240      	movs	r2, #64	@ 0x40
 80155f4:	2101      	movs	r1, #1
 80155f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2241      	movs	r2, #65	@ 0x41
 80155fc:	2124      	movs	r1, #36	@ 0x24
 80155fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	681a      	ldr	r2, [r3, #0]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	2101      	movs	r1, #1
 801560c:	438a      	bics	r2, r1
 801560e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	4a11      	ldr	r2, [pc, #68]	@ (8015660 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801561c:	4013      	ands	r3, r2
 801561e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	021b      	lsls	r3, r3, #8
 8015624:	68fa      	ldr	r2, [r7, #12]
 8015626:	4313      	orrs	r3, r2
 8015628:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	68fa      	ldr	r2, [r7, #12]
 8015630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	2101      	movs	r1, #1
 801563e:	430a      	orrs	r2, r1
 8015640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2241      	movs	r2, #65	@ 0x41
 8015646:	2120      	movs	r1, #32
 8015648:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2240      	movs	r2, #64	@ 0x40
 801564e:	2100      	movs	r1, #0
 8015650:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015652:	2300      	movs	r3, #0
 8015654:	e000      	b.n	8015658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8015656:	2302      	movs	r3, #2
  }
}
 8015658:	0018      	movs	r0, r3
 801565a:	46bd      	mov	sp, r7
 801565c:	b004      	add	sp, #16
 801565e:	bd80      	pop	{r7, pc}
 8015660:	fffff0ff 	.word	0xfffff0ff

08015664 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d101      	bne.n	8015676 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015672:	2301      	movs	r3, #1
 8015674:	e06d      	b.n	8015752 <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	0018      	movs	r0, r3
 801567a:	f000 f875 	bl	8015768 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	4a36      	ldr	r2, [pc, #216]	@ (801575c <HAL_IWDG_Init+0xf8>)
 8015684:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	4a35      	ldr	r2, [pc, #212]	@ (8015760 <HAL_IWDG_Init+0xfc>)
 801568c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	6852      	ldr	r2, [r2, #4]
 8015696:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	687a      	ldr	r2, [r7, #4]
 801569e:	6892      	ldr	r2, [r2, #8]
 80156a0:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 80156a2:	f7fc fcc5 	bl	8012030 <HAL_GetTick>
 80156a6:	0003      	movs	r3, r0
 80156a8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 80156aa:	e00e      	b.n	80156ca <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80156ac:	f7fc fcc0 	bl	8012030 <HAL_GetTick>
 80156b0:	0002      	movs	r2, r0
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	1ad3      	subs	r3, r2, r3
 80156b6:	2b21      	cmp	r3, #33	@ 0x21
 80156b8:	d907      	bls.n	80156ca <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68db      	ldr	r3, [r3, #12]
 80156c0:	2202      	movs	r2, #2
 80156c2:	4013      	ands	r3, r2
 80156c4:	d001      	beq.n	80156ca <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80156c6:	2303      	movs	r3, #3
 80156c8:	e043      	b.n	8015752 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	2202      	movs	r2, #2
 80156d2:	4013      	ands	r3, r2
 80156d4:	d1ea      	bne.n	80156ac <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	691b      	ldr	r3, [r3, #16]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d105      	bne.n	80156ea <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2280      	movs	r2, #128	@ 0x80
 80156e4:	01d2      	lsls	r2, r2, #7
 80156e6:	615a      	str	r2, [r3, #20]
 80156e8:	e007      	b.n	80156fa <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	691a      	ldr	r2, [r3, #16]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	21c0      	movs	r1, #192	@ 0xc0
 80156f4:	0209      	lsls	r1, r1, #8
 80156f6:	430a      	orrs	r2, r1
 80156f8:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80156fa:	f7fc fc99 	bl	8012030 <HAL_GetTick>
 80156fe:	0003      	movs	r3, r0
 8015700:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015702:	e00e      	b.n	8015722 <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015704:	f7fc fc94 	bl	8012030 <HAL_GetTick>
 8015708:	0002      	movs	r2, r0
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	1ad3      	subs	r3, r2, r3
 801570e:	2b21      	cmp	r3, #33	@ 0x21
 8015710:	d907      	bls.n	8015722 <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	220f      	movs	r2, #15
 801571a:	4013      	ands	r3, r2
 801571c:	d001      	beq.n	8015722 <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 801571e:	2303      	movs	r3, #3
 8015720:	e017      	b.n	8015752 <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	68db      	ldr	r3, [r3, #12]
 8015728:	220f      	movs	r2, #15
 801572a:	4013      	ands	r3, r2
 801572c:	d1ea      	bne.n	8015704 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	691a      	ldr	r2, [r3, #16]
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	68db      	ldr	r3, [r3, #12]
 8015738:	429a      	cmp	r2, r3
 801573a:	d005      	beq.n	8015748 <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	687a      	ldr	r2, [r7, #4]
 8015742:	68d2      	ldr	r2, [r2, #12]
 8015744:	611a      	str	r2, [r3, #16]
 8015746:	e003      	b.n	8015750 <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	4a05      	ldr	r2, [pc, #20]	@ (8015764 <HAL_IWDG_Init+0x100>)
 801574e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015750:	2300      	movs	r3, #0
}
 8015752:	0018      	movs	r0, r3
 8015754:	46bd      	mov	sp, r7
 8015756:	b004      	add	sp, #16
 8015758:	bd80      	pop	{r7, pc}
 801575a:	46c0      	nop			@ (mov r8, r8)
 801575c:	0000cccc 	.word	0x0000cccc
 8015760:	00005555 	.word	0x00005555
 8015764:	0000aaaa 	.word	0x0000aaaa

08015768 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8015770:	46c0      	nop			@ (mov r8, r8)
 8015772:	46bd      	mov	sp, r7
 8015774:	b002      	add	sp, #8
 8015776:	bd80      	pop	{r7, pc}

08015778 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	4a03      	ldr	r2, [pc, #12]	@ (8015794 <HAL_IWDG_Refresh+0x1c>)
 8015786:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015788:	2300      	movs	r3, #0
}
 801578a:	0018      	movs	r0, r3
 801578c:	46bd      	mov	sp, r7
 801578e:	b002      	add	sp, #8
 8015790:	bd80      	pop	{r7, pc}
 8015792:	46c0      	nop			@ (mov r8, r8)
 8015794:	0000aaaa 	.word	0x0000aaaa

08015798 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801579c:	4b04      	ldr	r3, [pc, #16]	@ (80157b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 801579e:	681a      	ldr	r2, [r3, #0]
 80157a0:	4b03      	ldr	r3, [pc, #12]	@ (80157b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80157a2:	2180      	movs	r1, #128	@ 0x80
 80157a4:	0049      	lsls	r1, r1, #1
 80157a6:	430a      	orrs	r2, r1
 80157a8:	601a      	str	r2, [r3, #0]
}
 80157aa:	46c0      	nop			@ (mov r8, r8)
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	40007000 	.word	0x40007000

080157b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	2380      	movs	r3, #128	@ 0x80
 80157c0:	009b      	lsls	r3, r3, #2
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d137      	bne.n	8015836 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80157c6:	4b27      	ldr	r3, [pc, #156]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	23c0      	movs	r3, #192	@ 0xc0
 80157cc:	00db      	lsls	r3, r3, #3
 80157ce:	401a      	ands	r2, r3
 80157d0:	2380      	movs	r3, #128	@ 0x80
 80157d2:	009b      	lsls	r3, r3, #2
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d040      	beq.n	801585a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80157d8:	4b22      	ldr	r3, [pc, #136]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4a22      	ldr	r2, [pc, #136]	@ (8015868 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80157de:	401a      	ands	r2, r3
 80157e0:	4b20      	ldr	r3, [pc, #128]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80157e2:	2180      	movs	r1, #128	@ 0x80
 80157e4:	0089      	lsls	r1, r1, #2
 80157e6:	430a      	orrs	r2, r1
 80157e8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80157ea:	4b20      	ldr	r3, [pc, #128]	@ (801586c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	2232      	movs	r2, #50	@ 0x32
 80157f0:	4353      	muls	r3, r2
 80157f2:	491f      	ldr	r1, [pc, #124]	@ (8015870 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80157f4:	0018      	movs	r0, r3
 80157f6:	f7ea fc8f 	bl	8000118 <__udivsi3>
 80157fa:	0003      	movs	r3, r0
 80157fc:	3301      	adds	r3, #1
 80157fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015800:	e002      	b.n	8015808 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	3b01      	subs	r3, #1
 8015806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015808:	4b16      	ldr	r3, [pc, #88]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 801580a:	695a      	ldr	r2, [r3, #20]
 801580c:	2380      	movs	r3, #128	@ 0x80
 801580e:	00db      	lsls	r3, r3, #3
 8015810:	401a      	ands	r2, r3
 8015812:	2380      	movs	r3, #128	@ 0x80
 8015814:	00db      	lsls	r3, r3, #3
 8015816:	429a      	cmp	r2, r3
 8015818:	d102      	bne.n	8015820 <HAL_PWREx_ControlVoltageScaling+0x6c>
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d1f0      	bne.n	8015802 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8015820:	4b10      	ldr	r3, [pc, #64]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015822:	695a      	ldr	r2, [r3, #20]
 8015824:	2380      	movs	r3, #128	@ 0x80
 8015826:	00db      	lsls	r3, r3, #3
 8015828:	401a      	ands	r2, r3
 801582a:	2380      	movs	r3, #128	@ 0x80
 801582c:	00db      	lsls	r3, r3, #3
 801582e:	429a      	cmp	r2, r3
 8015830:	d113      	bne.n	801585a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8015832:	2303      	movs	r3, #3
 8015834:	e012      	b.n	801585c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8015836:	4b0b      	ldr	r3, [pc, #44]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	23c0      	movs	r3, #192	@ 0xc0
 801583c:	00db      	lsls	r3, r3, #3
 801583e:	401a      	ands	r2, r3
 8015840:	2380      	movs	r3, #128	@ 0x80
 8015842:	00db      	lsls	r3, r3, #3
 8015844:	429a      	cmp	r2, r3
 8015846:	d008      	beq.n	801585a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8015848:	4b06      	ldr	r3, [pc, #24]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	4a06      	ldr	r2, [pc, #24]	@ (8015868 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 801584e:	401a      	ands	r2, r3
 8015850:	4b04      	ldr	r3, [pc, #16]	@ (8015864 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015852:	2180      	movs	r1, #128	@ 0x80
 8015854:	00c9      	lsls	r1, r1, #3
 8015856:	430a      	orrs	r2, r1
 8015858:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 801585a:	2300      	movs	r3, #0
}
 801585c:	0018      	movs	r0, r3
 801585e:	46bd      	mov	sp, r7
 8015860:	b004      	add	sp, #16
 8015862:	bd80      	pop	{r7, pc}
 8015864:	40007000 	.word	0x40007000
 8015868:	fffff9ff 	.word	0xfffff9ff
 801586c:	2000025c 	.word	0x2000025c
 8015870:	000f4240 	.word	0x000f4240

08015874 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8015878:	4b03      	ldr	r3, [pc, #12]	@ (8015888 <HAL_PWREx_GetVoltageRange+0x14>)
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	23c0      	movs	r3, #192	@ 0xc0
 801587e:	00db      	lsls	r3, r3, #3
 8015880:	4013      	ands	r3, r2
}
 8015882:	0018      	movs	r0, r3
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}
 8015888:	40007000 	.word	0x40007000

0801588c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
 8015892:	0002      	movs	r2, r0
 8015894:	1dfb      	adds	r3, r7, #7
 8015896:	701a      	strb	r2, [r3, #0]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  /* Clear LPR Bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8015898:	4b13      	ldr	r3, [pc, #76]	@ (80158e8 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 801589a:	681a      	ldr	r2, [r3, #0]
 801589c:	4b12      	ldr	r3, [pc, #72]	@ (80158e8 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 801589e:	4913      	ldr	r1, [pc, #76]	@ (80158ec <HAL_PWREx_EnterSTOP2Mode+0x60>)
 80158a0:	400a      	ands	r2, r1
 80158a2:	601a      	str	r2, [r3, #0]
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 80158a4:	4b10      	ldr	r3, [pc, #64]	@ (80158e8 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	2207      	movs	r2, #7
 80158aa:	4393      	bics	r3, r2
 80158ac:	001a      	movs	r2, r3
 80158ae:	4b0e      	ldr	r3, [pc, #56]	@ (80158e8 <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 80158b0:	2102      	movs	r1, #2
 80158b2:	430a      	orrs	r2, r1
 80158b4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80158b6:	4b0e      	ldr	r3, [pc, #56]	@ (80158f0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 80158b8:	691a      	ldr	r2, [r3, #16]
 80158ba:	4b0d      	ldr	r3, [pc, #52]	@ (80158f0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 80158bc:	2104      	movs	r1, #4
 80158be:	430a      	orrs	r2, r1
 80158c0:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80158c2:	1dfb      	adds	r3, r7, #7
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	d101      	bne.n	80158ce <HAL_PWREx_EnterSTOP2Mode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80158ca:	bf30      	wfi
 80158cc:	e002      	b.n	80158d4 <HAL_PWREx_EnterSTOP2Mode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80158ce:	bf40      	sev
    __WFE();
 80158d0:	bf20      	wfe
    __WFE();
 80158d2:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80158d4:	4b06      	ldr	r3, [pc, #24]	@ (80158f0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 80158d6:	691a      	ldr	r2, [r3, #16]
 80158d8:	4b05      	ldr	r3, [pc, #20]	@ (80158f0 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 80158da:	2104      	movs	r1, #4
 80158dc:	438a      	bics	r2, r1
 80158de:	611a      	str	r2, [r3, #16]
}
 80158e0:	46c0      	nop			@ (mov r8, r8)
 80158e2:	46bd      	mov	sp, r7
 80158e4:	b002      	add	sp, #8
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	40007000 	.word	0x40007000
 80158ec:	ffffbfff 	.word	0xffffbfff
 80158f0:	e000ed00 	.word	0xe000ed00

080158f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80158f4:	b5b0      	push	{r4, r5, r7, lr}
 80158f6:	b088      	sub	sp, #32
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80158fc:	4bc9      	ldr	r3, [pc, #804]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80158fe:	689b      	ldr	r3, [r3, #8]
 8015900:	2238      	movs	r2, #56	@ 0x38
 8015902:	4013      	ands	r3, r2
 8015904:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015906:	4bc7      	ldr	r3, [pc, #796]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	2203      	movs	r2, #3
 801590c:	4013      	ands	r3, r2
 801590e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	2210      	movs	r2, #16
 8015916:	4013      	ands	r3, r2
 8015918:	d100      	bne.n	801591c <HAL_RCC_OscConfig+0x28>
 801591a:	e0ef      	b.n	8015afc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801591c:	69bb      	ldr	r3, [r7, #24]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d007      	beq.n	8015932 <HAL_RCC_OscConfig+0x3e>
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	2b18      	cmp	r3, #24
 8015926:	d000      	beq.n	801592a <HAL_RCC_OscConfig+0x36>
 8015928:	e093      	b.n	8015a52 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	2b01      	cmp	r3, #1
 801592e:	d000      	beq.n	8015932 <HAL_RCC_OscConfig+0x3e>
 8015930:	e08f      	b.n	8015a52 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015932:	4bbc      	ldr	r3, [pc, #752]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2202      	movs	r2, #2
 8015938:	4013      	ands	r3, r2
 801593a:	d006      	beq.n	801594a <HAL_RCC_OscConfig+0x56>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	69db      	ldr	r3, [r3, #28]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d102      	bne.n	801594a <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8015944:	2301      	movs	r3, #1
 8015946:	f000 fbf2 	bl	801612e <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801594e:	4bb5      	ldr	r3, [pc, #724]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	2108      	movs	r1, #8
 8015954:	400b      	ands	r3, r1
 8015956:	d004      	beq.n	8015962 <HAL_RCC_OscConfig+0x6e>
 8015958:	4bb2      	ldr	r3, [pc, #712]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	21f0      	movs	r1, #240	@ 0xf0
 801595e:	400b      	ands	r3, r1
 8015960:	e005      	b.n	801596e <HAL_RCC_OscConfig+0x7a>
 8015962:	49b0      	ldr	r1, [pc, #704]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015964:	2394      	movs	r3, #148	@ 0x94
 8015966:	58cb      	ldr	r3, [r1, r3]
 8015968:	091b      	lsrs	r3, r3, #4
 801596a:	21f0      	movs	r1, #240	@ 0xf0
 801596c:	400b      	ands	r3, r1
 801596e:	4293      	cmp	r3, r2
 8015970:	d225      	bcs.n	80159be <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015976:	0018      	movs	r0, r3
 8015978:	f000 fd90 	bl	801649c <RCC_SetFlashLatencyFromMSIRange>
 801597c:	1e03      	subs	r3, r0, #0
 801597e:	d002      	beq.n	8015986 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8015980:	2301      	movs	r3, #1
 8015982:	f000 fbd4 	bl	801612e <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015986:	4ba7      	ldr	r3, [pc, #668]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	4ba6      	ldr	r3, [pc, #664]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 801598c:	2108      	movs	r1, #8
 801598e:	430a      	orrs	r2, r1
 8015990:	601a      	str	r2, [r3, #0]
 8015992:	4ba4      	ldr	r3, [pc, #656]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	22f0      	movs	r2, #240	@ 0xf0
 8015998:	4393      	bics	r3, r2
 801599a:	0019      	movs	r1, r3
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80159a0:	4ba0      	ldr	r3, [pc, #640]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159a2:	430a      	orrs	r2, r1
 80159a4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80159a6:	4b9f      	ldr	r3, [pc, #636]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	4a9f      	ldr	r2, [pc, #636]	@ (8015c28 <HAL_RCC_OscConfig+0x334>)
 80159ac:	4013      	ands	r3, r2
 80159ae:	0019      	movs	r1, r3
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6a1b      	ldr	r3, [r3, #32]
 80159b4:	021a      	lsls	r2, r3, #8
 80159b6:	4b9b      	ldr	r3, [pc, #620]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159b8:	430a      	orrs	r2, r1
 80159ba:	605a      	str	r2, [r3, #4]
 80159bc:	e027      	b.n	8015a0e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80159be:	4b99      	ldr	r3, [pc, #612]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	4b98      	ldr	r3, [pc, #608]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159c4:	2108      	movs	r1, #8
 80159c6:	430a      	orrs	r2, r1
 80159c8:	601a      	str	r2, [r3, #0]
 80159ca:	4b96      	ldr	r3, [pc, #600]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	22f0      	movs	r2, #240	@ 0xf0
 80159d0:	4393      	bics	r3, r2
 80159d2:	0019      	movs	r1, r3
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80159d8:	4b92      	ldr	r3, [pc, #584]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159da:	430a      	orrs	r2, r1
 80159dc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80159de:	4b91      	ldr	r3, [pc, #580]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	4a91      	ldr	r2, [pc, #580]	@ (8015c28 <HAL_RCC_OscConfig+0x334>)
 80159e4:	4013      	ands	r3, r2
 80159e6:	0019      	movs	r1, r3
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	6a1b      	ldr	r3, [r3, #32]
 80159ec:	021a      	lsls	r2, r3, #8
 80159ee:	4b8d      	ldr	r3, [pc, #564]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 80159f0:	430a      	orrs	r2, r1
 80159f2:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80159f4:	69bb      	ldr	r3, [r7, #24]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d109      	bne.n	8015a0e <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159fe:	0018      	movs	r0, r3
 8015a00:	f000 fd4c 	bl	801649c <RCC_SetFlashLatencyFromMSIRange>
 8015a04:	1e03      	subs	r3, r0, #0
 8015a06:	d002      	beq.n	8015a0e <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8015a08:	2301      	movs	r3, #1
 8015a0a:	f000 fb90 	bl	801612e <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015a0e:	f000 fc87 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8015a12:	0001      	movs	r1, r0
 8015a14:	4b83      	ldr	r3, [pc, #524]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015a16:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8015a18:	0a1b      	lsrs	r3, r3, #8
 8015a1a:	220f      	movs	r2, #15
 8015a1c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015a1e:	4a83      	ldr	r2, [pc, #524]	@ (8015c2c <HAL_RCC_OscConfig+0x338>)
 8015a20:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8015a22:	001a      	movs	r2, r3
 8015a24:	231f      	movs	r3, #31
 8015a26:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015a28:	000a      	movs	r2, r1
 8015a2a:	40da      	lsrs	r2, r3
 8015a2c:	4b80      	ldr	r3, [pc, #512]	@ (8015c30 <HAL_RCC_OscConfig+0x33c>)
 8015a2e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8015a30:	4b80      	ldr	r3, [pc, #512]	@ (8015c34 <HAL_RCC_OscConfig+0x340>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	250f      	movs	r5, #15
 8015a36:	197c      	adds	r4, r7, r5
 8015a38:	0018      	movs	r0, r3
 8015a3a:	f7fc fa9f 	bl	8011f7c <HAL_InitTick>
 8015a3e:	0003      	movs	r3, r0
 8015a40:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8015a42:	197b      	adds	r3, r7, r5
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d057      	beq.n	8015afa <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8015a4a:	197b      	adds	r3, r7, r5
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	f000 fb6e 	bl	801612e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	69db      	ldr	r3, [r3, #28]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d035      	beq.n	8015ac6 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015a5a:	4b72      	ldr	r3, [pc, #456]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015a5c:	681a      	ldr	r2, [r3, #0]
 8015a5e:	4b71      	ldr	r3, [pc, #452]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015a60:	2101      	movs	r1, #1
 8015a62:	430a      	orrs	r2, r1
 8015a64:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015a66:	f7fc fae3 	bl	8012030 <HAL_GetTick>
 8015a6a:	0003      	movs	r3, r0
 8015a6c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015a6e:	e009      	b.n	8015a84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8015a70:	f7fc fade 	bl	8012030 <HAL_GetTick>
 8015a74:	0002      	movs	r2, r0
 8015a76:	693b      	ldr	r3, [r7, #16]
 8015a78:	1ad3      	subs	r3, r2, r3
 8015a7a:	2b02      	cmp	r3, #2
 8015a7c:	d902      	bls.n	8015a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015a7e:	2303      	movs	r3, #3
 8015a80:	f000 fb55 	bl	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015a84:	4b67      	ldr	r3, [pc, #412]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2202      	movs	r2, #2
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	d0f0      	beq.n	8015a70 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015a8e:	4b65      	ldr	r3, [pc, #404]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	4b64      	ldr	r3, [pc, #400]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015a94:	2108      	movs	r1, #8
 8015a96:	430a      	orrs	r2, r1
 8015a98:	601a      	str	r2, [r3, #0]
 8015a9a:	4b62      	ldr	r3, [pc, #392]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	22f0      	movs	r2, #240	@ 0xf0
 8015aa0:	4393      	bics	r3, r2
 8015aa2:	0019      	movs	r1, r3
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015aaa:	430a      	orrs	r2, r1
 8015aac:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015aae:	4b5d      	ldr	r3, [pc, #372]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8015c28 <HAL_RCC_OscConfig+0x334>)
 8015ab4:	4013      	ands	r3, r2
 8015ab6:	0019      	movs	r1, r3
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	6a1b      	ldr	r3, [r3, #32]
 8015abc:	021a      	lsls	r2, r3, #8
 8015abe:	4b59      	ldr	r3, [pc, #356]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015ac0:	430a      	orrs	r2, r1
 8015ac2:	605a      	str	r2, [r3, #4]
 8015ac4:	e01a      	b.n	8015afc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015ac6:	4b57      	ldr	r3, [pc, #348]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	4b56      	ldr	r3, [pc, #344]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015acc:	2101      	movs	r1, #1
 8015ace:	438a      	bics	r2, r1
 8015ad0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015ad2:	f7fc faad 	bl	8012030 <HAL_GetTick>
 8015ad6:	0003      	movs	r3, r0
 8015ad8:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015ada:	e008      	b.n	8015aee <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8015adc:	f7fc faa8 	bl	8012030 <HAL_GetTick>
 8015ae0:	0002      	movs	r2, r0
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	1ad3      	subs	r3, r2, r3
 8015ae6:	2b02      	cmp	r3, #2
 8015ae8:	d901      	bls.n	8015aee <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8015aea:	2303      	movs	r3, #3
 8015aec:	e31f      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015aee:	4b4d      	ldr	r3, [pc, #308]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	2202      	movs	r2, #2
 8015af4:	4013      	ands	r3, r2
 8015af6:	d1f1      	bne.n	8015adc <HAL_RCC_OscConfig+0x1e8>
 8015af8:	e000      	b.n	8015afc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015afa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2201      	movs	r2, #1
 8015b02:	4013      	ands	r3, r2
 8015b04:	d100      	bne.n	8015b08 <HAL_RCC_OscConfig+0x214>
 8015b06:	e065      	b.n	8015bd4 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8015b08:	69bb      	ldr	r3, [r7, #24]
 8015b0a:	2b10      	cmp	r3, #16
 8015b0c:	d005      	beq.n	8015b1a <HAL_RCC_OscConfig+0x226>
 8015b0e:	69bb      	ldr	r3, [r7, #24]
 8015b10:	2b18      	cmp	r3, #24
 8015b12:	d10e      	bne.n	8015b32 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	2b03      	cmp	r3, #3
 8015b18:	d10b      	bne.n	8015b32 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015b1a:	4b42      	ldr	r3, [pc, #264]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	2380      	movs	r3, #128	@ 0x80
 8015b20:	029b      	lsls	r3, r3, #10
 8015b22:	4013      	ands	r3, r2
 8015b24:	d055      	beq.n	8015bd2 <HAL_RCC_OscConfig+0x2de>
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	685b      	ldr	r3, [r3, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d151      	bne.n	8015bd2 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8015b2e:	2301      	movs	r3, #1
 8015b30:	e2fd      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	685a      	ldr	r2, [r3, #4]
 8015b36:	2380      	movs	r3, #128	@ 0x80
 8015b38:	025b      	lsls	r3, r3, #9
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d107      	bne.n	8015b4e <HAL_RCC_OscConfig+0x25a>
 8015b3e:	4b39      	ldr	r3, [pc, #228]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	4b38      	ldr	r3, [pc, #224]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b44:	2180      	movs	r1, #128	@ 0x80
 8015b46:	0249      	lsls	r1, r1, #9
 8015b48:	430a      	orrs	r2, r1
 8015b4a:	601a      	str	r2, [r3, #0]
 8015b4c:	e013      	b.n	8015b76 <HAL_RCC_OscConfig+0x282>
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	685a      	ldr	r2, [r3, #4]
 8015b52:	23a0      	movs	r3, #160	@ 0xa0
 8015b54:	02db      	lsls	r3, r3, #11
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d107      	bne.n	8015b6a <HAL_RCC_OscConfig+0x276>
 8015b5a:	4b32      	ldr	r3, [pc, #200]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b5c:	681a      	ldr	r2, [r3, #0]
 8015b5e:	4b31      	ldr	r3, [pc, #196]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b60:	21a0      	movs	r1, #160	@ 0xa0
 8015b62:	02c9      	lsls	r1, r1, #11
 8015b64:	430a      	orrs	r2, r1
 8015b66:	601a      	str	r2, [r3, #0]
 8015b68:	e005      	b.n	8015b76 <HAL_RCC_OscConfig+0x282>
 8015b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b70:	4931      	ldr	r1, [pc, #196]	@ (8015c38 <HAL_RCC_OscConfig+0x344>)
 8015b72:	400a      	ands	r2, r1
 8015b74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d014      	beq.n	8015ba8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015b7e:	f7fc fa57 	bl	8012030 <HAL_GetTick>
 8015b82:	0003      	movs	r3, r0
 8015b84:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015b86:	e008      	b.n	8015b9a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8015b88:	f7fc fa52 	bl	8012030 <HAL_GetTick>
 8015b8c:	0002      	movs	r2, r0
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	1ad3      	subs	r3, r2, r3
 8015b92:	2b64      	cmp	r3, #100	@ 0x64
 8015b94:	d901      	bls.n	8015b9a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8015b96:	2303      	movs	r3, #3
 8015b98:	e2c9      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015b9a:	4b22      	ldr	r3, [pc, #136]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	2380      	movs	r3, #128	@ 0x80
 8015ba0:	029b      	lsls	r3, r3, #10
 8015ba2:	4013      	ands	r3, r2
 8015ba4:	d0f0      	beq.n	8015b88 <HAL_RCC_OscConfig+0x294>
 8015ba6:	e015      	b.n	8015bd4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015ba8:	f7fc fa42 	bl	8012030 <HAL_GetTick>
 8015bac:	0003      	movs	r3, r0
 8015bae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015bb0:	e008      	b.n	8015bc4 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8015bb2:	f7fc fa3d 	bl	8012030 <HAL_GetTick>
 8015bb6:	0002      	movs	r2, r0
 8015bb8:	693b      	ldr	r3, [r7, #16]
 8015bba:	1ad3      	subs	r3, r2, r3
 8015bbc:	2b64      	cmp	r3, #100	@ 0x64
 8015bbe:	d901      	bls.n	8015bc4 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8015bc0:	2303      	movs	r3, #3
 8015bc2:	e2b4      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015bc4:	4b17      	ldr	r3, [pc, #92]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015bc6:	681a      	ldr	r2, [r3, #0]
 8015bc8:	2380      	movs	r3, #128	@ 0x80
 8015bca:	029b      	lsls	r3, r3, #10
 8015bcc:	4013      	ands	r3, r2
 8015bce:	d1f0      	bne.n	8015bb2 <HAL_RCC_OscConfig+0x2be>
 8015bd0:	e000      	b.n	8015bd4 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015bd2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	2202      	movs	r2, #2
 8015bda:	4013      	ands	r3, r2
 8015bdc:	d100      	bne.n	8015be0 <HAL_RCC_OscConfig+0x2ec>
 8015bde:	e074      	b.n	8015cca <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8015be0:	69bb      	ldr	r3, [r7, #24]
 8015be2:	2b08      	cmp	r3, #8
 8015be4:	d005      	beq.n	8015bf2 <HAL_RCC_OscConfig+0x2fe>
 8015be6:	69bb      	ldr	r3, [r7, #24]
 8015be8:	2b18      	cmp	r3, #24
 8015bea:	d129      	bne.n	8015c40 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	2b02      	cmp	r3, #2
 8015bf0:	d126      	bne.n	8015c40 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	2380      	movs	r3, #128	@ 0x80
 8015bf8:	00db      	lsls	r3, r3, #3
 8015bfa:	4013      	ands	r3, r2
 8015bfc:	d005      	beq.n	8015c0a <HAL_RCC_OscConfig+0x316>
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	68db      	ldr	r3, [r3, #12]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d101      	bne.n	8015c0a <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8015c06:	2301      	movs	r3, #1
 8015c08:	e291      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015c0a:	4b06      	ldr	r3, [pc, #24]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8015c3c <HAL_RCC_OscConfig+0x348>)
 8015c10:	4013      	ands	r3, r2
 8015c12:	0019      	movs	r1, r3
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	691b      	ldr	r3, [r3, #16]
 8015c18:	061a      	lsls	r2, r3, #24
 8015c1a:	4b02      	ldr	r3, [pc, #8]	@ (8015c24 <HAL_RCC_OscConfig+0x330>)
 8015c1c:	430a      	orrs	r2, r1
 8015c1e:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015c20:	e053      	b.n	8015cca <HAL_RCC_OscConfig+0x3d6>
 8015c22:	46c0      	nop			@ (mov r8, r8)
 8015c24:	40021000 	.word	0x40021000
 8015c28:	ffff00ff 	.word	0xffff00ff
 8015c2c:	0801b078 	.word	0x0801b078
 8015c30:	2000025c 	.word	0x2000025c
 8015c34:	2000027c 	.word	0x2000027c
 8015c38:	fffaffff 	.word	0xfffaffff
 8015c3c:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	68db      	ldr	r3, [r3, #12]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d026      	beq.n	8015c96 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015c48:	4bc7      	ldr	r3, [pc, #796]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015c4a:	681a      	ldr	r2, [r3, #0]
 8015c4c:	4bc6      	ldr	r3, [pc, #792]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015c4e:	2180      	movs	r1, #128	@ 0x80
 8015c50:	0049      	lsls	r1, r1, #1
 8015c52:	430a      	orrs	r2, r1
 8015c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015c56:	f7fc f9eb 	bl	8012030 <HAL_GetTick>
 8015c5a:	0003      	movs	r3, r0
 8015c5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015c5e:	e008      	b.n	8015c72 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8015c60:	f7fc f9e6 	bl	8012030 <HAL_GetTick>
 8015c64:	0002      	movs	r2, r0
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	2b02      	cmp	r3, #2
 8015c6c:	d901      	bls.n	8015c72 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8015c6e:	2303      	movs	r3, #3
 8015c70:	e25d      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015c72:	4bbd      	ldr	r3, [pc, #756]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	2380      	movs	r3, #128	@ 0x80
 8015c78:	00db      	lsls	r3, r3, #3
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	d0f0      	beq.n	8015c60 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015c7e:	4bba      	ldr	r3, [pc, #744]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015c80:	685b      	ldr	r3, [r3, #4]
 8015c82:	4aba      	ldr	r2, [pc, #744]	@ (8015f6c <HAL_RCC_OscConfig+0x678>)
 8015c84:	4013      	ands	r3, r2
 8015c86:	0019      	movs	r1, r3
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	691b      	ldr	r3, [r3, #16]
 8015c8c:	061a      	lsls	r2, r3, #24
 8015c8e:	4bb6      	ldr	r3, [pc, #728]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015c90:	430a      	orrs	r2, r1
 8015c92:	605a      	str	r2, [r3, #4]
 8015c94:	e019      	b.n	8015cca <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015c96:	4bb4      	ldr	r3, [pc, #720]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015c98:	681a      	ldr	r2, [r3, #0]
 8015c9a:	4bb3      	ldr	r3, [pc, #716]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015c9c:	49b4      	ldr	r1, [pc, #720]	@ (8015f70 <HAL_RCC_OscConfig+0x67c>)
 8015c9e:	400a      	ands	r2, r1
 8015ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015ca2:	f7fc f9c5 	bl	8012030 <HAL_GetTick>
 8015ca6:	0003      	movs	r3, r0
 8015ca8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015caa:	e008      	b.n	8015cbe <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8015cac:	f7fc f9c0 	bl	8012030 <HAL_GetTick>
 8015cb0:	0002      	movs	r2, r0
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	2b02      	cmp	r3, #2
 8015cb8:	d901      	bls.n	8015cbe <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8015cba:	2303      	movs	r3, #3
 8015cbc:	e237      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015cbe:	4baa      	ldr	r3, [pc, #680]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015cc0:	681a      	ldr	r2, [r3, #0]
 8015cc2:	2380      	movs	r3, #128	@ 0x80
 8015cc4:	00db      	lsls	r3, r3, #3
 8015cc6:	4013      	ands	r3, r2
 8015cc8:	d1f0      	bne.n	8015cac <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	2208      	movs	r2, #8
 8015cd0:	4013      	ands	r3, r2
 8015cd2:	d051      	beq.n	8015d78 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	695b      	ldr	r3, [r3, #20]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d031      	beq.n	8015d40 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	699b      	ldr	r3, [r3, #24]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d108      	bne.n	8015cf6 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8015ce4:	4aa0      	ldr	r2, [pc, #640]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015ce6:	2394      	movs	r3, #148	@ 0x94
 8015ce8:	58d3      	ldr	r3, [r2, r3]
 8015cea:	499f      	ldr	r1, [pc, #636]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015cec:	2204      	movs	r2, #4
 8015cee:	4393      	bics	r3, r2
 8015cf0:	2294      	movs	r2, #148	@ 0x94
 8015cf2:	508b      	str	r3, [r1, r2]
 8015cf4:	e007      	b.n	8015d06 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8015cf6:	4a9c      	ldr	r2, [pc, #624]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015cf8:	2394      	movs	r3, #148	@ 0x94
 8015cfa:	58d3      	ldr	r3, [r2, r3]
 8015cfc:	499a      	ldr	r1, [pc, #616]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015cfe:	2204      	movs	r2, #4
 8015d00:	4313      	orrs	r3, r2
 8015d02:	2294      	movs	r2, #148	@ 0x94
 8015d04:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015d06:	4a98      	ldr	r2, [pc, #608]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d08:	2394      	movs	r3, #148	@ 0x94
 8015d0a:	58d3      	ldr	r3, [r2, r3]
 8015d0c:	4996      	ldr	r1, [pc, #600]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d0e:	2201      	movs	r2, #1
 8015d10:	4313      	orrs	r3, r2
 8015d12:	2294      	movs	r2, #148	@ 0x94
 8015d14:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015d16:	f7fc f98b 	bl	8012030 <HAL_GetTick>
 8015d1a:	0003      	movs	r3, r0
 8015d1c:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015d1e:	e008      	b.n	8015d32 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015d20:	f7fc f986 	bl	8012030 <HAL_GetTick>
 8015d24:	0002      	movs	r2, r0
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	1ad3      	subs	r3, r2, r3
 8015d2a:	2b11      	cmp	r3, #17
 8015d2c:	d901      	bls.n	8015d32 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8015d2e:	2303      	movs	r3, #3
 8015d30:	e1fd      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015d32:	4a8d      	ldr	r2, [pc, #564]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d34:	2394      	movs	r3, #148	@ 0x94
 8015d36:	58d3      	ldr	r3, [r2, r3]
 8015d38:	2202      	movs	r2, #2
 8015d3a:	4013      	ands	r3, r2
 8015d3c:	d0f0      	beq.n	8015d20 <HAL_RCC_OscConfig+0x42c>
 8015d3e:	e01b      	b.n	8015d78 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015d40:	4a89      	ldr	r2, [pc, #548]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d42:	2394      	movs	r3, #148	@ 0x94
 8015d44:	58d3      	ldr	r3, [r2, r3]
 8015d46:	4988      	ldr	r1, [pc, #544]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d48:	2201      	movs	r2, #1
 8015d4a:	4393      	bics	r3, r2
 8015d4c:	2294      	movs	r2, #148	@ 0x94
 8015d4e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015d50:	f7fc f96e 	bl	8012030 <HAL_GetTick>
 8015d54:	0003      	movs	r3, r0
 8015d56:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015d58:	e008      	b.n	8015d6c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015d5a:	f7fc f969 	bl	8012030 <HAL_GetTick>
 8015d5e:	0002      	movs	r2, r0
 8015d60:	693b      	ldr	r3, [r7, #16]
 8015d62:	1ad3      	subs	r3, r2, r3
 8015d64:	2b11      	cmp	r3, #17
 8015d66:	d901      	bls.n	8015d6c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8015d68:	2303      	movs	r3, #3
 8015d6a:	e1e0      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015d6c:	4a7e      	ldr	r2, [pc, #504]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d6e:	2394      	movs	r3, #148	@ 0x94
 8015d70:	58d3      	ldr	r3, [r2, r3]
 8015d72:	2202      	movs	r2, #2
 8015d74:	4013      	ands	r3, r2
 8015d76:	d1f0      	bne.n	8015d5a <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	2204      	movs	r2, #4
 8015d7e:	4013      	ands	r3, r2
 8015d80:	d100      	bne.n	8015d84 <HAL_RCC_OscConfig+0x490>
 8015d82:	e10d      	b.n	8015fa0 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015d84:	201f      	movs	r0, #31
 8015d86:	183b      	adds	r3, r7, r0
 8015d88:	2200      	movs	r2, #0
 8015d8a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8015d8c:	4b76      	ldr	r3, [pc, #472]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015d90:	2380      	movs	r3, #128	@ 0x80
 8015d92:	055b      	lsls	r3, r3, #21
 8015d94:	4013      	ands	r3, r2
 8015d96:	d110      	bne.n	8015dba <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015d98:	4b73      	ldr	r3, [pc, #460]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015d9c:	4b72      	ldr	r3, [pc, #456]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015d9e:	2180      	movs	r1, #128	@ 0x80
 8015da0:	0549      	lsls	r1, r1, #21
 8015da2:	430a      	orrs	r2, r1
 8015da4:	659a      	str	r2, [r3, #88]	@ 0x58
 8015da6:	4b70      	ldr	r3, [pc, #448]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015da8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015daa:	2380      	movs	r3, #128	@ 0x80
 8015dac:	055b      	lsls	r3, r3, #21
 8015dae:	4013      	ands	r3, r2
 8015db0:	60bb      	str	r3, [r7, #8]
 8015db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015db4:	183b      	adds	r3, r7, r0
 8015db6:	2201      	movs	r2, #1
 8015db8:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015dba:	4b6e      	ldr	r3, [pc, #440]	@ (8015f74 <HAL_RCC_OscConfig+0x680>)
 8015dbc:	681a      	ldr	r2, [r3, #0]
 8015dbe:	2380      	movs	r3, #128	@ 0x80
 8015dc0:	005b      	lsls	r3, r3, #1
 8015dc2:	4013      	ands	r3, r2
 8015dc4:	d11a      	bne.n	8015dfc <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015dc6:	4b6b      	ldr	r3, [pc, #428]	@ (8015f74 <HAL_RCC_OscConfig+0x680>)
 8015dc8:	681a      	ldr	r2, [r3, #0]
 8015dca:	4b6a      	ldr	r3, [pc, #424]	@ (8015f74 <HAL_RCC_OscConfig+0x680>)
 8015dcc:	2180      	movs	r1, #128	@ 0x80
 8015dce:	0049      	lsls	r1, r1, #1
 8015dd0:	430a      	orrs	r2, r1
 8015dd2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015dd4:	f7fc f92c 	bl	8012030 <HAL_GetTick>
 8015dd8:	0003      	movs	r3, r0
 8015dda:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015ddc:	e008      	b.n	8015df0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015dde:	f7fc f927 	bl	8012030 <HAL_GetTick>
 8015de2:	0002      	movs	r2, r0
 8015de4:	693b      	ldr	r3, [r7, #16]
 8015de6:	1ad3      	subs	r3, r2, r3
 8015de8:	2b02      	cmp	r3, #2
 8015dea:	d901      	bls.n	8015df0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8015dec:	2303      	movs	r3, #3
 8015dee:	e19e      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015df0:	4b60      	ldr	r3, [pc, #384]	@ (8015f74 <HAL_RCC_OscConfig+0x680>)
 8015df2:	681a      	ldr	r2, [r3, #0]
 8015df4:	2380      	movs	r3, #128	@ 0x80
 8015df6:	005b      	lsls	r3, r3, #1
 8015df8:	4013      	ands	r3, r2
 8015dfa:	d0f0      	beq.n	8015dde <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	2201      	movs	r2, #1
 8015e02:	4013      	ands	r3, r2
 8015e04:	d01e      	beq.n	8015e44 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	689b      	ldr	r3, [r3, #8]
 8015e0a:	2204      	movs	r2, #4
 8015e0c:	4013      	ands	r3, r2
 8015e0e:	d010      	beq.n	8015e32 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015e10:	4a55      	ldr	r2, [pc, #340]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e12:	2390      	movs	r3, #144	@ 0x90
 8015e14:	58d3      	ldr	r3, [r2, r3]
 8015e16:	4954      	ldr	r1, [pc, #336]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e18:	2204      	movs	r2, #4
 8015e1a:	4313      	orrs	r3, r2
 8015e1c:	2290      	movs	r2, #144	@ 0x90
 8015e1e:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015e20:	4a51      	ldr	r2, [pc, #324]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e22:	2390      	movs	r3, #144	@ 0x90
 8015e24:	58d3      	ldr	r3, [r2, r3]
 8015e26:	4950      	ldr	r1, [pc, #320]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e28:	2201      	movs	r2, #1
 8015e2a:	4313      	orrs	r3, r2
 8015e2c:	2290      	movs	r2, #144	@ 0x90
 8015e2e:	508b      	str	r3, [r1, r2]
 8015e30:	e018      	b.n	8015e64 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015e32:	4a4d      	ldr	r2, [pc, #308]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e34:	2390      	movs	r3, #144	@ 0x90
 8015e36:	58d3      	ldr	r3, [r2, r3]
 8015e38:	494b      	ldr	r1, [pc, #300]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e3a:	2201      	movs	r2, #1
 8015e3c:	4313      	orrs	r3, r2
 8015e3e:	2290      	movs	r2, #144	@ 0x90
 8015e40:	508b      	str	r3, [r1, r2]
 8015e42:	e00f      	b.n	8015e64 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015e44:	4a48      	ldr	r2, [pc, #288]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e46:	2390      	movs	r3, #144	@ 0x90
 8015e48:	58d3      	ldr	r3, [r2, r3]
 8015e4a:	4947      	ldr	r1, [pc, #284]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	4393      	bics	r3, r2
 8015e50:	2290      	movs	r2, #144	@ 0x90
 8015e52:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015e54:	4a44      	ldr	r2, [pc, #272]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e56:	2390      	movs	r3, #144	@ 0x90
 8015e58:	58d3      	ldr	r3, [r2, r3]
 8015e5a:	4943      	ldr	r1, [pc, #268]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e5c:	2204      	movs	r2, #4
 8015e5e:	4393      	bics	r3, r2
 8015e60:	2290      	movs	r2, #144	@ 0x90
 8015e62:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	689b      	ldr	r3, [r3, #8]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d04f      	beq.n	8015f0c <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015e6c:	f7fc f8e0 	bl	8012030 <HAL_GetTick>
 8015e70:	0003      	movs	r3, r0
 8015e72:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015e74:	e009      	b.n	8015e8a <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015e76:	f7fc f8db 	bl	8012030 <HAL_GetTick>
 8015e7a:	0002      	movs	r2, r0
 8015e7c:	693b      	ldr	r3, [r7, #16]
 8015e7e:	1ad3      	subs	r3, r2, r3
 8015e80:	4a3d      	ldr	r2, [pc, #244]	@ (8015f78 <HAL_RCC_OscConfig+0x684>)
 8015e82:	4293      	cmp	r3, r2
 8015e84:	d901      	bls.n	8015e8a <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8015e86:	2303      	movs	r3, #3
 8015e88:	e151      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015e8a:	4a37      	ldr	r2, [pc, #220]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015e8c:	2390      	movs	r3, #144	@ 0x90
 8015e8e:	58d3      	ldr	r3, [r2, r3]
 8015e90:	2202      	movs	r2, #2
 8015e92:	4013      	ands	r3, r2
 8015e94:	d0ef      	beq.n	8015e76 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	689b      	ldr	r3, [r3, #8]
 8015e9a:	2280      	movs	r2, #128	@ 0x80
 8015e9c:	4013      	ands	r3, r2
 8015e9e:	d01a      	beq.n	8015ed6 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8015ea0:	4a31      	ldr	r2, [pc, #196]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015ea2:	2390      	movs	r3, #144	@ 0x90
 8015ea4:	58d3      	ldr	r3, [r2, r3]
 8015ea6:	4930      	ldr	r1, [pc, #192]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015ea8:	2280      	movs	r2, #128	@ 0x80
 8015eaa:	4313      	orrs	r3, r2
 8015eac:	2290      	movs	r2, #144	@ 0x90
 8015eae:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8015eb0:	e009      	b.n	8015ec6 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015eb2:	f7fc f8bd 	bl	8012030 <HAL_GetTick>
 8015eb6:	0002      	movs	r2, r0
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	1ad3      	subs	r3, r2, r3
 8015ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8015f78 <HAL_RCC_OscConfig+0x684>)
 8015ebe:	4293      	cmp	r3, r2
 8015ec0:	d901      	bls.n	8015ec6 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8015ec2:	2303      	movs	r3, #3
 8015ec4:	e133      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8015ec6:	4a28      	ldr	r2, [pc, #160]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015ec8:	2390      	movs	r3, #144	@ 0x90
 8015eca:	58d2      	ldr	r2, [r2, r3]
 8015ecc:	2380      	movs	r3, #128	@ 0x80
 8015ece:	011b      	lsls	r3, r3, #4
 8015ed0:	4013      	ands	r3, r2
 8015ed2:	d0ee      	beq.n	8015eb2 <HAL_RCC_OscConfig+0x5be>
 8015ed4:	e059      	b.n	8015f8a <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8015ed6:	4a24      	ldr	r2, [pc, #144]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015ed8:	2390      	movs	r3, #144	@ 0x90
 8015eda:	58d3      	ldr	r3, [r2, r3]
 8015edc:	4922      	ldr	r1, [pc, #136]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015ede:	2280      	movs	r2, #128	@ 0x80
 8015ee0:	4393      	bics	r3, r2
 8015ee2:	2290      	movs	r2, #144	@ 0x90
 8015ee4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015ee6:	e009      	b.n	8015efc <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015ee8:	f7fc f8a2 	bl	8012030 <HAL_GetTick>
 8015eec:	0002      	movs	r2, r0
 8015eee:	693b      	ldr	r3, [r7, #16]
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	4a21      	ldr	r2, [pc, #132]	@ (8015f78 <HAL_RCC_OscConfig+0x684>)
 8015ef4:	4293      	cmp	r3, r2
 8015ef6:	d901      	bls.n	8015efc <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8015ef8:	2303      	movs	r3, #3
 8015efa:	e118      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015efc:	4a1a      	ldr	r2, [pc, #104]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015efe:	2390      	movs	r3, #144	@ 0x90
 8015f00:	58d2      	ldr	r2, [r2, r3]
 8015f02:	2380      	movs	r3, #128	@ 0x80
 8015f04:	011b      	lsls	r3, r3, #4
 8015f06:	4013      	ands	r3, r2
 8015f08:	d1ee      	bne.n	8015ee8 <HAL_RCC_OscConfig+0x5f4>
 8015f0a:	e03e      	b.n	8015f8a <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015f0c:	f7fc f890 	bl	8012030 <HAL_GetTick>
 8015f10:	0003      	movs	r3, r0
 8015f12:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015f14:	e009      	b.n	8015f2a <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015f16:	f7fc f88b 	bl	8012030 <HAL_GetTick>
 8015f1a:	0002      	movs	r2, r0
 8015f1c:	693b      	ldr	r3, [r7, #16]
 8015f1e:	1ad3      	subs	r3, r2, r3
 8015f20:	4a15      	ldr	r2, [pc, #84]	@ (8015f78 <HAL_RCC_OscConfig+0x684>)
 8015f22:	4293      	cmp	r3, r2
 8015f24:	d901      	bls.n	8015f2a <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8015f26:	2303      	movs	r3, #3
 8015f28:	e101      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015f2c:	2390      	movs	r3, #144	@ 0x90
 8015f2e:	58d3      	ldr	r3, [r2, r3]
 8015f30:	2202      	movs	r2, #2
 8015f32:	4013      	ands	r3, r2
 8015f34:	d1ef      	bne.n	8015f16 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8015f36:	4a0c      	ldr	r2, [pc, #48]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015f38:	2390      	movs	r3, #144	@ 0x90
 8015f3a:	58d3      	ldr	r3, [r2, r3]
 8015f3c:	2280      	movs	r2, #128	@ 0x80
 8015f3e:	4013      	ands	r3, r2
 8015f40:	d023      	beq.n	8015f8a <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8015f42:	4a09      	ldr	r2, [pc, #36]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015f44:	2390      	movs	r3, #144	@ 0x90
 8015f46:	58d3      	ldr	r3, [r2, r3]
 8015f48:	4907      	ldr	r1, [pc, #28]	@ (8015f68 <HAL_RCC_OscConfig+0x674>)
 8015f4a:	2280      	movs	r2, #128	@ 0x80
 8015f4c:	4393      	bics	r3, r2
 8015f4e:	2290      	movs	r2, #144	@ 0x90
 8015f50:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015f52:	e013      	b.n	8015f7c <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015f54:	f7fc f86c 	bl	8012030 <HAL_GetTick>
 8015f58:	0002      	movs	r2, r0
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	1ad3      	subs	r3, r2, r3
 8015f5e:	4a06      	ldr	r2, [pc, #24]	@ (8015f78 <HAL_RCC_OscConfig+0x684>)
 8015f60:	4293      	cmp	r3, r2
 8015f62:	d90b      	bls.n	8015f7c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8015f64:	2303      	movs	r3, #3
 8015f66:	e0e2      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
 8015f68:	40021000 	.word	0x40021000
 8015f6c:	80ffffff 	.word	0x80ffffff
 8015f70:	fffffeff 	.word	0xfffffeff
 8015f74:	40007000 	.word	0x40007000
 8015f78:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015f7e:	2390      	movs	r3, #144	@ 0x90
 8015f80:	58d2      	ldr	r2, [r2, r3]
 8015f82:	2380      	movs	r3, #128	@ 0x80
 8015f84:	011b      	lsls	r3, r3, #4
 8015f86:	4013      	ands	r3, r2
 8015f88:	d1e4      	bne.n	8015f54 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8015f8a:	231f      	movs	r3, #31
 8015f8c:	18fb      	adds	r3, r7, r3
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d105      	bne.n	8015fa0 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015f94:	4b68      	ldr	r3, [pc, #416]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015f96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015f98:	4b67      	ldr	r3, [pc, #412]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015f9a:	4968      	ldr	r1, [pc, #416]	@ (801613c <HAL_RCC_OscConfig+0x848>)
 8015f9c:	400a      	ands	r2, r1
 8015f9e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2220      	movs	r2, #32
 8015fa6:	4013      	ands	r3, r2
 8015fa8:	d03c      	beq.n	8016024 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d01c      	beq.n	8015fec <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8015fb2:	4a61      	ldr	r2, [pc, #388]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015fb4:	2398      	movs	r3, #152	@ 0x98
 8015fb6:	58d3      	ldr	r3, [r2, r3]
 8015fb8:	495f      	ldr	r1, [pc, #380]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015fba:	2201      	movs	r2, #1
 8015fbc:	4313      	orrs	r3, r2
 8015fbe:	2298      	movs	r2, #152	@ 0x98
 8015fc0:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015fc2:	f7fc f835 	bl	8012030 <HAL_GetTick>
 8015fc6:	0003      	movs	r3, r0
 8015fc8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8015fca:	e008      	b.n	8015fde <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015fcc:	f7fc f830 	bl	8012030 <HAL_GetTick>
 8015fd0:	0002      	movs	r2, r0
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	1ad3      	subs	r3, r2, r3
 8015fd6:	2b02      	cmp	r3, #2
 8015fd8:	d901      	bls.n	8015fde <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8015fda:	2303      	movs	r3, #3
 8015fdc:	e0a7      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8015fde:	4a56      	ldr	r2, [pc, #344]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015fe0:	2398      	movs	r3, #152	@ 0x98
 8015fe2:	58d3      	ldr	r3, [r2, r3]
 8015fe4:	2202      	movs	r2, #2
 8015fe6:	4013      	ands	r3, r2
 8015fe8:	d0f0      	beq.n	8015fcc <HAL_RCC_OscConfig+0x6d8>
 8015fea:	e01b      	b.n	8016024 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8015fec:	4a52      	ldr	r2, [pc, #328]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015fee:	2398      	movs	r3, #152	@ 0x98
 8015ff0:	58d3      	ldr	r3, [r2, r3]
 8015ff2:	4951      	ldr	r1, [pc, #324]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8015ff4:	2201      	movs	r2, #1
 8015ff6:	4393      	bics	r3, r2
 8015ff8:	2298      	movs	r2, #152	@ 0x98
 8015ffa:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015ffc:	f7fc f818 	bl	8012030 <HAL_GetTick>
 8016000:	0003      	movs	r3, r0
 8016002:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8016004:	e008      	b.n	8016018 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8016006:	f7fc f813 	bl	8012030 <HAL_GetTick>
 801600a:	0002      	movs	r2, r0
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	1ad3      	subs	r3, r2, r3
 8016010:	2b02      	cmp	r3, #2
 8016012:	d901      	bls.n	8016018 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8016014:	2303      	movs	r3, #3
 8016016:	e08a      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8016018:	4a47      	ldr	r2, [pc, #284]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 801601a:	2398      	movs	r3, #152	@ 0x98
 801601c:	58d3      	ldr	r3, [r2, r3]
 801601e:	2202      	movs	r2, #2
 8016020:	4013      	ands	r3, r2
 8016022:	d1f0      	bne.n	8016006 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016028:	2b00      	cmp	r3, #0
 801602a:	d100      	bne.n	801602e <HAL_RCC_OscConfig+0x73a>
 801602c:	e07e      	b.n	801612c <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801602e:	4b42      	ldr	r3, [pc, #264]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8016030:	689b      	ldr	r3, [r3, #8]
 8016032:	2238      	movs	r2, #56	@ 0x38
 8016034:	4013      	ands	r3, r2
 8016036:	2b18      	cmp	r3, #24
 8016038:	d100      	bne.n	801603c <HAL_RCC_OscConfig+0x748>
 801603a:	e075      	b.n	8016128 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016040:	2b02      	cmp	r3, #2
 8016042:	d156      	bne.n	80160f2 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016044:	4b3c      	ldr	r3, [pc, #240]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 8016046:	681a      	ldr	r2, [r3, #0]
 8016048:	4b3b      	ldr	r3, [pc, #236]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 801604a:	493d      	ldr	r1, [pc, #244]	@ (8016140 <HAL_RCC_OscConfig+0x84c>)
 801604c:	400a      	ands	r2, r1
 801604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016050:	f7fb ffee 	bl	8012030 <HAL_GetTick>
 8016054:	0003      	movs	r3, r0
 8016056:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016058:	e008      	b.n	801606c <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801605a:	f7fb ffe9 	bl	8012030 <HAL_GetTick>
 801605e:	0002      	movs	r2, r0
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	1ad3      	subs	r3, r2, r3
 8016064:	2b02      	cmp	r3, #2
 8016066:	d901      	bls.n	801606c <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8016068:	2303      	movs	r3, #3
 801606a:	e060      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801606c:	4b32      	ldr	r3, [pc, #200]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 801606e:	681a      	ldr	r2, [r3, #0]
 8016070:	2380      	movs	r3, #128	@ 0x80
 8016072:	049b      	lsls	r3, r3, #18
 8016074:	4013      	ands	r3, r2
 8016076:	d1f0      	bne.n	801605a <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8016078:	4b2f      	ldr	r3, [pc, #188]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 801607a:	68db      	ldr	r3, [r3, #12]
 801607c:	4a31      	ldr	r2, [pc, #196]	@ (8016144 <HAL_RCC_OscConfig+0x850>)
 801607e:	4013      	ands	r3, r2
 8016080:	0019      	movs	r1, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801608a:	431a      	orrs	r2, r3
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016090:	021b      	lsls	r3, r3, #8
 8016092:	431a      	orrs	r2, r3
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016098:	431a      	orrs	r2, r3
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801609e:	431a      	orrs	r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80160a4:	431a      	orrs	r2, r3
 80160a6:	4b24      	ldr	r3, [pc, #144]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160a8:	430a      	orrs	r2, r1
 80160aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 80160ac:	4b22      	ldr	r3, [pc, #136]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160ae:	68da      	ldr	r2, [r3, #12]
 80160b0:	4b21      	ldr	r3, [pc, #132]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160b2:	2180      	movs	r1, #128	@ 0x80
 80160b4:	0549      	lsls	r1, r1, #21
 80160b6:	430a      	orrs	r2, r1
 80160b8:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80160ba:	4b1f      	ldr	r3, [pc, #124]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160bc:	681a      	ldr	r2, [r3, #0]
 80160be:	4b1e      	ldr	r3, [pc, #120]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160c0:	2180      	movs	r1, #128	@ 0x80
 80160c2:	0449      	lsls	r1, r1, #17
 80160c4:	430a      	orrs	r2, r1
 80160c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80160c8:	f7fb ffb2 	bl	8012030 <HAL_GetTick>
 80160cc:	0003      	movs	r3, r0
 80160ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80160d0:	e008      	b.n	80160e4 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80160d2:	f7fb ffad 	bl	8012030 <HAL_GetTick>
 80160d6:	0002      	movs	r2, r0
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	1ad3      	subs	r3, r2, r3
 80160dc:	2b02      	cmp	r3, #2
 80160de:	d901      	bls.n	80160e4 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80160e0:	2303      	movs	r3, #3
 80160e2:	e024      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80160e4:	4b14      	ldr	r3, [pc, #80]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	2380      	movs	r3, #128	@ 0x80
 80160ea:	049b      	lsls	r3, r3, #18
 80160ec:	4013      	ands	r3, r2
 80160ee:	d0f0      	beq.n	80160d2 <HAL_RCC_OscConfig+0x7de>
 80160f0:	e01c      	b.n	801612c <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80160f2:	4b11      	ldr	r3, [pc, #68]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160f4:	681a      	ldr	r2, [r3, #0]
 80160f6:	4b10      	ldr	r3, [pc, #64]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 80160f8:	4911      	ldr	r1, [pc, #68]	@ (8016140 <HAL_RCC_OscConfig+0x84c>)
 80160fa:	400a      	ands	r2, r1
 80160fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80160fe:	f7fb ff97 	bl	8012030 <HAL_GetTick>
 8016102:	0003      	movs	r3, r0
 8016104:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016106:	e008      	b.n	801611a <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016108:	f7fb ff92 	bl	8012030 <HAL_GetTick>
 801610c:	0002      	movs	r2, r0
 801610e:	693b      	ldr	r3, [r7, #16]
 8016110:	1ad3      	subs	r3, r2, r3
 8016112:	2b02      	cmp	r3, #2
 8016114:	d901      	bls.n	801611a <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8016116:	2303      	movs	r3, #3
 8016118:	e009      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801611a:	4b07      	ldr	r3, [pc, #28]	@ (8016138 <HAL_RCC_OscConfig+0x844>)
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	2380      	movs	r3, #128	@ 0x80
 8016120:	049b      	lsls	r3, r3, #18
 8016122:	4013      	ands	r3, r2
 8016124:	d1f0      	bne.n	8016108 <HAL_RCC_OscConfig+0x814>
 8016126:	e001      	b.n	801612c <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8016128:	2301      	movs	r3, #1
 801612a:	e000      	b.n	801612e <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 801612c:	2300      	movs	r3, #0
}
 801612e:	0018      	movs	r0, r3
 8016130:	46bd      	mov	sp, r7
 8016132:	b008      	add	sp, #32
 8016134:	bdb0      	pop	{r4, r5, r7, pc}
 8016136:	46c0      	nop			@ (mov r8, r8)
 8016138:	40021000 	.word	0x40021000
 801613c:	efffffff 	.word	0xefffffff
 8016140:	feffffff 	.word	0xfeffffff
 8016144:	11c1808c 	.word	0x11c1808c

08016148 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8016148:	b5b0      	push	{r4, r5, r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016152:	4b6c      	ldr	r3, [pc, #432]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2207      	movs	r2, #7
 8016158:	4013      	ands	r3, r2
 801615a:	683a      	ldr	r2, [r7, #0]
 801615c:	429a      	cmp	r2, r3
 801615e:	d911      	bls.n	8016184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016160:	4b68      	ldr	r3, [pc, #416]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	2207      	movs	r2, #7
 8016166:	4393      	bics	r3, r2
 8016168:	0019      	movs	r1, r3
 801616a:	4b66      	ldr	r3, [pc, #408]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	430a      	orrs	r2, r1
 8016170:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016172:	4b64      	ldr	r3, [pc, #400]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	2207      	movs	r2, #7
 8016178:	4013      	ands	r3, r2
 801617a:	683a      	ldr	r2, [r7, #0]
 801617c:	429a      	cmp	r2, r3
 801617e:	d001      	beq.n	8016184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8016180:	2301      	movs	r3, #1
 8016182:	e0bb      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2201      	movs	r2, #1
 801618a:	4013      	ands	r3, r2
 801618c:	d100      	bne.n	8016190 <HAL_RCC_ClockConfig+0x48>
 801618e:	e064      	b.n	801625a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	2b03      	cmp	r3, #3
 8016196:	d107      	bne.n	80161a8 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8016198:	4b5b      	ldr	r3, [pc, #364]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	2380      	movs	r3, #128	@ 0x80
 801619e:	049b      	lsls	r3, r3, #18
 80161a0:	4013      	ands	r3, r2
 80161a2:	d138      	bne.n	8016216 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 80161a4:	2301      	movs	r3, #1
 80161a6:	e0a9      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	685b      	ldr	r3, [r3, #4]
 80161ac:	2b02      	cmp	r3, #2
 80161ae:	d107      	bne.n	80161c0 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80161b0:	4b55      	ldr	r3, [pc, #340]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 80161b2:	681a      	ldr	r2, [r3, #0]
 80161b4:	2380      	movs	r3, #128	@ 0x80
 80161b6:	029b      	lsls	r3, r3, #10
 80161b8:	4013      	ands	r3, r2
 80161ba:	d12c      	bne.n	8016216 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80161bc:	2301      	movs	r3, #1
 80161be:	e09d      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d106      	bne.n	80161d6 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80161c8:	4b4f      	ldr	r3, [pc, #316]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	2202      	movs	r2, #2
 80161ce:	4013      	ands	r3, r2
 80161d0:	d121      	bne.n	8016216 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80161d2:	2301      	movs	r3, #1
 80161d4:	e092      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	685b      	ldr	r3, [r3, #4]
 80161da:	2b01      	cmp	r3, #1
 80161dc:	d107      	bne.n	80161ee <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80161de:	4b4a      	ldr	r3, [pc, #296]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 80161e0:	681a      	ldr	r2, [r3, #0]
 80161e2:	2380      	movs	r3, #128	@ 0x80
 80161e4:	00db      	lsls	r3, r3, #3
 80161e6:	4013      	ands	r3, r2
 80161e8:	d115      	bne.n	8016216 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80161ea:	2301      	movs	r3, #1
 80161ec:	e086      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	2b04      	cmp	r3, #4
 80161f4:	d107      	bne.n	8016206 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80161f6:	4a44      	ldr	r2, [pc, #272]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 80161f8:	2394      	movs	r3, #148	@ 0x94
 80161fa:	58d3      	ldr	r3, [r2, r3]
 80161fc:	2202      	movs	r2, #2
 80161fe:	4013      	ands	r3, r2
 8016200:	d109      	bne.n	8016216 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8016202:	2301      	movs	r3, #1
 8016204:	e07a      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016206:	4a40      	ldr	r2, [pc, #256]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 8016208:	2390      	movs	r3, #144	@ 0x90
 801620a:	58d3      	ldr	r3, [r2, r3]
 801620c:	2202      	movs	r2, #2
 801620e:	4013      	ands	r3, r2
 8016210:	d101      	bne.n	8016216 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8016212:	2301      	movs	r3, #1
 8016214:	e072      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8016216:	4b3c      	ldr	r3, [pc, #240]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	2207      	movs	r2, #7
 801621c:	4393      	bics	r3, r2
 801621e:	0019      	movs	r1, r3
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	685a      	ldr	r2, [r3, #4]
 8016224:	4b38      	ldr	r3, [pc, #224]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 8016226:	430a      	orrs	r2, r1
 8016228:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801622a:	f7fb ff01 	bl	8012030 <HAL_GetTick>
 801622e:	0003      	movs	r3, r0
 8016230:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016232:	e009      	b.n	8016248 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016234:	f7fb fefc 	bl	8012030 <HAL_GetTick>
 8016238:	0002      	movs	r2, r0
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	1ad3      	subs	r3, r2, r3
 801623e:	4a33      	ldr	r2, [pc, #204]	@ (801630c <HAL_RCC_ClockConfig+0x1c4>)
 8016240:	4293      	cmp	r3, r2
 8016242:	d901      	bls.n	8016248 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8016244:	2303      	movs	r3, #3
 8016246:	e059      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016248:	4b2f      	ldr	r3, [pc, #188]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 801624a:	689b      	ldr	r3, [r3, #8]
 801624c:	2238      	movs	r2, #56	@ 0x38
 801624e:	401a      	ands	r2, r3
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	685b      	ldr	r3, [r3, #4]
 8016254:	00db      	lsls	r3, r3, #3
 8016256:	429a      	cmp	r2, r3
 8016258:	d1ec      	bne.n	8016234 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	2202      	movs	r2, #2
 8016260:	4013      	ands	r3, r2
 8016262:	d009      	beq.n	8016278 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016264:	4b28      	ldr	r3, [pc, #160]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 8016266:	689b      	ldr	r3, [r3, #8]
 8016268:	4a29      	ldr	r2, [pc, #164]	@ (8016310 <HAL_RCC_ClockConfig+0x1c8>)
 801626a:	4013      	ands	r3, r2
 801626c:	0019      	movs	r1, r3
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	689a      	ldr	r2, [r3, #8]
 8016272:	4b25      	ldr	r3, [pc, #148]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 8016274:	430a      	orrs	r2, r1
 8016276:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016278:	4b22      	ldr	r3, [pc, #136]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	2207      	movs	r2, #7
 801627e:	4013      	ands	r3, r2
 8016280:	683a      	ldr	r2, [r7, #0]
 8016282:	429a      	cmp	r2, r3
 8016284:	d211      	bcs.n	80162aa <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016286:	4b1f      	ldr	r3, [pc, #124]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	2207      	movs	r2, #7
 801628c:	4393      	bics	r3, r2
 801628e:	0019      	movs	r1, r3
 8016290:	4b1c      	ldr	r3, [pc, #112]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 8016292:	683a      	ldr	r2, [r7, #0]
 8016294:	430a      	orrs	r2, r1
 8016296:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016298:	4b1a      	ldr	r3, [pc, #104]	@ (8016304 <HAL_RCC_ClockConfig+0x1bc>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	2207      	movs	r2, #7
 801629e:	4013      	ands	r3, r2
 80162a0:	683a      	ldr	r2, [r7, #0]
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d001      	beq.n	80162aa <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 80162a6:	2301      	movs	r3, #1
 80162a8:	e028      	b.n	80162fc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	2204      	movs	r2, #4
 80162b0:	4013      	ands	r3, r2
 80162b2:	d009      	beq.n	80162c8 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80162b4:	4b14      	ldr	r3, [pc, #80]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 80162b6:	689b      	ldr	r3, [r3, #8]
 80162b8:	4a16      	ldr	r2, [pc, #88]	@ (8016314 <HAL_RCC_ClockConfig+0x1cc>)
 80162ba:	4013      	ands	r3, r2
 80162bc:	0019      	movs	r1, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	68da      	ldr	r2, [r3, #12]
 80162c2:	4b11      	ldr	r3, [pc, #68]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 80162c4:	430a      	orrs	r2, r1
 80162c6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80162c8:	f000 f82a 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 80162cc:	0001      	movs	r1, r0
 80162ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016308 <HAL_RCC_ClockConfig+0x1c0>)
 80162d0:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80162d2:	0a1b      	lsrs	r3, r3, #8
 80162d4:	220f      	movs	r2, #15
 80162d6:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80162d8:	4a0f      	ldr	r2, [pc, #60]	@ (8016318 <HAL_RCC_ClockConfig+0x1d0>)
 80162da:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80162dc:	001a      	movs	r2, r3
 80162de:	231f      	movs	r3, #31
 80162e0:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80162e2:	000a      	movs	r2, r1
 80162e4:	40da      	lsrs	r2, r3
 80162e6:	4b0d      	ldr	r3, [pc, #52]	@ (801631c <HAL_RCC_ClockConfig+0x1d4>)
 80162e8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80162ea:	250b      	movs	r5, #11
 80162ec:	197c      	adds	r4, r7, r5
 80162ee:	2003      	movs	r0, #3
 80162f0:	f7fb fe44 	bl	8011f7c <HAL_InitTick>
 80162f4:	0003      	movs	r3, r0
 80162f6:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80162f8:	197b      	adds	r3, r7, r5
 80162fa:	781b      	ldrb	r3, [r3, #0]
}
 80162fc:	0018      	movs	r0, r3
 80162fe:	46bd      	mov	sp, r7
 8016300:	b004      	add	sp, #16
 8016302:	bdb0      	pop	{r4, r5, r7, pc}
 8016304:	40022000 	.word	0x40022000
 8016308:	40021000 	.word	0x40021000
 801630c:	00001388 	.word	0x00001388
 8016310:	fffff0ff 	.word	0xfffff0ff
 8016314:	ffff8fff 	.word	0xffff8fff
 8016318:	0801b078 	.word	0x0801b078
 801631c:	2000025c 	.word	0x2000025c

08016320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b08a      	sub	sp, #40	@ 0x28
 8016324:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8016326:	2300      	movs	r3, #0
 8016328:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 801632a:	2300      	movs	r3, #0
 801632c:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801632e:	4b46      	ldr	r3, [pc, #280]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 8016330:	689b      	ldr	r3, [r3, #8]
 8016332:	2238      	movs	r2, #56	@ 0x38
 8016334:	4013      	ands	r3, r2
 8016336:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016338:	4b43      	ldr	r3, [pc, #268]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	2203      	movs	r2, #3
 801633e:	4013      	ands	r3, r2
 8016340:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016342:	69bb      	ldr	r3, [r7, #24]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d005      	beq.n	8016354 <HAL_RCC_GetSysClockFreq+0x34>
 8016348:	69bb      	ldr	r3, [r7, #24]
 801634a:	2b18      	cmp	r3, #24
 801634c:	d125      	bne.n	801639a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	2b01      	cmp	r3, #1
 8016352:	d122      	bne.n	801639a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8016354:	4b3c      	ldr	r3, [pc, #240]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	2208      	movs	r2, #8
 801635a:	4013      	ands	r3, r2
 801635c:	d107      	bne.n	801636e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 801635e:	4a3a      	ldr	r2, [pc, #232]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 8016360:	2394      	movs	r3, #148	@ 0x94
 8016362:	58d3      	ldr	r3, [r2, r3]
 8016364:	0a1b      	lsrs	r3, r3, #8
 8016366:	220f      	movs	r2, #15
 8016368:	4013      	ands	r3, r2
 801636a:	627b      	str	r3, [r7, #36]	@ 0x24
 801636c:	e005      	b.n	801637a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801636e:	4b36      	ldr	r3, [pc, #216]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	091b      	lsrs	r3, r3, #4
 8016374:	220f      	movs	r2, #15
 8016376:	4013      	ands	r3, r2
 8016378:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 801637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801637c:	2b0b      	cmp	r3, #11
 801637e:	d901      	bls.n	8016384 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8016380:	2300      	movs	r3, #0
 8016382:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8016384:	4b31      	ldr	r3, [pc, #196]	@ (801644c <HAL_RCC_GetSysClockFreq+0x12c>)
 8016386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016388:	0092      	lsls	r2, r2, #2
 801638a:	58d3      	ldr	r3, [r2, r3]
 801638c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801638e:	69bb      	ldr	r3, [r7, #24]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d11b      	bne.n	80163cc <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8016394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016396:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016398:	e018      	b.n	80163cc <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801639a:	69bb      	ldr	r3, [r7, #24]
 801639c:	2b08      	cmp	r3, #8
 801639e:	d102      	bne.n	80163a6 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80163a0:	4b2b      	ldr	r3, [pc, #172]	@ (8016450 <HAL_RCC_GetSysClockFreq+0x130>)
 80163a2:	623b      	str	r3, [r7, #32]
 80163a4:	e012      	b.n	80163cc <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	2b10      	cmp	r3, #16
 80163aa:	d102      	bne.n	80163b2 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80163ac:	4b29      	ldr	r3, [pc, #164]	@ (8016454 <HAL_RCC_GetSysClockFreq+0x134>)
 80163ae:	623b      	str	r3, [r7, #32]
 80163b0:	e00c      	b.n	80163cc <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 80163b2:	69bb      	ldr	r3, [r7, #24]
 80163b4:	2b20      	cmp	r3, #32
 80163b6:	d103      	bne.n	80163c0 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80163b8:	23fa      	movs	r3, #250	@ 0xfa
 80163ba:	01db      	lsls	r3, r3, #7
 80163bc:	623b      	str	r3, [r7, #32]
 80163be:	e005      	b.n	80163cc <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	2b28      	cmp	r3, #40	@ 0x28
 80163c4:	d102      	bne.n	80163cc <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80163c6:	2380      	movs	r3, #128	@ 0x80
 80163c8:	021b      	lsls	r3, r3, #8
 80163ca:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	2b18      	cmp	r3, #24
 80163d0:	d135      	bne.n	801643e <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80163d2:	4b1d      	ldr	r3, [pc, #116]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 80163d4:	68db      	ldr	r3, [r3, #12]
 80163d6:	2203      	movs	r2, #3
 80163d8:	4013      	ands	r3, r2
 80163da:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80163dc:	4b1a      	ldr	r3, [pc, #104]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	091b      	lsrs	r3, r3, #4
 80163e2:	2207      	movs	r2, #7
 80163e4:	4013      	ands	r3, r2
 80163e6:	3301      	adds	r3, #1
 80163e8:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	2b02      	cmp	r3, #2
 80163ee:	d003      	beq.n	80163f8 <HAL_RCC_GetSysClockFreq+0xd8>
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	2b03      	cmp	r3, #3
 80163f4:	d003      	beq.n	80163fe <HAL_RCC_GetSysClockFreq+0xde>
 80163f6:	e005      	b.n	8016404 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80163f8:	4b15      	ldr	r3, [pc, #84]	@ (8016450 <HAL_RCC_GetSysClockFreq+0x130>)
 80163fa:	61fb      	str	r3, [r7, #28]
        break;
 80163fc:	e005      	b.n	801640a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80163fe:	4b15      	ldr	r3, [pc, #84]	@ (8016454 <HAL_RCC_GetSysClockFreq+0x134>)
 8016400:	61fb      	str	r3, [r7, #28]
        break;
 8016402:	e002      	b.n	801640a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8016404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016406:	61fb      	str	r3, [r7, #28]
        break;
 8016408:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 801640a:	4b0f      	ldr	r3, [pc, #60]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 801640c:	68db      	ldr	r3, [r3, #12]
 801640e:	0a1b      	lsrs	r3, r3, #8
 8016410:	227f      	movs	r2, #127	@ 0x7f
 8016412:	4013      	ands	r3, r2
 8016414:	69fa      	ldr	r2, [r7, #28]
 8016416:	4353      	muls	r3, r2
 8016418:	68f9      	ldr	r1, [r7, #12]
 801641a:	0018      	movs	r0, r3
 801641c:	f7e9 fe7c 	bl	8000118 <__udivsi3>
 8016420:	0003      	movs	r3, r0
 8016422:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8016424:	4b08      	ldr	r3, [pc, #32]	@ (8016448 <HAL_RCC_GetSysClockFreq+0x128>)
 8016426:	68db      	ldr	r3, [r3, #12]
 8016428:	0f5b      	lsrs	r3, r3, #29
 801642a:	2207      	movs	r2, #7
 801642c:	4013      	ands	r3, r2
 801642e:	3301      	adds	r3, #1
 8016430:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8016432:	6879      	ldr	r1, [r7, #4]
 8016434:	68b8      	ldr	r0, [r7, #8]
 8016436:	f7e9 fe6f 	bl	8000118 <__udivsi3>
 801643a:	0003      	movs	r3, r0
 801643c:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 801643e:	6a3b      	ldr	r3, [r7, #32]
}
 8016440:	0018      	movs	r0, r3
 8016442:	46bd      	mov	sp, r7
 8016444:	b00a      	add	sp, #40	@ 0x28
 8016446:	bd80      	pop	{r7, pc}
 8016448:	40021000 	.word	0x40021000
 801644c:	0801b090 	.word	0x0801b090
 8016450:	00f42400 	.word	0x00f42400
 8016454:	003d0900 	.word	0x003d0900

08016458 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801645c:	4b02      	ldr	r3, [pc, #8]	@ (8016468 <HAL_RCC_GetHCLKFreq+0x10>)
 801645e:	681b      	ldr	r3, [r3, #0]
}
 8016460:	0018      	movs	r0, r3
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}
 8016466:	46c0      	nop			@ (mov r8, r8)
 8016468:	2000025c 	.word	0x2000025c

0801646c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8016470:	f7ff fff2 	bl	8016458 <HAL_RCC_GetHCLKFreq>
 8016474:	0001      	movs	r1, r0
 8016476:	4b07      	ldr	r3, [pc, #28]	@ (8016494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8016478:	689b      	ldr	r3, [r3, #8]
 801647a:	0b1b      	lsrs	r3, r3, #12
 801647c:	2207      	movs	r2, #7
 801647e:	4013      	ands	r3, r2
 8016480:	4a05      	ldr	r2, [pc, #20]	@ (8016498 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8016482:	5cd3      	ldrb	r3, [r2, r3]
 8016484:	001a      	movs	r2, r3
 8016486:	231f      	movs	r3, #31
 8016488:	4013      	ands	r3, r2
 801648a:	40d9      	lsrs	r1, r3
 801648c:	000b      	movs	r3, r1
}
 801648e:	0018      	movs	r0, r3
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}
 8016494:	40021000 	.word	0x40021000
 8016498:	0801b088 	.word	0x0801b088

0801649c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b086      	sub	sp, #24
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80164a4:	2300      	movs	r3, #0
 80164a6:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80164a8:	4b2f      	ldr	r3, [pc, #188]	@ (8016568 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80164aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80164ac:	2380      	movs	r3, #128	@ 0x80
 80164ae:	055b      	lsls	r3, r3, #21
 80164b0:	4013      	ands	r3, r2
 80164b2:	d004      	beq.n	80164be <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80164b4:	f7ff f9de 	bl	8015874 <HAL_PWREx_GetVoltageRange>
 80164b8:	0003      	movs	r3, r0
 80164ba:	617b      	str	r3, [r7, #20]
 80164bc:	e017      	b.n	80164ee <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80164be:	4b2a      	ldr	r3, [pc, #168]	@ (8016568 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80164c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80164c2:	4b29      	ldr	r3, [pc, #164]	@ (8016568 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80164c4:	2180      	movs	r1, #128	@ 0x80
 80164c6:	0549      	lsls	r1, r1, #21
 80164c8:	430a      	orrs	r2, r1
 80164ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80164cc:	4b26      	ldr	r3, [pc, #152]	@ (8016568 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80164ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80164d0:	2380      	movs	r3, #128	@ 0x80
 80164d2:	055b      	lsls	r3, r3, #21
 80164d4:	4013      	ands	r3, r2
 80164d6:	60fb      	str	r3, [r7, #12]
 80164d8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80164da:	f7ff f9cb 	bl	8015874 <HAL_PWREx_GetVoltageRange>
 80164de:	0003      	movs	r3, r0
 80164e0:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80164e2:	4b21      	ldr	r3, [pc, #132]	@ (8016568 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80164e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80164e6:	4b20      	ldr	r3, [pc, #128]	@ (8016568 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80164e8:	4920      	ldr	r1, [pc, #128]	@ (801656c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80164ea:	400a      	ands	r2, r1
 80164ec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80164ee:	697a      	ldr	r2, [r7, #20]
 80164f0:	2380      	movs	r3, #128	@ 0x80
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d111      	bne.n	801651c <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b80      	cmp	r3, #128	@ 0x80
 80164fc:	d91c      	bls.n	8016538 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2bb0      	cmp	r3, #176	@ 0xb0
 8016502:	d902      	bls.n	801650a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8016504:	2302      	movs	r3, #2
 8016506:	613b      	str	r3, [r7, #16]
 8016508:	e016      	b.n	8016538 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2b90      	cmp	r3, #144	@ 0x90
 801650e:	d902      	bls.n	8016516 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8016510:	2301      	movs	r3, #1
 8016512:	613b      	str	r3, [r7, #16]
 8016514:	e010      	b.n	8016538 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8016516:	2300      	movs	r3, #0
 8016518:	613b      	str	r3, [r7, #16]
 801651a:	e00d      	b.n	8016538 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016520:	d902      	bls.n	8016528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8016522:	2302      	movs	r3, #2
 8016524:	613b      	str	r3, [r7, #16]
 8016526:	e007      	b.n	8016538 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2b70      	cmp	r3, #112	@ 0x70
 801652c:	d102      	bne.n	8016534 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 801652e:	2301      	movs	r3, #1
 8016530:	613b      	str	r3, [r7, #16]
 8016532:	e001      	b.n	8016538 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8016534:	2300      	movs	r3, #0
 8016536:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8016538:	4b0d      	ldr	r3, [pc, #52]	@ (8016570 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2207      	movs	r2, #7
 801653e:	4393      	bics	r3, r2
 8016540:	0019      	movs	r1, r3
 8016542:	4b0b      	ldr	r3, [pc, #44]	@ (8016570 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8016544:	693a      	ldr	r2, [r7, #16]
 8016546:	430a      	orrs	r2, r1
 8016548:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801654a:	4b09      	ldr	r3, [pc, #36]	@ (8016570 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2207      	movs	r2, #7
 8016550:	4013      	ands	r3, r2
 8016552:	693a      	ldr	r2, [r7, #16]
 8016554:	429a      	cmp	r2, r3
 8016556:	d001      	beq.n	801655c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8016558:	2301      	movs	r3, #1
 801655a:	e000      	b.n	801655e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 801655c:	2300      	movs	r3, #0
}
 801655e:	0018      	movs	r0, r3
 8016560:	46bd      	mov	sp, r7
 8016562:	b006      	add	sp, #24
 8016564:	bd80      	pop	{r7, pc}
 8016566:	46c0      	nop			@ (mov r8, r8)
 8016568:	40021000 	.word	0x40021000
 801656c:	efffffff 	.word	0xefffffff
 8016570:	40022000 	.word	0x40022000

08016574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b086      	sub	sp, #24
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801657c:	2313      	movs	r3, #19
 801657e:	18fb      	adds	r3, r7, r3
 8016580:	2200      	movs	r2, #0
 8016582:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8016584:	2312      	movs	r3, #18
 8016586:	18fb      	adds	r3, r7, r3
 8016588:	2200      	movs	r2, #0
 801658a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681a      	ldr	r2, [r3, #0]
 8016590:	2380      	movs	r3, #128	@ 0x80
 8016592:	021b      	lsls	r3, r3, #8
 8016594:	4013      	ands	r3, r2
 8016596:	d100      	bne.n	801659a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8016598:	e0b7      	b.n	801670a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 801659a:	2011      	movs	r0, #17
 801659c:	183b      	adds	r3, r7, r0
 801659e:	2200      	movs	r2, #0
 80165a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80165a2:	4b4c      	ldr	r3, [pc, #304]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80165a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80165a6:	2380      	movs	r3, #128	@ 0x80
 80165a8:	055b      	lsls	r3, r3, #21
 80165aa:	4013      	ands	r3, r2
 80165ac:	d110      	bne.n	80165d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80165ae:	4b49      	ldr	r3, [pc, #292]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80165b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80165b2:	4b48      	ldr	r3, [pc, #288]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80165b4:	2180      	movs	r1, #128	@ 0x80
 80165b6:	0549      	lsls	r1, r1, #21
 80165b8:	430a      	orrs	r2, r1
 80165ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80165bc:	4b45      	ldr	r3, [pc, #276]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80165be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80165c0:	2380      	movs	r3, #128	@ 0x80
 80165c2:	055b      	lsls	r3, r3, #21
 80165c4:	4013      	ands	r3, r2
 80165c6:	60bb      	str	r3, [r7, #8]
 80165c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80165ca:	183b      	adds	r3, r7, r0
 80165cc:	2201      	movs	r2, #1
 80165ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80165d0:	4b41      	ldr	r3, [pc, #260]	@ (80166d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	4b40      	ldr	r3, [pc, #256]	@ (80166d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80165d6:	2180      	movs	r1, #128	@ 0x80
 80165d8:	0049      	lsls	r1, r1, #1
 80165da:	430a      	orrs	r2, r1
 80165dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80165de:	f7fb fd27 	bl	8012030 <HAL_GetTick>
 80165e2:	0003      	movs	r3, r0
 80165e4:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80165e6:	e00b      	b.n	8016600 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80165e8:	f7fb fd22 	bl	8012030 <HAL_GetTick>
 80165ec:	0002      	movs	r2, r0
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	2b02      	cmp	r3, #2
 80165f4:	d904      	bls.n	8016600 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80165f6:	2313      	movs	r3, #19
 80165f8:	18fb      	adds	r3, r7, r3
 80165fa:	2203      	movs	r2, #3
 80165fc:	701a      	strb	r2, [r3, #0]
        break;
 80165fe:	e005      	b.n	801660c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8016600:	4b35      	ldr	r3, [pc, #212]	@ (80166d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8016602:	681a      	ldr	r2, [r3, #0]
 8016604:	2380      	movs	r3, #128	@ 0x80
 8016606:	005b      	lsls	r3, r3, #1
 8016608:	4013      	ands	r3, r2
 801660a:	d0ed      	beq.n	80165e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 801660c:	2313      	movs	r3, #19
 801660e:	18fb      	adds	r3, r7, r3
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d168      	bne.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8016616:	4a2f      	ldr	r2, [pc, #188]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016618:	2390      	movs	r3, #144	@ 0x90
 801661a:	58d2      	ldr	r2, [r2, r3]
 801661c:	23c0      	movs	r3, #192	@ 0xc0
 801661e:	009b      	lsls	r3, r3, #2
 8016620:	4013      	ands	r3, r2
 8016622:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d01f      	beq.n	801666a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801662e:	697a      	ldr	r2, [r7, #20]
 8016630:	429a      	cmp	r2, r3
 8016632:	d01a      	beq.n	801666a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8016634:	4a27      	ldr	r2, [pc, #156]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016636:	2390      	movs	r3, #144	@ 0x90
 8016638:	58d3      	ldr	r3, [r2, r3]
 801663a:	4a28      	ldr	r2, [pc, #160]	@ (80166dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801663c:	4013      	ands	r3, r2
 801663e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8016640:	4a24      	ldr	r2, [pc, #144]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016642:	2390      	movs	r3, #144	@ 0x90
 8016644:	58d3      	ldr	r3, [r2, r3]
 8016646:	4923      	ldr	r1, [pc, #140]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016648:	2280      	movs	r2, #128	@ 0x80
 801664a:	0252      	lsls	r2, r2, #9
 801664c:	4313      	orrs	r3, r2
 801664e:	2290      	movs	r2, #144	@ 0x90
 8016650:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8016652:	4a20      	ldr	r2, [pc, #128]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016654:	2390      	movs	r3, #144	@ 0x90
 8016656:	58d3      	ldr	r3, [r2, r3]
 8016658:	491e      	ldr	r1, [pc, #120]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801665a:	4a21      	ldr	r2, [pc, #132]	@ (80166e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 801665c:	4013      	ands	r3, r2
 801665e:	2290      	movs	r2, #144	@ 0x90
 8016660:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8016662:	491c      	ldr	r1, [pc, #112]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016664:	2290      	movs	r2, #144	@ 0x90
 8016666:	697b      	ldr	r3, [r7, #20]
 8016668:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	2201      	movs	r2, #1
 801666e:	4013      	ands	r3, r2
 8016670:	d017      	beq.n	80166a2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016672:	f7fb fcdd 	bl	8012030 <HAL_GetTick>
 8016676:	0003      	movs	r3, r0
 8016678:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801667a:	e00c      	b.n	8016696 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801667c:	f7fb fcd8 	bl	8012030 <HAL_GetTick>
 8016680:	0002      	movs	r2, r0
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	1ad3      	subs	r3, r2, r3
 8016686:	4a17      	ldr	r2, [pc, #92]	@ (80166e4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8016688:	4293      	cmp	r3, r2
 801668a:	d904      	bls.n	8016696 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 801668c:	2313      	movs	r3, #19
 801668e:	18fb      	adds	r3, r7, r3
 8016690:	2203      	movs	r2, #3
 8016692:	701a      	strb	r2, [r3, #0]
            break;
 8016694:	e005      	b.n	80166a2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016696:	4a0f      	ldr	r2, [pc, #60]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016698:	2390      	movs	r3, #144	@ 0x90
 801669a:	58d3      	ldr	r3, [r2, r3]
 801669c:	2202      	movs	r2, #2
 801669e:	4013      	ands	r3, r2
 80166a0:	d0ec      	beq.n	801667c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 80166a2:	2313      	movs	r3, #19
 80166a4:	18fb      	adds	r3, r7, r3
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10b      	bne.n	80166c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80166ac:	4a09      	ldr	r2, [pc, #36]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80166ae:	2390      	movs	r3, #144	@ 0x90
 80166b0:	58d3      	ldr	r3, [r2, r3]
 80166b2:	4a0a      	ldr	r2, [pc, #40]	@ (80166dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80166b4:	401a      	ands	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80166ba:	4906      	ldr	r1, [pc, #24]	@ (80166d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80166bc:	4313      	orrs	r3, r2
 80166be:	2290      	movs	r2, #144	@ 0x90
 80166c0:	508b      	str	r3, [r1, r2]
 80166c2:	e017      	b.n	80166f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80166c4:	2312      	movs	r3, #18
 80166c6:	18fb      	adds	r3, r7, r3
 80166c8:	2213      	movs	r2, #19
 80166ca:	18ba      	adds	r2, r7, r2
 80166cc:	7812      	ldrb	r2, [r2, #0]
 80166ce:	701a      	strb	r2, [r3, #0]
 80166d0:	e010      	b.n	80166f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80166d2:	46c0      	nop			@ (mov r8, r8)
 80166d4:	40021000 	.word	0x40021000
 80166d8:	40007000 	.word	0x40007000
 80166dc:	fffffcff 	.word	0xfffffcff
 80166e0:	fffeffff 	.word	0xfffeffff
 80166e4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80166e8:	2312      	movs	r3, #18
 80166ea:	18fb      	adds	r3, r7, r3
 80166ec:	2213      	movs	r2, #19
 80166ee:	18ba      	adds	r2, r7, r2
 80166f0:	7812      	ldrb	r2, [r2, #0]
 80166f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80166f4:	2311      	movs	r3, #17
 80166f6:	18fb      	adds	r3, r7, r3
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	2b01      	cmp	r3, #1
 80166fc:	d105      	bne.n	801670a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80166fe:	4ba4      	ldr	r3, [pc, #656]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016700:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016702:	4ba3      	ldr	r3, [pc, #652]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016704:	49a3      	ldr	r1, [pc, #652]	@ (8016994 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8016706:	400a      	ands	r2, r1
 8016708:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2201      	movs	r2, #1
 8016710:	4013      	ands	r3, r2
 8016712:	d00b      	beq.n	801672c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8016714:	4a9e      	ldr	r2, [pc, #632]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016716:	2388      	movs	r3, #136	@ 0x88
 8016718:	58d3      	ldr	r3, [r2, r3]
 801671a:	2203      	movs	r2, #3
 801671c:	4393      	bics	r3, r2
 801671e:	001a      	movs	r2, r3
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	499a      	ldr	r1, [pc, #616]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016726:	4313      	orrs	r3, r2
 8016728:	2288      	movs	r2, #136	@ 0x88
 801672a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2202      	movs	r2, #2
 8016732:	4013      	ands	r3, r2
 8016734:	d00b      	beq.n	801674e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8016736:	4a96      	ldr	r2, [pc, #600]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016738:	2388      	movs	r3, #136	@ 0x88
 801673a:	58d3      	ldr	r3, [r2, r3]
 801673c:	220c      	movs	r2, #12
 801673e:	4393      	bics	r3, r2
 8016740:	001a      	movs	r2, r3
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	689b      	ldr	r3, [r3, #8]
 8016746:	4992      	ldr	r1, [pc, #584]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016748:	4313      	orrs	r3, r2
 801674a:	2288      	movs	r2, #136	@ 0x88
 801674c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	2210      	movs	r2, #16
 8016754:	4013      	ands	r3, r2
 8016756:	d00a      	beq.n	801676e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8016758:	4a8d      	ldr	r2, [pc, #564]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801675a:	2388      	movs	r3, #136	@ 0x88
 801675c:	58d3      	ldr	r3, [r2, r3]
 801675e:	4a8e      	ldr	r2, [pc, #568]	@ (8016998 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8016760:	401a      	ands	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	695b      	ldr	r3, [r3, #20]
 8016766:	498a      	ldr	r1, [pc, #552]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016768:	4313      	orrs	r3, r2
 801676a:	2288      	movs	r2, #136	@ 0x88
 801676c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2208      	movs	r2, #8
 8016774:	4013      	ands	r3, r2
 8016776:	d00a      	beq.n	801678e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8016778:	4a85      	ldr	r2, [pc, #532]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801677a:	2388      	movs	r3, #136	@ 0x88
 801677c:	58d3      	ldr	r3, [r2, r3]
 801677e:	4a87      	ldr	r2, [pc, #540]	@ (801699c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8016780:	401a      	ands	r2, r3
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	691b      	ldr	r3, [r3, #16]
 8016786:	4982      	ldr	r1, [pc, #520]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016788:	4313      	orrs	r3, r2
 801678a:	2288      	movs	r2, #136	@ 0x88
 801678c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	2204      	movs	r2, #4
 8016794:	4013      	ands	r3, r2
 8016796:	d00b      	beq.n	80167b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8016798:	4a7d      	ldr	r2, [pc, #500]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801679a:	2388      	movs	r3, #136	@ 0x88
 801679c:	58d3      	ldr	r3, [r2, r3]
 801679e:	22c0      	movs	r2, #192	@ 0xc0
 80167a0:	4393      	bics	r3, r2
 80167a2:	001a      	movs	r2, r3
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	4979      	ldr	r1, [pc, #484]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80167aa:	4313      	orrs	r3, r2
 80167ac:	2288      	movs	r2, #136	@ 0x88
 80167ae:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	2220      	movs	r2, #32
 80167b6:	4013      	ands	r3, r2
 80167b8:	d00a      	beq.n	80167d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80167ba:	4a75      	ldr	r2, [pc, #468]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80167bc:	2388      	movs	r3, #136	@ 0x88
 80167be:	58d3      	ldr	r3, [r2, r3]
 80167c0:	4a77      	ldr	r2, [pc, #476]	@ (80169a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80167c2:	401a      	ands	r2, r3
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	699b      	ldr	r3, [r3, #24]
 80167c8:	4971      	ldr	r1, [pc, #452]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80167ca:	4313      	orrs	r3, r2
 80167cc:	2288      	movs	r2, #136	@ 0x88
 80167ce:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2240      	movs	r2, #64	@ 0x40
 80167d6:	4013      	ands	r3, r2
 80167d8:	d00a      	beq.n	80167f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80167da:	4a6d      	ldr	r2, [pc, #436]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80167dc:	2388      	movs	r3, #136	@ 0x88
 80167de:	58d3      	ldr	r3, [r2, r3]
 80167e0:	4a70      	ldr	r2, [pc, #448]	@ (80169a4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80167e2:	401a      	ands	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	69db      	ldr	r3, [r3, #28]
 80167e8:	4969      	ldr	r1, [pc, #420]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80167ea:	4313      	orrs	r3, r2
 80167ec:	2288      	movs	r2, #136	@ 0x88
 80167ee:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	2280      	movs	r2, #128	@ 0x80
 80167f6:	4013      	ands	r3, r2
 80167f8:	d00a      	beq.n	8016810 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80167fa:	4a65      	ldr	r2, [pc, #404]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80167fc:	2388      	movs	r3, #136	@ 0x88
 80167fe:	58d3      	ldr	r3, [r2, r3]
 8016800:	4a69      	ldr	r2, [pc, #420]	@ (80169a8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8016802:	401a      	ands	r2, r3
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	6a1b      	ldr	r3, [r3, #32]
 8016808:	4961      	ldr	r1, [pc, #388]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801680a:	4313      	orrs	r3, r2
 801680c:	2288      	movs	r2, #136	@ 0x88
 801680e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681a      	ldr	r2, [r3, #0]
 8016814:	2380      	movs	r3, #128	@ 0x80
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	4013      	ands	r3, r2
 801681a:	d00a      	beq.n	8016832 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801681c:	4a5c      	ldr	r2, [pc, #368]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801681e:	2388      	movs	r3, #136	@ 0x88
 8016820:	58d3      	ldr	r3, [r2, r3]
 8016822:	4a62      	ldr	r2, [pc, #392]	@ (80169ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8016824:	401a      	ands	r2, r3
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801682a:	4959      	ldr	r1, [pc, #356]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801682c:	4313      	orrs	r3, r2
 801682e:	2288      	movs	r2, #136	@ 0x88
 8016830:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681a      	ldr	r2, [r3, #0]
 8016836:	2380      	movs	r3, #128	@ 0x80
 8016838:	009b      	lsls	r3, r3, #2
 801683a:	4013      	ands	r3, r2
 801683c:	d00a      	beq.n	8016854 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 801683e:	4a54      	ldr	r2, [pc, #336]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016840:	2388      	movs	r3, #136	@ 0x88
 8016842:	58d3      	ldr	r3, [r2, r3]
 8016844:	4a5a      	ldr	r2, [pc, #360]	@ (80169b0 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8016846:	401a      	ands	r2, r3
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801684c:	4950      	ldr	r1, [pc, #320]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801684e:	4313      	orrs	r3, r2
 8016850:	2288      	movs	r2, #136	@ 0x88
 8016852:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	2380      	movs	r3, #128	@ 0x80
 801685a:	01db      	lsls	r3, r3, #7
 801685c:	4013      	ands	r3, r2
 801685e:	d017      	beq.n	8016890 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016864:	2380      	movs	r3, #128	@ 0x80
 8016866:	055b      	lsls	r3, r3, #21
 8016868:	429a      	cmp	r2, r3
 801686a:	d106      	bne.n	801687a <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 801686c:	4b48      	ldr	r3, [pc, #288]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801686e:	68da      	ldr	r2, [r3, #12]
 8016870:	4b47      	ldr	r3, [pc, #284]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016872:	2180      	movs	r1, #128	@ 0x80
 8016874:	0249      	lsls	r1, r1, #9
 8016876:	430a      	orrs	r2, r1
 8016878:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801687a:	4a45      	ldr	r2, [pc, #276]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801687c:	2388      	movs	r3, #136	@ 0x88
 801687e:	58d3      	ldr	r3, [r2, r3]
 8016880:	4a4c      	ldr	r2, [pc, #304]	@ (80169b4 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8016882:	401a      	ands	r2, r3
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016888:	4941      	ldr	r1, [pc, #260]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801688a:	4313      	orrs	r3, r2
 801688c:	2288      	movs	r2, #136	@ 0x88
 801688e:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681a      	ldr	r2, [r3, #0]
 8016894:	2380      	movs	r3, #128	@ 0x80
 8016896:	015b      	lsls	r3, r3, #5
 8016898:	4013      	ands	r3, r2
 801689a:	d017      	beq.n	80168cc <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80168a0:	2380      	movs	r3, #128	@ 0x80
 80168a2:	051b      	lsls	r3, r3, #20
 80168a4:	429a      	cmp	r2, r3
 80168a6:	d106      	bne.n	80168b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80168a8:	4b39      	ldr	r3, [pc, #228]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80168aa:	68da      	ldr	r2, [r3, #12]
 80168ac:	4b38      	ldr	r3, [pc, #224]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80168ae:	2180      	movs	r1, #128	@ 0x80
 80168b0:	0449      	lsls	r1, r1, #17
 80168b2:	430a      	orrs	r2, r1
 80168b4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80168b6:	4a36      	ldr	r2, [pc, #216]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80168b8:	2388      	movs	r3, #136	@ 0x88
 80168ba:	58d3      	ldr	r3, [r2, r3]
 80168bc:	4a3e      	ldr	r2, [pc, #248]	@ (80169b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80168be:	401a      	ands	r2, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80168c4:	4932      	ldr	r1, [pc, #200]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80168c6:	4313      	orrs	r3, r2
 80168c8:	2288      	movs	r2, #136	@ 0x88
 80168ca:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	2380      	movs	r3, #128	@ 0x80
 80168d2:	019b      	lsls	r3, r3, #6
 80168d4:	4013      	ands	r3, r2
 80168d6:	d017      	beq.n	8016908 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80168dc:	2380      	movs	r3, #128	@ 0x80
 80168de:	051b      	lsls	r3, r3, #20
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d106      	bne.n	80168f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80168e4:	4b2a      	ldr	r3, [pc, #168]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80168e6:	68da      	ldr	r2, [r3, #12]
 80168e8:	4b29      	ldr	r3, [pc, #164]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80168ea:	2180      	movs	r1, #128	@ 0x80
 80168ec:	0449      	lsls	r1, r1, #17
 80168ee:	430a      	orrs	r2, r1
 80168f0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80168f2:	4a27      	ldr	r2, [pc, #156]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80168f4:	2388      	movs	r3, #136	@ 0x88
 80168f6:	58d3      	ldr	r3, [r2, r3]
 80168f8:	4a2f      	ldr	r2, [pc, #188]	@ (80169b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80168fa:	401a      	ands	r2, r3
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016900:	4923      	ldr	r1, [pc, #140]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016902:	4313      	orrs	r3, r2
 8016904:	2288      	movs	r2, #136	@ 0x88
 8016906:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681a      	ldr	r2, [r3, #0]
 801690c:	2380      	movs	r3, #128	@ 0x80
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	4013      	ands	r3, r2
 8016912:	d017      	beq.n	8016944 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016918:	2380      	movs	r3, #128	@ 0x80
 801691a:	045b      	lsls	r3, r3, #17
 801691c:	429a      	cmp	r2, r3
 801691e:	d106      	bne.n	801692e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016920:	4b1b      	ldr	r3, [pc, #108]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016922:	68da      	ldr	r2, [r3, #12]
 8016924:	4b1a      	ldr	r3, [pc, #104]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016926:	2180      	movs	r1, #128	@ 0x80
 8016928:	0449      	lsls	r1, r1, #17
 801692a:	430a      	orrs	r2, r1
 801692c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 801692e:	4a18      	ldr	r2, [pc, #96]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016930:	2388      	movs	r3, #136	@ 0x88
 8016932:	58d3      	ldr	r3, [r2, r3]
 8016934:	4a21      	ldr	r2, [pc, #132]	@ (80169bc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8016936:	401a      	ands	r2, r3
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801693c:	4914      	ldr	r1, [pc, #80]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801693e:	4313      	orrs	r3, r2
 8016940:	2288      	movs	r2, #136	@ 0x88
 8016942:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681a      	ldr	r2, [r3, #0]
 8016948:	2380      	movs	r3, #128	@ 0x80
 801694a:	011b      	lsls	r3, r3, #4
 801694c:	4013      	ands	r3, r2
 801694e:	d017      	beq.n	8016980 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016954:	2380      	movs	r3, #128	@ 0x80
 8016956:	049b      	lsls	r3, r3, #18
 8016958:	429a      	cmp	r2, r3
 801695a:	d106      	bne.n	801696a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 801695c:	4b0c      	ldr	r3, [pc, #48]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801695e:	68da      	ldr	r2, [r3, #12]
 8016960:	4b0b      	ldr	r3, [pc, #44]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016962:	2180      	movs	r1, #128	@ 0x80
 8016964:	0449      	lsls	r1, r1, #17
 8016966:	430a      	orrs	r2, r1
 8016968:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 801696a:	4a09      	ldr	r2, [pc, #36]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801696c:	2388      	movs	r3, #136	@ 0x88
 801696e:	58d3      	ldr	r3, [r2, r3]
 8016970:	4a12      	ldr	r2, [pc, #72]	@ (80169bc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8016972:	401a      	ands	r2, r3
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016978:	4905      	ldr	r1, [pc, #20]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801697a:	4313      	orrs	r3, r2
 801697c:	2288      	movs	r2, #136	@ 0x88
 801697e:	508b      	str	r3, [r1, r2]

  }

  return status;
 8016980:	2312      	movs	r3, #18
 8016982:	18fb      	adds	r3, r7, r3
 8016984:	781b      	ldrb	r3, [r3, #0]
}
 8016986:	0018      	movs	r0, r3
 8016988:	46bd      	mov	sp, r7
 801698a:	b006      	add	sp, #24
 801698c:	bd80      	pop	{r7, pc}
 801698e:	46c0      	nop			@ (mov r8, r8)
 8016990:	40021000 	.word	0x40021000
 8016994:	efffffff 	.word	0xefffffff
 8016998:	fffff3ff 	.word	0xfffff3ff
 801699c:	fffffcff 	.word	0xfffffcff
 80169a0:	ffffcfff 	.word	0xffffcfff
 80169a4:	fffcffff 	.word	0xfffcffff
 80169a8:	fff3ffff 	.word	0xfff3ffff
 80169ac:	ffcfffff 	.word	0xffcfffff
 80169b0:	ff3fffff 	.word	0xff3fffff
 80169b4:	cfffffff 	.word	0xcfffffff
 80169b8:	f3ffffff 	.word	0xf3ffffff
 80169bc:	feffffff 	.word	0xfeffffff

080169c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80169c0:	b590      	push	{r4, r7, lr}
 80169c2:	b089      	sub	sp, #36	@ 0x24
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80169c8:	2300      	movs	r3, #0
 80169ca:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80169cc:	687a      	ldr	r2, [r7, #4]
 80169ce:	2380      	movs	r3, #128	@ 0x80
 80169d0:	021b      	lsls	r3, r3, #8
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d154      	bne.n	8016a80 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80169d6:	4ad5      	ldr	r2, [pc, #852]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80169d8:	2390      	movs	r3, #144	@ 0x90
 80169da:	58d2      	ldr	r2, [r2, r3]
 80169dc:	23c0      	movs	r3, #192	@ 0xc0
 80169de:	009b      	lsls	r3, r3, #2
 80169e0:	4013      	ands	r3, r2
 80169e2:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 80169e4:	697a      	ldr	r2, [r7, #20]
 80169e6:	23c0      	movs	r3, #192	@ 0xc0
 80169e8:	009b      	lsls	r3, r3, #2
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d039      	beq.n	8016a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80169ee:	697a      	ldr	r2, [r7, #20]
 80169f0:	23c0      	movs	r3, #192	@ 0xc0
 80169f2:	009b      	lsls	r3, r3, #2
 80169f4:	429a      	cmp	r2, r3
 80169f6:	d901      	bls.n	80169fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80169f8:	f000 fd1a 	bl	8017430 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80169fc:	697a      	ldr	r2, [r7, #20]
 80169fe:	2380      	movs	r3, #128	@ 0x80
 8016a00:	005b      	lsls	r3, r3, #1
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d006      	beq.n	8016a14 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8016a06:	697a      	ldr	r2, [r7, #20]
 8016a08:	2380      	movs	r3, #128	@ 0x80
 8016a0a:	009b      	lsls	r3, r3, #2
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d00f      	beq.n	8016a30 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8016a10:	f000 fd0e 	bl	8017430 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016a14:	4ac5      	ldr	r2, [pc, #788]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016a16:	2390      	movs	r3, #144	@ 0x90
 8016a18:	58d3      	ldr	r3, [r2, r3]
 8016a1a:	2202      	movs	r2, #2
 8016a1c:	4013      	ands	r3, r2
 8016a1e:	2b02      	cmp	r3, #2
 8016a20:	d001      	beq.n	8016a26 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8016a22:	f000 fd07 	bl	8017434 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8016a26:	2380      	movs	r3, #128	@ 0x80
 8016a28:	021b      	lsls	r3, r3, #8
 8016a2a:	61fb      	str	r3, [r7, #28]
        break;
 8016a2c:	f000 fd02 	bl	8017434 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8016a30:	4abe      	ldr	r2, [pc, #760]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016a32:	2394      	movs	r3, #148	@ 0x94
 8016a34:	58d3      	ldr	r3, [r2, r3]
 8016a36:	2202      	movs	r2, #2
 8016a38:	4013      	ands	r3, r2
 8016a3a:	2b02      	cmp	r3, #2
 8016a3c:	d001      	beq.n	8016a42 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8016a3e:	f000 fcfb 	bl	8017438 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8016a42:	4aba      	ldr	r2, [pc, #744]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016a44:	2394      	movs	r3, #148	@ 0x94
 8016a46:	58d3      	ldr	r3, [r2, r3]
 8016a48:	2204      	movs	r2, #4
 8016a4a:	4013      	ands	r3, r2
 8016a4c:	2b04      	cmp	r3, #4
 8016a4e:	d103      	bne.n	8016a58 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8016a50:	23fa      	movs	r3, #250	@ 0xfa
 8016a52:	61fb      	str	r3, [r7, #28]
        break;
 8016a54:	f000 fcf0 	bl	8017438 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8016a58:	23fa      	movs	r3, #250	@ 0xfa
 8016a5a:	01db      	lsls	r3, r3, #7
 8016a5c:	61fb      	str	r3, [r7, #28]
        break;
 8016a5e:	f000 fceb 	bl	8017438 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016a62:	4bb2      	ldr	r3, [pc, #712]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016a64:	681a      	ldr	r2, [r3, #0]
 8016a66:	2380      	movs	r3, #128	@ 0x80
 8016a68:	029b      	lsls	r3, r3, #10
 8016a6a:	401a      	ands	r2, r3
 8016a6c:	2380      	movs	r3, #128	@ 0x80
 8016a6e:	029b      	lsls	r3, r3, #10
 8016a70:	429a      	cmp	r2, r3
 8016a72:	d001      	beq.n	8016a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8016a74:	f000 fce2 	bl	801743c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8016a78:	4bad      	ldr	r3, [pc, #692]	@ (8016d30 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8016a7a:	61fb      	str	r3, [r7, #28]
        break;
 8016a7c:	f000 fcde 	bl	801743c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8016a80:	687a      	ldr	r2, [r7, #4]
 8016a82:	2380      	movs	r3, #128	@ 0x80
 8016a84:	029b      	lsls	r3, r3, #10
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d100      	bne.n	8016a8c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8016a8a:	e11a      	b.n	8016cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8016a8c:	687a      	ldr	r2, [r7, #4]
 8016a8e:	2380      	movs	r3, #128	@ 0x80
 8016a90:	029b      	lsls	r3, r3, #10
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d901      	bls.n	8016a9a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8016a96:	f000 fcd3 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016a9a:	687a      	ldr	r2, [r7, #4]
 8016a9c:	2380      	movs	r3, #128	@ 0x80
 8016a9e:	025b      	lsls	r3, r3, #9
 8016aa0:	429a      	cmp	r2, r3
 8016aa2:	d100      	bne.n	8016aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8016aa4:	e10d      	b.n	8016cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8016aa6:	687a      	ldr	r2, [r7, #4]
 8016aa8:	2380      	movs	r3, #128	@ 0x80
 8016aaa:	025b      	lsls	r3, r3, #9
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d901      	bls.n	8016ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8016ab0:	f000 fcc6 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016ab4:	687a      	ldr	r2, [r7, #4]
 8016ab6:	2380      	movs	r3, #128	@ 0x80
 8016ab8:	01db      	lsls	r3, r3, #7
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d100      	bne.n	8016ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8016abe:	e1eb      	b.n	8016e98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	2380      	movs	r3, #128	@ 0x80
 8016ac4:	01db      	lsls	r3, r3, #7
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d901      	bls.n	8016ace <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8016aca:	f000 fcb9 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016ace:	687a      	ldr	r2, [r7, #4]
 8016ad0:	2380      	movs	r3, #128	@ 0x80
 8016ad2:	019b      	lsls	r3, r3, #6
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d101      	bne.n	8016adc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8016ad8:	f000 fc50 	bl	801737c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8016adc:	687a      	ldr	r2, [r7, #4]
 8016ade:	2380      	movs	r3, #128	@ 0x80
 8016ae0:	019b      	lsls	r3, r3, #6
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d901      	bls.n	8016aea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8016ae6:	f000 fcab 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	2380      	movs	r3, #128	@ 0x80
 8016aee:	015b      	lsls	r3, r3, #5
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d101      	bne.n	8016af8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8016af4:	f000 fbe2 	bl	80172bc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	2380      	movs	r3, #128	@ 0x80
 8016afc:	015b      	lsls	r3, r3, #5
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d901      	bls.n	8016b06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8016b02:	f000 fc9d 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b06:	687a      	ldr	r2, [r7, #4]
 8016b08:	2380      	movs	r3, #128	@ 0x80
 8016b0a:	011b      	lsls	r3, r3, #4
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d101      	bne.n	8016b14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8016b10:	f000 fba9 	bl	8017266 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8016b14:	687a      	ldr	r2, [r7, #4]
 8016b16:	2380      	movs	r3, #128	@ 0x80
 8016b18:	011b      	lsls	r3, r3, #4
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d901      	bls.n	8016b22 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8016b1e:	f000 fc8f 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b22:	687a      	ldr	r2, [r7, #4]
 8016b24:	2380      	movs	r3, #128	@ 0x80
 8016b26:	00db      	lsls	r3, r3, #3
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d101      	bne.n	8016b30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8016b2c:	f000 fb70 	bl	8017210 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8016b30:	687a      	ldr	r2, [r7, #4]
 8016b32:	2380      	movs	r3, #128	@ 0x80
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d901      	bls.n	8016b3e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8016b3a:	f000 fc81 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b3e:	687a      	ldr	r2, [r7, #4]
 8016b40:	2380      	movs	r3, #128	@ 0x80
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d100      	bne.n	8016b4a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8016b48:	e305      	b.n	8017156 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8016b4a:	687a      	ldr	r2, [r7, #4]
 8016b4c:	2380      	movs	r3, #128	@ 0x80
 8016b4e:	009b      	lsls	r3, r3, #2
 8016b50:	429a      	cmp	r2, r3
 8016b52:	d901      	bls.n	8016b58 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8016b54:	f000 fc74 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b58:	687a      	ldr	r2, [r7, #4]
 8016b5a:	2380      	movs	r3, #128	@ 0x80
 8016b5c:	005b      	lsls	r3, r3, #1
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d100      	bne.n	8016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8016b62:	e29b      	b.n	801709c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8016b64:	687a      	ldr	r2, [r7, #4]
 8016b66:	2380      	movs	r3, #128	@ 0x80
 8016b68:	005b      	lsls	r3, r3, #1
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d901      	bls.n	8016b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8016b6e:	f000 fc67 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2b80      	cmp	r3, #128	@ 0x80
 8016b76:	d100      	bne.n	8016b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8016b78:	e22f      	b.n	8016fda <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2b80      	cmp	r3, #128	@ 0x80
 8016b7e:	d901      	bls.n	8016b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8016b80:	f000 fc5e 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2b20      	cmp	r3, #32
 8016b88:	d80f      	bhi.n	8016baa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d101      	bne.n	8016b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8016b90:	f000 fc56 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2b20      	cmp	r3, #32
 8016b98:	d901      	bls.n	8016b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8016b9a:	f000 fc51 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	009a      	lsls	r2, r3, #2
 8016ba2:	4b64      	ldr	r3, [pc, #400]	@ (8016d34 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8016ba4:	18d3      	adds	r3, r2, r3
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	469f      	mov	pc, r3
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2b40      	cmp	r3, #64	@ 0x40
 8016bae:	d100      	bne.n	8016bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8016bb0:	e1df      	b.n	8016f72 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8016bb2:	f000 fc45 	bl	8017440 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8016bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016bb8:	2388      	movs	r3, #136	@ 0x88
 8016bba:	58d3      	ldr	r3, [r2, r3]
 8016bbc:	2203      	movs	r2, #3
 8016bbe:	4013      	ands	r3, r2
 8016bc0:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016bc2:	697b      	ldr	r3, [r7, #20]
 8016bc4:	2b03      	cmp	r3, #3
 8016bc6:	d025      	beq.n	8016c14 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8016bc8:	697b      	ldr	r3, [r7, #20]
 8016bca:	2b03      	cmp	r3, #3
 8016bcc:	d82d      	bhi.n	8016c2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	2b02      	cmp	r3, #2
 8016bd2:	d013      	beq.n	8016bfc <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8016bd4:	697b      	ldr	r3, [r7, #20]
 8016bd6:	2b02      	cmp	r3, #2
 8016bd8:	d827      	bhi.n	8016c2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d003      	beq.n	8016be8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8016be0:	697b      	ldr	r3, [r7, #20]
 8016be2:	2b01      	cmp	r3, #1
 8016be4:	d005      	beq.n	8016bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8016be6:	e020      	b.n	8016c2a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016be8:	f7ff fc40 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016bec:	0003      	movs	r3, r0
 8016bee:	61fb      	str	r3, [r7, #28]
            break;
 8016bf0:	e022      	b.n	8016c38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8016bf2:	f7ff fb95 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016bf6:	0003      	movs	r3, r0
 8016bf8:	61fb      	str	r3, [r7, #28]
            break;
 8016bfa:	e01d      	b.n	8016c38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016bfe:	681a      	ldr	r2, [r3, #0]
 8016c00:	2380      	movs	r3, #128	@ 0x80
 8016c02:	00db      	lsls	r3, r3, #3
 8016c04:	401a      	ands	r2, r3
 8016c06:	2380      	movs	r3, #128	@ 0x80
 8016c08:	00db      	lsls	r3, r3, #3
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d110      	bne.n	8016c30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8016c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8016d38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8016c10:	61fb      	str	r3, [r7, #28]
            break;
 8016c12:	e00d      	b.n	8016c30 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016c14:	4a45      	ldr	r2, [pc, #276]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016c16:	2390      	movs	r3, #144	@ 0x90
 8016c18:	58d3      	ldr	r3, [r2, r3]
 8016c1a:	2202      	movs	r2, #2
 8016c1c:	4013      	ands	r3, r2
 8016c1e:	2b02      	cmp	r3, #2
 8016c20:	d109      	bne.n	8016c36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8016c22:	2380      	movs	r3, #128	@ 0x80
 8016c24:	021b      	lsls	r3, r3, #8
 8016c26:	61fb      	str	r3, [r7, #28]
            break;
 8016c28:	e005      	b.n	8016c36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8016c2a:	46c0      	nop			@ (mov r8, r8)
 8016c2c:	f000 fc09 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016c30:	46c0      	nop			@ (mov r8, r8)
 8016c32:	f000 fc06 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016c36:	46c0      	nop			@ (mov r8, r8)
        break;
 8016c38:	f000 fc03 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8016c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016c3e:	2388      	movs	r3, #136	@ 0x88
 8016c40:	58d3      	ldr	r3, [r2, r3]
 8016c42:	220c      	movs	r2, #12
 8016c44:	4013      	ands	r3, r2
 8016c46:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016c48:	697b      	ldr	r3, [r7, #20]
 8016c4a:	2b0c      	cmp	r3, #12
 8016c4c:	d025      	beq.n	8016c9a <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	2b0c      	cmp	r3, #12
 8016c52:	d82d      	bhi.n	8016cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	2b08      	cmp	r3, #8
 8016c58:	d013      	beq.n	8016c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8016c5a:	697b      	ldr	r3, [r7, #20]
 8016c5c:	2b08      	cmp	r3, #8
 8016c5e:	d827      	bhi.n	8016cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d003      	beq.n	8016c6e <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	2b04      	cmp	r3, #4
 8016c6a:	d005      	beq.n	8016c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8016c6c:	e020      	b.n	8016cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016c6e:	f7ff fbfd 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016c72:	0003      	movs	r3, r0
 8016c74:	61fb      	str	r3, [r7, #28]
            break;
 8016c76:	e022      	b.n	8016cbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8016c78:	f7ff fb52 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016c7c:	0003      	movs	r3, r0
 8016c7e:	61fb      	str	r3, [r7, #28]
            break;
 8016c80:	e01d      	b.n	8016cbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016c82:	4b2a      	ldr	r3, [pc, #168]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016c84:	681a      	ldr	r2, [r3, #0]
 8016c86:	2380      	movs	r3, #128	@ 0x80
 8016c88:	00db      	lsls	r3, r3, #3
 8016c8a:	401a      	ands	r2, r3
 8016c8c:	2380      	movs	r3, #128	@ 0x80
 8016c8e:	00db      	lsls	r3, r3, #3
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d110      	bne.n	8016cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8016c94:	4b28      	ldr	r3, [pc, #160]	@ (8016d38 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8016c96:	61fb      	str	r3, [r7, #28]
            break;
 8016c98:	e00d      	b.n	8016cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016c9a:	4a24      	ldr	r2, [pc, #144]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016c9c:	2390      	movs	r3, #144	@ 0x90
 8016c9e:	58d3      	ldr	r3, [r2, r3]
 8016ca0:	2202      	movs	r2, #2
 8016ca2:	4013      	ands	r3, r2
 8016ca4:	2b02      	cmp	r3, #2
 8016ca6:	d109      	bne.n	8016cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8016ca8:	2380      	movs	r3, #128	@ 0x80
 8016caa:	021b      	lsls	r3, r3, #8
 8016cac:	61fb      	str	r3, [r7, #28]
            break;
 8016cae:	e005      	b.n	8016cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8016cb0:	46c0      	nop			@ (mov r8, r8)
 8016cb2:	f000 fbc6 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016cb6:	46c0      	nop			@ (mov r8, r8)
 8016cb8:	f000 fbc3 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016cbc:	46c0      	nop			@ (mov r8, r8)
        break;
 8016cbe:	f000 fbc0 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8016cc2:	f7ff fbd3 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016cc6:	0003      	movs	r3, r0
 8016cc8:	61fb      	str	r3, [r7, #28]
        break;
 8016cca:	f000 fbba 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8016cce:	4a17      	ldr	r2, [pc, #92]	@ (8016d2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016cd0:	2388      	movs	r3, #136	@ 0x88
 8016cd2:	58d2      	ldr	r2, [r2, r3]
 8016cd4:	23c0      	movs	r3, #192	@ 0xc0
 8016cd6:	011b      	lsls	r3, r3, #4
 8016cd8:	4013      	ands	r3, r2
 8016cda:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016cdc:	697a      	ldr	r2, [r7, #20]
 8016cde:	23c0      	movs	r3, #192	@ 0xc0
 8016ce0:	011b      	lsls	r3, r3, #4
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d036      	beq.n	8016d54 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8016ce6:	697a      	ldr	r2, [r7, #20]
 8016ce8:	23c0      	movs	r3, #192	@ 0xc0
 8016cea:	011b      	lsls	r3, r3, #4
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d83c      	bhi.n	8016d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8016cf0:	697a      	ldr	r2, [r7, #20]
 8016cf2:	2380      	movs	r3, #128	@ 0x80
 8016cf4:	011b      	lsls	r3, r3, #4
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	d020      	beq.n	8016d3c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8016cfa:	697a      	ldr	r2, [r7, #20]
 8016cfc:	2380      	movs	r3, #128	@ 0x80
 8016cfe:	011b      	lsls	r3, r3, #4
 8016d00:	429a      	cmp	r2, r3
 8016d02:	d832      	bhi.n	8016d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d005      	beq.n	8016d16 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8016d0a:	697a      	ldr	r2, [r7, #20]
 8016d0c:	2380      	movs	r3, #128	@ 0x80
 8016d0e:	00db      	lsls	r3, r3, #3
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d005      	beq.n	8016d20 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8016d14:	e029      	b.n	8016d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016d16:	f7ff fba9 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016d1a:	0003      	movs	r3, r0
 8016d1c:	61fb      	str	r3, [r7, #28]
            break;
 8016d1e:	e02b      	b.n	8016d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8016d20:	f7ff fafe 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016d24:	0003      	movs	r3, r0
 8016d26:	61fb      	str	r3, [r7, #28]
            break;
 8016d28:	e026      	b.n	8016d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8016d2a:	46c0      	nop			@ (mov r8, r8)
 8016d2c:	40021000 	.word	0x40021000
 8016d30:	0001e848 	.word	0x0001e848
 8016d34:	0801b0e0 	.word	0x0801b0e0
 8016d38:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016d3c:	4bbb      	ldr	r3, [pc, #748]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	2380      	movs	r3, #128	@ 0x80
 8016d42:	00db      	lsls	r3, r3, #3
 8016d44:	401a      	ands	r2, r3
 8016d46:	2380      	movs	r3, #128	@ 0x80
 8016d48:	00db      	lsls	r3, r3, #3
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d110      	bne.n	8016d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8016d4e:	4bb8      	ldr	r3, [pc, #736]	@ (8017030 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8016d50:	61fb      	str	r3, [r7, #28]
            break;
 8016d52:	e00d      	b.n	8016d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016d54:	4ab5      	ldr	r2, [pc, #724]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016d56:	2390      	movs	r3, #144	@ 0x90
 8016d58:	58d3      	ldr	r3, [r2, r3]
 8016d5a:	2202      	movs	r2, #2
 8016d5c:	4013      	ands	r3, r2
 8016d5e:	2b02      	cmp	r3, #2
 8016d60:	d109      	bne.n	8016d76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8016d62:	2380      	movs	r3, #128	@ 0x80
 8016d64:	021b      	lsls	r3, r3, #8
 8016d66:	61fb      	str	r3, [r7, #28]
            break;
 8016d68:	e005      	b.n	8016d76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8016d6a:	46c0      	nop			@ (mov r8, r8)
 8016d6c:	f000 fb69 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016d70:	46c0      	nop			@ (mov r8, r8)
 8016d72:	f000 fb66 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016d76:	46c0      	nop			@ (mov r8, r8)
        break;
 8016d78:	f000 fb63 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8016d7c:	4aab      	ldr	r2, [pc, #684]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016d7e:	2388      	movs	r3, #136	@ 0x88
 8016d80:	58d2      	ldr	r2, [r2, r3]
 8016d82:	23c0      	movs	r3, #192	@ 0xc0
 8016d84:	009b      	lsls	r3, r3, #2
 8016d86:	4013      	ands	r3, r2
 8016d88:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016d8a:	697a      	ldr	r2, [r7, #20]
 8016d8c:	23c0      	movs	r3, #192	@ 0xc0
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d02d      	beq.n	8016df0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8016d94:	697a      	ldr	r2, [r7, #20]
 8016d96:	23c0      	movs	r3, #192	@ 0xc0
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d833      	bhi.n	8016e06 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8016d9e:	697a      	ldr	r2, [r7, #20]
 8016da0:	2380      	movs	r3, #128	@ 0x80
 8016da2:	009b      	lsls	r3, r3, #2
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d017      	beq.n	8016dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8016da8:	697a      	ldr	r2, [r7, #20]
 8016daa:	2380      	movs	r3, #128	@ 0x80
 8016dac:	009b      	lsls	r3, r3, #2
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d829      	bhi.n	8016e06 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d005      	beq.n	8016dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8016db8:	697a      	ldr	r2, [r7, #20]
 8016dba:	2380      	movs	r3, #128	@ 0x80
 8016dbc:	005b      	lsls	r3, r3, #1
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d005      	beq.n	8016dce <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8016dc2:	e020      	b.n	8016e06 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016dc4:	f7ff fb52 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016dc8:	0003      	movs	r3, r0
 8016dca:	61fb      	str	r3, [r7, #28]
            break;
 8016dcc:	e022      	b.n	8016e14 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8016dce:	f7ff faa7 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016dd2:	0003      	movs	r3, r0
 8016dd4:	61fb      	str	r3, [r7, #28]
            break;
 8016dd6:	e01d      	b.n	8016e14 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016dd8:	4b94      	ldr	r3, [pc, #592]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	2380      	movs	r3, #128	@ 0x80
 8016dde:	00db      	lsls	r3, r3, #3
 8016de0:	401a      	ands	r2, r3
 8016de2:	2380      	movs	r3, #128	@ 0x80
 8016de4:	00db      	lsls	r3, r3, #3
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d110      	bne.n	8016e0c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8016dea:	4b91      	ldr	r3, [pc, #580]	@ (8017030 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8016dec:	61fb      	str	r3, [r7, #28]
            break;
 8016dee:	e00d      	b.n	8016e0c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016df0:	4a8e      	ldr	r2, [pc, #568]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016df2:	2390      	movs	r3, #144	@ 0x90
 8016df4:	58d3      	ldr	r3, [r2, r3]
 8016df6:	2202      	movs	r2, #2
 8016df8:	4013      	ands	r3, r2
 8016dfa:	2b02      	cmp	r3, #2
 8016dfc:	d109      	bne.n	8016e12 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8016dfe:	2380      	movs	r3, #128	@ 0x80
 8016e00:	021b      	lsls	r3, r3, #8
 8016e02:	61fb      	str	r3, [r7, #28]
            break;
 8016e04:	e005      	b.n	8016e12 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8016e06:	46c0      	nop			@ (mov r8, r8)
 8016e08:	f000 fb1b 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016e0c:	46c0      	nop			@ (mov r8, r8)
 8016e0e:	f000 fb18 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016e12:	46c0      	nop			@ (mov r8, r8)
        break;
 8016e14:	f000 fb15 	bl	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8016e18:	4a84      	ldr	r2, [pc, #528]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016e1a:	2388      	movs	r3, #136	@ 0x88
 8016e1c:	58d3      	ldr	r3, [r2, r3]
 8016e1e:	22c0      	movs	r2, #192	@ 0xc0
 8016e20:	4013      	ands	r3, r2
 8016e22:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016e24:	697b      	ldr	r3, [r7, #20]
 8016e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8016e28:	d025      	beq.n	8016e76 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8016e2e:	d82d      	bhi.n	8016e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	2b80      	cmp	r3, #128	@ 0x80
 8016e34:	d013      	beq.n	8016e5e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	2b80      	cmp	r3, #128	@ 0x80
 8016e3a:	d827      	bhi.n	8016e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d003      	beq.n	8016e4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	2b40      	cmp	r3, #64	@ 0x40
 8016e46:	d005      	beq.n	8016e54 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8016e48:	e020      	b.n	8016e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016e4a:	f7ff fb0f 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016e4e:	0003      	movs	r3, r0
 8016e50:	61fb      	str	r3, [r7, #28]
            break;
 8016e52:	e020      	b.n	8016e96 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8016e54:	f7ff fa64 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016e58:	0003      	movs	r3, r0
 8016e5a:	61fb      	str	r3, [r7, #28]
            break;
 8016e5c:	e01b      	b.n	8016e96 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016e5e:	4b73      	ldr	r3, [pc, #460]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	2380      	movs	r3, #128	@ 0x80
 8016e64:	00db      	lsls	r3, r3, #3
 8016e66:	401a      	ands	r2, r3
 8016e68:	2380      	movs	r3, #128	@ 0x80
 8016e6a:	00db      	lsls	r3, r3, #3
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d10f      	bne.n	8016e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8016e70:	4b6f      	ldr	r3, [pc, #444]	@ (8017030 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8016e72:	61fb      	str	r3, [r7, #28]
            break;
 8016e74:	e00c      	b.n	8016e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016e76:	4a6d      	ldr	r2, [pc, #436]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016e78:	2390      	movs	r3, #144	@ 0x90
 8016e7a:	58d3      	ldr	r3, [r2, r3]
 8016e7c:	2202      	movs	r2, #2
 8016e7e:	4013      	ands	r3, r2
 8016e80:	2b02      	cmp	r3, #2
 8016e82:	d107      	bne.n	8016e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8016e84:	2380      	movs	r3, #128	@ 0x80
 8016e86:	021b      	lsls	r3, r3, #8
 8016e88:	61fb      	str	r3, [r7, #28]
            break;
 8016e8a:	e003      	b.n	8016e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8016e8c:	46c0      	nop			@ (mov r8, r8)
 8016e8e:	e2d8      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016e90:	46c0      	nop			@ (mov r8, r8)
 8016e92:	e2d6      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016e94:	46c0      	nop			@ (mov r8, r8)
        break;
 8016e96:	e2d4      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8016e98:	4a64      	ldr	r2, [pc, #400]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016e9a:	2388      	movs	r3, #136	@ 0x88
 8016e9c:	58d2      	ldr	r2, [r2, r3]
 8016e9e:	23c0      	movs	r3, #192	@ 0xc0
 8016ea0:	059b      	lsls	r3, r3, #22
 8016ea2:	4013      	ands	r3, r2
 8016ea4:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016ea6:	697a      	ldr	r2, [r7, #20]
 8016ea8:	2380      	movs	r3, #128	@ 0x80
 8016eaa:	059b      	lsls	r3, r3, #22
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d012      	beq.n	8016ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8016eb0:	697a      	ldr	r2, [r7, #20]
 8016eb2:	2380      	movs	r3, #128	@ 0x80
 8016eb4:	059b      	lsls	r3, r3, #22
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d825      	bhi.n	8016f06 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d005      	beq.n	8016ecc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8016ec0:	697a      	ldr	r2, [r7, #20]
 8016ec2:	2380      	movs	r3, #128	@ 0x80
 8016ec4:	055b      	lsls	r3, r3, #21
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	d014      	beq.n	8016ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8016eca:	e01c      	b.n	8016f06 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8016ecc:	f7ff fa28 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016ed0:	0003      	movs	r3, r0
 8016ed2:	61fb      	str	r3, [r7, #28]
            break;
 8016ed4:	e018      	b.n	8016f08 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016ed6:	4b55      	ldr	r3, [pc, #340]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016ed8:	681a      	ldr	r2, [r3, #0]
 8016eda:	2380      	movs	r3, #128	@ 0x80
 8016edc:	00db      	lsls	r3, r3, #3
 8016ede:	401a      	ands	r2, r3
 8016ee0:	2380      	movs	r3, #128	@ 0x80
 8016ee2:	00db      	lsls	r3, r3, #3
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d102      	bne.n	8016eee <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8016ee8:	4b51      	ldr	r3, [pc, #324]	@ (8017030 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8016eea:	61fb      	str	r3, [r7, #28]
            break;
 8016eec:	e00c      	b.n	8016f08 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8016eee:	2300      	movs	r3, #0
 8016ef0:	61fb      	str	r3, [r7, #28]
            break;
 8016ef2:	e009      	b.n	8016f08 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8016ef4:	2408      	movs	r4, #8
 8016ef6:	193b      	adds	r3, r7, r4
 8016ef8:	0018      	movs	r0, r3
 8016efa:	f000 faad 	bl	8017458 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8016efe:	193b      	adds	r3, r7, r4
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	61fb      	str	r3, [r7, #28]
            break;
 8016f04:	e000      	b.n	8016f08 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8016f06:	46c0      	nop			@ (mov r8, r8)
        break;
 8016f08:	e29b      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8016f0a:	4a48      	ldr	r2, [pc, #288]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016f0c:	2388      	movs	r3, #136	@ 0x88
 8016f0e:	58d2      	ldr	r2, [r2, r3]
 8016f10:	23c0      	movs	r3, #192	@ 0xc0
 8016f12:	019b      	lsls	r3, r3, #6
 8016f14:	4013      	ands	r3, r2
 8016f16:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016f18:	697a      	ldr	r2, [r7, #20]
 8016f1a:	2380      	movs	r3, #128	@ 0x80
 8016f1c:	019b      	lsls	r3, r3, #6
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d017      	beq.n	8016f52 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8016f22:	697a      	ldr	r2, [r7, #20]
 8016f24:	2380      	movs	r3, #128	@ 0x80
 8016f26:	019b      	lsls	r3, r3, #6
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d81e      	bhi.n	8016f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d005      	beq.n	8016f3e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8016f32:	697a      	ldr	r2, [r7, #20]
 8016f34:	2380      	movs	r3, #128	@ 0x80
 8016f36:	015b      	lsls	r3, r3, #5
 8016f38:	429a      	cmp	r2, r3
 8016f3a:	d005      	beq.n	8016f48 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8016f3c:	e015      	b.n	8016f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016f3e:	f7ff fa95 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016f42:	0003      	movs	r3, r0
 8016f44:	61fb      	str	r3, [r7, #28]
            break;
 8016f46:	e013      	b.n	8016f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8016f48:	f7ff f9ea 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016f4c:	0003      	movs	r3, r0
 8016f4e:	61fb      	str	r3, [r7, #28]
            break;
 8016f50:	e00e      	b.n	8016f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016f52:	4b36      	ldr	r3, [pc, #216]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016f54:	681a      	ldr	r2, [r3, #0]
 8016f56:	2380      	movs	r3, #128	@ 0x80
 8016f58:	00db      	lsls	r3, r3, #3
 8016f5a:	401a      	ands	r2, r3
 8016f5c:	2380      	movs	r3, #128	@ 0x80
 8016f5e:	00db      	lsls	r3, r3, #3
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d104      	bne.n	8016f6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8016f64:	4b32      	ldr	r3, [pc, #200]	@ (8017030 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8016f66:	61fb      	str	r3, [r7, #28]
            break;
 8016f68:	e001      	b.n	8016f6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8016f6a:	46c0      	nop			@ (mov r8, r8)
 8016f6c:	e269      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016f6e:	46c0      	nop			@ (mov r8, r8)
        break;
 8016f70:	e267      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8016f72:	4a2e      	ldr	r2, [pc, #184]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016f74:	2388      	movs	r3, #136	@ 0x88
 8016f76:	58d2      	ldr	r2, [r2, r3]
 8016f78:	23c0      	movs	r3, #192	@ 0xc0
 8016f7a:	029b      	lsls	r3, r3, #10
 8016f7c:	4013      	ands	r3, r2
 8016f7e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016f80:	697a      	ldr	r2, [r7, #20]
 8016f82:	2380      	movs	r3, #128	@ 0x80
 8016f84:	029b      	lsls	r3, r3, #10
 8016f86:	429a      	cmp	r2, r3
 8016f88:	d017      	beq.n	8016fba <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8016f8a:	697a      	ldr	r2, [r7, #20]
 8016f8c:	2380      	movs	r3, #128	@ 0x80
 8016f8e:	029b      	lsls	r3, r3, #10
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d81e      	bhi.n	8016fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d005      	beq.n	8016fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8016f9a:	697a      	ldr	r2, [r7, #20]
 8016f9c:	2380      	movs	r3, #128	@ 0x80
 8016f9e:	025b      	lsls	r3, r3, #9
 8016fa0:	429a      	cmp	r2, r3
 8016fa2:	d005      	beq.n	8016fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8016fa4:	e015      	b.n	8016fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016fa6:	f7ff fa61 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8016faa:	0003      	movs	r3, r0
 8016fac:	61fb      	str	r3, [r7, #28]
            break;
 8016fae:	e013      	b.n	8016fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8016fb0:	f7ff f9b6 	bl	8016320 <HAL_RCC_GetSysClockFreq>
 8016fb4:	0003      	movs	r3, r0
 8016fb6:	61fb      	str	r3, [r7, #28]
            break;
 8016fb8:	e00e      	b.n	8016fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016fba:	4b1c      	ldr	r3, [pc, #112]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016fbc:	681a      	ldr	r2, [r3, #0]
 8016fbe:	2380      	movs	r3, #128	@ 0x80
 8016fc0:	00db      	lsls	r3, r3, #3
 8016fc2:	401a      	ands	r2, r3
 8016fc4:	2380      	movs	r3, #128	@ 0x80
 8016fc6:	00db      	lsls	r3, r3, #3
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	d104      	bne.n	8016fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8016fcc:	4b18      	ldr	r3, [pc, #96]	@ (8017030 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8016fce:	61fb      	str	r3, [r7, #28]
            break;
 8016fd0:	e001      	b.n	8016fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8016fd2:	46c0      	nop			@ (mov r8, r8)
 8016fd4:	e235      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016fd6:	46c0      	nop			@ (mov r8, r8)
        break;
 8016fd8:	e233      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8016fda:	4a14      	ldr	r2, [pc, #80]	@ (801702c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016fdc:	2388      	movs	r3, #136	@ 0x88
 8016fde:	58d2      	ldr	r2, [r2, r3]
 8016fe0:	23c0      	movs	r3, #192	@ 0xc0
 8016fe2:	031b      	lsls	r3, r3, #12
 8016fe4:	4013      	ands	r3, r2
 8016fe6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8016fe8:	697a      	ldr	r2, [r7, #20]
 8016fea:	23c0      	movs	r3, #192	@ 0xc0
 8016fec:	031b      	lsls	r3, r3, #12
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d041      	beq.n	8017076 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8016ff2:	697a      	ldr	r2, [r7, #20]
 8016ff4:	23c0      	movs	r3, #192	@ 0xc0
 8016ff6:	031b      	lsls	r3, r3, #12
 8016ff8:	429a      	cmp	r2, r3
 8016ffa:	d847      	bhi.n	801708c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8016ffc:	697a      	ldr	r2, [r7, #20]
 8016ffe:	2380      	movs	r3, #128	@ 0x80
 8017000:	031b      	lsls	r3, r3, #12
 8017002:	429a      	cmp	r2, r3
 8017004:	d02b      	beq.n	801705e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8017006:	697a      	ldr	r2, [r7, #20]
 8017008:	2380      	movs	r3, #128	@ 0x80
 801700a:	031b      	lsls	r3, r3, #12
 801700c:	429a      	cmp	r2, r3
 801700e:	d83d      	bhi.n	801708c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d005      	beq.n	8017022 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8017016:	697a      	ldr	r2, [r7, #20]
 8017018:	2380      	movs	r3, #128	@ 0x80
 801701a:	02db      	lsls	r3, r3, #11
 801701c:	429a      	cmp	r2, r3
 801701e:	d009      	beq.n	8017034 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8017020:	e034      	b.n	801708c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017022:	f7ff fa23 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8017026:	0003      	movs	r3, r0
 8017028:	61fb      	str	r3, [r7, #28]
            break;
 801702a:	e036      	b.n	801709a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 801702c:	40021000 	.word	0x40021000
 8017030:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8017034:	4abd      	ldr	r2, [pc, #756]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017036:	2394      	movs	r3, #148	@ 0x94
 8017038:	58d3      	ldr	r3, [r2, r3]
 801703a:	2202      	movs	r2, #2
 801703c:	4013      	ands	r3, r2
 801703e:	2b02      	cmp	r3, #2
 8017040:	d126      	bne.n	8017090 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8017042:	4aba      	ldr	r2, [pc, #744]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017044:	2394      	movs	r3, #148	@ 0x94
 8017046:	58d3      	ldr	r3, [r2, r3]
 8017048:	2204      	movs	r2, #4
 801704a:	4013      	ands	r3, r2
 801704c:	2b04      	cmp	r3, #4
 801704e:	d102      	bne.n	8017056 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8017050:	23fa      	movs	r3, #250	@ 0xfa
 8017052:	61fb      	str	r3, [r7, #28]
            break;
 8017054:	e01c      	b.n	8017090 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8017056:	23fa      	movs	r3, #250	@ 0xfa
 8017058:	01db      	lsls	r3, r3, #7
 801705a:	61fb      	str	r3, [r7, #28]
            break;
 801705c:	e018      	b.n	8017090 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801705e:	4bb3      	ldr	r3, [pc, #716]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017060:	681a      	ldr	r2, [r3, #0]
 8017062:	2380      	movs	r3, #128	@ 0x80
 8017064:	00db      	lsls	r3, r3, #3
 8017066:	401a      	ands	r2, r3
 8017068:	2380      	movs	r3, #128	@ 0x80
 801706a:	00db      	lsls	r3, r3, #3
 801706c:	429a      	cmp	r2, r3
 801706e:	d111      	bne.n	8017094 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8017070:	4baf      	ldr	r3, [pc, #700]	@ (8017330 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8017072:	61fb      	str	r3, [r7, #28]
            break;
 8017074:	e00e      	b.n	8017094 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017076:	4aad      	ldr	r2, [pc, #692]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017078:	2390      	movs	r3, #144	@ 0x90
 801707a:	58d3      	ldr	r3, [r2, r3]
 801707c:	2202      	movs	r2, #2
 801707e:	4013      	ands	r3, r2
 8017080:	2b02      	cmp	r3, #2
 8017082:	d109      	bne.n	8017098 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8017084:	2380      	movs	r3, #128	@ 0x80
 8017086:	021b      	lsls	r3, r3, #8
 8017088:	61fb      	str	r3, [r7, #28]
            break;
 801708a:	e005      	b.n	8017098 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 801708c:	46c0      	nop			@ (mov r8, r8)
 801708e:	e1d8      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017090:	46c0      	nop			@ (mov r8, r8)
 8017092:	e1d6      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017094:	46c0      	nop			@ (mov r8, r8)
 8017096:	e1d4      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017098:	46c0      	nop			@ (mov r8, r8)
        break;
 801709a:	e1d2      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 801709c:	4aa3      	ldr	r2, [pc, #652]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801709e:	2388      	movs	r3, #136	@ 0x88
 80170a0:	58d2      	ldr	r2, [r2, r3]
 80170a2:	23c0      	movs	r3, #192	@ 0xc0
 80170a4:	039b      	lsls	r3, r3, #14
 80170a6:	4013      	ands	r3, r2
 80170a8:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80170aa:	697a      	ldr	r2, [r7, #20]
 80170ac:	23c0      	movs	r3, #192	@ 0xc0
 80170ae:	039b      	lsls	r3, r3, #14
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d03d      	beq.n	8017130 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80170b4:	697a      	ldr	r2, [r7, #20]
 80170b6:	23c0      	movs	r3, #192	@ 0xc0
 80170b8:	039b      	lsls	r3, r3, #14
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d843      	bhi.n	8017146 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80170be:	697a      	ldr	r2, [r7, #20]
 80170c0:	2380      	movs	r3, #128	@ 0x80
 80170c2:	039b      	lsls	r3, r3, #14
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d027      	beq.n	8017118 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 80170c8:	697a      	ldr	r2, [r7, #20]
 80170ca:	2380      	movs	r3, #128	@ 0x80
 80170cc:	039b      	lsls	r3, r3, #14
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d839      	bhi.n	8017146 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d005      	beq.n	80170e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80170d8:	697a      	ldr	r2, [r7, #20]
 80170da:	2380      	movs	r3, #128	@ 0x80
 80170dc:	035b      	lsls	r3, r3, #13
 80170de:	429a      	cmp	r2, r3
 80170e0:	d005      	beq.n	80170ee <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 80170e2:	e030      	b.n	8017146 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 80170e4:	f7ff f9c2 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 80170e8:	0003      	movs	r3, r0
 80170ea:	61fb      	str	r3, [r7, #28]
            break;
 80170ec:	e032      	b.n	8017154 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80170ee:	4a8f      	ldr	r2, [pc, #572]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80170f0:	2394      	movs	r3, #148	@ 0x94
 80170f2:	58d3      	ldr	r3, [r2, r3]
 80170f4:	2202      	movs	r2, #2
 80170f6:	4013      	ands	r3, r2
 80170f8:	2b02      	cmp	r3, #2
 80170fa:	d126      	bne.n	801714a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80170fc:	4a8b      	ldr	r2, [pc, #556]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80170fe:	2394      	movs	r3, #148	@ 0x94
 8017100:	58d3      	ldr	r3, [r2, r3]
 8017102:	2204      	movs	r2, #4
 8017104:	4013      	ands	r3, r2
 8017106:	2b04      	cmp	r3, #4
 8017108:	d102      	bne.n	8017110 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 801710a:	23fa      	movs	r3, #250	@ 0xfa
 801710c:	61fb      	str	r3, [r7, #28]
            break;
 801710e:	e01c      	b.n	801714a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8017110:	23fa      	movs	r3, #250	@ 0xfa
 8017112:	01db      	lsls	r3, r3, #7
 8017114:	61fb      	str	r3, [r7, #28]
            break;
 8017116:	e018      	b.n	801714a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017118:	4b84      	ldr	r3, [pc, #528]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801711a:	681a      	ldr	r2, [r3, #0]
 801711c:	2380      	movs	r3, #128	@ 0x80
 801711e:	00db      	lsls	r3, r3, #3
 8017120:	401a      	ands	r2, r3
 8017122:	2380      	movs	r3, #128	@ 0x80
 8017124:	00db      	lsls	r3, r3, #3
 8017126:	429a      	cmp	r2, r3
 8017128:	d111      	bne.n	801714e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 801712a:	4b81      	ldr	r3, [pc, #516]	@ (8017330 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 801712c:	61fb      	str	r3, [r7, #28]
            break;
 801712e:	e00e      	b.n	801714e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017130:	4a7e      	ldr	r2, [pc, #504]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017132:	2390      	movs	r3, #144	@ 0x90
 8017134:	58d3      	ldr	r3, [r2, r3]
 8017136:	2202      	movs	r2, #2
 8017138:	4013      	ands	r3, r2
 801713a:	2b02      	cmp	r3, #2
 801713c:	d109      	bne.n	8017152 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 801713e:	2380      	movs	r3, #128	@ 0x80
 8017140:	021b      	lsls	r3, r3, #8
 8017142:	61fb      	str	r3, [r7, #28]
            break;
 8017144:	e005      	b.n	8017152 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8017146:	46c0      	nop			@ (mov r8, r8)
 8017148:	e17b      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801714a:	46c0      	nop			@ (mov r8, r8)
 801714c:	e179      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801714e:	46c0      	nop			@ (mov r8, r8)
 8017150:	e177      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017152:	46c0      	nop			@ (mov r8, r8)
        break;
 8017154:	e175      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8017156:	4a75      	ldr	r2, [pc, #468]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017158:	2388      	movs	r3, #136	@ 0x88
 801715a:	58d2      	ldr	r2, [r2, r3]
 801715c:	23c0      	movs	r3, #192	@ 0xc0
 801715e:	041b      	lsls	r3, r3, #16
 8017160:	4013      	ands	r3, r2
 8017162:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017164:	697a      	ldr	r2, [r7, #20]
 8017166:	23c0      	movs	r3, #192	@ 0xc0
 8017168:	041b      	lsls	r3, r3, #16
 801716a:	429a      	cmp	r2, r3
 801716c:	d03d      	beq.n	80171ea <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 801716e:	697a      	ldr	r2, [r7, #20]
 8017170:	23c0      	movs	r3, #192	@ 0xc0
 8017172:	041b      	lsls	r3, r3, #16
 8017174:	429a      	cmp	r2, r3
 8017176:	d843      	bhi.n	8017200 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8017178:	697a      	ldr	r2, [r7, #20]
 801717a:	2380      	movs	r3, #128	@ 0x80
 801717c:	041b      	lsls	r3, r3, #16
 801717e:	429a      	cmp	r2, r3
 8017180:	d027      	beq.n	80171d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8017182:	697a      	ldr	r2, [r7, #20]
 8017184:	2380      	movs	r3, #128	@ 0x80
 8017186:	041b      	lsls	r3, r3, #16
 8017188:	429a      	cmp	r2, r3
 801718a:	d839      	bhi.n	8017200 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d005      	beq.n	801719e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8017192:	697a      	ldr	r2, [r7, #20]
 8017194:	2380      	movs	r3, #128	@ 0x80
 8017196:	03db      	lsls	r3, r3, #15
 8017198:	429a      	cmp	r2, r3
 801719a:	d005      	beq.n	80171a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 801719c:	e030      	b.n	8017200 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 801719e:	f7ff f965 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 80171a2:	0003      	movs	r3, r0
 80171a4:	61fb      	str	r3, [r7, #28]
            break;
 80171a6:	e032      	b.n	801720e <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80171a8:	4a60      	ldr	r2, [pc, #384]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80171aa:	2394      	movs	r3, #148	@ 0x94
 80171ac:	58d3      	ldr	r3, [r2, r3]
 80171ae:	2202      	movs	r2, #2
 80171b0:	4013      	ands	r3, r2
 80171b2:	2b02      	cmp	r3, #2
 80171b4:	d126      	bne.n	8017204 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80171b6:	4a5d      	ldr	r2, [pc, #372]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80171b8:	2394      	movs	r3, #148	@ 0x94
 80171ba:	58d3      	ldr	r3, [r2, r3]
 80171bc:	2204      	movs	r2, #4
 80171be:	4013      	ands	r3, r2
 80171c0:	2b04      	cmp	r3, #4
 80171c2:	d102      	bne.n	80171ca <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 80171c4:	23fa      	movs	r3, #250	@ 0xfa
 80171c6:	61fb      	str	r3, [r7, #28]
            break;
 80171c8:	e01c      	b.n	8017204 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 80171ca:	23fa      	movs	r3, #250	@ 0xfa
 80171cc:	01db      	lsls	r3, r3, #7
 80171ce:	61fb      	str	r3, [r7, #28]
            break;
 80171d0:	e018      	b.n	8017204 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80171d2:	4b56      	ldr	r3, [pc, #344]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	2380      	movs	r3, #128	@ 0x80
 80171d8:	00db      	lsls	r3, r3, #3
 80171da:	401a      	ands	r2, r3
 80171dc:	2380      	movs	r3, #128	@ 0x80
 80171de:	00db      	lsls	r3, r3, #3
 80171e0:	429a      	cmp	r2, r3
 80171e2:	d111      	bne.n	8017208 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 80171e4:	4b52      	ldr	r3, [pc, #328]	@ (8017330 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80171e6:	61fb      	str	r3, [r7, #28]
            break;
 80171e8:	e00e      	b.n	8017208 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80171ea:	4a50      	ldr	r2, [pc, #320]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80171ec:	2390      	movs	r3, #144	@ 0x90
 80171ee:	58d3      	ldr	r3, [r2, r3]
 80171f0:	2202      	movs	r2, #2
 80171f2:	4013      	ands	r3, r2
 80171f4:	2b02      	cmp	r3, #2
 80171f6:	d109      	bne.n	801720c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 80171f8:	2380      	movs	r3, #128	@ 0x80
 80171fa:	021b      	lsls	r3, r3, #8
 80171fc:	61fb      	str	r3, [r7, #28]
            break;
 80171fe:	e005      	b.n	801720c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8017200:	46c0      	nop			@ (mov r8, r8)
 8017202:	e11e      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017204:	46c0      	nop			@ (mov r8, r8)
 8017206:	e11c      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017208:	46c0      	nop			@ (mov r8, r8)
 801720a:	e11a      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801720c:	46c0      	nop			@ (mov r8, r8)
        break;
 801720e:	e118      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8017210:	4a46      	ldr	r2, [pc, #280]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017212:	2388      	movs	r3, #136	@ 0x88
 8017214:	58d2      	ldr	r2, [r2, r3]
 8017216:	2380      	movs	r3, #128	@ 0x80
 8017218:	045b      	lsls	r3, r3, #17
 801721a:	4013      	ands	r3, r2
 801721c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801721e:	697b      	ldr	r3, [r7, #20]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d005      	beq.n	8017230 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8017224:	697a      	ldr	r2, [r7, #20]
 8017226:	2380      	movs	r3, #128	@ 0x80
 8017228:	045b      	lsls	r3, r3, #17
 801722a:	429a      	cmp	r2, r3
 801722c:	d011      	beq.n	8017252 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 801722e:	e019      	b.n	8017264 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8017230:	4b3e      	ldr	r3, [pc, #248]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017232:	689a      	ldr	r2, [r3, #8]
 8017234:	23e0      	movs	r3, #224	@ 0xe0
 8017236:	01db      	lsls	r3, r3, #7
 8017238:	4013      	ands	r3, r2
 801723a:	d104      	bne.n	8017246 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 801723c:	f7ff f916 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8017240:	0003      	movs	r3, r0
 8017242:	61fb      	str	r3, [r7, #28]
            break;
 8017244:	e00e      	b.n	8017264 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8017246:	f7ff f911 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 801724a:	0003      	movs	r3, r0
 801724c:	005b      	lsls	r3, r3, #1
 801724e:	61fb      	str	r3, [r7, #28]
            break;
 8017250:	e008      	b.n	8017264 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8017252:	2408      	movs	r4, #8
 8017254:	193b      	adds	r3, r7, r4
 8017256:	0018      	movs	r0, r3
 8017258:	f000 f8fe 	bl	8017458 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801725c:	193b      	adds	r3, r7, r4
 801725e:	685b      	ldr	r3, [r3, #4]
 8017260:	61fb      	str	r3, [r7, #28]
            break;
 8017262:	46c0      	nop			@ (mov r8, r8)
        break;
 8017264:	e0ed      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8017266:	4a31      	ldr	r2, [pc, #196]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017268:	2388      	movs	r3, #136	@ 0x88
 801726a:	58d2      	ldr	r2, [r2, r3]
 801726c:	2380      	movs	r3, #128	@ 0x80
 801726e:	049b      	lsls	r3, r3, #18
 8017270:	4013      	ands	r3, r2
 8017272:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8017274:	697b      	ldr	r3, [r7, #20]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d005      	beq.n	8017286 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 801727a:	697a      	ldr	r2, [r7, #20]
 801727c:	2380      	movs	r3, #128	@ 0x80
 801727e:	049b      	lsls	r3, r3, #18
 8017280:	429a      	cmp	r2, r3
 8017282:	d011      	beq.n	80172a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8017284:	e019      	b.n	80172ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8017286:	4b29      	ldr	r3, [pc, #164]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017288:	689a      	ldr	r2, [r3, #8]
 801728a:	23e0      	movs	r3, #224	@ 0xe0
 801728c:	01db      	lsls	r3, r3, #7
 801728e:	4013      	ands	r3, r2
 8017290:	d104      	bne.n	801729c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8017292:	f7ff f8eb 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 8017296:	0003      	movs	r3, r0
 8017298:	61fb      	str	r3, [r7, #28]
            break;
 801729a:	e00e      	b.n	80172ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 801729c:	f7ff f8e6 	bl	801646c <HAL_RCC_GetPCLK1Freq>
 80172a0:	0003      	movs	r3, r0
 80172a2:	005b      	lsls	r3, r3, #1
 80172a4:	61fb      	str	r3, [r7, #28]
            break;
 80172a6:	e008      	b.n	80172ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80172a8:	2408      	movs	r4, #8
 80172aa:	193b      	adds	r3, r7, r4
 80172ac:	0018      	movs	r0, r3
 80172ae:	f000 f8d3 	bl	8017458 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80172b2:	193b      	adds	r3, r7, r4
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	61fb      	str	r3, [r7, #28]
            break;
 80172b8:	46c0      	nop			@ (mov r8, r8)
        break;
 80172ba:	e0c2      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80172bc:	4a1b      	ldr	r2, [pc, #108]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80172be:	2388      	movs	r3, #136	@ 0x88
 80172c0:	58d2      	ldr	r2, [r2, r3]
 80172c2:	23c0      	movs	r3, #192	@ 0xc0
 80172c4:	051b      	lsls	r3, r3, #20
 80172c6:	4013      	ands	r3, r2
 80172c8:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80172ca:	697a      	ldr	r2, [r7, #20]
 80172cc:	23c0      	movs	r3, #192	@ 0xc0
 80172ce:	051b      	lsls	r3, r3, #20
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d017      	beq.n	8017304 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80172d4:	697a      	ldr	r2, [r7, #20]
 80172d6:	23c0      	movs	r3, #192	@ 0xc0
 80172d8:	051b      	lsls	r3, r3, #20
 80172da:	429a      	cmp	r2, r3
 80172dc:	d84a      	bhi.n	8017374 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80172de:	697a      	ldr	r2, [r7, #20]
 80172e0:	2380      	movs	r3, #128	@ 0x80
 80172e2:	051b      	lsls	r3, r3, #20
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d039      	beq.n	801735c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80172e8:	697a      	ldr	r2, [r7, #20]
 80172ea:	2380      	movs	r3, #128	@ 0x80
 80172ec:	051b      	lsls	r3, r3, #20
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d840      	bhi.n	8017374 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d03a      	beq.n	801736e <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 80172f8:	697a      	ldr	r2, [r7, #20]
 80172fa:	2380      	movs	r3, #128	@ 0x80
 80172fc:	04db      	lsls	r3, r3, #19
 80172fe:	429a      	cmp	r2, r3
 8017300:	d003      	beq.n	801730a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8017302:	e037      	b.n	8017374 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8017304:	4b0b      	ldr	r3, [pc, #44]	@ (8017334 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 8017306:	61fb      	str	r3, [r7, #28]
            break;
 8017308:	e037      	b.n	801737a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 801730a:	4b08      	ldr	r3, [pc, #32]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	2202      	movs	r2, #2
 8017310:	4013      	ands	r3, r2
 8017312:	2b02      	cmp	r3, #2
 8017314:	d130      	bne.n	8017378 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8017316:	4b05      	ldr	r3, [pc, #20]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2208      	movs	r2, #8
 801731c:	4013      	ands	r3, r2
 801731e:	d00b      	beq.n	8017338 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8017320:	4b02      	ldr	r3, [pc, #8]	@ (801732c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	091b      	lsrs	r3, r3, #4
 8017326:	220f      	movs	r2, #15
 8017328:	4013      	ands	r3, r2
 801732a:	e00b      	b.n	8017344 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 801732c:	40021000 	.word	0x40021000
 8017330:	00f42400 	.word	0x00f42400
 8017334:	02dc6c00 	.word	0x02dc6c00
 8017338:	4a44      	ldr	r2, [pc, #272]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801733a:	2394      	movs	r3, #148	@ 0x94
 801733c:	58d3      	ldr	r3, [r2, r3]
 801733e:	0a1b      	lsrs	r3, r3, #8
 8017340:	220f      	movs	r2, #15
 8017342:	4013      	ands	r3, r2
 8017344:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8017346:	69bb      	ldr	r3, [r7, #24]
 8017348:	2b0b      	cmp	r3, #11
 801734a:	d901      	bls.n	8017350 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 801734c:	230b      	movs	r3, #11
 801734e:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8017350:	4b3f      	ldr	r3, [pc, #252]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8017352:	69ba      	ldr	r2, [r7, #24]
 8017354:	0092      	lsls	r2, r2, #2
 8017356:	58d3      	ldr	r3, [r2, r3]
 8017358:	61fb      	str	r3, [r7, #28]
            break;
 801735a:	e00d      	b.n	8017378 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801735c:	2408      	movs	r4, #8
 801735e:	193b      	adds	r3, r7, r4
 8017360:	0018      	movs	r0, r3
 8017362:	f000 f879 	bl	8017458 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8017366:	193b      	adds	r3, r7, r4
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	61fb      	str	r3, [r7, #28]
            break;
 801736c:	e005      	b.n	801737a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 801736e:	2300      	movs	r3, #0
 8017370:	61fb      	str	r3, [r7, #28]
            break;
 8017372:	e002      	b.n	801737a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8017374:	46c0      	nop			@ (mov r8, r8)
 8017376:	e064      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017378:	46c0      	nop			@ (mov r8, r8)
        break;
 801737a:	e062      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801737c:	4a33      	ldr	r2, [pc, #204]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801737e:	2388      	movs	r3, #136	@ 0x88
 8017380:	58d2      	ldr	r2, [r2, r3]
 8017382:	23c0      	movs	r3, #192	@ 0xc0
 8017384:	051b      	lsls	r3, r3, #20
 8017386:	4013      	ands	r3, r2
 8017388:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 801738a:	697a      	ldr	r2, [r7, #20]
 801738c:	23c0      	movs	r3, #192	@ 0xc0
 801738e:	051b      	lsls	r3, r3, #20
 8017390:	429a      	cmp	r2, r3
 8017392:	d017      	beq.n	80173c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8017394:	697a      	ldr	r2, [r7, #20]
 8017396:	23c0      	movs	r3, #192	@ 0xc0
 8017398:	051b      	lsls	r3, r3, #20
 801739a:	429a      	cmp	r2, r3
 801739c:	d844      	bhi.n	8017428 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 801739e:	697a      	ldr	r2, [r7, #20]
 80173a0:	2380      	movs	r3, #128	@ 0x80
 80173a2:	051b      	lsls	r3, r3, #20
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d033      	beq.n	8017410 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80173a8:	697a      	ldr	r2, [r7, #20]
 80173aa:	2380      	movs	r3, #128	@ 0x80
 80173ac:	051b      	lsls	r3, r3, #20
 80173ae:	429a      	cmp	r2, r3
 80173b0:	d83a      	bhi.n	8017428 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80173b2:	697b      	ldr	r3, [r7, #20]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d034      	beq.n	8017422 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80173b8:	697a      	ldr	r2, [r7, #20]
 80173ba:	2380      	movs	r3, #128	@ 0x80
 80173bc:	04db      	lsls	r3, r3, #19
 80173be:	429a      	cmp	r2, r3
 80173c0:	d003      	beq.n	80173ca <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 80173c2:	e031      	b.n	8017428 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 80173c4:	4b23      	ldr	r3, [pc, #140]	@ (8017454 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 80173c6:	61fb      	str	r3, [r7, #28]
            break;
 80173c8:	e031      	b.n	801742e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80173ca:	4b20      	ldr	r3, [pc, #128]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	2202      	movs	r2, #2
 80173d0:	4013      	ands	r3, r2
 80173d2:	2b02      	cmp	r3, #2
 80173d4:	d12a      	bne.n	801742c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80173d6:	4b1d      	ldr	r3, [pc, #116]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	2208      	movs	r2, #8
 80173dc:	4013      	ands	r3, r2
 80173de:	d005      	beq.n	80173ec <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 80173e0:	4b1a      	ldr	r3, [pc, #104]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	091b      	lsrs	r3, r3, #4
 80173e6:	220f      	movs	r2, #15
 80173e8:	4013      	ands	r3, r2
 80173ea:	e005      	b.n	80173f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80173ec:	4a17      	ldr	r2, [pc, #92]	@ (801744c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80173ee:	2394      	movs	r3, #148	@ 0x94
 80173f0:	58d3      	ldr	r3, [r2, r3]
 80173f2:	0a1b      	lsrs	r3, r3, #8
 80173f4:	220f      	movs	r2, #15
 80173f6:	4013      	ands	r3, r2
 80173f8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80173fa:	69bb      	ldr	r3, [r7, #24]
 80173fc:	2b0b      	cmp	r3, #11
 80173fe:	d901      	bls.n	8017404 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8017400:	230b      	movs	r3, #11
 8017402:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8017404:	4b12      	ldr	r3, [pc, #72]	@ (8017450 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8017406:	69ba      	ldr	r2, [r7, #24]
 8017408:	0092      	lsls	r2, r2, #2
 801740a:	58d3      	ldr	r3, [r2, r3]
 801740c:	61fb      	str	r3, [r7, #28]
            break;
 801740e:	e00d      	b.n	801742c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8017410:	2408      	movs	r4, #8
 8017412:	193b      	adds	r3, r7, r4
 8017414:	0018      	movs	r0, r3
 8017416:	f000 f81f 	bl	8017458 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801741a:	193b      	adds	r3, r7, r4
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	61fb      	str	r3, [r7, #28]
            break;
 8017420:	e005      	b.n	801742e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8017422:	2300      	movs	r3, #0
 8017424:	61fb      	str	r3, [r7, #28]
            break;
 8017426:	e002      	b.n	801742e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8017428:	46c0      	nop			@ (mov r8, r8)
 801742a:	e00a      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801742c:	46c0      	nop			@ (mov r8, r8)
        break;
 801742e:	e008      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017430:	46c0      	nop			@ (mov r8, r8)
 8017432:	e006      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017434:	46c0      	nop			@ (mov r8, r8)
 8017436:	e004      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017438:	46c0      	nop			@ (mov r8, r8)
 801743a:	e002      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 801743c:	46c0      	nop			@ (mov r8, r8)
 801743e:	e000      	b.n	8017442 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017440:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8017442:	69fb      	ldr	r3, [r7, #28]
}
 8017444:	0018      	movs	r0, r3
 8017446:	46bd      	mov	sp, r7
 8017448:	b009      	add	sp, #36	@ 0x24
 801744a:	bd90      	pop	{r4, r7, pc}
 801744c:	40021000 	.word	0x40021000
 8017450:	0801b090 	.word	0x0801b090
 8017454:	02dc6c00 	.word	0x02dc6c00

08017458 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b088      	sub	sp, #32
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017460:	4b58      	ldr	r3, [pc, #352]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017462:	68db      	ldr	r3, [r3, #12]
 8017464:	0a1b      	lsrs	r3, r3, #8
 8017466:	227f      	movs	r2, #127	@ 0x7f
 8017468:	4013      	ands	r3, r2
 801746a:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801746c:	4b55      	ldr	r3, [pc, #340]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801746e:	68db      	ldr	r3, [r3, #12]
 8017470:	2203      	movs	r2, #3
 8017472:	4013      	ands	r3, r2
 8017474:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8017476:	4b53      	ldr	r3, [pc, #332]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	091b      	lsrs	r3, r3, #4
 801747c:	2207      	movs	r2, #7
 801747e:	4013      	ands	r3, r2
 8017480:	3301      	adds	r3, #1
 8017482:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8017484:	4b4f      	ldr	r3, [pc, #316]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	2208      	movs	r2, #8
 801748a:	4013      	ands	r3, r2
 801748c:	d005      	beq.n	801749a <HAL_RCCEx_GetPLLClockFreq+0x42>
 801748e:	4b4d      	ldr	r3, [pc, #308]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	091b      	lsrs	r3, r3, #4
 8017494:	220f      	movs	r2, #15
 8017496:	4013      	ands	r3, r2
 8017498:	e005      	b.n	80174a6 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 801749a:	4a4a      	ldr	r2, [pc, #296]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801749c:	2394      	movs	r3, #148	@ 0x94
 801749e:	58d3      	ldr	r3, [r2, r3]
 80174a0:	0a1b      	lsrs	r3, r3, #8
 80174a2:	220f      	movs	r2, #15
 80174a4:	4013      	ands	r3, r2
 80174a6:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80174a8:	69bb      	ldr	r3, [r7, #24]
 80174aa:	2b0b      	cmp	r3, #11
 80174ac:	d901      	bls.n	80174b2 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80174ae:	230b      	movs	r3, #11
 80174b0:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	2b03      	cmp	r3, #3
 80174b6:	d020      	beq.n	80174fa <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	2b03      	cmp	r3, #3
 80174bc:	d827      	bhi.n	801750e <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	d00c      	beq.n	80174de <HAL_RCCEx_GetPLLClockFreq+0x86>
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	2b02      	cmp	r3, #2
 80174c8:	d121      	bne.n	801750e <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80174ca:	68f9      	ldr	r1, [r7, #12]
 80174cc:	483e      	ldr	r0, [pc, #248]	@ (80175c8 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80174ce:	f7e8 fe23 	bl	8000118 <__udivsi3>
 80174d2:	0003      	movs	r3, r0
 80174d4:	001a      	movs	r2, r3
 80174d6:	697b      	ldr	r3, [r7, #20]
 80174d8:	4353      	muls	r3, r2
 80174da:	61fb      	str	r3, [r7, #28]
      break;
 80174dc:	e025      	b.n	801752a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80174de:	4b3b      	ldr	r3, [pc, #236]	@ (80175cc <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80174e0:	69ba      	ldr	r2, [r7, #24]
 80174e2:	0092      	lsls	r2, r2, #2
 80174e4:	58d3      	ldr	r3, [r2, r3]
 80174e6:	68f9      	ldr	r1, [r7, #12]
 80174e8:	0018      	movs	r0, r3
 80174ea:	f7e8 fe15 	bl	8000118 <__udivsi3>
 80174ee:	0003      	movs	r3, r0
 80174f0:	001a      	movs	r2, r3
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	4353      	muls	r3, r2
 80174f6:	61fb      	str	r3, [r7, #28]
      break;
 80174f8:	e017      	b.n	801752a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80174fa:	68f9      	ldr	r1, [r7, #12]
 80174fc:	4834      	ldr	r0, [pc, #208]	@ (80175d0 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 80174fe:	f7e8 fe0b 	bl	8000118 <__udivsi3>
 8017502:	0003      	movs	r3, r0
 8017504:	001a      	movs	r2, r3
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	4353      	muls	r3, r2
 801750a:	61fb      	str	r3, [r7, #28]
      break;
 801750c:	e00d      	b.n	801752a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 801750e:	4b2f      	ldr	r3, [pc, #188]	@ (80175cc <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8017510:	69ba      	ldr	r2, [r7, #24]
 8017512:	0092      	lsls	r2, r2, #2
 8017514:	58d3      	ldr	r3, [r2, r3]
 8017516:	68f9      	ldr	r1, [r7, #12]
 8017518:	0018      	movs	r0, r3
 801751a:	f7e8 fdfd 	bl	8000118 <__udivsi3>
 801751e:	0003      	movs	r3, r0
 8017520:	001a      	movs	r2, r3
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	4353      	muls	r3, r2
 8017526:	61fb      	str	r3, [r7, #28]
      break;
 8017528:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 801752a:	4b26      	ldr	r3, [pc, #152]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801752c:	68da      	ldr	r2, [r3, #12]
 801752e:	2380      	movs	r3, #128	@ 0x80
 8017530:	025b      	lsls	r3, r3, #9
 8017532:	4013      	ands	r3, r2
 8017534:	d00e      	beq.n	8017554 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8017536:	4b23      	ldr	r3, [pc, #140]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017538:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 801753a:	0c5b      	lsrs	r3, r3, #17
 801753c:	221f      	movs	r2, #31
 801753e:	4013      	ands	r3, r2
 8017540:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8017542:	0019      	movs	r1, r3
 8017544:	69f8      	ldr	r0, [r7, #28]
 8017546:	f7e8 fde7 	bl	8000118 <__udivsi3>
 801754a:	0003      	movs	r3, r0
 801754c:	001a      	movs	r2, r3
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	601a      	str	r2, [r3, #0]
 8017552:	e002      	b.n	801755a <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	2200      	movs	r2, #0
 8017558:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 801755a:	4b1a      	ldr	r3, [pc, #104]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801755c:	68da      	ldr	r2, [r3, #12]
 801755e:	2380      	movs	r3, #128	@ 0x80
 8017560:	045b      	lsls	r3, r3, #17
 8017562:	4013      	ands	r3, r2
 8017564:	d00e      	beq.n	8017584 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8017566:	4b17      	ldr	r3, [pc, #92]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017568:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 801756a:	0e5b      	lsrs	r3, r3, #25
 801756c:	2207      	movs	r2, #7
 801756e:	4013      	ands	r3, r2
 8017570:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8017572:	0019      	movs	r1, r3
 8017574:	69f8      	ldr	r0, [r7, #28]
 8017576:	f7e8 fdcf 	bl	8000118 <__udivsi3>
 801757a:	0003      	movs	r3, r0
 801757c:	001a      	movs	r2, r3
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	605a      	str	r2, [r3, #4]
 8017582:	e002      	b.n	801758a <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2200      	movs	r2, #0
 8017588:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 801758a:	4b0e      	ldr	r3, [pc, #56]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 801758c:	68da      	ldr	r2, [r3, #12]
 801758e:	2380      	movs	r3, #128	@ 0x80
 8017590:	055b      	lsls	r3, r3, #21
 8017592:	4013      	ands	r3, r2
 8017594:	d00e      	beq.n	80175b4 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8017596:	4b0b      	ldr	r3, [pc, #44]	@ (80175c4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017598:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 801759a:	0f5b      	lsrs	r3, r3, #29
 801759c:	2207      	movs	r2, #7
 801759e:	4013      	ands	r3, r2
 80175a0:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80175a2:	0019      	movs	r1, r3
 80175a4:	69f8      	ldr	r0, [r7, #28]
 80175a6:	f7e8 fdb7 	bl	8000118 <__udivsi3>
 80175aa:	0003      	movs	r3, r0
 80175ac:	001a      	movs	r2, r3
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80175b2:	e002      	b.n	80175ba <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2200      	movs	r2, #0
 80175b8:	609a      	str	r2, [r3, #8]
}
 80175ba:	46c0      	nop			@ (mov r8, r8)
 80175bc:	46bd      	mov	sp, r7
 80175be:	b008      	add	sp, #32
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	46c0      	nop			@ (mov r8, r8)
 80175c4:	40021000 	.word	0x40021000
 80175c8:	00f42400 	.word	0x00f42400
 80175cc:	0801b090 	.word	0x0801b090
 80175d0:	003d0900 	.word	0x003d0900

080175d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80175dc:	210f      	movs	r1, #15
 80175de:	187b      	adds	r3, r7, r1
 80175e0:	2201      	movs	r2, #1
 80175e2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d100      	bne.n	80175ec <HAL_RTC_Init+0x18>
 80175ea:	e08b      	b.n	8017704 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 80175ec:	187b      	adds	r3, r7, r1
 80175ee:	2200      	movs	r2, #0
 80175f0:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	222d      	movs	r2, #45	@ 0x2d
 80175f6:	5c9b      	ldrb	r3, [r3, r2]
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d107      	bne.n	801760e <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	222c      	movs	r2, #44	@ 0x2c
 8017602:	2100      	movs	r1, #0
 8017604:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	0018      	movs	r0, r3
 801760a:	f7f4 feb3 	bl	800c374 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	222d      	movs	r2, #45	@ 0x2d
 8017612:	2102      	movs	r1, #2
 8017614:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017616:	4b3f      	ldr	r3, [pc, #252]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017618:	22ca      	movs	r2, #202	@ 0xca
 801761a:	625a      	str	r2, [r3, #36]	@ 0x24
 801761c:	4b3d      	ldr	r3, [pc, #244]	@ (8017714 <HAL_RTC_Init+0x140>)
 801761e:	2253      	movs	r2, #83	@ 0x53
 8017620:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	0018      	movs	r0, r3
 8017626:	f000 fa07 	bl	8017a38 <RTC_EnterInitMode>
 801762a:	1e03      	subs	r3, r0, #0
 801762c:	d00b      	beq.n	8017646 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801762e:	4b39      	ldr	r3, [pc, #228]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017630:	22ff      	movs	r2, #255	@ 0xff
 8017632:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	222d      	movs	r2, #45	@ 0x2d
 8017638:	2104      	movs	r1, #4
 801763a:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 801763c:	230f      	movs	r3, #15
 801763e:	18fb      	adds	r3, r7, r3
 8017640:	2201      	movs	r2, #1
 8017642:	701a      	strb	r2, [r3, #0]
 8017644:	e05e      	b.n	8017704 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8017646:	4b33      	ldr	r3, [pc, #204]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017648:	699a      	ldr	r2, [r3, #24]
 801764a:	4b32      	ldr	r3, [pc, #200]	@ (8017714 <HAL_RTC_Init+0x140>)
 801764c:	4932      	ldr	r1, [pc, #200]	@ (8017718 <HAL_RTC_Init+0x144>)
 801764e:	400a      	ands	r2, r1
 8017650:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8017652:	4b30      	ldr	r3, [pc, #192]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017654:	6999      	ldr	r1, [r3, #24]
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	685a      	ldr	r2, [r3, #4]
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	691b      	ldr	r3, [r3, #16]
 801765e:	431a      	orrs	r2, r3
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	699b      	ldr	r3, [r3, #24]
 8017664:	431a      	orrs	r2, r3
 8017666:	4b2b      	ldr	r3, [pc, #172]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017668:	430a      	orrs	r2, r1
 801766a:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	68d9      	ldr	r1, [r3, #12]
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	689b      	ldr	r3, [r3, #8]
 8017674:	041a      	lsls	r2, r3, #16
 8017676:	4b27      	ldr	r3, [pc, #156]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017678:	430a      	orrs	r2, r1
 801767a:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 801767c:	4b25      	ldr	r3, [pc, #148]	@ (8017714 <HAL_RTC_Init+0x140>)
 801767e:	68db      	ldr	r3, [r3, #12]
 8017680:	4a26      	ldr	r2, [pc, #152]	@ (801771c <HAL_RTC_Init+0x148>)
 8017682:	4013      	ands	r3, r2
 8017684:	0019      	movs	r1, r3
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801768e:	431a      	orrs	r2, r3
 8017690:	4b20      	ldr	r3, [pc, #128]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017692:	430a      	orrs	r2, r1
 8017694:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017696:	4b1f      	ldr	r3, [pc, #124]	@ (8017714 <HAL_RTC_Init+0x140>)
 8017698:	68da      	ldr	r2, [r3, #12]
 801769a:	4b1e      	ldr	r3, [pc, #120]	@ (8017714 <HAL_RTC_Init+0x140>)
 801769c:	2180      	movs	r1, #128	@ 0x80
 801769e:	438a      	bics	r2, r1
 80176a0:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80176a2:	4b1c      	ldr	r3, [pc, #112]	@ (8017714 <HAL_RTC_Init+0x140>)
 80176a4:	699b      	ldr	r3, [r3, #24]
 80176a6:	2220      	movs	r2, #32
 80176a8:	4013      	ands	r3, r2
 80176aa:	d110      	bne.n	80176ce <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	0018      	movs	r0, r3
 80176b0:	f000 f99c 	bl	80179ec <HAL_RTC_WaitForSynchro>
 80176b4:	1e03      	subs	r3, r0, #0
 80176b6:	d00a      	beq.n	80176ce <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80176b8:	4b16      	ldr	r3, [pc, #88]	@ (8017714 <HAL_RTC_Init+0x140>)
 80176ba:	22ff      	movs	r2, #255	@ 0xff
 80176bc:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	222d      	movs	r2, #45	@ 0x2d
 80176c2:	2104      	movs	r1, #4
 80176c4:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 80176c6:	230f      	movs	r3, #15
 80176c8:	18fb      	adds	r3, r7, r3
 80176ca:	2201      	movs	r2, #1
 80176cc:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80176ce:	230f      	movs	r3, #15
 80176d0:	18fb      	adds	r3, r7, r3
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d115      	bne.n	8017704 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 80176d8:	4b0e      	ldr	r3, [pc, #56]	@ (8017714 <HAL_RTC_Init+0x140>)
 80176da:	699b      	ldr	r3, [r3, #24]
 80176dc:	00db      	lsls	r3, r3, #3
 80176de:	08d9      	lsrs	r1, r3, #3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6a1a      	ldr	r2, [r3, #32]
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	69db      	ldr	r3, [r3, #28]
 80176e8:	431a      	orrs	r2, r3
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	695b      	ldr	r3, [r3, #20]
 80176ee:	431a      	orrs	r2, r3
 80176f0:	4b08      	ldr	r3, [pc, #32]	@ (8017714 <HAL_RTC_Init+0x140>)
 80176f2:	430a      	orrs	r2, r1
 80176f4:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80176f6:	4b07      	ldr	r3, [pc, #28]	@ (8017714 <HAL_RTC_Init+0x140>)
 80176f8:	22ff      	movs	r2, #255	@ 0xff
 80176fa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	222d      	movs	r2, #45	@ 0x2d
 8017700:	2101      	movs	r1, #1
 8017702:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8017704:	230f      	movs	r3, #15
 8017706:	18fb      	adds	r3, r7, r3
 8017708:	781b      	ldrb	r3, [r3, #0]
}
 801770a:	0018      	movs	r0, r3
 801770c:	46bd      	mov	sp, r7
 801770e:	b004      	add	sp, #16
 8017710:	bd80      	pop	{r7, pc}
 8017712:	46c0      	nop			@ (mov r8, r8)
 8017714:	40002800 	.word	0x40002800
 8017718:	fb8fffbf 	.word	0xfb8fffbf
 801771c:	ffffe0ff 	.word	0xffffe0ff

08017720 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017720:	b590      	push	{r4, r7, lr}
 8017722:	b087      	sub	sp, #28
 8017724:	af00      	add	r7, sp, #0
 8017726:	60f8      	str	r0, [r7, #12]
 8017728:	60b9      	str	r1, [r7, #8]
 801772a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	222c      	movs	r2, #44	@ 0x2c
 8017730:	5c9b      	ldrb	r3, [r3, r2]
 8017732:	2b01      	cmp	r3, #1
 8017734:	d101      	bne.n	801773a <HAL_RTC_SetTime+0x1a>
 8017736:	2302      	movs	r3, #2
 8017738:	e0a7      	b.n	801788a <HAL_RTC_SetTime+0x16a>
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	222c      	movs	r2, #44	@ 0x2c
 801773e:	2101      	movs	r1, #1
 8017740:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	222d      	movs	r2, #45	@ 0x2d
 8017746:	2102      	movs	r1, #2
 8017748:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801774a:	4b52      	ldr	r3, [pc, #328]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 801774c:	22ca      	movs	r2, #202	@ 0xca
 801774e:	625a      	str	r2, [r3, #36]	@ 0x24
 8017750:	4b50      	ldr	r3, [pc, #320]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017752:	2253      	movs	r2, #83	@ 0x53
 8017754:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	0018      	movs	r0, r3
 801775a:	f000 f96d 	bl	8017a38 <RTC_EnterInitMode>
 801775e:	1e03      	subs	r3, r0, #0
 8017760:	d00c      	beq.n	801777c <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017762:	4b4c      	ldr	r3, [pc, #304]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017764:	22ff      	movs	r2, #255	@ 0xff
 8017766:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	222d      	movs	r2, #45	@ 0x2d
 801776c:	2104      	movs	r1, #4
 801776e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	222c      	movs	r2, #44	@ 0x2c
 8017774:	2100      	movs	r1, #0
 8017776:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017778:	2301      	movs	r3, #1
 801777a:	e086      	b.n	801788a <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 801777c:	4b45      	ldr	r3, [pc, #276]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 801777e:	68da      	ldr	r2, [r3, #12]
 8017780:	23c0      	movs	r3, #192	@ 0xc0
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	401a      	ands	r2, r3
 8017786:	2380      	movs	r3, #128	@ 0x80
 8017788:	005b      	lsls	r3, r3, #1
 801778a:	429a      	cmp	r2, r3
 801778c:	d053      	beq.n	8017836 <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d124      	bne.n	80177de <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8017794:	4b3f      	ldr	r3, [pc, #252]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017796:	699b      	ldr	r3, [r3, #24]
 8017798:	2240      	movs	r2, #64	@ 0x40
 801779a:	4013      	ands	r3, r2
 801779c:	d102      	bne.n	80177a4 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	2200      	movs	r2, #0
 80177a2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	781b      	ldrb	r3, [r3, #0]
 80177a8:	0018      	movs	r0, r3
 80177aa:	f000 f971 	bl	8017a90 <RTC_ByteToBcd2>
 80177ae:	0003      	movs	r3, r0
 80177b0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80177b2:	68bb      	ldr	r3, [r7, #8]
 80177b4:	785b      	ldrb	r3, [r3, #1]
 80177b6:	0018      	movs	r0, r3
 80177b8:	f000 f96a 	bl	8017a90 <RTC_ByteToBcd2>
 80177bc:	0003      	movs	r3, r0
 80177be:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80177c0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	789b      	ldrb	r3, [r3, #2]
 80177c6:	0018      	movs	r0, r3
 80177c8:	f000 f962 	bl	8017a90 <RTC_ByteToBcd2>
 80177cc:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80177ce:	0022      	movs	r2, r4
 80177d0:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80177d2:	68bb      	ldr	r3, [r7, #8]
 80177d4:	78db      	ldrb	r3, [r3, #3]
 80177d6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80177d8:	4313      	orrs	r3, r2
 80177da:	617b      	str	r3, [r7, #20]
 80177dc:	e016      	b.n	801780c <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80177de:	4b2d      	ldr	r3, [pc, #180]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 80177e0:	699b      	ldr	r3, [r3, #24]
 80177e2:	2240      	movs	r2, #64	@ 0x40
 80177e4:	4013      	ands	r3, r2
 80177e6:	d102      	bne.n	80177ee <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	2200      	movs	r2, #0
 80177ec:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	781b      	ldrb	r3, [r3, #0]
 80177f2:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80177f4:	68bb      	ldr	r3, [r7, #8]
 80177f6:	785b      	ldrb	r3, [r3, #1]
 80177f8:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80177fa:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80177fc:	68ba      	ldr	r2, [r7, #8]
 80177fe:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017800:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8017802:	68bb      	ldr	r3, [r7, #8]
 8017804:	78db      	ldrb	r3, [r3, #3]
 8017806:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017808:	4313      	orrs	r3, r2
 801780a:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 801780c:	4b21      	ldr	r3, [pc, #132]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 801780e:	697a      	ldr	r2, [r7, #20]
 8017810:	4921      	ldr	r1, [pc, #132]	@ (8017898 <HAL_RTC_SetTime+0x178>)
 8017812:	400a      	ands	r2, r1
 8017814:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8017816:	4b1f      	ldr	r3, [pc, #124]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017818:	699a      	ldr	r2, [r3, #24]
 801781a:	4b1e      	ldr	r3, [pc, #120]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 801781c:	491f      	ldr	r1, [pc, #124]	@ (801789c <HAL_RTC_SetTime+0x17c>)
 801781e:	400a      	ands	r2, r1
 8017820:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8017822:	4b1c      	ldr	r3, [pc, #112]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017824:	6999      	ldr	r1, [r3, #24]
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	68da      	ldr	r2, [r3, #12]
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	691b      	ldr	r3, [r3, #16]
 801782e:	431a      	orrs	r2, r3
 8017830:	4b18      	ldr	r3, [pc, #96]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017832:	430a      	orrs	r2, r1
 8017834:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017836:	4b17      	ldr	r3, [pc, #92]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017838:	68da      	ldr	r2, [r3, #12]
 801783a:	4b16      	ldr	r3, [pc, #88]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 801783c:	2180      	movs	r1, #128	@ 0x80
 801783e:	438a      	bics	r2, r1
 8017840:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8017842:	4b14      	ldr	r3, [pc, #80]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017844:	699b      	ldr	r3, [r3, #24]
 8017846:	2220      	movs	r2, #32
 8017848:	4013      	ands	r3, r2
 801784a:	d112      	bne.n	8017872 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	0018      	movs	r0, r3
 8017850:	f000 f8cc 	bl	80179ec <HAL_RTC_WaitForSynchro>
 8017854:	1e03      	subs	r3, r0, #0
 8017856:	d00c      	beq.n	8017872 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017858:	4b0e      	ldr	r3, [pc, #56]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 801785a:	22ff      	movs	r2, #255	@ 0xff
 801785c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	222d      	movs	r2, #45	@ 0x2d
 8017862:	2104      	movs	r1, #4
 8017864:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	222c      	movs	r2, #44	@ 0x2c
 801786a:	2100      	movs	r1, #0
 801786c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801786e:	2301      	movs	r3, #1
 8017870:	e00b      	b.n	801788a <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017872:	4b08      	ldr	r3, [pc, #32]	@ (8017894 <HAL_RTC_SetTime+0x174>)
 8017874:	22ff      	movs	r2, #255	@ 0xff
 8017876:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	222d      	movs	r2, #45	@ 0x2d
 801787c:	2101      	movs	r1, #1
 801787e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	222c      	movs	r2, #44	@ 0x2c
 8017884:	2100      	movs	r1, #0
 8017886:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017888:	2300      	movs	r3, #0
  }
}
 801788a:	0018      	movs	r0, r3
 801788c:	46bd      	mov	sp, r7
 801788e:	b007      	add	sp, #28
 8017890:	bd90      	pop	{r4, r7, pc}
 8017892:	46c0      	nop			@ (mov r8, r8)
 8017894:	40002800 	.word	0x40002800
 8017898:	007f7f7f 	.word	0x007f7f7f
 801789c:	fffbffff 	.word	0xfffbffff

080178a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80178a0:	b590      	push	{r4, r7, lr}
 80178a2:	b087      	sub	sp, #28
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	60f8      	str	r0, [r7, #12]
 80178a8:	60b9      	str	r1, [r7, #8]
 80178aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	222c      	movs	r2, #44	@ 0x2c
 80178b0:	5c9b      	ldrb	r3, [r3, r2]
 80178b2:	2b01      	cmp	r3, #1
 80178b4:	d101      	bne.n	80178ba <HAL_RTC_SetDate+0x1a>
 80178b6:	2302      	movs	r3, #2
 80178b8:	e090      	b.n	80179dc <HAL_RTC_SetDate+0x13c>
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	222c      	movs	r2, #44	@ 0x2c
 80178be:	2101      	movs	r1, #1
 80178c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	222d      	movs	r2, #45	@ 0x2d
 80178c6:	2102      	movs	r1, #2
 80178c8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d10e      	bne.n	80178ee <HAL_RTC_SetDate+0x4e>
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	785b      	ldrb	r3, [r3, #1]
 80178d4:	001a      	movs	r2, r3
 80178d6:	2310      	movs	r3, #16
 80178d8:	4013      	ands	r3, r2
 80178da:	d008      	beq.n	80178ee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80178dc:	68bb      	ldr	r3, [r7, #8]
 80178de:	785b      	ldrb	r3, [r3, #1]
 80178e0:	2210      	movs	r2, #16
 80178e2:	4393      	bics	r3, r2
 80178e4:	b2db      	uxtb	r3, r3
 80178e6:	330a      	adds	r3, #10
 80178e8:	b2da      	uxtb	r2, r3
 80178ea:	68bb      	ldr	r3, [r7, #8]
 80178ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d11c      	bne.n	801792e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80178f4:	68bb      	ldr	r3, [r7, #8]
 80178f6:	78db      	ldrb	r3, [r3, #3]
 80178f8:	0018      	movs	r0, r3
 80178fa:	f000 f8c9 	bl	8017a90 <RTC_ByteToBcd2>
 80178fe:	0003      	movs	r3, r0
 8017900:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8017902:	68bb      	ldr	r3, [r7, #8]
 8017904:	785b      	ldrb	r3, [r3, #1]
 8017906:	0018      	movs	r0, r3
 8017908:	f000 f8c2 	bl	8017a90 <RTC_ByteToBcd2>
 801790c:	0003      	movs	r3, r0
 801790e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017910:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	789b      	ldrb	r3, [r3, #2]
 8017916:	0018      	movs	r0, r3
 8017918:	f000 f8ba 	bl	8017a90 <RTC_ByteToBcd2>
 801791c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801791e:	0022      	movs	r2, r4
 8017920:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	781b      	ldrb	r3, [r3, #0]
 8017926:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017928:	4313      	orrs	r3, r2
 801792a:	617b      	str	r3, [r7, #20]
 801792c:	e00e      	b.n	801794c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801792e:	68bb      	ldr	r3, [r7, #8]
 8017930:	78db      	ldrb	r3, [r3, #3]
 8017932:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	785b      	ldrb	r3, [r3, #1]
 8017938:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801793a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 801793c:	68ba      	ldr	r2, [r7, #8]
 801793e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8017940:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8017942:	68bb      	ldr	r3, [r7, #8]
 8017944:	781b      	ldrb	r3, [r3, #0]
 8017946:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8017948:	4313      	orrs	r3, r2
 801794a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801794c:	4b25      	ldr	r3, [pc, #148]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 801794e:	22ca      	movs	r2, #202	@ 0xca
 8017950:	625a      	str	r2, [r3, #36]	@ 0x24
 8017952:	4b24      	ldr	r3, [pc, #144]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 8017954:	2253      	movs	r2, #83	@ 0x53
 8017956:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	0018      	movs	r0, r3
 801795c:	f000 f86c 	bl	8017a38 <RTC_EnterInitMode>
 8017960:	1e03      	subs	r3, r0, #0
 8017962:	d00c      	beq.n	801797e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017964:	4b1f      	ldr	r3, [pc, #124]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 8017966:	22ff      	movs	r2, #255	@ 0xff
 8017968:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	222d      	movs	r2, #45	@ 0x2d
 801796e:	2104      	movs	r1, #4
 8017970:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	222c      	movs	r2, #44	@ 0x2c
 8017976:	2100      	movs	r1, #0
 8017978:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801797a:	2301      	movs	r3, #1
 801797c:	e02e      	b.n	80179dc <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 801797e:	4b19      	ldr	r3, [pc, #100]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 8017980:	697a      	ldr	r2, [r7, #20]
 8017982:	4919      	ldr	r1, [pc, #100]	@ (80179e8 <HAL_RTC_SetDate+0x148>)
 8017984:	400a      	ands	r2, r1
 8017986:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017988:	4b16      	ldr	r3, [pc, #88]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 801798a:	68da      	ldr	r2, [r3, #12]
 801798c:	4b15      	ldr	r3, [pc, #84]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 801798e:	2180      	movs	r1, #128	@ 0x80
 8017990:	438a      	bics	r2, r1
 8017992:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8017994:	4b13      	ldr	r3, [pc, #76]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 8017996:	699b      	ldr	r3, [r3, #24]
 8017998:	2220      	movs	r2, #32
 801799a:	4013      	ands	r3, r2
 801799c:	d112      	bne.n	80179c4 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	0018      	movs	r0, r3
 80179a2:	f000 f823 	bl	80179ec <HAL_RTC_WaitForSynchro>
 80179a6:	1e03      	subs	r3, r0, #0
 80179a8:	d00c      	beq.n	80179c4 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80179aa:	4b0e      	ldr	r3, [pc, #56]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 80179ac:	22ff      	movs	r2, #255	@ 0xff
 80179ae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	222d      	movs	r2, #45	@ 0x2d
 80179b4:	2104      	movs	r1, #4
 80179b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	222c      	movs	r2, #44	@ 0x2c
 80179bc:	2100      	movs	r1, #0
 80179be:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80179c0:	2301      	movs	r3, #1
 80179c2:	e00b      	b.n	80179dc <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80179c4:	4b07      	ldr	r3, [pc, #28]	@ (80179e4 <HAL_RTC_SetDate+0x144>)
 80179c6:	22ff      	movs	r2, #255	@ 0xff
 80179c8:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	222d      	movs	r2, #45	@ 0x2d
 80179ce:	2101      	movs	r1, #1
 80179d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	222c      	movs	r2, #44	@ 0x2c
 80179d6:	2100      	movs	r1, #0
 80179d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80179da:	2300      	movs	r3, #0
  }
}
 80179dc:	0018      	movs	r0, r3
 80179de:	46bd      	mov	sp, r7
 80179e0:	b007      	add	sp, #28
 80179e2:	bd90      	pop	{r4, r7, pc}
 80179e4:	40002800 	.word	0x40002800
 80179e8:	00ffff3f 	.word	0x00ffff3f

080179ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b084      	sub	sp, #16
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80179f4:	4b0f      	ldr	r3, [pc, #60]	@ (8017a34 <HAL_RTC_WaitForSynchro+0x48>)
 80179f6:	68da      	ldr	r2, [r3, #12]
 80179f8:	4b0e      	ldr	r3, [pc, #56]	@ (8017a34 <HAL_RTC_WaitForSynchro+0x48>)
 80179fa:	2120      	movs	r1, #32
 80179fc:	438a      	bics	r2, r1
 80179fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8017a00:	f7fa fb16 	bl	8012030 <HAL_GetTick>
 8017a04:	0003      	movs	r3, r0
 8017a06:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8017a08:	e00a      	b.n	8017a20 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017a0a:	f7fa fb11 	bl	8012030 <HAL_GetTick>
 8017a0e:	0002      	movs	r2, r0
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	1ad2      	subs	r2, r2, r3
 8017a14:	23fa      	movs	r3, #250	@ 0xfa
 8017a16:	009b      	lsls	r3, r3, #2
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d901      	bls.n	8017a20 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8017a1c:	2303      	movs	r3, #3
 8017a1e:	e005      	b.n	8017a2c <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8017a20:	4b04      	ldr	r3, [pc, #16]	@ (8017a34 <HAL_RTC_WaitForSynchro+0x48>)
 8017a22:	68db      	ldr	r3, [r3, #12]
 8017a24:	2220      	movs	r2, #32
 8017a26:	4013      	ands	r3, r2
 8017a28:	d0ef      	beq.n	8017a0a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8017a2a:	2300      	movs	r3, #0
}
 8017a2c:	0018      	movs	r0, r3
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	b004      	add	sp, #16
 8017a32:	bd80      	pop	{r7, pc}
 8017a34:	40002800 	.word	0x40002800

08017a38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b084      	sub	sp, #16
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017a40:	4b12      	ldr	r3, [pc, #72]	@ (8017a8c <RTC_EnterInitMode+0x54>)
 8017a42:	68db      	ldr	r3, [r3, #12]
 8017a44:	2240      	movs	r2, #64	@ 0x40
 8017a46:	4013      	ands	r3, r2
 8017a48:	d11a      	bne.n	8017a80 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017a4a:	4b10      	ldr	r3, [pc, #64]	@ (8017a8c <RTC_EnterInitMode+0x54>)
 8017a4c:	68da      	ldr	r2, [r3, #12]
 8017a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8017a8c <RTC_EnterInitMode+0x54>)
 8017a50:	2180      	movs	r1, #128	@ 0x80
 8017a52:	430a      	orrs	r2, r1
 8017a54:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8017a56:	f7fa faeb 	bl	8012030 <HAL_GetTick>
 8017a5a:	0003      	movs	r3, r0
 8017a5c:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017a5e:	e00a      	b.n	8017a76 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8017a60:	f7fa fae6 	bl	8012030 <HAL_GetTick>
 8017a64:	0002      	movs	r2, r0
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	1ad2      	subs	r2, r2, r3
 8017a6a:	23fa      	movs	r3, #250	@ 0xfa
 8017a6c:	009b      	lsls	r3, r3, #2
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d901      	bls.n	8017a76 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8017a72:	2303      	movs	r3, #3
 8017a74:	e005      	b.n	8017a82 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017a76:	4b05      	ldr	r3, [pc, #20]	@ (8017a8c <RTC_EnterInitMode+0x54>)
 8017a78:	68db      	ldr	r3, [r3, #12]
 8017a7a:	2240      	movs	r2, #64	@ 0x40
 8017a7c:	4013      	ands	r3, r2
 8017a7e:	d0ef      	beq.n	8017a60 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8017a80:	2300      	movs	r3, #0
}
 8017a82:	0018      	movs	r0, r3
 8017a84:	46bd      	mov	sp, r7
 8017a86:	b004      	add	sp, #16
 8017a88:	bd80      	pop	{r7, pc}
 8017a8a:	46c0      	nop			@ (mov r8, r8)
 8017a8c:	40002800 	.word	0x40002800

08017a90 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b084      	sub	sp, #16
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	0002      	movs	r2, r0
 8017a98:	1dfb      	adds	r3, r7, #7
 8017a9a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8017aa0:	230b      	movs	r3, #11
 8017aa2:	18fb      	adds	r3, r7, r3
 8017aa4:	1dfa      	adds	r2, r7, #7
 8017aa6:	7812      	ldrb	r2, [r2, #0]
 8017aa8:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8017aaa:	e008      	b.n	8017abe <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	3301      	adds	r3, #1
 8017ab0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8017ab2:	220b      	movs	r2, #11
 8017ab4:	18bb      	adds	r3, r7, r2
 8017ab6:	18ba      	adds	r2, r7, r2
 8017ab8:	7812      	ldrb	r2, [r2, #0]
 8017aba:	3a0a      	subs	r2, #10
 8017abc:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8017abe:	210b      	movs	r1, #11
 8017ac0:	187b      	adds	r3, r7, r1
 8017ac2:	781b      	ldrb	r3, [r3, #0]
 8017ac4:	2b09      	cmp	r3, #9
 8017ac6:	d8f1      	bhi.n	8017aac <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	b2db      	uxtb	r3, r3
 8017acc:	011b      	lsls	r3, r3, #4
 8017ace:	b2da      	uxtb	r2, r3
 8017ad0:	187b      	adds	r3, r7, r1
 8017ad2:	781b      	ldrb	r3, [r3, #0]
 8017ad4:	4313      	orrs	r3, r2
 8017ad6:	b2db      	uxtb	r3, r3
}
 8017ad8:	0018      	movs	r0, r3
 8017ada:	46bd      	mov	sp, r7
 8017adc:	b004      	add	sp, #16
 8017ade:	bd80      	pop	{r7, pc}

08017ae0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b086      	sub	sp, #24
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	60f8      	str	r0, [r7, #12]
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	222c      	movs	r2, #44	@ 0x2c
 8017af2:	5c9b      	ldrb	r3, [r3, r2]
 8017af4:	2b01      	cmp	r3, #1
 8017af6:	d101      	bne.n	8017afc <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8017af8:	2302      	movs	r3, #2
 8017afa:	e088      	b.n	8017c0e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	222c      	movs	r2, #44	@ 0x2c
 8017b00:	2101      	movs	r1, #1
 8017b02:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	222d      	movs	r2, #45	@ 0x2d
 8017b08:	2102      	movs	r1, #2
 8017b0a:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8017b0c:	4b42      	ldr	r3, [pc, #264]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017b0e:	699a      	ldr	r2, [r3, #24]
 8017b10:	2380      	movs	r3, #128	@ 0x80
 8017b12:	00db      	lsls	r3, r3, #3
 8017b14:	4013      	ands	r3, r2
 8017b16:	d01c      	beq.n	8017b52 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8017b18:	f7fa fa8a 	bl	8012030 <HAL_GetTick>
 8017b1c:	0003      	movs	r3, r0
 8017b1e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8017b20:	e012      	b.n	8017b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017b22:	f7fa fa85 	bl	8012030 <HAL_GetTick>
 8017b26:	0002      	movs	r2, r0
 8017b28:	697b      	ldr	r3, [r7, #20]
 8017b2a:	1ad2      	subs	r2, r2, r3
 8017b2c:	23fa      	movs	r3, #250	@ 0xfa
 8017b2e:	009b      	lsls	r3, r3, #2
 8017b30:	429a      	cmp	r2, r3
 8017b32:	d909      	bls.n	8017b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	222d      	movs	r2, #45	@ 0x2d
 8017b38:	2103      	movs	r1, #3
 8017b3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	222c      	movs	r2, #44	@ 0x2c
 8017b40:	2100      	movs	r1, #0
 8017b42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8017b44:	2303      	movs	r3, #3
 8017b46:	e062      	b.n	8017c0e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8017b48:	4b33      	ldr	r3, [pc, #204]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017b4a:	68db      	ldr	r3, [r3, #12]
 8017b4c:	2204      	movs	r2, #4
 8017b4e:	4013      	ands	r3, r2
 8017b50:	d1e7      	bne.n	8017b22 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8017b52:	4b31      	ldr	r3, [pc, #196]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017b54:	699a      	ldr	r2, [r3, #24]
 8017b56:	4b30      	ldr	r3, [pc, #192]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017b58:	4930      	ldr	r1, [pc, #192]	@ (8017c1c <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 8017b5a:	400a      	ands	r2, r1
 8017b5c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8017b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017b60:	2204      	movs	r2, #4
 8017b62:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8017b64:	f7fa fa64 	bl	8012030 <HAL_GetTick>
 8017b68:	0003      	movs	r3, r0
 8017b6a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8017b6c:	e015      	b.n	8017b9a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017b6e:	f7fa fa5f 	bl	8012030 <HAL_GetTick>
 8017b72:	0002      	movs	r2, r0
 8017b74:	697b      	ldr	r3, [r7, #20]
 8017b76:	1ad2      	subs	r2, r2, r3
 8017b78:	23fa      	movs	r3, #250	@ 0xfa
 8017b7a:	009b      	lsls	r3, r3, #2
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d90c      	bls.n	8017b9a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017b80:	4b25      	ldr	r3, [pc, #148]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017b82:	22ff      	movs	r2, #255	@ 0xff
 8017b84:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	222d      	movs	r2, #45	@ 0x2d
 8017b8a:	2103      	movs	r1, #3
 8017b8c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	222c      	movs	r2, #44	@ 0x2c
 8017b92:	2100      	movs	r1, #0
 8017b94:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8017b96:	2303      	movs	r3, #3
 8017b98:	e039      	b.n	8017c0e <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8017b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017b9c:	68db      	ldr	r3, [r3, #12]
 8017b9e:	2204      	movs	r2, #4
 8017ba0:	4013      	ands	r3, r2
 8017ba2:	d0e4      	beq.n	8017b6e <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	0419      	lsls	r1, r3, #16
 8017ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017baa:	68ba      	ldr	r2, [r7, #8]
 8017bac:	430a      	orrs	r2, r1
 8017bae:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8017bb0:	4b19      	ldr	r3, [pc, #100]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017bb2:	699b      	ldr	r3, [r3, #24]
 8017bb4:	2207      	movs	r2, #7
 8017bb6:	4393      	bics	r3, r2
 8017bb8:	0019      	movs	r1, r3
 8017bba:	4b17      	ldr	r3, [pc, #92]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017bbc:	687a      	ldr	r2, [r7, #4]
 8017bbe:	430a      	orrs	r2, r1
 8017bc0:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d009      	beq.n	8017bdc <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8017bc8:	4a15      	ldr	r2, [pc, #84]	@ (8017c20 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017bca:	2384      	movs	r3, #132	@ 0x84
 8017bcc:	58d3      	ldr	r3, [r2, r3]
 8017bce:	4914      	ldr	r1, [pc, #80]	@ (8017c20 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017bd0:	2280      	movs	r2, #128	@ 0x80
 8017bd2:	0552      	lsls	r2, r2, #21
 8017bd4:	4313      	orrs	r3, r2
 8017bd6:	2284      	movs	r2, #132	@ 0x84
 8017bd8:	508b      	str	r3, [r1, r2]
 8017bda:	e008      	b.n	8017bee <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8017bdc:	4a10      	ldr	r2, [pc, #64]	@ (8017c20 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017bde:	2380      	movs	r3, #128	@ 0x80
 8017be0:	58d3      	ldr	r3, [r2, r3]
 8017be2:	490f      	ldr	r1, [pc, #60]	@ (8017c20 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017be4:	2280      	movs	r2, #128	@ 0x80
 8017be6:	0552      	lsls	r2, r2, #21
 8017be8:	4313      	orrs	r3, r2
 8017bea:	2280      	movs	r2, #128	@ 0x80
 8017bec:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8017bee:	4b0a      	ldr	r3, [pc, #40]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017bf0:	699a      	ldr	r2, [r3, #24]
 8017bf2:	4b09      	ldr	r3, [pc, #36]	@ (8017c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017bf4:	2188      	movs	r1, #136	@ 0x88
 8017bf6:	01c9      	lsls	r1, r1, #7
 8017bf8:	430a      	orrs	r2, r1
 8017bfa:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	222d      	movs	r2, #45	@ 0x2d
 8017c00:	2101      	movs	r1, #1
 8017c02:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	222c      	movs	r2, #44	@ 0x2c
 8017c08:	2100      	movs	r1, #0
 8017c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017c0c:	2300      	movs	r3, #0
}
 8017c0e:	0018      	movs	r0, r3
 8017c10:	46bd      	mov	sp, r7
 8017c12:	b006      	add	sp, #24
 8017c14:	bd80      	pop	{r7, pc}
 8017c16:	46c0      	nop			@ (mov r8, r8)
 8017c18:	40002800 	.word	0x40002800
 8017c1c:	fffffbff 	.word	0xfffffbff
 8017c20:	40021800 	.word	0x40021800

08017c24 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	222c      	movs	r2, #44	@ 0x2c
 8017c30:	5c9b      	ldrb	r3, [r3, r2]
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d101      	bne.n	8017c3a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8017c36:	2302      	movs	r3, #2
 8017c38:	e016      	b.n	8017c68 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	222c      	movs	r2, #44	@ 0x2c
 8017c3e:	2101      	movs	r1, #1
 8017c40:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	222d      	movs	r2, #45	@ 0x2d
 8017c46:	2102      	movs	r1, #2
 8017c48:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8017c4a:	4b09      	ldr	r3, [pc, #36]	@ (8017c70 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8017c4c:	699a      	ldr	r2, [r3, #24]
 8017c4e:	4b08      	ldr	r3, [pc, #32]	@ (8017c70 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8017c50:	4908      	ldr	r1, [pc, #32]	@ (8017c74 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 8017c52:	400a      	ands	r2, r1
 8017c54:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	222d      	movs	r2, #45	@ 0x2d
 8017c5a:	2101      	movs	r1, #1
 8017c5c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	222c      	movs	r2, #44	@ 0x2c
 8017c62:	2100      	movs	r1, #0
 8017c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017c66:	2300      	movs	r3, #0
}
 8017c68:	0018      	movs	r0, r3
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	b002      	add	sp, #8
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	40002800 	.word	0x40002800
 8017c74:	ffffbbff 	.word	0xffffbbff

08017c78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8017c80:	4b09      	ldr	r3, [pc, #36]	@ (8017ca8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8017c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017c84:	2204      	movs	r2, #4
 8017c86:	4013      	ands	r3, r2
 8017c88:	d006      	beq.n	8017c98 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8017c8a:	4b07      	ldr	r3, [pc, #28]	@ (8017ca8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8017c8c:	2204      	movs	r2, #4
 8017c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	0018      	movs	r0, r3
 8017c94:	f000 f80a 	bl	8017cac <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	222d      	movs	r2, #45	@ 0x2d
 8017c9c:	2101      	movs	r1, #1
 8017c9e:	5499      	strb	r1, [r3, r2]
}
 8017ca0:	46c0      	nop			@ (mov r8, r8)
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	b002      	add	sp, #8
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	40002800 	.word	0x40002800

08017cac <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b082      	sub	sp, #8
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8017cb4:	46c0      	nop			@ (mov r8, r8)
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	b002      	add	sp, #8
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b082      	sub	sp, #8
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d101      	bne.n	8017cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017cca:	2301      	movs	r3, #1
 8017ccc:	e04a      	b.n	8017d64 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	223d      	movs	r2, #61	@ 0x3d
 8017cd2:	5c9b      	ldrb	r3, [r3, r2]
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d107      	bne.n	8017cea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	223c      	movs	r2, #60	@ 0x3c
 8017cde:	2100      	movs	r1, #0
 8017ce0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	0018      	movs	r0, r3
 8017ce6:	f7f4 fb8d 	bl	800c404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	223d      	movs	r2, #61	@ 0x3d
 8017cee:	2102      	movs	r1, #2
 8017cf0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	681a      	ldr	r2, [r3, #0]
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	3304      	adds	r3, #4
 8017cfa:	0019      	movs	r1, r3
 8017cfc:	0010      	movs	r0, r2
 8017cfe:	f000 fbd9 	bl	80184b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	2248      	movs	r2, #72	@ 0x48
 8017d06:	2101      	movs	r1, #1
 8017d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	223e      	movs	r2, #62	@ 0x3e
 8017d0e:	2101      	movs	r1, #1
 8017d10:	5499      	strb	r1, [r3, r2]
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	223f      	movs	r2, #63	@ 0x3f
 8017d16:	2101      	movs	r1, #1
 8017d18:	5499      	strb	r1, [r3, r2]
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2240      	movs	r2, #64	@ 0x40
 8017d1e:	2101      	movs	r1, #1
 8017d20:	5499      	strb	r1, [r3, r2]
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	2241      	movs	r2, #65	@ 0x41
 8017d26:	2101      	movs	r1, #1
 8017d28:	5499      	strb	r1, [r3, r2]
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2242      	movs	r2, #66	@ 0x42
 8017d2e:	2101      	movs	r1, #1
 8017d30:	5499      	strb	r1, [r3, r2]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2243      	movs	r2, #67	@ 0x43
 8017d36:	2101      	movs	r1, #1
 8017d38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	2244      	movs	r2, #68	@ 0x44
 8017d3e:	2101      	movs	r1, #1
 8017d40:	5499      	strb	r1, [r3, r2]
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2245      	movs	r2, #69	@ 0x45
 8017d46:	2101      	movs	r1, #1
 8017d48:	5499      	strb	r1, [r3, r2]
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2246      	movs	r2, #70	@ 0x46
 8017d4e:	2101      	movs	r1, #1
 8017d50:	5499      	strb	r1, [r3, r2]
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	2247      	movs	r2, #71	@ 0x47
 8017d56:	2101      	movs	r1, #1
 8017d58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	223d      	movs	r2, #61	@ 0x3d
 8017d5e:	2101      	movs	r1, #1
 8017d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017d62:	2300      	movs	r3, #0
}
 8017d64:	0018      	movs	r0, r3
 8017d66:	46bd      	mov	sp, r7
 8017d68:	b002      	add	sp, #8
 8017d6a:	bd80      	pop	{r7, pc}

08017d6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d101      	bne.n	8017d7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8017d7a:	2301      	movs	r3, #1
 8017d7c:	e04a      	b.n	8017e14 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	223d      	movs	r2, #61	@ 0x3d
 8017d82:	5c9b      	ldrb	r3, [r3, r2]
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d107      	bne.n	8017d9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	223c      	movs	r2, #60	@ 0x3c
 8017d8e:	2100      	movs	r1, #0
 8017d90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	0018      	movs	r0, r3
 8017d96:	f000 f841 	bl	8017e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	223d      	movs	r2, #61	@ 0x3d
 8017d9e:	2102      	movs	r1, #2
 8017da0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681a      	ldr	r2, [r3, #0]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	3304      	adds	r3, #4
 8017daa:	0019      	movs	r1, r3
 8017dac:	0010      	movs	r0, r2
 8017dae:	f000 fb81 	bl	80184b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2248      	movs	r2, #72	@ 0x48
 8017db6:	2101      	movs	r1, #1
 8017db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	223e      	movs	r2, #62	@ 0x3e
 8017dbe:	2101      	movs	r1, #1
 8017dc0:	5499      	strb	r1, [r3, r2]
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	223f      	movs	r2, #63	@ 0x3f
 8017dc6:	2101      	movs	r1, #1
 8017dc8:	5499      	strb	r1, [r3, r2]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	2240      	movs	r2, #64	@ 0x40
 8017dce:	2101      	movs	r1, #1
 8017dd0:	5499      	strb	r1, [r3, r2]
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2241      	movs	r2, #65	@ 0x41
 8017dd6:	2101      	movs	r1, #1
 8017dd8:	5499      	strb	r1, [r3, r2]
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2242      	movs	r2, #66	@ 0x42
 8017dde:	2101      	movs	r1, #1
 8017de0:	5499      	strb	r1, [r3, r2]
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2243      	movs	r2, #67	@ 0x43
 8017de6:	2101      	movs	r1, #1
 8017de8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2244      	movs	r2, #68	@ 0x44
 8017dee:	2101      	movs	r1, #1
 8017df0:	5499      	strb	r1, [r3, r2]
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	2245      	movs	r2, #69	@ 0x45
 8017df6:	2101      	movs	r1, #1
 8017df8:	5499      	strb	r1, [r3, r2]
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2246      	movs	r2, #70	@ 0x46
 8017dfe:	2101      	movs	r1, #1
 8017e00:	5499      	strb	r1, [r3, r2]
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	2247      	movs	r2, #71	@ 0x47
 8017e06:	2101      	movs	r1, #1
 8017e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	223d      	movs	r2, #61	@ 0x3d
 8017e0e:	2101      	movs	r1, #1
 8017e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017e12:	2300      	movs	r3, #0
}
 8017e14:	0018      	movs	r0, r3
 8017e16:	46bd      	mov	sp, r7
 8017e18:	b002      	add	sp, #8
 8017e1a:	bd80      	pop	{r7, pc}

08017e1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b082      	sub	sp, #8
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8017e24:	46c0      	nop			@ (mov r8, r8)
 8017e26:	46bd      	mov	sp, r7
 8017e28:	b002      	add	sp, #8
 8017e2a:	bd80      	pop	{r7, pc}

08017e2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b084      	sub	sp, #16
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8017e36:	683b      	ldr	r3, [r7, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d108      	bne.n	8017e4e <HAL_TIM_PWM_Start+0x22>
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	223e      	movs	r2, #62	@ 0x3e
 8017e40:	5c9b      	ldrb	r3, [r3, r2]
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	3b01      	subs	r3, #1
 8017e46:	1e5a      	subs	r2, r3, #1
 8017e48:	4193      	sbcs	r3, r2
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	e037      	b.n	8017ebe <HAL_TIM_PWM_Start+0x92>
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	2b04      	cmp	r3, #4
 8017e52:	d108      	bne.n	8017e66 <HAL_TIM_PWM_Start+0x3a>
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	223f      	movs	r2, #63	@ 0x3f
 8017e58:	5c9b      	ldrb	r3, [r3, r2]
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	3b01      	subs	r3, #1
 8017e5e:	1e5a      	subs	r2, r3, #1
 8017e60:	4193      	sbcs	r3, r2
 8017e62:	b2db      	uxtb	r3, r3
 8017e64:	e02b      	b.n	8017ebe <HAL_TIM_PWM_Start+0x92>
 8017e66:	683b      	ldr	r3, [r7, #0]
 8017e68:	2b08      	cmp	r3, #8
 8017e6a:	d108      	bne.n	8017e7e <HAL_TIM_PWM_Start+0x52>
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	2240      	movs	r2, #64	@ 0x40
 8017e70:	5c9b      	ldrb	r3, [r3, r2]
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	3b01      	subs	r3, #1
 8017e76:	1e5a      	subs	r2, r3, #1
 8017e78:	4193      	sbcs	r3, r2
 8017e7a:	b2db      	uxtb	r3, r3
 8017e7c:	e01f      	b.n	8017ebe <HAL_TIM_PWM_Start+0x92>
 8017e7e:	683b      	ldr	r3, [r7, #0]
 8017e80:	2b0c      	cmp	r3, #12
 8017e82:	d108      	bne.n	8017e96 <HAL_TIM_PWM_Start+0x6a>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2241      	movs	r2, #65	@ 0x41
 8017e88:	5c9b      	ldrb	r3, [r3, r2]
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	3b01      	subs	r3, #1
 8017e8e:	1e5a      	subs	r2, r3, #1
 8017e90:	4193      	sbcs	r3, r2
 8017e92:	b2db      	uxtb	r3, r3
 8017e94:	e013      	b.n	8017ebe <HAL_TIM_PWM_Start+0x92>
 8017e96:	683b      	ldr	r3, [r7, #0]
 8017e98:	2b10      	cmp	r3, #16
 8017e9a:	d108      	bne.n	8017eae <HAL_TIM_PWM_Start+0x82>
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2242      	movs	r2, #66	@ 0x42
 8017ea0:	5c9b      	ldrb	r3, [r3, r2]
 8017ea2:	b2db      	uxtb	r3, r3
 8017ea4:	3b01      	subs	r3, #1
 8017ea6:	1e5a      	subs	r2, r3, #1
 8017ea8:	4193      	sbcs	r3, r2
 8017eaa:	b2db      	uxtb	r3, r3
 8017eac:	e007      	b.n	8017ebe <HAL_TIM_PWM_Start+0x92>
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2243      	movs	r2, #67	@ 0x43
 8017eb2:	5c9b      	ldrb	r3, [r3, r2]
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	3b01      	subs	r3, #1
 8017eb8:	1e5a      	subs	r2, r3, #1
 8017eba:	4193      	sbcs	r3, r2
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d001      	beq.n	8017ec6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	e086      	b.n	8017fd4 <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d104      	bne.n	8017ed6 <HAL_TIM_PWM_Start+0xaa>
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	223e      	movs	r2, #62	@ 0x3e
 8017ed0:	2102      	movs	r1, #2
 8017ed2:	5499      	strb	r1, [r3, r2]
 8017ed4:	e023      	b.n	8017f1e <HAL_TIM_PWM_Start+0xf2>
 8017ed6:	683b      	ldr	r3, [r7, #0]
 8017ed8:	2b04      	cmp	r3, #4
 8017eda:	d104      	bne.n	8017ee6 <HAL_TIM_PWM_Start+0xba>
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	223f      	movs	r2, #63	@ 0x3f
 8017ee0:	2102      	movs	r1, #2
 8017ee2:	5499      	strb	r1, [r3, r2]
 8017ee4:	e01b      	b.n	8017f1e <HAL_TIM_PWM_Start+0xf2>
 8017ee6:	683b      	ldr	r3, [r7, #0]
 8017ee8:	2b08      	cmp	r3, #8
 8017eea:	d104      	bne.n	8017ef6 <HAL_TIM_PWM_Start+0xca>
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2240      	movs	r2, #64	@ 0x40
 8017ef0:	2102      	movs	r1, #2
 8017ef2:	5499      	strb	r1, [r3, r2]
 8017ef4:	e013      	b.n	8017f1e <HAL_TIM_PWM_Start+0xf2>
 8017ef6:	683b      	ldr	r3, [r7, #0]
 8017ef8:	2b0c      	cmp	r3, #12
 8017efa:	d104      	bne.n	8017f06 <HAL_TIM_PWM_Start+0xda>
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2241      	movs	r2, #65	@ 0x41
 8017f00:	2102      	movs	r1, #2
 8017f02:	5499      	strb	r1, [r3, r2]
 8017f04:	e00b      	b.n	8017f1e <HAL_TIM_PWM_Start+0xf2>
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	2b10      	cmp	r3, #16
 8017f0a:	d104      	bne.n	8017f16 <HAL_TIM_PWM_Start+0xea>
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	2242      	movs	r2, #66	@ 0x42
 8017f10:	2102      	movs	r1, #2
 8017f12:	5499      	strb	r1, [r3, r2]
 8017f14:	e003      	b.n	8017f1e <HAL_TIM_PWM_Start+0xf2>
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2243      	movs	r2, #67	@ 0x43
 8017f1a:	2102      	movs	r1, #2
 8017f1c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	6839      	ldr	r1, [r7, #0]
 8017f24:	2201      	movs	r2, #1
 8017f26:	0018      	movs	r0, r3
 8017f28:	f000 fe7a 	bl	8018c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	4a2a      	ldr	r2, [pc, #168]	@ (8017fdc <HAL_TIM_PWM_Start+0x1b0>)
 8017f32:	4293      	cmp	r3, r2
 8017f34:	d009      	beq.n	8017f4a <HAL_TIM_PWM_Start+0x11e>
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4a29      	ldr	r2, [pc, #164]	@ (8017fe0 <HAL_TIM_PWM_Start+0x1b4>)
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d004      	beq.n	8017f4a <HAL_TIM_PWM_Start+0x11e>
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	4a27      	ldr	r2, [pc, #156]	@ (8017fe4 <HAL_TIM_PWM_Start+0x1b8>)
 8017f46:	4293      	cmp	r3, r2
 8017f48:	d101      	bne.n	8017f4e <HAL_TIM_PWM_Start+0x122>
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	e000      	b.n	8017f50 <HAL_TIM_PWM_Start+0x124>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d008      	beq.n	8017f66 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	2180      	movs	r1, #128	@ 0x80
 8017f60:	0209      	lsls	r1, r1, #8
 8017f62:	430a      	orrs	r2, r1
 8017f64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8017fdc <HAL_TIM_PWM_Start+0x1b0>)
 8017f6c:	4293      	cmp	r3, r2
 8017f6e:	d00f      	beq.n	8017f90 <HAL_TIM_PWM_Start+0x164>
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	2380      	movs	r3, #128	@ 0x80
 8017f76:	05db      	lsls	r3, r3, #23
 8017f78:	429a      	cmp	r2, r3
 8017f7a:	d009      	beq.n	8017f90 <HAL_TIM_PWM_Start+0x164>
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	4a19      	ldr	r2, [pc, #100]	@ (8017fe8 <HAL_TIM_PWM_Start+0x1bc>)
 8017f82:	4293      	cmp	r3, r2
 8017f84:	d004      	beq.n	8017f90 <HAL_TIM_PWM_Start+0x164>
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	4a15      	ldr	r2, [pc, #84]	@ (8017fe0 <HAL_TIM_PWM_Start+0x1b4>)
 8017f8c:	4293      	cmp	r3, r2
 8017f8e:	d116      	bne.n	8017fbe <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	689b      	ldr	r3, [r3, #8]
 8017f96:	4a15      	ldr	r2, [pc, #84]	@ (8017fec <HAL_TIM_PWM_Start+0x1c0>)
 8017f98:	4013      	ands	r3, r2
 8017f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	2b06      	cmp	r3, #6
 8017fa0:	d016      	beq.n	8017fd0 <HAL_TIM_PWM_Start+0x1a4>
 8017fa2:	68fa      	ldr	r2, [r7, #12]
 8017fa4:	2380      	movs	r3, #128	@ 0x80
 8017fa6:	025b      	lsls	r3, r3, #9
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d011      	beq.n	8017fd0 <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	681a      	ldr	r2, [r3, #0]
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	2101      	movs	r1, #1
 8017fb8:	430a      	orrs	r2, r1
 8017fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017fbc:	e008      	b.n	8017fd0 <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	681a      	ldr	r2, [r3, #0]
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	2101      	movs	r1, #1
 8017fca:	430a      	orrs	r2, r1
 8017fcc:	601a      	str	r2, [r3, #0]
 8017fce:	e000      	b.n	8017fd2 <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017fd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8017fd2:	2300      	movs	r3, #0
}
 8017fd4:	0018      	movs	r0, r3
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	b004      	add	sp, #16
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	40012c00 	.word	0x40012c00
 8017fe0:	40014000 	.word	0x40014000
 8017fe4:	40014400 	.word	0x40014400
 8017fe8:	40000400 	.word	0x40000400
 8017fec:	00010007 	.word	0x00010007

08017ff0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b082      	sub	sp, #8
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	6839      	ldr	r1, [r7, #0]
 8018000:	2200      	movs	r2, #0
 8018002:	0018      	movs	r0, r3
 8018004:	f000 fe0c 	bl	8018c20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4a35      	ldr	r2, [pc, #212]	@ (80180e4 <HAL_TIM_PWM_Stop+0xf4>)
 801800e:	4293      	cmp	r3, r2
 8018010:	d009      	beq.n	8018026 <HAL_TIM_PWM_Stop+0x36>
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	4a34      	ldr	r2, [pc, #208]	@ (80180e8 <HAL_TIM_PWM_Stop+0xf8>)
 8018018:	4293      	cmp	r3, r2
 801801a:	d004      	beq.n	8018026 <HAL_TIM_PWM_Stop+0x36>
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	4a32      	ldr	r2, [pc, #200]	@ (80180ec <HAL_TIM_PWM_Stop+0xfc>)
 8018022:	4293      	cmp	r3, r2
 8018024:	d101      	bne.n	801802a <HAL_TIM_PWM_Stop+0x3a>
 8018026:	2301      	movs	r3, #1
 8018028:	e000      	b.n	801802c <HAL_TIM_PWM_Stop+0x3c>
 801802a:	2300      	movs	r3, #0
 801802c:	2b00      	cmp	r3, #0
 801802e:	d013      	beq.n	8018058 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	6a1b      	ldr	r3, [r3, #32]
 8018036:	4a2e      	ldr	r2, [pc, #184]	@ (80180f0 <HAL_TIM_PWM_Stop+0x100>)
 8018038:	4013      	ands	r3, r2
 801803a:	d10d      	bne.n	8018058 <HAL_TIM_PWM_Stop+0x68>
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	6a1b      	ldr	r3, [r3, #32]
 8018042:	4a2c      	ldr	r2, [pc, #176]	@ (80180f4 <HAL_TIM_PWM_Stop+0x104>)
 8018044:	4013      	ands	r3, r2
 8018046:	d107      	bne.n	8018058 <HAL_TIM_PWM_Stop+0x68>
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	4929      	ldr	r1, [pc, #164]	@ (80180f8 <HAL_TIM_PWM_Stop+0x108>)
 8018054:	400a      	ands	r2, r1
 8018056:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	6a1b      	ldr	r3, [r3, #32]
 801805e:	4a24      	ldr	r2, [pc, #144]	@ (80180f0 <HAL_TIM_PWM_Stop+0x100>)
 8018060:	4013      	ands	r3, r2
 8018062:	d10d      	bne.n	8018080 <HAL_TIM_PWM_Stop+0x90>
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	6a1b      	ldr	r3, [r3, #32]
 801806a:	4a22      	ldr	r2, [pc, #136]	@ (80180f4 <HAL_TIM_PWM_Stop+0x104>)
 801806c:	4013      	ands	r3, r2
 801806e:	d107      	bne.n	8018080 <HAL_TIM_PWM_Stop+0x90>
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	681a      	ldr	r2, [r3, #0]
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	2101      	movs	r1, #1
 801807c:	438a      	bics	r2, r1
 801807e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d104      	bne.n	8018090 <HAL_TIM_PWM_Stop+0xa0>
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	223e      	movs	r2, #62	@ 0x3e
 801808a:	2101      	movs	r1, #1
 801808c:	5499      	strb	r1, [r3, r2]
 801808e:	e023      	b.n	80180d8 <HAL_TIM_PWM_Stop+0xe8>
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	2b04      	cmp	r3, #4
 8018094:	d104      	bne.n	80180a0 <HAL_TIM_PWM_Stop+0xb0>
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	223f      	movs	r2, #63	@ 0x3f
 801809a:	2101      	movs	r1, #1
 801809c:	5499      	strb	r1, [r3, r2]
 801809e:	e01b      	b.n	80180d8 <HAL_TIM_PWM_Stop+0xe8>
 80180a0:	683b      	ldr	r3, [r7, #0]
 80180a2:	2b08      	cmp	r3, #8
 80180a4:	d104      	bne.n	80180b0 <HAL_TIM_PWM_Stop+0xc0>
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	2240      	movs	r2, #64	@ 0x40
 80180aa:	2101      	movs	r1, #1
 80180ac:	5499      	strb	r1, [r3, r2]
 80180ae:	e013      	b.n	80180d8 <HAL_TIM_PWM_Stop+0xe8>
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	2b0c      	cmp	r3, #12
 80180b4:	d104      	bne.n	80180c0 <HAL_TIM_PWM_Stop+0xd0>
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	2241      	movs	r2, #65	@ 0x41
 80180ba:	2101      	movs	r1, #1
 80180bc:	5499      	strb	r1, [r3, r2]
 80180be:	e00b      	b.n	80180d8 <HAL_TIM_PWM_Stop+0xe8>
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	2b10      	cmp	r3, #16
 80180c4:	d104      	bne.n	80180d0 <HAL_TIM_PWM_Stop+0xe0>
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	2242      	movs	r2, #66	@ 0x42
 80180ca:	2101      	movs	r1, #1
 80180cc:	5499      	strb	r1, [r3, r2]
 80180ce:	e003      	b.n	80180d8 <HAL_TIM_PWM_Stop+0xe8>
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2243      	movs	r2, #67	@ 0x43
 80180d4:	2101      	movs	r1, #1
 80180d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80180d8:	2300      	movs	r3, #0
}
 80180da:	0018      	movs	r0, r3
 80180dc:	46bd      	mov	sp, r7
 80180de:	b002      	add	sp, #8
 80180e0:	bd80      	pop	{r7, pc}
 80180e2:	46c0      	nop			@ (mov r8, r8)
 80180e4:	40012c00 	.word	0x40012c00
 80180e8:	40014000 	.word	0x40014000
 80180ec:	40014400 	.word	0x40014400
 80180f0:	00001111 	.word	0x00001111
 80180f4:	00000444 	.word	0x00000444
 80180f8:	ffff7fff 	.word	0xffff7fff

080180fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b086      	sub	sp, #24
 8018100:	af00      	add	r7, sp, #0
 8018102:	60f8      	str	r0, [r7, #12]
 8018104:	60b9      	str	r1, [r7, #8]
 8018106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018108:	2317      	movs	r3, #23
 801810a:	18fb      	adds	r3, r7, r3
 801810c:	2200      	movs	r2, #0
 801810e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	223c      	movs	r2, #60	@ 0x3c
 8018114:	5c9b      	ldrb	r3, [r3, r2]
 8018116:	2b01      	cmp	r3, #1
 8018118:	d101      	bne.n	801811e <HAL_TIM_PWM_ConfigChannel+0x22>
 801811a:	2302      	movs	r3, #2
 801811c:	e0e5      	b.n	80182ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	223c      	movs	r2, #60	@ 0x3c
 8018122:	2101      	movs	r1, #1
 8018124:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2b14      	cmp	r3, #20
 801812a:	d900      	bls.n	801812e <HAL_TIM_PWM_ConfigChannel+0x32>
 801812c:	e0d1      	b.n	80182d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	009a      	lsls	r2, r3, #2
 8018132:	4b70      	ldr	r3, [pc, #448]	@ (80182f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8018134:	18d3      	adds	r3, r2, r3
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	68ba      	ldr	r2, [r7, #8]
 8018140:	0011      	movs	r1, r2
 8018142:	0018      	movs	r0, r3
 8018144:	f000 fa34 	bl	80185b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	699a      	ldr	r2, [r3, #24]
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	2108      	movs	r1, #8
 8018154:	430a      	orrs	r2, r1
 8018156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	699a      	ldr	r2, [r3, #24]
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	2104      	movs	r1, #4
 8018164:	438a      	bics	r2, r1
 8018166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	6999      	ldr	r1, [r3, #24]
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	691a      	ldr	r2, [r3, #16]
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	430a      	orrs	r2, r1
 8018178:	619a      	str	r2, [r3, #24]
      break;
 801817a:	e0af      	b.n	80182dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	68ba      	ldr	r2, [r7, #8]
 8018182:	0011      	movs	r1, r2
 8018184:	0018      	movs	r0, r3
 8018186:	f000 fa93 	bl	80186b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	699a      	ldr	r2, [r3, #24]
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	2180      	movs	r1, #128	@ 0x80
 8018196:	0109      	lsls	r1, r1, #4
 8018198:	430a      	orrs	r2, r1
 801819a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	699a      	ldr	r2, [r3, #24]
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	4954      	ldr	r1, [pc, #336]	@ (80182f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80181a8:	400a      	ands	r2, r1
 80181aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	6999      	ldr	r1, [r3, #24]
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	691b      	ldr	r3, [r3, #16]
 80181b6:	021a      	lsls	r2, r3, #8
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	430a      	orrs	r2, r1
 80181be:	619a      	str	r2, [r3, #24]
      break;
 80181c0:	e08c      	b.n	80182dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	68ba      	ldr	r2, [r7, #8]
 80181c8:	0011      	movs	r1, r2
 80181ca:	0018      	movs	r0, r3
 80181cc:	f000 faee 	bl	80187ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	69da      	ldr	r2, [r3, #28]
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2108      	movs	r1, #8
 80181dc:	430a      	orrs	r2, r1
 80181de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	69da      	ldr	r2, [r3, #28]
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	2104      	movs	r1, #4
 80181ec:	438a      	bics	r2, r1
 80181ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	69d9      	ldr	r1, [r3, #28]
 80181f6:	68bb      	ldr	r3, [r7, #8]
 80181f8:	691a      	ldr	r2, [r3, #16]
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	430a      	orrs	r2, r1
 8018200:	61da      	str	r2, [r3, #28]
      break;
 8018202:	e06b      	b.n	80182dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	68ba      	ldr	r2, [r7, #8]
 801820a:	0011      	movs	r1, r2
 801820c:	0018      	movs	r0, r3
 801820e:	f000 fb4f 	bl	80188b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	69da      	ldr	r2, [r3, #28]
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	2180      	movs	r1, #128	@ 0x80
 801821e:	0109      	lsls	r1, r1, #4
 8018220:	430a      	orrs	r2, r1
 8018222:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	69da      	ldr	r2, [r3, #28]
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	4932      	ldr	r1, [pc, #200]	@ (80182f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8018230:	400a      	ands	r2, r1
 8018232:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	69d9      	ldr	r1, [r3, #28]
 801823a:	68bb      	ldr	r3, [r7, #8]
 801823c:	691b      	ldr	r3, [r3, #16]
 801823e:	021a      	lsls	r2, r3, #8
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	430a      	orrs	r2, r1
 8018246:	61da      	str	r2, [r3, #28]
      break;
 8018248:	e048      	b.n	80182dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	68ba      	ldr	r2, [r7, #8]
 8018250:	0011      	movs	r1, r2
 8018252:	0018      	movs	r0, r3
 8018254:	f000 fb90 	bl	8018978 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	2108      	movs	r1, #8
 8018264:	430a      	orrs	r2, r1
 8018266:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	2104      	movs	r1, #4
 8018274:	438a      	bics	r2, r1
 8018276:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	691a      	ldr	r2, [r3, #16]
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	430a      	orrs	r2, r1
 8018288:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801828a:	e027      	b.n	80182dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	68ba      	ldr	r2, [r7, #8]
 8018292:	0011      	movs	r1, r2
 8018294:	0018      	movs	r0, r3
 8018296:	f000 fbc9 	bl	8018a2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	2180      	movs	r1, #128	@ 0x80
 80182a6:	0109      	lsls	r1, r1, #4
 80182a8:	430a      	orrs	r2, r1
 80182aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	4910      	ldr	r1, [pc, #64]	@ (80182f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80182b8:	400a      	ands	r2, r1
 80182ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80182c2:	68bb      	ldr	r3, [r7, #8]
 80182c4:	691b      	ldr	r3, [r3, #16]
 80182c6:	021a      	lsls	r2, r3, #8
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	430a      	orrs	r2, r1
 80182ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80182d0:	e004      	b.n	80182dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80182d2:	2317      	movs	r3, #23
 80182d4:	18fb      	adds	r3, r7, r3
 80182d6:	2201      	movs	r2, #1
 80182d8:	701a      	strb	r2, [r3, #0]
      break;
 80182da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	223c      	movs	r2, #60	@ 0x3c
 80182e0:	2100      	movs	r1, #0
 80182e2:	5499      	strb	r1, [r3, r2]

  return status;
 80182e4:	2317      	movs	r3, #23
 80182e6:	18fb      	adds	r3, r7, r3
 80182e8:	781b      	ldrb	r3, [r3, #0]
}
 80182ea:	0018      	movs	r0, r3
 80182ec:	46bd      	mov	sp, r7
 80182ee:	b006      	add	sp, #24
 80182f0:	bd80      	pop	{r7, pc}
 80182f2:	46c0      	nop			@ (mov r8, r8)
 80182f4:	0801b164 	.word	0x0801b164
 80182f8:	fffffbff 	.word	0xfffffbff

080182fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b084      	sub	sp, #16
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018306:	230f      	movs	r3, #15
 8018308:	18fb      	adds	r3, r7, r3
 801830a:	2200      	movs	r2, #0
 801830c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	223c      	movs	r2, #60	@ 0x3c
 8018312:	5c9b      	ldrb	r3, [r3, r2]
 8018314:	2b01      	cmp	r3, #1
 8018316:	d101      	bne.n	801831c <HAL_TIM_ConfigClockSource+0x20>
 8018318:	2302      	movs	r3, #2
 801831a:	e0c0      	b.n	801849e <HAL_TIM_ConfigClockSource+0x1a2>
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	223c      	movs	r2, #60	@ 0x3c
 8018320:	2101      	movs	r1, #1
 8018322:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	223d      	movs	r2, #61	@ 0x3d
 8018328:	2102      	movs	r1, #2
 801832a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	689b      	ldr	r3, [r3, #8]
 8018332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	4a5c      	ldr	r2, [pc, #368]	@ (80184a8 <HAL_TIM_ConfigClockSource+0x1ac>)
 8018338:	4013      	ands	r3, r2
 801833a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801833c:	68bb      	ldr	r3, [r7, #8]
 801833e:	4a5b      	ldr	r2, [pc, #364]	@ (80184ac <HAL_TIM_ConfigClockSource+0x1b0>)
 8018340:	4013      	ands	r3, r2
 8018342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	68ba      	ldr	r2, [r7, #8]
 801834a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4a57      	ldr	r2, [pc, #348]	@ (80184b0 <HAL_TIM_ConfigClockSource+0x1b4>)
 8018352:	4293      	cmp	r3, r2
 8018354:	d100      	bne.n	8018358 <HAL_TIM_ConfigClockSource+0x5c>
 8018356:	e088      	b.n	801846a <HAL_TIM_ConfigClockSource+0x16e>
 8018358:	4a55      	ldr	r2, [pc, #340]	@ (80184b0 <HAL_TIM_ConfigClockSource+0x1b4>)
 801835a:	4293      	cmp	r3, r2
 801835c:	d900      	bls.n	8018360 <HAL_TIM_ConfigClockSource+0x64>
 801835e:	e08d      	b.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 8018360:	2280      	movs	r2, #128	@ 0x80
 8018362:	0192      	lsls	r2, r2, #6
 8018364:	4293      	cmp	r3, r2
 8018366:	d03c      	beq.n	80183e2 <HAL_TIM_ConfigClockSource+0xe6>
 8018368:	2280      	movs	r2, #128	@ 0x80
 801836a:	0192      	lsls	r2, r2, #6
 801836c:	4293      	cmp	r3, r2
 801836e:	d900      	bls.n	8018372 <HAL_TIM_ConfigClockSource+0x76>
 8018370:	e084      	b.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 8018372:	2280      	movs	r2, #128	@ 0x80
 8018374:	0152      	lsls	r2, r2, #5
 8018376:	4293      	cmp	r3, r2
 8018378:	d100      	bne.n	801837c <HAL_TIM_ConfigClockSource+0x80>
 801837a:	e084      	b.n	8018486 <HAL_TIM_ConfigClockSource+0x18a>
 801837c:	2280      	movs	r2, #128	@ 0x80
 801837e:	0152      	lsls	r2, r2, #5
 8018380:	4293      	cmp	r3, r2
 8018382:	d900      	bls.n	8018386 <HAL_TIM_ConfigClockSource+0x8a>
 8018384:	e07a      	b.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 8018386:	2b70      	cmp	r3, #112	@ 0x70
 8018388:	d014      	beq.n	80183b4 <HAL_TIM_ConfigClockSource+0xb8>
 801838a:	d900      	bls.n	801838e <HAL_TIM_ConfigClockSource+0x92>
 801838c:	e076      	b.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 801838e:	2b60      	cmp	r3, #96	@ 0x60
 8018390:	d04b      	beq.n	801842a <HAL_TIM_ConfigClockSource+0x12e>
 8018392:	d900      	bls.n	8018396 <HAL_TIM_ConfigClockSource+0x9a>
 8018394:	e072      	b.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 8018396:	2b50      	cmp	r3, #80	@ 0x50
 8018398:	d037      	beq.n	801840a <HAL_TIM_ConfigClockSource+0x10e>
 801839a:	d900      	bls.n	801839e <HAL_TIM_ConfigClockSource+0xa2>
 801839c:	e06e      	b.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 801839e:	2b40      	cmp	r3, #64	@ 0x40
 80183a0:	d053      	beq.n	801844a <HAL_TIM_ConfigClockSource+0x14e>
 80183a2:	d86b      	bhi.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 80183a4:	2b20      	cmp	r3, #32
 80183a6:	d060      	beq.n	801846a <HAL_TIM_ConfigClockSource+0x16e>
 80183a8:	d868      	bhi.n	801847c <HAL_TIM_ConfigClockSource+0x180>
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d05d      	beq.n	801846a <HAL_TIM_ConfigClockSource+0x16e>
 80183ae:	2b10      	cmp	r3, #16
 80183b0:	d05b      	beq.n	801846a <HAL_TIM_ConfigClockSource+0x16e>
 80183b2:	e063      	b.n	801847c <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80183c4:	f000 fc0c 	bl	8018be0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	689b      	ldr	r3, [r3, #8]
 80183ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	2277      	movs	r2, #119	@ 0x77
 80183d4:	4313      	orrs	r3, r2
 80183d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	68ba      	ldr	r2, [r7, #8]
 80183de:	609a      	str	r2, [r3, #8]
      break;
 80183e0:	e052      	b.n	8018488 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80183f2:	f000 fbf5 	bl	8018be0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	689a      	ldr	r2, [r3, #8]
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	2180      	movs	r1, #128	@ 0x80
 8018402:	01c9      	lsls	r1, r1, #7
 8018404:	430a      	orrs	r2, r1
 8018406:	609a      	str	r2, [r3, #8]
      break;
 8018408:	e03e      	b.n	8018488 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8018416:	001a      	movs	r2, r3
 8018418:	f000 fb66 	bl	8018ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	2150      	movs	r1, #80	@ 0x50
 8018422:	0018      	movs	r0, r3
 8018424:	f000 fbc0 	bl	8018ba8 <TIM_ITRx_SetConfig>
      break;
 8018428:	e02e      	b.n	8018488 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8018436:	001a      	movs	r2, r3
 8018438:	f000 fb84 	bl	8018b44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	2160      	movs	r1, #96	@ 0x60
 8018442:	0018      	movs	r0, r3
 8018444:	f000 fbb0 	bl	8018ba8 <TIM_ITRx_SetConfig>
      break;
 8018448:	e01e      	b.n	8018488 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8018456:	001a      	movs	r2, r3
 8018458:	f000 fb46 	bl	8018ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	2140      	movs	r1, #64	@ 0x40
 8018462:	0018      	movs	r0, r3
 8018464:	f000 fba0 	bl	8018ba8 <TIM_ITRx_SetConfig>
      break;
 8018468:	e00e      	b.n	8018488 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681a      	ldr	r2, [r3, #0]
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	0019      	movs	r1, r3
 8018474:	0010      	movs	r0, r2
 8018476:	f000 fb97 	bl	8018ba8 <TIM_ITRx_SetConfig>
      break;
 801847a:	e005      	b.n	8018488 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 801847c:	230f      	movs	r3, #15
 801847e:	18fb      	adds	r3, r7, r3
 8018480:	2201      	movs	r2, #1
 8018482:	701a      	strb	r2, [r3, #0]
      break;
 8018484:	e000      	b.n	8018488 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8018486:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	223d      	movs	r2, #61	@ 0x3d
 801848c:	2101      	movs	r1, #1
 801848e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	223c      	movs	r2, #60	@ 0x3c
 8018494:	2100      	movs	r1, #0
 8018496:	5499      	strb	r1, [r3, r2]

  return status;
 8018498:	230f      	movs	r3, #15
 801849a:	18fb      	adds	r3, r7, r3
 801849c:	781b      	ldrb	r3, [r3, #0]
}
 801849e:	0018      	movs	r0, r3
 80184a0:	46bd      	mov	sp, r7
 80184a2:	b004      	add	sp, #16
 80184a4:	bd80      	pop	{r7, pc}
 80184a6:	46c0      	nop			@ (mov r8, r8)
 80184a8:	ffceff88 	.word	0xffceff88
 80184ac:	ffff00ff 	.word	0xffff00ff
 80184b0:	00100030 	.word	0x00100030

080184b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b084      	sub	sp, #16
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
 80184bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	4a35      	ldr	r2, [pc, #212]	@ (801859c <TIM_Base_SetConfig+0xe8>)
 80184c8:	4293      	cmp	r3, r2
 80184ca:	d008      	beq.n	80184de <TIM_Base_SetConfig+0x2a>
 80184cc:	687a      	ldr	r2, [r7, #4]
 80184ce:	2380      	movs	r3, #128	@ 0x80
 80184d0:	05db      	lsls	r3, r3, #23
 80184d2:	429a      	cmp	r2, r3
 80184d4:	d003      	beq.n	80184de <TIM_Base_SetConfig+0x2a>
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	4a31      	ldr	r2, [pc, #196]	@ (80185a0 <TIM_Base_SetConfig+0xec>)
 80184da:	4293      	cmp	r3, r2
 80184dc:	d108      	bne.n	80184f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	2270      	movs	r2, #112	@ 0x70
 80184e2:	4393      	bics	r3, r2
 80184e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80184e6:	683b      	ldr	r3, [r7, #0]
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	68fa      	ldr	r2, [r7, #12]
 80184ec:	4313      	orrs	r3, r2
 80184ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	4a2a      	ldr	r2, [pc, #168]	@ (801859c <TIM_Base_SetConfig+0xe8>)
 80184f4:	4293      	cmp	r3, r2
 80184f6:	d010      	beq.n	801851a <TIM_Base_SetConfig+0x66>
 80184f8:	687a      	ldr	r2, [r7, #4]
 80184fa:	2380      	movs	r3, #128	@ 0x80
 80184fc:	05db      	lsls	r3, r3, #23
 80184fe:	429a      	cmp	r2, r3
 8018500:	d00b      	beq.n	801851a <TIM_Base_SetConfig+0x66>
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	4a26      	ldr	r2, [pc, #152]	@ (80185a0 <TIM_Base_SetConfig+0xec>)
 8018506:	4293      	cmp	r3, r2
 8018508:	d007      	beq.n	801851a <TIM_Base_SetConfig+0x66>
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	4a25      	ldr	r2, [pc, #148]	@ (80185a4 <TIM_Base_SetConfig+0xf0>)
 801850e:	4293      	cmp	r3, r2
 8018510:	d003      	beq.n	801851a <TIM_Base_SetConfig+0x66>
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	4a24      	ldr	r2, [pc, #144]	@ (80185a8 <TIM_Base_SetConfig+0xf4>)
 8018516:	4293      	cmp	r3, r2
 8018518:	d108      	bne.n	801852c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	4a23      	ldr	r2, [pc, #140]	@ (80185ac <TIM_Base_SetConfig+0xf8>)
 801851e:	4013      	ands	r3, r2
 8018520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018522:	683b      	ldr	r3, [r7, #0]
 8018524:	68db      	ldr	r3, [r3, #12]
 8018526:	68fa      	ldr	r2, [r7, #12]
 8018528:	4313      	orrs	r3, r2
 801852a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	2280      	movs	r2, #128	@ 0x80
 8018530:	4393      	bics	r3, r2
 8018532:	001a      	movs	r2, r3
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	695b      	ldr	r3, [r3, #20]
 8018538:	4313      	orrs	r3, r2
 801853a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	68fa      	ldr	r2, [r7, #12]
 8018540:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018542:	683b      	ldr	r3, [r7, #0]
 8018544:	689a      	ldr	r2, [r3, #8]
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	681a      	ldr	r2, [r3, #0]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	4a11      	ldr	r2, [pc, #68]	@ (801859c <TIM_Base_SetConfig+0xe8>)
 8018556:	4293      	cmp	r3, r2
 8018558:	d007      	beq.n	801856a <TIM_Base_SetConfig+0xb6>
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	4a11      	ldr	r2, [pc, #68]	@ (80185a4 <TIM_Base_SetConfig+0xf0>)
 801855e:	4293      	cmp	r3, r2
 8018560:	d003      	beq.n	801856a <TIM_Base_SetConfig+0xb6>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	4a10      	ldr	r2, [pc, #64]	@ (80185a8 <TIM_Base_SetConfig+0xf4>)
 8018566:	4293      	cmp	r3, r2
 8018568:	d103      	bne.n	8018572 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	691a      	ldr	r2, [r3, #16]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2201      	movs	r2, #1
 8018576:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	691b      	ldr	r3, [r3, #16]
 801857c:	2201      	movs	r2, #1
 801857e:	4013      	ands	r3, r2
 8018580:	2b01      	cmp	r3, #1
 8018582:	d106      	bne.n	8018592 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	691b      	ldr	r3, [r3, #16]
 8018588:	2201      	movs	r2, #1
 801858a:	4393      	bics	r3, r2
 801858c:	001a      	movs	r2, r3
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	611a      	str	r2, [r3, #16]
  }
}
 8018592:	46c0      	nop			@ (mov r8, r8)
 8018594:	46bd      	mov	sp, r7
 8018596:	b004      	add	sp, #16
 8018598:	bd80      	pop	{r7, pc}
 801859a:	46c0      	nop			@ (mov r8, r8)
 801859c:	40012c00 	.word	0x40012c00
 80185a0:	40000400 	.word	0x40000400
 80185a4:	40014000 	.word	0x40014000
 80185a8:	40014400 	.word	0x40014400
 80185ac:	fffffcff 	.word	0xfffffcff

080185b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b086      	sub	sp, #24
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6a1b      	ldr	r3, [r3, #32]
 80185be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6a1b      	ldr	r3, [r3, #32]
 80185c4:	2201      	movs	r2, #1
 80185c6:	4393      	bics	r3, r2
 80185c8:	001a      	movs	r2, r3
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	685b      	ldr	r3, [r3, #4]
 80185d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	699b      	ldr	r3, [r3, #24]
 80185d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	4a2e      	ldr	r2, [pc, #184]	@ (8018698 <TIM_OC1_SetConfig+0xe8>)
 80185de:	4013      	ands	r3, r2
 80185e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	2203      	movs	r2, #3
 80185e6:	4393      	bics	r3, r2
 80185e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	68fa      	ldr	r2, [r7, #12]
 80185f0:	4313      	orrs	r3, r2
 80185f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	2202      	movs	r2, #2
 80185f8:	4393      	bics	r3, r2
 80185fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	689b      	ldr	r3, [r3, #8]
 8018600:	697a      	ldr	r2, [r7, #20]
 8018602:	4313      	orrs	r3, r2
 8018604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	4a24      	ldr	r2, [pc, #144]	@ (801869c <TIM_OC1_SetConfig+0xec>)
 801860a:	4293      	cmp	r3, r2
 801860c:	d007      	beq.n	801861e <TIM_OC1_SetConfig+0x6e>
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	4a23      	ldr	r2, [pc, #140]	@ (80186a0 <TIM_OC1_SetConfig+0xf0>)
 8018612:	4293      	cmp	r3, r2
 8018614:	d003      	beq.n	801861e <TIM_OC1_SetConfig+0x6e>
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	4a22      	ldr	r2, [pc, #136]	@ (80186a4 <TIM_OC1_SetConfig+0xf4>)
 801861a:	4293      	cmp	r3, r2
 801861c:	d10c      	bne.n	8018638 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	2208      	movs	r2, #8
 8018622:	4393      	bics	r3, r2
 8018624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8018626:	683b      	ldr	r3, [r7, #0]
 8018628:	68db      	ldr	r3, [r3, #12]
 801862a:	697a      	ldr	r2, [r7, #20]
 801862c:	4313      	orrs	r3, r2
 801862e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	2204      	movs	r2, #4
 8018634:	4393      	bics	r3, r2
 8018636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	4a18      	ldr	r2, [pc, #96]	@ (801869c <TIM_OC1_SetConfig+0xec>)
 801863c:	4293      	cmp	r3, r2
 801863e:	d007      	beq.n	8018650 <TIM_OC1_SetConfig+0xa0>
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	4a17      	ldr	r2, [pc, #92]	@ (80186a0 <TIM_OC1_SetConfig+0xf0>)
 8018644:	4293      	cmp	r3, r2
 8018646:	d003      	beq.n	8018650 <TIM_OC1_SetConfig+0xa0>
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	4a16      	ldr	r2, [pc, #88]	@ (80186a4 <TIM_OC1_SetConfig+0xf4>)
 801864c:	4293      	cmp	r3, r2
 801864e:	d111      	bne.n	8018674 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8018650:	693b      	ldr	r3, [r7, #16]
 8018652:	4a15      	ldr	r2, [pc, #84]	@ (80186a8 <TIM_OC1_SetConfig+0xf8>)
 8018654:	4013      	ands	r3, r2
 8018656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8018658:	693b      	ldr	r3, [r7, #16]
 801865a:	4a14      	ldr	r2, [pc, #80]	@ (80186ac <TIM_OC1_SetConfig+0xfc>)
 801865c:	4013      	ands	r3, r2
 801865e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	695b      	ldr	r3, [r3, #20]
 8018664:	693a      	ldr	r2, [r7, #16]
 8018666:	4313      	orrs	r3, r2
 8018668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801866a:	683b      	ldr	r3, [r7, #0]
 801866c:	699b      	ldr	r3, [r3, #24]
 801866e:	693a      	ldr	r2, [r7, #16]
 8018670:	4313      	orrs	r3, r2
 8018672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	693a      	ldr	r2, [r7, #16]
 8018678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	68fa      	ldr	r2, [r7, #12]
 801867e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	685a      	ldr	r2, [r3, #4]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	697a      	ldr	r2, [r7, #20]
 801868c:	621a      	str	r2, [r3, #32]
}
 801868e:	46c0      	nop			@ (mov r8, r8)
 8018690:	46bd      	mov	sp, r7
 8018692:	b006      	add	sp, #24
 8018694:	bd80      	pop	{r7, pc}
 8018696:	46c0      	nop			@ (mov r8, r8)
 8018698:	fffeff8f 	.word	0xfffeff8f
 801869c:	40012c00 	.word	0x40012c00
 80186a0:	40014000 	.word	0x40014000
 80186a4:	40014400 	.word	0x40014400
 80186a8:	fffffeff 	.word	0xfffffeff
 80186ac:	fffffdff 	.word	0xfffffdff

080186b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b086      	sub	sp, #24
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
 80186b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	6a1b      	ldr	r3, [r3, #32]
 80186be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	6a1b      	ldr	r3, [r3, #32]
 80186c4:	2210      	movs	r2, #16
 80186c6:	4393      	bics	r3, r2
 80186c8:	001a      	movs	r2, r3
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	685b      	ldr	r3, [r3, #4]
 80186d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	699b      	ldr	r3, [r3, #24]
 80186d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	4a2c      	ldr	r2, [pc, #176]	@ (8018790 <TIM_OC2_SetConfig+0xe0>)
 80186de:	4013      	ands	r3, r2
 80186e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	4a2b      	ldr	r2, [pc, #172]	@ (8018794 <TIM_OC2_SetConfig+0xe4>)
 80186e6:	4013      	ands	r3, r2
 80186e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	021b      	lsls	r3, r3, #8
 80186f0:	68fa      	ldr	r2, [r7, #12]
 80186f2:	4313      	orrs	r3, r2
 80186f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	2220      	movs	r2, #32
 80186fa:	4393      	bics	r3, r2
 80186fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80186fe:	683b      	ldr	r3, [r7, #0]
 8018700:	689b      	ldr	r3, [r3, #8]
 8018702:	011b      	lsls	r3, r3, #4
 8018704:	697a      	ldr	r2, [r7, #20]
 8018706:	4313      	orrs	r3, r2
 8018708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	4a22      	ldr	r2, [pc, #136]	@ (8018798 <TIM_OC2_SetConfig+0xe8>)
 801870e:	4293      	cmp	r3, r2
 8018710:	d10d      	bne.n	801872e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8018712:	697b      	ldr	r3, [r7, #20]
 8018714:	2280      	movs	r2, #128	@ 0x80
 8018716:	4393      	bics	r3, r2
 8018718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801871a:	683b      	ldr	r3, [r7, #0]
 801871c:	68db      	ldr	r3, [r3, #12]
 801871e:	011b      	lsls	r3, r3, #4
 8018720:	697a      	ldr	r2, [r7, #20]
 8018722:	4313      	orrs	r3, r2
 8018724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8018726:	697b      	ldr	r3, [r7, #20]
 8018728:	2240      	movs	r2, #64	@ 0x40
 801872a:	4393      	bics	r3, r2
 801872c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	4a19      	ldr	r2, [pc, #100]	@ (8018798 <TIM_OC2_SetConfig+0xe8>)
 8018732:	4293      	cmp	r3, r2
 8018734:	d007      	beq.n	8018746 <TIM_OC2_SetConfig+0x96>
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	4a18      	ldr	r2, [pc, #96]	@ (801879c <TIM_OC2_SetConfig+0xec>)
 801873a:	4293      	cmp	r3, r2
 801873c:	d003      	beq.n	8018746 <TIM_OC2_SetConfig+0x96>
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	4a17      	ldr	r2, [pc, #92]	@ (80187a0 <TIM_OC2_SetConfig+0xf0>)
 8018742:	4293      	cmp	r3, r2
 8018744:	d113      	bne.n	801876e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	4a16      	ldr	r2, [pc, #88]	@ (80187a4 <TIM_OC2_SetConfig+0xf4>)
 801874a:	4013      	ands	r3, r2
 801874c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	4a15      	ldr	r2, [pc, #84]	@ (80187a8 <TIM_OC2_SetConfig+0xf8>)
 8018752:	4013      	ands	r3, r2
 8018754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	695b      	ldr	r3, [r3, #20]
 801875a:	009b      	lsls	r3, r3, #2
 801875c:	693a      	ldr	r2, [r7, #16]
 801875e:	4313      	orrs	r3, r2
 8018760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8018762:	683b      	ldr	r3, [r7, #0]
 8018764:	699b      	ldr	r3, [r3, #24]
 8018766:	009b      	lsls	r3, r3, #2
 8018768:	693a      	ldr	r2, [r7, #16]
 801876a:	4313      	orrs	r3, r2
 801876c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	693a      	ldr	r2, [r7, #16]
 8018772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	68fa      	ldr	r2, [r7, #12]
 8018778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	685a      	ldr	r2, [r3, #4]
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	697a      	ldr	r2, [r7, #20]
 8018786:	621a      	str	r2, [r3, #32]
}
 8018788:	46c0      	nop			@ (mov r8, r8)
 801878a:	46bd      	mov	sp, r7
 801878c:	b006      	add	sp, #24
 801878e:	bd80      	pop	{r7, pc}
 8018790:	feff8fff 	.word	0xfeff8fff
 8018794:	fffffcff 	.word	0xfffffcff
 8018798:	40012c00 	.word	0x40012c00
 801879c:	40014000 	.word	0x40014000
 80187a0:	40014400 	.word	0x40014400
 80187a4:	fffffbff 	.word	0xfffffbff
 80187a8:	fffff7ff 	.word	0xfffff7ff

080187ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b086      	sub	sp, #24
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6a1b      	ldr	r3, [r3, #32]
 80187ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6a1b      	ldr	r3, [r3, #32]
 80187c0:	4a31      	ldr	r2, [pc, #196]	@ (8018888 <TIM_OC3_SetConfig+0xdc>)
 80187c2:	401a      	ands	r2, r3
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	685b      	ldr	r3, [r3, #4]
 80187cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	69db      	ldr	r3, [r3, #28]
 80187d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	4a2d      	ldr	r2, [pc, #180]	@ (801888c <TIM_OC3_SetConfig+0xe0>)
 80187d8:	4013      	ands	r3, r2
 80187da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	2203      	movs	r2, #3
 80187e0:	4393      	bics	r3, r2
 80187e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	68fa      	ldr	r2, [r7, #12]
 80187ea:	4313      	orrs	r3, r2
 80187ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80187ee:	697b      	ldr	r3, [r7, #20]
 80187f0:	4a27      	ldr	r2, [pc, #156]	@ (8018890 <TIM_OC3_SetConfig+0xe4>)
 80187f2:	4013      	ands	r3, r2
 80187f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	689b      	ldr	r3, [r3, #8]
 80187fa:	021b      	lsls	r3, r3, #8
 80187fc:	697a      	ldr	r2, [r7, #20]
 80187fe:	4313      	orrs	r3, r2
 8018800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	4a23      	ldr	r2, [pc, #140]	@ (8018894 <TIM_OC3_SetConfig+0xe8>)
 8018806:	4293      	cmp	r3, r2
 8018808:	d10d      	bne.n	8018826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801880a:	697b      	ldr	r3, [r7, #20]
 801880c:	4a22      	ldr	r2, [pc, #136]	@ (8018898 <TIM_OC3_SetConfig+0xec>)
 801880e:	4013      	ands	r3, r2
 8018810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	68db      	ldr	r3, [r3, #12]
 8018816:	021b      	lsls	r3, r3, #8
 8018818:	697a      	ldr	r2, [r7, #20]
 801881a:	4313      	orrs	r3, r2
 801881c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	4a1e      	ldr	r2, [pc, #120]	@ (801889c <TIM_OC3_SetConfig+0xf0>)
 8018822:	4013      	ands	r3, r2
 8018824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	4a1a      	ldr	r2, [pc, #104]	@ (8018894 <TIM_OC3_SetConfig+0xe8>)
 801882a:	4293      	cmp	r3, r2
 801882c:	d007      	beq.n	801883e <TIM_OC3_SetConfig+0x92>
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	4a1b      	ldr	r2, [pc, #108]	@ (80188a0 <TIM_OC3_SetConfig+0xf4>)
 8018832:	4293      	cmp	r3, r2
 8018834:	d003      	beq.n	801883e <TIM_OC3_SetConfig+0x92>
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	4a1a      	ldr	r2, [pc, #104]	@ (80188a4 <TIM_OC3_SetConfig+0xf8>)
 801883a:	4293      	cmp	r3, r2
 801883c:	d113      	bne.n	8018866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801883e:	693b      	ldr	r3, [r7, #16]
 8018840:	4a19      	ldr	r2, [pc, #100]	@ (80188a8 <TIM_OC3_SetConfig+0xfc>)
 8018842:	4013      	ands	r3, r2
 8018844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	4a18      	ldr	r2, [pc, #96]	@ (80188ac <TIM_OC3_SetConfig+0x100>)
 801884a:	4013      	ands	r3, r2
 801884c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801884e:	683b      	ldr	r3, [r7, #0]
 8018850:	695b      	ldr	r3, [r3, #20]
 8018852:	011b      	lsls	r3, r3, #4
 8018854:	693a      	ldr	r2, [r7, #16]
 8018856:	4313      	orrs	r3, r2
 8018858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801885a:	683b      	ldr	r3, [r7, #0]
 801885c:	699b      	ldr	r3, [r3, #24]
 801885e:	011b      	lsls	r3, r3, #4
 8018860:	693a      	ldr	r2, [r7, #16]
 8018862:	4313      	orrs	r3, r2
 8018864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	693a      	ldr	r2, [r7, #16]
 801886a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	68fa      	ldr	r2, [r7, #12]
 8018870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8018872:	683b      	ldr	r3, [r7, #0]
 8018874:	685a      	ldr	r2, [r3, #4]
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	697a      	ldr	r2, [r7, #20]
 801887e:	621a      	str	r2, [r3, #32]
}
 8018880:	46c0      	nop			@ (mov r8, r8)
 8018882:	46bd      	mov	sp, r7
 8018884:	b006      	add	sp, #24
 8018886:	bd80      	pop	{r7, pc}
 8018888:	fffffeff 	.word	0xfffffeff
 801888c:	fffeff8f 	.word	0xfffeff8f
 8018890:	fffffdff 	.word	0xfffffdff
 8018894:	40012c00 	.word	0x40012c00
 8018898:	fffff7ff 	.word	0xfffff7ff
 801889c:	fffffbff 	.word	0xfffffbff
 80188a0:	40014000 	.word	0x40014000
 80188a4:	40014400 	.word	0x40014400
 80188a8:	ffffefff 	.word	0xffffefff
 80188ac:	ffffdfff 	.word	0xffffdfff

080188b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b086      	sub	sp, #24
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
 80188b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	6a1b      	ldr	r3, [r3, #32]
 80188be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	6a1b      	ldr	r3, [r3, #32]
 80188c4:	4a24      	ldr	r2, [pc, #144]	@ (8018958 <TIM_OC4_SetConfig+0xa8>)
 80188c6:	401a      	ands	r2, r3
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	69db      	ldr	r3, [r3, #28]
 80188d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	4a20      	ldr	r2, [pc, #128]	@ (801895c <TIM_OC4_SetConfig+0xac>)
 80188dc:	4013      	ands	r3, r2
 80188de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	4a1f      	ldr	r2, [pc, #124]	@ (8018960 <TIM_OC4_SetConfig+0xb0>)
 80188e4:	4013      	ands	r3, r2
 80188e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	021b      	lsls	r3, r3, #8
 80188ee:	68fa      	ldr	r2, [r7, #12]
 80188f0:	4313      	orrs	r3, r2
 80188f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80188f4:	693b      	ldr	r3, [r7, #16]
 80188f6:	4a1b      	ldr	r2, [pc, #108]	@ (8018964 <TIM_OC4_SetConfig+0xb4>)
 80188f8:	4013      	ands	r3, r2
 80188fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	689b      	ldr	r3, [r3, #8]
 8018900:	031b      	lsls	r3, r3, #12
 8018902:	693a      	ldr	r2, [r7, #16]
 8018904:	4313      	orrs	r3, r2
 8018906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	4a17      	ldr	r2, [pc, #92]	@ (8018968 <TIM_OC4_SetConfig+0xb8>)
 801890c:	4293      	cmp	r3, r2
 801890e:	d007      	beq.n	8018920 <TIM_OC4_SetConfig+0x70>
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	4a16      	ldr	r2, [pc, #88]	@ (801896c <TIM_OC4_SetConfig+0xbc>)
 8018914:	4293      	cmp	r3, r2
 8018916:	d003      	beq.n	8018920 <TIM_OC4_SetConfig+0x70>
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	4a15      	ldr	r2, [pc, #84]	@ (8018970 <TIM_OC4_SetConfig+0xc0>)
 801891c:	4293      	cmp	r3, r2
 801891e:	d109      	bne.n	8018934 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	4a14      	ldr	r2, [pc, #80]	@ (8018974 <TIM_OC4_SetConfig+0xc4>)
 8018924:	4013      	ands	r3, r2
 8018926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	695b      	ldr	r3, [r3, #20]
 801892c:	019b      	lsls	r3, r3, #6
 801892e:	697a      	ldr	r2, [r7, #20]
 8018930:	4313      	orrs	r3, r2
 8018932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	697a      	ldr	r2, [r7, #20]
 8018938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	685a      	ldr	r2, [r3, #4]
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	693a      	ldr	r2, [r7, #16]
 801894c:	621a      	str	r2, [r3, #32]
}
 801894e:	46c0      	nop			@ (mov r8, r8)
 8018950:	46bd      	mov	sp, r7
 8018952:	b006      	add	sp, #24
 8018954:	bd80      	pop	{r7, pc}
 8018956:	46c0      	nop			@ (mov r8, r8)
 8018958:	ffffefff 	.word	0xffffefff
 801895c:	feff8fff 	.word	0xfeff8fff
 8018960:	fffffcff 	.word	0xfffffcff
 8018964:	ffffdfff 	.word	0xffffdfff
 8018968:	40012c00 	.word	0x40012c00
 801896c:	40014000 	.word	0x40014000
 8018970:	40014400 	.word	0x40014400
 8018974:	ffffbfff 	.word	0xffffbfff

08018978 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b086      	sub	sp, #24
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	6a1b      	ldr	r3, [r3, #32]
 8018986:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6a1b      	ldr	r3, [r3, #32]
 801898c:	4a21      	ldr	r2, [pc, #132]	@ (8018a14 <TIM_OC5_SetConfig+0x9c>)
 801898e:	401a      	ands	r2, r3
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	685b      	ldr	r3, [r3, #4]
 8018998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801899e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	4a1d      	ldr	r2, [pc, #116]	@ (8018a18 <TIM_OC5_SetConfig+0xa0>)
 80189a4:	4013      	ands	r3, r2
 80189a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	68fa      	ldr	r2, [r7, #12]
 80189ae:	4313      	orrs	r3, r2
 80189b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80189b2:	693b      	ldr	r3, [r7, #16]
 80189b4:	4a19      	ldr	r2, [pc, #100]	@ (8018a1c <TIM_OC5_SetConfig+0xa4>)
 80189b6:	4013      	ands	r3, r2
 80189b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80189ba:	683b      	ldr	r3, [r7, #0]
 80189bc:	689b      	ldr	r3, [r3, #8]
 80189be:	041b      	lsls	r3, r3, #16
 80189c0:	693a      	ldr	r2, [r7, #16]
 80189c2:	4313      	orrs	r3, r2
 80189c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	4a15      	ldr	r2, [pc, #84]	@ (8018a20 <TIM_OC5_SetConfig+0xa8>)
 80189ca:	4293      	cmp	r3, r2
 80189cc:	d007      	beq.n	80189de <TIM_OC5_SetConfig+0x66>
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	4a14      	ldr	r2, [pc, #80]	@ (8018a24 <TIM_OC5_SetConfig+0xac>)
 80189d2:	4293      	cmp	r3, r2
 80189d4:	d003      	beq.n	80189de <TIM_OC5_SetConfig+0x66>
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	4a13      	ldr	r2, [pc, #76]	@ (8018a28 <TIM_OC5_SetConfig+0xb0>)
 80189da:	4293      	cmp	r3, r2
 80189dc:	d109      	bne.n	80189f2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	4a0c      	ldr	r2, [pc, #48]	@ (8018a14 <TIM_OC5_SetConfig+0x9c>)
 80189e2:	4013      	ands	r3, r2
 80189e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	695b      	ldr	r3, [r3, #20]
 80189ea:	021b      	lsls	r3, r3, #8
 80189ec:	697a      	ldr	r2, [r7, #20]
 80189ee:	4313      	orrs	r3, r2
 80189f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	697a      	ldr	r2, [r7, #20]
 80189f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	68fa      	ldr	r2, [r7, #12]
 80189fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	685a      	ldr	r2, [r3, #4]
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	693a      	ldr	r2, [r7, #16]
 8018a0a:	621a      	str	r2, [r3, #32]
}
 8018a0c:	46c0      	nop			@ (mov r8, r8)
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	b006      	add	sp, #24
 8018a12:	bd80      	pop	{r7, pc}
 8018a14:	fffeffff 	.word	0xfffeffff
 8018a18:	fffeff8f 	.word	0xfffeff8f
 8018a1c:	fffdffff 	.word	0xfffdffff
 8018a20:	40012c00 	.word	0x40012c00
 8018a24:	40014000 	.word	0x40014000
 8018a28:	40014400 	.word	0x40014400

08018a2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b086      	sub	sp, #24
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
 8018a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	6a1b      	ldr	r3, [r3, #32]
 8018a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6a1b      	ldr	r3, [r3, #32]
 8018a40:	4a22      	ldr	r2, [pc, #136]	@ (8018acc <TIM_OC6_SetConfig+0xa0>)
 8018a42:	401a      	ands	r2, r3
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	685b      	ldr	r3, [r3, #4]
 8018a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	4a1e      	ldr	r2, [pc, #120]	@ (8018ad0 <TIM_OC6_SetConfig+0xa4>)
 8018a58:	4013      	ands	r3, r2
 8018a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018a5c:	683b      	ldr	r3, [r7, #0]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	021b      	lsls	r3, r3, #8
 8018a62:	68fa      	ldr	r2, [r7, #12]
 8018a64:	4313      	orrs	r3, r2
 8018a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8018ad4 <TIM_OC6_SetConfig+0xa8>)
 8018a6c:	4013      	ands	r3, r2
 8018a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	689b      	ldr	r3, [r3, #8]
 8018a74:	051b      	lsls	r3, r3, #20
 8018a76:	693a      	ldr	r2, [r7, #16]
 8018a78:	4313      	orrs	r3, r2
 8018a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	4a16      	ldr	r2, [pc, #88]	@ (8018ad8 <TIM_OC6_SetConfig+0xac>)
 8018a80:	4293      	cmp	r3, r2
 8018a82:	d007      	beq.n	8018a94 <TIM_OC6_SetConfig+0x68>
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	4a15      	ldr	r2, [pc, #84]	@ (8018adc <TIM_OC6_SetConfig+0xb0>)
 8018a88:	4293      	cmp	r3, r2
 8018a8a:	d003      	beq.n	8018a94 <TIM_OC6_SetConfig+0x68>
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	4a14      	ldr	r2, [pc, #80]	@ (8018ae0 <TIM_OC6_SetConfig+0xb4>)
 8018a90:	4293      	cmp	r3, r2
 8018a92:	d109      	bne.n	8018aa8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	4a13      	ldr	r2, [pc, #76]	@ (8018ae4 <TIM_OC6_SetConfig+0xb8>)
 8018a98:	4013      	ands	r3, r2
 8018a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8018a9c:	683b      	ldr	r3, [r7, #0]
 8018a9e:	695b      	ldr	r3, [r3, #20]
 8018aa0:	029b      	lsls	r3, r3, #10
 8018aa2:	697a      	ldr	r2, [r7, #20]
 8018aa4:	4313      	orrs	r3, r2
 8018aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	697a      	ldr	r2, [r7, #20]
 8018aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	68fa      	ldr	r2, [r7, #12]
 8018ab2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8018ab4:	683b      	ldr	r3, [r7, #0]
 8018ab6:	685a      	ldr	r2, [r3, #4]
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	693a      	ldr	r2, [r7, #16]
 8018ac0:	621a      	str	r2, [r3, #32]
}
 8018ac2:	46c0      	nop			@ (mov r8, r8)
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	b006      	add	sp, #24
 8018ac8:	bd80      	pop	{r7, pc}
 8018aca:	46c0      	nop			@ (mov r8, r8)
 8018acc:	ffefffff 	.word	0xffefffff
 8018ad0:	feff8fff 	.word	0xfeff8fff
 8018ad4:	ffdfffff 	.word	0xffdfffff
 8018ad8:	40012c00 	.word	0x40012c00
 8018adc:	40014000 	.word	0x40014000
 8018ae0:	40014400 	.word	0x40014400
 8018ae4:	fffbffff 	.word	0xfffbffff

08018ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b086      	sub	sp, #24
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	60f8      	str	r0, [r7, #12]
 8018af0:	60b9      	str	r1, [r7, #8]
 8018af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	6a1b      	ldr	r3, [r3, #32]
 8018af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	6a1b      	ldr	r3, [r3, #32]
 8018afe:	2201      	movs	r2, #1
 8018b00:	4393      	bics	r3, r2
 8018b02:	001a      	movs	r2, r3
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	699b      	ldr	r3, [r3, #24]
 8018b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8018b0e:	693b      	ldr	r3, [r7, #16]
 8018b10:	22f0      	movs	r2, #240	@ 0xf0
 8018b12:	4393      	bics	r3, r2
 8018b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	011b      	lsls	r3, r3, #4
 8018b1a:	693a      	ldr	r2, [r7, #16]
 8018b1c:	4313      	orrs	r3, r2
 8018b1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	220a      	movs	r2, #10
 8018b24:	4393      	bics	r3, r2
 8018b26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8018b28:	697a      	ldr	r2, [r7, #20]
 8018b2a:	68bb      	ldr	r3, [r7, #8]
 8018b2c:	4313      	orrs	r3, r2
 8018b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	693a      	ldr	r2, [r7, #16]
 8018b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	697a      	ldr	r2, [r7, #20]
 8018b3a:	621a      	str	r2, [r3, #32]
}
 8018b3c:	46c0      	nop			@ (mov r8, r8)
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	b006      	add	sp, #24
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b086      	sub	sp, #24
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	60f8      	str	r0, [r7, #12]
 8018b4c:	60b9      	str	r1, [r7, #8]
 8018b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	6a1b      	ldr	r3, [r3, #32]
 8018b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	6a1b      	ldr	r3, [r3, #32]
 8018b5a:	2210      	movs	r2, #16
 8018b5c:	4393      	bics	r3, r2
 8018b5e:	001a      	movs	r2, r3
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	699b      	ldr	r3, [r3, #24]
 8018b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8018ba4 <TIM_TI2_ConfigInputStage+0x60>)
 8018b6e:	4013      	ands	r3, r2
 8018b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	031b      	lsls	r3, r3, #12
 8018b76:	693a      	ldr	r2, [r7, #16]
 8018b78:	4313      	orrs	r3, r2
 8018b7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8018b7c:	697b      	ldr	r3, [r7, #20]
 8018b7e:	22a0      	movs	r2, #160	@ 0xa0
 8018b80:	4393      	bics	r3, r2
 8018b82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8018b84:	68bb      	ldr	r3, [r7, #8]
 8018b86:	011b      	lsls	r3, r3, #4
 8018b88:	697a      	ldr	r2, [r7, #20]
 8018b8a:	4313      	orrs	r3, r2
 8018b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	693a      	ldr	r2, [r7, #16]
 8018b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	697a      	ldr	r2, [r7, #20]
 8018b98:	621a      	str	r2, [r3, #32]
}
 8018b9a:	46c0      	nop			@ (mov r8, r8)
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	b006      	add	sp, #24
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	46c0      	nop			@ (mov r8, r8)
 8018ba4:	ffff0fff 	.word	0xffff0fff

08018ba8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b084      	sub	sp, #16
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
 8018bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	689b      	ldr	r3, [r3, #8]
 8018bb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	4a08      	ldr	r2, [pc, #32]	@ (8018bdc <TIM_ITRx_SetConfig+0x34>)
 8018bbc:	4013      	ands	r3, r2
 8018bbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8018bc0:	683a      	ldr	r2, [r7, #0]
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	4313      	orrs	r3, r2
 8018bc6:	2207      	movs	r2, #7
 8018bc8:	4313      	orrs	r3, r2
 8018bca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	68fa      	ldr	r2, [r7, #12]
 8018bd0:	609a      	str	r2, [r3, #8]
}
 8018bd2:	46c0      	nop			@ (mov r8, r8)
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	b004      	add	sp, #16
 8018bd8:	bd80      	pop	{r7, pc}
 8018bda:	46c0      	nop			@ (mov r8, r8)
 8018bdc:	ffcfff8f 	.word	0xffcfff8f

08018be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b086      	sub	sp, #24
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	60f8      	str	r0, [r7, #12]
 8018be8:	60b9      	str	r1, [r7, #8]
 8018bea:	607a      	str	r2, [r7, #4]
 8018bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	689b      	ldr	r3, [r3, #8]
 8018bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018bf4:	697b      	ldr	r3, [r7, #20]
 8018bf6:	4a09      	ldr	r2, [pc, #36]	@ (8018c1c <TIM_ETR_SetConfig+0x3c>)
 8018bf8:	4013      	ands	r3, r2
 8018bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8018bfc:	683b      	ldr	r3, [r7, #0]
 8018bfe:	021a      	lsls	r2, r3, #8
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	431a      	orrs	r2, r3
 8018c04:	68bb      	ldr	r3, [r7, #8]
 8018c06:	4313      	orrs	r3, r2
 8018c08:	697a      	ldr	r2, [r7, #20]
 8018c0a:	4313      	orrs	r3, r2
 8018c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	697a      	ldr	r2, [r7, #20]
 8018c12:	609a      	str	r2, [r3, #8]
}
 8018c14:	46c0      	nop			@ (mov r8, r8)
 8018c16:	46bd      	mov	sp, r7
 8018c18:	b006      	add	sp, #24
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	ffff00ff 	.word	0xffff00ff

08018c20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b086      	sub	sp, #24
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	60f8      	str	r0, [r7, #12]
 8018c28:	60b9      	str	r1, [r7, #8]
 8018c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8018c2c:	68bb      	ldr	r3, [r7, #8]
 8018c2e:	221f      	movs	r2, #31
 8018c30:	4013      	ands	r3, r2
 8018c32:	2201      	movs	r2, #1
 8018c34:	409a      	lsls	r2, r3
 8018c36:	0013      	movs	r3, r2
 8018c38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	6a1b      	ldr	r3, [r3, #32]
 8018c3e:	697a      	ldr	r2, [r7, #20]
 8018c40:	43d2      	mvns	r2, r2
 8018c42:	401a      	ands	r2, r3
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	6a1a      	ldr	r2, [r3, #32]
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	211f      	movs	r1, #31
 8018c50:	400b      	ands	r3, r1
 8018c52:	6879      	ldr	r1, [r7, #4]
 8018c54:	4099      	lsls	r1, r3
 8018c56:	000b      	movs	r3, r1
 8018c58:	431a      	orrs	r2, r3
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	621a      	str	r2, [r3, #32]
}
 8018c5e:	46c0      	nop			@ (mov r8, r8)
 8018c60:	46bd      	mov	sp, r7
 8018c62:	b006      	add	sp, #24
 8018c64:	bd80      	pop	{r7, pc}
	...

08018c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b084      	sub	sp, #16
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
 8018c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	223c      	movs	r2, #60	@ 0x3c
 8018c76:	5c9b      	ldrb	r3, [r3, r2]
 8018c78:	2b01      	cmp	r3, #1
 8018c7a:	d101      	bne.n	8018c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8018c7c:	2302      	movs	r3, #2
 8018c7e:	e055      	b.n	8018d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	223c      	movs	r2, #60	@ 0x3c
 8018c84:	2101      	movs	r1, #1
 8018c86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	223d      	movs	r2, #61	@ 0x3d
 8018c8c:	2102      	movs	r1, #2
 8018c8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	689b      	ldr	r3, [r3, #8]
 8018c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	4a23      	ldr	r2, [pc, #140]	@ (8018d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8018ca6:	4293      	cmp	r3, r2
 8018ca8:	d108      	bne.n	8018cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	4a22      	ldr	r2, [pc, #136]	@ (8018d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8018cae:	4013      	ands	r3, r2
 8018cb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8018cb2:	683b      	ldr	r3, [r7, #0]
 8018cb4:	685b      	ldr	r3, [r3, #4]
 8018cb6:	68fa      	ldr	r2, [r7, #12]
 8018cb8:	4313      	orrs	r3, r2
 8018cba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	2270      	movs	r2, #112	@ 0x70
 8018cc0:	4393      	bics	r3, r2
 8018cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	68fa      	ldr	r2, [r7, #12]
 8018cca:	4313      	orrs	r3, r2
 8018ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	68fa      	ldr	r2, [r7, #12]
 8018cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	4a16      	ldr	r2, [pc, #88]	@ (8018d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8018cdc:	4293      	cmp	r3, r2
 8018cde:	d00f      	beq.n	8018d00 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	681a      	ldr	r2, [r3, #0]
 8018ce4:	2380      	movs	r3, #128	@ 0x80
 8018ce6:	05db      	lsls	r3, r3, #23
 8018ce8:	429a      	cmp	r2, r3
 8018cea:	d009      	beq.n	8018d00 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	4a12      	ldr	r2, [pc, #72]	@ (8018d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d004      	beq.n	8018d00 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4a11      	ldr	r2, [pc, #68]	@ (8018d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8018cfc:	4293      	cmp	r3, r2
 8018cfe:	d10c      	bne.n	8018d1a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	2280      	movs	r2, #128	@ 0x80
 8018d04:	4393      	bics	r3, r2
 8018d06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	689b      	ldr	r3, [r3, #8]
 8018d0c:	68ba      	ldr	r2, [r7, #8]
 8018d0e:	4313      	orrs	r3, r2
 8018d10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	68ba      	ldr	r2, [r7, #8]
 8018d18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	223d      	movs	r2, #61	@ 0x3d
 8018d1e:	2101      	movs	r1, #1
 8018d20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	223c      	movs	r2, #60	@ 0x3c
 8018d26:	2100      	movs	r1, #0
 8018d28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018d2a:	2300      	movs	r3, #0
}
 8018d2c:	0018      	movs	r0, r3
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	b004      	add	sp, #16
 8018d32:	bd80      	pop	{r7, pc}
 8018d34:	40012c00 	.word	0x40012c00
 8018d38:	ff0fffff 	.word	0xff0fffff
 8018d3c:	40000400 	.word	0x40000400
 8018d40:	40014000 	.word	0x40014000

08018d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b084      	sub	sp, #16
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
 8018d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	223c      	movs	r2, #60	@ 0x3c
 8018d56:	5c9b      	ldrb	r3, [r3, r2]
 8018d58:	2b01      	cmp	r3, #1
 8018d5a:	d101      	bne.n	8018d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8018d5c:	2302      	movs	r3, #2
 8018d5e:	e06f      	b.n	8018e40 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	223c      	movs	r2, #60	@ 0x3c
 8018d64:	2101      	movs	r1, #1
 8018d66:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	22ff      	movs	r2, #255	@ 0xff
 8018d6c:	4393      	bics	r3, r2
 8018d6e:	001a      	movs	r2, r3
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	68db      	ldr	r3, [r3, #12]
 8018d74:	4313      	orrs	r3, r2
 8018d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	4a33      	ldr	r2, [pc, #204]	@ (8018e48 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8018d7c:	401a      	ands	r2, r3
 8018d7e:	683b      	ldr	r3, [r7, #0]
 8018d80:	689b      	ldr	r3, [r3, #8]
 8018d82:	4313      	orrs	r3, r2
 8018d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	4a30      	ldr	r2, [pc, #192]	@ (8018e4c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8018d8a:	401a      	ands	r2, r3
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	685b      	ldr	r3, [r3, #4]
 8018d90:	4313      	orrs	r3, r2
 8018d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	4a2e      	ldr	r2, [pc, #184]	@ (8018e50 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8018d98:	401a      	ands	r2, r3
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	4313      	orrs	r3, r2
 8018da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	4a2b      	ldr	r2, [pc, #172]	@ (8018e54 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8018da6:	401a      	ands	r2, r3
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	691b      	ldr	r3, [r3, #16]
 8018dac:	4313      	orrs	r3, r2
 8018dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	4a29      	ldr	r2, [pc, #164]	@ (8018e58 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8018db4:	401a      	ands	r2, r3
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	695b      	ldr	r3, [r3, #20]
 8018dba:	4313      	orrs	r3, r2
 8018dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	4a26      	ldr	r2, [pc, #152]	@ (8018e5c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8018dc2:	401a      	ands	r2, r3
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018dc8:	4313      	orrs	r3, r2
 8018dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	4a24      	ldr	r2, [pc, #144]	@ (8018e60 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8018dd0:	401a      	ands	r2, r3
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	699b      	ldr	r3, [r3, #24]
 8018dd6:	041b      	lsls	r3, r3, #16
 8018dd8:	4313      	orrs	r3, r2
 8018dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	4a21      	ldr	r2, [pc, #132]	@ (8018e64 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8018de0:	401a      	ands	r2, r3
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	69db      	ldr	r3, [r3, #28]
 8018de6:	4313      	orrs	r3, r2
 8018de8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	4a1e      	ldr	r2, [pc, #120]	@ (8018e68 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8018df0:	4293      	cmp	r3, r2
 8018df2:	d11c      	bne.n	8018e2e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	4a1d      	ldr	r2, [pc, #116]	@ (8018e6c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8018df8:	401a      	ands	r2, r3
 8018dfa:	683b      	ldr	r3, [r7, #0]
 8018dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018dfe:	051b      	lsls	r3, r3, #20
 8018e00:	4313      	orrs	r3, r2
 8018e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	4a1a      	ldr	r2, [pc, #104]	@ (8018e70 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8018e08:	401a      	ands	r2, r3
 8018e0a:	683b      	ldr	r3, [r7, #0]
 8018e0c:	6a1b      	ldr	r3, [r3, #32]
 8018e0e:	4313      	orrs	r3, r2
 8018e10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	4a17      	ldr	r2, [pc, #92]	@ (8018e74 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8018e16:	401a      	ands	r2, r3
 8018e18:	683b      	ldr	r3, [r7, #0]
 8018e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e1c:	4313      	orrs	r3, r2
 8018e1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	4a15      	ldr	r2, [pc, #84]	@ (8018e78 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8018e24:	401a      	ands	r2, r3
 8018e26:	683b      	ldr	r3, [r7, #0]
 8018e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e2a:	4313      	orrs	r3, r2
 8018e2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	68fa      	ldr	r2, [r7, #12]
 8018e34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	223c      	movs	r2, #60	@ 0x3c
 8018e3a:	2100      	movs	r1, #0
 8018e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018e3e:	2300      	movs	r3, #0
}
 8018e40:	0018      	movs	r0, r3
 8018e42:	46bd      	mov	sp, r7
 8018e44:	b004      	add	sp, #16
 8018e46:	bd80      	pop	{r7, pc}
 8018e48:	fffffcff 	.word	0xfffffcff
 8018e4c:	fffffbff 	.word	0xfffffbff
 8018e50:	fffff7ff 	.word	0xfffff7ff
 8018e54:	ffffefff 	.word	0xffffefff
 8018e58:	ffffdfff 	.word	0xffffdfff
 8018e5c:	ffffbfff 	.word	0xffffbfff
 8018e60:	fff0ffff 	.word	0xfff0ffff
 8018e64:	efffffff 	.word	0xefffffff
 8018e68:	40012c00 	.word	0x40012c00
 8018e6c:	ff0fffff 	.word	0xff0fffff
 8018e70:	feffffff 	.word	0xfeffffff
 8018e74:	fdffffff 	.word	0xfdffffff
 8018e78:	dfffffff 	.word	0xdfffffff

08018e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d101      	bne.n	8018e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018e8a:	2301      	movs	r3, #1
 8018e8c:	e046      	b.n	8018f1c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2288      	movs	r2, #136	@ 0x88
 8018e92:	589b      	ldr	r3, [r3, r2]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d107      	bne.n	8018ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2284      	movs	r2, #132	@ 0x84
 8018e9c:	2100      	movs	r1, #0
 8018e9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	0018      	movs	r0, r3
 8018ea4:	f7f3 fb76 	bl	800c594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2288      	movs	r2, #136	@ 0x88
 8018eac:	2124      	movs	r1, #36	@ 0x24
 8018eae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	681a      	ldr	r2, [r3, #0]
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	2101      	movs	r1, #1
 8018ebc:	438a      	bics	r2, r1
 8018ebe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d003      	beq.n	8018ed0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	0018      	movs	r0, r3
 8018ecc:	f000 ff6a 	bl	8019da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	0018      	movs	r0, r3
 8018ed4:	f000 fd94 	bl	8019a00 <UART_SetConfig>
 8018ed8:	0003      	movs	r3, r0
 8018eda:	2b01      	cmp	r3, #1
 8018edc:	d101      	bne.n	8018ee2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8018ede:	2301      	movs	r3, #1
 8018ee0:	e01c      	b.n	8018f1c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	685a      	ldr	r2, [r3, #4]
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	490d      	ldr	r1, [pc, #52]	@ (8018f24 <HAL_UART_Init+0xa8>)
 8018eee:	400a      	ands	r2, r1
 8018ef0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	689a      	ldr	r2, [r3, #8]
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	212a      	movs	r1, #42	@ 0x2a
 8018efe:	438a      	bics	r2, r1
 8018f00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	681a      	ldr	r2, [r3, #0]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	2101      	movs	r1, #1
 8018f0e:	430a      	orrs	r2, r1
 8018f10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	0018      	movs	r0, r3
 8018f16:	f000 fff9 	bl	8019f0c <UART_CheckIdleState>
 8018f1a:	0003      	movs	r3, r0
}
 8018f1c:	0018      	movs	r0, r3
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	b002      	add	sp, #8
 8018f22:	bd80      	pop	{r7, pc}
 8018f24:	ffffb7ff 	.word	0xffffb7ff

08018f28 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b082      	sub	sp, #8
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d101      	bne.n	8018f3a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8018f36:	2301      	movs	r3, #1
 8018f38:	e032      	b.n	8018fa0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	2288      	movs	r2, #136	@ 0x88
 8018f3e:	2124      	movs	r1, #36	@ 0x24
 8018f40:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	681a      	ldr	r2, [r3, #0]
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2101      	movs	r1, #1
 8018f4e:	438a      	bics	r2, r1
 8018f50:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	2200      	movs	r2, #0
 8018f58:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2200      	movs	r2, #0
 8018f60:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	2200      	movs	r2, #0
 8018f68:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	0018      	movs	r0, r3
 8018f6e:	f7f3 fc7f 	bl	800c870 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	2290      	movs	r2, #144	@ 0x90
 8018f76:	2100      	movs	r1, #0
 8018f78:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2288      	movs	r2, #136	@ 0x88
 8018f7e:	2100      	movs	r1, #0
 8018f80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	228c      	movs	r2, #140	@ 0x8c
 8018f86:	2100      	movs	r1, #0
 8018f88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2200      	movs	r2, #0
 8018f94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	2284      	movs	r2, #132	@ 0x84
 8018f9a:	2100      	movs	r1, #0
 8018f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018f9e:	2300      	movs	r3, #0
}
 8018fa0:	0018      	movs	r0, r3
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	b002      	add	sp, #8
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b088      	sub	sp, #32
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	60b9      	str	r1, [r7, #8]
 8018fb2:	1dbb      	adds	r3, r7, #6
 8018fb4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	2288      	movs	r2, #136	@ 0x88
 8018fba:	589b      	ldr	r3, [r3, r2]
 8018fbc:	2b20      	cmp	r3, #32
 8018fbe:	d000      	beq.n	8018fc2 <HAL_UART_Transmit_DMA+0x1a>
 8018fc0:	e079      	b.n	80190b6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d003      	beq.n	8018fd0 <HAL_UART_Transmit_DMA+0x28>
 8018fc8:	1dbb      	adds	r3, r7, #6
 8018fca:	881b      	ldrh	r3, [r3, #0]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d101      	bne.n	8018fd4 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	e071      	b.n	80190b8 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	689a      	ldr	r2, [r3, #8]
 8018fd8:	2380      	movs	r3, #128	@ 0x80
 8018fda:	015b      	lsls	r3, r3, #5
 8018fdc:	429a      	cmp	r2, r3
 8018fde:	d109      	bne.n	8018ff4 <HAL_UART_Transmit_DMA+0x4c>
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	691b      	ldr	r3, [r3, #16]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d105      	bne.n	8018ff4 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	2201      	movs	r2, #1
 8018fec:	4013      	ands	r3, r2
 8018fee:	d001      	beq.n	8018ff4 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	e061      	b.n	80190b8 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	68ba      	ldr	r2, [r7, #8]
 8018ff8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	1dba      	adds	r2, r7, #6
 8018ffe:	2154      	movs	r1, #84	@ 0x54
 8019000:	8812      	ldrh	r2, [r2, #0]
 8019002:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	1dba      	adds	r2, r7, #6
 8019008:	2156      	movs	r1, #86	@ 0x56
 801900a:	8812      	ldrh	r2, [r2, #0]
 801900c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	2290      	movs	r2, #144	@ 0x90
 8019012:	2100      	movs	r1, #0
 8019014:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	2288      	movs	r2, #136	@ 0x88
 801901a:	2121      	movs	r1, #33	@ 0x21
 801901c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019022:	2b00      	cmp	r3, #0
 8019024:	d028      	beq.n	8019078 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801902a:	4a25      	ldr	r2, [pc, #148]	@ (80190c0 <HAL_UART_Transmit_DMA+0x118>)
 801902c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019032:	4a24      	ldr	r2, [pc, #144]	@ (80190c4 <HAL_UART_Transmit_DMA+0x11c>)
 8019034:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801903a:	4a23      	ldr	r2, [pc, #140]	@ (80190c8 <HAL_UART_Transmit_DMA+0x120>)
 801903c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019042:	2200      	movs	r2, #0
 8019044:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801904e:	0019      	movs	r1, r3
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	3328      	adds	r3, #40	@ 0x28
 8019056:	001a      	movs	r2, r3
 8019058:	1dbb      	adds	r3, r7, #6
 801905a:	881b      	ldrh	r3, [r3, #0]
 801905c:	f7f9 fa84 	bl	8012568 <HAL_DMA_Start_IT>
 8019060:	1e03      	subs	r3, r0, #0
 8019062:	d009      	beq.n	8019078 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	2290      	movs	r2, #144	@ 0x90
 8019068:	2110      	movs	r1, #16
 801906a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	2288      	movs	r2, #136	@ 0x88
 8019070:	2120      	movs	r1, #32
 8019072:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8019074:	2301      	movs	r3, #1
 8019076:	e01f      	b.n	80190b8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	2240      	movs	r2, #64	@ 0x40
 801907e:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019080:	f3ef 8310 	mrs	r3, PRIMASK
 8019084:	613b      	str	r3, [r7, #16]
  return(result);
 8019086:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019088:	61fb      	str	r3, [r7, #28]
 801908a:	2301      	movs	r3, #1
 801908c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801908e:	697b      	ldr	r3, [r7, #20]
 8019090:	f383 8810 	msr	PRIMASK, r3
}
 8019094:	46c0      	nop			@ (mov r8, r8)
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	689a      	ldr	r2, [r3, #8]
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	2180      	movs	r1, #128	@ 0x80
 80190a2:	430a      	orrs	r2, r1
 80190a4:	609a      	str	r2, [r3, #8]
 80190a6:	69fb      	ldr	r3, [r7, #28]
 80190a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190aa:	69bb      	ldr	r3, [r7, #24]
 80190ac:	f383 8810 	msr	PRIMASK, r3
}
 80190b0:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80190b2:	2300      	movs	r3, #0
 80190b4:	e000      	b.n	80190b8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80190b6:	2302      	movs	r3, #2
  }
}
 80190b8:	0018      	movs	r0, r3
 80190ba:	46bd      	mov	sp, r7
 80190bc:	b008      	add	sp, #32
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	0801a3d9 	.word	0x0801a3d9
 80190c4:	0801a471 	.word	0x0801a471
 80190c8:	0801a603 	.word	0x0801a603

080190cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b088      	sub	sp, #32
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	60b9      	str	r1, [r7, #8]
 80190d6:	1dbb      	adds	r3, r7, #6
 80190d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	228c      	movs	r2, #140	@ 0x8c
 80190de:	589b      	ldr	r3, [r3, r2]
 80190e0:	2b20      	cmp	r3, #32
 80190e2:	d154      	bne.n	801918e <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d003      	beq.n	80190f2 <HAL_UART_Receive_DMA+0x26>
 80190ea:	1dbb      	adds	r3, r7, #6
 80190ec:	881b      	ldrh	r3, [r3, #0]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d101      	bne.n	80190f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80190f2:	2301      	movs	r3, #1
 80190f4:	e04c      	b.n	8019190 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	689a      	ldr	r2, [r3, #8]
 80190fa:	2380      	movs	r3, #128	@ 0x80
 80190fc:	015b      	lsls	r3, r3, #5
 80190fe:	429a      	cmp	r2, r3
 8019100:	d109      	bne.n	8019116 <HAL_UART_Receive_DMA+0x4a>
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	691b      	ldr	r3, [r3, #16]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d105      	bne.n	8019116 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801910a:	68bb      	ldr	r3, [r7, #8]
 801910c:	2201      	movs	r2, #1
 801910e:	4013      	ands	r3, r2
 8019110:	d001      	beq.n	8019116 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019112:	2301      	movs	r3, #1
 8019114:	e03c      	b.n	8019190 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	2200      	movs	r2, #0
 801911a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	4a1d      	ldr	r2, [pc, #116]	@ (8019198 <HAL_UART_Receive_DMA+0xcc>)
 8019122:	4293      	cmp	r3, r2
 8019124:	d02a      	beq.n	801917c <HAL_UART_Receive_DMA+0xb0>
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	4a1c      	ldr	r2, [pc, #112]	@ (801919c <HAL_UART_Receive_DMA+0xd0>)
 801912c:	4293      	cmp	r3, r2
 801912e:	d025      	beq.n	801917c <HAL_UART_Receive_DMA+0xb0>
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	4a1a      	ldr	r2, [pc, #104]	@ (80191a0 <HAL_UART_Receive_DMA+0xd4>)
 8019136:	4293      	cmp	r3, r2
 8019138:	d020      	beq.n	801917c <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	685a      	ldr	r2, [r3, #4]
 8019140:	2380      	movs	r3, #128	@ 0x80
 8019142:	041b      	lsls	r3, r3, #16
 8019144:	4013      	ands	r3, r2
 8019146:	d019      	beq.n	801917c <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019148:	f3ef 8310 	mrs	r3, PRIMASK
 801914c:	613b      	str	r3, [r7, #16]
  return(result);
 801914e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019150:	61fb      	str	r3, [r7, #28]
 8019152:	2301      	movs	r3, #1
 8019154:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	f383 8810 	msr	PRIMASK, r3
}
 801915c:	46c0      	nop			@ (mov r8, r8)
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	681a      	ldr	r2, [r3, #0]
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	2180      	movs	r1, #128	@ 0x80
 801916a:	04c9      	lsls	r1, r1, #19
 801916c:	430a      	orrs	r2, r1
 801916e:	601a      	str	r2, [r3, #0]
 8019170:	69fb      	ldr	r3, [r7, #28]
 8019172:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019174:	69bb      	ldr	r3, [r7, #24]
 8019176:	f383 8810 	msr	PRIMASK, r3
}
 801917a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801917c:	1dbb      	adds	r3, r7, #6
 801917e:	881a      	ldrh	r2, [r3, #0]
 8019180:	68b9      	ldr	r1, [r7, #8]
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	0018      	movs	r0, r3
 8019186:	f000 ffdb 	bl	801a140 <UART_Start_Receive_DMA>
 801918a:	0003      	movs	r3, r0
 801918c:	e000      	b.n	8019190 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 801918e:	2302      	movs	r3, #2
  }
}
 8019190:	0018      	movs	r0, r3
 8019192:	46bd      	mov	sp, r7
 8019194:	b008      	add	sp, #32
 8019196:	bd80      	pop	{r7, pc}
 8019198:	40008000 	.word	0x40008000
 801919c:	40008400 	.word	0x40008400
 80191a0:	40008c00 	.word	0x40008c00

080191a4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b092      	sub	sp, #72	@ 0x48
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80191ac:	f3ef 8310 	mrs	r3, PRIMASK
 80191b0:	623b      	str	r3, [r7, #32]
  return(result);
 80191b2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80191b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80191b6:	2301      	movs	r3, #1
 80191b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191bc:	f383 8810 	msr	PRIMASK, r3
}
 80191c0:	46c0      	nop			@ (mov r8, r8)
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	681a      	ldr	r2, [r3, #0]
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	494d      	ldr	r1, [pc, #308]	@ (8019304 <HAL_UART_AbortReceive+0x160>)
 80191ce:	400a      	ands	r2, r1
 80191d0:	601a      	str	r2, [r3, #0]
 80191d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80191d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191d8:	f383 8810 	msr	PRIMASK, r3
}
 80191dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80191de:	f3ef 8310 	mrs	r3, PRIMASK
 80191e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80191e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80191e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80191e8:	2301      	movs	r3, #1
 80191ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191ee:	f383 8810 	msr	PRIMASK, r3
}
 80191f2:	46c0      	nop			@ (mov r8, r8)
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	689a      	ldr	r2, [r3, #8]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	4942      	ldr	r1, [pc, #264]	@ (8019308 <HAL_UART_AbortReceive+0x164>)
 8019200:	400a      	ands	r2, r1
 8019202:	609a      	str	r2, [r3, #8]
 8019204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019206:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801920a:	f383 8810 	msr	PRIMASK, r3
}
 801920e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019214:	2b01      	cmp	r3, #1
 8019216:	d118      	bne.n	801924a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019218:	f3ef 8310 	mrs	r3, PRIMASK
 801921c:	617b      	str	r3, [r7, #20]
  return(result);
 801921e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8019220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019222:	2301      	movs	r3, #1
 8019224:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019226:	69bb      	ldr	r3, [r7, #24]
 8019228:	f383 8810 	msr	PRIMASK, r3
}
 801922c:	46c0      	nop			@ (mov r8, r8)
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	681a      	ldr	r2, [r3, #0]
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2110      	movs	r1, #16
 801923a:	438a      	bics	r2, r1
 801923c:	601a      	str	r2, [r3, #0]
 801923e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019240:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019242:	69fb      	ldr	r3, [r7, #28]
 8019244:	f383 8810 	msr	PRIMASK, r3
}
 8019248:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	689b      	ldr	r3, [r3, #8]
 8019250:	2240      	movs	r2, #64	@ 0x40
 8019252:	4013      	ands	r3, r2
 8019254:	2b40      	cmp	r3, #64	@ 0x40
 8019256:	d139      	bne.n	80192cc <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019258:	f3ef 8310 	mrs	r3, PRIMASK
 801925c:	60bb      	str	r3, [r7, #8]
  return(result);
 801925e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019262:	2301      	movs	r3, #1
 8019264:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	f383 8810 	msr	PRIMASK, r3
}
 801926c:	46c0      	nop			@ (mov r8, r8)
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	689a      	ldr	r2, [r3, #8]
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	2140      	movs	r1, #64	@ 0x40
 801927a:	438a      	bics	r2, r1
 801927c:	609a      	str	r2, [r3, #8]
 801927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019282:	693b      	ldr	r3, [r7, #16]
 8019284:	f383 8810 	msr	PRIMASK, r3
}
 8019288:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	2280      	movs	r2, #128	@ 0x80
 801928e:	589b      	ldr	r3, [r3, r2]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d01b      	beq.n	80192cc <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	2280      	movs	r2, #128	@ 0x80
 8019298:	589b      	ldr	r3, [r3, r2]
 801929a:	2200      	movs	r2, #0
 801929c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	2280      	movs	r2, #128	@ 0x80
 80192a2:	589b      	ldr	r3, [r3, r2]
 80192a4:	0018      	movs	r0, r3
 80192a6:	f7f9 f9e5 	bl	8012674 <HAL_DMA_Abort>
 80192aa:	1e03      	subs	r3, r0, #0
 80192ac:	d00e      	beq.n	80192cc <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	2280      	movs	r2, #128	@ 0x80
 80192b2:	589b      	ldr	r3, [r3, r2]
 80192b4:	0018      	movs	r0, r3
 80192b6:	f7f9 fb75 	bl	80129a4 <HAL_DMA_GetError>
 80192ba:	0003      	movs	r3, r0
 80192bc:	2b20      	cmp	r3, #32
 80192be:	d105      	bne.n	80192cc <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	2290      	movs	r2, #144	@ 0x90
 80192c4:	2110      	movs	r1, #16
 80192c6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80192c8:	2303      	movs	r3, #3
 80192ca:	e017      	b.n	80192fc <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	225e      	movs	r2, #94	@ 0x5e
 80192d0:	2100      	movs	r1, #0
 80192d2:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	220f      	movs	r2, #15
 80192da:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	699a      	ldr	r2, [r3, #24]
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	2108      	movs	r1, #8
 80192e8:	430a      	orrs	r2, r1
 80192ea:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	228c      	movs	r2, #140	@ 0x8c
 80192f0:	2120      	movs	r1, #32
 80192f2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2200      	movs	r2, #0
 80192f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80192fa:	2300      	movs	r3, #0
}
 80192fc:	0018      	movs	r0, r3
 80192fe:	46bd      	mov	sp, r7
 8019300:	b012      	add	sp, #72	@ 0x48
 8019302:	bd80      	pop	{r7, pc}
 8019304:	fffffedf 	.word	0xfffffedf
 8019308:	effffffe 	.word	0xeffffffe

0801930c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801930c:	b5b0      	push	{r4, r5, r7, lr}
 801930e:	b0aa      	sub	sp, #168	@ 0xa8
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	69db      	ldr	r3, [r3, #28]
 801931a:	22a4      	movs	r2, #164	@ 0xa4
 801931c:	18b9      	adds	r1, r7, r2
 801931e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	20a0      	movs	r0, #160	@ 0xa0
 8019328:	1839      	adds	r1, r7, r0
 801932a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	689b      	ldr	r3, [r3, #8]
 8019332:	249c      	movs	r4, #156	@ 0x9c
 8019334:	1939      	adds	r1, r7, r4
 8019336:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019338:	0011      	movs	r1, r2
 801933a:	18bb      	adds	r3, r7, r2
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	4aa2      	ldr	r2, [pc, #648]	@ (80195c8 <HAL_UART_IRQHandler+0x2bc>)
 8019340:	4013      	ands	r3, r2
 8019342:	2298      	movs	r2, #152	@ 0x98
 8019344:	18bd      	adds	r5, r7, r2
 8019346:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8019348:	18bb      	adds	r3, r7, r2
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d11a      	bne.n	8019386 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019350:	187b      	adds	r3, r7, r1
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	2220      	movs	r2, #32
 8019356:	4013      	ands	r3, r2
 8019358:	d015      	beq.n	8019386 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801935a:	183b      	adds	r3, r7, r0
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	2220      	movs	r2, #32
 8019360:	4013      	ands	r3, r2
 8019362:	d105      	bne.n	8019370 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019364:	193b      	adds	r3, r7, r4
 8019366:	681a      	ldr	r2, [r3, #0]
 8019368:	2380      	movs	r3, #128	@ 0x80
 801936a:	055b      	lsls	r3, r3, #21
 801936c:	4013      	ands	r3, r2
 801936e:	d00a      	beq.n	8019386 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019374:	2b00      	cmp	r3, #0
 8019376:	d100      	bne.n	801937a <HAL_UART_IRQHandler+0x6e>
 8019378:	e2fb      	b.n	8019972 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801937e:	687a      	ldr	r2, [r7, #4]
 8019380:	0010      	movs	r0, r2
 8019382:	4798      	blx	r3
      }
      return;
 8019384:	e2f5      	b.n	8019972 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019386:	2398      	movs	r3, #152	@ 0x98
 8019388:	18fb      	adds	r3, r7, r3
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d100      	bne.n	8019392 <HAL_UART_IRQHandler+0x86>
 8019390:	e122      	b.n	80195d8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8019392:	239c      	movs	r3, #156	@ 0x9c
 8019394:	18fb      	adds	r3, r7, r3
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	4a8c      	ldr	r2, [pc, #560]	@ (80195cc <HAL_UART_IRQHandler+0x2c0>)
 801939a:	4013      	ands	r3, r2
 801939c:	d106      	bne.n	80193ac <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801939e:	23a0      	movs	r3, #160	@ 0xa0
 80193a0:	18fb      	adds	r3, r7, r3
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	4a8a      	ldr	r2, [pc, #552]	@ (80195d0 <HAL_UART_IRQHandler+0x2c4>)
 80193a6:	4013      	ands	r3, r2
 80193a8:	d100      	bne.n	80193ac <HAL_UART_IRQHandler+0xa0>
 80193aa:	e115      	b.n	80195d8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80193ac:	23a4      	movs	r3, #164	@ 0xa4
 80193ae:	18fb      	adds	r3, r7, r3
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	2201      	movs	r2, #1
 80193b4:	4013      	ands	r3, r2
 80193b6:	d012      	beq.n	80193de <HAL_UART_IRQHandler+0xd2>
 80193b8:	23a0      	movs	r3, #160	@ 0xa0
 80193ba:	18fb      	adds	r3, r7, r3
 80193bc:	681a      	ldr	r2, [r3, #0]
 80193be:	2380      	movs	r3, #128	@ 0x80
 80193c0:	005b      	lsls	r3, r3, #1
 80193c2:	4013      	ands	r3, r2
 80193c4:	d00b      	beq.n	80193de <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	2201      	movs	r2, #1
 80193cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	2290      	movs	r2, #144	@ 0x90
 80193d2:	589b      	ldr	r3, [r3, r2]
 80193d4:	2201      	movs	r2, #1
 80193d6:	431a      	orrs	r2, r3
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	2190      	movs	r1, #144	@ 0x90
 80193dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80193de:	23a4      	movs	r3, #164	@ 0xa4
 80193e0:	18fb      	adds	r3, r7, r3
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	2202      	movs	r2, #2
 80193e6:	4013      	ands	r3, r2
 80193e8:	d011      	beq.n	801940e <HAL_UART_IRQHandler+0x102>
 80193ea:	239c      	movs	r3, #156	@ 0x9c
 80193ec:	18fb      	adds	r3, r7, r3
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	2201      	movs	r2, #1
 80193f2:	4013      	ands	r3, r2
 80193f4:	d00b      	beq.n	801940e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	2202      	movs	r2, #2
 80193fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	2290      	movs	r2, #144	@ 0x90
 8019402:	589b      	ldr	r3, [r3, r2]
 8019404:	2204      	movs	r2, #4
 8019406:	431a      	orrs	r2, r3
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2190      	movs	r1, #144	@ 0x90
 801940c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801940e:	23a4      	movs	r3, #164	@ 0xa4
 8019410:	18fb      	adds	r3, r7, r3
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	2204      	movs	r2, #4
 8019416:	4013      	ands	r3, r2
 8019418:	d011      	beq.n	801943e <HAL_UART_IRQHandler+0x132>
 801941a:	239c      	movs	r3, #156	@ 0x9c
 801941c:	18fb      	adds	r3, r7, r3
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	2201      	movs	r2, #1
 8019422:	4013      	ands	r3, r2
 8019424:	d00b      	beq.n	801943e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	2204      	movs	r2, #4
 801942c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	2290      	movs	r2, #144	@ 0x90
 8019432:	589b      	ldr	r3, [r3, r2]
 8019434:	2202      	movs	r2, #2
 8019436:	431a      	orrs	r2, r3
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2190      	movs	r1, #144	@ 0x90
 801943c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801943e:	23a4      	movs	r3, #164	@ 0xa4
 8019440:	18fb      	adds	r3, r7, r3
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	2208      	movs	r2, #8
 8019446:	4013      	ands	r3, r2
 8019448:	d017      	beq.n	801947a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801944a:	23a0      	movs	r3, #160	@ 0xa0
 801944c:	18fb      	adds	r3, r7, r3
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	2220      	movs	r2, #32
 8019452:	4013      	ands	r3, r2
 8019454:	d105      	bne.n	8019462 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8019456:	239c      	movs	r3, #156	@ 0x9c
 8019458:	18fb      	adds	r3, r7, r3
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	4a5b      	ldr	r2, [pc, #364]	@ (80195cc <HAL_UART_IRQHandler+0x2c0>)
 801945e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8019460:	d00b      	beq.n	801947a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	2208      	movs	r2, #8
 8019468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	2290      	movs	r2, #144	@ 0x90
 801946e:	589b      	ldr	r3, [r3, r2]
 8019470:	2208      	movs	r2, #8
 8019472:	431a      	orrs	r2, r3
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2190      	movs	r1, #144	@ 0x90
 8019478:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801947a:	23a4      	movs	r3, #164	@ 0xa4
 801947c:	18fb      	adds	r3, r7, r3
 801947e:	681a      	ldr	r2, [r3, #0]
 8019480:	2380      	movs	r3, #128	@ 0x80
 8019482:	011b      	lsls	r3, r3, #4
 8019484:	4013      	ands	r3, r2
 8019486:	d013      	beq.n	80194b0 <HAL_UART_IRQHandler+0x1a4>
 8019488:	23a0      	movs	r3, #160	@ 0xa0
 801948a:	18fb      	adds	r3, r7, r3
 801948c:	681a      	ldr	r2, [r3, #0]
 801948e:	2380      	movs	r3, #128	@ 0x80
 8019490:	04db      	lsls	r3, r3, #19
 8019492:	4013      	ands	r3, r2
 8019494:	d00c      	beq.n	80194b0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	2280      	movs	r2, #128	@ 0x80
 801949c:	0112      	lsls	r2, r2, #4
 801949e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2290      	movs	r2, #144	@ 0x90
 80194a4:	589b      	ldr	r3, [r3, r2]
 80194a6:	2220      	movs	r2, #32
 80194a8:	431a      	orrs	r2, r3
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	2190      	movs	r1, #144	@ 0x90
 80194ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2290      	movs	r2, #144	@ 0x90
 80194b4:	589b      	ldr	r3, [r3, r2]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d100      	bne.n	80194bc <HAL_UART_IRQHandler+0x1b0>
 80194ba:	e25c      	b.n	8019976 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80194bc:	23a4      	movs	r3, #164	@ 0xa4
 80194be:	18fb      	adds	r3, r7, r3
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	2220      	movs	r2, #32
 80194c4:	4013      	ands	r3, r2
 80194c6:	d015      	beq.n	80194f4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80194c8:	23a0      	movs	r3, #160	@ 0xa0
 80194ca:	18fb      	adds	r3, r7, r3
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	2220      	movs	r2, #32
 80194d0:	4013      	ands	r3, r2
 80194d2:	d106      	bne.n	80194e2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80194d4:	239c      	movs	r3, #156	@ 0x9c
 80194d6:	18fb      	adds	r3, r7, r3
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	2380      	movs	r3, #128	@ 0x80
 80194dc:	055b      	lsls	r3, r3, #21
 80194de:	4013      	ands	r3, r2
 80194e0:	d008      	beq.n	80194f4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d004      	beq.n	80194f4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80194ee:	687a      	ldr	r2, [r7, #4]
 80194f0:	0010      	movs	r0, r2
 80194f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2290      	movs	r2, #144	@ 0x90
 80194f8:	589b      	ldr	r3, [r3, r2]
 80194fa:	2194      	movs	r1, #148	@ 0x94
 80194fc:	187a      	adds	r2, r7, r1
 80194fe:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	689b      	ldr	r3, [r3, #8]
 8019506:	2240      	movs	r2, #64	@ 0x40
 8019508:	4013      	ands	r3, r2
 801950a:	2b40      	cmp	r3, #64	@ 0x40
 801950c:	d004      	beq.n	8019518 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801950e:	187b      	adds	r3, r7, r1
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	2228      	movs	r2, #40	@ 0x28
 8019514:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019516:	d04c      	beq.n	80195b2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	0018      	movs	r0, r3
 801951c:	f000 fef6 	bl	801a30c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	689b      	ldr	r3, [r3, #8]
 8019526:	2240      	movs	r2, #64	@ 0x40
 8019528:	4013      	ands	r3, r2
 801952a:	2b40      	cmp	r3, #64	@ 0x40
 801952c:	d13c      	bne.n	80195a8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801952e:	f3ef 8310 	mrs	r3, PRIMASK
 8019532:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8019534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019536:	2090      	movs	r0, #144	@ 0x90
 8019538:	183a      	adds	r2, r7, r0
 801953a:	6013      	str	r3, [r2, #0]
 801953c:	2301      	movs	r3, #1
 801953e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019540:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019542:	f383 8810 	msr	PRIMASK, r3
}
 8019546:	46c0      	nop			@ (mov r8, r8)
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	689a      	ldr	r2, [r3, #8]
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	2140      	movs	r1, #64	@ 0x40
 8019554:	438a      	bics	r2, r1
 8019556:	609a      	str	r2, [r3, #8]
 8019558:	183b      	adds	r3, r7, r0
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801955e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019560:	f383 8810 	msr	PRIMASK, r3
}
 8019564:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2280      	movs	r2, #128	@ 0x80
 801956a:	589b      	ldr	r3, [r3, r2]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d016      	beq.n	801959e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	2280      	movs	r2, #128	@ 0x80
 8019574:	589b      	ldr	r3, [r3, r2]
 8019576:	4a17      	ldr	r2, [pc, #92]	@ (80195d4 <HAL_UART_IRQHandler+0x2c8>)
 8019578:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2280      	movs	r2, #128	@ 0x80
 801957e:	589b      	ldr	r3, [r3, r2]
 8019580:	0018      	movs	r0, r3
 8019582:	f7f9 f8d7 	bl	8012734 <HAL_DMA_Abort_IT>
 8019586:	1e03      	subs	r3, r0, #0
 8019588:	d01c      	beq.n	80195c4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	2280      	movs	r2, #128	@ 0x80
 801958e:	589b      	ldr	r3, [r3, r2]
 8019590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019592:	687a      	ldr	r2, [r7, #4]
 8019594:	2180      	movs	r1, #128	@ 0x80
 8019596:	5852      	ldr	r2, [r2, r1]
 8019598:	0010      	movs	r0, r2
 801959a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801959c:	e012      	b.n	80195c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	0018      	movs	r0, r3
 80195a2:	f000 fa19 	bl	80199d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80195a6:	e00d      	b.n	80195c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	0018      	movs	r0, r3
 80195ac:	f000 fa14 	bl	80199d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80195b0:	e008      	b.n	80195c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	0018      	movs	r0, r3
 80195b6:	f000 fa0f 	bl	80199d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2290      	movs	r2, #144	@ 0x90
 80195be:	2100      	movs	r1, #0
 80195c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80195c2:	e1d8      	b.n	8019976 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80195c4:	46c0      	nop			@ (mov r8, r8)
    return;
 80195c6:	e1d6      	b.n	8019976 <HAL_UART_IRQHandler+0x66a>
 80195c8:	0000080f 	.word	0x0000080f
 80195cc:	10000001 	.word	0x10000001
 80195d0:	04000120 	.word	0x04000120
 80195d4:	0801a689 	.word	0x0801a689

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80195dc:	2b01      	cmp	r3, #1
 80195de:	d000      	beq.n	80195e2 <HAL_UART_IRQHandler+0x2d6>
 80195e0:	e15d      	b.n	801989e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80195e2:	23a4      	movs	r3, #164	@ 0xa4
 80195e4:	18fb      	adds	r3, r7, r3
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	2210      	movs	r2, #16
 80195ea:	4013      	ands	r3, r2
 80195ec:	d100      	bne.n	80195f0 <HAL_UART_IRQHandler+0x2e4>
 80195ee:	e156      	b.n	801989e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80195f0:	23a0      	movs	r3, #160	@ 0xa0
 80195f2:	18fb      	adds	r3, r7, r3
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	2210      	movs	r2, #16
 80195f8:	4013      	ands	r3, r2
 80195fa:	d100      	bne.n	80195fe <HAL_UART_IRQHandler+0x2f2>
 80195fc:	e14f      	b.n	801989e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	2210      	movs	r2, #16
 8019604:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	689b      	ldr	r3, [r3, #8]
 801960c:	2240      	movs	r2, #64	@ 0x40
 801960e:	4013      	ands	r3, r2
 8019610:	2b40      	cmp	r3, #64	@ 0x40
 8019612:	d000      	beq.n	8019616 <HAL_UART_IRQHandler+0x30a>
 8019614:	e0c3      	b.n	801979e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	2280      	movs	r2, #128	@ 0x80
 801961a:	589b      	ldr	r3, [r3, r2]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	685a      	ldr	r2, [r3, #4]
 8019620:	217e      	movs	r1, #126	@ 0x7e
 8019622:	187b      	adds	r3, r7, r1
 8019624:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8019626:	187b      	adds	r3, r7, r1
 8019628:	881b      	ldrh	r3, [r3, #0]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d100      	bne.n	8019630 <HAL_UART_IRQHandler+0x324>
 801962e:	e097      	b.n	8019760 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	225c      	movs	r2, #92	@ 0x5c
 8019634:	5a9b      	ldrh	r3, [r3, r2]
 8019636:	187a      	adds	r2, r7, r1
 8019638:	8812      	ldrh	r2, [r2, #0]
 801963a:	429a      	cmp	r2, r3
 801963c:	d300      	bcc.n	8019640 <HAL_UART_IRQHandler+0x334>
 801963e:	e08f      	b.n	8019760 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	187a      	adds	r2, r7, r1
 8019644:	215e      	movs	r1, #94	@ 0x5e
 8019646:	8812      	ldrh	r2, [r2, #0]
 8019648:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	2280      	movs	r2, #128	@ 0x80
 801964e:	589b      	ldr	r3, [r3, r2]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	2220      	movs	r2, #32
 8019656:	4013      	ands	r3, r2
 8019658:	d170      	bne.n	801973c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801965a:	f3ef 8310 	mrs	r3, PRIMASK
 801965e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019662:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019664:	2301      	movs	r3, #1
 8019666:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801966a:	f383 8810 	msr	PRIMASK, r3
}
 801966e:	46c0      	nop			@ (mov r8, r8)
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	681a      	ldr	r2, [r3, #0]
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	49c4      	ldr	r1, [pc, #784]	@ (801998c <HAL_UART_IRQHandler+0x680>)
 801967c:	400a      	ands	r2, r1
 801967e:	601a      	str	r2, [r3, #0]
 8019680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019682:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019686:	f383 8810 	msr	PRIMASK, r3
}
 801968a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801968c:	f3ef 8310 	mrs	r3, PRIMASK
 8019690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8019692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019694:	677b      	str	r3, [r7, #116]	@ 0x74
 8019696:	2301      	movs	r3, #1
 8019698:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801969a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801969c:	f383 8810 	msr	PRIMASK, r3
}
 80196a0:	46c0      	nop			@ (mov r8, r8)
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	689a      	ldr	r2, [r3, #8]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	2101      	movs	r1, #1
 80196ae:	438a      	bics	r2, r1
 80196b0:	609a      	str	r2, [r3, #8]
 80196b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80196b4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196b8:	f383 8810 	msr	PRIMASK, r3
}
 80196bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80196be:	f3ef 8310 	mrs	r3, PRIMASK
 80196c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80196c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80196c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80196c8:	2301      	movs	r3, #1
 80196ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196ce:	f383 8810 	msr	PRIMASK, r3
}
 80196d2:	46c0      	nop			@ (mov r8, r8)
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	689a      	ldr	r2, [r3, #8]
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	2140      	movs	r1, #64	@ 0x40
 80196e0:	438a      	bics	r2, r1
 80196e2:	609a      	str	r2, [r3, #8]
 80196e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80196e6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80196ea:	f383 8810 	msr	PRIMASK, r3
}
 80196ee:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	228c      	movs	r2, #140	@ 0x8c
 80196f4:	2120      	movs	r1, #32
 80196f6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2200      	movs	r2, #0
 80196fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80196fe:	f3ef 8310 	mrs	r3, PRIMASK
 8019702:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8019704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019708:	2301      	movs	r3, #1
 801970a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801970c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801970e:	f383 8810 	msr	PRIMASK, r3
}
 8019712:	46c0      	nop			@ (mov r8, r8)
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	681a      	ldr	r2, [r3, #0]
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	2110      	movs	r1, #16
 8019720:	438a      	bics	r2, r1
 8019722:	601a      	str	r2, [r3, #0]
 8019724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019726:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801972a:	f383 8810 	msr	PRIMASK, r3
}
 801972e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	2280      	movs	r2, #128	@ 0x80
 8019734:	589b      	ldr	r3, [r3, r2]
 8019736:	0018      	movs	r0, r3
 8019738:	f7f8 ff9c 	bl	8012674 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	2202      	movs	r2, #2
 8019740:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	225c      	movs	r2, #92	@ 0x5c
 8019746:	5a9a      	ldrh	r2, [r3, r2]
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	215e      	movs	r1, #94	@ 0x5e
 801974c:	5a5b      	ldrh	r3, [r3, r1]
 801974e:	b29b      	uxth	r3, r3
 8019750:	1ad3      	subs	r3, r2, r3
 8019752:	b29a      	uxth	r2, r3
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	0011      	movs	r1, r2
 8019758:	0018      	movs	r0, r3
 801975a:	f000 f945 	bl	80199e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801975e:	e10c      	b.n	801997a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	225c      	movs	r2, #92	@ 0x5c
 8019764:	5a9b      	ldrh	r3, [r3, r2]
 8019766:	227e      	movs	r2, #126	@ 0x7e
 8019768:	18ba      	adds	r2, r7, r2
 801976a:	8812      	ldrh	r2, [r2, #0]
 801976c:	429a      	cmp	r2, r3
 801976e:	d000      	beq.n	8019772 <HAL_UART_IRQHandler+0x466>
 8019770:	e103      	b.n	801997a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	2280      	movs	r2, #128	@ 0x80
 8019776:	589b      	ldr	r3, [r3, r2]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	2220      	movs	r2, #32
 801977e:	4013      	ands	r3, r2
 8019780:	2b20      	cmp	r3, #32
 8019782:	d000      	beq.n	8019786 <HAL_UART_IRQHandler+0x47a>
 8019784:	e0f9      	b.n	801997a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	2202      	movs	r2, #2
 801978a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	225c      	movs	r2, #92	@ 0x5c
 8019790:	5a9a      	ldrh	r2, [r3, r2]
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	0011      	movs	r1, r2
 8019796:	0018      	movs	r0, r3
 8019798:	f000 f926 	bl	80199e8 <HAL_UARTEx_RxEventCallback>
      return;
 801979c:	e0ed      	b.n	801997a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	225c      	movs	r2, #92	@ 0x5c
 80197a2:	5a99      	ldrh	r1, [r3, r2]
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	225e      	movs	r2, #94	@ 0x5e
 80197a8:	5a9b      	ldrh	r3, [r3, r2]
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	208e      	movs	r0, #142	@ 0x8e
 80197ae:	183b      	adds	r3, r7, r0
 80197b0:	1a8a      	subs	r2, r1, r2
 80197b2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	225e      	movs	r2, #94	@ 0x5e
 80197b8:	5a9b      	ldrh	r3, [r3, r2]
 80197ba:	b29b      	uxth	r3, r3
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d100      	bne.n	80197c2 <HAL_UART_IRQHandler+0x4b6>
 80197c0:	e0dd      	b.n	801997e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80197c2:	183b      	adds	r3, r7, r0
 80197c4:	881b      	ldrh	r3, [r3, #0]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d100      	bne.n	80197cc <HAL_UART_IRQHandler+0x4c0>
 80197ca:	e0d8      	b.n	801997e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80197cc:	f3ef 8310 	mrs	r3, PRIMASK
 80197d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80197d2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80197d4:	2488      	movs	r4, #136	@ 0x88
 80197d6:	193a      	adds	r2, r7, r4
 80197d8:	6013      	str	r3, [r2, #0]
 80197da:	2301      	movs	r3, #1
 80197dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197de:	693b      	ldr	r3, [r7, #16]
 80197e0:	f383 8810 	msr	PRIMASK, r3
}
 80197e4:	46c0      	nop			@ (mov r8, r8)
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	681a      	ldr	r2, [r3, #0]
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	4967      	ldr	r1, [pc, #412]	@ (8019990 <HAL_UART_IRQHandler+0x684>)
 80197f2:	400a      	ands	r2, r1
 80197f4:	601a      	str	r2, [r3, #0]
 80197f6:	193b      	adds	r3, r7, r4
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197fc:	697b      	ldr	r3, [r7, #20]
 80197fe:	f383 8810 	msr	PRIMASK, r3
}
 8019802:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019804:	f3ef 8310 	mrs	r3, PRIMASK
 8019808:	61bb      	str	r3, [r7, #24]
  return(result);
 801980a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801980c:	2484      	movs	r4, #132	@ 0x84
 801980e:	193a      	adds	r2, r7, r4
 8019810:	6013      	str	r3, [r2, #0]
 8019812:	2301      	movs	r3, #1
 8019814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019816:	69fb      	ldr	r3, [r7, #28]
 8019818:	f383 8810 	msr	PRIMASK, r3
}
 801981c:	46c0      	nop			@ (mov r8, r8)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	689a      	ldr	r2, [r3, #8]
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	495a      	ldr	r1, [pc, #360]	@ (8019994 <HAL_UART_IRQHandler+0x688>)
 801982a:	400a      	ands	r2, r1
 801982c:	609a      	str	r2, [r3, #8]
 801982e:	193b      	adds	r3, r7, r4
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019834:	6a3b      	ldr	r3, [r7, #32]
 8019836:	f383 8810 	msr	PRIMASK, r3
}
 801983a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	228c      	movs	r2, #140	@ 0x8c
 8019840:	2120      	movs	r1, #32
 8019842:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	2200      	movs	r2, #0
 8019848:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	2200      	movs	r2, #0
 801984e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019850:	f3ef 8310 	mrs	r3, PRIMASK
 8019854:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8019856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019858:	2480      	movs	r4, #128	@ 0x80
 801985a:	193a      	adds	r2, r7, r4
 801985c:	6013      	str	r3, [r2, #0]
 801985e:	2301      	movs	r3, #1
 8019860:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019864:	f383 8810 	msr	PRIMASK, r3
}
 8019868:	46c0      	nop			@ (mov r8, r8)
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	681a      	ldr	r2, [r3, #0]
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	2110      	movs	r1, #16
 8019876:	438a      	bics	r2, r1
 8019878:	601a      	str	r2, [r3, #0]
 801987a:	193b      	adds	r3, r7, r4
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019882:	f383 8810 	msr	PRIMASK, r3
}
 8019886:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	2202      	movs	r2, #2
 801988c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801988e:	183b      	adds	r3, r7, r0
 8019890:	881a      	ldrh	r2, [r3, #0]
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	0011      	movs	r1, r2
 8019896:	0018      	movs	r0, r3
 8019898:	f000 f8a6 	bl	80199e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801989c:	e06f      	b.n	801997e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801989e:	23a4      	movs	r3, #164	@ 0xa4
 80198a0:	18fb      	adds	r3, r7, r3
 80198a2:	681a      	ldr	r2, [r3, #0]
 80198a4:	2380      	movs	r3, #128	@ 0x80
 80198a6:	035b      	lsls	r3, r3, #13
 80198a8:	4013      	ands	r3, r2
 80198aa:	d010      	beq.n	80198ce <HAL_UART_IRQHandler+0x5c2>
 80198ac:	239c      	movs	r3, #156	@ 0x9c
 80198ae:	18fb      	adds	r3, r7, r3
 80198b0:	681a      	ldr	r2, [r3, #0]
 80198b2:	2380      	movs	r3, #128	@ 0x80
 80198b4:	03db      	lsls	r3, r3, #15
 80198b6:	4013      	ands	r3, r2
 80198b8:	d009      	beq.n	80198ce <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	2280      	movs	r2, #128	@ 0x80
 80198c0:	0352      	lsls	r2, r2, #13
 80198c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	0018      	movs	r0, r3
 80198c8:	f000 ff1d 	bl	801a706 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80198cc:	e05a      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80198ce:	23a4      	movs	r3, #164	@ 0xa4
 80198d0:	18fb      	adds	r3, r7, r3
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	2280      	movs	r2, #128	@ 0x80
 80198d6:	4013      	ands	r3, r2
 80198d8:	d016      	beq.n	8019908 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80198da:	23a0      	movs	r3, #160	@ 0xa0
 80198dc:	18fb      	adds	r3, r7, r3
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	2280      	movs	r2, #128	@ 0x80
 80198e2:	4013      	ands	r3, r2
 80198e4:	d106      	bne.n	80198f4 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80198e6:	239c      	movs	r3, #156	@ 0x9c
 80198e8:	18fb      	adds	r3, r7, r3
 80198ea:	681a      	ldr	r2, [r3, #0]
 80198ec:	2380      	movs	r3, #128	@ 0x80
 80198ee:	041b      	lsls	r3, r3, #16
 80198f0:	4013      	ands	r3, r2
 80198f2:	d009      	beq.n	8019908 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d042      	beq.n	8019982 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019900:	687a      	ldr	r2, [r7, #4]
 8019902:	0010      	movs	r0, r2
 8019904:	4798      	blx	r3
    }
    return;
 8019906:	e03c      	b.n	8019982 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8019908:	23a4      	movs	r3, #164	@ 0xa4
 801990a:	18fb      	adds	r3, r7, r3
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	2240      	movs	r2, #64	@ 0x40
 8019910:	4013      	ands	r3, r2
 8019912:	d00a      	beq.n	801992a <HAL_UART_IRQHandler+0x61e>
 8019914:	23a0      	movs	r3, #160	@ 0xa0
 8019916:	18fb      	adds	r3, r7, r3
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	2240      	movs	r2, #64	@ 0x40
 801991c:	4013      	ands	r3, r2
 801991e:	d004      	beq.n	801992a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	0018      	movs	r0, r3
 8019924:	f000 fec3 	bl	801a6ae <UART_EndTransmit_IT>
    return;
 8019928:	e02c      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801992a:	23a4      	movs	r3, #164	@ 0xa4
 801992c:	18fb      	adds	r3, r7, r3
 801992e:	681a      	ldr	r2, [r3, #0]
 8019930:	2380      	movs	r3, #128	@ 0x80
 8019932:	041b      	lsls	r3, r3, #16
 8019934:	4013      	ands	r3, r2
 8019936:	d00b      	beq.n	8019950 <HAL_UART_IRQHandler+0x644>
 8019938:	23a0      	movs	r3, #160	@ 0xa0
 801993a:	18fb      	adds	r3, r7, r3
 801993c:	681a      	ldr	r2, [r3, #0]
 801993e:	2380      	movs	r3, #128	@ 0x80
 8019940:	05db      	lsls	r3, r3, #23
 8019942:	4013      	ands	r3, r2
 8019944:	d004      	beq.n	8019950 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	0018      	movs	r0, r3
 801994a:	f000 feec 	bl	801a726 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801994e:	e019      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8019950:	23a4      	movs	r3, #164	@ 0xa4
 8019952:	18fb      	adds	r3, r7, r3
 8019954:	681a      	ldr	r2, [r3, #0]
 8019956:	2380      	movs	r3, #128	@ 0x80
 8019958:	045b      	lsls	r3, r3, #17
 801995a:	4013      	ands	r3, r2
 801995c:	d012      	beq.n	8019984 <HAL_UART_IRQHandler+0x678>
 801995e:	23a0      	movs	r3, #160	@ 0xa0
 8019960:	18fb      	adds	r3, r7, r3
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	2b00      	cmp	r3, #0
 8019966:	da0d      	bge.n	8019984 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	0018      	movs	r0, r3
 801996c:	f000 fed3 	bl	801a716 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019970:	e008      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
      return;
 8019972:	46c0      	nop			@ (mov r8, r8)
 8019974:	e006      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
    return;
 8019976:	46c0      	nop			@ (mov r8, r8)
 8019978:	e004      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
      return;
 801997a:	46c0      	nop			@ (mov r8, r8)
 801997c:	e002      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
      return;
 801997e:	46c0      	nop			@ (mov r8, r8)
 8019980:	e000      	b.n	8019984 <HAL_UART_IRQHandler+0x678>
    return;
 8019982:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019984:	46bd      	mov	sp, r7
 8019986:	b02a      	add	sp, #168	@ 0xa8
 8019988:	bdb0      	pop	{r4, r5, r7, pc}
 801998a:	46c0      	nop			@ (mov r8, r8)
 801998c:	fffffeff 	.word	0xfffffeff
 8019990:	fffffedf 	.word	0xfffffedf
 8019994:	effffffe 	.word	0xeffffffe

08019998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b082      	sub	sp, #8
 801999c:	af00      	add	r7, sp, #0
 801999e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80199a0:	46c0      	nop			@ (mov r8, r8)
 80199a2:	46bd      	mov	sp, r7
 80199a4:	b002      	add	sp, #8
 80199a6:	bd80      	pop	{r7, pc}

080199a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80199b0:	46c0      	nop			@ (mov r8, r8)
 80199b2:	46bd      	mov	sp, r7
 80199b4:	b002      	add	sp, #8
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b082      	sub	sp, #8
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80199c0:	46c0      	nop			@ (mov r8, r8)
 80199c2:	46bd      	mov	sp, r7
 80199c4:	b002      	add	sp, #8
 80199c6:	bd80      	pop	{r7, pc}

080199c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80199d0:	46c0      	nop			@ (mov r8, r8)
 80199d2:	46bd      	mov	sp, r7
 80199d4:	b002      	add	sp, #8
 80199d6:	bd80      	pop	{r7, pc}

080199d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b082      	sub	sp, #8
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80199e0:	46c0      	nop			@ (mov r8, r8)
 80199e2:	46bd      	mov	sp, r7
 80199e4:	b002      	add	sp, #8
 80199e6:	bd80      	pop	{r7, pc}

080199e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b082      	sub	sp, #8
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	6078      	str	r0, [r7, #4]
 80199f0:	000a      	movs	r2, r1
 80199f2:	1cbb      	adds	r3, r7, #2
 80199f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80199f6:	46c0      	nop			@ (mov r8, r8)
 80199f8:	46bd      	mov	sp, r7
 80199fa:	b002      	add	sp, #8
 80199fc:	bd80      	pop	{r7, pc}
	...

08019a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019a00:	b5b0      	push	{r4, r5, r7, lr}
 8019a02:	b092      	sub	sp, #72	@ 0x48
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8019a08:	231f      	movs	r3, #31
 8019a0a:	2220      	movs	r2, #32
 8019a0c:	189b      	adds	r3, r3, r2
 8019a0e:	19db      	adds	r3, r3, r7
 8019a10:	2200      	movs	r2, #0
 8019a12:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8019a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	4ac8      	ldr	r2, [pc, #800]	@ (8019d3c <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8019a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a1c:	689a      	ldr	r2, [r3, #8]
 8019a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a20:	691b      	ldr	r3, [r3, #16]
 8019a22:	431a      	orrs	r2, r3
 8019a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a26:	695b      	ldr	r3, [r3, #20]
 8019a28:	431a      	orrs	r2, r3
 8019a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a2c:	69db      	ldr	r3, [r3, #28]
 8019a2e:	4313      	orrs	r3, r2
 8019a30:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8019a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	4ac1      	ldr	r2, [pc, #772]	@ (8019d40 <UART_SetConfig+0x340>)
 8019a3a:	4013      	ands	r3, r2
 8019a3c:	0019      	movs	r1, r3
 8019a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a40:	681a      	ldr	r2, [r3, #0]
 8019a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019a44:	430b      	orrs	r3, r1
 8019a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	4abd      	ldr	r2, [pc, #756]	@ (8019d44 <UART_SetConfig+0x344>)
 8019a50:	4013      	ands	r3, r2
 8019a52:	0018      	movs	r0, r3
 8019a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a56:	68d9      	ldr	r1, [r3, #12]
 8019a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a5a:	681a      	ldr	r2, [r3, #0]
 8019a5c:	0003      	movs	r3, r0
 8019a5e:	430b      	orrs	r3, r1
 8019a60:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a64:	699b      	ldr	r3, [r3, #24]
 8019a66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	4ab3      	ldr	r2, [pc, #716]	@ (8019d3c <UART_SetConfig+0x33c>)
 8019a6e:	4293      	cmp	r3, r2
 8019a70:	d00e      	beq.n	8019a90 <UART_SetConfig+0x90>
 8019a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	4ab4      	ldr	r2, [pc, #720]	@ (8019d48 <UART_SetConfig+0x348>)
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	d009      	beq.n	8019a90 <UART_SetConfig+0x90>
 8019a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	4ab2      	ldr	r2, [pc, #712]	@ (8019d4c <UART_SetConfig+0x34c>)
 8019a82:	4293      	cmp	r3, r2
 8019a84:	d004      	beq.n	8019a90 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a88:	6a1b      	ldr	r3, [r3, #32]
 8019a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019a8c:	4313      	orrs	r3, r2
 8019a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	689b      	ldr	r3, [r3, #8]
 8019a96:	4aae      	ldr	r2, [pc, #696]	@ (8019d50 <UART_SetConfig+0x350>)
 8019a98:	4013      	ands	r3, r2
 8019a9a:	0019      	movs	r1, r3
 8019a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a9e:	681a      	ldr	r2, [r3, #0]
 8019aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019aa2:	430b      	orrs	r3, r1
 8019aa4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8019aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019aac:	220f      	movs	r2, #15
 8019aae:	4393      	bics	r3, r2
 8019ab0:	0018      	movs	r0, r3
 8019ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ab4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8019ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ab8:	681a      	ldr	r2, [r3, #0]
 8019aba:	0003      	movs	r3, r0
 8019abc:	430b      	orrs	r3, r1
 8019abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	4aa3      	ldr	r2, [pc, #652]	@ (8019d54 <UART_SetConfig+0x354>)
 8019ac6:	4293      	cmp	r3, r2
 8019ac8:	d102      	bne.n	8019ad0 <UART_SetConfig+0xd0>
 8019aca:	2301      	movs	r3, #1
 8019acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ace:	e033      	b.n	8019b38 <UART_SetConfig+0x138>
 8019ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	4aa0      	ldr	r2, [pc, #640]	@ (8019d58 <UART_SetConfig+0x358>)
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	d102      	bne.n	8019ae0 <UART_SetConfig+0xe0>
 8019ada:	2302      	movs	r3, #2
 8019adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8019ade:	e02b      	b.n	8019b38 <UART_SetConfig+0x138>
 8019ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	4a9d      	ldr	r2, [pc, #628]	@ (8019d5c <UART_SetConfig+0x35c>)
 8019ae6:	4293      	cmp	r3, r2
 8019ae8:	d103      	bne.n	8019af2 <UART_SetConfig+0xf2>
 8019aea:	2380      	movs	r3, #128	@ 0x80
 8019aec:	025b      	lsls	r3, r3, #9
 8019aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8019af0:	e022      	b.n	8019b38 <UART_SetConfig+0x138>
 8019af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	4a9a      	ldr	r2, [pc, #616]	@ (8019d60 <UART_SetConfig+0x360>)
 8019af8:	4293      	cmp	r3, r2
 8019afa:	d103      	bne.n	8019b04 <UART_SetConfig+0x104>
 8019afc:	2380      	movs	r3, #128	@ 0x80
 8019afe:	029b      	lsls	r3, r3, #10
 8019b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8019b02:	e019      	b.n	8019b38 <UART_SetConfig+0x138>
 8019b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	4a8c      	ldr	r2, [pc, #560]	@ (8019d3c <UART_SetConfig+0x33c>)
 8019b0a:	4293      	cmp	r3, r2
 8019b0c:	d102      	bne.n	8019b14 <UART_SetConfig+0x114>
 8019b0e:	2310      	movs	r3, #16
 8019b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8019b12:	e011      	b.n	8019b38 <UART_SetConfig+0x138>
 8019b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	4a8b      	ldr	r2, [pc, #556]	@ (8019d48 <UART_SetConfig+0x348>)
 8019b1a:	4293      	cmp	r3, r2
 8019b1c:	d102      	bne.n	8019b24 <UART_SetConfig+0x124>
 8019b1e:	2308      	movs	r3, #8
 8019b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8019b22:	e009      	b.n	8019b38 <UART_SetConfig+0x138>
 8019b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	4a88      	ldr	r2, [pc, #544]	@ (8019d4c <UART_SetConfig+0x34c>)
 8019b2a:	4293      	cmp	r3, r2
 8019b2c:	d102      	bne.n	8019b34 <UART_SetConfig+0x134>
 8019b2e:	2304      	movs	r3, #4
 8019b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8019b32:	e001      	b.n	8019b38 <UART_SetConfig+0x138>
 8019b34:	2300      	movs	r3, #0
 8019b36:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	4a7f      	ldr	r2, [pc, #508]	@ (8019d3c <UART_SetConfig+0x33c>)
 8019b3e:	4293      	cmp	r3, r2
 8019b40:	d00a      	beq.n	8019b58 <UART_SetConfig+0x158>
 8019b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	4a80      	ldr	r2, [pc, #512]	@ (8019d48 <UART_SetConfig+0x348>)
 8019b48:	4293      	cmp	r3, r2
 8019b4a:	d005      	beq.n	8019b58 <UART_SetConfig+0x158>
 8019b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	4a7e      	ldr	r2, [pc, #504]	@ (8019d4c <UART_SetConfig+0x34c>)
 8019b52:	4293      	cmp	r3, r2
 8019b54:	d000      	beq.n	8019b58 <UART_SetConfig+0x158>
 8019b56:	e06f      	b.n	8019c38 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b5a:	0018      	movs	r0, r3
 8019b5c:	f7fc ff30 	bl	80169c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8019b60:	0003      	movs	r3, r0
 8019b62:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8019b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d100      	bne.n	8019b6c <UART_SetConfig+0x16c>
 8019b6a:	e103      	b.n	8019d74 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b70:	4b7c      	ldr	r3, [pc, #496]	@ (8019d64 <UART_SetConfig+0x364>)
 8019b72:	0052      	lsls	r2, r2, #1
 8019b74:	5ad3      	ldrh	r3, [r2, r3]
 8019b76:	0019      	movs	r1, r3
 8019b78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019b7a:	f7e6 facd 	bl	8000118 <__udivsi3>
 8019b7e:	0003      	movs	r3, r0
 8019b80:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b84:	685a      	ldr	r2, [r3, #4]
 8019b86:	0013      	movs	r3, r2
 8019b88:	005b      	lsls	r3, r3, #1
 8019b8a:	189b      	adds	r3, r3, r2
 8019b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019b8e:	429a      	cmp	r2, r3
 8019b90:	d305      	bcc.n	8019b9e <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b94:	685b      	ldr	r3, [r3, #4]
 8019b96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	d906      	bls.n	8019bac <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8019b9e:	231f      	movs	r3, #31
 8019ba0:	2220      	movs	r2, #32
 8019ba2:	189b      	adds	r3, r3, r2
 8019ba4:	19db      	adds	r3, r3, r7
 8019ba6:	2201      	movs	r2, #1
 8019ba8:	701a      	strb	r2, [r3, #0]
 8019baa:	e044      	b.n	8019c36 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bae:	61bb      	str	r3, [r7, #24]
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	61fb      	str	r3, [r7, #28]
 8019bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8019d64 <UART_SetConfig+0x364>)
 8019bba:	0052      	lsls	r2, r2, #1
 8019bbc:	5ad3      	ldrh	r3, [r2, r3]
 8019bbe:	613b      	str	r3, [r7, #16]
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	617b      	str	r3, [r7, #20]
 8019bc4:	693a      	ldr	r2, [r7, #16]
 8019bc6:	697b      	ldr	r3, [r7, #20]
 8019bc8:	69b8      	ldr	r0, [r7, #24]
 8019bca:	69f9      	ldr	r1, [r7, #28]
 8019bcc:	f7e6 fc76 	bl	80004bc <__aeabi_uldivmod>
 8019bd0:	0002      	movs	r2, r0
 8019bd2:	000b      	movs	r3, r1
 8019bd4:	0e11      	lsrs	r1, r2, #24
 8019bd6:	021d      	lsls	r5, r3, #8
 8019bd8:	430d      	orrs	r5, r1
 8019bda:	0214      	lsls	r4, r2, #8
 8019bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	085b      	lsrs	r3, r3, #1
 8019be2:	60bb      	str	r3, [r7, #8]
 8019be4:	2300      	movs	r3, #0
 8019be6:	60fb      	str	r3, [r7, #12]
 8019be8:	68b8      	ldr	r0, [r7, #8]
 8019bea:	68f9      	ldr	r1, [r7, #12]
 8019bec:	1900      	adds	r0, r0, r4
 8019bee:	4169      	adcs	r1, r5
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	603b      	str	r3, [r7, #0]
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	607b      	str	r3, [r7, #4]
 8019bfa:	683a      	ldr	r2, [r7, #0]
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	f7e6 fc5d 	bl	80004bc <__aeabi_uldivmod>
 8019c02:	0002      	movs	r2, r0
 8019c04:	000b      	movs	r3, r1
 8019c06:	0013      	movs	r3, r2
 8019c08:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019c0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c0c:	23c0      	movs	r3, #192	@ 0xc0
 8019c0e:	009b      	lsls	r3, r3, #2
 8019c10:	429a      	cmp	r2, r3
 8019c12:	d309      	bcc.n	8019c28 <UART_SetConfig+0x228>
 8019c14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c16:	2380      	movs	r3, #128	@ 0x80
 8019c18:	035b      	lsls	r3, r3, #13
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d204      	bcs.n	8019c28 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8019c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c24:	60da      	str	r2, [r3, #12]
 8019c26:	e006      	b.n	8019c36 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8019c28:	231f      	movs	r3, #31
 8019c2a:	2220      	movs	r2, #32
 8019c2c:	189b      	adds	r3, r3, r2
 8019c2e:	19db      	adds	r3, r3, r7
 8019c30:	2201      	movs	r2, #1
 8019c32:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8019c34:	e09e      	b.n	8019d74 <UART_SetConfig+0x374>
 8019c36:	e09d      	b.n	8019d74 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3a:	69da      	ldr	r2, [r3, #28]
 8019c3c:	2380      	movs	r3, #128	@ 0x80
 8019c3e:	021b      	lsls	r3, r3, #8
 8019c40:	429a      	cmp	r2, r3
 8019c42:	d14c      	bne.n	8019cde <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c46:	0018      	movs	r0, r3
 8019c48:	f7fc feba 	bl	80169c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8019c4c:	0003      	movs	r3, r0
 8019c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d100      	bne.n	8019c58 <UART_SetConfig+0x258>
 8019c56:	e08d      	b.n	8019d74 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c5c:	4b41      	ldr	r3, [pc, #260]	@ (8019d64 <UART_SetConfig+0x364>)
 8019c5e:	0052      	lsls	r2, r2, #1
 8019c60:	5ad3      	ldrh	r3, [r2, r3]
 8019c62:	0019      	movs	r1, r3
 8019c64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019c66:	f7e6 fa57 	bl	8000118 <__udivsi3>
 8019c6a:	0003      	movs	r3, r0
 8019c6c:	005a      	lsls	r2, r3, #1
 8019c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	085b      	lsrs	r3, r3, #1
 8019c74:	18d2      	adds	r2, r2, r3
 8019c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c78:	685b      	ldr	r3, [r3, #4]
 8019c7a:	0019      	movs	r1, r3
 8019c7c:	0010      	movs	r0, r2
 8019c7e:	f7e6 fa4b 	bl	8000118 <__udivsi3>
 8019c82:	0003      	movs	r3, r0
 8019c84:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c88:	2b0f      	cmp	r3, #15
 8019c8a:	d921      	bls.n	8019cd0 <UART_SetConfig+0x2d0>
 8019c8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c8e:	2380      	movs	r3, #128	@ 0x80
 8019c90:	025b      	lsls	r3, r3, #9
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d21c      	bcs.n	8019cd0 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c98:	b29a      	uxth	r2, r3
 8019c9a:	2012      	movs	r0, #18
 8019c9c:	2420      	movs	r4, #32
 8019c9e:	1903      	adds	r3, r0, r4
 8019ca0:	19db      	adds	r3, r3, r7
 8019ca2:	210f      	movs	r1, #15
 8019ca4:	438a      	bics	r2, r1
 8019ca6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019caa:	085b      	lsrs	r3, r3, #1
 8019cac:	b29b      	uxth	r3, r3
 8019cae:	2207      	movs	r2, #7
 8019cb0:	4013      	ands	r3, r2
 8019cb2:	b299      	uxth	r1, r3
 8019cb4:	1903      	adds	r3, r0, r4
 8019cb6:	19db      	adds	r3, r3, r7
 8019cb8:	1902      	adds	r2, r0, r4
 8019cba:	19d2      	adds	r2, r2, r7
 8019cbc:	8812      	ldrh	r2, [r2, #0]
 8019cbe:	430a      	orrs	r2, r1
 8019cc0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8019cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	1902      	adds	r2, r0, r4
 8019cc8:	19d2      	adds	r2, r2, r7
 8019cca:	8812      	ldrh	r2, [r2, #0]
 8019ccc:	60da      	str	r2, [r3, #12]
 8019cce:	e051      	b.n	8019d74 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8019cd0:	231f      	movs	r3, #31
 8019cd2:	2220      	movs	r2, #32
 8019cd4:	189b      	adds	r3, r3, r2
 8019cd6:	19db      	adds	r3, r3, r7
 8019cd8:	2201      	movs	r2, #1
 8019cda:	701a      	strb	r2, [r3, #0]
 8019cdc:	e04a      	b.n	8019d74 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ce0:	0018      	movs	r0, r3
 8019ce2:	f7fc fe6d 	bl	80169c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8019ce6:	0003      	movs	r3, r0
 8019ce8:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8019cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d041      	beq.n	8019d74 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8019d64 <UART_SetConfig+0x364>)
 8019cf6:	0052      	lsls	r2, r2, #1
 8019cf8:	5ad3      	ldrh	r3, [r2, r3]
 8019cfa:	0019      	movs	r1, r3
 8019cfc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019cfe:	f7e6 fa0b 	bl	8000118 <__udivsi3>
 8019d02:	0003      	movs	r3, r0
 8019d04:	001a      	movs	r2, r3
 8019d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d08:	685b      	ldr	r3, [r3, #4]
 8019d0a:	085b      	lsrs	r3, r3, #1
 8019d0c:	18d2      	adds	r2, r2, r3
 8019d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d10:	685b      	ldr	r3, [r3, #4]
 8019d12:	0019      	movs	r1, r3
 8019d14:	0010      	movs	r0, r2
 8019d16:	f7e6 f9ff 	bl	8000118 <__udivsi3>
 8019d1a:	0003      	movs	r3, r0
 8019d1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d20:	2b0f      	cmp	r3, #15
 8019d22:	d921      	bls.n	8019d68 <UART_SetConfig+0x368>
 8019d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019d26:	2380      	movs	r3, #128	@ 0x80
 8019d28:	025b      	lsls	r3, r3, #9
 8019d2a:	429a      	cmp	r2, r3
 8019d2c:	d21c      	bcs.n	8019d68 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d30:	b29a      	uxth	r2, r3
 8019d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	60da      	str	r2, [r3, #12]
 8019d38:	e01c      	b.n	8019d74 <UART_SetConfig+0x374>
 8019d3a:	46c0      	nop			@ (mov r8, r8)
 8019d3c:	40008000 	.word	0x40008000
 8019d40:	cfff69f3 	.word	0xcfff69f3
 8019d44:	ffffcfff 	.word	0xffffcfff
 8019d48:	40008400 	.word	0x40008400
 8019d4c:	40008c00 	.word	0x40008c00
 8019d50:	11fff4ff 	.word	0x11fff4ff
 8019d54:	40013800 	.word	0x40013800
 8019d58:	40004400 	.word	0x40004400
 8019d5c:	40004800 	.word	0x40004800
 8019d60:	40004c00 	.word	0x40004c00
 8019d64:	0801b1b8 	.word	0x0801b1b8
      }
      else
      {
        ret = HAL_ERROR;
 8019d68:	231f      	movs	r3, #31
 8019d6a:	2220      	movs	r2, #32
 8019d6c:	189b      	adds	r3, r3, r2
 8019d6e:	19db      	adds	r3, r3, r7
 8019d70:	2201      	movs	r2, #1
 8019d72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d76:	226a      	movs	r2, #106	@ 0x6a
 8019d78:	2101      	movs	r1, #1
 8019d7a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8019d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d7e:	2268      	movs	r2, #104	@ 0x68
 8019d80:	2101      	movs	r1, #1
 8019d82:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d86:	2200      	movs	r2, #0
 8019d88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d8c:	2200      	movs	r2, #0
 8019d8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019d90:	231f      	movs	r3, #31
 8019d92:	2220      	movs	r2, #32
 8019d94:	189b      	adds	r3, r3, r2
 8019d96:	19db      	adds	r3, r3, r7
 8019d98:	781b      	ldrb	r3, [r3, #0]
}
 8019d9a:	0018      	movs	r0, r3
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	b012      	add	sp, #72	@ 0x48
 8019da0:	bdb0      	pop	{r4, r5, r7, pc}
 8019da2:	46c0      	nop			@ (mov r8, r8)

08019da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b082      	sub	sp, #8
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019db0:	2208      	movs	r2, #8
 8019db2:	4013      	ands	r3, r2
 8019db4:	d00b      	beq.n	8019dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	685b      	ldr	r3, [r3, #4]
 8019dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8019ee8 <UART_AdvFeatureConfig+0x144>)
 8019dbe:	4013      	ands	r3, r2
 8019dc0:	0019      	movs	r1, r3
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	430a      	orrs	r2, r1
 8019dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019dd2:	2201      	movs	r2, #1
 8019dd4:	4013      	ands	r3, r2
 8019dd6:	d00b      	beq.n	8019df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	685b      	ldr	r3, [r3, #4]
 8019dde:	4a43      	ldr	r2, [pc, #268]	@ (8019eec <UART_AdvFeatureConfig+0x148>)
 8019de0:	4013      	ands	r3, r2
 8019de2:	0019      	movs	r1, r3
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	430a      	orrs	r2, r1
 8019dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019df4:	2202      	movs	r2, #2
 8019df6:	4013      	ands	r3, r2
 8019df8:	d00b      	beq.n	8019e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	685b      	ldr	r3, [r3, #4]
 8019e00:	4a3b      	ldr	r2, [pc, #236]	@ (8019ef0 <UART_AdvFeatureConfig+0x14c>)
 8019e02:	4013      	ands	r3, r2
 8019e04:	0019      	movs	r1, r3
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	430a      	orrs	r2, r1
 8019e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e16:	2204      	movs	r2, #4
 8019e18:	4013      	ands	r3, r2
 8019e1a:	d00b      	beq.n	8019e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	4a34      	ldr	r2, [pc, #208]	@ (8019ef4 <UART_AdvFeatureConfig+0x150>)
 8019e24:	4013      	ands	r3, r2
 8019e26:	0019      	movs	r1, r3
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	430a      	orrs	r2, r1
 8019e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e38:	2210      	movs	r2, #16
 8019e3a:	4013      	ands	r3, r2
 8019e3c:	d00b      	beq.n	8019e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	689b      	ldr	r3, [r3, #8]
 8019e44:	4a2c      	ldr	r2, [pc, #176]	@ (8019ef8 <UART_AdvFeatureConfig+0x154>)
 8019e46:	4013      	ands	r3, r2
 8019e48:	0019      	movs	r1, r3
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	430a      	orrs	r2, r1
 8019e54:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e5a:	2220      	movs	r2, #32
 8019e5c:	4013      	ands	r3, r2
 8019e5e:	d00b      	beq.n	8019e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	689b      	ldr	r3, [r3, #8]
 8019e66:	4a25      	ldr	r2, [pc, #148]	@ (8019efc <UART_AdvFeatureConfig+0x158>)
 8019e68:	4013      	ands	r3, r2
 8019e6a:	0019      	movs	r1, r3
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	430a      	orrs	r2, r1
 8019e76:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e7c:	2240      	movs	r2, #64	@ 0x40
 8019e7e:	4013      	ands	r3, r2
 8019e80:	d01d      	beq.n	8019ebe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	4a1d      	ldr	r2, [pc, #116]	@ (8019f00 <UART_AdvFeatureConfig+0x15c>)
 8019e8a:	4013      	ands	r3, r2
 8019e8c:	0019      	movs	r1, r3
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	430a      	orrs	r2, r1
 8019e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019e9e:	2380      	movs	r3, #128	@ 0x80
 8019ea0:	035b      	lsls	r3, r3, #13
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d10b      	bne.n	8019ebe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	685b      	ldr	r3, [r3, #4]
 8019eac:	4a15      	ldr	r2, [pc, #84]	@ (8019f04 <UART_AdvFeatureConfig+0x160>)
 8019eae:	4013      	ands	r3, r2
 8019eb0:	0019      	movs	r1, r3
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	430a      	orrs	r2, r1
 8019ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ec2:	2280      	movs	r2, #128	@ 0x80
 8019ec4:	4013      	ands	r3, r2
 8019ec6:	d00b      	beq.n	8019ee0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	4a0e      	ldr	r2, [pc, #56]	@ (8019f08 <UART_AdvFeatureConfig+0x164>)
 8019ed0:	4013      	ands	r3, r2
 8019ed2:	0019      	movs	r1, r3
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	430a      	orrs	r2, r1
 8019ede:	605a      	str	r2, [r3, #4]
  }
}
 8019ee0:	46c0      	nop			@ (mov r8, r8)
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	b002      	add	sp, #8
 8019ee6:	bd80      	pop	{r7, pc}
 8019ee8:	ffff7fff 	.word	0xffff7fff
 8019eec:	fffdffff 	.word	0xfffdffff
 8019ef0:	fffeffff 	.word	0xfffeffff
 8019ef4:	fffbffff 	.word	0xfffbffff
 8019ef8:	ffffefff 	.word	0xffffefff
 8019efc:	ffffdfff 	.word	0xffffdfff
 8019f00:	ffefffff 	.word	0xffefffff
 8019f04:	ff9fffff 	.word	0xff9fffff
 8019f08:	fff7ffff 	.word	0xfff7ffff

08019f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	b092      	sub	sp, #72	@ 0x48
 8019f10:	af02      	add	r7, sp, #8
 8019f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	2290      	movs	r2, #144	@ 0x90
 8019f18:	2100      	movs	r1, #0
 8019f1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019f1c:	f7f8 f888 	bl	8012030 <HAL_GetTick>
 8019f20:	0003      	movs	r3, r0
 8019f22:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2208      	movs	r2, #8
 8019f2c:	4013      	ands	r3, r2
 8019f2e:	2b08      	cmp	r3, #8
 8019f30:	d12d      	bne.n	8019f8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f34:	2280      	movs	r2, #128	@ 0x80
 8019f36:	0391      	lsls	r1, r2, #14
 8019f38:	6878      	ldr	r0, [r7, #4]
 8019f3a:	4a47      	ldr	r2, [pc, #284]	@ (801a058 <UART_CheckIdleState+0x14c>)
 8019f3c:	9200      	str	r2, [sp, #0]
 8019f3e:	2200      	movs	r2, #0
 8019f40:	f000 f88e 	bl	801a060 <UART_WaitOnFlagUntilTimeout>
 8019f44:	1e03      	subs	r3, r0, #0
 8019f46:	d022      	beq.n	8019f8e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019f48:	f3ef 8310 	mrs	r3, PRIMASK
 8019f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8019f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019f50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f52:	2301      	movs	r3, #1
 8019f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f58:	f383 8810 	msr	PRIMASK, r3
}
 8019f5c:	46c0      	nop			@ (mov r8, r8)
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	2180      	movs	r1, #128	@ 0x80
 8019f6a:	438a      	bics	r2, r1
 8019f6c:	601a      	str	r2, [r3, #0]
 8019f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f74:	f383 8810 	msr	PRIMASK, r3
}
 8019f78:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2288      	movs	r2, #136	@ 0x88
 8019f7e:	2120      	movs	r1, #32
 8019f80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	2284      	movs	r2, #132	@ 0x84
 8019f86:	2100      	movs	r1, #0
 8019f88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019f8a:	2303      	movs	r3, #3
 8019f8c:	e060      	b.n	801a050 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	2204      	movs	r2, #4
 8019f96:	4013      	ands	r3, r2
 8019f98:	2b04      	cmp	r3, #4
 8019f9a:	d146      	bne.n	801a02a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f9e:	2280      	movs	r2, #128	@ 0x80
 8019fa0:	03d1      	lsls	r1, r2, #15
 8019fa2:	6878      	ldr	r0, [r7, #4]
 8019fa4:	4a2c      	ldr	r2, [pc, #176]	@ (801a058 <UART_CheckIdleState+0x14c>)
 8019fa6:	9200      	str	r2, [sp, #0]
 8019fa8:	2200      	movs	r2, #0
 8019faa:	f000 f859 	bl	801a060 <UART_WaitOnFlagUntilTimeout>
 8019fae:	1e03      	subs	r3, r0, #0
 8019fb0:	d03b      	beq.n	801a02a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8019fb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8019fb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8019fbc:	2301      	movs	r3, #1
 8019fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fc0:	693b      	ldr	r3, [r7, #16]
 8019fc2:	f383 8810 	msr	PRIMASK, r3
}
 8019fc6:	46c0      	nop			@ (mov r8, r8)
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	681a      	ldr	r2, [r3, #0]
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	4922      	ldr	r1, [pc, #136]	@ (801a05c <UART_CheckIdleState+0x150>)
 8019fd4:	400a      	ands	r2, r1
 8019fd6:	601a      	str	r2, [r3, #0]
 8019fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fdc:	697b      	ldr	r3, [r7, #20]
 8019fde:	f383 8810 	msr	PRIMASK, r3
}
 8019fe2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8019fe8:	61bb      	str	r3, [r7, #24]
  return(result);
 8019fea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8019fee:	2301      	movs	r3, #1
 8019ff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ff2:	69fb      	ldr	r3, [r7, #28]
 8019ff4:	f383 8810 	msr	PRIMASK, r3
}
 8019ff8:	46c0      	nop			@ (mov r8, r8)
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	689a      	ldr	r2, [r3, #8]
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	2101      	movs	r1, #1
 801a006:	438a      	bics	r2, r1
 801a008:	609a      	str	r2, [r3, #8]
 801a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a00c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a00e:	6a3b      	ldr	r3, [r7, #32]
 801a010:	f383 8810 	msr	PRIMASK, r3
}
 801a014:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	228c      	movs	r2, #140	@ 0x8c
 801a01a:	2120      	movs	r1, #32
 801a01c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	2284      	movs	r2, #132	@ 0x84
 801a022:	2100      	movs	r1, #0
 801a024:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a026:	2303      	movs	r3, #3
 801a028:	e012      	b.n	801a050 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	2288      	movs	r2, #136	@ 0x88
 801a02e:	2120      	movs	r1, #32
 801a030:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	228c      	movs	r2, #140	@ 0x8c
 801a036:	2120      	movs	r1, #32
 801a038:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2200      	movs	r2, #0
 801a03e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2200      	movs	r2, #0
 801a044:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	2284      	movs	r2, #132	@ 0x84
 801a04a:	2100      	movs	r1, #0
 801a04c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a04e:	2300      	movs	r3, #0
}
 801a050:	0018      	movs	r0, r3
 801a052:	46bd      	mov	sp, r7
 801a054:	b010      	add	sp, #64	@ 0x40
 801a056:	bd80      	pop	{r7, pc}
 801a058:	01ffffff 	.word	0x01ffffff
 801a05c:	fffffedf 	.word	0xfffffedf

0801a060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b084      	sub	sp, #16
 801a064:	af00      	add	r7, sp, #0
 801a066:	60f8      	str	r0, [r7, #12]
 801a068:	60b9      	str	r1, [r7, #8]
 801a06a:	603b      	str	r3, [r7, #0]
 801a06c:	1dfb      	adds	r3, r7, #7
 801a06e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a070:	e051      	b.n	801a116 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a072:	69bb      	ldr	r3, [r7, #24]
 801a074:	3301      	adds	r3, #1
 801a076:	d04e      	beq.n	801a116 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a078:	f7f7 ffda 	bl	8012030 <HAL_GetTick>
 801a07c:	0002      	movs	r2, r0
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	1ad3      	subs	r3, r2, r3
 801a082:	69ba      	ldr	r2, [r7, #24]
 801a084:	429a      	cmp	r2, r3
 801a086:	d302      	bcc.n	801a08e <UART_WaitOnFlagUntilTimeout+0x2e>
 801a088:	69bb      	ldr	r3, [r7, #24]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d101      	bne.n	801a092 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801a08e:	2303      	movs	r3, #3
 801a090:	e051      	b.n	801a136 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	2204      	movs	r2, #4
 801a09a:	4013      	ands	r3, r2
 801a09c:	d03b      	beq.n	801a116 <UART_WaitOnFlagUntilTimeout+0xb6>
 801a09e:	68bb      	ldr	r3, [r7, #8]
 801a0a0:	2b80      	cmp	r3, #128	@ 0x80
 801a0a2:	d038      	beq.n	801a116 <UART_WaitOnFlagUntilTimeout+0xb6>
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	2b40      	cmp	r3, #64	@ 0x40
 801a0a8:	d035      	beq.n	801a116 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	69db      	ldr	r3, [r3, #28]
 801a0b0:	2208      	movs	r2, #8
 801a0b2:	4013      	ands	r3, r2
 801a0b4:	2b08      	cmp	r3, #8
 801a0b6:	d111      	bne.n	801a0dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	2208      	movs	r2, #8
 801a0be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	0018      	movs	r0, r3
 801a0c4:	f000 f922 	bl	801a30c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	2290      	movs	r2, #144	@ 0x90
 801a0cc:	2108      	movs	r1, #8
 801a0ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	2284      	movs	r2, #132	@ 0x84
 801a0d4:	2100      	movs	r1, #0
 801a0d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801a0d8:	2301      	movs	r3, #1
 801a0da:	e02c      	b.n	801a136 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	69da      	ldr	r2, [r3, #28]
 801a0e2:	2380      	movs	r3, #128	@ 0x80
 801a0e4:	011b      	lsls	r3, r3, #4
 801a0e6:	401a      	ands	r2, r3
 801a0e8:	2380      	movs	r3, #128	@ 0x80
 801a0ea:	011b      	lsls	r3, r3, #4
 801a0ec:	429a      	cmp	r2, r3
 801a0ee:	d112      	bne.n	801a116 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	2280      	movs	r2, #128	@ 0x80
 801a0f6:	0112      	lsls	r2, r2, #4
 801a0f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	0018      	movs	r0, r3
 801a0fe:	f000 f905 	bl	801a30c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	2290      	movs	r2, #144	@ 0x90
 801a106:	2120      	movs	r1, #32
 801a108:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	2284      	movs	r2, #132	@ 0x84
 801a10e:	2100      	movs	r1, #0
 801a110:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801a112:	2303      	movs	r3, #3
 801a114:	e00f      	b.n	801a136 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	69db      	ldr	r3, [r3, #28]
 801a11c:	68ba      	ldr	r2, [r7, #8]
 801a11e:	4013      	ands	r3, r2
 801a120:	68ba      	ldr	r2, [r7, #8]
 801a122:	1ad3      	subs	r3, r2, r3
 801a124:	425a      	negs	r2, r3
 801a126:	4153      	adcs	r3, r2
 801a128:	b2db      	uxtb	r3, r3
 801a12a:	001a      	movs	r2, r3
 801a12c:	1dfb      	adds	r3, r7, #7
 801a12e:	781b      	ldrb	r3, [r3, #0]
 801a130:	429a      	cmp	r2, r3
 801a132:	d09e      	beq.n	801a072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a134:	2300      	movs	r3, #0
}
 801a136:	0018      	movs	r0, r3
 801a138:	46bd      	mov	sp, r7
 801a13a:	b004      	add	sp, #16
 801a13c:	bd80      	pop	{r7, pc}
	...

0801a140 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a140:	b580      	push	{r7, lr}
 801a142:	b090      	sub	sp, #64	@ 0x40
 801a144:	af00      	add	r7, sp, #0
 801a146:	60f8      	str	r0, [r7, #12]
 801a148:	60b9      	str	r1, [r7, #8]
 801a14a:	1dbb      	adds	r3, r7, #6
 801a14c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	68ba      	ldr	r2, [r7, #8]
 801a152:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	1dba      	adds	r2, r7, #6
 801a158:	215c      	movs	r1, #92	@ 0x5c
 801a15a:	8812      	ldrh	r2, [r2, #0]
 801a15c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	2290      	movs	r2, #144	@ 0x90
 801a162:	2100      	movs	r1, #0
 801a164:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	228c      	movs	r2, #140	@ 0x8c
 801a16a:	2122      	movs	r1, #34	@ 0x22
 801a16c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	2280      	movs	r2, #128	@ 0x80
 801a172:	589b      	ldr	r3, [r3, r2]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d02d      	beq.n	801a1d4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	2280      	movs	r2, #128	@ 0x80
 801a17c:	589b      	ldr	r3, [r3, r2]
 801a17e:	4a40      	ldr	r2, [pc, #256]	@ (801a280 <UART_Start_Receive_DMA+0x140>)
 801a180:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	2280      	movs	r2, #128	@ 0x80
 801a186:	589b      	ldr	r3, [r3, r2]
 801a188:	4a3e      	ldr	r2, [pc, #248]	@ (801a284 <UART_Start_Receive_DMA+0x144>)
 801a18a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	2280      	movs	r2, #128	@ 0x80
 801a190:	589b      	ldr	r3, [r3, r2]
 801a192:	4a3d      	ldr	r2, [pc, #244]	@ (801a288 <UART_Start_Receive_DMA+0x148>)
 801a194:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	2280      	movs	r2, #128	@ 0x80
 801a19a:	589b      	ldr	r3, [r3, r2]
 801a19c:	2200      	movs	r2, #0
 801a19e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	2280      	movs	r2, #128	@ 0x80
 801a1a4:	5898      	ldr	r0, [r3, r2]
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	3324      	adds	r3, #36	@ 0x24
 801a1ac:	0019      	movs	r1, r3
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a1b2:	001a      	movs	r2, r3
 801a1b4:	1dbb      	adds	r3, r7, #6
 801a1b6:	881b      	ldrh	r3, [r3, #0]
 801a1b8:	f7f8 f9d6 	bl	8012568 <HAL_DMA_Start_IT>
 801a1bc:	1e03      	subs	r3, r0, #0
 801a1be:	d009      	beq.n	801a1d4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	2290      	movs	r2, #144	@ 0x90
 801a1c4:	2110      	movs	r1, #16
 801a1c6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	228c      	movs	r2, #140	@ 0x8c
 801a1cc:	2120      	movs	r1, #32
 801a1ce:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	e050      	b.n	801a276 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	691b      	ldr	r3, [r3, #16]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d019      	beq.n	801a210 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a1dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801a1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1ec:	f383 8810 	msr	PRIMASK, r3
}
 801a1f0:	46c0      	nop			@ (mov r8, r8)
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	681a      	ldr	r2, [r3, #0]
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	2180      	movs	r1, #128	@ 0x80
 801a1fe:	0049      	lsls	r1, r1, #1
 801a200:	430a      	orrs	r2, r1
 801a202:	601a      	str	r2, [r3, #0]
 801a204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a206:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a20a:	f383 8810 	msr	PRIMASK, r3
}
 801a20e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a210:	f3ef 8310 	mrs	r3, PRIMASK
 801a214:	613b      	str	r3, [r7, #16]
  return(result);
 801a216:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a218:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a21a:	2301      	movs	r3, #1
 801a21c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a21e:	697b      	ldr	r3, [r7, #20]
 801a220:	f383 8810 	msr	PRIMASK, r3
}
 801a224:	46c0      	nop			@ (mov r8, r8)
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	689a      	ldr	r2, [r3, #8]
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	2101      	movs	r1, #1
 801a232:	430a      	orrs	r2, r1
 801a234:	609a      	str	r2, [r3, #8]
 801a236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a238:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a23a:	69bb      	ldr	r3, [r7, #24]
 801a23c:	f383 8810 	msr	PRIMASK, r3
}
 801a240:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a242:	f3ef 8310 	mrs	r3, PRIMASK
 801a246:	61fb      	str	r3, [r7, #28]
  return(result);
 801a248:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a24a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a24c:	2301      	movs	r3, #1
 801a24e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a250:	6a3b      	ldr	r3, [r7, #32]
 801a252:	f383 8810 	msr	PRIMASK, r3
}
 801a256:	46c0      	nop			@ (mov r8, r8)
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	689a      	ldr	r2, [r3, #8]
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	2140      	movs	r1, #64	@ 0x40
 801a264:	430a      	orrs	r2, r1
 801a266:	609a      	str	r2, [r3, #8]
 801a268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a26a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a26e:	f383 8810 	msr	PRIMASK, r3
}
 801a272:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801a274:	2300      	movs	r3, #0
}
 801a276:	0018      	movs	r0, r3
 801a278:	46bd      	mov	sp, r7
 801a27a:	b010      	add	sp, #64	@ 0x40
 801a27c:	bd80      	pop	{r7, pc}
 801a27e:	46c0      	nop			@ (mov r8, r8)
 801a280:	0801a491 	.word	0x0801a491
 801a284:	0801a5c1 	.word	0x0801a5c1
 801a288:	0801a603 	.word	0x0801a603

0801a28c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b08a      	sub	sp, #40	@ 0x28
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a294:	f3ef 8310 	mrs	r3, PRIMASK
 801a298:	60bb      	str	r3, [r7, #8]
  return(result);
 801a29a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801a29c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a29e:	2301      	movs	r3, #1
 801a2a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	f383 8810 	msr	PRIMASK, r3
}
 801a2a8:	46c0      	nop			@ (mov r8, r8)
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	681a      	ldr	r2, [r3, #0]
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	21c0      	movs	r1, #192	@ 0xc0
 801a2b6:	438a      	bics	r2, r1
 801a2b8:	601a      	str	r2, [r3, #0]
 801a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2be:	693b      	ldr	r3, [r7, #16]
 801a2c0:	f383 8810 	msr	PRIMASK, r3
}
 801a2c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a2c6:	f3ef 8310 	mrs	r3, PRIMASK
 801a2ca:	617b      	str	r3, [r7, #20]
  return(result);
 801a2cc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801a2ce:	623b      	str	r3, [r7, #32]
 801a2d0:	2301      	movs	r3, #1
 801a2d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2d4:	69bb      	ldr	r3, [r7, #24]
 801a2d6:	f383 8810 	msr	PRIMASK, r3
}
 801a2da:	46c0      	nop			@ (mov r8, r8)
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	689a      	ldr	r2, [r3, #8]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	4908      	ldr	r1, [pc, #32]	@ (801a308 <UART_EndTxTransfer+0x7c>)
 801a2e8:	400a      	ands	r2, r1
 801a2ea:	609a      	str	r2, [r3, #8]
 801a2ec:	6a3b      	ldr	r3, [r7, #32]
 801a2ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2f0:	69fb      	ldr	r3, [r7, #28]
 801a2f2:	f383 8810 	msr	PRIMASK, r3
}
 801a2f6:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2288      	movs	r2, #136	@ 0x88
 801a2fc:	2120      	movs	r1, #32
 801a2fe:	5099      	str	r1, [r3, r2]
}
 801a300:	46c0      	nop			@ (mov r8, r8)
 801a302:	46bd      	mov	sp, r7
 801a304:	b00a      	add	sp, #40	@ 0x28
 801a306:	bd80      	pop	{r7, pc}
 801a308:	ff7fffff 	.word	0xff7fffff

0801a30c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b08e      	sub	sp, #56	@ 0x38
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a314:	f3ef 8310 	mrs	r3, PRIMASK
 801a318:	617b      	str	r3, [r7, #20]
  return(result);
 801a31a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a31c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a31e:	2301      	movs	r3, #1
 801a320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a322:	69bb      	ldr	r3, [r7, #24]
 801a324:	f383 8810 	msr	PRIMASK, r3
}
 801a328:	46c0      	nop			@ (mov r8, r8)
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	681a      	ldr	r2, [r3, #0]
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	4926      	ldr	r1, [pc, #152]	@ (801a3d0 <UART_EndRxTransfer+0xc4>)
 801a336:	400a      	ands	r2, r1
 801a338:	601a      	str	r2, [r3, #0]
 801a33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a33c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a33e:	69fb      	ldr	r3, [r7, #28]
 801a340:	f383 8810 	msr	PRIMASK, r3
}
 801a344:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a346:	f3ef 8310 	mrs	r3, PRIMASK
 801a34a:	623b      	str	r3, [r7, #32]
  return(result);
 801a34c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a34e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a350:	2301      	movs	r3, #1
 801a352:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a356:	f383 8810 	msr	PRIMASK, r3
}
 801a35a:	46c0      	nop			@ (mov r8, r8)
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	689a      	ldr	r2, [r3, #8]
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	491b      	ldr	r1, [pc, #108]	@ (801a3d4 <UART_EndRxTransfer+0xc8>)
 801a368:	400a      	ands	r2, r1
 801a36a:	609a      	str	r2, [r3, #8]
 801a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a36e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a372:	f383 8810 	msr	PRIMASK, r3
}
 801a376:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a37c:	2b01      	cmp	r3, #1
 801a37e:	d118      	bne.n	801a3b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a380:	f3ef 8310 	mrs	r3, PRIMASK
 801a384:	60bb      	str	r3, [r7, #8]
  return(result);
 801a386:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a38a:	2301      	movs	r3, #1
 801a38c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	f383 8810 	msr	PRIMASK, r3
}
 801a394:	46c0      	nop			@ (mov r8, r8)
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	681a      	ldr	r2, [r3, #0]
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	2110      	movs	r1, #16
 801a3a2:	438a      	bics	r2, r1
 801a3a4:	601a      	str	r2, [r3, #0]
 801a3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3aa:	693b      	ldr	r3, [r7, #16]
 801a3ac:	f383 8810 	msr	PRIMASK, r3
}
 801a3b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	228c      	movs	r2, #140	@ 0x8c
 801a3b6:	2120      	movs	r1, #32
 801a3b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	2200      	movs	r2, #0
 801a3be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801a3c6:	46c0      	nop			@ (mov r8, r8)
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	b00e      	add	sp, #56	@ 0x38
 801a3cc:	bd80      	pop	{r7, pc}
 801a3ce:	46c0      	nop			@ (mov r8, r8)
 801a3d0:	fffffedf 	.word	0xfffffedf
 801a3d4:	effffffe 	.word	0xeffffffe

0801a3d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b08c      	sub	sp, #48	@ 0x30
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	2220      	movs	r2, #32
 801a3ee:	4013      	ands	r3, r2
 801a3f0:	d135      	bne.n	801a45e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801a3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3f4:	2256      	movs	r2, #86	@ 0x56
 801a3f6:	2100      	movs	r1, #0
 801a3f8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a3fa:	f3ef 8310 	mrs	r3, PRIMASK
 801a3fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801a400:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a402:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a404:	2301      	movs	r3, #1
 801a406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	f383 8810 	msr	PRIMASK, r3
}
 801a40e:	46c0      	nop			@ (mov r8, r8)
 801a410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	689a      	ldr	r2, [r3, #8]
 801a416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	2180      	movs	r1, #128	@ 0x80
 801a41c:	438a      	bics	r2, r1
 801a41e:	609a      	str	r2, [r3, #8]
 801a420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a424:	697b      	ldr	r3, [r7, #20]
 801a426:	f383 8810 	msr	PRIMASK, r3
}
 801a42a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a42c:	f3ef 8310 	mrs	r3, PRIMASK
 801a430:	61bb      	str	r3, [r7, #24]
  return(result);
 801a432:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a434:	627b      	str	r3, [r7, #36]	@ 0x24
 801a436:	2301      	movs	r3, #1
 801a438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a43a:	69fb      	ldr	r3, [r7, #28]
 801a43c:	f383 8810 	msr	PRIMASK, r3
}
 801a440:	46c0      	nop			@ (mov r8, r8)
 801a442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	681a      	ldr	r2, [r3, #0]
 801a448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	2140      	movs	r1, #64	@ 0x40
 801a44e:	430a      	orrs	r2, r1
 801a450:	601a      	str	r2, [r3, #0]
 801a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a454:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a456:	6a3b      	ldr	r3, [r7, #32]
 801a458:	f383 8810 	msr	PRIMASK, r3
}
 801a45c:	e004      	b.n	801a468 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 801a45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a460:	0018      	movs	r0, r3
 801a462:	f7ff fa99 	bl	8019998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a466:	46c0      	nop			@ (mov r8, r8)
 801a468:	46c0      	nop			@ (mov r8, r8)
 801a46a:	46bd      	mov	sp, r7
 801a46c:	b00c      	add	sp, #48	@ 0x30
 801a46e:	bd80      	pop	{r7, pc}

0801a470 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801a470:	b580      	push	{r7, lr}
 801a472:	b084      	sub	sp, #16
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a47c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	0018      	movs	r0, r3
 801a482:	f7ff fa91 	bl	80199a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a486:	46c0      	nop			@ (mov r8, r8)
 801a488:	46bd      	mov	sp, r7
 801a48a:	b004      	add	sp, #16
 801a48c:	bd80      	pop	{r7, pc}
	...

0801a490 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801a490:	b580      	push	{r7, lr}
 801a492:	b094      	sub	sp, #80	@ 0x50
 801a494:	af00      	add	r7, sp, #0
 801a496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a49c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	2220      	movs	r2, #32
 801a4a6:	4013      	ands	r3, r2
 801a4a8:	d16f      	bne.n	801a58a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801a4aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a4ac:	225e      	movs	r2, #94	@ 0x5e
 801a4ae:	2100      	movs	r1, #0
 801a4b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a4b2:	f3ef 8310 	mrs	r3, PRIMASK
 801a4b6:	61bb      	str	r3, [r7, #24]
  return(result);
 801a4b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a4ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a4bc:	2301      	movs	r3, #1
 801a4be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4c0:	69fb      	ldr	r3, [r7, #28]
 801a4c2:	f383 8810 	msr	PRIMASK, r3
}
 801a4c6:	46c0      	nop			@ (mov r8, r8)
 801a4c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	681a      	ldr	r2, [r3, #0]
 801a4ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	493a      	ldr	r1, [pc, #232]	@ (801a5bc <UART_DMAReceiveCplt+0x12c>)
 801a4d4:	400a      	ands	r2, r1
 801a4d6:	601a      	str	r2, [r3, #0]
 801a4d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a4da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4dc:	6a3b      	ldr	r3, [r7, #32]
 801a4de:	f383 8810 	msr	PRIMASK, r3
}
 801a4e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a4e4:	f3ef 8310 	mrs	r3, PRIMASK
 801a4e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a4ec:	647b      	str	r3, [r7, #68]	@ 0x44
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4f4:	f383 8810 	msr	PRIMASK, r3
}
 801a4f8:	46c0      	nop			@ (mov r8, r8)
 801a4fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	689a      	ldr	r2, [r3, #8]
 801a500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	2101      	movs	r1, #1
 801a506:	438a      	bics	r2, r1
 801a508:	609a      	str	r2, [r3, #8]
 801a50a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a510:	f383 8810 	msr	PRIMASK, r3
}
 801a514:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a516:	f3ef 8310 	mrs	r3, PRIMASK
 801a51a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a51e:	643b      	str	r3, [r7, #64]	@ 0x40
 801a520:	2301      	movs	r3, #1
 801a522:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a526:	f383 8810 	msr	PRIMASK, r3
}
 801a52a:	46c0      	nop			@ (mov r8, r8)
 801a52c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	689a      	ldr	r2, [r3, #8]
 801a532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	2140      	movs	r1, #64	@ 0x40
 801a538:	438a      	bics	r2, r1
 801a53a:	609a      	str	r2, [r3, #8]
 801a53c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a53e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a542:	f383 8810 	msr	PRIMASK, r3
}
 801a546:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801a548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a54a:	228c      	movs	r2, #140	@ 0x8c
 801a54c:	2120      	movs	r1, #32
 801a54e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a554:	2b01      	cmp	r3, #1
 801a556:	d118      	bne.n	801a58a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a558:	f3ef 8310 	mrs	r3, PRIMASK
 801a55c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a55e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a562:	2301      	movs	r3, #1
 801a564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a566:	693b      	ldr	r3, [r7, #16]
 801a568:	f383 8810 	msr	PRIMASK, r3
}
 801a56c:	46c0      	nop			@ (mov r8, r8)
 801a56e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	681a      	ldr	r2, [r3, #0]
 801a574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	2110      	movs	r1, #16
 801a57a:	438a      	bics	r2, r1
 801a57c:	601a      	str	r2, [r3, #0]
 801a57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a582:	697b      	ldr	r3, [r7, #20]
 801a584:	f383 8810 	msr	PRIMASK, r3
}
 801a588:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a58c:	2200      	movs	r2, #0
 801a58e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a594:	2b01      	cmp	r3, #1
 801a596:	d108      	bne.n	801a5aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a59a:	225c      	movs	r2, #92	@ 0x5c
 801a59c:	5a9a      	ldrh	r2, [r3, r2]
 801a59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a5a0:	0011      	movs	r1, r2
 801a5a2:	0018      	movs	r0, r3
 801a5a4:	f7ff fa20 	bl	80199e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a5a8:	e003      	b.n	801a5b2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 801a5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a5ac:	0018      	movs	r0, r3
 801a5ae:	f7ff fa03 	bl	80199b8 <HAL_UART_RxCpltCallback>
}
 801a5b2:	46c0      	nop			@ (mov r8, r8)
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	b014      	add	sp, #80	@ 0x50
 801a5b8:	bd80      	pop	{r7, pc}
 801a5ba:	46c0      	nop			@ (mov r8, r8)
 801a5bc:	fffffeff 	.word	0xfffffeff

0801a5c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b084      	sub	sp, #16
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a5cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	2201      	movs	r2, #1
 801a5d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5d8:	2b01      	cmp	r3, #1
 801a5da:	d10a      	bne.n	801a5f2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	225c      	movs	r2, #92	@ 0x5c
 801a5e0:	5a9b      	ldrh	r3, [r3, r2]
 801a5e2:	085b      	lsrs	r3, r3, #1
 801a5e4:	b29a      	uxth	r2, r3
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	0011      	movs	r1, r2
 801a5ea:	0018      	movs	r0, r3
 801a5ec:	f7ff f9fc 	bl	80199e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a5f0:	e003      	b.n	801a5fa <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	0018      	movs	r0, r3
 801a5f6:	f7ff f9e7 	bl	80199c8 <HAL_UART_RxHalfCpltCallback>
}
 801a5fa:	46c0      	nop			@ (mov r8, r8)
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	b004      	add	sp, #16
 801a600:	bd80      	pop	{r7, pc}

0801a602 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801a602:	b580      	push	{r7, lr}
 801a604:	b086      	sub	sp, #24
 801a606:	af00      	add	r7, sp, #0
 801a608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a60e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801a610:	697b      	ldr	r3, [r7, #20]
 801a612:	2288      	movs	r2, #136	@ 0x88
 801a614:	589b      	ldr	r3, [r3, r2]
 801a616:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801a618:	697b      	ldr	r3, [r7, #20]
 801a61a:	228c      	movs	r2, #140	@ 0x8c
 801a61c:	589b      	ldr	r3, [r3, r2]
 801a61e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801a620:	697b      	ldr	r3, [r7, #20]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	689b      	ldr	r3, [r3, #8]
 801a626:	2280      	movs	r2, #128	@ 0x80
 801a628:	4013      	ands	r3, r2
 801a62a:	2b80      	cmp	r3, #128	@ 0x80
 801a62c:	d10a      	bne.n	801a644 <UART_DMAError+0x42>
 801a62e:	693b      	ldr	r3, [r7, #16]
 801a630:	2b21      	cmp	r3, #33	@ 0x21
 801a632:	d107      	bne.n	801a644 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801a634:	697b      	ldr	r3, [r7, #20]
 801a636:	2256      	movs	r2, #86	@ 0x56
 801a638:	2100      	movs	r1, #0
 801a63a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801a63c:	697b      	ldr	r3, [r7, #20]
 801a63e:	0018      	movs	r0, r3
 801a640:	f7ff fe24 	bl	801a28c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	689b      	ldr	r3, [r3, #8]
 801a64a:	2240      	movs	r2, #64	@ 0x40
 801a64c:	4013      	ands	r3, r2
 801a64e:	2b40      	cmp	r3, #64	@ 0x40
 801a650:	d10a      	bne.n	801a668 <UART_DMAError+0x66>
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	2b22      	cmp	r3, #34	@ 0x22
 801a656:	d107      	bne.n	801a668 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801a658:	697b      	ldr	r3, [r7, #20]
 801a65a:	225e      	movs	r2, #94	@ 0x5e
 801a65c:	2100      	movs	r1, #0
 801a65e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801a660:	697b      	ldr	r3, [r7, #20]
 801a662:	0018      	movs	r0, r3
 801a664:	f7ff fe52 	bl	801a30c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	2290      	movs	r2, #144	@ 0x90
 801a66c:	589b      	ldr	r3, [r3, r2]
 801a66e:	2210      	movs	r2, #16
 801a670:	431a      	orrs	r2, r3
 801a672:	697b      	ldr	r3, [r7, #20]
 801a674:	2190      	movs	r1, #144	@ 0x90
 801a676:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a678:	697b      	ldr	r3, [r7, #20]
 801a67a:	0018      	movs	r0, r3
 801a67c:	f7ff f9ac 	bl	80199d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a680:	46c0      	nop			@ (mov r8, r8)
 801a682:	46bd      	mov	sp, r7
 801a684:	b006      	add	sp, #24
 801a686:	bd80      	pop	{r7, pc}

0801a688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b084      	sub	sp, #16
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	225e      	movs	r2, #94	@ 0x5e
 801a69a:	2100      	movs	r1, #0
 801a69c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	0018      	movs	r0, r3
 801a6a2:	f7ff f999 	bl	80199d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a6a6:	46c0      	nop			@ (mov r8, r8)
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	b004      	add	sp, #16
 801a6ac:	bd80      	pop	{r7, pc}

0801a6ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a6ae:	b580      	push	{r7, lr}
 801a6b0:	b086      	sub	sp, #24
 801a6b2:	af00      	add	r7, sp, #0
 801a6b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a6b6:	f3ef 8310 	mrs	r3, PRIMASK
 801a6ba:	60bb      	str	r3, [r7, #8]
  return(result);
 801a6bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a6be:	617b      	str	r3, [r7, #20]
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	f383 8810 	msr	PRIMASK, r3
}
 801a6ca:	46c0      	nop			@ (mov r8, r8)
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	681a      	ldr	r2, [r3, #0]
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	2140      	movs	r1, #64	@ 0x40
 801a6d8:	438a      	bics	r2, r1
 801a6da:	601a      	str	r2, [r3, #0]
 801a6dc:	697b      	ldr	r3, [r7, #20]
 801a6de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6e0:	693b      	ldr	r3, [r7, #16]
 801a6e2:	f383 8810 	msr	PRIMASK, r3
}
 801a6e6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	2288      	movs	r2, #136	@ 0x88
 801a6ec:	2120      	movs	r1, #32
 801a6ee:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	0018      	movs	r0, r3
 801a6fa:	f7ff f94d 	bl	8019998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a6fe:	46c0      	nop			@ (mov r8, r8)
 801a700:	46bd      	mov	sp, r7
 801a702:	b006      	add	sp, #24
 801a704:	bd80      	pop	{r7, pc}

0801a706 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a706:	b580      	push	{r7, lr}
 801a708:	b082      	sub	sp, #8
 801a70a:	af00      	add	r7, sp, #0
 801a70c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a70e:	46c0      	nop			@ (mov r8, r8)
 801a710:	46bd      	mov	sp, r7
 801a712:	b002      	add	sp, #8
 801a714:	bd80      	pop	{r7, pc}

0801a716 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a716:	b580      	push	{r7, lr}
 801a718:	b082      	sub	sp, #8
 801a71a:	af00      	add	r7, sp, #0
 801a71c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a71e:	46c0      	nop			@ (mov r8, r8)
 801a720:	46bd      	mov	sp, r7
 801a722:	b002      	add	sp, #8
 801a724:	bd80      	pop	{r7, pc}

0801a726 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a726:	b580      	push	{r7, lr}
 801a728:	b082      	sub	sp, #8
 801a72a:	af00      	add	r7, sp, #0
 801a72c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a72e:	46c0      	nop			@ (mov r8, r8)
 801a730:	46bd      	mov	sp, r7
 801a732:	b002      	add	sp, #8
 801a734:	bd80      	pop	{r7, pc}
	...

0801a738 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a738:	b580      	push	{r7, lr}
 801a73a:	b084      	sub	sp, #16
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	2284      	movs	r2, #132	@ 0x84
 801a744:	5c9b      	ldrb	r3, [r3, r2]
 801a746:	2b01      	cmp	r3, #1
 801a748:	d101      	bne.n	801a74e <HAL_UARTEx_DisableFifoMode+0x16>
 801a74a:	2302      	movs	r3, #2
 801a74c:	e027      	b.n	801a79e <HAL_UARTEx_DisableFifoMode+0x66>
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	2284      	movs	r2, #132	@ 0x84
 801a752:	2101      	movs	r1, #1
 801a754:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	2288      	movs	r2, #136	@ 0x88
 801a75a:	2124      	movs	r1, #36	@ 0x24
 801a75c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	681a      	ldr	r2, [r3, #0]
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	2101      	movs	r1, #1
 801a772:	438a      	bics	r2, r1
 801a774:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	4a0b      	ldr	r2, [pc, #44]	@ (801a7a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 801a77a:	4013      	ands	r3, r2
 801a77c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	2200      	movs	r2, #0
 801a782:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	68fa      	ldr	r2, [r7, #12]
 801a78a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2288      	movs	r2, #136	@ 0x88
 801a790:	2120      	movs	r1, #32
 801a792:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	2284      	movs	r2, #132	@ 0x84
 801a798:	2100      	movs	r1, #0
 801a79a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a79c:	2300      	movs	r3, #0
}
 801a79e:	0018      	movs	r0, r3
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	b004      	add	sp, #16
 801a7a4:	bd80      	pop	{r7, pc}
 801a7a6:	46c0      	nop			@ (mov r8, r8)
 801a7a8:	dfffffff 	.word	0xdfffffff

0801a7ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b084      	sub	sp, #16
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
 801a7b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	2284      	movs	r2, #132	@ 0x84
 801a7ba:	5c9b      	ldrb	r3, [r3, r2]
 801a7bc:	2b01      	cmp	r3, #1
 801a7be:	d101      	bne.n	801a7c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a7c0:	2302      	movs	r3, #2
 801a7c2:	e02e      	b.n	801a822 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	2284      	movs	r2, #132	@ 0x84
 801a7c8:	2101      	movs	r1, #1
 801a7ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2288      	movs	r2, #136	@ 0x88
 801a7d0:	2124      	movs	r1, #36	@ 0x24
 801a7d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	681a      	ldr	r2, [r3, #0]
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	2101      	movs	r1, #1
 801a7e8:	438a      	bics	r2, r1
 801a7ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	689b      	ldr	r3, [r3, #8]
 801a7f2:	00db      	lsls	r3, r3, #3
 801a7f4:	08d9      	lsrs	r1, r3, #3
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	683a      	ldr	r2, [r7, #0]
 801a7fc:	430a      	orrs	r2, r1
 801a7fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	0018      	movs	r0, r3
 801a804:	f000 f854 	bl	801a8b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	68fa      	ldr	r2, [r7, #12]
 801a80e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	2288      	movs	r2, #136	@ 0x88
 801a814:	2120      	movs	r1, #32
 801a816:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	2284      	movs	r2, #132	@ 0x84
 801a81c:	2100      	movs	r1, #0
 801a81e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a820:	2300      	movs	r3, #0
}
 801a822:	0018      	movs	r0, r3
 801a824:	46bd      	mov	sp, r7
 801a826:	b004      	add	sp, #16
 801a828:	bd80      	pop	{r7, pc}
	...

0801a82c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b084      	sub	sp, #16
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
 801a834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	2284      	movs	r2, #132	@ 0x84
 801a83a:	5c9b      	ldrb	r3, [r3, r2]
 801a83c:	2b01      	cmp	r3, #1
 801a83e:	d101      	bne.n	801a844 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a840:	2302      	movs	r3, #2
 801a842:	e02f      	b.n	801a8a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	2284      	movs	r2, #132	@ 0x84
 801a848:	2101      	movs	r1, #1
 801a84a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	2288      	movs	r2, #136	@ 0x88
 801a850:	2124      	movs	r1, #36	@ 0x24
 801a852:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	681a      	ldr	r2, [r3, #0]
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2101      	movs	r1, #1
 801a868:	438a      	bics	r2, r1
 801a86a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	689b      	ldr	r3, [r3, #8]
 801a872:	4a0e      	ldr	r2, [pc, #56]	@ (801a8ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 801a874:	4013      	ands	r3, r2
 801a876:	0019      	movs	r1, r3
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	683a      	ldr	r2, [r7, #0]
 801a87e:	430a      	orrs	r2, r1
 801a880:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	0018      	movs	r0, r3
 801a886:	f000 f813 	bl	801a8b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	68fa      	ldr	r2, [r7, #12]
 801a890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	2288      	movs	r2, #136	@ 0x88
 801a896:	2120      	movs	r1, #32
 801a898:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	2284      	movs	r2, #132	@ 0x84
 801a89e:	2100      	movs	r1, #0
 801a8a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a8a2:	2300      	movs	r3, #0
}
 801a8a4:	0018      	movs	r0, r3
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	b004      	add	sp, #16
 801a8aa:	bd80      	pop	{r7, pc}
 801a8ac:	f1ffffff 	.word	0xf1ffffff

0801a8b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8b2:	b085      	sub	sp, #20
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d108      	bne.n	801a8d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	226a      	movs	r2, #106	@ 0x6a
 801a8c4:	2101      	movs	r1, #1
 801a8c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2268      	movs	r2, #104	@ 0x68
 801a8cc:	2101      	movs	r1, #1
 801a8ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a8d0:	e043      	b.n	801a95a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a8d2:	260f      	movs	r6, #15
 801a8d4:	19bb      	adds	r3, r7, r6
 801a8d6:	2208      	movs	r2, #8
 801a8d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a8da:	200e      	movs	r0, #14
 801a8dc:	183b      	adds	r3, r7, r0
 801a8de:	2208      	movs	r2, #8
 801a8e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	689b      	ldr	r3, [r3, #8]
 801a8e8:	0e5b      	lsrs	r3, r3, #25
 801a8ea:	b2da      	uxtb	r2, r3
 801a8ec:	240d      	movs	r4, #13
 801a8ee:	193b      	adds	r3, r7, r4
 801a8f0:	2107      	movs	r1, #7
 801a8f2:	400a      	ands	r2, r1
 801a8f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	689b      	ldr	r3, [r3, #8]
 801a8fc:	0f5b      	lsrs	r3, r3, #29
 801a8fe:	b2da      	uxtb	r2, r3
 801a900:	250c      	movs	r5, #12
 801a902:	197b      	adds	r3, r7, r5
 801a904:	2107      	movs	r1, #7
 801a906:	400a      	ands	r2, r1
 801a908:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a90a:	183b      	adds	r3, r7, r0
 801a90c:	781b      	ldrb	r3, [r3, #0]
 801a90e:	197a      	adds	r2, r7, r5
 801a910:	7812      	ldrb	r2, [r2, #0]
 801a912:	4914      	ldr	r1, [pc, #80]	@ (801a964 <UARTEx_SetNbDataToProcess+0xb4>)
 801a914:	5c8a      	ldrb	r2, [r1, r2]
 801a916:	435a      	muls	r2, r3
 801a918:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 801a91a:	197b      	adds	r3, r7, r5
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	4a12      	ldr	r2, [pc, #72]	@ (801a968 <UARTEx_SetNbDataToProcess+0xb8>)
 801a920:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a922:	0019      	movs	r1, r3
 801a924:	f7e5 fc82 	bl	800022c <__divsi3>
 801a928:	0003      	movs	r3, r0
 801a92a:	b299      	uxth	r1, r3
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	226a      	movs	r2, #106	@ 0x6a
 801a930:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a932:	19bb      	adds	r3, r7, r6
 801a934:	781b      	ldrb	r3, [r3, #0]
 801a936:	193a      	adds	r2, r7, r4
 801a938:	7812      	ldrb	r2, [r2, #0]
 801a93a:	490a      	ldr	r1, [pc, #40]	@ (801a964 <UARTEx_SetNbDataToProcess+0xb4>)
 801a93c:	5c8a      	ldrb	r2, [r1, r2]
 801a93e:	435a      	muls	r2, r3
 801a940:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801a942:	193b      	adds	r3, r7, r4
 801a944:	781b      	ldrb	r3, [r3, #0]
 801a946:	4a08      	ldr	r2, [pc, #32]	@ (801a968 <UARTEx_SetNbDataToProcess+0xb8>)
 801a948:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a94a:	0019      	movs	r1, r3
 801a94c:	f7e5 fc6e 	bl	800022c <__divsi3>
 801a950:	0003      	movs	r3, r0
 801a952:	b299      	uxth	r1, r3
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	2268      	movs	r2, #104	@ 0x68
 801a958:	5299      	strh	r1, [r3, r2]
}
 801a95a:	46c0      	nop			@ (mov r8, r8)
 801a95c:	46bd      	mov	sp, r7
 801a95e:	b005      	add	sp, #20
 801a960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a962:	46c0      	nop			@ (mov r8, r8)
 801a964:	0801b1d0 	.word	0x0801b1d0
 801a968:	0801b1d8 	.word	0x0801b1d8

0801a96c <malloc>:
 801a96c:	b510      	push	{r4, lr}
 801a96e:	4b03      	ldr	r3, [pc, #12]	@ (801a97c <malloc+0x10>)
 801a970:	0001      	movs	r1, r0
 801a972:	6818      	ldr	r0, [r3, #0]
 801a974:	f000 f830 	bl	801a9d8 <_malloc_r>
 801a978:	bd10      	pop	{r4, pc}
 801a97a:	46c0      	nop			@ (mov r8, r8)
 801a97c:	20000284 	.word	0x20000284

0801a980 <free>:
 801a980:	b510      	push	{r4, lr}
 801a982:	4b03      	ldr	r3, [pc, #12]	@ (801a990 <free+0x10>)
 801a984:	0001      	movs	r1, r0
 801a986:	6818      	ldr	r0, [r3, #0]
 801a988:	f000 f938 	bl	801abfc <_free_r>
 801a98c:	bd10      	pop	{r4, pc}
 801a98e:	46c0      	nop			@ (mov r8, r8)
 801a990:	20000284 	.word	0x20000284

0801a994 <sbrk_aligned>:
 801a994:	b570      	push	{r4, r5, r6, lr}
 801a996:	4e0f      	ldr	r6, [pc, #60]	@ (801a9d4 <sbrk_aligned+0x40>)
 801a998:	000d      	movs	r5, r1
 801a99a:	6831      	ldr	r1, [r6, #0]
 801a99c:	0004      	movs	r4, r0
 801a99e:	2900      	cmp	r1, #0
 801a9a0:	d102      	bne.n	801a9a8 <sbrk_aligned+0x14>
 801a9a2:	f000 f8e3 	bl	801ab6c <_sbrk_r>
 801a9a6:	6030      	str	r0, [r6, #0]
 801a9a8:	0029      	movs	r1, r5
 801a9aa:	0020      	movs	r0, r4
 801a9ac:	f000 f8de 	bl	801ab6c <_sbrk_r>
 801a9b0:	1c43      	adds	r3, r0, #1
 801a9b2:	d103      	bne.n	801a9bc <sbrk_aligned+0x28>
 801a9b4:	2501      	movs	r5, #1
 801a9b6:	426d      	negs	r5, r5
 801a9b8:	0028      	movs	r0, r5
 801a9ba:	bd70      	pop	{r4, r5, r6, pc}
 801a9bc:	2303      	movs	r3, #3
 801a9be:	1cc5      	adds	r5, r0, #3
 801a9c0:	439d      	bics	r5, r3
 801a9c2:	42a8      	cmp	r0, r5
 801a9c4:	d0f8      	beq.n	801a9b8 <sbrk_aligned+0x24>
 801a9c6:	1a29      	subs	r1, r5, r0
 801a9c8:	0020      	movs	r0, r4
 801a9ca:	f000 f8cf 	bl	801ab6c <_sbrk_r>
 801a9ce:	3001      	adds	r0, #1
 801a9d0:	d1f2      	bne.n	801a9b8 <sbrk_aligned+0x24>
 801a9d2:	e7ef      	b.n	801a9b4 <sbrk_aligned+0x20>
 801a9d4:	20002230 	.word	0x20002230

0801a9d8 <_malloc_r>:
 801a9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a9da:	2203      	movs	r2, #3
 801a9dc:	1ccb      	adds	r3, r1, #3
 801a9de:	4393      	bics	r3, r2
 801a9e0:	3308      	adds	r3, #8
 801a9e2:	0005      	movs	r5, r0
 801a9e4:	001f      	movs	r7, r3
 801a9e6:	2b0c      	cmp	r3, #12
 801a9e8:	d234      	bcs.n	801aa54 <_malloc_r+0x7c>
 801a9ea:	270c      	movs	r7, #12
 801a9ec:	42b9      	cmp	r1, r7
 801a9ee:	d833      	bhi.n	801aa58 <_malloc_r+0x80>
 801a9f0:	0028      	movs	r0, r5
 801a9f2:	f000 f871 	bl	801aad8 <__malloc_lock>
 801a9f6:	4e37      	ldr	r6, [pc, #220]	@ (801aad4 <_malloc_r+0xfc>)
 801a9f8:	6833      	ldr	r3, [r6, #0]
 801a9fa:	001c      	movs	r4, r3
 801a9fc:	2c00      	cmp	r4, #0
 801a9fe:	d12f      	bne.n	801aa60 <_malloc_r+0x88>
 801aa00:	0039      	movs	r1, r7
 801aa02:	0028      	movs	r0, r5
 801aa04:	f7ff ffc6 	bl	801a994 <sbrk_aligned>
 801aa08:	0004      	movs	r4, r0
 801aa0a:	1c43      	adds	r3, r0, #1
 801aa0c:	d15f      	bne.n	801aace <_malloc_r+0xf6>
 801aa0e:	6834      	ldr	r4, [r6, #0]
 801aa10:	9400      	str	r4, [sp, #0]
 801aa12:	9b00      	ldr	r3, [sp, #0]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d14a      	bne.n	801aaae <_malloc_r+0xd6>
 801aa18:	2c00      	cmp	r4, #0
 801aa1a:	d052      	beq.n	801aac2 <_malloc_r+0xea>
 801aa1c:	6823      	ldr	r3, [r4, #0]
 801aa1e:	0028      	movs	r0, r5
 801aa20:	18e3      	adds	r3, r4, r3
 801aa22:	9900      	ldr	r1, [sp, #0]
 801aa24:	9301      	str	r3, [sp, #4]
 801aa26:	f000 f8a1 	bl	801ab6c <_sbrk_r>
 801aa2a:	9b01      	ldr	r3, [sp, #4]
 801aa2c:	4283      	cmp	r3, r0
 801aa2e:	d148      	bne.n	801aac2 <_malloc_r+0xea>
 801aa30:	6823      	ldr	r3, [r4, #0]
 801aa32:	0028      	movs	r0, r5
 801aa34:	1aff      	subs	r7, r7, r3
 801aa36:	0039      	movs	r1, r7
 801aa38:	f7ff ffac 	bl	801a994 <sbrk_aligned>
 801aa3c:	3001      	adds	r0, #1
 801aa3e:	d040      	beq.n	801aac2 <_malloc_r+0xea>
 801aa40:	6823      	ldr	r3, [r4, #0]
 801aa42:	19db      	adds	r3, r3, r7
 801aa44:	6023      	str	r3, [r4, #0]
 801aa46:	6833      	ldr	r3, [r6, #0]
 801aa48:	685a      	ldr	r2, [r3, #4]
 801aa4a:	2a00      	cmp	r2, #0
 801aa4c:	d133      	bne.n	801aab6 <_malloc_r+0xde>
 801aa4e:	9b00      	ldr	r3, [sp, #0]
 801aa50:	6033      	str	r3, [r6, #0]
 801aa52:	e019      	b.n	801aa88 <_malloc_r+0xb0>
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	dac9      	bge.n	801a9ec <_malloc_r+0x14>
 801aa58:	230c      	movs	r3, #12
 801aa5a:	602b      	str	r3, [r5, #0]
 801aa5c:	2000      	movs	r0, #0
 801aa5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801aa60:	6821      	ldr	r1, [r4, #0]
 801aa62:	1bc9      	subs	r1, r1, r7
 801aa64:	d420      	bmi.n	801aaa8 <_malloc_r+0xd0>
 801aa66:	290b      	cmp	r1, #11
 801aa68:	d90a      	bls.n	801aa80 <_malloc_r+0xa8>
 801aa6a:	19e2      	adds	r2, r4, r7
 801aa6c:	6027      	str	r7, [r4, #0]
 801aa6e:	42a3      	cmp	r3, r4
 801aa70:	d104      	bne.n	801aa7c <_malloc_r+0xa4>
 801aa72:	6032      	str	r2, [r6, #0]
 801aa74:	6863      	ldr	r3, [r4, #4]
 801aa76:	6011      	str	r1, [r2, #0]
 801aa78:	6053      	str	r3, [r2, #4]
 801aa7a:	e005      	b.n	801aa88 <_malloc_r+0xb0>
 801aa7c:	605a      	str	r2, [r3, #4]
 801aa7e:	e7f9      	b.n	801aa74 <_malloc_r+0x9c>
 801aa80:	6862      	ldr	r2, [r4, #4]
 801aa82:	42a3      	cmp	r3, r4
 801aa84:	d10e      	bne.n	801aaa4 <_malloc_r+0xcc>
 801aa86:	6032      	str	r2, [r6, #0]
 801aa88:	0028      	movs	r0, r5
 801aa8a:	f000 f82d 	bl	801aae8 <__malloc_unlock>
 801aa8e:	0020      	movs	r0, r4
 801aa90:	2207      	movs	r2, #7
 801aa92:	300b      	adds	r0, #11
 801aa94:	1d23      	adds	r3, r4, #4
 801aa96:	4390      	bics	r0, r2
 801aa98:	1ac2      	subs	r2, r0, r3
 801aa9a:	4298      	cmp	r0, r3
 801aa9c:	d0df      	beq.n	801aa5e <_malloc_r+0x86>
 801aa9e:	1a1b      	subs	r3, r3, r0
 801aaa0:	50a3      	str	r3, [r4, r2]
 801aaa2:	e7dc      	b.n	801aa5e <_malloc_r+0x86>
 801aaa4:	605a      	str	r2, [r3, #4]
 801aaa6:	e7ef      	b.n	801aa88 <_malloc_r+0xb0>
 801aaa8:	0023      	movs	r3, r4
 801aaaa:	6864      	ldr	r4, [r4, #4]
 801aaac:	e7a6      	b.n	801a9fc <_malloc_r+0x24>
 801aaae:	9c00      	ldr	r4, [sp, #0]
 801aab0:	6863      	ldr	r3, [r4, #4]
 801aab2:	9300      	str	r3, [sp, #0]
 801aab4:	e7ad      	b.n	801aa12 <_malloc_r+0x3a>
 801aab6:	001a      	movs	r2, r3
 801aab8:	685b      	ldr	r3, [r3, #4]
 801aaba:	42a3      	cmp	r3, r4
 801aabc:	d1fb      	bne.n	801aab6 <_malloc_r+0xde>
 801aabe:	2300      	movs	r3, #0
 801aac0:	e7da      	b.n	801aa78 <_malloc_r+0xa0>
 801aac2:	230c      	movs	r3, #12
 801aac4:	0028      	movs	r0, r5
 801aac6:	602b      	str	r3, [r5, #0]
 801aac8:	f000 f80e 	bl	801aae8 <__malloc_unlock>
 801aacc:	e7c6      	b.n	801aa5c <_malloc_r+0x84>
 801aace:	6007      	str	r7, [r0, #0]
 801aad0:	e7da      	b.n	801aa88 <_malloc_r+0xb0>
 801aad2:	46c0      	nop			@ (mov r8, r8)
 801aad4:	20002234 	.word	0x20002234

0801aad8 <__malloc_lock>:
 801aad8:	b510      	push	{r4, lr}
 801aada:	4802      	ldr	r0, [pc, #8]	@ (801aae4 <__malloc_lock+0xc>)
 801aadc:	f000 f882 	bl	801abe4 <__retarget_lock_acquire_recursive>
 801aae0:	bd10      	pop	{r4, pc}
 801aae2:	46c0      	nop			@ (mov r8, r8)
 801aae4:	20002374 	.word	0x20002374

0801aae8 <__malloc_unlock>:
 801aae8:	b510      	push	{r4, lr}
 801aaea:	4802      	ldr	r0, [pc, #8]	@ (801aaf4 <__malloc_unlock+0xc>)
 801aaec:	f000 f87b 	bl	801abe6 <__retarget_lock_release_recursive>
 801aaf0:	bd10      	pop	{r4, pc}
 801aaf2:	46c0      	nop			@ (mov r8, r8)
 801aaf4:	20002374 	.word	0x20002374

0801aaf8 <memcmp>:
 801aaf8:	b530      	push	{r4, r5, lr}
 801aafa:	2400      	movs	r4, #0
 801aafc:	3901      	subs	r1, #1
 801aafe:	42a2      	cmp	r2, r4
 801ab00:	d101      	bne.n	801ab06 <memcmp+0xe>
 801ab02:	2000      	movs	r0, #0
 801ab04:	e005      	b.n	801ab12 <memcmp+0x1a>
 801ab06:	5d03      	ldrb	r3, [r0, r4]
 801ab08:	3401      	adds	r4, #1
 801ab0a:	5d0d      	ldrb	r5, [r1, r4]
 801ab0c:	42ab      	cmp	r3, r5
 801ab0e:	d0f6      	beq.n	801aafe <memcmp+0x6>
 801ab10:	1b58      	subs	r0, r3, r5
 801ab12:	bd30      	pop	{r4, r5, pc}

0801ab14 <memset>:
 801ab14:	0003      	movs	r3, r0
 801ab16:	1882      	adds	r2, r0, r2
 801ab18:	4293      	cmp	r3, r2
 801ab1a:	d100      	bne.n	801ab1e <memset+0xa>
 801ab1c:	4770      	bx	lr
 801ab1e:	7019      	strb	r1, [r3, #0]
 801ab20:	3301      	adds	r3, #1
 801ab22:	e7f9      	b.n	801ab18 <memset+0x4>

0801ab24 <strchr>:
 801ab24:	b2c9      	uxtb	r1, r1
 801ab26:	7803      	ldrb	r3, [r0, #0]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d004      	beq.n	801ab36 <strchr+0x12>
 801ab2c:	428b      	cmp	r3, r1
 801ab2e:	d100      	bne.n	801ab32 <strchr+0xe>
 801ab30:	4770      	bx	lr
 801ab32:	3001      	adds	r0, #1
 801ab34:	e7f7      	b.n	801ab26 <strchr+0x2>
 801ab36:	424b      	negs	r3, r1
 801ab38:	4159      	adcs	r1, r3
 801ab3a:	4249      	negs	r1, r1
 801ab3c:	4008      	ands	r0, r1
 801ab3e:	e7f7      	b.n	801ab30 <strchr+0xc>

0801ab40 <strstr>:
 801ab40:	780a      	ldrb	r2, [r1, #0]
 801ab42:	b530      	push	{r4, r5, lr}
 801ab44:	2a00      	cmp	r2, #0
 801ab46:	d10c      	bne.n	801ab62 <strstr+0x22>
 801ab48:	bd30      	pop	{r4, r5, pc}
 801ab4a:	429a      	cmp	r2, r3
 801ab4c:	d108      	bne.n	801ab60 <strstr+0x20>
 801ab4e:	2301      	movs	r3, #1
 801ab50:	5ccc      	ldrb	r4, [r1, r3]
 801ab52:	2c00      	cmp	r4, #0
 801ab54:	d0f8      	beq.n	801ab48 <strstr+0x8>
 801ab56:	5cc5      	ldrb	r5, [r0, r3]
 801ab58:	42a5      	cmp	r5, r4
 801ab5a:	d101      	bne.n	801ab60 <strstr+0x20>
 801ab5c:	3301      	adds	r3, #1
 801ab5e:	e7f7      	b.n	801ab50 <strstr+0x10>
 801ab60:	3001      	adds	r0, #1
 801ab62:	7803      	ldrb	r3, [r0, #0]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d1f0      	bne.n	801ab4a <strstr+0xa>
 801ab68:	0018      	movs	r0, r3
 801ab6a:	e7ed      	b.n	801ab48 <strstr+0x8>

0801ab6c <_sbrk_r>:
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	b570      	push	{r4, r5, r6, lr}
 801ab70:	4d06      	ldr	r5, [pc, #24]	@ (801ab8c <_sbrk_r+0x20>)
 801ab72:	0004      	movs	r4, r0
 801ab74:	0008      	movs	r0, r1
 801ab76:	602b      	str	r3, [r5, #0]
 801ab78:	f7f1 ff60 	bl	800ca3c <_sbrk>
 801ab7c:	1c43      	adds	r3, r0, #1
 801ab7e:	d103      	bne.n	801ab88 <_sbrk_r+0x1c>
 801ab80:	682b      	ldr	r3, [r5, #0]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d000      	beq.n	801ab88 <_sbrk_r+0x1c>
 801ab86:	6023      	str	r3, [r4, #0]
 801ab88:	bd70      	pop	{r4, r5, r6, pc}
 801ab8a:	46c0      	nop			@ (mov r8, r8)
 801ab8c:	20002370 	.word	0x20002370

0801ab90 <__errno>:
 801ab90:	4b01      	ldr	r3, [pc, #4]	@ (801ab98 <__errno+0x8>)
 801ab92:	6818      	ldr	r0, [r3, #0]
 801ab94:	4770      	bx	lr
 801ab96:	46c0      	nop			@ (mov r8, r8)
 801ab98:	20000284 	.word	0x20000284

0801ab9c <__libc_init_array>:
 801ab9c:	b570      	push	{r4, r5, r6, lr}
 801ab9e:	2600      	movs	r6, #0
 801aba0:	4c0c      	ldr	r4, [pc, #48]	@ (801abd4 <__libc_init_array+0x38>)
 801aba2:	4d0d      	ldr	r5, [pc, #52]	@ (801abd8 <__libc_init_array+0x3c>)
 801aba4:	1b64      	subs	r4, r4, r5
 801aba6:	10a4      	asrs	r4, r4, #2
 801aba8:	42a6      	cmp	r6, r4
 801abaa:	d109      	bne.n	801abc0 <__libc_init_array+0x24>
 801abac:	2600      	movs	r6, #0
 801abae:	f000 f979 	bl	801aea4 <_init>
 801abb2:	4c0a      	ldr	r4, [pc, #40]	@ (801abdc <__libc_init_array+0x40>)
 801abb4:	4d0a      	ldr	r5, [pc, #40]	@ (801abe0 <__libc_init_array+0x44>)
 801abb6:	1b64      	subs	r4, r4, r5
 801abb8:	10a4      	asrs	r4, r4, #2
 801abba:	42a6      	cmp	r6, r4
 801abbc:	d105      	bne.n	801abca <__libc_init_array+0x2e>
 801abbe:	bd70      	pop	{r4, r5, r6, pc}
 801abc0:	00b3      	lsls	r3, r6, #2
 801abc2:	58eb      	ldr	r3, [r5, r3]
 801abc4:	4798      	blx	r3
 801abc6:	3601      	adds	r6, #1
 801abc8:	e7ee      	b.n	801aba8 <__libc_init_array+0xc>
 801abca:	00b3      	lsls	r3, r6, #2
 801abcc:	58eb      	ldr	r3, [r5, r3]
 801abce:	4798      	blx	r3
 801abd0:	3601      	adds	r6, #1
 801abd2:	e7f2      	b.n	801abba <__libc_init_array+0x1e>
 801abd4:	0801b1f8 	.word	0x0801b1f8
 801abd8:	0801b1f8 	.word	0x0801b1f8
 801abdc:	0801b1fc 	.word	0x0801b1fc
 801abe0:	0801b1f8 	.word	0x0801b1f8

0801abe4 <__retarget_lock_acquire_recursive>:
 801abe4:	4770      	bx	lr

0801abe6 <__retarget_lock_release_recursive>:
 801abe6:	4770      	bx	lr

0801abe8 <memcpy>:
 801abe8:	2300      	movs	r3, #0
 801abea:	b510      	push	{r4, lr}
 801abec:	429a      	cmp	r2, r3
 801abee:	d100      	bne.n	801abf2 <memcpy+0xa>
 801abf0:	bd10      	pop	{r4, pc}
 801abf2:	5ccc      	ldrb	r4, [r1, r3]
 801abf4:	54c4      	strb	r4, [r0, r3]
 801abf6:	3301      	adds	r3, #1
 801abf8:	e7f8      	b.n	801abec <memcpy+0x4>
	...

0801abfc <_free_r>:
 801abfc:	b570      	push	{r4, r5, r6, lr}
 801abfe:	0005      	movs	r5, r0
 801ac00:	1e0c      	subs	r4, r1, #0
 801ac02:	d010      	beq.n	801ac26 <_free_r+0x2a>
 801ac04:	3c04      	subs	r4, #4
 801ac06:	6823      	ldr	r3, [r4, #0]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	da00      	bge.n	801ac0e <_free_r+0x12>
 801ac0c:	18e4      	adds	r4, r4, r3
 801ac0e:	0028      	movs	r0, r5
 801ac10:	f7ff ff62 	bl	801aad8 <__malloc_lock>
 801ac14:	4a1d      	ldr	r2, [pc, #116]	@ (801ac8c <_free_r+0x90>)
 801ac16:	6813      	ldr	r3, [r2, #0]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d105      	bne.n	801ac28 <_free_r+0x2c>
 801ac1c:	6063      	str	r3, [r4, #4]
 801ac1e:	6014      	str	r4, [r2, #0]
 801ac20:	0028      	movs	r0, r5
 801ac22:	f7ff ff61 	bl	801aae8 <__malloc_unlock>
 801ac26:	bd70      	pop	{r4, r5, r6, pc}
 801ac28:	42a3      	cmp	r3, r4
 801ac2a:	d908      	bls.n	801ac3e <_free_r+0x42>
 801ac2c:	6820      	ldr	r0, [r4, #0]
 801ac2e:	1821      	adds	r1, r4, r0
 801ac30:	428b      	cmp	r3, r1
 801ac32:	d1f3      	bne.n	801ac1c <_free_r+0x20>
 801ac34:	6819      	ldr	r1, [r3, #0]
 801ac36:	685b      	ldr	r3, [r3, #4]
 801ac38:	1809      	adds	r1, r1, r0
 801ac3a:	6021      	str	r1, [r4, #0]
 801ac3c:	e7ee      	b.n	801ac1c <_free_r+0x20>
 801ac3e:	001a      	movs	r2, r3
 801ac40:	685b      	ldr	r3, [r3, #4]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d001      	beq.n	801ac4a <_free_r+0x4e>
 801ac46:	42a3      	cmp	r3, r4
 801ac48:	d9f9      	bls.n	801ac3e <_free_r+0x42>
 801ac4a:	6811      	ldr	r1, [r2, #0]
 801ac4c:	1850      	adds	r0, r2, r1
 801ac4e:	42a0      	cmp	r0, r4
 801ac50:	d10b      	bne.n	801ac6a <_free_r+0x6e>
 801ac52:	6820      	ldr	r0, [r4, #0]
 801ac54:	1809      	adds	r1, r1, r0
 801ac56:	1850      	adds	r0, r2, r1
 801ac58:	6011      	str	r1, [r2, #0]
 801ac5a:	4283      	cmp	r3, r0
 801ac5c:	d1e0      	bne.n	801ac20 <_free_r+0x24>
 801ac5e:	6818      	ldr	r0, [r3, #0]
 801ac60:	685b      	ldr	r3, [r3, #4]
 801ac62:	1841      	adds	r1, r0, r1
 801ac64:	6011      	str	r1, [r2, #0]
 801ac66:	6053      	str	r3, [r2, #4]
 801ac68:	e7da      	b.n	801ac20 <_free_r+0x24>
 801ac6a:	42a0      	cmp	r0, r4
 801ac6c:	d902      	bls.n	801ac74 <_free_r+0x78>
 801ac6e:	230c      	movs	r3, #12
 801ac70:	602b      	str	r3, [r5, #0]
 801ac72:	e7d5      	b.n	801ac20 <_free_r+0x24>
 801ac74:	6820      	ldr	r0, [r4, #0]
 801ac76:	1821      	adds	r1, r4, r0
 801ac78:	428b      	cmp	r3, r1
 801ac7a:	d103      	bne.n	801ac84 <_free_r+0x88>
 801ac7c:	6819      	ldr	r1, [r3, #0]
 801ac7e:	685b      	ldr	r3, [r3, #4]
 801ac80:	1809      	adds	r1, r1, r0
 801ac82:	6021      	str	r1, [r4, #0]
 801ac84:	6063      	str	r3, [r4, #4]
 801ac86:	6054      	str	r4, [r2, #4]
 801ac88:	e7ca      	b.n	801ac20 <_free_r+0x24>
 801ac8a:	46c0      	nop			@ (mov r8, r8)
 801ac8c:	20002234 	.word	0x20002234

0801ac90 <sqrt>:
 801ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac92:	0004      	movs	r4, r0
 801ac94:	000d      	movs	r5, r1
 801ac96:	f000 f821 	bl	801acdc <__ieee754_sqrt>
 801ac9a:	0022      	movs	r2, r4
 801ac9c:	0006      	movs	r6, r0
 801ac9e:	000f      	movs	r7, r1
 801aca0:	002b      	movs	r3, r5
 801aca2:	0020      	movs	r0, r4
 801aca4:	0029      	movs	r1, r5
 801aca6:	f7e7 fc03 	bl	80024b0 <__aeabi_dcmpun>
 801acaa:	2800      	cmp	r0, #0
 801acac:	d113      	bne.n	801acd6 <sqrt+0x46>
 801acae:	2200      	movs	r2, #0
 801acb0:	2300      	movs	r3, #0
 801acb2:	0020      	movs	r0, r4
 801acb4:	0029      	movs	r1, r5
 801acb6:	f7e5 fbbb 	bl	8000430 <__aeabi_dcmplt>
 801acba:	2800      	cmp	r0, #0
 801acbc:	d00b      	beq.n	801acd6 <sqrt+0x46>
 801acbe:	f7ff ff67 	bl	801ab90 <__errno>
 801acc2:	2321      	movs	r3, #33	@ 0x21
 801acc4:	2200      	movs	r2, #0
 801acc6:	6003      	str	r3, [r0, #0]
 801acc8:	2300      	movs	r3, #0
 801acca:	0010      	movs	r0, r2
 801accc:	0019      	movs	r1, r3
 801acce:	f7e6 f8c5 	bl	8000e5c <__aeabi_ddiv>
 801acd2:	0006      	movs	r6, r0
 801acd4:	000f      	movs	r7, r1
 801acd6:	0030      	movs	r0, r6
 801acd8:	0039      	movs	r1, r7
 801acda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801acdc <__ieee754_sqrt>:
 801acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acde:	000a      	movs	r2, r1
 801ace0:	000d      	movs	r5, r1
 801ace2:	496b      	ldr	r1, [pc, #428]	@ (801ae90 <__ieee754_sqrt+0x1b4>)
 801ace4:	0004      	movs	r4, r0
 801ace6:	0003      	movs	r3, r0
 801ace8:	0008      	movs	r0, r1
 801acea:	b087      	sub	sp, #28
 801acec:	4028      	ands	r0, r5
 801acee:	4288      	cmp	r0, r1
 801acf0:	d111      	bne.n	801ad16 <__ieee754_sqrt+0x3a>
 801acf2:	0022      	movs	r2, r4
 801acf4:	002b      	movs	r3, r5
 801acf6:	0020      	movs	r0, r4
 801acf8:	0029      	movs	r1, r5
 801acfa:	f7e6 fce9 	bl	80016d0 <__aeabi_dmul>
 801acfe:	0002      	movs	r2, r0
 801ad00:	000b      	movs	r3, r1
 801ad02:	0020      	movs	r0, r4
 801ad04:	0029      	movs	r1, r5
 801ad06:	f7e5 fce3 	bl	80006d0 <__aeabi_dadd>
 801ad0a:	0004      	movs	r4, r0
 801ad0c:	000d      	movs	r5, r1
 801ad0e:	0020      	movs	r0, r4
 801ad10:	0029      	movs	r1, r5
 801ad12:	b007      	add	sp, #28
 801ad14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad16:	2d00      	cmp	r5, #0
 801ad18:	dc11      	bgt.n	801ad3e <__ieee754_sqrt+0x62>
 801ad1a:	0069      	lsls	r1, r5, #1
 801ad1c:	0849      	lsrs	r1, r1, #1
 801ad1e:	4321      	orrs	r1, r4
 801ad20:	d0f5      	beq.n	801ad0e <__ieee754_sqrt+0x32>
 801ad22:	2000      	movs	r0, #0
 801ad24:	4285      	cmp	r5, r0
 801ad26:	d010      	beq.n	801ad4a <__ieee754_sqrt+0x6e>
 801ad28:	0022      	movs	r2, r4
 801ad2a:	002b      	movs	r3, r5
 801ad2c:	0020      	movs	r0, r4
 801ad2e:	0029      	movs	r1, r5
 801ad30:	f7e6 ffb4 	bl	8001c9c <__aeabi_dsub>
 801ad34:	0002      	movs	r2, r0
 801ad36:	000b      	movs	r3, r1
 801ad38:	f7e6 f890 	bl	8000e5c <__aeabi_ddiv>
 801ad3c:	e7e5      	b.n	801ad0a <__ieee754_sqrt+0x2e>
 801ad3e:	1528      	asrs	r0, r5, #20
 801ad40:	d115      	bne.n	801ad6e <__ieee754_sqrt+0x92>
 801ad42:	2480      	movs	r4, #128	@ 0x80
 801ad44:	2100      	movs	r1, #0
 801ad46:	0364      	lsls	r4, r4, #13
 801ad48:	e007      	b.n	801ad5a <__ieee754_sqrt+0x7e>
 801ad4a:	0ada      	lsrs	r2, r3, #11
 801ad4c:	3815      	subs	r0, #21
 801ad4e:	055b      	lsls	r3, r3, #21
 801ad50:	2a00      	cmp	r2, #0
 801ad52:	d0fa      	beq.n	801ad4a <__ieee754_sqrt+0x6e>
 801ad54:	e7f5      	b.n	801ad42 <__ieee754_sqrt+0x66>
 801ad56:	0052      	lsls	r2, r2, #1
 801ad58:	3101      	adds	r1, #1
 801ad5a:	4222      	tst	r2, r4
 801ad5c:	d0fb      	beq.n	801ad56 <__ieee754_sqrt+0x7a>
 801ad5e:	1e4c      	subs	r4, r1, #1
 801ad60:	1b00      	subs	r0, r0, r4
 801ad62:	2420      	movs	r4, #32
 801ad64:	001d      	movs	r5, r3
 801ad66:	1a64      	subs	r4, r4, r1
 801ad68:	40e5      	lsrs	r5, r4
 801ad6a:	408b      	lsls	r3, r1
 801ad6c:	432a      	orrs	r2, r5
 801ad6e:	4949      	ldr	r1, [pc, #292]	@ (801ae94 <__ieee754_sqrt+0x1b8>)
 801ad70:	0312      	lsls	r2, r2, #12
 801ad72:	1844      	adds	r4, r0, r1
 801ad74:	2180      	movs	r1, #128	@ 0x80
 801ad76:	0b12      	lsrs	r2, r2, #12
 801ad78:	0349      	lsls	r1, r1, #13
 801ad7a:	4311      	orrs	r1, r2
 801ad7c:	07c0      	lsls	r0, r0, #31
 801ad7e:	d403      	bmi.n	801ad88 <__ieee754_sqrt+0xac>
 801ad80:	0fda      	lsrs	r2, r3, #31
 801ad82:	0049      	lsls	r1, r1, #1
 801ad84:	1851      	adds	r1, r2, r1
 801ad86:	005b      	lsls	r3, r3, #1
 801ad88:	2500      	movs	r5, #0
 801ad8a:	1062      	asrs	r2, r4, #1
 801ad8c:	0049      	lsls	r1, r1, #1
 801ad8e:	2480      	movs	r4, #128	@ 0x80
 801ad90:	9205      	str	r2, [sp, #20]
 801ad92:	0fda      	lsrs	r2, r3, #31
 801ad94:	1852      	adds	r2, r2, r1
 801ad96:	2016      	movs	r0, #22
 801ad98:	0029      	movs	r1, r5
 801ad9a:	005b      	lsls	r3, r3, #1
 801ad9c:	03a4      	lsls	r4, r4, #14
 801ad9e:	190e      	adds	r6, r1, r4
 801ada0:	4296      	cmp	r6, r2
 801ada2:	dc02      	bgt.n	801adaa <__ieee754_sqrt+0xce>
 801ada4:	1931      	adds	r1, r6, r4
 801ada6:	1b92      	subs	r2, r2, r6
 801ada8:	192d      	adds	r5, r5, r4
 801adaa:	0fde      	lsrs	r6, r3, #31
 801adac:	0052      	lsls	r2, r2, #1
 801adae:	3801      	subs	r0, #1
 801adb0:	1992      	adds	r2, r2, r6
 801adb2:	005b      	lsls	r3, r3, #1
 801adb4:	0864      	lsrs	r4, r4, #1
 801adb6:	2800      	cmp	r0, #0
 801adb8:	d1f1      	bne.n	801ad9e <__ieee754_sqrt+0xc2>
 801adba:	2620      	movs	r6, #32
 801adbc:	2780      	movs	r7, #128	@ 0x80
 801adbe:	0004      	movs	r4, r0
 801adc0:	9604      	str	r6, [sp, #16]
 801adc2:	063f      	lsls	r7, r7, #24
 801adc4:	183e      	adds	r6, r7, r0
 801adc6:	46b4      	mov	ip, r6
 801adc8:	428a      	cmp	r2, r1
 801adca:	dc02      	bgt.n	801add2 <__ieee754_sqrt+0xf6>
 801adcc:	d114      	bne.n	801adf8 <__ieee754_sqrt+0x11c>
 801adce:	429e      	cmp	r6, r3
 801add0:	d812      	bhi.n	801adf8 <__ieee754_sqrt+0x11c>
 801add2:	4660      	mov	r0, ip
 801add4:	4666      	mov	r6, ip
 801add6:	19c0      	adds	r0, r0, r7
 801add8:	9100      	str	r1, [sp, #0]
 801adda:	2e00      	cmp	r6, #0
 801addc:	da03      	bge.n	801ade6 <__ieee754_sqrt+0x10a>
 801adde:	43c6      	mvns	r6, r0
 801ade0:	0ff6      	lsrs	r6, r6, #31
 801ade2:	198e      	adds	r6, r1, r6
 801ade4:	9600      	str	r6, [sp, #0]
 801ade6:	1a52      	subs	r2, r2, r1
 801ade8:	4563      	cmp	r3, ip
 801adea:	4189      	sbcs	r1, r1
 801adec:	4249      	negs	r1, r1
 801adee:	1a52      	subs	r2, r2, r1
 801adf0:	4661      	mov	r1, ip
 801adf2:	1a5b      	subs	r3, r3, r1
 801adf4:	9900      	ldr	r1, [sp, #0]
 801adf6:	19e4      	adds	r4, r4, r7
 801adf8:	0fde      	lsrs	r6, r3, #31
 801adfa:	0052      	lsls	r2, r2, #1
 801adfc:	1992      	adds	r2, r2, r6
 801adfe:	9e04      	ldr	r6, [sp, #16]
 801ae00:	005b      	lsls	r3, r3, #1
 801ae02:	3e01      	subs	r6, #1
 801ae04:	087f      	lsrs	r7, r7, #1
 801ae06:	9604      	str	r6, [sp, #16]
 801ae08:	2e00      	cmp	r6, #0
 801ae0a:	d1db      	bne.n	801adc4 <__ieee754_sqrt+0xe8>
 801ae0c:	431a      	orrs	r2, r3
 801ae0e:	d01f      	beq.n	801ae50 <__ieee754_sqrt+0x174>
 801ae10:	4e21      	ldr	r6, [pc, #132]	@ (801ae98 <__ieee754_sqrt+0x1bc>)
 801ae12:	4f22      	ldr	r7, [pc, #136]	@ (801ae9c <__ieee754_sqrt+0x1c0>)
 801ae14:	6830      	ldr	r0, [r6, #0]
 801ae16:	6871      	ldr	r1, [r6, #4]
 801ae18:	683a      	ldr	r2, [r7, #0]
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	9200      	str	r2, [sp, #0]
 801ae1e:	9301      	str	r3, [sp, #4]
 801ae20:	6832      	ldr	r2, [r6, #0]
 801ae22:	6873      	ldr	r3, [r6, #4]
 801ae24:	9202      	str	r2, [sp, #8]
 801ae26:	9303      	str	r3, [sp, #12]
 801ae28:	9a00      	ldr	r2, [sp, #0]
 801ae2a:	9b01      	ldr	r3, [sp, #4]
 801ae2c:	f7e6 ff36 	bl	8001c9c <__aeabi_dsub>
 801ae30:	0002      	movs	r2, r0
 801ae32:	000b      	movs	r3, r1
 801ae34:	9802      	ldr	r0, [sp, #8]
 801ae36:	9903      	ldr	r1, [sp, #12]
 801ae38:	f7e5 fb04 	bl	8000444 <__aeabi_dcmple>
 801ae3c:	2800      	cmp	r0, #0
 801ae3e:	d007      	beq.n	801ae50 <__ieee754_sqrt+0x174>
 801ae40:	6830      	ldr	r0, [r6, #0]
 801ae42:	6871      	ldr	r1, [r6, #4]
 801ae44:	683a      	ldr	r2, [r7, #0]
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	1c67      	adds	r7, r4, #1
 801ae4a:	d10c      	bne.n	801ae66 <__ieee754_sqrt+0x18a>
 801ae4c:	9c04      	ldr	r4, [sp, #16]
 801ae4e:	3501      	adds	r5, #1
 801ae50:	4a13      	ldr	r2, [pc, #76]	@ (801aea0 <__ieee754_sqrt+0x1c4>)
 801ae52:	106b      	asrs	r3, r5, #1
 801ae54:	189b      	adds	r3, r3, r2
 801ae56:	9a05      	ldr	r2, [sp, #20]
 801ae58:	07ed      	lsls	r5, r5, #31
 801ae5a:	0864      	lsrs	r4, r4, #1
 801ae5c:	0512      	lsls	r2, r2, #20
 801ae5e:	4325      	orrs	r5, r4
 801ae60:	0028      	movs	r0, r5
 801ae62:	18d1      	adds	r1, r2, r3
 801ae64:	e751      	b.n	801ad0a <__ieee754_sqrt+0x2e>
 801ae66:	f7e5 fc33 	bl	80006d0 <__aeabi_dadd>
 801ae6a:	6877      	ldr	r7, [r6, #4]
 801ae6c:	6836      	ldr	r6, [r6, #0]
 801ae6e:	0002      	movs	r2, r0
 801ae70:	000b      	movs	r3, r1
 801ae72:	0030      	movs	r0, r6
 801ae74:	0039      	movs	r1, r7
 801ae76:	f7e5 fadb 	bl	8000430 <__aeabi_dcmplt>
 801ae7a:	2800      	cmp	r0, #0
 801ae7c:	d004      	beq.n	801ae88 <__ieee754_sqrt+0x1ac>
 801ae7e:	3402      	adds	r4, #2
 801ae80:	4263      	negs	r3, r4
 801ae82:	4163      	adcs	r3, r4
 801ae84:	18ed      	adds	r5, r5, r3
 801ae86:	e7e3      	b.n	801ae50 <__ieee754_sqrt+0x174>
 801ae88:	2301      	movs	r3, #1
 801ae8a:	3401      	adds	r4, #1
 801ae8c:	439c      	bics	r4, r3
 801ae8e:	e7df      	b.n	801ae50 <__ieee754_sqrt+0x174>
 801ae90:	7ff00000 	.word	0x7ff00000
 801ae94:	fffffc01 	.word	0xfffffc01
 801ae98:	0801b1e8 	.word	0x0801b1e8
 801ae9c:	0801b1e0 	.word	0x0801b1e0
 801aea0:	3fe00000 	.word	0x3fe00000

0801aea4 <_init>:
 801aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aea6:	46c0      	nop			@ (mov r8, r8)
 801aea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aeaa:	bc08      	pop	{r3}
 801aeac:	469e      	mov	lr, r3
 801aeae:	4770      	bx	lr

0801aeb0 <_fini>:
 801aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeb2:	46c0      	nop			@ (mov r8, r8)
 801aeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aeb6:	bc08      	pop	{r3}
 801aeb8:	469e      	mov	lr, r3
 801aeba:	4770      	bx	lr
 801aebc:	0000      	movs	r0, r0
	...

0801aec0 <__FLASH_Program_Fast_veneer>:
 801aec0:	b401      	push	{r0}
 801aec2:	4802      	ldr	r0, [pc, #8]	@ (801aecc <__FLASH_Program_Fast_veneer+0xc>)
 801aec4:	4684      	mov	ip, r0
 801aec6:	bc01      	pop	{r0}
 801aec8:	4760      	bx	ip
 801aeca:	bf00      	nop
 801aecc:	200002d5 	.word	0x200002d5

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <aTxBuffer>:
20000004:	ff000007 00080000                       ........

2000000c <dpytab>:
2000000c:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
2000001c:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
2000002c:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
2000003c:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

2000004c <BluetoothState>:
2000004c:	00000001                                ....

20000050 <Eventos>:
20000050:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

2000006c <Mediciones>:
2000006c:	12222111 00001333                       .!".3...

20000074 <Alarmas>:
20000074:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000084:	00000000                                ....

20000088 <DatosMAC>:
20000088:	56781234 00009999                       4.xV....

20000090 <DatosFirmware>:
20000090:	                                         ..

20000092 <PNU_0x3000>:
20000092:	                                         ..

20000094 <PNU_0x3004>:
20000094:	                                         (.

20000096 <PNU_0x3006>:
20000096:	                                         ..

20000098 <PNU_0x3008>:
20000098:	                                         ..

2000009a <PNU_0x300C>:
2000009a:	                                         ..

2000009c <PNU_0x3010>:
2000009c:	                                         ..

2000009e <PNU_0x3012>:
2000009e:	                                         (.

200000a0 <PNU_0x3014>:
200000a0:	                                         ..

200000a2 <PNU_0x3016>:
200000a2:	                                         ..

200000a4 <PNU_0x3018>:
200000a4:	                                         ..

200000a6 <PNU_0x301A>:
200000a6:	                                         2.

200000a8 <PNU_0x301C>:
200000a8:	                                         Z.

200000aa <PNU_0x301E>:
200000aa:	                                         ..

200000ac <PNU_0x3104>:
200000ac:	                                         ..

200000ae <PNU_0x3106>:
200000ae:	                                         ..

200000b0 <PNU_0x3108>:
200000b0:	                                         ..

200000b2 <PNU_0x310A>:
200000b2:	                                         ..

200000b4 <PNU_0x310C>:
200000b4:	                                         _.

200000b6 <PNU_0x310E>:
200000b6:	                                         d.

200000b8 <Plantilla>:
	...
20000100:	00000001 00000000 00000000 00000000     ................
	...

20000138 <copiaPlantilla>:
	...
20000180:	00000100 00000000 00000000 00000000     ................
	...

200001b8 <reevolt_div>:
200001b8:	                                         .

200001b9 <reevolt_mul>:
200001b9:	                                         .

200001ba <reeEstado1>:
200001ba:	                                         .

200001bb <reeLat1>:
200001bb:	                                         .

200001bc <reeLat2>:
200001bc:	                                         .

200001bd <reeLat3>:
200001bd:	                                         .

200001be <reeLat4>:
200001be:	                                         .

200001bf <reeLong1>:
200001bf:	                                         .

200001c0 <reeLong2>:
200001c0:	                                         .

200001c1 <reeLong3>:
200001c1:	                                         .

200001c2 <reeLong4>:
200001c2:	                                         ..

200001c4 <daysToMonth>:
200001c4:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001d4:	00000078 00000097 000000b6 000000d5     x...............
200001e4:	000000f3 00000111 00000130 0000014e     ........0...N...

200001f4 <PFULLDEF_Px_PORT>:
200001f4:	50000400 50000400 50000400 50000400     ...P...P...P...P
20000204:	50000400                                ...P

20000208 <PFULLDEF_Px_PIN>:
20000208:	40101010 00000010                       ...@....

20000210 <PFULLDEF_MPx_PORT>:
20000210:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000220 <PFULLDEF_MPx_PIN>:
20000220:	08080808                                ....

20000224 <firstFlagPuerta1>:
20000224:	00000001                                ....

20000228 <difName>:
20000228:	5f454c42 4e2b5441 49454d41 5245424d     BLE_AT+NAMEIMBER
20000238:	45482d41 48544c41 00000a0d 00000000     A-HEALTH........
	...

2000025c <SystemCoreClock>:
2000025c:	003d0900                                ..=.

20000260 <tRTP1000>:
20000260:	00000008 00000000 00000000 00000000     ................

20000270 <pagina_borrado>:
20000270:	00000040                                @...

20000274 <direccion_fw>:
20000274:	08020000                                ....

20000278 <contador_bloques_fw>:
20000278:	00000010                                ....

2000027c <uwTickPrio>:
2000027c:	00000004                                ....

20000280 <uwTickFreq>:
20000280:	00000001                                ....

20000284 <_impure_ptr>:
20000284:	20000288                                ... 

20000288 <_impure_data>:
20000288:	00000000 20002238 200022a0 20002308     ....8". .". .#. 
	...

200002d4 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200002d4:	b580      	push	{r7, lr}
200002d6:	b088      	sub	sp, #32
200002d8:	af00      	add	r7, sp, #0
200002da:	6078      	str	r0, [r7, #4]
200002dc:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200002de:	231f      	movs	r3, #31
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	2200      	movs	r2, #0
200002e4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200002e6:	687b      	ldr	r3, [r7, #4]
200002e8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200002ea:	683b      	ldr	r3, [r7, #0]
200002ec:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200002ee:	4b1a      	ldr	r3, [pc, #104]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f0:	695a      	ldr	r2, [r3, #20]
200002f2:	4b19      	ldr	r3, [pc, #100]	@ (20000358 <FLASH_Program_Fast+0x84>)
200002f4:	2180      	movs	r1, #128	@ 0x80
200002f6:	02c9      	lsls	r1, r1, #11
200002f8:	430a      	orrs	r2, r1
200002fa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200002fc:	f3ef 8310 	mrs	r3, PRIMASK
20000300:	60fb      	str	r3, [r7, #12]
  return(result);
20000302:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000306:	b672      	cpsid	i
}
20000308:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000030a:	e00f      	b.n	2000032c <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
2000030c:	697a      	ldr	r2, [r7, #20]
2000030e:	69bb      	ldr	r3, [r7, #24]
20000310:	6812      	ldr	r2, [r2, #0]
20000312:	601a      	str	r2, [r3, #0]
    src += 4U;
20000314:	697b      	ldr	r3, [r7, #20]
20000316:	3304      	adds	r3, #4
20000318:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000031a:	69bb      	ldr	r3, [r7, #24]
2000031c:	3304      	adds	r3, #4
2000031e:	61bb      	str	r3, [r7, #24]
    index++;
20000320:	211f      	movs	r1, #31
20000322:	187b      	adds	r3, r7, r1
20000324:	781a      	ldrb	r2, [r3, #0]
20000326:	187b      	adds	r3, r7, r1
20000328:	3201      	adds	r2, #1
2000032a:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
2000032c:	231f      	movs	r3, #31
2000032e:	18fb      	adds	r3, r7, r3
20000330:	781b      	ldrb	r3, [r3, #0]
20000332:	2b3f      	cmp	r3, #63	@ 0x3f
20000334:	d9ea      	bls.n	2000030c <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000336:	46c0      	nop			@ (mov r8, r8)
20000338:	4b07      	ldr	r3, [pc, #28]	@ (20000358 <FLASH_Program_Fast+0x84>)
2000033a:	691a      	ldr	r2, [r3, #16]
2000033c:	2380      	movs	r3, #128	@ 0x80
2000033e:	025b      	lsls	r3, r3, #9
20000340:	4013      	ands	r3, r2
20000342:	d1f9      	bne.n	20000338 <FLASH_Program_Fast+0x64>
20000344:	693b      	ldr	r3, [r7, #16]
20000346:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000348:	68bb      	ldr	r3, [r7, #8]
2000034a:	f383 8810 	msr	PRIMASK, r3
}
2000034e:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000350:	46c0      	nop			@ (mov r8, r8)
20000352:	46bd      	mov	sp, r7
20000354:	b008      	add	sp, #32
20000356:	bd80      	pop	{r7, pc}
20000358:	40022000 	.word	0x40022000
