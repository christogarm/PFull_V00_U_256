
Pfull_V00_U_256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dataLogger   00003000  0803c000  0803c000  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .eventLogger  00005000  08037000  08037000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .varFlash     00000005  0801e7f0  0801e7f0  0001d7f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .myBufSectionEEPROM_P 00000080  0803f000  0803f000  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .myBufSectionEEPROM_V 00000014  0803f800  0803f800  00026800  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  5 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .text         0001b068  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .rodata       000002ec  0801b128  0801b128  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .ARM.extab    00000000  0801b414  0801b414  00026814  2**0
                  CONTENTS
  9 .ARM          00000008  0801b414  0801b414  0001c414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .preinit_array 00000000  0801b41c  0801b41c  00026814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .init_array   00000004  0801b41c  0801b41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .fini_array   00000004  0801b420  0801b420  0001c420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .data         00000348  20000000  0801b424  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
 14 .bss          00000f8c  20000348  0801b76c  0001d348  2**2
                  ALLOC
 15 ._user_heap_stack 00000604  200012d4  0801b76c  0001e2d4  2**0
                  ALLOC
 16 .ARM.attributes 00000028  00000000  00000000  00026814  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002f3f4  00000000  00000000  0002683c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000062f0  00000000  00000000  00055c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001fc8  00000000  00000000  0005bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001941  00000000  00000000  0005dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00021b36  00000000  00000000  0005f829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0000d801  00000000  00000000  0008135f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  0008eb60  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000770c  00000000  00000000  0008eba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000084  00000000  00000000  000962b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000348 	.word	0x20000348
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801b0fc 	.word	0x0801b0fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000034c 	.word	0x2000034c
 8000104:	0801b0fc 	.word	0x0801b0fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f891 	bl	800153c <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 ffd1 	bl	80013cc <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f883 	bl	800153c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f879 	bl	800153c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fffb 	bl	8001454 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fff1 	bl	8001454 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	@ (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	ffffff21 	.word	0xffffff21
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f824 	bl	8000538 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			@ (mov r8, r8)

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffb1 	bl	800046c <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 ff0b 	bl	800232c <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fb46 	bl	8001bb0 <__aeabi_dsub>
 8000524:	f001 ff02 	bl	800232c <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f001 ff48 	bl	80023ec <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f001 ff43 	bl	80023ec <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	d434      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 800056e:	469b      	mov	fp, r3
 8000570:	4653      	mov	r3, sl
 8000572:	465a      	mov	r2, fp
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83b      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e079      	b.n	800067e <__udivmoddi4+0x146>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e076      	b.n	8000684 <__udivmoddi4+0x14c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e029      	b.n	8000604 <__udivmoddi4+0xcc>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	469b      	mov	fp, r3
 80005dc:	2320      	movs	r3, #32
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	4652      	mov	r2, sl
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	4641      	mov	r1, r8
 80005e6:	0013      	movs	r3, r2
 80005e8:	464a      	mov	r2, r9
 80005ea:	408a      	lsls	r2, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	4642      	mov	r2, r8
 80005f0:	431f      	orrs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	001e      	movs	r6, r3
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d9c3      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	4643      	mov	r3, r8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0d8      	beq.n	80005bc <__udivmoddi4+0x84>
 800060a:	07fb      	lsls	r3, r7, #31
 800060c:	0872      	lsrs	r2, r6, #1
 800060e:	431a      	orrs	r2, r3
 8000610:	4646      	mov	r6, r8
 8000612:	087b      	lsrs	r3, r7, #1
 8000614:	e00e      	b.n	8000634 <__udivmoddi4+0xfc>
 8000616:	42ab      	cmp	r3, r5
 8000618:	d101      	bne.n	800061e <__udivmoddi4+0xe6>
 800061a:	42a2      	cmp	r2, r4
 800061c:	d80c      	bhi.n	8000638 <__udivmoddi4+0x100>
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	419d      	sbcs	r5, r3
 8000622:	2001      	movs	r0, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2100      	movs	r1, #0
 800062a:	3e01      	subs	r6, #1
 800062c:	1824      	adds	r4, r4, r0
 800062e:	414d      	adcs	r5, r1
 8000630:	2e00      	cmp	r6, #0
 8000632:	d006      	beq.n	8000642 <__udivmoddi4+0x10a>
 8000634:	42ab      	cmp	r3, r5
 8000636:	d9ee      	bls.n	8000616 <__udivmoddi4+0xde>
 8000638:	3e01      	subs	r6, #1
 800063a:	1924      	adds	r4, r4, r4
 800063c:	416d      	adcs	r5, r5
 800063e:	2e00      	cmp	r6, #0
 8000640:	d1f8      	bne.n	8000634 <__udivmoddi4+0xfc>
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	465b      	mov	r3, fp
 8000648:	1900      	adds	r0, r0, r4
 800064a:	4169      	adcs	r1, r5
 800064c:	2b00      	cmp	r3, #0
 800064e:	db24      	blt.n	800069a <__udivmoddi4+0x162>
 8000650:	002b      	movs	r3, r5
 8000652:	465a      	mov	r2, fp
 8000654:	4644      	mov	r4, r8
 8000656:	40d3      	lsrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	db2a      	blt.n	80006bc <__udivmoddi4+0x184>
 8000666:	0026      	movs	r6, r4
 8000668:	409e      	lsls	r6, r3
 800066a:	0033      	movs	r3, r6
 800066c:	0026      	movs	r6, r4
 800066e:	4647      	mov	r7, r8
 8000670:	40be      	lsls	r6, r7
 8000672:	0032      	movs	r2, r6
 8000674:	1a80      	subs	r0, r0, r2
 8000676:	4199      	sbcs	r1, r3
 8000678:	9000      	str	r0, [sp, #0]
 800067a:	9101      	str	r1, [sp, #4]
 800067c:	e79e      	b.n	80005bc <__udivmoddi4+0x84>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d8bc      	bhi.n	80005fc <__udivmoddi4+0xc4>
 8000682:	e782      	b.n	800058a <__udivmoddi4+0x52>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	2100      	movs	r1, #0
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	40da      	lsrs	r2, r3
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	e785      	b.n	80005a6 <__udivmoddi4+0x6e>
 800069a:	4642      	mov	r2, r8
 800069c:	2320      	movs	r3, #32
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	002a      	movs	r2, r5
 80006a2:	4646      	mov	r6, r8
 80006a4:	409a      	lsls	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	40f3      	lsrs	r3, r6
 80006aa:	4644      	mov	r4, r8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	40e2      	lsrs	r2, r4
 80006b2:	001c      	movs	r4, r3
 80006b4:	465b      	mov	r3, fp
 80006b6:	0015      	movs	r5, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	dad4      	bge.n	8000666 <__udivmoddi4+0x12e>
 80006bc:	4642      	mov	r2, r8
 80006be:	002f      	movs	r7, r5
 80006c0:	2320      	movs	r3, #32
 80006c2:	0026      	movs	r6, r4
 80006c4:	4097      	lsls	r7, r2
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	40de      	lsrs	r6, r3
 80006ca:	003b      	movs	r3, r7
 80006cc:	4333      	orrs	r3, r6
 80006ce:	e7cd      	b.n	800066c <__udivmoddi4+0x134>

080006d0 <__aeabi_dadd>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	4657      	mov	r7, sl
 80006d4:	464e      	mov	r6, r9
 80006d6:	4645      	mov	r5, r8
 80006d8:	46de      	mov	lr, fp
 80006da:	b5e0      	push	{r5, r6, r7, lr}
 80006dc:	b083      	sub	sp, #12
 80006de:	9000      	str	r0, [sp, #0]
 80006e0:	9101      	str	r1, [sp, #4]
 80006e2:	030c      	lsls	r4, r1, #12
 80006e4:	004f      	lsls	r7, r1, #1
 80006e6:	0fce      	lsrs	r6, r1, #31
 80006e8:	0a61      	lsrs	r1, r4, #9
 80006ea:	9c00      	ldr	r4, [sp, #0]
 80006ec:	031d      	lsls	r5, r3, #12
 80006ee:	0f64      	lsrs	r4, r4, #29
 80006f0:	430c      	orrs	r4, r1
 80006f2:	9900      	ldr	r1, [sp, #0]
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	00c8      	lsls	r0, r1, #3
 80006fa:	0059      	lsls	r1, r3, #1
 80006fc:	0d4b      	lsrs	r3, r1, #21
 80006fe:	4699      	mov	r9, r3
 8000700:	9a00      	ldr	r2, [sp, #0]
 8000702:	9b01      	ldr	r3, [sp, #4]
 8000704:	0a6d      	lsrs	r5, r5, #9
 8000706:	0fd9      	lsrs	r1, r3, #31
 8000708:	0f53      	lsrs	r3, r2, #29
 800070a:	432b      	orrs	r3, r5
 800070c:	469a      	mov	sl, r3
 800070e:	9b00      	ldr	r3, [sp, #0]
 8000710:	0d7f      	lsrs	r7, r7, #21
 8000712:	00da      	lsls	r2, r3, #3
 8000714:	4694      	mov	ip, r2
 8000716:	464a      	mov	r2, r9
 8000718:	46b0      	mov	r8, r6
 800071a:	1aba      	subs	r2, r7, r2
 800071c:	428e      	cmp	r6, r1
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x52>
 8000720:	e0b0      	b.n	8000884 <__aeabi_dadd+0x1b4>
 8000722:	2a00      	cmp	r2, #0
 8000724:	dc00      	bgt.n	8000728 <__aeabi_dadd+0x58>
 8000726:	e078      	b.n	800081a <__aeabi_dadd+0x14a>
 8000728:	4649      	mov	r1, r9
 800072a:	2900      	cmp	r1, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0x60>
 800072e:	e0e9      	b.n	8000904 <__aeabi_dadd+0x234>
 8000730:	49c9      	ldr	r1, [pc, #804]	@ (8000a58 <__aeabi_dadd+0x388>)
 8000732:	428f      	cmp	r7, r1
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x68>
 8000736:	e195      	b.n	8000a64 <__aeabi_dadd+0x394>
 8000738:	2501      	movs	r5, #1
 800073a:	2a38      	cmp	r2, #56	@ 0x38
 800073c:	dc16      	bgt.n	800076c <__aeabi_dadd+0x9c>
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	4653      	mov	r3, sl
 8000742:	0409      	lsls	r1, r1, #16
 8000744:	430b      	orrs	r3, r1
 8000746:	469a      	mov	sl, r3
 8000748:	2a1f      	cmp	r2, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x7e>
 800074c:	e1e7      	b.n	8000b1e <__aeabi_dadd+0x44e>
 800074e:	2120      	movs	r1, #32
 8000750:	4655      	mov	r5, sl
 8000752:	1a8b      	subs	r3, r1, r2
 8000754:	4661      	mov	r1, ip
 8000756:	409d      	lsls	r5, r3
 8000758:	40d1      	lsrs	r1, r2
 800075a:	430d      	orrs	r5, r1
 800075c:	4661      	mov	r1, ip
 800075e:	4099      	lsls	r1, r3
 8000760:	1e4b      	subs	r3, r1, #1
 8000762:	4199      	sbcs	r1, r3
 8000764:	4653      	mov	r3, sl
 8000766:	40d3      	lsrs	r3, r2
 8000768:	430d      	orrs	r5, r1
 800076a:	1ae4      	subs	r4, r4, r3
 800076c:	1b45      	subs	r5, r0, r5
 800076e:	42a8      	cmp	r0, r5
 8000770:	4180      	sbcs	r0, r0
 8000772:	4240      	negs	r0, r0
 8000774:	1a24      	subs	r4, r4, r0
 8000776:	0223      	lsls	r3, r4, #8
 8000778:	d400      	bmi.n	800077c <__aeabi_dadd+0xac>
 800077a:	e10f      	b.n	800099c <__aeabi_dadd+0x2cc>
 800077c:	0264      	lsls	r4, r4, #9
 800077e:	0a64      	lsrs	r4, r4, #9
 8000780:	2c00      	cmp	r4, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0xb6>
 8000784:	e139      	b.n	80009fa <__aeabi_dadd+0x32a>
 8000786:	0020      	movs	r0, r4
 8000788:	f7ff fe7a 	bl	8000480 <__clzsi2>
 800078c:	0003      	movs	r3, r0
 800078e:	3b08      	subs	r3, #8
 8000790:	2120      	movs	r1, #32
 8000792:	0028      	movs	r0, r5
 8000794:	1aca      	subs	r2, r1, r3
 8000796:	40d0      	lsrs	r0, r2
 8000798:	409c      	lsls	r4, r3
 800079a:	0002      	movs	r2, r0
 800079c:	409d      	lsls	r5, r3
 800079e:	4322      	orrs	r2, r4
 80007a0:	429f      	cmp	r7, r3
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0xd6>
 80007a4:	e173      	b.n	8000a8e <__aeabi_dadd+0x3be>
 80007a6:	1bd8      	subs	r0, r3, r7
 80007a8:	3001      	adds	r0, #1
 80007aa:	1a09      	subs	r1, r1, r0
 80007ac:	002c      	movs	r4, r5
 80007ae:	408d      	lsls	r5, r1
 80007b0:	40c4      	lsrs	r4, r0
 80007b2:	1e6b      	subs	r3, r5, #1
 80007b4:	419d      	sbcs	r5, r3
 80007b6:	0013      	movs	r3, r2
 80007b8:	40c2      	lsrs	r2, r0
 80007ba:	408b      	lsls	r3, r1
 80007bc:	4325      	orrs	r5, r4
 80007be:	2700      	movs	r7, #0
 80007c0:	0014      	movs	r4, r2
 80007c2:	431d      	orrs	r5, r3
 80007c4:	076b      	lsls	r3, r5, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007c8:	230f      	movs	r3, #15
 80007ca:	402b      	ands	r3, r5
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_dadd+0x10c>
 80007d0:	1d2b      	adds	r3, r5, #4
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	41ad      	sbcs	r5, r5
 80007d6:	426d      	negs	r5, r5
 80007d8:	1964      	adds	r4, r4, r5
 80007da:	001d      	movs	r5, r3
 80007dc:	0223      	lsls	r3, r4, #8
 80007de:	d400      	bmi.n	80007e2 <__aeabi_dadd+0x112>
 80007e0:	e12d      	b.n	8000a3e <__aeabi_dadd+0x36e>
 80007e2:	4a9d      	ldr	r2, [pc, #628]	@ (8000a58 <__aeabi_dadd+0x388>)
 80007e4:	3701      	adds	r7, #1
 80007e6:	4297      	cmp	r7, r2
 80007e8:	d100      	bne.n	80007ec <__aeabi_dadd+0x11c>
 80007ea:	e0d3      	b.n	8000994 <__aeabi_dadd+0x2c4>
 80007ec:	4646      	mov	r6, r8
 80007ee:	499b      	ldr	r1, [pc, #620]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80007f0:	08ed      	lsrs	r5, r5, #3
 80007f2:	4021      	ands	r1, r4
 80007f4:	074a      	lsls	r2, r1, #29
 80007f6:	432a      	orrs	r2, r5
 80007f8:	057c      	lsls	r4, r7, #21
 80007fa:	024d      	lsls	r5, r1, #9
 80007fc:	0b2d      	lsrs	r5, r5, #12
 80007fe:	0d64      	lsrs	r4, r4, #21
 8000800:	0524      	lsls	r4, r4, #20
 8000802:	432c      	orrs	r4, r5
 8000804:	07f6      	lsls	r6, r6, #31
 8000806:	4334      	orrs	r4, r6
 8000808:	0010      	movs	r0, r2
 800080a:	0021      	movs	r1, r4
 800080c:	b003      	add	sp, #12
 800080e:	bcf0      	pop	{r4, r5, r6, r7}
 8000810:	46bb      	mov	fp, r7
 8000812:	46b2      	mov	sl, r6
 8000814:	46a9      	mov	r9, r5
 8000816:	46a0      	mov	r8, r4
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2a00      	cmp	r2, #0
 800081c:	d100      	bne.n	8000820 <__aeabi_dadd+0x150>
 800081e:	e084      	b.n	800092a <__aeabi_dadd+0x25a>
 8000820:	464a      	mov	r2, r9
 8000822:	1bd2      	subs	r2, r2, r7
 8000824:	2f00      	cmp	r7, #0
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x15a>
 8000828:	e16d      	b.n	8000b06 <__aeabi_dadd+0x436>
 800082a:	0025      	movs	r5, r4
 800082c:	4305      	orrs	r5, r0
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x162>
 8000830:	e127      	b.n	8000a82 <__aeabi_dadd+0x3b2>
 8000832:	1e56      	subs	r6, r2, #1
 8000834:	2a01      	cmp	r2, #1
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x16a>
 8000838:	e23b      	b.n	8000cb2 <__aeabi_dadd+0x5e2>
 800083a:	4d87      	ldr	r5, [pc, #540]	@ (8000a58 <__aeabi_dadd+0x388>)
 800083c:	42aa      	cmp	r2, r5
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x172>
 8000840:	e26a      	b.n	8000d18 <__aeabi_dadd+0x648>
 8000842:	2501      	movs	r5, #1
 8000844:	2e38      	cmp	r6, #56	@ 0x38
 8000846:	dc12      	bgt.n	800086e <__aeabi_dadd+0x19e>
 8000848:	0032      	movs	r2, r6
 800084a:	2a1f      	cmp	r2, #31
 800084c:	dd00      	ble.n	8000850 <__aeabi_dadd+0x180>
 800084e:	e1f8      	b.n	8000c42 <__aeabi_dadd+0x572>
 8000850:	2620      	movs	r6, #32
 8000852:	0025      	movs	r5, r4
 8000854:	1ab6      	subs	r6, r6, r2
 8000856:	0007      	movs	r7, r0
 8000858:	4653      	mov	r3, sl
 800085a:	40b0      	lsls	r0, r6
 800085c:	40d4      	lsrs	r4, r2
 800085e:	40b5      	lsls	r5, r6
 8000860:	40d7      	lsrs	r7, r2
 8000862:	1e46      	subs	r6, r0, #1
 8000864:	41b0      	sbcs	r0, r6
 8000866:	1b1b      	subs	r3, r3, r4
 8000868:	469a      	mov	sl, r3
 800086a:	433d      	orrs	r5, r7
 800086c:	4305      	orrs	r5, r0
 800086e:	4662      	mov	r2, ip
 8000870:	1b55      	subs	r5, r2, r5
 8000872:	45ac      	cmp	ip, r5
 8000874:	4192      	sbcs	r2, r2
 8000876:	4653      	mov	r3, sl
 8000878:	4252      	negs	r2, r2
 800087a:	000e      	movs	r6, r1
 800087c:	464f      	mov	r7, r9
 800087e:	4688      	mov	r8, r1
 8000880:	1a9c      	subs	r4, r3, r2
 8000882:	e778      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000884:	2a00      	cmp	r2, #0
 8000886:	dc00      	bgt.n	800088a <__aeabi_dadd+0x1ba>
 8000888:	e08e      	b.n	80009a8 <__aeabi_dadd+0x2d8>
 800088a:	4649      	mov	r1, r9
 800088c:	2900      	cmp	r1, #0
 800088e:	d175      	bne.n	800097c <__aeabi_dadd+0x2ac>
 8000890:	4661      	mov	r1, ip
 8000892:	4653      	mov	r3, sl
 8000894:	4319      	orrs	r1, r3
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x1ca>
 8000898:	e0f6      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 800089a:	1e51      	subs	r1, r2, #1
 800089c:	2a01      	cmp	r2, #1
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x1d2>
 80008a0:	e191      	b.n	8000bc6 <__aeabi_dadd+0x4f6>
 80008a2:	4d6d      	ldr	r5, [pc, #436]	@ (8000a58 <__aeabi_dadd+0x388>)
 80008a4:	42aa      	cmp	r2, r5
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0x1da>
 80008a8:	e0dc      	b.n	8000a64 <__aeabi_dadd+0x394>
 80008aa:	2501      	movs	r5, #1
 80008ac:	2938      	cmp	r1, #56	@ 0x38
 80008ae:	dc14      	bgt.n	80008da <__aeabi_dadd+0x20a>
 80008b0:	000a      	movs	r2, r1
 80008b2:	2a1f      	cmp	r2, #31
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_dadd+0x1e8>
 80008b6:	e1a2      	b.n	8000bfe <__aeabi_dadd+0x52e>
 80008b8:	2120      	movs	r1, #32
 80008ba:	4653      	mov	r3, sl
 80008bc:	1a89      	subs	r1, r1, r2
 80008be:	408b      	lsls	r3, r1
 80008c0:	001d      	movs	r5, r3
 80008c2:	4663      	mov	r3, ip
 80008c4:	40d3      	lsrs	r3, r2
 80008c6:	431d      	orrs	r5, r3
 80008c8:	4663      	mov	r3, ip
 80008ca:	408b      	lsls	r3, r1
 80008cc:	0019      	movs	r1, r3
 80008ce:	1e4b      	subs	r3, r1, #1
 80008d0:	4199      	sbcs	r1, r3
 80008d2:	4653      	mov	r3, sl
 80008d4:	40d3      	lsrs	r3, r2
 80008d6:	430d      	orrs	r5, r1
 80008d8:	18e4      	adds	r4, r4, r3
 80008da:	182d      	adds	r5, r5, r0
 80008dc:	4285      	cmp	r5, r0
 80008de:	4180      	sbcs	r0, r0
 80008e0:	4240      	negs	r0, r0
 80008e2:	1824      	adds	r4, r4, r0
 80008e4:	0223      	lsls	r3, r4, #8
 80008e6:	d559      	bpl.n	800099c <__aeabi_dadd+0x2cc>
 80008e8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a58 <__aeabi_dadd+0x388>)
 80008ea:	3701      	adds	r7, #1
 80008ec:	429f      	cmp	r7, r3
 80008ee:	d051      	beq.n	8000994 <__aeabi_dadd+0x2c4>
 80008f0:	2101      	movs	r1, #1
 80008f2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a5c <__aeabi_dadd+0x38c>)
 80008f4:	086a      	lsrs	r2, r5, #1
 80008f6:	401c      	ands	r4, r3
 80008f8:	4029      	ands	r1, r5
 80008fa:	430a      	orrs	r2, r1
 80008fc:	07e5      	lsls	r5, r4, #31
 80008fe:	4315      	orrs	r5, r2
 8000900:	0864      	lsrs	r4, r4, #1
 8000902:	e75f      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000904:	4661      	mov	r1, ip
 8000906:	4653      	mov	r3, sl
 8000908:	4319      	orrs	r1, r3
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x23e>
 800090c:	e0bc      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 800090e:	1e51      	subs	r1, r2, #1
 8000910:	2a01      	cmp	r2, #1
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x246>
 8000914:	e164      	b.n	8000be0 <__aeabi_dadd+0x510>
 8000916:	4d50      	ldr	r5, [pc, #320]	@ (8000a58 <__aeabi_dadd+0x388>)
 8000918:	42aa      	cmp	r2, r5
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x24e>
 800091c:	e16a      	b.n	8000bf4 <__aeabi_dadd+0x524>
 800091e:	2501      	movs	r5, #1
 8000920:	2938      	cmp	r1, #56	@ 0x38
 8000922:	dd00      	ble.n	8000926 <__aeabi_dadd+0x256>
 8000924:	e722      	b.n	800076c <__aeabi_dadd+0x9c>
 8000926:	000a      	movs	r2, r1
 8000928:	e70e      	b.n	8000748 <__aeabi_dadd+0x78>
 800092a:	4a4d      	ldr	r2, [pc, #308]	@ (8000a60 <__aeabi_dadd+0x390>)
 800092c:	1c7d      	adds	r5, r7, #1
 800092e:	4215      	tst	r5, r2
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x264>
 8000932:	e0d0      	b.n	8000ad6 <__aeabi_dadd+0x406>
 8000934:	0025      	movs	r5, r4
 8000936:	4662      	mov	r2, ip
 8000938:	4653      	mov	r3, sl
 800093a:	4305      	orrs	r5, r0
 800093c:	431a      	orrs	r2, r3
 800093e:	2f00      	cmp	r7, #0
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x274>
 8000942:	e137      	b.n	8000bb4 <__aeabi_dadd+0x4e4>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x27a>
 8000948:	e1a8      	b.n	8000c9c <__aeabi_dadd+0x5cc>
 800094a:	2a00      	cmp	r2, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x280>
 800094e:	e16a      	b.n	8000c26 <__aeabi_dadd+0x556>
 8000950:	4663      	mov	r3, ip
 8000952:	1ac5      	subs	r5, r0, r3
 8000954:	4653      	mov	r3, sl
 8000956:	1ae2      	subs	r2, r4, r3
 8000958:	42a8      	cmp	r0, r5
 800095a:	419b      	sbcs	r3, r3
 800095c:	425b      	negs	r3, r3
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	021a      	lsls	r2, r3, #8
 8000962:	d400      	bmi.n	8000966 <__aeabi_dadd+0x296>
 8000964:	e203      	b.n	8000d6e <__aeabi_dadd+0x69e>
 8000966:	4663      	mov	r3, ip
 8000968:	1a1d      	subs	r5, r3, r0
 800096a:	45ac      	cmp	ip, r5
 800096c:	4192      	sbcs	r2, r2
 800096e:	4653      	mov	r3, sl
 8000970:	4252      	negs	r2, r2
 8000972:	1b1c      	subs	r4, r3, r4
 8000974:	000e      	movs	r6, r1
 8000976:	4688      	mov	r8, r1
 8000978:	1aa4      	subs	r4, r4, r2
 800097a:	e723      	b.n	80007c4 <__aeabi_dadd+0xf4>
 800097c:	4936      	ldr	r1, [pc, #216]	@ (8000a58 <__aeabi_dadd+0x388>)
 800097e:	428f      	cmp	r7, r1
 8000980:	d070      	beq.n	8000a64 <__aeabi_dadd+0x394>
 8000982:	2501      	movs	r5, #1
 8000984:	2a38      	cmp	r2, #56	@ 0x38
 8000986:	dca8      	bgt.n	80008da <__aeabi_dadd+0x20a>
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	4653      	mov	r3, sl
 800098c:	0409      	lsls	r1, r1, #16
 800098e:	430b      	orrs	r3, r1
 8000990:	469a      	mov	sl, r3
 8000992:	e78e      	b.n	80008b2 <__aeabi_dadd+0x1e2>
 8000994:	003c      	movs	r4, r7
 8000996:	2500      	movs	r5, #0
 8000998:	2200      	movs	r2, #0
 800099a:	e731      	b.n	8000800 <__aeabi_dadd+0x130>
 800099c:	2307      	movs	r3, #7
 800099e:	402b      	ands	r3, r5
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x2d6>
 80009a4:	e710      	b.n	80007c8 <__aeabi_dadd+0xf8>
 80009a6:	e093      	b.n	8000ad0 <__aeabi_dadd+0x400>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	d074      	beq.n	8000a96 <__aeabi_dadd+0x3c6>
 80009ac:	464a      	mov	r2, r9
 80009ae:	1bd2      	subs	r2, r2, r7
 80009b0:	2f00      	cmp	r7, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x2e6>
 80009b4:	e0c7      	b.n	8000b46 <__aeabi_dadd+0x476>
 80009b6:	4928      	ldr	r1, [pc, #160]	@ (8000a58 <__aeabi_dadd+0x388>)
 80009b8:	4589      	cmp	r9, r1
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x2ee>
 80009bc:	e185      	b.n	8000cca <__aeabi_dadd+0x5fa>
 80009be:	2501      	movs	r5, #1
 80009c0:	2a38      	cmp	r2, #56	@ 0x38
 80009c2:	dc12      	bgt.n	80009ea <__aeabi_dadd+0x31a>
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0409      	lsls	r1, r1, #16
 80009c8:	430c      	orrs	r4, r1
 80009ca:	2a1f      	cmp	r2, #31
 80009cc:	dd00      	ble.n	80009d0 <__aeabi_dadd+0x300>
 80009ce:	e1ab      	b.n	8000d28 <__aeabi_dadd+0x658>
 80009d0:	2120      	movs	r1, #32
 80009d2:	0025      	movs	r5, r4
 80009d4:	1a89      	subs	r1, r1, r2
 80009d6:	0007      	movs	r7, r0
 80009d8:	4088      	lsls	r0, r1
 80009da:	408d      	lsls	r5, r1
 80009dc:	40d7      	lsrs	r7, r2
 80009de:	1e41      	subs	r1, r0, #1
 80009e0:	4188      	sbcs	r0, r1
 80009e2:	40d4      	lsrs	r4, r2
 80009e4:	433d      	orrs	r5, r7
 80009e6:	4305      	orrs	r5, r0
 80009e8:	44a2      	add	sl, r4
 80009ea:	4465      	add	r5, ip
 80009ec:	4565      	cmp	r5, ip
 80009ee:	4192      	sbcs	r2, r2
 80009f0:	4252      	negs	r2, r2
 80009f2:	4452      	add	r2, sl
 80009f4:	0014      	movs	r4, r2
 80009f6:	464f      	mov	r7, r9
 80009f8:	e774      	b.n	80008e4 <__aeabi_dadd+0x214>
 80009fa:	0028      	movs	r0, r5
 80009fc:	f7ff fd40 	bl	8000480 <__clzsi2>
 8000a00:	0003      	movs	r3, r0
 8000a02:	3318      	adds	r3, #24
 8000a04:	2b1f      	cmp	r3, #31
 8000a06:	dc00      	bgt.n	8000a0a <__aeabi_dadd+0x33a>
 8000a08:	e6c2      	b.n	8000790 <__aeabi_dadd+0xc0>
 8000a0a:	002a      	movs	r2, r5
 8000a0c:	3808      	subs	r0, #8
 8000a0e:	4082      	lsls	r2, r0
 8000a10:	429f      	cmp	r7, r3
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dadd+0x346>
 8000a14:	e0a9      	b.n	8000b6a <__aeabi_dadd+0x49a>
 8000a16:	1bdb      	subs	r3, r3, r7
 8000a18:	1c58      	adds	r0, r3, #1
 8000a1a:	281f      	cmp	r0, #31
 8000a1c:	dc00      	bgt.n	8000a20 <__aeabi_dadd+0x350>
 8000a1e:	e1ac      	b.n	8000d7a <__aeabi_dadd+0x6aa>
 8000a20:	0015      	movs	r5, r2
 8000a22:	3b1f      	subs	r3, #31
 8000a24:	40dd      	lsrs	r5, r3
 8000a26:	2820      	cmp	r0, #32
 8000a28:	d005      	beq.n	8000a36 <__aeabi_dadd+0x366>
 8000a2a:	2340      	movs	r3, #64	@ 0x40
 8000a2c:	1a1b      	subs	r3, r3, r0
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	1e53      	subs	r3, r2, #1
 8000a32:	419a      	sbcs	r2, r3
 8000a34:	4315      	orrs	r5, r2
 8000a36:	2307      	movs	r3, #7
 8000a38:	2700      	movs	r7, #0
 8000a3a:	402b      	ands	r3, r5
 8000a3c:	e7b0      	b.n	80009a0 <__aeabi_dadd+0x2d0>
 8000a3e:	08ed      	lsrs	r5, r5, #3
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <__aeabi_dadd+0x388>)
 8000a42:	0762      	lsls	r2, r4, #29
 8000a44:	432a      	orrs	r2, r5
 8000a46:	08e4      	lsrs	r4, r4, #3
 8000a48:	429f      	cmp	r7, r3
 8000a4a:	d00f      	beq.n	8000a6c <__aeabi_dadd+0x39c>
 8000a4c:	0324      	lsls	r4, r4, #12
 8000a4e:	0b25      	lsrs	r5, r4, #12
 8000a50:	057c      	lsls	r4, r7, #21
 8000a52:	0d64      	lsrs	r4, r4, #21
 8000a54:	e6d4      	b.n	8000800 <__aeabi_dadd+0x130>
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	000007ff 	.word	0x000007ff
 8000a5c:	ff7fffff 	.word	0xff7fffff
 8000a60:	000007fe 	.word	0x000007fe
 8000a64:	08c0      	lsrs	r0, r0, #3
 8000a66:	0762      	lsls	r2, r4, #29
 8000a68:	4302      	orrs	r2, r0
 8000a6a:	08e4      	lsrs	r4, r4, #3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	4323      	orrs	r3, r4
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dadd+0x3a4>
 8000a72:	e186      	b.n	8000d82 <__aeabi_dadd+0x6b2>
 8000a74:	2580      	movs	r5, #128	@ 0x80
 8000a76:	032d      	lsls	r5, r5, #12
 8000a78:	4325      	orrs	r5, r4
 8000a7a:	032d      	lsls	r5, r5, #12
 8000a7c:	4cc3      	ldr	r4, [pc, #780]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000a7e:	0b2d      	lsrs	r5, r5, #12
 8000a80:	e6be      	b.n	8000800 <__aeabi_dadd+0x130>
 8000a82:	4660      	mov	r0, ip
 8000a84:	4654      	mov	r4, sl
 8000a86:	000e      	movs	r6, r1
 8000a88:	0017      	movs	r7, r2
 8000a8a:	08c5      	lsrs	r5, r0, #3
 8000a8c:	e7d8      	b.n	8000a40 <__aeabi_dadd+0x370>
 8000a8e:	4cc0      	ldr	r4, [pc, #768]	@ (8000d90 <__aeabi_dadd+0x6c0>)
 8000a90:	1aff      	subs	r7, r7, r3
 8000a92:	4014      	ands	r4, r2
 8000a94:	e696      	b.n	80007c4 <__aeabi_dadd+0xf4>
 8000a96:	4abf      	ldr	r2, [pc, #764]	@ (8000d94 <__aeabi_dadd+0x6c4>)
 8000a98:	1c79      	adds	r1, r7, #1
 8000a9a:	4211      	tst	r1, r2
 8000a9c:	d16b      	bne.n	8000b76 <__aeabi_dadd+0x4a6>
 8000a9e:	0022      	movs	r2, r4
 8000aa0:	4302      	orrs	r2, r0
 8000aa2:	2f00      	cmp	r7, #0
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_dadd+0x3d8>
 8000aa6:	e0db      	b.n	8000c60 <__aeabi_dadd+0x590>
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x3de>
 8000aac:	e12d      	b.n	8000d0a <__aeabi_dadd+0x63a>
 8000aae:	4662      	mov	r2, ip
 8000ab0:	4653      	mov	r3, sl
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_dadd+0x3e8>
 8000ab6:	e0b6      	b.n	8000c26 <__aeabi_dadd+0x556>
 8000ab8:	4663      	mov	r3, ip
 8000aba:	18c5      	adds	r5, r0, r3
 8000abc:	4285      	cmp	r5, r0
 8000abe:	4180      	sbcs	r0, r0
 8000ac0:	4454      	add	r4, sl
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	1824      	adds	r4, r4, r0
 8000ac6:	0223      	lsls	r3, r4, #8
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_dadd+0x400>
 8000aca:	000f      	movs	r7, r1
 8000acc:	4bb0      	ldr	r3, [pc, #704]	@ (8000d90 <__aeabi_dadd+0x6c0>)
 8000ace:	401c      	ands	r4, r3
 8000ad0:	003a      	movs	r2, r7
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	e7d8      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	1a85      	subs	r5, r0, r2
 8000ada:	42a8      	cmp	r0, r5
 8000adc:	4192      	sbcs	r2, r2
 8000ade:	4653      	mov	r3, sl
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	4691      	mov	r9, r2
 8000ae4:	1ae3      	subs	r3, r4, r3
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	464b      	mov	r3, r9
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	4691      	mov	r9, r2
 8000af0:	021a      	lsls	r2, r3, #8
 8000af2:	d454      	bmi.n	8000b9e <__aeabi_dadd+0x4ce>
 8000af4:	464a      	mov	r2, r9
 8000af6:	464c      	mov	r4, r9
 8000af8:	432a      	orrs	r2, r5
 8000afa:	d000      	beq.n	8000afe <__aeabi_dadd+0x42e>
 8000afc:	e640      	b.n	8000780 <__aeabi_dadd+0xb0>
 8000afe:	2600      	movs	r6, #0
 8000b00:	2400      	movs	r4, #0
 8000b02:	2500      	movs	r5, #0
 8000b04:	e67c      	b.n	8000800 <__aeabi_dadd+0x130>
 8000b06:	4da1      	ldr	r5, [pc, #644]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000b08:	45a9      	cmp	r9, r5
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x43e>
 8000b0c:	e090      	b.n	8000c30 <__aeabi_dadd+0x560>
 8000b0e:	2501      	movs	r5, #1
 8000b10:	2a38      	cmp	r2, #56	@ 0x38
 8000b12:	dd00      	ble.n	8000b16 <__aeabi_dadd+0x446>
 8000b14:	e6ab      	b.n	800086e <__aeabi_dadd+0x19e>
 8000b16:	2580      	movs	r5, #128	@ 0x80
 8000b18:	042d      	lsls	r5, r5, #16
 8000b1a:	432c      	orrs	r4, r5
 8000b1c:	e695      	b.n	800084a <__aeabi_dadd+0x17a>
 8000b1e:	0011      	movs	r1, r2
 8000b20:	4655      	mov	r5, sl
 8000b22:	3920      	subs	r1, #32
 8000b24:	40cd      	lsrs	r5, r1
 8000b26:	46a9      	mov	r9, r5
 8000b28:	2a20      	cmp	r2, #32
 8000b2a:	d006      	beq.n	8000b3a <__aeabi_dadd+0x46a>
 8000b2c:	2140      	movs	r1, #64	@ 0x40
 8000b2e:	4653      	mov	r3, sl
 8000b30:	1a8a      	subs	r2, r1, r2
 8000b32:	4093      	lsls	r3, r2
 8000b34:	4662      	mov	r2, ip
 8000b36:	431a      	orrs	r2, r3
 8000b38:	4694      	mov	ip, r2
 8000b3a:	4665      	mov	r5, ip
 8000b3c:	1e6b      	subs	r3, r5, #1
 8000b3e:	419d      	sbcs	r5, r3
 8000b40:	464b      	mov	r3, r9
 8000b42:	431d      	orrs	r5, r3
 8000b44:	e612      	b.n	800076c <__aeabi_dadd+0x9c>
 8000b46:	0021      	movs	r1, r4
 8000b48:	4301      	orrs	r1, r0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x47e>
 8000b4c:	e0c4      	b.n	8000cd8 <__aeabi_dadd+0x608>
 8000b4e:	1e51      	subs	r1, r2, #1
 8000b50:	2a01      	cmp	r2, #1
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dadd+0x486>
 8000b54:	e0fb      	b.n	8000d4e <__aeabi_dadd+0x67e>
 8000b56:	4d8d      	ldr	r5, [pc, #564]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000b58:	42aa      	cmp	r2, r5
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x48e>
 8000b5c:	e0b5      	b.n	8000cca <__aeabi_dadd+0x5fa>
 8000b5e:	2501      	movs	r5, #1
 8000b60:	2938      	cmp	r1, #56	@ 0x38
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_dadd+0x496>
 8000b64:	e741      	b.n	80009ea <__aeabi_dadd+0x31a>
 8000b66:	000a      	movs	r2, r1
 8000b68:	e72f      	b.n	80009ca <__aeabi_dadd+0x2fa>
 8000b6a:	4c89      	ldr	r4, [pc, #548]	@ (8000d90 <__aeabi_dadd+0x6c0>)
 8000b6c:	1aff      	subs	r7, r7, r3
 8000b6e:	4014      	ands	r4, r2
 8000b70:	0762      	lsls	r2, r4, #29
 8000b72:	08e4      	lsrs	r4, r4, #3
 8000b74:	e76a      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000b76:	4a85      	ldr	r2, [pc, #532]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000b78:	4291      	cmp	r1, r2
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x4ae>
 8000b7c:	e0e3      	b.n	8000d46 <__aeabi_dadd+0x676>
 8000b7e:	4663      	mov	r3, ip
 8000b80:	18c2      	adds	r2, r0, r3
 8000b82:	4282      	cmp	r2, r0
 8000b84:	4180      	sbcs	r0, r0
 8000b86:	0023      	movs	r3, r4
 8000b88:	4240      	negs	r0, r0
 8000b8a:	4453      	add	r3, sl
 8000b8c:	181b      	adds	r3, r3, r0
 8000b8e:	07dd      	lsls	r5, r3, #31
 8000b90:	085c      	lsrs	r4, r3, #1
 8000b92:	2307      	movs	r3, #7
 8000b94:	0852      	lsrs	r2, r2, #1
 8000b96:	4315      	orrs	r5, r2
 8000b98:	000f      	movs	r7, r1
 8000b9a:	402b      	ands	r3, r5
 8000b9c:	e700      	b.n	80009a0 <__aeabi_dadd+0x2d0>
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	1a1d      	subs	r5, r3, r0
 8000ba2:	45ac      	cmp	ip, r5
 8000ba4:	4192      	sbcs	r2, r2
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	4252      	negs	r2, r2
 8000baa:	1b1c      	subs	r4, r3, r4
 8000bac:	000e      	movs	r6, r1
 8000bae:	4688      	mov	r8, r1
 8000bb0:	1aa4      	subs	r4, r4, r2
 8000bb2:	e5e5      	b.n	8000780 <__aeabi_dadd+0xb0>
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dadd+0x4ea>
 8000bb8:	e091      	b.n	8000cde <__aeabi_dadd+0x60e>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d138      	bne.n	8000c30 <__aeabi_dadd+0x560>
 8000bbe:	2480      	movs	r4, #128	@ 0x80
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	0324      	lsls	r4, r4, #12
 8000bc4:	e756      	b.n	8000a74 <__aeabi_dadd+0x3a4>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	18c5      	adds	r5, r0, r3
 8000bca:	4285      	cmp	r5, r0
 8000bcc:	4180      	sbcs	r0, r0
 8000bce:	4454      	add	r4, sl
 8000bd0:	4240      	negs	r0, r0
 8000bd2:	1824      	adds	r4, r4, r0
 8000bd4:	2701      	movs	r7, #1
 8000bd6:	0223      	lsls	r3, r4, #8
 8000bd8:	d400      	bmi.n	8000bdc <__aeabi_dadd+0x50c>
 8000bda:	e6df      	b.n	800099c <__aeabi_dadd+0x2cc>
 8000bdc:	2702      	movs	r7, #2
 8000bde:	e687      	b.n	80008f0 <__aeabi_dadd+0x220>
 8000be0:	4663      	mov	r3, ip
 8000be2:	1ac5      	subs	r5, r0, r3
 8000be4:	42a8      	cmp	r0, r5
 8000be6:	4180      	sbcs	r0, r0
 8000be8:	4653      	mov	r3, sl
 8000bea:	4240      	negs	r0, r0
 8000bec:	1ae4      	subs	r4, r4, r3
 8000bee:	2701      	movs	r7, #1
 8000bf0:	1a24      	subs	r4, r4, r0
 8000bf2:	e5c0      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000bf4:	0762      	lsls	r2, r4, #29
 8000bf6:	08c0      	lsrs	r0, r0, #3
 8000bf8:	4302      	orrs	r2, r0
 8000bfa:	08e4      	lsrs	r4, r4, #3
 8000bfc:	e736      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000bfe:	0011      	movs	r1, r2
 8000c00:	4653      	mov	r3, sl
 8000c02:	3920      	subs	r1, #32
 8000c04:	40cb      	lsrs	r3, r1
 8000c06:	4699      	mov	r9, r3
 8000c08:	2a20      	cmp	r2, #32
 8000c0a:	d006      	beq.n	8000c1a <__aeabi_dadd+0x54a>
 8000c0c:	2140      	movs	r1, #64	@ 0x40
 8000c0e:	4653      	mov	r3, sl
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	4093      	lsls	r3, r2
 8000c14:	4662      	mov	r2, ip
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4694      	mov	ip, r2
 8000c1a:	4665      	mov	r5, ip
 8000c1c:	1e6b      	subs	r3, r5, #1
 8000c1e:	419d      	sbcs	r5, r3
 8000c20:	464b      	mov	r3, r9
 8000c22:	431d      	orrs	r5, r3
 8000c24:	e659      	b.n	80008da <__aeabi_dadd+0x20a>
 8000c26:	0762      	lsls	r2, r4, #29
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	08e4      	lsrs	r4, r4, #3
 8000c2e:	e70d      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000c30:	4653      	mov	r3, sl
 8000c32:	075a      	lsls	r2, r3, #29
 8000c34:	4663      	mov	r3, ip
 8000c36:	08d8      	lsrs	r0, r3, #3
 8000c38:	4653      	mov	r3, sl
 8000c3a:	000e      	movs	r6, r1
 8000c3c:	4302      	orrs	r2, r0
 8000c3e:	08dc      	lsrs	r4, r3, #3
 8000c40:	e714      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000c42:	0015      	movs	r5, r2
 8000c44:	0026      	movs	r6, r4
 8000c46:	3d20      	subs	r5, #32
 8000c48:	40ee      	lsrs	r6, r5
 8000c4a:	2a20      	cmp	r2, #32
 8000c4c:	d003      	beq.n	8000c56 <__aeabi_dadd+0x586>
 8000c4e:	2540      	movs	r5, #64	@ 0x40
 8000c50:	1aaa      	subs	r2, r5, r2
 8000c52:	4094      	lsls	r4, r2
 8000c54:	4320      	orrs	r0, r4
 8000c56:	1e42      	subs	r2, r0, #1
 8000c58:	4190      	sbcs	r0, r2
 8000c5a:	0005      	movs	r5, r0
 8000c5c:	4335      	orrs	r5, r6
 8000c5e:	e606      	b.n	800086e <__aeabi_dadd+0x19e>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	d07c      	beq.n	8000d5e <__aeabi_dadd+0x68e>
 8000c64:	4662      	mov	r2, ip
 8000c66:	4653      	mov	r3, sl
 8000c68:	08c0      	lsrs	r0, r0, #3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x5a0>
 8000c6e:	e6fa      	b.n	8000a66 <__aeabi_dadd+0x396>
 8000c70:	0762      	lsls	r2, r4, #29
 8000c72:	4310      	orrs	r0, r2
 8000c74:	2280      	movs	r2, #128	@ 0x80
 8000c76:	08e4      	lsrs	r4, r4, #3
 8000c78:	0312      	lsls	r2, r2, #12
 8000c7a:	4214      	tst	r4, r2
 8000c7c:	d008      	beq.n	8000c90 <__aeabi_dadd+0x5c0>
 8000c7e:	08d9      	lsrs	r1, r3, #3
 8000c80:	4211      	tst	r1, r2
 8000c82:	d105      	bne.n	8000c90 <__aeabi_dadd+0x5c0>
 8000c84:	4663      	mov	r3, ip
 8000c86:	08d8      	lsrs	r0, r3, #3
 8000c88:	4653      	mov	r3, sl
 8000c8a:	000c      	movs	r4, r1
 8000c8c:	075b      	lsls	r3, r3, #29
 8000c8e:	4318      	orrs	r0, r3
 8000c90:	0f42      	lsrs	r2, r0, #29
 8000c92:	00c0      	lsls	r0, r0, #3
 8000c94:	08c0      	lsrs	r0, r0, #3
 8000c96:	0752      	lsls	r2, r2, #29
 8000c98:	4302      	orrs	r2, r0
 8000c9a:	e6e7      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x5d2>
 8000ca0:	e72d      	b.n	8000afe <__aeabi_dadd+0x42e>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	08d8      	lsrs	r0, r3, #3
 8000ca6:	4653      	mov	r3, sl
 8000ca8:	075a      	lsls	r2, r3, #29
 8000caa:	000e      	movs	r6, r1
 8000cac:	4302      	orrs	r2, r0
 8000cae:	08dc      	lsrs	r4, r3, #3
 8000cb0:	e6cc      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000cb2:	4663      	mov	r3, ip
 8000cb4:	1a1d      	subs	r5, r3, r0
 8000cb6:	45ac      	cmp	ip, r5
 8000cb8:	4192      	sbcs	r2, r2
 8000cba:	4653      	mov	r3, sl
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	1b1c      	subs	r4, r3, r4
 8000cc0:	000e      	movs	r6, r1
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	1aa4      	subs	r4, r4, r2
 8000cc6:	3701      	adds	r7, #1
 8000cc8:	e555      	b.n	8000776 <__aeabi_dadd+0xa6>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d9      	lsrs	r1, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	08dc      	lsrs	r4, r3, #3
 8000cd6:	e6c9      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	4654      	mov	r4, sl
 8000cdc:	e6d4      	b.n	8000a88 <__aeabi_dadd+0x3b8>
 8000cde:	08c0      	lsrs	r0, r0, #3
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x616>
 8000ce4:	e6bf      	b.n	8000a66 <__aeabi_dadd+0x396>
 8000ce6:	0762      	lsls	r2, r4, #29
 8000ce8:	4310      	orrs	r0, r2
 8000cea:	2280      	movs	r2, #128	@ 0x80
 8000cec:	08e4      	lsrs	r4, r4, #3
 8000cee:	0312      	lsls	r2, r2, #12
 8000cf0:	4214      	tst	r4, r2
 8000cf2:	d0cd      	beq.n	8000c90 <__aeabi_dadd+0x5c0>
 8000cf4:	08dd      	lsrs	r5, r3, #3
 8000cf6:	4215      	tst	r5, r2
 8000cf8:	d1ca      	bne.n	8000c90 <__aeabi_dadd+0x5c0>
 8000cfa:	4663      	mov	r3, ip
 8000cfc:	08d8      	lsrs	r0, r3, #3
 8000cfe:	4653      	mov	r3, sl
 8000d00:	075b      	lsls	r3, r3, #29
 8000d02:	000e      	movs	r6, r1
 8000d04:	002c      	movs	r4, r5
 8000d06:	4318      	orrs	r0, r3
 8000d08:	e7c2      	b.n	8000c90 <__aeabi_dadd+0x5c0>
 8000d0a:	4663      	mov	r3, ip
 8000d0c:	08d9      	lsrs	r1, r3, #3
 8000d0e:	4653      	mov	r3, sl
 8000d10:	075a      	lsls	r2, r3, #29
 8000d12:	430a      	orrs	r2, r1
 8000d14:	08dc      	lsrs	r4, r3, #3
 8000d16:	e699      	b.n	8000a4c <__aeabi_dadd+0x37c>
 8000d18:	4663      	mov	r3, ip
 8000d1a:	08d8      	lsrs	r0, r3, #3
 8000d1c:	4653      	mov	r3, sl
 8000d1e:	075a      	lsls	r2, r3, #29
 8000d20:	000e      	movs	r6, r1
 8000d22:	4302      	orrs	r2, r0
 8000d24:	08dc      	lsrs	r4, r3, #3
 8000d26:	e6a1      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0027      	movs	r7, r4
 8000d2c:	3920      	subs	r1, #32
 8000d2e:	40cf      	lsrs	r7, r1
 8000d30:	2a20      	cmp	r2, #32
 8000d32:	d003      	beq.n	8000d3c <__aeabi_dadd+0x66c>
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	1a8a      	subs	r2, r1, r2
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	4320      	orrs	r0, r4
 8000d3c:	1e42      	subs	r2, r0, #1
 8000d3e:	4190      	sbcs	r0, r2
 8000d40:	0005      	movs	r5, r0
 8000d42:	433d      	orrs	r5, r7
 8000d44:	e651      	b.n	80009ea <__aeabi_dadd+0x31a>
 8000d46:	000c      	movs	r4, r1
 8000d48:	2500      	movs	r5, #0
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	e558      	b.n	8000800 <__aeabi_dadd+0x130>
 8000d4e:	4460      	add	r0, ip
 8000d50:	4560      	cmp	r0, ip
 8000d52:	4192      	sbcs	r2, r2
 8000d54:	4454      	add	r4, sl
 8000d56:	4252      	negs	r2, r2
 8000d58:	0005      	movs	r5, r0
 8000d5a:	18a4      	adds	r4, r4, r2
 8000d5c:	e73a      	b.n	8000bd4 <__aeabi_dadd+0x504>
 8000d5e:	4653      	mov	r3, sl
 8000d60:	075a      	lsls	r2, r3, #29
 8000d62:	4663      	mov	r3, ip
 8000d64:	08d9      	lsrs	r1, r3, #3
 8000d66:	4653      	mov	r3, sl
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	08dc      	lsrs	r4, r3, #3
 8000d6c:	e67e      	b.n	8000a6c <__aeabi_dadd+0x39c>
 8000d6e:	001a      	movs	r2, r3
 8000d70:	001c      	movs	r4, r3
 8000d72:	432a      	orrs	r2, r5
 8000d74:	d000      	beq.n	8000d78 <__aeabi_dadd+0x6a8>
 8000d76:	e6ab      	b.n	8000ad0 <__aeabi_dadd+0x400>
 8000d78:	e6c1      	b.n	8000afe <__aeabi_dadd+0x42e>
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	1a09      	subs	r1, r1, r0
 8000d80:	e519      	b.n	80007b6 <__aeabi_dadd+0xe6>
 8000d82:	2200      	movs	r2, #0
 8000d84:	2500      	movs	r5, #0
 8000d86:	4c01      	ldr	r4, [pc, #4]	@ (8000d8c <__aeabi_dadd+0x6bc>)
 8000d88:	e53a      	b.n	8000800 <__aeabi_dadd+0x130>
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	000007ff 	.word	0x000007ff
 8000d90:	ff7fffff 	.word	0xff7fffff
 8000d94:	000007fe 	.word	0x000007fe

08000d98 <__aeabi_ddiv>:
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	46de      	mov	lr, fp
 8000d9c:	4645      	mov	r5, r8
 8000d9e:	4657      	mov	r7, sl
 8000da0:	464e      	mov	r6, r9
 8000da2:	b5e0      	push	{r5, r6, r7, lr}
 8000da4:	b087      	sub	sp, #28
 8000da6:	9200      	str	r2, [sp, #0]
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	030b      	lsls	r3, r1, #12
 8000dac:	0b1b      	lsrs	r3, r3, #12
 8000dae:	469b      	mov	fp, r3
 8000db0:	0fca      	lsrs	r2, r1, #31
 8000db2:	004b      	lsls	r3, r1, #1
 8000db4:	0004      	movs	r4, r0
 8000db6:	4680      	mov	r8, r0
 8000db8:	0d5b      	lsrs	r3, r3, #21
 8000dba:	9202      	str	r2, [sp, #8]
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_ddiv+0x28>
 8000dbe:	e16a      	b.n	8001096 <__aeabi_ddiv+0x2fe>
 8000dc0:	4ad4      	ldr	r2, [pc, #848]	@ (8001114 <__aeabi_ddiv+0x37c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x30>
 8000dc6:	e18c      	b.n	80010e2 <__aeabi_ddiv+0x34a>
 8000dc8:	4659      	mov	r1, fp
 8000dca:	0f42      	lsrs	r2, r0, #29
 8000dcc:	00c9      	lsls	r1, r1, #3
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	2180      	movs	r1, #128	@ 0x80
 8000dd2:	0409      	lsls	r1, r1, #16
 8000dd4:	4311      	orrs	r1, r2
 8000dd6:	00c2      	lsls	r2, r0, #3
 8000dd8:	4690      	mov	r8, r2
 8000dda:	4acf      	ldr	r2, [pc, #828]	@ (8001118 <__aeabi_ddiv+0x380>)
 8000ddc:	4689      	mov	r9, r1
 8000dde:	4692      	mov	sl, r2
 8000de0:	449a      	add	sl, r3
 8000de2:	2300      	movs	r3, #0
 8000de4:	2400      	movs	r4, #0
 8000de6:	9303      	str	r3, [sp, #12]
 8000de8:	9e00      	ldr	r6, [sp, #0]
 8000dea:	9f01      	ldr	r7, [sp, #4]
 8000dec:	033b      	lsls	r3, r7, #12
 8000dee:	0b1b      	lsrs	r3, r3, #12
 8000df0:	469b      	mov	fp, r3
 8000df2:	007b      	lsls	r3, r7, #1
 8000df4:	0030      	movs	r0, r6
 8000df6:	0d5b      	lsrs	r3, r3, #21
 8000df8:	0ffd      	lsrs	r5, r7, #31
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x68>
 8000dfe:	e128      	b.n	8001052 <__aeabi_ddiv+0x2ba>
 8000e00:	4ac4      	ldr	r2, [pc, #784]	@ (8001114 <__aeabi_ddiv+0x37c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x70>
 8000e06:	e177      	b.n	80010f8 <__aeabi_ddiv+0x360>
 8000e08:	4659      	mov	r1, fp
 8000e0a:	0f72      	lsrs	r2, r6, #29
 8000e0c:	00c9      	lsls	r1, r1, #3
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0409      	lsls	r1, r1, #16
 8000e14:	4311      	orrs	r1, r2
 8000e16:	468b      	mov	fp, r1
 8000e18:	49bf      	ldr	r1, [pc, #764]	@ (8001118 <__aeabi_ddiv+0x380>)
 8000e1a:	00f2      	lsls	r2, r6, #3
 8000e1c:	468c      	mov	ip, r1
 8000e1e:	4651      	mov	r1, sl
 8000e20:	4463      	add	r3, ip
 8000e22:	1acb      	subs	r3, r1, r3
 8000e24:	469a      	mov	sl, r3
 8000e26:	2300      	movs	r3, #0
 8000e28:	9e02      	ldr	r6, [sp, #8]
 8000e2a:	406e      	eors	r6, r5
 8000e2c:	2c0f      	cmp	r4, #15
 8000e2e:	d827      	bhi.n	8000e80 <__aeabi_ddiv+0xe8>
 8000e30:	49ba      	ldr	r1, [pc, #744]	@ (800111c <__aeabi_ddiv+0x384>)
 8000e32:	00a4      	lsls	r4, r4, #2
 8000e34:	5909      	ldr	r1, [r1, r4]
 8000e36:	468f      	mov	pc, r1
 8000e38:	46cb      	mov	fp, r9
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	9e02      	ldr	r6, [sp, #8]
 8000e3e:	9b03      	ldr	r3, [sp, #12]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d016      	beq.n	8000e72 <__aeabi_ddiv+0xda>
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0xb2>
 8000e48:	e2a6      	b.n	8001398 <__aeabi_ddiv+0x600>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_ddiv+0xb8>
 8000e4e:	e0df      	b.n	8001010 <__aeabi_ddiv+0x278>
 8000e50:	2200      	movs	r2, #0
 8000e52:	2300      	movs	r3, #0
 8000e54:	2400      	movs	r4, #0
 8000e56:	4690      	mov	r8, r2
 8000e58:	051b      	lsls	r3, r3, #20
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	07f6      	lsls	r6, r6, #31
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4640      	mov	r0, r8
 8000e62:	0019      	movs	r1, r3
 8000e64:	b007      	add	sp, #28
 8000e66:	bcf0      	pop	{r4, r5, r6, r7}
 8000e68:	46bb      	mov	fp, r7
 8000e6a:	46b2      	mov	sl, r6
 8000e6c:	46a9      	mov	r9, r5
 8000e6e:	46a0      	mov	r8, r4
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e72:	2200      	movs	r2, #0
 8000e74:	2400      	movs	r4, #0
 8000e76:	4690      	mov	r8, r2
 8000e78:	4ba6      	ldr	r3, [pc, #664]	@ (8001114 <__aeabi_ddiv+0x37c>)
 8000e7a:	e7ed      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8000e7c:	002e      	movs	r6, r5
 8000e7e:	e7df      	b.n	8000e40 <__aeabi_ddiv+0xa8>
 8000e80:	45cb      	cmp	fp, r9
 8000e82:	d200      	bcs.n	8000e86 <__aeabi_ddiv+0xee>
 8000e84:	e1d4      	b.n	8001230 <__aeabi_ddiv+0x498>
 8000e86:	d100      	bne.n	8000e8a <__aeabi_ddiv+0xf2>
 8000e88:	e1cf      	b.n	800122a <__aeabi_ddiv+0x492>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	469c      	mov	ip, r3
 8000e90:	4644      	mov	r4, r8
 8000e92:	4648      	mov	r0, r9
 8000e94:	2700      	movs	r7, #0
 8000e96:	44e2      	add	sl, ip
 8000e98:	465b      	mov	r3, fp
 8000e9a:	0e15      	lsrs	r5, r2, #24
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	431d      	orrs	r5, r3
 8000ea0:	0c19      	lsrs	r1, r3, #16
 8000ea2:	042b      	lsls	r3, r5, #16
 8000ea4:	0212      	lsls	r2, r2, #8
 8000ea6:	9500      	str	r5, [sp, #0]
 8000ea8:	0c1d      	lsrs	r5, r3, #16
 8000eaa:	4691      	mov	r9, r2
 8000eac:	9102      	str	r1, [sp, #8]
 8000eae:	9503      	str	r5, [sp, #12]
 8000eb0:	f7ff f9b8 	bl	8000224 <__aeabi_uidivmod>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	436a      	muls	r2, r5
 8000eb8:	040b      	lsls	r3, r1, #16
 8000eba:	0c21      	lsrs	r1, r4, #16
 8000ebc:	4680      	mov	r8, r0
 8000ebe:	4319      	orrs	r1, r3
 8000ec0:	428a      	cmp	r2, r1
 8000ec2:	d909      	bls.n	8000ed8 <__aeabi_ddiv+0x140>
 8000ec4:	9d00      	ldr	r5, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	46ac      	mov	ip, r5
 8000eca:	425b      	negs	r3, r3
 8000ecc:	4461      	add	r1, ip
 8000ece:	469c      	mov	ip, r3
 8000ed0:	44e0      	add	r8, ip
 8000ed2:	428d      	cmp	r5, r1
 8000ed4:	d800      	bhi.n	8000ed8 <__aeabi_ddiv+0x140>
 8000ed6:	e1fb      	b.n	80012d0 <__aeabi_ddiv+0x538>
 8000ed8:	1a88      	subs	r0, r1, r2
 8000eda:	9902      	ldr	r1, [sp, #8]
 8000edc:	f7ff f9a2 	bl	8000224 <__aeabi_uidivmod>
 8000ee0:	9a03      	ldr	r2, [sp, #12]
 8000ee2:	0424      	lsls	r4, r4, #16
 8000ee4:	4342      	muls	r2, r0
 8000ee6:	0409      	lsls	r1, r1, #16
 8000ee8:	0c24      	lsrs	r4, r4, #16
 8000eea:	0003      	movs	r3, r0
 8000eec:	430c      	orrs	r4, r1
 8000eee:	42a2      	cmp	r2, r4
 8000ef0:	d906      	bls.n	8000f00 <__aeabi_ddiv+0x168>
 8000ef2:	9900      	ldr	r1, [sp, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	468c      	mov	ip, r1
 8000ef8:	4464      	add	r4, ip
 8000efa:	42a1      	cmp	r1, r4
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x168>
 8000efe:	e1e1      	b.n	80012c4 <__aeabi_ddiv+0x52c>
 8000f00:	1aa0      	subs	r0, r4, r2
 8000f02:	4642      	mov	r2, r8
 8000f04:	0412      	lsls	r2, r2, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	4693      	mov	fp, r2
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	4659      	mov	r1, fp
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	001d      	movs	r5, r3
 8000f12:	9304      	str	r3, [sp, #16]
 8000f14:	040b      	lsls	r3, r1, #16
 8000f16:	4649      	mov	r1, r9
 8000f18:	0409      	lsls	r1, r1, #16
 8000f1a:	0c09      	lsrs	r1, r1, #16
 8000f1c:	000c      	movs	r4, r1
 8000f1e:	0c1b      	lsrs	r3, r3, #16
 8000f20:	435c      	muls	r4, r3
 8000f22:	0c12      	lsrs	r2, r2, #16
 8000f24:	436b      	muls	r3, r5
 8000f26:	4688      	mov	r8, r1
 8000f28:	4351      	muls	r1, r2
 8000f2a:	436a      	muls	r2, r5
 8000f2c:	0c25      	lsrs	r5, r4, #16
 8000f2e:	46ac      	mov	ip, r5
 8000f30:	185b      	adds	r3, r3, r1
 8000f32:	4463      	add	r3, ip
 8000f34:	4299      	cmp	r1, r3
 8000f36:	d903      	bls.n	8000f40 <__aeabi_ddiv+0x1a8>
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	0249      	lsls	r1, r1, #9
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	4462      	add	r2, ip
 8000f40:	0c19      	lsrs	r1, r3, #16
 8000f42:	0424      	lsls	r4, r4, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c24      	lsrs	r4, r4, #16
 8000f48:	188a      	adds	r2, r1, r2
 8000f4a:	191c      	adds	r4, r3, r4
 8000f4c:	4290      	cmp	r0, r2
 8000f4e:	d302      	bcc.n	8000f56 <__aeabi_ddiv+0x1be>
 8000f50:	d116      	bne.n	8000f80 <__aeabi_ddiv+0x1e8>
 8000f52:	42a7      	cmp	r7, r4
 8000f54:	d214      	bcs.n	8000f80 <__aeabi_ddiv+0x1e8>
 8000f56:	465b      	mov	r3, fp
 8000f58:	9d00      	ldr	r5, [sp, #0]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	444f      	add	r7, r9
 8000f5e:	9305      	str	r3, [sp, #20]
 8000f60:	454f      	cmp	r7, r9
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	46ac      	mov	ip, r5
 8000f66:	425b      	negs	r3, r3
 8000f68:	4463      	add	r3, ip
 8000f6a:	18c0      	adds	r0, r0, r3
 8000f6c:	4285      	cmp	r5, r0
 8000f6e:	d300      	bcc.n	8000f72 <__aeabi_ddiv+0x1da>
 8000f70:	e1a1      	b.n	80012b6 <__aeabi_ddiv+0x51e>
 8000f72:	4282      	cmp	r2, r0
 8000f74:	d900      	bls.n	8000f78 <__aeabi_ddiv+0x1e0>
 8000f76:	e1f6      	b.n	8001366 <__aeabi_ddiv+0x5ce>
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x1e4>
 8000f7a:	e1f1      	b.n	8001360 <__aeabi_ddiv+0x5c8>
 8000f7c:	9b05      	ldr	r3, [sp, #20]
 8000f7e:	469b      	mov	fp, r3
 8000f80:	1b3c      	subs	r4, r7, r4
 8000f82:	42a7      	cmp	r7, r4
 8000f84:	41bf      	sbcs	r7, r7
 8000f86:	9d00      	ldr	r5, [sp, #0]
 8000f88:	1a80      	subs	r0, r0, r2
 8000f8a:	427f      	negs	r7, r7
 8000f8c:	1bc0      	subs	r0, r0, r7
 8000f8e:	4285      	cmp	r5, r0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x1fc>
 8000f92:	e1d0      	b.n	8001336 <__aeabi_ddiv+0x59e>
 8000f94:	9902      	ldr	r1, [sp, #8]
 8000f96:	f7ff f945 	bl	8000224 <__aeabi_uidivmod>
 8000f9a:	9a03      	ldr	r2, [sp, #12]
 8000f9c:	040b      	lsls	r3, r1, #16
 8000f9e:	4342      	muls	r2, r0
 8000fa0:	0c21      	lsrs	r1, r4, #16
 8000fa2:	0007      	movs	r7, r0
 8000fa4:	4319      	orrs	r1, r3
 8000fa6:	428a      	cmp	r2, r1
 8000fa8:	d900      	bls.n	8000fac <__aeabi_ddiv+0x214>
 8000faa:	e178      	b.n	800129e <__aeabi_ddiv+0x506>
 8000fac:	1a88      	subs	r0, r1, r2
 8000fae:	9902      	ldr	r1, [sp, #8]
 8000fb0:	f7ff f938 	bl	8000224 <__aeabi_uidivmod>
 8000fb4:	9a03      	ldr	r2, [sp, #12]
 8000fb6:	0424      	lsls	r4, r4, #16
 8000fb8:	4342      	muls	r2, r0
 8000fba:	0409      	lsls	r1, r1, #16
 8000fbc:	0c24      	lsrs	r4, r4, #16
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	430c      	orrs	r4, r1
 8000fc2:	42a2      	cmp	r2, r4
 8000fc4:	d900      	bls.n	8000fc8 <__aeabi_ddiv+0x230>
 8000fc6:	e15d      	b.n	8001284 <__aeabi_ddiv+0x4ec>
 8000fc8:	4641      	mov	r1, r8
 8000fca:	1aa4      	subs	r4, r4, r2
 8000fcc:	043a      	lsls	r2, r7, #16
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	9d04      	ldr	r5, [sp, #16]
 8000fd2:	0413      	lsls	r3, r2, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	4359      	muls	r1, r3
 8000fd8:	4647      	mov	r7, r8
 8000fda:	436b      	muls	r3, r5
 8000fdc:	469c      	mov	ip, r3
 8000fde:	0c10      	lsrs	r0, r2, #16
 8000fe0:	4347      	muls	r7, r0
 8000fe2:	0c0b      	lsrs	r3, r1, #16
 8000fe4:	44bc      	add	ip, r7
 8000fe6:	4463      	add	r3, ip
 8000fe8:	4368      	muls	r0, r5
 8000fea:	429f      	cmp	r7, r3
 8000fec:	d903      	bls.n	8000ff6 <__aeabi_ddiv+0x25e>
 8000fee:	2580      	movs	r5, #128	@ 0x80
 8000ff0:	026d      	lsls	r5, r5, #9
 8000ff2:	46ac      	mov	ip, r5
 8000ff4:	4460      	add	r0, ip
 8000ff6:	0c1f      	lsrs	r7, r3, #16
 8000ff8:	0409      	lsls	r1, r1, #16
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	0c09      	lsrs	r1, r1, #16
 8000ffe:	183f      	adds	r7, r7, r0
 8001000:	185b      	adds	r3, r3, r1
 8001002:	42bc      	cmp	r4, r7
 8001004:	d200      	bcs.n	8001008 <__aeabi_ddiv+0x270>
 8001006:	e102      	b.n	800120e <__aeabi_ddiv+0x476>
 8001008:	d100      	bne.n	800100c <__aeabi_ddiv+0x274>
 800100a:	e0fd      	b.n	8001208 <__aeabi_ddiv+0x470>
 800100c:	2301      	movs	r3, #1
 800100e:	431a      	orrs	r2, r3
 8001010:	4b43      	ldr	r3, [pc, #268]	@ (8001120 <__aeabi_ddiv+0x388>)
 8001012:	4453      	add	r3, sl
 8001014:	2b00      	cmp	r3, #0
 8001016:	dc00      	bgt.n	800101a <__aeabi_ddiv+0x282>
 8001018:	e0ae      	b.n	8001178 <__aeabi_ddiv+0x3e0>
 800101a:	0751      	lsls	r1, r2, #29
 800101c:	d000      	beq.n	8001020 <__aeabi_ddiv+0x288>
 800101e:	e198      	b.n	8001352 <__aeabi_ddiv+0x5ba>
 8001020:	4659      	mov	r1, fp
 8001022:	01c9      	lsls	r1, r1, #7
 8001024:	d506      	bpl.n	8001034 <__aeabi_ddiv+0x29c>
 8001026:	4659      	mov	r1, fp
 8001028:	4b3e      	ldr	r3, [pc, #248]	@ (8001124 <__aeabi_ddiv+0x38c>)
 800102a:	4019      	ands	r1, r3
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	468b      	mov	fp, r1
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4453      	add	r3, sl
 8001034:	493c      	ldr	r1, [pc, #240]	@ (8001128 <__aeabi_ddiv+0x390>)
 8001036:	428b      	cmp	r3, r1
 8001038:	dd00      	ble.n	800103c <__aeabi_ddiv+0x2a4>
 800103a:	e71a      	b.n	8000e72 <__aeabi_ddiv+0xda>
 800103c:	4659      	mov	r1, fp
 800103e:	08d2      	lsrs	r2, r2, #3
 8001040:	0749      	lsls	r1, r1, #29
 8001042:	4311      	orrs	r1, r2
 8001044:	465a      	mov	r2, fp
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	0254      	lsls	r4, r2, #9
 800104a:	4688      	mov	r8, r1
 800104c:	0b24      	lsrs	r4, r4, #12
 800104e:	0d5b      	lsrs	r3, r3, #21
 8001050:	e702      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001052:	465a      	mov	r2, fp
 8001054:	9b00      	ldr	r3, [sp, #0]
 8001056:	431a      	orrs	r2, r3
 8001058:	d100      	bne.n	800105c <__aeabi_ddiv+0x2c4>
 800105a:	e07e      	b.n	800115a <__aeabi_ddiv+0x3c2>
 800105c:	465b      	mov	r3, fp
 800105e:	2b00      	cmp	r3, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_ddiv+0x2cc>
 8001062:	e100      	b.n	8001266 <__aeabi_ddiv+0x4ce>
 8001064:	4658      	mov	r0, fp
 8001066:	f7ff fa0b 	bl	8000480 <__clzsi2>
 800106a:	0002      	movs	r2, r0
 800106c:	0003      	movs	r3, r0
 800106e:	3a0b      	subs	r2, #11
 8001070:	271d      	movs	r7, #29
 8001072:	9e00      	ldr	r6, [sp, #0]
 8001074:	1aba      	subs	r2, r7, r2
 8001076:	0019      	movs	r1, r3
 8001078:	4658      	mov	r0, fp
 800107a:	40d6      	lsrs	r6, r2
 800107c:	3908      	subs	r1, #8
 800107e:	4088      	lsls	r0, r1
 8001080:	0032      	movs	r2, r6
 8001082:	4302      	orrs	r2, r0
 8001084:	4693      	mov	fp, r2
 8001086:	9a00      	ldr	r2, [sp, #0]
 8001088:	408a      	lsls	r2, r1
 800108a:	4928      	ldr	r1, [pc, #160]	@ (800112c <__aeabi_ddiv+0x394>)
 800108c:	4453      	add	r3, sl
 800108e:	468a      	mov	sl, r1
 8001090:	449a      	add	sl, r3
 8001092:	2300      	movs	r3, #0
 8001094:	e6c8      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001096:	465b      	mov	r3, fp
 8001098:	4303      	orrs	r3, r0
 800109a:	4699      	mov	r9, r3
 800109c:	d056      	beq.n	800114c <__aeabi_ddiv+0x3b4>
 800109e:	465b      	mov	r3, fp
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0x30e>
 80010a4:	e0cd      	b.n	8001242 <__aeabi_ddiv+0x4aa>
 80010a6:	4658      	mov	r0, fp
 80010a8:	f7ff f9ea 	bl	8000480 <__clzsi2>
 80010ac:	230b      	movs	r3, #11
 80010ae:	425b      	negs	r3, r3
 80010b0:	469c      	mov	ip, r3
 80010b2:	0002      	movs	r2, r0
 80010b4:	4484      	add	ip, r0
 80010b6:	4666      	mov	r6, ip
 80010b8:	231d      	movs	r3, #29
 80010ba:	1b9b      	subs	r3, r3, r6
 80010bc:	0026      	movs	r6, r4
 80010be:	0011      	movs	r1, r2
 80010c0:	4658      	mov	r0, fp
 80010c2:	40de      	lsrs	r6, r3
 80010c4:	3908      	subs	r1, #8
 80010c6:	4088      	lsls	r0, r1
 80010c8:	0033      	movs	r3, r6
 80010ca:	4303      	orrs	r3, r0
 80010cc:	4699      	mov	r9, r3
 80010ce:	0023      	movs	r3, r4
 80010d0:	408b      	lsls	r3, r1
 80010d2:	4698      	mov	r8, r3
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <__aeabi_ddiv+0x398>)
 80010d6:	2400      	movs	r4, #0
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	469a      	mov	sl, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	9303      	str	r3, [sp, #12]
 80010e0:	e682      	b.n	8000de8 <__aeabi_ddiv+0x50>
 80010e2:	465a      	mov	r2, fp
 80010e4:	4302      	orrs	r2, r0
 80010e6:	4691      	mov	r9, r2
 80010e8:	d12a      	bne.n	8001140 <__aeabi_ddiv+0x3a8>
 80010ea:	2200      	movs	r2, #0
 80010ec:	469a      	mov	sl, r3
 80010ee:	2302      	movs	r3, #2
 80010f0:	4690      	mov	r8, r2
 80010f2:	2408      	movs	r4, #8
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	e677      	b.n	8000de8 <__aeabi_ddiv+0x50>
 80010f8:	465a      	mov	r2, fp
 80010fa:	9b00      	ldr	r3, [sp, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <__aeabi_ddiv+0x39c>)
 8001100:	469c      	mov	ip, r3
 8001102:	44e2      	add	sl, ip
 8001104:	2a00      	cmp	r2, #0
 8001106:	d117      	bne.n	8001138 <__aeabi_ddiv+0x3a0>
 8001108:	2302      	movs	r3, #2
 800110a:	431c      	orrs	r4, r3
 800110c:	2300      	movs	r3, #0
 800110e:	469b      	mov	fp, r3
 8001110:	3302      	adds	r3, #2
 8001112:	e689      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001114:	000007ff 	.word	0x000007ff
 8001118:	fffffc01 	.word	0xfffffc01
 800111c:	0801b1e0 	.word	0x0801b1e0
 8001120:	000003ff 	.word	0x000003ff
 8001124:	feffffff 	.word	0xfeffffff
 8001128:	000007fe 	.word	0x000007fe
 800112c:	000003f3 	.word	0x000003f3
 8001130:	fffffc0d 	.word	0xfffffc0d
 8001134:	fffff801 	.word	0xfffff801
 8001138:	2303      	movs	r3, #3
 800113a:	0032      	movs	r2, r6
 800113c:	431c      	orrs	r4, r3
 800113e:	e673      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001140:	469a      	mov	sl, r3
 8001142:	2303      	movs	r3, #3
 8001144:	46d9      	mov	r9, fp
 8001146:	240c      	movs	r4, #12
 8001148:	9303      	str	r3, [sp, #12]
 800114a:	e64d      	b.n	8000de8 <__aeabi_ddiv+0x50>
 800114c:	2300      	movs	r3, #0
 800114e:	4698      	mov	r8, r3
 8001150:	469a      	mov	sl, r3
 8001152:	3301      	adds	r3, #1
 8001154:	2404      	movs	r4, #4
 8001156:	9303      	str	r3, [sp, #12]
 8001158:	e646      	b.n	8000de8 <__aeabi_ddiv+0x50>
 800115a:	2301      	movs	r3, #1
 800115c:	431c      	orrs	r4, r3
 800115e:	2300      	movs	r3, #0
 8001160:	469b      	mov	fp, r3
 8001162:	3301      	adds	r3, #1
 8001164:	e660      	b.n	8000e28 <__aeabi_ddiv+0x90>
 8001166:	2300      	movs	r3, #0
 8001168:	2480      	movs	r4, #128	@ 0x80
 800116a:	4698      	mov	r8, r3
 800116c:	2600      	movs	r6, #0
 800116e:	4b92      	ldr	r3, [pc, #584]	@ (80013b8 <__aeabi_ddiv+0x620>)
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	e671      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001174:	2201      	movs	r2, #1
 8001176:	4252      	negs	r2, r2
 8001178:	2101      	movs	r1, #1
 800117a:	1ac9      	subs	r1, r1, r3
 800117c:	2938      	cmp	r1, #56	@ 0x38
 800117e:	dd00      	ble.n	8001182 <__aeabi_ddiv+0x3ea>
 8001180:	e666      	b.n	8000e50 <__aeabi_ddiv+0xb8>
 8001182:	291f      	cmp	r1, #31
 8001184:	dc00      	bgt.n	8001188 <__aeabi_ddiv+0x3f0>
 8001186:	e0ab      	b.n	80012e0 <__aeabi_ddiv+0x548>
 8001188:	201f      	movs	r0, #31
 800118a:	4240      	negs	r0, r0
 800118c:	1ac3      	subs	r3, r0, r3
 800118e:	4658      	mov	r0, fp
 8001190:	40d8      	lsrs	r0, r3
 8001192:	0003      	movs	r3, r0
 8001194:	2920      	cmp	r1, #32
 8001196:	d004      	beq.n	80011a2 <__aeabi_ddiv+0x40a>
 8001198:	4658      	mov	r0, fp
 800119a:	4988      	ldr	r1, [pc, #544]	@ (80013bc <__aeabi_ddiv+0x624>)
 800119c:	4451      	add	r1, sl
 800119e:	4088      	lsls	r0, r1
 80011a0:	4302      	orrs	r2, r0
 80011a2:	1e51      	subs	r1, r2, #1
 80011a4:	418a      	sbcs	r2, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	2307      	movs	r3, #7
 80011aa:	0019      	movs	r1, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	4011      	ands	r1, r2
 80011b0:	4213      	tst	r3, r2
 80011b2:	d00c      	beq.n	80011ce <__aeabi_ddiv+0x436>
 80011b4:	230f      	movs	r3, #15
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x426>
 80011bc:	e0f9      	b.n	80013b2 <__aeabi_ddiv+0x61a>
 80011be:	1d11      	adds	r1, r2, #4
 80011c0:	4291      	cmp	r1, r2
 80011c2:	419b      	sbcs	r3, r3
 80011c4:	000a      	movs	r2, r1
 80011c6:	425b      	negs	r3, r3
 80011c8:	0759      	lsls	r1, r3, #29
 80011ca:	025b      	lsls	r3, r3, #9
 80011cc:	0b1c      	lsrs	r4, r3, #12
 80011ce:	08d2      	lsrs	r2, r2, #3
 80011d0:	430a      	orrs	r2, r1
 80011d2:	4690      	mov	r8, r2
 80011d4:	2300      	movs	r3, #0
 80011d6:	e63f      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 80011d8:	2480      	movs	r4, #128	@ 0x80
 80011da:	464b      	mov	r3, r9
 80011dc:	0324      	lsls	r4, r4, #12
 80011de:	4223      	tst	r3, r4
 80011e0:	d009      	beq.n	80011f6 <__aeabi_ddiv+0x45e>
 80011e2:	465b      	mov	r3, fp
 80011e4:	4223      	tst	r3, r4
 80011e6:	d106      	bne.n	80011f6 <__aeabi_ddiv+0x45e>
 80011e8:	431c      	orrs	r4, r3
 80011ea:	0324      	lsls	r4, r4, #12
 80011ec:	002e      	movs	r6, r5
 80011ee:	4690      	mov	r8, r2
 80011f0:	4b71      	ldr	r3, [pc, #452]	@ (80013b8 <__aeabi_ddiv+0x620>)
 80011f2:	0b24      	lsrs	r4, r4, #12
 80011f4:	e630      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 80011f6:	2480      	movs	r4, #128	@ 0x80
 80011f8:	464b      	mov	r3, r9
 80011fa:	0324      	lsls	r4, r4, #12
 80011fc:	431c      	orrs	r4, r3
 80011fe:	0324      	lsls	r4, r4, #12
 8001200:	9e02      	ldr	r6, [sp, #8]
 8001202:	4b6d      	ldr	r3, [pc, #436]	@ (80013b8 <__aeabi_ddiv+0x620>)
 8001204:	0b24      	lsrs	r4, r4, #12
 8001206:	e627      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x476>
 800120c:	e700      	b.n	8001010 <__aeabi_ddiv+0x278>
 800120e:	9800      	ldr	r0, [sp, #0]
 8001210:	1e51      	subs	r1, r2, #1
 8001212:	4684      	mov	ip, r0
 8001214:	4464      	add	r4, ip
 8001216:	4284      	cmp	r4, r0
 8001218:	d200      	bcs.n	800121c <__aeabi_ddiv+0x484>
 800121a:	e084      	b.n	8001326 <__aeabi_ddiv+0x58e>
 800121c:	42bc      	cmp	r4, r7
 800121e:	d200      	bcs.n	8001222 <__aeabi_ddiv+0x48a>
 8001220:	e0ae      	b.n	8001380 <__aeabi_ddiv+0x5e8>
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x48e>
 8001224:	e0c1      	b.n	80013aa <__aeabi_ddiv+0x612>
 8001226:	000a      	movs	r2, r1
 8001228:	e6f0      	b.n	800100c <__aeabi_ddiv+0x274>
 800122a:	4542      	cmp	r2, r8
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x498>
 800122e:	e62c      	b.n	8000e8a <__aeabi_ddiv+0xf2>
 8001230:	464b      	mov	r3, r9
 8001232:	07dc      	lsls	r4, r3, #31
 8001234:	0858      	lsrs	r0, r3, #1
 8001236:	4643      	mov	r3, r8
 8001238:	085b      	lsrs	r3, r3, #1
 800123a:	431c      	orrs	r4, r3
 800123c:	4643      	mov	r3, r8
 800123e:	07df      	lsls	r7, r3, #31
 8001240:	e62a      	b.n	8000e98 <__aeabi_ddiv+0x100>
 8001242:	f7ff f91d 	bl	8000480 <__clzsi2>
 8001246:	2315      	movs	r3, #21
 8001248:	469c      	mov	ip, r3
 800124a:	4484      	add	ip, r0
 800124c:	0002      	movs	r2, r0
 800124e:	4663      	mov	r3, ip
 8001250:	3220      	adds	r2, #32
 8001252:	2b1c      	cmp	r3, #28
 8001254:	dc00      	bgt.n	8001258 <__aeabi_ddiv+0x4c0>
 8001256:	e72e      	b.n	80010b6 <__aeabi_ddiv+0x31e>
 8001258:	0023      	movs	r3, r4
 800125a:	3808      	subs	r0, #8
 800125c:	4083      	lsls	r3, r0
 800125e:	4699      	mov	r9, r3
 8001260:	2300      	movs	r3, #0
 8001262:	4698      	mov	r8, r3
 8001264:	e736      	b.n	80010d4 <__aeabi_ddiv+0x33c>
 8001266:	f7ff f90b 	bl	8000480 <__clzsi2>
 800126a:	0002      	movs	r2, r0
 800126c:	0003      	movs	r3, r0
 800126e:	3215      	adds	r2, #21
 8001270:	3320      	adds	r3, #32
 8001272:	2a1c      	cmp	r2, #28
 8001274:	dc00      	bgt.n	8001278 <__aeabi_ddiv+0x4e0>
 8001276:	e6fb      	b.n	8001070 <__aeabi_ddiv+0x2d8>
 8001278:	9900      	ldr	r1, [sp, #0]
 800127a:	3808      	subs	r0, #8
 800127c:	4081      	lsls	r1, r0
 800127e:	2200      	movs	r2, #0
 8001280:	468b      	mov	fp, r1
 8001282:	e702      	b.n	800108a <__aeabi_ddiv+0x2f2>
 8001284:	9900      	ldr	r1, [sp, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	468c      	mov	ip, r1
 800128a:	4464      	add	r4, ip
 800128c:	42a1      	cmp	r1, r4
 800128e:	d900      	bls.n	8001292 <__aeabi_ddiv+0x4fa>
 8001290:	e69a      	b.n	8000fc8 <__aeabi_ddiv+0x230>
 8001292:	42a2      	cmp	r2, r4
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x500>
 8001296:	e697      	b.n	8000fc8 <__aeabi_ddiv+0x230>
 8001298:	1e83      	subs	r3, r0, #2
 800129a:	4464      	add	r4, ip
 800129c:	e694      	b.n	8000fc8 <__aeabi_ddiv+0x230>
 800129e:	46ac      	mov	ip, r5
 80012a0:	4461      	add	r1, ip
 80012a2:	3f01      	subs	r7, #1
 80012a4:	428d      	cmp	r5, r1
 80012a6:	d900      	bls.n	80012aa <__aeabi_ddiv+0x512>
 80012a8:	e680      	b.n	8000fac <__aeabi_ddiv+0x214>
 80012aa:	428a      	cmp	r2, r1
 80012ac:	d800      	bhi.n	80012b0 <__aeabi_ddiv+0x518>
 80012ae:	e67d      	b.n	8000fac <__aeabi_ddiv+0x214>
 80012b0:	1e87      	subs	r7, r0, #2
 80012b2:	4461      	add	r1, ip
 80012b4:	e67a      	b.n	8000fac <__aeabi_ddiv+0x214>
 80012b6:	4285      	cmp	r5, r0
 80012b8:	d000      	beq.n	80012bc <__aeabi_ddiv+0x524>
 80012ba:	e65f      	b.n	8000f7c <__aeabi_ddiv+0x1e4>
 80012bc:	45b9      	cmp	r9, r7
 80012be:	d900      	bls.n	80012c2 <__aeabi_ddiv+0x52a>
 80012c0:	e65c      	b.n	8000f7c <__aeabi_ddiv+0x1e4>
 80012c2:	e656      	b.n	8000f72 <__aeabi_ddiv+0x1da>
 80012c4:	42a2      	cmp	r2, r4
 80012c6:	d800      	bhi.n	80012ca <__aeabi_ddiv+0x532>
 80012c8:	e61a      	b.n	8000f00 <__aeabi_ddiv+0x168>
 80012ca:	1e83      	subs	r3, r0, #2
 80012cc:	4464      	add	r4, ip
 80012ce:	e617      	b.n	8000f00 <__aeabi_ddiv+0x168>
 80012d0:	428a      	cmp	r2, r1
 80012d2:	d800      	bhi.n	80012d6 <__aeabi_ddiv+0x53e>
 80012d4:	e600      	b.n	8000ed8 <__aeabi_ddiv+0x140>
 80012d6:	46ac      	mov	ip, r5
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	4698      	mov	r8, r3
 80012dc:	4461      	add	r1, ip
 80012de:	e5fb      	b.n	8000ed8 <__aeabi_ddiv+0x140>
 80012e0:	4837      	ldr	r0, [pc, #220]	@ (80013c0 <__aeabi_ddiv+0x628>)
 80012e2:	0014      	movs	r4, r2
 80012e4:	4450      	add	r0, sl
 80012e6:	4082      	lsls	r2, r0
 80012e8:	465b      	mov	r3, fp
 80012ea:	0017      	movs	r7, r2
 80012ec:	4083      	lsls	r3, r0
 80012ee:	40cc      	lsrs	r4, r1
 80012f0:	1e7a      	subs	r2, r7, #1
 80012f2:	4197      	sbcs	r7, r2
 80012f4:	4323      	orrs	r3, r4
 80012f6:	433b      	orrs	r3, r7
 80012f8:	001a      	movs	r2, r3
 80012fa:	465b      	mov	r3, fp
 80012fc:	40cb      	lsrs	r3, r1
 80012fe:	0751      	lsls	r1, r2, #29
 8001300:	d009      	beq.n	8001316 <__aeabi_ddiv+0x57e>
 8001302:	210f      	movs	r1, #15
 8001304:	4011      	ands	r1, r2
 8001306:	2904      	cmp	r1, #4
 8001308:	d005      	beq.n	8001316 <__aeabi_ddiv+0x57e>
 800130a:	1d11      	adds	r1, r2, #4
 800130c:	4291      	cmp	r1, r2
 800130e:	4192      	sbcs	r2, r2
 8001310:	4252      	negs	r2, r2
 8001312:	189b      	adds	r3, r3, r2
 8001314:	000a      	movs	r2, r1
 8001316:	0219      	lsls	r1, r3, #8
 8001318:	d400      	bmi.n	800131c <__aeabi_ddiv+0x584>
 800131a:	e755      	b.n	80011c8 <__aeabi_ddiv+0x430>
 800131c:	2200      	movs	r2, #0
 800131e:	2301      	movs	r3, #1
 8001320:	2400      	movs	r4, #0
 8001322:	4690      	mov	r8, r2
 8001324:	e598      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 8001326:	000a      	movs	r2, r1
 8001328:	42bc      	cmp	r4, r7
 800132a:	d000      	beq.n	800132e <__aeabi_ddiv+0x596>
 800132c:	e66e      	b.n	800100c <__aeabi_ddiv+0x274>
 800132e:	454b      	cmp	r3, r9
 8001330:	d000      	beq.n	8001334 <__aeabi_ddiv+0x59c>
 8001332:	e66b      	b.n	800100c <__aeabi_ddiv+0x274>
 8001334:	e66c      	b.n	8001010 <__aeabi_ddiv+0x278>
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <__aeabi_ddiv+0x62c>)
 8001338:	4a23      	ldr	r2, [pc, #140]	@ (80013c8 <__aeabi_ddiv+0x630>)
 800133a:	4453      	add	r3, sl
 800133c:	4592      	cmp	sl, r2
 800133e:	da00      	bge.n	8001342 <__aeabi_ddiv+0x5aa>
 8001340:	e718      	b.n	8001174 <__aeabi_ddiv+0x3dc>
 8001342:	2101      	movs	r1, #1
 8001344:	4249      	negs	r1, r1
 8001346:	1d0a      	adds	r2, r1, #4
 8001348:	428a      	cmp	r2, r1
 800134a:	4189      	sbcs	r1, r1
 800134c:	4249      	negs	r1, r1
 800134e:	448b      	add	fp, r1
 8001350:	e666      	b.n	8001020 <__aeabi_ddiv+0x288>
 8001352:	210f      	movs	r1, #15
 8001354:	4011      	ands	r1, r2
 8001356:	2904      	cmp	r1, #4
 8001358:	d100      	bne.n	800135c <__aeabi_ddiv+0x5c4>
 800135a:	e661      	b.n	8001020 <__aeabi_ddiv+0x288>
 800135c:	0011      	movs	r1, r2
 800135e:	e7f2      	b.n	8001346 <__aeabi_ddiv+0x5ae>
 8001360:	42bc      	cmp	r4, r7
 8001362:	d800      	bhi.n	8001366 <__aeabi_ddiv+0x5ce>
 8001364:	e60a      	b.n	8000f7c <__aeabi_ddiv+0x1e4>
 8001366:	2302      	movs	r3, #2
 8001368:	425b      	negs	r3, r3
 800136a:	469c      	mov	ip, r3
 800136c:	9900      	ldr	r1, [sp, #0]
 800136e:	444f      	add	r7, r9
 8001370:	454f      	cmp	r7, r9
 8001372:	419b      	sbcs	r3, r3
 8001374:	44e3      	add	fp, ip
 8001376:	468c      	mov	ip, r1
 8001378:	425b      	negs	r3, r3
 800137a:	4463      	add	r3, ip
 800137c:	18c0      	adds	r0, r0, r3
 800137e:	e5ff      	b.n	8000f80 <__aeabi_ddiv+0x1e8>
 8001380:	4649      	mov	r1, r9
 8001382:	9d00      	ldr	r5, [sp, #0]
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	4548      	cmp	r0, r9
 8001388:	4189      	sbcs	r1, r1
 800138a:	46ac      	mov	ip, r5
 800138c:	4249      	negs	r1, r1
 800138e:	4461      	add	r1, ip
 8001390:	4681      	mov	r9, r0
 8001392:	3a02      	subs	r2, #2
 8001394:	1864      	adds	r4, r4, r1
 8001396:	e7c7      	b.n	8001328 <__aeabi_ddiv+0x590>
 8001398:	2480      	movs	r4, #128	@ 0x80
 800139a:	465b      	mov	r3, fp
 800139c:	0324      	lsls	r4, r4, #12
 800139e:	431c      	orrs	r4, r3
 80013a0:	0324      	lsls	r4, r4, #12
 80013a2:	4690      	mov	r8, r2
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <__aeabi_ddiv+0x620>)
 80013a6:	0b24      	lsrs	r4, r4, #12
 80013a8:	e556      	b.n	8000e58 <__aeabi_ddiv+0xc0>
 80013aa:	4599      	cmp	r9, r3
 80013ac:	d3e8      	bcc.n	8001380 <__aeabi_ddiv+0x5e8>
 80013ae:	000a      	movs	r2, r1
 80013b0:	e7bd      	b.n	800132e <__aeabi_ddiv+0x596>
 80013b2:	2300      	movs	r3, #0
 80013b4:	e708      	b.n	80011c8 <__aeabi_ddiv+0x430>
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	000007ff 	.word	0x000007ff
 80013bc:	0000043e 	.word	0x0000043e
 80013c0:	0000041e 	.word	0x0000041e
 80013c4:	000003ff 	.word	0x000003ff
 80013c8:	fffffc02 	.word	0xfffffc02

080013cc <__eqdf2>:
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	4657      	mov	r7, sl
 80013d0:	46de      	mov	lr, fp
 80013d2:	464e      	mov	r6, r9
 80013d4:	4645      	mov	r5, r8
 80013d6:	b5e0      	push	{r5, r6, r7, lr}
 80013d8:	000d      	movs	r5, r1
 80013da:	0004      	movs	r4, r0
 80013dc:	0fe8      	lsrs	r0, r5, #31
 80013de:	4683      	mov	fp, r0
 80013e0:	0309      	lsls	r1, r1, #12
 80013e2:	0fd8      	lsrs	r0, r3, #31
 80013e4:	0b09      	lsrs	r1, r1, #12
 80013e6:	4682      	mov	sl, r0
 80013e8:	4819      	ldr	r0, [pc, #100]	@ (8001450 <__eqdf2+0x84>)
 80013ea:	468c      	mov	ip, r1
 80013ec:	031f      	lsls	r7, r3, #12
 80013ee:	0069      	lsls	r1, r5, #1
 80013f0:	005e      	lsls	r6, r3, #1
 80013f2:	0d49      	lsrs	r1, r1, #21
 80013f4:	0b3f      	lsrs	r7, r7, #12
 80013f6:	0d76      	lsrs	r6, r6, #21
 80013f8:	4281      	cmp	r1, r0
 80013fa:	d018      	beq.n	800142e <__eqdf2+0x62>
 80013fc:	4286      	cmp	r6, r0
 80013fe:	d00f      	beq.n	8001420 <__eqdf2+0x54>
 8001400:	2001      	movs	r0, #1
 8001402:	42b1      	cmp	r1, r6
 8001404:	d10d      	bne.n	8001422 <__eqdf2+0x56>
 8001406:	45bc      	cmp	ip, r7
 8001408:	d10b      	bne.n	8001422 <__eqdf2+0x56>
 800140a:	4294      	cmp	r4, r2
 800140c:	d109      	bne.n	8001422 <__eqdf2+0x56>
 800140e:	45d3      	cmp	fp, sl
 8001410:	d01c      	beq.n	800144c <__eqdf2+0x80>
 8001412:	2900      	cmp	r1, #0
 8001414:	d105      	bne.n	8001422 <__eqdf2+0x56>
 8001416:	4660      	mov	r0, ip
 8001418:	4320      	orrs	r0, r4
 800141a:	1e43      	subs	r3, r0, #1
 800141c:	4198      	sbcs	r0, r3
 800141e:	e000      	b.n	8001422 <__eqdf2+0x56>
 8001420:	2001      	movs	r0, #1
 8001422:	bcf0      	pop	{r4, r5, r6, r7}
 8001424:	46bb      	mov	fp, r7
 8001426:	46b2      	mov	sl, r6
 8001428:	46a9      	mov	r9, r5
 800142a:	46a0      	mov	r8, r4
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142e:	2001      	movs	r0, #1
 8001430:	428e      	cmp	r6, r1
 8001432:	d1f6      	bne.n	8001422 <__eqdf2+0x56>
 8001434:	4661      	mov	r1, ip
 8001436:	4339      	orrs	r1, r7
 8001438:	000f      	movs	r7, r1
 800143a:	4317      	orrs	r7, r2
 800143c:	4327      	orrs	r7, r4
 800143e:	d1f0      	bne.n	8001422 <__eqdf2+0x56>
 8001440:	465b      	mov	r3, fp
 8001442:	4652      	mov	r2, sl
 8001444:	1a98      	subs	r0, r3, r2
 8001446:	1e43      	subs	r3, r0, #1
 8001448:	4198      	sbcs	r0, r3
 800144a:	e7ea      	b.n	8001422 <__eqdf2+0x56>
 800144c:	2000      	movs	r0, #0
 800144e:	e7e8      	b.n	8001422 <__eqdf2+0x56>
 8001450:	000007ff 	.word	0x000007ff

08001454 <__gedf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	4657      	mov	r7, sl
 8001458:	464e      	mov	r6, r9
 800145a:	4645      	mov	r5, r8
 800145c:	46de      	mov	lr, fp
 800145e:	b5e0      	push	{r5, r6, r7, lr}
 8001460:	000d      	movs	r5, r1
 8001462:	030f      	lsls	r7, r1, #12
 8001464:	0b39      	lsrs	r1, r7, #12
 8001466:	b083      	sub	sp, #12
 8001468:	0004      	movs	r4, r0
 800146a:	4680      	mov	r8, r0
 800146c:	9101      	str	r1, [sp, #4]
 800146e:	0058      	lsls	r0, r3, #1
 8001470:	0fe9      	lsrs	r1, r5, #31
 8001472:	4f31      	ldr	r7, [pc, #196]	@ (8001538 <__gedf2+0xe4>)
 8001474:	0d40      	lsrs	r0, r0, #21
 8001476:	468c      	mov	ip, r1
 8001478:	006e      	lsls	r6, r5, #1
 800147a:	0319      	lsls	r1, r3, #12
 800147c:	4682      	mov	sl, r0
 800147e:	4691      	mov	r9, r2
 8001480:	0d76      	lsrs	r6, r6, #21
 8001482:	0b09      	lsrs	r1, r1, #12
 8001484:	0fd8      	lsrs	r0, r3, #31
 8001486:	42be      	cmp	r6, r7
 8001488:	d01f      	beq.n	80014ca <__gedf2+0x76>
 800148a:	45ba      	cmp	sl, r7
 800148c:	d00f      	beq.n	80014ae <__gedf2+0x5a>
 800148e:	2e00      	cmp	r6, #0
 8001490:	d12f      	bne.n	80014f2 <__gedf2+0x9e>
 8001492:	4655      	mov	r5, sl
 8001494:	9e01      	ldr	r6, [sp, #4]
 8001496:	4334      	orrs	r4, r6
 8001498:	2d00      	cmp	r5, #0
 800149a:	d127      	bne.n	80014ec <__gedf2+0x98>
 800149c:	430a      	orrs	r2, r1
 800149e:	d03a      	beq.n	8001516 <__gedf2+0xc2>
 80014a0:	2c00      	cmp	r4, #0
 80014a2:	d145      	bne.n	8001530 <__gedf2+0xdc>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d11a      	bne.n	80014de <__gedf2+0x8a>
 80014a8:	2001      	movs	r0, #1
 80014aa:	4240      	negs	r0, r0
 80014ac:	e017      	b.n	80014de <__gedf2+0x8a>
 80014ae:	4311      	orrs	r1, r2
 80014b0:	d13b      	bne.n	800152a <__gedf2+0xd6>
 80014b2:	2e00      	cmp	r6, #0
 80014b4:	d102      	bne.n	80014bc <__gedf2+0x68>
 80014b6:	9f01      	ldr	r7, [sp, #4]
 80014b8:	4327      	orrs	r7, r4
 80014ba:	d0f3      	beq.n	80014a4 <__gedf2+0x50>
 80014bc:	4584      	cmp	ip, r0
 80014be:	d109      	bne.n	80014d4 <__gedf2+0x80>
 80014c0:	4663      	mov	r3, ip
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <__gedf2+0x54>
 80014c6:	4660      	mov	r0, ip
 80014c8:	e009      	b.n	80014de <__gedf2+0x8a>
 80014ca:	9f01      	ldr	r7, [sp, #4]
 80014cc:	4327      	orrs	r7, r4
 80014ce:	d12c      	bne.n	800152a <__gedf2+0xd6>
 80014d0:	45b2      	cmp	sl, r6
 80014d2:	d024      	beq.n	800151e <__gedf2+0xca>
 80014d4:	4663      	mov	r3, ip
 80014d6:	2002      	movs	r0, #2
 80014d8:	3b01      	subs	r3, #1
 80014da:	4018      	ands	r0, r3
 80014dc:	3801      	subs	r0, #1
 80014de:	b003      	add	sp, #12
 80014e0:	bcf0      	pop	{r4, r5, r6, r7}
 80014e2:	46bb      	mov	fp, r7
 80014e4:	46b2      	mov	sl, r6
 80014e6:	46a9      	mov	r9, r5
 80014e8:	46a0      	mov	r8, r4
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d0d9      	beq.n	80014a4 <__gedf2+0x50>
 80014f0:	e7e4      	b.n	80014bc <__gedf2+0x68>
 80014f2:	4654      	mov	r4, sl
 80014f4:	2c00      	cmp	r4, #0
 80014f6:	d0ed      	beq.n	80014d4 <__gedf2+0x80>
 80014f8:	4584      	cmp	ip, r0
 80014fa:	d1eb      	bne.n	80014d4 <__gedf2+0x80>
 80014fc:	4556      	cmp	r6, sl
 80014fe:	dce9      	bgt.n	80014d4 <__gedf2+0x80>
 8001500:	dbde      	blt.n	80014c0 <__gedf2+0x6c>
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	428b      	cmp	r3, r1
 8001506:	d8e5      	bhi.n	80014d4 <__gedf2+0x80>
 8001508:	d1da      	bne.n	80014c0 <__gedf2+0x6c>
 800150a:	45c8      	cmp	r8, r9
 800150c:	d8e2      	bhi.n	80014d4 <__gedf2+0x80>
 800150e:	2000      	movs	r0, #0
 8001510:	45c8      	cmp	r8, r9
 8001512:	d2e4      	bcs.n	80014de <__gedf2+0x8a>
 8001514:	e7d4      	b.n	80014c0 <__gedf2+0x6c>
 8001516:	2000      	movs	r0, #0
 8001518:	2c00      	cmp	r4, #0
 800151a:	d0e0      	beq.n	80014de <__gedf2+0x8a>
 800151c:	e7da      	b.n	80014d4 <__gedf2+0x80>
 800151e:	4311      	orrs	r1, r2
 8001520:	d103      	bne.n	800152a <__gedf2+0xd6>
 8001522:	4584      	cmp	ip, r0
 8001524:	d1d6      	bne.n	80014d4 <__gedf2+0x80>
 8001526:	2000      	movs	r0, #0
 8001528:	e7d9      	b.n	80014de <__gedf2+0x8a>
 800152a:	2002      	movs	r0, #2
 800152c:	4240      	negs	r0, r0
 800152e:	e7d6      	b.n	80014de <__gedf2+0x8a>
 8001530:	4584      	cmp	ip, r0
 8001532:	d0e6      	beq.n	8001502 <__gedf2+0xae>
 8001534:	e7ce      	b.n	80014d4 <__gedf2+0x80>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	000007ff 	.word	0x000007ff

0800153c <__ledf2>:
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4657      	mov	r7, sl
 8001540:	464e      	mov	r6, r9
 8001542:	4645      	mov	r5, r8
 8001544:	46de      	mov	lr, fp
 8001546:	b5e0      	push	{r5, r6, r7, lr}
 8001548:	000d      	movs	r5, r1
 800154a:	030f      	lsls	r7, r1, #12
 800154c:	0004      	movs	r4, r0
 800154e:	4680      	mov	r8, r0
 8001550:	0fe8      	lsrs	r0, r5, #31
 8001552:	0b39      	lsrs	r1, r7, #12
 8001554:	4684      	mov	ip, r0
 8001556:	b083      	sub	sp, #12
 8001558:	0058      	lsls	r0, r3, #1
 800155a:	4f30      	ldr	r7, [pc, #192]	@ (800161c <__ledf2+0xe0>)
 800155c:	0d40      	lsrs	r0, r0, #21
 800155e:	9101      	str	r1, [sp, #4]
 8001560:	031e      	lsls	r6, r3, #12
 8001562:	0069      	lsls	r1, r5, #1
 8001564:	4682      	mov	sl, r0
 8001566:	4691      	mov	r9, r2
 8001568:	0d49      	lsrs	r1, r1, #21
 800156a:	0b36      	lsrs	r6, r6, #12
 800156c:	0fd8      	lsrs	r0, r3, #31
 800156e:	42b9      	cmp	r1, r7
 8001570:	d020      	beq.n	80015b4 <__ledf2+0x78>
 8001572:	45ba      	cmp	sl, r7
 8001574:	d00f      	beq.n	8001596 <__ledf2+0x5a>
 8001576:	2900      	cmp	r1, #0
 8001578:	d12b      	bne.n	80015d2 <__ledf2+0x96>
 800157a:	9901      	ldr	r1, [sp, #4]
 800157c:	430c      	orrs	r4, r1
 800157e:	4651      	mov	r1, sl
 8001580:	2900      	cmp	r1, #0
 8001582:	d137      	bne.n	80015f4 <__ledf2+0xb8>
 8001584:	4332      	orrs	r2, r6
 8001586:	d038      	beq.n	80015fa <__ledf2+0xbe>
 8001588:	2c00      	cmp	r4, #0
 800158a:	d144      	bne.n	8001616 <__ledf2+0xda>
 800158c:	2800      	cmp	r0, #0
 800158e:	d119      	bne.n	80015c4 <__ledf2+0x88>
 8001590:	2001      	movs	r0, #1
 8001592:	4240      	negs	r0, r0
 8001594:	e016      	b.n	80015c4 <__ledf2+0x88>
 8001596:	4316      	orrs	r6, r2
 8001598:	d113      	bne.n	80015c2 <__ledf2+0x86>
 800159a:	2900      	cmp	r1, #0
 800159c:	d102      	bne.n	80015a4 <__ledf2+0x68>
 800159e:	9f01      	ldr	r7, [sp, #4]
 80015a0:	4327      	orrs	r7, r4
 80015a2:	d0f3      	beq.n	800158c <__ledf2+0x50>
 80015a4:	4584      	cmp	ip, r0
 80015a6:	d020      	beq.n	80015ea <__ledf2+0xae>
 80015a8:	4663      	mov	r3, ip
 80015aa:	2002      	movs	r0, #2
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4018      	ands	r0, r3
 80015b0:	3801      	subs	r0, #1
 80015b2:	e007      	b.n	80015c4 <__ledf2+0x88>
 80015b4:	9f01      	ldr	r7, [sp, #4]
 80015b6:	4327      	orrs	r7, r4
 80015b8:	d103      	bne.n	80015c2 <__ledf2+0x86>
 80015ba:	458a      	cmp	sl, r1
 80015bc:	d1f4      	bne.n	80015a8 <__ledf2+0x6c>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d01f      	beq.n	8001602 <__ledf2+0xc6>
 80015c2:	2002      	movs	r0, #2
 80015c4:	b003      	add	sp, #12
 80015c6:	bcf0      	pop	{r4, r5, r6, r7}
 80015c8:	46bb      	mov	fp, r7
 80015ca:	46b2      	mov	sl, r6
 80015cc:	46a9      	mov	r9, r5
 80015ce:	46a0      	mov	r8, r4
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d2:	4654      	mov	r4, sl
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d0e7      	beq.n	80015a8 <__ledf2+0x6c>
 80015d8:	4584      	cmp	ip, r0
 80015da:	d1e5      	bne.n	80015a8 <__ledf2+0x6c>
 80015dc:	4551      	cmp	r1, sl
 80015de:	dce3      	bgt.n	80015a8 <__ledf2+0x6c>
 80015e0:	db03      	blt.n	80015ea <__ledf2+0xae>
 80015e2:	9b01      	ldr	r3, [sp, #4]
 80015e4:	42b3      	cmp	r3, r6
 80015e6:	d8df      	bhi.n	80015a8 <__ledf2+0x6c>
 80015e8:	d00f      	beq.n	800160a <__ledf2+0xce>
 80015ea:	4663      	mov	r3, ip
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0cf      	beq.n	8001590 <__ledf2+0x54>
 80015f0:	4660      	mov	r0, ip
 80015f2:	e7e7      	b.n	80015c4 <__ledf2+0x88>
 80015f4:	2c00      	cmp	r4, #0
 80015f6:	d0c9      	beq.n	800158c <__ledf2+0x50>
 80015f8:	e7d4      	b.n	80015a4 <__ledf2+0x68>
 80015fa:	2000      	movs	r0, #0
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e1      	beq.n	80015c4 <__ledf2+0x88>
 8001600:	e7d2      	b.n	80015a8 <__ledf2+0x6c>
 8001602:	4584      	cmp	ip, r0
 8001604:	d1d0      	bne.n	80015a8 <__ledf2+0x6c>
 8001606:	2000      	movs	r0, #0
 8001608:	e7dc      	b.n	80015c4 <__ledf2+0x88>
 800160a:	45c8      	cmp	r8, r9
 800160c:	d8cc      	bhi.n	80015a8 <__ledf2+0x6c>
 800160e:	2000      	movs	r0, #0
 8001610:	45c8      	cmp	r8, r9
 8001612:	d2d7      	bcs.n	80015c4 <__ledf2+0x88>
 8001614:	e7e9      	b.n	80015ea <__ledf2+0xae>
 8001616:	4584      	cmp	ip, r0
 8001618:	d0e3      	beq.n	80015e2 <__ledf2+0xa6>
 800161a:	e7c5      	b.n	80015a8 <__ledf2+0x6c>
 800161c:	000007ff 	.word	0x000007ff

08001620 <__aeabi_dmul>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	001f      	movs	r7, r3
 800162e:	030b      	lsls	r3, r1, #12
 8001630:	0b1b      	lsrs	r3, r3, #12
 8001632:	0016      	movs	r6, r2
 8001634:	469a      	mov	sl, r3
 8001636:	0fca      	lsrs	r2, r1, #31
 8001638:	004b      	lsls	r3, r1, #1
 800163a:	0004      	movs	r4, r0
 800163c:	4693      	mov	fp, r2
 800163e:	b087      	sub	sp, #28
 8001640:	0d5b      	lsrs	r3, r3, #21
 8001642:	d100      	bne.n	8001646 <__aeabi_dmul+0x26>
 8001644:	e0d5      	b.n	80017f2 <__aeabi_dmul+0x1d2>
 8001646:	4abb      	ldr	r2, [pc, #748]	@ (8001934 <__aeabi_dmul+0x314>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x2e>
 800164c:	e0f8      	b.n	8001840 <__aeabi_dmul+0x220>
 800164e:	4651      	mov	r1, sl
 8001650:	0f42      	lsrs	r2, r0, #29
 8001652:	00c9      	lsls	r1, r1, #3
 8001654:	430a      	orrs	r2, r1
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	0409      	lsls	r1, r1, #16
 800165a:	4311      	orrs	r1, r2
 800165c:	00c2      	lsls	r2, r0, #3
 800165e:	4691      	mov	r9, r2
 8001660:	4ab5      	ldr	r2, [pc, #724]	@ (8001938 <__aeabi_dmul+0x318>)
 8001662:	468a      	mov	sl, r1
 8001664:	189d      	adds	r5, r3, r2
 8001666:	2300      	movs	r3, #0
 8001668:	4698      	mov	r8, r3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	033c      	lsls	r4, r7, #12
 800166e:	007b      	lsls	r3, r7, #1
 8001670:	0ffa      	lsrs	r2, r7, #31
 8001672:	0030      	movs	r0, r6
 8001674:	0b24      	lsrs	r4, r4, #12
 8001676:	0d5b      	lsrs	r3, r3, #21
 8001678:	9200      	str	r2, [sp, #0]
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x5e>
 800167c:	e096      	b.n	80017ac <__aeabi_dmul+0x18c>
 800167e:	4aad      	ldr	r2, [pc, #692]	@ (8001934 <__aeabi_dmul+0x314>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d031      	beq.n	80016e8 <__aeabi_dmul+0xc8>
 8001684:	0f72      	lsrs	r2, r6, #29
 8001686:	00e4      	lsls	r4, r4, #3
 8001688:	4322      	orrs	r2, r4
 800168a:	2480      	movs	r4, #128	@ 0x80
 800168c:	0424      	lsls	r4, r4, #16
 800168e:	4314      	orrs	r4, r2
 8001690:	4aa9      	ldr	r2, [pc, #676]	@ (8001938 <__aeabi_dmul+0x318>)
 8001692:	00f0      	lsls	r0, r6, #3
 8001694:	4694      	mov	ip, r2
 8001696:	4463      	add	r3, ip
 8001698:	195b      	adds	r3, r3, r5
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	4642      	mov	r2, r8
 80016a0:	2600      	movs	r6, #0
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc42      	bgt.n	800172c <__aeabi_dmul+0x10c>
 80016a6:	465a      	mov	r2, fp
 80016a8:	9900      	ldr	r1, [sp, #0]
 80016aa:	404a      	eors	r2, r1
 80016ac:	4693      	mov	fp, r2
 80016ae:	4642      	mov	r2, r8
 80016b0:	2a02      	cmp	r2, #2
 80016b2:	dc32      	bgt.n	800171a <__aeabi_dmul+0xfa>
 80016b4:	3a01      	subs	r2, #1
 80016b6:	2a01      	cmp	r2, #1
 80016b8:	d900      	bls.n	80016bc <__aeabi_dmul+0x9c>
 80016ba:	e149      	b.n	8001950 <__aeabi_dmul+0x330>
 80016bc:	2e02      	cmp	r6, #2
 80016be:	d100      	bne.n	80016c2 <__aeabi_dmul+0xa2>
 80016c0:	e0ca      	b.n	8001858 <__aeabi_dmul+0x238>
 80016c2:	2e01      	cmp	r6, #1
 80016c4:	d13d      	bne.n	8001742 <__aeabi_dmul+0x122>
 80016c6:	2300      	movs	r3, #0
 80016c8:	2400      	movs	r4, #0
 80016ca:	2200      	movs	r2, #0
 80016cc:	0010      	movs	r0, r2
 80016ce:	465a      	mov	r2, fp
 80016d0:	051b      	lsls	r3, r3, #20
 80016d2:	4323      	orrs	r3, r4
 80016d4:	07d2      	lsls	r2, r2, #31
 80016d6:	4313      	orrs	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	b007      	add	sp, #28
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
 80016de:	46bb      	mov	fp, r7
 80016e0:	46b2      	mov	sl, r6
 80016e2:	46a9      	mov	r9, r5
 80016e4:	46a0      	mov	r8, r4
 80016e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e8:	4b92      	ldr	r3, [pc, #584]	@ (8001934 <__aeabi_dmul+0x314>)
 80016ea:	4326      	orrs	r6, r4
 80016ec:	18eb      	adds	r3, r5, r3
 80016ee:	2e00      	cmp	r6, #0
 80016f0:	d100      	bne.n	80016f4 <__aeabi_dmul+0xd4>
 80016f2:	e0bb      	b.n	800186c <__aeabi_dmul+0x24c>
 80016f4:	2203      	movs	r2, #3
 80016f6:	4641      	mov	r1, r8
 80016f8:	4311      	orrs	r1, r2
 80016fa:	465a      	mov	r2, fp
 80016fc:	4688      	mov	r8, r1
 80016fe:	9900      	ldr	r1, [sp, #0]
 8001700:	404a      	eors	r2, r1
 8001702:	2180      	movs	r1, #128	@ 0x80
 8001704:	0109      	lsls	r1, r1, #4
 8001706:	468c      	mov	ip, r1
 8001708:	0029      	movs	r1, r5
 800170a:	4461      	add	r1, ip
 800170c:	9101      	str	r1, [sp, #4]
 800170e:	4641      	mov	r1, r8
 8001710:	290a      	cmp	r1, #10
 8001712:	dd00      	ble.n	8001716 <__aeabi_dmul+0xf6>
 8001714:	e233      	b.n	8001b7e <__aeabi_dmul+0x55e>
 8001716:	4693      	mov	fp, r2
 8001718:	2603      	movs	r6, #3
 800171a:	4642      	mov	r2, r8
 800171c:	2701      	movs	r7, #1
 800171e:	4097      	lsls	r7, r2
 8001720:	21a6      	movs	r1, #166	@ 0xa6
 8001722:	003a      	movs	r2, r7
 8001724:	00c9      	lsls	r1, r1, #3
 8001726:	400a      	ands	r2, r1
 8001728:	420f      	tst	r7, r1
 800172a:	d031      	beq.n	8001790 <__aeabi_dmul+0x170>
 800172c:	9e02      	ldr	r6, [sp, #8]
 800172e:	2e02      	cmp	r6, #2
 8001730:	d100      	bne.n	8001734 <__aeabi_dmul+0x114>
 8001732:	e235      	b.n	8001ba0 <__aeabi_dmul+0x580>
 8001734:	2e03      	cmp	r6, #3
 8001736:	d100      	bne.n	800173a <__aeabi_dmul+0x11a>
 8001738:	e1d2      	b.n	8001ae0 <__aeabi_dmul+0x4c0>
 800173a:	4654      	mov	r4, sl
 800173c:	4648      	mov	r0, r9
 800173e:	2e01      	cmp	r6, #1
 8001740:	d0c1      	beq.n	80016c6 <__aeabi_dmul+0xa6>
 8001742:	9a01      	ldr	r2, [sp, #4]
 8001744:	4b7d      	ldr	r3, [pc, #500]	@ (800193c <__aeabi_dmul+0x31c>)
 8001746:	4694      	mov	ip, r2
 8001748:	4463      	add	r3, ip
 800174a:	2b00      	cmp	r3, #0
 800174c:	dc00      	bgt.n	8001750 <__aeabi_dmul+0x130>
 800174e:	e0c0      	b.n	80018d2 <__aeabi_dmul+0x2b2>
 8001750:	0742      	lsls	r2, r0, #29
 8001752:	d009      	beq.n	8001768 <__aeabi_dmul+0x148>
 8001754:	220f      	movs	r2, #15
 8001756:	4002      	ands	r2, r0
 8001758:	2a04      	cmp	r2, #4
 800175a:	d005      	beq.n	8001768 <__aeabi_dmul+0x148>
 800175c:	1d02      	adds	r2, r0, #4
 800175e:	4282      	cmp	r2, r0
 8001760:	4180      	sbcs	r0, r0
 8001762:	4240      	negs	r0, r0
 8001764:	1824      	adds	r4, r4, r0
 8001766:	0010      	movs	r0, r2
 8001768:	01e2      	lsls	r2, r4, #7
 800176a:	d506      	bpl.n	800177a <__aeabi_dmul+0x15a>
 800176c:	4b74      	ldr	r3, [pc, #464]	@ (8001940 <__aeabi_dmul+0x320>)
 800176e:	9a01      	ldr	r2, [sp, #4]
 8001770:	401c      	ands	r4, r3
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	4694      	mov	ip, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4463      	add	r3, ip
 800177a:	4a72      	ldr	r2, [pc, #456]	@ (8001944 <__aeabi_dmul+0x324>)
 800177c:	4293      	cmp	r3, r2
 800177e:	dc6b      	bgt.n	8001858 <__aeabi_dmul+0x238>
 8001780:	0762      	lsls	r2, r4, #29
 8001782:	08c0      	lsrs	r0, r0, #3
 8001784:	0264      	lsls	r4, r4, #9
 8001786:	055b      	lsls	r3, r3, #21
 8001788:	4302      	orrs	r2, r0
 800178a:	0b24      	lsrs	r4, r4, #12
 800178c:	0d5b      	lsrs	r3, r3, #21
 800178e:	e79d      	b.n	80016cc <__aeabi_dmul+0xac>
 8001790:	2190      	movs	r1, #144	@ 0x90
 8001792:	0089      	lsls	r1, r1, #2
 8001794:	420f      	tst	r7, r1
 8001796:	d163      	bne.n	8001860 <__aeabi_dmul+0x240>
 8001798:	2288      	movs	r2, #136	@ 0x88
 800179a:	423a      	tst	r2, r7
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x180>
 800179e:	e0d7      	b.n	8001950 <__aeabi_dmul+0x330>
 80017a0:	9b00      	ldr	r3, [sp, #0]
 80017a2:	46a2      	mov	sl, r4
 80017a4:	469b      	mov	fp, r3
 80017a6:	4681      	mov	r9, r0
 80017a8:	9602      	str	r6, [sp, #8]
 80017aa:	e7bf      	b.n	800172c <__aeabi_dmul+0x10c>
 80017ac:	0023      	movs	r3, r4
 80017ae:	4333      	orrs	r3, r6
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dmul+0x194>
 80017b2:	e07f      	b.n	80018b4 <__aeabi_dmul+0x294>
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dmul+0x19a>
 80017b8:	e1ad      	b.n	8001b16 <__aeabi_dmul+0x4f6>
 80017ba:	0020      	movs	r0, r4
 80017bc:	f7fe fe60 	bl	8000480 <__clzsi2>
 80017c0:	0002      	movs	r2, r0
 80017c2:	0003      	movs	r3, r0
 80017c4:	3a0b      	subs	r2, #11
 80017c6:	201d      	movs	r0, #29
 80017c8:	0019      	movs	r1, r3
 80017ca:	1a82      	subs	r2, r0, r2
 80017cc:	0030      	movs	r0, r6
 80017ce:	3908      	subs	r1, #8
 80017d0:	40d0      	lsrs	r0, r2
 80017d2:	408c      	lsls	r4, r1
 80017d4:	4304      	orrs	r4, r0
 80017d6:	0030      	movs	r0, r6
 80017d8:	4088      	lsls	r0, r1
 80017da:	4a5b      	ldr	r2, [pc, #364]	@ (8001948 <__aeabi_dmul+0x328>)
 80017dc:	1aeb      	subs	r3, r5, r3
 80017de:	4694      	mov	ip, r2
 80017e0:	4463      	add	r3, ip
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	9201      	str	r2, [sp, #4]
 80017e6:	4642      	mov	r2, r8
 80017e8:	2600      	movs	r6, #0
 80017ea:	2a0a      	cmp	r2, #10
 80017ec:	dc00      	bgt.n	80017f0 <__aeabi_dmul+0x1d0>
 80017ee:	e75a      	b.n	80016a6 <__aeabi_dmul+0x86>
 80017f0:	e79c      	b.n	800172c <__aeabi_dmul+0x10c>
 80017f2:	4653      	mov	r3, sl
 80017f4:	4303      	orrs	r3, r0
 80017f6:	4699      	mov	r9, r3
 80017f8:	d054      	beq.n	80018a4 <__aeabi_dmul+0x284>
 80017fa:	4653      	mov	r3, sl
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d100      	bne.n	8001802 <__aeabi_dmul+0x1e2>
 8001800:	e177      	b.n	8001af2 <__aeabi_dmul+0x4d2>
 8001802:	4650      	mov	r0, sl
 8001804:	f7fe fe3c 	bl	8000480 <__clzsi2>
 8001808:	230b      	movs	r3, #11
 800180a:	425b      	negs	r3, r3
 800180c:	469c      	mov	ip, r3
 800180e:	0002      	movs	r2, r0
 8001810:	4484      	add	ip, r0
 8001812:	0011      	movs	r1, r2
 8001814:	4650      	mov	r0, sl
 8001816:	3908      	subs	r1, #8
 8001818:	4088      	lsls	r0, r1
 800181a:	231d      	movs	r3, #29
 800181c:	4680      	mov	r8, r0
 800181e:	4660      	mov	r0, ip
 8001820:	1a1b      	subs	r3, r3, r0
 8001822:	0020      	movs	r0, r4
 8001824:	40d8      	lsrs	r0, r3
 8001826:	0003      	movs	r3, r0
 8001828:	4640      	mov	r0, r8
 800182a:	4303      	orrs	r3, r0
 800182c:	469a      	mov	sl, r3
 800182e:	0023      	movs	r3, r4
 8001830:	408b      	lsls	r3, r1
 8001832:	4699      	mov	r9, r3
 8001834:	2300      	movs	r3, #0
 8001836:	4d44      	ldr	r5, [pc, #272]	@ (8001948 <__aeabi_dmul+0x328>)
 8001838:	4698      	mov	r8, r3
 800183a:	1aad      	subs	r5, r5, r2
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	e715      	b.n	800166c <__aeabi_dmul+0x4c>
 8001840:	4652      	mov	r2, sl
 8001842:	4302      	orrs	r2, r0
 8001844:	4691      	mov	r9, r2
 8001846:	d126      	bne.n	8001896 <__aeabi_dmul+0x276>
 8001848:	2200      	movs	r2, #0
 800184a:	001d      	movs	r5, r3
 800184c:	2302      	movs	r3, #2
 800184e:	4692      	mov	sl, r2
 8001850:	3208      	adds	r2, #8
 8001852:	4690      	mov	r8, r2
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	e709      	b.n	800166c <__aeabi_dmul+0x4c>
 8001858:	2400      	movs	r4, #0
 800185a:	2200      	movs	r2, #0
 800185c:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <__aeabi_dmul+0x314>)
 800185e:	e735      	b.n	80016cc <__aeabi_dmul+0xac>
 8001860:	2300      	movs	r3, #0
 8001862:	2480      	movs	r4, #128	@ 0x80
 8001864:	469b      	mov	fp, r3
 8001866:	0324      	lsls	r4, r4, #12
 8001868:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <__aeabi_dmul+0x314>)
 800186a:	e72f      	b.n	80016cc <__aeabi_dmul+0xac>
 800186c:	2202      	movs	r2, #2
 800186e:	4641      	mov	r1, r8
 8001870:	4311      	orrs	r1, r2
 8001872:	2280      	movs	r2, #128	@ 0x80
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	4694      	mov	ip, r2
 8001878:	002a      	movs	r2, r5
 800187a:	4462      	add	r2, ip
 800187c:	4688      	mov	r8, r1
 800187e:	9201      	str	r2, [sp, #4]
 8001880:	290a      	cmp	r1, #10
 8001882:	dd00      	ble.n	8001886 <__aeabi_dmul+0x266>
 8001884:	e752      	b.n	800172c <__aeabi_dmul+0x10c>
 8001886:	465a      	mov	r2, fp
 8001888:	2000      	movs	r0, #0
 800188a:	9900      	ldr	r1, [sp, #0]
 800188c:	0004      	movs	r4, r0
 800188e:	404a      	eors	r2, r1
 8001890:	4693      	mov	fp, r2
 8001892:	2602      	movs	r6, #2
 8001894:	e70b      	b.n	80016ae <__aeabi_dmul+0x8e>
 8001896:	220c      	movs	r2, #12
 8001898:	001d      	movs	r5, r3
 800189a:	2303      	movs	r3, #3
 800189c:	4681      	mov	r9, r0
 800189e:	4690      	mov	r8, r2
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	e6e3      	b.n	800166c <__aeabi_dmul+0x4c>
 80018a4:	2300      	movs	r3, #0
 80018a6:	469a      	mov	sl, r3
 80018a8:	3304      	adds	r3, #4
 80018aa:	4698      	mov	r8, r3
 80018ac:	3b03      	subs	r3, #3
 80018ae:	2500      	movs	r5, #0
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	e6db      	b.n	800166c <__aeabi_dmul+0x4c>
 80018b4:	4642      	mov	r2, r8
 80018b6:	3301      	adds	r3, #1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	002b      	movs	r3, r5
 80018bc:	4690      	mov	r8, r2
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	4642      	mov	r2, r8
 80018c4:	2400      	movs	r4, #0
 80018c6:	2000      	movs	r0, #0
 80018c8:	2601      	movs	r6, #1
 80018ca:	2a0a      	cmp	r2, #10
 80018cc:	dc00      	bgt.n	80018d0 <__aeabi_dmul+0x2b0>
 80018ce:	e6ea      	b.n	80016a6 <__aeabi_dmul+0x86>
 80018d0:	e72c      	b.n	800172c <__aeabi_dmul+0x10c>
 80018d2:	2201      	movs	r2, #1
 80018d4:	1ad2      	subs	r2, r2, r3
 80018d6:	2a38      	cmp	r2, #56	@ 0x38
 80018d8:	dd00      	ble.n	80018dc <__aeabi_dmul+0x2bc>
 80018da:	e6f4      	b.n	80016c6 <__aeabi_dmul+0xa6>
 80018dc:	2a1f      	cmp	r2, #31
 80018de:	dc00      	bgt.n	80018e2 <__aeabi_dmul+0x2c2>
 80018e0:	e12a      	b.n	8001b38 <__aeabi_dmul+0x518>
 80018e2:	211f      	movs	r1, #31
 80018e4:	4249      	negs	r1, r1
 80018e6:	1acb      	subs	r3, r1, r3
 80018e8:	0021      	movs	r1, r4
 80018ea:	40d9      	lsrs	r1, r3
 80018ec:	000b      	movs	r3, r1
 80018ee:	2a20      	cmp	r2, #32
 80018f0:	d005      	beq.n	80018fe <__aeabi_dmul+0x2de>
 80018f2:	4a16      	ldr	r2, [pc, #88]	@ (800194c <__aeabi_dmul+0x32c>)
 80018f4:	9d01      	ldr	r5, [sp, #4]
 80018f6:	4694      	mov	ip, r2
 80018f8:	4465      	add	r5, ip
 80018fa:	40ac      	lsls	r4, r5
 80018fc:	4320      	orrs	r0, r4
 80018fe:	1e42      	subs	r2, r0, #1
 8001900:	4190      	sbcs	r0, r2
 8001902:	4318      	orrs	r0, r3
 8001904:	2307      	movs	r3, #7
 8001906:	0019      	movs	r1, r3
 8001908:	2400      	movs	r4, #0
 800190a:	4001      	ands	r1, r0
 800190c:	4203      	tst	r3, r0
 800190e:	d00c      	beq.n	800192a <__aeabi_dmul+0x30a>
 8001910:	230f      	movs	r3, #15
 8001912:	4003      	ands	r3, r0
 8001914:	2b04      	cmp	r3, #4
 8001916:	d100      	bne.n	800191a <__aeabi_dmul+0x2fa>
 8001918:	e140      	b.n	8001b9c <__aeabi_dmul+0x57c>
 800191a:	1d03      	adds	r3, r0, #4
 800191c:	4283      	cmp	r3, r0
 800191e:	41a4      	sbcs	r4, r4
 8001920:	0018      	movs	r0, r3
 8001922:	4264      	negs	r4, r4
 8001924:	0761      	lsls	r1, r4, #29
 8001926:	0264      	lsls	r4, r4, #9
 8001928:	0b24      	lsrs	r4, r4, #12
 800192a:	08c2      	lsrs	r2, r0, #3
 800192c:	2300      	movs	r3, #0
 800192e:	430a      	orrs	r2, r1
 8001930:	e6cc      	b.n	80016cc <__aeabi_dmul+0xac>
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	000007ff 	.word	0x000007ff
 8001938:	fffffc01 	.word	0xfffffc01
 800193c:	000003ff 	.word	0x000003ff
 8001940:	feffffff 	.word	0xfeffffff
 8001944:	000007fe 	.word	0x000007fe
 8001948:	fffffc0d 	.word	0xfffffc0d
 800194c:	0000043e 	.word	0x0000043e
 8001950:	4649      	mov	r1, r9
 8001952:	464a      	mov	r2, r9
 8001954:	0409      	lsls	r1, r1, #16
 8001956:	0c09      	lsrs	r1, r1, #16
 8001958:	000d      	movs	r5, r1
 800195a:	0c16      	lsrs	r6, r2, #16
 800195c:	0c02      	lsrs	r2, r0, #16
 800195e:	0400      	lsls	r0, r0, #16
 8001960:	0c00      	lsrs	r0, r0, #16
 8001962:	4345      	muls	r5, r0
 8001964:	46ac      	mov	ip, r5
 8001966:	0005      	movs	r5, r0
 8001968:	4375      	muls	r5, r6
 800196a:	46a8      	mov	r8, r5
 800196c:	0015      	movs	r5, r2
 800196e:	000f      	movs	r7, r1
 8001970:	4375      	muls	r5, r6
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	9502      	str	r5, [sp, #8]
 8001976:	002a      	movs	r2, r5
 8001978:	9d00      	ldr	r5, [sp, #0]
 800197a:	436f      	muls	r7, r5
 800197c:	4665      	mov	r5, ip
 800197e:	0c2d      	lsrs	r5, r5, #16
 8001980:	46a9      	mov	r9, r5
 8001982:	4447      	add	r7, r8
 8001984:	444f      	add	r7, r9
 8001986:	45b8      	cmp	r8, r7
 8001988:	d905      	bls.n	8001996 <__aeabi_dmul+0x376>
 800198a:	0015      	movs	r5, r2
 800198c:	2280      	movs	r2, #128	@ 0x80
 800198e:	0252      	lsls	r2, r2, #9
 8001990:	4690      	mov	r8, r2
 8001992:	4445      	add	r5, r8
 8001994:	9502      	str	r5, [sp, #8]
 8001996:	0c3d      	lsrs	r5, r7, #16
 8001998:	9503      	str	r5, [sp, #12]
 800199a:	4665      	mov	r5, ip
 800199c:	042d      	lsls	r5, r5, #16
 800199e:	043f      	lsls	r7, r7, #16
 80019a0:	0c2d      	lsrs	r5, r5, #16
 80019a2:	46ac      	mov	ip, r5
 80019a4:	003d      	movs	r5, r7
 80019a6:	4465      	add	r5, ip
 80019a8:	9504      	str	r5, [sp, #16]
 80019aa:	0c25      	lsrs	r5, r4, #16
 80019ac:	0424      	lsls	r4, r4, #16
 80019ae:	0c24      	lsrs	r4, r4, #16
 80019b0:	46ac      	mov	ip, r5
 80019b2:	0025      	movs	r5, r4
 80019b4:	4375      	muls	r5, r6
 80019b6:	46a8      	mov	r8, r5
 80019b8:	4665      	mov	r5, ip
 80019ba:	000f      	movs	r7, r1
 80019bc:	4369      	muls	r1, r5
 80019be:	4441      	add	r1, r8
 80019c0:	4689      	mov	r9, r1
 80019c2:	4367      	muls	r7, r4
 80019c4:	0c39      	lsrs	r1, r7, #16
 80019c6:	4449      	add	r1, r9
 80019c8:	436e      	muls	r6, r5
 80019ca:	4588      	cmp	r8, r1
 80019cc:	d903      	bls.n	80019d6 <__aeabi_dmul+0x3b6>
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	0252      	lsls	r2, r2, #9
 80019d2:	4690      	mov	r8, r2
 80019d4:	4446      	add	r6, r8
 80019d6:	0c0d      	lsrs	r5, r1, #16
 80019d8:	46a8      	mov	r8, r5
 80019da:	0035      	movs	r5, r6
 80019dc:	4445      	add	r5, r8
 80019de:	9505      	str	r5, [sp, #20]
 80019e0:	9d03      	ldr	r5, [sp, #12]
 80019e2:	043f      	lsls	r7, r7, #16
 80019e4:	46a8      	mov	r8, r5
 80019e6:	0c3f      	lsrs	r7, r7, #16
 80019e8:	0409      	lsls	r1, r1, #16
 80019ea:	19c9      	adds	r1, r1, r7
 80019ec:	4488      	add	r8, r1
 80019ee:	4645      	mov	r5, r8
 80019f0:	9503      	str	r5, [sp, #12]
 80019f2:	4655      	mov	r5, sl
 80019f4:	042e      	lsls	r6, r5, #16
 80019f6:	0c36      	lsrs	r6, r6, #16
 80019f8:	0c2f      	lsrs	r7, r5, #16
 80019fa:	0035      	movs	r5, r6
 80019fc:	4345      	muls	r5, r0
 80019fe:	4378      	muls	r0, r7
 8001a00:	4681      	mov	r9, r0
 8001a02:	0038      	movs	r0, r7
 8001a04:	46a8      	mov	r8, r5
 8001a06:	0c2d      	lsrs	r5, r5, #16
 8001a08:	46aa      	mov	sl, r5
 8001a0a:	9a00      	ldr	r2, [sp, #0]
 8001a0c:	4350      	muls	r0, r2
 8001a0e:	4372      	muls	r2, r6
 8001a10:	444a      	add	r2, r9
 8001a12:	4452      	add	r2, sl
 8001a14:	4591      	cmp	r9, r2
 8001a16:	d903      	bls.n	8001a20 <__aeabi_dmul+0x400>
 8001a18:	2580      	movs	r5, #128	@ 0x80
 8001a1a:	026d      	lsls	r5, r5, #9
 8001a1c:	46a9      	mov	r9, r5
 8001a1e:	4448      	add	r0, r9
 8001a20:	0c15      	lsrs	r5, r2, #16
 8001a22:	46a9      	mov	r9, r5
 8001a24:	4645      	mov	r5, r8
 8001a26:	042d      	lsls	r5, r5, #16
 8001a28:	0c2d      	lsrs	r5, r5, #16
 8001a2a:	46a8      	mov	r8, r5
 8001a2c:	4665      	mov	r5, ip
 8001a2e:	437d      	muls	r5, r7
 8001a30:	0412      	lsls	r2, r2, #16
 8001a32:	4448      	add	r0, r9
 8001a34:	4490      	add	r8, r2
 8001a36:	46a9      	mov	r9, r5
 8001a38:	0032      	movs	r2, r6
 8001a3a:	4665      	mov	r5, ip
 8001a3c:	4362      	muls	r2, r4
 8001a3e:	436e      	muls	r6, r5
 8001a40:	437c      	muls	r4, r7
 8001a42:	0c17      	lsrs	r7, r2, #16
 8001a44:	1936      	adds	r6, r6, r4
 8001a46:	19bf      	adds	r7, r7, r6
 8001a48:	42bc      	cmp	r4, r7
 8001a4a:	d903      	bls.n	8001a54 <__aeabi_dmul+0x434>
 8001a4c:	2480      	movs	r4, #128	@ 0x80
 8001a4e:	0264      	lsls	r4, r4, #9
 8001a50:	46a4      	mov	ip, r4
 8001a52:	44e1      	add	r9, ip
 8001a54:	9c02      	ldr	r4, [sp, #8]
 8001a56:	9e03      	ldr	r6, [sp, #12]
 8001a58:	46a4      	mov	ip, r4
 8001a5a:	9d05      	ldr	r5, [sp, #20]
 8001a5c:	4466      	add	r6, ip
 8001a5e:	428e      	cmp	r6, r1
 8001a60:	4189      	sbcs	r1, r1
 8001a62:	46ac      	mov	ip, r5
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	043c      	lsls	r4, r7, #16
 8001a68:	0c12      	lsrs	r2, r2, #16
 8001a6a:	18a2      	adds	r2, r4, r2
 8001a6c:	4462      	add	r2, ip
 8001a6e:	4249      	negs	r1, r1
 8001a70:	1854      	adds	r4, r2, r1
 8001a72:	4446      	add	r6, r8
 8001a74:	46a4      	mov	ip, r4
 8001a76:	4546      	cmp	r6, r8
 8001a78:	41a4      	sbcs	r4, r4
 8001a7a:	4682      	mov	sl, r0
 8001a7c:	4264      	negs	r4, r4
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	42aa      	cmp	r2, r5
 8001a82:	4192      	sbcs	r2, r2
 8001a84:	458c      	cmp	ip, r1
 8001a86:	4189      	sbcs	r1, r1
 8001a88:	44e2      	add	sl, ip
 8001a8a:	44d0      	add	r8, sl
 8001a8c:	4249      	negs	r1, r1
 8001a8e:	4252      	negs	r2, r2
 8001a90:	430a      	orrs	r2, r1
 8001a92:	45a0      	cmp	r8, r4
 8001a94:	41a4      	sbcs	r4, r4
 8001a96:	4582      	cmp	sl, r0
 8001a98:	4189      	sbcs	r1, r1
 8001a9a:	4264      	negs	r4, r4
 8001a9c:	4249      	negs	r1, r1
 8001a9e:	430c      	orrs	r4, r1
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	0c3f      	lsrs	r7, r7, #16
 8001aa4:	19d2      	adds	r2, r2, r7
 8001aa6:	1912      	adds	r2, r2, r4
 8001aa8:	0dcc      	lsrs	r4, r1, #23
 8001aaa:	9904      	ldr	r1, [sp, #16]
 8001aac:	0270      	lsls	r0, r6, #9
 8001aae:	4308      	orrs	r0, r1
 8001ab0:	1e41      	subs	r1, r0, #1
 8001ab2:	4188      	sbcs	r0, r1
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	444a      	add	r2, r9
 8001ab8:	0df6      	lsrs	r6, r6, #23
 8001aba:	0252      	lsls	r2, r2, #9
 8001abc:	4330      	orrs	r0, r6
 8001abe:	0249      	lsls	r1, r1, #9
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	4308      	orrs	r0, r1
 8001ac4:	01d2      	lsls	r2, r2, #7
 8001ac6:	d535      	bpl.n	8001b34 <__aeabi_dmul+0x514>
 8001ac8:	2201      	movs	r2, #1
 8001aca:	0843      	lsrs	r3, r0, #1
 8001acc:	4002      	ands	r2, r0
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	07e0      	lsls	r0, r4, #31
 8001ad2:	4318      	orrs	r0, r3
 8001ad4:	0864      	lsrs	r4, r4, #1
 8001ad6:	e634      	b.n	8001742 <__aeabi_dmul+0x122>
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	46a2      	mov	sl, r4
 8001adc:	469b      	mov	fp, r3
 8001ade:	4681      	mov	r9, r0
 8001ae0:	2480      	movs	r4, #128	@ 0x80
 8001ae2:	4653      	mov	r3, sl
 8001ae4:	0324      	lsls	r4, r4, #12
 8001ae6:	431c      	orrs	r4, r3
 8001ae8:	0324      	lsls	r4, r4, #12
 8001aea:	464a      	mov	r2, r9
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <__aeabi_dmul+0x588>)
 8001aee:	0b24      	lsrs	r4, r4, #12
 8001af0:	e5ec      	b.n	80016cc <__aeabi_dmul+0xac>
 8001af2:	f7fe fcc5 	bl	8000480 <__clzsi2>
 8001af6:	2315      	movs	r3, #21
 8001af8:	469c      	mov	ip, r3
 8001afa:	4484      	add	ip, r0
 8001afc:	0002      	movs	r2, r0
 8001afe:	4663      	mov	r3, ip
 8001b00:	3220      	adds	r2, #32
 8001b02:	2b1c      	cmp	r3, #28
 8001b04:	dc00      	bgt.n	8001b08 <__aeabi_dmul+0x4e8>
 8001b06:	e684      	b.n	8001812 <__aeabi_dmul+0x1f2>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	0023      	movs	r3, r4
 8001b0e:	3808      	subs	r0, #8
 8001b10:	4083      	lsls	r3, r0
 8001b12:	469a      	mov	sl, r3
 8001b14:	e68e      	b.n	8001834 <__aeabi_dmul+0x214>
 8001b16:	f7fe fcb3 	bl	8000480 <__clzsi2>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	3215      	adds	r2, #21
 8001b20:	3320      	adds	r3, #32
 8001b22:	2a1c      	cmp	r2, #28
 8001b24:	dc00      	bgt.n	8001b28 <__aeabi_dmul+0x508>
 8001b26:	e64e      	b.n	80017c6 <__aeabi_dmul+0x1a6>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	0034      	movs	r4, r6
 8001b2c:	3a08      	subs	r2, #8
 8001b2e:	2000      	movs	r0, #0
 8001b30:	4094      	lsls	r4, r2
 8001b32:	e652      	b.n	80017da <__aeabi_dmul+0x1ba>
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	e604      	b.n	8001742 <__aeabi_dmul+0x122>
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <__aeabi_dmul+0x58c>)
 8001b3a:	0021      	movs	r1, r4
 8001b3c:	469c      	mov	ip, r3
 8001b3e:	0003      	movs	r3, r0
 8001b40:	9d01      	ldr	r5, [sp, #4]
 8001b42:	40d3      	lsrs	r3, r2
 8001b44:	4465      	add	r5, ip
 8001b46:	40a9      	lsls	r1, r5
 8001b48:	4319      	orrs	r1, r3
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	40ab      	lsls	r3, r5
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	4183      	sbcs	r3, r0
 8001b52:	4319      	orrs	r1, r3
 8001b54:	0008      	movs	r0, r1
 8001b56:	40d4      	lsrs	r4, r2
 8001b58:	074b      	lsls	r3, r1, #29
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dmul+0x550>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	400b      	ands	r3, r1
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <__aeabi_dmul+0x550>
 8001b64:	1d0b      	adds	r3, r1, #4
 8001b66:	428b      	cmp	r3, r1
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	1824      	adds	r4, r4, r0
 8001b6e:	0018      	movs	r0, r3
 8001b70:	0223      	lsls	r3, r4, #8
 8001b72:	d400      	bmi.n	8001b76 <__aeabi_dmul+0x556>
 8001b74:	e6d6      	b.n	8001924 <__aeabi_dmul+0x304>
 8001b76:	2301      	movs	r3, #1
 8001b78:	2400      	movs	r4, #0
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	e5a6      	b.n	80016cc <__aeabi_dmul+0xac>
 8001b7e:	290f      	cmp	r1, #15
 8001b80:	d1aa      	bne.n	8001ad8 <__aeabi_dmul+0x4b8>
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	4652      	mov	r2, sl
 8001b86:	031b      	lsls	r3, r3, #12
 8001b88:	421a      	tst	r2, r3
 8001b8a:	d0a9      	beq.n	8001ae0 <__aeabi_dmul+0x4c0>
 8001b8c:	421c      	tst	r4, r3
 8001b8e:	d1a7      	bne.n	8001ae0 <__aeabi_dmul+0x4c0>
 8001b90:	431c      	orrs	r4, r3
 8001b92:	9b00      	ldr	r3, [sp, #0]
 8001b94:	0002      	movs	r2, r0
 8001b96:	469b      	mov	fp, r3
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <__aeabi_dmul+0x588>)
 8001b9a:	e597      	b.n	80016cc <__aeabi_dmul+0xac>
 8001b9c:	2400      	movs	r4, #0
 8001b9e:	e6c1      	b.n	8001924 <__aeabi_dmul+0x304>
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	4b01      	ldr	r3, [pc, #4]	@ (8001ba8 <__aeabi_dmul+0x588>)
 8001ba4:	0022      	movs	r2, r4
 8001ba6:	e591      	b.n	80016cc <__aeabi_dmul+0xac>
 8001ba8:	000007ff 	.word	0x000007ff
 8001bac:	0000041e 	.word	0x0000041e

08001bb0 <__aeabi_dsub>:
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	464e      	mov	r6, r9
 8001bb4:	4645      	mov	r5, r8
 8001bb6:	46de      	mov	lr, fp
 8001bb8:	4657      	mov	r7, sl
 8001bba:	b5e0      	push	{r5, r6, r7, lr}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	9000      	str	r0, [sp, #0]
 8001bc0:	9101      	str	r1, [sp, #4]
 8001bc2:	030c      	lsls	r4, r1, #12
 8001bc4:	004f      	lsls	r7, r1, #1
 8001bc6:	0fce      	lsrs	r6, r1, #31
 8001bc8:	0a61      	lsrs	r1, r4, #9
 8001bca:	9c00      	ldr	r4, [sp, #0]
 8001bcc:	46b0      	mov	r8, r6
 8001bce:	0f64      	lsrs	r4, r4, #29
 8001bd0:	430c      	orrs	r4, r1
 8001bd2:	9900      	ldr	r1, [sp, #0]
 8001bd4:	0d7f      	lsrs	r7, r7, #21
 8001bd6:	00c8      	lsls	r0, r1, #3
 8001bd8:	0011      	movs	r1, r2
 8001bda:	001a      	movs	r2, r3
 8001bdc:	031b      	lsls	r3, r3, #12
 8001bde:	469c      	mov	ip, r3
 8001be0:	9100      	str	r1, [sp, #0]
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	0051      	lsls	r1, r2, #1
 8001be6:	0d4b      	lsrs	r3, r1, #21
 8001be8:	4699      	mov	r9, r3
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	9d00      	ldr	r5, [sp, #0]
 8001bee:	0fd9      	lsrs	r1, r3, #31
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	0f6a      	lsrs	r2, r5, #29
 8001bf4:	0a5b      	lsrs	r3, r3, #9
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	00ea      	lsls	r2, r5, #3
 8001bfa:	4694      	mov	ip, r2
 8001bfc:	4693      	mov	fp, r2
 8001bfe:	4ac1      	ldr	r2, [pc, #772]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001c00:	9003      	str	r0, [sp, #12]
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	4591      	cmp	r9, r2
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x5a>
 8001c08:	e0cd      	b.n	8001da6 <__aeabi_dsub+0x1f6>
 8001c0a:	2501      	movs	r5, #1
 8001c0c:	4069      	eors	r1, r5
 8001c0e:	464d      	mov	r5, r9
 8001c10:	1b7d      	subs	r5, r7, r5
 8001c12:	46aa      	mov	sl, r5
 8001c14:	428e      	cmp	r6, r1
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0x6a>
 8001c18:	e080      	b.n	8001d1c <__aeabi_dsub+0x16c>
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	dc00      	bgt.n	8001c20 <__aeabi_dsub+0x70>
 8001c1e:	e335      	b.n	800228c <__aeabi_dsub+0x6dc>
 8001c20:	4649      	mov	r1, r9
 8001c22:	2900      	cmp	r1, #0
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x78>
 8001c26:	e0df      	b.n	8001de8 <__aeabi_dsub+0x238>
 8001c28:	4297      	cmp	r7, r2
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x7e>
 8001c2c:	e194      	b.n	8001f58 <__aeabi_dsub+0x3a8>
 8001c2e:	4652      	mov	r2, sl
 8001c30:	2501      	movs	r5, #1
 8001c32:	2a38      	cmp	r2, #56	@ 0x38
 8001c34:	dc19      	bgt.n	8001c6a <__aeabi_dsub+0xba>
 8001c36:	2280      	movs	r2, #128	@ 0x80
 8001c38:	9b02      	ldr	r3, [sp, #8]
 8001c3a:	0412      	lsls	r2, r2, #16
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	4652      	mov	r2, sl
 8001c42:	2a1f      	cmp	r2, #31
 8001c44:	dd00      	ble.n	8001c48 <__aeabi_dsub+0x98>
 8001c46:	e1e3      	b.n	8002010 <__aeabi_dsub+0x460>
 8001c48:	4653      	mov	r3, sl
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	4661      	mov	r1, ip
 8001c4e:	9d02      	ldr	r5, [sp, #8]
 8001c50:	1ad2      	subs	r2, r2, r3
 8001c52:	4095      	lsls	r5, r2
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	430d      	orrs	r5, r1
 8001c58:	4661      	mov	r1, ip
 8001c5a:	4091      	lsls	r1, r2
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	1e51      	subs	r1, r2, #1
 8001c60:	418a      	sbcs	r2, r1
 8001c62:	4315      	orrs	r5, r2
 8001c64:	9a02      	ldr	r2, [sp, #8]
 8001c66:	40da      	lsrs	r2, r3
 8001c68:	1aa4      	subs	r4, r4, r2
 8001c6a:	1b45      	subs	r5, r0, r5
 8001c6c:	42a8      	cmp	r0, r5
 8001c6e:	4180      	sbcs	r0, r0
 8001c70:	4240      	negs	r0, r0
 8001c72:	1a24      	subs	r4, r4, r0
 8001c74:	0223      	lsls	r3, r4, #8
 8001c76:	d400      	bmi.n	8001c7a <__aeabi_dsub+0xca>
 8001c78:	e13d      	b.n	8001ef6 <__aeabi_dsub+0x346>
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0a64      	lsrs	r4, r4, #9
 8001c7e:	2c00      	cmp	r4, #0
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0xd4>
 8001c82:	e147      	b.n	8001f14 <__aeabi_dsub+0x364>
 8001c84:	0020      	movs	r0, r4
 8001c86:	f7fe fbfb 	bl	8000480 <__clzsi2>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	3b08      	subs	r3, #8
 8001c8e:	2120      	movs	r1, #32
 8001c90:	0028      	movs	r0, r5
 8001c92:	1aca      	subs	r2, r1, r3
 8001c94:	40d0      	lsrs	r0, r2
 8001c96:	409c      	lsls	r4, r3
 8001c98:	0002      	movs	r2, r0
 8001c9a:	409d      	lsls	r5, r3
 8001c9c:	4322      	orrs	r2, r4
 8001c9e:	429f      	cmp	r7, r3
 8001ca0:	dd00      	ble.n	8001ca4 <__aeabi_dsub+0xf4>
 8001ca2:	e177      	b.n	8001f94 <__aeabi_dsub+0x3e4>
 8001ca4:	1bd8      	subs	r0, r3, r7
 8001ca6:	3001      	adds	r0, #1
 8001ca8:	1a09      	subs	r1, r1, r0
 8001caa:	002c      	movs	r4, r5
 8001cac:	408d      	lsls	r5, r1
 8001cae:	40c4      	lsrs	r4, r0
 8001cb0:	1e6b      	subs	r3, r5, #1
 8001cb2:	419d      	sbcs	r5, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	40c2      	lsrs	r2, r0
 8001cb8:	408b      	lsls	r3, r1
 8001cba:	4325      	orrs	r5, r4
 8001cbc:	2700      	movs	r7, #0
 8001cbe:	0014      	movs	r4, r2
 8001cc0:	431d      	orrs	r5, r3
 8001cc2:	076b      	lsls	r3, r5, #29
 8001cc4:	d009      	beq.n	8001cda <__aeabi_dsub+0x12a>
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	402b      	ands	r3, r5
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d005      	beq.n	8001cda <__aeabi_dsub+0x12a>
 8001cce:	1d2b      	adds	r3, r5, #4
 8001cd0:	42ab      	cmp	r3, r5
 8001cd2:	41ad      	sbcs	r5, r5
 8001cd4:	426d      	negs	r5, r5
 8001cd6:	1964      	adds	r4, r4, r5
 8001cd8:	001d      	movs	r5, r3
 8001cda:	0223      	lsls	r3, r4, #8
 8001cdc:	d400      	bmi.n	8001ce0 <__aeabi_dsub+0x130>
 8001cde:	e140      	b.n	8001f62 <__aeabi_dsub+0x3b2>
 8001ce0:	4a88      	ldr	r2, [pc, #544]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	4297      	cmp	r7, r2
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x13a>
 8001ce8:	e101      	b.n	8001eee <__aeabi_dsub+0x33e>
 8001cea:	2601      	movs	r6, #1
 8001cec:	4643      	mov	r3, r8
 8001cee:	4986      	ldr	r1, [pc, #536]	@ (8001f08 <__aeabi_dsub+0x358>)
 8001cf0:	08ed      	lsrs	r5, r5, #3
 8001cf2:	4021      	ands	r1, r4
 8001cf4:	074a      	lsls	r2, r1, #29
 8001cf6:	432a      	orrs	r2, r5
 8001cf8:	057c      	lsls	r4, r7, #21
 8001cfa:	024d      	lsls	r5, r1, #9
 8001cfc:	0b2d      	lsrs	r5, r5, #12
 8001cfe:	0d64      	lsrs	r4, r4, #21
 8001d00:	401e      	ands	r6, r3
 8001d02:	0524      	lsls	r4, r4, #20
 8001d04:	432c      	orrs	r4, r5
 8001d06:	07f6      	lsls	r6, r6, #31
 8001d08:	4334      	orrs	r4, r6
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	0021      	movs	r1, r4
 8001d0e:	b005      	add	sp, #20
 8001d10:	bcf0      	pop	{r4, r5, r6, r7}
 8001d12:	46bb      	mov	fp, r7
 8001d14:	46b2      	mov	sl, r6
 8001d16:	46a9      	mov	r9, r5
 8001d18:	46a0      	mov	r8, r4
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	2d00      	cmp	r5, #0
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dsub+0x172>
 8001d20:	e2d0      	b.n	80022c4 <__aeabi_dsub+0x714>
 8001d22:	4649      	mov	r1, r9
 8001d24:	2900      	cmp	r1, #0
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x17a>
 8001d28:	e0d4      	b.n	8001ed4 <__aeabi_dsub+0x324>
 8001d2a:	4661      	mov	r1, ip
 8001d2c:	9b02      	ldr	r3, [sp, #8]
 8001d2e:	4319      	orrs	r1, r3
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x184>
 8001d32:	e12b      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 8001d34:	1e69      	subs	r1, r5, #1
 8001d36:	2d01      	cmp	r5, #1
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x18c>
 8001d3a:	e1d9      	b.n	80020f0 <__aeabi_dsub+0x540>
 8001d3c:	4295      	cmp	r5, r2
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x192>
 8001d40:	e10a      	b.n	8001f58 <__aeabi_dsub+0x3a8>
 8001d42:	2501      	movs	r5, #1
 8001d44:	2938      	cmp	r1, #56	@ 0x38
 8001d46:	dc17      	bgt.n	8001d78 <__aeabi_dsub+0x1c8>
 8001d48:	468a      	mov	sl, r1
 8001d4a:	4653      	mov	r3, sl
 8001d4c:	2b1f      	cmp	r3, #31
 8001d4e:	dd00      	ble.n	8001d52 <__aeabi_dsub+0x1a2>
 8001d50:	e1e7      	b.n	8002122 <__aeabi_dsub+0x572>
 8001d52:	2220      	movs	r2, #32
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	9b02      	ldr	r3, [sp, #8]
 8001d58:	4661      	mov	r1, ip
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	001d      	movs	r5, r3
 8001d5e:	4653      	mov	r3, sl
 8001d60:	40d9      	lsrs	r1, r3
 8001d62:	4663      	mov	r3, ip
 8001d64:	4093      	lsls	r3, r2
 8001d66:	001a      	movs	r2, r3
 8001d68:	430d      	orrs	r5, r1
 8001d6a:	1e51      	subs	r1, r2, #1
 8001d6c:	418a      	sbcs	r2, r1
 8001d6e:	4653      	mov	r3, sl
 8001d70:	4315      	orrs	r5, r2
 8001d72:	9a02      	ldr	r2, [sp, #8]
 8001d74:	40da      	lsrs	r2, r3
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	182d      	adds	r5, r5, r0
 8001d7a:	4285      	cmp	r5, r0
 8001d7c:	4180      	sbcs	r0, r0
 8001d7e:	4240      	negs	r0, r0
 8001d80:	1824      	adds	r4, r4, r0
 8001d82:	0223      	lsls	r3, r4, #8
 8001d84:	d400      	bmi.n	8001d88 <__aeabi_dsub+0x1d8>
 8001d86:	e0b6      	b.n	8001ef6 <__aeabi_dsub+0x346>
 8001d88:	4b5e      	ldr	r3, [pc, #376]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001d8a:	3701      	adds	r7, #1
 8001d8c:	429f      	cmp	r7, r3
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x1e2>
 8001d90:	e0ad      	b.n	8001eee <__aeabi_dsub+0x33e>
 8001d92:	2101      	movs	r1, #1
 8001d94:	4b5c      	ldr	r3, [pc, #368]	@ (8001f08 <__aeabi_dsub+0x358>)
 8001d96:	086a      	lsrs	r2, r5, #1
 8001d98:	401c      	ands	r4, r3
 8001d9a:	4029      	ands	r1, r5
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	07e5      	lsls	r5, r4, #31
 8001da0:	4315      	orrs	r5, r2
 8001da2:	0864      	lsrs	r4, r4, #1
 8001da4:	e78d      	b.n	8001cc2 <__aeabi_dsub+0x112>
 8001da6:	4a59      	ldr	r2, [pc, #356]	@ (8001f0c <__aeabi_dsub+0x35c>)
 8001da8:	9b02      	ldr	r3, [sp, #8]
 8001daa:	4692      	mov	sl, r2
 8001dac:	4662      	mov	r2, ip
 8001dae:	44ba      	add	sl, r7
 8001db0:	431a      	orrs	r2, r3
 8001db2:	d02c      	beq.n	8001e0e <__aeabi_dsub+0x25e>
 8001db4:	428e      	cmp	r6, r1
 8001db6:	d02e      	beq.n	8001e16 <__aeabi_dsub+0x266>
 8001db8:	4652      	mov	r2, sl
 8001dba:	2a00      	cmp	r2, #0
 8001dbc:	d060      	beq.n	8001e80 <__aeabi_dsub+0x2d0>
 8001dbe:	2f00      	cmp	r7, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x214>
 8001dc2:	e0db      	b.n	8001f7c <__aeabi_dsub+0x3cc>
 8001dc4:	4663      	mov	r3, ip
 8001dc6:	000e      	movs	r6, r1
 8001dc8:	9c02      	ldr	r4, [sp, #8]
 8001dca:	08d8      	lsrs	r0, r3, #3
 8001dcc:	0762      	lsls	r2, r4, #29
 8001dce:	4302      	orrs	r2, r0
 8001dd0:	08e4      	lsrs	r4, r4, #3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	4323      	orrs	r3, r4
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x22a>
 8001dd8:	e254      	b.n	8002284 <__aeabi_dsub+0x6d4>
 8001dda:	2580      	movs	r5, #128	@ 0x80
 8001ddc:	032d      	lsls	r5, r5, #12
 8001dde:	4325      	orrs	r5, r4
 8001de0:	032d      	lsls	r5, r5, #12
 8001de2:	4c48      	ldr	r4, [pc, #288]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001de4:	0b2d      	lsrs	r5, r5, #12
 8001de6:	e78c      	b.n	8001d02 <__aeabi_dsub+0x152>
 8001de8:	4661      	mov	r1, ip
 8001dea:	9b02      	ldr	r3, [sp, #8]
 8001dec:	4319      	orrs	r1, r3
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x242>
 8001df0:	e0cc      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 8001df2:	0029      	movs	r1, r5
 8001df4:	3901      	subs	r1, #1
 8001df6:	2d01      	cmp	r5, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x24c>
 8001dfa:	e188      	b.n	800210e <__aeabi_dsub+0x55e>
 8001dfc:	4295      	cmp	r5, r2
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x252>
 8001e00:	e0aa      	b.n	8001f58 <__aeabi_dsub+0x3a8>
 8001e02:	2501      	movs	r5, #1
 8001e04:	2938      	cmp	r1, #56	@ 0x38
 8001e06:	dd00      	ble.n	8001e0a <__aeabi_dsub+0x25a>
 8001e08:	e72f      	b.n	8001c6a <__aeabi_dsub+0xba>
 8001e0a:	468a      	mov	sl, r1
 8001e0c:	e718      	b.n	8001c40 <__aeabi_dsub+0x90>
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4051      	eors	r1, r2
 8001e12:	428e      	cmp	r6, r1
 8001e14:	d1d0      	bne.n	8001db8 <__aeabi_dsub+0x208>
 8001e16:	4653      	mov	r3, sl
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dsub+0x26e>
 8001e1c:	e0be      	b.n	8001f9c <__aeabi_dsub+0x3ec>
 8001e1e:	2f00      	cmp	r7, #0
 8001e20:	d000      	beq.n	8001e24 <__aeabi_dsub+0x274>
 8001e22:	e138      	b.n	8002096 <__aeabi_dsub+0x4e6>
 8001e24:	46ca      	mov	sl, r9
 8001e26:	0022      	movs	r2, r4
 8001e28:	4302      	orrs	r2, r0
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x27e>
 8001e2c:	e1e2      	b.n	80021f4 <__aeabi_dsub+0x644>
 8001e2e:	4653      	mov	r3, sl
 8001e30:	1e59      	subs	r1, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x288>
 8001e36:	e20d      	b.n	8002254 <__aeabi_dsub+0x6a4>
 8001e38:	4a32      	ldr	r2, [pc, #200]	@ (8001f04 <__aeabi_dsub+0x354>)
 8001e3a:	4592      	cmp	sl, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x290>
 8001e3e:	e1d2      	b.n	80021e6 <__aeabi_dsub+0x636>
 8001e40:	2701      	movs	r7, #1
 8001e42:	2938      	cmp	r1, #56	@ 0x38
 8001e44:	dc13      	bgt.n	8001e6e <__aeabi_dsub+0x2be>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x29c>
 8001e4a:	e1ee      	b.n	800222a <__aeabi_dsub+0x67a>
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	9b02      	ldr	r3, [sp, #8]
 8001e50:	1a52      	subs	r2, r2, r1
 8001e52:	0025      	movs	r5, r4
 8001e54:	0007      	movs	r7, r0
 8001e56:	469a      	mov	sl, r3
 8001e58:	40cc      	lsrs	r4, r1
 8001e5a:	4090      	lsls	r0, r2
 8001e5c:	4095      	lsls	r5, r2
 8001e5e:	40cf      	lsrs	r7, r1
 8001e60:	44a2      	add	sl, r4
 8001e62:	1e42      	subs	r2, r0, #1
 8001e64:	4190      	sbcs	r0, r2
 8001e66:	4653      	mov	r3, sl
 8001e68:	432f      	orrs	r7, r5
 8001e6a:	4307      	orrs	r7, r0
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	003d      	movs	r5, r7
 8001e70:	4465      	add	r5, ip
 8001e72:	4565      	cmp	r5, ip
 8001e74:	4192      	sbcs	r2, r2
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	4252      	negs	r2, r2
 8001e7a:	464f      	mov	r7, r9
 8001e7c:	18d4      	adds	r4, r2, r3
 8001e7e:	e780      	b.n	8001d82 <__aeabi_dsub+0x1d2>
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <__aeabi_dsub+0x360>)
 8001e82:	1c7d      	adds	r5, r7, #1
 8001e84:	4215      	tst	r5, r2
 8001e86:	d000      	beq.n	8001e8a <__aeabi_dsub+0x2da>
 8001e88:	e0aa      	b.n	8001fe0 <__aeabi_dsub+0x430>
 8001e8a:	4662      	mov	r2, ip
 8001e8c:	0025      	movs	r5, r4
 8001e8e:	9b02      	ldr	r3, [sp, #8]
 8001e90:	4305      	orrs	r5, r0
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2f00      	cmp	r7, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2ea>
 8001e98:	e0f5      	b.n	8002086 <__aeabi_dsub+0x4d6>
 8001e9a:	2d00      	cmp	r5, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2f0>
 8001e9e:	e16b      	b.n	8002178 <__aeabi_dsub+0x5c8>
 8001ea0:	2a00      	cmp	r2, #0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x2f6>
 8001ea4:	e152      	b.n	800214c <__aeabi_dsub+0x59c>
 8001ea6:	4663      	mov	r3, ip
 8001ea8:	1ac5      	subs	r5, r0, r3
 8001eaa:	9b02      	ldr	r3, [sp, #8]
 8001eac:	1ae2      	subs	r2, r4, r3
 8001eae:	42a8      	cmp	r0, r5
 8001eb0:	419b      	sbcs	r3, r3
 8001eb2:	425b      	negs	r3, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	021a      	lsls	r2, r3, #8
 8001eb8:	d400      	bmi.n	8001ebc <__aeabi_dsub+0x30c>
 8001eba:	e1d5      	b.n	8002268 <__aeabi_dsub+0x6b8>
 8001ebc:	4663      	mov	r3, ip
 8001ebe:	1a1d      	subs	r5, r3, r0
 8001ec0:	45ac      	cmp	ip, r5
 8001ec2:	4192      	sbcs	r2, r2
 8001ec4:	2601      	movs	r6, #1
 8001ec6:	9b02      	ldr	r3, [sp, #8]
 8001ec8:	4252      	negs	r2, r2
 8001eca:	1b1c      	subs	r4, r3, r4
 8001ecc:	4688      	mov	r8, r1
 8001ece:	1aa4      	subs	r4, r4, r2
 8001ed0:	400e      	ands	r6, r1
 8001ed2:	e6f6      	b.n	8001cc2 <__aeabi_dsub+0x112>
 8001ed4:	4297      	cmp	r7, r2
 8001ed6:	d03f      	beq.n	8001f58 <__aeabi_dsub+0x3a8>
 8001ed8:	4652      	mov	r2, sl
 8001eda:	2501      	movs	r5, #1
 8001edc:	2a38      	cmp	r2, #56	@ 0x38
 8001ede:	dd00      	ble.n	8001ee2 <__aeabi_dsub+0x332>
 8001ee0:	e74a      	b.n	8001d78 <__aeabi_dsub+0x1c8>
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	9b02      	ldr	r3, [sp, #8]
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	e72d      	b.n	8001d4a <__aeabi_dsub+0x19a>
 8001eee:	003c      	movs	r4, r7
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	e705      	b.n	8001d02 <__aeabi_dsub+0x152>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	402b      	ands	r3, r5
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d000      	beq.n	8001f00 <__aeabi_dsub+0x350>
 8001efe:	e6e2      	b.n	8001cc6 <__aeabi_dsub+0x116>
 8001f00:	e06b      	b.n	8001fda <__aeabi_dsub+0x42a>
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	ff7fffff 	.word	0xff7fffff
 8001f0c:	fffff801 	.word	0xfffff801
 8001f10:	000007fe 	.word	0x000007fe
 8001f14:	0028      	movs	r0, r5
 8001f16:	f7fe fab3 	bl	8000480 <__clzsi2>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	3318      	adds	r3, #24
 8001f1e:	2b1f      	cmp	r3, #31
 8001f20:	dc00      	bgt.n	8001f24 <__aeabi_dsub+0x374>
 8001f22:	e6b4      	b.n	8001c8e <__aeabi_dsub+0xde>
 8001f24:	002a      	movs	r2, r5
 8001f26:	3808      	subs	r0, #8
 8001f28:	4082      	lsls	r2, r0
 8001f2a:	429f      	cmp	r7, r3
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x380>
 8001f2e:	e0b9      	b.n	80020a4 <__aeabi_dsub+0x4f4>
 8001f30:	1bdb      	subs	r3, r3, r7
 8001f32:	1c58      	adds	r0, r3, #1
 8001f34:	281f      	cmp	r0, #31
 8001f36:	dc00      	bgt.n	8001f3a <__aeabi_dsub+0x38a>
 8001f38:	e1a0      	b.n	800227c <__aeabi_dsub+0x6cc>
 8001f3a:	0015      	movs	r5, r2
 8001f3c:	3b1f      	subs	r3, #31
 8001f3e:	40dd      	lsrs	r5, r3
 8001f40:	2820      	cmp	r0, #32
 8001f42:	d005      	beq.n	8001f50 <__aeabi_dsub+0x3a0>
 8001f44:	2340      	movs	r3, #64	@ 0x40
 8001f46:	1a1b      	subs	r3, r3, r0
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	1e53      	subs	r3, r2, #1
 8001f4c:	419a      	sbcs	r2, r3
 8001f4e:	4315      	orrs	r5, r2
 8001f50:	2307      	movs	r3, #7
 8001f52:	2700      	movs	r7, #0
 8001f54:	402b      	ands	r3, r5
 8001f56:	e7d0      	b.n	8001efa <__aeabi_dsub+0x34a>
 8001f58:	08c0      	lsrs	r0, r0, #3
 8001f5a:	0762      	lsls	r2, r4, #29
 8001f5c:	4302      	orrs	r2, r0
 8001f5e:	08e4      	lsrs	r4, r4, #3
 8001f60:	e737      	b.n	8001dd2 <__aeabi_dsub+0x222>
 8001f62:	08ea      	lsrs	r2, r5, #3
 8001f64:	0763      	lsls	r3, r4, #29
 8001f66:	431a      	orrs	r2, r3
 8001f68:	4bd3      	ldr	r3, [pc, #844]	@ (80022b8 <__aeabi_dsub+0x708>)
 8001f6a:	08e4      	lsrs	r4, r4, #3
 8001f6c:	429f      	cmp	r7, r3
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x3c2>
 8001f70:	e72f      	b.n	8001dd2 <__aeabi_dsub+0x222>
 8001f72:	0324      	lsls	r4, r4, #12
 8001f74:	0b25      	lsrs	r5, r4, #12
 8001f76:	057c      	lsls	r4, r7, #21
 8001f78:	0d64      	lsrs	r4, r4, #21
 8001f7a:	e6c2      	b.n	8001d02 <__aeabi_dsub+0x152>
 8001f7c:	46ca      	mov	sl, r9
 8001f7e:	0022      	movs	r2, r4
 8001f80:	4302      	orrs	r2, r0
 8001f82:	d158      	bne.n	8002036 <__aeabi_dsub+0x486>
 8001f84:	4663      	mov	r3, ip
 8001f86:	000e      	movs	r6, r1
 8001f88:	9c02      	ldr	r4, [sp, #8]
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	9b03      	ldr	r3, [sp, #12]
 8001f8e:	4657      	mov	r7, sl
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	e7e7      	b.n	8001f64 <__aeabi_dsub+0x3b4>
 8001f94:	4cc9      	ldr	r4, [pc, #804]	@ (80022bc <__aeabi_dsub+0x70c>)
 8001f96:	1aff      	subs	r7, r7, r3
 8001f98:	4014      	ands	r4, r2
 8001f9a:	e692      	b.n	8001cc2 <__aeabi_dsub+0x112>
 8001f9c:	4dc8      	ldr	r5, [pc, #800]	@ (80022c0 <__aeabi_dsub+0x710>)
 8001f9e:	1c7a      	adds	r2, r7, #1
 8001fa0:	422a      	tst	r2, r5
 8001fa2:	d000      	beq.n	8001fa6 <__aeabi_dsub+0x3f6>
 8001fa4:	e084      	b.n	80020b0 <__aeabi_dsub+0x500>
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	2f00      	cmp	r7, #0
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x400>
 8001fae:	e0ef      	b.n	8002190 <__aeabi_dsub+0x5e0>
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x406>
 8001fb4:	e0e5      	b.n	8002182 <__aeabi_dsub+0x5d2>
 8001fb6:	4662      	mov	r2, ip
 8001fb8:	9902      	ldr	r1, [sp, #8]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x410>
 8001fbe:	e0c5      	b.n	800214c <__aeabi_dsub+0x59c>
 8001fc0:	4663      	mov	r3, ip
 8001fc2:	18c5      	adds	r5, r0, r3
 8001fc4:	468c      	mov	ip, r1
 8001fc6:	4285      	cmp	r5, r0
 8001fc8:	4180      	sbcs	r0, r0
 8001fca:	4464      	add	r4, ip
 8001fcc:	4240      	negs	r0, r0
 8001fce:	1824      	adds	r4, r4, r0
 8001fd0:	0223      	lsls	r3, r4, #8
 8001fd2:	d502      	bpl.n	8001fda <__aeabi_dsub+0x42a>
 8001fd4:	4bb9      	ldr	r3, [pc, #740]	@ (80022bc <__aeabi_dsub+0x70c>)
 8001fd6:	3701      	adds	r7, #1
 8001fd8:	401c      	ands	r4, r3
 8001fda:	46ba      	mov	sl, r7
 8001fdc:	9503      	str	r5, [sp, #12]
 8001fde:	e7d5      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 8001fe0:	4662      	mov	r2, ip
 8001fe2:	1a85      	subs	r5, r0, r2
 8001fe4:	42a8      	cmp	r0, r5
 8001fe6:	4192      	sbcs	r2, r2
 8001fe8:	4252      	negs	r2, r2
 8001fea:	4691      	mov	r9, r2
 8001fec:	9b02      	ldr	r3, [sp, #8]
 8001fee:	1ae3      	subs	r3, r4, r3
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	021a      	lsls	r2, r3, #8
 8001ffc:	d46c      	bmi.n	80020d8 <__aeabi_dsub+0x528>
 8001ffe:	464a      	mov	r2, r9
 8002000:	464c      	mov	r4, r9
 8002002:	432a      	orrs	r2, r5
 8002004:	d000      	beq.n	8002008 <__aeabi_dsub+0x458>
 8002006:	e63a      	b.n	8001c7e <__aeabi_dsub+0xce>
 8002008:	2600      	movs	r6, #0
 800200a:	2400      	movs	r4, #0
 800200c:	2500      	movs	r5, #0
 800200e:	e678      	b.n	8001d02 <__aeabi_dsub+0x152>
 8002010:	9902      	ldr	r1, [sp, #8]
 8002012:	4653      	mov	r3, sl
 8002014:	000d      	movs	r5, r1
 8002016:	3a20      	subs	r2, #32
 8002018:	40d5      	lsrs	r5, r2
 800201a:	2b20      	cmp	r3, #32
 800201c:	d006      	beq.n	800202c <__aeabi_dsub+0x47c>
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	000b      	movs	r3, r1
 8002024:	4093      	lsls	r3, r2
 8002026:	4662      	mov	r2, ip
 8002028:	431a      	orrs	r2, r3
 800202a:	4693      	mov	fp, r2
 800202c:	465b      	mov	r3, fp
 800202e:	1e5a      	subs	r2, r3, #1
 8002030:	4193      	sbcs	r3, r2
 8002032:	431d      	orrs	r5, r3
 8002034:	e619      	b.n	8001c6a <__aeabi_dsub+0xba>
 8002036:	4653      	mov	r3, sl
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d100      	bne.n	8002040 <__aeabi_dsub+0x490>
 800203e:	e0c6      	b.n	80021ce <__aeabi_dsub+0x61e>
 8002040:	4e9d      	ldr	r6, [pc, #628]	@ (80022b8 <__aeabi_dsub+0x708>)
 8002042:	45b2      	cmp	sl, r6
 8002044:	d100      	bne.n	8002048 <__aeabi_dsub+0x498>
 8002046:	e6bd      	b.n	8001dc4 <__aeabi_dsub+0x214>
 8002048:	4688      	mov	r8, r1
 800204a:	000e      	movs	r6, r1
 800204c:	2501      	movs	r5, #1
 800204e:	2a38      	cmp	r2, #56	@ 0x38
 8002050:	dc10      	bgt.n	8002074 <__aeabi_dsub+0x4c4>
 8002052:	2a1f      	cmp	r2, #31
 8002054:	dc7f      	bgt.n	8002156 <__aeabi_dsub+0x5a6>
 8002056:	2120      	movs	r1, #32
 8002058:	0025      	movs	r5, r4
 800205a:	1a89      	subs	r1, r1, r2
 800205c:	0007      	movs	r7, r0
 800205e:	4088      	lsls	r0, r1
 8002060:	408d      	lsls	r5, r1
 8002062:	40d7      	lsrs	r7, r2
 8002064:	40d4      	lsrs	r4, r2
 8002066:	1e41      	subs	r1, r0, #1
 8002068:	4188      	sbcs	r0, r1
 800206a:	9b02      	ldr	r3, [sp, #8]
 800206c:	433d      	orrs	r5, r7
 800206e:	1b1b      	subs	r3, r3, r4
 8002070:	4305      	orrs	r5, r0
 8002072:	9302      	str	r3, [sp, #8]
 8002074:	4662      	mov	r2, ip
 8002076:	1b55      	subs	r5, r2, r5
 8002078:	45ac      	cmp	ip, r5
 800207a:	4192      	sbcs	r2, r2
 800207c:	9b02      	ldr	r3, [sp, #8]
 800207e:	4252      	negs	r2, r2
 8002080:	464f      	mov	r7, r9
 8002082:	1a9c      	subs	r4, r3, r2
 8002084:	e5f6      	b.n	8001c74 <__aeabi_dsub+0xc4>
 8002086:	2d00      	cmp	r5, #0
 8002088:	d000      	beq.n	800208c <__aeabi_dsub+0x4dc>
 800208a:	e0b7      	b.n	80021fc <__aeabi_dsub+0x64c>
 800208c:	2a00      	cmp	r2, #0
 800208e:	d100      	bne.n	8002092 <__aeabi_dsub+0x4e2>
 8002090:	e0f0      	b.n	8002274 <__aeabi_dsub+0x6c4>
 8002092:	2601      	movs	r6, #1
 8002094:	400e      	ands	r6, r1
 8002096:	4663      	mov	r3, ip
 8002098:	9802      	ldr	r0, [sp, #8]
 800209a:	08d9      	lsrs	r1, r3, #3
 800209c:	0742      	lsls	r2, r0, #29
 800209e:	430a      	orrs	r2, r1
 80020a0:	08c4      	lsrs	r4, r0, #3
 80020a2:	e696      	b.n	8001dd2 <__aeabi_dsub+0x222>
 80020a4:	4c85      	ldr	r4, [pc, #532]	@ (80022bc <__aeabi_dsub+0x70c>)
 80020a6:	1aff      	subs	r7, r7, r3
 80020a8:	4014      	ands	r4, r2
 80020aa:	0762      	lsls	r2, r4, #29
 80020ac:	08e4      	lsrs	r4, r4, #3
 80020ae:	e760      	b.n	8001f72 <__aeabi_dsub+0x3c2>
 80020b0:	4981      	ldr	r1, [pc, #516]	@ (80022b8 <__aeabi_dsub+0x708>)
 80020b2:	428a      	cmp	r2, r1
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x508>
 80020b6:	e0c9      	b.n	800224c <__aeabi_dsub+0x69c>
 80020b8:	4663      	mov	r3, ip
 80020ba:	18c1      	adds	r1, r0, r3
 80020bc:	4281      	cmp	r1, r0
 80020be:	4180      	sbcs	r0, r0
 80020c0:	9b02      	ldr	r3, [sp, #8]
 80020c2:	4240      	negs	r0, r0
 80020c4:	18e3      	adds	r3, r4, r3
 80020c6:	181b      	adds	r3, r3, r0
 80020c8:	07dd      	lsls	r5, r3, #31
 80020ca:	085c      	lsrs	r4, r3, #1
 80020cc:	2307      	movs	r3, #7
 80020ce:	0849      	lsrs	r1, r1, #1
 80020d0:	430d      	orrs	r5, r1
 80020d2:	0017      	movs	r7, r2
 80020d4:	402b      	ands	r3, r5
 80020d6:	e710      	b.n	8001efa <__aeabi_dsub+0x34a>
 80020d8:	4663      	mov	r3, ip
 80020da:	1a1d      	subs	r5, r3, r0
 80020dc:	45ac      	cmp	ip, r5
 80020de:	4192      	sbcs	r2, r2
 80020e0:	2601      	movs	r6, #1
 80020e2:	9b02      	ldr	r3, [sp, #8]
 80020e4:	4252      	negs	r2, r2
 80020e6:	1b1c      	subs	r4, r3, r4
 80020e8:	4688      	mov	r8, r1
 80020ea:	1aa4      	subs	r4, r4, r2
 80020ec:	400e      	ands	r6, r1
 80020ee:	e5c6      	b.n	8001c7e <__aeabi_dsub+0xce>
 80020f0:	4663      	mov	r3, ip
 80020f2:	18c5      	adds	r5, r0, r3
 80020f4:	9b02      	ldr	r3, [sp, #8]
 80020f6:	4285      	cmp	r5, r0
 80020f8:	4180      	sbcs	r0, r0
 80020fa:	469c      	mov	ip, r3
 80020fc:	4240      	negs	r0, r0
 80020fe:	4464      	add	r4, ip
 8002100:	1824      	adds	r4, r4, r0
 8002102:	2701      	movs	r7, #1
 8002104:	0223      	lsls	r3, r4, #8
 8002106:	d400      	bmi.n	800210a <__aeabi_dsub+0x55a>
 8002108:	e6f5      	b.n	8001ef6 <__aeabi_dsub+0x346>
 800210a:	2702      	movs	r7, #2
 800210c:	e641      	b.n	8001d92 <__aeabi_dsub+0x1e2>
 800210e:	4663      	mov	r3, ip
 8002110:	1ac5      	subs	r5, r0, r3
 8002112:	42a8      	cmp	r0, r5
 8002114:	4180      	sbcs	r0, r0
 8002116:	9b02      	ldr	r3, [sp, #8]
 8002118:	4240      	negs	r0, r0
 800211a:	1ae4      	subs	r4, r4, r3
 800211c:	2701      	movs	r7, #1
 800211e:	1a24      	subs	r4, r4, r0
 8002120:	e5a8      	b.n	8001c74 <__aeabi_dsub+0xc4>
 8002122:	9d02      	ldr	r5, [sp, #8]
 8002124:	4652      	mov	r2, sl
 8002126:	002b      	movs	r3, r5
 8002128:	3a20      	subs	r2, #32
 800212a:	40d3      	lsrs	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	4653      	mov	r3, sl
 8002130:	2b20      	cmp	r3, #32
 8002132:	d006      	beq.n	8002142 <__aeabi_dsub+0x592>
 8002134:	2240      	movs	r2, #64	@ 0x40
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	002b      	movs	r3, r5
 800213a:	4093      	lsls	r3, r2
 800213c:	4662      	mov	r2, ip
 800213e:	431a      	orrs	r2, r3
 8002140:	4693      	mov	fp, r2
 8002142:	465d      	mov	r5, fp
 8002144:	1e6b      	subs	r3, r5, #1
 8002146:	419d      	sbcs	r5, r3
 8002148:	430d      	orrs	r5, r1
 800214a:	e615      	b.n	8001d78 <__aeabi_dsub+0x1c8>
 800214c:	0762      	lsls	r2, r4, #29
 800214e:	08c0      	lsrs	r0, r0, #3
 8002150:	4302      	orrs	r2, r0
 8002152:	08e4      	lsrs	r4, r4, #3
 8002154:	e70d      	b.n	8001f72 <__aeabi_dsub+0x3c2>
 8002156:	0011      	movs	r1, r2
 8002158:	0027      	movs	r7, r4
 800215a:	3920      	subs	r1, #32
 800215c:	40cf      	lsrs	r7, r1
 800215e:	2a20      	cmp	r2, #32
 8002160:	d005      	beq.n	800216e <__aeabi_dsub+0x5be>
 8002162:	2140      	movs	r1, #64	@ 0x40
 8002164:	1a8a      	subs	r2, r1, r2
 8002166:	4094      	lsls	r4, r2
 8002168:	0025      	movs	r5, r4
 800216a:	4305      	orrs	r5, r0
 800216c:	9503      	str	r5, [sp, #12]
 800216e:	9d03      	ldr	r5, [sp, #12]
 8002170:	1e6a      	subs	r2, r5, #1
 8002172:	4195      	sbcs	r5, r2
 8002174:	433d      	orrs	r5, r7
 8002176:	e77d      	b.n	8002074 <__aeabi_dsub+0x4c4>
 8002178:	2a00      	cmp	r2, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x5ce>
 800217c:	e744      	b.n	8002008 <__aeabi_dsub+0x458>
 800217e:	2601      	movs	r6, #1
 8002180:	400e      	ands	r6, r1
 8002182:	4663      	mov	r3, ip
 8002184:	08d9      	lsrs	r1, r3, #3
 8002186:	9b02      	ldr	r3, [sp, #8]
 8002188:	075a      	lsls	r2, r3, #29
 800218a:	430a      	orrs	r2, r1
 800218c:	08dc      	lsrs	r4, r3, #3
 800218e:	e6f0      	b.n	8001f72 <__aeabi_dsub+0x3c2>
 8002190:	2a00      	cmp	r2, #0
 8002192:	d028      	beq.n	80021e6 <__aeabi_dsub+0x636>
 8002194:	4662      	mov	r2, ip
 8002196:	9f02      	ldr	r7, [sp, #8]
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	433a      	orrs	r2, r7
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x5f0>
 800219e:	e6dc      	b.n	8001f5a <__aeabi_dsub+0x3aa>
 80021a0:	0762      	lsls	r2, r4, #29
 80021a2:	4310      	orrs	r0, r2
 80021a4:	2280      	movs	r2, #128	@ 0x80
 80021a6:	08e4      	lsrs	r4, r4, #3
 80021a8:	0312      	lsls	r2, r2, #12
 80021aa:	4214      	tst	r4, r2
 80021ac:	d009      	beq.n	80021c2 <__aeabi_dsub+0x612>
 80021ae:	08fd      	lsrs	r5, r7, #3
 80021b0:	4215      	tst	r5, r2
 80021b2:	d106      	bne.n	80021c2 <__aeabi_dsub+0x612>
 80021b4:	4663      	mov	r3, ip
 80021b6:	2601      	movs	r6, #1
 80021b8:	002c      	movs	r4, r5
 80021ba:	08d8      	lsrs	r0, r3, #3
 80021bc:	077b      	lsls	r3, r7, #29
 80021be:	4318      	orrs	r0, r3
 80021c0:	400e      	ands	r6, r1
 80021c2:	0f42      	lsrs	r2, r0, #29
 80021c4:	00c0      	lsls	r0, r0, #3
 80021c6:	08c0      	lsrs	r0, r0, #3
 80021c8:	0752      	lsls	r2, r2, #29
 80021ca:	4302      	orrs	r2, r0
 80021cc:	e601      	b.n	8001dd2 <__aeabi_dsub+0x222>
 80021ce:	4663      	mov	r3, ip
 80021d0:	1a1d      	subs	r5, r3, r0
 80021d2:	45ac      	cmp	ip, r5
 80021d4:	4192      	sbcs	r2, r2
 80021d6:	9b02      	ldr	r3, [sp, #8]
 80021d8:	4252      	negs	r2, r2
 80021da:	1b1c      	subs	r4, r3, r4
 80021dc:	000e      	movs	r6, r1
 80021de:	4688      	mov	r8, r1
 80021e0:	2701      	movs	r7, #1
 80021e2:	1aa4      	subs	r4, r4, r2
 80021e4:	e546      	b.n	8001c74 <__aeabi_dsub+0xc4>
 80021e6:	4663      	mov	r3, ip
 80021e8:	08d9      	lsrs	r1, r3, #3
 80021ea:	9b02      	ldr	r3, [sp, #8]
 80021ec:	075a      	lsls	r2, r3, #29
 80021ee:	430a      	orrs	r2, r1
 80021f0:	08dc      	lsrs	r4, r3, #3
 80021f2:	e5ee      	b.n	8001dd2 <__aeabi_dsub+0x222>
 80021f4:	4663      	mov	r3, ip
 80021f6:	9c02      	ldr	r4, [sp, #8]
 80021f8:	9303      	str	r3, [sp, #12]
 80021fa:	e6c7      	b.n	8001f8c <__aeabi_dsub+0x3dc>
 80021fc:	08c0      	lsrs	r0, r0, #3
 80021fe:	2a00      	cmp	r2, #0
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x654>
 8002202:	e6aa      	b.n	8001f5a <__aeabi_dsub+0x3aa>
 8002204:	0762      	lsls	r2, r4, #29
 8002206:	4310      	orrs	r0, r2
 8002208:	2280      	movs	r2, #128	@ 0x80
 800220a:	08e4      	lsrs	r4, r4, #3
 800220c:	0312      	lsls	r2, r2, #12
 800220e:	4214      	tst	r4, r2
 8002210:	d0d7      	beq.n	80021c2 <__aeabi_dsub+0x612>
 8002212:	9f02      	ldr	r7, [sp, #8]
 8002214:	08fd      	lsrs	r5, r7, #3
 8002216:	4215      	tst	r5, r2
 8002218:	d1d3      	bne.n	80021c2 <__aeabi_dsub+0x612>
 800221a:	4663      	mov	r3, ip
 800221c:	2601      	movs	r6, #1
 800221e:	08d8      	lsrs	r0, r3, #3
 8002220:	077b      	lsls	r3, r7, #29
 8002222:	002c      	movs	r4, r5
 8002224:	4318      	orrs	r0, r3
 8002226:	400e      	ands	r6, r1
 8002228:	e7cb      	b.n	80021c2 <__aeabi_dsub+0x612>
 800222a:	000a      	movs	r2, r1
 800222c:	0027      	movs	r7, r4
 800222e:	3a20      	subs	r2, #32
 8002230:	40d7      	lsrs	r7, r2
 8002232:	2920      	cmp	r1, #32
 8002234:	d005      	beq.n	8002242 <__aeabi_dsub+0x692>
 8002236:	2240      	movs	r2, #64	@ 0x40
 8002238:	1a52      	subs	r2, r2, r1
 800223a:	4094      	lsls	r4, r2
 800223c:	0025      	movs	r5, r4
 800223e:	4305      	orrs	r5, r0
 8002240:	9503      	str	r5, [sp, #12]
 8002242:	9d03      	ldr	r5, [sp, #12]
 8002244:	1e6a      	subs	r2, r5, #1
 8002246:	4195      	sbcs	r5, r2
 8002248:	432f      	orrs	r7, r5
 800224a:	e610      	b.n	8001e6e <__aeabi_dsub+0x2be>
 800224c:	0014      	movs	r4, r2
 800224e:	2500      	movs	r5, #0
 8002250:	2200      	movs	r2, #0
 8002252:	e556      	b.n	8001d02 <__aeabi_dsub+0x152>
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4460      	add	r0, ip
 8002258:	4699      	mov	r9, r3
 800225a:	4560      	cmp	r0, ip
 800225c:	4192      	sbcs	r2, r2
 800225e:	444c      	add	r4, r9
 8002260:	4252      	negs	r2, r2
 8002262:	0005      	movs	r5, r0
 8002264:	18a4      	adds	r4, r4, r2
 8002266:	e74c      	b.n	8002102 <__aeabi_dsub+0x552>
 8002268:	001a      	movs	r2, r3
 800226a:	001c      	movs	r4, r3
 800226c:	432a      	orrs	r2, r5
 800226e:	d000      	beq.n	8002272 <__aeabi_dsub+0x6c2>
 8002270:	e6b3      	b.n	8001fda <__aeabi_dsub+0x42a>
 8002272:	e6c9      	b.n	8002008 <__aeabi_dsub+0x458>
 8002274:	2480      	movs	r4, #128	@ 0x80
 8002276:	2600      	movs	r6, #0
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	e5ae      	b.n	8001dda <__aeabi_dsub+0x22a>
 800227c:	2120      	movs	r1, #32
 800227e:	2500      	movs	r5, #0
 8002280:	1a09      	subs	r1, r1, r0
 8002282:	e517      	b.n	8001cb4 <__aeabi_dsub+0x104>
 8002284:	2200      	movs	r2, #0
 8002286:	2500      	movs	r5, #0
 8002288:	4c0b      	ldr	r4, [pc, #44]	@ (80022b8 <__aeabi_dsub+0x708>)
 800228a:	e53a      	b.n	8001d02 <__aeabi_dsub+0x152>
 800228c:	2d00      	cmp	r5, #0
 800228e:	d100      	bne.n	8002292 <__aeabi_dsub+0x6e2>
 8002290:	e5f6      	b.n	8001e80 <__aeabi_dsub+0x2d0>
 8002292:	464b      	mov	r3, r9
 8002294:	1bda      	subs	r2, r3, r7
 8002296:	4692      	mov	sl, r2
 8002298:	2f00      	cmp	r7, #0
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x6ee>
 800229c:	e66f      	b.n	8001f7e <__aeabi_dsub+0x3ce>
 800229e:	2a38      	cmp	r2, #56	@ 0x38
 80022a0:	dc05      	bgt.n	80022ae <__aeabi_dsub+0x6fe>
 80022a2:	2680      	movs	r6, #128	@ 0x80
 80022a4:	0436      	lsls	r6, r6, #16
 80022a6:	4334      	orrs	r4, r6
 80022a8:	4688      	mov	r8, r1
 80022aa:	000e      	movs	r6, r1
 80022ac:	e6d1      	b.n	8002052 <__aeabi_dsub+0x4a2>
 80022ae:	4688      	mov	r8, r1
 80022b0:	000e      	movs	r6, r1
 80022b2:	2501      	movs	r5, #1
 80022b4:	e6de      	b.n	8002074 <__aeabi_dsub+0x4c4>
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	000007ff 	.word	0x000007ff
 80022bc:	ff7fffff 	.word	0xff7fffff
 80022c0:	000007fe 	.word	0x000007fe
 80022c4:	2d00      	cmp	r5, #0
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x71a>
 80022c8:	e668      	b.n	8001f9c <__aeabi_dsub+0x3ec>
 80022ca:	464b      	mov	r3, r9
 80022cc:	1bd9      	subs	r1, r3, r7
 80022ce:	2f00      	cmp	r7, #0
 80022d0:	d101      	bne.n	80022d6 <__aeabi_dsub+0x726>
 80022d2:	468a      	mov	sl, r1
 80022d4:	e5a7      	b.n	8001e26 <__aeabi_dsub+0x276>
 80022d6:	2701      	movs	r7, #1
 80022d8:	2938      	cmp	r1, #56	@ 0x38
 80022da:	dd00      	ble.n	80022de <__aeabi_dsub+0x72e>
 80022dc:	e5c7      	b.n	8001e6e <__aeabi_dsub+0x2be>
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	0412      	lsls	r2, r2, #16
 80022e2:	4314      	orrs	r4, r2
 80022e4:	e5af      	b.n	8001e46 <__aeabi_dsub+0x296>
 80022e6:	46c0      	nop			@ (mov r8, r8)

080022e8 <__aeabi_dcmpun>:
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	46c6      	mov	lr, r8
 80022ec:	031e      	lsls	r6, r3, #12
 80022ee:	0b36      	lsrs	r6, r6, #12
 80022f0:	46b0      	mov	r8, r6
 80022f2:	4e0d      	ldr	r6, [pc, #52]	@ (8002328 <__aeabi_dcmpun+0x40>)
 80022f4:	030c      	lsls	r4, r1, #12
 80022f6:	004d      	lsls	r5, r1, #1
 80022f8:	005f      	lsls	r7, r3, #1
 80022fa:	b500      	push	{lr}
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	0d6d      	lsrs	r5, r5, #21
 8002300:	0d7f      	lsrs	r7, r7, #21
 8002302:	42b5      	cmp	r5, r6
 8002304:	d00b      	beq.n	800231e <__aeabi_dcmpun+0x36>
 8002306:	4908      	ldr	r1, [pc, #32]	@ (8002328 <__aeabi_dcmpun+0x40>)
 8002308:	2000      	movs	r0, #0
 800230a:	428f      	cmp	r7, r1
 800230c:	d104      	bne.n	8002318 <__aeabi_dcmpun+0x30>
 800230e:	4646      	mov	r6, r8
 8002310:	4316      	orrs	r6, r2
 8002312:	0030      	movs	r0, r6
 8002314:	1e43      	subs	r3, r0, #1
 8002316:	4198      	sbcs	r0, r3
 8002318:	bc80      	pop	{r7}
 800231a:	46b8      	mov	r8, r7
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231e:	4304      	orrs	r4, r0
 8002320:	2001      	movs	r0, #1
 8002322:	2c00      	cmp	r4, #0
 8002324:	d1f8      	bne.n	8002318 <__aeabi_dcmpun+0x30>
 8002326:	e7ee      	b.n	8002306 <__aeabi_dcmpun+0x1e>
 8002328:	000007ff 	.word	0x000007ff

0800232c <__aeabi_d2iz>:
 800232c:	000b      	movs	r3, r1
 800232e:	0002      	movs	r2, r0
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	4d16      	ldr	r5, [pc, #88]	@ (800238c <__aeabi_d2iz+0x60>)
 8002334:	030c      	lsls	r4, r1, #12
 8002336:	b082      	sub	sp, #8
 8002338:	0049      	lsls	r1, r1, #1
 800233a:	2000      	movs	r0, #0
 800233c:	9200      	str	r2, [sp, #0]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	0b24      	lsrs	r4, r4, #12
 8002342:	0d49      	lsrs	r1, r1, #21
 8002344:	0fde      	lsrs	r6, r3, #31
 8002346:	42a9      	cmp	r1, r5
 8002348:	dd04      	ble.n	8002354 <__aeabi_d2iz+0x28>
 800234a:	4811      	ldr	r0, [pc, #68]	@ (8002390 <__aeabi_d2iz+0x64>)
 800234c:	4281      	cmp	r1, r0
 800234e:	dd03      	ble.n	8002358 <__aeabi_d2iz+0x2c>
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <__aeabi_d2iz+0x68>)
 8002352:	18f0      	adds	r0, r6, r3
 8002354:	b002      	add	sp, #8
 8002356:	bd70      	pop	{r4, r5, r6, pc}
 8002358:	2080      	movs	r0, #128	@ 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4320      	orrs	r0, r4
 800235e:	4c0e      	ldr	r4, [pc, #56]	@ (8002398 <__aeabi_d2iz+0x6c>)
 8002360:	1a64      	subs	r4, r4, r1
 8002362:	2c1f      	cmp	r4, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x4c>
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <__aeabi_d2iz+0x70>)
 8002368:	1a5b      	subs	r3, r3, r1
 800236a:	40d8      	lsrs	r0, r3
 800236c:	0003      	movs	r3, r0
 800236e:	4258      	negs	r0, r3
 8002370:	2e00      	cmp	r6, #0
 8002372:	d1ef      	bne.n	8002354 <__aeabi_d2iz+0x28>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ed      	b.n	8002354 <__aeabi_d2iz+0x28>
 8002378:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <__aeabi_d2iz+0x74>)
 800237a:	9a00      	ldr	r2, [sp, #0]
 800237c:	469c      	mov	ip, r3
 800237e:	0003      	movs	r3, r0
 8002380:	4461      	add	r1, ip
 8002382:	408b      	lsls	r3, r1
 8002384:	40e2      	lsrs	r2, r4
 8002386:	4313      	orrs	r3, r2
 8002388:	e7f1      	b.n	800236e <__aeabi_d2iz+0x42>
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	000003fe 	.word	0x000003fe
 8002390:	0000041d 	.word	0x0000041d
 8002394:	7fffffff 	.word	0x7fffffff
 8002398:	00000433 	.word	0x00000433
 800239c:	00000413 	.word	0x00000413
 80023a0:	fffffbed 	.word	0xfffffbed

080023a4 <__aeabi_ui2d>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	1e04      	subs	r4, r0, #0
 80023a8:	d010      	beq.n	80023cc <__aeabi_ui2d+0x28>
 80023aa:	f7fe f869 	bl	8000480 <__clzsi2>
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <__aeabi_ui2d+0x44>)
 80023b0:	1a1b      	subs	r3, r3, r0
 80023b2:	055b      	lsls	r3, r3, #21
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	280a      	cmp	r0, #10
 80023b8:	dc0f      	bgt.n	80023da <__aeabi_ui2d+0x36>
 80023ba:	220b      	movs	r2, #11
 80023bc:	0021      	movs	r1, r4
 80023be:	1a12      	subs	r2, r2, r0
 80023c0:	40d1      	lsrs	r1, r2
 80023c2:	3015      	adds	r0, #21
 80023c4:	030a      	lsls	r2, r1, #12
 80023c6:	4084      	lsls	r4, r0
 80023c8:	0b12      	lsrs	r2, r2, #12
 80023ca:	e001      	b.n	80023d0 <__aeabi_ui2d+0x2c>
 80023cc:	2300      	movs	r3, #0
 80023ce:	2200      	movs	r2, #0
 80023d0:	051b      	lsls	r3, r3, #20
 80023d2:	4313      	orrs	r3, r2
 80023d4:	0020      	movs	r0, r4
 80023d6:	0019      	movs	r1, r3
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	0022      	movs	r2, r4
 80023dc:	380b      	subs	r0, #11
 80023de:	4082      	lsls	r2, r0
 80023e0:	0312      	lsls	r2, r2, #12
 80023e2:	2400      	movs	r4, #0
 80023e4:	0b12      	lsrs	r2, r2, #12
 80023e6:	e7f3      	b.n	80023d0 <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__clzdi2>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	2900      	cmp	r1, #0
 80023f0:	d103      	bne.n	80023fa <__clzdi2+0xe>
 80023f2:	f7fe f845 	bl	8000480 <__clzsi2>
 80023f6:	3020      	adds	r0, #32
 80023f8:	e002      	b.n	8002400 <__clzdi2+0x14>
 80023fa:	0008      	movs	r0, r1
 80023fc:	f7fe f840 	bl	8000480 <__clzsi2>
 8002400:	bd10      	pop	{r4, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)

08002404 <getAddressPage>:
/**
  * @brief  Get Page
  * @param  Adrress_: 	any Address in the Flash memory
  * @retval Address the Page
  */
uint64_t getAddressPage(uint32_t Address_){
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	return ( (uint64_t) (Address_ & 0xFFFFF800) );
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	000a      	movs	r2, r1
 8002410:	2100      	movs	r1, #0
 8002412:	000b      	movs	r3, r1
 8002414:	0ad1      	lsrs	r1, r2, #11
 8002416:	02cc      	lsls	r4, r1, #11
 8002418:	2100      	movs	r1, #0
 800241a:	400b      	ands	r3, r1
 800241c:	001d      	movs	r5, r3
 800241e:	0022      	movs	r2, r4
 8002420:	002b      	movs	r3, r5
}
 8002422:	0010      	movs	r0, r2
 8002424:	0019      	movs	r1, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bdb0      	pop	{r4, r5, r7, pc}

0800242c <erasePage>:
/**
  * @brief  Erase a Page
  * @param  numberPage_: 	Select the Page number (0,1,2,3 .. 127)
  * @retval None
  */
void erasePage(uint32_t numberPage_){
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	f010 fd89 	bl	8012f4c <HAL_FLASH_Unlock>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d1fb      	bne.n	8002436 <erasePage+0xa>

	FLASH_EraseInitTypeDef pEraseInit = {0};
 800243e:	2410      	movs	r4, #16
 8002440:	193b      	adds	r3, r7, r4
 8002442:	0018      	movs	r0, r3
 8002444:	2310      	movs	r3, #16
 8002446:	001a      	movs	r2, r3
 8002448:	2100      	movs	r1, #0
 800244a:	f018 fc8b 	bl	801ad64 <memset>
	pEraseInit.NbPages = 1;
 800244e:	0021      	movs	r1, r4
 8002450:	187b      	adds	r3, r7, r1
 8002452:	2201      	movs	r2, #1
 8002454:	60da      	str	r2, [r3, #12]
	pEraseInit.Page = numberPage_;
 8002456:	187b      	adds	r3, r7, r1
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800245c:	187b      	adds	r3, r7, r1
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]

	uint32_t Error_=0;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8002466:	230c      	movs	r3, #12
 8002468:	18fa      	adds	r2, r7, r3
 800246a:	187b      	adds	r3, r7, r1
 800246c:	0011      	movs	r1, r2
 800246e:	0018      	movs	r0, r3
 8002470:	f010 fe1a 	bl	80130a8 <HAL_FLASHEx_Erase>

	while( HAL_FLASH_Lock() !=  HAL_OK);
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	f010 fd8d 	bl	8012f94 <HAL_FLASH_Lock>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d1fb      	bne.n	8002476 <erasePage+0x4a>
}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b009      	add	sp, #36	@ 0x24
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <writeFLASH>:
  * @param  Adrress_: 		Select the Page number (0,1,2,3 .. 127)
  * @param  arrayData_:		Data save in Flash
  * @param  size_:			Amount of data to save
  * @retval None
  */
void writeFLASH(uint64_t * Address_, uint64_t * arrayData_,uint8_t size_){
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	701a      	strb	r2, [r3, #0]
	while( HAL_FLASH_Unlock() !=  HAL_OK );
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	f010 fd58 	bl	8012f4c <HAL_FLASH_Unlock>
 800249c:	1e03      	subs	r3, r0, #0
 800249e:	d1fb      	bne.n	8002498 <writeFLASH+0x10>
	for(uint8_t i =0; i<size_; i++){
 80024a0:	2317      	movs	r3, #23
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e013      	b.n	80024d2 <writeFLASH+0x4a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) Address_, arrayData_[i]);
 80024aa:	68f9      	ldr	r1, [r7, #12]
 80024ac:	2417      	movs	r4, #23
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	18d3      	adds	r3, r2, r3
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2001      	movs	r0, #1
 80024be:	f010 fcf7 	bl	8012eb0 <HAL_FLASH_Program>
		Address_++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3308      	adds	r3, #8
 80024c6:	60fb      	str	r3, [r7, #12]
	for(uint8_t i =0; i<size_; i++){
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	3201      	adds	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	2317      	movs	r3, #23
 80024d4:	18fa      	adds	r2, r7, r3
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3e4      	bcc.n	80024aa <writeFLASH+0x22>
	}
	while( HAL_FLASH_Lock() !=  HAL_OK);
 80024e0:	46c0      	nop			@ (mov r8, r8)
 80024e2:	f010 fd57 	bl	8012f94 <HAL_FLASH_Lock>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d1fb      	bne.n	80024e2 <writeFLASH+0x5a>
}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b007      	add	sp, #28
 80024f2:	bd90      	pop	{r4, r7, pc}

080024f4 <initEEPROMEmulated>:

/**
  * @brief  Init the EEPROM Emulated
  * @retval None
  */
void initEEPROMEmulated(void){
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	46c6      	mov	lr, r8
 80024f8:	b500      	push	{lr}
 80024fa:	4cea      	ldr	r4, [pc, #936]	@ (80028a4 <initEEPROMEmulated+0x3b0>)
 80024fc:	44a5      	add	sp, r4
 80024fe:	af00      	add	r7, sp, #0
	uint8_t * varInit = (uint8_t *) Page_126;
 8002500:	4be9      	ldr	r3, [pc, #932]	@ (80028a8 <initEEPROMEmulated+0x3b4>)
 8002502:	4aea      	ldr	r2, [pc, #936]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 8002504:	2430      	movs	r4, #48	@ 0x30
 8002506:	1912      	adds	r2, r2, r4
 8002508:	2108      	movs	r1, #8
 800250a:	468c      	mov	ip, r1
 800250c:	44bc      	add	ip, r7
 800250e:	4462      	add	r2, ip
 8002510:	6013      	str	r3, [r2, #0]
	uint8_t size_ = sizeEEPROM_P;
 8002512:	4be7      	ldr	r3, [pc, #924]	@ (80028b0 <initEEPROMEmulated+0x3bc>)
 8002514:	191b      	adds	r3, r3, r4
 8002516:	2208      	movs	r2, #8
 8002518:	18ba      	adds	r2, r7, r2
 800251a:	189a      	adds	r2, r3, r2
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	7013      	strb	r3, [r2, #0]
	uint64_t * pointArray_;
	_Bool flagVar_ = 1;
 8002520:	49e4      	ldr	r1, [pc, #912]	@ (80028b4 <initEEPROMEmulated+0x3c0>)
 8002522:	190b      	adds	r3, r1, r4
 8002524:	2208      	movs	r2, #8
 8002526:	18ba      	adds	r2, r7, r2
 8002528:	189a      	adds	r2, r3, r2
 800252a:	2301      	movs	r3, #1
 800252c:	7013      	strb	r3, [r2, #0]
	uint8_t Page_ = 126;
 800252e:	4be2      	ldr	r3, [pc, #904]	@ (80028b8 <initEEPROMEmulated+0x3c4>)
 8002530:	191b      	adds	r3, r3, r4
 8002532:	2208      	movs	r2, #8
 8002534:	18ba      	adds	r2, r7, r2
 8002536:	189a      	adds	r2, r3, r2
 8002538:	237e      	movs	r3, #126	@ 0x7e
 800253a:	7013      	strb	r3, [r2, #0]

	// Init eePlantilla
initEEPROM_P:
	uint32_t * Flag_EEPROM = ((uint32_t *) Page_126)+1 ; //
 800253c:	4bdf      	ldr	r3, [pc, #892]	@ (80028bc <initEEPROMEmulated+0x3c8>)
 800253e:	4ae0      	ldr	r2, [pc, #896]	@ (80028c0 <initEEPROMEmulated+0x3cc>)
 8002540:	1910      	adds	r0, r2, r4
 8002542:	2508      	movs	r5, #8
 8002544:	46ac      	mov	ip, r5
 8002546:	44bc      	add	ip, r7
 8002548:	4460      	add	r0, ip
 800254a:	6003      	str	r3, [r0, #0]
	if(*Flag_EEPROM == (uint32_t) Page_126){	// Verify Format Flash is correct
 800254c:	1913      	adds	r3, r2, r4
 800254e:	2208      	movs	r2, #8
 8002550:	4694      	mov	ip, r2
 8002552:	44bc      	add	ip, r7
 8002554:	4463      	add	r3, ip
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4bd3      	ldr	r3, [pc, #844]	@ (80028a8 <initEEPROMEmulated+0x3b4>)
 800255c:	429a      	cmp	r2, r3
 800255e:	d025      	beq.n	80025ac <initEEPROMEmulated+0xb8>
		goto initEEPROM_V;
	}
	flagVar_ = 0;
 8002560:	190b      	adds	r3, r1, r4
 8002562:	2208      	movs	r2, #8
 8002564:	18ba      	adds	r2, r7, r2
 8002566:	189a      	adds	r2, r3, r2
 8002568:	2300      	movs	r3, #0
 800256a:	7013      	strb	r3, [r2, #0]
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 800256c:	4bd5      	ldr	r3, [pc, #852]	@ (80028c4 <initEEPROMEmulated+0x3d0>)
 800256e:	2295      	movs	r2, #149	@ 0x95
 8002570:	00d2      	lsls	r2, r2, #3
 8002572:	189b      	adds	r3, r3, r2
 8002574:	2230      	movs	r2, #48	@ 0x30
 8002576:	4694      	mov	ip, r2
 8002578:	2208      	movs	r2, #8
 800257a:	4690      	mov	r8, r2
 800257c:	44b8      	add	r8, r7
 800257e:	44c4      	add	ip, r8
 8002580:	4463      	add	r3, ip
 8002582:	0018      	movs	r0, r3
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	001a      	movs	r2, r3
 800258a:	2100      	movs	r1, #0
 800258c:	f018 fbea 	bl	801ad64 <memset>
	pointArray_ = arrayDataP_;
 8002590:	2390      	movs	r3, #144	@ 0x90
 8002592:	191b      	adds	r3, r3, r4
 8002594:	2208      	movs	r2, #8
 8002596:	4694      	mov	ip, r2
 8002598:	44bc      	add	ip, r7
 800259a:	4463      	add	r3, ip
 800259c:	4aca      	ldr	r2, [pc, #808]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800259e:	1912      	adds	r2, r2, r4
 80025a0:	2108      	movs	r1, #8
 80025a2:	468c      	mov	ip, r1
 80025a4:	44bc      	add	ip, r7
 80025a6:	4462      	add	r2, ip
 80025a8:	6013      	str	r3, [r2, #0]
	goto newFormatFlash;
 80025aa:	e045      	b.n	8002638 <initEEPROMEmulated+0x144>
		goto initEEPROM_V;
 80025ac:	46c0      	nop			@ (mov r8, r8)

	// Init eeVariables
initEEPROM_V:
	Flag_EEPROM = ((uint32_t *) Page_127)+1 ;
 80025ae:	4bc7      	ldr	r3, [pc, #796]	@ (80028cc <initEEPROMEmulated+0x3d8>)
 80025b0:	4ac3      	ldr	r2, [pc, #780]	@ (80028c0 <initEEPROMEmulated+0x3cc>)
 80025b2:	2430      	movs	r4, #48	@ 0x30
 80025b4:	1911      	adds	r1, r2, r4
 80025b6:	2008      	movs	r0, #8
 80025b8:	4684      	mov	ip, r0
 80025ba:	44bc      	add	ip, r7
 80025bc:	4461      	add	r1, ip
 80025be:	600b      	str	r3, [r1, #0]
	if(*Flag_EEPROM == (uint32_t) Page_127){ // Verify Format Flash is correct
 80025c0:	1913      	adds	r3, r2, r4
 80025c2:	2208      	movs	r2, #8
 80025c4:	4694      	mov	ip, r2
 80025c6:	44bc      	add	ip, r7
 80025c8:	4463      	add	r3, ip
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4bc0      	ldr	r3, [pc, #768]	@ (80028d0 <initEEPROMEmulated+0x3dc>)
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d100      	bne.n	80025d6 <initEEPROMEmulated+0xe2>
 80025d4:	e15d      	b.n	8002892 <initEEPROMEmulated+0x39e>
		return;
	}
	varInit = (uint8_t *) Page_127;
 80025d6:	4bbe      	ldr	r3, [pc, #760]	@ (80028d0 <initEEPROMEmulated+0x3dc>)
 80025d8:	4ab4      	ldr	r2, [pc, #720]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 80025da:	1912      	adds	r2, r2, r4
 80025dc:	2108      	movs	r1, #8
 80025de:	468c      	mov	ip, r1
 80025e0:	44bc      	add	ip, r7
 80025e2:	4462      	add	r2, ip
 80025e4:	6013      	str	r3, [r2, #0]
	uint64_t arrayDataV[sizeEEPROM_V] = {0};
 80025e6:	4bbb      	ldr	r3, [pc, #748]	@ (80028d4 <initEEPROMEmulated+0x3e0>)
 80025e8:	2295      	movs	r2, #149	@ 0x95
 80025ea:	00d2      	lsls	r2, r2, #3
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	2230      	movs	r2, #48	@ 0x30
 80025f0:	4694      	mov	ip, r2
 80025f2:	2208      	movs	r2, #8
 80025f4:	4690      	mov	r8, r2
 80025f6:	44b8      	add	r8, r7
 80025f8:	44c4      	add	ip, r8
 80025fa:	4463      	add	r3, ip
 80025fc:	0018      	movs	r0, r3
 80025fe:	2390      	movs	r3, #144	@ 0x90
 8002600:	001a      	movs	r2, r3
 8002602:	2100      	movs	r1, #0
 8002604:	f018 fbae 	bl	801ad64 <memset>
	size_ = sizeEEPROM_V;
 8002608:	4ba9      	ldr	r3, [pc, #676]	@ (80028b0 <initEEPROMEmulated+0x3bc>)
 800260a:	191b      	adds	r3, r3, r4
 800260c:	2208      	movs	r2, #8
 800260e:	18ba      	adds	r2, r7, r2
 8002610:	189a      	adds	r2, r3, r2
 8002612:	2312      	movs	r3, #18
 8002614:	7013      	strb	r3, [r2, #0]
	pointArray_ = arrayDataV;
 8002616:	2308      	movs	r3, #8
 8002618:	18e3      	adds	r3, r4, r3
 800261a:	19db      	adds	r3, r3, r7
 800261c:	4aaa      	ldr	r2, [pc, #680]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800261e:	1912      	adds	r2, r2, r4
 8002620:	2108      	movs	r1, #8
 8002622:	468c      	mov	ip, r1
 8002624:	44bc      	add	ip, r7
 8002626:	4462      	add	r2, ip
 8002628:	6013      	str	r3, [r2, #0]
	Page_ = 127;
 800262a:	4ba3      	ldr	r3, [pc, #652]	@ (80028b8 <initEEPROMEmulated+0x3c4>)
 800262c:	191b      	adds	r3, r3, r4
 800262e:	2208      	movs	r2, #8
 8002630:	18ba      	adds	r2, r7, r2
 8002632:	189a      	adds	r2, r3, r2
 8002634:	237f      	movs	r3, #127	@ 0x7f
 8002636:	7013      	strb	r3, [r2, #0]

newFormatFlash:
	// Get data
	for(uint8_t i =0; i<size_; i++){
 8002638:	4ba7      	ldr	r3, [pc, #668]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 800263a:	2230      	movs	r2, #48	@ 0x30
 800263c:	189b      	adds	r3, r3, r2
 800263e:	2208      	movs	r2, #8
 8002640:	18ba      	adds	r2, r7, r2
 8002642:	189a      	adds	r2, r3, r2
 8002644:	2300      	movs	r3, #0
 8002646:	7013      	strb	r3, [r2, #0]
 8002648:	e0d9      	b.n	80027fe <initEEPROMEmulated+0x30a>
		pointArray_[i]  = (uint64_t) (*varInit);
 800264a:	4e98      	ldr	r6, [pc, #608]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 800264c:	2230      	movs	r2, #48	@ 0x30
 800264e:	18b3      	adds	r3, r6, r2
 8002650:	2108      	movs	r1, #8
 8002652:	468c      	mov	ip, r1
 8002654:	44bc      	add	ip, r7
 8002656:	4463      	add	r3, ip
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	7819      	ldrb	r1, [r3, #0]
 800265c:	489e      	ldr	r0, [pc, #632]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 800265e:	0014      	movs	r4, r2
 8002660:	1883      	adds	r3, r0, r2
 8002662:	2208      	movs	r2, #8
 8002664:	4694      	mov	ip, r2
 8002666:	44bc      	add	ip, r7
 8002668:	4463      	add	r3, ip
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	00da      	lsls	r2, r3, #3
 800266e:	4b96      	ldr	r3, [pc, #600]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 8002670:	191b      	adds	r3, r3, r4
 8002672:	2508      	movs	r5, #8
 8002674:	46ac      	mov	ip, r5
 8002676:	44bc      	add	ip, r7
 8002678:	4463      	add	r3, ip
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	189b      	adds	r3, r3, r2
 800267e:	6239      	str	r1, [r7, #32]
 8002680:	2200      	movs	r2, #0
 8002682:	627a      	str	r2, [r7, #36]	@ 0x24
 8002684:	6a39      	ldr	r1, [r7, #32]
 8002686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
		pointArray_[i] |= ((uint64_t )(varInit) << 32);
 800268c:	1903      	adds	r3, r0, r4
 800268e:	2208      	movs	r2, #8
 8002690:	4694      	mov	ip, r2
 8002692:	44bc      	add	ip, r7
 8002694:	4463      	add	r3, ip
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	498b      	ldr	r1, [pc, #556]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800269c:	190b      	adds	r3, r1, r4
 800269e:	2108      	movs	r1, #8
 80026a0:	1879      	adds	r1, r7, r1
 80026a2:	1859      	adds	r1, r3, r1
 80026a4:	680b      	ldr	r3, [r1, #0]
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	1933      	adds	r3, r6, r4
 80026ae:	2208      	movs	r2, #8
 80026b0:	18ba      	adds	r2, r7, r2
 80026b2:	189a      	adds	r2, r3, r2
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	17db      	asrs	r3, r3, #31
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	0012      	movs	r2, r2
 80026c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c6:	4b84      	ldr	r3, [pc, #528]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 80026c8:	191b      	adds	r3, r3, r4
 80026ca:	2208      	movs	r2, #8
 80026cc:	4694      	mov	ip, r2
 80026ce:	44bc      	add	ip, r7
 80026d0:	4463      	add	r3, ip
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00da      	lsls	r2, r3, #3
 80026d6:	4b7c      	ldr	r3, [pc, #496]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 80026d8:	191b      	adds	r3, r3, r4
 80026da:	2508      	movs	r5, #8
 80026dc:	46ac      	mov	ip, r5
 80026de:	44bc      	add	ip, r7
 80026e0:	4463      	add	r3, ip
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	189b      	adds	r3, r3, r2
 80026e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026e8:	4302      	orrs	r2, r0
 80026ea:	613a      	str	r2, [r7, #16]
 80026ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ee:	430a      	orrs	r2, r1
 80026f0:	617a      	str	r2, [r7, #20]
 80026f2:	6939      	ldr	r1, [r7, #16]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6019      	str	r1, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA)) && flagVar_){
 80026fa:	0021      	movs	r1, r4
 80026fc:	1873      	adds	r3, r6, r1
 80026fe:	2208      	movs	r2, #8
 8002700:	18ba      	adds	r2, r7, r2
 8002702:	189a      	adds	r2, r3, r2
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	4b75      	ldr	r3, [pc, #468]	@ (80028dc <initEEPROMEmulated+0x3e8>)
 8002708:	429a      	cmp	r2, r3
 800270a:	d35b      	bcc.n	80027c4 <initEEPROMEmulated+0x2d0>
 800270c:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <initEEPROMEmulated+0x3c0>)
 800270e:	1853      	adds	r3, r2, r1
 8002710:	2208      	movs	r2, #8
 8002712:	4694      	mov	ip, r2
 8002714:	44bc      	add	ip, r7
 8002716:	4463      	add	r3, ip
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d052      	beq.n	80027c4 <initEEPROMEmulated+0x2d0>
			varInit++;
 800271e:	1873      	adds	r3, r6, r1
 8002720:	2208      	movs	r2, #8
 8002722:	18ba      	adds	r2, r7, r2
 8002724:	189a      	adds	r2, r3, r2
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	1872      	adds	r2, r6, r1
 800272c:	2008      	movs	r0, #8
 800272e:	4684      	mov	ip, r0
 8002730:	44bc      	add	ip, r7
 8002732:	4462      	add	r2, ip
 8002734:	6013      	str	r3, [r2, #0]
			pointArray_[i]  |= ((uint64_t) (*varInit))<<8;
 8002736:	4b68      	ldr	r3, [pc, #416]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 8002738:	0008      	movs	r0, r1
 800273a:	185b      	adds	r3, r3, r1
 800273c:	2208      	movs	r2, #8
 800273e:	4694      	mov	ip, r2
 8002740:	44bc      	add	ip, r7
 8002742:	4463      	add	r3, ip
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	00da      	lsls	r2, r3, #3
 8002748:	495f      	ldr	r1, [pc, #380]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800274a:	0004      	movs	r4, r0
 800274c:	1809      	adds	r1, r1, r0
 800274e:	2308      	movs	r3, #8
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	18c8      	adds	r0, r1, r3
 8002754:	6803      	ldr	r3, [r0, #0]
 8002756:	189b      	adds	r3, r3, r2
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	0023      	movs	r3, r4
 800275e:	001c      	movs	r4, r3
 8002760:	18f2      	adds	r2, r6, r3
 8002762:	2308      	movs	r3, #8
 8002764:	469c      	mov	ip, r3
 8002766:	44bc      	add	ip, r7
 8002768:	4462      	add	r2, ip
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
 8002774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002776:	0e13      	lsrs	r3, r2, #24
 8002778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800277a:	0212      	lsls	r2, r2, #8
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002786:	0213      	lsls	r3, r2, #8
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4b53      	ldr	r3, [pc, #332]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 800278c:	0026      	movs	r6, r4
 800278e:	199b      	adds	r3, r3, r6
 8002790:	2208      	movs	r2, #8
 8002792:	4694      	mov	ip, r2
 8002794:	44bc      	add	ip, r7
 8002796:	4463      	add	r3, ip
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	00da      	lsls	r2, r3, #3
 800279c:	4b4a      	ldr	r3, [pc, #296]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 800279e:	199b      	adds	r3, r3, r6
 80027a0:	2408      	movs	r4, #8
 80027a2:	46a4      	mov	ip, r4
 80027a4:	44bc      	add	ip, r7
 80027a6:	4463      	add	r3, ip
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	0002      	movs	r2, r0
 80027ae:	683c      	ldr	r4, [r7, #0]
 80027b0:	4322      	orrs	r2, r4
 80027b2:	60ba      	str	r2, [r7, #8]
 80027b4:	000a      	movs	r2, r1
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	6019      	str	r1, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
		}
		varInit++;
 80027c4:	4a39      	ldr	r2, [pc, #228]	@ (80028ac <initEEPROMEmulated+0x3b8>)
 80027c6:	2130      	movs	r1, #48	@ 0x30
 80027c8:	1853      	adds	r3, r2, r1
 80027ca:	2008      	movs	r0, #8
 80027cc:	4684      	mov	ip, r0
 80027ce:	44bc      	add	ip, r7
 80027d0:	4463      	add	r3, ip
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	1852      	adds	r2, r2, r1
 80027d8:	2008      	movs	r0, #8
 80027da:	4684      	mov	ip, r0
 80027dc:	44bc      	add	ip, r7
 80027de:	4462      	add	r2, ip
 80027e0:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<size_; i++){
 80027e2:	4a3d      	ldr	r2, [pc, #244]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 80027e4:	1853      	adds	r3, r2, r1
 80027e6:	2008      	movs	r0, #8
 80027e8:	4684      	mov	ip, r0
 80027ea:	44bc      	add	ip, r7
 80027ec:	4463      	add	r3, ip
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	1852      	adds	r2, r2, r1
 80027f2:	2108      	movs	r1, #8
 80027f4:	468c      	mov	ip, r1
 80027f6:	44bc      	add	ip, r7
 80027f8:	4462      	add	r2, ip
 80027fa:	3301      	adds	r3, #1
 80027fc:	7013      	strb	r3, [r2, #0]
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <initEEPROMEmulated+0x3e4>)
 8002800:	2130      	movs	r1, #48	@ 0x30
 8002802:	185b      	adds	r3, r3, r1
 8002804:	2208      	movs	r2, #8
 8002806:	18ba      	adds	r2, r7, r2
 8002808:	189a      	adds	r2, r3, r2
 800280a:	4e29      	ldr	r6, [pc, #164]	@ (80028b0 <initEEPROMEmulated+0x3bc>)
 800280c:	1873      	adds	r3, r6, r1
 800280e:	2008      	movs	r0, #8
 8002810:	4684      	mov	ip, r0
 8002812:	44bc      	add	ip, r7
 8002814:	4463      	add	r3, ip
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d200      	bcs.n	8002820 <initEEPROMEmulated+0x32c>
 800281e:	e714      	b.n	800264a <initEEPROMEmulated+0x156>
	}
	erasePage(Page_);
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <initEEPROMEmulated+0x3c4>)
 8002822:	000c      	movs	r4, r1
 8002824:	185b      	adds	r3, r3, r1
 8002826:	2208      	movs	r2, #8
 8002828:	4694      	mov	ip, r2
 800282a:	44bc      	add	ip, r7
 800282c:	4463      	add	r3, ip
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	0018      	movs	r0, r3
 8002832:	f7ff fdfb 	bl	800242c <erasePage>
	writeFLASH((uint64_t *) (Flag_EEPROM-1),pointArray_,size_);
 8002836:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <initEEPROMEmulated+0x3cc>)
 8002838:	0022      	movs	r2, r4
 800283a:	189b      	adds	r3, r3, r2
 800283c:	2108      	movs	r1, #8
 800283e:	468c      	mov	ip, r1
 8002840:	44bc      	add	ip, r7
 8002842:	4463      	add	r3, ip
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1f18      	subs	r0, r3, #4
 8002848:	0014      	movs	r4, r2
 800284a:	1933      	adds	r3, r6, r4
 800284c:	2208      	movs	r2, #8
 800284e:	4694      	mov	ip, r2
 8002850:	44bc      	add	ip, r7
 8002852:	4463      	add	r3, ip
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <initEEPROMEmulated+0x3d4>)
 8002858:	191b      	adds	r3, r3, r4
 800285a:	2108      	movs	r1, #8
 800285c:	468c      	mov	ip, r1
 800285e:	44bc      	add	ip, r7
 8002860:	4463      	add	r3, ip
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0019      	movs	r1, r3
 8002866:	f7ff fe0f 	bl	8002488 <writeFLASH>
	if(!flagVar_){
 800286a:	4912      	ldr	r1, [pc, #72]	@ (80028b4 <initEEPROMEmulated+0x3c0>)
 800286c:	0020      	movs	r0, r4
 800286e:	180b      	adds	r3, r1, r0
 8002870:	2208      	movs	r2, #8
 8002872:	4694      	mov	ip, r2
 8002874:	44bc      	add	ip, r7
 8002876:	4463      	add	r3, ip
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	4053      	eors	r3, r2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <initEEPROMEmulated+0x3a0>
		flagVar_ = 1;
 8002884:	180b      	adds	r3, r1, r0
 8002886:	2208      	movs	r2, #8
 8002888:	18ba      	adds	r2, r7, r2
 800288a:	189a      	adds	r2, r3, r2
 800288c:	2301      	movs	r3, #1
 800288e:	7013      	strb	r3, [r2, #0]
		goto initEEPROM_V;
 8002890:	e68d      	b.n	80025ae <initEEPROMEmulated+0xba>
		return;
 8002892:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002894:	46bd      	mov	sp, r7
 8002896:	239c      	movs	r3, #156	@ 0x9c
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	449d      	add	sp, r3
 800289c:	bc80      	pop	{r7}
 800289e:	46b8      	mov	r8, r7
 80028a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	fffffb20 	.word	0xfffffb20
 80028a8:	0803f000 	.word	0x0803f000
 80028ac:	000004a4 	.word	0x000004a4
 80028b0:	000004a3 	.word	0x000004a3
 80028b4:	0000049b 	.word	0x0000049b
 80028b8:	0000049a 	.word	0x0000049a
 80028bc:	0803f004 	.word	0x0803f004
 80028c0:	00000494 	.word	0x00000494
 80028c4:	fffffbe8 	.word	0xfffffbe8
 80028c8:	0000049c 	.word	0x0000049c
 80028cc:	0803f804 	.word	0x0803f804
 80028d0:	0803f800 	.word	0x0803f800
 80028d4:	fffffb58 	.word	0xfffffb58
 80028d8:	00000493 	.word	0x00000493
 80028dc:	0803f810 	.word	0x0803f810

080028e0 <restartFlashMemory>:
/**
  * @brief  Restart Flash Memory
  * @param
  * @retval
  */
void restartFlashMemory(void){
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	4cc2      	ldr	r4, [pc, #776]	@ (8002bec <restartFlashMemory+0x30c>)
 80028e4:	44a5      	add	sp, r4
 80028e6:	af00      	add	r7, sp, #0
	uint64_t arrayDataP_[sizeEEPROM_P] = {0};
 80028e8:	4bc1      	ldr	r3, [pc, #772]	@ (8002bf0 <restartFlashMemory+0x310>)
 80028ea:	2693      	movs	r6, #147	@ 0x93
 80028ec:	00f6      	lsls	r6, r6, #3
 80028ee:	199b      	adds	r3, r3, r6
 80028f0:	2258      	movs	r2, #88	@ 0x58
 80028f2:	4694      	mov	ip, r2
 80028f4:	44bc      	add	ip, r7
 80028f6:	4463      	add	r3, ip
 80028f8:	0018      	movs	r0, r3
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	001a      	movs	r2, r3
 8002900:	2100      	movs	r1, #0
 8002902:	f018 fa2f 	bl	801ad64 <memset>
	uint64_t arrayDataV_[sizeEEPROM_V] = {0};
 8002906:	4bbb      	ldr	r3, [pc, #748]	@ (8002bf4 <restartFlashMemory+0x314>)
 8002908:	199b      	adds	r3, r3, r6
 800290a:	2258      	movs	r2, #88	@ 0x58
 800290c:	4694      	mov	ip, r2
 800290e:	44bc      	add	ip, r7
 8002910:	4463      	add	r3, ip
 8002912:	0018      	movs	r0, r3
 8002914:	2390      	movs	r3, #144	@ 0x90
 8002916:	001a      	movs	r2, r3
 8002918:	2100      	movs	r1, #0
 800291a:	f018 fa23 	bl	801ad64 <memset>

	uint8_t * varInit = (uint8_t *) Page_126;
 800291e:	4bb6      	ldr	r3, [pc, #728]	@ (8002bf8 <restartFlashMemory+0x318>)
 8002920:	4ab6      	ldr	r2, [pc, #728]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002922:	2158      	movs	r1, #88	@ 0x58
 8002924:	1852      	adds	r2, r2, r1
 8002926:	19d2      	adds	r2, r2, r7
 8002928:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 800292a:	4bb5      	ldr	r3, [pc, #724]	@ (8002c00 <restartFlashMemory+0x320>)
 800292c:	2258      	movs	r2, #88	@ 0x58
 800292e:	189b      	adds	r3, r3, r2
 8002930:	19da      	adds	r2, r3, r7
 8002932:	2300      	movs	r3, #0
 8002934:	7013      	strb	r3, [r2, #0]
 8002936:	e030      	b.n	800299a <restartFlashMemory+0xba>
		arrayDataP_[i] = ((uint64_t )(varInit) << 32);
 8002938:	48b0      	ldr	r0, [pc, #704]	@ (8002bfc <restartFlashMemory+0x31c>)
 800293a:	2358      	movs	r3, #88	@ 0x58
 800293c:	18c3      	adds	r3, r0, r3
 800293e:	19db      	adds	r3, r3, r7
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	653b      	str	r3, [r7, #80]	@ 0x50
 8002944:	17db      	asrs	r3, r3, #31
 8002946:	657b      	str	r3, [r7, #84]	@ 0x54
 8002948:	4ead      	ldr	r6, [pc, #692]	@ (8002c00 <restartFlashMemory+0x320>)
 800294a:	2358      	movs	r3, #88	@ 0x58
 800294c:	18f3      	adds	r3, r6, r3
 800294e:	19db      	adds	r3, r3, r7
 8002950:	7819      	ldrb	r1, [r3, #0]
 8002952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002954:	001b      	movs	r3, r3
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002958:	2300      	movs	r3, #0
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800295c:	4ba4      	ldr	r3, [pc, #656]	@ (8002bf0 <restartFlashMemory+0x310>)
 800295e:	2293      	movs	r2, #147	@ 0x93
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	189b      	adds	r3, r3, r2
 8002964:	2258      	movs	r2, #88	@ 0x58
 8002966:	18ba      	adds	r2, r7, r2
 8002968:	189a      	adds	r2, r3, r2
 800296a:	00cb      	lsls	r3, r1, #3
 800296c:	18d3      	adds	r3, r2, r3
 800296e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002972:	6019      	str	r1, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
		varInit ++;
 8002976:	2358      	movs	r3, #88	@ 0x58
 8002978:	18c3      	adds	r3, r0, r3
 800297a:	19db      	adds	r3, r3, r7
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	2258      	movs	r2, #88	@ 0x58
 8002982:	1882      	adds	r2, r0, r2
 8002984:	19d2      	adds	r2, r2, r7
 8002986:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_P; i++){
 8002988:	2358      	movs	r3, #88	@ 0x58
 800298a:	18f3      	adds	r3, r6, r3
 800298c:	19db      	adds	r3, r3, r7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2258      	movs	r2, #88	@ 0x58
 8002992:	18b2      	adds	r2, r6, r2
 8002994:	19d2      	adds	r2, r2, r7
 8002996:	3301      	adds	r3, #1
 8002998:	7013      	strb	r3, [r2, #0]
 800299a:	4b99      	ldr	r3, [pc, #612]	@ (8002c00 <restartFlashMemory+0x320>)
 800299c:	2258      	movs	r2, #88	@ 0x58
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	19db      	adds	r3, r3, r7
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	dac6      	bge.n	8002938 <restartFlashMemory+0x58>
	}

	arrayDataP_[eedato_seg1] |= 0xAA;
 80029aa:	4b91      	ldr	r3, [pc, #580]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029ac:	2093      	movs	r0, #147	@ 0x93
 80029ae:	00c0      	lsls	r0, r0, #3
 80029b0:	181b      	adds	r3, r3, r0
 80029b2:	2258      	movs	r2, #88	@ 0x58
 80029b4:	4694      	mov	ip, r2
 80029b6:	44bc      	add	ip, r7
 80029b8:	4463      	add	r3, ip
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	21aa      	movs	r1, #170	@ 0xaa
 80029c0:	4311      	orrs	r1, r2
 80029c2:	000c      	movs	r4, r1
 80029c4:	2100      	movs	r1, #0
 80029c6:	4319      	orrs	r1, r3
 80029c8:	000d      	movs	r5, r1
 80029ca:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029cc:	181b      	adds	r3, r3, r0
 80029ce:	2258      	movs	r2, #88	@ 0x58
 80029d0:	4694      	mov	ip, r2
 80029d2:	44bc      	add	ip, r7
 80029d4:	4463      	add	r3, ip
 80029d6:	601c      	str	r4, [r3, #0]
 80029d8:	605d      	str	r5, [r3, #4]
	arrayDataP_[eedato_seg2] |= 0x66;
 80029da:	4b85      	ldr	r3, [pc, #532]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029dc:	0005      	movs	r5, r0
 80029de:	181b      	adds	r3, r3, r0
 80029e0:	2258      	movs	r2, #88	@ 0x58
 80029e2:	18ba      	adds	r2, r7, r2
 80029e4:	189a      	adds	r2, r3, r2
 80029e6:	2382      	movs	r3, #130	@ 0x82
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	18d3      	adds	r3, r2, r3
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2166      	movs	r1, #102	@ 0x66
 80029f2:	4311      	orrs	r1, r2
 80029f4:	6439      	str	r1, [r7, #64]	@ 0x40
 80029f6:	2100      	movs	r1, #0
 80029f8:	4319      	orrs	r1, r3
 80029fa:	6479      	str	r1, [r7, #68]	@ 0x44
 80029fc:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf0 <restartFlashMemory+0x310>)
 80029fe:	195b      	adds	r3, r3, r5
 8002a00:	2258      	movs	r2, #88	@ 0x58
 8002a02:	18ba      	adds	r2, r7, r2
 8002a04:	189a      	adds	r2, r3, r2
 8002a06:	2382      	movs	r3, #130	@ 0x82
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	18d3      	adds	r3, r2, r3
 8002a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a10:	6019      	str	r1, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
	arrayDataP_[eedato_seg3] |= 0xCC;
 8002a14:	4b76      	ldr	r3, [pc, #472]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a16:	195b      	adds	r3, r3, r5
 8002a18:	2258      	movs	r2, #88	@ 0x58
 8002a1a:	18ba      	adds	r2, r7, r2
 8002a1c:	189a      	adds	r2, r3, r2
 8002a1e:	23fe      	movs	r3, #254	@ 0xfe
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	18d3      	adds	r3, r2, r3
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	21cc      	movs	r1, #204	@ 0xcc
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4319      	orrs	r1, r3
 8002a32:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002a34:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a36:	195b      	adds	r3, r3, r5
 8002a38:	2258      	movs	r2, #88	@ 0x58
 8002a3a:	18ba      	adds	r2, r7, r2
 8002a3c:	189a      	adds	r2, r3, r2
 8002a3e:	23fe      	movs	r3, #254	@ 0xfe
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	18d3      	adds	r3, r2, r3
 8002a44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a48:	6019      	str	r1, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion1] |= (uint32_t) versionFirm1;
 8002a4c:	4b68      	ldr	r3, [pc, #416]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a4e:	195b      	adds	r3, r3, r5
 8002a50:	2258      	movs	r2, #88	@ 0x58
 8002a52:	18ba      	adds	r2, r7, r2
 8002a54:	189a      	adds	r2, r3, r2
 8002a56:	23f6      	movs	r3, #246	@ 0xf6
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	18d3      	adds	r3, r2, r3
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <restartFlashMemory+0x324>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a66:	2300      	movs	r3, #0
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002a6e:	001a      	movs	r2, r3
 8002a70:	4302      	orrs	r2, r0
 8002a72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a74:	0023      	movs	r3, r4
 8002a76:	430b      	orrs	r3, r1
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a7c:	002c      	movs	r4, r5
 8002a7e:	191b      	adds	r3, r3, r4
 8002a80:	2258      	movs	r2, #88	@ 0x58
 8002a82:	18ba      	adds	r2, r7, r2
 8002a84:	189a      	adds	r2, r3, r2
 8002a86:	23f6      	movs	r3, #246	@ 0xf6
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	18d3      	adds	r3, r2, r3
 8002a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a90:	6019      	str	r1, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
	arrayDataP_[eeversion2] |= (uint32_t) versionFirm2;
 8002a94:	4b56      	ldr	r3, [pc, #344]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002a96:	191b      	adds	r3, r3, r4
 8002a98:	2258      	movs	r2, #88	@ 0x58
 8002a9a:	18ba      	adds	r2, r7, r2
 8002a9c:	189a      	adds	r2, r3, r2
 8002a9e:	23f8      	movs	r3, #248	@ 0xf8
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4957      	ldr	r1, [pc, #348]	@ (8002c08 <restartFlashMemory+0x328>)
 8002aaa:	7809      	ldrb	r1, [r1, #0]
 8002aac:	6239      	str	r1, [r7, #32]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ab2:	6a38      	ldr	r0, [r7, #32]
 8002ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ab6:	0005      	movs	r5, r0
 8002ab8:	4315      	orrs	r5, r2
 8002aba:	61bd      	str	r5, [r7, #24]
 8002abc:	4319      	orrs	r1, r3
 8002abe:	61f9      	str	r1, [r7, #28]
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf0 <restartFlashMemory+0x310>)
 8002ac2:	191b      	adds	r3, r3, r4
 8002ac4:	2258      	movs	r2, #88	@ 0x58
 8002ac6:	18ba      	adds	r2, r7, r2
 8002ac8:	189a      	adds	r2, r3, r2
 8002aca:	23f8      	movs	r3, #248	@ 0xf8
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	18d3      	adds	r3, r2, r3
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	6019      	str	r1, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]

	varInit = (uint8_t *) Page_127;
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8002c0c <restartFlashMemory+0x32c>)
 8002ada:	4a48      	ldr	r2, [pc, #288]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002adc:	2158      	movs	r1, #88	@ 0x58
 8002ade:	1852      	adds	r2, r2, r1
 8002ae0:	19d2      	adds	r2, r2, r7
 8002ae2:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <restartFlashMemory+0x330>)
 8002ae6:	2258      	movs	r2, #88	@ 0x58
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	19db      	adds	r3, r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e05a      	b.n	8002ba8 <restartFlashMemory+0x2c8>
		arrayDataV_[i] |= ((uint64_t )(varInit) << 32);
 8002af2:	4c47      	ldr	r4, [pc, #284]	@ (8002c10 <restartFlashMemory+0x330>)
 8002af4:	2358      	movs	r3, #88	@ 0x58
 8002af6:	18e3      	adds	r3, r4, r3
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4a3d      	ldr	r2, [pc, #244]	@ (8002bf4 <restartFlashMemory+0x314>)
 8002afe:	2693      	movs	r6, #147	@ 0x93
 8002b00:	00f6      	lsls	r6, r6, #3
 8002b02:	1992      	adds	r2, r2, r6
 8002b04:	2158      	movs	r1, #88	@ 0x58
 8002b06:	468c      	mov	ip, r1
 8002b08:	44bc      	add	ip, r7
 8002b0a:	4462      	add	r2, ip
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	18d3      	adds	r3, r2, r3
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4839      	ldr	r0, [pc, #228]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002b16:	2158      	movs	r1, #88	@ 0x58
 8002b18:	1841      	adds	r1, r0, r1
 8002b1a:	19c9      	adds	r1, r1, r7
 8002b1c:	6809      	ldr	r1, [r1, #0]
 8002b1e:	6139      	str	r1, [r7, #16]
 8002b20:	17c9      	asrs	r1, r1, #31
 8002b22:	6179      	str	r1, [r7, #20]
 8002b24:	6939      	ldr	r1, [r7, #16]
 8002b26:	0009      	movs	r1, r1
 8002b28:	60f9      	str	r1, [r7, #12]
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	2158      	movs	r1, #88	@ 0x58
 8002b30:	1861      	adds	r1, r4, r1
 8002b32:	19c9      	adds	r1, r1, r7
 8002b34:	7809      	ldrb	r1, [r1, #0]
 8002b36:	468c      	mov	ip, r1
 8002b38:	68bc      	ldr	r4, [r7, #8]
 8002b3a:	68fd      	ldr	r5, [r7, #12]
 8002b3c:	0021      	movs	r1, r4
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	0029      	movs	r1, r5
 8002b44:	4319      	orrs	r1, r3
 8002b46:	6079      	str	r1, [r7, #4]
 8002b48:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <restartFlashMemory+0x314>)
 8002b4a:	199b      	adds	r3, r3, r6
 8002b4c:	2258      	movs	r2, #88	@ 0x58
 8002b4e:	18ba      	adds	r2, r7, r2
 8002b50:	189a      	adds	r2, r3, r2
 8002b52:	4663      	mov	r3, ip
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	18d3      	adds	r3, r2, r3
 8002b58:	6839      	ldr	r1, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6019      	str	r1, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
		if( (varInit >= ((uint8_t * ) &eeCntRegDATA))){
 8002b60:	2358      	movs	r3, #88	@ 0x58
 8002b62:	18c3      	adds	r3, r0, r3
 8002b64:	19db      	adds	r3, r3, r7
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <restartFlashMemory+0x334>)
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d308      	bcc.n	8002b80 <restartFlashMemory+0x2a0>
			varInit++;
 8002b6e:	2358      	movs	r3, #88	@ 0x58
 8002b70:	18c3      	adds	r3, r0, r3
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3301      	adds	r3, #1
 8002b78:	2258      	movs	r2, #88	@ 0x58
 8002b7a:	1882      	adds	r2, r0, r2
 8002b7c:	19d2      	adds	r2, r2, r7
 8002b7e:	6013      	str	r3, [r2, #0]
		}
		varInit++;
 8002b80:	4a1e      	ldr	r2, [pc, #120]	@ (8002bfc <restartFlashMemory+0x31c>)
 8002b82:	2358      	movs	r3, #88	@ 0x58
 8002b84:	18d3      	adds	r3, r2, r3
 8002b86:	19db      	adds	r3, r3, r7
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	2158      	movs	r1, #88	@ 0x58
 8002b8e:	1852      	adds	r2, r2, r1
 8002b90:	19d2      	adds	r2, r2, r7
 8002b92:	6013      	str	r3, [r2, #0]
	for(uint8_t i =0; i<sizeEEPROM_V; i++){
 8002b94:	491e      	ldr	r1, [pc, #120]	@ (8002c10 <restartFlashMemory+0x330>)
 8002b96:	2358      	movs	r3, #88	@ 0x58
 8002b98:	18cb      	adds	r3, r1, r3
 8002b9a:	19db      	adds	r3, r3, r7
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	2358      	movs	r3, #88	@ 0x58
 8002ba0:	18cb      	adds	r3, r1, r3
 8002ba2:	19db      	adds	r3, r3, r7
 8002ba4:	3201      	adds	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <restartFlashMemory+0x330>)
 8002baa:	2258      	movs	r2, #88	@ 0x58
 8002bac:	189b      	adds	r3, r3, r2
 8002bae:	19db      	adds	r3, r3, r7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b11      	cmp	r3, #17
 8002bb4:	d99d      	bls.n	8002af2 <restartFlashMemory+0x212>
	}
	erasePage(126);
 8002bb6:	207e      	movs	r0, #126	@ 0x7e
 8002bb8:	f7ff fc38 	bl	800242c <erasePage>
	erasePage(127);
 8002bbc:	207f      	movs	r0, #127	@ 0x7f
 8002bbe:	f7ff fc35 	bl	800242c <erasePage>
	writeFLASH((uint64_t *) (Page_126),&arrayDataP_[0],sizeEEPROM_P);
 8002bc2:	2390      	movs	r3, #144	@ 0x90
 8002bc4:	2258      	movs	r2, #88	@ 0x58
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	19db      	adds	r3, r3, r7
 8002bca:	480b      	ldr	r0, [pc, #44]	@ (8002bf8 <restartFlashMemory+0x318>)
 8002bcc:	2280      	movs	r2, #128	@ 0x80
 8002bce:	0019      	movs	r1, r3
 8002bd0:	f7ff fc5a 	bl	8002488 <writeFLASH>
	writeFLASH((uint64_t *) (Page_127),&arrayDataV_[0],sizeEEPROM_V);
 8002bd4:	2358      	movs	r3, #88	@ 0x58
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	480c      	ldr	r0, [pc, #48]	@ (8002c0c <restartFlashMemory+0x32c>)
 8002bda:	2212      	movs	r2, #18
 8002bdc:	0019      	movs	r1, r3
 8002bde:	f7ff fc53 	bl	8002488 <writeFLASH>
}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <restartFlashMemory+0x338>)
 8002be8:	449d      	add	sp, r3
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bec:	fffffb0c 	.word	0xfffffb0c
 8002bf0:	fffffbf8 	.word	0xfffffbf8
 8002bf4:	fffffb68 	.word	0xfffffb68
 8002bf8:	0803f000 	.word	0x0803f000
 8002bfc:	00000494 	.word	0x00000494
 8002c00:	00000493 	.word	0x00000493
 8002c04:	0801e7f0 	.word	0x0801e7f0
 8002c08:	0801e7f1 	.word	0x0801e7f1
 8002c0c:	0803f800 	.word	0x0803f800
 8002c10:	00000492 	.word	0x00000492
 8002c14:	0803f810 	.word	0x0803f810
 8002c18:	000004f4 	.word	0x000004f4

08002c1c <findLastValue>:
  * @brief  Find the Last saved Value
  * @param	AddressPage_:		Address Page
  * @param	AddressValue_:		Address Variable
  * @retval Return AddressValue_'s Data
  */
uint32_t findLastValue(uint32_t AddressValue_){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	uint32_t * AddressPage_ = (uint32_t *) getAddressPage(AddressValue_);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff fbec 	bl	8002404 <getAddressPage>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	000b      	movs	r3, r1
 8002c30:	0013      	movs	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
	uint32_t *pointValuex = AddressPage_ + SizePage_32Bits -1;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <findLastValue+0x68>)
 8002c38:	4694      	mov	ip, r2
 8002c3a:	4463      	add	r3, ip
 8002c3c:	60fb      	str	r3, [r7, #12]
	if(AddressPage_ < ((uint32_t *) 0x803F000) || AddressPage_ >= ((uint32_t *) 0x8040000)){ // Invalid Direction
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4a11      	ldr	r2, [pc, #68]	@ (8002c88 <findLastValue+0x6c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d903      	bls.n	8002c4e <findLastValue+0x32>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a10      	ldr	r2, [pc, #64]	@ (8002c8c <findLastValue+0x70>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d90e      	bls.n	8002c6c <findLastValue+0x50>
		return 0xFFFFFFFF;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	425b      	negs	r3, r3
 8002c52:	e013      	b.n	8002c7c <findLastValue+0x60>
	}
	while(*pointValuex != AddressValue_){
		pointValuex -= 2;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b08      	subs	r3, #8
 8002c58:	60fb      	str	r3, [r7, #12]
		if(pointValuex < AddressPage_){
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d204      	bcs.n	8002c6c <findLastValue+0x50>
			restartFlashMemory();
 8002c62:	f7ff fe3d 	bl	80028e0 <restartFlashMemory>
			return 0xFFFFFFFF;
 8002c66:	2301      	movs	r3, #1
 8002c68:	425b      	negs	r3, r3
 8002c6a:	e007      	b.n	8002c7c <findLastValue+0x60>
	while(*pointValuex != AddressValue_){
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d1ee      	bne.n	8002c54 <findLastValue+0x38>
		}
	}
	return *(pointValuex-1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b004      	add	sp, #16
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	000007fc 	.word	0x000007fc
 8002c88:	0803efff 	.word	0x0803efff
 8002c8c:	0803ffff 	.word	0x0803ffff

08002c90 <pushAddressData>:
  * @param	managerPoint_:		Address in Flash
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void pushAddressData(uint64_t * managerPoint_,uint32_t AddressValue_,uint32_t Value_){
 8002c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c92:	b08d      	sub	sp, #52	@ 0x34
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c98:	6239      	str	r1, [r7, #32]
 8002c9a:	61fa      	str	r2, [r7, #28]
	uint64_t Data_ = 0;
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ = ((uint64_t) AddressValue_) << 32;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	001b      	movs	r3, r3
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Data_ |= ((uint64_t) Value_);
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	0006      	movs	r6, r0
 8002cd0:	4316      	orrs	r6, r2
 8002cd2:	0034      	movs	r4, r6
 8002cd4:	4319      	orrs	r1, r3
 8002cd6:	000d      	movs	r5, r1
 8002cd8:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002cda:	62fd      	str	r5, [r7, #44]	@ 0x2c
	writeFLASH(managerPoint_,&Data_,1);
 8002cdc:	2310      	movs	r3, #16
 8002cde:	2218      	movs	r2, #24
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	19d9      	adds	r1, r3, r7
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7ff fbcd 	bl	8002488 <writeFLASH>
}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b00d      	add	sp, #52	@ 0x34
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf6 <currentlyPoint>:
/**
  * @brief  Save Address and Data in Flash
  * @param	AddressPage_:		Address Page
  * @retval Return the Address then it is empty
  */
uint64_t currentlyPoint(uint64_t * AddressPage_){
 8002cf6:	b5b0      	push	{r4, r5, r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
	uint64_t * Pointx =  AddressPage_ + SizePage_64Bits -1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	22ff      	movs	r2, #255	@ 0xff
 8002d02:	00d2      	lsls	r2, r2, #3
 8002d04:	4694      	mov	ip, r2
 8002d06:	4463      	add	r3, ip
 8002d08:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8002d0a:	e002      	b.n	8002d12 <currentlyPoint+0x1c>
		Pointx --;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3b08      	subs	r3, #8
 8002d10:	60fb      	str	r3, [r7, #12]
	while(*Pointx == 0xFFFFFFFFFFFFFFFF){
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	1c51      	adds	r1, r2, #1
 8002d1a:	d101      	bne.n	8002d20 <currentlyPoint+0x2a>
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	d0f5      	beq.n	8002d0c <currentlyPoint+0x16>
	}
	Pointx++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3308      	adds	r3, #8
 8002d24:	60fb      	str	r3, [r7, #12]
	return Pointx; // Return the direction Init
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	001c      	movs	r4, r3
 8002d2a:	17db      	asrs	r3, r3, #31
 8002d2c:	001d      	movs	r5, r3
 8002d2e:	0022      	movs	r2, r4
 8002d30:	002b      	movs	r3, r5
}
 8002d32:	0010      	movs	r0, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b004      	add	sp, #16
 8002d3a:	bdb0      	pop	{r4, r5, r7, pc}

08002d3c <FlashManager>:
  * @brief  FLASH handling
  * @param	AddressValue_:		Address Variable
  * @param	Value_:				Data
  * @retval None
  */
void FlashManager(uint32_t AddressValue_, uint32_t Value_){
 8002d3c:	b5b0      	push	{r4, r5, r7, lr}
 8002d3e:	b08c      	sub	sp, #48	@ 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	_Bool flag_Page127 = 1;
 8002d46:	242f      	movs	r4, #47	@ 0x2f
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
	uint8_t size_ = sizeEEPROM_V;
 8002d4e:	252e      	movs	r5, #46	@ 0x2e
 8002d50:	197b      	adds	r3, r7, r5
 8002d52:	2212      	movs	r2, #18
 8002d54:	701a      	strb	r2, [r3, #0]
	uint64_t * AddressPage_ = (uint64_t *) getAddressPage(AddressValue_);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fb53 	bl	8002404 <getAddressPage>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	000b      	movs	r3, r1
 8002d62:	0013      	movs	r3, r2
 8002d64:	61fb      	str	r3, [r7, #28]
	if(AddressPage_ == (uint64_t *) (Page_126)){	// Is here Page 126?
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4a55      	ldr	r2, [pc, #340]	@ (8002ec0 <FlashManager+0x184>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d105      	bne.n	8002d7a <FlashManager+0x3e>
		flag_Page127 = 0;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
		size_ = sizeEEPROM_P;
 8002d74:	197b      	adds	r3, r7, r5
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	701a      	strb	r2, [r3, #0]
	}

	// Manager Characteristics
	uint64_t * managerPointInit = AddressPage_;									// Start Page
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	61bb      	str	r3, [r7, #24]
	uint64_t * managerPoint =  (uint64_t *) currentlyPoint(AddressPage_);		// Current Point
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff ffb8 	bl	8002cf6 <currentlyPoint>
 8002d86:	0002      	movs	r2, r0
 8002d88:	000b      	movs	r3, r1
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint64_t * managerPointEnd = managerPointInit + SizePage_64Bits -1;			// End Page
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	22ff      	movs	r2, #255	@ 0xff
 8002d92:	00d2      	lsls	r2, r2, #3
 8002d94:	4694      	mov	ip, r2
 8002d96:	4463      	add	r3, ip
 8002d98:	617b      	str	r3, [r7, #20]

	if((managerPoint - 1)== managerPointEnd){	// Is here the End Page?
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	3b08      	subs	r3, #8
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d000      	beq.n	8002da6 <FlashManager+0x6a>
 8002da4:	e082      	b.n	8002eac <FlashManager+0x170>
		// Find the Last Values
		uint32_t * arrayTemp = malloc(size_);
 8002da6:	232e      	movs	r3, #46	@ 0x2e
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f017 ff05 	bl	801abbc <malloc>
 8002db2:	0003      	movs	r3, r0
 8002db4:	613b      	str	r3, [r7, #16]
		uint8_t * varInit = (uint8_t *) AddressPage_;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8002dba:	2323      	movs	r3, #35	@ 0x23
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e023      	b.n	8002e0c <FlashManager+0xd0>
			arrayTemp[i] = findLastValue((uint32_t) varInit);
 8002dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc6:	2323      	movs	r3, #35	@ 0x23
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	18d4      	adds	r4, r2, r3
 8002dd2:	0008      	movs	r0, r1
 8002dd4:	f7ff ff22 	bl	8002c1c <findLastValue>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	6023      	str	r3, [r4, #0]
			varInit++;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	3301      	adds	r3, #1
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
			if( (varInit > ((uint8_t * ) &eeCntRegDATA))&flag_Page127){
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	4a37      	ldr	r2, [pc, #220]	@ (8002ec4 <FlashManager+0x188>)
 8002de6:	429a      	cmp	r2, r3
 8002de8:	419b      	sbcs	r3, r3
 8002dea:	425b      	negs	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	001a      	movs	r2, r3
 8002df0:	232f      	movs	r3, #47	@ 0x2f
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4013      	ands	r3, r2
 8002df8:	d002      	beq.n	8002e00 <FlashManager+0xc4>
				varInit++;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i=0; i<size_; i++){
 8002e00:	2123      	movs	r1, #35	@ 0x23
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	3201      	adds	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	2323      	movs	r3, #35	@ 0x23
 8002e0e:	18fa      	adds	r2, r7, r3
 8002e10:	232e      	movs	r3, #46	@ 0x2e
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d3d3      	bcc.n	8002dc4 <FlashManager+0x88>
			}
		}
		// Erase the Page
		uint32_t VarAux_= (((uint32_t) AddressPage_) - 0x8000000);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	22f8      	movs	r2, #248	@ 0xf8
 8002e20:	0612      	lsls	r2, r2, #24
 8002e22:	4694      	mov	ip, r2
 8002e24:	4463      	add	r3, ip
 8002e26:	60fb      	str	r3, [r7, #12]
		uint32_t numberPage = VarAux_/2048; 		// Number the Page
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	0adb      	lsrs	r3, r3, #11
 8002e2c:	60bb      	str	r3, [r7, #8]

		erasePage(numberPage);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fafb 	bl	800242c <erasePage>

		// Return the begin Page in current Point

		managerPoint = AddressPage_;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
		varInit =  (uint8_t *) AddressPage_;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24

		// Write the new Values and its Addresses
		for(uint8_t i=0; i<size_; i++){
 8002e3e:	2322      	movs	r3, #34	@ 0x22
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e01e      	b.n	8002e86 <FlashManager+0x14a>
			pushAddressData(managerPoint,(uint32_t)varInit,arrayTemp[i]);
 8002e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e4a:	2322      	movs	r3, #34	@ 0x22
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	18d3      	adds	r3, r2, r3
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff18 	bl	8002c90 <pushAddressData>
			varInit++;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	3301      	adds	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
			if( varInit > ((uint8_t * ) &eeCntRegDATA)){
 8002e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <FlashManager+0x188>)
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d902      	bls.n	8002e74 <FlashManager+0x138>
				varInit++;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	3301      	adds	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			managerPoint ++;
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	3308      	adds	r3, #8
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
		for(uint8_t i=0; i<size_; i++){
 8002e7a:	2122      	movs	r1, #34	@ 0x22
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	3201      	adds	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	2322      	movs	r3, #34	@ 0x22
 8002e88:	18fa      	adds	r2, r7, r3
 8002e8a:	232e      	movs	r3, #46	@ 0x2e
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3d8      	bcc.n	8002e48 <FlashManager+0x10c>
		}
		pushAddressData(managerPoint,AddressValue_,Value_);
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff fef7 	bl	8002c90 <pushAddressData>
		free(arrayTemp);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f017 fe93 	bl	801abd0 <free>
	else{

		// Write de new Values and its Addresses
		pushAddressData(managerPoint,AddressValue_,Value_);
	}
}
 8002eaa:	e005      	b.n	8002eb8 <FlashManager+0x17c>
		pushAddressData(managerPoint,AddressValue_,Value_);
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff feec 	bl	8002c90 <pushAddressData>
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b00c      	add	sp, #48	@ 0x30
 8002ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec0:	0803f000 	.word	0x0803f000
 8002ec4:	0803f810 	.word	0x0803f810

08002ec8 <MacStringtoHex>:
#include "ModbusMap.h"
#include "ModbusRTU.h"
#include "ELTEC_EmulatedEEPROM.h"

//-------------------------------------------------------
static void MacStringtoHex(){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
	int i;
	uint8_t tempregister =0;
 8002ece:	1cfb      	adds	r3, r7, #3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
	uint8_t octeto =0;
 8002ed4:	1cbb      	adds	r3, r7, #2
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
	uint16_t tempregister2 =0;
 8002eda:	003b      	movs	r3, r7
 8002edc:	2200      	movs	r2, #0
 8002ede:	801a      	strh	r2, [r3, #0]

	for (i=0; i<=11;i++){
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e0d8      	b.n	8003098 <MacStringtoHex+0x1d0>
		if (Bloque_handshake[i+2] == '0')  //if (macAdress[i] == '0')
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	4a70      	ldr	r2, [pc, #448]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	2b30      	cmp	r3, #48	@ 0x30
 8002ef0:	d102      	bne.n	8002ef8 <MacStringtoHex+0x30>
			tempregister = 0x00;
 8002ef2:	1cfb      	adds	r3, r7, #3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '1')		 //if (macAdress[i] == '1')
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3302      	adds	r3, #2
 8002efc:	4a6b      	ldr	r2, [pc, #428]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	2b31      	cmp	r3, #49	@ 0x31
 8002f02:	d102      	bne.n	8002f0a <MacStringtoHex+0x42>
			tempregister = 0x01;
 8002f04:	1cfb      	adds	r3, r7, #3
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '2')		 //if (macAdress[i] == '2')
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	4a67      	ldr	r2, [pc, #412]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	2b32      	cmp	r3, #50	@ 0x32
 8002f14:	d102      	bne.n	8002f1c <MacStringtoHex+0x54>
			tempregister = 0x02;
 8002f16:	1cfb      	adds	r3, r7, #3
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '3')		//if (macAdress[i] == '3')
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3302      	adds	r3, #2
 8002f20:	4a62      	ldr	r2, [pc, #392]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	2b33      	cmp	r3, #51	@ 0x33
 8002f26:	d102      	bne.n	8002f2e <MacStringtoHex+0x66>
			tempregister = 0x03;
 8002f28:	1cfb      	adds	r3, r7, #3
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '4')		//if (macAdress[i] == '4')
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3302      	adds	r3, #2
 8002f32:	4a5e      	ldr	r2, [pc, #376]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	2b34      	cmp	r3, #52	@ 0x34
 8002f38:	d102      	bne.n	8002f40 <MacStringtoHex+0x78>
			tempregister = 0x04;
 8002f3a:	1cfb      	adds	r3, r7, #3
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '5')		//if (macAdress[i] == '5')
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3302      	adds	r3, #2
 8002f44:	4a59      	ldr	r2, [pc, #356]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	2b35      	cmp	r3, #53	@ 0x35
 8002f4a:	d102      	bne.n	8002f52 <MacStringtoHex+0x8a>
			tempregister = 0x05;
 8002f4c:	1cfb      	adds	r3, r7, #3
 8002f4e:	2205      	movs	r2, #5
 8002f50:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '6')		//if (macAdress[i] == '6')
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3302      	adds	r3, #2
 8002f56:	4a55      	ldr	r2, [pc, #340]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	2b36      	cmp	r3, #54	@ 0x36
 8002f5c:	d102      	bne.n	8002f64 <MacStringtoHex+0x9c>
			tempregister = 0x06;
 8002f5e:	1cfb      	adds	r3, r7, #3
 8002f60:	2206      	movs	r2, #6
 8002f62:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '7')		//if (macAdress[i] == '7')
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3302      	adds	r3, #2
 8002f68:	4a50      	ldr	r2, [pc, #320]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	2b37      	cmp	r3, #55	@ 0x37
 8002f6e:	d102      	bne.n	8002f76 <MacStringtoHex+0xae>
			tempregister = 0x07;
 8002f70:	1cfb      	adds	r3, r7, #3
 8002f72:	2207      	movs	r2, #7
 8002f74:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '8')		//if (macAdress[i] == '8')
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	2b38      	cmp	r3, #56	@ 0x38
 8002f80:	d102      	bne.n	8002f88 <MacStringtoHex+0xc0>
			tempregister = 0x08;
 8002f82:	1cfb      	adds	r3, r7, #3
 8002f84:	2208      	movs	r2, #8
 8002f86:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == '9')		//if (macAdress[i] == '9')
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	4a47      	ldr	r2, [pc, #284]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	2b39      	cmp	r3, #57	@ 0x39
 8002f92:	d102      	bne.n	8002f9a <MacStringtoHex+0xd2>
			tempregister = 0x09;
 8002f94:	1cfb      	adds	r3, r7, #3
 8002f96:	2209      	movs	r2, #9
 8002f98:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'A')		//if (macAdress[i] == 'A')
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	4a43      	ldr	r2, [pc, #268]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	2b41      	cmp	r3, #65	@ 0x41
 8002fa4:	d102      	bne.n	8002fac <MacStringtoHex+0xe4>
			tempregister = 0x0A;
 8002fa6:	1cfb      	adds	r3, r7, #3
 8002fa8:	220a      	movs	r2, #10
 8002faa:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'B')		//if (macAdress[i] == 'B')
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3302      	adds	r3, #2
 8002fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	2b42      	cmp	r3, #66	@ 0x42
 8002fb6:	d102      	bne.n	8002fbe <MacStringtoHex+0xf6>
			tempregister = 0x0B;
 8002fb8:	1cfb      	adds	r3, r7, #3
 8002fba:	220b      	movs	r2, #11
 8002fbc:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'C')		//if (macAdress[i] == 'C')
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	2b43      	cmp	r3, #67	@ 0x43
 8002fc8:	d102      	bne.n	8002fd0 <MacStringtoHex+0x108>
			tempregister = 0x0C;
 8002fca:	1cfb      	adds	r3, r7, #3
 8002fcc:	220c      	movs	r2, #12
 8002fce:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'D')		//if (macAdress[i] == 'D')
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	4a35      	ldr	r2, [pc, #212]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fd6:	5cd3      	ldrb	r3, [r2, r3]
 8002fd8:	2b44      	cmp	r3, #68	@ 0x44
 8002fda:	d102      	bne.n	8002fe2 <MacStringtoHex+0x11a>
			tempregister = 0x0D;
 8002fdc:	1cfb      	adds	r3, r7, #3
 8002fde:	220d      	movs	r2, #13
 8002fe0:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'E')		//if (macAdress[i] == 'E')
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	4a31      	ldr	r2, [pc, #196]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	2b45      	cmp	r3, #69	@ 0x45
 8002fec:	d102      	bne.n	8002ff4 <MacStringtoHex+0x12c>
			tempregister = 0x0E;
 8002fee:	1cfb      	adds	r3, r7, #3
 8002ff0:	220e      	movs	r2, #14
 8002ff2:	701a      	strb	r2, [r3, #0]
		if (Bloque_handshake[i+2] == 'F')		//if (macAdress[i] == 'F')
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <MacStringtoHex+0x1e4>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	2b46      	cmp	r3, #70	@ 0x46
 8002ffe:	d102      	bne.n	8003006 <MacStringtoHex+0x13e>
			tempregister = 0x0F;
 8003000:	1cfb      	adds	r3, r7, #3
 8003002:	220f      	movs	r2, #15
 8003004:	701a      	strb	r2, [r3, #0]

    if ((i % 2) == 0)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	4013      	ands	r3, r2
 800300c:	d105      	bne.n	800301a <MacStringtoHex+0x152>
		octeto =  tempregister << 4;
 800300e:	1cbb      	adds	r3, r7, #2
 8003010:	1cfa      	adds	r2, r7, #3
 8003012:	7812      	ldrb	r2, [r2, #0]
 8003014:	0112      	lsls	r2, r2, #4
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e03b      	b.n	8003092 <MacStringtoHex+0x1ca>
	else{
		octeto = octeto | tempregister;
 800301a:	1cbb      	adds	r3, r7, #2
 800301c:	1cb9      	adds	r1, r7, #2
 800301e:	1cfa      	adds	r2, r7, #3
 8003020:	7809      	ldrb	r1, [r1, #0]
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	701a      	strb	r2, [r3, #0]
			if( i == 1 ||  i == 5 || i == 9)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d005      	beq.n	800303a <MacStringtoHex+0x172>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d002      	beq.n	800303a <MacStringtoHex+0x172>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b09      	cmp	r3, #9
 8003038:	d105      	bne.n	8003046 <MacStringtoHex+0x17e>
				tempregister2 = octeto << 8;
 800303a:	1cbb      	adds	r3, r7, #2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b29a      	uxth	r2, r3
 8003040:	003b      	movs	r3, r7
 8003042:	0212      	lsls	r2, r2, #8
 8003044:	801a      	strh	r2, [r3, #0]
			if (i == 3 || i == 7 || i == 11)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d005      	beq.n	8003058 <MacStringtoHex+0x190>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b07      	cmp	r3, #7
 8003050:	d002      	beq.n	8003058 <MacStringtoHex+0x190>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0b      	cmp	r3, #11
 8003056:	d107      	bne.n	8003068 <MacStringtoHex+0x1a0>
				tempregister2 = tempregister2 | (uint16_t) octeto;
 8003058:	1cbb      	adds	r3, r7, #2
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b299      	uxth	r1, r3
 800305e:	003b      	movs	r3, r7
 8003060:	003a      	movs	r2, r7
 8003062:	8812      	ldrh	r2, [r2, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	801a      	strh	r2, [r3, #0]

			if( i == 3 )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d103      	bne.n	8003076 <MacStringtoHex+0x1ae>
				DatosMAC [0] = tempregister2;
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <MacStringtoHex+0x1e8>)
 8003070:	003a      	movs	r2, r7
 8003072:	8812      	ldrh	r2, [r2, #0]
 8003074:	801a      	strh	r2, [r3, #0]
			if( i == 7 )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b07      	cmp	r3, #7
 800307a:	d103      	bne.n	8003084 <MacStringtoHex+0x1bc>
				DatosMAC [1] = tempregister2;
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <MacStringtoHex+0x1e8>)
 800307e:	003a      	movs	r2, r7
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	805a      	strh	r2, [r3, #2]
			if( i == 11 )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b0b      	cmp	r3, #11
 8003088:	d103      	bne.n	8003092 <MacStringtoHex+0x1ca>
				DatosMAC [2] = tempregister2;
 800308a:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <MacStringtoHex+0x1e8>)
 800308c:	003a      	movs	r2, r7
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	809a      	strh	r2, [r3, #4]
	for (i=0; i<=11;i++){
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3301      	adds	r3, #1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b0b      	cmp	r3, #11
 800309c:	dc00      	bgt.n	80030a0 <MacStringtoHex+0x1d8>
 800309e:	e722      	b.n	8002ee6 <MacStringtoHex+0x1e>
		}
	}
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	20000de0 	.word	0x20000de0
 80030b0:	20000088 	.word	0x20000088

080030b4 <ReadHoldingRegistersFunctionRev>:
//*********************************************************************************************
_Bool  ReadHoldingRegistersFunctionRev (uint16_t  ReadHoldingRegisters_AddressBegin	,uint16_t ReadHoldingRegisters_AddressEnd, uint16_t *ArrydHolding){
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	603a      	str	r2, [r7, #0]
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	1c02      	adds	r2, r0, #0
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	1c0a      	adds	r2, r1, #0
 80030c6:	801a      	strh	r2, [r3, #0]

	uint8_t	GroupQtyRequestCapacity = 0;      //Manuel 06-dic-2021: Capacidad de la Cantidad de registros Requeridos
 80030c8:	210d      	movs	r1, #13
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
	_Bool responseOk = 0;
 80030d0:	200f      	movs	r0, #15
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
	if(_u16ReadAddress >= ReadHoldingRegisters_AddressBegin && _u16ReadAddress <= ReadHoldingRegisters_AddressEnd){    // Peticion, para "Eventos"
 80030d8:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	1dba      	adds	r2, r7, #6
 80030de:	8812      	ldrh	r2, [r2, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d84b      	bhi.n	800317c <ReadHoldingRegistersFunctionRev+0xc8>
 80030e4:	4b29      	ldr	r3, [pc, #164]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	1d3a      	adds	r2, r7, #4
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d345      	bcc.n	800317c <ReadHoldingRegistersFunctionRev+0xc8>
	  responseOk = 1;
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
		GroupQtyRequestCapacity = (uint8_t)(ReadHoldingRegisters_AddressEnd - _u16ReadAddress + 1);
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b23      	ldr	r3, [pc, #140]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b2da      	uxtb	r2, r3
 8003106:	187b      	adds	r3, r7, r1
 8003108:	3201      	adds	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
		// Manuel 06-dic-2021: La cantidad pedida es menor o igual que la cantidad del grupo en funcion del Address del primer Registro
		if (_u16ReadQty <= GroupQtyRequestCapacity){
 800310c:	187b      	adds	r3, r7, r1
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	b29a      	uxth	r2, r3
 8003112:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <ReadHoldingRegistersFunctionRev+0xdc>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d32d      	bcc.n	8003176 <ReadHoldingRegistersFunctionRev+0xc2>
				uint8_t	i = 0;      //Manuel 06-dic-2021: iterator
 800311a:	210e      	movs	r1, #14
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < _u16ReadQty; i++ )
 8003122:	187b      	adds	r3, r7, r1
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e017      	b.n	800315a <ReadHoldingRegistersFunctionRev+0xa6>
					ModbusSlave_setTransmitBuffer (i, ArrydHolding[_u16ReadAddress - ReadHoldingRegisters_AddressBegin + i]);
 800312a:	240e      	movs	r4, #14
 800312c:	193b      	adds	r3, r7, r4
 800312e:	7818      	ldrb	r0, [r3, #0]
 8003130:	4b16      	ldr	r3, [pc, #88]	@ (800318c <ReadHoldingRegistersFunctionRev+0xd8>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	001a      	movs	r2, r3
 8003136:	1dbb      	adds	r3, r7, #6
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	193b      	adds	r3, r7, r4
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	18d3      	adds	r3, r2, r3
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	0019      	movs	r1, r3
 800314c:	f001 f878 	bl	8004240 <ModbusSlave_setTransmitBuffer>
				for (i = 0; i < _u16ReadQty; i++ )
 8003150:	193b      	adds	r3, r7, r4
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	193b      	adds	r3, r7, r4
 8003156:	3201      	adds	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	230e      	movs	r3, #14
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <ReadHoldingRegistersFunctionRev+0xdc>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d3df      	bcc.n	800312a <ReadHoldingRegistersFunctionRev+0x76>
				ModbusSlaveTransaction (u8MBFunctionSlave);
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <ReadHoldingRegistersFunctionRev+0xe0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	0018      	movs	r0, r3
 8003170:	f001 f884 	bl	800427c <ModbusSlaveTransaction>
 8003174:	e002      	b.n	800317c <ReadHoldingRegistersFunctionRev+0xc8>
		}else
			ModbusSlaveExceptionTransaction(ILLEGAL_DATA_VALUE);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 8003176:	2003      	movs	r0, #3
 8003178:	f001 f9a8 	bl	80044cc <ModbusSlaveExceptionTransaction>

	}
 return responseOk;
 800317c:	230f      	movs	r3, #15
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b005      	add	sp, #20
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	20000366 	.word	0x20000366
 8003190:	20000368 	.word	0x20000368
 8003194:	200003b4 	.word	0x200003b4

08003198 <ModbusMap>:
//*********************************************************************************************
//*********************************************************************************************

void ModbusMap(void){
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0

 uint8_t	modbusSlaveState = 0;					// Estado del Esclavo Modbus
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
//*********************************************************************************************
//****************  Registros Imbera Control
//*********************************************************************************************

	// Plantilla Dummy de escritura de registros Eventos
 	 if(!((flagsa[3]) | (flagsC[1]) | (flagsC[2]))){// if(!(((flagsa & 0x08) >> 3) | ((flagsC & 0x02) >> 1) | ((flagsC & 0x04) >> 2))){					//	if(!(((flagsa & 0x08)>> 3) || ((flagsC & 0x02)>> 1) || ((flagsC & 0x04)>> 2))){
 80031a4:	4b78      	ldr	r3, [pc, #480]	@ (8003388 <ModbusMap+0x1f0>)
 80031a6:	78da      	ldrb	r2, [r3, #3]
 80031a8:	4b78      	ldr	r3, [pc, #480]	@ (800338c <ModbusMap+0x1f4>)
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b76      	ldr	r3, [pc, #472]	@ (800338c <ModbusMap+0x1f4>)
 80031b2:	789b      	ldrb	r3, [r3, #2]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2201      	movs	r2, #1
 80031ba:	4053      	eors	r3, r2
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <ModbusMap+0x32>
		Eventos[0]  = (uint16_t) 0;       //14-Ene/2022		Estado de operacion : Normal = 0
 80031c2:	4b73      	ldr	r3, [pc, #460]	@ (8003390 <ModbusMap+0x1f8>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	e016      	b.n	80031f8 <ModbusMap+0x60>
	}
 	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES1 ?			//	else if(((flagsC & 0x02)>> 1) == 1)		// ES1 ?
 80031ca:	4b70      	ldr	r3, [pc, #448]	@ (800338c <ModbusMap+0x1f4>)
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <ModbusMap+0x42>
		Eventos[0]  = (uint16_t) 1;
 80031d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003390 <ModbusMap+0x1f8>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	e00e      	b.n	80031f8 <ModbusMap+0x60>
	else if(flagsC[1])// else if(GetRegFlagState(flagsC, 1))		// ES2 ?					//  else if(((flagsC & 0x02)>> 1) == 1)		// ES2 ?
 80031da:	4b6c      	ldr	r3, [pc, #432]	@ (800338c <ModbusMap+0x1f4>)
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <ModbusMap+0x52>
		Eventos[0]  = (uint16_t) 2;
 80031e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003390 <ModbusMap+0x1f8>)
 80031e4:	2202      	movs	r2, #2
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	e006      	b.n	80031f8 <ModbusMap+0x60>
	else if(flagsa[3])		// Nocturno ?				// else if(((flagsa & 0x08)>> 3) == 1)		// Nocturno ?
 80031ea:	4b67      	ldr	r3, [pc, #412]	@ (8003388 <ModbusMap+0x1f0>)
 80031ec:	78db      	ldrb	r3, [r3, #3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <ModbusMap+0x60>
		Eventos[0]  = (uint16_t) 6;
 80031f2:	4b67      	ldr	r3, [pc, #412]	@ (8003390 <ModbusMap+0x1f8>)
 80031f4:	2206      	movs	r2, #6
 80031f6:	801a      	strh	r2, [r3, #0]
    Eventos[1]  = (uint16_t) (GPIOR0[1]);			//((GPIOR0 & 0x02)>> 1);       //14-Ene/2022		Deshielo
 80031f8:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <ModbusMap+0x1fc>)
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	001a      	movs	r2, r3
 80031fe:	4b64      	ldr	r3, [pc, #400]	@ (8003390 <ModbusMap+0x1f8>)
 8003200:	805a      	strh	r2, [r3, #2]
	Eventos[2]  = (uint16_t) (GPIOR1[0]);			//(GPIOR1 & 0x01);       //14-Ene/2022		Ventilador
 8003202:	4b65      	ldr	r3, [pc, #404]	@ (8003398 <ModbusMap+0x200>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	001a      	movs	r2, r3
 8003208:	4b61      	ldr	r3, [pc, #388]	@ (8003390 <ModbusMap+0x1f8>)
 800320a:	809a      	strh	r2, [r3, #4]
    Eventos[3]  = (uint16_t) (GPIOR0[2]); 			//((GPIOR0 & 0x04)>> 2);       //14-Ene/2022		Iluminacion
 800320c:	4b61      	ldr	r3, [pc, #388]	@ (8003394 <ModbusMap+0x1fc>)
 800320e:	789b      	ldrb	r3, [r3, #2]
 8003210:	001a      	movs	r2, r3
 8003212:	4b5f      	ldr	r3, [pc, #380]	@ (8003390 <ModbusMap+0x1f8>)
 8003214:	80da      	strh	r2, [r3, #6]
	Eventos[4]  = (uint16_t) (GPIOR0[0]);			//(GPIOR0 & 0x01);			  //14-Ene/2022		Compresor
 8003216:	4b5f      	ldr	r3, [pc, #380]	@ (8003394 <ModbusMap+0x1fc>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	001a      	movs	r2, r3
 800321c:	4b5c      	ldr	r3, [pc, #368]	@ (8003390 <ModbusMap+0x1f8>)
 800321e:	811a      	strh	r2, [r3, #8]
	Eventos[5]  = (uint16_t) (flagsC[1]);// Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1				//		Eventos[5]  = (uint16_t) (flagsC & 0x01);      	//14-Ene/2022		Estado de puerta : CERRADA=0, ABIERTA=1
 8003220:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <ModbusMap+0x1f4>)
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	001a      	movs	r2, r3
 8003226:	4b5a      	ldr	r3, [pc, #360]	@ (8003390 <ModbusMap+0x1f8>)
 8003228:	815a      	strh	r2, [r3, #10]
    Eventos[6]  = (uint16_t) 0;				//14-Ene/2022		Relevador sensor humedad
 800322a:	4b59      	ldr	r3, [pc, #356]	@ (8003390 <ModbusMap+0x1f8>)
 800322c:	2200      	movs	r2, #0
 800322e:	819a      	strh	r2, [r3, #12]
	if (Eventos[0]  == 0)
 8003230:	4b57      	ldr	r3, [pc, #348]	@ (8003390 <ModbusMap+0x1f8>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <ModbusMap+0xa8>
		Eventos[7]  = (uint16_t) 1;				//14-Ene/2022		Modo Normal
 8003238:	4b55      	ldr	r3, [pc, #340]	@ (8003390 <ModbusMap+0x1f8>)
 800323a:	2201      	movs	r2, #1
 800323c:	81da      	strh	r2, [r3, #14]
 800323e:	e002      	b.n	8003246 <ModbusMap+0xae>
	else
		Eventos[7]  = (uint16_t) 0;				//14-Ene/2022		Modo Normal
 8003240:	4b53      	ldr	r3, [pc, #332]	@ (8003390 <ModbusMap+0x1f8>)
 8003242:	2200      	movs	r2, #0
 8003244:	81da      	strh	r2, [r3, #14]
	Eventos[8]  = (uint16_t) ((flagsC[1]));// Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1		//	Eventos[8]  = (uint16_t) ((flagsC & 0x02)>> 1);				//14-Ene/2022		Modo ES1 = Modo de ahorro 1
 8003246:	4b51      	ldr	r3, [pc, #324]	@ (800338c <ModbusMap+0x1f4>)
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	001a      	movs	r2, r3
 800324c:	4b50      	ldr	r3, [pc, #320]	@ (8003390 <ModbusMap+0x1f8>)
 800324e:	821a      	strh	r2, [r3, #16]
	Eventos[9]  = (uint16_t) ((flagsC[2]));// Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2		//	Eventos[9]  = (uint16_t) ((flagsC & 0x04)>> 2);				//14-Ene/2022		Modo ES2 = Modo de ahorro 2
 8003250:	4b4e      	ldr	r3, [pc, #312]	@ (800338c <ModbusMap+0x1f4>)
 8003252:	789b      	ldrb	r3, [r3, #2]
 8003254:	001a      	movs	r2, r3
 8003256:	4b4e      	ldr	r3, [pc, #312]	@ (8003390 <ModbusMap+0x1f8>)
 8003258:	825a      	strh	r2, [r3, #18]
	Eventos[10]  = (uint16_t) 0;			//14-Ene/2022		Modo OFF
 800325a:	4b4d      	ldr	r3, [pc, #308]	@ (8003390 <ModbusMap+0x1f8>)
 800325c:	2200      	movs	r2, #0
 800325e:	829a      	strh	r2, [r3, #20]
	Eventos[11]  = (uint16_t) 0;			//14-Ene/2022		Modo Alarma
 8003260:	4b4b      	ldr	r3, [pc, #300]	@ (8003390 <ModbusMap+0x1f8>)
 8003262:	2200      	movs	r2, #0
 8003264:	82da      	strh	r2, [r3, #22]
	Eventos[12]  = (uint16_t) flagsa[3];	// Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno			//	Eventos[12]  = (uint16_t) ((flagsa & 0x08)>> 3);			//14-Ene/2022		Modo Nocturno
 8003266:	4b48      	ldr	r3, [pc, #288]	@ (8003388 <ModbusMap+0x1f0>)
 8003268:	78db      	ldrb	r3, [r3, #3]
 800326a:	001a      	movs	r2, r3
 800326c:	4b48      	ldr	r3, [pc, #288]	@ (8003390 <ModbusMap+0x1f8>)
 800326e:	831a      	strh	r2, [r3, #24]
	Eventos[13]  = (uint16_t) 0;			//14-Ene/2022		Modo Vault
 8003270:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <ModbusMap+0x1f8>)
 8003272:	2200      	movs	r2, #0
 8003274:	835a      	strh	r2, [r3, #26]
	// Plantilla Dummy de escritura de registros Mediciones
	Mediciones[0] = (tdevl *256) + tdevf;		//14-Ene/2022		Temp interna
 8003276:	4b49      	ldr	r3, [pc, #292]	@ (800339c <ModbusMap+0x204>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	b29b      	uxth	r3, r3
 800327e:	4a48      	ldr	r2, [pc, #288]	@ (80033a0 <ModbusMap+0x208>)
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	189b      	adds	r3, r3, r2
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b47      	ldr	r3, [pc, #284]	@ (80033a4 <ModbusMap+0x20c>)
 8003288:	801a      	strh	r2, [r3, #0]
	Mediciones[1] = (teval *256) + tevaf;		//14-Ene/2022		Temp evaporador
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <ModbusMap+0x210>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	b29b      	uxth	r3, r3
 8003292:	4a46      	ldr	r2, [pc, #280]	@ (80033ac <ModbusMap+0x214>)
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	189b      	adds	r3, r3, r2
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b42      	ldr	r3, [pc, #264]	@ (80033a4 <ModbusMap+0x20c>)
 800329c:	805a      	strh	r2, [r3, #2]
	Mediciones[2] = (uint16_t) voltl*10;  //1200;	//14-Ene/2022		Voltaje
 800329e:	4b44      	ldr	r3, [pc, #272]	@ (80033b0 <ModbusMap+0x218>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	1c1a      	adds	r2, r3, #0
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	18d3      	adds	r3, r2, r3
 80032a8:	18db      	adds	r3, r3, r3
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <ModbusMap+0x20c>)
 80032ae:	809a      	strh	r2, [r3, #4]
	Mediciones[3] = (uint16_t) 220;		//14-Ene/2022		Temp externa 220/10= 22 grados
 80032b0:	4b3c      	ldr	r3, [pc, #240]	@ (80033a4 <ModbusMap+0x20c>)
 80032b2:	22dc      	movs	r2, #220	@ 0xdc
 80032b4:	80da      	strh	r2, [r3, #6]
	// Plantilla Dummy de escritura de registros Alarmas
	Alarmas[0]  = (uint16_t)  trefst[7];       								//14-Ene/2022		Alarma U						//  Alarmas[0]  = (uint16_t) ((trefst & 0x80)>> 7);       //14-Ene/2022		Alarma U
 80032b6:	4b3f      	ldr	r3, [pc, #252]	@ (80033b4 <ModbusMap+0x21c>)
 80032b8:	79db      	ldrb	r3, [r3, #7]
 80032ba:	001a      	movs	r2, r3
 80032bc:	4b3e      	ldr	r3, [pc, #248]	@ (80033b8 <ModbusMap+0x220>)
 80032be:	801a      	strh	r2, [r3, #0]
	Alarmas[1]  = (uint16_t)  trefst[6];       								//14-Ene/2022		Alarma -U						//	Alarmas[1]  = (uint16_t) ((trefst & 0x40)>> 6);       //14-Ene/2022		Alarma -U
 80032c0:	4b3c      	ldr	r3, [pc, #240]	@ (80033b4 <ModbusMap+0x21c>)
 80032c2:	799b      	ldrb	r3, [r3, #6]
 80032c4:	001a      	movs	r2, r3
 80032c6:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <ModbusMap+0x220>)
 80032c8:	805a      	strh	r2, [r3, #2]
	Alarmas[2]  = (uint16_t)  trefst[4];       								//14-Ene/2022		Alarma P						//	Alarmas[2]  = (uint16_t) ((trefst & 0x10)>> 4);       //14-Ene/2022		Alarma P
 80032ca:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <ModbusMap+0x21c>)
 80032cc:	791b      	ldrb	r3, [r3, #4]
 80032ce:	001a      	movs	r2, r3
 80032d0:	4b39      	ldr	r3, [pc, #228]	@ (80033b8 <ModbusMap+0x220>)
 80032d2:	809a      	strh	r2, [r3, #4]
	Alarmas[3]  = (uint16_t) (trefst[2] | trefst[3]);   //Alarma H Evaporador								//	Alarmas[3]  = (uint16_t) (((trefst & 0x04)>> 2) || ((trefst & 0x08)>> 3));
 80032d4:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <ModbusMap+0x21c>)
 80032d6:	789a      	ldrb	r2, [r3, #2]
 80032d8:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <ModbusMap+0x21c>)
 80032da:	78db      	ldrb	r3, [r3, #3]
 80032dc:	4313      	orrs	r3, r2
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	001a      	movs	r2, r3
 80032e2:	4b35      	ldr	r3, [pc, #212]	@ (80033b8 <ModbusMap+0x220>)
 80032e4:	80da      	strh	r2, [r3, #6]
	Alarmas[4]  = (uint16_t) 0;			 														//14-Ene/2022		Alarma Congelamiento
 80032e6:	4b34      	ldr	r3, [pc, #208]	@ (80033b8 <ModbusMap+0x220>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	811a      	strh	r2, [r3, #8]
	Alarmas[5]  = (uint16_t) (trefst[0] | trefst[1]);      								//14-Ene/2022		Alarma H Interna				//  Alarmas[5]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));      	//14-Ene/2022		Alarma H Interna
 80032ec:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <ModbusMap+0x21c>)
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	4b30      	ldr	r3, [pc, #192]	@ (80033b4 <ModbusMap+0x21c>)
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	001a      	movs	r2, r3
 80032fa:	4b2f      	ldr	r3, [pc, #188]	@ (80033b8 <ModbusMap+0x220>)
 80032fc:	815a      	strh	r2, [r3, #10]
	Alarmas[6]  = (uint16_t) trefst2[1];														//14-Ene/2022		Alarma Compresor  RM_20220711	//	Alarmas[6]  = (uint16_t) ((trefst2 & 0x02)>> 1);				//14-Ene/2022		Alarma Compresor  RM_20220711
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <ModbusMap+0x224>)
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	001a      	movs	r2, r3
 8003304:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <ModbusMap+0x220>)
 8003306:	819a      	strh	r2, [r3, #12]
	Alarmas[7]  = (uint16_t) trefst2[6];														//14-Ene/2022		Alarma A  RM_20220711			//  Alarmas[7]  = (uint16_t) ((trefst2 & 0x40)>> 6);				//14-Ene/2022		Alarma A  RM_20220711
 8003308:	4b2c      	ldr	r3, [pc, #176]	@ (80033bc <ModbusMap+0x224>)
 800330a:	799b      	ldrb	r3, [r3, #6]
 800330c:	001a      	movs	r2, r3
 800330e:	4b2a      	ldr	r3, [pc, #168]	@ (80033b8 <ModbusMap+0x220>)
 8003310:	81da      	strh	r2, [r3, #14]
	Alarmas[8]  = (uint16_t) (trefst[0] | trefst[1]);										//14-Ene/2022		Alarma H Externa				//  Alarmas[8]  = (uint16_t) ((trefst & 0x01) || ((trefst & 0x02)>> 1));				//14-Ene/2022		Alarma H Externa
 8003312:	4b28      	ldr	r3, [pc, #160]	@ (80033b4 <ModbusMap+0x21c>)
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	4b27      	ldr	r3, [pc, #156]	@ (80033b4 <ModbusMap+0x21c>)
 8003318:	785b      	ldrb	r3, [r3, #1]
 800331a:	4313      	orrs	r3, r2
 800331c:	b2db      	uxtb	r3, r3
 800331e:	001a      	movs	r2, r3
 8003320:	4b25      	ldr	r3, [pc, #148]	@ (80033b8 <ModbusMap+0x220>)
 8003322:	821a      	strh	r2, [r3, #16]
	// Plantilla Dummy de escritura de registros Datos MAC
	DatosMAC[0] =  0xB4A2;		//14-Ene/2022		MAC B4:A2
 8003324:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <ModbusMap+0x228>)
 8003326:	4a27      	ldr	r2, [pc, #156]	@ (80033c4 <ModbusMap+0x22c>)
 8003328:	801a      	strh	r2, [r3, #0]
	DatosMAC[1] =  0xEB4F;		//14-Ene/2022		MAC EB:4F
 800332a:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <ModbusMap+0x228>)
 800332c:	4a26      	ldr	r2, [pc, #152]	@ (80033c8 <ModbusMap+0x230>)
 800332e:	805a      	strh	r2, [r3, #2]
	DatosMAC[2] =  0x00FF;		//14-Ene/2022		MAC 00:FF
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <ModbusMap+0x228>)
 8003332:	22ff      	movs	r2, #255	@ 0xff
 8003334:	809a      	strh	r2, [r3, #4]
	MacStringtoHex();
 8003336:	f7ff fdc7 	bl	8002ec8 <MacStringtoHex>


    //DatosFirmware[0] =(uint16_t) ((eePlantilla[eeversion1]*256) + eePlantilla[eeversion2]);
	DatosFirmware[0] = findLastValue((uint32_t) &eePlantilla[eeversion1])*256 + findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800333a:	4b24      	ldr	r3, [pc, #144]	@ (80033cc <ModbusMap+0x234>)
 800333c:	0018      	movs	r0, r3
 800333e:	f7ff fc6d 	bl	8002c1c <findLastValue>
 8003342:	0003      	movs	r3, r0
 8003344:	b29b      	uxth	r3, r3
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b29c      	uxth	r4, r3
 800334a:	4b21      	ldr	r3, [pc, #132]	@ (80033d0 <ModbusMap+0x238>)
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff fc65 	bl	8002c1c <findLastValue>
 8003352:	0003      	movs	r3, r0
 8003354:	b29b      	uxth	r3, r3
 8003356:	18e3      	adds	r3, r4, r3
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b1e      	ldr	r3, [pc, #120]	@ (80033d4 <ModbusMap+0x23c>)
 800335c:	801a      	strh	r2, [r3, #0]
    //*********************************************************************************************
    //****************  Registros OXXO Control demo RW
    //*********************************************************************************************


    modbusSlaveState = ModbusSlavePool();
 800335e:	f001 f969 	bl	8004634 <ModbusSlavePool>
 8003362:	0002      	movs	r2, r0
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	701a      	strb	r2, [r3, #0]

	if (modbusSlaveState == ku8MBSuccess){
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <ModbusMap+0x1dc>
 8003370:	f000 fe75 	bl	800405e <ModbusMap+0xec6>
	    asm ("nop");
 8003374:	46c0      	nop			@ (mov r8, r8)
		// OpcTestModbus =1;
		switch (u8MBFunctionSlave)
 8003376:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <ModbusMap+0x240>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d02e      	beq.n	80033dc <ModbusMap+0x244>
 800337e:	2b06      	cmp	r3, #6
 8003380:	d100      	bne.n	8003384 <ModbusMap+0x1ec>
 8003382:	e195      	b.n	80036b0 <ModbusMap+0x518>
 8003384:	f000 fe2e 	bl	8003fe4 <ModbusMap+0xe4c>
 8003388:	20000b78 	.word	0x20000b78
 800338c:	20000c3c 	.word	0x20000c3c
 8003390:	20000050 	.word	0x20000050
 8003394:	20000ba4 	.word	0x20000ba4
 8003398:	20000be0 	.word	0x20000be0
 800339c:	20000bb0 	.word	0x20000bb0
 80033a0:	20000bb1 	.word	0x20000bb1
 80033a4:	2000006c 	.word	0x2000006c
 80033a8:	20000bb2 	.word	0x20000bb2
 80033ac:	20000bb3 	.word	0x20000bb3
 80033b0:	20000bce 	.word	0x20000bce
 80033b4:	20000b88 	.word	0x20000b88
 80033b8:	20000074 	.word	0x20000074
 80033bc:	20000b80 	.word	0x20000b80
 80033c0:	20000088 	.word	0x20000088
 80033c4:	ffffb4a2 	.word	0xffffb4a2
 80033c8:	ffffeb4f 	.word	0xffffeb4f
 80033cc:	0803f07b 	.word	0x0803f07b
 80033d0:	0803f07c 	.word	0x0803f07c
 80033d4:	20000090 	.word	0x20000090
 80033d8:	200003b4 	.word	0x200003b4
			// 21-feb-2023	Manuel:  case ku8MBReadDiscreteInputs: break;
			// 21-feb-2023	Manuel:  case ku8MBReadInputRegisters: break;  //Manuel 22-MAR-2002:
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			//****************************  (0x03) Function Read Holding Registers  *****************************************
			case ku8MBReadHoldingRegisters:{
			    asm ("nop");
 80033dc:	46c0      	nop			@ (mov r8, r8)

					PNU_0x3002 = 0;
 80033de:	4bd6      	ldr	r3, [pc, #856]	@ (8003738 <ModbusMap+0x5a0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	801a      	strh	r2, [r3, #0]
					//if (eePlantilla[eeescala] == 32)									//Manuel 23-Mar-2023
					if(findLastValue((uint32_t) &eePlantilla[eeescala]) == 32)
 80033e4:	4bd5      	ldr	r3, [pc, #852]	@ (800373c <ModbusMap+0x5a4>)
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff fc18 	bl	8002c1c <findLastValue>
 80033ec:	0003      	movs	r3, r0
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d102      	bne.n	80033f8 <ModbusMap+0x260>
					PNU_0x3002 = 1;
 80033f2:	4bd1      	ldr	r3, [pc, #836]	@ (8003738 <ModbusMap+0x5a0>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	801a      	strh	r2, [r3, #0]

					//PNU_0x3004 = eePlantilla[eespdiur_H] * 256 + eePlantilla[eespdiur_L];    // eespdiur_w;       //Manuel 22-Mar-2022
					PNU_0x3004 = findLastValue((uint32_t) &eePlantilla[eespdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eespdiur_L]);
 80033f8:	4bd1      	ldr	r3, [pc, #836]	@ (8003740 <ModbusMap+0x5a8>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff fc0e 	bl	8002c1c <findLastValue>
 8003400:	0003      	movs	r3, r0
 8003402:	b29b      	uxth	r3, r3
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b29c      	uxth	r4, r3
 8003408:	4bce      	ldr	r3, [pc, #824]	@ (8003744 <ModbusMap+0x5ac>)
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff fc06 	bl	8002c1c <findLastValue>
 8003410:	0003      	movs	r3, r0
 8003412:	b29b      	uxth	r3, r3
 8003414:	18e3      	adds	r3, r4, r3
 8003416:	b29a      	uxth	r2, r3
 8003418:	4bcb      	ldr	r3, [pc, #812]	@ (8003748 <ModbusMap+0x5b0>)
 800341a:	801a      	strh	r2, [r3, #0]

					//PNU_0x3006 = eePlantilla[eedifdiur_H] * 256 + eePlantilla[eedifdiur_L];	//eedifdiur_w;       //Manuel 23-Mar-2022
					PNU_0x3006 = findLastValue((uint32_t) &eePlantilla[eedifdiur_H]) * 256 + findLastValue((uint32_t) &eePlantilla[eedifdiur_L]);
 800341c:	4bcb      	ldr	r3, [pc, #812]	@ (800374c <ModbusMap+0x5b4>)
 800341e:	0018      	movs	r0, r3
 8003420:	f7ff fbfc 	bl	8002c1c <findLastValue>
 8003424:	0003      	movs	r3, r0
 8003426:	b29b      	uxth	r3, r3
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	b29c      	uxth	r4, r3
 800342c:	4bc8      	ldr	r3, [pc, #800]	@ (8003750 <ModbusMap+0x5b8>)
 800342e:	0018      	movs	r0, r3
 8003430:	f7ff fbf4 	bl	8002c1c <findLastValue>
 8003434:	0003      	movs	r3, r0
 8003436:	b29b      	uxth	r3, r3
 8003438:	18e3      	adds	r3, r4, r3
 800343a:	b29a      	uxth	r2, r3
 800343c:	4bc5      	ldr	r3, [pc, #788]	@ (8003754 <ModbusMap+0x5bc>)
 800343e:	801a      	strh	r2, [r3, #0]
					//PNU_0x301E  = (uint16_t) eePlantilla[eeAddModBus];       //Manuel 23-MAR-2022
					PNU_0x301E  = (uint16_t) findLastValue((uint32_t) &eePlantilla[eeAddModBus]);
 8003440:	4bc5      	ldr	r3, [pc, #788]	@ (8003758 <ModbusMap+0x5c0>)
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff fbea 	bl	8002c1c <findLastValue>
 8003448:	0003      	movs	r3, r0
 800344a:	b29a      	uxth	r2, r3
 800344c:	4bc3      	ldr	r3, [pc, #780]	@ (800375c <ModbusMap+0x5c4>)
 800344e:	801a      	strh	r2, [r3, #0]
				  //PNU_0x3104 = (uint16_t) eePlantilla[eetimepa];     // Manuel 23/MAR/2022
					PNU_0x3104 = (uint16_t) findLastValue((uint32_t) &eePlantilla[eetimepa]);
 8003450:	4bc3      	ldr	r3, [pc, #780]	@ (8003760 <ModbusMap+0x5c8>)
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff fbe2 	bl	8002c1c <findLastValue>
 8003458:	0003      	movs	r3, r0
 800345a:	b29a      	uxth	r2, r3
 800345c:	4bc1      	ldr	r3, [pc, #772]	@ (8003764 <ModbusMap+0x5cc>)
 800345e:	801a      	strh	r2, [r3, #0]

				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				//---------------      Imbera Control solo de Lectura  --------------------------------------------
				// El Address se encuentra dentro del rango del Grupo
				// El Address se encuentra dentro del rango del Grupo  "Eventos"
				if (ReadHoldingRegistersFunctionRev (Eventos_AddressBegin	,Eventos_AddressEnd, Eventos) == 1 )
 8003460:	4ac1      	ldr	r2, [pc, #772]	@ (8003768 <ModbusMap+0x5d0>)
 8003462:	230e      	movs	r3, #14
 8003464:	33ff      	adds	r3, #255	@ 0xff
 8003466:	0019      	movs	r1, r3
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff fe21 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003472:	1e03      	subs	r3, r0, #0
 8003474:	d001      	beq.n	800347a <ModbusMap+0x2e2>
 8003476:	f000 fdb9 	bl	8003fec <ModbusMap+0xe54>
				  break;
				// El Address se encuentra dentro del rango del Grupo "Mediciones"
				else if(ReadHoldingRegistersFunctionRev (Mediciones_AddressBegin	,Mediciones_AddressEnd, Mediciones) == 1 )
 800347a:	4abc      	ldr	r2, [pc, #752]	@ (800376c <ModbusMap+0x5d4>)
 800347c:	49bc      	ldr	r1, [pc, #752]	@ (8003770 <ModbusMap+0x5d8>)
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	0018      	movs	r0, r3
 8003484:	f7ff fe16 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003488:	1e03      	subs	r3, r0, #0
 800348a:	d001      	beq.n	8003490 <ModbusMap+0x2f8>
 800348c:	f000 fdb0 	bl	8003ff0 <ModbusMap+0xe58>
					break;
				// El Address se encuentra dentro del rango del Grupo "Alarmas"
				else if(ReadHoldingRegistersFunctionRev (Alarmas_AddressBegin	,Alarmas_AddressEnd, Alarmas) == 1 )
 8003490:	4ab8      	ldr	r2, [pc, #736]	@ (8003774 <ModbusMap+0x5dc>)
 8003492:	2382      	movs	r3, #130	@ 0x82
 8003494:	0099      	lsls	r1, r3, #2
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	0018      	movs	r0, r3
 800349c:	f7ff fe0a 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d001      	beq.n	80034a8 <ModbusMap+0x310>
 80034a4:	f000 fda6 	bl	8003ff4 <ModbusMap+0xe5c>
					break;
				// El Address se encuentra dentro del rango del Grupo "Datos MAC"
				else if(ReadHoldingRegistersFunctionRev (DatosMAC_AddressBegin	,DatosMAC_AddressEnd, DatosMAC) == 1 )
 80034a8:	4ab3      	ldr	r2, [pc, #716]	@ (8003778 <ModbusMap+0x5e0>)
 80034aa:	49b4      	ldr	r1, [pc, #720]	@ (800377c <ModbusMap+0x5e4>)
 80034ac:	23c0      	movs	r3, #192	@ 0xc0
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff fdff 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <ModbusMap+0x326>
 80034ba:	f000 fd9d 	bl	8003ff8 <ModbusMap+0xe60>
					break;
				// El Address se encuentra dentro del rango del Grupo "DatosFirmware"
				else if(ReadHoldingRegistersFunctionRev (DatosFirmware_AddressBegin	,DatosFirmware_AddressEnd, DatosFirmware) == 1 )
 80034be:	4ab0      	ldr	r2, [pc, #704]	@ (8003780 <ModbusMap+0x5e8>)
 80034c0:	23c4      	movs	r3, #196	@ 0xc4
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	23c4      	movs	r3, #196	@ 0xc4
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff fdf3 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d001      	beq.n	80034d6 <ModbusMap+0x33e>
 80034d2:	f000 fd93 	bl	8003ffc <ModbusMap+0xe64>
					break;
				// El Address test, contador de Prueba ***********
				else if(ReadHoldingRegistersFunctionRev (TestAddress_AddressBegin	,TestAddress_AddressEnd, &Count_Test) == 1 )
 80034d6:	4bab      	ldr	r3, [pc, #684]	@ (8003784 <ModbusMap+0x5ec>)
 80034d8:	001a      	movs	r2, r3
 80034da:	2110      	movs	r1, #16
 80034dc:	2010      	movs	r0, #16
 80034de:	f7ff fde9 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <ModbusMap+0x352>
 80034e6:	f000 fd8b 	bl	8004000 <ModbusMap+0xe68>
					break;
				//------------------------------------      OXXO Control demo RW						------------------------------------
				//------------------------------------      OXXO Control demo RW						------------------------------------
				// ID del cliente del refrigerador   "ID del cliente del refrigerador"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3000_AddressBegin	,PNU_0x3000_AddressEnd, &PNU_0x3000) == 1 )
 80034ea:	4aa7      	ldr	r2, [pc, #668]	@ (8003788 <ModbusMap+0x5f0>)
 80034ec:	23c0      	movs	r3, #192	@ 0xc0
 80034ee:	0199      	lsls	r1, r3, #6
 80034f0:	23c0      	movs	r3, #192	@ 0xc0
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff fddd 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <ModbusMap+0x36a>
 80034fe:	f000 fd81 	bl	8004004 <ModbusMap+0xe6c>
					break;
				// Unidad de temperatura  "Unidad de temperatura"
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3002_AddressBegin	,PNU_0x3002_AddressEnd, &PNU_0x3002) == 1 ){
 8003502:	4b8d      	ldr	r3, [pc, #564]	@ (8003738 <ModbusMap+0x5a0>)
 8003504:	49a1      	ldr	r1, [pc, #644]	@ (800378c <ModbusMap+0x5f4>)
 8003506:	48a1      	ldr	r0, [pc, #644]	@ (800378c <ModbusMap+0x5f4>)
 8003508:	001a      	movs	r2, r3
 800350a:	f7ff fdd3 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <ModbusMap+0x37e>
 8003512:	f000 fd79 	bl	8004008 <ModbusMap+0xe70>
					//if (eeescala == 32)									//Manuel 23-Mar-2023
					//PNU_0x3002 = 1;
					break;
				}
				// Temperatura Setpoint MODO NORMAL           ******* Parametro de lectura completo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3004_AddressBegin	,PNU_0x3004_AddressEnd, &PNU_0x3004) == 1 ){
 8003516:	4b8c      	ldr	r3, [pc, #560]	@ (8003748 <ModbusMap+0x5b0>)
 8003518:	499d      	ldr	r1, [pc, #628]	@ (8003790 <ModbusMap+0x5f8>)
 800351a:	489d      	ldr	r0, [pc, #628]	@ (8003790 <ModbusMap+0x5f8>)
 800351c:	001a      	movs	r2, r3
 800351e:	f7ff fdc9 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d001      	beq.n	800352a <ModbusMap+0x392>
 8003526:	f000 fd71 	bl	800400c <ModbusMap+0xe74>
					//PNU_0x3004 = eespdiur_w;       //Manuel 22-Mar-2022
					break;
				}
				// Temperatura Diferencial  MODO NORMAL
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3006_AddressBegin	,PNU_0x3006_AddressEnd, &PNU_0x3006) == 1 ){
 800352a:	4b8a      	ldr	r3, [pc, #552]	@ (8003754 <ModbusMap+0x5bc>)
 800352c:	4999      	ldr	r1, [pc, #612]	@ (8003794 <ModbusMap+0x5fc>)
 800352e:	4899      	ldr	r0, [pc, #612]	@ (8003794 <ModbusMap+0x5fc>)
 8003530:	001a      	movs	r2, r3
 8003532:	f7ff fdbf 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <ModbusMap+0x3a6>
 800353a:	f000 fd69 	bl	8004010 <ModbusMap+0xe78>
					//PNU_0x3006 = eedifdiur_w;       //Manuel 23-Mar-2022
					break;
				}
				// MODO NOCTURNO: duración en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3008_AddressBegin	,PNU_0x3008_AddressEnd, &PNU_0x3008) == 1 ){
 800353e:	4b96      	ldr	r3, [pc, #600]	@ (8003798 <ModbusMap+0x600>)
 8003540:	4996      	ldr	r1, [pc, #600]	@ (800379c <ModbusMap+0x604>)
 8003542:	4896      	ldr	r0, [pc, #600]	@ (800379c <ModbusMap+0x604>)
 8003544:	001a      	movs	r2, r3
 8003546:	f7ff fdb5 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <ModbusMap+0x3ba>
 800354e:	f000 fd61 	bl	8004014 <ModbusMap+0xe7c>
					break;
				}
				// Consumo por variable
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300A_AddressBegin	,PNU_0x300A_AddressEnd, &PNU_0x300A) == 1 ){
 8003552:	4b93      	ldr	r3, [pc, #588]	@ (80037a0 <ModbusMap+0x608>)
 8003554:	4993      	ldr	r1, [pc, #588]	@ (80037a4 <ModbusMap+0x60c>)
 8003556:	4893      	ldr	r0, [pc, #588]	@ (80037a4 <ModbusMap+0x60c>)
 8003558:	001a      	movs	r2, r3
 800355a:	f7ff fdab 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d001      	beq.n	8003566 <ModbusMap+0x3ce>
 8003562:	f000 fd59 	bl	8004018 <ModbusMap+0xe80>
					break;
				}
				// Compresor: tiempo minimo de apagado en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300C_AddressBegin	,PNU_0x300C_AddressEnd, &PNU_0x300C) == 1 ){
 8003566:	4b90      	ldr	r3, [pc, #576]	@ (80037a8 <ModbusMap+0x610>)
 8003568:	4990      	ldr	r1, [pc, #576]	@ (80037ac <ModbusMap+0x614>)
 800356a:	4890      	ldr	r0, [pc, #576]	@ (80037ac <ModbusMap+0x614>)
 800356c:	001a      	movs	r2, r3
 800356e:	f7ff fda1 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <ModbusMap+0x3e2>
 8003576:	f000 fd51 	bl	800401c <ModbusMap+0xe84>
					break;
				}
				// Compresor: tiempo minimo de encendido en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x300E_AddressBegin	,PNU_0x300E_AddressEnd, &PNU_0x300E) == 1 ){
 800357a:	4b8d      	ldr	r3, [pc, #564]	@ (80037b0 <ModbusMap+0x618>)
 800357c:	498d      	ldr	r1, [pc, #564]	@ (80037b4 <ModbusMap+0x61c>)
 800357e:	488d      	ldr	r0, [pc, #564]	@ (80037b4 <ModbusMap+0x61c>)
 8003580:	001a      	movs	r2, r3
 8003582:	f7ff fd97 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d001      	beq.n	800358e <ModbusMap+0x3f6>
 800358a:	f000 fd49 	bl	8004020 <ModbusMap+0xe88>
					break;
				}
				// Deshielo Programa 1: habilitación de 3 o 5 fases
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3010_AddressBegin	,PNU_0x3010_AddressEnd, &PNU_0x3010) == 1 ){
 800358e:	4b8a      	ldr	r3, [pc, #552]	@ (80037b8 <ModbusMap+0x620>)
 8003590:	498a      	ldr	r1, [pc, #552]	@ (80037bc <ModbusMap+0x624>)
 8003592:	488a      	ldr	r0, [pc, #552]	@ (80037bc <ModbusMap+0x624>)
 8003594:	001a      	movs	r2, r3
 8003596:	f7ff fd8d 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800359a:	1e03      	subs	r3, r0, #0
 800359c:	d001      	beq.n	80035a2 <ModbusMap+0x40a>
 800359e:	f000 fd41 	bl	8004024 <ModbusMap+0xe8c>
					break;
				}
				// Deshielo Programa 1: duración fase 1 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3012_AddressBegin	,PNU_0x3012_AddressEnd, &PNU_0x3012) == 1 ){
 80035a2:	4b87      	ldr	r3, [pc, #540]	@ (80037c0 <ModbusMap+0x628>)
 80035a4:	4987      	ldr	r1, [pc, #540]	@ (80037c4 <ModbusMap+0x62c>)
 80035a6:	4887      	ldr	r0, [pc, #540]	@ (80037c4 <ModbusMap+0x62c>)
 80035a8:	001a      	movs	r2, r3
 80035aa:	f7ff fd83 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d001      	beq.n	80035b6 <ModbusMap+0x41e>
 80035b2:	f000 fd39 	bl	8004028 <ModbusMap+0xe90>
					break;
				}
				// Deshielo Programa 1: duración fase 2 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3014_AddressBegin	,PNU_0x3014_AddressEnd, &PNU_0x3014) == 1 ){
 80035b6:	4b84      	ldr	r3, [pc, #528]	@ (80037c8 <ModbusMap+0x630>)
 80035b8:	4984      	ldr	r1, [pc, #528]	@ (80037cc <ModbusMap+0x634>)
 80035ba:	4884      	ldr	r0, [pc, #528]	@ (80037cc <ModbusMap+0x634>)
 80035bc:	001a      	movs	r2, r3
 80035be:	f7ff fd79 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d001      	beq.n	80035ca <ModbusMap+0x432>
 80035c6:	f000 fd31 	bl	800402c <ModbusMap+0xe94>
					break;
				}
				// Deshielo Programa 1: duración fase 3 en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3016_AddressBegin	,PNU_0x3016_AddressEnd, &PNU_0x3016) == 1 ){
 80035ca:	4b81      	ldr	r3, [pc, #516]	@ (80037d0 <ModbusMap+0x638>)
 80035cc:	4981      	ldr	r1, [pc, #516]	@ (80037d4 <ModbusMap+0x63c>)
 80035ce:	4881      	ldr	r0, [pc, #516]	@ (80037d4 <ModbusMap+0x63c>)
 80035d0:	001a      	movs	r2, r3
 80035d2:	f7ff fd6f 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <ModbusMap+0x446>
 80035da:	f000 fd29 	bl	8004030 <ModbusMap+0xe98>
					break;
				}
				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3018_AddressBegin	,PNU_0x3018_AddressEnd, &PNU_0x3018) == 1 ){
 80035de:	4b7e      	ldr	r3, [pc, #504]	@ (80037d8 <ModbusMap+0x640>)
 80035e0:	497e      	ldr	r1, [pc, #504]	@ (80037dc <ModbusMap+0x644>)
 80035e2:	487e      	ldr	r0, [pc, #504]	@ (80037dc <ModbusMap+0x644>)
 80035e4:	001a      	movs	r2, r3
 80035e6:	f7ff fd65 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <ModbusMap+0x45a>
 80035ee:	f000 fd21 	bl	8004034 <ModbusMap+0xe9c>
					break;
				}
				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301A_AddressBegin	,PNU_0x301A_AddressEnd, &PNU_0x301A) == 1 ){
 80035f2:	4b7b      	ldr	r3, [pc, #492]	@ (80037e0 <ModbusMap+0x648>)
 80035f4:	497b      	ldr	r1, [pc, #492]	@ (80037e4 <ModbusMap+0x64c>)
 80035f6:	487b      	ldr	r0, [pc, #492]	@ (80037e4 <ModbusMap+0x64c>)
 80035f8:	001a      	movs	r2, r3
 80035fa:	f7ff fd5b 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 80035fe:	1e03      	subs	r3, r0, #0
 8003600:	d001      	beq.n	8003606 <ModbusMap+0x46e>
 8003602:	f000 fd19 	bl	8004038 <ModbusMap+0xea0>
					break;
				}
				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301C_AddressBegin	,PNU_0x301C_AddressEnd, &PNU_0x301C) == 1 ){
 8003606:	4b78      	ldr	r3, [pc, #480]	@ (80037e8 <ModbusMap+0x650>)
 8003608:	4978      	ldr	r1, [pc, #480]	@ (80037ec <ModbusMap+0x654>)
 800360a:	4878      	ldr	r0, [pc, #480]	@ (80037ec <ModbusMap+0x654>)
 800360c:	001a      	movs	r2, r3
 800360e:	f7ff fd51 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d001      	beq.n	800361a <ModbusMap+0x482>
 8003616:	f000 fd11 	bl	800403c <ModbusMap+0xea4>
					break;
				}
				// Modbus: dirección de la CIR
				else if(ReadHoldingRegistersFunctionRev (PNU_0x301E_AddressBegin	,PNU_0x301E_AddressEnd, &PNU_0x301E) == 1 ){
 800361a:	4b50      	ldr	r3, [pc, #320]	@ (800375c <ModbusMap+0x5c4>)
 800361c:	4974      	ldr	r1, [pc, #464]	@ (80037f0 <ModbusMap+0x658>)
 800361e:	4874      	ldr	r0, [pc, #464]	@ (80037f0 <ModbusMap+0x658>)
 8003620:	001a      	movs	r2, r3
 8003622:	f7ff fd47 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <ModbusMap+0x496>
 800362a:	f000 fd09 	bl	8004040 <ModbusMap+0xea8>
					//PNU_0x301E  = (uint16_t) eeAddModBus;       //Manuel 23-MAR-2022
					break;
				}
				// Alarma puerta abierta: tiempo de activación en mins
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3104_AddressBegin	,PNU_0x3104_AddressEnd, &PNU_0x3104) == 1 ){
 800362e:	4b4d      	ldr	r3, [pc, #308]	@ (8003764 <ModbusMap+0x5cc>)
 8003630:	4970      	ldr	r1, [pc, #448]	@ (80037f4 <ModbusMap+0x65c>)
 8003632:	4870      	ldr	r0, [pc, #448]	@ (80037f4 <ModbusMap+0x65c>)
 8003634:	001a      	movs	r2, r3
 8003636:	f7ff fd3d 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800363a:	1e03      	subs	r3, r0, #0
 800363c:	d001      	beq.n	8003642 <ModbusMap+0x4aa>
 800363e:	f000 fd01 	bl	8004044 <ModbusMap+0xeac>
					//PNU_0x3104 = (uint16_t) eetimepa;     // Manuel 23/MAR/2022
					break;
				}
				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3106_AddressBegin	,PNU_0x3106_AddressEnd, &PNU_0x3106) == 1 ){
 8003642:	4b6d      	ldr	r3, [pc, #436]	@ (80037f8 <ModbusMap+0x660>)
 8003644:	496d      	ldr	r1, [pc, #436]	@ (80037fc <ModbusMap+0x664>)
 8003646:	486d      	ldr	r0, [pc, #436]	@ (80037fc <ModbusMap+0x664>)
 8003648:	001a      	movs	r2, r3
 800364a:	f7ff fd33 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800364e:	1e03      	subs	r3, r0, #0
 8003650:	d001      	beq.n	8003656 <ModbusMap+0x4be>
 8003652:	f000 fcf9 	bl	8004048 <ModbusMap+0xeb0>
					break;
				}
				// Alarma U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x3108_AddressBegin	,PNU_0x3108_AddressEnd, &PNU_0x3108) == 1 ){
 8003656:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <ModbusMap+0x668>)
 8003658:	496a      	ldr	r1, [pc, #424]	@ (8003804 <ModbusMap+0x66c>)
 800365a:	486a      	ldr	r0, [pc, #424]	@ (8003804 <ModbusMap+0x66c>)
 800365c:	001a      	movs	r2, r3
 800365e:	f7ff fd29 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d001      	beq.n	800366a <ModbusMap+0x4d2>
 8003666:	f000 fcf1 	bl	800404c <ModbusMap+0xeb4>
					break;
				}
				// Alarma U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310A_AddressBegin	,PNU_0x310A_AddressEnd, &PNU_0x310A) == 1 ){
 800366a:	4b67      	ldr	r3, [pc, #412]	@ (8003808 <ModbusMap+0x670>)
 800366c:	4967      	ldr	r1, [pc, #412]	@ (800380c <ModbusMap+0x674>)
 800366e:	4867      	ldr	r0, [pc, #412]	@ (800380c <ModbusMap+0x674>)
 8003670:	001a      	movs	r2, r3
 8003672:	f7ff fd1f 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d001      	beq.n	800367e <ModbusMap+0x4e6>
 800367a:	f000 fce9 	bl	8004050 <ModbusMap+0xeb8>
					break;
				}
				// Alarma -U 110V: voltaje para entrar en alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310C_AddressBegin	,PNU_0x310C_AddressEnd, &PNU_0x310C) == 1 ){
 800367e:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <ModbusMap+0x678>)
 8003680:	4964      	ldr	r1, [pc, #400]	@ (8003814 <ModbusMap+0x67c>)
 8003682:	4864      	ldr	r0, [pc, #400]	@ (8003814 <ModbusMap+0x67c>)
 8003684:	001a      	movs	r2, r3
 8003686:	f7ff fd15 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d001      	beq.n	8003692 <ModbusMap+0x4fa>
 800368e:	f000 fce1 	bl	8004054 <ModbusMap+0xebc>
					break;
				}
				// Alarma -U 110V: voltaje para salir de alarma
				else if(ReadHoldingRegistersFunctionRev (PNU_0x310E_AddressBegin	,PNU_0x310E_AddressEnd, &PNU_0x310E) == 1 ){
 8003692:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <ModbusMap+0x680>)
 8003694:	4961      	ldr	r1, [pc, #388]	@ (800381c <ModbusMap+0x684>)
 8003696:	4861      	ldr	r0, [pc, #388]	@ (800381c <ModbusMap+0x684>)
 8003698:	001a      	movs	r2, r3
 800369a:	f7ff fd0b 	bl	80030b4 <ReadHoldingRegistersFunctionRev>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <ModbusMap+0x50e>
 80036a2:	f000 fcd9 	bl	8004058 <ModbusMap+0xec0>
					break;
				}
				else{
					ModbusSlaveExceptionTransaction(ILLEGAL_DATA_ADDRESS);				// manda el codigo de excepcion 2			ModbusSlaveExceptionTransaction(0x02);				// manda el codigo de excepcion 2
 80036a6:	2002      	movs	r0, #2
 80036a8:	f000 ff10 	bl	80044cc <ModbusSlaveExceptionTransaction>
				}
				break;
 80036ac:	f000 fcd7 	bl	800405e <ModbusMap+0xec6>
		  }	// cierra el case
			//****************************  (0x06) Function Write Single Register  *****************************************
			//****************************  (0x06) Function Write Single Register  *****************************************
			case	ku8MBWriteSingleRegister:{
				// ID del cliente del refrigerador
				if(_u16WriteAddress >= PNU_0x3000_AddressBegin && _u16WriteAddress <= PNU_0x3000_AddressEnd){    // Contador de prueba
 80036b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003820 <ModbusMap+0x688>)
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	23c0      	movs	r3, #192	@ 0xc0
 80036b6:	019b      	lsls	r3, r3, #6
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d310      	bcc.n	80036de <ModbusMap+0x546>
 80036bc:	4b58      	ldr	r3, [pc, #352]	@ (8003820 <ModbusMap+0x688>)
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	23c0      	movs	r3, #192	@ 0xc0
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d80a      	bhi.n	80036de <ModbusMap+0x546>
					PNU_0x3000 = lowByte(_u16WriteVal);
 80036c8:	4b56      	ldr	r3, [pc, #344]	@ (8003824 <ModbusMap+0x68c>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	001a      	movs	r2, r3
 80036d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <ModbusMap+0x5f0>)
 80036d2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80036d4:	4b54      	ldr	r3, [pc, #336]	@ (8003828 <ModbusMap+0x690>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 fdcf 	bl	800427c <ModbusSlaveTransaction>
				}

				// Unidad de temperatura
				if(_u16WriteAddress >= PNU_0x3002_AddressBegin && _u16WriteAddress <= PNU_0x3002_AddressEnd){    // Contador de prueba
 80036de:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <ModbusMap+0x688>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	4a52      	ldr	r2, [pc, #328]	@ (800382c <ModbusMap+0x694>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d800      	bhi.n	80036ea <ModbusMap+0x552>
 80036e8:	e0c8      	b.n	800387c <ModbusMap+0x6e4>
 80036ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003820 <ModbusMap+0x688>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <ModbusMap+0x5f4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d900      	bls.n	80036f6 <ModbusMap+0x55e>
 80036f4:	e0c2      	b.n	800387c <ModbusMap+0x6e4>
					PNU_0x3002 = lowByte(_u16WriteVal);
 80036f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003824 <ModbusMap+0x68c>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	001a      	movs	r2, r3
 80036fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003738 <ModbusMap+0x5a0>)
 8003700:	801a      	strh	r2, [r3, #0]
					if (PNU_0x3002 == 1){
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <ModbusMap+0x5a0>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d000      	beq.n	800370c <ModbusMap+0x574>
 800370a:	e093      	b.n	8003834 <ModbusMap+0x69c>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(findLastValue((uint32_t) &eePlantilla[eeescala]) == 32){
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <ModbusMap+0x5a4>)
 800370e:	0018      	movs	r0, r3
 8003710:	f7ff fa84 	bl	8002c1c <findLastValue>
 8003714:	0003      	movs	r3, r0
 8003716:	2b20      	cmp	r3, #32
 8003718:	d101      	bne.n	800371e <ModbusMap+0x586>
							asm ("nop");
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	e08a      	b.n	8003834 <ModbusMap+0x69c>
						}
						else{
							//Cambia a C
							waux = 32;	// mov			waux,#32;	/ Carga
 800371e:	4b44      	ldr	r3, [pc, #272]	@ (8003830 <ModbusMap+0x698>)
 8003720:	2220      	movs	r2, #32
 8003722:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call
 8003724:	4b42      	ldr	r3, [pc, #264]	@ (8003830 <ModbusMap+0x698>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	001a      	movs	r2, r3
 800372a:	4b04      	ldr	r3, [pc, #16]	@ (800373c <ModbusMap+0x5a4>)
 800372c:	0019      	movs	r1, r3
 800372e:	0010      	movs	r0, r2
 8003730:	f003 fd20 	bl	8007174 <wreeprom>
			//reset_escala1:
							while(1);//goto reset_escala1;// jra    reset_escala1
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	e7fd      	b.n	8003734 <ModbusMap+0x59c>
 8003738:	20000b04 	.word	0x20000b04
 800373c:	0803f052 	.word	0x0803f052
 8003740:	0803f001 	.word	0x0803f001
 8003744:	0803f002 	.word	0x0803f002
 8003748:	20000094 	.word	0x20000094
 800374c:	0803f003 	.word	0x0803f003
 8003750:	0803f004 	.word	0x0803f004
 8003754:	20000096 	.word	0x20000096
 8003758:	0803f072 	.word	0x0803f072
 800375c:	200000aa 	.word	0x200000aa
 8003760:	0803f049 	.word	0x0803f049
 8003764:	200000ac 	.word	0x200000ac
 8003768:	20000050 	.word	0x20000050
 800376c:	2000006c 	.word	0x2000006c
 8003770:	00002003 	.word	0x00002003
 8003774:	20000074 	.word	0x20000074
 8003778:	20000088 	.word	0x20000088
 800377c:	00000302 	.word	0x00000302
 8003780:	20000090 	.word	0x20000090
 8003784:	20000b02 	.word	0x20000b02
 8003788:	20000092 	.word	0x20000092
 800378c:	00003002 	.word	0x00003002
 8003790:	00003004 	.word	0x00003004
 8003794:	00003006 	.word	0x00003006
 8003798:	20000098 	.word	0x20000098
 800379c:	00003008 	.word	0x00003008
 80037a0:	20000b06 	.word	0x20000b06
 80037a4:	0000300a 	.word	0x0000300a
 80037a8:	2000009a 	.word	0x2000009a
 80037ac:	0000300c 	.word	0x0000300c
 80037b0:	20000b08 	.word	0x20000b08
 80037b4:	0000300e 	.word	0x0000300e
 80037b8:	2000009c 	.word	0x2000009c
 80037bc:	00003010 	.word	0x00003010
 80037c0:	2000009e 	.word	0x2000009e
 80037c4:	00003012 	.word	0x00003012
 80037c8:	200000a0 	.word	0x200000a0
 80037cc:	00003014 	.word	0x00003014
 80037d0:	200000a2 	.word	0x200000a2
 80037d4:	00003016 	.word	0x00003016
 80037d8:	200000a4 	.word	0x200000a4
 80037dc:	00003018 	.word	0x00003018
 80037e0:	200000a6 	.word	0x200000a6
 80037e4:	0000301a 	.word	0x0000301a
 80037e8:	200000a8 	.word	0x200000a8
 80037ec:	0000301c 	.word	0x0000301c
 80037f0:	0000301e 	.word	0x0000301e
 80037f4:	00003104 	.word	0x00003104
 80037f8:	200000ae 	.word	0x200000ae
 80037fc:	00003106 	.word	0x00003106
 8003800:	200000b0 	.word	0x200000b0
 8003804:	00003108 	.word	0x00003108
 8003808:	200000b2 	.word	0x200000b2
 800380c:	0000310a 	.word	0x0000310a
 8003810:	200000b4 	.word	0x200000b4
 8003814:	0000310c 	.word	0x0000310c
 8003818:	200000b6 	.word	0x200000b6
 800381c:	0000310e 	.word	0x0000310e
 8003820:	2000036a 	.word	0x2000036a
 8003824:	2000036c 	.word	0x2000036c
 8003828:	200003b4 	.word	0x200003b4
 800382c:	00003001 	.word	0x00003001
 8003830:	20000b54 	.word	0x20000b54
						}
					}
					if (PNU_0x3002 == 0){
 8003834:	4bc1      	ldr	r3, [pc, #772]	@ (8003b3c <ModbusMap+0x9a4>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d11a      	bne.n	8003872 <ModbusMap+0x6da>
						//if((uint16_t) (eePlantilla[eeescala] == 32)){
						if(findLastValue((uint32_t) &eePlantilla[eeescala]== 32)){
 800383c:	2301      	movs	r3, #1
 800383e:	1c1a      	adds	r2, r3, #0
 8003840:	4bbf      	ldr	r3, [pc, #764]	@ (8003b40 <ModbusMap+0x9a8>)
 8003842:	2b20      	cmp	r3, #32
 8003844:	d001      	beq.n	800384a <ModbusMap+0x6b2>
 8003846:	2300      	movs	r3, #0
 8003848:	1c1a      	adds	r2, r3, #0
 800384a:	b2d3      	uxtb	r3, r2
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff f9e5 	bl	8002c1c <findLastValue>
 8003852:	1e03      	subs	r3, r0, #0
 8003854:	d00c      	beq.n	8003870 <ModbusMap+0x6d8>
							waux = 0;//mov			waux,#0;	/ Carga
 8003856:	4bbb      	ldr	r3, [pc, #748]	@ (8003b44 <ModbusMap+0x9ac>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
							// ldw			X,#eeescala; / Escribe en EEPROM
							wreeprom(waux , &eePlantilla[eeescala]);// call		wreeprom
 800385c:	4bb9      	ldr	r3, [pc, #740]	@ (8003b44 <ModbusMap+0x9ac>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	001a      	movs	r2, r3
 8003862:	4bb7      	ldr	r3, [pc, #732]	@ (8003b40 <ModbusMap+0x9a8>)
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f003 fc84 	bl	8007174 <wreeprom>
			//reset_escala:
							while(1);//goto reset_escala; //jra    reset_escala
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	e7fd      	b.n	800386c <ModbusMap+0x6d4>
						}
						else{
							asm ("nop");
 8003870:	46c0      	nop			@ (mov r8, r8)
						}
					}
					//reset_param = TRUE;                      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003872:	4bb5      	ldr	r3, [pc, #724]	@ (8003b48 <ModbusMap+0x9b0>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 fd00 	bl	800427c <ModbusSlaveTransaction>
				}

				// Temperatura Setpoint MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3004_AddressBegin && _u16WriteAddress <= PNU_0x3004_AddressEnd){    //
 800387c:	4bb3      	ldr	r3, [pc, #716]	@ (8003b4c <ModbusMap+0x9b4>)
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	4ab3      	ldr	r2, [pc, #716]	@ (8003b50 <ModbusMap+0x9b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d926      	bls.n	80038d4 <ModbusMap+0x73c>
 8003886:	4bb1      	ldr	r3, [pc, #708]	@ (8003b4c <ModbusMap+0x9b4>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	4ab2      	ldr	r2, [pc, #712]	@ (8003b54 <ModbusMap+0x9bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d821      	bhi.n	80038d4 <ModbusMap+0x73c>
					PNU_0x3004 = _u16WriteVal;
 8003890:	4bb1      	ldr	r3, [pc, #708]	@ (8003b58 <ModbusMap+0x9c0>)
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	4bb1      	ldr	r3, [pc, #708]	@ (8003b5c <ModbusMap+0x9c4>)
 8003896:	801a      	strh	r2, [r3, #0]

					waux = highByte (PNU_0x3004);
 8003898:	4bb0      	ldr	r3, [pc, #704]	@ (8003b5c <ModbusMap+0x9c4>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4ba8      	ldr	r3, [pc, #672]	@ (8003b44 <ModbusMap+0x9ac>)
 80038a4:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3004);
 80038a6:	4bad      	ldr	r3, [pc, #692]	@ (8003b5c <ModbusMap+0x9c4>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4bac      	ldr	r3, [pc, #688]	@ (8003b60 <ModbusMap+0x9c8>)
 80038ae:	701a      	strb	r2, [r3, #0]
					//ldw			X,#eespdiur_w; / Escribe en EEPROM
					//call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eespdiur_H]);
 80038b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003b44 <ModbusMap+0x9ac>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	001a      	movs	r2, r3
 80038b6:	4bab      	ldr	r3, [pc, #684]	@ (8003b64 <ModbusMap+0x9cc>)
 80038b8:	0019      	movs	r1, r3
 80038ba:	0010      	movs	r0, r2
 80038bc:	f003 fc5a 	bl	8007174 <wreeprom>
					wreeprom(wreg,&eePlantilla[eespdiur_L]);
 80038c0:	4ba7      	ldr	r3, [pc, #668]	@ (8003b60 <ModbusMap+0x9c8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	001a      	movs	r2, r3
 80038c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003b68 <ModbusMap+0x9d0>)
 80038c8:	0019      	movs	r1, r3
 80038ca:	0010      	movs	r0, r2
 80038cc:	f003 fc52 	bl	8007174 <wreeprom>

			//reset_escala_0x3004:
					while(1);//jra    reset_escala_0x3004 Descomentar cuando ya se tenga el watchDog
 80038d0:	46c0      	nop			@ (mov r8, r8)
 80038d2:	e7fd      	b.n	80038d0 <ModbusMap+0x738>
				  //reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Temperatura Diferencial  MODO NORMAL
				if(_u16WriteAddress >= PNU_0x3006_AddressBegin && _u16WriteAddress <= PNU_0x3006_AddressEnd){    //
 80038d4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b4c <ModbusMap+0x9b4>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	4aa4      	ldr	r2, [pc, #656]	@ (8003b6c <ModbusMap+0x9d4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d926      	bls.n	800392c <ModbusMap+0x794>
 80038de:	4b9b      	ldr	r3, [pc, #620]	@ (8003b4c <ModbusMap+0x9b4>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	4aa3      	ldr	r2, [pc, #652]	@ (8003b70 <ModbusMap+0x9d8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d821      	bhi.n	800392c <ModbusMap+0x794>
					PNU_0x3006 = _u16WriteVal;
 80038e8:	4b9b      	ldr	r3, [pc, #620]	@ (8003b58 <ModbusMap+0x9c0>)
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	4ba1      	ldr	r3, [pc, #644]	@ (8003b74 <ModbusMap+0x9dc>)
 80038ee:	801a      	strh	r2, [r3, #0]
					waux = highByte (PNU_0x3006);
 80038f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003b74 <ModbusMap+0x9dc>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b92      	ldr	r3, [pc, #584]	@ (8003b44 <ModbusMap+0x9ac>)
 80038fc:	701a      	strb	r2, [r3, #0]
					wreg = lowByte(PNU_0x3006);
 80038fe:	4b9d      	ldr	r3, [pc, #628]	@ (8003b74 <ModbusMap+0x9dc>)
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b96      	ldr	r3, [pc, #600]	@ (8003b60 <ModbusMap+0x9c8>)
 8003906:	701a      	strb	r2, [r3, #0]
					// ldw			X,#eedifdiur_w; / Escribe en EEPROM
					// call		wreeprom
					//mov			waux,wreg;	/ Carga
					//incw    X
					//call		wreeprom
					wreeprom(waux,&eePlantilla[eedifdiur_H]);
 8003908:	4b8e      	ldr	r3, [pc, #568]	@ (8003b44 <ModbusMap+0x9ac>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	001a      	movs	r2, r3
 800390e:	4b9a      	ldr	r3, [pc, #616]	@ (8003b78 <ModbusMap+0x9e0>)
 8003910:	0019      	movs	r1, r3
 8003912:	0010      	movs	r0, r2
 8003914:	f003 fc2e 	bl	8007174 <wreeprom>
					wreeprom(wreg,&eePlantilla[eedifdiur_L]);
 8003918:	4b91      	ldr	r3, [pc, #580]	@ (8003b60 <ModbusMap+0x9c8>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	001a      	movs	r2, r3
 800391e:	4b97      	ldr	r3, [pc, #604]	@ (8003b7c <ModbusMap+0x9e4>)
 8003920:	0019      	movs	r1, r3
 8003922:	0010      	movs	r0, r2
 8003924:	f003 fc26 	bl	8007174 <wreeprom>
			//reset_escala_0x3006:
					while(1);//jra    reset_escala_0x3006
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	e7fd      	b.n	8003928 <ModbusMap+0x790>
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// MODO NOCTURNO: duración en mins
				if(_u16WriteAddress >= PNU_0x3008_AddressBegin && _u16WriteAddress <= PNU_0x3008_AddressEnd){    //
 800392c:	4b87      	ldr	r3, [pc, #540]	@ (8003b4c <ModbusMap+0x9b4>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	4a93      	ldr	r2, [pc, #588]	@ (8003b80 <ModbusMap+0x9e8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d90f      	bls.n	8003956 <ModbusMap+0x7be>
 8003936:	4b85      	ldr	r3, [pc, #532]	@ (8003b4c <ModbusMap+0x9b4>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	4a92      	ldr	r2, [pc, #584]	@ (8003b84 <ModbusMap+0x9ec>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d80a      	bhi.n	8003956 <ModbusMap+0x7be>
					PNU_0x3008 = lowByte(_u16WriteVal);
 8003940:	4b85      	ldr	r3, [pc, #532]	@ (8003b58 <ModbusMap+0x9c0>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	001a      	movs	r2, r3
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <ModbusMap+0x9f0>)
 800394a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 800394c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b48 <ModbusMap+0x9b0>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 fc93 	bl	800427c <ModbusSlaveTransaction>
				}

				// Consumo por variable
				if(_u16WriteAddress >= PNU_0x300A_AddressBegin && _u16WriteAddress <= PNU_0x300A_AddressEnd){    //
 8003956:	4b7d      	ldr	r3, [pc, #500]	@ (8003b4c <ModbusMap+0x9b4>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	4a8c      	ldr	r2, [pc, #560]	@ (8003b8c <ModbusMap+0x9f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d90f      	bls.n	8003980 <ModbusMap+0x7e8>
 8003960:	4b7a      	ldr	r3, [pc, #488]	@ (8003b4c <ModbusMap+0x9b4>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	4a8a      	ldr	r2, [pc, #552]	@ (8003b90 <ModbusMap+0x9f8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d80a      	bhi.n	8003980 <ModbusMap+0x7e8>
					PNU_0x300A = lowByte(_u16WriteVal);
 800396a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b58 <ModbusMap+0x9c0>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	001a      	movs	r2, r3
 8003972:	4b88      	ldr	r3, [pc, #544]	@ (8003b94 <ModbusMap+0x9fc>)
 8003974:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003976:	4b74      	ldr	r3, [pc, #464]	@ (8003b48 <ModbusMap+0x9b0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	f000 fc7e 	bl	800427c <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de apagado en mins
				if(_u16WriteAddress >= PNU_0x300C_AddressBegin && _u16WriteAddress <= PNU_0x300C_AddressEnd){    //
 8003980:	4b72      	ldr	r3, [pc, #456]	@ (8003b4c <ModbusMap+0x9b4>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	4a84      	ldr	r2, [pc, #528]	@ (8003b98 <ModbusMap+0xa00>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d90f      	bls.n	80039aa <ModbusMap+0x812>
 800398a:	4b70      	ldr	r3, [pc, #448]	@ (8003b4c <ModbusMap+0x9b4>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	4a83      	ldr	r2, [pc, #524]	@ (8003b9c <ModbusMap+0xa04>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d80a      	bhi.n	80039aa <ModbusMap+0x812>
					PNU_0x300C = lowByte(_u16WriteVal);
 8003994:	4b70      	ldr	r3, [pc, #448]	@ (8003b58 <ModbusMap+0x9c0>)
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	001a      	movs	r2, r3
 800399c:	4b80      	ldr	r3, [pc, #512]	@ (8003ba0 <ModbusMap+0xa08>)
 800399e:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80039a0:	4b69      	ldr	r3, [pc, #420]	@ (8003b48 <ModbusMap+0x9b0>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fc69 	bl	800427c <ModbusSlaveTransaction>
				}

				// Compresor: tiempo minimo de encendido en mins
				if(_u16WriteAddress >= PNU_0x300E_AddressBegin && _u16WriteAddress <= PNU_0x300E_AddressEnd){    //
 80039aa:	4b68      	ldr	r3, [pc, #416]	@ (8003b4c <ModbusMap+0x9b4>)
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba4 <ModbusMap+0xa0c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d90f      	bls.n	80039d4 <ModbusMap+0x83c>
 80039b4:	4b65      	ldr	r3, [pc, #404]	@ (8003b4c <ModbusMap+0x9b4>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ba8 <ModbusMap+0xa10>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d80a      	bhi.n	80039d4 <ModbusMap+0x83c>
					PNU_0x300E = lowByte(_u16WriteVal);
 80039be:	4b66      	ldr	r3, [pc, #408]	@ (8003b58 <ModbusMap+0x9c0>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	001a      	movs	r2, r3
 80039c6:	4b79      	ldr	r3, [pc, #484]	@ (8003bac <ModbusMap+0xa14>)
 80039c8:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80039ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003b48 <ModbusMap+0x9b0>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fc54 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: habilitación de 3 o 5 fases
				if(_u16WriteAddress >= PNU_0x3010_AddressBegin && _u16WriteAddress <= PNU_0x3010_AddressEnd){    // Contador de prueba
 80039d4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <ModbusMap+0x9b4>)
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	4a75      	ldr	r2, [pc, #468]	@ (8003bb0 <ModbusMap+0xa18>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d90f      	bls.n	80039fe <ModbusMap+0x866>
 80039de:	4b5b      	ldr	r3, [pc, #364]	@ (8003b4c <ModbusMap+0x9b4>)
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	4a74      	ldr	r2, [pc, #464]	@ (8003bb4 <ModbusMap+0xa1c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d80a      	bhi.n	80039fe <ModbusMap+0x866>
					PNU_0x3010 = lowByte(_u16WriteVal);
 80039e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003b58 <ModbusMap+0x9c0>)
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	001a      	movs	r2, r3
 80039f0:	4b71      	ldr	r3, [pc, #452]	@ (8003bb8 <ModbusMap+0xa20>)
 80039f2:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 80039f4:	4b54      	ldr	r3, [pc, #336]	@ (8003b48 <ModbusMap+0x9b0>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 fc3f 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 1 en mins
				if(_u16WriteAddress >= PNU_0x3012_AddressBegin && _u16WriteAddress <= PNU_0x3012_AddressEnd){    // Contador de prueba
 80039fe:	4b53      	ldr	r3, [pc, #332]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <ModbusMap+0xa24>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d90f      	bls.n	8003a28 <ModbusMap+0x890>
 8003a08:	4b50      	ldr	r3, [pc, #320]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	4a6c      	ldr	r2, [pc, #432]	@ (8003bc0 <ModbusMap+0xa28>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d80a      	bhi.n	8003a28 <ModbusMap+0x890>
					PNU_0x3012 = lowByte(_u16WriteVal);
 8003a12:	4b51      	ldr	r3, [pc, #324]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	001a      	movs	r2, r3
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc4 <ModbusMap+0xa2c>)
 8003a1c:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 fc2a 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 2 en mins
				if(_u16WriteAddress >= PNU_0x3014_AddressBegin && _u16WriteAddress <= PNU_0x3014_AddressEnd){    // Contador de prueba
 8003a28:	4b48      	ldr	r3, [pc, #288]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	4a66      	ldr	r2, [pc, #408]	@ (8003bc8 <ModbusMap+0xa30>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d90f      	bls.n	8003a52 <ModbusMap+0x8ba>
 8003a32:	4b46      	ldr	r3, [pc, #280]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <ModbusMap+0xa34>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d80a      	bhi.n	8003a52 <ModbusMap+0x8ba>
					PNU_0x3014 = lowByte(_u16WriteVal);
 8003a3c:	4b46      	ldr	r3, [pc, #280]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	001a      	movs	r2, r3
 8003a44:	4b62      	ldr	r3, [pc, #392]	@ (8003bd0 <ModbusMap+0xa38>)
 8003a46:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a48:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 fc15 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: duración fase 3 en mins
				if(_u16WriteAddress >= PNU_0x3016_AddressBegin && _u16WriteAddress <= PNU_0x3016_AddressEnd){    // Contador de prueba
 8003a52:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	4a5f      	ldr	r2, [pc, #380]	@ (8003bd4 <ModbusMap+0xa3c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d90f      	bls.n	8003a7c <ModbusMap+0x8e4>
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	4a5d      	ldr	r2, [pc, #372]	@ (8003bd8 <ModbusMap+0xa40>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d80a      	bhi.n	8003a7c <ModbusMap+0x8e4>
					PNU_0x3016 = lowByte(_u16WriteVal);
 8003a66:	4b3c      	ldr	r3, [pc, #240]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <ModbusMap+0xa44>)
 8003a70:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a72:	4b35      	ldr	r3, [pc, #212]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fc00 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: periodo en mins para iniciar deshielo
				if(_u16WriteAddress >= PNU_0x3018_AddressBegin && _u16WriteAddress <= PNU_0x3018_AddressEnd){    //
 8003a7c:	4b33      	ldr	r3, [pc, #204]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	4a57      	ldr	r2, [pc, #348]	@ (8003be0 <ModbusMap+0xa48>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d90f      	bls.n	8003aa6 <ModbusMap+0x90e>
 8003a86:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <ModbusMap+0x9b4>)
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	4a56      	ldr	r2, [pc, #344]	@ (8003be4 <ModbusMap+0xa4c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d80a      	bhi.n	8003aa6 <ModbusMap+0x90e>
					PNU_0x3018 = lowByte(_u16WriteVal);
 8003a90:	4b31      	ldr	r3, [pc, #196]	@ (8003b58 <ModbusMap+0x9c0>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	001a      	movs	r2, r3
 8003a98:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <ModbusMap+0xa50>)
 8003a9a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <ModbusMap+0x9b0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 fbeb 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para inicio de periodo de deshieloDeshielo Programa 1: temperatura para inicio de periodo de deshielo
				if(_u16WriteAddress >= PNU_0x301A_AddressBegin && _u16WriteAddress <= PNU_0x301A_AddressEnd){    // Contador de prueba
 8003aa6:	4b29      	ldr	r3, [pc, #164]	@ (8003b4c <ModbusMap+0x9b4>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	4a50      	ldr	r2, [pc, #320]	@ (8003bec <ModbusMap+0xa54>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d90f      	bls.n	8003ad0 <ModbusMap+0x938>
 8003ab0:	4b26      	ldr	r3, [pc, #152]	@ (8003b4c <ModbusMap+0x9b4>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	4a4e      	ldr	r2, [pc, #312]	@ (8003bf0 <ModbusMap+0xa58>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d80a      	bhi.n	8003ad0 <ModbusMap+0x938>
					PNU_0x301A = lowByte(_u16WriteVal);
 8003aba:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <ModbusMap+0x9c0>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf4 <ModbusMap+0xa5c>)
 8003ac4:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003ac6:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <ModbusMap+0x9b0>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fbd6 	bl	800427c <ModbusSlaveTransaction>
				}

				// Deshielo Programa 1: temperatura para salir de deshielo  y verifica si entra a deshielo
				if(_u16WriteAddress >= PNU_0x301C_AddressBegin && _u16WriteAddress <= PNU_0x301C_AddressEnd){    // Contador de prueba
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <ModbusMap+0x9b4>)
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	4a48      	ldr	r2, [pc, #288]	@ (8003bf8 <ModbusMap+0xa60>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d90f      	bls.n	8003afa <ModbusMap+0x962>
 8003ada:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <ModbusMap+0x9b4>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	4a47      	ldr	r2, [pc, #284]	@ (8003bfc <ModbusMap+0xa64>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d80a      	bhi.n	8003afa <ModbusMap+0x962>
					PNU_0x301C = lowByte(_u16WriteVal);
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <ModbusMap+0x9c0>)
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	001a      	movs	r2, r3
 8003aec:	4b44      	ldr	r3, [pc, #272]	@ (8003c00 <ModbusMap+0xa68>)
 8003aee:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <ModbusMap+0x9b0>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 fbc1 	bl	800427c <ModbusSlaveTransaction>
				}

				// Modbus: dirección de la CIR
				if(_u16WriteAddress >= PNU_0x301E_AddressBegin && _u16WriteAddress <= PNU_0x301E_AddressEnd){    // Contador de prueba
 8003afa:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <ModbusMap+0x9b4>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	4a41      	ldr	r2, [pc, #260]	@ (8003c04 <ModbusMap+0xa6c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d800      	bhi.n	8003b06 <ModbusMap+0x96e>
 8003b04:	e086      	b.n	8003c14 <ModbusMap+0xa7c>
 8003b06:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <ModbusMap+0x9b4>)
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c08 <ModbusMap+0xa70>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d900      	bls.n	8003b12 <ModbusMap+0x97a>
 8003b10:	e080      	b.n	8003c14 <ModbusMap+0xa7c>
					PNU_0x301E = lowByte(_u16WriteVal);
 8003b12:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <ModbusMap+0x9c0>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	001a      	movs	r2, r3
 8003b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c0c <ModbusMap+0xa74>)
 8003b1c:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x301E;
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <ModbusMap+0xa74>)
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <ModbusMap+0x9ac>)
 8003b26:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eeAddModBus; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eeAddModBus]);//call		wreeprom
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <ModbusMap+0x9ac>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <ModbusMap+0xa78>)
 8003b30:	0019      	movs	r1, r3
 8003b32:	0010      	movs	r0, r2
 8003b34:	f003 fb1e 	bl	8007174 <wreeprom>

			//reset_escala_0x301E:
					while(1);//jra    reset_escala_0x301E
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	e7fd      	b.n	8003b38 <ModbusMap+0x9a0>
 8003b3c:	20000b04 	.word	0x20000b04
 8003b40:	0803f052 	.word	0x0803f052
 8003b44:	20000b54 	.word	0x20000b54
 8003b48:	200003b4 	.word	0x200003b4
 8003b4c:	2000036a 	.word	0x2000036a
 8003b50:	00003003 	.word	0x00003003
 8003b54:	00003004 	.word	0x00003004
 8003b58:	2000036c 	.word	0x2000036c
 8003b5c:	20000094 	.word	0x20000094
 8003b60:	20000b55 	.word	0x20000b55
 8003b64:	0803f001 	.word	0x0803f001
 8003b68:	0803f002 	.word	0x0803f002
 8003b6c:	00003005 	.word	0x00003005
 8003b70:	00003006 	.word	0x00003006
 8003b74:	20000096 	.word	0x20000096
 8003b78:	0803f003 	.word	0x0803f003
 8003b7c:	0803f004 	.word	0x0803f004
 8003b80:	00003007 	.word	0x00003007
 8003b84:	00003008 	.word	0x00003008
 8003b88:	20000098 	.word	0x20000098
 8003b8c:	00003009 	.word	0x00003009
 8003b90:	0000300a 	.word	0x0000300a
 8003b94:	20000b06 	.word	0x20000b06
 8003b98:	0000300b 	.word	0x0000300b
 8003b9c:	0000300c 	.word	0x0000300c
 8003ba0:	2000009a 	.word	0x2000009a
 8003ba4:	0000300d 	.word	0x0000300d
 8003ba8:	0000300e 	.word	0x0000300e
 8003bac:	20000b08 	.word	0x20000b08
 8003bb0:	0000300f 	.word	0x0000300f
 8003bb4:	00003010 	.word	0x00003010
 8003bb8:	2000009c 	.word	0x2000009c
 8003bbc:	00003011 	.word	0x00003011
 8003bc0:	00003012 	.word	0x00003012
 8003bc4:	2000009e 	.word	0x2000009e
 8003bc8:	00003013 	.word	0x00003013
 8003bcc:	00003014 	.word	0x00003014
 8003bd0:	200000a0 	.word	0x200000a0
 8003bd4:	00003015 	.word	0x00003015
 8003bd8:	00003016 	.word	0x00003016
 8003bdc:	200000a2 	.word	0x200000a2
 8003be0:	00003017 	.word	0x00003017
 8003be4:	00003018 	.word	0x00003018
 8003be8:	200000a4 	.word	0x200000a4
 8003bec:	00003019 	.word	0x00003019
 8003bf0:	0000301a 	.word	0x0000301a
 8003bf4:	200000a6 	.word	0x200000a6
 8003bf8:	0000301b 	.word	0x0000301b
 8003bfc:	0000301c 	.word	0x0000301c
 8003c00:	200000a8 	.word	0x200000a8
 8003c04:	0000301d 	.word	0x0000301d
 8003c08:	0000301e 	.word	0x0000301e
 8003c0c:	200000aa 	.word	0x200000aa
 8003c10:	0803f072 	.word	0x0803f072
					//reset_param = TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma puerta abierta: tiempo de activación en mins
				if(_u16WriteAddress >= PNU_0x3104_AddressBegin && _u16WriteAddress <= PNU_0x3104_AddressEnd){    //
 8003c14:	4ba7      	ldr	r3, [pc, #668]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	4aa7      	ldr	r2, [pc, #668]	@ (8003eb8 <ModbusMap+0xd20>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d919      	bls.n	8003c52 <ModbusMap+0xaba>
 8003c1e:	4ba5      	ldr	r3, [pc, #660]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	4aa6      	ldr	r2, [pc, #664]	@ (8003ebc <ModbusMap+0xd24>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d814      	bhi.n	8003c52 <ModbusMap+0xaba>
					PNU_0x3104 = lowByte(_u16WriteVal);
 8003c28:	4ba5      	ldr	r3, [pc, #660]	@ (8003ec0 <ModbusMap+0xd28>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	001a      	movs	r2, r3
 8003c30:	4ba4      	ldr	r3, [pc, #656]	@ (8003ec4 <ModbusMap+0xd2c>)
 8003c32:	801a      	strh	r2, [r3, #0]

					waux = (uint8_t) PNU_0x3104;
 8003c34:	4ba3      	ldr	r3, [pc, #652]	@ (8003ec4 <ModbusMap+0xd2c>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4ba3      	ldr	r3, [pc, #652]	@ (8003ec8 <ModbusMap+0xd30>)
 8003c3c:	701a      	strb	r2, [r3, #0]

					//ldw			X,#eetimepa; / Escribe en EEPROM
					wreeprom(waux,&eePlantilla[eetimepa]);//call		wreeprom
 8003c3e:	4ba2      	ldr	r3, [pc, #648]	@ (8003ec8 <ModbusMap+0xd30>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	001a      	movs	r2, r3
 8003c44:	4ba1      	ldr	r3, [pc, #644]	@ (8003ecc <ModbusMap+0xd34>)
 8003c46:	0019      	movs	r1, r3
 8003c48:	0010      	movs	r0, r2
 8003c4a:	f003 fa93 	bl	8007174 <wreeprom>

			//reset_escala_0x3104:
					while(1);// jra    reset_escala_0x3104
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	e7fd      	b.n	8003c4e <ModbusMap+0xab6>
					//reset_param	= TRUE;      //RM_20230425 Responder antes de RESET
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
				}

				// Alarma Congelamiento Programa 1: temperatura para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3106_AddressBegin && _u16WriteAddress <= PNU_0x3106_AddressEnd){    //
 8003c52:	4b98      	ldr	r3, [pc, #608]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	4a9e      	ldr	r2, [pc, #632]	@ (8003ed0 <ModbusMap+0xd38>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d90f      	bls.n	8003c7c <ModbusMap+0xae4>
 8003c5c:	4b95      	ldr	r3, [pc, #596]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	4a9c      	ldr	r2, [pc, #624]	@ (8003ed4 <ModbusMap+0xd3c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d80a      	bhi.n	8003c7c <ModbusMap+0xae4>
					PNU_0x3106 = lowByte(_u16WriteVal);
 8003c66:	4b96      	ldr	r3, [pc, #600]	@ (8003ec0 <ModbusMap+0xd28>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	001a      	movs	r2, r3
 8003c6e:	4b9a      	ldr	r3, [pc, #616]	@ (8003ed8 <ModbusMap+0xd40>)
 8003c70:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c72:	4b9a      	ldr	r3, [pc, #616]	@ (8003edc <ModbusMap+0xd44>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 fb00 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x3108_AddressBegin && _u16WriteAddress <= PNU_0x3108_AddressEnd){    //
 8003c7c:	4b8d      	ldr	r3, [pc, #564]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	4a97      	ldr	r2, [pc, #604]	@ (8003ee0 <ModbusMap+0xd48>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d90f      	bls.n	8003ca6 <ModbusMap+0xb0e>
 8003c86:	4b8b      	ldr	r3, [pc, #556]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	4a96      	ldr	r2, [pc, #600]	@ (8003ee4 <ModbusMap+0xd4c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d80a      	bhi.n	8003ca6 <ModbusMap+0xb0e>
					PNU_0x3108 = lowByte(_u16WriteVal);
 8003c90:	4b8b      	ldr	r3, [pc, #556]	@ (8003ec0 <ModbusMap+0xd28>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	001a      	movs	r2, r3
 8003c98:	4b93      	ldr	r3, [pc, #588]	@ (8003ee8 <ModbusMap+0xd50>)
 8003c9a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003edc <ModbusMap+0xd44>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 faeb 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310A_AddressBegin && _u16WriteAddress <= PNU_0x310A_AddressEnd){    //
 8003ca6:	4b83      	ldr	r3, [pc, #524]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	4a90      	ldr	r2, [pc, #576]	@ (8003eec <ModbusMap+0xd54>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d90f      	bls.n	8003cd0 <ModbusMap+0xb38>
 8003cb0:	4b80      	ldr	r3, [pc, #512]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef0 <ModbusMap+0xd58>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d80a      	bhi.n	8003cd0 <ModbusMap+0xb38>
					PNU_0x310A = lowByte(_u16WriteVal);
 8003cba:	4b81      	ldr	r3, [pc, #516]	@ (8003ec0 <ModbusMap+0xd28>)
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef4 <ModbusMap+0xd5c>)
 8003cc4:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003cc6:	4b85      	ldr	r3, [pc, #532]	@ (8003edc <ModbusMap+0xd44>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 fad6 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para entrar en alarma
				if(_u16WriteAddress >= PNU_0x310C_AddressBegin && _u16WriteAddress <= PNU_0x310C_AddressEnd){    //
 8003cd0:	4b78      	ldr	r3, [pc, #480]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	4a88      	ldr	r2, [pc, #544]	@ (8003ef8 <ModbusMap+0xd60>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d90f      	bls.n	8003cfa <ModbusMap+0xb62>
 8003cda:	4b76      	ldr	r3, [pc, #472]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	4a87      	ldr	r2, [pc, #540]	@ (8003efc <ModbusMap+0xd64>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d80a      	bhi.n	8003cfa <ModbusMap+0xb62>
					PNU_0x310C = lowByte(_u16WriteVal);
 8003ce4:	4b76      	ldr	r3, [pc, #472]	@ (8003ec0 <ModbusMap+0xd28>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	001a      	movs	r2, r3
 8003cec:	4b84      	ldr	r3, [pc, #528]	@ (8003f00 <ModbusMap+0xd68>)
 8003cee:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003cf0:	4b7a      	ldr	r3, [pc, #488]	@ (8003edc <ModbusMap+0xd44>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fac1 	bl	800427c <ModbusSlaveTransaction>
				}

				// Alarma -U 110V: voltaje para salir de alarma
				if(_u16WriteAddress >= PNU_0x310E_AddressBegin && _u16WriteAddress <= PNU_0x310E_AddressEnd){    //
 8003cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	4a81      	ldr	r2, [pc, #516]	@ (8003f04 <ModbusMap+0xd6c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d90f      	bls.n	8003d24 <ModbusMap+0xb8c>
 8003d04:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	4a7f      	ldr	r2, [pc, #508]	@ (8003f08 <ModbusMap+0xd70>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d80a      	bhi.n	8003d24 <ModbusMap+0xb8c>
					PNU_0x310E = lowByte(_u16WriteVal);
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	001a      	movs	r2, r3
 8003d16:	4b7d      	ldr	r3, [pc, #500]	@ (8003f0c <ModbusMap+0xd74>)
 8003d18:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d1a:	4b70      	ldr	r3, [pc, #448]	@ (8003edc <ModbusMap+0xd44>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 faac 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar Modo Nocturno
				if(_u16WriteAddress >= PNU_0x3200_AddressBegin && _u16WriteAddress <= PNU_0x3200_AddressEnd){    //
 8003d24:	4b63      	ldr	r3, [pc, #396]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	23c8      	movs	r3, #200	@ 0xc8
 8003d2a:	019b      	lsls	r3, r3, #6
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d310      	bcc.n	8003d52 <ModbusMap+0xbba>
 8003d30:	4b60      	ldr	r3, [pc, #384]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d32:	881a      	ldrh	r2, [r3, #0]
 8003d34:	23c8      	movs	r3, #200	@ 0xc8
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d80a      	bhi.n	8003d52 <ModbusMap+0xbba>
					PNU_0x3200 = lowByte(_u16WriteVal);
 8003d3c:	4b60      	ldr	r3, [pc, #384]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	001a      	movs	r2, r3
 8003d44:	4b72      	ldr	r3, [pc, #456]	@ (8003f10 <ModbusMap+0xd78>)
 8003d46:	801a      	strh	r2, [r3, #0]
					//08/FEB/2022		DeshieloH_T =lowByte(_u16WriteVal);   // 24/ENE/2022
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d48:	4b64      	ldr	r3, [pc, #400]	@ (8003edc <ModbusMap+0xd44>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 fa95 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar MODO DE AHORRO ES2
				if(_u16WriteAddress >= PNU_0x3202_AddressBegin && _u16WriteAddress <= PNU_0x3202_AddressEnd){    //
 8003d52:	4b58      	ldr	r3, [pc, #352]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	4a6f      	ldr	r2, [pc, #444]	@ (8003f14 <ModbusMap+0xd7c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d90f      	bls.n	8003d7c <ModbusMap+0xbe4>
 8003d5c:	4b55      	ldr	r3, [pc, #340]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	4a6d      	ldr	r2, [pc, #436]	@ (8003f18 <ModbusMap+0xd80>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d80a      	bhi.n	8003d7c <ModbusMap+0xbe4>
					PNU_0x3202 = lowByte(_u16WriteVal);
 8003d66:	4b56      	ldr	r3, [pc, #344]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	4b6b      	ldr	r3, [pc, #428]	@ (8003f1c <ModbusMap+0xd84>)
 8003d70:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d72:	4b5a      	ldr	r3, [pc, #360]	@ (8003edc <ModbusMap+0xd44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 fa80 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3204_AddressBegin && _u16WriteAddress <= PNU_0x3204_AddressEnd){    //
 8003d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	@ (8003f20 <ModbusMap+0xd88>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d90f      	bls.n	8003da6 <ModbusMap+0xc0e>
 8003d86:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <ModbusMap+0xd8c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d80a      	bhi.n	8003da6 <ModbusMap+0xc0e>
					PNU_0x3204 = lowByte(_u16WriteVal);
 8003d90:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec0 <ModbusMap+0xd28>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	001a      	movs	r2, r3
 8003d98:	4b63      	ldr	r3, [pc, #396]	@ (8003f28 <ModbusMap+0xd90>)
 8003d9a:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8003edc <ModbusMap+0xd44>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fa6b 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando desactivar MODO VAULT
				if(_u16WriteAddress >= PNU_0x3206_AddressBegin && _u16WriteAddress <= PNU_0x3206_AddressEnd){    //
 8003da6:	4b43      	ldr	r3, [pc, #268]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	4a60      	ldr	r2, [pc, #384]	@ (8003f2c <ModbusMap+0xd94>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d90f      	bls.n	8003dd0 <ModbusMap+0xc38>
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f30 <ModbusMap+0xd98>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d80a      	bhi.n	8003dd0 <ModbusMap+0xc38>
					PNU_0x3206 = lowByte(_u16WriteVal);
 8003dba:	4b41      	ldr	r3, [pc, #260]	@ (8003ec0 <ModbusMap+0xd28>)
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f34 <ModbusMap+0xd9c>)
 8003dc4:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003dc6:	4b45      	ldr	r3, [pc, #276]	@ (8003edc <ModbusMap+0xd44>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 fa56 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando activar MODO Servicio
				if(_u16WriteAddress >= PNU_0x3208_AddressBegin && _u16WriteAddress <= PNU_0x3208_AddressEnd){    //
 8003dd0:	4b38      	ldr	r3, [pc, #224]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	4a58      	ldr	r2, [pc, #352]	@ (8003f38 <ModbusMap+0xda0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d90f      	bls.n	8003dfa <ModbusMap+0xc62>
 8003dda:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	4a57      	ldr	r2, [pc, #348]	@ (8003f3c <ModbusMap+0xda4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d80a      	bhi.n	8003dfa <ModbusMap+0xc62>
					PNU_0x3208 = lowByte(_u16WriteVal);
 8003de4:	4b36      	ldr	r3, [pc, #216]	@ (8003ec0 <ModbusMap+0xd28>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	001a      	movs	r2, r3
 8003dec:	4b54      	ldr	r3, [pc, #336]	@ (8003f40 <ModbusMap+0xda8>)
 8003dee:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003df0:	4b3a      	ldr	r3, [pc, #232]	@ (8003edc <ModbusMap+0xd44>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 fa41 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando Ventilador siempre ON con compresor OFF
				if(_u16WriteAddress >= PNU_0x320A_AddressBegin && _u16WriteAddress <= PNU_0x320A_AddressEnd){    //
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	4a51      	ldr	r2, [pc, #324]	@ (8003f44 <ModbusMap+0xdac>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d90f      	bls.n	8003e24 <ModbusMap+0xc8c>
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	4a4f      	ldr	r2, [pc, #316]	@ (8003f48 <ModbusMap+0xdb0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d80a      	bhi.n	8003e24 <ModbusMap+0xc8c>
					PNU_0x320A = lowByte(_u16WriteVal);
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	001a      	movs	r2, r3
 8003e16:	4b4d      	ldr	r3, [pc, #308]	@ (8003f4c <ModbusMap+0xdb4>)
 8003e18:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e1a:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <ModbusMap+0xd44>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 fa2c 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando Ventilador activar ciclos ON-OFF con compresor OFF
				if(_u16WriteAddress >= PNU_0x320C_AddressBegin && _u16WriteAddress <= PNU_0x320C_AddressEnd){    //
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	4a49      	ldr	r2, [pc, #292]	@ (8003f50 <ModbusMap+0xdb8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d90f      	bls.n	8003e4e <ModbusMap+0xcb6>
 8003e2e:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <ModbusMap+0xdbc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d80a      	bhi.n	8003e4e <ModbusMap+0xcb6>
					PNU_0x320C = lowByte(_u16WriteVal);
 8003e38:	4b21      	ldr	r3, [pc, #132]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	001a      	movs	r2, r3
 8003e40:	4b45      	ldr	r3, [pc, #276]	@ (8003f58 <ModbusMap+0xdc0>)
 8003e42:	801a      	strh	r2, [r3, #0]
					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e44:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <ModbusMap+0xd44>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fa17 	bl	800427c <ModbusSlaveTransaction>
				}


				// Comando  Manuel  07-MAR-2022: Activacion/Desactivacion Nocturno
				if(_u16WriteAddress >= AndyWRegisters_0x30_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x30_AddressEnd){    //
 8003e4e:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	2b2f      	cmp	r3, #47	@ 0x2f
 8003e54:	d91a      	bls.n	8003e8c <ModbusMap+0xcf4>
 8003e56:	4b17      	ldr	r3, [pc, #92]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	2b30      	cmp	r3, #48	@ 0x30
 8003e5c:	d816      	bhi.n	8003e8c <ModbusMap+0xcf4>

					if (_u16WriteVal == 1){
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d104      	bne.n	8003e70 <ModbusMap+0xcd8>
						if(flagsa[3]){
 8003e66:	4b3d      	ldr	r3, [pc, #244]	@ (8003f5c <ModbusMap+0xdc4>)
 8003e68:	78db      	ldrb	r3, [r3, #3]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d000      	beq.n	8003e70 <ModbusMap+0xcd8>
							asm ("nop");
 8003e6e:	46c0      	nop			@ (mov r8, r8)
						}
						else{

						}
					}
					if (_u16WriteVal == 0){
 8003e70:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <ModbusMap+0xd28>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <ModbusMap+0xcea>
						if(flagsa[3]){
 8003e78:	4b38      	ldr	r3, [pc, #224]	@ (8003f5c <ModbusMap+0xdc4>)
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d100      	bne.n	8003e82 <ModbusMap+0xcea>

						}
						else{
							asm ("nop");
 8003e80:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003e82:	4b16      	ldr	r3, [pc, #88]	@ (8003edc <ModbusMap+0xd44>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 f9f8 	bl	800427c <ModbusSlaveTransaction>
				}

				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Deshielo
				if(_u16WriteAddress >= AndyWRegisters_0x31_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x31_AddressEnd){    // Contador de prueba
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d800      	bhi.n	8003e96 <ModbusMap+0xcfe>
 8003e94:	e07b      	b.n	8003f8e <ModbusMap+0xdf6>
 8003e96:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <ModbusMap+0xd1c>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	2b31      	cmp	r3, #49	@ 0x31
 8003e9c:	d900      	bls.n	8003ea0 <ModbusMap+0xd08>
 8003e9e:	e076      	b.n	8003f8e <ModbusMap+0xdf6>
					//PNU_0x320C = lowByte(_u16WriteVal);

					if (_u16WriteVal == 1){
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <ModbusMap+0xd28>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d164      	bne.n	8003f72 <ModbusMap+0xdda>
						if(GPIOR0[1]){
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <ModbusMap+0xdc8>)
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d059      	beq.n	8003f64 <ModbusMap+0xdcc>
							asm ("nop");
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	e05e      	b.n	8003f72 <ModbusMap+0xdda>
 8003eb4:	2000036a 	.word	0x2000036a
 8003eb8:	00003103 	.word	0x00003103
 8003ebc:	00003104 	.word	0x00003104
 8003ec0:	2000036c 	.word	0x2000036c
 8003ec4:	200000ac 	.word	0x200000ac
 8003ec8:	20000b54 	.word	0x20000b54
 8003ecc:	0803f049 	.word	0x0803f049
 8003ed0:	00003105 	.word	0x00003105
 8003ed4:	00003106 	.word	0x00003106
 8003ed8:	200000ae 	.word	0x200000ae
 8003edc:	200003b4 	.word	0x200003b4
 8003ee0:	00003107 	.word	0x00003107
 8003ee4:	00003108 	.word	0x00003108
 8003ee8:	200000b0 	.word	0x200000b0
 8003eec:	00003109 	.word	0x00003109
 8003ef0:	0000310a 	.word	0x0000310a
 8003ef4:	200000b2 	.word	0x200000b2
 8003ef8:	0000310b 	.word	0x0000310b
 8003efc:	0000310c 	.word	0x0000310c
 8003f00:	200000b4 	.word	0x200000b4
 8003f04:	0000310d 	.word	0x0000310d
 8003f08:	0000310e 	.word	0x0000310e
 8003f0c:	200000b6 	.word	0x200000b6
 8003f10:	20000b0a 	.word	0x20000b0a
 8003f14:	00003201 	.word	0x00003201
 8003f18:	00003202 	.word	0x00003202
 8003f1c:	20000b0c 	.word	0x20000b0c
 8003f20:	00003203 	.word	0x00003203
 8003f24:	00003204 	.word	0x00003204
 8003f28:	20000b0e 	.word	0x20000b0e
 8003f2c:	00003205 	.word	0x00003205
 8003f30:	00003206 	.word	0x00003206
 8003f34:	20000b10 	.word	0x20000b10
 8003f38:	00003207 	.word	0x00003207
 8003f3c:	00003208 	.word	0x00003208
 8003f40:	20000b12 	.word	0x20000b12
 8003f44:	00003209 	.word	0x00003209
 8003f48:	0000320a 	.word	0x0000320a
 8003f4c:	20000b14 	.word	0x20000b14
 8003f50:	0000320b 	.word	0x0000320b
 8003f54:	0000320c 	.word	0x0000320c
 8003f58:	20000b16 	.word	0x20000b16
 8003f5c:	20000b78 	.word	0x20000b78
 8003f60:	20000ba4 	.word	0x20000ba4
						}
						else{
							flags_accMenu |=0x01;
 8003f64:	4b40      	ldr	r3, [pc, #256]	@ (8004068 <ModbusMap+0xed0>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004068 <ModbusMap+0xed0>)
 8003f70:	701a      	strb	r2, [r3, #0]
							//botonst = botonst | 0x20;
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 8003f72:	4b3e      	ldr	r3, [pc, #248]	@ (800406c <ModbusMap+0xed4>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <ModbusMap+0xdec>
						if(GPIOR0[1]){
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004070 <ModbusMap+0xed8>)
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d100      	bne.n	8003f84 <ModbusMap+0xdec>
						}
						else{
							asm ("nop");
 8003f82:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003f84:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <ModbusMap+0xedc>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 f977 	bl	800427c <ModbusSlaveTransaction>
				}
				// Comando Manuel  07-MAR-2022: Activacion/Desactivacion Lampara
				if(_u16WriteAddress >= AndyWRegisters_0x32_AddressBegin && _u16WriteAddress <= AndyWRegisters_0x32_AddressEnd){    // Contador de prueba
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <ModbusMap+0xee0>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	2b31      	cmp	r3, #49	@ 0x31
 8003f94:	d800      	bhi.n	8003f98 <ModbusMap+0xe00>
 8003f96:	e061      	b.n	800405c <ModbusMap+0xec4>
 8003f98:	4b37      	ldr	r3, [pc, #220]	@ (8004078 <ModbusMap+0xee0>)
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2b32      	cmp	r3, #50	@ 0x32
 8003f9e:	d900      	bls.n	8003fa2 <ModbusMap+0xe0a>
 8003fa0:	e05c      	b.n	800405c <ModbusMap+0xec4>

					if (_u16WriteVal == 1){
 8003fa2:	4b32      	ldr	r3, [pc, #200]	@ (800406c <ModbusMap+0xed4>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <ModbusMap+0xe24>
						if(GPIOR0[2]){
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <ModbusMap+0xed8>)
 8003fac:	789b      	ldrb	r3, [r3, #2]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <ModbusMap+0xe1e>
							asm ("nop");
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	e002      	b.n	8003fbc <ModbusMap+0xe24>
						}
						else{
							flagsb[0] = 1;
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <ModbusMap+0xee4>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
							//	bset		botonst,#b3_f2
						}
					}
					if (_u16WriteVal == 0){
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800406c <ModbusMap+0xed4>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <ModbusMap+0xe40>
						if(GPIOR0[2]){
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004070 <ModbusMap+0xed8>)
 8003fc6:	789b      	ldrb	r3, [r3, #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <ModbusMap+0xe3e>
							asm ("nop");
 8003fcc:	46c0      	nop			@ (mov r8, r8)
							flagsb[0] = 0;// bres   flagsb,#0
 8003fce:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <ModbusMap+0xee4>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e000      	b.n	8003fd8 <ModbusMap+0xe40>

						}
						else{
							asm ("nop");
 8003fd6:	46c0      	nop			@ (mov r8, r8)
						}
					}

					ModbusSlaveTransaction (u8MBFunctionSlave);		// Esto solo Gestiona La respuesta
 8003fd8:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <ModbusMap+0xedc>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 f94d 	bl	800427c <ModbusSlaveTransaction>
				}
			break;
 8003fe2:	e03b      	b.n	800405c <ModbusMap+0xec4>
		  }

		  default:{                  // No entendio ninguna funcion
				ModbusSlaveExceptionTransaction(ILLEGAL_FUNCTION);      // manda el codigo de excepcion 1			ModbusSlaveExceptionTransaction(0x01);      // manda el codigo de excepcion 1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f000 fa71 	bl	80044cc <ModbusSlaveExceptionTransaction>
			}
		}

	}
}
 8003fea:	e038      	b.n	800405e <ModbusMap+0xec6>
				  break;
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	e036      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	e034      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	e032      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	e030      	b.n	800405e <ModbusMap+0xec6>
					break;
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	e02e      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	e02c      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	e02a      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	e028      	b.n	800405e <ModbusMap+0xec6>
					break;
 800400c:	46c0      	nop			@ (mov r8, r8)
 800400e:	e026      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004010:	46c0      	nop			@ (mov r8, r8)
 8004012:	e024      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004014:	46c0      	nop			@ (mov r8, r8)
 8004016:	e022      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	e020      	b.n	800405e <ModbusMap+0xec6>
					break;
 800401c:	46c0      	nop			@ (mov r8, r8)
 800401e:	e01e      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	e01c      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004024:	46c0      	nop			@ (mov r8, r8)
 8004026:	e01a      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004028:	46c0      	nop			@ (mov r8, r8)
 800402a:	e018      	b.n	800405e <ModbusMap+0xec6>
					break;
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	e016      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004030:	46c0      	nop			@ (mov r8, r8)
 8004032:	e014      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	e012      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004038:	46c0      	nop			@ (mov r8, r8)
 800403a:	e010      	b.n	800405e <ModbusMap+0xec6>
					break;
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	e00e      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004040:	46c0      	nop			@ (mov r8, r8)
 8004042:	e00c      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	e00a      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004048:	46c0      	nop			@ (mov r8, r8)
 800404a:	e008      	b.n	800405e <ModbusMap+0xec6>
					break;
 800404c:	46c0      	nop			@ (mov r8, r8)
 800404e:	e006      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004050:	46c0      	nop			@ (mov r8, r8)
 8004052:	e004      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	e002      	b.n	800405e <ModbusMap+0xec6>
					break;
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	e000      	b.n	800405e <ModbusMap+0xec6>
			break;
 800405c:	46c0      	nop			@ (mov r8, r8)
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b003      	add	sp, #12
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	20000c50 	.word	0x20000c50
 800406c:	2000036c 	.word	0x2000036c
 8004070:	20000ba4 	.word	0x20000ba4
 8004074:	200003b4 	.word	0x200003b4
 8004078:	2000036a 	.word	0x2000036a
 800407c:	20000be8 	.word	0x20000be8

08004080 <serialEvent_RS485>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
//Source_T: SerializeDMA.c
//------------------------------------------------------------------------------------------------------------------
uint8_t serialEvent_RS485 (void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint8_t u8ModbusADUSize =0;
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]

		uint16_t sizeBufferRx = sizeof(RxBuffer_RS485);
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	221e      	movs	r2, #30
 8004090:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart4, RxBuffer_RS485, sizeBufferRx );
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	4929      	ldr	r1, [pc, #164]	@ (800413c <serialEvent_RS485+0xbc>)
 8004098:	4b29      	ldr	r3, [pc, #164]	@ (8004140 <serialEvent_RS485+0xc0>)
 800409a:	0018      	movs	r0, r3
 800409c:	f015 f93e 	bl	801931c <HAL_UART_Receive_DMA>

		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart4_rx );
 80040a0:	4b28      	ldr	r3, [pc, #160]	@ (8004144 <serialEvent_RS485+0xc4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	1cbb      	adds	r3, r7, #2
 80040a8:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80040aa:	1cba      	adds	r2, r7, #2
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d23c      	bcs.n	8004130 <serialEvent_RS485+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART4->ISR & USART_ISR_IDLE ){
 80040b6:	4b24      	ldr	r3, [pc, #144]	@ (8004148 <serialEvent_RS485+0xc8>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2210      	movs	r2, #16
 80040bc:	4013      	ands	r3, r2
 80040be:	d037      	beq.n	8004130 <serialEvent_RS485+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80040c0:	46c0      	nop			@ (mov r8, r8)

				// HAL_UART_DMAStop(&huart4);
				HAL_UART_AbortReceive(&huart4);
 80040c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <serialEvent_RS485+0xc0>)
 80040c4:	0018      	movs	r0, r3
 80040c6:	f015 f995 	bl	80193f4 <HAL_UART_AbortReceive>


				if( (USART4->ISR & USART_ISR_IDLE)  )
 80040ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004148 <serialEvent_RS485+0xc8>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	2210      	movs	r2, #16
 80040d0:	4013      	ands	r3, r2
 80040d2:	d003      	beq.n	80040dc <serialEvent_RS485+0x5c>
					__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80040d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <serialEvent_RS485+0xc0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2210      	movs	r2, #16
 80040da:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 80040dc:	1dbb      	adds	r3, r7, #6
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e00c      	b.n	80040fe <serialEvent_RS485+0x7e>
					{
						SerialAnsModBus[i]=RxBuffer_RS485[i];
 80040e4:	1dbb      	adds	r3, r7, #6
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	1dbb      	adds	r3, r7, #6
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4913      	ldr	r1, [pc, #76]	@ (800413c <serialEvent_RS485+0xbc>)
 80040ee:	5c89      	ldrb	r1, [r1, r2]
 80040f0:	4a16      	ldr	r2, [pc, #88]	@ (800414c <serialEvent_RS485+0xcc>)
 80040f2:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_RS485)-contadorRx);i++)
 80040f4:	1dbb      	adds	r3, r7, #6
 80040f6:	781a      	ldrb	r2, [r3, #0]
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	3201      	adds	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	1dbb      	adds	r3, r7, #6
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	1cbb      	adds	r3, r7, #2
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	211e      	movs	r1, #30
 8004108:	1acb      	subs	r3, r1, r3
 800410a:	429a      	cmp	r2, r3
 800410c:	d3ea      	bcc.n	80040e4 <serialEvent_RS485+0x64>
					}
				SerialAnsModBus[i]= 0;					// Add Null byte
 800410e:	1dbb      	adds	r3, r7, #6
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	4a0e      	ldr	r2, [pc, #56]	@ (800414c <serialEvent_RS485+0xcc>)
 8004114:	2100      	movs	r1, #0
 8004116:	54d1      	strb	r1, [r2, r3]
				u8ModbusADUSize = sizeBufferRx - contadorRx;
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b2d9      	uxtb	r1, r3
 800411e:	1cbb      	adds	r3, r7, #2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b2da      	uxtb	r2, r3
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	1a8a      	subs	r2, r1, r2
 8004128:	701a      	strb	r2, [r3, #0]
				receivecomplete_RS485 = 1;
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <serialEvent_RS485+0xd0>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
			}

		}
		return  u8ModbusADUSize;
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	781b      	ldrb	r3, [r3, #0]
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b002      	add	sp, #8
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000ac4 	.word	0x20000ac4
 8004140:	200006bc 	.word	0x200006bc
 8004144:	20000810 	.word	0x20000810
 8004148:	40004c00 	.word	0x40004c00
 800414c:	20000ae4 	.word	0x20000ae4
 8004150:	20000364 	.word	0x20000364

08004154 <SerializeDMAArray_RS485>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
 * //Source_T: SerializeDMA.c
*/
void   SerializeDMAArray_RS485 (uint8_t *tosend,uint8_t cantidadBytes)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	000a      	movs	r2, r1
 800415e:	1cfb      	adds	r3, r7, #3
 8004160:	701a      	strb	r2, [r3, #0]
		asm ("nop");
 8004162:	46c0      	nop			@ (mov r8, r8)
	    memcpy(TxBuffer_RS485, tosend, cantidadBytes);
 8004164:	1cfb      	adds	r3, r7, #3
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4b08      	ldr	r3, [pc, #32]	@ (800418c <SerializeDMAArray_RS485+0x38>)
 800416c:	0018      	movs	r0, r3
 800416e:	f016 fe63 	bl	801ae38 <memcpy>
		HAL_UART_Transmit_DMA(&huart4, TxBuffer_RS485, (uint16_t)cantidadBytes );
 8004172:	1cfb      	adds	r3, r7, #3
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b29a      	uxth	r2, r3
 8004178:	4904      	ldr	r1, [pc, #16]	@ (800418c <SerializeDMAArray_RS485+0x38>)
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <SerializeDMAArray_RS485+0x3c>)
 800417c:	0018      	movs	r0, r3
 800417e:	f015 f83b 	bl	80191f8 <HAL_UART_Transmit_DMA>

}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b002      	add	sp, #8
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	20000aa4 	.word	0x20000aa4
 8004190:	200006bc 	.word	0x200006bc

08004194 <crc16_update>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------
// ModbusRTU.c
//------------------------------------------------------------------------------------------------------------------
static uint16_t crc16_update(uint16_t crc, uint8_t a)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	0002      	movs	r2, r0
 800419c:	1dbb      	adds	r3, r7, #6
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	1d7b      	adds	r3, r7, #5
 80041a2:	1c0a      	adds	r2, r1, #0
 80041a4:	701a      	strb	r2, [r3, #0]
int i;

crc ^= a;
 80041a6:	1d7b      	adds	r3, r7, #5
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b299      	uxth	r1, r3
 80041ac:	1dbb      	adds	r3, r7, #6
 80041ae:	1dba      	adds	r2, r7, #6
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	404a      	eors	r2, r1
 80041b4:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e015      	b.n	80041e8 <crc16_update+0x54>
{
if (crc & 1)
 80041bc:	1dbb      	adds	r3, r7, #6
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4013      	ands	r3, r2
 80041c4:	d008      	beq.n	80041d8 <crc16_update+0x44>
  crc = (crc >> 1) ^ 0xA001;
 80041c6:	1dbb      	adds	r3, r7, #6
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	1dbb      	adds	r3, r7, #6
 80041d0:	490a      	ldr	r1, [pc, #40]	@ (80041fc <crc16_update+0x68>)
 80041d2:	404a      	eors	r2, r1
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e004      	b.n	80041e2 <crc16_update+0x4e>
else
  crc = (crc >> 1);
 80041d8:	1dbb      	adds	r3, r7, #6
 80041da:	1dba      	adds	r2, r7, #6
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	801a      	strh	r2, [r3, #0]
for (i = 0; i < 8; ++i)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	dde6      	ble.n	80041bc <crc16_update+0x28>
}

return crc;
 80041ee:	1dbb      	adds	r3, r7, #6
 80041f0:	881b      	ldrh	r3, [r3, #0]
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	ffffa001 	.word	0xffffa001

08004200 <Modbus_ModbusSalave>:
//------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
/** Linea: 267
Constructor initialize it using ModbusMaster
*/
void	Modbus_ModbusSalave (void){
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  _postTransmission = 0;
	*/
	timeClearComst;
	timeClearComst1;
	fCOM;//???????
}
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <ModbusMaster_begin>:
@param slave Modbus slave ID (1..255)
@param &serial reference to serial port object (Serial, Serial1, ... Serial3)
@ingroup setup
*/
void ModbusMaster_begin(uint8_t slave)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	0002      	movs	r2, r0
 8004214:	1dfb      	adds	r3, r7, #7
 8004216:	701a      	strb	r2, [r3, #0]
//  txBuffer = (uint16_t*) calloc(ku8MaxBufferSize, sizeof(uint16_t));
  _u8MBSlave = slave;
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <ModbusMaster_begin+0x28>)
 800421a:	1dfa      	adds	r2, r7, #7
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	701a      	strb	r2, [r3, #0]
  // Manuel 23-NOv-2021		_serial = &serial;
  _u8TransmitBufferIndex = 0;
 8004220:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <ModbusMaster_begin+0x2c>)
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
  u16TransmitBufferLength = 0;
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <ModbusMaster_begin+0x30>)
 8004228:	2200      	movs	r2, #0
 800422a:	801a      	strh	r2, [r3, #0]
#if __MODBUSMASTER_DEBUG__
  pinMode(__MODBUSMASTER_DEBUG_PIN_A__, OUTPUT);
  pinMode(__MODBUSMASTER_DEBUG_PIN_B__, OUTPUT);
#endif
*/
}
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000365 	.word	0x20000365
 8004238:	200003b0 	.word	0x200003b0
 800423c:	200003b2 	.word	0x200003b2

08004240 <ModbusSlave_setTransmitBuffer>:
@param u16Value value to place in position u8Index of transmit buffer (0x0000..0xFFFF)
@return 0 on success; exception number on failure
@ingroup buffer
*/
uint8_t ModbusSlave_setTransmitBuffer(uint8_t u8Index, uint16_t u16Value)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	0002      	movs	r2, r0
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	1c0a      	adds	r2, r1, #0
 8004250:	801a      	strh	r2, [r3, #0]
  if (u8Index < ku8MaxBufferSize)
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b1f      	cmp	r3, #31
 8004258:	d808      	bhi.n	800426c <ModbusSlave_setTransmitBuffer+0x2c>
  {
    _u16TransmitBuffer[u8Index] = u16Value;
 800425a:	1dfb      	adds	r3, r7, #7
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <ModbusSlave_setTransmitBuffer+0x38>)
 8004260:	0052      	lsls	r2, r2, #1
 8004262:	1d39      	adds	r1, r7, #4
 8004264:	8809      	ldrh	r1, [r1, #0]
 8004266:	52d1      	strh	r1, [r2, r3]
    return ku8MBSuccess;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <ModbusSlave_setTransmitBuffer+0x2e>
  }
  else
  {
    return ku8MBIllegalDataAddress;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	20000370 	.word	0x20000370

0800427c <ModbusSlaveTransaction>:

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
void		ModbusSlaveTransaction (uint8_t u8MBFunction)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b0c5      	sub	sp, #276	@ 0x114
 8004280:	af00      	add	r7, sp, #0
 8004282:	0002      	movs	r2, r0
 8004284:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <ModbusSlaveTransaction+0x22c>)
 8004286:	2588      	movs	r5, #136	@ 0x88
 8004288:	006d      	lsls	r5, r5, #1
 800428a:	195b      	adds	r3, r3, r5
 800428c:	19db      	adds	r3, r3, r7
 800428e:	701a      	strb	r2, [r3, #0]

  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 8004290:	2410      	movs	r4, #16
 8004292:	34ff      	adds	r4, #255	@ 0xff
 8004294:	193b      	adds	r3, r7, r4
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
	uint8_t i;
  uint16_t u16CRC;

	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 800429a:	4b84      	ldr	r3, [pc, #528]	@ (80044ac <ModbusSlaveTransaction+0x230>)
 800429c:	2201      	movs	r2, #1
 800429e:	2104      	movs	r1, #4
 80042a0:	0018      	movs	r0, r3
 80042a2:	f00f fa0c 	bl	80136be <HAL_GPIO_WritePin>


  // assemble Modbus Request Application Data Unit
  u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80042a6:	0020      	movs	r0, r4
 80042a8:	183b      	adds	r3, r7, r0
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	183a      	adds	r2, r7, r0
 80042ae:	1c59      	adds	r1, r3, #1
 80042b0:	7011      	strb	r1, [r2, #0]
 80042b2:	001a      	movs	r2, r3
 80042b4:	4b7e      	ldr	r3, [pc, #504]	@ (80044b0 <ModbusSlaveTransaction+0x234>)
 80042b6:	7819      	ldrb	r1, [r3, #0]
 80042b8:	4b7e      	ldr	r3, [pc, #504]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80042ba:	195b      	adds	r3, r3, r5
 80042bc:	19db      	adds	r3, r3, r7
 80042be:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = u8MBFunctionSlave;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 80042c0:	183b      	adds	r3, r7, r0
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	183a      	adds	r2, r7, r0
 80042c6:	1c59      	adds	r1, r3, #1
 80042c8:	7011      	strb	r1, [r2, #0]
 80042ca:	001a      	movs	r2, r3
 80042cc:	4b7a      	ldr	r3, [pc, #488]	@ (80044b8 <ModbusSlaveTransaction+0x23c>)
 80042ce:	7819      	ldrb	r1, [r3, #0]
 80042d0:	4b78      	ldr	r3, [pc, #480]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80042d2:	195b      	adds	r3, r3, r5
 80042d4:	19db      	adds	r3, r3, r7
 80042d6:	5499      	strb	r1, [r3, r2]

	switch(u8MBFunction)
 80042d8:	4b73      	ldr	r3, [pc, #460]	@ (80044a8 <ModbusSlaveTransaction+0x22c>)
 80042da:	195b      	adds	r3, r3, r5
 80042dc:	19db      	adds	r3, r3, r7
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	dc02      	bgt.n	80042ea <ModbusSlaveTransaction+0x6e>
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	da03      	bge.n	80042f0 <ModbusSlaveTransaction+0x74>
 80042e8:	e077      	b.n	80043da <ModbusSlaveTransaction+0x15e>
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d04f      	beq.n	800438e <ModbusSlaveTransaction+0x112>
 80042ee:	e074      	b.n	80043da <ModbusSlaveTransaction+0x15e>
  {

    case ku8MBReadInputRegisters: //Manuel 20-MAR-200:	break;
    case ku8MBReadHoldingRegisters:					//Manuel 1-dic-2021, Modbus function 0x03 Read Holding Registers
      u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty << 1);
 80042f0:	4b72      	ldr	r3, [pc, #456]	@ (80044bc <ModbusSlaveTransaction+0x240>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	0059      	lsls	r1, r3, #1
 80042f6:	2210      	movs	r2, #16
 80042f8:	32ff      	adds	r2, #255	@ 0xff
 80042fa:	18bb      	adds	r3, r7, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	18ba      	adds	r2, r7, r2
 8004300:	1c58      	adds	r0, r3, #1
 8004302:	7010      	strb	r0, [r2, #0]
 8004304:	001a      	movs	r2, r3
 8004306:	b2c9      	uxtb	r1, r1
 8004308:	4b6a      	ldr	r3, [pc, #424]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 800430a:	2088      	movs	r0, #136	@ 0x88
 800430c:	0040      	lsls	r0, r0, #1
 800430e:	181b      	adds	r3, r3, r0
 8004310:	19db      	adds	r3, r3, r7
 8004312:	5499      	strb	r1, [r3, r2]

      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004314:	2387      	movs	r3, #135	@ 0x87
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e02c      	b.n	800437a <ModbusSlaveTransaction+0xfe>
      {
        u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 8004320:	2487      	movs	r4, #135	@ 0x87
 8004322:	0064      	lsls	r4, r4, #1
 8004324:	193b      	adds	r3, r7, r4
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	4b65      	ldr	r3, [pc, #404]	@ (80044c0 <ModbusSlaveTransaction+0x244>)
 800432a:	0052      	lsls	r2, r2, #1
 800432c:	5ad3      	ldrh	r3, [r2, r3]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b299      	uxth	r1, r3
 8004332:	2510      	movs	r5, #16
 8004334:	35ff      	adds	r5, #255	@ 0xff
 8004336:	197b      	adds	r3, r7, r5
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	197a      	adds	r2, r7, r5
 800433c:	1c58      	adds	r0, r3, #1
 800433e:	7010      	strb	r0, [r2, #0]
 8004340:	001a      	movs	r2, r3
 8004342:	b2c9      	uxtb	r1, r1
 8004344:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004346:	2688      	movs	r6, #136	@ 0x88
 8004348:	0076      	lsls	r6, r6, #1
 800434a:	199b      	adds	r3, r3, r6
 800434c:	19db      	adds	r3, r3, r7
 800434e:	5499      	strb	r1, [r3, r2]
        u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 8004350:	193b      	adds	r3, r7, r4
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	4b5a      	ldr	r3, [pc, #360]	@ (80044c0 <ModbusSlaveTransaction+0x244>)
 8004356:	0052      	lsls	r2, r2, #1
 8004358:	5ad1      	ldrh	r1, [r2, r3]
 800435a:	197b      	adds	r3, r7, r5
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	197a      	adds	r2, r7, r5
 8004360:	1c58      	adds	r0, r3, #1
 8004362:	7010      	strb	r0, [r2, #0]
 8004364:	001a      	movs	r2, r3
 8004366:	b2c9      	uxtb	r1, r1
 8004368:	4b52      	ldr	r3, [pc, #328]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 800436a:	199b      	adds	r3, r3, r6
 800436c:	19db      	adds	r3, r3, r7
 800436e:	5499      	strb	r1, [r3, r2]
      for (i = 0; i < lowByte(_u16ReadQty); i++)
 8004370:	193b      	adds	r3, r7, r4
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	193b      	adds	r3, r7, r4
 8004376:	3201      	adds	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <ModbusSlaveTransaction+0x240>)
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2287      	movs	r2, #135	@ 0x87
 8004382:	0052      	lsls	r2, r2, #1
 8004384:	18ba      	adds	r2, r7, r2
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d3c9      	bcc.n	8004320 <ModbusSlaveTransaction+0xa4>
      }
		break;
 800438c:	e025      	b.n	80043da <ModbusSlaveTransaction+0x15e>
		case ku8MBWriteSingleRegister:													//Manuel 10-Ene-2022 : Escritura de registro Simple
		  for (i = 2; i <= 5; i++){
 800438e:	2387      	movs	r3, #135	@ 0x87
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	2202      	movs	r2, #2
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	e018      	b.n	80043cc <ModbusSlaveTransaction+0x150>
				u8ModbusADU[u8ModbusADUSize++] = SerialAnsModBus[i];					//Manuel 10-Ene-2022 : para todas las respuestas inician asi
 800439a:	2487      	movs	r4, #135	@ 0x87
 800439c:	0064      	lsls	r4, r4, #1
 800439e:	193b      	adds	r3, r7, r4
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	2110      	movs	r1, #16
 80043a4:	31ff      	adds	r1, #255	@ 0xff
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	1879      	adds	r1, r7, r1
 80043ac:	1c58      	adds	r0, r3, #1
 80043ae:	7008      	strb	r0, [r1, #0]
 80043b0:	0019      	movs	r1, r3
 80043b2:	4b44      	ldr	r3, [pc, #272]	@ (80044c4 <ModbusSlaveTransaction+0x248>)
 80043b4:	5c9a      	ldrb	r2, [r3, r2]
 80043b6:	4b3f      	ldr	r3, [pc, #252]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80043b8:	2088      	movs	r0, #136	@ 0x88
 80043ba:	0040      	lsls	r0, r0, #1
 80043bc:	181b      	adds	r3, r3, r0
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	545a      	strb	r2, [r3, r1]
		  for (i = 2; i <= 5; i++){
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	193b      	adds	r3, r7, r4
 80043c8:	3201      	adds	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	2387      	movs	r3, #135	@ 0x87
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d9e0      	bls.n	800439a <ModbusSlaveTransaction+0x11e>
			}
		break;
 80043d8:	46c0      	nop			@ (mov r8, r8)
  }


  // append CRC
  u16CRC = 0xFFFF;
 80043da:	2386      	movs	r3, #134	@ 0x86
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2201      	movs	r2, #1
 80043e2:	4252      	negs	r2, r2
 80043e4:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 80043e6:	2387      	movs	r3, #135	@ 0x87
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e019      	b.n	8004426 <ModbusSlaveTransaction+0x1aa>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 80043f2:	2587      	movs	r5, #135	@ 0x87
 80043f4:	006d      	lsls	r5, r5, #1
 80043f6:	197b      	adds	r3, r7, r5
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4a2e      	ldr	r2, [pc, #184]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 80043fc:	2188      	movs	r1, #136	@ 0x88
 80043fe:	0049      	lsls	r1, r1, #1
 8004400:	1852      	adds	r2, r2, r1
 8004402:	19d2      	adds	r2, r2, r7
 8004404:	5cd2      	ldrb	r2, [r2, r3]
 8004406:	2386      	movs	r3, #134	@ 0x86
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	18fc      	adds	r4, r7, r3
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff febe 	bl	8004194 <crc16_update>
 8004418:	0003      	movs	r3, r0
 800441a:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800441c:	197b      	adds	r3, r7, r5
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	197b      	adds	r3, r7, r5
 8004422:	3201      	adds	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	2387      	movs	r3, #135	@ 0x87
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	18fa      	adds	r2, r7, r3
 800442c:	2010      	movs	r0, #16
 800442e:	30ff      	adds	r0, #255	@ 0xff
 8004430:	183b      	adds	r3, r7, r0
 8004432:	7812      	ldrb	r2, [r2, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d3db      	bcc.n	80043f2 <ModbusSlaveTransaction+0x176>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 800443a:	183b      	adds	r3, r7, r0
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	183a      	adds	r2, r7, r0
 8004440:	1c59      	adds	r1, r3, #1
 8004442:	7011      	strb	r1, [r2, #0]
 8004444:	001a      	movs	r2, r3
 8004446:	2486      	movs	r4, #134	@ 0x86
 8004448:	0064      	lsls	r4, r4, #1
 800444a:	193b      	adds	r3, r7, r4
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b2d9      	uxtb	r1, r3
 8004450:	4b18      	ldr	r3, [pc, #96]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004452:	2588      	movs	r5, #136	@ 0x88
 8004454:	006d      	lsls	r5, r5, #1
 8004456:	195b      	adds	r3, r3, r5
 8004458:	19db      	adds	r3, r3, r7
 800445a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 800445c:	193b      	adds	r3, r7, r4
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	b299      	uxth	r1, r3
 8004464:	183b      	adds	r3, r7, r0
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	0004      	movs	r4, r0
 800446a:	183a      	adds	r2, r7, r0
 800446c:	1c58      	adds	r0, r3, #1
 800446e:	7010      	strb	r0, [r2, #0]
 8004470:	001a      	movs	r2, r3
 8004472:	b2c9      	uxtb	r1, r1
 8004474:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004476:	195b      	adds	r3, r3, r5
 8004478:	19db      	adds	r3, r3, r7
 800447a:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 800447c:	193b      	adds	r3, r7, r4
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4a0c      	ldr	r2, [pc, #48]	@ (80044b4 <ModbusSlaveTransaction+0x238>)
 8004482:	1952      	adds	r2, r2, r5
 8004484:	19d2      	adds	r2, r2, r7
 8004486:	2100      	movs	r1, #0
 8004488:	54d1      	strb	r1, [r2, r3]

  // Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 800448a:	193b      	adds	r3, r7, r4
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	230c      	movs	r3, #12
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff fe5d 	bl	8004154 <SerializeDMAArray_RS485>

	// _ASM: Semaforo de comunicación verde
	timeClearComst = 70;               //Refresca el contador de tiempo
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <ModbusSlaveTransaction+0x24c>)
 800449c:	2246      	movs	r2, #70	@ 0x46
 800449e:	801a      	strh	r2, [r3, #0]


}
 80044a0:	46c0      	nop			@ (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b045      	add	sp, #276	@ 0x114
 80044a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a8:	fffffef7 	.word	0xfffffef7
 80044ac:	50000800 	.word	0x50000800
 80044b0:	20000365 	.word	0x20000365
 80044b4:	fffffefc 	.word	0xfffffefc
 80044b8:	200003b4 	.word	0x200003b4
 80044bc:	20000368 	.word	0x20000368
 80044c0:	20000370 	.word	0x20000370
 80044c4:	20000ae4 	.word	0x20000ae4
 80044c8:	200010b2 	.word	0x200010b2

080044cc <ModbusSlaveExceptionTransaction>:
//------------------------------------------------------------------------------------------------------------------
// Respuestas de excepcion para Modbus
void		ModbusSlaveExceptionTransaction (uint8_t ExceptionCode)
{
 80044cc:	b5b0      	push	{r4, r5, r7, lr}
 80044ce:	b0c4      	sub	sp, #272	@ 0x110
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	0002      	movs	r2, r0
 80044d4:	4b51      	ldr	r3, [pc, #324]	@ (800461c <ModbusSlaveExceptionTransaction+0x150>)
 80044d6:	2588      	movs	r5, #136	@ 0x88
 80044d8:	006d      	lsls	r5, r5, #1
 80044da:	195b      	adds	r3, r3, r5
 80044dc:	19db      	adds	r3, r3, r7
 80044de:	701a      	strb	r2, [r3, #0]


  uint8_t u8ModbusADU[256];
  uint8_t u8ModbusADUSize = 0;
 80044e0:	240c      	movs	r4, #12
 80044e2:	34ff      	adds	r4, #255	@ 0xff
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  uint16_t u16CRC;

   asm ("nop");
 80044ea:	46c0      	nop			@ (mov r8, r8)

	// Semaforo de comunicación amarillo
	timeClearComst1=20;		//		Carga tiempo con 20 segundos
 80044ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004620 <ModbusSlaveExceptionTransaction+0x154>)
 80044ee:	2214      	movs	r2, #20
 80044f0:	801a      	strh	r2, [r3, #0]


	//Hablita la trasnmision 17-Dic-2021
    HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_SET);      //28-May-2024:  Habilita trasnmision por modbus
 80044f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004624 <ModbusSlaveExceptionTransaction+0x158>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	2104      	movs	r1, #4
 80044f8:	0018      	movs	r0, r3
 80044fa:	f00f f8e0 	bl	80136be <HAL_GPIO_WritePin>

	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;						//Manuel 1-dic-2021, para todas las respuestas inician asi
 80044fe:	193b      	adds	r3, r7, r4
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	193a      	adds	r2, r7, r4
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	7011      	strb	r1, [r2, #0]
 8004508:	001a      	movs	r2, r3
 800450a:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <ModbusSlaveExceptionTransaction+0x15c>)
 800450c:	7819      	ldrb	r1, [r3, #0]
 800450e:	4b47      	ldr	r3, [pc, #284]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004510:	195b      	adds	r3, r3, r5
 8004512:	19db      	adds	r3, r3, r7
 8004514:	5499      	strb	r1, [r3, r2]
	u8ModbusADU[u8ModbusADUSize++] = (u8MBFunctionSlave | 0x80);			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004516:	4b46      	ldr	r3, [pc, #280]	@ (8004630 <ModbusSlaveExceptionTransaction+0x164>)
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	193b      	adds	r3, r7, r4
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	1939      	adds	r1, r7, r4
 8004520:	1c58      	adds	r0, r3, #1
 8004522:	7008      	strb	r0, [r1, #0]
 8004524:	0019      	movs	r1, r3
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	425b      	negs	r3, r3
 800452a:	4313      	orrs	r3, r2
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4b3f      	ldr	r3, [pc, #252]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004530:	195b      	adds	r3, r3, r5
 8004532:	19db      	adds	r3, r3, r7
 8004534:	545a      	strb	r2, [r3, r1]
	u8ModbusADU[u8ModbusADUSize++] = ExceptionCode;			//Manuel 1-dic-2021, para todas las respuestas inician asi
 8004536:	193b      	adds	r3, r7, r4
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	193a      	adds	r2, r7, r4
 800453c:	1c59      	adds	r1, r3, #1
 800453e:	7011      	strb	r1, [r2, #0]
 8004540:	0019      	movs	r1, r3
 8004542:	4b3a      	ldr	r3, [pc, #232]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004544:	195b      	adds	r3, r3, r5
 8004546:	19db      	adds	r3, r3, r7
 8004548:	4a34      	ldr	r2, [pc, #208]	@ (800461c <ModbusSlaveExceptionTransaction+0x150>)
 800454a:	1952      	adds	r2, r2, r5
 800454c:	19d2      	adds	r2, r2, r7
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	545a      	strb	r2, [r3, r1]

  // append CRC
  u16CRC = 0xFFFF;
 8004552:	2386      	movs	r3, #134	@ 0x86
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2201      	movs	r2, #1
 800455a:	4252      	negs	r2, r2
 800455c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 800455e:	2310      	movs	r3, #16
 8004560:	33ff      	adds	r3, #255	@ 0xff
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	e019      	b.n	800459e <ModbusSlaveExceptionTransaction+0xd2>
  {
    u16CRC = crc16_update(u16CRC, u8ModbusADU[i]);
 800456a:	2510      	movs	r5, #16
 800456c:	35ff      	adds	r5, #255	@ 0xff
 800456e:	197b      	adds	r3, r7, r5
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 8004574:	2188      	movs	r1, #136	@ 0x88
 8004576:	0049      	lsls	r1, r1, #1
 8004578:	1852      	adds	r2, r2, r1
 800457a:	19d2      	adds	r2, r2, r7
 800457c:	5cd2      	ldrb	r2, [r2, r3]
 800457e:	2386      	movs	r3, #134	@ 0x86
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	18fc      	adds	r4, r7, r3
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	0011      	movs	r1, r2
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff fe02 	bl	8004194 <crc16_update>
 8004590:	0003      	movs	r3, r0
 8004592:	8023      	strh	r3, [r4, #0]
  for (i = 0; i < u8ModbusADUSize; i++)
 8004594:	197b      	adds	r3, r7, r5
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	197b      	adds	r3, r7, r5
 800459a:	3201      	adds	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	2310      	movs	r3, #16
 80045a0:	33ff      	adds	r3, #255	@ 0xff
 80045a2:	18fa      	adds	r2, r7, r3
 80045a4:	200c      	movs	r0, #12
 80045a6:	30ff      	adds	r0, #255	@ 0xff
 80045a8:	183b      	adds	r3, r7, r0
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3db      	bcc.n	800456a <ModbusSlaveExceptionTransaction+0x9e>
  }
  u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	183a      	adds	r2, r7, r0
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	7011      	strb	r1, [r2, #0]
 80045bc:	001a      	movs	r2, r3
 80045be:	2486      	movs	r4, #134	@ 0x86
 80045c0:	0064      	lsls	r4, r4, #1
 80045c2:	193b      	adds	r3, r7, r4
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b2d9      	uxtb	r1, r3
 80045c8:	4b18      	ldr	r3, [pc, #96]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 80045ca:	2588      	movs	r5, #136	@ 0x88
 80045cc:	006d      	lsls	r5, r5, #1
 80045ce:	195b      	adds	r3, r3, r5
 80045d0:	19db      	adds	r3, r3, r7
 80045d2:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 80045d4:	193b      	adds	r3, r7, r4
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	b299      	uxth	r1, r3
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	0004      	movs	r4, r0
 80045e2:	183a      	adds	r2, r7, r0
 80045e4:	1c58      	adds	r0, r3, #1
 80045e6:	7010      	strb	r0, [r2, #0]
 80045e8:	001a      	movs	r2, r3
 80045ea:	b2c9      	uxtb	r1, r1
 80045ec:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 80045ee:	195b      	adds	r3, r3, r5
 80045f0:	19db      	adds	r3, r3, r7
 80045f2:	5499      	strb	r1, [r3, r2]
  u8ModbusADU[u8ModbusADUSize] = 0;       // Manuel, ver si borro este Quantity, me podria servir para el DMA
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	4a0c      	ldr	r2, [pc, #48]	@ (800462c <ModbusSlaveExceptionTransaction+0x160>)
 80045fa:	1952      	adds	r2, r2, r5
 80045fc:	19d2      	adds	r2, r2, r7
 80045fe:	2100      	movs	r1, #0
 8004600:	54d1      	strb	r1, [r2, r3]


	// Manuel 06-dic-2021 : Transmite la respuesta al MASTER
	SerializeDMAArray_RS485 (u8ModbusADU,u8ModbusADUSize);
 8004602:	193b      	adds	r3, r7, r4
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	2308      	movs	r3, #8
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff fda1 	bl	8004154 <SerializeDMAArray_RS485>

}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b044      	add	sp, #272	@ 0x110
 8004618:	bdb0      	pop	{r4, r5, r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	fffffef7 	.word	0xfffffef7
 8004620:	200010b4 	.word	0x200010b4
 8004624:	50000800 	.word	0x50000800
 8004628:	20000365 	.word	0x20000365
 800462c:	fffffef8 	.word	0xfffffef8
 8004630:	200003b4 	.word	0x200003b4

08004634 <ModbusSlavePool>:
//------------------------------------------------------------------------------------------------------------------
//Completa--------------------------------   Comienza ModBus  Slave Pool  --------------------------------------------
//------------------------------------------------------------------------------------------------------------------
uint8_t 	ModbusSlavePool (void){
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b0c2      	sub	sp, #264	@ 0x108
 8004638:	af00      	add	r7, sp, #0


	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
 800463a:	1cfb      	adds	r3, r7, #3
 800463c:	33ff      	adds	r3, #255	@ 0xff
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	uint16_t u16CRC;
	uint8_t u8MBStatus = 0xFF;
 8004642:	1d3b      	adds	r3, r7, #4
 8004644:	33ff      	adds	r3, #255	@ 0xff
 8004646:	22ff      	movs	r2, #255	@ 0xff
 8004648:	701a      	strb	r2, [r3, #0]

	// Leego algo por el Serial ???
	u8ModbusADUSize = serialEvent_RS485 ();
 800464a:	1cfc      	adds	r4, r7, #3
 800464c:	34ff      	adds	r4, #255	@ 0xff
 800464e:	f7ff fd17 	bl	8004080 <serialEvent_RS485>
 8004652:	0003      	movs	r3, r0
 8004654:	7023      	strb	r3, [r4, #0]
	asm ("nop");
 8004656:	46c0      	nop			@ (mov r8, r8)
	asm ("nop");
 8004658:	46c0      	nop			@ (mov r8, r8)

	if (receivecomplete_RS485){
 800465a:	4b5a      	ldr	r3, [pc, #360]	@ (80047c4 <ModbusSlavePool+0x190>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d100      	bne.n	8004664 <ModbusSlavePool+0x30>
 8004662:	e0a8      	b.n	80047b6 <ModbusSlavePool+0x182>
		receivecomplete_RS485 = 0;
 8004664:	4b57      	ldr	r3, [pc, #348]	@ (80047c4 <ModbusSlavePool+0x190>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
		u8MBStatus = ku8MBSuccess;
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	33ff      	adds	r3, #255	@ 0xff
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
    // verify response is for correct Modbus slave
    if (SerialAnsModBus[0] == _u8MBSlave){			// Manuel 1-dic-2021, Matchea con el Address
 8004672:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	4b55      	ldr	r3, [pc, #340]	@ (80047cc <ModbusSlavePool+0x198>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d000      	beq.n	8004680 <ModbusSlavePool+0x4c>
 800467e:	e091      	b.n	80047a4 <ModbusSlavePool+0x170>

			u8MBFunctionSlave = SerialAnsModBus[1];				//Manuel 30-Nov-2021
 8004680:	4b51      	ldr	r3, [pc, #324]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004682:	785a      	ldrb	r2, [r3, #1]
 8004684:	4b52      	ldr	r3, [pc, #328]	@ (80047d0 <ModbusSlavePool+0x19c>)
 8004686:	701a      	strb	r2, [r3, #0]

			// verify response is for correct Modbus function code (mask exception bit 7)
      if ((SerialAnsModBus[1] & 0x7F) != u8MBFunctionSlave)
 8004688:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <ModbusSlavePool+0x194>)
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	001a      	movs	r2, r3
 800468e:	237f      	movs	r3, #127	@ 0x7f
 8004690:	4013      	ands	r3, r2
 8004692:	4a4f      	ldr	r2, [pc, #316]	@ (80047d0 <ModbusSlavePool+0x19c>)
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <ModbusSlavePool+0x6e>
      {
        u8MBStatus = ku8MBInvalidFunction;
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	33ff      	adds	r3, #255	@ 0xff
 800469e:	22e1      	movs	r2, #225	@ 0xe1
 80046a0:	701a      	strb	r2, [r3, #0]
        // Manuel: Rompia el While	break;
      }

			// calculate CRC
			u16CRC = 0xFFFF;
 80046a2:	1d7b      	adds	r3, r7, #5
 80046a4:	33ff      	adds	r3, #255	@ 0xff
 80046a6:	2201      	movs	r2, #1
 80046a8:	4252      	negs	r2, r2
 80046aa:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 80046ac:	2308      	movs	r3, #8
 80046ae:	33ff      	adds	r3, #255	@ 0xff
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e015      	b.n	80046e4 <ModbusSlavePool+0xb0>
				u16CRC = crc16_update(u16CRC, SerialAnsModBus[i]);
 80046b8:	2508      	movs	r5, #8
 80046ba:	35ff      	adds	r5, #255	@ 0xff
 80046bc:	197b      	adds	r3, r7, r5
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	4a41      	ldr	r2, [pc, #260]	@ (80047c8 <ModbusSlavePool+0x194>)
 80046c2:	5cd2      	ldrb	r2, [r2, r3]
 80046c4:	1d7c      	adds	r4, r7, #5
 80046c6:	34ff      	adds	r4, #255	@ 0xff
 80046c8:	1d7b      	adds	r3, r7, #5
 80046ca:	33ff      	adds	r3, #255	@ 0xff
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fd5f 	bl	8004194 <crc16_update>
 80046d6:	0003      	movs	r3, r0
 80046d8:	8023      	strh	r3, [r4, #0]
			for (i = 0; i < (u8ModbusADUSize - 2); i++){
 80046da:	197b      	adds	r3, r7, r5
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	197b      	adds	r3, r7, r5
 80046e0:	3201      	adds	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	2308      	movs	r3, #8
 80046e6:	33ff      	adds	r3, #255	@ 0xff
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	1cfb      	adds	r3, r7, #3
 80046ee:	33ff      	adds	r3, #255	@ 0xff
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	3b02      	subs	r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	dbdf      	blt.n	80046b8 <ModbusSlavePool+0x84>
			}

			// verify CRC
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	33ff      	adds	r3, #255	@ 0xff
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <ModbusSlavePool+0x10a>
 8004702:	1d7b      	adds	r3, r7, #5
 8004704:	33ff      	adds	r3, #255	@ 0xff
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	1cfb      	adds	r3, r7, #3
 800470c:	33ff      	adds	r3, #255	@ 0xff
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	3b02      	subs	r3, #2
 8004712:	492d      	ldr	r1, [pc, #180]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	429a      	cmp	r2, r3
 8004718:	d10d      	bne.n	8004736 <ModbusSlavePool+0x102>
      highByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 1]))
 800471a:	1d7b      	adds	r3, r7, #5
 800471c:	33ff      	adds	r3, #255	@ 0xff
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	b29b      	uxth	r3, r3
 8004724:	b2da      	uxtb	r2, r3
 8004726:	1cfb      	adds	r3, r7, #3
 8004728:	33ff      	adds	r3, #255	@ 0xff
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4926      	ldr	r1, [pc, #152]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004730:	5ccb      	ldrb	r3, [r1, r3]
			if (!u8MBStatus && (lowByte(u16CRC) != SerialAnsModBus[u8ModbusADUSize - 2] ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d003      	beq.n	800473e <ModbusSlavePool+0x10a>
			{
				u8MBStatus = ku8MBInvalidCRC;
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	33ff      	adds	r3, #255	@ 0xff
 800473a:	22e3      	movs	r2, #227	@ 0xe3
 800473c:	701a      	strb	r2, [r3, #0]
			}

			// evaluate  Modbus function code
			switch(u8MBFunctionSlave)
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <ModbusSlavePool+0x19c>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d019      	beq.n	800477a <ModbusSlavePool+0x146>
 8004746:	dc36      	bgt.n	80047b6 <ModbusSlavePool+0x182>
 8004748:	2b04      	cmp	r3, #4
 800474a:	dc34      	bgt.n	80047b6 <ModbusSlavePool+0x182>
 800474c:	2b03      	cmp	r3, #3
 800474e:	db31      	blt.n	80047b4 <ModbusSlavePool+0x180>
			{
				case ku8MBReadCoils:	break;
				case ku8MBReadDiscreteInputs: break;
				case ku8MBReadInputRegisters: 					//Manuel 20-MAR-200:	break;
				case ku8MBReadHoldingRegisters:
					_u16ReadAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 8004750:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	b29b      	uxth	r3, r3
 8004758:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <ModbusSlavePool+0x194>)
 800475a:	78d2      	ldrb	r2, [r2, #3]
 800475c:	189b      	adds	r3, r3, r2
 800475e:	b29a      	uxth	r2, r3
 8004760:	4b1c      	ldr	r3, [pc, #112]	@ (80047d4 <ModbusSlavePool+0x1a0>)
 8004762:	801a      	strh	r2, [r3, #0]
					_u16ReadQty = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];						// Data Address Request
 8004764:	4b18      	ldr	r3, [pc, #96]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004766:	791b      	ldrb	r3, [r3, #4]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	b29b      	uxth	r3, r3
 800476c:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <ModbusSlavePool+0x194>)
 800476e:	7952      	ldrb	r2, [r2, #5]
 8004770:	189b      	adds	r3, r3, r2
 8004772:	b29a      	uxth	r2, r3
 8004774:	4b18      	ldr	r3, [pc, #96]	@ (80047d8 <ModbusSlavePool+0x1a4>)
 8004776:	801a      	strh	r2, [r3, #0]
				break;
 8004778:	e01d      	b.n	80047b6 <ModbusSlavePool+0x182>
				case ku8MBWriteSingleRegister:           																	// Manuel 10-Ene-2022 : Nuevo case para la escritura
					_u16WriteAddress = (SerialAnsModBus[2]*256) + SerialAnsModBus[3];				// Data Address Request
 800477a:	4b13      	ldr	r3, [pc, #76]	@ (80047c8 <ModbusSlavePool+0x194>)
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	b29b      	uxth	r3, r3
 8004782:	4a11      	ldr	r2, [pc, #68]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004784:	78d2      	ldrb	r2, [r2, #3]
 8004786:	189b      	adds	r3, r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <ModbusSlavePool+0x1a8>)
 800478c:	801a      	strh	r2, [r3, #0]
					_u16WriteVal = (SerialAnsModBus[4]*256) + SerialAnsModBus[5];
 800478e:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	b29b      	uxth	r3, r3
 8004796:	4a0c      	ldr	r2, [pc, #48]	@ (80047c8 <ModbusSlavePool+0x194>)
 8004798:	7952      	ldrb	r2, [r2, #5]
 800479a:	189b      	adds	r3, r3, r2
 800479c:	b29a      	uxth	r2, r3
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <ModbusSlavePool+0x1ac>)
 80047a0:	801a      	strh	r2, [r3, #0]
				break;
 80047a2:	e008      	b.n	80047b6 <ModbusSlavePool+0x182>
			}

		}
		else{
			u8MBStatus = ku8MBInvalidSlaveID;
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	33ff      	adds	r3, #255	@ 0xff
 80047a8:	22e0      	movs	r2, #224	@ 0xe0
 80047aa:	701a      	strb	r2, [r3, #0]

			// Semaforo de comunicación amarillo
			timeClearComst1 =20;		//		Carga tiempo con 20 segundos
 80047ac:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <ModbusSlavePool+0x1b0>)
 80047ae:	2214      	movs	r2, #20
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	e000      	b.n	80047b6 <ModbusSlavePool+0x182>
				case ku8MBReadCoils:	break;
 80047b4:	46c0      	nop			@ (mov r8, r8)

		}
	}


return u8MBStatus;
 80047b6:	1d3b      	adds	r3, r7, #4
 80047b8:	33ff      	adds	r3, #255	@ 0xff
 80047ba:	781b      	ldrb	r3, [r3, #0]
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b042      	add	sp, #264	@ 0x108
 80047c2:	bdb0      	pop	{r4, r5, r7, pc}
 80047c4:	20000364 	.word	0x20000364
 80047c8:	20000ae4 	.word	0x20000ae4
 80047cc:	20000365 	.word	0x20000365
 80047d0:	200003b4 	.word	0x200003b4
 80047d4:	20000366 	.word	0x20000366
 80047d8:	20000368 	.word	0x20000368
 80047dc:	2000036a 	.word	0x2000036a
 80047e0:	2000036c 	.word	0x2000036c
 80047e4:	200010b4 	.word	0x200010b4

080047e8 <AtParsing_Ble>:
//********************************************************************************************************************************
//------------------------------------------------------------------------------------------------------------------------------------------------
/*
*/
unsigned int AtParsing_Ble (int Caseuno,int Casedos,char *replystr)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
	unsigned int AnsAtParsing = 0;			// 12-ene-2021, inicializa la respuesta de la funcion
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
	//  manuel if ((MQTT.TCP_Flag == false) && (receivecomplete))
	if (receivecomplete_Ble)
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <AtParsing_Ble+0x3c>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <AtParsing_Ble+0x32>
	{
	  receivecomplete_Ble = 0;
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <AtParsing_Ble+0x3c>)
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]

		if (strstr(SerialAnswBLE, replystr) != 0)  //     NULL != NULL  ?
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <AtParsing_Ble+0x40>)
 800480a:	0011      	movs	r1, r2
 800480c:	0018      	movs	r0, r3
 800480e:	f016 fabf 	bl	801ad90 <strstr>
 8004812:	1e03      	subs	r3, r0, #0
 8004814:	d001      	beq.n	800481a <AtParsing_Ble+0x32>
		{
			AnsAtParsing = Caseuno;		// 12-ene-2021,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	617b      	str	r3, [r7, #20]
		}

	}
	return AnsAtParsing;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b006      	add	sp, #24
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200003b6 	.word	0x200003b6
 8004828:	20000a14 	.word	0x20000a14

0800482c <SerializeString_Ble>:
//--------------------------------------- Serializacion de Strings -------------------------------------------------------
/*
*/
void   SerializeString_Ble (char *tosend)
{
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
		asm ("nop");
 8004834:	46c0      	nop			@ (mov r8, r8)
		uint16_t localLength = strlen(tosend);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fb fc65 	bl	8000108 <strlen>
 800483e:	0002      	movs	r2, r0
 8004840:	240e      	movs	r4, #14
 8004842:	193b      	adds	r3, r7, r4
 8004844:	801a      	strh	r2, [r3, #0]
	    memcpy(TxBuffer_Ble, tosend, localLength);
 8004846:	193b      	adds	r3, r7, r4
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4b07      	ldr	r3, [pc, #28]	@ (800486c <SerializeString_Ble+0x40>)
 800484e:	0018      	movs	r0, r3
 8004850:	f016 faf2 	bl	801ae38 <memcpy>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 8004854:	193b      	adds	r3, r7, r4
 8004856:	881a      	ldrh	r2, [r3, #0]
 8004858:	4904      	ldr	r1, [pc, #16]	@ (800486c <SerializeString_Ble+0x40>)
 800485a:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <SerializeString_Ble+0x44>)
 800485c:	0018      	movs	r0, r3
 800485e:	f014 fccb 	bl	80191f8 <HAL_UART_Transmit_DMA>
}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b005      	add	sp, #20
 8004868:	bd90      	pop	{r4, r7, pc}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	200008f4 	.word	0x200008f4
 8004870:	20000628 	.word	0x20000628

08004874 <SerializeString2>:
//---------------------------------------------------------------------------------------------------------------

void   SerializeString2 (uint8_t *tosend, uint8_t tamano)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	000a      	movs	r2, r1
 800487e:	1cfb      	adds	r3, r7, #3
 8004880:	701a      	strb	r2, [r3, #0]
	asm ("nop");
 8004882:	46c0      	nop			@ (mov r8, r8)
	uint16_t localLength = (uint16_t)tamano;
 8004884:	210e      	movs	r1, #14
 8004886:	187b      	adds	r3, r7, r1
 8004888:	1cfa      	adds	r2, r7, #3
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	801a      	strh	r2, [r3, #0]
    memcpy(TxBuffer_Ble, tosend, localLength);
 800488e:	000c      	movs	r4, r1
 8004890:	187b      	adds	r3, r7, r1
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <SerializeString2+0x40>)
 8004898:	0018      	movs	r0, r3
 800489a:	f016 facd 	bl	801ae38 <memcpy>
	HAL_UART_Transmit_DMA(&huart2, TxBuffer_Ble, localLength);
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	881a      	ldrh	r2, [r3, #0]
 80048a2:	4904      	ldr	r1, [pc, #16]	@ (80048b4 <SerializeString2+0x40>)
 80048a4:	4b04      	ldr	r3, [pc, #16]	@ (80048b8 <SerializeString2+0x44>)
 80048a6:	0018      	movs	r0, r3
 80048a8:	f014 fca6 	bl	80191f8 <HAL_UART_Transmit_DMA>
}
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b005      	add	sp, #20
 80048b2:	bd90      	pop	{r4, r7, pc}
 80048b4:	200008f4 	.word	0x200008f4
 80048b8:	20000628 	.word	0x20000628

080048bc <serialEvent_Ble>:
/*
*/
void serialEvent_Ble ()
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
	//------------------------------------------------------------------------------------------------
		uint16_t sizeBufferRx_1;
		sizeBufferRx_1 = sizeof(RxBuffer_Ble);
 80048c2:	1d3b      	adds	r3, r7, #4
 80048c4:	2290      	movs	r2, #144	@ 0x90
 80048c6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA ( &huart2, RxBuffer_Ble, sizeBufferRx_1 );
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	4929      	ldr	r1, [pc, #164]	@ (8004974 <serialEvent_Ble+0xb8>)
 80048ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004978 <serialEvent_Ble+0xbc>)
 80048d0:	0018      	movs	r0, r3
 80048d2:	f014 fd23 	bl	801931c <HAL_UART_Receive_DMA>

		uint16_t delta;
		uint16_t contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 80048d6:	4b29      	ldr	r3, [pc, #164]	@ (800497c <serialEvent_Ble+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	1cbb      	adds	r3, r7, #2
 80048de:	801a      	strh	r2, [r3, #0]
		if( contadorRx < sizeBufferRx_1 ){						// si cambio esta relacion, es porque ya llego algo al buffer
 80048e0:	1cba      	adds	r2, r7, #2
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d23f      	bcs.n	800496c <serialEvent_Ble+0xb0>

			//timeoutRx ++;
			//if( timeoutRx >= 17 )
			// 18-oct-2021  if( USART1->SR & USART_SR_IDLE )
			if( USART2->ISR & USART_ISR_IDLE ){
 80048ec:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <serialEvent_Ble+0xc4>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	2210      	movs	r2, #16
 80048f2:	4013      	ands	r3, r2
 80048f4:	d03a      	beq.n	800496c <serialEvent_Ble+0xb0>
			// if(__HAL_UART_GET_FLAG(&handleUART1,UART_FLAG_IDLE))
				asm ("nop");
 80048f6:	46c0      	nop			@ (mov r8, r8)

				contadorRx = __HAL_DMA_GET_COUNTER(&hdma_usart2_rx );
 80048f8:	4b20      	ldr	r3, [pc, #128]	@ (800497c <serialEvent_Ble+0xc0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	1cbb      	adds	r3, r7, #2
 8004900:	801a      	strh	r2, [r3, #0]
				delta = sizeBufferRx_1 - contadorRx;
 8004902:	003b      	movs	r3, r7
 8004904:	1d39      	adds	r1, r7, #4
 8004906:	1cba      	adds	r2, r7, #2
 8004908:	8809      	ldrh	r1, [r1, #0]
 800490a:	8812      	ldrh	r2, [r2, #0]
 800490c:	1a8a      	subs	r2, r1, r2
 800490e:	801a      	strh	r2, [r3, #0]
				// HAL_UART_DMAStop(&huart2);
				// HAL_UART_DMAPause(&huart2);
				// HAL_UART_DMAResume(&huart2);
				HAL_UART_AbortReceive(&huart2);
 8004910:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <serialEvent_Ble+0xbc>)
 8004912:	0018      	movs	r0, r3
 8004914:	f014 fd6e 	bl	80193f4 <HAL_UART_AbortReceive>

			    /* Configure the source, destination address and the data length & clear flags*/
			    // DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);


				if( (USART2->ISR & USART_ISR_IDLE)  )
 8004918:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <serialEvent_Ble+0xc4>)
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2210      	movs	r2, #16
 800491e:	4013      	ands	r3, r2
 8004920:	d003      	beq.n	800492a <serialEvent_Ble+0x6e>
					__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8004922:	4b15      	ldr	r3, [pc, #84]	@ (8004978 <serialEvent_Ble+0xbc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2210      	movs	r2, #16
 8004928:	621a      	str	r2, [r3, #32]

				uint8_t i;
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
 8004930:	e00c      	b.n	800494c <serialEvent_Ble+0x90>
					{
						SerialAnswBLE[i]=RxBuffer_Ble[i];
 8004932:	1dfb      	adds	r3, r7, #7
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	1dfb      	adds	r3, r7, #7
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	490e      	ldr	r1, [pc, #56]	@ (8004974 <serialEvent_Ble+0xb8>)
 800493c:	5c89      	ldrb	r1, [r1, r2]
 800493e:	4a11      	ldr	r2, [pc, #68]	@ (8004984 <serialEvent_Ble+0xc8>)
 8004940:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<(sizeof(RxBuffer_Ble)-contadorRx);i++)
 8004942:	1dfb      	adds	r3, r7, #7
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	1dfb      	adds	r3, r7, #7
 8004948:	3201      	adds	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	1dfb      	adds	r3, r7, #7
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	1cbb      	adds	r3, r7, #2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	2190      	movs	r1, #144	@ 0x90
 8004956:	1acb      	subs	r3, r1, r3
 8004958:	429a      	cmp	r2, r3
 800495a:	d3ea      	bcc.n	8004932 <serialEvent_Ble+0x76>
					}
				SerialAnswBLE[i]= 0;					// Add Null byte
 800495c:	1dfb      	adds	r3, r7, #7
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	4a08      	ldr	r2, [pc, #32]	@ (8004984 <serialEvent_Ble+0xc8>)
 8004962:	2100      	movs	r1, #0
 8004964:	54d1      	strb	r1, [r2, r3]
				receivecomplete_Ble = 1;
 8004966:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <serialEvent_Ble+0xcc>)
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
			}

		}
}
 800496c:	46c0      	nop			@ (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000984 	.word	0x20000984
 8004978:	20000628 	.word	0x20000628
 800497c:	20000750 	.word	0x20000750
 8004980:	40004400 	.word	0x40004400
 8004984:	20000a14 	.word	0x20000a14
 8004988:	200003b6 	.word	0x200003b6

0800498c <SendATreply_Ble>:
//----------------------------------------------------------------------------------------------------------------------
unsigned int SendATreply_Ble(char command[20], char replystr[30],int Caseuno,int Casedos, unsigned long waitms)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	@ 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
	unsigned int AnsSendATreply = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
	char reply[20];			;//	char reply[10];

	if (!WaitSerAnsw_Ble)
 800499e:	4b18      	ldr	r3, [pc, #96]	@ (8004a00 <SendATreply_Ble+0x74>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4053      	eors	r3, r2
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00c      	beq.n	80049c6 <SendATreply_Ble+0x3a>
	{
		WaitSerAnsw_Ble = 1;  						// bandera, esperando respuesta por el puerto serial
 80049ac:	4b14      	ldr	r3, [pc, #80]	@ (8004a00 <SendATreply_Ble+0x74>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]

		PrevMillis = millis();
 80049b2:	f004 fce9 	bl	8009388 <millis>
 80049b6:	0003      	movs	r3, r0
 80049b8:	001a      	movs	r2, r3
 80049ba:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <SendATreply_Ble+0x78>)
 80049bc:	601a      	str	r2, [r3, #0]
		// Test Manuel 03-sep-2021 	strcpy(reply, replystr);       //????????? Modificar esta funcion para mandar argunto dentro de la misma

		SerializeString_Ble(command);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff ff33 	bl	800482c <SerializeString_Ble>
	}

	serialEvent_Ble();                  // Manuel, Hace revision si llego algun dato serial
 80049c6:	f7ff ff79 	bl	80048bc <serialEvent_Ble>

	AnsSendATreply = AtParsing_Ble(Caseuno,Casedos,replystr);  // 12-ene-2021
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff ff09 	bl	80047e8 <AtParsing_Ble>
 80049d6:	0003      	movs	r3, r0
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24

	//02-SEP-2021		  currentMillis = millis();       // Manuel, se actualizan los ms que estan transcurriendo actualmente
	if ((millis() - PrevMillis) >= waitms)
 80049da:	f004 fcd5 	bl	8009388 <millis>
 80049de:	0003      	movs	r3, r0
 80049e0:	001a      	movs	r2, r3
 80049e2:	4b08      	ldr	r3, [pc, #32]	@ (8004a04 <SendATreply_Ble+0x78>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d802      	bhi.n	80049f4 <SendATreply_Ble+0x68>
	{
		WaitSerAnsw_Ble = 0;	// intenta nuevamente el comando
 80049ee:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <SendATreply_Ble+0x74>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
	}

	return	AnsSendATreply;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b00a      	add	sp, #40	@ 0x28
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	200003b5 	.word	0x200003b5
 8004a04:	200003b8 	.word	0x200003b8

08004a08 <SetUpBluetooth_Ble>:
//*************************************************************************************************

static unsigned int  ParamItem = 1;
static unsigned int  BaudRateTest = 1;

void SetUpBluetooth_Ble(){
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	//if (findLastValue((uint32_t)&eePlantilla[eeFlagBLE]) == 0){				// Mauel 09-dic-2021:	Si ya fue configurado "EEPROM VAR", jamas vuelve a llamar a configuracion ???
		ConfigBLE_Ble ();
 8004a0c:	f000 f810 	bl	8004a30 <ConfigBLE_Ble>
	//}
	//else{
	//	if (tick_1s == 1){
			BluetoothState = 2;
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <SetUpBluetooth_Ble+0x20>)
 8004a12:	2202      	movs	r2, #2
 8004a14:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004a16:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <SetUpBluetooth_Ble+0x24>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2140      	movs	r1, #64	@ 0x40
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f00e fe4e 	bl	80136be <HAL_GPIO_WritePin>
			//GPIOC->BSRR = GPIO_BSRR_BR_6;
	//	}
	//}
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	2000004c 	.word	0x2000004c
 8004a2c:	50000800 	.word	0x50000800

08004a30 <ConfigBLE_Ble>:

void	ConfigBLE_Ble (){
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af02      	add	r7, sp, #8

	if (tick_1s == 1){
 8004a36:	4b23      	ldr	r3, [pc, #140]	@ (8004ac4 <ConfigBLE_Ble+0x94>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <ConfigBLE_Ble+0x1a>
		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);    // Libera la energia del modulo, despues de 1 segundo del power on
 8004a3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ac8 <ConfigBLE_Ble+0x98>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	2140      	movs	r1, #64	@ 0x40
 8004a44:	0018      	movs	r0, r3
 8004a46:	f00e fe3a 	bl	80136be <HAL_GPIO_WritePin>
		//GPIOC->BSRR = GPIO_BSRR_BR_6;
	}

	switch (ParamItem){
 8004a4a:	4b20      	ldr	r3, [pc, #128]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d002      	beq.n	8004a58 <ConfigBLE_Ble+0x28>
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d014      	beq.n	8004a80 <ConfigBLE_Ble+0x50>
 8004a56:	e027      	b.n	8004aa8 <ConfigBLE_Ble+0x78>
	  uint8_t i;


		case 1:			//  Manuel,   Baud Rate Scan
			if (SendATreply_Ble("BLE_AT+AT","BLE_OK\r\n",ParamItem,0,1000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004a58:	4b1c      	ldr	r3, [pc, #112]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	491c      	ldr	r1, [pc, #112]	@ (8004ad0 <ConfigBLE_Ble+0xa0>)
 8004a60:	481c      	ldr	r0, [pc, #112]	@ (8004ad4 <ConfigBLE_Ble+0xa4>)
 8004a62:	23fa      	movs	r3, #250	@ 0xfa
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f7ff ff8f 	bl	800498c <SendATreply_Ble>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	4b16      	ldr	r3, [pc, #88]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d11f      	bne.n	8004ab8 <ConfigBLE_Ble+0x88>
				WaitSerAnsw_Ble_func(5);
 8004a78:	2005      	movs	r0, #5
 8004a7a:	f000 fb2d 	bl	80050d8 <WaitSerAnsw_Ble_func>
					case 9:  ChangeBaud_Ble (230400); break;
					default: BaudRateTest = 0; break;
				}
			}
			*/
			break;
 8004a7e:	e01b      	b.n	8004ab8 <ConfigBLE_Ble+0x88>
				ParamItem = 1;
			}
			break;
*/
	  case 5:			//  Manuel,   Cambia el nombre de difusion
			if (SendATreply_Ble("BLE_AT+NAMEIMBERA-CTOF-F\r\n","BLE_OK\r\n",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004a80:	4b12      	ldr	r3, [pc, #72]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	001a      	movs	r2, r3
 8004a86:	4912      	ldr	r1, [pc, #72]	@ (8004ad0 <ConfigBLE_Ble+0xa0>)
 8004a88:	4813      	ldr	r0, [pc, #76]	@ (8004ad8 <ConfigBLE_Ble+0xa8>)
 8004a8a:	23fa      	movs	r3, #250	@ 0xfa
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2300      	movs	r3, #0
 8004a92:	f7ff ff7b 	bl	800498c <SendATreply_Ble>
 8004a96:	0002      	movs	r2, r0
 8004a98:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <ConfigBLE_Ble+0x9c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d10d      	bne.n	8004abc <ConfigBLE_Ble+0x8c>
				WaitSerAnsw_Ble_func(6);
 8004aa0:	2006      	movs	r0, #6
 8004aa2:	f000 fb19 	bl	80050d8 <WaitSerAnsw_Ble_func>
//				WaitSerAnsw_Ble = 0;
//				ParamItem = 6;
			}
			break;
 8004aa6:	e009      	b.n	8004abc <ConfigBLE_Ble+0x8c>
			}
			break;
			*/

		default:
			BluetoothState = 2;
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <ConfigBLE_Ble+0xac>)
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]
			WaitSerAnsw_Ble_func(1);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f000 fb12 	bl	80050d8 <WaitSerAnsw_Ble_func>
//			WaitSerAnsw_Ble = 0;
//			ParamItem = 1;
			asm ("nop");
 8004ab4:	46c0      	nop			@ (mov r8, r8)
			// Termina configuracion, escribe en EEPROM un testigo

				// _ASM: Pendiente a traducir asm

			break;
 8004ab6:	e002      	b.n	8004abe <ConfigBLE_Ble+0x8e>
			break;
 8004ab8:	46c0      	nop			@ (mov r8, r8)
 8004aba:	e000      	b.n	8004abe <ConfigBLE_Ble+0x8e>
			break;
 8004abc:	46c0      	nop			@ (mov r8, r8)
	}
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	200008d7 	.word	0x200008d7
 8004ac8:	50000800 	.word	0x50000800
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	0801b128 	.word	0x0801b128
 8004ad4:	0801b134 	.word	0x0801b134
 8004ad8:	0801b140 	.word	0x0801b140
 8004adc:	2000004c 	.word	0x2000004c

08004ae0 <GetParamBluetooth_Ble>:
  	  Para Adaptar UART2 en otros modelos de BLE
 */

}
//*************************************************************************************************
void GetParamBluetooth_Ble(){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af02      	add	r7, sp, #8
	uint8_t i =0;
 8004ae6:	1dfb      	adds	r3, r7, #7
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
	char *foo;

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004aec:	4b25      	ldr	r3, [pc, #148]	@ (8004b84 <GetParamBluetooth_Ble+0xa4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	2140      	movs	r1, #64	@ 0x40
 8004af2:	0018      	movs	r0, r3
 8004af4:	f00e fde3 	bl	80136be <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	switch (ParamItem){
 8004af8:	4b23      	ldr	r3, [pc, #140]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d002      	beq.n	8004b06 <GetParamBluetooth_Ble+0x26>
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d033      	beq.n	8004b6c <GetParamBluetooth_Ble+0x8c>
	  case 2:			//  Manuel,   Obtiene la Mac Adress
		 BluetoothState = 3;
		 ParamItem = 1;
	 break;
	}
}
 8004b04:	e03a      	b.n	8004b7c <GetParamBluetooth_Ble+0x9c>
		if (SendATreply_Ble("BLE_AT+MAC","BLE_+MAC=",ParamItem,0,2000) == ParamItem){      //  Manuel, retorno un GSM_Response = 1?
 8004b06:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	491f      	ldr	r1, [pc, #124]	@ (8004b8c <GetParamBluetooth_Ble+0xac>)
 8004b0e:	4820      	ldr	r0, [pc, #128]	@ (8004b90 <GetParamBluetooth_Ble+0xb0>)
 8004b10:	23fa      	movs	r3, #250	@ 0xfa
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2300      	movs	r3, #0
 8004b18:	f7ff ff38 	bl	800498c <SendATreply_Ble>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d129      	bne.n	8004b7a <GetParamBluetooth_Ble+0x9a>
			 foo = strchr(SerialAnswBLE,'=');
 8004b26:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <GetParamBluetooth_Ble+0xb4>)
 8004b28:	213d      	movs	r1, #61	@ 0x3d
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f016 f922 	bl	801ad74 <strchr>
 8004b30:	0003      	movs	r3, r0
 8004b32:	603b      	str	r3, [r7, #0]
			 for (i = 0; i<=11; i++)
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e00f      	b.n	8004b5c <GetParamBluetooth_Ble+0x7c>
				 Bloque_handshake [i+2] = foo[i+1];		//macAdress [i] = foo[i+1];
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	18d2      	adds	r2, r2, r3
 8004b46:	1dfb      	adds	r3, r7, #7
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	7811      	ldrb	r1, [r2, #0]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	@ (8004b98 <GetParamBluetooth_Ble+0xb8>)
 8004b50:	54d1      	strb	r1, [r2, r3]
			 for (i = 0; i<=11; i++)
 8004b52:	1dfb      	adds	r3, r7, #7
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	1dfb      	adds	r3, r7, #7
 8004b58:	3201      	adds	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	1dfb      	adds	r3, r7, #7
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b0b      	cmp	r3, #11
 8004b62:	d9eb      	bls.n	8004b3c <GetParamBluetooth_Ble+0x5c>
			 ParamItem = 2;
 8004b64:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b66:	2202      	movs	r2, #2
 8004b68:	601a      	str	r2, [r3, #0]
		 break;
 8004b6a:	e006      	b.n	8004b7a <GetParamBluetooth_Ble+0x9a>
		 BluetoothState = 3;
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <GetParamBluetooth_Ble+0xbc>)
 8004b6e:	2203      	movs	r2, #3
 8004b70:	701a      	strb	r2, [r3, #0]
		 ParamItem = 1;
 8004b72:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <GetParamBluetooth_Ble+0xa8>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
	 break;
 8004b78:	e000      	b.n	8004b7c <GetParamBluetooth_Ble+0x9c>
		 break;
 8004b7a:	46c0      	nop			@ (mov r8, r8)
}
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	50000800 	.word	0x50000800
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	0801b15c 	.word	0x0801b15c
 8004b90:	0801b168 	.word	0x0801b168
 8004b94:	20000a14 	.word	0x20000a14
 8004b98:	20000de0 	.word	0x20000de0
 8004b9c:	2000004c 	.word	0x2000004c

08004ba0 <TransmitReceive_Ble>:
uint8_t PasswordALG = 0 ;       // RGM_8-Dic-2023
uint8_t RndNumber = 0 ;       // RGM_8-Dic-2023      //RM_20240304 Para agregar PASSWORD de seguridad BLE
//uint8_t DevLock = 0 ;       // RGM_8-Dic-2023        //RM_20240304 Para agregar PASSWORD de seguridad BLE

//*************************************************************************************************
void TransmitReceive_Ble(){
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
    asm ("nop");
 8004ba6:	46c0      	nop			@ (mov r8, r8)

	HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Enciende Modulo WIFI
 8004ba8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d18 <TransmitReceive_Ble+0x178>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	2140      	movs	r1, #64	@ 0x40
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f00e fd85 	bl	80136be <HAL_GPIO_WritePin>
	//GPIOC->BSRR = GPIO_BSRR_BR_6;
	serialEvent_Ble ();
 8004bb4:	f7ff fe82 	bl	80048bc <serialEvent_Ble>
	if (receivecomplete_Ble){
 8004bb8:	4b58      	ldr	r3, [pc, #352]	@ (8004d1c <TransmitReceive_Ble+0x17c>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d100      	bne.n	8004bc2 <TransmitReceive_Ble+0x22>
 8004bc0:	e1db      	b.n	8004f7a <TransmitReceive_Ble+0x3da>
		 receivecomplete_Ble = 0;
 8004bc2:	4b56      	ldr	r3, [pc, #344]	@ (8004d1c <TransmitReceive_Ble+0x17c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]

		 //		#include "chkRxFlag.asm"
		 if (flagsRxFirm [1]){    			// Ya se sabe cuantos bloques se van a recibir ?
 8004bc8:	4b55      	ldr	r3, [pc, #340]	@ (8004d20 <TransmitReceive_Ble+0x180>)
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <TransmitReceive_Ble+0x36>
			 flagsRxFirm [2] = 1;				// indica que ya llegó un paquete
 8004bd0:	4b53      	ldr	r3, [pc, #332]	@ (8004d20 <TransmitReceive_Ble+0x180>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	709a      	strb	r2, [r3, #2]
		 }

		 // 18-oct-2021  if (strstr(SerialAnswBLE, "\x40\x21")){
		 if (memcmp(SerialAnswBLE, "\x40\x21",(size_t) 2) == 0){	 		// CÓDIGO DE "CONFIRMACIÓN DE CONEXIÓN (HANDSHAKE)"
 8004bd6:	4953      	ldr	r1, [pc, #332]	@ (8004d24 <TransmitReceive_Ble+0x184>)
 8004bd8:	4b53      	ldr	r3, [pc, #332]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004bda:	2202      	movs	r2, #2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f016 f8b3 	bl	801ad48 <memcmp>
 8004be2:	1e03      	subs	r3, r0, #0
 8004be4:	d102      	bne.n	8004bec <TransmitReceive_Ble+0x4c>
			 codeTX = 0x21;
 8004be6:	4b51      	ldr	r3, [pc, #324]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004be8:	2221      	movs	r2, #33	@ 0x21
 8004bea:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0){		 	// CÓDIGO DE TIEMPO BCD "ESCRITURA DEL TIEMPO EN FORMATO BCD"
 8004bec:	4950      	ldr	r1, [pc, #320]	@ (8004d30 <TransmitReceive_Ble+0x190>)
 8004bee:	4b4e      	ldr	r3, [pc, #312]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f016 f8a8 	bl	801ad48 <memcmp>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d102      	bne.n	8004c02 <TransmitReceive_Ble+0x62>
			 codeTX = 0x5C;
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004bfe:	225c      	movs	r2, #92	@ 0x5c
 8004c00:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0){			// "TOKEN DE FUNCIONAMIENTO AL MÓDULO WIFI"
 8004c02:	494c      	ldr	r1, [pc, #304]	@ (8004d34 <TransmitReceive_Ble+0x194>)
 8004c04:	4b48      	ldr	r3, [pc, #288]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c06:	2202      	movs	r2, #2
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f016 f89d 	bl	801ad48 <memcmp>
 8004c0e:	1e03      	subs	r3, r0, #0
 8004c10:	d102      	bne.n	8004c18 <TransmitReceive_Ble+0x78>
			 codeTX = 0x80;
 8004c12:	4b46      	ldr	r3, [pc, #280]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004c14:	2280      	movs	r2, #128	@ 0x80
 8004c16:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\x40\x81",2) == 0){
 8004c18:	4947      	ldr	r1, [pc, #284]	@ (8004d38 <TransmitReceive_Ble+0x198>)
 8004c1a:	4b43      	ldr	r3, [pc, #268]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f016 f892 	bl	801ad48 <memcmp>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d102      	bne.n	8004c2e <TransmitReceive_Ble+0x8e>
			 codeTX = 0x81;
 8004c28:	4b40      	ldr	r3, [pc, #256]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004c2a:	2281      	movs	r2, #129	@ 0x81
 8004c2c:	701a      	strb	r2, [r3, #0]
		 }
		 if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0){			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8004c2e:	4943      	ldr	r1, [pc, #268]	@ (8004d3c <TransmitReceive_Ble+0x19c>)
 8004c30:	4b3d      	ldr	r3, [pc, #244]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c32:	2202      	movs	r2, #2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f016 f887 	bl	801ad48 <memcmp>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d102      	bne.n	8004c44 <TransmitReceive_Ble+0xa4>
			 codeTX = 0x3D;
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d2c <TransmitReceive_Ble+0x18c>)
 8004c40:	223d      	movs	r2, #61	@ 0x3d
 8004c42:	701a      	strb	r2, [r3, #0]
		 }


		 if (memcmp(SerialAnswBLE, "\x40\x5E",2) == 0){		   // CÓDIGO DE DESBLOQUEO TEMPORAL
 8004c44:	493e      	ldr	r1, [pc, #248]	@ (8004d40 <TransmitReceive_Ble+0x1a0>)
 8004c46:	4b38      	ldr	r3, [pc, #224]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c48:	2202      	movs	r2, #2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f016 f87c 	bl	801ad48 <memcmp>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d106      	bne.n	8004c62 <TransmitReceive_Ble+0xc2>
			 //timeUnlockWIFI = 255;	// carga tiempo de desbloqueo de comandos protegidos por password
			 DevLock = 0x72;
 8004c54:	4b3b      	ldr	r3, [pc, #236]	@ (8004d44 <TransmitReceive_Ble+0x1a4>)
 8004c56:	2272      	movs	r2, #114	@ 0x72
 8004c58:	701a      	strb	r2, [r3, #0]
			 //	#pragma asm
			 // Carga datos de bloque para transmitir la respuesta
			 grabacion_exitosa_handshake();
 8004c5a:	f000 fa53 	bl	8005104 <grabacion_exitosa_handshake>
//			 Bloque_handshake[comando1] =	0xF1;	//comando1 = 0xF1;
//			 Bloque_handshake[comando2] =  0x3D;	//comando2 = 0x3D;				// indica que la grabación fue exitosa

			//pointTx = (uint16_t)&comando1;
			manda_transmision();
 8004c5e:	f000 fa5f 	bl	8005120 <manda_transmision>
			///flagsTX [3] = 1;				// evita que se Calcule y se mande checksum
			//keyTx = 0x55;					// listo para mandar transmisión
		 }
		// Inicia preambulo para password
		//if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x70",2) == 0){
 8004c62:	4939      	ldr	r1, [pc, #228]	@ (8004d48 <TransmitReceive_Ble+0x1a8>)
 8004c64:	4b30      	ldr	r3, [pc, #192]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c66:	2202      	movs	r2, #2
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f016 f86d 	bl	801ad48 <memcmp>
 8004c6e:	1e03      	subs	r3, r0, #0
 8004c70:	d112      	bne.n	8004c98 <TransmitReceive_Ble+0xf8>
		    asm ("nop");
 8004c72:	46c0      	nop			@ (mov r8, r8)
			PasswordALG = RndNumber;
 8004c74:	4b35      	ldr	r3, [pc, #212]	@ (8004d4c <TransmitReceive_Ble+0x1ac>)
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	4b35      	ldr	r3, [pc, #212]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004c7a:	701a      	strb	r2, [r3, #0]
			ImberaProtocolBuffer[0] = (char)(PasswordALG);   // RGM_29/NOV/2023 se manda sin complemento
 8004c7c:	4b34      	ldr	r3, [pc, #208]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004c7e:	781a      	ldrb	r2, [r3, #0]
 8004c80:	4b34      	ldr	r3, [pc, #208]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004c82:	701a      	strb	r2, [r3, #0]
			sizeTX = 1;  // 4;
 8004c84:	4b34      	ldr	r3, [pc, #208]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004c8a:	4b33      	ldr	r3, [pc, #204]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	4b31      	ldr	r3, [pc, #196]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004c90:	0011      	movs	r1, r2
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7ff fdee 	bl	8004874 <SerializeString2>
		 }
		// Step2 Comprobacion MAC para password
		//if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0){
		if (memcmp(SerialAnswBLE, "\x40\x71",2) == 0){
 8004c98:	4930      	ldr	r1, [pc, #192]	@ (8004d5c <TransmitReceive_Ble+0x1bc>)
 8004c9a:	4b23      	ldr	r3, [pc, #140]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f016 f852 	bl	801ad48 <memcmp>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d16d      	bne.n	8004d84 <TransmitReceive_Ble+0x1e4>
			uint8_t foo,foo2;
		    asm ("nop");
 8004ca8:	46c0      	nop			@ (mov r8, r8)
			foo = PasswordALG & (~0xF0);
 8004caa:	4b29      	ldr	r3, [pc, #164]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	210f      	movs	r1, #15
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	701a      	strb	r2, [r3, #0]
			if (foo >0x0B)
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b0b      	cmp	r3, #11
 8004cbc:	d905      	bls.n	8004cca <TransmitReceive_Ble+0x12a>
			  foo = PasswordALG & (~0xF8);
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	2107      	movs	r1, #7
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	701a      	strb	r2, [r3, #0]
			foo2 = Bloque_handshake [foo+2] + (~PasswordALG);		// foo2 = macAdress [foo] + (~PasswordALG);
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	3302      	adds	r3, #2
 8004cd0:	4a23      	ldr	r2, [pc, #140]	@ (8004d60 <TransmitReceive_Ble+0x1c0>)
 8004cd2:	5cd2      	ldrb	r2, [r2, r3]
 8004cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d50 <TransmitReceive_Ble+0x1b0>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	1dbb      	adds	r3, r7, #6
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
			if (SerialAnswBLE [2] == foo2){
 8004ce2:	4b11      	ldr	r3, [pc, #68]	@ (8004d28 <TransmitReceive_Ble+0x188>)
 8004ce4:	789b      	ldrb	r3, [r3, #2]
 8004ce6:	1dba      	adds	r2, r7, #6
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d13a      	bne.n	8004d64 <TransmitReceive_Ble+0x1c4>
				DevLock = 0x72;    // RGM_29/NOV/2023Dispositivo Desbloqueado
 8004cee:	4b15      	ldr	r3, [pc, #84]	@ (8004d44 <TransmitReceive_Ble+0x1a4>)
 8004cf0:	2272      	movs	r2, #114	@ 0x72
 8004cf2:	701a      	strb	r2, [r3, #0]
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3D;					sizeTX = 2;
 8004cf4:	4b17      	ldr	r3, [pc, #92]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004cf6:	22f1      	movs	r2, #241	@ 0xf1
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	4b16      	ldr	r3, [pc, #88]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004cfc:	223d      	movs	r2, #61	@ 0x3d
 8004cfe:	705a      	strb	r2, [r3, #1]
 8004d00:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004d06:	4b14      	ldr	r3, [pc, #80]	@ (8004d58 <TransmitReceive_Ble+0x1b8>)
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <TransmitReceive_Ble+0x1b4>)
 8004d0c:	0011      	movs	r1, r2
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff fdb0 	bl	8004874 <SerializeString2>
 8004d14:	e036      	b.n	8004d84 <TransmitReceive_Ble+0x1e4>
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	50000800 	.word	0x50000800
 8004d1c:	200003b6 	.word	0x200003b6
 8004d20:	20000edc 	.word	0x20000edc
 8004d24:	0801b174 	.word	0x0801b174
 8004d28:	20000a14 	.word	0x20000a14
 8004d2c:	20000e24 	.word	0x20000e24
 8004d30:	0801b178 	.word	0x0801b178
 8004d34:	0801b17c 	.word	0x0801b17c
 8004d38:	0801b180 	.word	0x0801b180
 8004d3c:	0801b184 	.word	0x0801b184
 8004d40:	0801b188 	.word	0x0801b188
 8004d44:	200010f5 	.word	0x200010f5
 8004d48:	0801b18c 	.word	0x0801b18c
 8004d4c:	200003c5 	.word	0x200003c5
 8004d50:	200003c4 	.word	0x200003c4
 8004d54:	20000e38 	.word	0x20000e38
 8004d58:	20000e32 	.word	0x20000e32
 8004d5c:	0801b190 	.word	0x0801b190
 8004d60:	20000de0 	.word	0x20000de0
			}
			else{
				ImberaProtocolBuffer[0] = 0xF1;							ImberaProtocolBuffer[1] = 0x3E;  				sizeTX = 2;
 8004d64:	4b98      	ldr	r3, [pc, #608]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004d66:	22f1      	movs	r2, #241	@ 0xf1
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	4b97      	ldr	r3, [pc, #604]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004d6c:	223e      	movs	r2, #62	@ 0x3e
 8004d6e:	705a      	strb	r2, [r3, #1]
 8004d70:	4b96      	ldr	r3, [pc, #600]	@ (8004fcc <TransmitReceive_Ble+0x42c>)
 8004d72:	2202      	movs	r2, #2
 8004d74:	701a      	strb	r2, [r3, #0]
				SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004d76:	4b95      	ldr	r3, [pc, #596]	@ (8004fcc <TransmitReceive_Ble+0x42c>)
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	4b93      	ldr	r3, [pc, #588]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7ff fd78 	bl	8004874 <SerializeString2>
			}
		}

		//if ( (DevLock == 0x72) || (timeUnlockWIFI) ){			// Dispositivo desbloqieado por password ?
		if ( (DevLock == 0x72) || (statComWIFIFlag) ){
 8004d84:	4b92      	ldr	r3, [pc, #584]	@ (8004fd0 <TransmitReceive_Ble+0x430>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b72      	cmp	r3, #114	@ 0x72
 8004d8a:	d004      	beq.n	8004d96 <TransmitReceive_Ble+0x1f6>
 8004d8c:	4b91      	ldr	r3, [pc, #580]	@ (8004fd4 <TransmitReceive_Ble+0x434>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d100      	bne.n	8004d96 <TransmitReceive_Ble+0x1f6>
 8004d94:	e0f1      	b.n	8004f7a <TransmitReceive_Ble+0x3da>
		  if (memcmp(SerialAnswBLE, "\x40\x60",2) == 0)			//"Lectura de datos tipo TIEMPO\n\r"
 8004d96:	4990      	ldr	r1, [pc, #576]	@ (8004fd8 <TransmitReceive_Ble+0x438>)
 8004d98:	4b90      	ldr	r3, [pc, #576]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f015 ffd3 	bl	801ad48 <memcmp>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d102      	bne.n	8004dac <TransmitReceive_Ble+0x20c>
			 codeTX = 0x60;
 8004da6:	4b8e      	ldr	r3, [pc, #568]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004da8:	2260      	movs	r2, #96	@ 0x60
 8004daa:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x61",2) == 0)			//"Lectura de datos tipo EVENTO\n\r"
 8004dac:	498d      	ldr	r1, [pc, #564]	@ (8004fe4 <TransmitReceive_Ble+0x444>)
 8004dae:	4b8b      	ldr	r3, [pc, #556]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004db0:	2202      	movs	r2, #2
 8004db2:	0018      	movs	r0, r3
 8004db4:	f015 ffc8 	bl	801ad48 <memcmp>
 8004db8:	1e03      	subs	r3, r0, #0
 8004dba:	d102      	bne.n	8004dc2 <TransmitReceive_Ble+0x222>
			 codeTX = 0x61;
 8004dbc:	4b88      	ldr	r3, [pc, #544]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004dbe:	2261      	movs	r2, #97	@ 0x61
 8004dc0:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x53",2) == 0)			//"Estado en TIEMPO REAL\n\r"
 8004dc2:	4989      	ldr	r1, [pc, #548]	@ (8004fe8 <TransmitReceive_Ble+0x448>)
 8004dc4:	4b85      	ldr	r3, [pc, #532]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f015 ffbd 	bl	801ad48 <memcmp>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d102      	bne.n	8004dd8 <TransmitReceive_Ble+0x238>
			 codeTX = 0x53;
 8004dd2:	4b83      	ldr	r3, [pc, #524]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004dd4:	2253      	movs	r2, #83	@ 0x53
 8004dd6:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x50",2) == 0)			//"MODIFICACION de parametros de operacion\n\r"
 8004dd8:	4984      	ldr	r1, [pc, #528]	@ (8004fec <TransmitReceive_Ble+0x44c>)
 8004dda:	4b80      	ldr	r3, [pc, #512]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ddc:	2202      	movs	r2, #2
 8004dde:	0018      	movs	r0, r3
 8004de0:	f015 ffb2 	bl	801ad48 <memcmp>
 8004de4:	1e03      	subs	r3, r0, #0
 8004de6:	d102      	bne.n	8004dee <TransmitReceive_Ble+0x24e>
			 codeTX = 0x50;
 8004de8:	4b7d      	ldr	r3, [pc, #500]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004dea:	2250      	movs	r2, #80	@ 0x50
 8004dec:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x51",2) == 0)			//"LECTURA de parametros de operacion\n\r"
 8004dee:	4980      	ldr	r1, [pc, #512]	@ (8004ff0 <TransmitReceive_Ble+0x450>)
 8004df0:	4b7a      	ldr	r3, [pc, #488]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004df2:	2202      	movs	r2, #2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f015 ffa7 	bl	801ad48 <memcmp>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d102      	bne.n	8004e04 <TransmitReceive_Ble+0x264>
			 codeTX = 0x51;
 8004dfe:	4b78      	ldr	r3, [pc, #480]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e00:	2251      	movs	r2, #81	@ 0x51
 8004e02:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x46",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e04:	497b      	ldr	r1, [pc, #492]	@ (8004ff4 <TransmitReceive_Ble+0x454>)
 8004e06:	4b75      	ldr	r3, [pc, #468]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e08:	2202      	movs	r2, #2
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f015 ff9c 	bl	801ad48 <memcmp>
 8004e10:	1e03      	subs	r3, r0, #0
 8004e12:	d102      	bne.n	8004e1a <TransmitReceive_Ble+0x27a>
			 codeTX = 0x46;
 8004e14:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e16:	2246      	movs	r2, #70	@ 0x46
 8004e18:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x49",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e1a:	4977      	ldr	r1, [pc, #476]	@ (8004ff8 <TransmitReceive_Ble+0x458>)
 8004e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e1e:	2202      	movs	r2, #2
 8004e20:	0018      	movs	r0, r3
 8004e22:	f015 ff91 	bl	801ad48 <memcmp>
 8004e26:	1e03      	subs	r3, r0, #0
 8004e28:	d102      	bne.n	8004e30 <TransmitReceive_Ble+0x290>
			 codeTX = 0x49;
 8004e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e2c:	2249      	movs	r2, #73	@ 0x49
 8004e2e:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x4A",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e30:	4972      	ldr	r1, [pc, #456]	@ (8004ffc <TransmitReceive_Ble+0x45c>)
 8004e32:	4b6a      	ldr	r3, [pc, #424]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e34:	2202      	movs	r2, #2
 8004e36:	0018      	movs	r0, r3
 8004e38:	f015 ff86 	bl	801ad48 <memcmp>
 8004e3c:	1e03      	subs	r3, r0, #0
 8004e3e:	d102      	bne.n	8004e46 <TransmitReceive_Ble+0x2a6>
			 codeTX = 0x4A;
 8004e40:	4b67      	ldr	r3, [pc, #412]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e42:	224a      	movs	r2, #74	@ 0x4a
 8004e44:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x54",2) == 0)			// código de limpieza de logger
 8004e46:	496e      	ldr	r1, [pc, #440]	@ (8005000 <TransmitReceive_Ble+0x460>)
 8004e48:	4b64      	ldr	r3, [pc, #400]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f015 ff7b 	bl	801ad48 <memcmp>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d102      	bne.n	8004e5c <TransmitReceive_Ble+0x2bc>
			 codeTX = 0x54;
 8004e56:	4b62      	ldr	r3, [pc, #392]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e58:	2254      	movs	r2, #84	@ 0x54
 8004e5a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x80",2) == 0)			//"Modificacion de FIRMWARE\n\r"
 8004e5c:	4969      	ldr	r1, [pc, #420]	@ (8005004 <TransmitReceive_Ble+0x464>)
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e60:	2202      	movs	r2, #2
 8004e62:	0018      	movs	r0, r3
 8004e64:	f015 ff70 	bl	801ad48 <memcmp>
 8004e68:	1e03      	subs	r3, r0, #0
 8004e6a:	d102      	bne.n	8004e72 <TransmitReceive_Ble+0x2d2>
	   		 codeTX = 0x80;
 8004e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e6e:	2280      	movs	r2, #128	@ 0x80
 8004e70:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\xF1\x3D",2) == 0)			// RESPUESTA ENVÍO DE LOGGER MODULO WIFI
 8004e72:	4965      	ldr	r1, [pc, #404]	@ (8005008 <TransmitReceive_Ble+0x468>)
 8004e74:	4b59      	ldr	r3, [pc, #356]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e76:	2202      	movs	r2, #2
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f015 ff65 	bl	801ad48 <memcmp>
 8004e7e:	1e03      	subs	r3, r0, #0
 8004e80:	d102      	bne.n	8004e88 <TransmitReceive_Ble+0x2e8>
	   		 codeTX = 0x3D;
 8004e82:	4b57      	ldr	r3, [pc, #348]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e84:	223d      	movs	r2, #61	@ 0x3d
 8004e86:	701a      	strb	r2, [r3, #0]
		  if (memcmp(SerialAnswBLE, "\x40\x55",2) == 0)			// Grabación de parámetros especificos
 8004e88:	4960      	ldr	r1, [pc, #384]	@ (800500c <TransmitReceive_Ble+0x46c>)
 8004e8a:	4b54      	ldr	r3, [pc, #336]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f015 ff5a 	bl	801ad48 <memcmp>
 8004e94:	1e03      	subs	r3, r0, #0
 8004e96:	d102      	bne.n	8004e9e <TransmitReceive_Ble+0x2fe>
			 codeTX = 0x55;
 8004e98:	4b51      	ldr	r3, [pc, #324]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004e9a:	2255      	movs	r2, #85	@ 0x55
 8004e9c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x56",2) == 0)			// Ejecucuión de estados
 8004e9e:	495c      	ldr	r1, [pc, #368]	@ (8005010 <TransmitReceive_Ble+0x470>)
 8004ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f015 ff4f 	bl	801ad48 <memcmp>
 8004eaa:	1e03      	subs	r3, r0, #0
 8004eac:	d102      	bne.n	8004eb4 <TransmitReceive_Ble+0x314>
	   		 codeTX = 0x56;
 8004eae:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004eb0:	2256      	movs	r2, #86	@ 0x56
 8004eb2:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x57",2) == 0)			// lectura de estados
 8004eb4:	4957      	ldr	r1, [pc, #348]	@ (8005014 <TransmitReceive_Ble+0x474>)
 8004eb6:	4b49      	ldr	r3, [pc, #292]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004eb8:	2202      	movs	r2, #2
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f015 ff44 	bl	801ad48 <memcmp>
 8004ec0:	1e03      	subs	r3, r0, #0
 8004ec2:	d102      	bne.n	8004eca <TransmitReceive_Ble+0x32a>
	   		 codeTX = 0x57;
 8004ec4:	4b46      	ldr	r3, [pc, #280]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004ec6:	2257      	movs	r2, #87	@ 0x57
 8004ec8:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x58",2) == 0)			// CÓDIGO DE TIEMPO UNIX
 8004eca:	4953      	ldr	r1, [pc, #332]	@ (8005018 <TransmitReceive_Ble+0x478>)
 8004ecc:	4b43      	ldr	r3, [pc, #268]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ece:	2202      	movs	r2, #2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f015 ff39 	bl	801ad48 <memcmp>
 8004ed6:	1e03      	subs	r3, r0, #0
 8004ed8:	d102      	bne.n	8004ee0 <TransmitReceive_Ble+0x340>
	   		 codeTX = 0x58;
 8004eda:	4b41      	ldr	r3, [pc, #260]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004edc:	2258      	movs	r2, #88	@ 0x58
 8004ede:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x59",2) == 0)			// CÓDIGO DE ENVÍO DE GEOLOCALIZACIÓN
 8004ee0:	494e      	ldr	r1, [pc, #312]	@ (800501c <TransmitReceive_Ble+0x47c>)
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f015 ff2e 	bl	801ad48 <memcmp>
 8004eec:	1e03      	subs	r3, r0, #0
 8004eee:	d102      	bne.n	8004ef6 <TransmitReceive_Ble+0x356>
	   		 codeTX = 0x59;
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004ef2:	2259      	movs	r2, #89	@ 0x59
 8004ef4:	701a      	strb	r2, [r3, #0]
	      if (memcmp(SerialAnswBLE, "\x40\x5A",2) == 0)			// CÓDIGO DE LECTURA DE GEOLOCALIZACION
 8004ef6:	494a      	ldr	r1, [pc, #296]	@ (8005020 <TransmitReceive_Ble+0x480>)
 8004ef8:	4b38      	ldr	r3, [pc, #224]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004efa:	2202      	movs	r2, #2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f015 ff23 	bl	801ad48 <memcmp>
 8004f02:	1e03      	subs	r3, r0, #0
 8004f04:	d102      	bne.n	8004f0c <TransmitReceive_Ble+0x36c>
	    	 codeTX = 0x5A;
 8004f06:	4b36      	ldr	r3, [pc, #216]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f08:	225a      	movs	r2, #90	@ 0x5a
 8004f0a:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5B",2) == 0)			// CÓDIGO DE LECTURA DE TIEMPO UNIX
 8004f0c:	4945      	ldr	r1, [pc, #276]	@ (8005024 <TransmitReceive_Ble+0x484>)
 8004f0e:	4b33      	ldr	r3, [pc, #204]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f10:	2202      	movs	r2, #2
 8004f12:	0018      	movs	r0, r3
 8004f14:	f015 ff18 	bl	801ad48 <memcmp>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d102      	bne.n	8004f22 <TransmitReceive_Ble+0x382>
	   		 codeTX = 0x5B;
 8004f1c:	4b30      	ldr	r3, [pc, #192]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f1e:	225b      	movs	r2, #91	@ 0x5b
 8004f20:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5C",2) == 0)			// CÓDIGO DE TIEMPO BCD
 8004f22:	4941      	ldr	r1, [pc, #260]	@ (8005028 <TransmitReceive_Ble+0x488>)
 8004f24:	4b2d      	ldr	r3, [pc, #180]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f26:	2202      	movs	r2, #2
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f015 ff0d 	bl	801ad48 <memcmp>
 8004f2e:	1e03      	subs	r3, r0, #0
 8004f30:	d102      	bne.n	8004f38 <TransmitReceive_Ble+0x398>
		 	 codeTX = 0x5C;
 8004f32:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f34:	225c      	movs	r2, #92	@ 0x5c
 8004f36:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x5F",2) == 0)			// CÓDIGO DE INFORMACION DE RELOJ
 8004f38:	493c      	ldr	r1, [pc, #240]	@ (800502c <TransmitReceive_Ble+0x48c>)
 8004f3a:	4b28      	ldr	r3, [pc, #160]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f015 ff02 	bl	801ad48 <memcmp>
 8004f44:	1e03      	subs	r3, r0, #0
 8004f46:	d102      	bne.n	8004f4e <TransmitReceive_Ble+0x3ae>
			  codeTX = 0x5F;
 8004f48:	4b25      	ldr	r3, [pc, #148]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f4a:	225f      	movs	r2, #95	@ 0x5f
 8004f4c:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x62",2) == 0)	 		// CÓDIGO DE logger tiempo wifi
 8004f4e:	4938      	ldr	r1, [pc, #224]	@ (8005030 <TransmitReceive_Ble+0x490>)
 8004f50:	4b22      	ldr	r3, [pc, #136]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f52:	2202      	movs	r2, #2
 8004f54:	0018      	movs	r0, r3
 8004f56:	f015 fef7 	bl	801ad48 <memcmp>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d102      	bne.n	8004f64 <TransmitReceive_Ble+0x3c4>
	   		  codeTX = 0x62;
 8004f5e:	4b20      	ldr	r3, [pc, #128]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f60:	2262      	movs	r2, #98	@ 0x62
 8004f62:	701a      	strb	r2, [r3, #0]
	   	  if (memcmp(SerialAnswBLE, "\x40\x63",2) == 0)		 	// CÓDIGO DE logger eventos wifi
 8004f64:	4933      	ldr	r1, [pc, #204]	@ (8005034 <TransmitReceive_Ble+0x494>)
 8004f66:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <TransmitReceive_Ble+0x43c>)
 8004f68:	2202      	movs	r2, #2
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f015 feec 	bl	801ad48 <memcmp>
 8004f70:	1e03      	subs	r3, r0, #0
 8004f72:	d102      	bne.n	8004f7a <TransmitReceive_Ble+0x3da>
	   		  codeTX = 0x63;
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <TransmitReceive_Ble+0x440>)
 8004f76:	2263      	movs	r2, #99	@ 0x63
 8004f78:	701a      	strb	r2, [r3, #0]
	   	}// close  if (DevLock == 0x72)

	} //Close if (receivecomplete_Ble)


	if ( ((millis() - TestMessMilis ) >= 8)){     // ya paso 3 segundos
 8004f7a:	f004 fa05 	bl	8009388 <millis>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	001a      	movs	r2, r3
 8004f82:	4b2d      	ldr	r3, [pc, #180]	@ (8005038 <TransmitReceive_Ble+0x498>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b07      	cmp	r3, #7
 8004f8a:	d918      	bls.n	8004fbe <TransmitReceive_Ble+0x41e>
		TestMessMilis = millis();
 8004f8c:	f004 f9fc 	bl	8009388 <millis>
 8004f90:	0003      	movs	r3, r0
 8004f92:	001a      	movs	r2, r3
 8004f94:	4b28      	ldr	r3, [pc, #160]	@ (8005038 <TransmitReceive_Ble+0x498>)
 8004f96:	601a      	str	r2, [r3, #0]

		if (keyTx == 0x55){
 8004f98:	4b28      	ldr	r3, [pc, #160]	@ (800503c <TransmitReceive_Ble+0x49c>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b55      	cmp	r3, #85	@ 0x55
 8004f9e:	d102      	bne.n	8004fa6 <TransmitReceive_Ble+0x406>
		    asm ("nop");
 8004fa0:	46c0      	nop			@ (mov r8, r8)
    //	#pragma asm
		    tx_buffer_prep ();
 8004fa2:	f008 fa83 	bl	800d4ac <tx_buffer_prep>
    //	#pragma endasm
			}
		if (keyTx == 0x55){
 8004fa6:	4b25      	ldr	r3, [pc, #148]	@ (800503c <TransmitReceive_Ble+0x49c>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b55      	cmp	r3, #85	@ 0x55
 8004fac:	d107      	bne.n	8004fbe <TransmitReceive_Ble+0x41e>
		    asm ("nop");
 8004fae:	46c0      	nop			@ (mov r8, r8)
			SerializeString2(ImberaProtocolBuffer, sizeTX);
 8004fb0:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <TransmitReceive_Ble+0x42c>)
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <TransmitReceive_Ble+0x428>)
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff fc5b 	bl	8004874 <SerializeString2>
		}
	}

}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	20000e38 	.word	0x20000e38
 8004fcc:	20000e32 	.word	0x20000e32
 8004fd0:	200010f5 	.word	0x200010f5
 8004fd4:	200010f7 	.word	0x200010f7
 8004fd8:	0801b194 	.word	0x0801b194
 8004fdc:	20000a14 	.word	0x20000a14
 8004fe0:	20000e24 	.word	0x20000e24
 8004fe4:	0801b198 	.word	0x0801b198
 8004fe8:	0801b19c 	.word	0x0801b19c
 8004fec:	0801b1a0 	.word	0x0801b1a0
 8004ff0:	0801b1a4 	.word	0x0801b1a4
 8004ff4:	0801b1a8 	.word	0x0801b1a8
 8004ff8:	0801b1ac 	.word	0x0801b1ac
 8004ffc:	0801b1b0 	.word	0x0801b1b0
 8005000:	0801b1b4 	.word	0x0801b1b4
 8005004:	0801b17c 	.word	0x0801b17c
 8005008:	0801b184 	.word	0x0801b184
 800500c:	0801b1b8 	.word	0x0801b1b8
 8005010:	0801b1bc 	.word	0x0801b1bc
 8005014:	0801b1c0 	.word	0x0801b1c0
 8005018:	0801b1c4 	.word	0x0801b1c4
 800501c:	0801b1c8 	.word	0x0801b1c8
 8005020:	0801b1cc 	.word	0x0801b1cc
 8005024:	0801b1d0 	.word	0x0801b1d0
 8005028:	0801b178 	.word	0x0801b178
 800502c:	0801b1d4 	.word	0x0801b1d4
 8005030:	0801b1d8 	.word	0x0801b1d8
 8005034:	0801b1dc 	.word	0x0801b1dc
 8005038:	200003c0 	.word	0x200003c0
 800503c:	20000e19 	.word	0x20000e19

08005040 <Read_Inpunts_ble>:



//------------------------------------------------------------------------------------------------
void	Read_Inpunts_ble()
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	if (tick_1ms == 1)						//Manuel., checa el tick, cada 1ms
 8005044:	4b1f      	ldr	r3, [pc, #124]	@ (80050c4 <Read_Inpunts_ble+0x84>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d037      	beq.n	80050bc <Read_Inpunts_ble+0x7c>
		{
			// Manuel, lee la linea de entrada 1 "STAT"
			if	(HAL_GPIO_ReadPin(GPIOB,PFULLDEF_STAT_VB))
 800504c:	2380      	movs	r3, #128	@ 0x80
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	4a1d      	ldr	r2, [pc, #116]	@ (80050c8 <Read_Inpunts_ble+0x88>)
 8005052:	0019      	movs	r1, r3
 8005054:	0010      	movs	r0, r2
 8005056:	f00e fb15 	bl	8013684 <HAL_GPIO_ReadPin>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d017      	beq.n	800508e <Read_Inpunts_ble+0x4e>
				{
					if (CntDebInp1 <= 50)
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b32      	cmp	r3, #50	@ 0x32
 8005064:	d805      	bhi.n	8005072 <Read_Inpunts_ble+0x32>
						CntDebInp1++;
 8005066:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b17      	ldr	r3, [pc, #92]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005070:	701a      	strb	r2, [r3, #0]
					if (CntDebInp1==50)
 8005072:	4b16      	ldr	r3, [pc, #88]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b32      	cmp	r3, #50	@ 0x32
 8005078:	d120      	bne.n	80050bc <Read_Inpunts_ble+0x7c>
						{
							device_conected = 1;
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <Read_Inpunts_ble+0x90>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
							CntDebInp1 = 51;
 8005080:	4b12      	ldr	r3, [pc, #72]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005082:	2233      	movs	r2, #51	@ 0x33
 8005084:	701a      	strb	r2, [r3, #0]
							statComFlag = 255;
 8005086:	4b13      	ldr	r3, [pc, #76]	@ (80050d4 <Read_Inpunts_ble+0x94>)
 8005088:	22ff      	movs	r2, #255	@ 0xff
 800508a:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
					statComFlag = 0;
				}
			}
		}
}
 800508c:	e016      	b.n	80050bc <Read_Inpunts_ble+0x7c>
				if (CntDebInp1 >= 1)
 800508e:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <Read_Inpunts_ble+0x62>
					CntDebInp1--;
 8005096:	4b0d      	ldr	r3, [pc, #52]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	3b01      	subs	r3, #1
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 80050a0:	701a      	strb	r2, [r3, #0]
				if (CntDebInp1==1)
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d108      	bne.n	80050bc <Read_Inpunts_ble+0x7c>
					device_conected = 0;
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <Read_Inpunts_ble+0x90>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
					CntDebInp1 = 0;
 80050b0:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <Read_Inpunts_ble+0x8c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
					statComFlag = 0;
 80050b6:	4b07      	ldr	r3, [pc, #28]	@ (80050d4 <Read_Inpunts_ble+0x94>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
}
 80050bc:	46c0      	nop			@ (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	200008d4 	.word	0x200008d4
 80050c8:	50000400 	.word	0x50000400
 80050cc:	200003bc 	.word	0x200003bc
 80050d0:	200008d8 	.word	0x200008d8
 80050d4:	200010f6 	.word	0x200010f6

080050d8 <WaitSerAnsw_Ble_func>:

//--------------------------------------------------------------------------------------------------------
void WaitSerAnsw_Ble_func (uint8_t valParamItem)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	0002      	movs	r2, r0
 80050e0:	1dfb      	adds	r3, r7, #7
 80050e2:	701a      	strb	r2, [r3, #0]
	WaitSerAnsw_Ble = 0;
 80050e4:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <WaitSerAnsw_Ble_func+0x24>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
	ParamItem = valParamItem;
 80050ea:	1dfb      	adds	r3, r7, #7
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <WaitSerAnsw_Ble_func+0x28>)
 80050f0:	601a      	str	r2, [r3, #0]
}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b002      	add	sp, #8
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	200003b5 	.word	0x200003b5
 8005100:	20000000 	.word	0x20000000

08005104 <grabacion_exitosa_handshake>:

void grabacion_exitosa_handshake (void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
	Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 8005108:	4b04      	ldr	r3, [pc, #16]	@ (800511c <grabacion_exitosa_handshake+0x18>)
 800510a:	22f1      	movs	r2, #241	@ 0xf1
 800510c:	701a      	strb	r2, [r3, #0]
	Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800510e:	4b03      	ldr	r3, [pc, #12]	@ (800511c <grabacion_exitosa_handshake+0x18>)
 8005110:	223d      	movs	r2, #61	@ 0x3d
 8005112:	705a      	strb	r2, [r3, #1]
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	20000de0 	.word	0x20000de0

08005120 <manda_transmision>:

void manda_transmision (void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
	pointTx = &Bloque_handshake[comando1];
 8005124:	4b0b      	ldr	r3, [pc, #44]	@ (8005154 <manda_transmision+0x34>)
 8005126:	4a0c      	ldr	r2, [pc, #48]	@ (8005158 <manda_transmision+0x38>)
 8005128:	601a      	str	r2, [r3, #0]
	pointInitTx = &Bloque_handshake[comando1];
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <manda_transmision+0x3c>)
 800512c:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <manda_transmision+0x38>)
 800512e:	601a      	str	r2, [r3, #0]
	pointEndTx = &Bloque_handshake [comando2];
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <manda_transmision+0x40>)
 8005132:	4a0c      	ldr	r2, [pc, #48]	@ (8005164 <manda_transmision+0x44>)
 8005134:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 8005136:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <manda_transmision+0x48>)
 8005138:	2202      	movs	r2, #2
 800513a:	701a      	strb	r2, [r3, #0]
	flagsTX [3] = 1;
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <manda_transmision+0x4c>)
 800513e:	2201      	movs	r2, #1
 8005140:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;						// listo para mandar transmisión
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <manda_transmision+0x50>)
 8005144:	2255      	movs	r2, #85	@ 0x55
 8005146:	701a      	strb	r2, [r3, #0]
	codeTX = 0x00;
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <manda_transmision+0x54>)
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]

}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000e14 	.word	0x20000e14
 8005158:	20000de0 	.word	0x20000de0
 800515c:	20000e0c 	.word	0x20000e0c
 8005160:	20000e10 	.word	0x20000e10
 8005164:	20000de1 	.word	0x20000de1
 8005168:	20000e30 	.word	0x20000e30
 800516c:	20000e1c 	.word	0x20000e1c
 8005170:	20000e19 	.word	0x20000e19
 8005174:	20000e24 	.word	0x20000e24

08005178 <main10>:
#include "commonMainAsm.h"
#include "customMain.h"


//***************************** Traduccion Completa *******************************************
void main10(void){
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
	//Operacion exlusiva para el control SW Display i2c
		if(portX[dp_sw])
 800517c:	4b40      	ldr	r3, [pc, #256]	@ (8005280 <main10+0x108>)
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <main10+0x1a>
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_SET);        //28-May-2024:  Enciende DPY I2C
 8005184:	4b3f      	ldr	r3, [pc, #252]	@ (8005284 <main10+0x10c>)
 8005186:	2201      	movs	r2, #1
 8005188:	2108      	movs	r1, #8
 800518a:	0018      	movs	r0, r3
 800518c:	f00e fa97 	bl	80136be <HAL_GPIO_WritePin>
 8005190:	e005      	b.n	800519e <main10+0x26>
		  //GPIOC->BSRR = GPIO_BSRR_BS_3;
		else
		  HAL_GPIO_WritePin(PFULLDEF_dp_sw, GPIO_PIN_RESET);      //28-May-2024:  Apaga DPY I2C
 8005192:	4b3c      	ldr	r3, [pc, #240]	@ (8005284 <main10+0x10c>)
 8005194:	2200      	movs	r2, #0
 8005196:	2108      	movs	r1, #8
 8005198:	0018      	movs	r0, r3
 800519a:	f00e fa90 	bl	80136be <HAL_GPIO_WritePin>
		 //GPIOC->BSRR = GPIO_BSRR_BR_3;

		//(1)Operacion exlusiva para el compresor
		if(portX[rel_co])
 800519e:	4b38      	ldr	r3, [pc, #224]	@ (8005280 <main10+0x108>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <main10+0x40>
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_SET);        //28-May-2024:  Enciende compresor
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	0099      	lsls	r1, r3, #2
 80051aa:	23a0      	movs	r3, #160	@ 0xa0
 80051ac:	05db      	lsls	r3, r3, #23
 80051ae:	2201      	movs	r2, #1
 80051b0:	0018      	movs	r0, r3
 80051b2:	f00e fa84 	bl	80136be <HAL_GPIO_WritePin>
 80051b6:	e007      	b.n	80051c8 <main10+0x50>
		  //GPIOA->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_co, GPIO_PIN_RESET);      //28-May-2024:  Apaga compresor
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	0099      	lsls	r1, r3, #2
 80051bc:	23a0      	movs	r3, #160	@ 0xa0
 80051be:	05db      	lsls	r3, r3, #23
 80051c0:	2200      	movs	r2, #0
 80051c2:	0018      	movs	r0, r3
 80051c4:	f00e fa7b 	bl	80136be <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_9;

		//(2)Operacion exlusiva para  Aux.Luz				-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_lz])
 80051c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005280 <main10+0x108>)
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <main10+0x68>
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_SET);        //28-May-2024:  Enciende  Aux.Luz
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	482b      	ldr	r0, [pc, #172]	@ (8005284 <main10+0x10c>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	0019      	movs	r1, r3
 80051da:	f00e fa70 	bl	80136be <HAL_GPIO_WritePin>
 80051de:	e006      	b.n	80051ee <main10+0x76>
		  //GPIOC->BSRR = GPIO_BSRR_BS_9;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_lz, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Aux.Luz
 80051e0:	2380      	movs	r3, #128	@ 0x80
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4827      	ldr	r0, [pc, #156]	@ (8005284 <main10+0x10c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	0019      	movs	r1, r3
 80051ea:	f00e fa68 	bl	80136be <HAL_GPIO_WritePin>
		  //GPIOC->BSRR = GPIO_BSRR_BR_9;

		//;(3)Operacion exlusiva para Ventilador			-----Manuel 10-Mar-2022: Para ADaptar pines
		if(portX[rel_dh])
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <main10+0x108>)
 80051f0:	791b      	ldrb	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <main10+0x90>
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_SET);        //28-May-2024:  Enciende Ventilador
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	0059      	lsls	r1, r3, #1
 80051fa:	23a0      	movs	r3, #160	@ 0xa0
 80051fc:	05db      	lsls	r3, r3, #23
 80051fe:	2201      	movs	r2, #1
 8005200:	0018      	movs	r0, r3
 8005202:	f00e fa5c 	bl	80136be <HAL_GPIO_WritePin>
 8005206:	e007      	b.n	8005218 <main10+0xa0>
		  //GPIOA->BSRR = GPIO_BSRR_BS_8;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_fn, GPIO_PIN_RESET);      //28-May-2024:  Apaga Ventilador
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	0059      	lsls	r1, r3, #1
 800520c:	23a0      	movs	r3, #160	@ 0xa0
 800520e:	05db      	lsls	r3, r3, #23
 8005210:	2200      	movs	r2, #0
 8005212:	0018      	movs	r0, r3
 8005214:	f00e fa53 	bl	80136be <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_8;
		//;(4)Operacion exlusiva para Deshielo
		cntproc++;
 8005218:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <main10+0x110>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b19      	ldr	r3, [pc, #100]	@ (8005288 <main10+0x110>)
 8005222:	701a      	strb	r2, [r3, #0]
		if(portX[rel_fn] && (cntproc & 0x01))
 8005224:	4b16      	ldr	r3, [pc, #88]	@ (8005280 <main10+0x108>)
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <main10+0xd2>
 800522c:	4b16      	ldr	r3, [pc, #88]	@ (8005288 <main10+0x110>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	001a      	movs	r2, r3
 8005232:	2301      	movs	r3, #1
 8005234:	4013      	ands	r3, r2
 8005236:	d008      	beq.n	800524a <main10+0xd2>
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_SET);        //28-May-2024:  Enciende  Deshielo
 8005238:	2380      	movs	r3, #128	@ 0x80
 800523a:	00d9      	lsls	r1, r3, #3
 800523c:	23a0      	movs	r3, #160	@ 0xa0
 800523e:	05db      	lsls	r3, r3, #23
 8005240:	2201      	movs	r2, #1
 8005242:	0018      	movs	r0, r3
 8005244:	f00e fa3b 	bl	80136be <HAL_GPIO_WritePin>
 8005248:	e007      	b.n	800525a <main10+0xe2>
		  //GPIOA->BSRR = GPIO_BSRR_BS_10;
		else
		  HAL_GPIO_WritePin(PFULLDEF_rel_dh, GPIO_PIN_RESET);      //28-May-2024:  Apaga  Deshielo
 800524a:	2380      	movs	r3, #128	@ 0x80
 800524c:	00d9      	lsls	r1, r3, #3
 800524e:	23a0      	movs	r3, #160	@ 0xa0
 8005250:	05db      	lsls	r3, r3, #23
 8005252:	2200      	movs	r2, #0
 8005254:	0018      	movs	r0, r3
 8005256:	f00e fa32 	bl	80136be <HAL_GPIO_WritePin>
		  //GPIOA->BSRR = GPIO_BSRR_BR_10;
	//;----------------------------
	cntbase++;			// Incrementa contador base
 800525a:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <main10+0x114>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <main10+0x114>)
 8005264:	701a      	strb	r2, [r3, #0]
    if (cntbase >= 40){
 8005266:	4b09      	ldr	r3, [pc, #36]	@ (800528c <main10+0x114>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b27      	cmp	r3, #39	@ 0x27
 800526c:	d904      	bls.n	8005278 <main10+0x100>
        asm ("nop");
 800526e:	46c0      	nop			@ (mov r8, r8)
        asm ("nop");
 8005270:	46c0      	nop			@ (mov r8, r8)
    	cntbase =0;			// Inicia una nueva centÃ©sima//Manuel 03-Mar-2022	 80;				// Ya contÃ³ 80 octavos de milÃ©sima?
 8005272:	4b06      	ldr	r3, [pc, #24]	@ (800528c <main10+0x114>)
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
    }
	//;----------
}
 8005278:	46c0      	nop			@ (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	20000b58 	.word	0x20000b58
 8005284:	50000800 	.word	0x50000800
 8005288:	20000b49 	.word	0x20000b49
 800528c:	20000bbe 	.word	0x20000bbe

08005290 <retardoDeActuadores>:

//***************************** Traduccion Completa *******************************************
void retardoDeActuadores(void){
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
		//Revisa el retardo para encender COMPRESOR por cruece por cero
			if(GPIOR0[f_comp] == 0){						//btjf  	GPIOR0,#f_comp,revisa_ret_comp_00          ;//¿Debe prenderse el COMPRESOR?
 8005294:	4b46      	ldr	r3, [pc, #280]	@ (80053b0 <retardoDeActuadores+0x120>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	4053      	eors	r3, r2
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d114      	bne.n	80052cc <retardoDeActuadores+0x3c>
				goto 	revisa_ret_comp_00;
			}
			if(cruze_por_cero[1]){			//btjt   cruze_por_cero,#1,dec_retcz_comp          ;//SI, Si ya arranco el cruce solo decrementa
 80052a2:	4b44      	ldr	r3, [pc, #272]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <retardoDeActuadores+0x30>
				goto	dec_retcz_comp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_deshielo   ;//Espera a detectar cruce por cero
 80052aa:	4b42      	ldr	r3, [pc, #264]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	4053      	eors	r3, r2
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10e      	bne.n	80052d6 <retardoDeActuadores+0x46>
				goto	revisa_ret_deshielo;
			}
			cruze_por_cero[1] = 1;			//bset    cruze_por_cero,#1                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80052b8:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	705a      	strb	r2, [r3, #1]
 80052be:	e000      	b.n	80052c2 <retardoDeActuadores+0x32>
				goto	dec_retcz_comp;
 80052c0:	46c0      	nop			@ (mov r8, r8)
dec_retcz_comp:
			decwreg(&retzc_ms_compresor);		//	ldw			X,#retzc_ms_compresor   ;//Decrementa cada 1ms los retardos
 80052c2:	4b3d      	ldr	r3, [pc, #244]	@ (80053b8 <retardoDeActuadores+0x128>)
 80052c4:	0018      	movs	r0, r3
 80052c6:	f001 fe54 	bl	8006f72 <decwreg>
			goto	revisa_ret_deshielo;		//	jra     revisa_ret_deshielo
 80052ca:	e005      	b.n	80052d8 <retardoDeActuadores+0x48>
				goto 	revisa_ret_comp_00;
 80052cc:	46c0      	nop			@ (mov r8, r8)

revisa_ret_comp_00:
			cruze_por_cero[1] = 0;			//	;bres    cruze_por_cero,#1                        ;//Limpia bandera
 80052ce:	4b39      	ldr	r3, [pc, #228]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	705a      	strb	r2, [r3, #1]
 80052d4:	e000      	b.n	80052d8 <retardoDeActuadores+0x48>
				goto	revisa_ret_deshielo;
 80052d6:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_deshielo:			//Revisa el retardo para encender DESHILEO por cruece por cero
			if(GPIOR0[f_dh] == 0){						//btjf  	GPIOR0,#f_dh,revisa_ret_desh_00            ;//¿Debe prenderse el DESHIELO?
 80052d8:	4b35      	ldr	r3, [pc, #212]	@ (80053b0 <retardoDeActuadores+0x120>)
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2201      	movs	r2, #1
 80052de:	4053      	eors	r3, r2
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d114      	bne.n	8005310 <retardoDeActuadores+0x80>
				goto 	revisa_ret_desh_00;
			}
			if(cruze_por_cero[2]){			//btjt   cruze_por_cero,#2,dec_retcz_desh          ;//SI, Si ya arranco el cruce solo decrementa
 80052e6:	4b33      	ldr	r3, [pc, #204]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052e8:	789b      	ldrb	r3, [r3, #2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <retardoDeActuadores+0x74>
				goto	dec_retcz_desh;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,revisa_ret_ventilador ;//Espera a detectar cruce por cero
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4053      	eors	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10e      	bne.n	800531a <retardoDeActuadores+0x8a>
				goto	revisa_ret_ventilador;
			}
			cruze_por_cero[2] = 1;			//		bset    cruze_por_cero,#2                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 80052fc:	4b2d      	ldr	r3, [pc, #180]	@ (80053b4 <retardoDeActuadores+0x124>)
 80052fe:	2201      	movs	r2, #1
 8005300:	709a      	strb	r2, [r3, #2]
 8005302:	e000      	b.n	8005306 <retardoDeActuadores+0x76>
				goto	dec_retcz_desh;
 8005304:	46c0      	nop			@ (mov r8, r8)
dec_retcz_desh:
			decwreg(&retzc_ms_deshielo);		//	ldw			X,#retzc_ms_deshielo   ;//Decrementa cada 1ms los retardos
 8005306:	4b2d      	ldr	r3, [pc, #180]	@ (80053bc <retardoDeActuadores+0x12c>)
 8005308:	0018      	movs	r0, r3
 800530a:	f001 fe32 	bl	8006f72 <decwreg>
			goto	revisa_ret_ventilador;		//
 800530e:	e005      	b.n	800531c <retardoDeActuadores+0x8c>
				goto 	revisa_ret_desh_00;
 8005310:	46c0      	nop			@ (mov r8, r8)

revisa_ret_desh_00:
			cruze_por_cero[2] = 0;			//		bres    cruze_por_cero,#2                        ;//Limpia bandera
 8005312:	4b28      	ldr	r3, [pc, #160]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005314:	2200      	movs	r2, #0
 8005316:	709a      	strb	r2, [r3, #2]
 8005318:	e000      	b.n	800531c <retardoDeActuadores+0x8c>
				goto	revisa_ret_ventilador;
 800531a:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_ventilador:      ;//Revisa el retardo para encender VENTILADOR por cruece por cero
			if(GPIOR1[f_fan] == 0){						// btjf  	GPIOR1,#f_fan,revisa_ret_vent_00            ;//¿Debe prenderse el DESHIELO?
 800531c:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <retardoDeActuadores+0x130>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	4053      	eors	r3, r2
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d114      	bne.n	8005354 <retardoDeActuadores+0xc4>
				goto 	revisa_ret_vent_00;
			}
			if(cruze_por_cero[3]){			// btjt   cruze_por_cero,#3,dec_retcz_vent          ;//SI, Si ya arranco el cruce solo decrementa
 800532a:	4b22      	ldr	r3, [pc, #136]	@ (80053b4 <retardoDeActuadores+0x124>)
 800532c:	78db      	ldrb	r3, [r3, #3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10a      	bne.n	8005348 <retardoDeActuadores+0xb8>
				goto	dec_retcz_vent;
			}
			if(!cruze_por_cero[0]){		// btjf   cruze_por_cero,#0,revisa_ret_lampara ;//Espera a detectar cruce por cero
 8005332:	4b20      	ldr	r3, [pc, #128]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	4053      	eors	r3, r2
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10e      	bne.n	800535e <retardoDeActuadores+0xce>
				goto	revisa_ret_lampara;
			}
			cruze_por_cero[3] = 1;			//		bset    cruze_por_cero,#3                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005340:	4b1c      	ldr	r3, [pc, #112]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005342:	2201      	movs	r2, #1
 8005344:	70da      	strb	r2, [r3, #3]
 8005346:	e000      	b.n	800534a <retardoDeActuadores+0xba>
				goto	dec_retcz_vent;
 8005348:	46c0      	nop			@ (mov r8, r8)
dec_retcz_vent:
			decwreg(&retzc_ms_ventilador);		//  ldw			X,#retzc_ms_ventilador   ;//Decrementa cada 1ms los retardos
 800534a:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <retardoDeActuadores+0x134>)
 800534c:	0018      	movs	r0, r3
 800534e:	f001 fe10 	bl	8006f72 <decwreg>
			goto	revisa_ret_lampara;		//
 8005352:	e005      	b.n	8005360 <retardoDeActuadores+0xd0>
				goto 	revisa_ret_vent_00;
 8005354:	46c0      	nop			@ (mov r8, r8)

revisa_ret_vent_00:
			cruze_por_cero[3] = 0;			//bres    cruze_por_cero,#3                        ;//Limpia bandera
 8005356:	4b17      	ldr	r3, [pc, #92]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005358:	2200      	movs	r2, #0
 800535a:	70da      	strb	r2, [r3, #3]
 800535c:	e000      	b.n	8005360 <retardoDeActuadores+0xd0>
				goto	revisa_ret_lampara;
 800535e:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
revisa_ret_lampara:            ;//Revisa el retardo para encender LAMPARA por cruece por cero
			if(GPIOR0[f_lamp] == 0){						//btjf  	GPIOR0,#f_lamp,revisa_ret_lamp_00            ;//¿Debe prenderse la LAMPARA?
 8005360:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <retardoDeActuadores+0x120>)
 8005362:	789b      	ldrb	r3, [r3, #2]
 8005364:	2201      	movs	r2, #1
 8005366:	4053      	eors	r3, r2
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d114      	bne.n	8005398 <retardoDeActuadores+0x108>
				goto 	revisa_ret_lamp_00;
			}
			if(cruze_por_cero[4]){			//btjt   cruze_por_cero,#4,dec_retcz_lamp          ;//SI, Si ya arranco el cruce solo decrementa
 800536e:	4b11      	ldr	r3, [pc, #68]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005370:	791b      	ldrb	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <retardoDeActuadores+0xfc>
				goto	dec_retcz_lamp;
			}
			if(!cruze_por_cero[0]){		//btjf   cruze_por_cero,#0,fin_retardos_cruce    ;//Espera a detectar cruce por cero
 8005376:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2201      	movs	r2, #1
 800537c:	4053      	eors	r3, r2
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10e      	bne.n	80053a2 <retardoDeActuadores+0x112>
				goto	fin_retardos_cruce;					//
			}
			cruze_por_cero[4] = 1;						//	bset    cruze_por_cero,#4                    ;//Ya se detecto el cruce por cero, ya solo decrementa
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <retardoDeActuadores+0x124>)
 8005386:	2201      	movs	r2, #1
 8005388:	711a      	strb	r2, [r3, #4]
 800538a:	e000      	b.n	800538e <retardoDeActuadores+0xfe>
				goto	dec_retcz_lamp;
 800538c:	46c0      	nop			@ (mov r8, r8)
dec_retcz_lamp:
			decwreg(&retzc_ms_lampara);		//	ldw			X,#retzc_ms_lampara   ;//Decrementa cada 1ms los retardos
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <retardoDeActuadores+0x138>)
 8005390:	0018      	movs	r0, r3
 8005392:	f001 fdee 	bl	8006f72 <decwreg>
			goto	fin_retardos_cruce;		//	jra     fin_retardos_cruce
 8005396:	e005      	b.n	80053a4 <retardoDeActuadores+0x114>
				goto 	revisa_ret_lamp_00;
 8005398:	46c0      	nop			@ (mov r8, r8)
revisa_ret_lamp_00:
			cruze_por_cero[4] = 0;			//	bres    cruze_por_cero,#4                        ;//Limpia bandera
 800539a:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <retardoDeActuadores+0x124>)
 800539c:	2200      	movs	r2, #0
 800539e:	711a      	strb	r2, [r3, #4]
 80053a0:	e000      	b.n	80053a4 <retardoDeActuadores+0x114>
				goto	fin_retardos_cruce;					//
 80053a2:	46c0      	nop			@ (mov r8, r8)

//------------------------------------------------------------------------------------------
fin_retardos_cruce:
			cruze_por_cero[0] = 0;			//bres    cruze_por_cero,#0     ;//Apaga bandera de cruce por cero
 80053a4:	4b03      	ldr	r3, [pc, #12]	@ (80053b4 <retardoDeActuadores+0x124>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000ba4 	.word	0x20000ba4
 80053b4:	20000c5c 	.word	0x20000c5c
 80053b8:	20000c56 	.word	0x20000c56
 80053bc:	20000c57 	.word	0x20000c57
 80053c0:	20000be0 	.word	0x20000be0
 80053c4:	20000c58 	.word	0x20000c58
 80053c8:	20000c59 	.word	0x20000c59

080053cc <calculando_tiempo_UNIX>:

//------------------------------------------------------------------------------------------
//		calculando tiempo UNIX
//------------------------------------------------------------------------------------------
void calculando_tiempo_UNIX (void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
    asm ("nop");
 80053d0:	46c0      	nop			@ (mov r8, r8)
				...
				...
				...			*/
    //#pragma endasm

	timeUNIX = 0;
 80053d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

	// Si es año bisiesto y ya pasó febrero añade un día (segundo por día =86400)
	if ( (!(time_year%4)) && (time_month>2) ) {
 80053d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005504 <calculando_tiempo_UNIX+0x138>)
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	2203      	movs	r2, #3
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <calculando_tiempo_UNIX+0x2e>
 80053e6:	4b48      	ldr	r3, [pc, #288]	@ (8005508 <calculando_tiempo_UNIX+0x13c>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d905      	bls.n	80053fa <calculando_tiempo_UNIX+0x2e>
		timeUNIX += 86400;
 80053ee:	4b44      	ldr	r3, [pc, #272]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a46      	ldr	r2, [pc, #280]	@ (800550c <calculando_tiempo_UNIX+0x140>)
 80053f4:	189a      	adds	r2, r3, r2
 80053f6:	4b42      	ldr	r3, [pc, #264]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80053f8:	601a      	str	r2, [r3, #0]
	while(time_month){
		time_month--;
		timeUNIX += (daysToMonth[time_month])*86400;
	}
	*/
	if(time_month){
 80053fa:	4b43      	ldr	r3, [pc, #268]	@ (8005508 <calculando_tiempo_UNIX+0x13c>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d013      	beq.n	800542a <calculando_tiempo_UNIX+0x5e>
		timeUNIX += (daysToMonth[(time_month-1)])*86400;
 8005402:	4b41      	ldr	r3, [pc, #260]	@ (8005508 <calculando_tiempo_UNIX+0x13c>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	1e5a      	subs	r2, r3, #1
 8005408:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <calculando_tiempo_UNIX+0x144>)
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	58d2      	ldr	r2, [r2, r3]
 800540e:	0013      	movs	r3, r2
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	189b      	adds	r3, r3, r2
 8005414:	011a      	lsls	r2, r3, #4
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	0113      	lsls	r3, r2, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	01db      	lsls	r3, r3, #7
 800541e:	001a      	movs	r2, r3
 8005420:	4b37      	ldr	r3, [pc, #220]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	18d2      	adds	r2, r2, r3
 8005426:	4b36      	ldr	r3, [pc, #216]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005428:	601a      	str	r2, [r3, #0]
	}

	// Añade el numero de días transcurridos des del año 1970, incluye los años bisiestos transcurridos
	timeUNIX += ( ((time_year-1970)*365)*86400 );   // + (((time_year-1970)/4)*86400) );
 800542a:	4b36      	ldr	r3, [pc, #216]	@ (8005504 <calculando_tiempo_UNIX+0x138>)
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	4a39      	ldr	r2, [pc, #228]	@ (8005514 <calculando_tiempo_UNIX+0x148>)
 8005430:	189a      	adds	r2, r3, r2
 8005432:	0013      	movs	r3, r2
 8005434:	025b      	lsls	r3, r3, #9
 8005436:	189b      	adds	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	189b      	adds	r3, r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	189b      	adds	r3, r3, r2
 8005440:	011a      	lsls	r2, r3, #4
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	01d3      	lsls	r3, r2, #7
 8005446:	001a      	movs	r2, r3
 8005448:	0013      	movs	r3, r2
 800544a:	001a      	movs	r2, r3
 800544c:	4b2c      	ldr	r3, [pc, #176]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	18d2      	adds	r2, r2, r3
 8005452:	4b2b      	ldr	r3, [pc, #172]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005454:	601a      	str	r2, [r3, #0]
	leapYears = ( ((time_year-1)-1968)/4 );
 8005456:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <calculando_tiempo_UNIX+0x138>)
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	4a2f      	ldr	r2, [pc, #188]	@ (8005518 <calculando_tiempo_UNIX+0x14c>)
 800545c:	4694      	mov	ip, r2
 800545e:	4463      	add	r3, ip
 8005460:	2b00      	cmp	r3, #0
 8005462:	da00      	bge.n	8005466 <calculando_tiempo_UNIX+0x9a>
 8005464:	3303      	adds	r3, #3
 8005466:	109b      	asrs	r3, r3, #2
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4b2c      	ldr	r3, [pc, #176]	@ (800551c <calculando_tiempo_UNIX+0x150>)
 800546c:	701a      	strb	r2, [r3, #0]
	timeUNIX += ( leapYears*86400);
 800546e:	4b2b      	ldr	r3, [pc, #172]	@ (800551c <calculando_tiempo_UNIX+0x150>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	001a      	movs	r2, r3
 8005474:	0013      	movs	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	189b      	adds	r3, r3, r2
 800547a:	011a      	lsls	r2, r3, #4
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	0113      	lsls	r3, r2, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	001a      	movs	r2, r3
 8005486:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	18d2      	adds	r2, r2, r3
 800548c:	4b1c      	ldr	r3, [pc, #112]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 800548e:	601a      	str	r2, [r3, #0]

	// Añade el número de días transcurridos
	timeUNIX += ((time_day - 1)*86400);
 8005490:	4b23      	ldr	r3, [pc, #140]	@ (8005520 <calculando_tiempo_UNIX+0x154>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	1e5a      	subs	r2, r3, #1
 8005496:	0013      	movs	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	189b      	adds	r3, r3, r2
 800549c:	011a      	lsls	r2, r3, #4
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	0113      	lsls	r3, r2, #4
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	001a      	movs	r2, r3
 80054a8:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	18d2      	adds	r2, r2, r3
 80054ae:	4b14      	ldr	r3, [pc, #80]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054b0:	601a      	str	r2, [r3, #0]

	// Añade el número de horas transcurridos
	timeUNIX += ((time_hour)*(unsigned long)3600);
 80054b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005524 <calculando_tiempo_UNIX+0x158>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	001a      	movs	r2, r3
 80054b8:	0013      	movs	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	1ad2      	subs	r2, r2, r3
 80054c2:	0113      	lsls	r3, r2, #4
 80054c4:	001a      	movs	r2, r3
 80054c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	18d2      	adds	r2, r2, r3
 80054cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054ce:	601a      	str	r2, [r3, #0]

	// Añade el número de minutos transcurridos
	timeUNIX += ((time_min)*60);
 80054d0:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <calculando_tiempo_UNIX+0x15c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	001a      	movs	r2, r3
 80054d6:	0013      	movs	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	001a      	movs	r2, r3
 80054e0:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	18d2      	adds	r2, r2, r3
 80054e6:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054e8:	601a      	str	r2, [r3, #0]

	// Añade el número de segundos transcurridos
	timeUNIX += time_sec;
 80054ea:	4b10      	ldr	r3, [pc, #64]	@ (800552c <calculando_tiempo_UNIX+0x160>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	001a      	movs	r2, r3
 80054f0:	4b03      	ldr	r3, [pc, #12]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	18d2      	adds	r2, r2, r3
 80054f6:	4b02      	ldr	r3, [pc, #8]	@ (8005500 <calculando_tiempo_UNIX+0x134>)
 80054f8:	601a      	str	r2, [r3, #0]
				...
				...
				...			*/
    //#pragma endasm

}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20001098 	.word	0x20001098
 8005504:	20001090 	.word	0x20001090
 8005508:	20001092 	.word	0x20001092
 800550c:	00015180 	.word	0x00015180
 8005510:	200001b8 	.word	0x200001b8
 8005514:	fffff84e 	.word	0xfffff84e
 8005518:	fffff84f 	.word	0xfffff84f
 800551c:	2000109c 	.word	0x2000109c
 8005520:	20001093 	.word	0x20001093
 8005524:	20001094 	.word	0x20001094
 8005528:	20001095 	.word	0x20001095
 800552c:	20001096 	.word	0x20001096

08005530 <prom8m1b>:
uint16_t TwoByteInArrayToWord (uint8_t  *PointArray);
_Bool cambio_rutina;


//;LN 5910 ------------------------- Rutina que promedia 8 muestras de 1 byte
uint16_t prom8m1b (uint8_t *array , uint8_t prom){
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	000a      	movs	r2, r1
 800553a:	1cfb      	adds	r3, r7, #3
 800553c:	701a      	strb	r2, [r3, #0]
	uint16_t   foo = 0 ;
 800553e:	230e      	movs	r3, #14
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2200      	movs	r2, #0
 8005544:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 8005546:	230d      	movs	r3, #13
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e011      	b.n	8005574 <prom8m1b+0x44>
		foo += array[i];
 8005550:	200d      	movs	r0, #13
 8005552:	183b      	adds	r3, r7, r0
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	0019      	movs	r1, r3
 800555e:	220e      	movs	r2, #14
 8005560:	18bb      	adds	r3, r7, r2
 8005562:	18ba      	adds	r2, r7, r2
 8005564:	8812      	ldrh	r2, [r2, #0]
 8005566:	188a      	adds	r2, r1, r2
 8005568:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < prom ; i++ ){
 800556a:	183b      	adds	r3, r7, r0
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	183b      	adds	r3, r7, r0
 8005570:	3201      	adds	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	230d      	movs	r3, #13
 8005576:	18fa      	adds	r2, r7, r3
 8005578:	1cfb      	adds	r3, r7, #3
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3e6      	bcc.n	8005550 <prom8m1b+0x20>
	}
	foo /=  prom;
 8005582:	240e      	movs	r4, #14
 8005584:	193b      	adds	r3, r7, r4
 8005586:	881a      	ldrh	r2, [r3, #0]
 8005588:	1cfb      	adds	r3, r7, #3
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	0019      	movs	r1, r3
 800558e:	0010      	movs	r0, r2
 8005590:	f7fa fe4c 	bl	800022c <__divsi3>
 8005594:	0003      	movs	r3, r0
 8005596:	001a      	movs	r2, r3
 8005598:	193b      	adds	r3, r7, r4
 800559a:	801a      	strh	r2, [r3, #0]
	return foo;
 800559c:	193b      	adds	r3, r7, r4
 800559e:	881b      	ldrh	r3, [r3, #0]
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b005      	add	sp, #20
 80055a6:	bd90      	pop	{r4, r7, pc}

080055a8 <prog_param>:


//;LN 5944 ============================================================
//;///manuel  esta parte se llama desde el proceso  display
void  prog_param (void){
 80055a8:	b5b0      	push	{r4, r5, r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af02      	add	r7, sp, #8

		if(!botonst2[1]){//btjf botonst2,#1,no_set_prog;
 80055ae:	4bde      	ldr	r3, [pc, #888]	@ (8005928 <prog_param+0x380>)
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4053      	eors	r3, r2
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d137      	bne.n	800562c <prog_param+0x84>
			goto no_set_prog;
		}
		flagsb[f_prog] = 1;//bset flagsb,#f_prog
 80055bc:	4bdb      	ldr	r3, [pc, #876]	@ (800592c <prog_param+0x384>)
 80055be:	2201      	movs	r2, #1
 80055c0:	705a      	strb	r2, [r3, #1]
		cnt_prog = 20;//mov cnt_prog,#20
 80055c2:	4bdb      	ldr	r3, [pc, #876]	@ (8005930 <prog_param+0x388>)
 80055c4:	2214      	movs	r2, #20
 80055c6:	701a      	strb	r2, [r3, #0]
		key = 0;//clr	key
 80055c8:	4bda      	ldr	r3, [pc, #872]	@ (8005934 <prog_param+0x38c>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
		param = 0; //clr param
 80055ce:	4bda      	ldr	r3, [pc, #872]	@ (8005938 <prog_param+0x390>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80055d4:	230f      	movs	r3, #15
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e00a      	b.n	80055f4 <prog_param+0x4c>
			flags_menu[k] = 0; //clr flags_menu;
 80055de:	200f      	movs	r0, #15
 80055e0:	183b      	adds	r3, r7, r0
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	4ad5      	ldr	r2, [pc, #852]	@ (800593c <prog_param+0x394>)
 80055e6:	2100      	movs	r1, #0
 80055e8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8; k++){
 80055ea:	183b      	adds	r3, r7, r0
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	3201      	adds	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	230f      	movs	r3, #15
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	d9ef      	bls.n	80055de <prog_param+0x36>
		}
		//ldw X,#eedato_seg1
		//ldw Y,#cdato_seg1 ************** ?
		uint8_t *X = &eePlantilla[eedato_seg1];					// manuel_ apuntador para la eeprom
 80055fe:	4bd0      	ldr	r3, [pc, #832]	@ (8005940 <prog_param+0x398>)
 8005600:	60bb      	str	r3, [r7, #8]
		uint8_t *Y = &copiaPlantilla[cdato_seg1];								// manuel_ apuntador ram para la compia de parametros
 8005602:	4bd0      	ldr	r3, [pc, #832]	@ (8005944 <prog_param+0x39c>)
 8005604:	607b      	str	r3, [r7, #4]

		// manuel_ copia los parametros de eeprom a una ram copia para modificarlos
copy_eeprom: //********************************?
		//call rdeeprom
		//ld A,waux
		*Y = (uint8_t) findLastValue((uint32_t)X);	//ld (Y), A
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0018      	movs	r0, r3
 800560a:	f7fd fb07 	bl	8002c1c <findLastValue>
 800560e:	0003      	movs	r3, r0
 8005610:	b2da      	uxtb	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	701a      	strb	r2, [r3, #0]
		X++;//incw X
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	3301      	adds	r3, #1
 800561a:	60bb      	str	r3, [r7, #8]
		Y++;//incw Y
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
		if(Y <= &copiaPlantilla[cdato_seg3]){//cpw Y,#cdato_seg3
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4bc8      	ldr	r3, [pc, #800]	@ (8005948 <prog_param+0x3a0>)
 8005626:	429a      	cmp	r2, r3
 8005628:	d802      	bhi.n	8005630 <prog_param+0x88>
			goto copy_eeprom;//jrule copy_eeprom
 800562a:	e7ec      	b.n	8005606 <prog_param+0x5e>
			goto no_set_prog;
 800562c:	46c0      	nop			@ (mov r8, r8)
 800562e:	e000      	b.n	8005632 <prog_param+0x8a>
		}

no_set_prog:
 8005630:	46c0      	nop			@ (mov r8, r8)

		if(flagsb[f_prog]){//btjt flagsb,#f_prog,ask_btn_prsd
 8005632:	4bbe      	ldr	r3, [pc, #760]	@ (800592c <prog_param+0x384>)
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <prog_param+0x96>
 800563a:	f000 fc2b 	bl	8005e94 <prog_param+0x8ec>
			goto ask_btn_prsd;
 800563e:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_prog_param; //jp fin_prog_param
ask_btn_prsd:
	for(uint8_t k=0; k<8; k++){
 8005640:	1cfb      	adds	r3, r7, #3
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e00d      	b.n	8005664 <prog_param+0xbc>
		if(!btn_pr[k]){//tnz btn_pr				;// manuel_ no es un contador es copia de los botones, pregunta practicmante si alguna tecla se presiono
 8005648:	1cfb      	adds	r3, r7, #3
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4abf      	ldr	r2, [pc, #764]	@ (800594c <prog_param+0x3a4>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	2201      	movs	r2, #1
 8005652:	4053      	eors	r3, r2
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <prog_param+0xcc>
	for(uint8_t k=0; k<8; k++){
 800565a:	1cfb      	adds	r3, r7, #3
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	1cfb      	adds	r3, r7, #3
 8005660:	3201      	adds	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	1cfb      	adds	r3, r7, #3
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b07      	cmp	r3, #7
 800566a:	d9ed      	bls.n	8005648 <prog_param+0xa0>
			goto no_btn_pres; //jreq no_btn_pres
		}
	}
		cnt_prog = 20;//mov cnt_prog,#20		;// manuel_ cada que se presiona cualquier tecla se recarga el tiempo de programacion a 30s
 800566c:	4bb0      	ldr	r3, [pc, #704]	@ (8005930 <prog_param+0x388>)
 800566e:	2214      	movs	r2, #20
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e000      	b.n	8005676 <prog_param+0xce>
			goto no_btn_pres; //jreq no_btn_pres
 8005674:	46c0      	nop			@ (mov r8, r8)
no_btn_pres:
		if(cnt_prog != 0){//tnz cnt_prog
 8005676:	4bae      	ldr	r3, [pc, #696]	@ (8005930 <prog_param+0x388>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <prog_param+0xda>
 800567e:	f000 fbf4 	bl	8005e6a <prog_param+0x8c2>
			goto no_exp_tmp;//jrne	no_exp_tmp
 8005682:	46c0      	nop			@ (mov r8, r8)
		goto cancel_prog;

		// manuel_ 1er primer paso para ver si ya se introdujo el password correctamente
no_exp_tmp:

		if(!flagsb[f_menu2]){//btjf flagsb,#f_menu2,noMenu2
 8005684:	4ba9      	ldr	r3, [pc, #676]	@ (800592c <prog_param+0x384>)
 8005686:	789b      	ldrb	r3, [r3, #2]
 8005688:	2201      	movs	r2, #1
 800568a:	4053      	eors	r3, r2
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d114      	bne.n	80056bc <prog_param+0x114>
			goto noMenu2;
		}
		if(flagsb[f_nv2Menu2]){//btjt flagsb,#f_nv2Menu2,jmp_nv2Menu2
 8005692:	4ba6      	ldr	r3, [pc, #664]	@ (800592c <prog_param+0x384>)
 8005694:	791b      	ldrb	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d100      	bne.n	800569c <prog_param+0xf4>
 800569a:	e26a      	b.n	8005b72 <prog_param+0x5ca>
			goto jmp_nv2Menu2;
 800569c:	46c0      	nop			@ (mov r8, r8)
		}
		goto menu2; //jp menu2
jmp_nv2Menu2:
		goto nv2Menu2;
 800569e:	46c0      	nop			@ (mov r8, r8)
//;============================================================
nv2Menu2:
//			//	ld  A,#%00000111
//			//	and  A,param2    	    ;/ Para evitar saltos indeseados
//			// param2 &= 0x07;
			STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 80056a0:	4bab      	ldr	r3, [pc, #684]	@ (8005950 <prog_param+0x3a8>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2207      	movs	r2, #7
 80056a6:	4013      	ands	r3, r2
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4baa      	ldr	r3, [pc, #680]	@ (8005954 <prog_param+0x3ac>)
 80056ac:	701a      	strb	r2, [r3, #0]
//			//	ldw  X,#$0003
//			//	mul  X,A
//		   //  param2 = param2 * 0x03;
//			//jp (menu_02_nv2,X) ***********************************
menu_02_nv2:
			switch(STM8_A)
 80056ae:	4ba9      	ldr	r3, [pc, #676]	@ (8005954 <prog_param+0x3ac>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d901      	bls.n	80056ba <prog_param+0x112>
 80056b6:	f000 fbc6 	bl	8005e46 <prog_param+0x89e>
 80056ba:	e305      	b.n	8005cc8 <prog_param+0x720>
			goto noMenu2;
 80056bc:	46c0      	nop			@ (mov r8, r8)
		if(!flagsb[f_sprm]){//btjf flagsb,#f_sprm,sel_param
 80056be:	4b9b      	ldr	r3, [pc, #620]	@ (800592c <prog_param+0x384>)
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	2201      	movs	r2, #1
 80056c4:	4053      	eors	r3, r2
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d100      	bne.n	80056ce <prog_param+0x126>
 80056cc:	e0cc      	b.n	8005868 <prog_param+0x2c0>
			goto sel_param;
 80056ce:	46c0      	nop			@ (mov r8, r8)
		btn_pr[b1_f2] = 0;//bres btn_pr,#b1_f2
 80056d0:	4b9e      	ldr	r3, [pc, #632]	@ (800594c <prog_param+0x3a4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	705a      	strb	r2, [r3, #1]
		btn_pr[b3_f2] = 0;//bres btn_pr,#b3_f2
 80056d6:	4b9d      	ldr	r3, [pc, #628]	@ (800594c <prog_param+0x3a4>)
 80056d8:	2200      	movs	r2, #0
 80056da:	715a      	strb	r2, [r3, #5]
		STM8_A = param;		//ld a, param
 80056dc:	4b96      	ldr	r3, [pc, #600]	@ (8005938 <prog_param+0x390>)
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	4b9c      	ldr	r3, [pc, #624]	@ (8005954 <prog_param+0x3ac>)
 80056e2:	701a      	strb	r2, [r3, #0]
		lmt_up_w  = 9;		//mov lmt_up_w + 1,#9
 80056e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005958 <prog_param+0x3b0>)
 80056e6:	2209      	movs	r2, #9
 80056e8:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//mov lmt_dw_w + 1,#00
 80056ea:	4b9c      	ldr	r3, [pc, #624]	@ (800595c <prog_param+0x3b4>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	801a      	strh	r2, [r3, #0]
		md_dif_math();	 	//call md_dif_math;					//24-oct-2024 RGM:	Funcion Revisada
 80056f0:	f000 fbdc 	bl	8005eac <md_dif_math>
		param = wreg;		//mov param,wreg
 80056f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005960 <prog_param+0x3b8>)
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005938 <prog_param+0x390>)
 80056fa:	701a      	strb	r2, [r3, #0]
		STM8_A = param & 0x0F;			//;/ Para evitar saltos indeseados
 80056fc:	4b8e      	ldr	r3, [pc, #568]	@ (8005938 <prog_param+0x390>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	220f      	movs	r2, #15
 8005702:	4013      	ands	r3, r2
 8005704:	b2da      	uxtb	r2, r3
 8005706:	4b93      	ldr	r3, [pc, #588]	@ (8005954 <prog_param+0x3ac>)
 8005708:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 800570a:	4b92      	ldr	r3, [pc, #584]	@ (8005954 <prog_param+0x3ac>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b09      	cmp	r3, #9
 8005710:	d840      	bhi.n	8005794 <prog_param+0x1ec>
 8005712:	009a      	lsls	r2, r3, #2
 8005714:	4b93      	ldr	r3, [pc, #588]	@ (8005964 <prog_param+0x3bc>)
 8005716:	18d3      	adds	r3, r2, r3
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	469f      	mov	pc, r3
			case 0: goto opc00m01;
 800571c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x25);
 800571e:	2125      	movs	r1, #37	@ 0x25
 8005720:	2005      	movs	r0, #5
 8005722:	f001 fd3b 	bl	800719c <op_menu>
		goto ask_enter;//jra ask_enter
 8005726:	e03a      	b.n	800579e <prog_param+0x1f6>
			case 1: goto opc01m01;
 8005728:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0D, 0x0F);
 800572a:	210f      	movs	r1, #15
 800572c:	200d      	movs	r0, #13
 800572e:	f001 fd35 	bl	800719c <op_menu>
		goto ask_enter; // jra ask_enter
 8005732:	e034      	b.n	800579e <prog_param+0x1f6>
			case 2: goto opc02m01;
 8005734:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0A);
 8005736:	210a      	movs	r1, #10
 8005738:	2020      	movs	r0, #32
 800573a:	f001 fd2f 	bl	800719c <op_menu>
		goto ask_enter;//jra ask_enter
 800573e:	e02e      	b.n	800579e <prog_param+0x1f6>
			case 3: goto opc03m01;
 8005740:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x20, 0x0B);
 8005742:	210b      	movs	r1, #11
 8005744:	2020      	movs	r0, #32
 8005746:	f001 fd29 	bl	800719c <op_menu>
		goto ask_enter;//jra ask_enter
 800574a:	e028      	b.n	800579e <prog_param+0x1f6>
			case 4: goto opc04m01;
 800574c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 800574e:	210f      	movs	r1, #15
 8005750:	2000      	movs	r0, #0
 8005752:	f001 fd23 	bl	800719c <op_menu>
		goto ask_enter;//jra	ask_enter
 8005756:	e022      	b.n	800579e <prog_param+0x1f6>
			case 5: goto opc05m01;
 8005758:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x25, 0x05);
 800575a:	2105      	movs	r1, #5
 800575c:	2025      	movs	r0, #37	@ 0x25
 800575e:	f001 fd1d 	bl	800719c <op_menu>
		goto ask_enter;//jra ask_enter
 8005762:	e01c      	b.n	800579e <prog_param+0x1f6>
			case 6: goto opc06m01;
 8005764:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x27);
 8005766:	2127      	movs	r1, #39	@ 0x27
 8005768:	200f      	movs	r0, #15
 800576a:	f001 fd17 	bl	800719c <op_menu>
		goto ask_enter;//jra ask_enter
 800576e:	e016      	b.n	800579e <prog_param+0x1f6>
			case 7: goto opc07m01;
 8005770:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x0F, 0x0A);
 8005772:	210a      	movs	r1, #10
 8005774:	200f      	movs	r0, #15
 8005776:	f001 fd11 	bl	800719c <op_menu>
		goto ask_enter;//jra	ask_enter
 800577a:	e010      	b.n	800579e <prog_param+0x1f6>
			case 8: goto opc08m01;
 800577c:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 800577e:	210e      	movs	r1, #14
 8005780:	2005      	movs	r0, #5
 8005782:	f001 fd0b 	bl	800719c <op_menu>
		goto ask_enter;//jra ask_enter
 8005786:	e00a      	b.n	800579e <prog_param+0x1f6>
			case 9: goto opc09m01;
 8005788:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0x0E);
 800578a:	210e      	movs	r1, #14
 800578c:	201f      	movs	r0, #31
 800578e:	f001 fd05 	bl	800719c <op_menu>
		goto ask_enter;//jra	ask_enter
 8005792:	e004      	b.n	800579e <prog_param+0x1f6>
			default: goto opcNA;
 8005794:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005796:	2126      	movs	r1, #38	@ 0x26
 8005798:	2026      	movs	r0, #38	@ 0x26
 800579a:	f001 fcff 	bl	800719c <op_menu>
		datled_clear();
 800579e:	f001 fd17 	bl	80071d0 <datled_clear>
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,fin_sel_param;		Se acepto la selección del parámetro?
 80057a2:	4b6a      	ldr	r3, [pc, #424]	@ (800594c <prog_param+0x3a4>)
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4053      	eors	r3, r2
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d157      	bne.n	8005860 <prog_param+0x2b8>
		flagsb[f_sprm] = 1;//bset flagsb,#f_sprm;		indica que sea sseleccionado una parametro
 80057b0:	4b5e      	ldr	r3, [pc, #376]	@ (800592c <prog_param+0x384>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	70da      	strb	r2, [r3, #3]
		if(param != 9){//cp A,#9;
 80057b6:	4b60      	ldr	r3, [pc, #384]	@ (8005938 <prog_param+0x390>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d100      	bne.n	80057c0 <prog_param+0x218>
 80057be:	e356      	b.n	8005e6e <prog_param+0x8c6>
			goto ask_set_prog;//jrne ask_set_prog
 80057c0:	46c0      	nop			@ (mov r8, r8)
		if(param != 8){//cp A,#8;
 80057c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005938 <prog_param+0x390>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d14c      	bne.n	8005864 <prog_param+0x2bc>
		if(!flags_menu[0]){//btjf flags_menu,#0,no_desh_forz
 80057ca:	4b5c      	ldr	r3, [pc, #368]	@ (800593c <prog_param+0x394>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	4053      	eors	r3, r2
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <prog_param+0x238>
		flags_accMenu = 1;		//bset flags_accMenu,#0
 80057d8:	4b63      	ldr	r3, [pc, #396]	@ (8005968 <prog_param+0x3c0>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e000      	b.n	80057e2 <prog_param+0x23a>
			goto no_desh_forz;
 80057e0:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[1]){//btjf	flags_menu,#1,no_def_param
 80057e2:	4b56      	ldr	r3, [pc, #344]	@ (800593c <prog_param+0x394>)
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4053      	eors	r3, r2
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d12f      	bne.n	8005850 <prog_param+0x2a8>
		flags_menu[1] = 0; //bres flags_menu,#1
 80057f0:	4b52      	ldr	r3, [pc, #328]	@ (800593c <prog_param+0x394>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_H] =  copiaPlantilla[cspdiur_BK_H];			//mov	cspdiur_w,cspdiur_w_BK
 80057f6:	4b53      	ldr	r3, [pc, #332]	@ (8005944 <prog_param+0x39c>)
 80057f8:	2239      	movs	r2, #57	@ 0x39
 80057fa:	5c9a      	ldrb	r2, [r3, r2]
 80057fc:	4b51      	ldr	r3, [pc, #324]	@ (8005944 <prog_param+0x39c>)
 80057fe:	705a      	strb	r2, [r3, #1]
		copiaPlantilla[cspdiur_L] =  copiaPlantilla[cspdiur_BK_L];			//mov	cspdiur_w+1,cspdiur_w_BK+1
 8005800:	4b50      	ldr	r3, [pc, #320]	@ (8005944 <prog_param+0x39c>)
 8005802:	223a      	movs	r2, #58	@ 0x3a
 8005804:	5c9a      	ldrb	r2, [r3, r2]
 8005806:	4b4f      	ldr	r3, [pc, #316]	@ (8005944 <prog_param+0x39c>)
 8005808:	709a      	strb	r2, [r3, #2]
		copiaPlantilla[cdifdiur_H] = copiaPlantilla[cdifdiur_BK_H];			//mov	cdifdiur_w,cdifdiur_w_BK
 800580a:	4b4e      	ldr	r3, [pc, #312]	@ (8005944 <prog_param+0x39c>)
 800580c:	223b      	movs	r2, #59	@ 0x3b
 800580e:	5c9a      	ldrb	r2, [r3, r2]
 8005810:	4b4c      	ldr	r3, [pc, #304]	@ (8005944 <prog_param+0x39c>)
 8005812:	70da      	strb	r2, [r3, #3]
		copiaPlantilla[cdifdiur_L] = copiaPlantilla[cdifdiur_BK_L];			//mov	cdifdiur_w+1,cdifdiur_w_BK+1
 8005814:	4b4b      	ldr	r3, [pc, #300]	@ (8005944 <prog_param+0x39c>)
 8005816:	223c      	movs	r2, #60	@ 0x3c
 8005818:	5c9a      	ldrb	r2, [r3, r2]
 800581a:	4b4a      	ldr	r3, [pc, #296]	@ (8005944 <prog_param+0x39c>)
 800581c:	711a      	strb	r2, [r3, #4]
		copiaPlantilla[climsual_H] = copiaPlantilla[climsual_BK_H];			//mov	climsual_w,climsual_w_BK
 800581e:	4b49      	ldr	r3, [pc, #292]	@ (8005944 <prog_param+0x39c>)
 8005820:	223d      	movs	r2, #61	@ 0x3d
 8005822:	5c99      	ldrb	r1, [r3, r2]
 8005824:	4b47      	ldr	r3, [pc, #284]	@ (8005944 <prog_param+0x39c>)
 8005826:	222d      	movs	r2, #45	@ 0x2d
 8005828:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climsual_L] = copiaPlantilla[climsual_BK_L];			//mov	climsual_w+1,climsual_w_BK+1
 800582a:	4b46      	ldr	r3, [pc, #280]	@ (8005944 <prog_param+0x39c>)
 800582c:	223e      	movs	r2, #62	@ 0x3e
 800582e:	5c99      	ldrb	r1, [r3, r2]
 8005830:	4b44      	ldr	r3, [pc, #272]	@ (8005944 <prog_param+0x39c>)
 8005832:	222e      	movs	r2, #46	@ 0x2e
 8005834:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_H] = copiaPlantilla[climinal_BK_H];			//mov	climinal_w,climinal_w_BK
 8005836:	4b43      	ldr	r3, [pc, #268]	@ (8005944 <prog_param+0x39c>)
 8005838:	223f      	movs	r2, #63	@ 0x3f
 800583a:	5c99      	ldrb	r1, [r3, r2]
 800583c:	4b41      	ldr	r3, [pc, #260]	@ (8005944 <prog_param+0x39c>)
 800583e:	222f      	movs	r2, #47	@ 0x2f
 8005840:	5499      	strb	r1, [r3, r2]
		copiaPlantilla[climinal_L] = copiaPlantilla[climinal_BK_L];			//mov	climinal_w+1,climinal_w_BK+1
 8005842:	4b40      	ldr	r3, [pc, #256]	@ (8005944 <prog_param+0x39c>)
 8005844:	2240      	movs	r2, #64	@ 0x40
 8005846:	5c99      	ldrb	r1, [r3, r2]
 8005848:	4b3e      	ldr	r3, [pc, #248]	@ (8005944 <prog_param+0x39c>)
 800584a:	2230      	movs	r2, #48	@ 0x30
 800584c:	5499      	strb	r1, [r3, r2]
 800584e:	e000      	b.n	8005852 <prog_param+0x2aa>
			goto no_def_param;
 8005850:	46c0      	nop			@ (mov r8, r8)
		cntmemo = 0x00;//mov cntmemo,#$00			//Para grabar desde la primera localidad de EEPROM
 8005852:	4b46      	ldr	r3, [pc, #280]	@ (800596c <prog_param+0x3c4>)
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
		ctlmemo = 0xAA;//mov ctlmemo,#$AA			//Graba los datos en EEPROM
 8005858:	4b45      	ldr	r3, [pc, #276]	@ (8005970 <prog_param+0x3c8>)
 800585a:	22aa      	movs	r2, #170	@ 0xaa
 800585c:	701a      	strb	r2, [r3, #0]
		goto cancel_prog;//jp cancel_prog
 800585e:	e309      	b.n	8005e74 <prog_param+0x8cc>
			goto fin_sel_param;
 8005860:	46c0      	nop			@ (mov r8, r8)
 8005862:	e318      	b.n	8005e96 <prog_param+0x8ee>
			goto fin_sel_param; //jrne fin_sel_param
 8005864:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;
 8005866:	e316      	b.n	8005e96 <prog_param+0x8ee>
		goto mod_param;//jra mod_param;		/ Si ya se selecciono el parámetro ve a la modificación
 8005868:	46c0      	nop			@ (mov r8, r8)
		STM8_A = param & 0x0F;
 800586a:	4b33      	ldr	r3, [pc, #204]	@ (8005938 <prog_param+0x390>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	220f      	movs	r2, #15
 8005870:	4013      	ands	r3, r2
 8005872:	b2da      	uxtb	r2, r3
 8005874:	4b37      	ldr	r3, [pc, #220]	@ (8005954 <prog_param+0x3ac>)
 8005876:	701a      	strb	r2, [r3, #0]
		switch (STM8_A)
 8005878:	4b36      	ldr	r3, [pc, #216]	@ (8005954 <prog_param+0x3ac>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b09      	cmp	r3, #9
 800587e:	d900      	bls.n	8005882 <prog_param+0x2da>
 8005880:	e134      	b.n	8005aec <prog_param+0x544>
 8005882:	009a      	lsls	r2, r3, #2
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <prog_param+0x3cc>)
 8005886:	18d3      	adds	r3, r2, r3
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	469f      	mov	pc, r3
			case 0: goto opc00m01nv2;
 800588c:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]), TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]),TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]), cspdiur_H, cspdiur_L);
 800588e:	4b3a      	ldr	r3, [pc, #232]	@ (8005978 <prog_param+0x3d0>)
 8005890:	0018      	movs	r0, r3
 8005892:	f000 fbe5 	bl	8006060 <TwoByteInArrayToWord>
 8005896:	0003      	movs	r3, r0
 8005898:	001c      	movs	r4, r3
 800589a:	4b38      	ldr	r3, [pc, #224]	@ (800597c <prog_param+0x3d4>)
 800589c:	0018      	movs	r0, r3
 800589e:	f000 fbdf 	bl	8006060 <TwoByteInArrayToWord>
 80058a2:	0003      	movs	r3, r0
 80058a4:	001d      	movs	r5, r3
 80058a6:	4b36      	ldr	r3, [pc, #216]	@ (8005980 <prog_param+0x3d8>)
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 fbd9 	bl	8006060 <TwoByteInArrayToWord>
 80058ae:	0003      	movs	r3, r0
 80058b0:	001a      	movs	r2, r3
 80058b2:	2302      	movs	r3, #2
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2301      	movs	r3, #1
 80058b8:	0029      	movs	r1, r5
 80058ba:	0020      	movs	r0, r4
 80058bc:	f001 fcc2 	bl	8007244 <opc_nv>
			goto ask_enter_nv2; //jra ask_enter_nv2
 80058c0:	e119      	b.n	8005af6 <prog_param+0x54e>
			case 1: goto opc01m01nv2;
 80058c2:	46c0      	nop			@ (mov r8, r8)
			opc_nv (99, 0, TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H]), cdifdiur_H, cdifdiur_L);
 80058c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005984 <prog_param+0x3dc>)
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fbca 	bl	8006060 <TwoByteInArrayToWord>
 80058cc:	0003      	movs	r3, r0
 80058ce:	001a      	movs	r2, r3
 80058d0:	2304      	movs	r3, #4
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2303      	movs	r3, #3
 80058d6:	2100      	movs	r1, #0
 80058d8:	2063      	movs	r0, #99	@ 0x63
 80058da:	f001 fcb3 	bl	8007244 <opc_nv>
			goto ask_enter_nv2;//jra ask_enter_nv2
 80058de:	e10a      	b.n	8005af6 <prog_param+0x54e>
			case 2: goto opc02m01nv2;
 80058e0:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[crngmax_H]) + 150, (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H])) + (TwoByteInArrayToWord (&copiaPlantilla[cdifdiur_H])) + 10 , TwoByteInArrayToWord (&copiaPlantilla[climsual_H]), climsual_H, climsual_L);
 80058e2:	4b25      	ldr	r3, [pc, #148]	@ (8005978 <prog_param+0x3d0>)
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 fbbb 	bl	8006060 <TwoByteInArrayToWord>
 80058ea:	0003      	movs	r3, r0
 80058ec:	3396      	adds	r3, #150	@ 0x96
 80058ee:	001c      	movs	r4, r3
 80058f0:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <prog_param+0x3d8>)
 80058f2:	0018      	movs	r0, r3
 80058f4:	f000 fbb4 	bl	8006060 <TwoByteInArrayToWord>
 80058f8:	0003      	movs	r3, r0
 80058fa:	001d      	movs	r5, r3
 80058fc:	4b21      	ldr	r3, [pc, #132]	@ (8005984 <prog_param+0x3dc>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 fbae 	bl	8006060 <TwoByteInArrayToWord>
 8005904:	0003      	movs	r3, r0
 8005906:	18eb      	adds	r3, r5, r3
 8005908:	330a      	adds	r3, #10
 800590a:	001d      	movs	r5, r3
 800590c:	4b1e      	ldr	r3, [pc, #120]	@ (8005988 <prog_param+0x3e0>)
 800590e:	0018      	movs	r0, r3
 8005910:	f000 fba6 	bl	8006060 <TwoByteInArrayToWord>
 8005914:	0003      	movs	r3, r0
 8005916:	001a      	movs	r2, r3
 8005918:	232e      	movs	r3, #46	@ 0x2e
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	232d      	movs	r3, #45	@ 0x2d
 800591e:	0029      	movs	r1, r5
 8005920:	0020      	movs	r0, r4
 8005922:	f001 fc8f 	bl	8007244 <opc_nv>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005926:	e0e6      	b.n	8005af6 <prog_param+0x54e>
 8005928:	20000c18 	.word	0x20000c18
 800592c:	20000be8 	.word	0x20000be8
 8005930:	20000b72 	.word	0x20000b72
 8005934:	20000c00 	.word	0x20000c00
 8005938:	20000bff 	.word	0x20000bff
 800593c:	20000c48 	.word	0x20000c48
 8005940:	0803f000 	.word	0x0803f000
 8005944:	20000138 	.word	0x20000138
 8005948:	200001b7 	.word	0x200001b7
 800594c:	20000bf0 	.word	0x20000bf0
 8005950:	20000bfe 	.word	0x20000bfe
 8005954:	200008d0 	.word	0x200008d0
 8005958:	20000c02 	.word	0x20000c02
 800595c:	20000c04 	.word	0x20000c04
 8005960:	20000b55 	.word	0x20000b55
 8005964:	0801b220 	.word	0x0801b220
 8005968:	20000c50 	.word	0x20000c50
 800596c:	20000c64 	.word	0x20000c64
 8005970:	20000c63 	.word	0x20000c63
 8005974:	0801b248 	.word	0x0801b248
 8005978:	20000147 	.word	0x20000147
 800597c:	20000145 	.word	0x20000145
 8005980:	20000139 	.word	0x20000139
 8005984:	2000013b 	.word	0x2000013b
 8005988:	20000165 	.word	0x20000165
			case 3: goto opc03m01nv2;
 800598c:	46c0      	nop			@ (mov r8, r8)
			opc_nv (TwoByteInArrayToWord (&copiaPlantilla[cspdiur_H]) - 10, TwoByteInArrayToWord (&copiaPlantilla[crngmin_H]) - 150, TwoByteInArrayToWord (&copiaPlantilla[climinal_H]), climinal_H, climinal_L);
 800598e:	4bd6      	ldr	r3, [pc, #856]	@ (8005ce8 <prog_param+0x740>)
 8005990:	0018      	movs	r0, r3
 8005992:	f000 fb65 	bl	8006060 <TwoByteInArrayToWord>
 8005996:	0003      	movs	r3, r0
 8005998:	3b0a      	subs	r3, #10
 800599a:	001c      	movs	r4, r3
 800599c:	4bd3      	ldr	r3, [pc, #844]	@ (8005cec <prog_param+0x744>)
 800599e:	0018      	movs	r0, r3
 80059a0:	f000 fb5e 	bl	8006060 <TwoByteInArrayToWord>
 80059a4:	0003      	movs	r3, r0
 80059a6:	3b96      	subs	r3, #150	@ 0x96
 80059a8:	001d      	movs	r5, r3
 80059aa:	4bd1      	ldr	r3, [pc, #836]	@ (8005cf0 <prog_param+0x748>)
 80059ac:	0018      	movs	r0, r3
 80059ae:	f000 fb57 	bl	8006060 <TwoByteInArrayToWord>
 80059b2:	0003      	movs	r3, r0
 80059b4:	001a      	movs	r2, r3
 80059b6:	2330      	movs	r3, #48	@ 0x30
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	232f      	movs	r3, #47	@ 0x2f
 80059bc:	0029      	movs	r1, r5
 80059be:	0020      	movs	r0, r4
 80059c0:	f001 fc40 	bl	8007244 <opc_nv>
			goto ask_enter_nv2;		//jra ask_enter_nv2
 80059c4:	e097      	b.n	8005af6 <prog_param+0x54e>
			case 4: goto opc04m01nv2;
 80059c6:	46c0      	nop			@ (mov r8, r8)
			if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc04m01nv2
 80059c8:	4bca      	ldr	r3, [pc, #808]	@ (8005cf4 <prog_param+0x74c>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <prog_param+0x432>
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc04m01nv2
 80059d0:	4bc8      	ldr	r3, [pc, #800]	@ (8005cf4 <prog_param+0x74c>)
 80059d2:	791b      	ldrb	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <prog_param+0x44a>
				goto toggle_opc04m01nv2;
 80059d8:	e000      	b.n	80059dc <prog_param+0x434>
				goto toggle_opc04m01nv2;
 80059da:	46c0      	nop			@ (mov r8, r8)
			flags_menu[0] ^= 1; // BitComplement(flags_menu,0);		//bcpl flags_menu,#0
 80059dc:	4bc6      	ldr	r3, [pc, #792]	@ (8005cf8 <prog_param+0x750>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2201      	movs	r2, #1
 80059e2:	4053      	eors	r3, r2
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	4193      	sbcs	r3, r2
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	4bc2      	ldr	r3, [pc, #776]	@ (8005cf8 <prog_param+0x750>)
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e000      	b.n	80059f4 <prog_param+0x44c>
			goto dpy_opc04m01nv2; //jra dpy_opc04m01nv2
 80059f2:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 80059f4:	2101      	movs	r1, #1
 80059f6:	2028      	movs	r0, #40	@ 0x28
 80059f8:	f001 fbd0 	bl	800719c <op_menu>
			if(!flags_menu[0]){//btjf flags_menu,#0,dpy2_opc04m01nv2
 80059fc:	4bbe      	ldr	r3, [pc, #760]	@ (8005cf8 <prog_param+0x750>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2201      	movs	r2, #1
 8005a02:	4053      	eors	r3, r2
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <prog_param+0x46c>
			op_menu (0x00, 0x1D);
 8005a0a:	211d      	movs	r1, #29
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f001 fbc5 	bl	800719c <op_menu>
 8005a12:	e000      	b.n	8005a16 <prog_param+0x46e>
				goto dpy2_opc04m01nv2;
 8005a14:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005a16:	f001 fbdb 	bl	80071d0 <datled_clear>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005a1a:	e06c      	b.n	8005af6 <prog_param+0x54e>
			case 5: goto opc05m01nv2;
 8005a1c:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x25, 0x05);
 8005a1e:	2105      	movs	r1, #5
 8005a20:	2025      	movs	r0, #37	@ 0x25
 8005a22:	f001 fbbb 	bl	800719c <op_menu>
			lmt_up_w = 99;//	mov lmt_up_w + 1,#99
 8005a26:	4bb5      	ldr	r3, [pc, #724]	@ (8005cfc <prog_param+0x754>)
 8005a28:	2263      	movs	r2, #99	@ 0x63
 8005a2a:	801a      	strh	r2, [r3, #0]
			lmt_dw_w = 0;//	mov	lmt_dw_w + 1,#00
 8005a2c:	4bb4      	ldr	r3, [pc, #720]	@ (8005d00 <prog_param+0x758>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	801a      	strh	r2, [r3, #0]
			STM8_A = key;		//	ld	a,key ;			/ Carga el dato apuntado en la dirección del parámetro
 8005a32:	4bb4      	ldr	r3, [pc, #720]	@ (8005d04 <prog_param+0x75c>)
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	4bb4      	ldr	r3, [pc, #720]	@ (8005d08 <prog_param+0x760>)
 8005a38:	701a      	strb	r2, [r3, #0]
			md_dif_math();	//	call md_dif_math;		/ modificacion de un dato sin signo entero
 8005a3a:	f000 fa37 	bl	8005eac <md_dif_math>
			key = wreg;//	mov	key,wreg
 8005a3e:	4bb3      	ldr	r3, [pc, #716]	@ (8005d0c <prog_param+0x764>)
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	4bb0      	ldr	r3, [pc, #704]	@ (8005d04 <prog_param+0x75c>)
 8005a44:	701a      	strb	r2, [r3, #0]
			soloent1();//	call soloent1;				/ Muestra valor del parámetro
 8005a46:	f000 fd3f 	bl	80064c8 <soloent1>
			datled_clear();
 8005a4a:	f001 fbc1 	bl	80071d0 <datled_clear>
			goto ask_enter_nv2;//	jra	 ask_enter_nv2
 8005a4e:	e052      	b.n	8005af6 <prog_param+0x54e>
			case 6: goto opc06m01nv2;
 8005a50:	46c0      	nop			@ (mov r8, r8)
			op_menu  (findLastValue((uint32_t) &eePlantilla[eeversion1]) , findLastValue((uint32_t) &eePlantilla[eeversion2])/10);
 8005a52:	4baf      	ldr	r3, [pc, #700]	@ (8005d10 <prog_param+0x768>)
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7fd f8e1 	bl	8002c1c <findLastValue>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	b2dc      	uxtb	r4, r3
 8005a5e:	4bad      	ldr	r3, [pc, #692]	@ (8005d14 <prog_param+0x76c>)
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7fd f8db 	bl	8002c1c <findLastValue>
 8005a66:	0003      	movs	r3, r0
 8005a68:	210a      	movs	r1, #10
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7fa fb54 	bl	8000118 <__udivsi3>
 8005a70:	0003      	movs	r3, r0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	0019      	movs	r1, r3
 8005a76:	0020      	movs	r0, r4
 8005a78:	f001 fb90 	bl	800719c <op_menu>
			goto ask_enter_nv2;//jra ask_enter_nv2
 8005a7c:	e03b      	b.n	8005af6 <prog_param+0x54e>
			case 7: goto opc07m01nv2;
 8005a7e:	46c0      	nop			@ (mov r8, r8)
		   if(btn_pr[b1_f1]){ //btjt btn_pr,#b1_f1,toggle_opc07m01nv2
 8005a80:	4b9c      	ldr	r3, [pc, #624]	@ (8005cf4 <prog_param+0x74c>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <prog_param+0x4ea>
		   if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc07m01nv2
 8005a88:	4b9a      	ldr	r3, [pc, #616]	@ (8005cf4 <prog_param+0x74c>)
 8005a8a:	791b      	ldrb	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <prog_param+0x502>
			   goto toggle_opc07m01nv2;
 8005a90:	e000      	b.n	8005a94 <prog_param+0x4ec>
			   goto toggle_opc07m01nv2;
 8005a92:	46c0      	nop			@ (mov r8, r8)
			flags_menu[1] ^= 1; //bcpl flags_menu,#1
 8005a94:	4b98      	ldr	r3, [pc, #608]	@ (8005cf8 <prog_param+0x750>)
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4053      	eors	r3, r2
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	1e5a      	subs	r2, r3, #1
 8005aa0:	4193      	sbcs	r3, r2
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b94      	ldr	r3, [pc, #592]	@ (8005cf8 <prog_param+0x750>)
 8005aa6:	705a      	strb	r2, [r3, #1]
 8005aa8:	e000      	b.n	8005aac <prog_param+0x504>
		   goto dpy_opc07m01nv2; //jra dpy_opc07m01nv2
 8005aaa:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x28, 0x01);
 8005aac:	2101      	movs	r1, #1
 8005aae:	2028      	movs	r0, #40	@ 0x28
 8005ab0:	f001 fb74 	bl	800719c <op_menu>
			if(!flags_menu[1]){	//btjf flags_menu,#1,dpy2_opc07m01nv2
 8005ab4:	4b90      	ldr	r3, [pc, #576]	@ (8005cf8 <prog_param+0x750>)
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4053      	eors	r3, r2
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <prog_param+0x524>
			op_menu (0x00, 0x1D);
 8005ac2:	211d      	movs	r1, #29
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f001 fb69 	bl	800719c <op_menu>
 8005aca:	e000      	b.n	8005ace <prog_param+0x526>
				goto dpy2_opc07m01nv2;
 8005acc:	46c0      	nop			@ (mov r8, r8)
			datled_clear();
 8005ace:	f001 fb7f 	bl	80071d0 <datled_clear>
			goto ask_enter_nv2;//	jra ask_enter_nv2
 8005ad2:	e010      	b.n	8005af6 <prog_param+0x54e>
			case 8: goto opc08m01nv2;
 8005ad4:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x05, 0x0E);
 8005ad6:	210e      	movs	r1, #14
 8005ad8:	2005      	movs	r0, #5
 8005ada:	f001 fb5f 	bl	800719c <op_menu>
			goto ask_enter_nv2;//	jra	ask_enter_nv2
 8005ade:	e00a      	b.n	8005af6 <prog_param+0x54e>
			case 9: goto opc09m01nv2;
 8005ae0:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x1F, 0X0E);
 8005ae2:	210e      	movs	r1, #14
 8005ae4:	201f      	movs	r0, #31
 8005ae6:	f001 fb59 	bl	800719c <op_menu>
			goto ask_enter_nv2;// jra	ask_enter_nv2
 8005aea:	e004      	b.n	8005af6 <prog_param+0x54e>
			default: goto opcNAnv2;
 8005aec:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x26, 0x26);
 8005aee:	2126      	movs	r1, #38	@ 0x26
 8005af0:	2026      	movs	r0, #38	@ 0x26
 8005af2:	f001 fb53 	bl	800719c <op_menu>
			if(!btn_pr[b2_f1]){//btjf	btn_pr,#b2_f1,no_enter_nv2;
 8005af6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf4 <prog_param+0x74c>)
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	2201      	movs	r2, #1
 8005afc:	4053      	eors	r3, r2
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d12e      	bne.n	8005b62 <prog_param+0x5ba>
			flagsb[f_sprm] = 0;//bres	flagsb,#f_sprm;
 8005b04:	4b84      	ldr	r3, [pc, #528]	@ (8005d18 <prog_param+0x770>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	70da      	strb	r2, [r3, #3]
			if(param != 5){//cp A,#5;							/ es opcion PS (password)?
 8005b0a:	4b84      	ldr	r3, [pc, #528]	@ (8005d1c <prog_param+0x774>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b05      	cmp	r3, #5
 8005b10:	d129      	bne.n	8005b66 <prog_param+0x5be>
			if(key != Plantilla [password]){//cp A,password		/ es opcion PS (password)?
 8005b12:	4b83      	ldr	r3, [pc, #524]	@ (8005d20 <prog_param+0x778>)
 8005b14:	2273      	movs	r2, #115	@ 0x73
 8005b16:	5c9a      	ldrb	r2, [r3, r2]
 8005b18:	4b7a      	ldr	r3, [pc, #488]	@ (8005d04 <prog_param+0x75c>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d124      	bne.n	8005b6a <prog_param+0x5c2>
			Bset_Clear_trfst(flagsb, flags_menu, f_menu2, 3);
 8005b20:	4975      	ldr	r1, [pc, #468]	@ (8005cf8 <prog_param+0x750>)
 8005b22:	487d      	ldr	r0, [pc, #500]	@ (8005d18 <prog_param+0x770>)
 8005b24:	2303      	movs	r3, #3
 8005b26:	2202      	movs	r2, #2
 8005b28:	f007 f9fc 	bl	800cf24 <Bset_Clear_trfst>
			param2 = 0;//clr param2
 8005b2c:	4b7d      	ldr	r3, [pc, #500]	@ (8005d24 <prog_param+0x77c>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
			if(!flagsb[f_luzb]){//btjf flagsb,#f_luzb,noSetFlagLU
 8005b32:	4b79      	ldr	r3, [pc, #484]	@ (8005d18 <prog_param+0x770>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	4053      	eors	r3, r2
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <prog_param+0x5a0>
			flags_menu[3] = 1;//bset flags_menu,#3
 8005b40:	4b6d      	ldr	r3, [pc, #436]	@ (8005cf8 <prog_param+0x750>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	70da      	strb	r2, [r3, #3]
 8005b46:	e000      	b.n	8005b4a <prog_param+0x5a2>
				goto noSetFlagLU;
 8005b48:	46c0      	nop			@ (mov r8, r8)
			flags_menu[4] = 0;//	bres flags_menu,#4
 8005b4a:	4b6b      	ldr	r3, [pc, #428]	@ (8005cf8 <prog_param+0x750>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	711a      	strb	r2, [r3, #4]
			if(Plantilla[escala] != 0x20){//	cp	A,#$20
 8005b50:	4b73      	ldr	r3, [pc, #460]	@ (8005d20 <prog_param+0x778>)
 8005b52:	2252      	movs	r2, #82	@ 0x52
 8005b54:	5c9b      	ldrb	r3, [r3, r2]
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d109      	bne.n	8005b6e <prog_param+0x5c6>
			flags_menu[4] = 1;//	bset flags_menu,#4
 8005b5a:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <prog_param+0x750>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	711a      	strb	r2, [r3, #4]
		       goto fin_prog_param; //jp fin_prog_param
 8005b60:	e199      	b.n	8005e96 <prog_param+0x8ee>
				goto no_enter_nv2;
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	e197      	b.n	8005e96 <prog_param+0x8ee>
				goto no_enter_nv2;//jrne no_enter_nv2;
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	e195      	b.n	8005e96 <prog_param+0x8ee>
				goto no_enter_nv2;//jrne no_enter_nv2
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	e193      	b.n	8005e96 <prog_param+0x8ee>
				goto noFahrenheitFlag;//	jrne noFahrenheitFlag
 8005b6e:	46c0      	nop			@ (mov r8, r8)
		       goto fin_prog_param; //jp fin_prog_param
 8005b70:	e191      	b.n	8005e96 <prog_param+0x8ee>
		goto menu2; //jp menu2
 8005b72:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(btn_pr, btn_pr,b1_f2, b3_f2);
 8005b74:	495f      	ldr	r1, [pc, #380]	@ (8005cf4 <prog_param+0x74c>)
 8005b76:	485f      	ldr	r0, [pc, #380]	@ (8005cf4 <prog_param+0x74c>)
 8005b78:	2305      	movs	r3, #5
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f007 f9ed 	bl	800cf5a <Bclear_Clear_trfst>
		STM8_A = param2;	//	ld	a,param2
 8005b80:	4b68      	ldr	r3, [pc, #416]	@ (8005d24 <prog_param+0x77c>)
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	4b60      	ldr	r3, [pc, #384]	@ (8005d08 <prog_param+0x760>)
 8005b86:	701a      	strb	r2, [r3, #0]
		lmt_up_w = 4;		//	mov  lmt_up_w + 1,#4
 8005b88:	4b5c      	ldr	r3, [pc, #368]	@ (8005cfc <prog_param+0x754>)
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	801a      	strh	r2, [r3, #0]
		lmt_dw_w = 0;		//	mov	lmt_dw_w + 1,#00
 8005b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8005d00 <prog_param+0x758>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	801a      	strh	r2, [r3, #0]
		md_dif_math	();		//	call md_dif_math;
 8005b94:	f000 f98a 	bl	8005eac <md_dif_math>
		param2 = wreg;//	mov	param2,wreg
 8005b98:	4b5c      	ldr	r3, [pc, #368]	@ (8005d0c <prog_param+0x764>)
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	4b61      	ldr	r3, [pc, #388]	@ (8005d24 <prog_param+0x77c>)
 8005b9e:	701a      	strb	r2, [r3, #0]
		STM8_A = param2 & 0x07;			//;/ Para evitar saltos indeseados
 8005ba0:	4b60      	ldr	r3, [pc, #384]	@ (8005d24 <prog_param+0x77c>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2207      	movs	r2, #7
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4b57      	ldr	r3, [pc, #348]	@ (8005d08 <prog_param+0x760>)
 8005bac:	701a      	strb	r2, [r3, #0]
		switch(STM8_A)
 8005bae:	4b56      	ldr	r3, [pc, #344]	@ (8005d08 <prog_param+0x760>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d822      	bhi.n	8005bfc <prog_param+0x654>
 8005bb6:	009a      	lsls	r2, r3, #2
 8005bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8005d28 <prog_param+0x780>)
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	469f      	mov	pc, r3
			case 0: goto opc00m02;
 8005bc0:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x00, 0x0F);
 8005bc2:	210f      	movs	r1, #15
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f001 fae9 	bl	800719c <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8005bca:	e01c      	b.n	8005c06 <prog_param+0x65e>
			case 1: goto opc01m02;
 8005bcc:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x11, 0x27);
 8005bce:	2127      	movs	r1, #39	@ 0x27
 8005bd0:	2011      	movs	r0, #17
 8005bd2:	f001 fae3 	bl	800719c <op_menu>
		goto ask_enter_m02;//	jra	ask_enter_m02
 8005bd6:	e016      	b.n	8005c06 <prog_param+0x65e>
			case 2: goto opc02m02;
 8005bd8:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x27, 0x1D);
 8005bda:	211d      	movs	r1, #29
 8005bdc:	2027      	movs	r0, #39	@ 0x27
 8005bde:	f001 fadd 	bl	800719c <op_menu>
		goto ask_enter_m02; //	jra ask_enter_m02
 8005be2:	e010      	b.n	8005c06 <prog_param+0x65e>
			case 3: goto opc03m02;
 8005be4:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x05, 0x0E);
 8005be6:	210e      	movs	r1, #14
 8005be8:	2005      	movs	r0, #5
 8005bea:	f001 fad7 	bl	800719c <op_menu>
		goto ask_enter_m02;//	jra ask_enter_m02
 8005bee:	e00a      	b.n	8005c06 <prog_param+0x65e>
			case 4: goto opc04m02;
 8005bf0:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x1F, 0X0E);
 8005bf2:	210e      	movs	r1, #14
 8005bf4:	201f      	movs	r0, #31
 8005bf6:	f001 fad1 	bl	800719c <op_menu>
		goto ask_enter_m02;//jra	ask_enter_m02
 8005bfa:	e004      	b.n	8005c06 <prog_param+0x65e>
			default: goto opcNA_m02;
 8005bfc:	46c0      	nop			@ (mov r8, r8)
		op_menu (0x26, 0x26);
 8005bfe:	2126      	movs	r1, #38	@ 0x26
 8005c00:	2026      	movs	r0, #38	@ 0x26
 8005c02:	f001 facb 	bl	800719c <op_menu>
		datled_clear();
 8005c06:	f001 fae3 	bl	80071d0 <datled_clear>
		if(!btn_pr[b2_f1]){// btjf btn_pr,#b2_f1,fin_menu2;  Se acepto la selección del parámetro?
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8005cf4 <prog_param+0x74c>)
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4053      	eors	r3, r2
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d153      	bne.n	8005cc0 <prog_param+0x718>
		flagsb[f_nv2Menu2]= 1;		//	bset flagsb,#f_nv2Menu2;   indica que sea sseleccionado una parametro
 8005c18:	4b3f      	ldr	r3, [pc, #252]	@ (8005d18 <prog_param+0x770>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	711a      	strb	r2, [r3, #4]
		if(param2 != 4){//	cp A,#4;    / es opcion E (exit)?
 8005c1e:	4b41      	ldr	r3, [pc, #260]	@ (8005d24 <prog_param+0x77c>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d100      	bne.n	8005c28 <prog_param+0x680>
 8005c26:	e124      	b.n	8005e72 <prog_param+0x8ca>
			goto ask_set_prog_m02;//	jrne ask_set_prog_m02
 8005c28:	46c0      	nop			@ (mov r8, r8)
		if(param2 != 3){//	cp	A,#3;
 8005c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d24 <prog_param+0x77c>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d148      	bne.n	8005cc4 <prog_param+0x71c>
		flagsb[f_luzb]= 0;//	bres flagsb,#f_luzb
 8005c32:	4b39      	ldr	r3, [pc, #228]	@ (8005d18 <prog_param+0x770>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
		if(!flags_menu[3]){//	btjf flags_menu,#3,noOnLuz
 8005c38:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf8 <prog_param+0x750>)
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4053      	eors	r3, r2
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <prog_param+0x6a6>
		flagsb[f_luzb]= 1;// bset flagsb,#f_luzb
 8005c46:	4b34      	ldr	r3, [pc, #208]	@ (8005d18 <prog_param+0x770>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e000      	b.n	8005c50 <prog_param+0x6a8>
			goto noOnLuz;
 8005c4e:	46c0      	nop			@ (mov r8, r8)
		if(!flags_menu[2]){//	btjf flags_menu,#2,noOffManto
 8005c50:	4b29      	ldr	r3, [pc, #164]	@ (8005cf8 <prog_param+0x750>)
 8005c52:	789b      	ldrb	r3, [r3, #2]
 8005c54:	2201      	movs	r2, #1
 8005c56:	4053      	eors	r3, r2
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <prog_param+0x6be>
		timerOffManto = 120;//	mov	 timerOffManto,#120;	/ carga tiempo de apagado de mantenimiento (minutos)
 8005c5e:	4b33      	ldr	r3, [pc, #204]	@ (8005d2c <prog_param+0x784>)
 8005c60:	2278      	movs	r2, #120	@ 0x78
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e000      	b.n	8005c68 <prog_param+0x6c0>
			goto noOffManto;
 8005c66:	46c0      	nop			@ (mov r8, r8)
		copiaPlantilla [cescala] = 0;//mov cescala,#$00
 8005c68:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <prog_param+0x788>)
 8005c6a:	2252      	movs	r2, #82	@ 0x52
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5499      	strb	r1, [r3, r2]
		if(!flags_menu[4]){//btjf flags_menu,#4,noFahrenheitFlagDpy
 8005c70:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <prog_param+0x750>)
 8005c72:	791b      	ldrb	r3, [r3, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	4053      	eors	r3, r2
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <prog_param+0x6e0>
		copiaPlantilla [cescala] = 0x20;//mov cescala,#$20
 8005c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d30 <prog_param+0x788>)
 8005c80:	2252      	movs	r2, #82	@ 0x52
 8005c82:	2120      	movs	r1, #32
 8005c84:	5499      	strb	r1, [r3, r2]
 8005c86:	e000      	b.n	8005c8a <prog_param+0x6e2>
			goto noFahrenheitFlagDpy;
 8005c88:	46c0      	nop			@ (mov r8, r8)
		if(copiaPlantilla [cescala] == findLastValue((uint32_t) &eePlantilla[eeescala])){
 8005c8a:	4b29      	ldr	r3, [pc, #164]	@ (8005d30 <prog_param+0x788>)
 8005c8c:	2252      	movs	r2, #82	@ 0x52
 8005c8e:	5c9b      	ldrb	r3, [r3, r2]
 8005c90:	001c      	movs	r4, r3
 8005c92:	4b28      	ldr	r3, [pc, #160]	@ (8005d34 <prog_param+0x78c>)
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7fc ffc1 	bl	8002c1c <findLastValue>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	d00d      	beq.n	8005cbc <prog_param+0x714>
		waux = copiaPlantilla [cescala];//	mov			waux,cescala;
 8005ca0:	4b23      	ldr	r3, [pc, #140]	@ (8005d30 <prog_param+0x788>)
 8005ca2:	2252      	movs	r2, #82	@ 0x52
 8005ca4:	5c9a      	ldrb	r2, [r3, r2]
 8005ca6:	4b24      	ldr	r3, [pc, #144]	@ (8005d38 <prog_param+0x790>)
 8005ca8:	701a      	strb	r2, [r3, #0]
		wreeprom(waux, &eePlantilla[eeescala]);//	call		wreeprom;
 8005caa:	4b23      	ldr	r3, [pc, #140]	@ (8005d38 <prog_param+0x790>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	001a      	movs	r2, r3
 8005cb0:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <prog_param+0x78c>)
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	0010      	movs	r0, r2
 8005cb6:	f001 fa5d 	bl	8007174 <wreeprom>
		 goto cancel_prog; //jp cancel_prog
 8005cba:	e0db      	b.n	8005e74 <prog_param+0x8cc>
			goto noCambiaEscala;//	jreq noCambiaEscala
 8005cbc:	46c0      	nop			@ (mov r8, r8)
		 goto cancel_prog; //jp cancel_prog
 8005cbe:	e0d9      	b.n	8005e74 <prog_param+0x8cc>
			goto fin_menu2;
 8005cc0:	46c0      	nop			@ (mov r8, r8)
 8005cc2:	e0e8      	b.n	8005e96 <prog_param+0x8ee>
			goto fin_menu2;//	jrne fin_menu2;
 8005cc4:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param;  //jp fin_prog_param
 8005cc6:	e0e6      	b.n	8005e96 <prog_param+0x8ee>
			switch(STM8_A)
 8005cc8:	009a      	lsls	r2, r3, #2
 8005cca:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <prog_param+0x794>)
 8005ccc:	18d3      	adds	r3, r2, r3
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	469f      	mov	pc, r3
			{
				case 0:  goto opc00m02nv2;
 8005cd2:	46c0      	nop			@ (mov r8, r8)

//opcion +++++++
opc00m02nv2:
			//;mov			datdig1,#$00;	"O"
			//;mov			datdig2,#$0F;	"F"
			if(btn_pr[b1_f1]){//	btjt btn_pr,#b1_f1,toggle_opc00m02nv2
 8005cd4:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <prog_param+0x74c>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d131      	bne.n	8005d40 <prog_param+0x798>
				goto toggle_opc00m02nv2;
			}
			if(btn_pr[b3_f1]){//	btjt btn_pr,#b3_f1,toggle_opc00m02nv2
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <prog_param+0x74c>)
 8005cde:	791b      	ldrb	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d039      	beq.n	8005d58 <prog_param+0x7b0>
				goto toggle_opc00m02nv2;
 8005ce4:	e02d      	b.n	8005d42 <prog_param+0x79a>
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	20000139 	.word	0x20000139
 8005cec:	20000145 	.word	0x20000145
 8005cf0:	20000167 	.word	0x20000167
 8005cf4:	20000bf0 	.word	0x20000bf0
 8005cf8:	20000c48 	.word	0x20000c48
 8005cfc:	20000c02 	.word	0x20000c02
 8005d00:	20000c04 	.word	0x20000c04
 8005d04:	20000c00 	.word	0x20000c00
 8005d08:	200008d0 	.word	0x200008d0
 8005d0c:	20000b55 	.word	0x20000b55
 8005d10:	0803f07b 	.word	0x0803f07b
 8005d14:	0803f07c 	.word	0x0803f07c
 8005d18:	20000be8 	.word	0x20000be8
 8005d1c:	20000bff 	.word	0x20000bff
 8005d20:	200000b8 	.word	0x200000b8
 8005d24:	20000bfe 	.word	0x20000bfe
 8005d28:	0801b270 	.word	0x0801b270
 8005d2c:	20000c51 	.word	0x20000c51
 8005d30:	20000138 	.word	0x20000138
 8005d34:	0803f052 	.word	0x0803f052
 8005d38:	20000b54 	.word	0x20000b54
 8005d3c:	0801b284 	.word	0x0801b284
				goto toggle_opc00m02nv2;
 8005d40:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
toggle_opc00m02nv2:
			flags_menu[2] ^= 0x2;//bcpl flags_menu,#2
 8005d42:	4b57      	ldr	r3, [pc, #348]	@ (8005ea0 <prog_param+0x8f8>)
 8005d44:	789b      	ldrb	r3, [r3, #2]
 8005d46:	001a      	movs	r2, r3
 8005d48:	2302      	movs	r3, #2
 8005d4a:	4053      	eors	r3, r2
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	4193      	sbcs	r3, r2
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b53      	ldr	r3, [pc, #332]	@ (8005ea0 <prog_param+0x8f8>)
 8005d54:	709a      	strb	r2, [r3, #2]
 8005d56:	e000      	b.n	8005d5a <prog_param+0x7b2>
			goto dpy_opc00m02nv2; //	jra			dpy_opc00m02nv2
 8005d58:	46c0      	nop			@ (mov r8, r8)

dpy_opc00m02nv2:
			op_menu (0x28, 0x01);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	2028      	movs	r0, #40	@ 0x28
 8005d5e:	f001 fa1d 	bl	800719c <op_menu>
			//datdig1 = 0x28;//	mov			datdig1,#$28;	"r"
			//datdig2 = 0x01;//	mov			datdig2,#$01;	"1"
			if(!flags_menu[2]){//	btjf flags_menu,#2,dpy2_opc00m02nv2
 8005d62:	4b4f      	ldr	r3, [pc, #316]	@ (8005ea0 <prog_param+0x8f8>)
 8005d64:	789b      	ldrb	r3, [r3, #2]
 8005d66:	2201      	movs	r2, #1
 8005d68:	4053      	eors	r3, r2
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <prog_param+0x7d2>
				goto dpy2_opc00m02nv2;
			}
			op_menu (0x00, 0x1D);
 8005d70:	211d      	movs	r1, #29
 8005d72:	2000      	movs	r0, #0
 8005d74:	f001 fa12 	bl	800719c <op_menu>
 8005d78:	e000      	b.n	8005d7c <prog_param+0x7d4>
				goto dpy2_opc00m02nv2;
 8005d7a:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//	mov			datdig1,#$00;	"o"
			//datdig2 = 0x1D;//	mov			datdig2,#$1D;	"n"
dpy2_opc00m02nv2:
			datled_clear();
 8005d7c:	f001 fa28 	bl	80071d0 <datled_clear>
			//BitClear(datled,0);// bres		datled,#0;		/ apaga el punto
			//BitClear(datled,1);// bres		datled,#1;		/ apaga el signo

			goto ask_enter_m02nv2;
 8005d80:	e066      	b.n	8005e50 <prog_param+0x8a8>
				case 1:  goto opc01m02nv2;
 8005d82:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc01m02nv2:
			//;mov			datdig1,#$11;	"L"
			//;mov			datdig2,#$27;	"U"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc01m02nv2
 8005d84:	4b47      	ldr	r3, [pc, #284]	@ (8005ea4 <prog_param+0x8fc>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <prog_param+0x7ee>
				goto toggle_opc01m02nv2;
			}
			if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,toggle_opc01m02nv2
 8005d8c:	4b45      	ldr	r3, [pc, #276]	@ (8005ea4 <prog_param+0x8fc>)
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00c      	beq.n	8005dae <prog_param+0x806>
				goto toggle_opc01m02nv2;
 8005d94:	e000      	b.n	8005d98 <prog_param+0x7f0>
				goto toggle_opc01m02nv2;
 8005d96:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 toggle_opc01m02nv2:
 	 	 	flags_menu[3] ^= 1;//bcpl flags_menu,#3
 8005d98:	4b41      	ldr	r3, [pc, #260]	@ (8005ea0 <prog_param+0x8f8>)
 8005d9a:	78db      	ldrb	r3, [r3, #3]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4053      	eors	r3, r2
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	4193      	sbcs	r3, r2
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea0 <prog_param+0x8f8>)
 8005daa:	70da      	strb	r2, [r3, #3]
 8005dac:	e000      	b.n	8005db0 <prog_param+0x808>
			goto dpy_opc01m02nv2; //jra dpy_opc01m02nv2
 8005dae:	46c0      	nop			@ (mov r8, r8)

 dpy_opc01m02nv2:
 	 	 	op_menu (0x00, 0x0f);
 8005db0:	210f      	movs	r1, #15
 8005db2:	2000      	movs	r0, #0
 8005db4:	f001 f9f2 	bl	800719c <op_menu>
			//datdig1 = 0x00;//mov datdig1,#$00;	"0"
			//datdig2 = 0x0f;//mov datdig2,#$0f;	"f"
			if(!flags_menu[3]){ //btjf flags_menu,#3,dpy2_opc01m02nv2
 8005db8:	4b39      	ldr	r3, [pc, #228]	@ (8005ea0 <prog_param+0x8f8>)
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	4053      	eors	r3, r2
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <prog_param+0x828>
				goto dpy2_opc01m02nv2;
			}
			op_menu (0x00, 0x1D);
 8005dc6:	211d      	movs	r1, #29
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f001 f9e7 	bl	800719c <op_menu>
 8005dce:	e000      	b.n	8005dd2 <prog_param+0x82a>
				goto dpy2_opc01m02nv2;
 8005dd0:	46c0      	nop			@ (mov r8, r8)
			//datdig1 = 0x00;//mov datdig1,#$00	"O"
			//datdig2 = 0x1D;//mov datdig2,#$1D;	"n"
 dpy2_opc01m02nv2:
 	 	   datled_clear();
 8005dd2:	f001 f9fd 	bl	80071d0 <datled_clear>
 	 	   //BitClear(datled, 0);//bres datled,#0;		// apaga el punto
		   //BitClear(datled, 1);//bres datled,#1;		// apaga el signo

		   goto ask_enter_m02nv2;// jra ask_enter_m02nv2
 8005dd6:	e03b      	b.n	8005e50 <prog_param+0x8a8>
				case 2:  goto opc02m02nv2;
 8005dd8:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc02m02nv2:
			//;mov			datdig1,#$27;	"U"
			//;mov			datdig2,#$1D;	"n"

			if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,toggle_opc02m02nv2
 8005dda:	4b32      	ldr	r3, [pc, #200]	@ (8005ea4 <prog_param+0x8fc>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <prog_param+0x844>
			   goto toggle_opc02m02nv2;
			}
			if(btn_pr[b3_f1]){//btjt btn_pr,#b3_f1,toggle_opc02m02nv2
 8005de2:	4b30      	ldr	r3, [pc, #192]	@ (8005ea4 <prog_param+0x8fc>)
 8005de4:	791b      	ldrb	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00c      	beq.n	8005e04 <prog_param+0x85c>
			   goto toggle_opc02m02nv2;
 8005dea:	e000      	b.n	8005dee <prog_param+0x846>
			   goto toggle_opc02m02nv2;
 8005dec:	46c0      	nop			@ (mov r8, r8)
			}
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
toggle_opc02m02nv2:
			flags_menu[4] ^= 1;//bcpl flags_menu,#4
 8005dee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea0 <prog_param+0x8f8>)
 8005df0:	791b      	ldrb	r3, [r3, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	4053      	eors	r3, r2
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	4193      	sbcs	r3, r2
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4b28      	ldr	r3, [pc, #160]	@ (8005ea0 <prog_param+0x8f8>)
 8005e00:	711a      	strb	r2, [r3, #4]
 8005e02:	e000      	b.n	8005e06 <prog_param+0x85e>
			goto dpy_opc02m02nv2;//jra dpy_opc02m02nv2
 8005e04:	46c0      	nop			@ (mov r8, r8)

dpy_opc02m02nv2:
			  op_menu (0x29, 0x0C);
 8005e06:	210c      	movs	r1, #12
 8005e08:	2029      	movs	r0, #41	@ 0x29
 8005e0a:	f001 f9c7 	bl	800719c <op_menu>
			  //datdig1 = 0x29;//mov datdig1,#$29;  	"°"
//			  /datdig2 = 0x0C;//mov datdig2,#$0C;	"C"
			  if(!flags_menu[4]){//btjf flags_menu,#4,dpy2_opc02m02nv2
 8005e0e:	4b24      	ldr	r3, [pc, #144]	@ (8005ea0 <prog_param+0x8f8>)
 8005e10:	791b      	ldrb	r3, [r3, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	4053      	eors	r3, r2
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <prog_param+0x87e>
				  goto dpy2_opc02m02nv2;
			  }
			  op_menu (0x29, 0x0F);
 8005e1c:	210f      	movs	r1, #15
 8005e1e:	2029      	movs	r0, #41	@ 0x29
 8005e20:	f001 f9bc 	bl	800719c <op_menu>
 8005e24:	e000      	b.n	8005e28 <prog_param+0x880>
				  goto dpy2_opc02m02nv2;
 8005e26:	46c0      	nop			@ (mov r8, r8)
			  //datdig1 = 0x29;//mov datdig1,#$29;	"°"
			  //datdig2 = 0x0F;//mov datdig2,#$0F		"F"
dpy2_opc02m02nv2:
				datled_clear();
 8005e28:	f001 f9d2 	bl	80071d0 <datled_clear>
				//BitClear (datled,0);//bres datled,#0;				/ apaga el punto
				//BitClear (datled,1); // bres datled,#1;			/ apaga el signo

				goto ask_enter_m02nv2;//jra ask_enter_m02nv2;
 8005e2c:	e010      	b.n	8005e50 <prog_param+0x8a8>
				case 3:  goto opc03m02nv2;
 8005e2e:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc03m02nv2:
			 op_menu (0x05, 0x0E);
 8005e30:	210e      	movs	r1, #14
 8005e32:	2005      	movs	r0, #5
 8005e34:	f001 f9b2 	bl	800719c <op_menu>
			 //datdig1 = 0x05;//mov datdig1,#$05;		"S"
			 //datdig2 = 0x0E;//mov datdig2,#$0E;		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8005e38:	e00a      	b.n	8005e50 <prog_param+0x8a8>
				case 4:  goto opc04m02nv2;
 8005e3a:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opc04m02nv2:
			 op_menu (0x1F, 0x0E);
 8005e3c:	210e      	movs	r1, #14
 8005e3e:	201f      	movs	r0, #31
 8005e40:	f001 f9ac 	bl	800719c <op_menu>
			 //datdig1 = 0x1F;//mov datdig1,#$1F		" "
			 //datdig2 = 0x0E;//mov datdig2,#$0E		"E"
			 goto ask_enter_m02nv2;//jra ask_enter_m02nv2
 8005e44:	e004      	b.n	8005e50 <prog_param+0x8a8>
				default: goto opcNAm02nv2;
 8005e46:	46c0      	nop			@ (mov r8, r8)
//opcion +++++++
opcNAm02nv2:
			 op_menu (0x26, 0x26);
 8005e48:	2126      	movs	r1, #38	@ 0x26
 8005e4a:	2026      	movs	r0, #38	@ 0x26
 8005e4c:	f001 f9a6 	bl	800719c <op_menu>
			 //datdig1 = 0x26;//mov datdig1,#$26;		"-"
			 //datdig2 = 0x26;//mov datdig2,#$26	    "-"


ask_enter_m02nv2:
		if(!btn_pr[b2_f1]){//btjf btn_pr,#b2_f1,no_enter_m02nv2
 8005e50:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <prog_param+0x8fc>)
 8005e52:	789b      	ldrb	r3, [r3, #2]
 8005e54:	2201      	movs	r2, #1
 8005e56:	4053      	eors	r3, r2
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <prog_param+0x8be>
			goto no_enter_m02nv2;
		}
		flagsb[f_nv2Menu2] = 0;//bres flagsb,#f_nv2Menu2;
 8005e5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <prog_param+0x900>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	711a      	strb	r2, [r3, #4]

no_enter_m02nv2:
		goto fin_prog_param; //jp fin_prog_param;
 8005e64:	e017      	b.n	8005e96 <prog_param+0x8ee>
			goto no_enter_m02nv2;
 8005e66:	46c0      	nop			@ (mov r8, r8)
		goto fin_prog_param; //jp fin_prog_param;
 8005e68:	e015      	b.n	8005e96 <prog_param+0x8ee>
		goto cancel_prog;
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	e002      	b.n	8005e74 <prog_param+0x8cc>
		goto cancel_prog;//jp cancel_prog;
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	e000      	b.n	8005e74 <prog_param+0x8cc>
		goto cancel_prog; ////	jp	cancel_prog   / Sí, sal sin realizar ningún cambio
 8005e72:	46c0      	nop			@ (mov r8, r8)
//;============================================================

cancel_prog:
		Bclear_Clear_trfst(flagsb, flagsb,f_prog, f_sprm);
 8005e74:	490c      	ldr	r1, [pc, #48]	@ (8005ea8 <prog_param+0x900>)
 8005e76:	480c      	ldr	r0, [pc, #48]	@ (8005ea8 <prog_param+0x900>)
 8005e78:	2303      	movs	r3, #3
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f007 f86d 	bl	800cf5a <Bclear_Clear_trfst>
//		BitClear(flagsb,f_prog);//bres flagsb,#f_prog
//		BitClear(flagsb,f_sprm); //bres flagsb,#f_sprm
		//bres		flagsb,#f_sgpo;								/ cancela bandera de programacion
		Bclear_Clear_trfst(flagsb, flagsb,f_ulck, f_menu2);
 8005e80:	4909      	ldr	r1, [pc, #36]	@ (8005ea8 <prog_param+0x900>)
 8005e82:	4809      	ldr	r0, [pc, #36]	@ (8005ea8 <prog_param+0x900>)
 8005e84:	2302      	movs	r3, #2
 8005e86:	2205      	movs	r2, #5
 8005e88:	f007 f867 	bl	800cf5a <Bclear_Clear_trfst>
//		BitClear(flagsb,f_ulck); //bres flagsb,#f_ulck
//		BitClear(flagsb,f_menu2); // bres flagsb,#f_menu2
		flagsb[f_nv2Menu2] = 0; // bres flagsb,#f_nv2Menu2
 8005e8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <prog_param+0x900>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	711a      	strb	r2, [r3, #4]
fin_prog_param:
		//	bres		flagsb,#f_lmt									;//manuel_ Bandera que indica paso por el limite de programacion (segun definiciones de banderas)
		//	ret

}
 8005e92:	e000      	b.n	8005e96 <prog_param+0x8ee>
		goto fin_prog_param; //jp fin_prog_param
 8005e94:	46c0      	nop			@ (mov r8, r8)
}
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9e:	46c0      	nop			@ (mov r8, r8)
 8005ea0:	20000c48 	.word	0x20000c48
 8005ea4:	20000bf0 	.word	0x20000bf0
 8005ea8:	20000be8 	.word	0x20000be8

08005eac <md_dif_math>:
//;===================================================================================
//;LN 6338 ============================================================
//;subrrutina para la modificacion del valor porgramado para temperatura
void md_dif_math (){
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
			flagsb[f_nd_temp]=1; 		// bset flagsb,#f_nd_temp			;// enciende bandera indica no es dato de temperatura
 8005eb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <md_dif_math+0x20>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	719a      	strb	r2, [r3, #6]
			//clrw X
			STM8_16_X = (uint16_t)STM8_A; 	// ld XL,A
 8005eb6:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <md_dif_math+0x24>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	001a      	movs	r2, r3
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <md_dif_math+0x28>)
 8005ebe:	801a      	strh	r2, [r3, #0]
			//lmt_up_w = 0;					// clr lmt_up_w ******** 	Se comentaron estas dos instrucciones:
			//lmt_dw_w = 0;					// clr lmt_dw_w	********	En Ensamblador se borran solo 8 bits de una variable de 16 bits
			md_signfrac_math();				//				********	CGM 22/Nov/2024
 8005ec0:	f000 f80a 	bl	8005ed8 <md_signfrac_math>
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	20000be8 	.word	0x20000be8
 8005ed0:	200008d0 	.word	0x200008d0
 8005ed4:	200008d2 	.word	0x200008d2

08005ed8 <md_signfrac_math>:
//;				------------------------------------------------------------
void md_signfrac_math(){
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
	 	 	 if(btn_pr[b1_f1]){//btjt btn_pr,#b1_f1,inc_sf //
 8005edc:	4b4b      	ldr	r3, [pc, #300]	@ (800600c <md_signfrac_math+0x134>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d121      	bne.n	8005f28 <md_signfrac_math+0x50>
	 	 		 goto inc_sf;
	 	 	 }
	 	 	 if(btn_pr[b3_f1]){ //btjt btn_pr,#b3_f1,dec_sf //
 8005ee4:	4b49      	ldr	r3, [pc, #292]	@ (800600c <md_signfrac_math+0x134>)
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d14f      	bne.n	8005f8c <md_signfrac_math+0xb4>
	 	 		 goto dec_sf;
	 	 	 }

	 	 	 if(cnt_btn != 0){//tnz cnt_btn
 8005eec:	4b48      	ldr	r3, [pc, #288]	@ (8006010 <md_signfrac_math+0x138>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d117      	bne.n	8005f24 <md_signfrac_math+0x4c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
	 	 	 }
	 	 	 cnt_btn = 25;//mov cnt_btn,#25
 8005ef4:	4b46      	ldr	r3, [pc, #280]	@ (8006010 <md_signfrac_math+0x138>)
 8005ef6:	2219      	movs	r2, #25
 8005ef8:	701a      	strb	r2, [r3, #0]
	 	 	 if(cnt_btn_hld != 0){//tnz cnt_btn_hld
 8005efa:	4b46      	ldr	r3, [pc, #280]	@ (8006014 <md_signfrac_math+0x13c>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <md_signfrac_math+0x32>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
	 	 	 }
	 	 	 cnt_btn = 10;//mov cnt_btn,#10
 8005f02:	4b43      	ldr	r3, [pc, #268]	@ (8006010 <md_signfrac_math+0x138>)
 8005f04:	220a      	movs	r2, #10
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e000      	b.n	8005f0c <md_signfrac_math+0x34>
	 	 		 goto md_signfrac2;//jrne md_signfrac2
 8005f0a:	46c0      	nop			@ (mov r8, r8)
md_signfrac2:

			if(btn_pr[b1_f2]){ //btjt btn_pr,#b1_f2,inc_sf
 8005f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800600c <md_signfrac_math+0x134>)
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <md_signfrac_math+0x54>
				goto inc_sf;
			}
			if(btn_pr[b3_f2]){ //btjt btn_pr,#b3_f2,dec_sf
 8005f14:	4b3d      	ldr	r3, [pc, #244]	@ (800600c <md_signfrac_math+0x134>)
 8005f16:	795b      	ldrb	r3, [r3, #5]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d139      	bne.n	8005f90 <md_signfrac_math+0xb8>
				goto dec_sf;
			}

			cnt_btn_hld = 5;//mov cnt_btn_hld,#5
 8005f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006014 <md_signfrac_math+0x13c>)
 8005f1e:	2205      	movs	r2, #5
 8005f20:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2_0:
			goto fin_md_signfrac2;
 8005f22:	e067      	b.n	8005ff4 <md_signfrac_math+0x11c>
	 	 		 goto fin_md_signfrac2_0;//jrne fin_md_signfrac2_0
 8005f24:	46c0      	nop			@ (mov r8, r8)
			goto fin_md_signfrac2;
 8005f26:	e065      	b.n	8005ff4 <md_signfrac_math+0x11c>
	 	 		 goto inc_sf;
 8005f28:	46c0      	nop			@ (mov r8, r8)
 8005f2a:	e000      	b.n	8005f2e <md_signfrac_math+0x56>
				goto inc_sf;
 8005f2c:	46c0      	nop			@ (mov r8, r8)

//;        ---- incremento cuando se presiona la tecla + de la decima  ----------
inc_sf:
		 	 if((int16_t)STM8_16_X < (int16_t)lmt_up_w){//cpw X,lmt_up_w *******************************?
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006018 <md_signfrac_math+0x140>)
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	4b39      	ldr	r3, [pc, #228]	@ (800601c <md_signfrac_math+0x144>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	db04      	blt.n	8005f48 <md_signfrac_math+0x70>
			 	 goto inc_sf1; //jrslt inc_sf1
		 	 }
		 	 STM8_16_X = lmt_dw_w; //ldw X,lmt_dw_w   ; entonces carga el limite minimo para dar la vuelta
 8005f3e:	4b38      	ldr	r3, [pc, #224]	@ (8006020 <md_signfrac_math+0x148>)
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	4b35      	ldr	r3, [pc, #212]	@ (8006018 <md_signfrac_math+0x140>)
 8005f44:	801a      	strh	r2, [r3, #0]
		 	 goto fin_md_signfrac;//jra fin_md_signfrac
 8005f46:	e052      	b.n	8005fee <md_signfrac_math+0x116>
			 	 goto inc_sf1; //jrslt inc_sf1
 8005f48:	46c0      	nop			@ (mov r8, r8)
inc_sf1:
			if(flagsb[f_nd_temp]){//btjt flagsb,#f_nd_temp,inc_simple_ent
 8005f4a:	4b36      	ldr	r3, [pc, #216]	@ (8006024 <md_signfrac_math+0x14c>)
 8005f4c:	799b      	ldrb	r3, [r3, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <md_signfrac_math+0x90>
				goto inc_simple_ent;
			}
			if((int16_t)STM8_16_X >= (int16_t)100 ){//cpw X,#100
 8005f52:	4b31      	ldr	r3, [pc, #196]	@ (8006018 <md_signfrac_math+0x140>)
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	2b63      	cmp	r3, #99	@ 0x63
 8005f5a:	dc0d      	bgt.n	8005f78 <md_signfrac_math+0xa0>
				goto inc_ent;//jrsge inc_ent
			}
			if((int16_t)STM8_16_X < (int16_t)0xFF9C){//cpw X,#$FF9C
 8005f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006018 <md_signfrac_math+0x140>)
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	3364      	adds	r3, #100	@ 0x64
 8005f64:	db0a      	blt.n	8005f7c <md_signfrac_math+0xa4>
				goto inc_ent;//JRSLT inc_ent
			}

inc_simple_ent:
 8005f66:	e000      	b.n	8005f6a <md_signfrac_math+0x92>
				goto inc_simple_ent;
 8005f68:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X += 1;//addw X,#1
 8005f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006018 <md_signfrac_math+0x140>)
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	4b29      	ldr	r3, [pc, #164]	@ (8006018 <md_signfrac_math+0x140>)
 8005f74:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 8005f76:	e03a      	b.n	8005fee <md_signfrac_math+0x116>
				goto inc_ent;//jrsge inc_ent
 8005f78:	46c0      	nop			@ (mov r8, r8)
 8005f7a:	e000      	b.n	8005f7e <md_signfrac_math+0xa6>
				goto inc_ent;//JRSLT inc_ent
 8005f7c:	46c0      	nop			@ (mov r8, r8)
inc_ent:
			STM8_16_X += 10;//addw X,#10
 8005f7e:	4b26      	ldr	r3, [pc, #152]	@ (8006018 <md_signfrac_math+0x140>)
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	330a      	adds	r3, #10
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	4b24      	ldr	r3, [pc, #144]	@ (8006018 <md_signfrac_math+0x140>)
 8005f88:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac; //jra fin_md_signfrac
 8005f8a:	e030      	b.n	8005fee <md_signfrac_math+0x116>
	 	 		 goto dec_sf;
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	e000      	b.n	8005f92 <md_signfrac_math+0xba>
				goto dec_sf;
 8005f90:	46c0      	nop			@ (mov r8, r8)

//;        ---- decremento cuando se presiona la tecla + de la decima  ----------
dec_sf:
			if((int16_t)STM8_16_X > (int16_t)lmt_dw_w){//cpw X,lmt_dw_w
 8005f92:	4b21      	ldr	r3, [pc, #132]	@ (8006018 <md_signfrac_math+0x140>)
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b21a      	sxth	r2, r3
 8005f98:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <md_signfrac_math+0x148>)
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	dc04      	bgt.n	8005fac <md_signfrac_math+0xd4>
				goto dec_sf1;// jrsgt dec_sf1
			}
			STM8_16_X = lmt_up_w;//ldw  X,lmt_up_w ***********************************
 8005fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800601c <md_signfrac_math+0x144>)
 8005fa4:	881a      	ldrh	r2, [r3, #0]
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8006018 <md_signfrac_math+0x140>)
 8005fa8:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8005faa:	e020      	b.n	8005fee <md_signfrac_math+0x116>
				goto dec_sf1;// jrsgt dec_sf1
 8005fac:	46c0      	nop			@ (mov r8, r8)

dec_sf1:
			if(flagsb[f_nd_temp]){// btjt flagsb,#f_nd_temp,dec_simple_ent
 8005fae:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <md_signfrac_math+0x14c>)
 8005fb0:	799b      	ldrb	r3, [r3, #6]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <md_signfrac_math+0xf4>
				goto dec_simple_ent;
			}
			if((int16_t)STM8_16_X > (int16_t)100){ //cpw X,#100;
 8005fb6:	4b18      	ldr	r3, [pc, #96]	@ (8006018 <md_signfrac_math+0x140>)
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b21b      	sxth	r3, r3
 8005fbc:	2b64      	cmp	r3, #100	@ 0x64
 8005fbe:	dc0d      	bgt.n	8005fdc <md_signfrac_math+0x104>
				goto dec_ent;//jrsgt dec_ent
			}
			if((int16_t)STM8_16_X <= (int16_t)0xFF9C){
 8005fc0:	4b15      	ldr	r3, [pc, #84]	@ (8006018 <md_signfrac_math+0x140>)
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	3363      	adds	r3, #99	@ 0x63
 8005fc8:	db0a      	blt.n	8005fe0 <md_signfrac_math+0x108>
				goto dec_ent; //jrsle dec_ent
			}

dec_simple_ent:
 8005fca:	e000      	b.n	8005fce <md_signfrac_math+0xf6>
				goto dec_simple_ent;
 8005fcc:	46c0      	nop			@ (mov r8, r8)
			STM8_16_X -= 1;//subw X,#1;
 8005fce:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <md_signfrac_math+0x140>)
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	4b10      	ldr	r3, [pc, #64]	@ (8006018 <md_signfrac_math+0x140>)
 8005fd8:	801a      	strh	r2, [r3, #0]
			goto fin_md_signfrac;
 8005fda:	e008      	b.n	8005fee <md_signfrac_math+0x116>
				goto dec_ent;//jrsgt dec_ent
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	e000      	b.n	8005fe2 <md_signfrac_math+0x10a>
				goto dec_ent; //jrsle dec_ent
 8005fe0:	46c0      	nop			@ (mov r8, r8)

dec_ent:
			STM8_16_X -= 10;//subw x,#10
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <md_signfrac_math+0x140>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	3b0a      	subs	r3, #10
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <md_signfrac_math+0x140>)
 8005fec:	801a      	strh	r2, [r3, #0]



fin_md_signfrac:
			cnt_prog = 30;//mov cnt_prog, #30
 8005fee:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <md_signfrac_math+0x150>)
 8005ff0:	221e      	movs	r2, #30
 8005ff2:	701a      	strb	r2, [r3, #0]
fin_md_signfrac2:
			//ldw tempo2, X
			flagsb[f_nd_temp] = 0;//bres flagsb,#f_nd_temp			;// borra el proceso para dato de temperatura
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <md_signfrac_math+0x14c>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	719a      	strb	r2, [r3, #6]
			wreg = lowByte(STM8_16_X);//mov wreg,tempo1					;// mueve el dato a wreg cuando es simple
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <md_signfrac_math+0x140>)
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <md_signfrac_math+0x154>)
 8006002:	701a      	strb	r2, [r3, #0]
			//ret
}
 8006004:	46c0      	nop			@ (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	20000bf0 	.word	0x20000bf0
 8006010:	20000c22 	.word	0x20000c22
 8006014:	20000b73 	.word	0x20000b73
 8006018:	200008d2 	.word	0x200008d2
 800601c:	20000c02 	.word	0x20000c02
 8006020:	20000c04 	.word	0x20000c04
 8006024:	20000be8 	.word	0x20000be8
 8006028:	20000b72 	.word	0x20000b72
 800602c:	20000b55 	.word	0x20000b55

08006030 <tdev_to_Word>:
/********************************************************************************************************
 * Convierte uint16_t foo = tdevl:tdevf
********************************************************************************************************/
//;  ----- _Rev STM32	CUBE IDE
uint16_t	tdev_to_Word(){
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
	uint16_t   foo;
	foo = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 8006036:	4b08      	ldr	r3, [pc, #32]	@ (8006058 <tdev_to_Word+0x28>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	b29a      	uxth	r2, r3
 800603e:	4b07      	ldr	r3, [pc, #28]	@ (800605c <tdev_to_Word+0x2c>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	0019      	movs	r1, r3
 8006044:	1dbb      	adds	r3, r7, #6
 8006046:	1852      	adds	r2, r2, r1
 8006048:	801a      	strh	r2, [r3, #0]
	return	foo;
 800604a:	1dbb      	adds	r3, r7, #6
 800604c:	881b      	ldrh	r3, [r3, #0]
}
 800604e:	0018      	movs	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	b002      	add	sp, #8
 8006054:	bd80      	pop	{r7, pc}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	20000bb0 	.word	0x20000bb0
 800605c:	20000bb1 	.word	0x20000bb1

08006060 <TwoByteInArrayToWord>:
//--------------------------------------------------------------------------------------------------
uint16_t	TwoByteInArrayToWord (uint8_t  *PointArray){
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	uint16_t   foo;
	foo = (uint16_t)((PointArray[0]) * 256) + (uint16_t)((PointArray [1]));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3301      	adds	r3, #1
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	0019      	movs	r1, r3
 8006078:	200e      	movs	r0, #14
 800607a:	183b      	adds	r3, r7, r0
 800607c:	1852      	adds	r2, r2, r1
 800607e:	801a      	strh	r2, [r3, #0]
	return	 foo;
 8006080:	183b      	adds	r3, r7, r0
 8006082:	881b      	ldrh	r3, [r3, #0]
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}

0800608c <Load_ret1>:
//--------------------------------------------------------------------------------------------------
//;Carga retardos para entrar a funcion nocturno.
//Load_ret:
//;							mov			retnoct,#$14	;	/ Carga el retardo para entrar a nocturno con 20 minutos
//;  ----- _Rev STM32	CUBE IDE
void Load_ret1(){
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
    asm ("nop");
 8006090:	46c0      	nop			@ (mov r8, r8)
    asm ("nop");
 8006092:	46c0      	nop			@ (mov r8, r8)

}
 8006094:	46c0      	nop			@ (mov r8, r8)
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <Load_ret2>:
//;  ----- _Rev STM32	CUBE IDE
void Load_ret2 (){
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
	cntpah = Plantilla[timepa] *60;		 // Carga el contador de tiempo de puerta abierta
 80060a0:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <Load_ret2+0x1c>)
 80060a2:	2249      	movs	r2, #73	@ 0x49
 80060a4:	5c9b      	ldrb	r3, [r3, r2]
 80060a6:	001a      	movs	r2, r3
 80060a8:	233c      	movs	r3, #60	@ 0x3c
 80060aa:	4353      	muls	r3, r2
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	4b03      	ldr	r3, [pc, #12]	@ (80060bc <Load_ret2+0x20>)
 80060b0:	801a      	strh	r2, [r3, #0]
}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200000b8 	.word	0x200000b8
 80060bc:	20000b66 	.word	0x20000b66

080060c0 <ldadaptivo>:
//;LN 5377	--------------------------------------------------------------------------------------------------
//;Rutina que carga el intervalo entre deshielos y el valor de comparación para modo adaptivo
//;  ----- _Rev STM32	CUBE IDE
void ldadaptivo(){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	interdhh = (Plantilla[interdh] * 3600) ;   // Toma el tiempo mínimo de interdeshielo en horas , 3600 Número de segundos por hora
 80060c4:	4b0b      	ldr	r3, [pc, #44]	@ (80060f4 <ldadaptivo+0x34>)
 80060c6:	2246      	movs	r2, #70	@ 0x46
 80060c8:	5c9b      	ldrb	r3, [r3, r2]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <ldadaptivo+0x38>)
 80060d0:	701a      	strb	r2, [r3, #0]

	coontimeh = (Plantilla[timeadap] * (interdhh/8));  		// Toma el parámetro de tiempo adaptivo
 80060d2:	4b08      	ldr	r3, [pc, #32]	@ (80060f4 <ldadaptivo+0x34>)
 80060d4:	2256      	movs	r2, #86	@ 0x56
 80060d6:	5c9b      	ldrb	r3, [r3, r2]
 80060d8:	001a      	movs	r2, r3
 80060da:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <ldadaptivo+0x38>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	08db      	lsrs	r3, r3, #3
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	4353      	muls	r3, r2
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <ldadaptivo+0x3c>)
 80060e8:	801a      	strh	r2, [r3, #0]

	asm ("nop");
 80060ea:	46c0      	nop			@ (mov r8, r8)
												// Interdeshielo completamente adaptivo
}
 80060ec:	46c0      	nop			@ (mov r8, r8)
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	200000b8 	.word	0x200000b8
 80060f8:	20000bb6 	.word	0x20000bb6
 80060fc:	20000bbc 	.word	0x20000bbc

08006100 <blink_640>:
//;  ----- Manuel_Rev
//;  ----- _Rev STM32	CUBE IDE
void blink_640 (){
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 8006106:	1dbb      	adds	r3, r7, #6
 8006108:	2200      	movs	r2, #0
 800610a:	801a      	strh	r2, [r3, #0]
	foo = cntblkh;
 800610c:	1dbb      	adds	r3, r7, #6
 800610e:	4a0e      	ldr	r2, [pc, #56]	@ (8006148 <blink_640+0x48>)
 8006110:	8812      	ldrh	r2, [r2, #0]
 8006112:	801a      	strh	r2, [r3, #0]
	foo = foo << 1;
 8006114:	1dba      	adds	r2, r7, #6
 8006116:	1dbb      	adds	r3, r7, #6
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	18db      	adds	r3, r3, r3
 800611c:	8013      	strh	r3, [r2, #0]
	foo = foo << 1;
 800611e:	1dba      	adds	r2, r7, #6
 8006120:	1dbb      	adds	r3, r7, #6
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	18db      	adds	r3, r3, r3
 8006126:	8013      	strh	r3, [r2, #0]
	waux =  lowByte(foo);
 8006128:	1dbb      	adds	r3, r7, #6
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	4b07      	ldr	r3, [pc, #28]	@ (800614c <blink_640+0x4c>)
 8006130:	701a      	strb	r2, [r3, #0]
	wreg = 	highByte(foo);				//wreg;			/ En wreg quedan los múltiplos de 640 ms
 8006132:	1dbb      	adds	r3, r7, #6
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	b29b      	uxth	r3, r3
 800613a:	b2da      	uxtb	r2, r3
 800613c:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <blink_640+0x50>)
 800613e:	701a      	strb	r2, [r3, #0]
}
 8006140:	46c0      	nop			@ (mov r8, r8)
 8006142:	46bd      	mov	sp, r7
 8006144:	b002      	add	sp, #8
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000b4c 	.word	0x20000b4c
 800614c:	20000b54 	.word	0x20000b54
 8006150:	20000b55 	.word	0x20000b55

08006154 <sp_dpy>:
//;LN 5403	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	sp_dpy (){				//sp_dpy:					;// manuel_math_change//	mov			tempo1,liminf_f ;// manuel_math_change//	liminff;
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
								// manuel_math_change//	mov			tempo2,liminf_i ;// manuel_math_change//	liminfl;
								//	ldw			X,liminf_w
								//			ldw     tempo2,X
	convadec_math(liminf_w);	//			call		convadec_math  ;// manuel_math_change//  convadec;		/ Despliega el Set Point que esta operando
 8006158:	4b03      	ldr	r3, [pc, #12]	@ (8006168 <sp_dpy+0x14>)
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	0018      	movs	r0, r3
 800615e:	f000 f8af 	bl	80062c0 <convadec_math>
								//			//ret	;
}
 8006162:	46c0      	nop			@ (mov r8, r8)
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000bac 	.word	0x20000bac

0800616c <dif_dpy>:
//;LN 5410	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	dif_dpy (){					//	dif_dpy:			;// manuel_math_change// mov			tempo1,limsup_f ;// manuel_math_change// limsupf;	/ Toma límite superior
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
									//  manuel_math_change// mov			tempo2,limsup_i ;// manuel_math_change// limsupl;
	uint16_t  foo = 0;			// ldw     X,limsup_w
 8006172:	1dbb      	adds	r3, r7, #6
 8006174:	2200      	movs	r2, #0
 8006176:	801a      	strh	r2, [r3, #0]
									// ldw     tempo2,X
									// manuel_math_change//  mov			wreg,liminf_f  ;// manuel_math_change//	liminff;	/ Toma límite inferior
									// manuel_math_change//  mov			waux,liminf_i  ;// manuel_math_change//	liminfl;
									// ldw     X,liminf_w
									// ldw     waux,X
	foo = limsup_w - liminf_w;	// call		restfbcd_math   ;// manuel_math_change//     restfbcd;		/ Resta
 8006178:	4b07      	ldr	r3, [pc, #28]	@ (8006198 <dif_dpy+0x2c>)
 800617a:	8819      	ldrh	r1, [r3, #0]
 800617c:	4b07      	ldr	r3, [pc, #28]	@ (800619c <dif_dpy+0x30>)
 800617e:	881a      	ldrh	r2, [r3, #0]
 8006180:	1dbb      	adds	r3, r7, #6
 8006182:	1a8a      	subs	r2, r1, r2
 8006184:	801a      	strh	r2, [r3, #0]
									// manuel_math_change//  call		convad10;		/ Despliega el Diferencial que este operando
	convadec_math(foo);			// call		conv_temper_positiva
 8006186:	1dbb      	adds	r3, r7, #6
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	0018      	movs	r0, r3
 800618c:	f000 f898 	bl	80062c0 <convadec_math>
									// ret ;
}
 8006190:	46c0      	nop			@ (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b002      	add	sp, #8
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000bae 	.word	0x20000bae
 800619c:	20000bac 	.word	0x20000bac

080061a0 <minbrake_load>:
//;LN 5423	--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	minbrake_load (){			//	;Subrutina agregada para la optimización de código  >> IJG JULIO 2012
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
		wreg = Plantilla [minbrake];			// 	mov			wreg,minbrake;	/ Carga el tiempo mínimo de descanso del compresor
 80061a4:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <minbrake_load+0x2c>)
 80061a6:	2265      	movs	r2, #101	@ 0x65
 80061a8:	5c9a      	ldrb	r2, [r3, r2]
 80061aa:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <minbrake_load+0x30>)
 80061ac:	701a      	strb	r2, [r3, #0]
		BaBentre10_math();			// 	call		BaBentre10_math   ;// manuel_math_change//  BaBentre10;
 80061ae:	f000 f99f 	bl	80064f0 <BaBentre10_math>
		//  >>>>>>> ERROR, aqui no carga lo que hay en (waux:wreg)
		// tminstopl = resull;			//	mov			tminstopl,resull;
		// tminstoph = resulh;			//	mov			tminstoph,resulh;/ Carga el tiempo mínimo de descanso del compresor
		tminstoph = (resulh*256) + resull;			//;/ Carga el tiempo mínimo de descanso del compresor
 80061b2:	4b08      	ldr	r3, [pc, #32]	@ (80061d4 <minbrake_load+0x34>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4a07      	ldr	r2, [pc, #28]	@ (80061d8 <minbrake_load+0x38>)
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	189b      	adds	r3, r3, r2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <minbrake_load+0x3c>)
 80061c4:	801a      	strh	r2, [r3, #0]
}
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	200000b8 	.word	0x200000b8
 80061d0:	20000b55 	.word	0x20000b55
 80061d4:	20000b47 	.word	0x20000b47
 80061d8:	20000b48 	.word	0x20000b48
 80061dc:	20000b62 	.word	0x20000b62

080061e0 <desptdv_math>:
//;LN 6429 --------------------------------------------------------------------------------------------------
//;Rutina que despliega el dato de temperatura contenido en tdevdpy
void	desptdv_math (){
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0

			// Valor de display para despliegue de informacion
			// tdevdpy_w =  tsac_w;
			// Valor de display para despliegue de informacion
			uint16_t  foo = 0;
 80061e6:	1dbb      	adds	r3, r7, #6
 80061e8:	2200      	movs	r2, #0
 80061ea:	801a      	strh	r2, [r3, #0]

			foo = tdevdpy_w;
 80061ec:	1dbb      	adds	r3, r7, #6
 80061ee:	4a31      	ldr	r2, [pc, #196]	@ (80062b4 <desptdv_math+0xd4>)
 80061f0:	8812      	ldrh	r2, [r2, #0]
 80061f2:	801a      	strh	r2, [r3, #0]
			//ldw			X,osdiur_w ;	/ Toma la constante de offset de diurno

off_diur:	//ldw     waux,X
			//call		sumafbcd_math   ;// manuel_math_change//    sumafbcd;
			//  waux:wreg = tempo2:tempo1 +  waux:wreg
			foo = 	foo	+ TwoByteInArrayToWord (&Plantilla[osdiur_H]);
 80061f4:	4b30      	ldr	r3, [pc, #192]	@ (80062b8 <desptdv_math+0xd8>)
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7ff ff32 	bl	8006060 <TwoByteInArrayToWord>
 80061fc:	0003      	movs	r3, r0
 80061fe:	0019      	movs	r1, r3
 8006200:	1dbb      	adds	r3, r7, #6
 8006202:	1dba      	adds	r2, r7, #6
 8006204:	8812      	ldrh	r2, [r2, #0]
 8006206:	188a      	adds	r2, r1, r2
 8006208:	801a      	strh	r2, [r3, #0]

			if(Plantilla[escala] != 0x20){
 800620a:	4b2c      	ldr	r3, [pc, #176]	@ (80062bc <desptdv_math+0xdc>)
 800620c:	2252      	movs	r2, #82	@ 0x52
 800620e:	5c9b      	ldrb	r3, [r3, r2]
 8006210:	2b20      	cmp	r3, #32
 8006212:	d145      	bne.n	80062a0 <desptdv_math+0xc0>
				goto	dpyTempCelcius;
			}
			if(!(foo & 0x8000)){					// / El dato es negativo?
 8006214:	1dbb      	adds	r3, r7, #6
 8006216:	2200      	movs	r2, #0
 8006218:	5e9b      	ldrsh	r3, [r3, r2]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da22      	bge.n	8006264 <desptdv_math+0x84>
				goto positivo2Fahrenheit;
			}
			foo = (~foo) +1;
 800621e:	1dbb      	adds	r3, r7, #6
 8006220:	1dba      	adds	r2, r7, #6
 8006222:	8812      	ldrh	r2, [r2, #0]
 8006224:	4252      	negs	r2, r2
 8006226:	801a      	strh	r2, [r3, #0]
			foo = foo/2;
 8006228:	1dbb      	adds	r3, r7, #6
 800622a:	1dba      	adds	r2, r7, #6
 800622c:	8812      	ldrh	r2, [r2, #0]
 800622e:	0852      	lsrs	r2, r2, #1
 8006230:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 8006232:	1dba      	adds	r2, r7, #6
 8006234:	1dbb      	adds	r3, r7, #6
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	1c19      	adds	r1, r3, #0
 800623a:	00c9      	lsls	r1, r1, #3
 800623c:	18cb      	adds	r3, r1, r3
 800623e:	18db      	adds	r3, r3, r3
 8006240:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 8006242:	1dbc      	adds	r4, r7, #6
 8006244:	1dbb      	adds	r3, r7, #6
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	2105      	movs	r1, #5
 800624a:	0018      	movs	r0, r3
 800624c:	f7f9 ff64 	bl	8000118 <__udivsi3>
 8006250:	0003      	movs	r3, r0
 8006252:	8023      	strh	r3, [r4, #0]
			foo = 320 - foo;
 8006254:	1dbb      	adds	r3, r7, #6
 8006256:	1dba      	adds	r2, r7, #6
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	21a0      	movs	r1, #160	@ 0xa0
 800625c:	0049      	lsls	r1, r1, #1
 800625e:	1a8a      	subs	r2, r1, r2
 8006260:	801a      	strh	r2, [r3, #0]
			goto	finConvFahrenheit;			//jra			finConvFahrenheit
 8006262:	e01e      	b.n	80062a2 <desptdv_math+0xc2>
				goto positivo2Fahrenheit;
 8006264:	46c0      	nop			@ (mov r8, r8)
positivo2Fahrenheit:
			foo = foo/2;
 8006266:	1dbb      	adds	r3, r7, #6
 8006268:	1dba      	adds	r2, r7, #6
 800626a:	8812      	ldrh	r2, [r2, #0]
 800626c:	0852      	lsrs	r2, r2, #1
 800626e:	801a      	strh	r2, [r3, #0]
			foo = foo * 18;
 8006270:	1dba      	adds	r2, r7, #6
 8006272:	1dbb      	adds	r3, r7, #6
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	1c19      	adds	r1, r3, #0
 8006278:	00c9      	lsls	r1, r1, #3
 800627a:	18cb      	adds	r3, r1, r3
 800627c:	18db      	adds	r3, r3, r3
 800627e:	8013      	strh	r3, [r2, #0]
			foo = foo/5;
 8006280:	1dbc      	adds	r4, r7, #6
 8006282:	1dbb      	adds	r3, r7, #6
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	2105      	movs	r1, #5
 8006288:	0018      	movs	r0, r3
 800628a:	f7f9 ff45 	bl	8000118 <__udivsi3>
 800628e:	0003      	movs	r3, r0
 8006290:	8023      	strh	r3, [r4, #0]
			foo = foo + 320;
 8006292:	1dbb      	adds	r3, r7, #6
 8006294:	1dba      	adds	r2, r7, #6
 8006296:	8812      	ldrh	r2, [r2, #0]
 8006298:	3241      	adds	r2, #65	@ 0x41
 800629a:	32ff      	adds	r2, #255	@ 0xff
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e000      	b.n	80062a2 <desptdv_math+0xc2>
				goto	dpyTempCelcius;
 80062a0:	46c0      	nop			@ (mov r8, r8)
finConvFahrenheit:
			//ldw			tempo2,X

dpyTempCelcius:
			convadec_math(foo);						//;subrrutina para preparar los registros a mostrar temperatura
 80062a2:	1dbb      	adds	r3, r7, #6
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 f80a 	bl	80062c0 <convadec_math>

}
 80062ac:	46c0      	nop			@ (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b003      	add	sp, #12
 80062b2:	bd90      	pop	{r4, r7, pc}
 80062b4:	20000bb4 	.word	0x20000bb4
 80062b8:	200000bd 	.word	0x200000bd
 80062bc:	200000b8 	.word	0x200000b8

080062c0 <convadec_math>:
//;Rutina que convierte un número signado, normalizado a 128 y lo despliega
//;El dato esta en los registros tempo1 para la fracción y tempo2 para el entero
//;============================================================
//;subrrutina para preparar los registros a mostrar temperatura
//;  ----- _Rev STM32	CUBE IDE
void convadec_math (uint16_t  tempo2){
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	0002      	movs	r2, r0
 80062c8:	1dbb      	adds	r3, r7, #6
 80062ca:	801a      	strh	r2, [r3, #0]

		offdpy();				//call		offdpy;
 80062cc:	f000 face 	bl	800686c <offdpy>

		//-------Procesamiento temporal de temperatura-------------------
		uint8_t tempo_2 =0;
 80062d0:	230f      	movs	r3, #15
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
		uint8_t tempo_1 =0;
 80062d8:	230e      	movs	r3, #14
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]

		if(!(tempo2 & 0x8000)){					// / El dato es negativo?
 80062e0:	1dbb      	adds	r3, r7, #6
 80062e2:	2200      	movs	r2, #0
 80062e4:	5e9b      	ldrsh	r3, [r3, r2]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da08      	bge.n	80062fc <convadec_math+0x3c>
			goto conv_temper_positiva;
		}
      	//;manuel tratamiento para dato  negativo
		tempo2 = (~tempo2) +1;
 80062ea:	1dbb      	adds	r3, r7, #6
 80062ec:	1dba      	adds	r2, r7, #6
 80062ee:	8812      	ldrh	r2, [r2, #0]
 80062f0:	4252      	negs	r2, r2
 80062f2:	801a      	strh	r2, [r3, #0]
		datled[sign] = 1;			//bset		datled,#1;0x02;	/ Enciende el signo
 80062f4:	4b45      	ldr	r3, [pc, #276]	@ (800640c <convadec_math+0x14c>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	705a      	strb	r2, [r3, #1]
 80062fa:	e000      	b.n	80062fe <convadec_math+0x3e>
			goto conv_temper_positiva;
 80062fc:	46c0      	nop			@ (mov r8, r8)


	   //   ;manuel tratamiento para la fraccion positiva
conv_temper_positiva:
		tempo_1 = (uint8_t)(tempo2%10);		// guarda la decena
 80062fe:	1dbb      	adds	r3, r7, #6
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	210a      	movs	r1, #10
 8006304:	0018      	movs	r0, r3
 8006306:	f7f9 ff8d 	bl	8000224 <__aeabi_uidivmod>
 800630a:	000b      	movs	r3, r1
 800630c:	b29a      	uxth	r2, r3
 800630e:	230e      	movs	r3, #14
 8006310:	18fb      	adds	r3, r7, r3
 8006312:	701a      	strb	r2, [r3, #0]
		tempo_2 = (uint8_t)(tempo2/10);		// guarda el entero
 8006314:	1dbb      	adds	r3, r7, #6
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	210a      	movs	r1, #10
 800631a:	0018      	movs	r0, r3
 800631c:	f7f9 fefc 	bl	8000118 <__udivsi3>
 8006320:	0003      	movs	r3, r0
 8006322:	b29a      	uxth	r2, r3
 8006324:	230f      	movs	r3, #15
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	701a      	strb	r2, [r3, #0]

		if(!datled[1]){//if(!GetRegFlagState(datled, 1)){						// Enciende el signo
 800632a:	4b38      	ldr	r3, [pc, #224]	@ (800640c <convadec_math+0x14c>)
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2201      	movs	r2, #1
 8006330:	4053      	eors	r3, r2
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d116      	bne.n	8006366 <convadec_math+0xa6>
			goto conv_signo_positivo;
		}
		wreg = 0x23;
 8006338:	4b35      	ldr	r3, [pc, #212]	@ (8006410 <convadec_math+0x150>)
 800633a:	2223      	movs	r2, #35	@ 0x23
 800633c:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 800633e:	4b35      	ldr	r3, [pc, #212]	@ (8006414 <convadec_math+0x154>)
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2201      	movs	r2, #1
 8006344:	4053      	eors	r3, r2
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <convadec_math+0x94>
			goto cp_25;
		}
		wreg = 0x64;
 800634c:	4b30      	ldr	r3, [pc, #192]	@ (8006410 <convadec_math+0x150>)
 800634e:	2264      	movs	r2, #100	@ 0x64
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	e000      	b.n	8006356 <convadec_math+0x96>
			goto cp_25;
 8006354:	46c0      	nop			@ (mov r8, r8)
cp_25:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 8006356:	4b2e      	ldr	r3, [pc, #184]	@ (8006410 <convadec_math+0x150>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	220f      	movs	r2, #15
 800635c:	18ba      	adds	r2, r7, r2
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d318      	bcc.n	8006396 <convadec_math+0xd6>
			goto dpy_oL;			  // Despliega "-oL"
 8006364:	e03d      	b.n	80063e2 <convadec_math+0x122>
			goto conv_signo_positivo;
 8006366:	46c0      	nop			@ (mov r8, r8)
		}
		goto     convad10;
conv_signo_positivo:
		wreg = 0x63;
 8006368:	4b29      	ldr	r3, [pc, #164]	@ (8006410 <convadec_math+0x150>)
 800636a:	2263      	movs	r2, #99	@ 0x63
 800636c:	701a      	strb	r2, [r3, #0]
		if(!flagsb[f_prog]){						// Esta en modo de programación???
 800636e:	4b29      	ldr	r3, [pc, #164]	@ (8006414 <convadec_math+0x154>)
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2201      	movs	r2, #1
 8006374:	4053      	eors	r3, r2
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d103      	bne.n	8006384 <convadec_math+0xc4>
			goto cp_99;
		}
		wreg = 0x64;
 800637c:	4b24      	ldr	r3, [pc, #144]	@ (8006410 <convadec_math+0x150>)
 800637e:	2264      	movs	r2, #100	@ 0x64
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e000      	b.n	8006386 <convadec_math+0xc6>
			goto cp_99;
 8006384:	46c0      	nop			@ (mov r8, r8)
cp_99:
		if(tempo_2 >= wreg){			// La parte entera es Es mayor a wreg
 8006386:	4b22      	ldr	r3, [pc, #136]	@ (8006410 <convadec_math+0x150>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	220f      	movs	r2, #15
 800638c:	18ba      	adds	r2, r7, r2
 800638e:	7812      	ldrb	r2, [r2, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d225      	bcs.n	80063e0 <convadec_math+0x120>
			goto dpy_oL;			  // Despliega "-oL"
		}
convad10:
 8006394:	e000      	b.n	8006398 <convadec_math+0xd8>
		goto     convad10;
 8006396:	46c0      	nop			@ (mov r8, r8)
		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8006398:	210f      	movs	r1, #15
 800639a:	187b      	adds	r3, r7, r1
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b09      	cmp	r3, #9
 80063a0:	d80d      	bhi.n	80063be <convadec_math+0xfe>
			goto soloent;
		}
fraccion:
 80063a2:	46c0      	nop			@ (mov r8, r8)
		datled[dp]=1;//BitSet(datled,dp);;				// bset		datled,#0;0x01;	/ Enciende el punto decimal
 80063a4:	4b19      	ldr	r3, [pc, #100]	@ (800640c <convadec_math+0x14c>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
dpy_sign_no_00:
			op_menu (tempo_2,tempo_1);
 80063aa:	230e      	movs	r3, #14
 80063ac:	18fb      	adds	r3, r7, r3
 80063ae:	781a      	ldrb	r2, [r3, #0]
 80063b0:	187b      	adds	r3, r7, r1
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	0011      	movs	r1, r2
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 fef0 	bl	800719c <op_menu>
			//datdig1 = tempo_2;
			//datdig2 = tempo_1;
			goto	finconvad;
 80063bc:	e021      	b.n	8006402 <convadec_math+0x142>
			goto soloent;
 80063be:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 80063c0:	4b13      	ldr	r3, [pc, #76]	@ (8006410 <convadec_math+0x150>)
 80063c2:	220f      	movs	r2, #15
 80063c4:	18ba      	adds	r2, r7, r2
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80063ca:	f000 f891 	bl	80064f0 <BaBentre10_math>
		op_menu (waux,wreg);
 80063ce:	4b12      	ldr	r3, [pc, #72]	@ (8006418 <convadec_math+0x158>)
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <convadec_math+0x150>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	0019      	movs	r1, r3
 80063d8:	0010      	movs	r0, r2
 80063da:	f000 fedf 	bl	800719c <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80063de:	e010      	b.n	8006402 <convadec_math+0x142>
			goto dpy_oL;			  // Despliega "-oL"
 80063e0:	46c0      	nop			@ (mov r8, r8)

dpy_oL:
		if (GetRegFlagState(lowByte(cntblkh), 5)){
 80063e2:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <convadec_math+0x15c>)
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	001a      	movs	r2, r3
 80063ea:	2320      	movs	r3, #32
 80063ec:	4013      	ands	r3, r2
 80063ee:	d102      	bne.n	80063f6 <convadec_math+0x136>
			goto convadec_j02;
		}
		offdpy ();			//jp			offdpy;
 80063f0:	f000 fa3c 	bl	800686c <offdpy>
		goto	finconvad;
 80063f4:	e005      	b.n	8006402 <convadec_math+0x142>
			goto convadec_j02;
 80063f6:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
 80063f8:	2111      	movs	r1, #17
 80063fa:	2010      	movs	r0, #16
 80063fc:	f000 fece 	bl	800719c <op_menu>
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8006400:	46c0      	nop			@ (mov r8, r8)
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	b004      	add	sp, #16
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	20000b90 	.word	0x20000b90
 8006410:	20000b55 	.word	0x20000b55
 8006414:	20000be8 	.word	0x20000be8
 8006418:	20000b54 	.word	0x20000b54
 800641c:	20000b4c 	.word	0x20000b4c

08006420 <convad10>:
//-------------------------------------------
void convad10(uint8_t tempo_2){
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	0002      	movs	r2, r0
 8006428:	1dfb      	adds	r3, r7, #7
 800642a:	701a      	strb	r2, [r3, #0]

	uint8_t tempo_1 =0;
 800642c:	210f      	movs	r1, #15
 800642e:	187b      	adds	r3, r7, r1
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]

		if(tempo_2 >= 10){						//  El entero es mayor a 10 °x
 8006434:	1dfb      	adds	r3, r7, #7
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b09      	cmp	r3, #9
 800643a:	d80c      	bhi.n	8006456 <convad10+0x36>
			goto soloent;
		}
fraccion:
 800643c:	46c0      	nop			@ (mov r8, r8)
		datled[0] = 1;//BitSet(datled,0);;				// Enciende punto decimal
 800643e:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <convad10+0x60>)
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
		//	ldw   	X,tempo2;	/ Despliega el entero en el dígito1
		//	jrne		dpy_sign_no_00;
		//	bres		datled,#1;0x02;	/ Apaga el signo
		//	dpy_sign_no_00:	swapw  	X
		op_menu (tempo_2,tempo_1);
 8006444:	187b      	adds	r3, r7, r1
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	1dfb      	adds	r3, r7, #7
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	0011      	movs	r1, r2
 800644e:	0018      	movs	r0, r3
 8006450:	f000 fea4 	bl	800719c <op_menu>
		//datdig1 = tempo_2;
		//datdig2 = tempo_1;
		goto	finconvad;
 8006454:	e00f      	b.n	8006476 <convad10+0x56>
			goto soloent;
 8006456:	46c0      	nop			@ (mov r8, r8)

soloent:
		wreg = tempo_2; 		//mov			wreg,tempo2;
 8006458:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <convad10+0x64>)
 800645a:	1dfa      	adds	r2, r7, #7
 800645c:	7812      	ldrb	r2, [r2, #0]
 800645e:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 8006460:	f000 f846 	bl	80064f0 <BaBentre10_math>
		op_menu (waux,wreg);
 8006464:	4b08      	ldr	r3, [pc, #32]	@ (8006488 <convad10+0x68>)
 8006466:	781a      	ldrb	r2, [r3, #0]
 8006468:	4b06      	ldr	r3, [pc, #24]	@ (8006484 <convad10+0x64>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	0019      	movs	r1, r3
 800646e:	0010      	movs	r0, r2
 8006470:	f000 fe94 	bl	800719c <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 8006474:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b004      	add	sp, #16
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	20000b90 	.word	0x20000b90
 8006484:	20000b55 	.word	0x20000b55
 8006488:	20000b54 	.word	0x20000b54

0800648c <soloent>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent (uint8_t  tempo2){
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	0002      	movs	r2, r0
 8006494:	1dfb      	adds	r3, r7, #7
 8006496:	701a      	strb	r2, [r3, #0]

soloent:
		wreg = tempo2; 		//mov			wreg,tempo_2;
 8006498:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <soloent+0x34>)
 800649a:	1dfa      	adds	r2, r7, #7
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	701a      	strb	r2, [r3, #0]

soloent1:
		BaBentre10_math();		// call		BaBentre10_math
 80064a0:	f000 f826 	bl	80064f0 <BaBentre10_math>
		op_menu (waux,wreg);
 80064a4:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <soloent+0x38>)
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <soloent+0x34>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	0019      	movs	r1, r3
 80064ae:	0010      	movs	r0, r2
 80064b0:	f000 fe74 	bl	800719c <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80064b4:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80064b6:	46c0      	nop			@ (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b002      	add	sp, #8
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	20000b55 	.word	0x20000b55
 80064c4:	20000b54 	.word	0x20000b54

080064c8 <soloent1>:
//-------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void soloent1 (){
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0

		BaBentre10_math();		// call		BaBentre10_math
 80064cc:	f000 f810 	bl	80064f0 <BaBentre10_math>
		op_menu (waux,wreg);
 80064d0:	4b05      	ldr	r3, [pc, #20]	@ (80064e8 <soloent1+0x20>)
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	4b05      	ldr	r3, [pc, #20]	@ (80064ec <soloent1+0x24>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	0019      	movs	r1, r3
 80064da:	0010      	movs	r0, r2
 80064dc:	f000 fe5e 	bl	800719c <op_menu>
		//datdig1 = waux;			//	tempo_2/10;
		//datdig2 = wreg;			//	tempo_2%10;
		goto	finconvad;
 80064e0:	46c0      	nop			@ (mov r8, r8)
convadec_j02:
		op_menu (0x10,0x11);
		//datdig1 = 0x10;		//mov			datdig1,#$10;  	/ Coloca el dato para desplegar la letra o
		//datdig2 = 0x11;		//mov			datdig2,#$11 ; / Coloca el dato para desplegar la letra L
finconvad:
}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20000b54 	.word	0x20000b54
 80064ec:	20000b55 	.word	0x20000b55

080064f0 <BaBentre10_math>:
//;LN 6574 Rutina que convierte un dato de tipo Byte a la forma Byte/10
//;en wreg esta el dato a convertir, y se regresa en waux las decenas y en wreg el residuo
//;--------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void	BaBentre10_math(void){
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
		waux = 0;						//clr		 waux;    waux:wreg   ; solo trabaja sobre WREG
 80064f4:	4b11      	ldr	r3, [pc, #68]	@ (800653c <BaBentre10_math+0x4c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
		STM8_16_X = (uint16_t)wreg;
 80064fa:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <BaBentre10_math+0x50>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	001a      	movs	r2, r3
 8006500:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <BaBentre10_math+0x54>)
 8006502:	801a      	strh	r2, [r3, #0]
		wreg =  (uint8_t)STM8_16_X%10;				// wreg el residuo
 8006504:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <BaBentre10_math+0x54>)
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	210a      	movs	r1, #10
 800650c:	0018      	movs	r0, r3
 800650e:	f7f9 fe89 	bl	8000224 <__aeabi_uidivmod>
 8006512:	000b      	movs	r3, r1
 8006514:	b2da      	uxtb	r2, r3
 8006516:	4b0a      	ldr	r3, [pc, #40]	@ (8006540 <BaBentre10_math+0x50>)
 8006518:	701a      	strb	r2, [r3, #0]
		waux = (uint8_t)STM8_16_X/10;					// waux las decenas
 800651a:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <BaBentre10_math+0x54>)
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	210a      	movs	r1, #10
 8006522:	0018      	movs	r0, r3
 8006524:	f7f9 fdf8 	bl	8000118 <__udivsi3>
 8006528:	0003      	movs	r3, r0
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b03      	ldr	r3, [pc, #12]	@ (800653c <BaBentre10_math+0x4c>)
 800652e:	701a      	strb	r2, [r3, #0]
		conv60_6_math();
 8006530:	f000 f80a 	bl	8006548 <conv60_6_math>
}
 8006534:	46c0      	nop			@ (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	46c0      	nop			@ (mov r8, r8)
 800653c:	20000b54 	.word	0x20000b54
 8006540:	20000b55 	.word	0x20000b55
 8006544:	200008d2 	.word	0x200008d2

08006548 <conv60_6_math>:
//;Rutina que convierte un dato Byte/10 en formato 60_6 a valor de cuenta
//;en waux_wreg esta el dato a convertir, y se regresa el valor en resulh:resull
//;wreg y waux no sufern cambio
//;¡¡¡¡¡¡OJO!!!!!!   NO QUITAR DE AQUI PORQUE ES CONTINUACIÓN DE LA RUTINA ANTERIOR
//;  ----- Manuel_Rev
void conv60_6_math (void) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
	uint16_t  foo = 0;
 800654e:	1dbb      	adds	r3, r7, #6
 8006550:	2200      	movs	r2, #0
 8006552:	801a      	strh	r2, [r3, #0]
	foo = (uint16_t)(6 * wreg); 						// ldw     X,#$0006, Convierte el Byte de residuo a valor de cuenta
 8006554:	4b11      	ldr	r3, [pc, #68]	@ (800659c <conv60_6_math+0x54>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	1dba      	adds	r2, r7, #6
 800655a:	1c19      	adds	r1, r3, #0
 800655c:	1c0b      	adds	r3, r1, #0
 800655e:	18db      	adds	r3, r3, r3
 8006560:	185b      	adds	r3, r3, r1
 8006562:	18db      	adds	r3, r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
	foo = foo + (uint16_t)(60* waux);		// Convierte el Byte de decenas a valor de cuenta
 8006566:	4b0e      	ldr	r3, [pc, #56]	@ (80065a0 <conv60_6_math+0x58>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	001a      	movs	r2, r3
 800656c:	233c      	movs	r3, #60	@ 0x3c
 800656e:	4353      	muls	r3, r2
 8006570:	b299      	uxth	r1, r3
 8006572:	1dbb      	adds	r3, r7, #6
 8006574:	1dba      	adds	r2, r7, #6
 8006576:	8812      	ldrh	r2, [r2, #0]
 8006578:	188a      	adds	r2, r1, r2
 800657a:	801a      	strh	r2, [r3, #0]
	resulh = highByte(foo);
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	0a1b      	lsrs	r3, r3, #8
 8006582:	b29b      	uxth	r3, r3
 8006584:	b2da      	uxtb	r2, r3
 8006586:	4b07      	ldr	r3, [pc, #28]	@ (80065a4 <conv60_6_math+0x5c>)
 8006588:	701a      	strb	r2, [r3, #0]
	resull= lowByte(foo);
 800658a:	1dbb      	adds	r3, r7, #6
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <conv60_6_math+0x60>)
 8006592:	701a      	strb	r2, [r3, #0]
}
 8006594:	46c0      	nop			@ (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000b55 	.word	0x20000b55
 80065a0:	20000b54 	.word	0x20000b54
 80065a4:	20000b47 	.word	0x20000b47
 80065a8:	20000b48 	.word	0x20000b48

080065ac <fallas>:
//;LN 4928 --------------------------------------------------------------------------------------------------
//;Rutina que determina el tipo de fallas a señalizar y desplegar
//;  ----- Manuel_Rev
fallas(){						//fallas:
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0

		flagsBuzzer[0] = 0;		//bres flagsBuzzer,#0
 80065b2:	4ba3      	ldr	r3, [pc, #652]	@ (8006840 <fallas+0x294>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]

	    if(edorefri != 0){ //tnz edorefri
 80065b8:	4ba2      	ldr	r3, [pc, #648]	@ (8006844 <fallas+0x298>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <fallas+0x18>
	      	 goto fallas10; //jrne fallas10
	    }
finfallas_00:
 80065c0:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas; //jp finfallas
 80065c2:	e138      	b.n	8006836 <fallas+0x28a>
	      	 goto fallas10; //jrne fallas10
 80065c4:	46c0      	nop			@ (mov r8, r8)

fallas10:
	    if(edorefri == 1){//cp A,#1;
 80065c6:	4b9f      	ldr	r3, [pc, #636]	@ (8006844 <fallas+0x298>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d003      	beq.n	80065d6 <fallas+0x2a>
	      	   goto fallas11;//jreq fallas11;
	    }
	    datled[5] = 0;			 //bres datled,#5
 80065ce:	4b9e      	ldr	r3, [pc, #632]	@ (8006848 <fallas+0x29c>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	715a      	strb	r2, [r3, #5]
 80065d4:	e000      	b.n	80065d8 <fallas+0x2c>
	      	   goto fallas11;//jreq fallas11;
 80065d6:	46c0      	nop			@ (mov r8, r8)

fallas11:

		for(int k=0; k<8;k++){
 80065d8:	2300      	movs	r3, #0
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	e014      	b.n	8006608 <fallas+0x5c>
			if((trefst[k] ) | (trefst2[k]) | (flagsBattery [k])){//	tnz trefst,	tnz     trefst2,	tnz			flagsBattery
 80065de:	4a9b      	ldr	r2, [pc, #620]	@ (800684c <fallas+0x2a0>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	18d3      	adds	r3, r2, r3
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	499a      	ldr	r1, [pc, #616]	@ (8006850 <fallas+0x2a4>)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	18cb      	adds	r3, r1, r3
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4998      	ldr	r1, [pc, #608]	@ (8006854 <fallas+0x2a8>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	18cb      	adds	r3, r1, r3
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <fallas+0x66>
		for(int k=0; k<8;k++){
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3301      	adds	r3, #1
 8006606:	607b      	str	r3, [r7, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b07      	cmp	r3, #7
 800660c:	dde7      	ble.n	80065de <fallas+0x32>
				goto fallas12;//jrne fallas12
			}
		}

finfallas_01:
 800660e:	46c0      	nop			@ (mov r8, r8)
	    goto finfallas_00; //  jra finfallas_00
 8006610:	e7d7      	b.n	80065c2 <fallas+0x16>
				goto fallas12;//jrne fallas12
 8006612:	46c0      	nop			@ (mov r8, r8)

fallas12:
	    if(fauto[0]){//btjt fauto,#0,fallas16
 8006614:	4b90      	ldr	r3, [pc, #576]	@ (8006858 <fallas+0x2ac>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d12c      	bne.n	8006676 <fallas+0xca>
	       	goto fallas16;//
	    }
	    datled[5] = 1;			//bset datled,#5
 800661c:	4b8a      	ldr	r3, [pc, #552]	@ (8006848 <fallas+0x29c>)
 800661e:	2201      	movs	r2, #1
 8006620:	715a      	strb	r2, [r3, #5]
	    flagsBuzzer[0] = 1;		//bset flagsBuzzer,#0
 8006622:	4b87      	ldr	r3, [pc, #540]	@ (8006840 <fallas+0x294>)
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
	    //waux = 0x1F;			//mov waux,#$1F;
	    waux = 0x13;			//mov waux,#$13;
 8006628:	4b8c      	ldr	r3, [pc, #560]	@ (800685c <fallas+0x2b0>)
 800662a:	2213      	movs	r2, #19
 800662c:	701a      	strb	r2, [r3, #0]
	    if(!trefst[f_sac]){//btjf trefst,#f_sac,fallas_j00
 800662e:	4b87      	ldr	r3, [pc, #540]	@ (800684c <fallas+0x2a0>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	4053      	eors	r3, r2
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <fallas+0xa4>
	       	goto fallas_j00;
 800663c:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas15; //jra fallas15;

fallas_j00:
	    if(trefst[f_saa]){//btjt trefst,#f_saa,fallas_j01
 800663e:	4b83      	ldr	r3, [pc, #524]	@ (800684c <fallas+0x2a0>)
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d019      	beq.n	800667a <fallas+0xce>
	       	goto fallas_j01;
 8006646:	46c0      	nop			@ (mov r8, r8)
	    }
	    goto fallas20;//jra fallas20

fallas_j01:
	    //waux = 0x1F;//mov waux,#$1F
		waux = 0x13;			//mov waux,#$13;
 8006648:	4b84      	ldr	r3, [pc, #528]	@ (800685c <fallas+0x2b0>)
 800664a:	2213      	movs	r2, #19
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e000      	b.n	8006652 <fallas+0xa6>
	    goto fallas15; //jra fallas15;
 8006650:	46c0      	nop			@ (mov r8, r8)

fallas15:
	    // tempo1 = waux;//mov tempo1, waux
	    //call Load_ret;		No hace nada en ensamblador
	    load_tiempoAhorro1();	//	call load_tiempoAhorro1;
 8006652:	f000 facd 	bl	8006bf0 <load_tiempoAhorro1>
	    load_tiempoAhorro2();	//call		load_tiempoAhorro2;
 8006656:	f000 fae9 	bl	8006c2c <load_tiempoAhorro2>
	    // waux = tempo1;//mov waux,tempo1;

fallas_j02:
		datled_clear();
 800665a:	f000 fdb9 	bl	80071d0 <datled_clear>
		//BitClear(datled,0);			//bres datled,#0
		//BitClear(datled,1);			//bres datled,#1;
		//wreg = 0x13;//mov wreg,#$13;
		wreg = 0x01;//mov wreg,#$01;
 800665e:	4b80      	ldr	r3, [pc, #512]	@ (8006860 <fallas+0x2b4>)
 8006660:	2201      	movs	r2, #1
 8006662:	701a      	strb	r2, [r3, #0]
		op_menu (waux,wreg);
 8006664:	4b7d      	ldr	r3, [pc, #500]	@ (800685c <fallas+0x2b0>)
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	4b7d      	ldr	r3, [pc, #500]	@ (8006860 <fallas+0x2b4>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	0019      	movs	r1, r3
 800666e:	0010      	movs	r0, r2
 8006670:	f000 fd94 	bl	800719c <op_menu>
		//datdig1 = waux;//mov datdig1,waux;
		//datdig2 = wreg;//mov datdig2,wreg;
fallas16:
		goto finfallas;//jp finfallas
 8006674:	e0df      	b.n	8006836 <fallas+0x28a>
	       	goto fallas16;//
 8006676:	46c0      	nop			@ (mov r8, r8)
		goto finfallas;//jp finfallas
 8006678:	e0dd      	b.n	8006836 <fallas+0x28a>
	    goto fallas20;//jra fallas20
 800667a:	46c0      	nop			@ (mov r8, r8)

fallas20:
		if(!trefst[f_hv]){//btjf trefst,#f_hv,fallas_j07;
 800667c:	4b73      	ldr	r3, [pc, #460]	@ (800684c <fallas+0x2a0>)
 800667e:	79db      	ldrb	r3, [r3, #7]
 8006680:	2201      	movs	r2, #1
 8006682:	4053      	eors	r3, r2
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <fallas+0xea>
			goto fallas_j07;
		}
		wreg_waux_conf(0x1F, 0x27, 1);
 800668a:	2201      	movs	r2, #1
 800668c:	2127      	movs	r1, #39	@ 0x27
 800668e:	201f      	movs	r0, #31
 8006690:	f000 fdac 	bl	80071ec <wreg_waux_conf>
 8006694:	e000      	b.n	8006698 <fallas+0xec>
			goto fallas_j07;
 8006696:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;//mov wreg,#$1F;			" "
		//waux = 0X27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j07:
		if(!trefst[f_lv]){//btjf trefst,#f_lv,fallas_j08
 8006698:	4b6c      	ldr	r3, [pc, #432]	@ (800684c <fallas+0x2a0>)
 800669a:	799b      	ldrb	r3, [r3, #6]
 800669c:	2201      	movs	r2, #1
 800669e:	4053      	eors	r3, r2
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <fallas+0x106>
			goto fallas_j08;
		}
		wreg_waux_conf(0x26, 0x27, 1);
 80066a6:	2201      	movs	r2, #1
 80066a8:	2127      	movs	r1, #39	@ 0x27
 80066aa:	2026      	movs	r0, #38	@ 0x26
 80066ac:	f000 fd9e 	bl	80071ec <wreg_waux_conf>
 80066b0:	e000      	b.n	80066b4 <fallas+0x108>
			goto fallas_j08;
 80066b2:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x26;//mov wreg,#$26;			"-"
		//waux = 0x27;//mov waux,#$27;			"U"
		//BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
fallas_j08:
		if(!trefst2[f_tvolt]){//btjf trefst2,#f_tvolt,fallas_j08b
 80066b4:	4b66      	ldr	r3, [pc, #408]	@ (8006850 <fallas+0x2a4>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2201      	movs	r2, #1
 80066ba:	4053      	eors	r3, r2
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <fallas+0x122>
			goto fallas_j08b;
		}
		wreg_waux_conf(0x0E, 0x2F, 0);
 80066c2:	2200      	movs	r2, #0
 80066c4:	212f      	movs	r1, #47	@ 0x2f
 80066c6:	200e      	movs	r0, #14
 80066c8:	f000 fd90 	bl	80071ec <wreg_waux_conf>
 80066cc:	e000      	b.n	80066d0 <fallas+0x124>
			goto fallas_j08b;
 80066ce:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0E;//mov wreg,#$0E;			"E"
		//waux = 0x2F;//mov waux,#$2F;			"u"
		//BitClear(flagsBuzzer,0);//bres	flagsBuzzer,#0
fallas_j08b:
		if(!flagsBattery[batON]){		//btjf flagsBattery,#batON,fallas_j08c
 80066d0:	4b60      	ldr	r3, [pc, #384]	@ (8006854 <fallas+0x2a8>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2201      	movs	r2, #1
 80066d6:	4053      	eors	r3, r2
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <fallas+0x13e>
			goto fallas_j08c;
		}
		wreg_waux_conf(0x0B, 0x0A, 1);
 80066de:	2201      	movs	r2, #1
 80066e0:	210a      	movs	r1, #10
 80066e2:	200b      	movs	r0, #11
 80066e4:	f000 fd82 	bl	80071ec <wreg_waux_conf>
 80066e8:	e000      	b.n	80066ec <fallas+0x140>
			goto fallas_j08c;
 80066ea:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x0B;//mov	wreg,#$0B;			"B"
		//waux = 0x0A;//mov	waux,#$0A;			"A"
		//BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
fallas_j08c:
		if(trefst[f_s4short]){//btjt trefst,#f_s4short,fallas_j01c
 80066ec:	4b57      	ldr	r3, [pc, #348]	@ (800684c <fallas+0x2a0>)
 80066ee:	795b      	ldrb	r3, [r3, #5]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d107      	bne.n	8006704 <fallas+0x158>
			goto fallas_j01c;
		}
		if(!trefst2[f_s4open]){//btjf trefst2,#f_s4open,fallas_j02c
 80066f4:	4b56      	ldr	r3, [pc, #344]	@ (8006850 <fallas+0x2a4>)
 80066f6:	79db      	ldrb	r3, [r3, #7]
 80066f8:	2201      	movs	r2, #1
 80066fa:	4053      	eors	r3, r2
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d107      	bne.n	8006712 <fallas+0x166>
			goto fallas_j02c;
		}
fallas_j01c:
 8006702:	e000      	b.n	8006706 <fallas+0x15a>
			goto fallas_j01c;
 8006704:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
        //wreg = 0x1F;//mov wreg,#$1F			" "
        //waux = 0x13;//mov	waux,#$13;		"H"
        //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x04, 1);
 8006706:	2201      	movs	r2, #1
 8006708:	2104      	movs	r1, #4
 800670a:	2013      	movs	r0, #19
 800670c:	f000 fd6e 	bl	80071ec <wreg_waux_conf>
 8006710:	e000      	b.n	8006714 <fallas+0x168>
			goto fallas_j02c;
 8006712:	46c0      	nop			@ (mov r8, r8)
//		mov			wreg,#$13;					"H"
//		mov			waux,#$04;
fallas_j02c:

		if(trefst2[f_s3short]){//btjt trefst2,#f_s3short,fallas_j01b
 8006714:	4b4e      	ldr	r3, [pc, #312]	@ (8006850 <fallas+0x2a4>)
 8006716:	791b      	ldrb	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d107      	bne.n	800672c <fallas+0x180>
	       	  goto fallas_j01b;
	    }
	    if(!trefst2[f_s3open]){//btjf trefst2,#f_s3open,fallas_j02b
 800671c:	4b4c      	ldr	r3, [pc, #304]	@ (8006850 <fallas+0x2a4>)
 800671e:	795b      	ldrb	r3, [r3, #5]
 8006720:	2201      	movs	r2, #1
 8006722:	4053      	eors	r3, r2
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d107      	bne.n	800673a <fallas+0x18e>
	       	  goto fallas_j02b;
	    }
fallas_j01b:
 800672a:	e000      	b.n	800672e <fallas+0x182>
	       	  goto fallas_j01b;
 800672c:	46c0      	nop			@ (mov r8, r8)
		//wreg_waux_conf(0x1F, 0x13, 1);
		//wreg = 0x1F;//mov wreg,#$1F;		" "
	    //waux = 0x13;//mov waux,#$13			"H"
	    //BitSet(flagsBuzzer, 0);//bset flagsBuzzer,#0
		wreg_waux_conf(0x13, 0x2, 1);
 800672e:	2201      	movs	r2, #1
 8006730:	2102      	movs	r1, #2
 8006732:	2013      	movs	r0, #19
 8006734:	f000 fd5a 	bl	80071ec <wreg_waux_conf>
 8006738:	e000      	b.n	800673c <fallas+0x190>
	       	  goto fallas_j02b;
 800673a:	46c0      	nop			@ (mov r8, r8)
fallas_j02b:
		if(trefst[f_sdc]){//btjt trefst,#f_sdc,fallas_j03
 800673c:	4b43      	ldr	r3, [pc, #268]	@ (800684c <fallas+0x2a0>)
 800673e:	789b      	ldrb	r3, [r3, #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d107      	bne.n	8006754 <fallas+0x1a8>
			goto fallas_j03;
		}
		if(!trefst[f_sda]){//btjf trefst,#f_sda,fallas_j04
 8006744:	4b41      	ldr	r3, [pc, #260]	@ (800684c <fallas+0x2a0>)
 8006746:	78db      	ldrb	r3, [r3, #3]
 8006748:	2201      	movs	r2, #1
 800674a:	4053      	eors	r3, r2
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <fallas+0x1b6>
			goto fallas_j04;
		}
fallas_j03:
 8006752:	e000      	b.n	8006756 <fallas+0x1aa>
			goto fallas_j03;
 8006754:	46c0      	nop			@ (mov r8, r8)
		 wreg_waux_conf(0x1F, 0X13, 1);
 8006756:	2201      	movs	r2, #1
 8006758:	2113      	movs	r1, #19
 800675a:	201f      	movs	r0, #31
 800675c:	f000 fd46 	bl	80071ec <wreg_waux_conf>
 8006760:	e000      	b.n	8006764 <fallas+0x1b8>
			goto fallas_j04;
 8006762:	46c0      	nop			@ (mov r8, r8)
	     //waux = 0X13;//			"H"
	     //BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04:

fallas_j05:
		if(!trefst[f_pa]){//btjf trefst,#f_pa,fallas_j06
 8006764:	4b39      	ldr	r3, [pc, #228]	@ (800684c <fallas+0x2a0>)
 8006766:	791b      	ldrb	r3, [r3, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	4053      	eors	r3, r2
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <fallas+0x1d2>
			goto fallas_j06;
		}
		wreg_waux_conf(0X1F, 0x1E, 1);
 8006772:	2201      	movs	r2, #1
 8006774:	211e      	movs	r1, #30
 8006776:	201f      	movs	r0, #31
 8006778:	f000 fd38 	bl	80071ec <wreg_waux_conf>
 800677c:	e000      	b.n	8006780 <fallas+0x1d4>
			goto fallas_j06;
 800677e:	46c0      	nop			@ (mov r8, r8)
	    //wreg = 0X1F;//		" "
	    //waux = 0x1E;//		"P"
	    //BitSet(flagsBuzzer, 0);//bset	flagsBuzzer,#0
fallas_j06:
		if(!trefst2[f_defi]){ //btjf trefst2,#f_defi,fallas_j06a
 8006780:	4b33      	ldr	r3, [pc, #204]	@ (8006850 <fallas+0x2a4>)
 8006782:	799b      	ldrb	r3, [r3, #6]
 8006784:	2201      	movs	r2, #1
 8006786:	4053      	eors	r3, r2
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <fallas+0x1ee>
			goto fallas_j06a;
		}
		wreg_waux_conf(0x1F, 0X0A, 1);
 800678e:	2201      	movs	r2, #1
 8006790:	210a      	movs	r1, #10
 8006792:	201f      	movs	r0, #31
 8006794:	f000 fd2a 	bl	80071ec <wreg_waux_conf>
 8006798:	e000      	b.n	800679c <fallas+0x1f0>
			goto fallas_j06a;
 800679a:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x1F;			//" "
		//waux = 0X0A;			//"A"
		//BitSet(flagsBuzzer,0); //bset	flagsBuzzer,#0
fallas_j06a:

		if(!trefst2[f_ambHi]){//btjf trefst2,#f_ambHi,fallas_j04b
 800679c:	4b2c      	ldr	r3, [pc, #176]	@ (8006850 <fallas+0x2a4>)
 800679e:	789b      	ldrb	r3, [r3, #2]
 80067a0:	2201      	movs	r2, #1
 80067a2:	4053      	eors	r3, r2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <fallas+0x20a>
			goto fallas_j04b;
		}
		wreg_waux_conf(0x20, 0x0C, 1);
 80067aa:	2201      	movs	r2, #1
 80067ac:	210c      	movs	r1, #12
 80067ae:	2020      	movs	r0, #32
 80067b0:	f000 fd1c 	bl	80071ec <wreg_waux_conf>
 80067b4:	e000      	b.n	80067b8 <fallas+0x20c>
			goto fallas_j04b;
 80067b6:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//		"t"
		//waux = 0x0C;//		"C"
		//BitSet(flagsBuzzer, 0); //bset	flagsBuzzer,#0
fallas_j04b:
		if(!trefst2[f_ambLo]){//btjf	trefst2,#f_ambLo,fallas_j04c
 80067b8:	4b25      	ldr	r3, [pc, #148]	@ (8006850 <fallas+0x2a4>)
 80067ba:	78db      	ldrb	r3, [r3, #3]
 80067bc:	2201      	movs	r2, #1
 80067be:	4053      	eors	r3, r2
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <fallas+0x226>
			goto fallas_j04c;
		}
		wreg_waux_conf(0x20, 0x0B, 1);
 80067c6:	2201      	movs	r2, #1
 80067c8:	210b      	movs	r1, #11
 80067ca:	2020      	movs	r0, #32
 80067cc:	f000 fd0e 	bl	80071ec <wreg_waux_conf>
 80067d0:	e000      	b.n	80067d4 <fallas+0x228>
			goto fallas_j04c;
 80067d2:	46c0      	nop			@ (mov r8, r8)
		//wreg = 0x20;//			"t"
		//waux = 0x0B;//			"b"
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0
fallas_j04c:

		if(!trefst2[f_co_ex]){ //btjf trefst2,#f_co_ex,fallas_j06b
 80067d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006850 <fallas+0x2a4>)
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2201      	movs	r2, #1
 80067da:	4053      	eors	r3, r2
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <fallas+0x242>
			goto fallas_j06b;
		}
		wreg_waux_conf(0x1F, 0X0C, 1);
 80067e2:	2201      	movs	r2, #1
 80067e4:	210c      	movs	r1, #12
 80067e6:	201f      	movs	r0, #31
 80067e8:	f000 fd00 	bl	80071ec <wreg_waux_conf>
 80067ec:	e000      	b.n	80067f0 <fallas+0x244>
			goto fallas_j06b;
 80067ee:	46c0      	nop			@ (mov r8, r8)
		//BitSet(flagsBuzzer, 0); //bset flagsBuzzer,#0

fallas_j06b:
	              //
parpadeo2:
		if(edorefri == 1 ){
 80067f0:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <fallas+0x298>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d00c      	beq.n	8006812 <fallas+0x266>
			goto parpadeo2a;
		}

		if((highByte(cntblkh) & Plantilla[nivDpyFail]) == 0){
 80067f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006864 <fallas+0x2b8>)
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	0a1b      	lsrs	r3, r3, #8
 80067fe:	b29b      	uxth	r3, r3
 8006800:	b2db      	uxtb	r3, r3
 8006802:	4a19      	ldr	r2, [pc, #100]	@ (8006868 <fallas+0x2bc>)
 8006804:	215a      	movs	r1, #90	@ 0x5a
 8006806:	5c52      	ldrb	r2, [r2, r1]
 8006808:	4013      	ands	r3, r2
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d111      	bne.n	8006834 <fallas+0x288>
			goto parpadeo2a;
 8006810:	e000      	b.n	8006814 <fallas+0x268>
			goto parpadeo2a;
 8006812:	46c0      	nop			@ (mov r8, r8)
		}
		goto finfallas;

parpadeo2a:

		goto fallas_j09; //jra	fallas_j09;
 8006814:	46c0      	nop			@ (mov r8, r8)
			goto fallas_j09;
		}
offdpy:   waux = 0x1F;
	      wreg = 0x1F;
fallas_j09:
		op_menu (wreg,waux);
 8006816:	4b12      	ldr	r3, [pc, #72]	@ (8006860 <fallas+0x2b4>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b10      	ldr	r3, [pc, #64]	@ (800685c <fallas+0x2b0>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	0019      	movs	r1, r3
 8006820:	0010      	movs	r0, r2
 8006822:	f000 fcbb 	bl	800719c <op_menu>
		//datdig1 = wreg;
		//datdig2 = waux;
								// ld      A,datled
								//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
		datled[0] = 0;			//	ld      datled,A
 8006826:	4b08      	ldr	r3, [pc, #32]	@ (8006848 <fallas+0x29c>)
 8006828:	2200      	movs	r2, #0
 800682a:	701a      	strb	r2, [r3, #0]
		datled[1] = 0;
 800682c:	4b06      	ldr	r3, [pc, #24]	@ (8006848 <fallas+0x29c>)
 800682e:	2200      	movs	r2, #0
 8006830:	705a      	strb	r2, [r3, #1]
 8006832:	e000      	b.n	8006836 <fallas+0x28a>
		goto finfallas;
 8006834:	46c0      	nop			@ (mov r8, r8)
finfallas:


}
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	0018      	movs	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	b002      	add	sp, #8
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000f98 	.word	0x20000f98
 8006844:	20000b98 	.word	0x20000b98
 8006848:	20000b90 	.word	0x20000b90
 800684c:	20000b88 	.word	0x20000b88
 8006850:	20000b80 	.word	0x20000b80
 8006854:	200010a8 	.word	0x200010a8
 8006858:	20000bd8 	.word	0x20000bd8
 800685c:	20000b54 	.word	0x20000b54
 8006860:	20000b55 	.word	0x20000b55
 8006864:	20000b4c 	.word	0x20000b4c
 8006868:	200000b8 	.word	0x200000b8

0800686c <offdpy>:
void offdpy (){				//	offdpy:
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
							//	mov			waux,#$1F;		/ Apaga los dígitos
							//	mov			wreg,#$1F;		/ Apaga los dígitos
							//	fallas_j09:		;mov			datdig1,waux;
							//					;mov			datdig2,waux;}
	op_menu (0x1F,0x1F);
 8006870:	211f      	movs	r1, #31
 8006872:	201f      	movs	r0, #31
 8006874:	f000 fc92 	bl	800719c <op_menu>
	//datdig2 = 0x1F;				//mov			datdig2,waux;
							//	ld      A,datled
							//	and		A,#$FC;0xBC;	/ Apaga el punto y el signo	 >> IJG JULIO 2012
	//datled &= 0xFC;			//	ld      datled,A
							//	finfallas:		ret ;
	datled[0]=0;
 8006878:	4b04      	ldr	r3, [pc, #16]	@ (800688c <offdpy+0x20>)
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
	datled[1]=0;
 800687e:	4b03      	ldr	r3, [pc, #12]	@ (800688c <offdpy+0x20>)
 8006880:	2200      	movs	r2, #0
 8006882:	705a      	strb	r2, [r3, #1]
}
 8006884:	46c0      	nop			@ (mov r8, r8)
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	46c0      	nop			@ (mov r8, r8)
 800688c:	20000b90 	.word	0x20000b90

08006890 <ram_reserved>:
//;	Para que esta rutina Funcione se debe pasar esta sección del Código a RAM.
//;	Debe trabajar en conjunto con la Funcion GRABA_EEPROM
//;=====================================================================
// Rutina completa Adaptada <<_RGM
//GRABA_FLASH_EEPR:
void ram_reserved(){
 8006890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006892:	b0a7      	sub	sp, #156	@ 0x9c
 8006894:	af00      	add	r7, sp, #0
sig_blocking:
		//CLR				cntByteLoaded												;	Borra el contador de bytes cargados
		//BSET			FLASH_CR2,#0												;	Habilita el block programming


		if( ProgMemCode != 0xAA){	//LD				A,ProgMemCode												;	Estamos en el modo bootloader??
 8006896:	4bd2      	ldr	r3, [pc, #840]	@ (8006be0 <ram_reserved+0x350>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2baa      	cmp	r3, #170	@ 0xaa
 800689c:	d000      	beq.n	80068a0 <ram_reserved+0x10>
 800689e:	e15c      	b.n	8006b5a <ram_reserved+0x2ca>
//					BTJF			FLASH_IAPSR,#1,MEM_FLASH_LOCKED			;	Si la Flash no esta desbloqueada entonces repite la llave
//					;JRA				MEM_UNLOCKED1												;	Si ya esta desbloqueada ve a grabar en la memoria
//


GRABA_FLASH:
 80068a0:	46c0      	nop			@ (mov r8, r8)

			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 80068a2:	4bd0      	ldr	r3, [pc, #832]	@ (8006be4 <ram_reserved+0x354>)
 80068a4:	0018      	movs	r0, r3
 80068a6:	f00f f8dd 	bl	8015a64 <HAL_IWDG_Refresh>
			// Para realizar una sobreescritura en la Flash, es necesario borrar la pagina antes
			// CGM 04/12/2024

			uint32_t VarAux_= (((uint32_t) dirPointer) - 0x8000000);
 80068aa:	4bcf      	ldr	r3, [pc, #828]	@ (8006be8 <ram_reserved+0x358>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	22f8      	movs	r2, #248	@ 0xf8
 80068b0:	0612      	lsls	r2, r2, #24
 80068b2:	4694      	mov	ip, r2
 80068b4:	4463      	add	r3, ip
 80068b6:	228c      	movs	r2, #140	@ 0x8c
 80068b8:	18b9      	adds	r1, r7, r2
 80068ba:	600b      	str	r3, [r1, #0]
			if(VarAux_ % 2048 == 0){
 80068bc:	18bb      	adds	r3, r7, r2
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	055b      	lsls	r3, r3, #21
 80068c2:	0d5b      	lsrs	r3, r3, #21
 80068c4:	d12f      	bne.n	8006926 <ram_reserved+0x96>
				uint32_t numberPage = VarAux_/2048; 		// Number the Page
 80068c6:	18bb      	adds	r3, r7, r2
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	0adb      	lsrs	r3, r3, #11
 80068cc:	2288      	movs	r2, #136	@ 0x88
 80068ce:	18b9      	adds	r1, r7, r2
 80068d0:	600b      	str	r3, [r1, #0]
				uint32_t Error_ = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
				FLASH_EraseInitTypeDef pEraseInit = {0};
 80068d6:	266c      	movs	r6, #108	@ 0x6c
 80068d8:	19bb      	adds	r3, r7, r6
 80068da:	0018      	movs	r0, r3
 80068dc:	2310      	movs	r3, #16
 80068de:	001a      	movs	r2, r3
 80068e0:	2100      	movs	r1, #0
 80068e2:	f014 fa3f 	bl	801ad64 <memset>
				pEraseInit.NbPages = 1;
 80068e6:	0031      	movs	r1, r6
 80068e8:	187a      	adds	r2, r7, r1
 80068ea:	2301      	movs	r3, #1
 80068ec:	60d3      	str	r3, [r2, #12]
				pEraseInit.Page = numberPage;
 80068ee:	187a      	adds	r2, r7, r1
 80068f0:	2388      	movs	r3, #136	@ 0x88
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6093      	str	r3, [r2, #8]
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80068f8:	187a      	adds	r2, r7, r1
 80068fa:	2302      	movs	r3, #2
 80068fc:	6013      	str	r3, [r2, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	f00c fb24 	bl	8012f4c <HAL_FLASH_Unlock>
 8006904:	1e03      	subs	r3, r0, #0
 8006906:	d1fb      	bne.n	8006900 <ram_reserved+0x70>
				HAL_FLASHEx_Erase(&pEraseInit,&Error_);		// Erase the Page
 8006908:	2314      	movs	r3, #20
 800690a:	2268      	movs	r2, #104	@ 0x68
 800690c:	189b      	adds	r3, r3, r2
 800690e:	19da      	adds	r2, r3, r7
 8006910:	236c      	movs	r3, #108	@ 0x6c
 8006912:	18fb      	adds	r3, r7, r3
 8006914:	0011      	movs	r1, r2
 8006916:	0018      	movs	r0, r3
 8006918:	f00c fbc6 	bl	80130a8 <HAL_FLASHEx_Erase>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 800691c:	46c0      	nop			@ (mov r8, r8)
 800691e:	f00c fb39 	bl	8012f94 <HAL_FLASH_Lock>
 8006922:	1e03      	subs	r3, r0, #0
 8006924:	d1fb      	bne.n	800691e <ram_reserved+0x8e>
			}
			AddressDestination = (uint64_t *) dirPointer;
 8006926:	4bb0      	ldr	r3, [pc, #704]	@ (8006be8 <ram_reserved+0x358>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2294      	movs	r2, #148	@ 0x94
 800692c:	18ba      	adds	r2, r7, r2
 800692e:	6013      	str	r3, [r2, #0]
			//while( HAL_FLASH_Unlock() !=  HAL_OK );
			// Graba 128 Bytes de FLASH
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006930:	232b      	movs	r3, #43	@ 0x2b
 8006932:	2268      	movs	r2, #104	@ 0x68
 8006934:	189b      	adds	r3, r3, r2
 8006936:	19da      	adds	r2, r3, r7
 8006938:	2300      	movs	r3, #0
 800693a:	7013      	strb	r3, [r2, #0]
 800693c:	e103      	b.n	8006b46 <ram_reserved+0x2b6>
			   	// Data = (uint32_t)(*dataPointer);

				Data  	 =  (uint64_t)(*dataPointer);						dataPointer++;
 800693e:	4bab      	ldr	r3, [pc, #684]	@ (8006bec <ram_reserved+0x35c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2680      	movs	r6, #128	@ 0x80
 8006946:	19ba      	adds	r2, r7, r6
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	2284      	movs	r2, #132	@ 0x84
 800694e:	18ba      	adds	r2, r7, r2
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	4ba6      	ldr	r3, [pc, #664]	@ (8006bec <ram_reserved+0x35c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	4ba4      	ldr	r3, [pc, #656]	@ (8006bec <ram_reserved+0x35c>)
 800695a:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer))	<<8;				dataPointer++;
 800695c:	4ba3      	ldr	r3, [pc, #652]	@ (8006bec <ram_reserved+0x35c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006964:	2300      	movs	r3, #0
 8006966:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006968:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800696a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800696c:	000b      	movs	r3, r1
 800696e:	0e1b      	lsrs	r3, r3, #24
 8006970:	0010      	movs	r0, r2
 8006972:	0200      	lsls	r0, r0, #8
 8006974:	6678      	str	r0, [r7, #100]	@ 0x64
 8006976:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8006978:	4318      	orrs	r0, r3
 800697a:	6678      	str	r0, [r7, #100]	@ 0x64
 800697c:	000b      	movs	r3, r1
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	663b      	str	r3, [r7, #96]	@ 0x60
 8006982:	19bb      	adds	r3, r7, r6
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800698a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800698c:	1812      	adds	r2, r2, r0
 800698e:	414b      	adcs	r3, r1
 8006990:	19b9      	adds	r1, r7, r6
 8006992:	600a      	str	r2, [r1, #0]
 8006994:	604b      	str	r3, [r1, #4]
 8006996:	4b95      	ldr	r3, [pc, #596]	@ (8006bec <ram_reserved+0x35c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	4b93      	ldr	r3, [pc, #588]	@ (8006bec <ram_reserved+0x35c>)
 800699e:	601a      	str	r2, [r3, #0]
				Data  	+= ((uint64_t)(*dataPointer)) 	<<16;				dataPointer++;
 80069a0:	4b92      	ldr	r3, [pc, #584]	@ (8006bec <ram_reserved+0x35c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a8:	2300      	movs	r3, #0
 80069aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069b0:	000b      	movs	r3, r1
 80069b2:	0c1b      	lsrs	r3, r3, #16
 80069b4:	0010      	movs	r0, r2
 80069b6:	0405      	lsls	r5, r0, #16
 80069b8:	431d      	orrs	r5, r3
 80069ba:	000b      	movs	r3, r1
 80069bc:	041c      	lsls	r4, r3, #16
 80069be:	19bb      	adds	r3, r7, r6
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	1912      	adds	r2, r2, r4
 80069c6:	416b      	adcs	r3, r5
 80069c8:	0030      	movs	r0, r6
 80069ca:	19b9      	adds	r1, r7, r6
 80069cc:	600a      	str	r2, [r1, #0]
 80069ce:	604b      	str	r3, [r1, #4]
 80069d0:	4b86      	ldr	r3, [pc, #536]	@ (8006bec <ram_reserved+0x35c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	4b85      	ldr	r3, [pc, #532]	@ (8006bec <ram_reserved+0x35c>)
 80069d8:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<24;			   	dataPointer++;
 80069da:	4b84      	ldr	r3, [pc, #528]	@ (8006bec <ram_reserved+0x35c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069e2:	2300      	movs	r3, #0
 80069e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ea:	0011      	movs	r1, r2
 80069ec:	0a09      	lsrs	r1, r1, #8
 80069ee:	6479      	str	r1, [r7, #68]	@ 0x44
 80069f0:	0013      	movs	r3, r2
 80069f2:	061b      	lsls	r3, r3, #24
 80069f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80069f6:	0006      	movs	r6, r0
 80069f8:	183b      	adds	r3, r7, r0
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006a00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a02:	1812      	adds	r2, r2, r0
 8006a04:	414b      	adcs	r3, r1
 8006a06:	0031      	movs	r1, r6
 8006a08:	1878      	adds	r0, r7, r1
 8006a0a:	6002      	str	r2, [r0, #0]
 8006a0c:	6043      	str	r3, [r0, #4]
 8006a0e:	4b77      	ldr	r3, [pc, #476]	@ (8006bec <ram_reserved+0x35c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	4b75      	ldr	r3, [pc, #468]	@ (8006bec <ram_reserved+0x35c>)
 8006a16:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<32;			   	dataPointer++;
 8006a18:	4b74      	ldr	r3, [pc, #464]	@ (8006bec <ram_reserved+0x35c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	001b      	movs	r3, r3
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a2e:	000e      	movs	r6, r1
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a3a:	1812      	adds	r2, r2, r0
 8006a3c:	414b      	adcs	r3, r1
 8006a3e:	0031      	movs	r1, r6
 8006a40:	1878      	adds	r0, r7, r1
 8006a42:	6002      	str	r2, [r0, #0]
 8006a44:	6043      	str	r3, [r0, #4]
 8006a46:	4b69      	ldr	r3, [pc, #420]	@ (8006bec <ram_reserved+0x35c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	4b67      	ldr	r3, [pc, #412]	@ (8006bec <ram_reserved+0x35c>)
 8006a4e:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<40;			   	dataPointer++;
 8006a50:	4b66      	ldr	r3, [pc, #408]	@ (8006bec <ram_reserved+0x35c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a58:	2300      	movs	r3, #0
 8006a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a62:	2300      	movs	r3, #0
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	000e      	movs	r6, r1
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	6a38      	ldr	r0, [r7, #32]
 8006a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a72:	1812      	adds	r2, r2, r0
 8006a74:	414b      	adcs	r3, r1
 8006a76:	0031      	movs	r1, r6
 8006a78:	1878      	adds	r0, r7, r1
 8006a7a:	6002      	str	r2, [r0, #0]
 8006a7c:	6043      	str	r3, [r0, #4]
 8006a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8006bec <ram_reserved+0x35c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	4b59      	ldr	r3, [pc, #356]	@ (8006bec <ram_reserved+0x35c>)
 8006a86:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<48;			   	dataPointer++;
 8006a88:	4b58      	ldr	r3, [pc, #352]	@ (8006bec <ram_reserved+0x35c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	000e      	movs	r6, r1
 8006aa0:	187b      	adds	r3, r7, r1
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	6938      	ldr	r0, [r7, #16]
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	1812      	adds	r2, r2, r0
 8006aac:	414b      	adcs	r3, r1
 8006aae:	0031      	movs	r1, r6
 8006ab0:	1878      	adds	r0, r7, r1
 8006ab2:	6002      	str	r2, [r0, #0]
 8006ab4:	6043      	str	r3, [r0, #4]
 8006ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8006bec <ram_reserved+0x35c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	4b4b      	ldr	r3, [pc, #300]	@ (8006bec <ram_reserved+0x35c>)
 8006abe:	601a      	str	r2, [r3, #0]
				Data	+= ((uint64_t)(*dataPointer))  	<<56;			   	dataPointer++;
 8006ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8006bec <ram_reserved+0x35c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	061b      	lsls	r3, r3, #24
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	000e      	movs	r6, r1
 8006ad8:	187b      	adds	r3, r7, r1
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	6838      	ldr	r0, [r7, #0]
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	1812      	adds	r2, r2, r0
 8006ae4:	414b      	adcs	r3, r1
 8006ae6:	19b9      	adds	r1, r7, r6
 8006ae8:	600a      	str	r2, [r1, #0]
 8006aea:	604b      	str	r3, [r1, #4]
 8006aec:	4b3f      	ldr	r3, [pc, #252]	@ (8006bec <ram_reserved+0x35c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	4b3e      	ldr	r3, [pc, #248]	@ (8006bec <ram_reserved+0x35c>)
 8006af4:	601a      	str	r2, [r3, #0]

				while( HAL_FLASH_Unlock() !=  HAL_OK );
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	f00c fa28 	bl	8012f4c <HAL_FLASH_Unlock>
 8006afc:	1e03      	subs	r3, r0, #0
 8006afe:	d1fb      	bne.n	8006af8 <ram_reserved+0x268>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t) AddressDestination, Data);
 8006b00:	2394      	movs	r3, #148	@ 0x94
 8006b02:	18fb      	adds	r3, r7, r3
 8006b04:	6819      	ldr	r1, [r3, #0]
 8006b06:	2380      	movs	r3, #128	@ 0x80
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2001      	movs	r0, #1
 8006b10:	f00c f9ce 	bl	8012eb0 <HAL_FLASH_Program>
				while( HAL_FLASH_Lock() !=  HAL_OK);
 8006b14:	46c0      	nop			@ (mov r8, r8)
 8006b16:	f00c fa3d 	bl	8012f94 <HAL_FLASH_Lock>
 8006b1a:	1e03      	subs	r3, r0, #0
 8006b1c:	d1fb      	bne.n	8006b16 <ram_reserved+0x286>
				AddressDestination++;
 8006b1e:	2294      	movs	r2, #148	@ 0x94
 8006b20:	18bb      	adds	r3, r7, r2
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	18ba      	adds	r2, r7, r2
 8006b28:	6013      	str	r3, [r2, #0]
				//if(AddressDestination>=0x801d000)
				//	break;
//				while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, AddressDestination, Data) !=  HAL_OK );		// HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			   	//dirPointer +=4;
				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
 8006b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8006be4 <ram_reserved+0x354>)
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f00e ff99 	bl	8015a64 <HAL_IWDG_Refresh>


				asm ("nop");
 8006b32:	46c0      	nop			@ (mov r8, r8)
			for(uint8_t i = 0; i < 16 ; i++ ){
 8006b34:	222b      	movs	r2, #43	@ 0x2b
 8006b36:	2168      	movs	r1, #104	@ 0x68
 8006b38:	1853      	adds	r3, r2, r1
 8006b3a:	19db      	adds	r3, r3, r7
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	1852      	adds	r2, r2, r1
 8006b40:	19d2      	adds	r2, r2, r7
 8006b42:	3301      	adds	r3, #1
 8006b44:	7013      	strb	r3, [r2, #0]
 8006b46:	232b      	movs	r3, #43	@ 0x2b
 8006b48:	2268      	movs	r2, #104	@ 0x68
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	19db      	adds	r3, r3, r7
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b0f      	cmp	r3, #15
 8006b52:	d800      	bhi.n	8006b56 <ram_reserved+0x2c6>
 8006b54:	e6f3      	b.n	800693e <ram_reserved+0xae>
//			LD				A,cntByteLoaded											;	Si el contador apuntador ya es 63 entonces espera a que la grabacion se ejecute
//			CP				A,#127															;	Si no entonces ve a cargar el siguiente dato
//			JRULE			GRABA_FLASH
//			;CP				A,#0															;	Si no entonces ve a cargar el siguiente dato
//			;JRNE			GRABA_FLASH
			asm ("nop");
 8006b56:	46c0      	nop			@ (mov r8, r8)
			goto	WAIT_FOR_GRAB_0;							//			JRA				WAIT_FOR_GRAB_0
 8006b58:	e039      	b.n	8006bce <ram_reserved+0x33e>
			goto PROG_eepr_mode;		//JRNE			PROG_eepr_mode											;	No, entonces programa la eeprom
 8006b5a:	46c0      	nop			@ (mov r8, r8)
//check_bit_enable:																											;	Si la EEPROM no esta desbloqueada entonces repite la llave
//												BTJF			FLASH_IAPSR,#3,PROG_eepr_mode
//MEM_UNLOCKED1:

GRABA_SIG:
			HAL_IWDG_Refresh( &hiwdg );				//MOV				IWDG_KR,#$AA
 8006b5c:	4b21      	ldr	r3, [pc, #132]	@ (8006be4 <ram_reserved+0x354>)
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f00e ff80 	bl	8015a64 <HAL_IWDG_Refresh>
//
//				dirPointer +=4;
//				HAL_IWDG_Refresh( &hiwdg );				// evita time out watch
//				asm ("nop");
//			}
			HAL_IWDG_Refresh( &hiwdg );
 8006b64:	4b1f      	ldr	r3, [pc, #124]	@ (8006be4 <ram_reserved+0x354>)
 8006b66:	0018      	movs	r0, r3
 8006b68:	f00e ff7c 	bl	8015a64 <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8006b6c:	232a      	movs	r3, #42	@ 0x2a
 8006b6e:	2268      	movs	r2, #104	@ 0x68
 8006b70:	189b      	adds	r3, r3, r2
 8006b72:	19db      	adds	r3, r3, r7
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	e020      	b.n	8006bbc <ram_reserved+0x32c>
				FlashManager((uint32_t)dirPointer, (uint32_t)*dataPointer);
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <ram_reserved+0x358>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	001a      	movs	r2, r3
 8006b80:	4b1a      	ldr	r3, [pc, #104]	@ (8006bec <ram_reserved+0x35c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	0019      	movs	r1, r3
 8006b88:	0010      	movs	r0, r2
 8006b8a:	f7fc f8d7 	bl	8002d3c <FlashManager>
				dataPointer++;
 8006b8e:	4b17      	ldr	r3, [pc, #92]	@ (8006bec <ram_reserved+0x35c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	4b15      	ldr	r3, [pc, #84]	@ (8006bec <ram_reserved+0x35c>)
 8006b96:	601a      	str	r2, [r3, #0]
				dirPointer++;
 8006b98:	4b13      	ldr	r3, [pc, #76]	@ (8006be8 <ram_reserved+0x358>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	4b12      	ldr	r3, [pc, #72]	@ (8006be8 <ram_reserved+0x358>)
 8006ba0:	601a      	str	r2, [r3, #0]
				HAL_IWDG_Refresh( &hiwdg );
 8006ba2:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <ram_reserved+0x354>)
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f00e ff5d 	bl	8015a64 <HAL_IWDG_Refresh>
			for(uint8_t i = 0; i < 128 ; i++){
 8006baa:	212a      	movs	r1, #42	@ 0x2a
 8006bac:	2068      	movs	r0, #104	@ 0x68
 8006bae:	180b      	adds	r3, r1, r0
 8006bb0:	19db      	adds	r3, r3, r7
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	180b      	adds	r3, r1, r0
 8006bb6:	19db      	adds	r3, r3, r7
 8006bb8:	3201      	adds	r2, #1
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	232a      	movs	r3, #42	@ 0x2a
 8006bbe:	2268      	movs	r2, #104	@ 0x68
 8006bc0:	189b      	adds	r3, r3, r2
 8006bc2:	19db      	adds	r3, r3, r7
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	b25b      	sxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dad6      	bge.n	8006b7a <ram_reserved+0x2ea>
			}



WAIT_FOR_GRAB_0:
 8006bcc:	46c0      	nop			@ (mov r8, r8)

WAIT_FOR_GRAB:
			HAL_IWDG_Refresh( &hiwdg );		//MOV				IWDG_KR,#$AA
 8006bce:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <ram_reserved+0x354>)
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f00e ff47 	bl	8015a64 <HAL_IWDG_Refresh>
		//HAL_FLASH_Lock();
		//HAL_FLASHEx_DATAEEPROM_Lock();
//		JP				Return_RAM													;	Devuelve la funcion a la ejecucion en el main Program
//GRABA_FLASH_EEPR_00:

}
 8006bd6:	46c0      	nop			@ (mov r8, r8)
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b027      	add	sp, #156	@ 0x9c
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	20000d8c 	.word	0x20000d8c
 8006be4:	2000054c 	.word	0x2000054c
 8006be8:	20000d90 	.word	0x20000d90
 8006bec:	20000d94 	.word	0x20000d94

08006bf0 <load_tiempoAhorro1>:
//----------------------------------------------------------------------------------------------
//;LN 7001 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro1(){
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
	uint16_t	foo = 0;
 8006bf6:	1dbb      	adds	r3, r7, #6
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	801a      	strh	r2, [r3, #0]
	foo= findLastValue((uint32_t) &eePlantilla[eetiempoAhorro1])*360;
 8006bfc:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <load_tiempoAhorro1+0x34>)
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7fc f80c 	bl	8002c1c <findLastValue>
 8006c04:	0003      	movs	r3, r0
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	1dbb      	adds	r3, r7, #6
 8006c0a:	21b4      	movs	r1, #180	@ 0xb4
 8006c0c:	0049      	lsls	r1, r1, #1
 8006c0e:	434a      	muls	r2, r1
 8006c10:	801a      	strh	r2, [r3, #0]
													//	ldw			Y,#360;		/ Número de segundos por hora (entre 10)
													//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
													//	call		mult1x2;		/ Multiplicalos
													//	mov			t_ahorro1_L,resull;
													//	mov			t_ahorro1_H,resulh;/ Carga el Tiempo total en segundos
	t_ahorro1_H = foo;							//	ret
 8006c12:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <load_tiempoAhorro1+0x38>)
 8006c14:	1dba      	adds	r2, r7, #6
 8006c16:	8812      	ldrh	r2, [r2, #0]
 8006c18:	801a      	strh	r2, [r3, #0]
}
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b002      	add	sp, #8
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	0803f06f 	.word	0x0803f06f
 8006c28:	20000c30 	.word	0x20000c30

08006c2c <load_tiempoAhorro2>:
//;LN 7020 --------------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void load_tiempoAhorro2(){
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
		uint16_t	foo = 0;
 8006c32:	1dbb      	adds	r3, r7, #6
 8006c34:	2200      	movs	r2, #0
 8006c36:	801a      	strh	r2, [r3, #0]
		foo= findLastValue((uint32_t) &eePlantilla[eetiempoAhorro2])*360;
 8006c38:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <load_tiempoAhorro2+0x34>)
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7fb ffee 	bl	8002c1c <findLastValue>
 8006c40:	0003      	movs	r3, r0
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	1dbb      	adds	r3, r7, #6
 8006c46:	21b4      	movs	r1, #180	@ 0xb4
 8006c48:	0049      	lsls	r1, r1, #1
 8006c4a:	434a      	muls	r2, r1
 8006c4c:	801a      	strh	r2, [r3, #0]
														//	ldw			Y,#360;		/ Número de segundos por hora  (entre 10)
														//	;ldw			Y,#30;#60;		/ Número de segundos por minuto (para prueba solamente)
														//	call		mult1x2;		/ Multiplicalos
														//	mov			t_ahorro2_L,resull;
														//	mov			t_ahorro2_H,resulh;/ Carga el Tiempo total en segundos
		t_ahorro2_H = foo;							//	ret ;
 8006c4e:	4b05      	ldr	r3, [pc, #20]	@ (8006c64 <load_tiempoAhorro2+0x38>)
 8006c50:	1dba      	adds	r2, r7, #6
 8006c52:	8812      	ldrh	r2, [r2, #0]
 8006c54:	801a      	strh	r2, [r3, #0]
}
 8006c56:	46c0      	nop			@ (mov r8, r8)
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b002      	add	sp, #8
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	0803f070 	.word	0x0803f070
 8006c64:	20000c32 	.word	0x20000c32

08006c68 <load_timeNoct>:

void load_timeNoct(){
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
	//cntNoct_H = eePlantilla[eetimeNoct] * 60;
	cntNoct_H = findLastValue((uint32_t) &eePlantilla[eetimeNoct])*60;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <load_timeNoct+0x20>)
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7fb ffd4 	bl	8002c1c <findLastValue>
 8006c74:	0003      	movs	r3, r0
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	223c      	movs	r2, #60	@ 0x3c
 8006c7a:	4353      	muls	r3, r2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	4b03      	ldr	r3, [pc, #12]	@ (8006c8c <load_timeNoct+0x24>)
 8006c80:	801a      	strh	r2, [r3, #0]
}
 8006c82:	46c0      	nop			@ (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	0803f04b 	.word	0x0803f04b
 8006c8c:	20000c44 	.word	0x20000c44

08006c90 <load_next_buffer>:
//;=====================================================================
//;	SUBRUTINA QUE CARGA EL BUFFER DE DATOS CON LOS DATOS DEL SIGUIENTE BLOQUE A GRABAR
//;
//;=====================================================================
//Rev_RGM: 06-NOV-2024_RGM
void load_next_buffer (void){
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

	point_Y = dirBuffer;							// apunta al buffer de datos en RAM
 8006c96:	4b16      	ldr	r3, [pc, #88]	@ (8006cf0 <load_next_buffer+0x60>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	603b      	str	r3, [r7, #0]
	STM8_16_X = cntBlockFlash * 128;
 8006c9c:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <load_next_buffer+0x64>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	01db      	lsls	r3, r3, #7
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	4b14      	ldr	r3, [pc, #80]	@ (8006cf8 <load_next_buffer+0x68>)
 8006ca6:	801a      	strh	r2, [r3, #0]
	point_X = &dirLogger[STM8_16_X];	//	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8006ca8:	4b14      	ldr	r3, [pc, #80]	@ (8006cfc <load_next_buffer+0x6c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a12      	ldr	r2, [pc, #72]	@ (8006cf8 <load_next_buffer+0x68>)
 8006cae:	8812      	ldrh	r2, [r2, #0]
 8006cb0:	189b      	adds	r3, r3, r2
 8006cb2:	607b      	str	r3, [r7, #4]
	wreg = 0;
 8006cb4:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <load_next_buffer+0x70>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
load_next_buffer_01:
	(*point_Y) = (*point_X);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	701a      	strb	r2, [r3, #0]
	point_X++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	607b      	str	r3, [r7, #4]
	point_Y++;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	603b      	str	r3, [r7, #0]
	wreg++;
 8006cce:	4b0c      	ldr	r3, [pc, #48]	@ (8006d00 <load_next_buffer+0x70>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <load_next_buffer+0x70>)
 8006cd8:	701a      	strb	r2, [r3, #0]
	if(wreg < 128){
 8006cda:	4b09      	ldr	r3, [pc, #36]	@ (8006d00 <load_next_buffer+0x70>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b25b      	sxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db00      	blt.n	8006ce6 <load_next_buffer+0x56>
		goto load_next_buffer_01;
 8006ce4:	e7e9      	b.n	8006cba <load_next_buffer+0x2a>
	}
    asm ("nop");
 8006ce6:	46c0      	nop			@ (mov r8, r8)
}
 8006ce8:	46c0      	nop			@ (mov r8, r8)
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b002      	add	sp, #8
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20000da4 	.word	0x20000da4
 8006cf4:	20000d9a 	.word	0x20000d9a
 8006cf8:	200008d2 	.word	0x200008d2
 8006cfc:	20000da0 	.word	0x20000da0
 8006d00:	20000b55 	.word	0x20000b55

08006d04 <save_cntReg>:
//;  (LogTiempo:9 x N Cantidad)   (LogEventos:14 x N Cantidad)
//  07-Nov-2024 RGM: Valor usado ????
// Rutina completa Adaptada <<_RGM_Funciona
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void	save_cntReg (){
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
		//		ldw		X,cntReg
		//		ldw		resulh,X

		uint32_t *point_X;
		point_X = (uint32_t *) (cntRegPNT);
 8006d0a:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <save_cntReg+0x64>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	607b      	str	r3, [r7, #4]

		waux = highByte(cntReg);			//		mov		waux,resulh;
 8006d10:	4b16      	ldr	r3, [pc, #88]	@ (8006d6c <save_cntReg+0x68>)
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	4b15      	ldr	r3, [pc, #84]	@ (8006d70 <save_cntReg+0x6c>)
 8006d1c:	701a      	strb	r2, [r3, #0]
		//		ldw		X,cntRegPNT;
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 8006d1e:	4b14      	ldr	r3, [pc, #80]	@ (8006d70 <save_cntReg+0x6c>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	001a      	movs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	0019      	movs	r1, r3
 8006d28:	0010      	movs	r0, r2
 8006d2a:	f000 fa23 	bl	8007174 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//  	MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006d2e:	4b11      	ldr	r3, [pc, #68]	@ (8006d74 <save_cntReg+0x70>)
 8006d30:	0018      	movs	r0, r3
 8006d32:	f00e fe97 	bl	8015a64 <HAL_IWDG_Refresh>
		//
		waux = lowByte(cntReg);		// 		mov		waux,resull;
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <save_cntReg+0x68>)
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <save_cntReg+0x6c>)
 8006d3e:	701a      	strb	r2, [r3, #0]
		point_X++;  // cntRegPNT++;						//		incw	X
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	607b      	str	r3, [r7, #4]
		wreeprom (waux, point_X);		//wreeprom (waux, cntRegPNT);			//		call	wreeprom;						/ ejecuta el grabado
 8006d46:	4b0a      	ldr	r3, [pc, #40]	@ (8006d70 <save_cntReg+0x6c>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	001a      	movs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	0019      	movs	r1, r3
 8006d50:	0010      	movs	r0, r2
 8006d52:	f000 fa0f 	bl	8007174 <wreeprom>
		HAL_IWDG_Refresh( &hiwdg );			//		MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006d56:	4b07      	ldr	r3, [pc, #28]	@ (8006d74 <save_cntReg+0x70>)
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f00e fe83 	bl	8015a64 <HAL_IWDG_Refresh>
		//
//		ret
}
 8006d5e:	46c0      	nop			@ (mov r8, r8)
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b002      	add	sp, #8
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	20001040 	.word	0x20001040
 8006d6c:	2000103e 	.word	0x2000103e
 8006d70:	20000b54 	.word	0x20000b54
 8006d74:	2000054c 	.word	0x2000054c

08006d78 <save_timeUNIX>:
//;=====================================================================
//;	SUBRUTINA QUE GRABA TIEMPO UNIX EN EEPROM
//;
//;=====================================================================
// Rutina completa Adaptada <<_RGM_Funciona
void save_timeUNIX (){
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0

	//	ldw		X,timeSeconds_HW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_HW);	//	mov		waux,resulh;
 8006d7c:	4b25      	ldr	r3, [pc, #148]	@ (8006e14 <save_timeUNIX+0x9c>)
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	0a1b      	lsrs	r3, r3, #8
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	4b24      	ldr	r3, [pc, #144]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006d88:	701a      	strb	r2, [r3, #0]
	//  ldw		X,#eeTimeUnix1;
	wreeprom (waux, &eeTimeUnix1);		//  call	wreeprom;				/ ejecuta el grabado
 8006d8a:	4b23      	ldr	r3, [pc, #140]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	001a      	movs	r2, r3
 8006d90:	4b22      	ldr	r3, [pc, #136]	@ (8006e1c <save_timeUNIX+0xa4>)
 8006d92:	0019      	movs	r1, r3
 8006d94:	0010      	movs	r0, r2
 8006d96:	f000 f9ed 	bl	8007174 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006d9a:	4b21      	ldr	r3, [pc, #132]	@ (8006e20 <save_timeUNIX+0xa8>)
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f00e fe61 	bl	8015a64 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_HW);		// mov		waux,resull;
 8006da2:	4b1c      	ldr	r3, [pc, #112]	@ (8006e14 <save_timeUNIX+0x9c>)
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006daa:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix2;
	wreeprom (waux, &eeTimeUnix2);		//  call	wreeprom;				/ ejecuta el grabado
 8006dac:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	001a      	movs	r2, r3
 8006db2:	4b1c      	ldr	r3, [pc, #112]	@ (8006e24 <save_timeUNIX+0xac>)
 8006db4:	0019      	movs	r1, r3
 8006db6:	0010      	movs	r0, r2
 8006db8:	f000 f9dc 	bl	8007174 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006dbc:	4b18      	ldr	r3, [pc, #96]	@ (8006e20 <save_timeUNIX+0xa8>)
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f00e fe50 	bl	8015a64 <HAL_IWDG_Refresh>


	//	ldw		X,timeSeconds_LW
	//	ldw		resulh,X

	waux = highByte(timeSeconds_LW);	//	mov		waux,resulh;
 8006dc4:	4b18      	ldr	r3, [pc, #96]	@ (8006e28 <save_timeUNIX+0xb0>)
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	0a1b      	lsrs	r3, r3, #8
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	4b12      	ldr	r3, [pc, #72]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006dd0:	701a      	strb	r2, [r3, #0]
	//	ldw		X,#eeTimeUnix3;
	wreeprom (waux, &eeTimeUnix3);		// call	wreeprom;					/ ejecuta el grabado
 8006dd2:	4b11      	ldr	r3, [pc, #68]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	001a      	movs	r2, r3
 8006dd8:	4b14      	ldr	r3, [pc, #80]	@ (8006e2c <save_timeUNIX+0xb4>)
 8006dda:	0019      	movs	r1, r3
 8006ddc:	0010      	movs	r0, r2
 8006dde:	f000 f9c9 	bl	8007174 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006de2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e20 <save_timeUNIX+0xa8>)
 8006de4:	0018      	movs	r0, r3
 8006de6:	f00e fe3d 	bl	8015a64 <HAL_IWDG_Refresh>

	waux = lowByte(timeSeconds_LW);		// mov		waux,resull;
 8006dea:	4b0f      	ldr	r3, [pc, #60]	@ (8006e28 <save_timeUNIX+0xb0>)
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006df2:	701a      	strb	r2, [r3, #0]
	// ldw		X,#eeTimeUnix4;
	wreeprom (waux, &eeTimeUnix4);   	// call	wreeprom;					/ ejecuta el grabado
 8006df4:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <save_timeUNIX+0xa0>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	001a      	movs	r2, r3
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <save_timeUNIX+0xb8>)
 8006dfc:	0019      	movs	r1, r3
 8006dfe:	0010      	movs	r0, r2
 8006e00:	f000 f9b8 	bl	8007174 <wreeprom>
	HAL_IWDG_Refresh( &hiwdg );			//  MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 8006e04:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <save_timeUNIX+0xa8>)
 8006e06:	0018      	movs	r0, r3
 8006e08:	f00e fe2c 	bl	8015a64 <HAL_IWDG_Refresh>

}
 8006e0c:	46c0      	nop			@ (mov r8, r8)
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	20000db0 	.word	0x20000db0
 8006e18:	20000b54 	.word	0x20000b54
 8006e1c:	0803f804 	.word	0x0803f804
 8006e20:	2000054c 	.word	0x2000054c
 8006e24:	0803f805 	.word	0x0803f805
 8006e28:	20000db2 	.word	0x20000db2
 8006e2c:	0803f806 	.word	0x0803f806
 8006e30:	0803f807 	.word	0x0803f807

08006e34 <buildChksumBloq>:
/*;=====================================================================
;	SUBRUTINA QUE calcula el checksum de un bloque
;	en X se apunta al inicio del bloque y waux contiene el tamaño del bloque
;=====================================================================*/
void buildChksumBloq (uint8_t *point_X , uint8_t waux){
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	000a      	movs	r2, r1
 8006e3e:	1cfb      	adds	r3, r7, #3
 8006e40:	701a      	strb	r2, [r3, #0]

	uint8_t A_STM8;
	while (waux){
 8006e42:	e011      	b.n	8006e68 <buildChksumBloq+0x34>
		A_STM8 = *point_X;
 8006e44:	210f      	movs	r1, #15
 8006e46:	187b      	adds	r3, r7, r1
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	701a      	strb	r2, [r3, #0]
		build_chksum(A_STM8);
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	0018      	movs	r0, r3
 8006e54:	f000 f860 	bl	8006f18 <build_chksum>
		*point_X++;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	607b      	str	r3, [r7, #4]
		waux--;
 8006e5e:	1cfb      	adds	r3, r7, #3
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	1cfb      	adds	r3, r7, #3
 8006e64:	3a01      	subs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
	while (waux){
 8006e68:	1cfb      	adds	r3, r7, #3
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e9      	bne.n	8006e44 <buildChksumBloq+0x10>
								ld		a,(X)
								ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido

*
*/
}
 8006e70:	46c0      	nop			@ (mov r8, r8)
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b004      	add	sp, #16
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <ld_alarmDelay>:
//;------ Adaptacion Completa C ---------------------------------------------------------------------------------------
void	ld_alarmDelay (){
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
	//Plantilla[alarmDelay]			/ Toma el tiempo de silencio de alarma en minutos
	//	ldw			X,#$003C;		/ Número de segundos por minuto
	silencioAlarmH = Plantilla[alarmDelay] *60; 	// Carga el tiempo que durara el deshielo en segundos
 8006e80:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <ld_alarmDelay+0x1c>)
 8006e82:	224e      	movs	r2, #78	@ 0x4e
 8006e84:	5c9b      	ldrb	r3, [r3, r2]
 8006e86:	001a      	movs	r2, r3
 8006e88:	233c      	movs	r3, #60	@ 0x3c
 8006e8a:	4353      	muls	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	4b03      	ldr	r3, [pc, #12]	@ (8006e9c <ld_alarmDelay+0x20>)
 8006e90:	801a      	strh	r2, [r3, #0]
}
 8006e92:	46c0      	nop			@ (mov r8, r8)
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	200000b8 	.word	0x200000b8
 8006e9c:	20000fa0 	.word	0x20000fa0

08006ea0 <clean_buffer>:
 * =====================================================================
 *	SUBRUTINA QUE LIMPIA EL BUFFER DE DATOS DE RAM
 * =====================================================================
 * CGM 26/11/2024
*/
void clean_buffer (){
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
	for(int i = 0; i<128; i++){
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	e007      	b.n	8006ebc <clean_buffer+0x1c>
		data_buffer[i] = 0 ;
 8006eac:	4a07      	ldr	r2, [pc, #28]	@ (8006ecc <clean_buffer+0x2c>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	18d3      	adds	r3, r2, r3
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<128; i++){
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec0:	ddf4      	ble.n	8006eac <clean_buffer+0xc>
	}
}
 8006ec2:	46c0      	nop			@ (mov r8, r8)
 8006ec4:	46c0      	nop			@ (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b002      	add	sp, #8
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000c8c 	.word	0x20000c8c

08006ed0 <copyVector>:

//;=====================================================================
//;	SUBRUTINA para copiar vectores X es la direccion de origen Y dirección de destino wreg tamaño del vecto
//;			CGM 26/11/2024
//;=====================================================================
void copyVector(uint8_t *srcX, uint8_t *dstY){
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	for(int i=0; i<wreg; i++){
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e00c      	b.n	8006efa <copyVector+0x2a>
		*dstY = *srcX;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	701a      	strb	r2, [r3, #0]
		srcX++;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3301      	adds	r3, #1
 8006eec:	607b      	str	r3, [r7, #4]
		dstY++;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	603b      	str	r3, [r7, #0]
	for(int i=0; i<wreg; i++){
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <copyVector+0x44>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	001a      	movs	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4293      	cmp	r3, r2
 8006f04:	dbec      	blt.n	8006ee0 <copyVector+0x10>
	}
	wreg = 0;
 8006f06:	4b03      	ldr	r3, [pc, #12]	@ (8006f14 <copyVector+0x44>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
}
 8006f0c:	46c0      	nop			@ (mov r8, r8)
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b004      	add	sp, #16
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000b55 	.word	0x20000b55

08006f18 <build_chksum>:
/*;=====================================================================
;	SUBRUTINA para calcular checksum. el dato debe estar en el acumulador
;
;=====================================================================*/
void build_chksum(uint8_t A_STM8){
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	0002      	movs	r2, r0
 8006f20:	1dfb      	adds	r3, r7, #7
 8006f22:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8006f24:	46c0      	nop			@ (mov r8, r8)
	// uint32_t A_STM8 = (uint32_t)(*point_Y);
    chksum_32_HW_LW = chksum_32_HW_LW +  (uint32_t)(A_STM8);
 8006f26:	1dfb      	adds	r3, r7, #7
 8006f28:	781a      	ldrb	r2, [r3, #0]
 8006f2a:	4b04      	ldr	r3, [pc, #16]	@ (8006f3c <build_chksum+0x24>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	18d2      	adds	r2, r2, r3
 8006f30:	4b02      	ldr	r3, [pc, #8]	@ (8006f3c <build_chksum+0x24>)
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	46c0      	nop			@ (mov r8, r8)
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b002      	add	sp, #8
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20000e34 	.word	0x20000e34

08006f40 <GRABA_BLOCK>:
//;=====================================================================
//;	SUBRUTINA QUE GUARDA LOS DATOS DEL PROGRAMA EN EEPROM
//;	Carga inicialmente el programa a la seccion de ram para ejecutarla
//;=====================================================================
// Rutina completa Adaptada <<_RGM
void GRABA_BLOCK(){
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0





		ram_reserved();		//JP				ram_reserved // DESCOMENTAR
 8006f44:	f7ff fca4 	bl	8006890 <ram_reserved>
Return_RAM:

}
 8006f48:	46c0      	nop			@ (mov r8, r8)
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <decword>:
//;LN 4676 --------------------------------------------------------------------------------------------------
//;Subrrutina que decrementa una palabra apuntada por x
//;  ----- _Rev STM32	CUBE IDE
void decword(uint16_t *decwreg_Reg){
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <decword+0x1c>
		(*decwreg_Reg)--;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	801a      	strh	r2, [r3, #0]
}
 8006f6a:	46c0      	nop			@ (mov r8, r8)
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	b002      	add	sp, #8
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <decwreg>:
//;Subrrutina que decrementa el registro wreg y si ya es cero se sale
//;..................................................completo
//;  ----- _Rev STM32	CUBE IDE
void decwreg(uint8_t *decwreg_Reg){
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
	if (*decwreg_Reg)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <decwreg+0x1c>
		(*decwreg_Reg)--;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	701a      	strb	r2, [r3, #0]
}
 8006f8e:	46c0      	nop			@ (mov r8, r8)
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b002      	add	sp, #8
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <buildmode>:
//;  ----- Manuel_Rev   ----------------------------------------------------------------------------------------------
//;  ----- _Rev STM32	CUBE IDE
void buildmode(){
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
			waux = 0;				//clr			waux;
 8006f9e:	4b40      	ldr	r3, [pc, #256]	@ (80070a0 <buildmode+0x108>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]

			if(latchtimeh != 0){
 8006fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80070a4 <buildmode+0x10c>)
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <buildmode+0x24>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
			}
			BitSet(waux,0);				//bset		waux,#0;0x01;		/ Si, indicalo
 8006fac:	4b3c      	ldr	r3, [pc, #240]	@ (80070a0 <buildmode+0x108>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80070a0 <buildmode+0x108>)
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e000      	b.n	8006fbe <buildmode+0x26>
				goto build10;			 //build10;		/ Ya terminó el tiempo del estado vigente?
 8006fbc:	46c0      	nop			@ (mov r8, r8)
build10:

			int16_t foo = 0;
 8006fbe:	1dbb      	adds	r3, r7, #6
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limambch_H]*256) + Plantilla[limambch_L];	//  manuel_math_change//						/ Temperatura ambiente para terminar deshielo
 8006fc4:	4b38      	ldr	r3, [pc, #224]	@ (80070a8 <buildmode+0x110>)
 8006fc6:	2223      	movs	r2, #35	@ 0x23
 8006fc8:	5c9b      	ldrb	r3, [r3, r2]
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4a36      	ldr	r2, [pc, #216]	@ (80070a8 <buildmode+0x110>)
 8006fd0:	2124      	movs	r1, #36	@ 0x24
 8006fd2:	5c52      	ldrb	r2, [r2, r1]
 8006fd4:	189b      	adds	r3, r3, r2
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	1dbb      	adds	r3, r7, #6
 8006fda:	801a      	strh	r2, [r3, #0]
			STM8_16_X = (tdevl*256) + tdevf;										//  manuel_math_change//
 8006fdc:	4b33      	ldr	r3, [pc, #204]	@ (80070ac <buildmode+0x114>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4a32      	ldr	r2, [pc, #200]	@ (80070b0 <buildmode+0x118>)
 8006fe6:	7812      	ldrb	r2, [r2, #0]
 8006fe8:	189b      	adds	r3, r3, r2
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	4b31      	ldr	r3, [pc, #196]	@ (80070b4 <buildmode+0x11c>)
 8006fee:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8006ff0:	4b30      	ldr	r3, [pc, #192]	@ (80070b4 <buildmode+0x11c>)
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b21b      	sxth	r3, r3
 8006ff6:	1dba      	adds	r2, r7, #6
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	5e52      	ldrsh	r2, [r2, r1]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	dc07      	bgt.n	8007010 <buildmode+0x78>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
			}
			BitSet(waux,1);				//bset		waux,#1;0x02;		/ No, Indicalo
 8007000:	4b27      	ldr	r3, [pc, #156]	@ (80070a0 <buildmode+0x108>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2202      	movs	r2, #2
 8007006:	4313      	orrs	r3, r2
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4b25      	ldr	r3, [pc, #148]	@ (80070a0 <buildmode+0x108>)
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e000      	b.n	8007012 <buildmode+0x7a>
				goto build20;				//JRSLT		build20;		/ Esta por debajo de la temperatura límite?
 8007010:	46c0      	nop			@ (mov r8, r8)

build20:

			if(Plantilla[numSens] == 1){
 8007012:	4b25      	ldr	r3, [pc, #148]	@ (80070a8 <buildmode+0x110>)
 8007014:	2259      	movs	r2, #89	@ 0x59
 8007016:	5c9b      	ldrb	r3, [r3, r2]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d025      	beq.n	8007068 <buildmode+0xd0>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
			}

			STM8_16_X = (teval*256) + tevaf;										 //  manuel_math_change//
 800701c:	4b26      	ldr	r3, [pc, #152]	@ (80070b8 <buildmode+0x120>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	b29b      	uxth	r3, r3
 8007024:	4a25      	ldr	r2, [pc, #148]	@ (80070bc <buildmode+0x124>)
 8007026:	7812      	ldrb	r2, [r2, #0]
 8007028:	189b      	adds	r3, r3, r2
 800702a:	b29a      	uxth	r2, r3
 800702c:	4b21      	ldr	r3, [pc, #132]	@ (80070b4 <buildmode+0x11c>)
 800702e:	801a      	strh	r2, [r3, #0]
			foo = (Plantilla[limevach_H]*256) + Plantilla[limevach_L];	//  manuel_math_change// / Temperatura de evaporador para terminar deshielo
 8007030:	4b1d      	ldr	r3, [pc, #116]	@ (80070a8 <buildmode+0x110>)
 8007032:	2221      	movs	r2, #33	@ 0x21
 8007034:	5c9b      	ldrb	r3, [r3, r2]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	b29b      	uxth	r3, r3
 800703a:	4a1b      	ldr	r2, [pc, #108]	@ (80070a8 <buildmode+0x110>)
 800703c:	2122      	movs	r1, #34	@ 0x22
 800703e:	5c52      	ldrb	r2, [r2, r1]
 8007040:	189b      	adds	r3, r3, r2
 8007042:	b29a      	uxth	r2, r3
 8007044:	1dbb      	adds	r3, r7, #6
 8007046:	801a      	strh	r2, [r3, #0]
			if( (int16_t)STM8_16_X < (int16_t)foo ){
 8007048:	4b1a      	ldr	r3, [pc, #104]	@ (80070b4 <buildmode+0x11c>)
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b21b      	sxth	r3, r3
 800704e:	1dba      	adds	r2, r7, #6
 8007050:	2100      	movs	r1, #0
 8007052:	5e52      	ldrsh	r2, [r2, r1]
 8007054:	429a      	cmp	r2, r3
 8007056:	dc09      	bgt.n	800706c <buildmode+0xd4>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
			}
			BitSet(waux,4);						//bset 		waux,#4;0x10;		/ No, Indicalo
 8007058:	4b11      	ldr	r3, [pc, #68]	@ (80070a0 <buildmode+0x108>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2210      	movs	r2, #16
 800705e:	4313      	orrs	r3, r2
 8007060:	b2da      	uxtb	r2, r3
 8007062:	4b0f      	ldr	r3, [pc, #60]	@ (80070a0 <buildmode+0x108>)
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e002      	b.n	800706e <buildmode+0xd6>
				goto	build30;				//	jreq		build30; 				 / Si el número de sensores con el que trabaja es 1, no preguntes por temperatura evaporador
 8007068:	46c0      	nop			@ (mov r8, r8)
 800706a:	e000      	b.n	800706e <buildmode+0xd6>
				goto build30;				//JRSLT		build30;		/ La temperatura del evaporador es menor que el límite esperado?
 800706c:	46c0      	nop			@ (mov r8, r8)

build30:
			if(!flagsa[arran]){//if(!GetRegFlagState(flagsa, arran)){
 800706e:	4b14      	ldr	r3, [pc, #80]	@ (80070c0 <buildmode+0x128>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2201      	movs	r2, #1
 8007074:	4053      	eors	r3, r2
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d108      	bne.n	800708e <buildmode+0xf6>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
			}
			BitSet(waux,7);						//bset		waux,#7;0x80;		/ Si, indícalo
 800707c:	4b08      	ldr	r3, [pc, #32]	@ (80070a0 <buildmode+0x108>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2280      	movs	r2, #128	@ 0x80
 8007082:	4252      	negs	r2, r2
 8007084:	4313      	orrs	r3, r2
 8007086:	b2da      	uxtb	r2, r3
 8007088:	4b05      	ldr	r3, [pc, #20]	@ (80070a0 <buildmode+0x108>)
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e000      	b.n	8007090 <buildmode+0xf8>
				goto	buildmode_j00;			//buildmode_j00;	/ Esta en período de arranque?
 800708e:	46c0      	nop			@ (mov r8, r8)
buildmode_j00:
finbuild:	modo = waux;						//mov			modo,waux ;		/ Entrega el nuevo modo de cambio
 8007090:	4b03      	ldr	r3, [pc, #12]	@ (80070a0 <buildmode+0x108>)
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <buildmode+0x12c>)
 8007096:	701a      	strb	r2, [r3, #0]

}
 8007098:	46c0      	nop			@ (mov r8, r8)
 800709a:	46bd      	mov	sp, r7
 800709c:	b002      	add	sp, #8
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20000b54 	.word	0x20000b54
 80070a4:	20000bba 	.word	0x20000bba
 80070a8:	200000b8 	.word	0x200000b8
 80070ac:	20000bb0 	.word	0x20000bb0
 80070b0:	20000bb1 	.word	0x20000bb1
 80070b4:	200008d2 	.word	0x200008d2
 80070b8:	20000bb2 	.word	0x20000bb2
 80070bc:	20000bb3 	.word	0x20000bb3
 80070c0:	20000b78 	.word	0x20000b78
 80070c4:	20000b52 	.word	0x20000b52

080070c8 <memodriver>:
//;Rutina que carga los datos contanidos en la EEPROM hacia la RAM, ó graba los datos de la RAM hacia
//;la EEPROM, dependiendo del registro de control cltmemo. Para mandar a grabar se hace ctlmemo=0xAA
//;Hace un movimiento cada 1/64 s
//;  ----- Manuel_Rev
//;..................................................
void memodriver  (){
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0

			uint8_t *point_Y = &Plantilla[dato_seg1];			// Apunta al inicio de la plantilla en RAM
 80070ce:	4b24      	ldr	r3, [pc, #144]	@ (8007160 <memodriver+0x98>)
 80070d0:	607b      	str	r3, [r7, #4]
			uint8_t *point_X = &eePlantilla[eedato_seg1];		// Apunta al inicio de la  eeprom
 80070d2:	4b24      	ldr	r3, [pc, #144]	@ (8007164 <memodriver+0x9c>)
 80070d4:	603b      	str	r3, [r7, #0]

			if(ctlmemo != 0xAA){							// No, carga los datos de la EEPROM a la RAM
 80070d6:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <memodriver+0xa0>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2baa      	cmp	r3, #170	@ 0xaa
 80070dc:	d115      	bne.n	800710a <memodriver+0x42>
				goto  loaddat;
			}
grabmemo:
 80070de:	46c0      	nop			@ (mov r8, r8)
			if(cntmemo==Plantilla[dato_seg1]){
 80070e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007160 <memodriver+0x98>)
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	4b21      	ldr	r3, [pc, #132]	@ (800716c <memodriver+0xa4>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d020      	beq.n	800712e <memodriver+0x66>
				goto nextdat;
			}
			wreeprom(copiaPlantilla[cntmemo],&eePlantilla[cntmemo]);
 80070ec:	4b1f      	ldr	r3, [pc, #124]	@ (800716c <memodriver+0xa4>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	001a      	movs	r2, r3
 80070f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007170 <memodriver+0xa8>)
 80070f4:	5c9b      	ldrb	r3, [r3, r2]
 80070f6:	0018      	movs	r0, r3
 80070f8:	4b1c      	ldr	r3, [pc, #112]	@ (800716c <memodriver+0xa4>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	001a      	movs	r2, r3
 80070fe:	4b19      	ldr	r3, [pc, #100]	@ (8007164 <memodriver+0x9c>)
 8007100:	18d3      	adds	r3, r2, r3
 8007102:	0019      	movs	r1, r3
 8007104:	f000 f836 	bl	8007174 <wreeprom>
			goto nextdat;
 8007108:	e012      	b.n	8007130 <memodriver+0x68>
				goto  loaddat;
 800710a:	46c0      	nop			@ (mov r8, r8)

loaddat:
			//call		rdeeprom;								// Toma el dato de la EEPROM
			//point_Y[cntmemo] = point_X[cntmemo]; 				// y cargalo a la RAM
			point_Y[cntmemo] = findLastValue((uint32_t)&eePlantilla[cntmemo]);
 800710c:	4b17      	ldr	r3, [pc, #92]	@ (800716c <memodriver+0xa4>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	001a      	movs	r2, r3
 8007112:	4b14      	ldr	r3, [pc, #80]	@ (8007164 <memodriver+0x9c>)
 8007114:	18d3      	adds	r3, r2, r3
 8007116:	0018      	movs	r0, r3
 8007118:	f7fb fd80 	bl	8002c1c <findLastValue>
 800711c:	0001      	movs	r1, r0
 800711e:	4b13      	ldr	r3, [pc, #76]	@ (800716c <memodriver+0xa4>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	001a      	movs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	189b      	adds	r3, r3, r2
 8007128:	b2ca      	uxtb	r2, r1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e000      	b.n	8007130 <memodriver+0x68>
				goto nextdat;
 800712e:	46c0      	nop			@ (mov r8, r8)
nextdat:	cntmemo++;							// Para apuntar al siguiente dato
 8007130:	4b0e      	ldr	r3, [pc, #56]	@ (800716c <memodriver+0xa4>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	b2da      	uxtb	r2, r3
 8007138:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <memodriver+0xa4>)
 800713a:	701a      	strb	r2, [r3, #0]
			if(cntmemo < Fam_ID){
 800713c:	4b0b      	ldr	r3, [pc, #44]	@ (800716c <memodriver+0xa4>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b25b      	sxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	da06      	bge.n	8007154 <memodriver+0x8c>
				goto finmemodr;
			}
			ctlmemo = 0;		//clr		 	ctlmemo ;		/ Deten la grabación de datos
 8007146:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <memodriver+0xa0>)
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
firstdat:	cntmemo = 0;			//clr		 	cntmemo;			/ Si, reinicia el contador
 800714c:	4b07      	ldr	r3, [pc, #28]	@ (800716c <memodriver+0xa4>)
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]

finmemodr:

}
 8007152:	e000      	b.n	8007156 <memodriver+0x8e>
				goto finmemodr;
 8007154:	46c0      	nop			@ (mov r8, r8)
}
 8007156:	46c0      	nop			@ (mov r8, r8)
 8007158:	46bd      	mov	sp, r7
 800715a:	b002      	add	sp, #8
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			@ (mov r8, r8)
 8007160:	200000b8 	.word	0x200000b8
 8007164:	0803f000 	.word	0x0803f000
 8007168:	20000c63 	.word	0x20000c63
 800716c:	20000c64 	.word	0x20000c64
 8007170:	20000138 	.word	0x20000138

08007174 <wreeprom>:
//;LN 4822 --------------------------------------------------------------------------------------------------
//;Rutina para escritura de la memoria EEPROM
//;En wreg debe venir la dirección en donde se desea grabar y en waux el dato a grabar
//;  ----- _Rev STM32	CUBE IDE
void wreeprom (uint8_t Data8bit, uint32_t AddressDestination) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	0002      	movs	r2, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	1dfb      	adds	r3, r7, #7
 8007180:	701a      	strb	r2, [r3, #0]
	uint32_t Data;
	Data = (uint32_t) Data8bit;
 8007182:	1dfb      	adds	r3, r7, #7
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]

//	while( HAL_FLASHEx_DATAEEPROM_Unlock() != HAL_OK);
//	while(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data) != HAL_OK);
//	HAL_FLASHEx_DATAEEPROM_Lock();
	FlashManager((uint32_t)AddressDestination, (uint32_t)Data);
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	0011      	movs	r1, r2
 800718e:	0018      	movs	r0, r3
 8007190:	f7fb fdd4 	bl	8002d3c <FlashManager>
}
 8007194:	46c0      	nop			@ (mov r8, r8)
 8007196:	46bd      	mov	sp, r7
 8007198:	b004      	add	sp, #16
 800719a:	bd80      	pop	{r7, pc}

0800719c <op_menu>:

void op_menu (uint8_t dig1, uint8_t dig2)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	0002      	movs	r2, r0
 80071a4:	1dfb      	adds	r3, r7, #7
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	1dbb      	adds	r3, r7, #6
 80071aa:	1c0a      	adds	r2, r1, #0
 80071ac:	701a      	strb	r2, [r3, #0]
	datdig1 = dig1;
 80071ae:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <op_menu+0x2c>)
 80071b0:	1dfa      	adds	r2, r7, #7
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	701a      	strb	r2, [r3, #0]
	datdig2 = dig2;
 80071b6:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <op_menu+0x30>)
 80071b8:	1dba      	adds	r2, r7, #6
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	701a      	strb	r2, [r3, #0]
}
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b002      	add	sp, #8
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	46c0      	nop			@ (mov r8, r8)
 80071c8:	20000b51 	.word	0x20000b51
 80071cc:	20000b50 	.word	0x20000b50

080071d0 <datled_clear>:

void datled_clear()
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
	datled[0] = 0;//BitClear(datled,0);//bres datled,#0; / apaga el punto
 80071d4:	4b04      	ldr	r3, [pc, #16]	@ (80071e8 <datled_clear+0x18>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]
	datled[1] = 0;//BitClear(datled,1);//bres datled,#1; / apaga el signo
 80071da:	4b03      	ldr	r3, [pc, #12]	@ (80071e8 <datled_clear+0x18>)
 80071dc:	2200      	movs	r2, #0
 80071de:	705a      	strb	r2, [r3, #1]
}
 80071e0:	46c0      	nop			@ (mov r8, r8)
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	20000b90 	.word	0x20000b90

080071ec <wreg_waux_conf>:

void wreg_waux_conf(uint8_t wreg_1, uint8_t waux_2, _Bool cambio_rutina)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	0004      	movs	r4, r0
 80071f4:	0008      	movs	r0, r1
 80071f6:	0011      	movs	r1, r2
 80071f8:	1dfb      	adds	r3, r7, #7
 80071fa:	1c22      	adds	r2, r4, #0
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	1dbb      	adds	r3, r7, #6
 8007200:	1c02      	adds	r2, r0, #0
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	1d7b      	adds	r3, r7, #5
 8007206:	1c0a      	adds	r2, r1, #0
 8007208:	701a      	strb	r2, [r3, #0]
	wreg = wreg_1;//mov wreg,#$1F;			" "
 800720a:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <wreg_waux_conf+0x4c>)
 800720c:	1dfa      	adds	r2, r7, #7
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	701a      	strb	r2, [r3, #0]
	waux = waux_2;//mov waux,#$27;			"U"
 8007212:	4b0a      	ldr	r3, [pc, #40]	@ (800723c <wreg_waux_conf+0x50>)
 8007214:	1dba      	adds	r2, r7, #6
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	701a      	strb	r2, [r3, #0]
	if(cambio_rutina)
 800721a:	1d7b      	adds	r3, r7, #5
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <wreg_waux_conf+0x3e>
		flagsBuzzer[0]=1;	// BitSet(flagsBuzzer,0);//bset flagsBuzzer,#0
 8007222:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <wreg_waux_conf+0x54>)
 8007224:	2201      	movs	r2, #1
 8007226:	701a      	strb	r2, [r3, #0]
	else
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
}
 8007228:	e002      	b.n	8007230 <wreg_waux_conf+0x44>
		flagsBuzzer[0]=0;	// BitClear(flagsBuzzer,0);//bset flagsBuzzer,#0
 800722a:	4b05      	ldr	r3, [pc, #20]	@ (8007240 <wreg_waux_conf+0x54>)
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
}
 8007230:	46c0      	nop			@ (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	b003      	add	sp, #12
 8007236:	bd90      	pop	{r4, r7, pc}
 8007238:	20000b55 	.word	0x20000b55
 800723c:	20000b54 	.word	0x20000b54
 8007240:	20000f98 	.word	0x20000f98

08007244 <opc_nv>:


void opc_nv (uint16_t p_dato, uint16_t s_dato, uint16_t t_dato, uint8_t c_dato, uint8_t q_dato)
{
 8007244:	b5b0      	push	{r4, r5, r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	0005      	movs	r5, r0
 800724c:	000c      	movs	r4, r1
 800724e:	0010      	movs	r0, r2
 8007250:	0019      	movs	r1, r3
 8007252:	1dbb      	adds	r3, r7, #6
 8007254:	1c2a      	adds	r2, r5, #0
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	1d3b      	adds	r3, r7, #4
 800725a:	1c22      	adds	r2, r4, #0
 800725c:	801a      	strh	r2, [r3, #0]
 800725e:	1cbb      	adds	r3, r7, #2
 8007260:	1c02      	adds	r2, r0, #0
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	1c7b      	adds	r3, r7, #1
 8007266:	1c0a      	adds	r2, r1, #0
 8007268:	701a      	strb	r2, [r3, #0]

	lmt_up_w = p_dato;
 800726a:	4b14      	ldr	r3, [pc, #80]	@ (80072bc <opc_nv+0x78>)
 800726c:	1dba      	adds	r2, r7, #6
 800726e:	8812      	ldrh	r2, [r2, #0]
 8007270:	801a      	strh	r2, [r3, #0]
	//ldw X,crngmin_w
	//ldw lmt_dw_w,X
	lmt_dw_w = s_dato;
 8007272:	4b13      	ldr	r3, [pc, #76]	@ (80072c0 <opc_nv+0x7c>)
 8007274:	1d3a      	adds	r2, r7, #4
 8007276:	8812      	ldrh	r2, [r2, #0]
 8007278:	801a      	strh	r2, [r3, #0]

	STM8_16_X = t_dato;
 800727a:	4b12      	ldr	r3, [pc, #72]	@ (80072c4 <opc_nv+0x80>)
 800727c:	1cba      	adds	r2, r7, #2
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	801a      	strh	r2, [r3, #0]
	md_signfrac_math();		//call md_signfrac_math
 8007282:	f7fe fe29 	bl	8005ed8 <md_signfrac_math>
	copiaPlantilla[c_dato] =	  highByte(STM8_16_X);
 8007286:	4b0f      	ldr	r3, [pc, #60]	@ (80072c4 <opc_nv+0x80>)
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	0a1b      	lsrs	r3, r3, #8
 800728c:	b29a      	uxth	r2, r3
 800728e:	1c7b      	adds	r3, r7, #1
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b2d1      	uxtb	r1, r2
 8007294:	4a0c      	ldr	r2, [pc, #48]	@ (80072c8 <opc_nv+0x84>)
 8007296:	54d1      	strb	r1, [r2, r3]
	copiaPlantilla[q_dato] =      lowByte(STM8_16_X);
 8007298:	4b0a      	ldr	r3, [pc, #40]	@ (80072c4 <opc_nv+0x80>)
 800729a:	881a      	ldrh	r2, [r3, #0]
 800729c:	2318      	movs	r3, #24
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	b2d1      	uxtb	r1, r2
 80072a4:	4a08      	ldr	r2, [pc, #32]	@ (80072c8 <opc_nv+0x84>)
 80072a6:	54d1      	strb	r1, [r2, r3]
	convadec_math(STM8_16_X);		//call convadec_math
 80072a8:	4b06      	ldr	r3, [pc, #24]	@ (80072c4 <opc_nv+0x80>)
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	0018      	movs	r0, r3
 80072ae:	f7ff f807 	bl	80062c0 <convadec_math>

}
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b002      	add	sp, #8
 80072b8:	bdb0      	pop	{r4, r5, r7, pc}
 80072ba:	46c0      	nop			@ (mov r8, r8)
 80072bc:	20000c02 	.word	0x20000c02
 80072c0:	20000c04 	.word	0x20000c04
 80072c4:	200008d2 	.word	0x200008d2
 80072c8:	20000138 	.word	0x20000138

080072cc <comunicacion>:
uint8_t aTxBuffer[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
uint8_t aRxBuffer[sizeRxBuffer]; 		// Recepcion de Datos

// 26-Ago-2024		uint8_t ADCresult[] = {0x07,0x00,0x00,0xFF,0x00,0x00,0x08};
//*************************************************************************************************
void comunicacion(void){
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0

		/* Buffer used for transmission */
		//************************************************************************************************************

		// Prueba de trasnmision I2C
		Cnt_EspComu--;
 80072d2:	4b79      	ldr	r3, [pc, #484]	@ (80074b8 <comunicacion+0x1ec>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	4b77      	ldr	r3, [pc, #476]	@ (80074b8 <comunicacion+0x1ec>)
 80072dc:	701a      	strb	r2, [r3, #0]
		if(Cnt_EspComu == 255){
 80072de:	4b76      	ldr	r3, [pc, #472]	@ (80074b8 <comunicacion+0x1ec>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2bff      	cmp	r3, #255	@ 0xff
 80072e4:	d103      	bne.n	80072ee <comunicacion+0x22>
			portX[dp_sw] = 0;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80072e6:	4b75      	ldr	r3, [pc, #468]	@ (80074bc <comunicacion+0x1f0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 80072ec:	e0dd      	b.n	80074aa <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 254){
 80072ee:	4b72      	ldr	r3, [pc, #456]	@ (80074b8 <comunicacion+0x1ec>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80072f4:	d103      	bne.n	80072fe <comunicacion+0x32>
			portX[dp_sw] = 1;		//	HAL_GPIO_WritePin(GPIOC, PFULLDEF_dp_sw, GPIO_PIN_SET);      //02-Jul-2024:  Enciende display
 80072f6:	4b71      	ldr	r3, [pc, #452]	@ (80074bc <comunicacion+0x1f0>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	705a      	strb	r2, [r3, #1]
			//MX_I2C1_Init();
			goto fin_comu;
 80072fc:	e0d5      	b.n	80074aa <comunicacion+0x1de>
		}
		if(Cnt_EspComu == 0){
 80072fe:	4b6e      	ldr	r3, [pc, #440]	@ (80074b8 <comunicacion+0x1ec>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d000      	beq.n	8007308 <comunicacion+0x3c>
 8007306:	e0cd      	b.n	80074a4 <comunicacion+0x1d8>
			goto comu_01;
 8007308:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_comu;

comu_01:
			Cnt_EspComu = 5;
 800730a:	4b6b      	ldr	r3, [pc, #428]	@ (80074b8 <comunicacion+0x1ec>)
 800730c:	2205      	movs	r2, #5
 800730e:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY){
 8007310:	4b6b      	ldr	r3, [pc, #428]	@ (80074c0 <comunicacion+0x1f4>)
 8007312:	0018      	movs	r0, r3
 8007314:	f00c fdf7 	bl	8013f06 <HAL_I2C_GetState>
 8007318:	0003      	movs	r3, r0
 800731a:	2b20      	cmp	r3, #32
 800731c:	d000      	beq.n	8007320 <comunicacion+0x54>
 800731e:	e0ae      	b.n	800747e <comunicacion+0x1b2>
				countResetI2C = 0;
 8007320:	4b68      	ldr	r3, [pc, #416]	@ (80074c4 <comunicacion+0x1f8>)
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
    	      //Cnt_EspComu = 5;
			  // Se agrega una variable extra debido a que aun sigue en uso el chksum para el envio de Logger 08/01/2025 CGM
				uint32_t chksum_32_HW_LW_AUX = chksum_32_HW_LW;
 8007326:	4b68      	ldr	r3, [pc, #416]	@ (80074c8 <comunicacion+0x1fc>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60bb      	str	r3, [r7, #8]
    		  chksum_32_HW_LW = 0;					// limpia registros de checksum
 800732c:	4b66      	ldr	r3, [pc, #408]	@ (80074c8 <comunicacion+0x1fc>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8007332:	230f      	movs	r3, #15
 8007334:	18fb      	adds	r3, r7, r3
 8007336:	2200      	movs	r2, #0
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	e00a      	b.n	8007352 <comunicacion+0x86>
				  aTxBuffer [i] = 0;
 800733c:	200f      	movs	r0, #15
 800733e:	183b      	adds	r3, r7, r0
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	4a62      	ldr	r2, [pc, #392]	@ (80074cc <comunicacion+0x200>)
 8007344:	2100      	movs	r1, #0
 8007346:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i < 7 ; i++ )
 8007348:	183b      	adds	r3, r7, r0
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	183b      	adds	r3, r7, r0
 800734e:	3201      	adds	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	230f      	movs	r3, #15
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b06      	cmp	r3, #6
 800735a:	d9ef      	bls.n	800733c <comunicacion+0x70>

			  aTxBuffer [0] = 0x07;
 800735c:	4b5b      	ldr	r3, [pc, #364]	@ (80074cc <comunicacion+0x200>)
 800735e:	2207      	movs	r2, #7
 8007360:	701a      	strb	r2, [r3, #0]
			  aTxBuffer [1] = sizeRxBuffer; // Para no solicitar datos 0x00
 8007362:	4b5a      	ldr	r3, [pc, #360]	@ (80074cc <comunicacion+0x200>)
 8007364:	2209      	movs	r2, #9
 8007366:	705a      	strb	r2, [r3, #1]
			  aTxBuffer [2] = Display_1;		//0XFF;
 8007368:	4b59      	ldr	r3, [pc, #356]	@ (80074d0 <comunicacion+0x204>)
 800736a:	781a      	ldrb	r2, [r3, #0]
 800736c:	4b57      	ldr	r3, [pc, #348]	@ (80074cc <comunicacion+0x200>)
 800736e:	709a      	strb	r2, [r3, #2]
			  aTxBuffer [3] = Display_2;		//0XFF;
 8007370:	4b58      	ldr	r3, [pc, #352]	@ (80074d4 <comunicacion+0x208>)
 8007372:	781a      	ldrb	r2, [r3, #0]
 8007374:	4b55      	ldr	r3, [pc, #340]	@ (80074cc <comunicacion+0x200>)
 8007376:	70da      	strb	r2, [r3, #3]
			  aTxBuffer [4] = 0;
 8007378:	4b54      	ldr	r3, [pc, #336]	@ (80074cc <comunicacion+0x200>)
 800737a:	2200      	movs	r2, #0
 800737c:	711a      	strb	r2, [r3, #4]
			  //aTxBuffer [4] = Ind_Par;
			  for(uint8_t k=0; k<8; k++){
 800737e:	230e      	movs	r3, #14
 8007380:	18fb      	adds	r3, r7, r3
 8007382:	2200      	movs	r2, #0
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e015      	b.n	80073b4 <comunicacion+0xe8>
				  aTxBuffer [4] |= (uint8_t) (Ind_Par[k]<<k);
 8007388:	4b50      	ldr	r3, [pc, #320]	@ (80074cc <comunicacion+0x200>)
 800738a:	791a      	ldrb	r2, [r3, #4]
 800738c:	200e      	movs	r0, #14
 800738e:	183b      	adds	r3, r7, r0
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	4951      	ldr	r1, [pc, #324]	@ (80074d8 <comunicacion+0x20c>)
 8007394:	5ccb      	ldrb	r3, [r1, r3]
 8007396:	0019      	movs	r1, r3
 8007398:	183b      	adds	r3, r7, r0
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	4099      	lsls	r1, r3
 800739e:	000b      	movs	r3, r1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	4b49      	ldr	r3, [pc, #292]	@ (80074cc <comunicacion+0x200>)
 80073a8:	711a      	strb	r2, [r3, #4]
			  for(uint8_t k=0; k<8; k++){
 80073aa:	183b      	adds	r3, r7, r0
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	183b      	adds	r3, r7, r0
 80073b0:	3201      	adds	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	230e      	movs	r3, #14
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b07      	cmp	r3, #7
 80073bc:	d9e4      	bls.n	8007388 <comunicacion+0xbc>
			  }
			  aTxBuffer [5] = 0x00;
 80073be:	4b43      	ldr	r3, [pc, #268]	@ (80074cc <comunicacion+0x200>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	715a      	strb	r2, [r3, #5]
			  uint8_t *point_X = &aTxBuffer[0];			// carga dirección del buffer a calcular chksum
 80073c4:	4b41      	ldr	r3, [pc, #260]	@ (80074cc <comunicacion+0x200>)
 80073c6:	607b      	str	r3, [r7, #4]
			  buildChksumBloq (point_X, 6);			// tamaño del bloque a calcular el chksum
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2106      	movs	r1, #6
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7ff fd31 	bl	8006e34 <buildChksumBloq>
			  aTxBuffer[6] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 80073d2:	4b3d      	ldr	r3, [pc, #244]	@ (80074c8 <comunicacion+0x1fc>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	4b3c      	ldr	r3, [pc, #240]	@ (80074cc <comunicacion+0x200>)
 80073da:	719a      	strb	r2, [r3, #6]
			  chksum_32_HW_LW = chksum_32_HW_LW_AUX;// tambien se agrega esta lines para su recuperación del dato 08/01/2025 CGM
 80073dc:	4b3a      	ldr	r3, [pc, #232]	@ (80074c8 <comunicacion+0x1fc>)
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	601a      	str	r2, [r3, #0]

			  if(FlagTx){
 80073e2:	4b3e      	ldr	r3, [pc, #248]	@ (80074dc <comunicacion+0x210>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d034      	beq.n	8007454 <comunicacion+0x188>
				  /**
				  	* Recepción de Datos
				  			 **/
				  if (HAL_I2C_Master_Receive_DMA(&hi2c1,(uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, sizeRxBuffer)==HAL_OK){
 80073ea:	4a3d      	ldr	r2, [pc, #244]	@ (80074e0 <comunicacion+0x214>)
 80073ec:	4834      	ldr	r0, [pc, #208]	@ (80074c0 <comunicacion+0x1f4>)
 80073ee:	2309      	movs	r3, #9
 80073f0:	2154      	movs	r1, #84	@ 0x54
 80073f2:	f00c fbb7 	bl	8013b64 <HAL_I2C_Master_Receive_DMA>
 80073f6:	1e03      	subs	r3, r0, #0
 80073f8:	d123      	bne.n	8007442 <comunicacion+0x176>
					  for(uint8_t k=0; k<8; k++)
 80073fa:	230d      	movs	r3, #13
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	e015      	b.n	8007430 <comunicacion+0x164>
						  Botones_T[k] = (_Bool) ((aRxBuffer[6] >> k) & 0x1);		// Recepción de botones CGM 22//11/2024
 8007404:	4b36      	ldr	r3, [pc, #216]	@ (80074e0 <comunicacion+0x214>)
 8007406:	799b      	ldrb	r3, [r3, #6]
 8007408:	001a      	movs	r2, r3
 800740a:	200d      	movs	r0, #13
 800740c:	183b      	adds	r3, r7, r0
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	411a      	asrs	r2, r3
 8007412:	0013      	movs	r3, r2
 8007414:	2201      	movs	r2, #1
 8007416:	401a      	ands	r2, r3
 8007418:	183b      	adds	r3, r7, r0
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	1e51      	subs	r1, r2, #1
 800741e:	418a      	sbcs	r2, r1
 8007420:	b2d1      	uxtb	r1, r2
 8007422:	4a30      	ldr	r2, [pc, #192]	@ (80074e4 <comunicacion+0x218>)
 8007424:	54d1      	strb	r1, [r2, r3]
					  for(uint8_t k=0; k<8; k++)
 8007426:	183b      	adds	r3, r7, r0
 8007428:	781a      	ldrb	r2, [r3, #0]
 800742a:	183b      	adds	r3, r7, r0
 800742c:	3201      	adds	r2, #1
 800742e:	701a      	strb	r2, [r3, #0]
 8007430:	230d      	movs	r3, #13
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b07      	cmp	r3, #7
 8007438:	d9e4      	bls.n	8007404 <comunicacion+0x138>
				  	//Vfw_tretsaa = aRxBuffer[8];
				  	//chk_sums = aRxBuffer[7];
				  	FlagTx= 0;
 800743a:	4b28      	ldr	r3, [pc, #160]	@ (80074dc <comunicacion+0x210>)
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e033      	b.n	80074aa <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 8007442:	4b1f      	ldr	r3, [pc, #124]	@ (80074c0 <comunicacion+0x1f4>)
 8007444:	0018      	movs	r0, r3
 8007446:	f00c fa57 	bl	80138f8 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 800744a:	4b1d      	ldr	r3, [pc, #116]	@ (80074c0 <comunicacion+0x1f4>)
 800744c:	0018      	movs	r0, r3
 800744e:	f00c f9ad 	bl	80137ac <HAL_I2C_Init>
 8007452:	e02a      	b.n	80074aa <comunicacion+0x1de>
				  }


			  }
			  else{
				  if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, COUNTOF(aTxBuffer))==HAL_OK){
 8007454:	4a1d      	ldr	r2, [pc, #116]	@ (80074cc <comunicacion+0x200>)
 8007456:	481a      	ldr	r0, [pc, #104]	@ (80074c0 <comunicacion+0x1f4>)
 8007458:	2307      	movs	r3, #7
 800745a:	2154      	movs	r1, #84	@ 0x54
 800745c:	f00c fa7c 	bl	8013958 <HAL_I2C_Master_Transmit_DMA>
 8007460:	1e03      	subs	r3, r0, #0
 8007462:	d103      	bne.n	800746c <comunicacion+0x1a0>
					  FlagTx= 1;
 8007464:	4b1d      	ldr	r3, [pc, #116]	@ (80074dc <comunicacion+0x210>)
 8007466:	2201      	movs	r2, #1
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e01e      	b.n	80074aa <comunicacion+0x1de>
				  }
				  else{
					  HAL_I2C_DeInit(&hi2c1);
 800746c:	4b14      	ldr	r3, [pc, #80]	@ (80074c0 <comunicacion+0x1f4>)
 800746e:	0018      	movs	r0, r3
 8007470:	f00c fa42 	bl	80138f8 <HAL_I2C_DeInit>
					  HAL_I2C_Init(&hi2c1);
 8007474:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <comunicacion+0x1f4>)
 8007476:	0018      	movs	r0, r3
 8007478:	f00c f998 	bl	80137ac <HAL_I2C_Init>
 800747c:	e015      	b.n	80074aa <comunicacion+0x1de>



			}
			else{
				countResetI2C++;
 800747e:	4b11      	ldr	r3, [pc, #68]	@ (80074c4 <comunicacion+0x1f8>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	3301      	adds	r3, #1
 8007484:	b2da      	uxtb	r2, r3
 8007486:	4b0f      	ldr	r3, [pc, #60]	@ (80074c4 <comunicacion+0x1f8>)
 8007488:	701a      	strb	r2, [r3, #0]
				if(!countResetI2C){
 800748a:	4b0e      	ldr	r3, [pc, #56]	@ (80074c4 <comunicacion+0x1f8>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <comunicacion+0x1dc>
					HAL_I2C_DeInit(&hi2c1);
 8007492:	4b0b      	ldr	r3, [pc, #44]	@ (80074c0 <comunicacion+0x1f4>)
 8007494:	0018      	movs	r0, r3
 8007496:	f00c fa2f 	bl	80138f8 <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 800749a:	4b09      	ldr	r3, [pc, #36]	@ (80074c0 <comunicacion+0x1f4>)
 800749c:	0018      	movs	r0, r3
 800749e:	f00c f985 	bl	80137ac <HAL_I2C_Init>
 80074a2:	e002      	b.n	80074aa <comunicacion+0x1de>
		goto fin_comu;
 80074a4:	46c0      	nop			@ (mov r8, r8)
 80074a6:	e000      	b.n	80074aa <comunicacion+0x1de>
				}
			}
fin_comu:
 80074a8:	46c0      	nop			@ (mov r8, r8)
	detecta();
 80074aa:	f000 f81d 	bl	80074e8 <detecta>


}
 80074ae:	46c0      	nop			@ (mov r8, r8)
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b004      	add	sp, #16
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	46c0      	nop			@ (mov r8, r8)
 80074b8:	20000c78 	.word	0x20000c78
 80074bc:	20000b58 	.word	0x20000b58
 80074c0:	20000438 	.word	0x20000438
 80074c4:	200010b6 	.word	0x200010b6
 80074c8:	20000e34 	.word	0x20000e34
 80074cc:	20000004 	.word	0x20000004
 80074d0:	20000c79 	.word	0x20000c79
 80074d4:	20000c7a 	.word	0x20000c7a
 80074d8:	20000c7c 	.word	0x20000c7c
 80074dc:	200003c6 	.word	0x200003c6
 80074e0:	200003c8 	.word	0x200003c8
 80074e4:	20000c84 	.word	0x20000c84

080074e8 <detecta>:

void detecta(void){
 80074e8:	b5b0      	push	{r4, r5, r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0

	if(edorefri!=0x1){
 80074ee:	4bb8      	ldr	r3, [pc, #736]	@ (80077d0 <detecta+0x2e8>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <detecta+0x12>
 80074f6:	f000 fc4f 	bl	8007d98 <detecta+0x8b0>
		goto dete03;
 80074fa:	46c0      	nop			@ (mov r8, r8)
	}
	goto findet;
dete03:
detecta_j00:
	if(!GetRegFlagState(Plantilla[logicos2],doorOFF)){
 80074fc:	4bb5      	ldr	r3, [pc, #724]	@ (80077d4 <detecta+0x2ec>)
 80074fe:	225b      	movs	r2, #91	@ 0x5b
 8007500:	5c9b      	ldrb	r3, [r3, r2]
 8007502:	001a      	movs	r2, r3
 8007504:	2301      	movs	r3, #1
 8007506:	4013      	ands	r3, r2
 8007508:	d004      	beq.n	8007514 <detecta+0x2c>
		goto detectaPuerta;
	}
	load_tiempoAhorro1();
 800750a:	f7ff fb71 	bl	8006bf0 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 800750e:	f7ff fb8d 	bl	8006c2c <load_tiempoAhorro2>
	goto closedoor_b;
 8007512:	e1e4      	b.n	80078de <detecta+0x3f6>
		goto detectaPuerta;
 8007514:	46c0      	nop			@ (mov r8, r8)

detectaPuerta:
	if(GetRegFlagState(Plantilla[logicos],3)){
 8007516:	4baf      	ldr	r3, [pc, #700]	@ (80077d4 <detecta+0x2ec>)
 8007518:	2253      	movs	r2, #83	@ 0x53
 800751a:	5c9b      	ldrb	r3, [r3, r2]
 800751c:	001a      	movs	r2, r3
 800751e:	2308      	movs	r3, #8
 8007520:	4013      	ands	r3, r2
 8007522:	d04c      	beq.n	80075be <detecta+0xd6>
		goto detecta_j01;
 8007524:	46c0      	nop			@ (mov r8, r8)


detecta_j01:
switch_nc:

	for(uint8_t MPx = 0; MPx < 4; MPx++){
 8007526:	230f      	movs	r3, #15
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	e03f      	b.n	80075b0 <detecta+0xc8>
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_SET);
 8007530:	210f      	movs	r1, #15
 8007532:	187b      	adds	r3, r7, r1
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	4ba8      	ldr	r3, [pc, #672]	@ (80077d8 <detecta+0x2f0>)
 8007538:	0092      	lsls	r2, r2, #2
 800753a:	58d0      	ldr	r0, [r2, r3]
 800753c:	187b      	adds	r3, r7, r1
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	4aa6      	ldr	r2, [pc, #664]	@ (80077dc <detecta+0x2f4>)
 8007542:	5cd3      	ldrb	r3, [r2, r3]
 8007544:	2201      	movs	r2, #1
 8007546:	0019      	movs	r1, r3
 8007548:	f00c f8b9 	bl	80136be <HAL_GPIO_WritePin>
		for(uint8_t Px = 0; Px < 5; Px++){
 800754c:	230e      	movs	r3, #14
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	e014      	b.n	8007580 <detecta+0x98>
			if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007556:	240e      	movs	r4, #14
 8007558:	193b      	adds	r3, r7, r4
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	4b9e      	ldr	r3, [pc, #632]	@ (80077d8 <detecta+0x2f0>)
 800755e:	0092      	lsls	r2, r2, #2
 8007560:	58d0      	ldr	r0, [r2, r3]
 8007562:	193b      	adds	r3, r7, r4
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4a9d      	ldr	r2, [pc, #628]	@ (80077dc <detecta+0x2f4>)
 8007568:	5cd3      	ldrb	r3, [r2, r3]
 800756a:	0019      	movs	r1, r3
 800756c:	f00c f88a 	bl	8013684 <HAL_GPIO_ReadPin>
 8007570:	1e03      	subs	r3, r0, #0
 8007572:	d100      	bne.n	8007576 <detecta+0x8e>
 8007574:	e1e2      	b.n	800793c <detecta+0x454>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007576:	193b      	adds	r3, r7, r4
 8007578:	781a      	ldrb	r2, [r3, #0]
 800757a:	193b      	adds	r3, r7, r4
 800757c:	3201      	adds	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	230e      	movs	r3, #14
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b04      	cmp	r3, #4
 8007588:	d9e5      	bls.n	8007556 <detecta+0x6e>
				goto opendoor;
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_Px_PORT[MPx],PFULLDEF_Px_PIN[MPx], GPIO_PIN_RESET);
 800758a:	240f      	movs	r4, #15
 800758c:	193b      	adds	r3, r7, r4
 800758e:	781a      	ldrb	r2, [r3, #0]
 8007590:	4b91      	ldr	r3, [pc, #580]	@ (80077d8 <detecta+0x2f0>)
 8007592:	0092      	lsls	r2, r2, #2
 8007594:	58d0      	ldr	r0, [r2, r3]
 8007596:	193b      	adds	r3, r7, r4
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	4a90      	ldr	r2, [pc, #576]	@ (80077dc <detecta+0x2f4>)
 800759c:	5cd3      	ldrb	r3, [r2, r3]
 800759e:	2200      	movs	r2, #0
 80075a0:	0019      	movs	r1, r3
 80075a2:	f00c f88c 	bl	80136be <HAL_GPIO_WritePin>
	for(uint8_t MPx = 0; MPx < 4; MPx++){
 80075a6:	193b      	adds	r3, r7, r4
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	193b      	adds	r3, r7, r4
 80075ac:	3201      	adds	r2, #1
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	230f      	movs	r3, #15
 80075b2:	18fb      	adds	r3, r7, r3
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d9ba      	bls.n	8007530 <detecta+0x48>
	}
	goto detecta_j02;
 80075ba:	46c0      	nop			@ (mov r8, r8)
		goto detecta_j02;
	}
	 goto opendoor;*/

detecta_j02:
	goto closedoor;
 80075bc:	e185      	b.n	80078ca <detecta+0x3e2>
	goto switch_no;
 80075be:	46c0      	nop			@ (mov r8, r8)


switch_no:
	//goto closedoor;//  Eliminar cuando quieras ver la activación de la puerta

	if((countWaitPuerta == 0)&(firstFlagPuerta1)){
 80075c0:	4b87      	ldr	r3, [pc, #540]	@ (80077e0 <detecta+0x2f8>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	425a      	negs	r2, r3
 80075c6:	4153      	adcs	r3, r2
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	001a      	movs	r2, r3
 80075cc:	4b85      	ldr	r3, [pc, #532]	@ (80077e4 <detecta+0x2fc>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4013      	ands	r3, r2
 80075d2:	d022      	beq.n	800761a <detecta+0x132>
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 80075d4:	4b84      	ldr	r3, [pc, #528]	@ (80077e8 <detecta+0x300>)
 80075d6:	6858      	ldr	r0, [r3, #4]
 80075d8:	4b84      	ldr	r3, [pc, #528]	@ (80077ec <detecta+0x304>)
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	2201      	movs	r2, #1
 80075de:	0019      	movs	r1, r3
 80075e0:	f00c f86d 	bl	80136be <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80075e4:	200a      	movs	r0, #10
 80075e6:	f009 fdcf 	bl	8011188 <HAL_Delay>
		if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[0],PFULLDEF_Px_PIN[0])){
 80075ea:	4b7b      	ldr	r3, [pc, #492]	@ (80077d8 <detecta+0x2f0>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b7b      	ldr	r3, [pc, #492]	@ (80077dc <detecta+0x2f4>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	0019      	movs	r1, r3
 80075f4:	0010      	movs	r0, r2
 80075f6:	f00c f845 	bl	8013684 <HAL_GPIO_ReadPin>
 80075fa:	1e03      	subs	r3, r0, #0
 80075fc:	d002      	beq.n	8007604 <detecta+0x11c>
			FlagPuertaX[4] = 1;// Puerta Abierta
 80075fe:	4b7c      	ldr	r3, [pc, #496]	@ (80077f0 <detecta+0x308>)
 8007600:	2201      	movs	r2, #1
 8007602:	711a      	strb	r2, [r3, #4]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[1],PFULLDEF_MPx_PIN[1], GPIO_PIN_SET);
 8007604:	4b78      	ldr	r3, [pc, #480]	@ (80077e8 <detecta+0x300>)
 8007606:	6858      	ldr	r0, [r3, #4]
 8007608:	4b78      	ldr	r3, [pc, #480]	@ (80077ec <detecta+0x304>)
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	2201      	movs	r2, #1
 800760e:	0019      	movs	r1, r3
 8007610:	f00c f855 	bl	80136be <HAL_GPIO_WritePin>
		firstFlagPuerta1 = 0;
 8007614:	4b73      	ldr	r3, [pc, #460]	@ (80077e4 <detecta+0x2fc>)
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
	}

	if((countWaitPuerta == 10)){// Ya pasaron 10 Milisegundos?
 800761a:	4b71      	ldr	r3, [pc, #452]	@ (80077e0 <detecta+0x2f8>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b0a      	cmp	r3, #10
 8007620:	d000      	beq.n	8007624 <detecta+0x13c>
 8007622:	e088      	b.n	8007736 <detecta+0x24e>
		for(uint8_t Px = 0; Px < 5; Px++){
 8007624:	230d      	movs	r3, #13
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	e04b      	b.n	80076c6 <detecta+0x1de>
			if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 800762e:	240d      	movs	r4, #13
 8007630:	193b      	adds	r3, r7, r4
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	4b68      	ldr	r3, [pc, #416]	@ (80077d8 <detecta+0x2f0>)
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	58d0      	ldr	r0, [r2, r3]
 800763a:	193b      	adds	r3, r7, r4
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	4a67      	ldr	r2, [pc, #412]	@ (80077dc <detecta+0x2f4>)
 8007640:	5cd3      	ldrb	r3, [r2, r3]
 8007642:	0019      	movs	r1, r3
 8007644:	f00c f81e 	bl	8013684 <HAL_GPIO_ReadPin>
 8007648:	1e03      	subs	r3, r0, #0
 800764a:	d00f      	beq.n	800766c <detecta+0x184>
				FlagPuerta10Times [sizePx*countMPx+Px]++;
 800764c:	4b69      	ldr	r3, [pc, #420]	@ (80077f4 <detecta+0x30c>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	001a      	movs	r2, r3
 8007652:	0013      	movs	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	189a      	adds	r2, r3, r2
 8007658:	193b      	adds	r3, r7, r4
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	18d3      	adds	r3, r2, r3
 800765e:	4a66      	ldr	r2, [pc, #408]	@ (80077f8 <detecta+0x310>)
 8007660:	5cd2      	ldrb	r2, [r2, r3]
 8007662:	3201      	adds	r2, #1
 8007664:	b2d1      	uxtb	r1, r2
 8007666:	4a64      	ldr	r2, [pc, #400]	@ (80077f8 <detecta+0x310>)
 8007668:	54d1      	strb	r1, [r2, r3]
 800766a:	e026      	b.n	80076ba <detecta+0x1d2>
			}
			else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 800766c:	240d      	movs	r4, #13
 800766e:	193b      	adds	r3, r7, r4
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	4b59      	ldr	r3, [pc, #356]	@ (80077d8 <detecta+0x2f0>)
 8007674:	0092      	lsls	r2, r2, #2
 8007676:	58d0      	ldr	r0, [r2, r3]
 8007678:	193b      	adds	r3, r7, r4
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	4a57      	ldr	r2, [pc, #348]	@ (80077dc <detecta+0x2f4>)
 800767e:	5cd3      	ldrb	r3, [r2, r3]
 8007680:	0019      	movs	r1, r3
 8007682:	f00b ffff 	bl	8013684 <HAL_GPIO_ReadPin>
 8007686:	1e03      	subs	r3, r0, #0
 8007688:	d117      	bne.n	80076ba <detecta+0x1d2>
				FlagPuertaX[sizePx*countMPx+Px] = 0;
 800768a:	4b5a      	ldr	r3, [pc, #360]	@ (80077f4 <detecta+0x30c>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	001a      	movs	r2, r3
 8007690:	0013      	movs	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	189a      	adds	r2, r3, r2
 8007696:	193b      	adds	r3, r7, r4
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	18d3      	adds	r3, r2, r3
 800769c:	4a54      	ldr	r2, [pc, #336]	@ (80077f0 <detecta+0x308>)
 800769e:	2100      	movs	r1, #0
 80076a0:	54d1      	strb	r1, [r2, r3]
				FlagPuerta10Times[sizePx*countMPx+Px] = 0;
 80076a2:	4b54      	ldr	r3, [pc, #336]	@ (80077f4 <detecta+0x30c>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	001a      	movs	r2, r3
 80076a8:	0013      	movs	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	189a      	adds	r2, r3, r2
 80076ae:	193b      	adds	r3, r7, r4
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	18d3      	adds	r3, r2, r3
 80076b4:	4a50      	ldr	r2, [pc, #320]	@ (80077f8 <detecta+0x310>)
 80076b6:	2100      	movs	r1, #0
 80076b8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < 5; Px++){
 80076ba:	210d      	movs	r1, #13
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	781a      	ldrb	r2, [r3, #0]
 80076c0:	187b      	adds	r3, r7, r1
 80076c2:	3201      	adds	r2, #1
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	230d      	movs	r3, #13
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d9ae      	bls.n	800762e <detecta+0x146>
			}
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_RESET);
 80076d0:	4b48      	ldr	r3, [pc, #288]	@ (80077f4 <detecta+0x30c>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	001a      	movs	r2, r3
 80076d6:	4b44      	ldr	r3, [pc, #272]	@ (80077e8 <detecta+0x300>)
 80076d8:	0092      	lsls	r2, r2, #2
 80076da:	58d0      	ldr	r0, [r2, r3]
 80076dc:	4b45      	ldr	r3, [pc, #276]	@ (80077f4 <detecta+0x30c>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	001a      	movs	r2, r3
 80076e2:	4b42      	ldr	r3, [pc, #264]	@ (80077ec <detecta+0x304>)
 80076e4:	5c9b      	ldrb	r3, [r3, r2]
 80076e6:	2200      	movs	r2, #0
 80076e8:	0019      	movs	r1, r3
 80076ea:	f00b ffe8 	bl	80136be <HAL_GPIO_WritePin>

		if(countMPx < sizeMPx){
 80076ee:	4b41      	ldr	r3, [pc, #260]	@ (80077f4 <detecta+0x30c>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d805      	bhi.n	8007702 <detecta+0x21a>
			countMPx++;
 80076f6:	4b3f      	ldr	r3, [pc, #252]	@ (80077f4 <detecta+0x30c>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	3301      	adds	r3, #1
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	4b3d      	ldr	r3, [pc, #244]	@ (80077f4 <detecta+0x30c>)
 8007700:	701a      	strb	r2, [r3, #0]
		}
		if(countMPx == sizeMPx){
 8007702:	4b3c      	ldr	r3, [pc, #240]	@ (80077f4 <detecta+0x30c>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b04      	cmp	r3, #4
 8007708:	d102      	bne.n	8007710 <detecta+0x228>
			countMPx = 0;
 800770a:	4b3a      	ldr	r3, [pc, #232]	@ (80077f4 <detecta+0x30c>)
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(PFULLDEF_MPx_PORT[countMPx],PFULLDEF_MPx_PIN[countMPx], GPIO_PIN_SET);
 8007710:	4b38      	ldr	r3, [pc, #224]	@ (80077f4 <detecta+0x30c>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	001a      	movs	r2, r3
 8007716:	4b34      	ldr	r3, [pc, #208]	@ (80077e8 <detecta+0x300>)
 8007718:	0092      	lsls	r2, r2, #2
 800771a:	58d0      	ldr	r0, [r2, r3]
 800771c:	4b35      	ldr	r3, [pc, #212]	@ (80077f4 <detecta+0x30c>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	001a      	movs	r2, r3
 8007722:	4b32      	ldr	r3, [pc, #200]	@ (80077ec <detecta+0x304>)
 8007724:	5c9b      	ldrb	r3, [r3, r2]
 8007726:	2201      	movs	r2, #1
 8007728:	0019      	movs	r1, r3
 800772a:	f00b ffc8 	bl	80136be <HAL_GPIO_WritePin>

		countWaitPuerta = 0;
 800772e:	4b2c      	ldr	r3, [pc, #176]	@ (80077e0 <detecta+0x2f8>)
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	e009      	b.n	800774a <detecta+0x262>
	}else if(countWaitPuerta < 10){
 8007736:	4b2a      	ldr	r3, [pc, #168]	@ (80077e0 <detecta+0x2f8>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b09      	cmp	r3, #9
 800773c:	d805      	bhi.n	800774a <detecta+0x262>
		countWaitPuerta++;
 800773e:	4b28      	ldr	r3, [pc, #160]	@ (80077e0 <detecta+0x2f8>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	b2da      	uxtb	r2, r3
 8007746:	4b26      	ldr	r3, [pc, #152]	@ (80077e0 <detecta+0x2f8>)
 8007748:	701a      	strb	r2, [r3, #0]
	}

	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 800774a:	230c      	movs	r3, #12
 800774c:	18fb      	adds	r3, r7, r3
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	e0af      	b.n	80078b4 <detecta+0x3cc>
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007754:	230b      	movs	r3, #11
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	2200      	movs	r2, #0
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	e09e      	b.n	800789c <detecta+0x3b4>

			if((FlagPuerta10Times [sizePx * MPx + Px] > 0) & (countWaitPuerta < 10)){
 800775e:	250c      	movs	r5, #12
 8007760:	197b      	adds	r3, r7, r5
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	0013      	movs	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	189a      	adds	r2, r3, r2
 800776a:	240b      	movs	r4, #11
 800776c:	193b      	adds	r3, r7, r4
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	18d3      	adds	r3, r2, r3
 8007772:	4a21      	ldr	r2, [pc, #132]	@ (80077f8 <detecta+0x310>)
 8007774:	5cd3      	ldrb	r3, [r2, r3]
 8007776:	1e5a      	subs	r2, r3, #1
 8007778:	4193      	sbcs	r3, r2
 800777a:	b2da      	uxtb	r2, r3
 800777c:	4b18      	ldr	r3, [pc, #96]	@ (80077e0 <detecta+0x2f8>)
 800777e:	7819      	ldrb	r1, [r3, #0]
 8007780:	2009      	movs	r0, #9
 8007782:	2300      	movs	r3, #0
 8007784:	4288      	cmp	r0, r1
 8007786:	415b      	adcs	r3, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4013      	ands	r3, r2
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d100      	bne.n	8007794 <detecta+0x2ac>
 8007792:	e07d      	b.n	8007890 <detecta+0x3a8>
				if(HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 8007794:	193b      	adds	r3, r7, r4
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	4b0f      	ldr	r3, [pc, #60]	@ (80077d8 <detecta+0x2f0>)
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	58d0      	ldr	r0, [r2, r3]
 800779e:	193b      	adds	r3, r7, r4
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	4a0e      	ldr	r2, [pc, #56]	@ (80077dc <detecta+0x2f4>)
 80077a4:	5cd3      	ldrb	r3, [r2, r3]
 80077a6:	0019      	movs	r1, r3
 80077a8:	f00b ff6c 	bl	8013684 <HAL_GPIO_ReadPin>
 80077ac:	1e03      	subs	r3, r0, #0
 80077ae:	d025      	beq.n	80077fc <detecta+0x314>
					FlagPuerta10Times [sizePx * MPx + Px]++;
 80077b0:	197b      	adds	r3, r7, r5
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	0013      	movs	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	189a      	adds	r2, r3, r2
 80077ba:	193b      	adds	r3, r7, r4
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	18d3      	adds	r3, r2, r3
 80077c0:	4a0d      	ldr	r2, [pc, #52]	@ (80077f8 <detecta+0x310>)
 80077c2:	5cd2      	ldrb	r2, [r2, r3]
 80077c4:	3201      	adds	r2, #1
 80077c6:	b2d1      	uxtb	r1, r2
 80077c8:	4a0b      	ldr	r2, [pc, #44]	@ (80077f8 <detecta+0x310>)
 80077ca:	54d1      	strb	r1, [r2, r3]
 80077cc:	e03c      	b.n	8007848 <detecta+0x360>
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	20000b98 	.word	0x20000b98
 80077d4:	200000b8 	.word	0x200000b8
 80077d8:	200001e8 	.word	0x200001e8
 80077dc:	200001fc 	.word	0x200001fc
 80077e0:	200010e0 	.word	0x200010e0
 80077e4:	20000218 	.word	0x20000218
 80077e8:	20000204 	.word	0x20000204
 80077ec:	20000214 	.word	0x20000214
 80077f0:	200010b8 	.word	0x200010b8
 80077f4:	200010e1 	.word	0x200010e1
 80077f8:	200010cc 	.word	0x200010cc
				}
				else if(!HAL_GPIO_ReadPin(PFULLDEF_Px_PORT[Px],PFULLDEF_Px_PIN[Px])){
 80077fc:	240b      	movs	r4, #11
 80077fe:	193b      	adds	r3, r7, r4
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	4bd3      	ldr	r3, [pc, #844]	@ (8007b50 <detecta+0x668>)
 8007804:	0092      	lsls	r2, r2, #2
 8007806:	58d0      	ldr	r0, [r2, r3]
 8007808:	193b      	adds	r3, r7, r4
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	4ad1      	ldr	r2, [pc, #836]	@ (8007b54 <detecta+0x66c>)
 800780e:	5cd3      	ldrb	r3, [r2, r3]
 8007810:	0019      	movs	r1, r3
 8007812:	f00b ff37 	bl	8013684 <HAL_GPIO_ReadPin>
 8007816:	1e03      	subs	r3, r0, #0
 8007818:	d116      	bne.n	8007848 <detecta+0x360>
					FlagPuertaX[sizePx * MPx + Px] = 0;
 800781a:	200c      	movs	r0, #12
 800781c:	183b      	adds	r3, r7, r0
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	0013      	movs	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	189a      	adds	r2, r3, r2
 8007826:	193b      	adds	r3, r7, r4
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	18d3      	adds	r3, r2, r3
 800782c:	4aca      	ldr	r2, [pc, #808]	@ (8007b58 <detecta+0x670>)
 800782e:	2100      	movs	r1, #0
 8007830:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 8007832:	183b      	adds	r3, r7, r0
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	0013      	movs	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	189a      	adds	r2, r3, r2
 800783c:	193b      	adds	r3, r7, r4
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	18d3      	adds	r3, r2, r3
 8007842:	4ac6      	ldr	r2, [pc, #792]	@ (8007b5c <detecta+0x674>)
 8007844:	2100      	movs	r1, #0
 8007846:	54d1      	strb	r1, [r2, r3]
				}
				if(FlagPuerta10Times [sizePx * MPx + Px] == 10){
 8007848:	200c      	movs	r0, #12
 800784a:	183b      	adds	r3, r7, r0
 800784c:	781a      	ldrb	r2, [r3, #0]
 800784e:	0013      	movs	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	189a      	adds	r2, r3, r2
 8007854:	240b      	movs	r4, #11
 8007856:	193b      	adds	r3, r7, r4
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	18d3      	adds	r3, r2, r3
 800785c:	4abf      	ldr	r2, [pc, #764]	@ (8007b5c <detecta+0x674>)
 800785e:	5cd3      	ldrb	r3, [r2, r3]
 8007860:	2b0a      	cmp	r3, #10
 8007862:	d115      	bne.n	8007890 <detecta+0x3a8>
					FlagPuertaX[sizePx * MPx + Px] = 1;
 8007864:	183b      	adds	r3, r7, r0
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	0013      	movs	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	189a      	adds	r2, r3, r2
 800786e:	193b      	adds	r3, r7, r4
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	4ab8      	ldr	r2, [pc, #736]	@ (8007b58 <detecta+0x670>)
 8007876:	2101      	movs	r1, #1
 8007878:	54d1      	strb	r1, [r2, r3]
					FlagPuerta10Times[sizePx * MPx + Px] = 0;
 800787a:	183b      	adds	r3, r7, r0
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	0013      	movs	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	189a      	adds	r2, r3, r2
 8007884:	193b      	adds	r3, r7, r4
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	18d3      	adds	r3, r2, r3
 800788a:	4ab4      	ldr	r2, [pc, #720]	@ (8007b5c <detecta+0x674>)
 800788c:	2100      	movs	r1, #0
 800788e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t Px = 0; Px < sizePx; Px++){
 8007890:	210b      	movs	r1, #11
 8007892:	187b      	adds	r3, r7, r1
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	187b      	adds	r3, r7, r1
 8007898:	3201      	adds	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	230b      	movs	r3, #11
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d800      	bhi.n	80078a8 <detecta+0x3c0>
 80078a6:	e75a      	b.n	800775e <detecta+0x276>
	for(uint8_t MPx = 0; MPx < sizeMPx; MPx++){
 80078a8:	210c      	movs	r1, #12
 80078aa:	187b      	adds	r3, r7, r1
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	187b      	adds	r3, r7, r1
 80078b0:	3201      	adds	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	230c      	movs	r3, #12
 80078b6:	18fb      	adds	r3, r7, r3
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d800      	bhi.n	80078c0 <detecta+0x3d8>
 80078be:	e749      	b.n	8007754 <detecta+0x26c>
			}
		}
	}


	if(FlagPuertaX[4]){
 80078c0:	4ba5      	ldr	r3, [pc, #660]	@ (8007b58 <detecta+0x670>)
 80078c2:	791b      	ldrb	r3, [r3, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d13b      	bne.n	8007940 <detecta+0x458>
		goto opendoor;
	}
	goto detecta_j03;
 80078c8:	46c0      	nop			@ (mov r8, r8)



detecta_j03:
closedoor:
	decwreg(&debdoor);
 80078ca:	4ba5      	ldr	r3, [pc, #660]	@ (8007b60 <detecta+0x678>)
 80078cc:	0018      	movs	r0, r3
 80078ce:	f7ff fb50 	bl	8006f72 <decwreg>
	if(debdoor == 0){
 80078d2:	4ba3      	ldr	r3, [pc, #652]	@ (8007b60 <detecta+0x678>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d000      	beq.n	80078dc <detecta+0x3f4>
 80078da:	e0a6      	b.n	8007a2a <detecta+0x542>
		goto closedoor_b;
 80078dc:	46c0      	nop			@ (mov r8, r8)
	}
		goto revbotones;

closedoor_b:
	flagsC[f_doorOpen] = 0;// BitClear(flagsC,f_doorOpen); // Linea 441
 80078de:	4ba1      	ldr	r3, [pc, #644]	@ (8007b64 <detecta+0x67c>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	701a      	strb	r2, [r3, #0]
	cnt_pta_fan = Plantilla[timepaf];
 80078e4:	4ba0      	ldr	r3, [pc, #640]	@ (8007b68 <detecta+0x680>)
 80078e6:	2248      	movs	r2, #72	@ 0x48
 80078e8:	5c9a      	ldrb	r2, [r3, r2]
 80078ea:	4ba0      	ldr	r3, [pc, #640]	@ (8007b6c <detecta+0x684>)
 80078ec:	701a      	strb	r2, [r3, #0]
	trefst[4]=0;//BitClear(trefst,4); // Linea 446
 80078ee:	4ba0      	ldr	r3, [pc, #640]	@ (8007b70 <detecta+0x688>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	711a      	strb	r2, [r3, #4]
	Load_ret2();
 80078f4:	f7fe fbd2 	bl	800609c <Load_ret2>
	if(flagsa[noctman]){//if(GetRegFlagState(flagsa,noctman)){
 80078f8:	4b9e      	ldr	r3, [pc, #632]	@ (8007b74 <detecta+0x68c>)
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d100      	bne.n	8007902 <detecta+0x41a>
 8007900:	e095      	b.n	8007a2e <detecta+0x546>
		goto detecta_j04;
 8007902:	46c0      	nop			@ (mov r8, r8)
	}

	goto revbotones;

detecta_j04:
	flagsa[1] = 0;//BitClear(flagsa,1); // Linea 450
 8007904:	4b9b      	ldr	r3, [pc, #620]	@ (8007b74 <detecta+0x68c>)
 8007906:	2200      	movs	r2, #0
 8007908:	705a      	strb	r2, [r3, #1]
	if(!flagsa[nocturno]){// if(!GetRegFlagState(flagsa,nocturno)){
 800790a:	4b9a      	ldr	r3, [pc, #616]	@ (8007b74 <detecta+0x68c>)
 800790c:	78db      	ldrb	r3, [r3, #3]
 800790e:	2201      	movs	r2, #1
 8007910:	4053      	eors	r3, r2
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d100      	bne.n	800791a <detecta+0x432>
 8007918:	e08b      	b.n	8007a32 <detecta+0x54a>
		goto det_j04;
 800791a:	46c0      	nop			@ (mov r8, r8)
	}
	// goto opendoor05;
	goto revbotones;

det_j04:
	load_timeNoct();
 800791c:	f7ff f9a4 	bl	8006c68 <load_timeNoct>
	durdhh=0;
 8007920:	4b95      	ldr	r3, [pc, #596]	@ (8007b78 <detecta+0x690>)
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
	durdhl=0;
 8007926:	4b95      	ldr	r3, [pc, #596]	@ (8007b7c <detecta+0x694>)
 8007928:	2200      	movs	r2, #0
 800792a:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 1;// BitSet(flagsa,3); // Revisa esta linea
 800792c:	4b91      	ldr	r3, [pc, #580]	@ (8007b74 <detecta+0x68c>)
 800792e:	2201      	movs	r2, #1
 8007930:	70da      	strb	r2, [r3, #3]
	datled[4] = 1;// BitSet(datled,4);
 8007932:	4b93      	ldr	r3, [pc, #588]	@ (8007b80 <detecta+0x698>)
 8007934:	2201      	movs	r2, #1
 8007936:	711a      	strb	r2, [r3, #4]
	goto disp_new;
 8007938:	46c0      	nop			@ (mov r8, r8)
	datled[4] = 0;//BitClear(datled,4);
	cntNoct_H=0;

disp_new:

	goto ahorro_off;
 800793a:	e05f      	b.n	80079fc <detecta+0x514>
				goto opendoor;
 800793c:	46c0      	nop			@ (mov r8, r8)
 800793e:	e000      	b.n	8007942 <detecta+0x45a>
		goto opendoor;
 8007940:	46c0      	nop			@ (mov r8, r8)
	if(debdoor>=0x80){
 8007942:	4b87      	ldr	r3, [pc, #540]	@ (8007b60 <detecta+0x678>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b25b      	sxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	db06      	blt.n	800795a <detecta+0x472>
	debdoor++;
 800794c:	4b84      	ldr	r3, [pc, #528]	@ (8007b60 <detecta+0x678>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	b2da      	uxtb	r2, r3
 8007954:	4b82      	ldr	r3, [pc, #520]	@ (8007b60 <detecta+0x678>)
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	e000      	b.n	800795c <detecta+0x474>
		goto noinc;
 800795a:	46c0      	nop			@ (mov r8, r8)
	if((debdoor)<0x80){ // Checar con Manuel
 800795c:	4b80      	ldr	r3, [pc, #512]	@ (8007b60 <detecta+0x678>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	b25b      	sxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	da2a      	bge.n	80079bc <detecta+0x4d4>
	flagsC[f_doorOpen] = 1;// BitSet(flagsC,f_doorOpen);
 8007966:	4b7f      	ldr	r3, [pc, #508]	@ (8007b64 <detecta+0x67c>)
 8007968:	2201      	movs	r2, #1
 800796a:	701a      	strb	r2, [r3, #0]
	retLampOff=5;
 800796c:	4b85      	ldr	r3, [pc, #532]	@ (8007b84 <detecta+0x69c>)
 800796e:	2205      	movs	r2, #5
 8007970:	701a      	strb	r2, [r3, #0]
	cntHoldP= Plantilla[LD_b]; // Revisar esto el timeHoldP
 8007972:	4b7d      	ldr	r3, [pc, #500]	@ (8007b68 <detecta+0x680>)
 8007974:	224f      	movs	r2, #79	@ 0x4f
 8007976:	5c9a      	ldrb	r2, [r3, r2]
 8007978:	4b83      	ldr	r3, [pc, #524]	@ (8007b88 <detecta+0x6a0>)
 800797a:	701a      	strb	r2, [r3, #0]
	retvent= 0x05;
 800797c:	4b83      	ldr	r3, [pc, #524]	@ (8007b8c <detecta+0x6a4>)
 800797e:	2205      	movs	r2, #5
 8007980:	701a      	strb	r2, [r3, #0]
	if(findLastValue((uint32_t) &eePlantilla[eetimepaf])!= 0){
 8007982:	4b83      	ldr	r3, [pc, #524]	@ (8007b90 <detecta+0x6a8>)
 8007984:	0018      	movs	r0, r3
 8007986:	f7fb f949 	bl	8002c1c <findLastValue>
 800798a:	1e03      	subs	r3, r0, #0
 800798c:	d103      	bne.n	8007996 <detecta+0x4ae>
	cnt_pta_fan=99;
 800798e:	4b77      	ldr	r3, [pc, #476]	@ (8007b6c <detecta+0x684>)
 8007990:	2263      	movs	r2, #99	@ 0x63
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	e000      	b.n	8007998 <detecta+0x4b0>
		goto no_ld_timepaf;
 8007996:	46c0      	nop			@ (mov r8, r8)
	if(flagsa[nocturno]){// if(GetRegFlagState(flagsa,nocturno)){
 8007998:	4b76      	ldr	r3, [pc, #472]	@ (8007b74 <detecta+0x68c>)
 800799a:	78db      	ldrb	r3, [r3, #3]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00f      	beq.n	80079c0 <detecta+0x4d8>
		goto detecta_j05;
 80079a0:	46c0      	nop			@ (mov r8, r8)
	flagsb[f_luzb] = 1;// BitSet(flagsb,f_luzb);
 80079a2:	4b7c      	ldr	r3, [pc, #496]	@ (8007b94 <detecta+0x6ac>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
	flagsa[3] = 0;// BitClear(flagsa,3);
 80079a8:	4b72      	ldr	r3, [pc, #456]	@ (8007b74 <detecta+0x68c>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	70da      	strb	r2, [r3, #3]
	datled[4] = 0;//BitClear(datled,4);
 80079ae:	4b74      	ldr	r3, [pc, #464]	@ (8007b80 <detecta+0x698>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	711a      	strb	r2, [r3, #4]
	cntNoct_H=0;
 80079b4:	4b78      	ldr	r3, [pc, #480]	@ (8007b98 <detecta+0x6b0>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	801a      	strh	r2, [r3, #0]
	goto ahorro_off;
 80079ba:	e01f      	b.n	80079fc <detecta+0x514>
		goto revnocman;
 80079bc:	46c0      	nop			@ (mov r8, r8)
 80079be:	e000      	b.n	80079c2 <detecta+0x4da>
	goto revnocman;
 80079c0:	46c0      	nop			@ (mov r8, r8)
detecta_j06:


detecta_j07:
opendoor10:
	if(cntpah){
 80079c2:	4b76      	ldr	r3, [pc, #472]	@ (8007b9c <detecta+0x6b4>)
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d113      	bne.n	80079f2 <detecta+0x50a>
		//goto revbotones;
		goto ahorro_off;
	}
	if(cnt_pta_fan==0){
 80079ca:	4b68      	ldr	r3, [pc, #416]	@ (8007b6c <detecta+0x684>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <detecta+0x4fc>
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	if(Plantilla[timepa]==0){
 80079d2:	4b65      	ldr	r3, [pc, #404]	@ (8007b68 <detecta+0x680>)
 80079d4:	2249      	movs	r2, #73	@ 0x49
 80079d6:	5c9b      	ldrb	r3, [r3, r2]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <detecta+0x500>
		//goto revbotones;
		//goto ahorro_off;
		goto cancelAlarmPA;
	}

	trefst[4] = 1;// BitSet(trefst,4);
 80079dc:	4b64      	ldr	r3, [pc, #400]	@ (8007b70 <detecta+0x688>)
 80079de:	2201      	movs	r2, #1
 80079e0:	711a      	strb	r2, [r3, #4]
	goto ahorro_off;
 80079e2:	e00b      	b.n	80079fc <detecta+0x514>
		goto cancelAlarmPA;
 80079e4:	46c0      	nop			@ (mov r8, r8)
 80079e6:	e000      	b.n	80079ea <detecta+0x502>
		goto cancelAlarmPA;
 80079e8:	46c0      	nop			@ (mov r8, r8)

cancelAlarmPA:
	trefst[4] = 0;// BitClear(trefst,4);
 80079ea:	4b61      	ldr	r3, [pc, #388]	@ (8007b70 <detecta+0x688>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	711a      	strb	r2, [r3, #4]
 80079f0:	e004      	b.n	80079fc <detecta+0x514>
		goto ahorro_off;
 80079f2:	46c0      	nop			@ (mov r8, r8)
 80079f4:	e002      	b.n	80079fc <detecta+0x514>
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
		goto ask_ahorro;
	}
	//ld_tdev_to_wreg();
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
		goto ahorro_off;
 80079f6:	46c0      	nop			@ (mov r8, r8)
 80079f8:	e000      	b.n	80079fc <detecta+0x514>
		goto ask_time_ahorro;
	}*/
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
		goto ask_time_ahorro;
	}
	goto ahorro_off;
 80079fa:	46c0      	nop			@ (mov r8, r8)
	if(!flagsC[f_ahorro1]){// if(!GetRegFlagState(flagsC,f_ahorro1)){
 80079fc:	4b59      	ldr	r3, [pc, #356]	@ (8007b64 <detecta+0x67c>)
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2201      	movs	r2, #1
 8007a02:	4053      	eors	r3, r2
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <detecta+0x52a>
	cntdpysp=0xF0;
 8007a0a:	4b65      	ldr	r3, [pc, #404]	@ (8007ba0 <detecta+0x6b8>)
 8007a0c:	22f0      	movs	r2, #240	@ 0xf0
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e000      	b.n	8007a14 <detecta+0x52c>
		goto ahorro_off_00;
 8007a12:	46c0      	nop			@ (mov r8, r8)
	flagsC[f_ahorro1] = 0;// BitClear(flagsC,f_ahorro1);
 8007a14:	4b53      	ldr	r3, [pc, #332]	@ (8007b64 <detecta+0x67c>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;// BitClear(flagsC,f_ahorro2);
 8007a1a:	4b52      	ldr	r3, [pc, #328]	@ (8007b64 <detecta+0x67c>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	709a      	strb	r2, [r3, #2]
	load_tiempoAhorro1();
 8007a20:	f7ff f8e6 	bl	8006bf0 <load_tiempoAhorro1>
	load_tiempoAhorro2();
 8007a24:	f7ff f902 	bl	8006c2c <load_tiempoAhorro2>
	goto fin_detecta;
 8007a28:	e047      	b.n	8007aba <detecta+0x5d2>
		goto revbotones;
 8007a2a:	46c0      	nop			@ (mov r8, r8)
 8007a2c:	e002      	b.n	8007a34 <detecta+0x54c>
	goto revbotones;
 8007a2e:	46c0      	nop			@ (mov r8, r8)
 8007a30:	e000      	b.n	8007a34 <detecta+0x54c>
	goto revbotones;
 8007a32:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_ahorro1]){// if(GetRegFlagState(flagsC,f_ahorro1)){
 8007a34:	4b4b      	ldr	r3, [pc, #300]	@ (8007b64 <detecta+0x67c>)
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10c      	bne.n	8007a56 <detecta+0x56e>
	if( (int16_t) tdev_to_Word() >= (int16_t) TwoByteInArrayToWord(&Plantilla[pulldown_H]) ){ // Checar con el ing Manuel
 8007a3c:	f7fe faf8 	bl	8006030 <tdev_to_Word>
 8007a40:	0003      	movs	r3, r0
 8007a42:	b21c      	sxth	r4, r3
 8007a44:	4b57      	ldr	r3, [pc, #348]	@ (8007ba4 <detecta+0x6bc>)
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7fe fb0a 	bl	8006060 <TwoByteInArrayToWord>
 8007a4c:	0003      	movs	r3, r0
 8007a4e:	b21b      	sxth	r3, r3
 8007a50:	429c      	cmp	r4, r3
 8007a52:	dad0      	bge.n	80079f6 <detecta+0x50e>
ask_ahorro:
 8007a54:	e000      	b.n	8007a58 <detecta+0x570>
		goto ask_ahorro;
 8007a56:	46c0      	nop			@ (mov r8, r8)
	if(flagsC[f_spReached]){// if(GetRegFlagState(flagsC,f_spReached)){
 8007a58:	4b42      	ldr	r3, [pc, #264]	@ (8007b64 <detecta+0x67c>)
 8007a5a:	79db      	ldrb	r3, [r3, #7]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0cc      	beq.n	80079fa <detecta+0x512>
		goto ask_time_ahorro;
 8007a60:	46c0      	nop			@ (mov r8, r8)

ask_time_ahorro:

	if((t_ahorro1_H)==0){
 8007a62:	4b51      	ldr	r3, [pc, #324]	@ (8007ba8 <detecta+0x6c0>)
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <detecta+0x594>
		goto modoAhorro1_ON;
	}
	load_tiempoAhorro2();
 8007a6a:	f7ff f8df 	bl	8006c2c <load_tiempoAhorro2>
	flagsC[f_ahorro1] = 0; 	//BitClear(flagsC,f_ahorro1);
 8007a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007b64 <detecta+0x67c>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	705a      	strb	r2, [r3, #1]
	flagsC[f_ahorro2] = 0;	// BitClear(flagsC,f_ahorro2);
 8007a74:	4b3b      	ldr	r3, [pc, #236]	@ (8007b64 <detecta+0x67c>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	709a      	strb	r2, [r3, #2]
	goto fin_detecta;
 8007a7a:	e01e      	b.n	8007aba <detecta+0x5d2>
		goto modoAhorro1_ON;
 8007a7c:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON:
	if(flagsC[f_ahorro1]){//if(GetRegFlagState(flagsC,f_ahorro1)){
 8007a7e:	4b39      	ldr	r3, [pc, #228]	@ (8007b64 <detecta+0x67c>)
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <detecta+0x5a6>
		goto modoAhorro1_ON_2;
	}
	//BitSet(datled,luzN);
	cntdpysp= 0xF0;
 8007a86:	4b46      	ldr	r3, [pc, #280]	@ (8007ba0 <detecta+0x6b8>)
 8007a88:	22f0      	movs	r2, #240	@ 0xf0
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	e000      	b.n	8007a90 <detecta+0x5a8>
		goto modoAhorro1_ON_2;
 8007a8e:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_2:
	flagsC[f_ahorro1]= 1; // BitSet(flagsC,f_ahorro1);
 8007a90:	4b34      	ldr	r3, [pc, #208]	@ (8007b64 <detecta+0x67c>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	705a      	strb	r2, [r3, #1]
	if(t_ahorro2_H){ // Linea 504
 8007a96:	4b45      	ldr	r3, [pc, #276]	@ (8007bac <detecta+0x6c4>)
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10c      	bne.n	8007ab8 <detecta+0x5d0>
		goto fin_detecta;
	}

	if(flagsC[f_ahorro2]){//if(GetRegFlagState(flagsC,f_ahorro2)){
 8007a9e:	4b31      	ldr	r3, [pc, #196]	@ (8007b64 <detecta+0x67c>)
 8007aa0:	789b      	ldrb	r3, [r3, #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <detecta+0x5c6>
		goto modoAhorro1_ON_3;
	}
	cntdpysp=0xF0;
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ba0 <detecta+0x6b8>)
 8007aa8:	22f0      	movs	r2, #240	@ 0xf0
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e000      	b.n	8007ab0 <detecta+0x5c8>
		goto modoAhorro1_ON_3;
 8007aae:	46c0      	nop			@ (mov r8, r8)

modoAhorro1_ON_3:
	flagsC[f_ahorro2] = 1;// BitSet(flagsC,f_ahorro2);
 8007ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8007b64 <detecta+0x67c>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	709a      	strb	r2, [r3, #2]
 8007ab6:	e000      	b.n	8007aba <detecta+0x5d2>
		goto fin_detecta;
 8007ab8:	46c0      	nop			@ (mov r8, r8)

revbotones_2:
	//botonst = 0;

	// btn_pr = 0;
	for(uint8_t k=0; k<8; k++){
 8007aba:	230a      	movs	r3, #10
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	e014      	b.n	8007aee <detecta+0x606>
		btn_pr[k] = 0;
 8007ac4:	200a      	movs	r0, #10
 8007ac6:	183b      	adds	r3, r7, r0
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	4a39      	ldr	r2, [pc, #228]	@ (8007bb0 <detecta+0x6c8>)
 8007acc:	2100      	movs	r1, #0
 8007ace:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007ad0:	183b      	adds	r3, r7, r0
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4a37      	ldr	r2, [pc, #220]	@ (8007bb4 <detecta+0x6cc>)
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	54d1      	strb	r1, [r2, r3]
		botonst2[k] = 0;
 8007ada:	183b      	adds	r3, r7, r0
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	4a36      	ldr	r2, [pc, #216]	@ (8007bb8 <detecta+0x6d0>)
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007ae4:	183b      	adds	r3, r7, r0
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	183b      	adds	r3, r7, r0
 8007aea:	3201      	adds	r2, #1
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	230a      	movs	r3, #10
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b07      	cmp	r3, #7
 8007af6:	d9e5      	bls.n	8007ac4 <detecta+0x5dc>
	}
	// Botones_T &= 0x0F;// Linea 617-619

	if(flagsb[f_prog]){
 8007af8:	4b26      	ldr	r3, [pc, #152]	@ (8007b94 <detecta+0x6ac>)
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d117      	bne.n	8007b30 <detecta+0x648>
		goto no2btn;
	}
	if(!Botones_T[btn_1]){//if(!GetRegFlagState(Botones_T,btn_1)){ // No esta presionado el Boton 1 (entra al IF)
 8007b00:	4b2e      	ldr	r3, [pc, #184]	@ (8007bbc <detecta+0x6d4>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2201      	movs	r2, #1
 8007b06:	4053      	eors	r3, r2
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d112      	bne.n	8007b34 <detecta+0x64c>
		goto no2btn;
	}
	if(!Botones_T[btn_3]){ // No esta presionado el Boton 3 (entra al IF)
 8007b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8007bbc <detecta+0x6d4>)
 8007b10:	789b      	ldrb	r3, [r3, #2]
 8007b12:	2201      	movs	r2, #1
 8007b14:	4053      	eors	r3, r2
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10d      	bne.n	8007b38 <detecta+0x650>
		goto no2btn;
	}
	if(deb_2btn!=0){
 8007b1c:	4b28      	ldr	r3, [pc, #160]	@ (8007bc0 <detecta+0x6d8>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d103      	bne.n	8007b2c <detecta+0x644>
		goto findet_jp;
	}
	botonst2[1] = 1;//BitSet(botonst2,1);
 8007b24:	4b24      	ldr	r3, [pc, #144]	@ (8007bb8 <detecta+0x6d0>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	705a      	strb	r2, [r3, #1]

findet_jp:
	goto findet;
 8007b2a:	e13e      	b.n	8007daa <detecta+0x8c2>
		goto findet_jp;
 8007b2c:	46c0      	nop			@ (mov r8, r8)
	goto findet;
 8007b2e:	e13c      	b.n	8007daa <detecta+0x8c2>
		goto no2btn;
 8007b30:	46c0      	nop			@ (mov r8, r8)
 8007b32:	e002      	b.n	8007b3a <detecta+0x652>
		goto no2btn;
 8007b34:	46c0      	nop			@ (mov r8, r8)
 8007b36:	e000      	b.n	8007b3a <detecta+0x652>
		goto no2btn;
 8007b38:	46c0      	nop			@ (mov r8, r8)

no2btn:
	if(deb_2btn>=150 ){
 8007b3a:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <detecta+0x6d8>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b95      	cmp	r3, #149	@ 0x95
 8007b40:	d840      	bhi.n	8007bc4 <detecta+0x6dc>
		//goto ask_btn1;
		goto ask_btn2_f3;
	}
	deb_2btn += 3;
 8007b42:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc0 <detecta+0x6d8>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	3303      	adds	r3, #3
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc0 <detecta+0x6d8>)
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e03a      	b.n	8007bc6 <detecta+0x6de>
 8007b50:	200001e8 	.word	0x200001e8
 8007b54:	200001fc 	.word	0x200001fc
 8007b58:	200010b8 	.word	0x200010b8
 8007b5c:	200010cc 	.word	0x200010cc
 8007b60:	20000bc1 	.word	0x20000bc1
 8007b64:	20000c3c 	.word	0x20000c3c
 8007b68:	200000b8 	.word	0x200000b8
 8007b6c:	20000c27 	.word	0x20000c27
 8007b70:	20000b88 	.word	0x20000b88
 8007b74:	20000b78 	.word	0x20000b78
 8007b78:	20000bb8 	.word	0x20000bb8
 8007b7c:	20000bb7 	.word	0x20000bb7
 8007b80:	20000b90 	.word	0x20000b90
 8007b84:	20001066 	.word	0x20001066
 8007b88:	200010b0 	.word	0x200010b0
 8007b8c:	20000b6a 	.word	0x20000b6a
 8007b90:	0803f048 	.word	0x0803f048
 8007b94:	20000be8 	.word	0x20000be8
 8007b98:	20000c44 	.word	0x20000c44
 8007b9c:	20000b66 	.word	0x20000b66
 8007ba0:	20000bc2 	.word	0x20000bc2
 8007ba4:	200000e1 	.word	0x200000e1
 8007ba8:	20000c30 	.word	0x20000c30
 8007bac:	20000c32 	.word	0x20000c32
 8007bb0:	20000bf0 	.word	0x20000bf0
 8007bb4:	20000b9c 	.word	0x20000b9c
 8007bb8:	20000c18 	.word	0x20000c18
 8007bbc:	20000c84 	.word	0x20000c84
 8007bc0:	20000c16 	.word	0x20000c16
		goto ask_btn2_f3;
 8007bc4:	46c0      	nop			@ (mov r8, r8)

ask_btn2_f3:
	if(flagsb[f_prog]){
 8007bc6:	4ba4      	ldr	r3, [pc, #656]	@ (8007e58 <detecta+0x970>)
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d114      	bne.n	8007bf8 <detecta+0x710>
		goto noBtn2F3;
	}
	if(!Botones_T[btn_2]){
 8007bce:	4ba3      	ldr	r3, [pc, #652]	@ (8007e5c <detecta+0x974>)
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4053      	eors	r3, r2
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10f      	bne.n	8007bfc <detecta+0x714>
		goto noBtn2F3;
	}

	if(debBtn2F3!=0){
 8007bdc:	4ba0      	ldr	r3, [pc, #640]	@ (8007e60 <detecta+0x978>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d117      	bne.n	8007c14 <detecta+0x72c>
		//goto findet_jp;
		goto ask_btn1;
	}
	botonst2[2] = 1;	// BitSet(botonst2,2);
 8007be4:	4b9f      	ldr	r3, [pc, #636]	@ (8007e64 <detecta+0x97c>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	709a      	strb	r2, [r3, #2]
	flagsC[f_spReached] = 0;// BitClear(flagsC,f_spReached);
 8007bea:	4b9f      	ldr	r3, [pc, #636]	@ (8007e68 <detecta+0x980>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	71da      	strb	r2, [r3, #7]
	debBtn2F3=30;
 8007bf0:	4b9b      	ldr	r3, [pc, #620]	@ (8007e60 <detecta+0x978>)
 8007bf2:	221e      	movs	r2, #30
 8007bf4:	701a      	strb	r2, [r3, #0]
	goto findet_jp;
 8007bf6:	e79a      	b.n	8007b2e <detecta+0x646>
		goto noBtn2F3;
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	e000      	b.n	8007bfe <detecta+0x716>
		goto noBtn2F3;
 8007bfc:	46c0      	nop			@ (mov r8, r8)

noBtn2F3:
	if(debBtn2F3>=30 ){ // Revisar si mi logica es corecta. L 633 (jruge)
 8007bfe:	4b98      	ldr	r3, [pc, #608]	@ (8007e60 <detecta+0x978>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b1d      	cmp	r3, #29
 8007c04:	d808      	bhi.n	8007c18 <detecta+0x730>
		goto ask_btn1;
	}
	debBtn2F3 +=1;
 8007c06:	4b96      	ldr	r3, [pc, #600]	@ (8007e60 <detecta+0x978>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	4b94      	ldr	r3, [pc, #592]	@ (8007e60 <detecta+0x978>)
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e002      	b.n	8007c1a <detecta+0x732>
		goto ask_btn1;
 8007c14:	46c0      	nop			@ (mov r8, r8)
 8007c16:	e000      	b.n	8007c1a <detecta+0x732>
		goto ask_btn1;
 8007c18:	46c0      	nop			@ (mov r8, r8)

ask_btn1:
	if(!Botones_T[btn_1]){
 8007c1a:	4b90      	ldr	r3, [pc, #576]	@ (8007e5c <detecta+0x974>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4053      	eors	r3, r2
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d12a      	bne.n	8007c7e <detecta+0x796>
		goto no_btn1;
	}
	if(Botones_COPY[btn_1]){
 8007c28:	4b90      	ldr	r3, [pc, #576]	@ (8007e6c <detecta+0x984>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <detecta+0x756>
		goto ask_btn1_sec;
	}
	botonst[b1_f1] = 1; // BitSet(botonst,b1_f1);
 8007c30:	4b8f      	ldr	r3, [pc, #572]	@ (8007e70 <detecta+0x988>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	701a      	strb	r2, [r3, #0]
	timeBuzzOn=20;
 8007c36:	4b8f      	ldr	r3, [pc, #572]	@ (8007e74 <detecta+0x98c>)
 8007c38:	2214      	movs	r2, #20
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	e000      	b.n	8007c40 <detecta+0x758>
		goto ask_btn1_sec;
 8007c3e:	46c0      	nop			@ (mov r8, r8)

ask_btn1_sec:
	if(!flagsb[f_prog]){
 8007c40:	4b85      	ldr	r3, [pc, #532]	@ (8007e58 <detecta+0x970>)
 8007c42:	785b      	ldrb	r3, [r3, #1]
 8007c44:	2201      	movs	r2, #1
 8007c46:	4053      	eors	r3, r2
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d107      	bne.n	8007c5e <detecta+0x776>
		goto func_sec_norm_btn1;
	}
	if(deb2_btn1>110){
 8007c4e:	4b8a      	ldr	r3, [pc, #552]	@ (8007e78 <detecta+0x990>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b6e      	cmp	r3, #110	@ 0x6e
 8007c54:	d822      	bhi.n	8007c9c <detecta+0x7b4>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1; // BitSet(botonst,b1_f2);
 8007c56:	4b86      	ldr	r3, [pc, #536]	@ (8007e70 <detecta+0x988>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	705a      	strb	r2, [r3, #1]
	goto findet;
 8007c5c:	e0a5      	b.n	8007daa <detecta+0x8c2>
		goto func_sec_norm_btn1;
 8007c5e:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn1:
	if(fbtn_deb[b1_ow]){//if(GetRegFlagState(fbtn_deb,b1_ow)){
 8007c60:	4b86      	ldr	r3, [pc, #536]	@ (8007e7c <detecta+0x994>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11b      	bne.n	8007ca0 <detecta+0x7b8>
		goto ask_btn2;
	}
	if(deb2_btn1!=0){
 8007c68:	4b83      	ldr	r3, [pc, #524]	@ (8007e78 <detecta+0x990>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d119      	bne.n	8007ca4 <detecta+0x7bc>
		goto ask_btn2;
	}
	botonst[b1_f2] = 1;// BitSet(botonst,b1_f2);
 8007c70:	4b7f      	ldr	r3, [pc, #508]	@ (8007e70 <detecta+0x988>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	705a      	strb	r2, [r3, #1]
	fbtn_deb[b1_ow] = 1;// BitSet(fbtn_deb,b1_ow);
 8007c76:	4b81      	ldr	r3, [pc, #516]	@ (8007e7c <detecta+0x994>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	701a      	strb	r2, [r3, #0]
	//timeBuzzOn=20;
	goto findet;
 8007c7c:	e095      	b.n	8007daa <detecta+0x8c2>
		goto no_btn1;
 8007c7e:	46c0      	nop			@ (mov r8, r8)

no_btn1:
	fbtn_deb[b1_ow] = 0;//BitClear(fbtn_deb,b1_ow);
 8007c80:	4b7e      	ldr	r3, [pc, #504]	@ (8007e7c <detecta+0x994>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
		goto ask_deb2_btn1;
	}
	BitSet(botonst,b1_f1);*/

ask_deb2_btn1:
	if(deb2_btn1>=150){ // JRUGE
 8007c86:	4b7c      	ldr	r3, [pc, #496]	@ (8007e78 <detecta+0x990>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b95      	cmp	r3, #149	@ 0x95
 8007c8c:	d80c      	bhi.n	8007ca8 <detecta+0x7c0>
		goto ask_btn2;
	}
	deb2_btn1+=3;
 8007c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8007e78 <detecta+0x990>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	3303      	adds	r3, #3
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	4b78      	ldr	r3, [pc, #480]	@ (8007e78 <detecta+0x990>)
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	e006      	b.n	8007caa <detecta+0x7c2>
		goto ask_btn2;
 8007c9c:	46c0      	nop			@ (mov r8, r8)
 8007c9e:	e004      	b.n	8007caa <detecta+0x7c2>
		goto ask_btn2;
 8007ca0:	46c0      	nop			@ (mov r8, r8)
 8007ca2:	e002      	b.n	8007caa <detecta+0x7c2>
		goto ask_btn2;
 8007ca4:	46c0      	nop			@ (mov r8, r8)
 8007ca6:	e000      	b.n	8007caa <detecta+0x7c2>
		goto ask_btn2;
 8007ca8:	46c0      	nop			@ (mov r8, r8)
	//goto ask_btn2;

ask_btn2:
	if(!Botones_T[btn_2]){
 8007caa:	4b6c      	ldr	r3, [pc, #432]	@ (8007e5c <detecta+0x974>)
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4053      	eors	r3, r2
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11a      	bne.n	8007cee <detecta+0x806>
		goto no_btn2;
	}
	if(Botones_COPY[btn_2]){
 8007cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e6c <detecta+0x984>)
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <detecta+0x7e6>
		goto ask_btn2_sec;
	}
	botonst[b2_f1] = 1;//BitSet(botonst,b2_f1);
 8007cc0:	4b6b      	ldr	r3, [pc, #428]	@ (8007e70 <detecta+0x988>)
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	709a      	strb	r2, [r3, #2]
	timeBuzzOn=20;
 8007cc6:	4b6b      	ldr	r3, [pc, #428]	@ (8007e74 <detecta+0x98c>)
 8007cc8:	2214      	movs	r2, #20
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e000      	b.n	8007cd0 <detecta+0x7e8>
		goto ask_btn2_sec;
 8007cce:	46c0      	nop			@ (mov r8, r8)

ask_btn2_sec:
	if(fbtn_deb[b2_ow]){// if(GetRegFlagState(fbtn_deb,b2_ow)){
 8007cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8007e7c <detecta+0x994>)
 8007cd2:	789b      	ldrb	r3, [r3, #2]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d119      	bne.n	8007d0c <detecta+0x824>
		goto ask_btn3;
	}
	if(deb2_btn2!=0){
 8007cd8:	4b69      	ldr	r3, [pc, #420]	@ (8007e80 <detecta+0x998>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d117      	bne.n	8007d10 <detecta+0x828>
		goto ask_btn3;
	}
	botonst[b2_f2] = 1;	//BitSet(botonst,b2_f2);
 8007ce0:	4b63      	ldr	r3, [pc, #396]	@ (8007e70 <detecta+0x988>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	70da      	strb	r2, [r3, #3]
	// timeBuzzOn=20;
	fbtn_deb[b2_ow] = 1;//BitSet(fbtn_deb,b2_ow);
 8007ce6:	4b65      	ldr	r3, [pc, #404]	@ (8007e7c <detecta+0x994>)
 8007ce8:	2201      	movs	r2, #1
 8007cea:	709a      	strb	r2, [r3, #2]
	goto findet;
 8007cec:	e05d      	b.n	8007daa <detecta+0x8c2>
		goto no_btn2;
 8007cee:	46c0      	nop			@ (mov r8, r8)

no_btn2:
	fbtn_deb[b2_ow] = 0;//BitClear(fbtn_deb,b2_ow);
 8007cf0:	4b62      	ldr	r3, [pc, #392]	@ (8007e7c <detecta+0x994>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	709a      	strb	r2, [r3, #2]
	}
	BitSet(botonst,b2_f1);
	timeBuzzOn=20;*/

ask_deb2_btn2:
	if(deb2_btn2>=150){// JRUGE
 8007cf6:	4b62      	ldr	r3, [pc, #392]	@ (8007e80 <detecta+0x998>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b95      	cmp	r3, #149	@ 0x95
 8007cfc:	d80a      	bhi.n	8007d14 <detecta+0x82c>
		goto ask_btn3;
	}
	deb2_btn2 += 3;
 8007cfe:	4b60      	ldr	r3, [pc, #384]	@ (8007e80 <detecta+0x998>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	3303      	adds	r3, #3
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	4b5e      	ldr	r3, [pc, #376]	@ (8007e80 <detecta+0x998>)
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	e004      	b.n	8007d16 <detecta+0x82e>
		goto ask_btn3;
 8007d0c:	46c0      	nop			@ (mov r8, r8)
 8007d0e:	e002      	b.n	8007d16 <detecta+0x82e>
		goto ask_btn3;
 8007d10:	46c0      	nop			@ (mov r8, r8)
 8007d12:	e000      	b.n	8007d16 <detecta+0x82e>
		goto ask_btn3;
 8007d14:	46c0      	nop			@ (mov r8, r8)
	// Linea 742 - 764
*/


ask_btn3:
	if(!Botones_T[btn_3]){
 8007d16:	4b51      	ldr	r3, [pc, #324]	@ (8007e5c <detecta+0x974>)
 8007d18:	789b      	ldrb	r3, [r3, #2]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4053      	eors	r3, r2
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d12a      	bne.n	8007d7a <detecta+0x892>
		goto no_btn3;
	}
	if(Botones_COPY[btn_3]){
 8007d24:	4b51      	ldr	r3, [pc, #324]	@ (8007e6c <detecta+0x984>)
 8007d26:	789b      	ldrb	r3, [r3, #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d106      	bne.n	8007d3a <detecta+0x852>
		goto ask_btn3_sec;
	}
	botonst[b3_f1] = 1;// BitSet(botonst,b3_f1);
 8007d2c:	4b50      	ldr	r3, [pc, #320]	@ (8007e70 <detecta+0x988>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	711a      	strb	r2, [r3, #4]
	timeBuzzOn=20;
 8007d32:	4b50      	ldr	r3, [pc, #320]	@ (8007e74 <detecta+0x98c>)
 8007d34:	2214      	movs	r2, #20
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e000      	b.n	8007d3c <detecta+0x854>
		goto ask_btn3_sec;
 8007d3a:	46c0      	nop			@ (mov r8, r8)

ask_btn3_sec:
	if(!flagsb[f_prog]){
 8007d3c:	4b46      	ldr	r3, [pc, #280]	@ (8007e58 <detecta+0x970>)
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4053      	eors	r3, r2
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d107      	bne.n	8007d5a <detecta+0x872>
		goto func_sec_norm_btn3;
	}
	if(deb2_btn3>110){ //jrugt
 8007d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8007e84 <detecta+0x99c>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d50:	d824      	bhi.n	8007d9c <detecta+0x8b4>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;//BitSet(botonst,b3_f2);
 8007d52:	4b47      	ldr	r3, [pc, #284]	@ (8007e70 <detecta+0x988>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	715a      	strb	r2, [r3, #5]
	goto findet;
 8007d58:	e027      	b.n	8007daa <detecta+0x8c2>
		goto func_sec_norm_btn3;
 8007d5a:	46c0      	nop			@ (mov r8, r8)

func_sec_norm_btn3:
	if(fbtn_deb[b3_ow]){// if(GetRegFlagState(fbtn_deb,b3_ow)){
 8007d5c:	4b47      	ldr	r3, [pc, #284]	@ (8007e7c <detecta+0x994>)
 8007d5e:	791b      	ldrb	r3, [r3, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11d      	bne.n	8007da0 <detecta+0x8b8>
		goto ask_btn4;
	}
	if(deb2_btn3!=0){
 8007d64:	4b47      	ldr	r3, [pc, #284]	@ (8007e84 <detecta+0x99c>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d11b      	bne.n	8007da4 <detecta+0x8bc>
		goto ask_btn4;
	}
	botonst[b3_f2] = 1;// BitSet(botonst,b3_f2);
 8007d6c:	4b40      	ldr	r3, [pc, #256]	@ (8007e70 <detecta+0x988>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	715a      	strb	r2, [r3, #5]
	fbtn_deb[b3_ow] = 1;//BitSet(fbtn_deb,b3_ow);
 8007d72:	4b42      	ldr	r3, [pc, #264]	@ (8007e7c <detecta+0x994>)
 8007d74:	2201      	movs	r2, #1
 8007d76:	711a      	strb	r2, [r3, #4]
	// timeBuzzOn=20;
	goto findet;
 8007d78:	e017      	b.n	8007daa <detecta+0x8c2>
		goto no_btn3;
 8007d7a:	46c0      	nop			@ (mov r8, r8)

no_btn3:
	fbtn_deb[b3_ow] = 0; // BitClear(fbtn_deb,b3_ow);
 8007d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e7c <detecta+0x994>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	711a      	strb	r2, [r3, #4]
	}
	BitSet(botonst,b3_f1);
	*/

ask_deb2_btn3:
	if(deb2_btn3>=150){
 8007d82:	4b40      	ldr	r3, [pc, #256]	@ (8007e84 <detecta+0x99c>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b95      	cmp	r3, #149	@ 0x95
 8007d88:	d80e      	bhi.n	8007da8 <detecta+0x8c0>
		goto ask_btn4;
	}
	deb2_btn3 += 3;
 8007d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e84 <detecta+0x99c>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	3303      	adds	r3, #3
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	4b3c      	ldr	r3, [pc, #240]	@ (8007e84 <detecta+0x99c>)
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	e008      	b.n	8007daa <detecta+0x8c2>
	goto findet;
 8007d98:	46c0      	nop			@ (mov r8, r8)
 8007d9a:	e006      	b.n	8007daa <detecta+0x8c2>
		goto ask_btn4;
 8007d9c:	46c0      	nop			@ (mov r8, r8)
 8007d9e:	e004      	b.n	8007daa <detecta+0x8c2>
		goto ask_btn4;
 8007da0:	46c0      	nop			@ (mov r8, r8)
 8007da2:	e002      	b.n	8007daa <detecta+0x8c2>
		goto ask_btn4;
 8007da4:	46c0      	nop			@ (mov r8, r8)
 8007da6:	e000      	b.n	8007daa <detecta+0x8c2>
		goto ask_btn4;
 8007da8:	46c0      	nop			@ (mov r8, r8)
 *
 */

findet:
	//Botones_COPY = Botones_T;
	for(uint8_t k = 0; k<8; k++)
 8007daa:	2309      	movs	r3, #9
 8007dac:	18fb      	adds	r3, r7, r3
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	e00d      	b.n	8007dd0 <detecta+0x8e8>
		Botones_COPY[k] = Botones_T[k];
 8007db4:	2009      	movs	r0, #9
 8007db6:	183b      	adds	r3, r7, r0
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	183b      	adds	r3, r7, r0
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	4927      	ldr	r1, [pc, #156]	@ (8007e5c <detecta+0x974>)
 8007dc0:	5c89      	ldrb	r1, [r1, r2]
 8007dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e6c <detecta+0x984>)
 8007dc4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k = 0; k<8; k++)
 8007dc6:	183b      	adds	r3, r7, r0
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	183b      	adds	r3, r7, r0
 8007dcc:	3201      	adds	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	2309      	movs	r3, #9
 8007dd2:	18fb      	adds	r3, r7, r3
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b07      	cmp	r3, #7
 8007dd8:	d9ec      	bls.n	8007db4 <detecta+0x8cc>
	if(!flagsb[f_prog]){
 8007dda:	4b1f      	ldr	r3, [pc, #124]	@ (8007e58 <detecta+0x970>)
 8007ddc:	785b      	ldrb	r3, [r3, #1]
 8007dde:	2201      	movs	r2, #1
 8007de0:	4053      	eors	r3, r2
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d11d      	bne.n	8007e24 <detecta+0x93c>
		goto det_j18;
	}
	//btn_pr=botonst;
	for(uint8_t k=0; k<8; k++){
 8007de8:	2308      	movs	r3, #8
 8007dea:	18fb      	adds	r3, r7, r3
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	e012      	b.n	8007e18 <detecta+0x930>
		btn_pr[k] = botonst[k];
 8007df2:	2008      	movs	r0, #8
 8007df4:	183b      	adds	r3, r7, r0
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	183b      	adds	r3, r7, r0
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	491c      	ldr	r1, [pc, #112]	@ (8007e70 <detecta+0x988>)
 8007dfe:	5c89      	ldrb	r1, [r1, r2]
 8007e00:	4a21      	ldr	r2, [pc, #132]	@ (8007e88 <detecta+0x9a0>)
 8007e02:	54d1      	strb	r1, [r2, r3]
		botonst[k] = 0;
 8007e04:	183b      	adds	r3, r7, r0
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4a19      	ldr	r2, [pc, #100]	@ (8007e70 <detecta+0x988>)
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0; k<8; k++){
 8007e0e:	183b      	adds	r3, r7, r0
 8007e10:	781a      	ldrb	r2, [r3, #0]
 8007e12:	183b      	adds	r3, r7, r0
 8007e14:	3201      	adds	r2, #1
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	2308      	movs	r3, #8
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	d9e7      	bls.n	8007df2 <detecta+0x90a>
	}

det_j18:
 8007e22:	e000      	b.n	8007e26 <detecta+0x93e>
		goto det_j18;
 8007e24:	46c0      	nop			@ (mov r8, r8)
	if(!flagsBattery[batON]){
 8007e26:	4b19      	ldr	r3, [pc, #100]	@ (8007e8c <detecta+0x9a4>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	4053      	eors	r3, r2
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d106      	bne.n	8007e42 <detecta+0x95a>
		goto det_j19;
	}
	botonst[b2_f1] = 0; // BitClear(botonst,b2_f1);
 8007e34:	4b0e      	ldr	r3, [pc, #56]	@ (8007e70 <detecta+0x988>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	709a      	strb	r2, [r3, #2]
	botonst[b3_f1] = 0;// BitClear(botonst,b3_f1);
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e70 <detecta+0x988>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	711a      	strb	r2, [r3, #4]
 8007e40:	e000      	b.n	8007e44 <detecta+0x95c>
		goto det_j19;
 8007e42:	46c0      	nop			@ (mov r8, r8)

det_j19:
	uint8_t kkkkk;
	kkkkk++;
 8007e44:	1dfb      	adds	r3, r7, #7
 8007e46:	781a      	ldrb	r2, [r3, #0]
 8007e48:	1dfb      	adds	r3, r7, #7
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
}
 8007e4e:	46c0      	nop			@ (mov r8, r8)
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b004      	add	sp, #16
 8007e54:	bdb0      	pop	{r4, r5, r7, pc}
 8007e56:	46c0      	nop			@ (mov r8, r8)
 8007e58:	20000be8 	.word	0x20000be8
 8007e5c:	20000c84 	.word	0x20000c84
 8007e60:	200010a4 	.word	0x200010a4
 8007e64:	20000c18 	.word	0x20000c18
 8007e68:	20000c3c 	.word	0x20000c3c
 8007e6c:	20000c08 	.word	0x20000c08
 8007e70:	20000b9c 	.word	0x20000b9c
 8007e74:	2000109d 	.word	0x2000109d
 8007e78:	20000c10 	.word	0x20000c10
 8007e7c:	20000bd0 	.word	0x20000bd0
 8007e80:	20000c11 	.word	0x20000c11
 8007e84:	20000c12 	.word	0x20000c12
 8007e88:	20000bf0 	.word	0x20000bf0
 8007e8c:	200010a8 	.word	0x200010a8

08007e90 <display>:





void display (void){
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
	uint8_t estado1_Aux = findLastValue((uint32_t)&eeEstado1); // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 8007e96:	4bbe      	ldr	r3, [pc, #760]	@ (8008190 <display+0x300>)
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f7fa febf 	bl	8002c1c <findLastValue>
 8007e9e:	0002      	movs	r2, r0
 8007ea0:	1dbb      	adds	r3, r7, #6
 8007ea2:	701a      	strb	r2, [r3, #0]
    asm ("nop");
 8007ea4:	46c0      	nop			@ (mov r8, r8)

	if(edorefri == 0x00){
 8007ea6:	4bbb      	ldr	r3, [pc, #748]	@ (8008194 <display+0x304>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d100      	bne.n	8007eb0 <display+0x20>
 8007eae:	e092      	b.n	8007fd6 <display+0x146>

	//;================= INICIO RM_20231106 Agrega mensaje de despliegue bL fijo
	//;Despliega el mensaje bL si esta conectado un dispositivo bL
	//;tiene prioridad sobre el mensaje de nocturno.

	if(flagsBattery[batON]){
 8007eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8008198 <display+0x308>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d114      	bne.n	8007ee2 <display+0x52>
	//	goto display_00;
	//}

	//btjf    flagsTxControl,#f_statBLE,display_00   ;¿Esta conectado un dispositivo BLE?
	//btjf		flagsTX2,#2,display_00; Se ha respondido el token BLE alguna vez ?
	if((!flagsTxControl[f_statBLE]) || (!flagsTX2[2]))
 8007eb8:	4bb8      	ldr	r3, [pc, #736]	@ (800819c <display+0x30c>)
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	4053      	eors	r3, r2
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10f      	bne.n	8007ee6 <display+0x56>
 8007ec6:	4bb6      	ldr	r3, [pc, #728]	@ (80081a0 <display+0x310>)
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	4053      	eors	r3, r2
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <display+0x56>
		goto display_00;


	op_menu (0x0B, 0x11);
 8007ed4:	2111      	movs	r1, #17
 8007ed6:	200b      	movs	r0, #11
 8007ed8:	f7ff f960 	bl	800719c <op_menu>
	//datdig1 = 0x0B;			//	mov			datdig1,#$0B         ;Despliega bL
	//datdig2 = 0x11;			//	mov			datdig2,#$11         ;/
	datled_clear();
 8007edc:	f7ff f978 	bl	80071d0 <datled_clear>
	//BitClear(datled,0);			// bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			// bres		datled,#1
	goto display_01;
 8007ee0:	e01e      	b.n	8007f20 <display+0x90>
		goto display_00;
 8007ee2:	46c0      	nop			@ (mov r8, r8)
 8007ee4:	e000      	b.n	8007ee8 <display+0x58>
		goto display_00;
 8007ee6:	46c0      	nop			@ (mov r8, r8)

display_00:
//;================= FIN RM_20231106 Agrega mensaje de despliegue bL fijo
	if (GetRegFlagState(estado1_Aux, est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 8007ee8:	1dbb      	adds	r3, r7, #6
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2201      	movs	r2, #1
 8007eee:	4013      	ands	r3, r2
 8007ef0:	d106      	bne.n	8007f00 <display+0x70>
		goto display_00b;
	}
	op_menu (0x11, 0x10);
 8007ef2:	2110      	movs	r1, #16
 8007ef4:	2011      	movs	r0, #17
 8007ef6:	f7ff f951 	bl	800719c <op_menu>
	//datdig1 = 0x11;		// 	mov			datdig1,#$11         ;Despliega Lo = Off
	//datdig2 = 0x10;		//  mov			datdig2,#$10         ;/
	datled_clear();
 8007efa:	f7ff f969 	bl	80071d0 <datled_clear>
 8007efe:	e000      	b.n	8007f02 <display+0x72>
		goto display_00b;
 8007f00:	46c0      	nop			@ (mov r8, r8)
	//BitClear(datled,0);		//	bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);		//	bres		datled,#1

display_00b:
	if (!flagsa[3]){				//btjf    flagsa,#3,display_01   ;¿Bandera de NOCTURNO activada?
 8007f02:	4ba8      	ldr	r3, [pc, #672]	@ (80081a4 <display+0x314>)
 8007f04:	78db      	ldrb	r3, [r3, #3]
 8007f06:	2201      	movs	r2, #1
 8007f08:	4053      	eors	r3, r2
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <display+0x8e>
		goto display_01;
	}
	op_menu (0x1F, 0x1D);
 8007f10:	211d      	movs	r1, #29
 8007f12:	201f      	movs	r0, #31
 8007f14:	f7ff f942 	bl	800719c <op_menu>
	//datdig1 = 0x1F;		// mov			datdig1,#$1F         ;Despliega n
	//datdig2 = 0x1D;		// mov			datdig2,#$1D         ;/
	datled_clear();
 8007f18:	f7ff f95a 	bl	80071d0 <datled_clear>
 8007f1c:	e000      	b.n	8007f20 <display+0x90>
		goto display_01;
 8007f1e:	46c0      	nop			@ (mov r8, r8)
//;-----------------------------------------------------------------------------------------------

	//;salto solo para pruebas
	//;jra			display_02

	if(cntMsgCmd == 0 ){  //ld	A,cntMsgCmd;//cp A,#$00 ------ if(cntMsgCmd ==  0 )******???
 8007f20:	4ba1      	ldr	r3, [pc, #644]	@ (80081a8 <display+0x318>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d058      	beq.n	8007fda <display+0x14a>
		goto display_02;//jreq		display_02;
	}
	if(cntMsgCmd >= 200){//cp			A,#200; jruge		dpy03; cp	A,#50;---- if(cntMsgCmd <= 200)
 8007f28:	4b9f      	ldr	r3, [pc, #636]	@ (80081a8 <display+0x318>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f2e:	d900      	bls.n	8007f32 <display+0xa2>
 8007f30:	e09e      	b.n	8008070 <display+0x1e0>
		goto dpy03; //************** ?
	}
	if(cntMsgCmd < 50){   //cp	A,#50; //jrult dpy03;
 8007f32:	4b9d      	ldr	r3, [pc, #628]	@ (80081a8 <display+0x318>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b31      	cmp	r3, #49	@ 0x31
 8007f38:	d800      	bhi.n	8007f3c <display+0xac>
 8007f3a:	e09b      	b.n	8008074 <display+0x1e4>
		goto dpy03;
	}

	//; Mensajes a mostrar
	datled_clear();
 8007f3c:	f7ff f948 	bl	80071d0 <datled_clear>
	//BitClear(datled,0);			//bres		datled,#0						;	/ Apaga el signo y punto decimal
	//BitClear(datled,1);			//bres		datled,#1


	if (numMsg != 1){  //cp numMsg,#1
 8007f40:	4b9a      	ldr	r3, [pc, #616]	@ (80081ac <display+0x31c>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d10f      	bne.n	8007f68 <display+0xd8>
		goto askMsg2; //jrne		askMsg2
	}

msg1:
 8007f48:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x10);
 8007f4a:	2110      	movs	r1, #16
 8007f4c:	2011      	movs	r0, #17
 8007f4e:	f7ff f925 	bl	800719c <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x10;//mov			datdig2,#$10         ;/
	if(!GetRegFlagState(estado1_Aux, est1Refri)){//btjf		eeEstado1,#est1Refri,msg1_01 ***********
 8007f52:	1dbb      	adds	r3, r7, #6
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2201      	movs	r2, #1
 8007f58:	4013      	ands	r3, r2
 8007f5a:	d003      	beq.n	8007f64 <display+0xd4>
		goto msg1_01;
	}
	datled[sign] = 1;		   //datled = sign; //bset		datled,#sign;
 8007f5c:	4b94      	ldr	r3, [pc, #592]	@ (80081b0 <display+0x320>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	705a      	strb	r2, [r3, #1]

msg1_01:
	goto dpy07; //jra			dpy07
 8007f62:	e0a0      	b.n	80080a6 <display+0x216>
		goto msg1_01;
 8007f64:	46c0      	nop			@ (mov r8, r8)
	goto dpy07; //jra			dpy07
 8007f66:	e09e      	b.n	80080a6 <display+0x216>
		goto askMsg2; //jrne		askMsg2
 8007f68:	46c0      	nop			@ (mov r8, r8)

askMsg2:
	if(numMsg != 2){ //cp  a,#2 *******************?
 8007f6a:	4b90      	ldr	r3, [pc, #576]	@ (80081ac <display+0x31c>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d10f      	bne.n	8007f92 <display+0x102>
		goto askMsg3; //jrne		askMsg3
	}

msg2:
 8007f72:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x01);
 8007f74:	2101      	movs	r1, #1
 8007f76:	2011      	movs	r0, #17
 8007f78:	f7ff f910 	bl	800719c <op_menu>
	//datdig1 = 0x11; //mov  datdig1,#$11
	//datdig2 = 0x01;//mov			datdig2,#$01
	if(!GetRegFlagState(estado1_Aux, est1Lamp)){//btjf		eeEstado1,#est1Lamp,msg2_01
 8007f7c:	1dbb      	adds	r3, r7, #6
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2204      	movs	r2, #4
 8007f82:	4013      	ands	r3, r2
 8007f84:	d003      	beq.n	8007f8e <display+0xfe>
		goto	msg2_01;
	}
	datdig2 = 0x02;//mov datdig2,#$02
 8007f86:	4b8b      	ldr	r3, [pc, #556]	@ (80081b4 <display+0x324>)
 8007f88:	2202      	movs	r2, #2
 8007f8a:	701a      	strb	r2, [r3, #0]

msg2_01:
	goto dpy07;		// jra dpy07
 8007f8c:	e08b      	b.n	80080a6 <display+0x216>
		goto	msg2_01;
 8007f8e:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;		// jra dpy07
 8007f90:	e089      	b.n	80080a6 <display+0x216>
		goto askMsg3; //jrne		askMsg3
 8007f92:	46c0      	nop			@ (mov r8, r8)


askMsg3:
	if(numMsg  != 3){//a,#3
 8007f94:	4b85      	ldr	r3, [pc, #532]	@ (80081ac <display+0x31c>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d10f      	bne.n	8007fbc <display+0x12c>
		goto askMsg4;  //jrne askMsg4
	}

msg3:
 8007f9c:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x11, 0x00);
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	2011      	movs	r0, #17
 8007fa2:	f7ff f8fb 	bl	800719c <op_menu>
	//datdig1 = 0x11;//mov			datdig1,#$11
	//datdig2 = 0x00;//mov			datdig2,#$00
	if(GetRegFlagState(estado1_Aux, est1LockDr)){//btjt eeEstado1,#est1LockDr,msg3_01 ***************************
 8007fa6:	1dbb      	adds	r3, r7, #6
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2240      	movs	r2, #64	@ 0x40
 8007fac:	4013      	ands	r3, r2
 8007fae:	d103      	bne.n	8007fb8 <display+0x128>
		goto msg3_01;
	}
	datled[sign] = 1;			//bset		datled,#sign;
 8007fb0:	4b7f      	ldr	r3, [pc, #508]	@ (80081b0 <display+0x320>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	705a      	strb	r2, [r3, #1]

msg3_01:
	goto dpy07;//jra dpy07
 8007fb6:	e076      	b.n	80080a6 <display+0x216>
		goto msg3_01;
 8007fb8:	46c0      	nop			@ (mov r8, r8)
	goto dpy07;//jra dpy07
 8007fba:	e074      	b.n	80080a6 <display+0x216>
		goto askMsg4;  //jrne askMsg4
 8007fbc:	46c0      	nop			@ (mov r8, r8)

askMsg4:
	if(numMsg != 4){ //cp			a,#4
 8007fbe:	4b7b      	ldr	r3, [pc, #492]	@ (80081ac <display+0x31c>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	d105      	bne.n	8007fd2 <display+0x142>
		goto askMsg5;  //jrne		askMsg5
	}

msg4:
 8007fc6:	46c0      	nop			@ (mov r8, r8)
	op_menu (0x1F, 0x1D);
 8007fc8:	211d      	movs	r1, #29
 8007fca:	201f      	movs	r0, #31
 8007fcc:	f7ff f8e6 	bl	800719c <op_menu>
	//datdig1 = 0x1F;  //mov datdig1,#$1F
	//datdig2 = 0x1D;  // mov	datdig2,#$1D

	goto dpy07;//jra			dpy07
 8007fd0:	e069      	b.n	80080a6 <display+0x216>
		goto askMsg5;  //jrne		askMsg5
 8007fd2:	46c0      	nop			@ (mov r8, r8)

askMsg5:     ///
	goto dpy07;
 8007fd4:	e067      	b.n	80080a6 <display+0x216>
		goto display_02;
 8007fd6:	46c0      	nop			@ (mov r8, r8)
 8007fd8:	e000      	b.n	8007fdc <display+0x14c>
		goto display_02;//jreq		display_02;
 8007fda:	46c0      	nop			@ (mov r8, r8)


display_02:
//-------------------------------------------------------------------------------------------------

	prog_param();
 8007fdc:	f7fd fae4 	bl	80055a8 <prog_param>

//-----------------------------*************
    if(edorefri == 1){
 8007fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8008194 <display+0x304>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d018      	beq.n	800801a <display+0x18a>
    	goto display_norm3; //jreq		display_norm3;
    }
    if(fauto[7] == 0 ){//btjf		fauto,#7,display_norm3 ********************
 8007fe8:	4b73      	ldr	r3, [pc, #460]	@ (80081b8 <display+0x328>)
 8007fea:	79db      	ldrb	r3, [r3, #7]
 8007fec:	2201      	movs	r2, #1
 8007fee:	4053      	eors	r3, r2
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d113      	bne.n	800801e <display+0x18e>
    	goto display_norm3;
    }
    op_menu (0x0A, 0x0A);
 8007ff6:	210a      	movs	r1, #10
 8007ff8:	200a      	movs	r0, #10
 8007ffa:	f7ff f8cf 	bl	800719c <op_menu>
    //datdig1 = 0x0A;		//mov			datdig1,#$0A
    //datdig2 = 0x0A;		//mov			datdig2,#$0A
    if (GetRegFlagState(lowByte(cntblkh), 6)){//btjt		cntblkl,#6,blk_aa;  ******************
 8007ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80081bc <display+0x32c>)
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	001a      	movs	r2, r3
 8008006:	2340      	movs	r3, #64	@ 0x40
 8008008:	4013      	ands	r3, r2
 800800a:	d104      	bne.n	8008016 <display+0x186>
    	goto blk_aa;
    }
    op_menu (0x1F, 0x1F);
 800800c:	211f      	movs	r1, #31
 800800e:	201f      	movs	r0, #31
 8008010:	f7ff f8c4 	bl	800719c <op_menu>
    //datdig1 = 0x1F; //mov			datdig1,#$1F;
    //datdig2 = 0x1F;  //mov			datdig2,#$1F;

blk_aa:
   goto dpy07; //jra dpy07
 8008014:	e047      	b.n	80080a6 <display+0x216>
    	goto blk_aa;
 8008016:	46c0      	nop			@ (mov r8, r8)
   goto dpy07; //jra dpy07
 8008018:	e045      	b.n	80080a6 <display+0x216>
    	goto display_norm3; //jreq		display_norm3;
 800801a:	46c0      	nop			@ (mov r8, r8)
 800801c:	e000      	b.n	8008020 <display+0x190>
    	goto display_norm3;
 800801e:	46c0      	nop			@ (mov r8, r8)

display_norm3:

      if(!flagsa[arran]){ //btjf		flagsa,#arran,display_j00 ***************************
 8008020:	4b60      	ldr	r3, [pc, #384]	@ (80081a4 <display+0x314>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2201      	movs	r2, #1
 8008026:	4053      	eors	r3, r2
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d02c      	beq.n	8008088 <display+0x1f8>
    	  goto display_j00;
 800802e:	46c0      	nop			@ (mov r8, r8)
      }//
      goto dpy06;//jra dpy06;

display_j00:

      if(cntdpysp == 0){//A,cntdpysp; cp A,#$00;
 8008030:	4b63      	ldr	r3, [pc, #396]	@ (80081c0 <display+0x330>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d019      	beq.n	800806c <display+0x1dc>
    	  goto dpy02;//jreq		dpy02;
      }
      if(cntdpysp >= 200){//cp			A,#200;
 8008038:	4b61      	ldr	r3, [pc, #388]	@ (80081c0 <display+0x330>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2bc7      	cmp	r3, #199	@ 0xc7
 800803e:	d81b      	bhi.n	8008078 <display+0x1e8>
    	  goto dpy03;//jruge		dpy03;
      }
      if(cntdpysp < 150){//cp			A,#150;
 8008040:	4b5f      	ldr	r3, [pc, #380]	@ (80081c0 <display+0x330>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b95      	cmp	r3, #149	@ 0x95
 8008046:	d902      	bls.n	800804e <display+0x1be>
    	  goto dpydif;//jrult dpydif
      }
          sp_dpy();				//	call sp_dpy;     ************CAAAAALLLLLLL**************************
 8008048:	f7fe f884 	bl	8006154 <sp_dpy>
      	  goto dpy07;
 800804c:	e02b      	b.n	80080a6 <display+0x216>
    	  goto dpydif;//jrult dpydif
 800804e:	46c0      	nop			@ (mov r8, r8)
dpydif:
     if(cntdpysp >= 100){//A,#100;
 8008050:	4b5b      	ldr	r3, [pc, #364]	@ (80081c0 <display+0x330>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b63      	cmp	r3, #99	@ 0x63
 8008056:	d811      	bhi.n	800807c <display+0x1ec>
    	 goto dpy03;//jruge		dpy03;
     }
     if(cntdpysp < 50 ){
 8008058:	4b59      	ldr	r3, [pc, #356]	@ (80081c0 <display+0x330>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b31      	cmp	r3, #49	@ 0x31
 800805e:	d90f      	bls.n	8008080 <display+0x1f0>
    	 goto dpy03;//jrult		dpy03;
     }
     dif_dpy();	 		/// Despliega el Diferencial que este operando
 8008060:	f7fe f884 	bl	800616c <dif_dpy>
     datled[1] = 0;		//bres		datled,#1
 8008064:	4b52      	ldr	r3, [pc, #328]	@ (80081b0 <display+0x320>)
 8008066:	2200      	movs	r2, #0
 8008068:	705a      	strb	r2, [r3, #1]
     goto dpy07;//jra			dpy07;
 800806a:	e01c      	b.n	80080a6 <display+0x216>
    	  goto dpy02;//jreq		dpy02;
 800806c:	46c0      	nop			@ (mov r8, r8)

dpy02:
	goto dpy06;//jra dpy06
 800806e:	e00c      	b.n	800808a <display+0x1fa>
		goto dpy03; //************** ?
 8008070:	46c0      	nop			@ (mov r8, r8)
 8008072:	e006      	b.n	8008082 <display+0x1f2>
		goto dpy03;
 8008074:	46c0      	nop			@ (mov r8, r8)
 8008076:	e004      	b.n	8008082 <display+0x1f2>
    	  goto dpy03;//jruge		dpy03;
 8008078:	46c0      	nop			@ (mov r8, r8)
 800807a:	e002      	b.n	8008082 <display+0x1f2>
    	 goto dpy03;//jruge		dpy03;
 800807c:	46c0      	nop			@ (mov r8, r8)
 800807e:	e000      	b.n	8008082 <display+0x1f2>
    	 goto dpy03;//jrult		dpy03;
 8008080:	46c0      	nop			@ (mov r8, r8)



dpy03:

	offdpy();		//call offdpy ********CAAAAALLLLLL****************************
 8008082:	f7fe fbf3 	bl	800686c <offdpy>

display_j02:
    goto dpy07;//jra dpy07
 8008086:	e00e      	b.n	80080a6 <display+0x216>
      goto dpy06;//jra dpy06;
 8008088:	46c0      	nop			@ (mov r8, r8)

dpy06:
   if(fauto[3] == 1){//btjt		fauto,#3,dpy07  *******************************
 800808a:	4b4b      	ldr	r3, [pc, #300]	@ (80081b8 <display+0x328>)
 800808c:	78db      	ldrb	r3, [r3, #3]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <display+0x210>
	   goto dpy07;
   }
   if(flagsb[f_prog]){//btjt		flagsb,#f_prog,dpy07; *******************************
 8008092:	4b4c      	ldr	r3, [pc, #304]	@ (80081c4 <display+0x334>)
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <display+0x214>
	   goto dpy07;
   }

   fallas();	/// *** Revisa si hay que indicar fallas
 800809a:	f7fe fa87 	bl	80065ac <fallas>
 800809e:	e002      	b.n	80080a6 <display+0x216>
	   goto dpy07;
 80080a0:	46c0      	nop			@ (mov r8, r8)
 80080a2:	e000      	b.n	80080a6 <display+0x216>
	   goto dpy07;
 80080a4:	46c0      	nop			@ (mov r8, r8)
		//soloent1();				//call soloent1   ... Ok Funciona
		//soloent (Plantilla [interdh]);	//call soloent   ... Ok Funciona
		// prueba de matematica 02-ago-2024


		Display_1 = dpytab[datdig1];		// Apunta al dato correspondiente
 80080a6:	4b48      	ldr	r3, [pc, #288]	@ (80081c8 <display+0x338>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	001a      	movs	r2, r3
 80080ac:	4b47      	ldr	r3, [pc, #284]	@ (80081cc <display+0x33c>)
 80080ae:	5c9a      	ldrb	r2, [r3, r2]
 80080b0:	4b47      	ldr	r3, [pc, #284]	@ (80081d0 <display+0x340>)
 80080b2:	701a      	strb	r2, [r3, #0]
		Display_2 = dpytab[datdig2];		// Apunta al dato correspondiente
 80080b4:	4b3f      	ldr	r3, [pc, #252]	@ (80081b4 <display+0x324>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	001a      	movs	r2, r3
 80080ba:	4b44      	ldr	r3, [pc, #272]	@ (80081cc <display+0x33c>)
 80080bc:	5c9a      	ldrb	r2, [r3, r2]
 80080be:	4b45      	ldr	r3, [pc, #276]	@ (80081d4 <display+0x344>)
 80080c0:	701a      	strb	r2, [r3, #0]

//;-------------------------------------------------------------------------------
//;--------------------------------  Acciones a realizar con el BUZZER
buzzer:
		//++++++++++++++++++++++++++++++++++++++++++++++
		for(uint8_t k=0; k<8; k++){
 80080c2:	230f      	movs	r3, #15
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e011      	b.n	80080f0 <display+0x260>
			if(trefst[k] ){ //tnz  trefst ***************??
 80080cc:	210f      	movs	r1, #15
 80080ce:	187b      	adds	r3, r7, r1
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	4a41      	ldr	r2, [pc, #260]	@ (80081d8 <display+0x348>)
 80080d4:	5cd3      	ldrb	r3, [r2, r3]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d113      	bne.n	8008102 <display+0x272>
				goto ask_snooze; //jrne	ask_snooze
			}
			if(trefst2[k] ){ //tnz  trefst2  *************** ???
 80080da:	187b      	adds	r3, r7, r1
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	4a3f      	ldr	r2, [pc, #252]	@ (80081dc <display+0x34c>)
 80080e0:	5cd3      	ldrb	r3, [r2, r3]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10f      	bne.n	8008106 <display+0x276>
		for(uint8_t k=0; k<8; k++){
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	3201      	adds	r2, #1
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	230f      	movs	r3, #15
 80080f2:	18fb      	adds	r3, r7, r3
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b07      	cmp	r3, #7
 80080f8:	d9e8      	bls.n	80080cc <display+0x23c>
				goto ask_snooze;  //jrne	ask_snooze
			}
		}

        // silencioAlarmL = 0;//clr	silencioAlarmL
        silencioAlarmH = 0;//clr	silencioAlarmH
 80080fa:	4b39      	ldr	r3, [pc, #228]	@ (80081e0 <display+0x350>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	801a      	strh	r2, [r3, #0]
        goto noLoadSnooze;//jra	noLoadSnooze
 8008100:	e00d      	b.n	800811e <display+0x28e>
				goto ask_snooze; //jrne	ask_snooze
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	e000      	b.n	8008108 <display+0x278>
				goto ask_snooze;  //jrne	ask_snooze
 8008106:	46c0      	nop			@ (mov r8, r8)

ask_snooze:
		if(!botonst[b1_f1]) { //btjf botonst,#b1_f1,noLoadSnooze ///???????????
 8008108:	4b36      	ldr	r3, [pc, #216]	@ (80081e4 <display+0x354>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2201      	movs	r2, #1
 800810e:	4053      	eors	r3, r2
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d102      	bne.n	800811c <display+0x28c>
			goto noLoadSnooze;
		}
		ld_alarmDelay();	  //call  ld_alarmDelay  ************************CAAAAAALLLLL**********************
 8008116:	f7fe feb1 	bl	8006e7c <ld_alarmDelay>
 800811a:	e000      	b.n	800811e <display+0x28e>
			goto noLoadSnooze;
 800811c:	46c0      	nop			@ (mov r8, r8)

noLoadSnooze:
		if(silencioAlarmH == 0){      // Ya terminó el tiempo de snooze?
 800811e:	4b30      	ldr	r3, [pc, #192]	@ (80081e0 <display+0x350>)
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <display+0x29e>
			goto no_snooze;//jreq no_snooze
		}
		flagsBuzzer[0] = 1; 	 //bres	flagsBuzzer,#0;
 8008126:	4b30      	ldr	r3, [pc, #192]	@ (80081e8 <display+0x358>)
 8008128:	2201      	movs	r2, #1
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	e000      	b.n	8008130 <display+0x2a0>
			goto no_snooze;//jreq no_snooze
 800812e:	46c0      	nop			@ (mov r8, r8)

no_snooze:

		if(timeBuzzOn == 0){  //tnz timeBuzzOn*******************************
 8008130:	4b2e      	ldr	r3, [pc, #184]	@ (80081ec <display+0x35c>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00e      	beq.n	8008156 <display+0x2c6>
			goto noBtnBuzz; //jreq noBtnBuzz
		}
		if( flagsBuzzer[1] ){//btjt flagsBuzzer,#1,jp_termina_buzzer  ******?
 8008138:	4b2b      	ldr	r3, [pc, #172]	@ (80081e8 <display+0x358>)
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d108      	bne.n	8008152 <display+0x2c2>
			goto jp_termina_buzzer;
		}
		// waux = 227;//mov     waux,#%11100011
		//mov     BEEP_CSR2,waux *****************************************BEEP_CSR2 no esta********
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 8008140:	4b2b      	ldr	r3, [pc, #172]	@ (80081f0 <display+0x360>)
 8008142:	2104      	movs	r1, #4
 8008144:	0018      	movs	r0, r3
 8008146:	f010 f875 	bl	8018234 <HAL_TIM_PWM_Start>
		flagsBuzzer[1] = 1;		//bset		flagsBuzzer,#1
 800814a:	4b27      	ldr	r3, [pc, #156]	@ (80081e8 <display+0x358>)
 800814c:	2201      	movs	r2, #1
 800814e:	705a      	strb	r2, [r3, #1]
jp_termina_buzzer:
		goto termina_buzzer;//jra termina_buzzer
 8008150:	e186      	b.n	8008460 <display+0x5d0>
			goto jp_termina_buzzer;
 8008152:	46c0      	nop			@ (mov r8, r8)
		goto termina_buzzer;//jra termina_buzzer
 8008154:	e184      	b.n	8008460 <display+0x5d0>
			goto noBtnBuzz; //jreq noBtnBuzz
 8008156:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz:
		if(!flagsBuzzer[1]){//btjf flagsBuzzer,#1,noBtnBuzz_01
 8008158:	4b23      	ldr	r3, [pc, #140]	@ (80081e8 <display+0x358>)
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2201      	movs	r2, #1
 800815e:	4053      	eors	r3, r2
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d150      	bne.n	8008208 <display+0x378>
			goto noBtnBuzz_01;
		}
		ban_buzzer[0] = 0; //bres    ban_buzzer,#0
 8008166:	4b23      	ldr	r3, [pc, #140]	@ (80081f4 <display+0x364>)
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 800816c:	4b22      	ldr	r3, [pc, #136]	@ (80081f8 <display+0x368>)
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011	;BEEP Control/Status Register DESACTIVADO
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008172:	4b1f      	ldr	r3, [pc, #124]	@ (80081f0 <display+0x360>)
 8008174:	2104      	movs	r1, #4
 8008176:	0018      	movs	r0, r3
 8008178:	f010 f93e 	bl	80183f8 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#5000
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 5000;
 800817c:	4b1f      	ldr	r3, [pc, #124]	@ (80081fc <display+0x36c>)
 800817e:	881b      	ldrh	r3, [r3, #0]
 8008180:	4a1f      	ldr	r2, [pc, #124]	@ (8008200 <display+0x370>)
 8008182:	4694      	mov	ip, r2
 8008184:	4463      	add	r3, ip
 8008186:	b29a      	uxth	r2, r3
 8008188:	4b1e      	ldr	r3, [pc, #120]	@ (8008204 <display+0x374>)
 800818a:	801a      	strh	r2, [r3, #0]
 800818c:	e03d      	b.n	800820a <display+0x37a>
 800818e:	46c0      	nop			@ (mov r8, r8)
 8008190:	0803f803 	.word	0x0803f803
 8008194:	20000b98 	.word	0x20000b98
 8008198:	200010a8 	.word	0x200010a8
 800819c:	200010ec 	.word	0x200010ec
 80081a0:	20000f44 	.word	0x20000f44
 80081a4:	20000b78 	.word	0x20000b78
 80081a8:	20001064 	.word	0x20001064
 80081ac:	20001065 	.word	0x20001065
 80081b0:	20000b90 	.word	0x20000b90
 80081b4:	20000b50 	.word	0x20000b50
 80081b8:	20000bd8 	.word	0x20000bd8
 80081bc:	20000b4c 	.word	0x20000b4c
 80081c0:	20000bc2 	.word	0x20000bc2
 80081c4:	20000be8 	.word	0x20000be8
 80081c8:	20000b51 	.word	0x20000b51
 80081cc:	2000000c 	.word	0x2000000c
 80081d0:	20000c79 	.word	0x20000c79
 80081d4:	20000c7a 	.word	0x20000c7a
 80081d8:	20000b88 	.word	0x20000b88
 80081dc:	20000b80 	.word	0x20000b80
 80081e0:	20000fa0 	.word	0x20000fa0
 80081e4:	20000b9c 	.word	0x20000b9c
 80081e8:	20000f98 	.word	0x20000f98
 80081ec:	2000109d 	.word	0x2000109d
 80081f0:	20000590 	.word	0x20000590
 80081f4:	20000f90 	.word	0x20000f90
 80081f8:	20000f88 	.word	0x20000f88
 80081fc:	20000f84 	.word	0x20000f84
 8008200:	00001388 	.word	0x00001388
 8008204:	20000f86 	.word	0x20000f86
			goto noBtnBuzz_01;
 8008208:	46c0      	nop			@ (mov r8, r8)

noBtnBuzz_01:
		flagsBuzzer[1] = 0;//bres flagsBuzzer,#1
 800820a:	4bd0      	ldr	r3, [pc, #832]	@ (800854c <display+0x6bc>)
 800820c:	2200      	movs	r2, #0
 800820e:	705a      	strb	r2, [r3, #1]

		if(flagsBuzzer[0]){//btjt flagsBuzzer,#0,buzzer_0
 8008210:	4bce      	ldr	r3, [pc, #824]	@ (800854c <display+0x6bc>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d111      	bne.n	800823c <display+0x3ac>
			goto buzzer_0;
		}
		ban_buzzer[0] = 0;//bres    ban_buzzer,#0
 8008218:	4bcd      	ldr	r3, [pc, #820]	@ (8008550 <display+0x6c0>)
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]
		edo_buzzer = 0;//mov     edo_buzzer,#0
 800821e:	4bcd      	ldr	r3, [pc, #820]	@ (8008554 <display+0x6c4>)
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
		//mov   	BEEP_CSR2,#%00000011 ****************************BEEP_CSR2 no esta******
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008224:	4bcc      	ldr	r3, [pc, #816]	@ (8008558 <display+0x6c8>)
 8008226:	2104      	movs	r1, #4
 8008228:	0018      	movs	r0, r3
 800822a:	f010 f8e5 	bl	80183f8 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 800822e:	4bcb      	ldr	r3, [pc, #812]	@ (800855c <display+0x6cc>)
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	3364      	adds	r3, #100	@ 0x64
 8008234:	b29a      	uxth	r2, r3
 8008236:	4bca      	ldr	r3, [pc, #808]	@ (8008560 <display+0x6d0>)
 8008238:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo;//jp      realiza_multiplexeo
 800823a:	e111      	b.n	8008460 <display+0x5d0>
			goto buzzer_0;
 800823c:	46c0      	nop			@ (mov r8, r8)

//                	 goto buzzer_0;
buzzer_0:
		edo_buzzer = 1;//edo_buzzer = 1;
 800823e:	4bc5      	ldr	r3, [pc, #788]	@ (8008554 <display+0x6c4>)
 8008240:	2201      	movs	r2, #1
 8008242:	701a      	strb	r2, [r3, #0]

		if(!trefst[f_hv]){// btjf		trefst,#f_hv,buzzer_activado_04
 8008244:	4bc7      	ldr	r3, [pc, #796]	@ (8008564 <display+0x6d4>)
 8008246:	79db      	ldrb	r3, [r3, #7]
 8008248:	2201      	movs	r2, #1
 800824a:	4053      	eors	r3, r2
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <display+0x3ca>
			goto buzzer_activado_04;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008252:	4bc0      	ldr	r3, [pc, #768]	@ (8008554 <display+0x6c4>)
 8008254:	2202      	movs	r2, #2
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e000      	b.n	800825c <display+0x3cc>
			goto buzzer_activado_04;
 800825a:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_04:
		if(!trefst[f_lv]){//btjf		trefst,#f_lv,buzzer_activado_05
 800825c:	4bc1      	ldr	r3, [pc, #772]	@ (8008564 <display+0x6d4>)
 800825e:	799b      	ldrb	r3, [r3, #6]
 8008260:	2201      	movs	r2, #1
 8008262:	4053      	eors	r3, r2
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <display+0x3e2>
			goto buzzer_activado_05;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800826a:	4bba      	ldr	r3, [pc, #744]	@ (8008554 <display+0x6c4>)
 800826c:	2202      	movs	r2, #2
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	e000      	b.n	8008274 <display+0x3e4>
			goto buzzer_activado_05;
 8008272:	46c0      	nop			@ (mov r8, r8)


buzzer_activado_05:
		if(!flagsBattery[batON]){//btjf		flagsBattery,#batON,buzzer_activado_08
 8008274:	4bbc      	ldr	r3, [pc, #752]	@ (8008568 <display+0x6d8>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2201      	movs	r2, #1
 800827a:	4053      	eors	r3, r2
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d103      	bne.n	800828a <display+0x3fa>
			goto buzzer_activado_08;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 8008282:	4bb4      	ldr	r3, [pc, #720]	@ (8008554 <display+0x6c4>)
 8008284:	2202      	movs	r2, #2
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	e000      	b.n	800828c <display+0x3fc>
			goto buzzer_activado_08;
 800828a:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_08:
		if(!flagsTC[f_TC1]){//btjf	flagsTC,#f_TC1,buzzer_activado_01
 800828c:	4bb7      	ldr	r3, [pc, #732]	@ (800856c <display+0x6dc>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2201      	movs	r2, #1
 8008292:	4053      	eors	r3, r2
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d103      	bne.n	80082a2 <display+0x412>
			goto buzzer_activado_01;
		}
		edo_buzzer = 2;//mov     edo_buzzer,#2
 800829a:	4bae      	ldr	r3, [pc, #696]	@ (8008554 <display+0x6c4>)
 800829c:	2202      	movs	r2, #2
 800829e:	701a      	strb	r2, [r3, #0]
 80082a0:	e000      	b.n	80082a4 <display+0x414>
			goto buzzer_activado_01;
 80082a2:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_01:
		if(!flagsTC[f_TC2]){//btjf		flagsTC,#f_TC2,buzzer_activado_02
 80082a4:	4bb1      	ldr	r3, [pc, #708]	@ (800856c <display+0x6dc>)
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2201      	movs	r2, #1
 80082aa:	4053      	eors	r3, r2
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <display+0x42a>
			goto buzzer_activado_02;
		}
		edo_buzzer = 3;//mov     edo_buzzer,#3
 80082b2:	4ba8      	ldr	r3, [pc, #672]	@ (8008554 <display+0x6c4>)
 80082b4:	2203      	movs	r2, #3
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	e000      	b.n	80082bc <display+0x42c>
			goto buzzer_activado_02;
 80082ba:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_02:
		if(!flagsTC[f_TC3]){//btjf		flagsTC,#f_TC3,buzzer_activado_03
 80082bc:	4bab      	ldr	r3, [pc, #684]	@ (800856c <display+0x6dc>)
 80082be:	789b      	ldrb	r3, [r3, #2]
 80082c0:	2201      	movs	r2, #1
 80082c2:	4053      	eors	r3, r2
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d103      	bne.n	80082d2 <display+0x442>
			goto buzzer_activado_03;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80082ca:	4ba2      	ldr	r3, [pc, #648]	@ (8008554 <display+0x6c4>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	701a      	strb	r2, [r3, #0]
 80082d0:	e000      	b.n	80082d4 <display+0x444>
			goto buzzer_activado_03;
 80082d2:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_03:
		if(!flagsBattery[batLOW]){//btjf flagsBattery,#batLOW,buzzer_activado_09
 80082d4:	4ba4      	ldr	r3, [pc, #656]	@ (8008568 <display+0x6d8>)
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2201      	movs	r2, #1
 80082da:	4053      	eors	r3, r2
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <display+0x45a>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 80082e2:	4b9c      	ldr	r3, [pc, #624]	@ (8008554 <display+0x6c4>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e000      	b.n	80082ec <display+0x45c>
			goto buzzer_activado_09;		//; ---------------------------------------------------------------------------------------------------
 80082ea:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_09:

		//ld			A,trefst
		//and			A,#%00111111
		//cp			A,#0
		uint8_t trefst_aux_ = 0;
 80082ec:	230e      	movs	r3, #14
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 80082f4:	230d      	movs	r3, #13
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e015      	b.n	800832a <display+0x49a>
			trefst_aux_ |= (uint8_t) (trefst[k]<<k);
 80082fe:	200d      	movs	r0, #13
 8008300:	183b      	adds	r3, r7, r0
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	4a97      	ldr	r2, [pc, #604]	@ (8008564 <display+0x6d4>)
 8008306:	5cd3      	ldrb	r3, [r2, r3]
 8008308:	001a      	movs	r2, r3
 800830a:	183b      	adds	r3, r7, r0
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	409a      	lsls	r2, r3
 8008310:	0013      	movs	r3, r2
 8008312:	b2d9      	uxtb	r1, r3
 8008314:	220e      	movs	r2, #14
 8008316:	18bb      	adds	r3, r7, r2
 8008318:	18ba      	adds	r2, r7, r2
 800831a:	7812      	ldrb	r2, [r2, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	701a      	strb	r2, [r3, #0]
		for(uint8_t k=0; k<8; k++){
 8008320:	183b      	adds	r3, r7, r0
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	183b      	adds	r3, r7, r0
 8008326:	3201      	adds	r2, #1
 8008328:	701a      	strb	r2, [r3, #0]
 800832a:	230d      	movs	r3, #13
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b07      	cmp	r3, #7
 8008332:	d9e4      	bls.n	80082fe <display+0x46e>
		}

		if((trefst_aux_ & 0x3F) == 0x00){//jreq buzzer_activado_06  **********************?comparacion con and
 8008334:	230e      	movs	r3, #14
 8008336:	18fb      	adds	r3, r7, r3
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	223f      	movs	r2, #63	@ 0x3f
 800833c:	4013      	ands	r3, r2
 800833e:	d003      	beq.n	8008348 <display+0x4b8>
			goto buzzer_activado_06;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008340:	4b84      	ldr	r3, [pc, #528]	@ (8008554 <display+0x6c4>)
 8008342:	2201      	movs	r2, #1
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	e000      	b.n	800834a <display+0x4ba>
			goto buzzer_activado_06;
 8008348:	46c0      	nop			@ (mov r8, r8)

buzzer_activado_06:
		//ld			A,trefst2
		trefst_aux_ = 0;
 800834a:	230e      	movs	r3, #14
 800834c:	18fb      	adds	r3, r7, r3
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]
 8008356:	e013      	b.n	8008380 <display+0x4f0>
			trefst_aux_ |= trefst2[k]<<k;
 8008358:	4a85      	ldr	r2, [pc, #532]	@ (8008570 <display+0x6e0>)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	18d3      	adds	r3, r2, r3
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	001a      	movs	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	409a      	lsls	r2, r3
 8008366:	0013      	movs	r3, r2
 8008368:	b25a      	sxtb	r2, r3
 800836a:	210e      	movs	r1, #14
 800836c:	187b      	adds	r3, r7, r1
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b25b      	sxtb	r3, r3
 8008372:	4313      	orrs	r3, r2
 8008374:	b25a      	sxtb	r2, r3
 8008376:	187b      	adds	r3, r7, r1
 8008378:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3301      	adds	r3, #1
 800837e:	60bb      	str	r3, [r7, #8]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b07      	cmp	r3, #7
 8008384:	dde8      	ble.n	8008358 <display+0x4c8>
		}
		if(trefst_aux_ == 0x00){//cp A,#0 // //jreq		buzzer_activado_07
 8008386:	230e      	movs	r3, #14
 8008388:	18fb      	adds	r3, r7, r3
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <display+0x508>
			goto buzzer_activado_07;
		}
		edo_buzzer = 1;//mov     edo_buzzer,#1
 8008390:	4b70      	ldr	r3, [pc, #448]	@ (8008554 <display+0x6c4>)
 8008392:	2201      	movs	r2, #1
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	e000      	b.n	800839a <display+0x50a>
			goto buzzer_activado_07;
 8008398:	46c0      	nop			@ (mov r8, r8)
buzzer_activado_07:

		//ld			A,edo_buzzer
		//cp			A,#0

		switch(edo_buzzer)
 800839a:	4b6e      	ldr	r3, [pc, #440]	@ (8008554 <display+0x6c4>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d85b      	bhi.n	800845a <display+0x5ca>
 80083a2:	009a      	lsls	r2, r3, #2
 80083a4:	4b73      	ldr	r3, [pc, #460]	@ (8008574 <display+0x6e4>)
 80083a6:	18d3      	adds	r3, r2, r3
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	469f      	mov	pc, r3
		{
			case 0: goto buzzer_activado;
 80083ac:	46c0      	nop			@ (mov r8, r8)
inicializa_tiempo_bz:

		//ldw     X,cnt_gen_ms
		//addw    X,#100
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + 100;
 80083ae:	4b6b      	ldr	r3, [pc, #428]	@ (800855c <display+0x6cc>)
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	3364      	adds	r3, #100	@ 0x64
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008560 <display+0x6d0>)
 80083b8:	801a      	strh	r2, [r3, #0]

		goto realiza_multiplexeo; 		//jp      realiza_multiplexeo
 80083ba:	e051      	b.n	8008460 <display+0x5d0>
			case 1: goto buzzer_etapa_1;
 80083bc:	46c0      	nop			@ (mov r8, r8)



buzzer_etapa_1:
		//ldw			X,#500
		buzzer_ton = 500;//ldw buzzer_ton,X
 80083be:	4b6e      	ldr	r3, [pc, #440]	@ (8008578 <display+0x6e8>)
 80083c0:	22fa      	movs	r2, #250	@ 0xfa
 80083c2:	0052      	lsls	r2, r2, #1
 80083c4:	801a      	strh	r2, [r3, #0]
		//ldw			X,#500
		buzzer_toff = 500;  //ldw	buzzer_toff,X
 80083c6:	4b6d      	ldr	r3, [pc, #436]	@ (800857c <display+0x6ec>)
 80083c8:	22fa      	movs	r2, #250	@ 0xfa
 80083ca:	0052      	lsls	r2, r2, #1
 80083cc:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;                 //mov waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80083ce:	e012      	b.n	80083f6 <display+0x566>
			case 2: goto buzzer_etapa_2;
 80083d0:	46c0      	nop			@ (mov r8, r8)


buzzer_etapa_2:
		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80083d2:	4b69      	ldr	r3, [pc, #420]	@ (8008578 <display+0x6e8>)
 80083d4:	22fa      	movs	r2, #250	@ 0xfa
 80083d6:	0052      	lsls	r2, r2, #1
 80083d8:	801a      	strh	r2, [r3, #0]
		//ldw X,#30000
		buzzer_toff =  30000; //ldw			buzzer_toff,X
 80083da:	4b68      	ldr	r3, [pc, #416]	@ (800857c <display+0x6ec>)
 80083dc:	4a68      	ldr	r2, [pc, #416]	@ (8008580 <display+0x6f0>)
 80083de:	801a      	strh	r2, [r3, #0]
		//waux =  0xE3;   //mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80083e0:	e009      	b.n	80083f6 <display+0x566>
			case 3: goto buzzer_etapa_3;
 80083e2:	46c0      	nop			@ (mov r8, r8)

buzzer_etapa_3:

		//ldw			X,#500
		buzzer_ton = 500;//ldw			buzzer_ton,X
 80083e4:	4b64      	ldr	r3, [pc, #400]	@ (8008578 <display+0x6e8>)
 80083e6:	22fa      	movs	r2, #250	@ 0xfa
 80083e8:	0052      	lsls	r2, r2, #1
 80083ea:	801a      	strh	r2, [r3, #0]
		//ldw			X,#15000
		buzzer_toff = 15000;//ldw			buzzer_toff,X
 80083ec:	4b63      	ldr	r3, [pc, #396]	@ (800857c <display+0x6ec>)
 80083ee:	4a65      	ldr	r2, [pc, #404]	@ (8008584 <display+0x6f4>)
 80083f0:	801a      	strh	r2, [r3, #0]
		//waux = 0xE3;//mov     waux,#%11100011
		goto activa_buzzer;//jp      activa_buzzer
 80083f2:	e000      	b.n	80083f6 <display+0x566>
			case 4: goto buzzer_etapa_4;
 80083f4:	46c0      	nop			@ (mov r8, r8)



activa_buzzer:
		//ldw     X,cnt_gen_ms
		if(cnt_gen_ms != t_buzzer){//cpw     X,t_buzzer
 80083f6:	4b59      	ldr	r3, [pc, #356]	@ (800855c <display+0x6cc>)
 80083f8:	881a      	ldrh	r2, [r3, #0]
 80083fa:	4b59      	ldr	r3, [pc, #356]	@ (8008560 <display+0x6d0>)
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d12d      	bne.n	800845e <display+0x5ce>
			goto termina_buzzer;//jrne    termina_buzzer
		}
		ban_buzzer[0] ^= 1;// BitComplement(ban_buzzer,0);		//ban_buzzer	^= 	(1 << 0);					///ban_buzzer[0] = //bcpl    ban_buzzer,#0 ******************************************BCPL
 8008402:	4b53      	ldr	r3, [pc, #332]	@ (8008550 <display+0x6c0>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2201      	movs	r2, #1
 8008408:	4053      	eors	r3, r2
 800840a:	b2db      	uxtb	r3, r3
 800840c:	1e5a      	subs	r2, r3, #1
 800840e:	4193      	sbcs	r3, r2
 8008410:	b2da      	uxtb	r2, r3
 8008412:	4b4f      	ldr	r3, [pc, #316]	@ (8008550 <display+0x6c0>)
 8008414:	701a      	strb	r2, [r3, #0]
		if(ban_buzzer[0]){//btjt    ban_buzzer,#0,buzzer_on
 8008416:	4b4e      	ldr	r3, [pc, #312]	@ (8008550 <display+0x6c0>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10e      	bne.n	800843c <display+0x5ac>
			goto buzzer_on;
		}
buzzer_off:
 800841e:	46c0      	nop			@ (mov r8, r8)
		//BEEP_CSR2 //mov       BEEP_CSR2,#%00000011 *************BEEP_CSR2  no esta****************
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);					// Apaga Sonido de Buzzer por Pruebas
 8008420:	4b4d      	ldr	r3, [pc, #308]	@ (8008558 <display+0x6c8>)
 8008422:	2104      	movs	r1, #4
 8008424:	0018      	movs	r0, r3
 8008426:	f00f ffe7 	bl	80183f8 <HAL_TIM_PWM_Stop>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_toff
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_toff;
 800842a:	4b4c      	ldr	r3, [pc, #304]	@ (800855c <display+0x6cc>)
 800842c:	881a      	ldrh	r2, [r3, #0]
 800842e:	4b53      	ldr	r3, [pc, #332]	@ (800857c <display+0x6ec>)
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	18d3      	adds	r3, r2, r3
 8008434:	b29a      	uxth	r2, r3
 8008436:	4b4a      	ldr	r3, [pc, #296]	@ (8008560 <display+0x6d0>)
 8008438:	801a      	strh	r2, [r3, #0]
		goto termina_buzzer; //jra     termina_buzzer
 800843a:	e011      	b.n	8008460 <display+0x5d0>
			goto buzzer_on;
 800843c:	46c0      	nop			@ (mov r8, r8)

buzzer_on:
		//mov     BEEP_CSR2,waux ******************BEEP_CSR2 no esta*****
		HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM
 800843e:	4b46      	ldr	r3, [pc, #280]	@ (8008558 <display+0x6c8>)
 8008440:	2104      	movs	r1, #4
 8008442:	0018      	movs	r0, r3
 8008444:	f00f fef6 	bl	8018234 <HAL_TIM_PWM_Start>
		//ldw     X,cnt_gen_ms
		//addw    X,buzzer_ton
		//ldw     t_buzzer,X
		t_buzzer = cnt_gen_ms + buzzer_ton;
 8008448:	4b44      	ldr	r3, [pc, #272]	@ (800855c <display+0x6cc>)
 800844a:	881a      	ldrh	r2, [r3, #0]
 800844c:	4b4a      	ldr	r3, [pc, #296]	@ (8008578 <display+0x6e8>)
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	18d3      	adds	r3, r2, r3
 8008452:	b29a      	uxth	r2, r3
 8008454:	4b42      	ldr	r3, [pc, #264]	@ (8008560 <display+0x6d0>)
 8008456:	801a      	strh	r2, [r3, #0]
 8008458:	e002      	b.n	8008460 <display+0x5d0>
			default: goto buzzer_disponible;//jra			buzzer_disponible
 800845a:	46c0      	nop			@ (mov r8, r8)
 800845c:	e000      	b.n	8008460 <display+0x5d0>
			goto termina_buzzer;//jrne    termina_buzzer
 800845e:	46c0      	nop			@ (mov r8, r8)

//;-----------------------------------------------------------------------------------------------

realiza_multiplexeo:
//;-------------------------------------------------------------------------------
	for(uint8_t k=0;k<8;k++){
 8008460:	1dfb      	adds	r3, r7, #7
 8008462:	2200      	movs	r2, #0
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	e009      	b.n	800847c <display+0x5ec>
		Ind_Par[k] = 1;//	mov			Ind_Par,#$FF
 8008468:	1dfb      	adds	r3, r7, #7
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	4a46      	ldr	r2, [pc, #280]	@ (8008588 <display+0x6f8>)
 800846e:	2101      	movs	r1, #1
 8008470:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<8;k++){
 8008472:	1dfb      	adds	r3, r7, #7
 8008474:	781a      	ldrb	r2, [r3, #0]
 8008476:	1dfb      	adds	r3, r7, #7
 8008478:	3201      	adds	r2, #1
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	1dfb      	adds	r3, r7, #7
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b07      	cmp	r3, #7
 8008482:	d9f1      	bls.n	8008468 <display+0x5d8>
	}

	if(!datled[dp])				//	btjt		datled,#dp,display_j05;		/ Debe encenderse el punto decimal?
 8008484:	4b41      	ldr	r3, [pc, #260]	@ (800858c <display+0x6fc>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2201      	movs	r2, #1
 800848a:	4053      	eors	r3, r2
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <display+0x608>
		Ind_Par[1] = 0;		//	bres		Ind_Par,#1;/ No, apagalo.
 8008492:	4b3d      	ldr	r3, [pc, #244]	@ (8008588 <display+0x6f8>)
 8008494:	2200      	movs	r2, #0
 8008496:	705a      	strb	r2, [r3, #1]
	if(!datled[sign])			//	btjt		datled,#sign,display_j07;	/ Debe encenderse el signo menos?
 8008498:	4b3c      	ldr	r3, [pc, #240]	@ (800858c <display+0x6fc>)
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2201      	movs	r2, #1
 800849e:	4053      	eors	r3, r2
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <display+0x61c>
		Ind_Par[0] = 0;		//	bres		Ind_Par,#0;/ No, apagalo.
 80084a6:	4b38      	ldr	r3, [pc, #224]	@ (8008588 <display+0x6f8>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	701a      	strb	r2, [r3, #0]
	if(!datled[luzC])			//	btjt		datled,#luzC,trefD_01;		/ Debe encenderse el punto decimal?
 80084ac:	4b37      	ldr	r3, [pc, #220]	@ (800858c <display+0x6fc>)
 80084ae:	789b      	ldrb	r3, [r3, #2]
 80084b0:	2201      	movs	r2, #1
 80084b2:	4053      	eors	r3, r2
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <display+0x630>
		Ind_Par[4] = 0;		//	bres		Ind_Par,#4;/ No, apagalo.
 80084ba:	4b33      	ldr	r3, [pc, #204]	@ (8008588 <display+0x6f8>)
 80084bc:	2200      	movs	r2, #0
 80084be:	711a      	strb	r2, [r3, #4]
	if(!datled[luzD])			//	btjt		datled,#luzD,trefD_02;	/ Debe encenderse el signo menos?
 80084c0:	4b32      	ldr	r3, [pc, #200]	@ (800858c <display+0x6fc>)
 80084c2:	78db      	ldrb	r3, [r3, #3]
 80084c4:	2201      	movs	r2, #1
 80084c6:	4053      	eors	r3, r2
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <display+0x644>
		Ind_Par[5] = 0;		//	bres		Ind_Par,#5;/ No, apagalo.
 80084ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008588 <display+0x6f8>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	715a      	strb	r2, [r3, #5]
	if(!datled[luzF])			//	btjt		datled,#luzF,trefD_03;		/ Debe encenderse el punto decimal?
 80084d4:	4b2d      	ldr	r3, [pc, #180]	@ (800858c <display+0x6fc>)
 80084d6:	79db      	ldrb	r3, [r3, #7]
 80084d8:	2201      	movs	r2, #1
 80084da:	4053      	eors	r3, r2
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <display+0x658>
		Ind_Par[6] = 0;		//	bres		Ind_Par,#6;/ No, apagalo.
 80084e2:	4b29      	ldr	r3, [pc, #164]	@ (8008588 <display+0x6f8>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	719a      	strb	r2, [r3, #6]
	if(!datled[luzN])			//	btjt		datled,#luzN,trefD_04;	/ Debe encenderse el signo menos?
 80084e8:	4b28      	ldr	r3, [pc, #160]	@ (800858c <display+0x6fc>)
 80084ea:	791b      	ldrb	r3, [r3, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	4053      	eors	r3, r2
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <display+0x66c>
		Ind_Par[7] = 0;		//	bres		Ind_Par,#7;/ No, apagalo.
 80084f6:	4b24      	ldr	r3, [pc, #144]	@ (8008588 <display+0x6f8>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	71da      	strb	r2, [r3, #7]



	if(edorefri >=2){
 80084fc:	4b24      	ldr	r3, [pc, #144]	@ (8008590 <display+0x700>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d803      	bhi.n	800850c <display+0x67c>
		goto	clt_ledInd;
	}
	Ind_Par[2] = 0;		//	bres		Ind_Par,#2
 8008504:	4b20      	ldr	r3, [pc, #128]	@ (8008588 <display+0x6f8>)
 8008506:	2200      	movs	r2, #0
 8008508:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 800850a:	e058      	b.n	80085be <display+0x72e>
		goto	clt_ledInd;
 800850c:	46c0      	nop			@ (mov r8, r8)

clt_ledInd:

	Ind_Par[2] = 1;			//bset		Ind_Par,#2;
 800850e:	4b1e      	ldr	r3, [pc, #120]	@ (8008588 <display+0x6f8>)
 8008510:	2201      	movs	r2, #1
 8008512:	709a      	strb	r2, [r3, #2]
	if(datled[luzD]){
 8008514:	4b1d      	ldr	r3, [pc, #116]	@ (800858c <display+0x6fc>)
 8008516:	78db      	ldrb	r3, [r3, #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d141      	bne.n	80085a0 <display+0x710>
		goto	blink_dia;
	}

	if(cnt_pta_fan == 0){				// / El contador de puerta abierta llego a cero?
 800851c:	4b1d      	ldr	r3, [pc, #116]	@ (8008594 <display+0x704>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d047      	beq.n	80085b4 <display+0x724>
		goto	no_blk;
	}
	if(!flagsC[f_doorOpen]){// if(!GetRegFlagState(flagsC, f_doorOpen)){
 8008524:	4b1c      	ldr	r3, [pc, #112]	@ (8008598 <display+0x708>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2201      	movs	r2, #1
 800852a:	4053      	eors	r3, r2
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d142      	bne.n	80085b8 <display+0x728>
		goto	no_blk;
	}

	if(GetRegFlagState(lowByte(cntblkh), 5)){				// cntblkl,#5,display_j11;		Parpadea cada 320 ms
 8008532:	4b1a      	ldr	r3, [pc, #104]	@ (800859c <display+0x70c>)
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	001a      	movs	r2, r3
 800853a:	2320      	movs	r3, #32
 800853c:	4013      	ands	r3, r2
 800853e:	d001      	beq.n	8008544 <display+0x6b4>
	    asm ("nop");
 8008540:	46c0      	nop			@ (mov r8, r8)
		goto	display_j11;
 8008542:	e03c      	b.n	80085be <display+0x72e>
	}
	Ind_Par[2] = 0;					//bres		Ind_Par,#2
 8008544:	4b10      	ldr	r3, [pc, #64]	@ (8008588 <display+0x6f8>)
 8008546:	2200      	movs	r2, #0
 8008548:	709a      	strb	r2, [r3, #2]
	goto	no_blk;
 800854a:	e038      	b.n	80085be <display+0x72e>
 800854c:	20000f98 	.word	0x20000f98
 8008550:	20000f90 	.word	0x20000f90
 8008554:	20000f88 	.word	0x20000f88
 8008558:	20000590 	.word	0x20000590
 800855c:	20000f84 	.word	0x20000f84
 8008560:	20000f86 	.word	0x20000f86
 8008564:	20000b88 	.word	0x20000b88
 8008568:	200010a8 	.word	0x200010a8
 800856c:	20000fa4 	.word	0x20000fa4
 8008570:	20000b80 	.word	0x20000b80
 8008574:	0801b298 	.word	0x0801b298
 8008578:	20000f8a 	.word	0x20000f8a
 800857c:	20000f8c 	.word	0x20000f8c
 8008580:	00007530 	.word	0x00007530
 8008584:	00003a98 	.word	0x00003a98
 8008588:	20000c7c 	.word	0x20000c7c
 800858c:	20000b90 	.word	0x20000b90
 8008590:	20000b98 	.word	0x20000b98
 8008594:	20000c27 	.word	0x20000c27
 8008598:	20000c3c 	.word	0x20000c3c
 800859c:	20000b4c 	.word	0x20000b4c
		goto	blink_dia;
 80085a0:	46c0      	nop			@ (mov r8, r8)

blink_dia:
	if(GetRegFlagState(lowByte(cntblkh), 7)){			  // cntblkl,#7,display_j11; 		Parpadea cada 1280 ms
 80085a2:	4b0f      	ldr	r3, [pc, #60]	@ (80085e0 <display+0x750>)
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	db07      	blt.n	80085bc <display+0x72c>
		goto	display_j11;
	}
	Ind_Par[2] = 0;
 80085ac:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <display+0x754>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	709a      	strb	r2, [r3, #2]
 80085b2:	e004      	b.n	80085be <display+0x72e>
		goto	no_blk;
 80085b4:	46c0      	nop			@ (mov r8, r8)
 80085b6:	e002      	b.n	80085be <display+0x72e>
		goto	no_blk;
 80085b8:	46c0      	nop			@ (mov r8, r8)
 80085ba:	e000      	b.n	80085be <display+0x72e>
		goto	display_j11;
 80085bc:	46c0      	nop			@ (mov r8, r8)

display_j11:
no_blk:

	asm ("nop");
 80085be:	46c0      	nop			@ (mov r8, r8)
//;---------------------------------------------------------------------------
//;							Con refri OFF manten led puerta apagado.
//;---------------------------------------------------------------------------

	if (estado1_Aux & (1 << est1Refri)){									//btjt   eeEstado1,#est1Refri,display_00b   ;¿Bandera on/off activada? O, no despliegues nada
 80085c0:	1dbb      	adds	r3, r7, #6
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	4013      	ands	r3, r2
 80085c8:	d104      	bne.n	80085d4 <display+0x744>
		goto	refriON;
	}
refriOFF_2:
 80085ca:	46c0      	nop			@ (mov r8, r8)
	Ind_Par[2] = 1;
 80085cc:	4b05      	ldr	r3, [pc, #20]	@ (80085e4 <display+0x754>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	709a      	strb	r2, [r3, #2]
refriON:

findpy:

		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80085d2:	e000      	b.n	80085d6 <display+0x746>
		goto	refriON;
 80085d4:	46c0      	nop			@ (mov r8, r8)
		goto	main_display;	//jp			main_display			;Manuel 16-FEB-2022:jp			main;
 80085d6:	46c0      	nop			@ (mov r8, r8)
main_display:


}
 80085d8:	46c0      	nop			@ (mov r8, r8)
 80085da:	46bd      	mov	sp, r7
 80085dc:	b004      	add	sp, #16
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000b4c 	.word	0x20000b4c
 80085e4:	20000c7c 	.word	0x20000c7c

080085e8 <inicio>:
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

uint8_t BCDtoByte(uint8_t wreg_);

void inicio (void){
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
	//call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call	mcuset;			/ Refresca los valores de los registros IO que no deben cambiar
	//;call	mcuset1;			/ Refresca los valores de los registros IO que no deben cambiar
	//call   config_RTC      ;RM_20230724 Configura el RTC

	flagsa[7] = 1;				//	mov		flagsa,#$81;	/ Indica que esta en período de arranque
 80085ee:	4bac      	ldr	r3, [pc, #688]	@ (80088a0 <inicio+0x2b8>)
 80085f0:	2201      	movs	r2, #1
 80085f2:	71da      	strb	r2, [r3, #7]
	flagsa[0] = 1;
 80085f4:	4baa      	ldr	r3, [pc, #680]	@ (80088a0 <inicio+0x2b8>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]

	cntseg =0;					//	mov		cntseg,#0;
 80085fa:	4baa      	ldr	r3, [pc, #680]	@ (80088a4 <inicio+0x2bc>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	701a      	strb	r2, [r3, #0]

	luminos = 0x81;				//	mov		luminos,wreg;
 8008600:	4ba9      	ldr	r3, [pc, #676]	@ (80088a8 <inicio+0x2c0>)
 8008602:	2281      	movs	r2, #129	@ 0x81
 8008604:	701a      	strb	r2, [r3, #0]

	cnthitemp = time_ht;		//mov		cnthitemp,#time_ht;;	/ Inicia el tiempo de temperatura alta
 8008606:	4ba9      	ldr	r3, [pc, #676]	@ (80088ac <inicio+0x2c4>)
 8008608:	2278      	movs	r2, #120	@ 0x78
 800860a:	701a      	strb	r2, [r3, #0]
		/* 01-AGO-2024
		 * Falta Codigo de inicializacion I2C
		 */


	retzc_ms_deshielo = tms_retcz_deshielo;			// mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 800860c:	4ba8      	ldr	r3, [pc, #672]	@ (80088b0 <inicio+0x2c8>)
 800860e:	2204      	movs	r2, #4
 8008610:	701a      	strb	r2, [r3, #0]
	retzc_ms_ventilador = tms_retcz_ventilador;		// mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8008612:	4ba8      	ldr	r3, [pc, #672]	@ (80088b4 <inicio+0x2cc>)
 8008614:	22c5      	movs	r2, #197	@ 0xc5
 8008616:	701a      	strb	r2, [r3, #0]
	retzc_ms_compresor = tms_retcz_compresor;		// mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8008618:	4ba7      	ldr	r3, [pc, #668]	@ (80088b8 <inicio+0x2d0>)
 800861a:	22a4      	movs	r2, #164	@ 0xa4
 800861c:	701a      	strb	r2, [r3, #0]
	retzc_ms_lampara = tms_retcz_lampara;			// mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 800861e:	4ba7      	ldr	r3, [pc, #668]	@ (80088bc <inicio+0x2d4>)
 8008620:	220f      	movs	r2, #15
 8008622:	701a      	strb	r2, [r3, #0]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008624:	1cfb      	adds	r3, r7, #3
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e009      	b.n	8008640 <inicio+0x58>
		cruze_por_cero[k] = 0;
 800862c:	1cfb      	adds	r3, r7, #3
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	4aa3      	ldr	r2, [pc, #652]	@ (80088c0 <inicio+0x2d8>)
 8008632:	2100      	movs	r1, #0
 8008634:	54d1      	strb	r1, [r2, r3]
	for(uint8_t k=0;k<5; k++){								// clr     cruze_por_cero
 8008636:	1cfb      	adds	r3, r7, #3
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	1cfb      	adds	r3, r7, #3
 800863c:	3201      	adds	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	1cfb      	adds	r3, r7, #3
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b04      	cmp	r3, #4
 8008646:	d9f1      	bls.n	800862c <inicio+0x44>
	}
	muestras_cal_volt = 0;							// clr     muestras_cal_volt         ;RM_20230908 Variables para mejorar la calibración de voltaje
 8008648:	4b9e      	ldr	r3, [pc, #632]	@ (80088c4 <inicio+0x2dc>)
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
	voltaje_ant_cal = 0;							// clr     voltaje_ant_cal           ;RM_20230908 Variables para mejorar la calibración de voltaje
 800864e:	4b9e      	ldr	r3, [pc, #632]	@ (80088c8 <inicio+0x2e0>)
 8008650:	2200      	movs	r2, #0
 8008652:	701a      	strb	r2, [r3, #0]

														//	ldw		X,#eeprotype				;// manuel_ apuntador para la eeprom
														//	call	rdeeprom
	//Plantilla[protype] = eePlantilla[eeprotype];		//	mov    	protype,waux
	Plantilla[protype] = findLastValue((uint32_t) &eePlantilla[eeprotype]);
 8008654:	4b9d      	ldr	r3, [pc, #628]	@ (80088cc <inicio+0x2e4>)
 8008656:	0018      	movs	r0, r3
 8008658:	f7fa fae0 	bl	8002c1c <findLastValue>
 800865c:	0003      	movs	r3, r0
 800865e:	b2d9      	uxtb	r1, r3
 8008660:	4b9b      	ldr	r3, [pc, #620]	@ (80088d0 <inicio+0x2e8>)
 8008662:	2257      	movs	r2, #87	@ 0x57
 8008664:	5499      	strb	r1, [r3, r2]
	voltl = 110;
 8008666:	4b9b      	ldr	r3, [pc, #620]	@ (80088d4 <inicio+0x2ec>)
 8008668:	226e      	movs	r2, #110	@ 0x6e
 800866a:	701a      	strb	r2, [r3, #0]
	if(Plantilla[protype] != 0x02){					// Protección de voltaje 220v?
 800866c:	4b98      	ldr	r3, [pc, #608]	@ (80088d0 <inicio+0x2e8>)
 800866e:	2257      	movs	r2, #87	@ 0x57
 8008670:	5c9b      	ldrb	r3, [r3, r2]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d103      	bne.n	800867e <inicio+0x96>
		goto no_ini_210;
	}
	voltl = 210;							//  Carga el promedio de muestras con 210
 8008676:	4b97      	ldr	r3, [pc, #604]	@ (80088d4 <inicio+0x2ec>)
 8008678:	22d2      	movs	r2, #210	@ 0xd2
 800867a:	701a      	strb	r2, [r3, #0]
 800867c:	e000      	b.n	8008680 <inicio+0x98>
		goto no_ini_210;
 800867e:	46c0      	nop			@ (mov r8, r8)
no_ini_210:

	flagsb[f_luzb]= 1;					//bset		flagsb,#f_luzb
 8008680:	4b95      	ldr	r3, [pc, #596]	@ (80088d8 <inicio+0x2f0>)
 8008682:	2201      	movs	r2, #1
 8008684:	701a      	strb	r2, [r3, #0]
	flagsb[f_prog]= 0;					//bres		flagsb,#f_prog
 8008686:	4b94      	ldr	r3, [pc, #592]	@ (80088d8 <inicio+0x2f0>)
 8008688:	2200      	movs	r2, #0
 800868a:	705a      	strb	r2, [r3, #1]
	flagsb[f_sprm]= 0;					//bres		flagsb,#f_sprm;								/ cancela bandera de programacion
 800868c:	4b92      	ldr	r3, [pc, #584]	@ (80088d8 <inicio+0x2f0>)
 800868e:	2200      	movs	r2, #0
 8008690:	70da      	strb	r2, [r3, #3]
	//;bres		flagsb,#f_sgpo;								/ cancela bandera de programacion

	deb2_btn1 = 150;		//mov			deb2_btn1,#150;#175
 8008692:	4b92      	ldr	r3, [pc, #584]	@ (80088dc <inicio+0x2f4>)
 8008694:	2296      	movs	r2, #150	@ 0x96
 8008696:	701a      	strb	r2, [r3, #0]
	deb2_btn2 = 150;		//mov			deb2_btn2,#150;#175
 8008698:	4b91      	ldr	r3, [pc, #580]	@ (80088e0 <inicio+0x2f8>)
 800869a:	2296      	movs	r2, #150	@ 0x96
 800869c:	701a      	strb	r2, [r3, #0]
	deb2_btn3 = 150;		//mov			deb2_btn3,#150;#175
 800869e:	4b91      	ldr	r3, [pc, #580]	@ (80088e4 <inicio+0x2fc>)
 80086a0:	2296      	movs	r2, #150	@ 0x96
 80086a2:	701a      	strb	r2, [r3, #0]
	deb2_btn4 = 150;		//mov			deb2_btn4,#150;#175
 80086a4:	4b90      	ldr	r3, [pc, #576]	@ (80088e8 <inicio+0x300>)
 80086a6:	2296      	movs	r2, #150	@ 0x96
 80086a8:	701a      	strb	r2, [r3, #0]

	Plantilla[dato_seg1] = 0xAA;		//mov			dato_seg1,#$AA
 80086aa:	4b89      	ldr	r3, [pc, #548]	@ (80088d0 <inicio+0x2e8>)
 80086ac:	22aa      	movs	r2, #170	@ 0xaa
 80086ae:	701a      	strb	r2, [r3, #0]
	Plantilla[dato_seg2] = 0x66;		//mov			dato_seg2,#$66
 80086b0:	4b87      	ldr	r3, [pc, #540]	@ (80088d0 <inicio+0x2e8>)
 80086b2:	2241      	movs	r2, #65	@ 0x41
 80086b4:	2166      	movs	r1, #102	@ 0x66
 80086b6:	5499      	strb	r1, [r3, r2]
	Plantilla[dato_seg3] = 0xCC;		//mov			dato_seg3,#$CC
 80086b8:	4b85      	ldr	r3, [pc, #532]	@ (80088d0 <inicio+0x2e8>)
 80086ba:	227f      	movs	r2, #127	@ 0x7f
 80086bc:	21cc      	movs	r1, #204	@ 0xcc
 80086be:	5499      	strb	r1, [r3, r2]

	//cnt_pta_fan = eePlantilla[eetimepaf];			//mov			cnt_pta_fan,eetimepaf
	cnt_pta_fan = findLastValue((uint32_t) &eePlantilla[eetimepaf]);
 80086c0:	4b8a      	ldr	r3, [pc, #552]	@ (80088ec <inicio+0x304>)
 80086c2:	0018      	movs	r0, r3
 80086c4:	f7fa faaa 	bl	8002c1c <findLastValue>
 80086c8:	0003      	movs	r3, r0
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	4b88      	ldr	r3, [pc, #544]	@ (80088f0 <inicio+0x308>)
 80086ce:	701a      	strb	r2, [r3, #0]

	load_tiempoAhorro1();		//call	load_tiempoAhorro1;				/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 80086d0:	f7fe fa8e 	bl	8006bf0 <load_tiempoAhorro1>
	load_tiempoAhorro2();		//call	load_tiempoAhorro2;
 80086d4:	f7fe faaa 	bl	8006c2c <load_tiempoAhorro2>
	//timeSeconds_HW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix1) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix2));		//	ldw		X,eeTimeUnix1
																									//	ldw		timeSeconds_HW,X
	//timeSeconds_LW = (uint16_t)(eeTimeUnix3 * 256) + (uint16_t)(eeTimeUnix4);		//	ldw		X,eeTimeUnix3
	//timeSeconds_LW = (uint16_t)(findLastValue((uint32_t) &eeTimeUnix3) * 256) + (uint16_t)(findLastValue((uint32_t) &eeTimeUnix4));		//	ldw		X,eeTimeUnix3
																										//	ldw		timeSeconds_LW,X
	cntLogger_H	= 0;			//	clr		cntLogger_H				;
 80086d8:	4b86      	ldr	r3, [pc, #536]	@ (80088f4 <inicio+0x30c>)
 80086da:	2200      	movs	r2, #0
 80086dc:	801a      	strh	r2, [r3, #0]
	//	clr		cntLogger_L				;	contador en segundos para loggear datos
	cntBlockFlash =	0;			//	clr		cntBlockFlash			;	contador de bloques de Flash grabados (con bloques de 128bytes se pueden grabar hasta 32k de memoria)
 80086de:	4b86      	ldr	r3, [pc, #536]	@ (80088f8 <inicio+0x310>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
	cntByteBlock = 0;			//	clr		cntByteBlock			; contador de bytes grabados en buffer de datos
 80086e4:	4b85      	ldr	r3, [pc, #532]	@ (80088fc <inicio+0x314>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
	cntByteLogg = 0;			//	clr		cntByteLogg				; contador de bytes grabados en cada loggeo
 80086ea:	4b85      	ldr	r3, [pc, #532]	@ (8008900 <inicio+0x318>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]

	flagsEvent[3] = 1;			// bset 	flagsEvent,#3			; Indica inicio de evento power-on
 80086f0:	4b84      	ldr	r3, [pc, #528]	@ (8008904 <inicio+0x31c>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	70da      	strb	r2, [r3, #3]


	//timeTxTWF = 15;			//	mov		timeTxTWF,#15;					/ carga tiempo de envio de token Wifi
							//	ldw		X,#300;
	timeTxTWF = 20;
 80086f6:	4b84      	ldr	r3, [pc, #528]	@ (8008908 <inicio+0x320>)
 80086f8:	2214      	movs	r2, #20
 80086fa:	701a      	strb	r2, [r3, #0]
	timeoutTWF = 300;		//	ldw		timeoutTWF,X
 80086fc:	4b83      	ldr	r3, [pc, #524]	@ (800890c <inicio+0x324>)
 80086fe:	2296      	movs	r2, #150	@ 0x96
 8008700:	0052      	lsls	r2, r2, #1
 8008702:	801a      	strh	r2, [r3, #0]
	// carga tiempo de envio de token BLE
	//	mov		timeTxTBLE,#10;
	//	ldw		X,#300;
	//	ldw		timeoutTBLE,X
	timeTxTBLE = 10;
 8008704:	4b82      	ldr	r3, [pc, #520]	@ (8008910 <inicio+0x328>)
 8008706:	220a      	movs	r2, #10
 8008708:	701a      	strb	r2, [r3, #0]
	timeoutTBLE = 300;
 800870a:	4b82      	ldr	r3, [pc, #520]	@ (8008914 <inicio+0x32c>)
 800870c:	2296      	movs	r2, #150	@ 0x96
 800870e:	0052      	lsls	r2, r2, #1
 8008710:	801a      	strh	r2, [r3, #0]
//	;---  Obteniendo dirección de la última muestra tomada en el logger de datos


	point_X = &dataLogger[127];			// ; carga inicio de logger de datos
 8008712:	4b81      	ldr	r3, [pc, #516]	@ (8008918 <inicio+0x330>)
 8008714:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	781a      	ldrb	r2, [r3, #0]
 800871a:	4b80      	ldr	r3, [pc, #512]	@ (800891c <inicio+0x334>)
 800871c:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;						//
 800871e:	4b7f      	ldr	r3, [pc, #508]	@ (800891c <inicio+0x334>)
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	4b7f      	ldr	r3, [pc, #508]	@ (8008920 <inicio+0x338>)
 8008724:	701a      	strb	r2, [r3, #0]
	waux = 0;
 8008726:	4b7f      	ldr	r3, [pc, #508]	@ (8008924 <inicio+0x33c>)
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]

checkNextDataBlock:
	if(point_X != &dataLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	4b7e      	ldr	r3, [pc, #504]	@ (8008928 <inicio+0x340>)
 8008730:	429a      	cmp	r2, r3
 8008732:	d103      	bne.n	800873c <inicio+0x154>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
	}
	waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 8008734:	4b7b      	ldr	r3, [pc, #492]	@ (8008924 <inicio+0x33c>)
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
	goto  lastDataBlockFound;
 800873a:	e015      	b.n	8008768 <inicio+0x180>
		goto checkNextDataBlock_01;		//; No, continúa la busqueda
 800873c:	46c0      	nop			@ (mov r8, r8)
checkNextDataBlock_01:
	waux++;								//; incrementa contador de bloques revisados
 800873e:	4b79      	ldr	r3, [pc, #484]	@ (8008924 <inicio+0x33c>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	3301      	adds	r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	4b77      	ldr	r3, [pc, #476]	@ (8008924 <inicio+0x33c>)
 8008748:	701a      	strb	r2, [r3, #0]
	point_X += 128;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3380      	adds	r3, #128	@ 0x80
 800874e:	607b      	str	r3, [r7, #4]
	STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	4b71      	ldr	r3, [pc, #452]	@ (800891c <inicio+0x334>)
 8008756:	701a      	strb	r2, [r3, #0]
	if(STM8_A == wreg){
 8008758:	4b70      	ldr	r3, [pc, #448]	@ (800891c <inicio+0x334>)
 800875a:	781a      	ldrb	r2, [r3, #0]
 800875c:	4b70      	ldr	r3, [pc, #448]	@ (8008920 <inicio+0x338>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d100      	bne.n	8008766 <inicio+0x17e>
		goto checkNextDataBlock;		//; sí, continua buscando hasta encontrar diferencia
 8008764:	e7e2      	b.n	800872c <inicio+0x144>
	}
lastDataBlockFound:
 8008766:	46c0      	nop			@ (mov r8, r8)
	cntBlockDATA = waux;				//; inicializa contador con el bloque encontrado.
 8008768:	4b6e      	ldr	r3, [pc, #440]	@ (8008924 <inicio+0x33c>)
 800876a:	781a      	ldrb	r2, [r3, #0]
 800876c:	4b6f      	ldr	r3, [pc, #444]	@ (800892c <inicio+0x344>)
 800876e:	701a      	strb	r2, [r3, #0]

	point_X = (cntBlockDATA * 128) + &dataLogger[0] ;	//;	Carga el tamaño de los bloques (128 bytes) y Multiplicalos
 8008770:	4b6e      	ldr	r3, [pc, #440]	@ (800892c <inicio+0x344>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	01db      	lsls	r3, r3, #7
 8008776:	001a      	movs	r2, r3
 8008778:	4b6d      	ldr	r3, [pc, #436]	@ (8008930 <inicio+0x348>)
 800877a:	18d3      	adds	r3, r2, r3
 800877c:	607b      	str	r3, [r7, #4]
	point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	337e      	adds	r3, #126	@ 0x7e
 8008782:	607b      	str	r3, [r7, #4]

	cntByteBlockDATA = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	4b6a      	ldr	r3, [pc, #424]	@ (8008934 <inicio+0x34c>)
 800878a:	701a      	strb	r2, [r3, #0]

	dirBuffer = &data_buffer[0];
 800878c:	4b6a      	ldr	r3, [pc, #424]	@ (8008938 <inicio+0x350>)
 800878e:	4a6b      	ldr	r2, [pc, #428]	@ (800893c <inicio+0x354>)
 8008790:	601a      	str	r2, [r3, #0]
	dirLogger = &dataLogger[0];
 8008792:	4b6b      	ldr	r3, [pc, #428]	@ (8008940 <inicio+0x358>)
 8008794:	4a66      	ldr	r2, [pc, #408]	@ (8008930 <inicio+0x348>)
 8008796:	601a      	str	r2, [r3, #0]
	cntBlockFlash = cntBlockDATA;
 8008798:	4b64      	ldr	r3, [pc, #400]	@ (800892c <inicio+0x344>)
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	4b56      	ldr	r3, [pc, #344]	@ (80088f8 <inicio+0x310>)
 800879e:	701a      	strb	r2, [r3, #0]
	load_next_buffer();						//call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 80087a0:	f7fe fa76 	bl	8006c90 <load_next_buffer>


//	;---  Obteniendo dirección de la última muestra tomada en el logger de eventos

	point_X = &eventLogger[127];			// ; carga inicio de logger de eventos
 80087a4:	4b67      	ldr	r3, [pc, #412]	@ (8008944 <inicio+0x35c>)
 80087a6:	607b      	str	r3, [r7, #4]
	STM8_A = *point_X;						// ; toma el último byte del primer bloque de Flash
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	781a      	ldrb	r2, [r3, #0]
 80087ac:	4b5b      	ldr	r3, [pc, #364]	@ (800891c <inicio+0x334>)
 80087ae:	701a      	strb	r2, [r3, #0]
	wreg = STM8_A;					//
 80087b0:	4b5a      	ldr	r3, [pc, #360]	@ (800891c <inicio+0x334>)
 80087b2:	781a      	ldrb	r2, [r3, #0]
 80087b4:	4b5a      	ldr	r3, [pc, #360]	@ (8008920 <inicio+0x338>)
 80087b6:	701a      	strb	r2, [r3, #0]
	waux = 0;
 80087b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008924 <inicio+0x33c>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]

checkNextEventBlock:
		if(point_X != &eventLoggerFin){	//; se llegó al fin del logger (sin encontrar datos diferentes) ?
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4b61      	ldr	r3, [pc, #388]	@ (8008948 <inicio+0x360>)
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d103      	bne.n	80087ce <inicio+0x1e6>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
		}
		waux = 0;							//; si todos son iguales considera que el bloque final fue el último en ser grabado
 80087c6:	4b57      	ldr	r3, [pc, #348]	@ (8008924 <inicio+0x33c>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
		goto  lastEventBlockFound;
 80087cc:	e015      	b.n	80087fa <inicio+0x212>
			goto checkNextEventBlock_01;		//; No, continúa la busqueda
 80087ce:	46c0      	nop			@ (mov r8, r8)
checkNextEventBlock_01:
		waux++;								//; incrementa contador de bloques revisados
 80087d0:	4b54      	ldr	r3, [pc, #336]	@ (8008924 <inicio+0x33c>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	4b52      	ldr	r3, [pc, #328]	@ (8008924 <inicio+0x33c>)
 80087da:	701a      	strb	r2, [r3, #0]
		point_X += 128;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3380      	adds	r3, #128	@ 0x80
 80087e0:	607b      	str	r3, [r7, #4]
		STM8_A = (*point_X);				//; toma el último byte del siguiente bloque de Flash
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	781a      	ldrb	r2, [r3, #0]
 80087e6:	4b4d      	ldr	r3, [pc, #308]	@ (800891c <inicio+0x334>)
 80087e8:	701a      	strb	r2, [r3, #0]
		if(STM8_A == wreg){					// ;	son iguales ?
 80087ea:	4b4c      	ldr	r3, [pc, #304]	@ (800891c <inicio+0x334>)
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	4b4c      	ldr	r3, [pc, #304]	@ (8008920 <inicio+0x338>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d100      	bne.n	80087f8 <inicio+0x210>
			goto checkNextEventBlock;		//; sí, continua buscando hasta encontrar diferencia
 80087f6:	e7e2      	b.n	80087be <inicio+0x1d6>
		}
lastEventBlockFound:
 80087f8:	46c0      	nop			@ (mov r8, r8)
		cntBlockEVENT = waux;				//; inicializa contador con el bloque encontrado.
 80087fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008924 <inicio+0x33c>)
 80087fc:	781a      	ldrb	r2, [r3, #0]
 80087fe:	4b53      	ldr	r3, [pc, #332]	@ (800894c <inicio+0x364>)
 8008800:	701a      	strb	r2, [r3, #0]

		point_X = (cntBlockEVENT * 128) + &eventLogger[0];	//;	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
 8008802:	4b52      	ldr	r3, [pc, #328]	@ (800894c <inicio+0x364>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	01db      	lsls	r3, r3, #7
 8008808:	001a      	movs	r2, r3
 800880a:	4b51      	ldr	r3, [pc, #324]	@ (8008950 <inicio+0x368>)
 800880c:	18d3      	adds	r3, r2, r3
 800880e:	607b      	str	r3, [r7, #4]
		point_X += 126; 									//; apunta al penúltimo byte de ese bloque
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	337e      	adds	r3, #126	@ 0x7e
 8008814:	607b      	str	r3, [r7, #4]

		cntByteBlockEVENT = (*point_X);						//; inicializa el contador de bytes grabados en el bloque
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	4b4e      	ldr	r3, [pc, #312]	@ (8008954 <inicio+0x36c>)
 800881c:	701a      	strb	r2, [r3, #0]

		dirBuffer = &event_buffer[0];
 800881e:	4b46      	ldr	r3, [pc, #280]	@ (8008938 <inicio+0x350>)
 8008820:	4a4d      	ldr	r2, [pc, #308]	@ (8008958 <inicio+0x370>)
 8008822:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 8008824:	4b46      	ldr	r3, [pc, #280]	@ (8008940 <inicio+0x358>)
 8008826:	4a4a      	ldr	r2, [pc, #296]	@ (8008950 <inicio+0x368>)
 8008828:	601a      	str	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;
 800882a:	4b48      	ldr	r3, [pc, #288]	@ (800894c <inicio+0x364>)
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	4b32      	ldr	r3, [pc, #200]	@ (80088f8 <inicio+0x310>)
 8008830:	701a      	strb	r2, [r3, #0]
		load_next_buffer();						//; carga buffer de RAM con el bloque de datos
 8008832:	f7fe fa2d 	bl	8006c90 <load_next_buffer>

		flagsC[f_spReached]=0;			// bres	flagsC,#f_spReached
 8008836:	4b49      	ldr	r3, [pc, #292]	@ (800895c <inicio+0x374>)
 8008838:	2200      	movs	r2, #0
 800883a:	71da      	strb	r2, [r3, #7]

	//;/ carga estado inicial de la lampara
		flagsC[f_lampDoor] = 0;			//	bres		flagsC,#f_lampDoor
 800883c:	4b47      	ldr	r3, [pc, #284]	@ (800895c <inicio+0x374>)
 800883e:	2200      	movs	r2, #0
 8008840:	719a      	strb	r2, [r3, #6]
		uint8_t estado1_Aux = findLastValue((uint32_t)&eeEstado1); // Agrego para no realizar tantas llamadas; CGM 25/02/2025
 8008842:	4b47      	ldr	r3, [pc, #284]	@ (8008960 <inicio+0x378>)
 8008844:	0018      	movs	r0, r3
 8008846:	f7fa f9e9 	bl	8002c1c <findLastValue>
 800884a:	0002      	movs	r2, r0
 800884c:	1cbb      	adds	r3, r7, #2
 800884e:	701a      	strb	r2, [r3, #0]
		if(!GetRegFlagState(estado1_Aux, est1Lamp)){
 8008850:	1cbb      	adds	r3, r7, #2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2204      	movs	r2, #4
 8008856:	4013      	ands	r3, r2
 8008858:	d003      	beq.n	8008862 <inicio+0x27a>
			goto initLampOFF;
		}
		flagsC[f_lampDoor] = 1;			//	bset		flagsC,#f_lampDoor
 800885a:	4b40      	ldr	r3, [pc, #256]	@ (800895c <inicio+0x374>)
 800885c:	2201      	movs	r2, #1
 800885e:	719a      	strb	r2, [r3, #6]
 8008860:	e000      	b.n	8008864 <inicio+0x27c>
			goto initLampOFF;
 8008862:	46c0      	nop			@ (mov r8, r8)
initLampOFF:
		if(GetRegFlagState(Plantilla[logicos2], funReleDesh))//btjt		logicos2,#funReleDesh,deshTypeAct_02; omite estado Lock sí se eligio función deshielo para relevador
 8008864:	4b1a      	ldr	r3, [pc, #104]	@ (80088d0 <inicio+0x2e8>)
 8008866:	225b      	movs	r2, #91	@ 0x5b
 8008868:	5c9b      	ldrb	r3, [r3, r2]
 800886a:	001a      	movs	r2, r3
 800886c:	2308      	movs	r3, #8
 800886e:	4013      	ands	r3, r2
 8008870:	d10b      	bne.n	800888a <inicio+0x2a2>
			goto deshTypeAct_02;
		//;/ carga estado inicial de la cerradura
		GPIOR0[f_dh] = 0;			//	bres		GPIOR0,#f_dh
 8008872:	4b3c      	ldr	r3, [pc, #240]	@ (8008964 <inicio+0x37c>)
 8008874:	2200      	movs	r2, #0
 8008876:	705a      	strb	r2, [r3, #1]
		if(!GetRegFlagState(estado1_Aux, est1LockDr)){
 8008878:	1cbb      	adds	r3, r7, #2
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2240      	movs	r2, #64	@ 0x40
 800887e:	4013      	ands	r3, r2
 8008880:	d005      	beq.n	800888e <inicio+0x2a6>
			goto initLockDrOFF;
		}
		GPIOR0[f_dh] = 1;			//	bset		GPIOR0,#f_dh
 8008882:	4b38      	ldr	r3, [pc, #224]	@ (8008964 <inicio+0x37c>)
 8008884:	2201      	movs	r2, #1
 8008886:	705a      	strb	r2, [r3, #1]
 8008888:	e002      	b.n	8008890 <inicio+0x2a8>
			goto deshTypeAct_02;
 800888a:	46c0      	nop			@ (mov r8, r8)
 800888c:	e000      	b.n	8008890 <inicio+0x2a8>
			goto initLockDrOFF;
 800888e:	46c0      	nop			@ (mov r8, r8)
initLockDrOFF:
deshTypeAct_02:
//		ldw			X,#90
//		ldw			cntSetName,X
		cntSetName = 90;
 8008890:	4b35      	ldr	r3, [pc, #212]	@ (8008968 <inicio+0x380>)
 8008892:	225a      	movs	r2, #90	@ 0x5a
 8008894:	801a      	strh	r2, [r3, #0]
	//jp	end_init
}
 8008896:	46c0      	nop			@ (mov r8, r8)
 8008898:	46bd      	mov	sp, r7
 800889a:	b002      	add	sp, #8
 800889c:	bd80      	pop	{r7, pc}
 800889e:	46c0      	nop			@ (mov r8, r8)
 80088a0:	20000b78 	.word	0x20000b78
 80088a4:	20000b4b 	.word	0x20000b4b
 80088a8:	20000bca 	.word	0x20000bca
 80088ac:	20000bcb 	.word	0x20000bcb
 80088b0:	20000c57 	.word	0x20000c57
 80088b4:	20000c58 	.word	0x20000c58
 80088b8:	20000c56 	.word	0x20000c56
 80088bc:	20000c59 	.word	0x20000c59
 80088c0:	20000c5c 	.word	0x20000c5c
 80088c4:	20000c61 	.word	0x20000c61
 80088c8:	20000c62 	.word	0x20000c62
 80088cc:	0803f057 	.word	0x0803f057
 80088d0:	200000b8 	.word	0x200000b8
 80088d4:	20000bce 	.word	0x20000bce
 80088d8:	20000be8 	.word	0x20000be8
 80088dc:	20000c10 	.word	0x20000c10
 80088e0:	20000c11 	.word	0x20000c11
 80088e4:	20000c12 	.word	0x20000c12
 80088e8:	20000c13 	.word	0x20000c13
 80088ec:	0803f048 	.word	0x0803f048
 80088f0:	20000c27 	.word	0x20000c27
 80088f4:	20000d98 	.word	0x20000d98
 80088f8:	20000d9a 	.word	0x20000d9a
 80088fc:	20000d9b 	.word	0x20000d9b
 8008900:	20000d9c 	.word	0x20000d9c
 8008904:	20000ec8 	.word	0x20000ec8
 8008908:	20000f3a 	.word	0x20000f3a
 800890c:	20000f4c 	.word	0x20000f4c
 8008910:	200010fa 	.word	0x200010fa
 8008914:	200010fc 	.word	0x200010fc
 8008918:	0803c07f 	.word	0x0803c07f
 800891c:	200008d0 	.word	0x200008d0
 8008920:	20000b55 	.word	0x20000b55
 8008924:	20000b54 	.word	0x20000b54
 8008928:	0803efff 	.word	0x0803efff
 800892c:	20000dad 	.word	0x20000dad
 8008930:	0803c000 	.word	0x0803c000
 8008934:	20000dac 	.word	0x20000dac
 8008938:	20000da4 	.word	0x20000da4
 800893c:	20000c8c 	.word	0x20000c8c
 8008940:	20000da0 	.word	0x20000da0
 8008944:	0803707f 	.word	0x0803707f
 8008948:	0803bfff 	.word	0x0803bfff
 800894c:	20000daf 	.word	0x20000daf
 8008950:	08037000 	.word	0x08037000
 8008954:	20000dae 	.word	0x20000dae
 8008958:	20000d0c 	.word	0x20000d0c
 800895c:	20000c3c 	.word	0x20000c3c
 8008960:	0803f803 	.word	0x0803f803
 8008964:	20000ba4 	.word	0x20000ba4
 8008968:	200010f8 	.word	0x200010f8

0800896c <timeBCD_to_UNIX>:

void timeBCD_to_UNIX(void){
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
	// mov			wreg,timeBCD_year
	// call		BCDtoByte
	// ld			A,waux
	// ld			xl,A
	// addw		X,#2000
	time_year = (uint16_t) (2000 + BCDtoByte(timeBCD_year));// ldw			time_year,X
 8008970:	4b1f      	ldr	r3, [pc, #124]	@ (80089f0 <timeBCD_to_UNIX+0x84>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	0018      	movs	r0, r3
 8008976:	f000 f853 	bl	8008a20 <BCDtoByte>
 800897a:	0003      	movs	r3, r0
 800897c:	22fa      	movs	r2, #250	@ 0xfa
 800897e:	00d2      	lsls	r2, r2, #3
 8008980:	4694      	mov	ip, r2
 8008982:	4463      	add	r3, ip
 8008984:	b29a      	uxth	r2, r3
 8008986:	4b1b      	ldr	r3, [pc, #108]	@ (80089f4 <timeBCD_to_UNIX+0x88>)
 8008988:	801a      	strh	r2, [r3, #0]
	// ld			A,timeBCD_month
	// and			A,#$1F
	// ld			wreg,A
	// call		BCDtoByte
	// mov			time_month,waux
	time_month = BCDtoByte(timeBCD_month & 0x1F);
 800898a:	4b1b      	ldr	r3, [pc, #108]	@ (80089f8 <timeBCD_to_UNIX+0x8c>)
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	221f      	movs	r2, #31
 8008990:	4013      	ands	r3, r2
 8008992:	b2db      	uxtb	r3, r3
 8008994:	0018      	movs	r0, r3
 8008996:	f000 f843 	bl	8008a20 <BCDtoByte>
 800899a:	0003      	movs	r3, r0
 800899c:	001a      	movs	r2, r3
 800899e:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <timeBCD_to_UNIX+0x90>)
 80089a0:	701a      	strb	r2, [r3, #0]

	// ; convierte el día bcd
	// mov			wreg,timeBCD_day
	// call		BCDtoByte
	// mov			time_day,waux
	time_day = BCDtoByte(timeBCD_day);
 80089a2:	4b17      	ldr	r3, [pc, #92]	@ (8008a00 <timeBCD_to_UNIX+0x94>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	0018      	movs	r0, r3
 80089a8:	f000 f83a 	bl	8008a20 <BCDtoByte>
 80089ac:	0003      	movs	r3, r0
 80089ae:	001a      	movs	r2, r3
 80089b0:	4b14      	ldr	r3, [pc, #80]	@ (8008a04 <timeBCD_to_UNIX+0x98>)
 80089b2:	701a      	strb	r2, [r3, #0]

	// ; convierte las horas bcd
	// mov			wreg,timeBCD_hour
	// call		BCDtoByte
	// mov			time_hour,waux
	time_hour = BCDtoByte(timeBCD_hour);
 80089b4:	4b14      	ldr	r3, [pc, #80]	@ (8008a08 <timeBCD_to_UNIX+0x9c>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	0018      	movs	r0, r3
 80089ba:	f000 f831 	bl	8008a20 <BCDtoByte>
 80089be:	0003      	movs	r3, r0
 80089c0:	001a      	movs	r2, r3
 80089c2:	4b12      	ldr	r3, [pc, #72]	@ (8008a0c <timeBCD_to_UNIX+0xa0>)
 80089c4:	701a      	strb	r2, [r3, #0]

	// ; convierte los minutos bcd
	// mov			wreg,timeBCD_min
	// mov			time_min,waux
	time_min=BCDtoByte(timeBCD_min);
 80089c6:	4b12      	ldr	r3, [pc, #72]	@ (8008a10 <timeBCD_to_UNIX+0xa4>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 f828 	bl	8008a20 <BCDtoByte>
 80089d0:	0003      	movs	r3, r0
 80089d2:	001a      	movs	r2, r3
 80089d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a14 <timeBCD_to_UNIX+0xa8>)
 80089d6:	701a      	strb	r2, [r3, #0]

	// ; convierte los segundos bcd
	//mov			wreg,timeBCD_sec
	//call		BCDtoByte
	//mov			time_sec,waux
	time_sec=BCDtoByte(timeBCD_sec);
 80089d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008a18 <timeBCD_to_UNIX+0xac>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	0018      	movs	r0, r3
 80089de:	f000 f81f 	bl	8008a20 <BCDtoByte>
 80089e2:	0003      	movs	r3, r0
 80089e4:	001a      	movs	r2, r3
 80089e6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a1c <timeBCD_to_UNIX+0xb0>)
 80089e8:	701a      	strb	r2, [r3, #0]
}
 80089ea:	46c0      	nop			@ (mov r8, r8)
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20001070 	.word	0x20001070
 80089f4:	20001090 	.word	0x20001090
 80089f8:	20001071 	.word	0x20001071
 80089fc:	20001092 	.word	0x20001092
 8008a00:	20001072 	.word	0x20001072
 8008a04:	20001093 	.word	0x20001093
 8008a08:	20001073 	.word	0x20001073
 8008a0c:	20001094 	.word	0x20001094
 8008a10:	20001074 	.word	0x20001074
 8008a14:	20001095 	.word	0x20001095
 8008a18:	20001075 	.word	0x20001075
 8008a1c:	20001096 	.word	0x20001096

08008a20 <BCDtoByte>:


uint8_t BCDtoByte(uint8_t wreg_){
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	0002      	movs	r2, r0
 8008a28:	1dfb      	adds	r3, r7, #7
 8008a2a:	701a      	strb	r2, [r3, #0]
	// and		A,#$0F;							/ deja solo el nibble alto original
	// ldw		X,#10
	// mul		X,A;								/ multiplica por 10
	// ld		A,xl
	// add		A,waux;							/ suma el byte de salida
	return (uint8_t)( (wreg_ & 0x0F)+ ((wreg_ & 0xF0)>>4)*10 );// ld		waux,A;							/ guarda byte de salida
 8008a2c:	1dfb      	adds	r3, r7, #7
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	220f      	movs	r2, #15
 8008a32:	4013      	ands	r3, r2
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	1dfb      	adds	r3, r7, #7
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	091b      	lsrs	r3, r3, #4
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	1c19      	adds	r1, r3, #0
 8008a40:	0089      	lsls	r1, r1, #2
 8008a42:	18cb      	adds	r3, r1, r3
 8008a44:	18db      	adds	r3, r3, r3
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	18d3      	adds	r3, r2, r3
 8008a4a:	b2db      	uxtb	r3, r3

}
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b002      	add	sp, #8
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <logger>:





void logger (void){
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;

		//ld A,edorefri;
		//cp A,#2;
		if(edorefri >= 2){
 8008a58:	4bb9      	ldr	r3, [pc, #740]	@ (8008d40 <logger+0x2ec>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d800      	bhi.n	8008a62 <logger+0xe>
 8008a60:	e30e      	b.n	8009080 <logger+0x62c>
			goto logger_01;//jruge	logger_01;
 8008a62:	46c0      	nop			@ (mov r8, r8)
		//;*********** solo para pruebas
		//;jra		voltFlagOK
		//;*********** solo para pruebas
		//
		//; pregunta si hay un voltaje correcto al arranque para comenzar a loggear
		if(flagsLogger[7]){ //btjt flagsLogger,#7,voltFlagOK
 8008a64:	4bb7      	ldr	r3, [pc, #732]	@ (8008d44 <logger+0x2f0>)
 8008a66:	79db      	ldrb	r3, [r3, #7]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d118      	bne.n	8008a9e <logger+0x4a>
			goto voltFlagOK;
		}
		//ld A,protype;
		if(Plantilla[protype] == 0x02){//cp A,#$02; Protección de voltaje 220v?
 8008a6c:	4bb6      	ldr	r3, [pc, #728]	@ (8008d48 <logger+0x2f4>)
 8008a6e:	2257      	movs	r2, #87	@ 0x57
 8008a70:	5c9b      	ldrb	r3, [r3, r2]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d005      	beq.n	8008a82 <logger+0x2e>
			goto chk_220;//jreq	chk_220
		}
chk_120:
 8008a76:	46c0      	nop			@ (mov r8, r8)
		//ld A,voltl
		if(voltl >= 70){//cp A,#70; / el voltaje es superior al minimo medible ?
 8008a78:	4bb4      	ldr	r3, [pc, #720]	@ (8008d4c <logger+0x2f8>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b45      	cmp	r3, #69	@ 0x45
 8008a7e:	d90a      	bls.n	8008a96 <logger+0x42>
			goto voltArranOK;//jruge voltArranOK
 8008a80:	e005      	b.n	8008a8e <logger+0x3a>
			goto chk_220;//jreq	chk_220
 8008a82:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra	voltArranFAIL
chk_220:
		//ld A,voltl
		if(voltl >= 170){//cp A,#170;	/ el voltaje es superior al minimo medible ?
 8008a84:	4bb1      	ldr	r3, [pc, #708]	@ (8008d4c <logger+0x2f8>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2ba9      	cmp	r3, #169	@ 0xa9
 8008a8a:	d906      	bls.n	8008a9a <logger+0x46>
			goto voltArranOK;//jruge voltArranOK
 8008a8c:	46c0      	nop			@ (mov r8, r8)
		}
		goto voltArranFAIL;//jra voltArranFAIL

voltArranOK:
		flagsLogger[7] = 1;//bset	flagsLogger,#7
 8008a8e:	4bad      	ldr	r3, [pc, #692]	@ (8008d44 <logger+0x2f0>)
 8008a90:	2201      	movs	r2, #1
 8008a92:	71da      	strb	r2, [r3, #7]
voltArranFAIL:
        goto fin_logger; //jp fin_logger
 8008a94:	e2f5      	b.n	8009082 <logger+0x62e>
		goto voltArranFAIL;//jra	voltArranFAIL
 8008a96:	46c0      	nop			@ (mov r8, r8)
 8008a98:	e2f3      	b.n	8009082 <logger+0x62e>
		goto voltArranFAIL;//jra voltArranFAIL
 8008a9a:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008a9c:	e2f1      	b.n	8009082 <logger+0x62e>
			goto voltFlagOK;
 8008a9e:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;					LOGGER DE EVENTOS
//;===========================================================
//				+++++	EVENTO PUERTA	++++++
event_logg:
		if(flagsWIFI[f_eventLoggerSend])	//btjt		flagsWIFI,#f_eventLoggerSend,event_logg_01; No loggear hasta terminar Tx
 8008aa0:	4bab      	ldr	r3, [pc, #684]	@ (8008d50 <logger+0x2fc>)
 8008aa2:	789b      	ldrb	r3, [r3, #2]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d107      	bne.n	8008ab8 <logger+0x64>
			goto event_logg_01;
		if(!flagsLogger[4]){//btjf	flagsLogger,#4,door_event; No loggear hasta terminar Tx
 8008aa8:	4ba6      	ldr	r3, [pc, #664]	@ (8008d44 <logger+0x2f0>)
 8008aaa:	791b      	ldrb	r3, [r3, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	4053      	eors	r3, r2
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d102      	bne.n	8008abc <logger+0x68>
			goto door_event;
		}
event_logg_01:
 8008ab6:	e000      	b.n	8008aba <logger+0x66>
			goto event_logg_01;
 8008ab8:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; // jp fin_logger
 8008aba:	e2e2      	b.n	8009082 <logger+0x62e>
			goto door_event;
 8008abc:	46c0      	nop			@ (mov r8, r8)
		//+++++++++++++++++++++++++++++++++++++++
		// goto	data_logg;
		//+++++++++++++++++++++++++++++++++++++++
		//Salto para probar logeo de DATOS tiempo

		if(flagsEvent[0]){//btjt	flagsEvent,#0,ask_DE_end;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 8008abe:	4ba5      	ldr	r3, [pc, #660]	@ (8008d54 <logger+0x300>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d136      	bne.n	8008b34 <logger+0xe0>
			goto ask_DE_end;
		}
ask_DE_start:
 8008ac6:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){//btjt	flagsC,#0,ask_DE_start_01; / hay puerta abierta ? Sí, captura inicio de evento
 8008ac8:	4ba3      	ldr	r3, [pc, #652]	@ (8008d58 <logger+0x304>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d068      	beq.n	8008ba2 <logger+0x14e>
			goto ask_DE_start_01;
 8008ad0:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
ask_DE_start_01:
		BloqEventPuerta[EP_timeInit_4] = highByte(timeSeconds_HW);		//ldw	X,timeSeconds_HW
 8008ad2:	4ba2      	ldr	r3, [pc, #648]	@ (8008d5c <logger+0x308>)
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	4ba0      	ldr	r3, [pc, #640]	@ (8008d60 <logger+0x30c>)
 8008ade:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = lowByte(timeSeconds_HW);		//ldw	EP_timeInit_HW,X
 8008ae0:	4b9e      	ldr	r3, [pc, #632]	@ (8008d5c <logger+0x308>)
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d60 <logger+0x30c>)
 8008ae8:	715a      	strb	r2, [r3, #5]
		BloqEventPuerta[EP_timeInit_2] = highByte(timeSeconds_LW);		//ldw	X,timeSeconds_LW
 8008aea:	4b9e      	ldr	r3, [pc, #632]	@ (8008d64 <logger+0x310>)
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	4b9a      	ldr	r3, [pc, #616]	@ (8008d60 <logger+0x30c>)
 8008af6:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = lowByte(timeSeconds_LW);		//ldw	EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008af8:	4b9a      	ldr	r3, [pc, #616]	@ (8008d64 <logger+0x310>)
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	4b98      	ldr	r3, [pc, #608]	@ (8008d60 <logger+0x30c>)
 8008b00:	71da      	strb	r2, [r3, #7]
		BloqEventPuerta[EP_eventType] = 1;		// mov	EP_eventType,#1;/ carga el tipo de evento (1 para puerta)
 8008b02:	4b97      	ldr	r3, [pc, #604]	@ (8008d60 <logger+0x30c>)
 8008b04:	2201      	movs	r2, #1
 8008b06:	731a      	strb	r2, [r3, #12]
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;				// ldw	X,tdevl
 8008b08:	4b97      	ldr	r3, [pc, #604]	@ (8008d68 <logger+0x314>)
 8008b0a:	781a      	ldrb	r2, [r3, #0]
 8008b0c:	4b94      	ldr	r3, [pc, #592]	@ (8008d60 <logger+0x30c>)
 8008b0e:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;				// ldw	EP_tempAmbInit,x; / carga temperatura ambiente
 8008b10:	4b96      	ldr	r3, [pc, #600]	@ (8008d6c <logger+0x318>)
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	4b92      	ldr	r3, [pc, #584]	@ (8008d60 <logger+0x30c>)
 8008b16:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;					//mov	EP_voltInit,voltl; /carga voltaje
 8008b18:	4b8c      	ldr	r3, [pc, #560]	@ (8008d4c <logger+0x2f8>)
 8008b1a:	781a      	ldrb	r2, [r3, #0]
 8008b1c:	4b90      	ldr	r3, [pc, #576]	@ (8008d60 <logger+0x30c>)
 8008b1e:	745a      	strb	r2, [r3, #17]
		flagsEvent[0] = 1;//bset	flagsEvent,#0;					/ indica quie el evento puerta ya inició
 8008b20:	4b8c      	ldr	r3, [pc, #560]	@ (8008d54 <logger+0x300>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
		//ld	A,#0;
		//ld	xh,A
		//ld	A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		//ld	xl,A
		//ldw	temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
		temp_doorEvent = (0*256) + Plantilla[tmDoorEvent];
 8008b26:	4b88      	ldr	r3, [pc, #544]	@ (8008d48 <logger+0x2f4>)
 8008b28:	2250      	movs	r2, #80	@ 0x50
 8008b2a:	5c9b      	ldrb	r3, [r3, r2]
 8008b2c:	001a      	movs	r2, r3
 8008b2e:	4b90      	ldr	r3, [pc, #576]	@ (8008d70 <logger+0x31c>)
 8008b30:	801a      	strh	r2, [r3, #0]
 	    goto comp_event;//jp	comp_event;
 8008b32:	e039      	b.n	8008ba8 <logger+0x154>
			goto ask_DE_end;
 8008b34:	46c0      	nop			@ (mov r8, r8)

ask_DE_end:
		if(flagsC[0]){//btjt	flagsC,#0,comp_event;	 	/ ya se cerró la puerta ?
 8008b36:	4b88      	ldr	r3, [pc, #544]	@ (8008d58 <logger+0x304>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d133      	bne.n	8008ba6 <logger+0x152>
			goto comp_event;
		}
		//ldw X,temp_doorEvent
		if(temp_doorEvent == 0){//tnzw	X; / se cumplió el tiempo minimo de puerta abierta ?
 8008b3e:	4b8c      	ldr	r3, [pc, #560]	@ (8008d70 <logger+0x31c>)
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <logger+0xfa>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
		}
		flagsEvent[0] = 0;//bres	flagsEvent,#0;	/ borra inicio de evento puerta
 8008b46:	4b83      	ldr	r3, [pc, #524]	@ (8008d54 <logger+0x300>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
		goto comp_event;//jra comp_event; / continúa sin grabar evento
 8008b4c:	e02c      	b.n	8008ba8 <logger+0x154>
			goto door_event_end;//jreq	door_event_end;	/ sí, ve a finalizar el evento
 8008b4e:	46c0      	nop			@ (mov r8, r8)
door_event_end:
		BloqEventPuerta[EP_timeEnd_4] = highByte(timeSeconds_HW);			//ldw	X,timeSeconds_HW
 8008b50:	4b82      	ldr	r3, [pc, #520]	@ (8008d5c <logger+0x308>)
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	0a1b      	lsrs	r3, r3, #8
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	4b81      	ldr	r3, [pc, #516]	@ (8008d60 <logger+0x30c>)
 8008b5c:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw	EP_timeEnd_HW,X
 8008b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d5c <logger+0x308>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	4b7e      	ldr	r3, [pc, #504]	@ (8008d60 <logger+0x30c>)
 8008b66:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008b68:	4b7e      	ldr	r3, [pc, #504]	@ (8008d64 <logger+0x310>)
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b7b      	ldr	r3, [pc, #492]	@ (8008d60 <logger+0x30c>)
 8008b74:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8008b76:	4b7b      	ldr	r3, [pc, #492]	@ (8008d64 <logger+0x310>)
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	4b78      	ldr	r3, [pc, #480]	@ (8008d60 <logger+0x30c>)
 8008b7e:	72da      	strb	r2, [r3, #11]
		BloqEventPuerta[EP_tempEvaEnd_H] = teval;				//ldw	X,teval
 8008b80:	4b7c      	ldr	r3, [pc, #496]	@ (8008d74 <logger+0x320>)
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	4b76      	ldr	r3, [pc, #472]	@ (8008d60 <logger+0x30c>)
 8008b86:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L] = tevaf;				//ldw	EP_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008b88:	4b7b      	ldr	r3, [pc, #492]	@ (8008d78 <logger+0x324>)
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	4b74      	ldr	r3, [pc, #464]	@ (8008d60 <logger+0x30c>)
 8008b8e:	741a      	strb	r2, [r3, #16]
//									;or		A,cntLogger_L;					/ Ya es tiempo de tomar datos?
//									;jrne	comp_event;							/ sí, continua
//		;prueba


		dirDataLoad = &BloqEventPuerta[EP_timeInit_4];	//ldw	X,#EP_timeInit_HW
 8008b90:	4b7a      	ldr	r3, [pc, #488]	@ (8008d7c <logger+0x328>)
 8008b92:	4a7b      	ldr	r2, [pc, #492]	@ (8008d80 <logger+0x32c>)
 8008b94:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;	/ indica el inicio del bloque de datos a cargar (evento puerta)
		load_event();			//call	load_event
 8008b96:	f000 fac9 	bl	800912c <load_event>

		flagsEvent[0] = 0;		//bres flagsEvent,#0;	/ borra inicio de evento puerta
 8008b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8008d54 <logger+0x300>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	701a      	strb	r2, [r3, #0]
		goto comp_event;		//jra	comp_event;			/ continúa
 8008ba0:	e002      	b.n	8008ba8 <logger+0x154>
		goto comp_event;//jp comp_event;/ No, checa el evento de compresor
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	e000      	b.n	8008ba8 <logger+0x154>
			goto comp_event;
 8008ba6:	46c0      	nop			@ (mov r8, r8)

//;										Evento de encendido de compresor
//;----------------------------------------------------------
comp_event:
		if(flagsEvent[1]){//  btjt flagsEvent,#1,ask_CE_end;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 8008ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8008d54 <logger+0x300>)
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d130      	bne.n	8008c12 <logger+0x1be>
			goto ask_CE_end;
		}
ask_CE_start:
 8008bb0:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){//btjt GPIOR0,#0,ask_CE_start_01; / compresor encendido ? Sí, captura inicio de evento
 8008bb2:	4b74      	ldr	r3, [pc, #464]	@ (8008d84 <logger+0x330>)
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d05a      	beq.n	8008c70 <logger+0x21c>
			goto ask_CE_start_01;
 8008bba:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
ask_CE_start_01:
		BloqEventComp[EC_timeInit_4] = highByte(timeSeconds_HW);		//ldw		X,timeSeconds_HW
 8008bbc:	4b67      	ldr	r3, [pc, #412]	@ (8008d5c <logger+0x308>)
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	0a1b      	lsrs	r3, r3, #8
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	4b70      	ldr	r3, [pc, #448]	@ (8008d88 <logger+0x334>)
 8008bc8:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		EC_timeInit_HW,X
 8008bca:	4b64      	ldr	r3, [pc, #400]	@ (8008d5c <logger+0x308>)
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8008d88 <logger+0x334>)
 8008bd2:	715a      	strb	r2, [r3, #5]
		BloqEventComp[EC_timeInit_2] = highByte(timeSeconds_LW);		//ldw		X,timeSeconds_LW
 8008bd4:	4b63      	ldr	r3, [pc, #396]	@ (8008d64 <logger+0x310>)
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b6a      	ldr	r3, [pc, #424]	@ (8008d88 <logger+0x334>)
 8008be0:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		EC_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008be2:	4b60      	ldr	r3, [pc, #384]	@ (8008d64 <logger+0x310>)
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	4b67      	ldr	r3, [pc, #412]	@ (8008d88 <logger+0x334>)
 8008bea:	71da      	strb	r2, [r3, #7]
		BloqEventComp[EC_eventType] = 2;				//mov		EC_eventType,#2;	/ carga el tipo de evento (2 para compresor)
 8008bec:	4b66      	ldr	r3, [pc, #408]	@ (8008d88 <logger+0x334>)
 8008bee:	2202      	movs	r2, #2
 8008bf0:	731a      	strb	r2, [r3, #12]
		BloqEventComp[EC_tempAmbInit_H] = tdevl;		//ldw		X,tdevl
 8008bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8008d68 <logger+0x314>)
 8008bf4:	781a      	ldrb	r2, [r3, #0]
 8008bf6:	4b64      	ldr	r3, [pc, #400]	@ (8008d88 <logger+0x334>)
 8008bf8:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;		//ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 8008bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8008d6c <logger+0x318>)
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	4b62      	ldr	r3, [pc, #392]	@ (8008d88 <logger+0x334>)
 8008c00:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;	//mov EC_voltInit,voltl; /carga voltaje
 8008c02:	4b52      	ldr	r3, [pc, #328]	@ (8008d4c <logger+0x2f8>)
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	4b60      	ldr	r3, [pc, #384]	@ (8008d88 <logger+0x334>)
 8008c08:	745a      	strb	r2, [r3, #17]
        flagsEvent[1] = 1;						//bset	flagsEvent,#1;	/ indica que el evento compresor ya inició
 8008c0a:	4b52      	ldr	r3, [pc, #328]	@ (8008d54 <logger+0x300>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	705a      	strb	r2, [r3, #1]
		goto desh_event;						//jp desh_event;	/ continúa
 8008c10:	e031      	b.n	8008c76 <logger+0x222>
			goto ask_CE_end;
 8008c12:	46c0      	nop			@ (mov r8, r8)
ask_CE_end:
		if(GPIOR0[0]){//btjt	GPIOR0,#0,desh_event;	 	/ ya se apagó el compresor ?
 8008c14:	4b5b      	ldr	r3, [pc, #364]	@ (8008d84 <logger+0x330>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d12b      	bne.n	8008c74 <logger+0x220>
			goto desh_event;
		}
comp_event_end:
 8008c1c:	46c0      	nop			@ (mov r8, r8)
		BloqEventComp[EC_timeEnd_4] = highByte(timeSeconds_HW);			//ldw		X,timeSeconds_HW
 8008c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8008d5c <logger+0x308>)
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	0a1b      	lsrs	r3, r3, #8
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	4b57      	ldr	r3, [pc, #348]	@ (8008d88 <logger+0x334>)
 8008c2a:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = lowByte(timeSeconds_HW);			//ldw		EC_timeEnd_HW,X
 8008c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8008d5c <logger+0x308>)
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	4b55      	ldr	r3, [pc, #340]	@ (8008d88 <logger+0x334>)
 8008c34:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = highByte(timeSeconds_LW);			//ldw		X,timeSeconds_LW
 8008c36:	4b4b      	ldr	r3, [pc, #300]	@ (8008d64 <logger+0x310>)
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	4b51      	ldr	r3, [pc, #324]	@ (8008d88 <logger+0x334>)
 8008c42:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = lowByte(timeSeconds_LW);			//ldw		EC_timeEnd_LW,X;/ guarda el tiempo final
 8008c44:	4b47      	ldr	r3, [pc, #284]	@ (8008d64 <logger+0x310>)
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8008d88 <logger+0x334>)
 8008c4c:	72da      	strb	r2, [r3, #11]
		BloqEventComp[EC_tempEvaEnd_H] = teval;							//ldw		X,teval
 8008c4e:	4b49      	ldr	r3, [pc, #292]	@ (8008d74 <logger+0x320>)
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	4b4d      	ldr	r3, [pc, #308]	@ (8008d88 <logger+0x334>)
 8008c54:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;							//ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008c56:	4b48      	ldr	r3, [pc, #288]	@ (8008d78 <logger+0x324>)
 8008c58:	781a      	ldrb	r2, [r3, #0]
 8008c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d88 <logger+0x334>)
 8008c5c:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventComp[EC_timeInit_4];					//ldw X,#EC_timeInit_HW
 8008c5e:	4b47      	ldr	r3, [pc, #284]	@ (8008d7c <logger+0x328>)
 8008c60:	4a4a      	ldr	r2, [pc, #296]	@ (8008d8c <logger+0x338>)
 8008c62:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;/ indica el inicio del bloque de datos a cargar (evento compresor)
		load_event();			//call	load_event
 8008c64:	f000 fa62 	bl	800912c <load_event>

		flagsEvent[1] = 0;//bres flagsEvent,#1;	/ borra inicio de evento compresor
 8008c68:	4b3a      	ldr	r3, [pc, #232]	@ (8008d54 <logger+0x300>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	705a      	strb	r2, [r3, #1]
		goto desh_event;//jra	desh_event;		/ continúa
 8008c6e:	e002      	b.n	8008c76 <logger+0x222>
		goto desh_event;//jp desh_event;			/ No, checa el evento de deshielo
 8008c70:	46c0      	nop			@ (mov r8, r8)
 8008c72:	e000      	b.n	8008c76 <logger+0x222>
			goto desh_event;
 8008c74:	46c0      	nop			@ (mov r8, r8)

//;				Evento de deshielo
//;----------------------------------------------------------
desh_event:
		if(flagsEvent[2]){//  btjt	flagsEvent,#2,ask_DhE_end;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 8008c76:	4b37      	ldr	r3, [pc, #220]	@ (8008d54 <logger+0x300>)
 8008c78:	789b      	ldrb	r3, [r3, #2]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d12f      	bne.n	8008cde <logger+0x28a>
			goto ask_DhE_end;
		}
ask_DhE_start:
 8008c7e:	46c0      	nop			@ (mov r8, r8)
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri != 3){//cp	A,#3;/ está en estado de deshielo ?
 8008c80:	4b2f      	ldr	r3, [pc, #188]	@ (8008d40 <logger+0x2ec>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d159      	bne.n	8008d3c <logger+0x2e8>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
		}
		BloqEventDesh[ED_timeInit_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008c88:	4b34      	ldr	r3, [pc, #208]	@ (8008d5c <logger+0x308>)
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	0a1b      	lsrs	r3, r3, #8
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	4b3f      	ldr	r3, [pc, #252]	@ (8008d90 <logger+0x33c>)
 8008c94:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = lowByte(timeSeconds_HW);		//ldw		ED_timeInit_HW,X
 8008c96:	4b31      	ldr	r3, [pc, #196]	@ (8008d5c <logger+0x308>)
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d90 <logger+0x33c>)
 8008c9e:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008ca0:	4b30      	ldr	r3, [pc, #192]	@ (8008d64 <logger+0x310>)
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	0a1b      	lsrs	r3, r3, #8
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	4b39      	ldr	r3, [pc, #228]	@ (8008d90 <logger+0x33c>)
 8008cac:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = lowByte(timeSeconds_LW);		//ldw		ED_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008cae:	4b2d      	ldr	r3, [pc, #180]	@ (8008d64 <logger+0x310>)
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	4b36      	ldr	r3, [pc, #216]	@ (8008d90 <logger+0x33c>)
 8008cb6:	71da      	strb	r2, [r3, #7]
		BloqEventDesh[ED_eventType] = 3;//mov	ED_eventType,#3;	/ carga el tipo de evento (3 para deshielo)
 8008cb8:	4b35      	ldr	r3, [pc, #212]	@ (8008d90 <logger+0x33c>)
 8008cba:	2203      	movs	r2, #3
 8008cbc:	731a      	strb	r2, [r3, #12]
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;		//ldw	X,tdevl
 8008cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8008d68 <logger+0x314>)
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	4b33      	ldr	r3, [pc, #204]	@ (8008d90 <logger+0x33c>)
 8008cc4:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;		 //ldw	ED_tempAmbInit,x;	/ carga temperatura ambiente
 8008cc6:	4b29      	ldr	r3, [pc, #164]	@ (8008d6c <logger+0x318>)
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	4b31      	ldr	r3, [pc, #196]	@ (8008d90 <logger+0x33c>)
 8008ccc:	739a      	strb	r2, [r3, #14]
		BloqEventDesh[ED_voltInit] = voltl;//mov	ED_voltInit,voltl; /carga voltaje
 8008cce:	4b1f      	ldr	r3, [pc, #124]	@ (8008d4c <logger+0x2f8>)
 8008cd0:	781a      	ldrb	r2, [r3, #0]
 8008cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008d90 <logger+0x33c>)
 8008cd4:	745a      	strb	r2, [r3, #17]
        flagsEvent[2] = 1;//bset flagsEvent,#2;	/ indica que el evento deshielo ya inició
 8008cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d54 <logger+0x300>)
 8008cd8:	2201      	movs	r2, #1
 8008cda:	709a      	strb	r2, [r3, #2]
        goto power_event;//jp power_event;	/ continúa
 8008cdc:	e05d      	b.n	8008d9a <logger+0x346>
			goto ask_DhE_end;
 8008cde:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end:
		//ld A,edorefri;	/ Carga el estado del refrigerador
		if(edorefri == 3){//cp A,#3; / sigue en estado de deshielo ?
 8008ce0:	4b17      	ldr	r3, [pc, #92]	@ (8008d40 <logger+0x2ec>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d057      	beq.n	8008d98 <logger+0x344>
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
		}
desh_event_end:
 8008ce8:	46c0      	nop			@ (mov r8, r8)
		BloqEventDesh[ED_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008cea:	4b1c      	ldr	r3, [pc, #112]	@ (8008d5c <logger+0x308>)
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	0a1b      	lsrs	r3, r3, #8
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	4b26      	ldr	r3, [pc, #152]	@ (8008d90 <logger+0x33c>)
 8008cf6:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		ED_timeEnd_HW,X
 8008cf8:	4b18      	ldr	r3, [pc, #96]	@ (8008d5c <logger+0x308>)
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	4b24      	ldr	r3, [pc, #144]	@ (8008d90 <logger+0x33c>)
 8008d00:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008d02:	4b18      	ldr	r3, [pc, #96]	@ (8008d64 <logger+0x310>)
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	4b20      	ldr	r3, [pc, #128]	@ (8008d90 <logger+0x33c>)
 8008d0e:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		ED_timeEnd_LW,X;	/ guarda el tiempo final
 8008d10:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <logger+0x310>)
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	4b1e      	ldr	r3, [pc, #120]	@ (8008d90 <logger+0x33c>)
 8008d18:	72da      	strb	r2, [r3, #11]
		BloqEventDesh[ED_tempEvaEnd_H] = teval;		//ldw		X,teval
 8008d1a:	4b16      	ldr	r3, [pc, #88]	@ (8008d74 <logger+0x320>)
 8008d1c:	781a      	ldrb	r2, [r3, #0]
 8008d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8008d90 <logger+0x33c>)
 8008d20:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;		//ldw		ED_tempEvaEnd,x;	/ copia el dato de temperatura evaporador
 8008d22:	4b15      	ldr	r3, [pc, #84]	@ (8008d78 <logger+0x324>)
 8008d24:	781a      	ldrb	r2, [r3, #0]
 8008d26:	4b1a      	ldr	r3, [pc, #104]	@ (8008d90 <logger+0x33c>)
 8008d28:	741a      	strb	r2, [r3, #16]

		dirDataLoad = &BloqEventDesh[ED_timeInit_4];//ldw	X,#ED_timeInit_HW
 8008d2a:	4b14      	ldr	r3, [pc, #80]	@ (8008d7c <logger+0x328>)
 8008d2c:	4a19      	ldr	r2, [pc, #100]	@ (8008d94 <logger+0x340>)
 8008d2e:	601a      	str	r2, [r3, #0]
		//ldw dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();			//call	load_event
 8008d30:	f000 f9fc 	bl	800912c <load_event>

		flagsEvent[2] = 0;//bres flagsEvent,#2;		/ borra inicio de evento deshielo
 8008d34:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <logger+0x300>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	709a      	strb	r2, [r3, #2]
		goto power_event;//jra	power_event;	/ continúa
 8008d3a:	e02e      	b.n	8008d9a <logger+0x346>
			goto power_event;//jrne	power_event;/ No, continúa sin revisar evento deshielo
 8008d3c:	46c0      	nop			@ (mov r8, r8)
 8008d3e:	e02c      	b.n	8008d9a <logger+0x346>
 8008d40:	20000b98 	.word	0x20000b98
 8008d44:	20000e04 	.word	0x20000e04
 8008d48:	200000b8 	.word	0x200000b8
 8008d4c:	20000bce 	.word	0x20000bce
 8008d50:	20000f50 	.word	0x20000f50
 8008d54:	20000ec8 	.word	0x20000ec8
 8008d58:	20000c3c 	.word	0x20000c3c
 8008d5c:	20000db0 	.word	0x20000db0
 8008d60:	20000eec 	.word	0x20000eec
 8008d64:	20000db2 	.word	0x20000db2
 8008d68:	20000bb0 	.word	0x20000bb0
 8008d6c:	20000bb1 	.word	0x20000bb1
 8008d70:	20000ed8 	.word	0x20000ed8
 8008d74:	20000bb2 	.word	0x20000bb2
 8008d78:	20000bb3 	.word	0x20000bb3
 8008d7c:	20000da8 	.word	0x20000da8
 8008d80:	20000ef0 	.word	0x20000ef0
 8008d84:	20000ba4 	.word	0x20000ba4
 8008d88:	20000f00 	.word	0x20000f00
 8008d8c:	20000f04 	.word	0x20000f04
 8008d90:	20000f14 	.word	0x20000f14
 8008d94:	20000f18 	.word	0x20000f18
			goto power_event;//jreq	power_event	/ Sí, continúa sin terminar evento
 8008d98:	46c0      	nop			@ (mov r8, r8)

//;		Evento de falla de energía (power-on reset)
//;----------------------------------------------------------
power_event:
		if(retPowerOn != 0 ){//	tnz		retPowerOn
 8008d9a:	4bbb      	ldr	r3, [pc, #748]	@ (8009088 <logger+0x634>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d15c      	bne.n	8008e5c <logger+0x408>
			//goto alarm_event;//	jrne	alarm_event
			goto wifi_event;
		}
		if(flagsEvent[3]){//	btjt flagsEvent,#3,power_event_end; Ya inició evento de power-on ?
 8008da2:	4bba      	ldr	r3, [pc, #744]	@ (800908c <logger+0x638>)
 8008da4:	78db      	ldrb	r3, [r3, #3]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d05a      	beq.n	8008e60 <logger+0x40c>
			goto power_event_end;
 8008daa:	46c0      	nop			@ (mov r8, r8)
//		BloqEventPwrOn[EPo_timeInit_4] = eeTimeUnix1;		//ldw	X,eeTimeUnix1
//		BloqEventPwrOn[EPo_timeInit_3] = eeTimeUnix2;		//ldw	EPo_timeInit_HW,X
//		BloqEventPwrOn[EPo_timeInit_2] = eeTimeUnix3;		//ldw	X,eeTimeUnix3
//		BloqEventPwrOn[EPo_timeInit_1] = eeTimeUnix4;		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio

		BloqEventPwrOn[EPo_timeInit_4] = findLastValue((uint32_t) &eeTimeUnix1);		//ldw	X,eeTimeUnix1
 8008dac:	4bb8      	ldr	r3, [pc, #736]	@ (8009090 <logger+0x63c>)
 8008dae:	0018      	movs	r0, r3
 8008db0:	f7f9 ff34 	bl	8002c1c <findLastValue>
 8008db4:	0003      	movs	r3, r0
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	4bb6      	ldr	r3, [pc, #728]	@ (8009094 <logger+0x640>)
 8008dba:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = findLastValue((uint32_t) &eeTimeUnix2);		//ldw	EPo_timeInit_HW,X
 8008dbc:	4bb6      	ldr	r3, [pc, #728]	@ (8009098 <logger+0x644>)
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7f9 ff2c 	bl	8002c1c <findLastValue>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	4bb2      	ldr	r3, [pc, #712]	@ (8009094 <logger+0x640>)
 8008dca:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = findLastValue((uint32_t) &eeTimeUnix3);		//ldw	X,eeTimeUnix3
 8008dcc:	4bb3      	ldr	r3, [pc, #716]	@ (800909c <logger+0x648>)
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7f9 ff24 	bl	8002c1c <findLastValue>
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	4bae      	ldr	r3, [pc, #696]	@ (8009094 <logger+0x640>)
 8008dda:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = findLastValue((uint32_t) &eeTimeUnix4);		//ldw	EPo_timeInit_LW,X;	/ guarda el tiempo de inicio
 8008ddc:	4bb0      	ldr	r3, [pc, #704]	@ (80090a0 <logger+0x64c>)
 8008dde:	0018      	movs	r0, r3
 8008de0:	f7f9 ff1c 	bl	8002c1c <findLastValue>
 8008de4:	0003      	movs	r3, r0
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	4baa      	ldr	r3, [pc, #680]	@ (8009094 <logger+0x640>)
 8008dea:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;//mov	EPo_eventType,#4;	/ carga el tipo de evento (3 para falla de energía)
 8008dec:	4ba9      	ldr	r3, [pc, #676]	@ (8009094 <logger+0x640>)
 8008dee:	2204      	movs	r2, #4
 8008df0:	731a      	strb	r2, [r3, #12]
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;	//ldw		X,tdevl
 8008df2:	4bac      	ldr	r3, [pc, #688]	@ (80090a4 <logger+0x650>)
 8008df4:	781a      	ldrb	r2, [r3, #0]
 8008df6:	4ba7      	ldr	r3, [pc, #668]	@ (8009094 <logger+0x640>)
 8008df8:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;	//ldw	EPo_tempAmbInit,x;	/ carga temperatura ambiente
 8008dfa:	4bab      	ldr	r3, [pc, #684]	@ (80090a8 <logger+0x654>)
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8009094 <logger+0x640>)
 8008e00:	739a      	strb	r2, [r3, #14]
		BloqEventPwrOn[EPo_voltInit] = voltl;//mov	EPo_voltInit,voltl; /carga voltaje
 8008e02:	4baa      	ldr	r3, [pc, #680]	@ (80090ac <logger+0x658>)
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	4ba3      	ldr	r3, [pc, #652]	@ (8009094 <logger+0x640>)
 8008e08:	745a      	strb	r2, [r3, #17]


		BloqEventPwrOn[EPo_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		X,timeSeconds_HW
 8008e0a:	4ba9      	ldr	r3, [pc, #676]	@ (80090b0 <logger+0x65c>)
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	4b9f      	ldr	r3, [pc, #636]	@ (8009094 <logger+0x640>)
 8008e16:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = lowByte(timeSeconds_HW);	//ldw		EPo_timeEnd_HW,X
 8008e18:	4ba5      	ldr	r3, [pc, #660]	@ (80090b0 <logger+0x65c>)
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	4b9d      	ldr	r3, [pc, #628]	@ (8009094 <logger+0x640>)
 8008e20:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = highByte(timeSeconds_LW);	//ldw		X,timeSeconds_LW
 8008e22:	4ba4      	ldr	r3, [pc, #656]	@ (80090b4 <logger+0x660>)
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	4b99      	ldr	r3, [pc, #612]	@ (8009094 <logger+0x640>)
 8008e2e:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = lowByte(timeSeconds_LW);	//ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
 8008e30:	4ba0      	ldr	r3, [pc, #640]	@ (80090b4 <logger+0x660>)
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	4b97      	ldr	r3, [pc, #604]	@ (8009094 <logger+0x640>)
 8008e38:	72da      	strb	r2, [r3, #11]
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;		//ldw X,teval
 8008e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80090b8 <logger+0x664>)
 8008e3c:	781a      	ldrb	r2, [r3, #0]
 8008e3e:	4b95      	ldr	r3, [pc, #596]	@ (8009094 <logger+0x640>)
 8008e40:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;		//ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008e42:	4b9e      	ldr	r3, [pc, #632]	@ (80090bc <logger+0x668>)
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	4b93      	ldr	r3, [pc, #588]	@ (8009094 <logger+0x640>)
 8008e48:	741a      	strb	r2, [r3, #16]


		dirDataLoad = &BloqEventPwrOn[EPo_timeInit_4];	//ldw X,#EPo_timeInit_HW
 8008e4a:	4b9d      	ldr	r3, [pc, #628]	@ (80090c0 <logger+0x66c>)
 8008e4c:	4a9d      	ldr	r2, [pc, #628]	@ (80090c4 <logger+0x670>)
 8008e4e:	601a      	str	r2, [r3, #0]
		//ldw	dirDataLoad,X;		/ indica el inicio del bloque de datos a cargar (evento deshielo)
		load_event();				//call	load_event
 8008e50:	f000 f96c 	bl	800912c <load_event>

		flagsEvent[3] = 0;//bres flagsEvent,#3;	/ borra inicio de evento power-on
 8008e54:	4b8d      	ldr	r3, [pc, #564]	@ (800908c <logger+0x638>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	70da      	strb	r2, [r3, #3]
		goto wifi_event;		//jra		wifi_event;
 8008e5a:	e002      	b.n	8008e62 <logger+0x40e>
			goto wifi_event;
 8008e5c:	46c0      	nop			@ (mov r8, r8)
 8008e5e:	e000      	b.n	8008e62 <logger+0x40e>
		goto wifi_event;
 8008e60:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
//;										Evento de wifi
//;----------------------------------------------------------
wifi_event:
		if(flagsEvent[4])		// btjt	flagsEvent,#4,ask_wfE_end;	/ ya había iniciado evento wifi? Sí, checa si ya se termina evento
 8008e62:	4b8a      	ldr	r3, [pc, #552]	@ (800908c <logger+0x638>)
 8008e64:	791b      	ldrb	r3, [r3, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d133      	bne.n	8008ed2 <logger+0x47e>
			goto ask_wfE_end;
ask_wfE_start:
 8008e6a:	46c0      	nop			@ (mov r8, r8)
		if(!flagsTxControl[f_statWIFI])// btjf	flagsTxControl,#f_statWIFI,wifi_event_start; Hubo desconexión con servidor Wifi ? Si, inicia evento falla wifi
 8008e6c:	4b96      	ldr	r3, [pc, #600]	@ (80090c8 <logger+0x674>)
 8008e6e:	789b      	ldrb	r3, [r3, #2]
 8008e70:	2201      	movs	r2, #1
 8008e72:	4053      	eors	r3, r2
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d05a      	beq.n	8008f30 <logger+0x4dc>
			goto wifi_event_start;
 8008e7a:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi

wifi_event_start:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeInit_4] = highByte(timeSeconds_HW);	//ldw		WF_timeInit_HW,X
 8008e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80090b0 <logger+0x65c>)
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	4b91      	ldr	r3, [pc, #580]	@ (80090cc <logger+0x678>)
 8008e88:	711a      	strb	r2, [r3, #4]
		BloqEventWiFiEx[WF_timeInit_3] = lowByte(timeSeconds_HW);
 8008e8a:	4b89      	ldr	r3, [pc, #548]	@ (80090b0 <logger+0x65c>)
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	4b8e      	ldr	r3, [pc, #568]	@ (80090cc <logger+0x678>)
 8008e92:	715a      	strb	r2, [r3, #5]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeInit_2] = highByte(timeSeconds_LW);//ldw		WF_timeInit_LW,X;				/ guarda el tiempo de inicio
 8008e94:	4b87      	ldr	r3, [pc, #540]	@ (80090b4 <logger+0x660>)
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	0a1b      	lsrs	r3, r3, #8
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80090cc <logger+0x678>)
 8008ea0:	719a      	strb	r2, [r3, #6]
		BloqEventWiFiEx[WF_timeInit_1] = lowByte(timeSeconds_LW);
 8008ea2:	4b84      	ldr	r3, [pc, #528]	@ (80090b4 <logger+0x660>)
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	4b88      	ldr	r3, [pc, #544]	@ (80090cc <logger+0x678>)
 8008eaa:	71da      	strb	r2, [r3, #7]

		BloqEventWiFiEx[WF_eventType] = 5;//mov		WF_eventType,#5;				/ carga el tipo de evento (5 para wifi)
 8008eac:	4b87      	ldr	r3, [pc, #540]	@ (80090cc <logger+0x678>)
 8008eae:	2205      	movs	r2, #5
 8008eb0:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventWiFiEx[WF_tempAmbInit_H] = tdevl;		//ldw		WF_tempAmbInit,x;				/ carga temperatura ambiente
 8008eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80090a4 <logger+0x650>)
 8008eb4:	781a      	ldrb	r2, [r3, #0]
 8008eb6:	4b85      	ldr	r3, [pc, #532]	@ (80090cc <logger+0x678>)
 8008eb8:	735a      	strb	r2, [r3, #13]
		BloqEventWiFiEx[WF_tempAmbInit_L] = tdevf;
 8008eba:	4b7b      	ldr	r3, [pc, #492]	@ (80090a8 <logger+0x654>)
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	4b83      	ldr	r3, [pc, #524]	@ (80090cc <logger+0x678>)
 8008ec0:	739a      	strb	r2, [r3, #14]
		BloqEventWiFiEx[WF_voltInit] = voltl;		//mov		WF_voltInit,voltl; /carga voltaje
 8008ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80090ac <logger+0x658>)
 8008ec4:	781a      	ldrb	r2, [r3, #0]
 8008ec6:	4b81      	ldr	r3, [pc, #516]	@ (80090cc <logger+0x678>)
 8008ec8:	745a      	strb	r2, [r3, #17]
		flagsEvent[4] = 1;			//bset	flagsEvent,#4;					/ indica que el evento wifi ya inició
 8008eca:	4b70      	ldr	r3, [pc, #448]	@ (800908c <logger+0x638>)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	711a      	strb	r2, [r3, #4]
		goto alarm_event;			//jp		alarm_event;						/ continúa
 8008ed0:	e031      	b.n	8008f36 <logger+0x4e2>
			goto ask_wfE_end;
 8008ed2:	46c0      	nop			@ (mov r8, r8)
ask_wfE_end:
		if(flagsTxControl[f_statWIFI])	//btjt	flagsTxControl,#f_statWIFI,wifi_event_end; Volvió la conexión wifi ? Sí, termina evento falla de wifi
 8008ed4:	4b7c      	ldr	r3, [pc, #496]	@ (80090c8 <logger+0x674>)
 8008ed6:	789b      	ldrb	r3, [r3, #2]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d02b      	beq.n	8008f34 <logger+0x4e0>
			goto wifi_event_end;
 8008edc:	46c0      	nop			@ (mov r8, r8)
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
wifi_event_end:
		//ldw		X,timeSeconds_HW
		BloqEventWiFiEx[WF_timeEnd_4] = highByte(timeSeconds_HW);	//ldw		WF_timeEnd_HW,X
 8008ede:	4b74      	ldr	r3, [pc, #464]	@ (80090b0 <logger+0x65c>)
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	4b78      	ldr	r3, [pc, #480]	@ (80090cc <logger+0x678>)
 8008eea:	721a      	strb	r2, [r3, #8]
		BloqEventWiFiEx[WF_timeEnd_3] = lowByte(timeSeconds_HW);
 8008eec:	4b70      	ldr	r3, [pc, #448]	@ (80090b0 <logger+0x65c>)
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	4b76      	ldr	r3, [pc, #472]	@ (80090cc <logger+0x678>)
 8008ef4:	725a      	strb	r2, [r3, #9]
		//ldw		X,timeSeconds_LW
		BloqEventWiFiEx[WF_timeEnd_2] = highByte(timeSeconds_LW);//ldw		WF_timeEnd_LW,X;				/ guarda el tiempo final
 8008ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80090b4 <logger+0x660>)
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	4b72      	ldr	r3, [pc, #456]	@ (80090cc <logger+0x678>)
 8008f02:	729a      	strb	r2, [r3, #10]
		BloqEventWiFiEx[WF_timeEnd_1] = lowByte(timeSeconds_LW);
 8008f04:	4b6b      	ldr	r3, [pc, #428]	@ (80090b4 <logger+0x660>)
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	4b70      	ldr	r3, [pc, #448]	@ (80090cc <logger+0x678>)
 8008f0c:	72da      	strb	r2, [r3, #11]
		//ldw		X,teval
		BloqEventWiFiEx[WF_tempEvaEnd_H] = teval;//ldw		WF_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 8008f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80090b8 <logger+0x664>)
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	4b6e      	ldr	r3, [pc, #440]	@ (80090cc <logger+0x678>)
 8008f14:	73da      	strb	r2, [r3, #15]
		BloqEventWiFiEx[WF_tempEvaEnd_L] = tevaf;
 8008f16:	4b69      	ldr	r3, [pc, #420]	@ (80090bc <logger+0x668>)
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80090cc <logger+0x678>)
 8008f1c:	741a      	strb	r2, [r3, #16]
		//ldw		X,#WF_timeInit_HW
		dirDataLoad = &BloqEventWiFiEx[0];//ldw		dirDataLoad,X;					/ indica el inicio del bloque de datos a cargar (evento wifi)
 8008f1e:	4b68      	ldr	r3, [pc, #416]	@ (80090c0 <logger+0x66c>)
 8008f20:	4a6a      	ldr	r2, [pc, #424]	@ (80090cc <logger+0x678>)
 8008f22:	601a      	str	r2, [r3, #0]
		load_event();//call	load_event
 8008f24:	f000 f902 	bl	800912c <load_event>

		flagsEvent[4] = 0;//bres	flagsEvent,#4;
 8008f28:	4b58      	ldr	r3, [pc, #352]	@ (800908c <logger+0x638>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	711a      	strb	r2, [r3, #4]

		goto alarm_event;//jra alarm_event;	/continúa
 8008f2e:	e002      	b.n	8008f36 <logger+0x4e2>
		goto alarm_event;			// jra		alarm_event;						/ No, continúa sin revisar evento wifi
 8008f30:	46c0      	nop			@ (mov r8, r8)
 8008f32:	e000      	b.n	8008f36 <logger+0x4e2>
		goto alarm_event;				//jra	alarm_event;						/ Sí, continúa sin terminar evento
 8008f34:	46c0      	nop			@ (mov r8, r8)


//;		Evento de alarma
//;----------------------------------------------------------
alarm_event:
		goto data_logg; //jp data_logg
 8008f36:	46c0      	nop			@ (mov r8, r8)

//;===========================================================
//;										LOGGER DE DATOS
//;===========================================================
data_logg:
		if(flagsWIFI[f_timeLoggerSend])//btjt		flagsWIFI,#f_timeLoggerSend,jmp_fin_logger; No loggear hasta terminar Tx
 8008f38:	4b65      	ldr	r3, [pc, #404]	@ (80090d0 <logger+0x67c>)
 8008f3a:	785b      	ldrb	r3, [r3, #1]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d108      	bne.n	8008f52 <logger+0x4fe>
			goto jmp_fin_logger;
		if(flagsLogger[5]){//btjt	flagsLogger,#5,jmp_fin_logger; No loggear hasta terminar Tx
 8008f40:	4b64      	ldr	r3, [pc, #400]	@ (80090d4 <logger+0x680>)
 8008f42:	795b      	ldrb	r3, [r3, #5]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <logger+0x502>
			goto jmp_fin_logger;
		}
		//ld A,cntLogger_H;
		//or A,cntLogger_L;		/ Ya es tiempo de tomar datos?
		if(cntLogger_H  == 0){
 8008f48:	4b63      	ldr	r3, [pc, #396]	@ (80090d8 <logger+0x684>)
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d004      	beq.n	8008f5a <logger+0x506>
			goto logger_02; //jreq	logger_02;	/ sí, continua
		}
jmp_fin_logger:
 8008f50:	e002      	b.n	8008f58 <logger+0x504>
			goto jmp_fin_logger;
 8008f52:	46c0      	nop			@ (mov r8, r8)
 8008f54:	e095      	b.n	8009082 <logger+0x62e>
			goto jmp_fin_logger;
 8008f56:	46c0      	nop			@ (mov r8, r8)
        goto fin_logger; //jp fin_logger
 8008f58:	e093      	b.n	8009082 <logger+0x62e>
			goto logger_02; //jreq	logger_02;	/ sí, continua
 8008f5a:	46c0      	nop			@ (mov r8, r8)

		//mov wreg,loggerTime;	/ Toma el tiempo de loggeo en minutos
		//ldw Y,#60;	/ Número de segundos por minuto
		//call	mult1x2;	/ Multiplicalos
		//mov cntLogger_L,resull;
        cntLogger_H = Plantilla[loggerTime] * 60;//mov	cntLogger_H,resulh;		/ Carga el Tiempo total en segundos
 8008f5c:	4b5f      	ldr	r3, [pc, #380]	@ (80090dc <logger+0x688>)
 8008f5e:	2251      	movs	r2, #81	@ 0x51
 8008f60:	5c9b      	ldrb	r3, [r3, r2]
 8008f62:	001a      	movs	r2, r3
 8008f64:	233c      	movs	r3, #60	@ 0x3c
 8008f66:	4353      	muls	r3, r2
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80090d8 <logger+0x684>)
 8008f6c:	801a      	strh	r2, [r3, #0]

        //DEBUG***********DEBUG---------DEBUG
        cntLogger_H = 120;  // valor de prueba a cada 10 segundos tomar muestras
 8008f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80090d8 <logger+0x684>)
 8008f70:	2278      	movs	r2, #120	@ 0x78
 8008f72:	801a      	strh	r2, [r3, #0]
        //DEBUG***********DEBUG---------DEBUG


        BloqDatalooger[timeLogg_4] = highByte(timeSeconds_HW);
 8008f74:	4b4e      	ldr	r3, [pc, #312]	@ (80090b0 <logger+0x65c>)
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	0a1b      	lsrs	r3, r3, #8
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	4b58      	ldr	r3, [pc, #352]	@ (80090e0 <logger+0x68c>)
 8008f80:	701a      	strb	r2, [r3, #0]
        BloqDatalooger[timeLogg_3] = lowByte(timeSeconds_HW);
 8008f82:	4b4b      	ldr	r3, [pc, #300]	@ (80090b0 <logger+0x65c>)
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	4b55      	ldr	r3, [pc, #340]	@ (80090e0 <logger+0x68c>)
 8008f8a:	705a      	strb	r2, [r3, #1]
        BloqDatalooger[timeLogg_2] = highByte(timeSeconds_LW);
 8008f8c:	4b49      	ldr	r3, [pc, #292]	@ (80090b4 <logger+0x660>)
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	0a1b      	lsrs	r3, r3, #8
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	4b52      	ldr	r3, [pc, #328]	@ (80090e0 <logger+0x68c>)
 8008f98:	709a      	strb	r2, [r3, #2]
        BloqDatalooger[timeLogg_1] = lowByte(timeSeconds_LW);
 8008f9a:	4b46      	ldr	r3, [pc, #280]	@ (80090b4 <logger+0x660>)
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80090e0 <logger+0x68c>)
 8008fa2:	70da      	strb	r2, [r3, #3]

        //;---- Prepara datos a loggear
        BloqDatalooger[tempAmbLogg_H] = tdevl;	//ldw	X,tdevl
 8008fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80090a4 <logger+0x650>)
 8008fa6:	781a      	ldrb	r2, [r3, #0]
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80090e0 <logger+0x68c>)
 8008faa:	711a      	strb	r2, [r3, #4]
        BloqDatalooger[tempAmbLogg_L] = tdevf;	//ldw	tempAmbLogg,x;/ copia el dato de temperatura ambiente
 8008fac:	4b3e      	ldr	r3, [pc, #248]	@ (80090a8 <logger+0x654>)
 8008fae:	781a      	ldrb	r2, [r3, #0]
 8008fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80090e0 <logger+0x68c>)
 8008fb2:	715a      	strb	r2, [r3, #5]
        BloqDatalooger[tempEvaLogg_H] = teval;//ldw	X,teval
 8008fb4:	4b40      	ldr	r3, [pc, #256]	@ (80090b8 <logger+0x664>)
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	4b49      	ldr	r3, [pc, #292]	@ (80090e0 <logger+0x68c>)
 8008fba:	719a      	strb	r2, [r3, #6]
        BloqDatalooger[tempEvaLogg_L] = tevaf;//ldw	tempEvaLogg,x;/ copia el dato de temperatura evaporador
 8008fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80090bc <logger+0x668>)
 8008fbe:	781a      	ldrb	r2, [r3, #0]
 8008fc0:	4b47      	ldr	r3, [pc, #284]	@ (80090e0 <logger+0x68c>)
 8008fc2:	71da      	strb	r2, [r3, #7]
        BloqDatalooger[voltLogg] = voltl;		//mov	voltLogg,voltl;	/ toma el volatje de la función de medición rms
 8008fc4:	4b39      	ldr	r3, [pc, #228]	@ (80090ac <logger+0x658>)
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	4b45      	ldr	r3, [pc, #276]	@ (80090e0 <logger+0x68c>)
 8008fca:	721a      	strb	r2, [r3, #8]



         //;---- Pasa los datos necesarios a la subrutina
         //ldw		X,#data_buffer
         dirBuffer = &data_buffer[0];	//ldw		dirBuffer,X
 8008fcc:	4b45      	ldr	r3, [pc, #276]	@ (80090e4 <logger+0x690>)
 8008fce:	4a46      	ldr	r2, [pc, #280]	@ (80090e8 <logger+0x694>)
 8008fd0:	601a      	str	r2, [r3, #0]
         //ldw	X,#timeSeconds_HW
         dirDataLoad = &BloqDatalooger[timeLogg_4];//ldw	dirDataLoad,X
 8008fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80090c0 <logger+0x66c>)
 8008fd4:	4a42      	ldr	r2, [pc, #264]	@ (80090e0 <logger+0x68c>)
 8008fd6:	601a      	str	r2, [r3, #0]
         //ldw	X,#dataLogger
         dirLogger = &dataLogger[0];//ldw	dirLogger,X
 8008fd8:	4b44      	ldr	r3, [pc, #272]	@ (80090ec <logger+0x698>)
 8008fda:	4a45      	ldr	r2, [pc, #276]	@ (80090f0 <logger+0x69c>)
 8008fdc:	601a      	str	r2, [r3, #0]

         numBlock = 96;//mov numBlock,#96
 8008fde:	4b45      	ldr	r3, [pc, #276]	@ (80090f4 <logger+0x6a0>)
 8008fe0:	2260      	movs	r2, #96	@ 0x60
 8008fe2:	701a      	strb	r2, [r3, #0]
         numByte = 9;//mov	numByte,#9
 8008fe4:	4b44      	ldr	r3, [pc, #272]	@ (80090f8 <logger+0x6a4>)
 8008fe6:	2209      	movs	r2, #9
 8008fe8:	701a      	strb	r2, [r3, #0]
         cntBlockFlash = cntBlockDATA;//mov	cntBlockFlash,cntBlockDATA
 8008fea:	4b44      	ldr	r3, [pc, #272]	@ (80090fc <logger+0x6a8>)
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	4b44      	ldr	r3, [pc, #272]	@ (8009100 <logger+0x6ac>)
 8008ff0:	701a      	strb	r2, [r3, #0]
         cntByteBlock = cntByteBlockDATA;//mov	cntByteBlock,cntByteBlockDATA
 8008ff2:	4b44      	ldr	r3, [pc, #272]	@ (8009104 <logger+0x6b0>)
 8008ff4:	781a      	ldrb	r2, [r3, #0]
 8008ff6:	4b44      	ldr	r3, [pc, #272]	@ (8009108 <logger+0x6b4>)
 8008ff8:	701a      	strb	r2, [r3, #0]
         //div X,A; / obtén el número de capturas enteras por bloque de flash
         //ld A,numByte;
         //mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
         //ld A,xl
         //ld wreg,A / wreg pasa como un dato más para la siguiente subrutina
         STM8_A = (128 / numByte);		 // obtén el número de capturas enteras por bloque de flash
 8008ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80090f8 <logger+0x6a4>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	0019      	movs	r1, r3
 8009000:	2080      	movs	r0, #128	@ 0x80
 8009002:	f7f7 f913 	bl	800022c <__divsi3>
 8009006:	0003      	movs	r3, r0
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4b40      	ldr	r3, [pc, #256]	@ (800910c <logger+0x6b8>)
 800900c:	701a      	strb	r2, [r3, #0]
         wreg = STM8_A * numByte;
 800900e:	4b3f      	ldr	r3, [pc, #252]	@ (800910c <logger+0x6b8>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	4a39      	ldr	r2, [pc, #228]	@ (80090f8 <logger+0x6a4>)
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	4353      	muls	r3, r2
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4b3d      	ldr	r3, [pc, #244]	@ (8009110 <logger+0x6bc>)
 800901c:	701a      	strb	r2, [r3, #0]

         //ldw		X,cntRegDATA
         cntRegDATA++;	//incw	X
 800901e:	4b3d      	ldr	r3, [pc, #244]	@ (8009114 <logger+0x6c0>)
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	3301      	adds	r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	4b3b      	ldr	r3, [pc, #236]	@ (8009114 <logger+0x6c0>)
 8009028:	801a      	strh	r2, [r3, #0]

		//;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
		//cpw		X,#1343
		if(cntRegDATA<1343)//jrult	no_clrREG_01
 800902a:	4b3a      	ldr	r3, [pc, #232]	@ (8009114 <logger+0x6c0>)
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	4a3a      	ldr	r2, [pc, #232]	@ (8009118 <logger+0x6c4>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d903      	bls.n	800903c <logger+0x5e8>
			goto no_clrREG_01;
		cntRegDATA = 1343;// ldw		X,#1343
 8009034:	4b37      	ldr	r3, [pc, #220]	@ (8009114 <logger+0x6c0>)
 8009036:	4a39      	ldr	r2, [pc, #228]	@ (800911c <logger+0x6c8>)
 8009038:	801a      	strh	r2, [r3, #0]
 800903a:	e000      	b.n	800903e <logger+0x5ea>
			goto no_clrREG_01;
 800903c:	46c0      	nop			@ (mov r8, r8)
no_clrREG_01:


         //ldw cntRegDATA,X
         cntReg = cntRegDATA;//ldw cntReg,X
 800903e:	4b35      	ldr	r3, [pc, #212]	@ (8009114 <logger+0x6c0>)
 8009040:	881a      	ldrh	r2, [r3, #0]
 8009042:	4b37      	ldr	r3, [pc, #220]	@ (8009120 <logger+0x6cc>)
 8009044:	801a      	strh	r2, [r3, #0]
		 //ldw X,#eeCntRegDATA
 		 cntRegPNT = &eeCntRegDATA;	//ldw cntRegPNT,X
 8009046:	4b37      	ldr	r3, [pc, #220]	@ (8009124 <logger+0x6d0>)
 8009048:	4a37      	ldr	r2, [pc, #220]	@ (8009128 <logger+0x6d4>)
 800904a:	601a      	str	r2, [r3, #0]

 		 load_buffer_logger();		//call	load_buffer_logger
 800904c:	f000 f8f0 	bl	8009230 <load_buffer_logger>

         //;---- Recupera datos de la subrutina
         cntBlockDATA = cntBlockFlash;//mov	cntBlockDATA,cntBlockFlash
 8009050:	4b2b      	ldr	r3, [pc, #172]	@ (8009100 <logger+0x6ac>)
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	4b29      	ldr	r3, [pc, #164]	@ (80090fc <logger+0x6a8>)
 8009056:	701a      	strb	r2, [r3, #0]
         cntByteBlockDATA = cntByteBlock;//mov	cntByteBlockDATA,cntByteBlock
 8009058:	4b2b      	ldr	r3, [pc, #172]	@ (8009108 <logger+0x6b4>)
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	4b29      	ldr	r3, [pc, #164]	@ (8009104 <logger+0x6b0>)
 800905e:	701a      	strb	r2, [r3, #0]
         if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerDATA; Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 8009060:	4b1c      	ldr	r3, [pc, #112]	@ (80090d4 <logger+0x680>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2201      	movs	r2, #1
 8009066:	4053      	eors	r3, r2
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d106      	bne.n	800907c <logger+0x628>
        	 	 goto noFullLoggerDATA;
         }
		flagsLogger[0] = 0;//bres	flagsLogger,#0
 800906e:	4b19      	ldr	r3, [pc, #100]	@ (80090d4 <logger+0x680>)
 8009070:	2200      	movs	r2, #0
 8009072:	701a      	strb	r2, [r3, #0]
		flagsLogger[1] = 1;//bset	flagsLogger,#1;					/ Indica que se llenó el logger de dato al menos una vez
 8009074:	4b17      	ldr	r3, [pc, #92]	@ (80090d4 <logger+0x680>)
 8009076:	2201      	movs	r2, #1
 8009078:	705a      	strb	r2, [r3, #1]
noFullLoggerDATA:

		goto fin_logger; //jp fin_logger;
 800907a:	e002      	b.n	8009082 <logger+0x62e>
        	 	 goto noFullLoggerDATA;
 800907c:	46c0      	nop			@ (mov r8, r8)
		goto fin_logger; //jp fin_logger;
 800907e:	e000      	b.n	8009082 <logger+0x62e>
		goto fin_logger; //jp fin_logger
 8009080:	46c0      	nop			@ (mov r8, r8)


fin_logger:

}
 8009082:	46c0      	nop			@ (mov r8, r8)
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	2000109e 	.word	0x2000109e
 800908c:	20000ec8 	.word	0x20000ec8
 8009090:	0803f804 	.word	0x0803f804
 8009094:	20000f28 	.word	0x20000f28
 8009098:	0803f805 	.word	0x0803f805
 800909c:	0803f806 	.word	0x0803f806
 80090a0:	0803f807 	.word	0x0803f807
 80090a4:	20000bb0 	.word	0x20000bb0
 80090a8:	20000bb1 	.word	0x20000bb1
 80090ac:	20000bce 	.word	0x20000bce
 80090b0:	20000db0 	.word	0x20000db0
 80090b4:	20000db2 	.word	0x20000db2
 80090b8:	20000bb2 	.word	0x20000bb2
 80090bc:	20000bb3 	.word	0x20000bb3
 80090c0:	20000da8 	.word	0x20000da8
 80090c4:	20000f2c 	.word	0x20000f2c
 80090c8:	200010ec 	.word	0x200010ec
 80090cc:	20001100 	.word	0x20001100
 80090d0:	20000f50 	.word	0x20000f50
 80090d4:	20000e04 	.word	0x20000e04
 80090d8:	20000d98 	.word	0x20000d98
 80090dc:	200000b8 	.word	0x200000b8
 80090e0:	20000db4 	.word	0x20000db4
 80090e4:	20000da4 	.word	0x20000da4
 80090e8:	20000c8c 	.word	0x20000c8c
 80090ec:	20000da0 	.word	0x20000da0
 80090f0:	0803c000 	.word	0x0803c000
 80090f4:	20000d9d 	.word	0x20000d9d
 80090f8:	20000d9e 	.word	0x20000d9e
 80090fc:	20000dad 	.word	0x20000dad
 8009100:	20000d9a 	.word	0x20000d9a
 8009104:	20000dac 	.word	0x20000dac
 8009108:	20000d9b 	.word	0x20000d9b
 800910c:	200008d0 	.word	0x200008d0
 8009110:	20000b55 	.word	0x20000b55
 8009114:	2000103a 	.word	0x2000103a
 8009118:	0000053e 	.word	0x0000053e
 800911c:	0000053f 	.word	0x0000053f
 8009120:	2000103e 	.word	0x2000103e
 8009124:	20001040 	.word	0x20001040
 8009128:	0803f810 	.word	0x0803f810

0800912c <load_event>:
void load_event(){
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
				//;---- Pasa los datos necesarios a la subrutina

		//ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];//ldw		dirBuffer,X;/ indica la dirección del buffer a cargar
 8009130:	4b2c      	ldr	r3, [pc, #176]	@ (80091e4 <load_event+0xb8>)
 8009132:	4a2d      	ldr	r2, [pc, #180]	@ (80091e8 <load_event+0xbc>)
 8009134:	601a      	str	r2, [r3, #0]
		//ldw		X,#eventLogger
		dirLogger = &eventLogger[0]; //ldw		dirLogger,X;	/ indica la dirección del logger a grabar
 8009136:	4b2d      	ldr	r3, [pc, #180]	@ (80091ec <load_event+0xc0>)
 8009138:	4a2d      	ldr	r2, [pc, #180]	@ (80091f0 <load_event+0xc4>)
 800913a:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800913c:	4b2d      	ldr	r3, [pc, #180]	@ (80091f4 <load_event+0xc8>)
 800913e:	22a0      	movs	r2, #160	@ 0xa0
 8009140:	701a      	strb	r2, [r3, #0]
		numByte = 14;//mov	numByte,#14;	/ número de bytes a cargar para logger de eventos = 14
 8009142:	4b2d      	ldr	r3, [pc, #180]	@ (80091f8 <load_event+0xcc>)
 8009144:	220e      	movs	r2, #14
 8009146:	701a      	strb	r2, [r3, #0]
		cntBlockFlash = cntBlockEVENT;//mov	cntBlockFlash,cntBlockEVENT; / pasa el número de bloques de evento grabados al momento
 8009148:	4b2c      	ldr	r3, [pc, #176]	@ (80091fc <load_event+0xd0>)
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	4b2c      	ldr	r3, [pc, #176]	@ (8009200 <load_event+0xd4>)
 800914e:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov	cntByteBlock,cntByteBlockEVENT; / pasa el número de bytes cargados al buffer de eventos al momento
 8009150:	4b2c      	ldr	r3, [pc, #176]	@ (8009204 <load_event+0xd8>)
 8009152:	781a      	ldrb	r2, [r3, #0]
 8009154:	4b2c      	ldr	r3, [pc, #176]	@ (8009208 <load_event+0xdc>)
 8009156:	701a      	strb	r2, [r3, #0]
		//div X,A;	/ obtén el número de capturas enteras por bloque de flash
		//ld A,numByte;	/
		//mul X,A;	/	obten el numero de bytes a almacenar por bloque de flash
		//ld A,xl
		//ld wreg,A; / wreg pasa como un dato más para la siguiente subrutina
		STM8_A = (128/numByte);
 8009158:	4b27      	ldr	r3, [pc, #156]	@ (80091f8 <load_event+0xcc>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	0019      	movs	r1, r3
 800915e:	2080      	movs	r0, #128	@ 0x80
 8009160:	f7f7 f864 	bl	800022c <__divsi3>
 8009164:	0003      	movs	r3, r0
 8009166:	b2da      	uxtb	r2, r3
 8009168:	4b28      	ldr	r3, [pc, #160]	@ (800920c <load_event+0xe0>)
 800916a:	701a      	strb	r2, [r3, #0]
		wreg = STM8_A * numByte;								/// wreg pasa como un dato más para la siguiente subrutina
 800916c:	4b27      	ldr	r3, [pc, #156]	@ (800920c <load_event+0xe0>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	4a21      	ldr	r2, [pc, #132]	@ (80091f8 <load_event+0xcc>)
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	4353      	muls	r3, r2
 8009176:	b2da      	uxtb	r2, r3
 8009178:	4b25      	ldr	r3, [pc, #148]	@ (8009210 <load_event+0xe4>)
 800917a:	701a      	strb	r2, [r3, #0]


		//ldw	X,cntRegEVENT
		cntRegEVENT++;				//incw	X
 800917c:	4b25      	ldr	r3, [pc, #148]	@ (8009214 <load_event+0xe8>)
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	4b23      	ldr	r3, [pc, #140]	@ (8009214 <load_event+0xe8>)
 8009186:	801a      	strh	r2, [r3, #0]
//		;Se agrega un limite para el contador de registros de datos (1120 registros en 10k de memoria ) (14 registros por cada 128 bytes)
//		cpw		X,#1439
//		jrult	no_clrREG_02
//		;clrw	X
//		ldw		X,#1439
		if(cntRegEVENT<1439)
 8009188:	4b22      	ldr	r3, [pc, #136]	@ (8009214 <load_event+0xe8>)
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	4a22      	ldr	r2, [pc, #136]	@ (8009218 <load_event+0xec>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d903      	bls.n	800919a <load_event+0x6e>
			goto no_clrREG_02;
		cntRegEVENT = 1439;
 8009192:	4b20      	ldr	r3, [pc, #128]	@ (8009214 <load_event+0xe8>)
 8009194:	4a21      	ldr	r2, [pc, #132]	@ (800921c <load_event+0xf0>)
 8009196:	801a      	strh	r2, [r3, #0]
 8009198:	e000      	b.n	800919c <load_event+0x70>
			goto no_clrREG_02;
 800919a:	46c0      	nop			@ (mov r8, r8)
no_clrREG_02:

		//ldw	cntRegEVENT,X
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800919c:	4b1d      	ldr	r3, [pc, #116]	@ (8009214 <load_event+0xe8>)
 800919e:	881a      	ldrh	r2, [r3, #0]
 80091a0:	4b1f      	ldr	r3, [pc, #124]	@ (8009220 <load_event+0xf4>)
 80091a2:	801a      	strh	r2, [r3, #0]
		//ldw	X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 80091a4:	4b1f      	ldr	r3, [pc, #124]	@ (8009224 <load_event+0xf8>)
 80091a6:	4a20      	ldr	r2, [pc, #128]	@ (8009228 <load_event+0xfc>)
 80091a8:	601a      	str	r2, [r3, #0]

		load_buffer_logger();		//call	load_buffer_logger
 80091aa:	f000 f841 	bl	8009230 <load_buffer_logger>

		//;---- Recupera datos de la subrutina
		cntBlockEVENT = cntBlockFlash;//mov	cntBlockEVENT,cntBlockFlash
 80091ae:	4b14      	ldr	r3, [pc, #80]	@ (8009200 <load_event+0xd4>)
 80091b0:	781a      	ldrb	r2, [r3, #0]
 80091b2:	4b12      	ldr	r3, [pc, #72]	@ (80091fc <load_event+0xd0>)
 80091b4:	701a      	strb	r2, [r3, #0]
		cntByteBlockEVENT = cntByteBlock;//mov	cntByteBlockEVENT,cntByteBlock;	guarda los cambios realizados por la rutina
 80091b6:	4b14      	ldr	r3, [pc, #80]	@ (8009208 <load_event+0xdc>)
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	4b12      	ldr	r3, [pc, #72]	@ (8009204 <load_event+0xd8>)
 80091bc:	701a      	strb	r2, [r3, #0]
		if(!flagsLogger[0]){//btjf	flagsLogger,#0,noFullLoggerEVENT;	Se reportó que se alcanzó el limite de logger ? (máximo número de bloques)
 80091be:	4b1b      	ldr	r3, [pc, #108]	@ (800922c <load_event+0x100>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	2201      	movs	r2, #1
 80091c4:	4053      	eors	r3, r2
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <load_event+0xae>
			goto noFullLoggerEVENT;
		}
		flagsLogger [0] = 0;//bres	flagsLogger,#0
 80091cc:	4b17      	ldr	r3, [pc, #92]	@ (800922c <load_event+0x100>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
		flagsLogger[2] = 1;//bset	flagsLogger,#2;		/ Indica que se llenó el logger de eventos al menos una vez
 80091d2:	4b16      	ldr	r3, [pc, #88]	@ (800922c <load_event+0x100>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	709a      	strb	r2, [r3, #2]
noFullLoggerEVENT:
                 //return; //ret
}
 80091d8:	e000      	b.n	80091dc <load_event+0xb0>
			goto noFullLoggerEVENT;
 80091da:	46c0      	nop			@ (mov r8, r8)
}
 80091dc:	46c0      	nop			@ (mov r8, r8)
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	46c0      	nop			@ (mov r8, r8)
 80091e4:	20000da4 	.word	0x20000da4
 80091e8:	20000d0c 	.word	0x20000d0c
 80091ec:	20000da0 	.word	0x20000da0
 80091f0:	08037000 	.word	0x08037000
 80091f4:	20000d9d 	.word	0x20000d9d
 80091f8:	20000d9e 	.word	0x20000d9e
 80091fc:	20000daf 	.word	0x20000daf
 8009200:	20000d9a 	.word	0x20000d9a
 8009204:	20000dae 	.word	0x20000dae
 8009208:	20000d9b 	.word	0x20000d9b
 800920c:	200008d0 	.word	0x200008d0
 8009210:	20000b55 	.word	0x20000b55
 8009214:	2000103c 	.word	0x2000103c
 8009218:	0000059e 	.word	0x0000059e
 800921c:	0000059f 	.word	0x0000059f
 8009220:	2000103e 	.word	0x2000103e
 8009224:	20001040 	.word	0x20001040
 8009228:	0803f812 	.word	0x0803f812
 800922c:	20000e04 	.word	0x20000e04

08009230 <load_buffer_logger>:

void load_buffer_logger(){
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
		uint8_t *point_X;
		uint8_t *point_Y;
		uint8_t *tempo2;

		//;---- Carga datos a buffer de datos en RAM
		point_Y = dirDataLoad;//LDW	Y,dirDataLoad;		/ Apunta a los datos a loggear
 8009236:	4b45      	ldr	r3, [pc, #276]	@ (800934c <load_buffer_logger+0x11c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer;	/ Apunta al buffer de datos en RAM
 800923c:	4b44      	ldr	r3, [pc, #272]	@ (8009350 <load_buffer_logger+0x120>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60fb      	str	r3, [r7, #12]
		//clr	resulh
		//mov	resull,cntByteBlock
		//addw	X,resulh;	/	suma al apuntador el número de bytes que han sido grabados
		point_X = &point_X[cntByteBlock];
 8009242:	4b44      	ldr	r3, [pc, #272]	@ (8009354 <load_buffer_logger+0x124>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	001a      	movs	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	189b      	adds	r3, r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
		cntByteLogg = 0;//clr cntByteLogg;	/ limpia contrador de datos cargados
 800924e:	4b42      	ldr	r3, [pc, #264]	@ (8009358 <load_buffer_logger+0x128>)
 8009250:	2200      	movs	r2, #0
 8009252:	701a      	strb	r2, [r3, #0]
load_buffer:
		//LD A,(Y) ;	/	Copia los datos al buffer en RAM
		//LD (X),A;
        *point_X = *point_Y;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	781a      	ldrb	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	701a      	strb	r2, [r3, #0]
        point_X++;//INCW X;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3301      	adds	r3, #1
 8009260:	60fb      	str	r3, [r7, #12]
        point_Y++;//INCW Y; / Incrementa apuntadores
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3301      	adds	r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
        cntByteLogg++;//INC cntByteLogg; /	Incrementa el numero de bytes cargados
 8009268:	4b3b      	ldr	r3, [pc, #236]	@ (8009358 <load_buffer_logger+0x128>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	3301      	adds	r3, #1
 800926e:	b2da      	uxtb	r2, r3
 8009270:	4b39      	ldr	r3, [pc, #228]	@ (8009358 <load_buffer_logger+0x128>)
 8009272:	701a      	strb	r2, [r3, #0]
		cntByteBlock++;//INC	cntByteBlock; /	Incrementa el numero de bytes cargados al buffer
 8009274:	4b37      	ldr	r3, [pc, #220]	@ (8009354 <load_buffer_logger+0x124>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	b2da      	uxtb	r2, r3
 800927c:	4b35      	ldr	r3, [pc, #212]	@ (8009354 <load_buffer_logger+0x124>)
 800927e:	701a      	strb	r2, [r3, #0]

		//ld A,cntByteBlock; / Ya se llenó el buffer ?
		if(cntByteBlock < wreg){//cp A,wreg
 8009280:	4b34      	ldr	r3, [pc, #208]	@ (8009354 <load_buffer_logger+0x124>)
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	4b35      	ldr	r3, [pc, #212]	@ (800935c <load_buffer_logger+0x12c>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d352      	bcc.n	8009332 <load_buffer_logger+0x102>

		}
		//;---- Graba buffer en bloque de flash

									//LDW	X,dirBuffer; / Apunta al buffer de datos en RAM
		point_X = &dirBuffer[127];	//addw	X,#127;	/ Apunta al último byte del buffer
 800928c:	4b30      	ldr	r3, [pc, #192]	@ (8009350 <load_buffer_logger+0x120>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	337f      	adds	r3, #127	@ 0x7f
 8009292:	60fb      	str	r3, [r7, #12]
		STM8_A = *point_X;			//ld A,(X)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	4b31      	ldr	r3, [pc, #196]	@ (8009360 <load_buffer_logger+0x130>)
 800929a:	701a      	strb	r2, [r3, #0]
		STM8_A++;   //inc	A;	/ incrementa el byte
 800929c:	4b30      	ldr	r3, [pc, #192]	@ (8009360 <load_buffer_logger+0x130>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	3301      	adds	r3, #1
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009360 <load_buffer_logger+0x130>)
 80092a6:	701a      	strb	r2, [r3, #0]
		*point_X = STM8_A;	 //ld	(X),A;	/ devuelve el dato incrementado al buffer
 80092a8:	4b2d      	ldr	r3, [pc, #180]	@ (8009360 <load_buffer_logger+0x130>)
 80092aa:	781a      	ldrb	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	701a      	strb	r2, [r3, #0]
		//;---- Borra penúltimo byte de buffer
		point_X--;//decw	X
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
		*point_X = 0;//clr	(X)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	701a      	strb	r2, [r3, #0]

		ProgMemCode = 0xAA;//mov	ProgMemCode,#$AA;	/ Indica que se va a grabar bloque de Flash
 80092bc:	4b29      	ldr	r3, [pc, #164]	@ (8009364 <load_buffer_logger+0x134>)
 80092be:	22aa      	movs	r2, #170	@ 0xaa
 80092c0:	701a      	strb	r2, [r3, #0]
		//ld   A,cntBlockFlash;/ Toma el número de bloques grabados en Flash
		//ldw  X,#128;	/ Carga el tamaño de los bloques (128 bytes)
		STM8_16_X= 	128 * cntBlockFlash;//mul X,A; / Multiplicalos
 80092c2:	4b29      	ldr	r3, [pc, #164]	@ (8009368 <load_buffer_logger+0x138>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	01db      	lsls	r3, r3, #7
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	4b28      	ldr	r3, [pc, #160]	@ (800936c <load_buffer_logger+0x13c>)
 80092cc:	801a      	strh	r2, [r3, #0]
		 //addw X,dirLogger;/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[STM8_16_X];//LDW	dirPointer,X
 80092ce:	4b28      	ldr	r3, [pc, #160]	@ (8009370 <load_buffer_logger+0x140>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a26      	ldr	r2, [pc, #152]	@ (800936c <load_buffer_logger+0x13c>)
 80092d4:	8812      	ldrh	r2, [r2, #0]
 80092d6:	189a      	adds	r2, r3, r2
 80092d8:	4b26      	ldr	r3, [pc, #152]	@ (8009374 <load_buffer_logger+0x144>)
 80092da:	601a      	str	r2, [r3, #0]
		//LDW	X,dirBuffer;	/ apunta al buffer de datos en RAM
		//LDW	dataPointer,X
		dataPointer = dirBuffer;
 80092dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009350 <load_buffer_logger+0x120>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	4b25      	ldr	r3, [pc, #148]	@ (8009378 <load_buffer_logger+0x148>)
 80092e2:	601a      	str	r2, [r3, #0]
		tempo2 = point_Y; // Y Aqui sigue EXISTIENDO, no necesita respaldarse   ------ //LDW	tempo2,Y;	/ almacena temporalmente el apuntador de RAM
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	607b      	str	r3, [r7, #4]

		GRABA_BLOCK();		//call	GRABA_BLOCK
 80092e8:	f7fd fe2a 	bl	8006f40 <GRABA_BLOCK>

		save_timeUNIX();	//call	save_timeUNIX
 80092ec:	f7fd fd44 	bl	8006d78 <save_timeUNIX>

		save_cntReg();		//call	save_cntReg
 80092f0:	f7fd fd08 	bl	8006d04 <save_cntReg>

		cntBlockFlash++;//inc cntBlockFlash
 80092f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009368 <load_buffer_logger+0x138>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009368 <load_buffer_logger+0x138>)
 80092fe:	701a      	strb	r2, [r3, #0]
		//ld A,cntBlockFlash; / Ya se acabo la Flash reservada para datos ?
		if(cntBlockFlash < numBlock){//cp A,numBlock
 8009300:	4b19      	ldr	r3, [pc, #100]	@ (8009368 <load_buffer_logger+0x138>)
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	4b1d      	ldr	r3, [pc, #116]	@ (800937c <load_buffer_logger+0x14c>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d306      	bcc.n	800931a <load_buffer_logger+0xea>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
		}
		cntBlockFlash = 0;//clr	cntBlockFlash;	/ limpia el contador de bloques de Flash grabados
 800930c:	4b16      	ldr	r3, [pc, #88]	@ (8009368 <load_buffer_logger+0x138>)
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]

		flagsLogger[0] = 1;//bset	flagsLogger,#0;					/ indica que se llegó al limite del logger
 8009312:	4b1b      	ldr	r3, [pc, #108]	@ (8009380 <load_buffer_logger+0x150>)
 8009314:	2201      	movs	r2, #1
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	e000      	b.n	800931c <load_buffer_logger+0xec>
			goto load_buffer_00;//jrult	load_buffer_00;	/ No, continua con la carga
 800931a:	46c0      	nop			@ (mov r8, r8)
load_buffer_00:
		load_next_buffer();		//call	load_next_buffer; / Después de grabar bloques de Flash, craga buffer de RAM con el siguiente bloque de datos
 800931c:	f7fd fcb8 	bl	8006c90 <load_next_buffer>
		point_Y = tempo2;//LDW	Y,tempo2; / recupera el apuntador de RAM
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60bb      	str	r3, [r7, #8]
		point_X = dirBuffer;//LDW	X,dirBuffer; / Reinicia el apuntador del buffer de datos en RAM
 8009324:	4b0a      	ldr	r3, [pc, #40]	@ (8009350 <load_buffer_logger+0x120>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60fb      	str	r3, [r7, #12]
		cntByteBlock = 0;//clr	cntByteBlock; /	limpia contador de bytes cargados al buffer
 800932a:	4b0a      	ldr	r3, [pc, #40]	@ (8009354 <load_buffer_logger+0x124>)
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	e000      	b.n	8009334 <load_buffer_logger+0x104>
				goto load_buffer_01;//jrult	load_buffer_01;	/ No, continua con la carga
 8009332:	46c0      	nop			@ (mov r8, r8)

load_buffer_01:
		//ld A,cntByteLogg;	/ Ya se cargaron los datos indicados?
		if(cntByteLogg < numByte){//cp A,numByte;
 8009334:	4b08      	ldr	r3, [pc, #32]	@ (8009358 <load_buffer_logger+0x128>)
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	4b12      	ldr	r3, [pc, #72]	@ (8009384 <load_buffer_logger+0x154>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	d200      	bcs.n	8009342 <load_buffer_logger+0x112>
			goto load_buffer;//jrult load_buffer;/ No, continua cargadno
 8009340:	e788      	b.n	8009254 <load_buffer_logger+0x24>
		}
					//ret
		asm ("nop");
 8009342:	46c0      	nop			@ (mov r8, r8)

}
 8009344:	46c0      	nop			@ (mov r8, r8)
 8009346:	46bd      	mov	sp, r7
 8009348:	b004      	add	sp, #16
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20000da8 	.word	0x20000da8
 8009350:	20000da4 	.word	0x20000da4
 8009354:	20000d9b 	.word	0x20000d9b
 8009358:	20000d9c 	.word	0x20000d9c
 800935c:	20000b55 	.word	0x20000b55
 8009360:	200008d0 	.word	0x200008d0
 8009364:	20000d8c 	.word	0x20000d8c
 8009368:	20000d9a 	.word	0x20000d9a
 800936c:	200008d2 	.word	0x200008d2
 8009370:	20000da0 	.word	0x20000da0
 8009374:	20000d90 	.word	0x20000d90
 8009378:	20000d94 	.word	0x20000d94
 800937c:	20000d9d 	.word	0x20000d9d
 8009380:	20000e04 	.word	0x20000e04
 8009384:	20000d9e 	.word	0x20000d9e

08009388 <millis>:
static void check_Tick_1ms(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned long millis(){
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0

    return timemilis;
 800938c:	4b02      	ldr	r3, [pc, #8]	@ (8009398 <millis+0x10>)
 800938e:	681b      	ldr	r3, [r3, #0]
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	200008dc 	.word	0x200008dc

0800939c <configura_perif_2>:

	HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);
}

void configura_perif_2(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 80093a0:	f000 fe5e 	bl	800a060 <MX_GPIO_Init>
	  MX_DMA_Init();
 80093a4:	f000 fe36 	bl	800a014 <MX_DMA_Init>
	  MX_ADC1_Init();
 80093a8:	f000 fa9c 	bl	80098e4 <MX_ADC1_Init>
	  MX_I2C1_Init();
 80093ac:	f000 fbf8 	bl	8009ba0 <MX_I2C1_Init>
	  MX_TIM3_Init();
 80093b0:	f000 fcd0 	bl	8009d54 <MX_TIM3_Init>
	  MX_TIM6_Init();
 80093b4:	f000 fd50 	bl	8009e58 <MX_TIM6_Init>
	  MX_USART2_UART_Init();
 80093b8:	f000 fd8e 	bl	8009ed8 <MX_USART2_UART_Init>
	  MX_USART4_UART_Init();
 80093bc:	f000 fdda 	bl	8009f74 <MX_USART4_UART_Init>
	  //MX_IWDG_Init();

}
 80093c0:	46c0      	nop			@ (mov r8, r8)
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <check_Tick_1ms>:

//**********************************************************************************************************************************************************
//**********************************************************************************************************************************************************
static void check_Tick_1ms(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0

				presc_tick_1ms++;
 80093cc:	4b21      	ldr	r3, [pc, #132]	@ (8009454 <check_Tick_1ms+0x8c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	4b20      	ldr	r3, [pc, #128]	@ (8009454 <check_Tick_1ms+0x8c>)
 80093d4:	601a      	str	r2, [r3, #0]
				if(presc_tick_1ms >= 4)							// contador prescala 1ms =
 80093d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009454 <check_Tick_1ms+0x8c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b03      	cmp	r3, #3
 80093dc:	dd0f      	ble.n	80093fe <check_Tick_1ms+0x36>
					{
						presc_tick_1ms = 0;
 80093de:	4b1d      	ldr	r3, [pc, #116]	@ (8009454 <check_Tick_1ms+0x8c>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
						tick_1ms = 1;							// Manuel, levanta flag 1ms
 80093e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <check_Tick_1ms+0x90>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	701a      	strb	r2, [r3, #0]
						presc_tick_10ms++;
 80093ea:	4b1c      	ldr	r3, [pc, #112]	@ (800945c <check_Tick_1ms+0x94>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	4b1a      	ldr	r3, [pc, #104]	@ (800945c <check_Tick_1ms+0x94>)
 80093f2:	601a      	str	r2, [r3, #0]
						timemilis++;							// variable contadora de milisegundos
 80093f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009460 <check_Tick_1ms+0x98>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	4b19      	ldr	r3, [pc, #100]	@ (8009460 <check_Tick_1ms+0x98>)
 80093fc:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_10ms >= 10)						// contador prescala 10ms
 80093fe:	4b17      	ldr	r3, [pc, #92]	@ (800945c <check_Tick_1ms+0x94>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b09      	cmp	r3, #9
 8009404:	dd0a      	ble.n	800941c <check_Tick_1ms+0x54>
					{
						presc_tick_10ms = 0;
 8009406:	4b15      	ldr	r3, [pc, #84]	@ (800945c <check_Tick_1ms+0x94>)
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]
						tick_10ms =1;							// flag base de tiempo 10ms
 800940c:	4b15      	ldr	r3, [pc, #84]	@ (8009464 <check_Tick_1ms+0x9c>)
 800940e:	2201      	movs	r2, #1
 8009410:	701a      	strb	r2, [r3, #0]
						presc_tick_100ms++;
 8009412:	4b15      	ldr	r3, [pc, #84]	@ (8009468 <check_Tick_1ms+0xa0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	4b13      	ldr	r3, [pc, #76]	@ (8009468 <check_Tick_1ms+0xa0>)
 800941a:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_100ms >= 10)						// contador prescala 100ms
 800941c:	4b12      	ldr	r3, [pc, #72]	@ (8009468 <check_Tick_1ms+0xa0>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b09      	cmp	r3, #9
 8009422:	dd0a      	ble.n	800943a <check_Tick_1ms+0x72>
					{
						presc_tick_100ms = 0;
 8009424:	4b10      	ldr	r3, [pc, #64]	@ (8009468 <check_Tick_1ms+0xa0>)
 8009426:	2200      	movs	r2, #0
 8009428:	601a      	str	r2, [r3, #0]
						tick_100ms =1;							// flag base de tiempo 100ms
 800942a:	4b10      	ldr	r3, [pc, #64]	@ (800946c <check_Tick_1ms+0xa4>)
 800942c:	2201      	movs	r2, #1
 800942e:	701a      	strb	r2, [r3, #0]
						presc_tick_1s++;
 8009430:	4b0f      	ldr	r3, [pc, #60]	@ (8009470 <check_Tick_1ms+0xa8>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	4b0e      	ldr	r3, [pc, #56]	@ (8009470 <check_Tick_1ms+0xa8>)
 8009438:	601a      	str	r2, [r3, #0]
					}
				if(presc_tick_1s >= 10)							// contador prescala 1s
 800943a:	4b0d      	ldr	r3, [pc, #52]	@ (8009470 <check_Tick_1ms+0xa8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b09      	cmp	r3, #9
 8009440:	dd05      	ble.n	800944e <check_Tick_1ms+0x86>
					{
						presc_tick_1s = 0;
 8009442:	4b0b      	ldr	r3, [pc, #44]	@ (8009470 <check_Tick_1ms+0xa8>)
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]
						tick_1s =1;								// flag base de tiempo 1s
 8009448:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <check_Tick_1ms+0xac>)
 800944a:	2201      	movs	r2, #1
 800944c:	701a      	strb	r2, [r3, #0]
					}
		//Manuel 19-FEB-2021:		}
}
 800944e:	46c0      	nop			@ (mov r8, r8)
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	200008e0 	.word	0x200008e0
 8009458:	200008d4 	.word	0x200008d4
 800945c:	200008e4 	.word	0x200008e4
 8009460:	200008dc 	.word	0x200008dc
 8009464:	200008d5 	.word	0x200008d5
 8009468:	200008e8 	.word	0x200008e8
 800946c:	200008d6 	.word	0x200008d6
 8009470:	200008ec 	.word	0x200008ec
 8009474:	200008d7 	.word	0x200008d7

08009478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	initEEPROMEmulated(); // Init EEPROM Emulated
 800947e:	f7f9 f839 	bl	80024f4 <initEEPROMEmulated>
	timeRstBLE = 1;
 8009482:	4bc7      	ldr	r3, [pc, #796]	@ (80097a0 <main+0x328>)
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
	inicio ();
 8009488:	f7ff f8ae 	bl	80085e8 <inicio>
	ProcesosC = 6;
 800948c:	4bc5      	ldr	r3, [pc, #788]	@ (80097a4 <main+0x32c>)
 800948e:	2206      	movs	r2, #6
 8009490:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009492:	f007 fdfe 	bl	8011092 <HAL_Init>

  /* USER CODE BEGIN Init */
  configura_perif_2();
 8009496:	f7ff ff81 	bl	800939c <configura_perif_2>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800949a:	f000 f9d1 	bl	8009840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800949e:	f000 fddf 	bl	800a060 <MX_GPIO_Init>
  MX_DMA_Init();
 80094a2:	f000 fdb7 	bl	800a014 <MX_DMA_Init>
  MX_ADC1_Init();
 80094a6:	f000 fa1d 	bl	80098e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80094aa:	f000 fb79 	bl	8009ba0 <MX_I2C1_Init>
  MX_IWDG_Init();
 80094ae:	f000 fbb9 	bl	8009c24 <MX_IWDG_Init>
  MX_RTC_Init();
 80094b2:	f000 fbd9 	bl	8009c68 <MX_RTC_Init>
  MX_TIM3_Init();
 80094b6:	f000 fc4d 	bl	8009d54 <MX_TIM3_Init>
  MX_TIM6_Init();
 80094ba:	f000 fccd 	bl	8009e58 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80094be:	f000 fd0b 	bl	8009ed8 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 80094c2:	f000 fd57 	bl	8009f74 <MX_USART4_UART_Init>
  MX_FLASH_Init();
 80094c6:	f000 fb59 	bl	8009b7c <MX_FLASH_Init>
  /* USER CODE BEGIN 2 */
  Modbus_ModbusSalave ();
 80094ca:	f7fa fe99 	bl	8004200 <Modbus_ModbusSalave>
  //ModbusMaster_begin(eePlantilla[eeAddModBus]);		// Manuel 23-MAR-2022	ModbusMaster_begin(222);
  ModbusMaster_begin((uint8_t)findLastValue((uint32_t) &eePlantilla[eeAddModBus]));
 80094ce:	4bb6      	ldr	r3, [pc, #728]	@ (80097a8 <main+0x330>)
 80094d0:	0018      	movs	r0, r3
 80094d2:	f7f9 fba3 	bl	8002c1c <findLastValue>
 80094d6:	0003      	movs	r3, r0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	0018      	movs	r0, r3
 80094dc:	f7fa fe96 	bl	800420c <ModbusMaster_begin>
  TR485_Trasnmiting = 0;					//17-DIC-2021		El dispositivo inicialmente escucha
 80094e0:	4bb2      	ldr	r3, [pc, #712]	@ (80097ac <main+0x334>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 80094e6:	4bb2      	ldr	r3, [pc, #712]	@ (80097b0 <main+0x338>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	2104      	movs	r1, #4
 80094ec:	0018      	movs	r0, r3
 80094ee:	f00a f8e6 	bl	80136be <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BluetoothState = 3;			// Maquina de estados Bluetooth 1:Configuracion 2:Obtencion parametros 3:Tx/RX
 80094f2:	4bb0      	ldr	r3, [pc, #704]	@ (80097b4 <main+0x33c>)
 80094f4:	2203      	movs	r2, #3
 80094f6:	701a      	strb	r2, [r3, #0]
  timeRstBLE = 8;
 80094f8:	4ba9      	ldr	r3, [pc, #676]	@ (80097a0 <main+0x328>)
 80094fa:	2208      	movs	r2, #8
 80094fc:	701a      	strb	r2, [r3, #0]
  BluetoothState = 1;
 80094fe:	4bad      	ldr	r3, [pc, #692]	@ (80097b4 <main+0x33c>)
 8009500:	2201      	movs	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PFULLDEF_VSEN, GPIO_PIN_SET);      //02-Jul-2024:  Habilita VSEN
 8009504:	4bac      	ldr	r3, [pc, #688]	@ (80097b8 <main+0x340>)
 8009506:	2201      	movs	r2, #1
 8009508:	2120      	movs	r1, #32
 800950a:	0018      	movs	r0, r3
 800950c:	f00a f8d7 	bl	80136be <HAL_GPIO_WritePin>

  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8009510:	2007      	movs	r0, #7
 8009512:	f009 f89a 	bl	801264a <HAL_NVIC_DisableIRQ>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8009516:	4ba9      	ldr	r3, [pc, #676]	@ (80097bc <main+0x344>)
 8009518:	0018      	movs	r0, r3
 800951a:	f00e fd87 	bl	801802c <HAL_RTCEx_DeactivateWakeUpTimer>

  //HAL_TIM_PWM_Start (&htim3,TIM_CHANNEL_2);			// Enciende PWM   JTA eliminar buzer inicial
  while(Count_Test2 < 130000)
 800951e:	e00e      	b.n	800953e <main+0xc6>
  {
		Count_Test2++;//  eliminar JTA buzzer
 8009520:	4ba7      	ldr	r3, [pc, #668]	@ (80097c0 <main+0x348>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	4ba6      	ldr	r3, [pc, #664]	@ (80097c0 <main+0x348>)
 8009528:	601a      	str	r2, [r3, #0]
		if(Count_Test2 == 129999 ) //eliminar JTA buzzer
 800952a:	4ba5      	ldr	r3, [pc, #660]	@ (80097c0 <main+0x348>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4aa5      	ldr	r2, [pc, #660]	@ (80097c4 <main+0x34c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d104      	bne.n	800953e <main+0xc6>
		{
			HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2); //eliminar JTA buzzer
 8009534:	4ba4      	ldr	r3, [pc, #656]	@ (80097c8 <main+0x350>)
 8009536:	2104      	movs	r1, #4
 8009538:	0018      	movs	r0, r3
 800953a:	f00e ff5d 	bl	80183f8 <HAL_TIM_PWM_Stop>
  while(Count_Test2 < 130000)
 800953e:	4ba0      	ldr	r3, [pc, #640]	@ (80097c0 <main+0x348>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4aa0      	ldr	r2, [pc, #640]	@ (80097c4 <main+0x34c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d9eb      	bls.n	8009520 <main+0xa8>
			//Count_Test2 = 255;//eliminar JTA buzzer
		}
  }
  Count_Test2 = 0;
 8009548:	4b9d      	ldr	r3, [pc, #628]	@ (80097c0 <main+0x348>)
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]

  asm ("nop");
 800954e:	46c0      	nop			@ (mov r8, r8)

  for (int i = 0; i < 1000; i++)
 8009550:	2300      	movs	r3, #0
 8009552:	607b      	str	r3, [r7, #4]
 8009554:	e009      	b.n	800956a <main+0xf2>
  {
	  HAL_Delay (1);
 8009556:	2001      	movs	r0, #1
 8009558:	f007 fe16 	bl	8011188 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 800955c:	4b9b      	ldr	r3, [pc, #620]	@ (80097cc <main+0x354>)
 800955e:	0018      	movs	r0, r3
 8009560:	f00c fa80 	bl	8015a64 <HAL_IWDG_Refresh>
  for (int i = 0; i < 1000; i++)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3301      	adds	r3, #1
 8009568:	607b      	str	r3, [r7, #4]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	23fa      	movs	r3, #250	@ 0xfa
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	429a      	cmp	r2, r3
 8009572:	dbf0      	blt.n	8009556 <main+0xde>


  while (1)
  {

testTimmingProcess:
 8009574:	46c0      	nop			@ (mov r8, r8)
	ProcesosC++;
 8009576:	4b8b      	ldr	r3, [pc, #556]	@ (80097a4 <main+0x32c>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	b2da      	uxtb	r2, r3
 800957e:	4b89      	ldr	r3, [pc, #548]	@ (80097a4 <main+0x32c>)
 8009580:	701a      	strb	r2, [r3, #0]
    while ( !(TIM6->SR & 0x0001) ){
 8009582:	e000      	b.n	8009586 <main+0x10e>
		// Espera hasta que se cumpla el overflow del timer 6
		// 125 us
		asm ("nop");
 8009584:	46c0      	nop			@ (mov r8, r8)
    while ( !(TIM6->SR & 0x0001) ){
 8009586:	4b92      	ldr	r3, [pc, #584]	@ (80097d0 <main+0x358>)
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	2201      	movs	r2, #1
 800958c:	4013      	ands	r3, r2
 800958e:	d0f9      	beq.n	8009584 <main+0x10c>
	}
	// Borra bandera de overflow
	TIM6->SR &= ~TIM_SR_UIF;
 8009590:	4b8f      	ldr	r3, [pc, #572]	@ (80097d0 <main+0x358>)
 8009592:	691a      	ldr	r2, [r3, #16]
 8009594:	4b8e      	ldr	r3, [pc, #568]	@ (80097d0 <main+0x358>)
 8009596:	2101      	movs	r1, #1
 8009598:	438a      	bics	r2, r1
 800959a:	611a      	str	r2, [r3, #16]
	HAL_IWDG_Refresh( &hiwdg );
 800959c:	4b8b      	ldr	r3, [pc, #556]	@ (80097cc <main+0x354>)
 800959e:	0018      	movs	r0, r3
 80095a0:	f00c fa60 	bl	8015a64 <HAL_IWDG_Refresh>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);	 //28-May-2024: Salida IO6 toogle test
 80095a4:	4b84      	ldr	r3, [pc, #528]	@ (80097b8 <main+0x340>)
 80095a6:	2104      	movs	r1, #4
 80095a8:	0018      	movs	r0, r3
 80095aa:	f00a f8a5 	bl	80136f8 <HAL_GPIO_TogglePin>
  	RndNumber++;       //RM_20240304 Para agregar PASSWORD de seguridad BLE
 80095ae:	4b89      	ldr	r3, [pc, #548]	@ (80097d4 <main+0x35c>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	3301      	adds	r3, #1
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	4b87      	ldr	r3, [pc, #540]	@ (80097d4 <main+0x35c>)
 80095b8:	701a      	strb	r2, [r3, #0]
      asm ("nop");
 80095ba:	46c0      	nop			@ (mov r8, r8)


    main10();					// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80095bc:	f7fb fddc 	bl	8005178 <main10>

    muestreo();
 80095c0:	f000 fe18 	bl	800a1f4 <muestreo>

  	if(StateSleep == 0x55){
 80095c4:	4b84      	ldr	r3, [pc, #528]	@ (80097d8 <main+0x360>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b55      	cmp	r3, #85	@ 0x55
 80095ca:	d101      	bne.n	80095d0 <main+0x158>
  		// C: Pendiente a Adaptar
  		//;Restablece el Tiempo RTC
  		asm ("nop");
 80095cc:	46c0      	nop			@ (mov r8, r8)
  		asm ("nop");
 80095ce:	46c0      	nop			@ (mov r8, r8)
  	}

  	retardoDeActuadores();		// ASM: <<<-- TRADUCCION COMPLETA -->>>
 80095d0:	f7fb fe5e 	bl	8005290 <retardoDeActuadores>

  	asm ("nop");
 80095d4:	46c0      	nop			@ (mov r8, r8)
  	// procesa la base de tiempo para C y modbus
  	check_Tick_1ms();
 80095d6:	f7ff fef7 	bl	80093c8 <check_Tick_1ms>

  	/*
  	Falta parte por insertar
  	 */
  	if(timeRstBLE){
 80095da:	4b71      	ldr	r3, [pc, #452]	@ (80097a0 <main+0x328>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d009      	beq.n	80095f6 <main+0x17e>
  		/* USART Disable */
  		// USART_Cmd(USART2, DISABLE);
        HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_SET);      //28-May-2024:  Enciende Modulo WIFI
 80095e2:	4b73      	ldr	r3, [pc, #460]	@ (80097b0 <main+0x338>)
 80095e4:	2201      	movs	r2, #1
 80095e6:	2140      	movs	r1, #64	@ 0x40
 80095e8:	0018      	movs	r0, r3
 80095ea:	f00a f868 	bl	80136be <HAL_GPIO_WritePin>
        //GPIOC->BSRR = GPIO_BSRR_BS_6;
  		BluetoothState = 1;
 80095ee:	4b71      	ldr	r3, [pc, #452]	@ (80097b4 <main+0x33c>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	e018      	b.n	8009628 <main+0x1b0>
  	}
  	else{
  		/* USART Enable */
  		// USART_Cmd(USART2, ENABLE);
  		HAL_GPIO_WritePin(GPIOC, PFULLDEF_FET_ON_OFF_WIFI, GPIO_PIN_RESET);      //28-May-2024:  Apaga Modulo WIFI
 80095f6:	4b6e      	ldr	r3, [pc, #440]	@ (80097b0 <main+0x338>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	2140      	movs	r1, #64	@ 0x40
 80095fc:	0018      	movs	r0, r3
 80095fe:	f00a f85e 	bl	80136be <HAL_GPIO_WritePin>
  		//GPIOC->BSRR = GPIO_BSRR_BR_6;

  		// State Machine Bluetooth    10-MAR-2022
  		switch(BluetoothState){
 8009602:	4b6c      	ldr	r3, [pc, #432]	@ (80097b4 <main+0x33c>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b03      	cmp	r3, #3
 8009608:	d00b      	beq.n	8009622 <main+0x1aa>
 800960a:	dc0d      	bgt.n	8009628 <main+0x1b0>
 800960c:	2b01      	cmp	r3, #1
 800960e:	d002      	beq.n	8009616 <main+0x19e>
 8009610:	2b02      	cmp	r3, #2
 8009612:	d003      	beq.n	800961c <main+0x1a4>
 8009614:	e008      	b.n	8009628 <main+0x1b0>
  			case 1:
  				SetUpBluetooth_Ble();		break;		// 1:Configuracion  .... (( Adaptando ))
 8009616:	f7fb f9f7 	bl	8004a08 <SetUpBluetooth_Ble>
 800961a:	e005      	b.n	8009628 <main+0x1b0>
  			case 2:
  				GetParamBluetooth_Ble();	break;		// 2:Obtencion parametros
 800961c:	f7fb fa60 	bl	8004ae0 <GetParamBluetooth_Ble>
 8009620:	e002      	b.n	8009628 <main+0x1b0>
  			case 3:
  				TransmitReceive_Ble();		break;		// 3:transmision-recepcion
 8009622:	f7fb fabd 	bl	8004ba0 <TransmitReceive_Ble>
 8009626:	46c0      	nop			@ (mov r8, r8)
  		}
  	}

  	Read_Inpunts_ble();				// 14-Mar-2022
 8009628:	f7fb fd0a 	bl	8005040 <Read_Inpunts_ble>
//  			flagsLogger [5] = 0;				// permite loggeo de datos
//  		}
//  		flagsTX [7] = 0;				// borra bandera de dispositivo conectado
//  	}

  	if(tick_1s){
 800962c:	4b6b      	ldr	r3, [pc, #428]	@ (80097dc <main+0x364>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <main+0x1ca>
  	  asm ("nop");
 8009634:	46c0      	nop			@ (mov r8, r8)
  	  Count_Test++;
 8009636:	4b6a      	ldr	r3, [pc, #424]	@ (80097e0 <main+0x368>)
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	4b68      	ldr	r3, [pc, #416]	@ (80097e0 <main+0x368>)
 8009640:	801a      	strh	r2, [r3, #0]
  	    //  *** Prueba de activacion de rele compresor
  	    //portX[rel_co] =  portX[rel_co] 1;
  	    //  *** Prueba de activacion de rele compresor
  	}

  	if(tick_1ms == 1){
 8009642:	4b68      	ldr	r3, [pc, #416]	@ (80097e4 <main+0x36c>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d005      	beq.n	8009656 <main+0x1de>
  		// tiempo para rutina buzzer
  		// #pragma asm
  		cnt_gen_ms++;//Incrementa el contador general de ms cada 1ms
 800964a:	4b67      	ldr	r3, [pc, #412]	@ (80097e8 <main+0x370>)
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	3301      	adds	r3, #1
 8009650:	b29a      	uxth	r2, r3
 8009652:	4b65      	ldr	r3, [pc, #404]	@ (80097e8 <main+0x370>)
 8009654:	801a      	strh	r2, [r3, #0]
  		// prescalaI2c++;
  	}

  		  		HAL_RTC_GetTime (&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 8009656:	4965      	ldr	r1, [pc, #404]	@ (80097ec <main+0x374>)
 8009658:	4b58      	ldr	r3, [pc, #352]	@ (80097bc <main+0x344>)
 800965a:	2201      	movs	r2, #1
 800965c:	0018      	movs	r0, r3
 800965e:	f00e fa53 	bl	8017b08 <HAL_RTC_GetTime>
  		  		HAL_RTC_GetDate (&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 8009662:	4963      	ldr	r1, [pc, #396]	@ (80097f0 <main+0x378>)
 8009664:	4b55      	ldr	r3, [pc, #340]	@ (80097bc <main+0x344>)
 8009666:	2201      	movs	r2, #1
 8009668:	0018      	movs	r0, r3
 800966a:	f00e fb57 	bl	8017d1c <HAL_RTC_GetDate>
  		  		timeBCD_year = hRtcDate.Year;
 800966e:	4b60      	ldr	r3, [pc, #384]	@ (80097f0 <main+0x378>)
 8009670:	78da      	ldrb	r2, [r3, #3]
 8009672:	4b60      	ldr	r3, [pc, #384]	@ (80097f4 <main+0x37c>)
 8009674:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_month = hRtcDate.Month;
 8009676:	4b5e      	ldr	r3, [pc, #376]	@ (80097f0 <main+0x378>)
 8009678:	785a      	ldrb	r2, [r3, #1]
 800967a:	4b5f      	ldr	r3, [pc, #380]	@ (80097f8 <main+0x380>)
 800967c:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_day = hRtcDate.Date;
 800967e:	4b5c      	ldr	r3, [pc, #368]	@ (80097f0 <main+0x378>)
 8009680:	789a      	ldrb	r2, [r3, #2]
 8009682:	4b5e      	ldr	r3, [pc, #376]	@ (80097fc <main+0x384>)
 8009684:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_hour = hRtcTime.Hours;
 8009686:	4b59      	ldr	r3, [pc, #356]	@ (80097ec <main+0x374>)
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	4b5d      	ldr	r3, [pc, #372]	@ (8009800 <main+0x388>)
 800968c:	701a      	strb	r2, [r3, #0]
    	  		timeBCD_min = hRtcTime.Minutes;
 800968e:	4b57      	ldr	r3, [pc, #348]	@ (80097ec <main+0x374>)
 8009690:	785a      	ldrb	r2, [r3, #1]
 8009692:	4b5c      	ldr	r3, [pc, #368]	@ (8009804 <main+0x38c>)
 8009694:	701a      	strb	r2, [r3, #0]
  		  		timeBCD_sec = hRtcTime.Seconds;
 8009696:	4b55      	ldr	r3, [pc, #340]	@ (80097ec <main+0x374>)
 8009698:	789a      	ldrb	r2, [r3, #2]
 800969a:	4b5b      	ldr	r3, [pc, #364]	@ (8009808 <main+0x390>)
 800969c:	701a      	strb	r2, [r3, #0]


  		  		timeBCD_to_UNIX();
 800969e:	f7ff f965 	bl	800896c <timeBCD_to_UNIX>
  		  		//------------------------------------------------------------------------------------------
  		  		calculando_tiempo_UNIX ();
 80096a2:	f7fb fe93 	bl	80053cc <calculando_tiempo_UNIX>
//------------------------------------------------------------------------------------------
  		  		if(!flagsTime[f_timeConfigRTC]){
 80096a6:	4b59      	ldr	r3, [pc, #356]	@ (800980c <main+0x394>)
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2201      	movs	r2, #1
 80096ac:	4053      	eors	r3, r2
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d119      	bne.n	80096e8 <main+0x270>
  		  			goto noActTime;
  		  		}

  		  		timeSeconds_HW = (uint16_t) ((timeUNIX)>>16);
 80096b4:	4b56      	ldr	r3, [pc, #344]	@ (8009810 <main+0x398>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	0c1b      	lsrs	r3, r3, #16
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	4b55      	ldr	r3, [pc, #340]	@ (8009814 <main+0x39c>)
 80096be:	801a      	strh	r2, [r3, #0]
  		  		timeSeconds_LW = (uint16_t) (timeUNIX&0xFFFF);
 80096c0:	4b53      	ldr	r3, [pc, #332]	@ (8009810 <main+0x398>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	4b54      	ldr	r3, [pc, #336]	@ (8009818 <main+0x3a0>)
 80096c8:	801a      	strh	r2, [r3, #0]

  		  		if(timeBCD_sec_ANT == timeBCD_sec){
 80096ca:	4b54      	ldr	r3, [pc, #336]	@ (800981c <main+0x3a4>)
 80096cc:	781a      	ldrb	r2, [r3, #0]
 80096ce:	4b4e      	ldr	r3, [pc, #312]	@ (8009808 <main+0x390>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d00a      	beq.n	80096ec <main+0x274>
  		  			goto no_inc_cnt_sec;
  		  		}
  		  		timeBCD_sec_ANT = timeBCD_sec;
 80096d6:	4b4c      	ldr	r3, [pc, #304]	@ (8009808 <main+0x390>)
 80096d8:	781a      	ldrb	r2, [r3, #0]
 80096da:	4b50      	ldr	r3, [pc, #320]	@ (800981c <main+0x3a4>)
 80096dc:	701a      	strb	r2, [r3, #0]
  		  		decword(&cntLogger_H);
 80096de:	4b50      	ldr	r3, [pc, #320]	@ (8009820 <main+0x3a8>)
 80096e0:	0018      	movs	r0, r3
 80096e2:	f7fd fc34 	bl	8006f4e <decword>
 80096e6:	e002      	b.n	80096ee <main+0x276>
  		  			goto noActTime;
 80096e8:	46c0      	nop			@ (mov r8, r8)
 80096ea:	e000      	b.n	80096ee <main+0x276>
  		  			goto no_inc_cnt_sec;
 80096ec:	46c0      	nop			@ (mov r8, r8)
  		  no_inc_cnt_sec:
  		  noActTime:
		  asm ("nop");
 80096ee:	46c0      	nop			@ (mov r8, r8)

  	  	switch(ProcesosC)
 80096f0:	4b2c      	ldr	r3, [pc, #176]	@ (80097a4 <main+0x32c>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b07      	cmp	r3, #7
 80096f6:	d841      	bhi.n	800977c <main+0x304>
 80096f8:	009a      	lsls	r2, r3, #2
 80096fa:	4b4a      	ldr	r3, [pc, #296]	@ (8009824 <main+0x3ac>)
 80096fc:	18d3      	adds	r3, r2, r3
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	469f      	mov	pc, r3
  	  	{
  	  		case 0:
  	  			comunicacion();
 8009702:	f7fd fde3 	bl	80072cc <comunicacion>
  	  			break;		// ASM: Pendiente a traducir
 8009706:	e03d      	b.n	8009784 <main+0x30c>
  	  		case 1:
  	  			voltmetro();
 8009708:	f007 fa4a 	bl	8010ba0 <voltmetro>
  	  			break;		// ASM: Pendiente a traducir
 800970c:	e03a      	b.n	8009784 <main+0x30c>
  	  		case 2:
  	  			temper();
 800970e:	f002 fcf9 	bl	800c104 <temper>
  	  			break;		// ASM: Pendiente a traducir ..... Julio Torres
 8009712:	e037      	b.n	8009784 <main+0x30c>
  	  		case 3:
  	  //			if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_TC)){
  	  //				 asm ("nop");
  	  //			}
  	  			if(USART4->ISR & USART_ISR_TC){
 8009714:	4b44      	ldr	r3, [pc, #272]	@ (8009828 <main+0x3b0>)
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	2240      	movs	r2, #64	@ 0x40
 800971a:	4013      	ands	r3, r2
 800971c:	d005      	beq.n	800972a <main+0x2b2>
  	  			      HAL_GPIO_WritePin(GPIOC, PFULLDEF_MAX485_DE_AND_RE_NEG, GPIO_PIN_RESET);      //17-DIC-2021 El Driver inicalmente Escucha
 800971e:	4b24      	ldr	r3, [pc, #144]	@ (80097b0 <main+0x338>)
 8009720:	2200      	movs	r2, #0
 8009722:	2104      	movs	r1, #4
 8009724:	0018      	movs	r0, r3
 8009726:	f009 ffca 	bl	80136be <HAL_GPIO_WritePin>
  	  				 //GPIOC->BSRR = GPIO_BSRR_BR_2;
  	  			}
  	  			ModbusMap ();
 800972a:	f7f9 fd35 	bl	8003198 <ModbusMap>
  	  			noctar ();
 800972e:	f000 fefb 	bl	800a528 <noctar>
  	  			break;		// ASM: Pendiente a traducir
 8009732:	e027      	b.n	8009784 <main+0x30c>
  	  		case 4:
  	  			refrigera();
 8009734:	f000 fefe 	bl	800a534 <refrigera>
  	  			break;		// ASM: Pendiente a traducir
 8009738:	e024      	b.n	8009784 <main+0x30c>
  	  		case 5:
  	  			display();
 800973a:	f7fe fba9 	bl	8007e90 <display>
  	  			break;		// ASM: Pendiente a traducir
 800973e:	e021      	b.n	8009784 <main+0x30c>
  	  		case 6:
  	  			tiempo ();				// ASM: <<<-- TRADUCCION COMPLETA -->>> 15-Jul-2024
 8009740:	f003 fc26 	bl	800cf90 <tiempo>
  	  			if(bandera_act_fw_j == 0)    //Parche
 8009744:	4b39      	ldr	r3, [pc, #228]	@ (800982c <main+0x3b4>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2201      	movs	r2, #1
 800974a:	4053      	eors	r3, r2
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <main+0x2de>
  	  			{
  	  				logger ();				// ASM: Pendiente a traducir
 8009752:	f7ff f97f 	bl	8008a54 <logger>
  	  			}
 	  			tx_control ();			// ASM: "Faltan Comandos a Traducir"
 8009756:	f003 ffab 	bl	800d6b0 <tx_control>
//
  	  			if ( keyWrFirm == 0xAA){
 800975a:	4b35      	ldr	r3, [pc, #212]	@ (8009830 <main+0x3b8>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2baa      	cmp	r3, #170	@ 0xaa
 8009760:	d10f      	bne.n	8009782 <main+0x30a>
  	  			    asm ("nop");
 8009762:	46c0      	nop			@ (mov r8, r8)
  	  				if	( keyTx == 00 )	{
 8009764:	4b33      	ldr	r3, [pc, #204]	@ (8009834 <main+0x3bc>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <main+0x30a>
  	  				    asm ("nop");
 800976c:	46c0      	nop			@ (mov r8, r8)
// 	  					bootloader();
  	  				}
  	  			}
  	  			break;		// ASM: Pendiente a traducir
 800976e:	e008      	b.n	8009782 <main+0x30a>
  	  		case 7:
  	  			watch();
 8009770:	f007 fb5e 	bl	8010e30 <watch>
  	  			ProcesosC = 255;
 8009774:	4b0b      	ldr	r3, [pc, #44]	@ (80097a4 <main+0x32c>)
 8009776:	22ff      	movs	r2, #255	@ 0xff
 8009778:	701a      	strb	r2, [r3, #0]
  	  			break;		// ASM: Pendiente a traducir
 800977a:	e003      	b.n	8009784 <main+0x30c>
  	  		default:
  	  		    asm ("nop");
 800977c:	46c0      	nop			@ (mov r8, r8)
  	  			for (;;)      ;// Watch dog Reset
 800977e:	46c0      	nop			@ (mov r8, r8)
 8009780:	e7fd      	b.n	800977e <main+0x306>
  	  			break;		// ASM: Pendiente a traducir
 8009782:	46c0      	nop			@ (mov r8, r8)
  	  		break;

  	  	}

	  	// clear time flags
	  	tick_1ms = 0;						// flag base de tiempo 1ms
 8009784:	4b17      	ldr	r3, [pc, #92]	@ (80097e4 <main+0x36c>)
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
	  	tick_10ms = 0;					// flag base de tiempo 10ms
 800978a:	4b2b      	ldr	r3, [pc, #172]	@ (8009838 <main+0x3c0>)
 800978c:	2200      	movs	r2, #0
 800978e:	701a      	strb	r2, [r3, #0]
	  	tick_100ms = 0;					// flag base de tiempo 100ms
 8009790:	4b2a      	ldr	r3, [pc, #168]	@ (800983c <main+0x3c4>)
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
	  	tick_1s = 0;						// flag base de tiempo 1s
 8009796:	4b11      	ldr	r3, [pc, #68]	@ (80097dc <main+0x364>)
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
  {
 800979c:	e6eb      	b.n	8009576 <main+0xfe>
 800979e:	46c0      	nop			@ (mov r8, r8)
 80097a0:	20000ee8 	.word	0x20000ee8
 80097a4:	200008f0 	.word	0x200008f0
 80097a8:	0803f072 	.word	0x0803f072
 80097ac:	200008d9 	.word	0x200008d9
 80097b0:	50000800 	.word	0x50000800
 80097b4:	2000004c 	.word	0x2000004c
 80097b8:	50000400 	.word	0x50000400
 80097bc:	20000560 	.word	0x20000560
 80097c0:	200010e4 	.word	0x200010e4
 80097c4:	0001fbcf 	.word	0x0001fbcf
 80097c8:	20000590 	.word	0x20000590
 80097cc:	2000054c 	.word	0x2000054c
 80097d0:	40001000 	.word	0x40001000
 80097d4:	200003c5 	.word	0x200003c5
 80097d8:	200008f1 	.word	0x200008f1
 80097dc:	200008d7 	.word	0x200008d7
 80097e0:	20000b02 	.word	0x20000b02
 80097e4:	200008d4 	.word	0x200008d4
 80097e8:	20000f84 	.word	0x20000f84
 80097ec:	20001078 	.word	0x20001078
 80097f0:	2000108c 	.word	0x2000108c
 80097f4:	20001070 	.word	0x20001070
 80097f8:	20001071 	.word	0x20001071
 80097fc:	20001072 	.word	0x20001072
 8009800:	20001073 	.word	0x20001073
 8009804:	20001074 	.word	0x20001074
 8009808:	20001075 	.word	0x20001075
 800980c:	20001068 	.word	0x20001068
 8009810:	20001098 	.word	0x20001098
 8009814:	20000db0 	.word	0x20000db0
 8009818:	20000db2 	.word	0x20000db2
 800981c:	200010e9 	.word	0x200010e9
 8009820:	20000d98 	.word	0x20000d98
 8009824:	0801b2ac 	.word	0x0801b2ac
 8009828:	40004c00 	.word	0x40004c00
 800982c:	200010e8 	.word	0x200010e8
 8009830:	20000ee4 	.word	0x20000ee4
 8009834:	20000e19 	.word	0x20000e19
 8009838:	200008d5 	.word	0x200008d5
 800983c:	200008d6 	.word	0x200008d6

08009840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009840:	b590      	push	{r4, r7, lr}
 8009842:	b099      	sub	sp, #100	@ 0x64
 8009844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009846:	2414      	movs	r4, #20
 8009848:	193b      	adds	r3, r7, r4
 800984a:	0018      	movs	r0, r3
 800984c:	234c      	movs	r3, #76	@ 0x4c
 800984e:	001a      	movs	r2, r3
 8009850:	2100      	movs	r1, #0
 8009852:	f011 fa87 	bl	801ad64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009856:	1d3b      	adds	r3, r7, #4
 8009858:	0018      	movs	r0, r3
 800985a:	2310      	movs	r3, #16
 800985c:	001a      	movs	r2, r3
 800985e:	2100      	movs	r1, #0
 8009860:	f011 fa80 	bl	801ad64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009864:	2380      	movs	r3, #128	@ 0x80
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	0018      	movs	r0, r3
 800986a:	f00c f90b 	bl	8015a84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800986e:	193b      	adds	r3, r7, r4
 8009870:	221a      	movs	r2, #26
 8009872:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009874:	193b      	adds	r3, r7, r4
 8009876:	2280      	movs	r2, #128	@ 0x80
 8009878:	0052      	lsls	r2, r2, #1
 800987a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800987c:	0021      	movs	r1, r4
 800987e:	187b      	adds	r3, r7, r1
 8009880:	2240      	movs	r2, #64	@ 0x40
 8009882:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009884:	187b      	adds	r3, r7, r1
 8009886:	2201      	movs	r2, #1
 8009888:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800988a:	187b      	adds	r3, r7, r1
 800988c:	2201      	movs	r2, #1
 800988e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8009890:	187b      	adds	r3, r7, r1
 8009892:	2200      	movs	r2, #0
 8009894:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8009896:	187b      	adds	r3, r7, r1
 8009898:	22b0      	movs	r2, #176	@ 0xb0
 800989a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800989c:	187b      	adds	r3, r7, r1
 800989e:	2200      	movs	r2, #0
 80098a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80098a2:	187b      	adds	r3, r7, r1
 80098a4:	0018      	movs	r0, r3
 80098a6:	f00c f959 	bl	8015b5c <HAL_RCC_OscConfig>
 80098aa:	1e03      	subs	r3, r0, #0
 80098ac:	d001      	beq.n	80098b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80098ae:	f000 fc9b 	bl	800a1e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80098b2:	1d3b      	adds	r3, r7, #4
 80098b4:	2207      	movs	r2, #7
 80098b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80098b8:	1d3b      	adds	r3, r7, #4
 80098ba:	2200      	movs	r2, #0
 80098bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80098be:	1d3b      	adds	r3, r7, #4
 80098c0:	2200      	movs	r2, #0
 80098c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80098c4:	1d3b      	adds	r3, r7, #4
 80098c6:	2200      	movs	r2, #0
 80098c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80098ca:	1d3b      	adds	r3, r7, #4
 80098cc:	2101      	movs	r1, #1
 80098ce:	0018      	movs	r0, r3
 80098d0:	f00c fd6e 	bl	80163b0 <HAL_RCC_ClockConfig>
 80098d4:	1e03      	subs	r3, r0, #0
 80098d6:	d001      	beq.n	80098dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80098d8:	f000 fc86 	bl	800a1e8 <Error_Handler>
  }
}
 80098dc:	46c0      	nop			@ (mov r8, r8)
 80098de:	46bd      	mov	sp, r7
 80098e0:	b019      	add	sp, #100	@ 0x64
 80098e2:	bd90      	pop	{r4, r7, pc}

080098e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08a      	sub	sp, #40	@ 0x28
 80098e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	  /* Deshabilita watch dogs */
//	  ADC1->TR = 0xFFF0000;
	  ADC1 -> AWD1TR = 0xFFF0000;
 80098ea:	4b95      	ldr	r3, [pc, #596]	@ (8009b40 <MX_ADC1_Init+0x25c>)
 80098ec:	4a95      	ldr	r2, [pc, #596]	@ (8009b44 <MX_ADC1_Init+0x260>)
 80098ee:	621a      	str	r2, [r3, #32]
      ADC1 -> AWD2TR = 0xFFF0000;
 80098f0:	4b93      	ldr	r3, [pc, #588]	@ (8009b40 <MX_ADC1_Init+0x25c>)
 80098f2:	4a94      	ldr	r2, [pc, #592]	@ (8009b44 <MX_ADC1_Init+0x260>)
 80098f4:	625a      	str	r2, [r3, #36]	@ 0x24

	  /* Habilitar el reloj para ADC1 */
	  RCC->APBENR2 |= RCC_APBENR2_ADCEN;
 80098f6:	4b94      	ldr	r3, [pc, #592]	@ (8009b48 <MX_ADC1_Init+0x264>)
 80098f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80098fa:	4b93      	ldr	r3, [pc, #588]	@ (8009b48 <MX_ADC1_Init+0x264>)
 80098fc:	2180      	movs	r1, #128	@ 0x80
 80098fe:	0349      	lsls	r1, r1, #13
 8009900:	430a      	orrs	r2, r1
 8009902:	661a      	str	r2, [r3, #96]	@ 0x60
//	  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;

	  /* Habilitar el reloj para GPIOC */
	  RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8009904:	4b90      	ldr	r3, [pc, #576]	@ (8009b48 <MX_ADC1_Init+0x264>)
 8009906:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009908:	4b8f      	ldr	r3, [pc, #572]	@ (8009b48 <MX_ADC1_Init+0x264>)
 800990a:	2104      	movs	r1, #4
 800990c:	430a      	orrs	r2, r1
 800990e:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOA */
	  RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8009910:	4b8d      	ldr	r3, [pc, #564]	@ (8009b48 <MX_ADC1_Init+0x264>)
 8009912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009914:	4b8c      	ldr	r3, [pc, #560]	@ (8009b48 <MX_ADC1_Init+0x264>)
 8009916:	2101      	movs	r1, #1
 8009918:	430a      	orrs	r2, r1
 800991a:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Habilitar el reloj para GPIOB */
	  RCC->IOPENR |= RCC_IOPENR_GPIOEEN;
 800991c:	4b8a      	ldr	r3, [pc, #552]	@ (8009b48 <MX_ADC1_Init+0x264>)
 800991e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009920:	4b89      	ldr	r3, [pc, #548]	@ (8009b48 <MX_ADC1_Init+0x264>)
 8009922:	2110      	movs	r1, #16
 8009924:	430a      	orrs	r2, r1
 8009926:	64da      	str	r2, [r3, #76]	@ 0x4c

	  /* Configurar PC0 y PC1 en modo analógico */
	  GPIOC->MODER |= (GPIO_MODER_MODE0 | GPIO_MODER_MODE1);  // 11: Modo analógico
 8009928:	4b88      	ldr	r3, [pc, #544]	@ (8009b4c <MX_ADC1_Init+0x268>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	4b87      	ldr	r3, [pc, #540]	@ (8009b4c <MX_ADC1_Init+0x268>)
 800992e:	210f      	movs	r1, #15
 8009930:	430a      	orrs	r2, r1
 8009932:	601a      	str	r2, [r3, #0]
	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1); // 00: Sin pull-up/pull-down
 8009934:	4b85      	ldr	r3, [pc, #532]	@ (8009b4c <MX_ADC1_Init+0x268>)
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	4b84      	ldr	r3, [pc, #528]	@ (8009b4c <MX_ADC1_Init+0x268>)
 800993a:	210f      	movs	r1, #15
 800993c:	438a      	bics	r2, r1
 800993e:	60da      	str	r2, [r3, #12]

	  /* Configurar PA5, PA6 y PA7 en modo analógico */
	  GPIOA->MODER |= (GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8009940:	23a0      	movs	r3, #160	@ 0xa0
 8009942:	05db      	lsls	r3, r3, #23
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	23a0      	movs	r3, #160	@ 0xa0
 8009948:	05db      	lsls	r3, r3, #23
 800994a:	21fc      	movs	r1, #252	@ 0xfc
 800994c:	0209      	lsls	r1, r1, #8
 800994e:	430a      	orrs	r2, r1
 8009950:	601a      	str	r2, [r3, #0]
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8009952:	23a0      	movs	r3, #160	@ 0xa0
 8009954:	05db      	lsls	r3, r3, #23
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	23a0      	movs	r3, #160	@ 0xa0
 800995a:	05db      	lsls	r3, r3, #23
 800995c:	497c      	ldr	r1, [pc, #496]	@ (8009b50 <MX_ADC1_Init+0x26c>)
 800995e:	400a      	ands	r2, r1
 8009960:	60da      	str	r2, [r3, #12]

	  /* Configurar PB1 en modo analógico */
	  GPIOB->MODER |= GPIO_MODER_MODE1;
 8009962:	4b7c      	ldr	r3, [pc, #496]	@ (8009b54 <MX_ADC1_Init+0x270>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	4b7b      	ldr	r3, [pc, #492]	@ (8009b54 <MX_ADC1_Init+0x270>)
 8009968:	210c      	movs	r1, #12
 800996a:	430a      	orrs	r2, r1
 800996c:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD1;
 800996e:	4b79      	ldr	r3, [pc, #484]	@ (8009b54 <MX_ADC1_Init+0x270>)
 8009970:	68da      	ldr	r2, [r3, #12]
 8009972:	4b78      	ldr	r3, [pc, #480]	@ (8009b54 <MX_ADC1_Init+0x270>)
 8009974:	210c      	movs	r1, #12
 8009976:	438a      	bics	r2, r1
 8009978:	60da      	str	r2, [r3, #12]

	  ADC1->CFGR2 = 0xC0000000;
 800997a:	4b71      	ldr	r3, [pc, #452]	@ (8009b40 <MX_ADC1_Init+0x25c>)
 800997c:	22c0      	movs	r2, #192	@ 0xc0
 800997e:	0612      	lsls	r2, r2, #24
 8009980:	611a      	str	r2, [r3, #16]

	  ADC1->CFGR1 = 0x8;
 8009982:	4b6f      	ldr	r3, [pc, #444]	@ (8009b40 <MX_ADC1_Init+0x25c>)
 8009984:	2208      	movs	r2, #8
 8009986:	60da      	str	r2, [r3, #12]

	  ADC1->CR = 0x10000000;
 8009988:	4b6d      	ldr	r3, [pc, #436]	@ (8009b40 <MX_ADC1_Init+0x25c>)
 800998a:	2280      	movs	r2, #128	@ 0x80
 800998c:	0552      	lsls	r2, r2, #21
 800998e:	609a      	str	r2, [r3, #8]

	  ADC1->CHSELR = ADC_CHSELR_CHSEL9 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL14 |
 8009990:	4b6b      	ldr	r3, [pc, #428]	@ (8009b40 <MX_ADC1_Init+0x25c>)
 8009992:	4a71      	ldr	r2, [pc, #452]	@ (8009b58 <MX_ADC1_Init+0x274>)
 8009994:	629a      	str	r2, [r3, #40]	@ 0x28
	                 ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1;

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009996:	231c      	movs	r3, #28
 8009998:	18fb      	adds	r3, r7, r3
 800999a:	0018      	movs	r0, r3
 800999c:	230c      	movs	r3, #12
 800999e:	001a      	movs	r2, r3
 80099a0:	2100      	movs	r1, #0
 80099a2:	f011 f9df 	bl	801ad64 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80099a6:	1d3b      	adds	r3, r7, #4
 80099a8:	0018      	movs	r0, r3
 80099aa:	2318      	movs	r3, #24
 80099ac:	001a      	movs	r2, r3
 80099ae:	2100      	movs	r1, #0
 80099b0:	f011 f9d8 	bl	801ad64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80099b4:	4b69      	ldr	r3, [pc, #420]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099b6:	4a62      	ldr	r2, [pc, #392]	@ (8009b40 <MX_ADC1_Init+0x25c>)
 80099b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80099ba:	4b68      	ldr	r3, [pc, #416]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099bc:	22c0      	movs	r2, #192	@ 0xc0
 80099be:	0612      	lsls	r2, r2, #24
 80099c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80099c2:	4b66      	ldr	r3, [pc, #408]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099c4:	2208      	movs	r2, #8
 80099c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80099c8:	4b64      	ldr	r3, [pc, #400]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80099ce:	4b63      	ldr	r3, [pc, #396]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099d0:	2280      	movs	r2, #128	@ 0x80
 80099d2:	0612      	lsls	r2, r2, #24
 80099d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80099d6:	4b61      	ldr	r3, [pc, #388]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099d8:	2204      	movs	r2, #4
 80099da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80099dc:	4b5f      	ldr	r3, [pc, #380]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099de:	2200      	movs	r2, #0
 80099e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80099e2:	4b5e      	ldr	r3, [pc, #376]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80099e8:	4b5c      	ldr	r3, [pc, #368]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80099ee:	4b5b      	ldr	r3, [pc, #364]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80099f4:	4b59      	ldr	r3, [pc, #356]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099f6:	2220      	movs	r2, #32
 80099f8:	2100      	movs	r1, #0
 80099fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80099fc:	4b57      	ldr	r3, [pc, #348]	@ (8009b5c <MX_ADC1_Init+0x278>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009a02:	4b56      	ldr	r3, [pc, #344]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009a08:	4b54      	ldr	r3, [pc, #336]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a0a:	222c      	movs	r2, #44	@ 0x2c
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009a10:	4b52      	ldr	r3, [pc, #328]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009a16:	4b51      	ldr	r3, [pc, #324]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a1e:	223c      	movs	r2, #60	@ 0x3c
 8009a20:	2100      	movs	r1, #0
 8009a22:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8009a24:	4b4d      	ldr	r3, [pc, #308]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a26:	2280      	movs	r2, #128	@ 0x80
 8009a28:	0592      	lsls	r2, r2, #22
 8009a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f007 fdd4 	bl	80115dc <HAL_ADC_Init>
 8009a34:	1e03      	subs	r3, r0, #0
 8009a36:	d001      	beq.n	8009a3c <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8009a38:	f000 fbd6 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009a3c:	211c      	movs	r1, #28
 8009a3e:	187b      	adds	r3, r7, r1
 8009a40:	2201      	movs	r2, #1
 8009a42:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009a44:	187b      	adds	r3, r7, r1
 8009a46:	2201      	movs	r2, #1
 8009a48:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a4a:	187a      	adds	r2, r7, r1
 8009a4c:	4b43      	ldr	r3, [pc, #268]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a4e:	0011      	movs	r1, r2
 8009a50:	0018      	movs	r0, r3
 8009a52:	f007 ff6b 	bl	801192c <HAL_ADC_ConfigChannel>
 8009a56:	1e03      	subs	r3, r0, #0
 8009a58:	d001      	beq.n	8009a5e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8009a5a:	f000 fbc5 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009a5e:	211c      	movs	r1, #28
 8009a60:	187b      	adds	r3, r7, r1
 8009a62:	4a3f      	ldr	r2, [pc, #252]	@ (8009b60 <MX_ADC1_Init+0x27c>)
 8009a64:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a66:	187a      	adds	r2, r7, r1
 8009a68:	4b3c      	ldr	r3, [pc, #240]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a6a:	0011      	movs	r1, r2
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f007 ff5d 	bl	801192c <HAL_ADC_ConfigChannel>
 8009a72:	1e03      	subs	r3, r0, #0
 8009a74:	d001      	beq.n	8009a7a <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8009a76:	f000 fbb7 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009a7a:	211c      	movs	r1, #28
 8009a7c:	187b      	adds	r3, r7, r1
 8009a7e:	4a39      	ldr	r2, [pc, #228]	@ (8009b64 <MX_ADC1_Init+0x280>)
 8009a80:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a82:	187a      	adds	r2, r7, r1
 8009a84:	4b35      	ldr	r3, [pc, #212]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009a86:	0011      	movs	r1, r2
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f007 ff4f 	bl	801192c <HAL_ADC_ConfigChannel>
 8009a8e:	1e03      	subs	r3, r0, #0
 8009a90:	d001      	beq.n	8009a96 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8009a92:	f000 fba9 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009a96:	211c      	movs	r1, #28
 8009a98:	187b      	adds	r3, r7, r1
 8009a9a:	4a33      	ldr	r2, [pc, #204]	@ (8009b68 <MX_ADC1_Init+0x284>)
 8009a9c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a9e:	187a      	adds	r2, r7, r1
 8009aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009aa2:	0011      	movs	r1, r2
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	f007 ff41 	bl	801192c <HAL_ADC_ConfigChannel>
 8009aaa:	1e03      	subs	r3, r0, #0
 8009aac:	d001      	beq.n	8009ab2 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8009aae:	f000 fb9b 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009ab2:	211c      	movs	r1, #28
 8009ab4:	187b      	adds	r3, r7, r1
 8009ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8009b6c <MX_ADC1_Init+0x288>)
 8009ab8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009aba:	187a      	adds	r2, r7, r1
 8009abc:	4b27      	ldr	r3, [pc, #156]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009abe:	0011      	movs	r1, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f007 ff33 	bl	801192c <HAL_ADC_ConfigChannel>
 8009ac6:	1e03      	subs	r3, r0, #0
 8009ac8:	d001      	beq.n	8009ace <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8009aca:	f000 fb8d 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8009ace:	211c      	movs	r1, #28
 8009ad0:	187b      	adds	r3, r7, r1
 8009ad2:	4a27      	ldr	r2, [pc, #156]	@ (8009b70 <MX_ADC1_Init+0x28c>)
 8009ad4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ad6:	187a      	adds	r2, r7, r1
 8009ad8:	4b20      	ldr	r3, [pc, #128]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009ada:	0011      	movs	r1, r2
 8009adc:	0018      	movs	r0, r3
 8009ade:	f007 ff25 	bl	801192c <HAL_ADC_ConfigChannel>
 8009ae2:	1e03      	subs	r3, r0, #0
 8009ae4:	d001      	beq.n	8009aea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8009ae6:	f000 fb7f 	bl	800a1e8 <Error_Handler>
  }

  /** Configure the WatchDogs 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8009aea:	1d3b      	adds	r3, r7, #4
 8009aec:	4a21      	ldr	r2, [pc, #132]	@ (8009b74 <MX_ADC1_Init+0x290>)
 8009aee:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8009af0:	1d3b      	adds	r3, r7, #4
 8009af2:	22c0      	movs	r2, #192	@ 0xc0
 8009af4:	0412      	lsls	r2, r2, #16
 8009af6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009af8:	1d3a      	adds	r2, r7, #4
 8009afa:	4b18      	ldr	r3, [pc, #96]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009afc:	0011      	movs	r1, r2
 8009afe:	0018      	movs	r0, r3
 8009b00:	f008 f880 	bl	8011c04 <HAL_ADC_AnalogWDGConfig>
 8009b04:	1e03      	subs	r3, r0, #0
 8009b06:	d001      	beq.n	8009b0c <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8009b08:	f000 fb6e 	bl	800a1e8 <Error_Handler>
  }

  /** Configure the WatchDogs 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 8009b0c:	1d3b      	adds	r3, r7, #4
 8009b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8009b78 <MX_ADC1_Init+0x294>)
 8009b10:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009b12:	1d3a      	adds	r2, r7, #4
 8009b14:	4b11      	ldr	r3, [pc, #68]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009b16:	0011      	movs	r1, r2
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f008 f873 	bl	8011c04 <HAL_ADC_AnalogWDGConfig>
 8009b1e:	1e03      	subs	r3, r0, #0
 8009b20:	d001      	beq.n	8009b26 <MX_ADC1_Init+0x242>
  {
    Error_Handler();
 8009b22:	f000 fb61 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8009b26:	46c0      	nop			@ (mov r8, r8)
 8009b28:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <MX_ADC1_Init+0x278>)
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	f008 fba0 	bl	8012270 <HAL_ADCEx_Calibration_Start>
 8009b30:	1e03      	subs	r3, r0, #0
 8009b32:	d1f9      	bne.n	8009b28 <MX_ADC1_Init+0x244>

  /* USER CODE END ADC1_Init 2 */

}
 8009b34:	46c0      	nop			@ (mov r8, r8)
 8009b36:	46c0      	nop			@ (mov r8, r8)
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	b00a      	add	sp, #40	@ 0x28
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	46c0      	nop			@ (mov r8, r8)
 8009b40:	40012400 	.word	0x40012400
 8009b44:	0fff0000 	.word	0x0fff0000
 8009b48:	40021000 	.word	0x40021000
 8009b4c:	50000800 	.word	0x50000800
 8009b50:	ffff03ff 	.word	0xffff03ff
 8009b54:	50000400 	.word	0x50000400
 8009b58:	00044603 	.word	0x00044603
 8009b5c:	200003d4 	.word	0x200003d4
 8009b60:	04000002 	.word	0x04000002
 8009b64:	24000200 	.word	0x24000200
 8009b68:	28000400 	.word	0x28000400
 8009b6c:	38004000 	.word	0x38004000
 8009b70:	48040000 	.word	0x48040000
 8009b74:	0017ffff 	.word	0x0017ffff
 8009b78:	0027ffff 	.word	0x0027ffff

08009b7c <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8009b80:	f009 f9e4 	bl	8012f4c <HAL_FLASH_Unlock>
 8009b84:	1e03      	subs	r3, r0, #0
 8009b86:	d001      	beq.n	8009b8c <MX_FLASH_Init+0x10>
  {
    Error_Handler();
 8009b88:	f000 fb2e 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8009b8c:	f009 fa02 	bl	8012f94 <HAL_FLASH_Lock>
 8009b90:	1e03      	subs	r3, r0, #0
 8009b92:	d001      	beq.n	8009b98 <MX_FLASH_Init+0x1c>
  {
    Error_Handler();
 8009b94:	f000 fb28 	bl	800a1e8 <Error_Handler>
  /* USER CODE BEGIN FLASH_Init 2 */


  /* USER CODE END FLASH_Init 2 */

}
 8009b98:	46c0      	nop			@ (mov r8, r8)
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8009c1c <MX_I2C1_Init+0x7c>)
 8009ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x201060FF;
 8009baa:	4b1b      	ldr	r3, [pc, #108]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bac:	4a1c      	ldr	r2, [pc, #112]	@ (8009c20 <MX_I2C1_Init+0x80>)
 8009bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009bb0:	4b19      	ldr	r3, [pc, #100]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009bb6:	4b18      	ldr	r3, [pc, #96]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009bbc:	4b16      	ldr	r3, [pc, #88]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009bc2:	4b15      	ldr	r3, [pc, #84]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009bc8:	4b13      	ldr	r3, [pc, #76]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009bce:	4b12      	ldr	r3, [pc, #72]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009bd4:	4b10      	ldr	r3, [pc, #64]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009bda:	4b0f      	ldr	r3, [pc, #60]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f009 fde5 	bl	80137ac <HAL_I2C_Init>
 8009be2:	1e03      	subs	r3, r0, #0
 8009be4:	d001      	beq.n	8009bea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009be6:	f000 faff 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8009bea:	2380      	movs	r3, #128	@ 0x80
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	4b0a      	ldr	r3, [pc, #40]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009bf0:	0011      	movs	r1, r2
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	f00b fe14 	bl	8015820 <HAL_I2CEx_ConfigAnalogFilter>
 8009bf8:	1e03      	subs	r3, r0, #0
 8009bfa:	d001      	beq.n	8009c00 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8009bfc:	f000 faf4 	bl	800a1e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009c00:	4b05      	ldr	r3, [pc, #20]	@ (8009c18 <MX_I2C1_Init+0x78>)
 8009c02:	2100      	movs	r1, #0
 8009c04:	0018      	movs	r0, r3
 8009c06:	f00b fe57 	bl	80158b8 <HAL_I2CEx_ConfigDigitalFilter>
 8009c0a:	1e03      	subs	r3, r0, #0
 8009c0c:	d001      	beq.n	8009c12 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8009c0e:	f000 faeb 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009c12:	46c0      	nop			@ (mov r8, r8)
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000438 	.word	0x20000438
 8009c1c:	40005400 	.word	0x40005400
 8009c20:	201060ff 	.word	0x201060ff

08009c24 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8009c28:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <MX_IWDG_Init+0x3c>)
 8009c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8009c64 <MX_IWDG_Init+0x40>)
 8009c2c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c60 <MX_IWDG_Init+0x3c>)
 8009c30:	2208      	movs	r2, #8
 8009c32:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 8009c34:	4b0a      	ldr	r3, [pc, #40]	@ (8009c60 <MX_IWDG_Init+0x3c>)
 8009c36:	22fa      	movs	r2, #250	@ 0xfa
 8009c38:	0112      	lsls	r2, r2, #4
 8009c3a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4000;
 8009c3c:	4b08      	ldr	r3, [pc, #32]	@ (8009c60 <MX_IWDG_Init+0x3c>)
 8009c3e:	22fa      	movs	r2, #250	@ 0xfa
 8009c40:	0112      	lsls	r2, r2, #4
 8009c42:	609a      	str	r2, [r3, #8]
  hiwdg.Init.EWI = 0;
 8009c44:	4b06      	ldr	r3, [pc, #24]	@ (8009c60 <MX_IWDG_Init+0x3c>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	611a      	str	r2, [r3, #16]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8009c4a:	4b05      	ldr	r3, [pc, #20]	@ (8009c60 <MX_IWDG_Init+0x3c>)
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f00b fe7f 	bl	8015950 <HAL_IWDG_Init>
 8009c52:	1e03      	subs	r3, r0, #0
 8009c54:	d001      	beq.n	8009c5a <MX_IWDG_Init+0x36>
  {
    Error_Handler();
 8009c56:	f000 fac7 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8009c5a:	46c0      	nop			@ (mov r8, r8)
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	2000054c 	.word	0x2000054c
 8009c64:	40003000 	.word	0x40003000

08009c68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009c6e:	1d3b      	adds	r3, r7, #4
 8009c70:	0018      	movs	r0, r3
 8009c72:	2314      	movs	r3, #20
 8009c74:	001a      	movs	r2, r3
 8009c76:	2100      	movs	r1, #0
 8009c78:	f011 f874 	bl	801ad64 <memset>
  RTC_DateTypeDef sDate = {0};
 8009c7c:	003b      	movs	r3, r7
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009c82:	4b32      	ldr	r3, [pc, #200]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009c84:	4a32      	ldr	r2, [pc, #200]	@ (8009d50 <MX_RTC_Init+0xe8>)
 8009c86:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009c88:	4b30      	ldr	r3, [pc, #192]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009c90:	227f      	movs	r2, #127	@ 0x7f
 8009c92:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009c94:	4b2d      	ldr	r3, [pc, #180]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009c96:	22ff      	movs	r2, #255	@ 0xff
 8009c98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009ca6:	4b29      	ldr	r3, [pc, #164]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009cac:	4b27      	ldr	r3, [pc, #156]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009cae:	2280      	movs	r2, #128	@ 0x80
 8009cb0:	05d2      	lsls	r2, r2, #23
 8009cb2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009cb4:	4b25      	ldr	r3, [pc, #148]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8009cba:	4b24      	ldr	r3, [pc, #144]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009cc0:	4b22      	ldr	r3, [pc, #136]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f00d fdba 	bl	801783c <HAL_RTC_Init>
 8009cc8:	1e03      	subs	r3, r0, #0
 8009cca:	d001      	beq.n	8009cd0 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8009ccc:	f000 fa8c 	bl	800a1e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8009cd0:	1d3b      	adds	r3, r7, #4
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8009cd6:	1d3b      	adds	r3, r7, #4
 8009cd8:	2200      	movs	r2, #0
 8009cda:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8009cdc:	1d3b      	adds	r3, r7, #4
 8009cde:	2200      	movs	r2, #0
 8009ce0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009ce2:	1d3b      	adds	r3, r7, #4
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009ce8:	1d3b      	adds	r3, r7, #4
 8009cea:	2200      	movs	r2, #0
 8009cec:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009cee:	1d39      	adds	r1, r7, #4
 8009cf0:	4b16      	ldr	r3, [pc, #88]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f00d fe47 	bl	8017988 <HAL_RTC_SetTime>
 8009cfa:	1e03      	subs	r3, r0, #0
 8009cfc:	d001      	beq.n	8009d02 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8009cfe:	f000 fa73 	bl	800a1e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009d02:	003b      	movs	r3, r7
 8009d04:	2201      	movs	r2, #1
 8009d06:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8009d08:	003b      	movs	r3, r7
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8009d0e:	003b      	movs	r3, r7
 8009d10:	2201      	movs	r2, #1
 8009d12:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8009d14:	003b      	movs	r3, r7
 8009d16:	2200      	movs	r2, #0
 8009d18:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009d1a:	0039      	movs	r1, r7
 8009d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009d1e:	2201      	movs	r2, #1
 8009d20:	0018      	movs	r0, r3
 8009d22:	f00d ff55 	bl	8017bd0 <HAL_RTC_SetDate>
 8009d26:	1e03      	subs	r3, r0, #0
 8009d28:	d001      	beq.n	8009d2e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8009d2a:	f000 fa5d 	bl	800a1e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2000, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8009d2e:	2380      	movs	r3, #128	@ 0x80
 8009d30:	0199      	lsls	r1, r3, #6
 8009d32:	4806      	ldr	r0, [pc, #24]	@ (8009d4c <MX_RTC_Init+0xe4>)
 8009d34:	2300      	movs	r3, #0
 8009d36:	2200      	movs	r2, #0
 8009d38:	f00e f8d6 	bl	8017ee8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009d3c:	1e03      	subs	r3, r0, #0
 8009d3e:	d001      	beq.n	8009d44 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8009d40:	f000 fa52 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009d44:	46c0      	nop			@ (mov r8, r8)
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b006      	add	sp, #24
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	20000560 	.word	0x20000560
 8009d50:	40002800 	.word	0x40002800

08009d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b08e      	sub	sp, #56	@ 0x38
 8009d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d5a:	2328      	movs	r3, #40	@ 0x28
 8009d5c:	18fb      	adds	r3, r7, r3
 8009d5e:	0018      	movs	r0, r3
 8009d60:	2310      	movs	r3, #16
 8009d62:	001a      	movs	r2, r3
 8009d64:	2100      	movs	r1, #0
 8009d66:	f010 fffd 	bl	801ad64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d6a:	231c      	movs	r3, #28
 8009d6c:	18fb      	adds	r3, r7, r3
 8009d6e:	0018      	movs	r0, r3
 8009d70:	230c      	movs	r3, #12
 8009d72:	001a      	movs	r2, r3
 8009d74:	2100      	movs	r1, #0
 8009d76:	f010 fff5 	bl	801ad64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d7a:	003b      	movs	r3, r7
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	231c      	movs	r3, #28
 8009d80:	001a      	movs	r2, r3
 8009d82:	2100      	movs	r1, #0
 8009d84:	f010 ffee 	bl	801ad64 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009d88:	4b30      	ldr	r3, [pc, #192]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009d8a:	4a31      	ldr	r2, [pc, #196]	@ (8009e50 <MX_TIM3_Init+0xfc>)
 8009d8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d94:	4b2d      	ldr	r3, [pc, #180]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12000;
 8009d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8009e54 <MX_TIM3_Init+0x100>)
 8009d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009da0:	4b2a      	ldr	r3, [pc, #168]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009da6:	4b29      	ldr	r3, [pc, #164]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009dac:	4b27      	ldr	r3, [pc, #156]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009dae:	0018      	movs	r0, r3
 8009db0:	f00e f988 	bl	80180c4 <HAL_TIM_Base_Init>
 8009db4:	1e03      	subs	r3, r0, #0
 8009db6:	d001      	beq.n	8009dbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8009db8:	f000 fa16 	bl	800a1e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009dbc:	2128      	movs	r1, #40	@ 0x28
 8009dbe:	187b      	adds	r3, r7, r1
 8009dc0:	2280      	movs	r2, #128	@ 0x80
 8009dc2:	0152      	lsls	r2, r2, #5
 8009dc4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009dc6:	187a      	adds	r2, r7, r1
 8009dc8:	4b20      	ldr	r3, [pc, #128]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009dca:	0011      	movs	r1, r2
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f00e fc99 	bl	8018704 <HAL_TIM_ConfigClockSource>
 8009dd2:	1e03      	subs	r3, r0, #0
 8009dd4:	d001      	beq.n	8009dda <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8009dd6:	f000 fa07 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009dda:	4b1c      	ldr	r3, [pc, #112]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f00e f9c9 	bl	8018174 <HAL_TIM_PWM_Init>
 8009de2:	1e03      	subs	r3, r0, #0
 8009de4:	d001      	beq.n	8009dea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8009de6:	f000 f9ff 	bl	800a1e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009dea:	211c      	movs	r1, #28
 8009dec:	187b      	adds	r3, r7, r1
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009df2:	187b      	adds	r3, r7, r1
 8009df4:	2200      	movs	r2, #0
 8009df6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009df8:	187a      	adds	r2, r7, r1
 8009dfa:	4b14      	ldr	r3, [pc, #80]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009dfc:	0011      	movs	r1, r2
 8009dfe:	0018      	movs	r0, r3
 8009e00:	f00f f936 	bl	8019070 <HAL_TIMEx_MasterConfigSynchronization>
 8009e04:	1e03      	subs	r3, r0, #0
 8009e06:	d001      	beq.n	8009e0c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8009e08:	f000 f9ee 	bl	800a1e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e0c:	003b      	movs	r3, r7
 8009e0e:	2260      	movs	r2, #96	@ 0x60
 8009e10:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 8009e12:	003b      	movs	r3, r7
 8009e14:	22fa      	movs	r2, #250	@ 0xfa
 8009e16:	00d2      	lsls	r2, r2, #3
 8009e18:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e1a:	003b      	movs	r3, r7
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e20:	003b      	movs	r3, r7
 8009e22:	2200      	movs	r2, #0
 8009e24:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009e26:	0039      	movs	r1, r7
 8009e28:	4b08      	ldr	r3, [pc, #32]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	f00e fb69 	bl	8018504 <HAL_TIM_PWM_ConfigChannel>
 8009e32:	1e03      	subs	r3, r0, #0
 8009e34:	d001      	beq.n	8009e3a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8009e36:	f000 f9d7 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009e3a:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <MX_TIM3_Init+0xf8>)
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f001 fec3 	bl	800bbc8 <HAL_TIM_MspPostInit>

}
 8009e42:	46c0      	nop			@ (mov r8, r8)
 8009e44:	46bd      	mov	sp, r7
 8009e46:	b00e      	add	sp, #56	@ 0x38
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	46c0      	nop			@ (mov r8, r8)
 8009e4c:	20000590 	.word	0x20000590
 8009e50:	40000400 	.word	0x40000400
 8009e54:	00002ee0 	.word	0x00002ee0

08009e58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e5e:	1d3b      	adds	r3, r7, #4
 8009e60:	0018      	movs	r0, r3
 8009e62:	230c      	movs	r3, #12
 8009e64:	001a      	movs	r2, r3
 8009e66:	2100      	movs	r1, #0
 8009e68:	f010 ff7c 	bl	801ad64 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009e6c:	4b18      	ldr	r3, [pc, #96]	@ (8009ed0 <MX_TIM6_Init+0x78>)
 8009e6e:	4a19      	ldr	r2, [pc, #100]	@ (8009ed4 <MX_TIM6_Init+0x7c>)
 8009e70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8009e72:	4b17      	ldr	r3, [pc, #92]	@ (8009ed0 <MX_TIM6_Init+0x78>)
 8009e74:	221f      	movs	r2, #31
 8009e76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e78:	4b15      	ldr	r3, [pc, #84]	@ (8009ed0 <MX_TIM6_Init+0x78>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 375;
 8009e7e:	4b14      	ldr	r3, [pc, #80]	@ (8009ed0 <MX_TIM6_Init+0x78>)
 8009e80:	2278      	movs	r2, #120	@ 0x78
 8009e82:	32ff      	adds	r2, #255	@ 0xff
 8009e84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e86:	4b12      	ldr	r3, [pc, #72]	@ (8009ed0 <MX_TIM6_Init+0x78>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009e8c:	4b10      	ldr	r3, [pc, #64]	@ (8009ed0 <MX_TIM6_Init+0x78>)
 8009e8e:	0018      	movs	r0, r3
 8009e90:	f00e f918 	bl	80180c4 <HAL_TIM_Base_Init>
 8009e94:	1e03      	subs	r3, r0, #0
 8009e96:	d001      	beq.n	8009e9c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8009e98:	f000 f9a6 	bl	800a1e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e9c:	1d3b      	adds	r3, r7, #4
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ea2:	1d3b      	adds	r3, r7, #4
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009ea8:	1d3a      	adds	r2, r7, #4
 8009eaa:	4b09      	ldr	r3, [pc, #36]	@ (8009ed0 <MX_TIM6_Init+0x78>)
 8009eac:	0011      	movs	r1, r2
 8009eae:	0018      	movs	r0, r3
 8009eb0:	f00f f8de 	bl	8019070 <HAL_TIMEx_MasterConfigSynchronization>
 8009eb4:	1e03      	subs	r3, r0, #0
 8009eb6:	d001      	beq.n	8009ebc <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8009eb8:	f000 f996 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  TIM6->CR1 |= TIM_CR1_CEN;
 8009ebc:	4b05      	ldr	r3, [pc, #20]	@ (8009ed4 <MX_TIM6_Init+0x7c>)
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	4b04      	ldr	r3, [pc, #16]	@ (8009ed4 <MX_TIM6_Init+0x7c>)
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_Init 2 */

}
 8009ec8:	46c0      	nop			@ (mov r8, r8)
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	b004      	add	sp, #16
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	200005dc 	.word	0x200005dc
 8009ed4:	40001000 	.word	0x40001000

08009ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009edc:	4b23      	ldr	r3, [pc, #140]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009ede:	4a24      	ldr	r2, [pc, #144]	@ (8009f70 <MX_USART2_UART_Init+0x98>)
 8009ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009ee2:	4b22      	ldr	r3, [pc, #136]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009ee4:	22e1      	movs	r2, #225	@ 0xe1
 8009ee6:	0252      	lsls	r2, r2, #9
 8009ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009eea:	4b20      	ldr	r3, [pc, #128]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009efc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009efe:	220c      	movs	r2, #12
 8009f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f02:	4b1a      	ldr	r3, [pc, #104]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f08:	4b18      	ldr	r3, [pc, #96]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f0e:	4b17      	ldr	r3, [pc, #92]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009f14:	4b15      	ldr	r3, [pc, #84]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f1a:	4b14      	ldr	r3, [pc, #80]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009f20:	4b12      	ldr	r3, [pc, #72]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f22:	0018      	movs	r0, r3
 8009f24:	f00f f912 	bl	801914c <HAL_UART_Init>
 8009f28:	1e03      	subs	r3, r0, #0
 8009f2a:	d001      	beq.n	8009f30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009f2c:	f000 f95c 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f30:	4b0e      	ldr	r3, [pc, #56]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f32:	2100      	movs	r1, #0
 8009f34:	0018      	movs	r0, r3
 8009f36:	f010 fd61 	bl	801a9fc <HAL_UARTEx_SetTxFifoThreshold>
 8009f3a:	1e03      	subs	r3, r0, #0
 8009f3c:	d001      	beq.n	8009f42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009f3e:	f000 f953 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f42:	4b0a      	ldr	r3, [pc, #40]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f44:	2100      	movs	r1, #0
 8009f46:	0018      	movs	r0, r3
 8009f48:	f010 fd98 	bl	801aa7c <HAL_UARTEx_SetRxFifoThreshold>
 8009f4c:	1e03      	subs	r3, r0, #0
 8009f4e:	d001      	beq.n	8009f54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009f50:	f000 f94a 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009f54:	4b05      	ldr	r3, [pc, #20]	@ (8009f6c <MX_USART2_UART_Init+0x94>)
 8009f56:	0018      	movs	r0, r3
 8009f58:	f010 fd16 	bl	801a988 <HAL_UARTEx_DisableFifoMode>
 8009f5c:	1e03      	subs	r3, r0, #0
 8009f5e:	d001      	beq.n	8009f64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8009f60:	f000 f942 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009f64:	46c0      	nop			@ (mov r8, r8)
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	46c0      	nop			@ (mov r8, r8)
 8009f6c:	20000628 	.word	0x20000628
 8009f70:	40004400 	.word	0x40004400

08009f74 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009f78:	4b24      	ldr	r3, [pc, #144]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009f7a:	4a25      	ldr	r2, [pc, #148]	@ (800a010 <MX_USART4_UART_Init+0x9c>)
 8009f7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8009f7e:	4b23      	ldr	r3, [pc, #140]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009f80:	2296      	movs	r2, #150	@ 0x96
 8009f82:	0212      	lsls	r2, r2, #8
 8009f84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8009f86:	4b21      	ldr	r3, [pc, #132]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009f88:	2280      	movs	r2, #128	@ 0x80
 8009f8a:	0152      	lsls	r2, r2, #5
 8009f8c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8009f94:	4b1d      	ldr	r3, [pc, #116]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009f96:	2280      	movs	r2, #128	@ 0x80
 8009f98:	00d2      	lsls	r2, r2, #3
 8009f9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009f9e:	220c      	movs	r2, #12
 8009fa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fa8:	4b18      	ldr	r3, [pc, #96]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fae:	4b17      	ldr	r3, [pc, #92]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009fb4:	4b15      	ldr	r3, [pc, #84]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009fba:	4b14      	ldr	r3, [pc, #80]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009fc0:	4b12      	ldr	r3, [pc, #72]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f00f f8c2 	bl	801914c <HAL_UART_Init>
 8009fc8:	1e03      	subs	r3, r0, #0
 8009fca:	d001      	beq.n	8009fd0 <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 8009fcc:	f000 f90c 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	f010 fd11 	bl	801a9fc <HAL_UARTEx_SetTxFifoThreshold>
 8009fda:	1e03      	subs	r3, r0, #0
 8009fdc:	d001      	beq.n	8009fe2 <MX_USART4_UART_Init+0x6e>
  {
    Error_Handler();
 8009fde:	f000 f903 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	f010 fd48 	bl	801aa7c <HAL_UARTEx_SetRxFifoThreshold>
 8009fec:	1e03      	subs	r3, r0, #0
 8009fee:	d001      	beq.n	8009ff4 <MX_USART4_UART_Init+0x80>
  {
    Error_Handler();
 8009ff0:	f000 f8fa 	bl	800a1e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8009ff4:	4b05      	ldr	r3, [pc, #20]	@ (800a00c <MX_USART4_UART_Init+0x98>)
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	f010 fcc6 	bl	801a988 <HAL_UARTEx_DisableFifoMode>
 8009ffc:	1e03      	subs	r3, r0, #0
 8009ffe:	d001      	beq.n	800a004 <MX_USART4_UART_Init+0x90>
  {
    Error_Handler();
 800a000:	f000 f8f2 	bl	800a1e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800a004:	46c0      	nop			@ (mov r8, r8)
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	46c0      	nop			@ (mov r8, r8)
 800a00c:	200006bc 	.word	0x200006bc
 800a010:	40004c00 	.word	0x40004c00

0800a014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a01a:	4b10      	ldr	r3, [pc, #64]	@ (800a05c <MX_DMA_Init+0x48>)
 800a01c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a01e:	4b0f      	ldr	r3, [pc, #60]	@ (800a05c <MX_DMA_Init+0x48>)
 800a020:	2101      	movs	r1, #1
 800a022:	430a      	orrs	r2, r1
 800a024:	649a      	str	r2, [r3, #72]	@ 0x48
 800a026:	4b0d      	ldr	r3, [pc, #52]	@ (800a05c <MX_DMA_Init+0x48>)
 800a028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a02a:	2201      	movs	r2, #1
 800a02c:	4013      	ands	r3, r2
 800a02e:	607b      	str	r3, [r7, #4]
 800a030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a032:	2200      	movs	r2, #0
 800a034:	2100      	movs	r1, #0
 800a036:	200a      	movs	r0, #10
 800a038:	f008 fae2 	bl	8012600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a03c:	200a      	movs	r0, #10
 800a03e:	f008 faf4 	bl	801262a <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn, 0, 0);
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	200b      	movs	r0, #11
 800a048:	f008 fada 	bl	8012600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn);
 800a04c:	200b      	movs	r0, #11
 800a04e:	f008 faec 	bl	801262a <HAL_NVIC_EnableIRQ>

}
 800a052:	46c0      	nop			@ (mov r8, r8)
 800a054:	46bd      	mov	sp, r7
 800a056:	b002      	add	sp, #8
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	46c0      	nop			@ (mov r8, r8)
 800a05c:	40021000 	.word	0x40021000

0800a060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a060:	b590      	push	{r4, r7, lr}
 800a062:	b089      	sub	sp, #36	@ 0x24
 800a064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a066:	240c      	movs	r4, #12
 800a068:	193b      	adds	r3, r7, r4
 800a06a:	0018      	movs	r0, r3
 800a06c:	2314      	movs	r3, #20
 800a06e:	001a      	movs	r2, r3
 800a070:	2100      	movs	r1, #0
 800a072:	f010 fe77 	bl	801ad64 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a076:	4b56      	ldr	r3, [pc, #344]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a078:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a07a:	4b55      	ldr	r3, [pc, #340]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a07c:	2104      	movs	r1, #4
 800a07e:	430a      	orrs	r2, r1
 800a080:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a082:	4b53      	ldr	r3, [pc, #332]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a086:	2204      	movs	r2, #4
 800a088:	4013      	ands	r3, r2
 800a08a:	60bb      	str	r3, [r7, #8]
 800a08c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a08e:	4b50      	ldr	r3, [pc, #320]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a090:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a092:	4b4f      	ldr	r3, [pc, #316]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a094:	2101      	movs	r1, #1
 800a096:	430a      	orrs	r2, r1
 800a098:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a09a:	4b4d      	ldr	r3, [pc, #308]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a09e:	2201      	movs	r2, #1
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0a6:	4b4a      	ldr	r3, [pc, #296]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a0a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0aa:	4b49      	ldr	r3, [pc, #292]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a0ac:	2102      	movs	r1, #2
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a0b2:	4b47      	ldr	r3, [pc, #284]	@ (800a1d0 <MX_GPIO_Init+0x170>)
 800a0b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a0be:	4945      	ldr	r1, [pc, #276]	@ (800a1d4 <MX_GPIO_Init+0x174>)
 800a0c0:	4b45      	ldr	r3, [pc, #276]	@ (800a1d8 <MX_GPIO_Init+0x178>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f009 fafa 	bl	80136be <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a0ca:	4944      	ldr	r1, [pc, #272]	@ (800a1dc <MX_GPIO_Init+0x17c>)
 800a0cc:	4b44      	ldr	r3, [pc, #272]	@ (800a1e0 <MX_GPIO_Init+0x180>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f009 faf4 	bl	80136be <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800a0d6:	23f0      	movs	r3, #240	@ 0xf0
 800a0d8:	0119      	lsls	r1, r3, #4
 800a0da:	23a0      	movs	r3, #160	@ 0xa0
 800a0dc:	05db      	lsls	r3, r3, #23
 800a0de:	2200      	movs	r2, #0
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f009 faec 	bl	80136be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC6 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_8
 800a0e6:	193b      	adds	r3, r7, r4
 800a0e8:	4a3a      	ldr	r2, [pc, #232]	@ (800a1d4 <MX_GPIO_Init+0x174>)
 800a0ea:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0ec:	193b      	adds	r3, r7, r4
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f2:	193b      	adds	r3, r7, r4
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0f8:	193b      	adds	r3, r7, r4
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0fe:	193b      	adds	r3, r7, r4
 800a100:	4a35      	ldr	r2, [pc, #212]	@ (800a1d8 <MX_GPIO_Init+0x178>)
 800a102:	0019      	movs	r1, r3
 800a104:	0010      	movs	r0, r2
 800a106:	f009 f869 	bl	80131dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB3
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_3
 800a10a:	193b      	adds	r3, r7, r4
 800a10c:	4a33      	ldr	r2, [pc, #204]	@ (800a1dc <MX_GPIO_Init+0x17c>)
 800a10e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a110:	193b      	adds	r3, r7, r4
 800a112:	2201      	movs	r2, #1
 800a114:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a116:	193b      	adds	r3, r7, r4
 800a118:	2200      	movs	r2, #0
 800a11a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a11c:	193b      	adds	r3, r7, r4
 800a11e:	2200      	movs	r2, #0
 800a120:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a122:	193b      	adds	r3, r7, r4
 800a124:	4a2e      	ldr	r2, [pc, #184]	@ (800a1e0 <MX_GPIO_Init+0x180>)
 800a126:	0019      	movs	r1, r3
 800a128:	0010      	movs	r0, r2
 800a12a:	f009 f857 	bl	80131dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB14 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_4;
 800a12e:	193b      	adds	r3, r7, r4
 800a130:	4a2c      	ldr	r2, [pc, #176]	@ (800a1e4 <MX_GPIO_Init+0x184>)
 800a132:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a134:	193b      	adds	r3, r7, r4
 800a136:	2200      	movs	r2, #0
 800a138:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a13a:	193b      	adds	r3, r7, r4
 800a13c:	2200      	movs	r2, #0
 800a13e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a140:	193b      	adds	r3, r7, r4
 800a142:	4a27      	ldr	r2, [pc, #156]	@ (800a1e0 <MX_GPIO_Init+0x180>)
 800a144:	0019      	movs	r1, r3
 800a146:	0010      	movs	r0, r2
 800a148:	f009 f848 	bl	80131dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a14c:	0021      	movs	r1, r4
 800a14e:	187b      	adds	r3, r7, r1
 800a150:	22f0      	movs	r2, #240	@ 0xf0
 800a152:	0112      	lsls	r2, r2, #4
 800a154:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a156:	000c      	movs	r4, r1
 800a158:	193b      	adds	r3, r7, r4
 800a15a:	2201      	movs	r2, #1
 800a15c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a15e:	193b      	adds	r3, r7, r4
 800a160:	2200      	movs	r2, #0
 800a162:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a164:	193b      	adds	r3, r7, r4
 800a166:	2200      	movs	r2, #0
 800a168:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a16a:	193a      	adds	r2, r7, r4
 800a16c:	23a0      	movs	r3, #160	@ 0xa0
 800a16e:	05db      	lsls	r3, r3, #23
 800a170:	0011      	movs	r1, r2
 800a172:	0018      	movs	r0, r3
 800a174:	f009 f832 	bl	80131dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a178:	0021      	movs	r1, r4
 800a17a:	187b      	adds	r3, r7, r1
 800a17c:	2280      	movs	r2, #128	@ 0x80
 800a17e:	0212      	lsls	r2, r2, #8
 800a180:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a182:	187b      	adds	r3, r7, r1
 800a184:	2288      	movs	r2, #136	@ 0x88
 800a186:	0352      	lsls	r2, r2, #13
 800a188:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a18a:	187b      	adds	r3, r7, r1
 800a18c:	2200      	movs	r2, #0
 800a18e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a190:	187a      	adds	r2, r7, r1
 800a192:	23a0      	movs	r3, #160	@ 0xa0
 800a194:	05db      	lsls	r3, r3, #23
 800a196:	0011      	movs	r1, r2
 800a198:	0018      	movs	r0, r3
 800a19a:	f009 f81f 	bl	80131dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	2007      	movs	r0, #7
 800a1a4:	f008 fa2c 	bl	8012600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a1a8:	2007      	movs	r0, #7
 800a1aa:	f008 fa3e 	bl	801262a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(PFULLDEF_MP1, GPIO_PIN_SET);// Activa la selección de MP1
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <MX_GPIO_Init+0x180>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	2108      	movs	r1, #8
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f009 fa82 	bl	80136be <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_10);
 800a1ba:	2380      	movs	r3, #128	@ 0x80
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	4a06      	ldr	r2, [pc, #24]	@ (800a1d8 <MX_GPIO_Init+0x178>)
 800a1c0:	0019      	movs	r1, r3
 800a1c2:	0010      	movs	r0, r2
 800a1c4:	f009 fa98 	bl	80136f8 <HAL_GPIO_TogglePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800a1c8:	46c0      	nop			@ (mov r8, r8)
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	b009      	add	sp, #36	@ 0x24
 800a1ce:	bd90      	pop	{r4, r7, pc}
 800a1d0:	40021000 	.word	0x40021000
 800a1d4:	0000074c 	.word	0x0000074c
 800a1d8:	50000800 	.word	0x50000800
 800a1dc:	0000142c 	.word	0x0000142c
 800a1e0:	50000400 	.word	0x50000400
 800a1e4:	00004810 	.word	0x00004810

0800a1e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ec:	b672      	cpsid	i
}
 800a1ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a1f0:	46c0      	nop			@ (mov r8, r8)
 800a1f2:	e7fd      	b.n	800a1f0 <Error_Handler+0x8>

0800a1f4 <muestreo>:
#include "commonMainAsm.h"
#include "customMain.h"
#include "ELTEC_EmulatedEEPROM.h"

//*************************************************************************************************
void muestreo(void){
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
	     //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);  PIn TEST

		cnt_veces_muestreo++; //inc cnt_veces_muestreo/// A,cnt_veces_muestreo
 800a1fa:	4bb7      	ldr	r3, [pc, #732]	@ (800a4d8 <muestreo+0x2e4>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	3301      	adds	r3, #1
 800a200:	b2da      	uxtb	r2, r3
 800a202:	4bb5      	ldr	r3, [pc, #724]	@ (800a4d8 <muestreo+0x2e4>)
 800a204:	701a      	strb	r2, [r3, #0]
	    if(cnt_veces_muestreo <= 200){ //cp  A,#200
 800a206:	4bb4      	ldr	r3, [pc, #720]	@ (800a4d8 <muestreo+0x2e4>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a20c:	d909      	bls.n	800a222 <muestreo+0x2e>
	       	goto detecta_flanco;//jrule detecta_flanco
	    }

	    cnt_veces_muestreo = 0;  //clr cnt_veces_muestreo
 800a20e:	4bb2      	ldr	r3, [pc, #712]	@ (800a4d8 <muestreo+0x2e4>)
 800a210:	2200      	movs	r2, #0
 800a212:	701a      	strb	r2, [r3, #0]
	    cruze_por_cero[0] = 1;		//bset    cruze_por_cero,#0
 800a214:	4bb1      	ldr	r3, [pc, #708]	@ (800a4dc <muestreo+0x2e8>)
 800a216:	2201      	movs	r2, #1
 800a218:	701a      	strb	r2, [r3, #0]
//        }
//	  	flagsLogger2 [2] = 1;//bset	flagsLogger2,#2
//	  	goto error_muestreo; //jp error_muestreo

//batOFF_OK:
	    flagsLogger2 [0] = 1; //bset flagsLogger2,#0
 800a21a:	4bb1      	ldr	r3, [pc, #708]	@ (800a4e0 <muestreo+0x2ec>)
 800a21c:	2201      	movs	r2, #1
 800a21e:	701a      	strb	r2, [r3, #0]
	    /*
	     * PRUEBAS DEBUGGER, Eliminar cuando sea necesario CGM 12/03/2025
	     *
	     */
	    goto fin_voltrms;
 800a220:	e156      	b.n	800a4d0 <muestreo+0x2dc>
	       	goto detecta_flanco;//jrule detecta_flanco
 800a222:	46c0      	nop			@ (mov r8, r8)

//;=========================================  Rutina DETECCIÓN DE FLANCO DE SUBIDA
//;La detección de cruce por cero se realiza por umbral en el pin de MUESTREO.

detecta_flanco:						 //;Más de 50ms sin cruces por cero
		s_reloj[2] = 0;//bres s_reloj,#2
 800a224:	4baf      	ldr	r3, [pc, #700]	@ (800a4e4 <muestreo+0x2f0>)
 800a226:	2200      	movs	r2, #0
 800a228:	709a      	strb	r2, [r3, #2]

up_anterior:

		if(s_reloj[0]){	//btjt s_reloj,#0,alto   [actual]	   ;¿El valor de la bandera "actual" es 1?
 800a22a:	4bae      	ldr	r3, [pc, #696]	@ (800a4e4 <muestreo+0x2f0>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d103      	bne.n	800a23a <muestreo+0x46>
			goto alto;
		}
		s_reloj[1] = 0;   				//bres s_reloj,#1    ;[anterior]  ;NO: Anterior <- 0
 800a232:	4bac      	ldr	r3, [pc, #688]	@ (800a4e4 <muestreo+0x2f0>)
 800a234:	2200      	movs	r2, #0
 800a236:	705a      	strb	r2, [r3, #1]
		goto end_up_anterior;//jra end_up_anterior
 800a238:	e003      	b.n	800a242 <muestreo+0x4e>
			goto alto;
 800a23a:	46c0      	nop			@ (mov r8, r8)

alto:
		s_reloj[1] = 1; 	//bset s_reloj,#1		;[anterior]   ;SI: Anterior <- 1
 800a23c:	4ba9      	ldr	r3, [pc, #676]	@ (800a4e4 <muestreo+0x2f0>)
 800a23e:	2201      	movs	r2, #1
 800a240:	705a      	strb	r2, [r3, #1]
			// 19-AGO-2024		adcram = HAL_ADC_GetValue(&hadc); // get the adc value
			// 19-AGO-2024		HAL_ADC_Stop(&hadc);
		// ----------------------Codigo Julio Torres
//---Toogle  GPIOA->BSRR = GPIO_BSRR_BS_11;
		//ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
 800a242:	4ba9      	ldr	r3, [pc, #676]	@ (800a4e8 <muestreo+0x2f4>)
 800a244:	2220      	movs	r2, #32
 800a246:	629a      	str	r2, [r3, #40]	@ 0x28
		//capturaAD();
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
		//---Toogle  GPIOA->BSRR = GPIO_BSRR_BR_11;
		// ----------------------Codigo Julio Torres

		asm ("nop");
 800a248:	46c0      	nop			@ (mov r8, r8)
		//if(adcramh >= 10){//cpw     Y,#10
		//if(adcramh >= 20){//cpw     Y,#10
		//if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
		if(adcramh >= 35){// Con el valor de 35 funciona bien la deteccion del theshold
 800a24a:	4ba8      	ldr	r3, [pc, #672]	@ (800a4ec <muestreo+0x2f8>)
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	2b22      	cmp	r3, #34	@ 0x22
 800a250:	d803      	bhi.n	800a25a <muestreo+0x66>

			goto pin_cruce_alto;//jruge   pin_cruce_alto
		}
		s_reloj[0] = 0;		// bres    s_reloj,#0;
 800a252:	4ba4      	ldr	r3, [pc, #656]	@ (800a4e4 <muestreo+0x2f0>)
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
		goto end_up_actual;//jra     end_up_actual;
 800a258:	e003      	b.n	800a262 <muestreo+0x6e>
			goto pin_cruce_alto;//jruge   pin_cruce_alto
 800a25a:	46c0      	nop			@ (mov r8, r8)
pin_cruce_alto:
		s_reloj[0] = 1;	 		//bset    s_reloj,#0;
 800a25c:	4ba1      	ldr	r3, [pc, #644]	@ (800a4e4 <muestreo+0x2f0>)
 800a25e:	2201      	movs	r2, #1
 800a260:	701a      	strb	r2, [r3, #0]


determina_flanco: //---------------------------------------------------------?
		//ld A,s_reloj
		//and A,#$03
		if(!(s_reloj[0] | s_reloj[1])){// if((s_reloj & 0x03) == 0x01){	//cp  A,#$01 **************????
 800a262:	4ba0      	ldr	r3, [pc, #640]	@ (800a4e4 <muestreo+0x2f0>)
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	4b9f      	ldr	r3, [pc, #636]	@ (800a4e4 <muestreo+0x2f0>)
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2201      	movs	r2, #1
 800a270:	4053      	eors	r3, r2
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <muestreo+0x94>
			goto flanco_subida;			//jreq flanco_subida/ salta si z=1
 800a278:	46c0      	nop			@ (mov r8, r8)
		}
		goto fin_detecta_flanco;//jra fin_detecta_flanco


flanco_subida:
		s_reloj[2] = 1;	//bset    s_reloj,#2								;[b_flancos]	;Activar bandera de flanco de subida
 800a27a:	4b9a      	ldr	r3, [pc, #616]	@ (800a4e4 <muestreo+0x2f0>)
 800a27c:	2201      	movs	r2, #1
 800a27e:	709a      	strb	r2, [r3, #2]
		//bcpl    PA_ODR,#0					// Test por, prueba
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
		cruze_por_cero[0] = 1;			//bset    cruze_por_cero,#0			;Activa bandera de cruce por cero
 800a280:	4b96      	ldr	r3, [pc, #600]	@ (800a4dc <muestreo+0x2e8>)
 800a282:	2201      	movs	r2, #1
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	e000      	b.n	800a28a <muestreo+0x96>
		goto fin_detecta_flanco;//jra fin_detecta_flanco
 800a288:	46c0      	nop			@ (mov r8, r8)

fin_detecta_flanco:

//;=====================================  FIN Rutina DETECCIÓN DE FLANCO DE BAJADA

		if(s_reloj[2]){			//btjt    s_reloj,#2,pregunta_edo_muestreo
 800a28a:	4b96      	ldr	r3, [pc, #600]	@ (800a4e4 <muestreo+0x2f0>)
 800a28c:	789b      	ldrb	r3, [r3, #2]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d105      	bne.n	800a29e <muestreo+0xaa>
			goto pregunta_edo_muestreo;
		}
		//ld    A,edo_muestreo
		if(edo_muestreo == 1){//cp    A,#1 ***************???
 800a292:	4b97      	ldr	r3, [pc, #604]	@ (800a4f0 <muestreo+0x2fc>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d000      	beq.n	800a29c <muestreo+0xa8>
 800a29a:	e118      	b.n	800a4ce <muestreo+0x2da>
			goto muestrea; //jreq  muestrea
 800a29c:	e009      	b.n	800a2b2 <muestreo+0xbe>
			goto pregunta_edo_muestreo;
 800a29e:	46c0      	nop			@ (mov r8, r8)


pregunta_edo_muestreo:

		//ld A,cnt_mues
		if(cnt_mues == 0){//cp A,#0
 800a2a0:	4b94      	ldr	r3, [pc, #592]	@ (800a4f4 <muestreo+0x300>)
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d000      	beq.n	800a2aa <muestreo+0xb6>
 800a2a8:	e106      	b.n	800a4b8 <muestreo+0x2c4>
			goto no_error_muestreo;//jreq no_error_muestreo
 800a2aa:	46c0      	nop			@ (mov r8, r8)
		}
		goto error_muestreo;//jp error_muestreo


no_error_muestreo:
		edo_muestreo = 1; //mov edo_muestreo,#1
 800a2ac:	4b90      	ldr	r3, [pc, #576]	@ (800a4f0 <muestreo+0x2fc>)
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	701a      	strb	r2, [r3, #0]


muestrea:
	    //ld A,cnt_mues
		if(cnt_mues != 32 ){ //cp A,#32 ****************
 800a2b2:	4b90      	ldr	r3, [pc, #576]	@ (800a4f4 <muestreo+0x300>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d10a      	bne.n	800a2d0 <muestreo+0xdc>
			goto adq_muesn; //jrne    adq_muesn
		}
		cnt_mues = 0;//clr     cnt_mues         ;SI, limpia el contador de muestras
 800a2ba:	4b8e      	ldr	r3, [pc, #568]	@ (800a4f4 <muestreo+0x300>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	701a      	strb	r2, [r3, #0]
		edo_muestreo = 0;//mov     edo_muestreo,#0
 800a2c0:	4b8b      	ldr	r3, [pc, #556]	@ (800a4f0 <muestreo+0x2fc>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	 //28-May-2024: Salida IO7 toogle test
		goto voltaje_rms;//jp      voltaje_rms
 800a2c6:	46c0      	nop			@ (mov r8, r8)
voltaje_rms:
		//sigma_cuad_sampl_1 = 0;			//clr     sigma_cuad_sampl_1
		//sigma_cuad_sampl_2 = 0;			//clr     sigma_cuad_sampl_2
		//sigma_cuad_sampl_3 = 0;			//clr     sigma_cuad_sampl_3
		//sigma_cuad_sampl_4 = 0;			//clr     sigma_cuad_sampl_4
		sigma_cuad_sampl = 0;
 800a2c8:	4b8b      	ldr	r3, [pc, #556]	@ (800a4f8 <muestreo+0x304>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	e01f      	b.n	800a310 <muestreo+0x11c>
			goto adq_muesn; //jrne    adq_muesn
 800a2d0:	46c0      	nop			@ (mov r8, r8)
		ADC1->CHSELR = ADC_CHSELR_CHSEL5;
 800a2d2:	4b85      	ldr	r3, [pc, #532]	@ (800a4e8 <muestreo+0x2f4>)
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	629a      	str	r2, [r3, #40]	@ 0x28
		asm ("nop");
 800a2d8:	46c0      	nop			@ (mov r8, r8)
		adcramh >>= 1;    			//srlw    Y             ;Convierte la muestra de 10 bits en 9 bits ****************?????
 800a2da:	4b84      	ldr	r3, [pc, #528]	@ (800a4ec <muestreo+0x2f8>)
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	4b82      	ldr	r3, [pc, #520]	@ (800a4ec <muestreo+0x2f8>)
 800a2e4:	801a      	strh	r2, [r3, #0]
		adcramh >>= 1; 				//srlw    Y             ;Convierte la muestra de  9 bits en 8 bits ****************???
 800a2e6:	4b81      	ldr	r3, [pc, #516]	@ (800a4ec <muestreo+0x2f8>)
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	085b      	lsrs	r3, r3, #1
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	4b7f      	ldr	r3, [pc, #508]	@ (800a4ec <muestreo+0x2f8>)
 800a2f0:	801a      	strh	r2, [r3, #0]
		vl_ram [cnt_mues] = (uint8_t) adcramh;
 800a2f2:	4b7e      	ldr	r3, [pc, #504]	@ (800a4ec <muestreo+0x2f8>)
 800a2f4:	8819      	ldrh	r1, [r3, #0]
 800a2f6:	4b7f      	ldr	r3, [pc, #508]	@ (800a4f4 <muestreo+0x300>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	001a      	movs	r2, r3
 800a2fc:	b2c9      	uxtb	r1, r1
 800a2fe:	4b7f      	ldr	r3, [pc, #508]	@ (800a4fc <muestreo+0x308>)
 800a300:	5499      	strb	r1, [r3, r2]
		cnt_mues++;			//inc     cnt_mues			;Una muestra más
 800a302:	4b7c      	ldr	r3, [pc, #496]	@ (800a4f4 <muestreo+0x300>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	3301      	adds	r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4b7a      	ldr	r3, [pc, #488]	@ (800a4f4 <muestreo+0x300>)
 800a30c:	701a      	strb	r2, [r3, #0]
		goto fin_voltrms;//jp      fin_voltrms
 800a30e:	e0df      	b.n	800a4d0 <muestreo+0x2dc>
				// ldw X,#vl_ram
				// ld A,XL
				// add A,cnt_mues
				// ld  XL,A
				// ld A,(X)  ////////////?????
				wreg= vl_ram[cnt_mues]; //ld wreg,A
 800a310:	4b78      	ldr	r3, [pc, #480]	@ (800a4f4 <muestreo+0x300>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	001a      	movs	r2, r3
 800a316:	4b79      	ldr	r3, [pc, #484]	@ (800a4fc <muestreo+0x308>)
 800a318:	5c9a      	ldrb	r2, [r3, r2]
 800a31a:	4b79      	ldr	r3, [pc, #484]	@ (800a500 <muestreo+0x30c>)
 800a31c:	701a      	strb	r2, [r3, #0]
take_sampling:
//----------------------- Factor
					//ldw     X,waux
					//ld      A,eevolt_mul
	                //eevolt_mul = waux * eevolt_mul;//mul     X,A ***************************????
					uint16_t	foo = 0;
 800a31e:	1dbb      	adds	r3, r7, #6
 800a320:	2200      	movs	r2, #0
 800a322:	801a      	strh	r2, [r3, #0]
					//foo = (uint16_t)(wreg * eevolt_mul);
					foo = (uint16_t)(wreg * findLastValue((uint32_t)&eevolt_mul));
 800a324:	4b76      	ldr	r3, [pc, #472]	@ (800a500 <muestreo+0x30c>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	001c      	movs	r4, r3
 800a32a:	4b76      	ldr	r3, [pc, #472]	@ (800a504 <muestreo+0x310>)
 800a32c:	0018      	movs	r0, r3
 800a32e:	f7f8 fc75 	bl	8002c1c <findLastValue>
 800a332:	0003      	movs	r3, r0
 800a334:	b29a      	uxth	r2, r3
 800a336:	1dbb      	adds	r3, r7, #6
 800a338:	4362      	muls	r2, r4
 800a33a:	801a      	strh	r2, [r3, #0]
					//resul = (uint16_t)(wreg * 100);
					//ld      A,eevolt_div
					//div     X,A
	                //eevolt_div = waux / eevolt_div; //************************************?????
					//foo = foo / eevolt_div;
					foo = foo / findLastValue((uint32_t)&eevolt_div);
 800a33c:	1dbb      	adds	r3, r7, #6
 800a33e:	881c      	ldrh	r4, [r3, #0]
 800a340:	4b71      	ldr	r3, [pc, #452]	@ (800a508 <muestreo+0x314>)
 800a342:	0018      	movs	r0, r3
 800a344:	f7f8 fc6a 	bl	8002c1c <findLastValue>
 800a348:	0003      	movs	r3, r0
 800a34a:	0019      	movs	r1, r3
 800a34c:	0020      	movs	r0, r4
 800a34e:	f7f5 fee3 	bl	8000118 <__udivsi3>
 800a352:	0003      	movs	r3, r0
 800a354:	001a      	movs	r2, r3
 800a356:	1dbb      	adds	r3, r7, #6
 800a358:	801a      	strh	r2, [r3, #0]
					//ld      XL,A
					//ld      A,resulh //----------------------------------------------?
					//mul     X,A
	                //resulh = waux*resulh;
	                //level_4st_mult_H = resulh;//ldw level_4st_mult_H,X
					level_4st_mult = (uint32_t)(foo * foo);
 800a35a:	1dbb      	adds	r3, r7, #6
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	1dba      	adds	r2, r7, #6
 800a360:	8812      	ldrh	r2, [r2, #0]
 800a362:	4353      	muls	r3, r2
 800a364:	001a      	movs	r2, r3
 800a366:	4b69      	ldr	r3, [pc, #420]	@ (800a50c <muestreo+0x318>)
 800a368:	601a      	str	r2, [r3, #0]
			//addw X,level_2st_result_H
			//level_2st_result_H = waux + level_2st_result_H;
			//addw X,sigma_cuad_sampl_4
			//ldw sigma_cuad_sampl_4,X
			//sigma_cuad_sampl_4 = waux + sigma_cuad_sampl_4;
              sigma_cuad_sampl +=  level_4st_mult;
 800a36a:	4b63      	ldr	r3, [pc, #396]	@ (800a4f8 <muestreo+0x304>)
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	4b67      	ldr	r3, [pc, #412]	@ (800a50c <muestreo+0x318>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	18d2      	adds	r2, r2, r3
 800a374:	4b60      	ldr	r3, [pc, #384]	@ (800a4f8 <muestreo+0x304>)
 800a376:	601a      	str	r2, [r3, #0]

	//================================================= FIN Rutina CALCULA SUMATORIA

			cnt_mues++;//inc cnt_mues
 800a378:	4b5e      	ldr	r3, [pc, #376]	@ (800a4f4 <muestreo+0x300>)
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	4b5c      	ldr	r3, [pc, #368]	@ (800a4f4 <muestreo+0x300>)
 800a382:	701a      	strb	r2, [r3, #0]
			//ld      A,cnt_mues
			if(cnt_mues >= 32){//cp A,#32 -------------------------?
 800a384:	4b5b      	ldr	r3, [pc, #364]	@ (800a4f4 <muestreo+0x300>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b1f      	cmp	r3, #31
 800a38a:	d800      	bhi.n	800a38e <muestreo+0x19a>
				goto sumatoria_completa;//jreq sumatoria_completa
			}
			goto suma_cuad;//jp suma_cuad
 800a38c:	e7c0      	b.n	800a310 <muestreo+0x11c>
				goto sumatoria_completa;//jreq sumatoria_completa
 800a38e:	46c0      	nop			@ (mov r8, r8)

sumatoria_completa:
			cnt_mues = 0;//clr cnt_mues
 800a390:	4b58      	ldr	r3, [pc, #352]	@ (800a4f4 <muestreo+0x300>)
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
			//		   goto taking_prom;//jrne taking_prom
			//	   }
				   //ldw X,sigma_cuad_sampl_2
				   //ldw	sigma_prom_h,X
			//	   sigma_prom_h = sigma_cuad_sampl_2;
			sigma_cuad_sampl  >>= 5;
 800a396:	4b58      	ldr	r3, [pc, #352]	@ (800a4f8 <muestreo+0x304>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	095a      	lsrs	r2, r3, #5
 800a39c:	4b56      	ldr	r3, [pc, #344]	@ (800a4f8 <muestreo+0x304>)
 800a39e:	601a      	str	r2, [r3, #0]
	//				addw sp,#6

					//ld A, XL
					//ld volt_trms, A
					//volt_trms = sigma_prom_h;
					volt_trms = (uint8_t)(sqrt(sigma_cuad_sampl));
 800a3a0:	4b55      	ldr	r3, [pc, #340]	@ (800a4f8 <muestreo+0x304>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f7f7 fffd 	bl	80023a4 <__aeabi_ui2d>
 800a3aa:	0002      	movs	r2, r0
 800a3ac:	000b      	movs	r3, r1
 800a3ae:	0010      	movs	r0, r2
 800a3b0:	0019      	movs	r1, r3
 800a3b2:	f010 fd95 	bl	801aee0 <sqrt>
 800a3b6:	0002      	movs	r2, r0
 800a3b8:	000b      	movs	r3, r1
 800a3ba:	0010      	movs	r0, r2
 800a3bc:	0019      	movs	r1, r3
 800a3be:	f7f6 f89d 	bl	80004fc <__aeabi_d2uiz>
 800a3c2:	0003      	movs	r3, r0
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	4b52      	ldr	r3, [pc, #328]	@ (800a510 <muestreo+0x31c>)
 800a3c8:	701a      	strb	r2, [r3, #0]
					cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800a3ca:	4b43      	ldr	r3, [pc, #268]	@ (800a4d8 <muestreo+0x2e4>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	701a      	strb	r2, [r3, #0]

					flagsLogger2[0] = 0;//bres flagsLogger2, #0
 800a3d0:	4b43      	ldr	r3, [pc, #268]	@ (800a4e0 <muestreo+0x2ec>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	701a      	strb	r2, [r3, #0]
					flagsLogger2[1] = 0;//bres flagsLogger2, #1
 800a3d6:	4b42      	ldr	r3, [pc, #264]	@ (800a4e0 <muestreo+0x2ec>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	705a      	strb	r2, [r3, #1]
					flagsLogger2[2] = 0;//BRES flagsLogger2, #2
 800a3dc:	4b40      	ldr	r3, [pc, #256]	@ (800a4e0 <muestreo+0x2ec>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	709a      	strb	r2, [r3, #2]
					// SAlto por lo mientras

//;-------------------- Falta programa esta parte ---------------------------------------
calibracion_voltaje:
	        //ld A,eef_voltaje
			asm ("nop");
 800a3e2:	46c0      	nop			@ (mov r8, r8)
			//if(eef_voltaje != 0x3C ){//cp A, #$3c					¿Esta calibrado en voltaje el equipo?
			if(findLastValue((uint32_t)&eef_voltaje)!= 0x3C){
 800a3e4:	4b4b      	ldr	r3, [pc, #300]	@ (800a514 <muestreo+0x320>)
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	f7f8 fc18 	bl	8002c1c <findLastValue>
 800a3ec:	0003      	movs	r3, r0
 800a3ee:	2b3c      	cmp	r3, #60	@ 0x3c
 800a3f0:	d05a      	beq.n	800a4a8 <muestreo+0x2b4>
				goto realiza_cal_volt; //jrne realiza_cal_volt
 800a3f2:	46c0      	nop			@ (mov r8, r8)
			goto fin_calibra_voltaje;

realiza_cal_volt:

//;RM_20230908 Mejoras para calibración de voltaje, espera 2 segundos antes de calibrar
			muestras_cal_volt++; //inc     muestras_cal_volt
 800a3f4:	4b48      	ldr	r3, [pc, #288]	@ (800a518 <muestreo+0x324>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	4b46      	ldr	r3, [pc, #280]	@ (800a518 <muestreo+0x324>)
 800a3fe:	701a      	strb	r2, [r3, #0]
			if(muestras_cal_volt >= 60){//cp  A,#60
 800a400:	4b45      	ldr	r3, [pc, #276]	@ (800a518 <muestreo+0x324>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b3b      	cmp	r3, #59	@ 0x3b
 800a406:	d951      	bls.n	800a4ac <muestreo+0x2b8>
				goto espera_iguales;//jruge   espera_iguales
 800a408:	46c0      	nop			@ (mov r8, r8)
			}
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje

espera_iguales:

			if(muestras_cal_volt != 60) {//  cp  A,#60
 800a40a:	4b43      	ldr	r3, [pc, #268]	@ (800a518 <muestreo+0x324>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b3c      	cmp	r3, #60	@ 0x3c
 800a410:	d104      	bne.n	800a41c <muestreo+0x228>
				goto segunda_muestra;//	jrne   segunda_muestra
			}
			voltaje_ant_cal = volt_trms;//	mov voltaje_ant_cal,volt_trms
 800a412:	4b3f      	ldr	r3, [pc, #252]	@ (800a510 <muestreo+0x31c>)
 800a414:	781a      	ldrb	r2, [r3, #0]
 800a416:	4b41      	ldr	r3, [pc, #260]	@ (800a51c <muestreo+0x328>)
 800a418:	701a      	strb	r2, [r3, #0]
			goto fin_calibra_voltaje;//jp  fin_calibra_voltaje
 800a41a:	e04c      	b.n	800a4b6 <muestreo+0x2c2>
				goto segunda_muestra;//	jrne   segunda_muestra
 800a41c:	46c0      	nop			@ (mov r8, r8)

segunda_muestra:

			if(muestras_cal_volt != 61){//cp      A,#61
 800a41e:	4b3e      	ldr	r3, [pc, #248]	@ (800a518 <muestreo+0x324>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b3d      	cmp	r3, #61	@ 0x3d
 800a424:	d044      	beq.n	800a4b0 <muestreo+0x2bc>
				goto tercera_muestra;////jrne    tercera_muestra
 800a426:	46c0      	nop			@ (mov r8, r8)
			}
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje

tercera_muestra:
			//	ld      A,volt_trms
			if(volt_trms == voltaje_ant_cal){//cp  A,voltaje_ant_cal
 800a428:	4b39      	ldr	r3, [pc, #228]	@ (800a510 <muestreo+0x31c>)
 800a42a:	781a      	ldrb	r2, [r3, #0]
 800a42c:	4b3b      	ldr	r3, [pc, #236]	@ (800a51c <muestreo+0x328>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d13f      	bne.n	800a4b4 <muestreo+0x2c0>
				goto calibracion_valida;//jreq calibracion_valida
 800a434:	46c0      	nop			@ (mov r8, r8)

v_ubajo_cv:
			//ldw Y,#60
			//ldw waux,Y
			//waux = 60;
			if(volt_trms > 60 ){//cpw X,waux -------x =   ;Compara la medición sin factor con el umbral bajo
 800a436:	4b36      	ldr	r3, [pc, #216]	@ (800a510 <muestreo+0x31c>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b3c      	cmp	r3, #60	@ 0x3c
 800a43c:	d803      	bhi.n	800a446 <muestreo+0x252>
				goto v_ualto_cv;//jrugt  v_ualto_cv
			}
			goto calibra_reset;//jp   calibra_reset
 800a43e:	46c0      	nop			@ (mov r8, r8)
 800a440:	e02f      	b.n	800a4a2 <muestreo+0x2ae>

			//ldw     Y,#80
			//ldw     waux,Y
			//waux = 80;
			if(volt_trms > 80 ){//cpw     X,waux, x  ;Mayor o igual al umbral alto, resistores mal soldados o inadecuados
				goto calibra_reset;//jruge   calibra_reset
 800a442:	46c0      	nop			@ (mov r8, r8)
 800a444:	e02d      	b.n	800a4a2 <muestreo+0x2ae>
				goto v_ualto_cv;//jrugt  v_ualto_cv
 800a446:	46c0      	nop			@ (mov r8, r8)
			if(volt_trms > 80 ){//cpw     X,waux, x  ;Mayor o igual al umbral alto, resistores mal soldados o inadecuados
 800a448:	4b31      	ldr	r3, [pc, #196]	@ (800a510 <muestreo+0x31c>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b50      	cmp	r3, #80	@ 0x50
 800a44e:	d8f8      	bhi.n	800a442 <muestreo+0x24e>
			}
			wreg = 100;					//mov  wreg,#100
 800a450:	4b2b      	ldr	r3, [pc, #172]	@ (800a500 <muestreo+0x30c>)
 800a452:	2264      	movs	r2, #100	@ 0x64
 800a454:	701a      	strb	r2, [r3, #0]
			waux = volt_trms;			//mov  waux,volt_trms
 800a456:	4b2e      	ldr	r3, [pc, #184]	@ (800a510 <muestreo+0x31c>)
 800a458:	781a      	ldrb	r2, [r3, #0]
 800a45a:	4b31      	ldr	r3, [pc, #196]	@ (800a520 <muestreo+0x32c>)
 800a45c:	701a      	strb	r2, [r3, #0]
			//ld  A, wreg
			//ldw  X, #eevolt_mul
			// (eevolt_mul) = wreg; //ld (X), A
			//Data = (uint32_t)wreg;											//;Guarda la variable de multiplicación en EEPROM
			//AddressDestination = &eevolt_mul;
			wreeprom(wreg,&eevolt_mul);
 800a45e:	4b28      	ldr	r3, [pc, #160]	@ (800a500 <muestreo+0x30c>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	001a      	movs	r2, r3
 800a464:	4b27      	ldr	r3, [pc, #156]	@ (800a504 <muestreo+0x310>)
 800a466:	0019      	movs	r1, r3
 800a468:	0010      	movs	r0, r2
 800a46a:	f7fc fe83 	bl	8007174 <wreeprom>

//			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			HAL_IWDG_Refresh( &hiwdg );
 800a46e:	4b2d      	ldr	r3, [pc, #180]	@ (800a524 <muestreo+0x330>)
 800a470:	0018      	movs	r0, r3
 800a472:	f00b faf7 	bl	8015a64 <HAL_IWDG_Refresh>
			//ld  A,waux
			 //ldw  X,#eevolt_div
			 //ld	(X),A
			//Data = (uint32_t)waux;										//;Guarda la variable de división en EEPROM
			//AddressDestination = &eevolt_div;
			wreeprom(waux,&eevolt_div);
 800a476:	4b2a      	ldr	r3, [pc, #168]	@ (800a520 <muestreo+0x32c>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	001a      	movs	r2, r3
 800a47c:	4b22      	ldr	r3, [pc, #136]	@ (800a508 <muestreo+0x314>)
 800a47e:	0019      	movs	r1, r3
 800a480:	0010      	movs	r0, r2
 800a482:	f7fc fe77 	bl	8007174 <wreeprom>
//			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			HAL_IWDG_Refresh( &hiwdg );
 800a486:	4b27      	ldr	r3, [pc, #156]	@ (800a524 <muestreo+0x330>)
 800a488:	0018      	movs	r0, r3
 800a48a:	f00b faeb 	bl	8015a64 <HAL_IWDG_Refresh>
			//ldw X,#eef_voltaje
			//ld (X),A
			//Data = (uint32_t)0x3C;										//;Indica que ya se realizo calibración de voltaje en EEPROM
			//AddressDestination = &eef_voltaje;
//			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, AddressDestination, Data);
			wreeprom(0x3C,&eef_voltaje);
 800a48e:	4b21      	ldr	r3, [pc, #132]	@ (800a514 <muestreo+0x320>)
 800a490:	0019      	movs	r1, r3
 800a492:	203c      	movs	r0, #60	@ 0x3c
 800a494:	f7fc fe6e 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800a498:	4b22      	ldr	r3, [pc, #136]	@ (800a524 <muestreo+0x330>)
 800a49a:	0018      	movs	r0, r3
 800a49c:	f00b fae2 	bl	8015a64 <HAL_IWDG_Refresh>

graba_3: //----------------------------------registro
	        //btjt FLASH_IAPSR,#2,graba_3
	        // mov FLASH_IAPSR,#$00	   ;Bloquea la EEPROM inmediatamente
//			HAL_FLASHEx_DATAEEPROM_Lock();
	        goto fin_calibra_voltaje;//jp fin_calibra_voltaje
 800a4a0:	e009      	b.n	800a4b6 <muestreo+0x2c2>

calibra_reset:
			asm ("nop");
 800a4a2:	46c0      	nop			@ (mov r8, r8)
			asm ("nop");
 800a4a4:	46c0      	nop			@ (mov r8, r8)
 800a4a6:	e7fc      	b.n	800a4a2 <muestreo+0x2ae>
			goto fin_calibra_voltaje;
 800a4a8:	46c0      	nop			@ (mov r8, r8)
 800a4aa:	e011      	b.n	800a4d0 <muestreo+0x2dc>
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje
 800a4ac:	46c0      	nop			@ (mov r8, r8)
 800a4ae:	e00f      	b.n	800a4d0 <muestreo+0x2dc>
			goto fin_calibra_voltaje;// jp fin_calibra_voltaje
 800a4b0:	46c0      	nop			@ (mov r8, r8)
 800a4b2:	e00d      	b.n	800a4d0 <muestreo+0x2dc>
			goto fin_calibra_voltaje;// MAN DEBUG
 800a4b4:	46c0      	nop			@ (mov r8, r8)
	        goto calibra_reset;//jp      calibra_reset

fin_calibra_voltaje:
	        goto fin_voltrms;// jp fin_voltrms
 800a4b6:	e00b      	b.n	800a4d0 <muestreo+0x2dc>
		goto error_muestreo;//jp error_muestreo
 800a4b8:	46c0      	nop			@ (mov r8, r8)
error_muestreo:
			cnt_mues = 0;//clr cnt_mues
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f4 <muestreo+0x300>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	701a      	strb	r2, [r3, #0]
			cnt_veces_muestreo = 0;//clr cnt_veces_muestreo
 800a4c0:	4b05      	ldr	r3, [pc, #20]	@ (800a4d8 <muestreo+0x2e4>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	701a      	strb	r2, [r3, #0]
			edo_muestreo = 0;//mov edo_muestreo,#0
 800a4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f0 <muestreo+0x2fc>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	701a      	strb	r2, [r3, #0]
fin_voltrms:


}
 800a4cc:	e000      	b.n	800a4d0 <muestreo+0x2dc>
		goto fin_voltrms;//jp fin_voltrms
 800a4ce:	46c0      	nop			@ (mov r8, r8)
}
 800a4d0:	46c0      	nop			@ (mov r8, r8)
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	b003      	add	sp, #12
 800a4d6:	bd90      	pop	{r4, r7, pc}
 800a4d8:	20000b44 	.word	0x20000b44
 800a4dc:	20000c5c 	.word	0x20000c5c
 800a4e0:	20000f7c 	.word	0x20000f7c
 800a4e4:	20000b18 	.word	0x20000b18
 800a4e8:	40012400 	.word	0x40012400
 800a4ec:	20000b60 	.word	0x20000b60
 800a4f0:	20000b46 	.word	0x20000b46
 800a4f4:	20000b1b 	.word	0x20000b1b
 800a4f8:	20000b1c 	.word	0x20000b1c
 800a4fc:	20000b24 	.word	0x20000b24
 800a500:	20000b55 	.word	0x20000b55
 800a504:	0803f801 	.word	0x0803f801
 800a508:	0803f800 	.word	0x0803f800
 800a50c:	20000b20 	.word	0x20000b20
 800a510:	20000b45 	.word	0x20000b45
 800a514:	0803f802 	.word	0x0803f802
 800a518:	20000c61 	.word	0x20000c61
 800a51c:	20000c62 	.word	0x20000c62
 800a520:	20000b54 	.word	0x20000b54
 800a524:	2000054c 	.word	0x2000054c

0800a528 <noctar>:


void noctar (void){
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0

	asm ("nop");
 800a52c:	46c0      	nop			@ (mov r8, r8)

}
 800a52e:	46c0      	nop			@ (mov r8, r8)
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <refrigera>:
#include "customMain.h"
#include "board_PFULLDEF.h"
#include "ELTEC_EmulatedEEPROM.h"


void refrigera (void){
 800a534:	b590      	push	{r4, r7, lr}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0

				// VAlor de Carga de Prueba
				//tsac_w = -250;
				// VAlor de Carga de Prueba

				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	e00c      	b.n	800a55a <refrigera+0x26>
					GPIOR0[i] = 0;										// Limpia registro de banderas
 800a540:	4ad0      	ldr	r2, [pc, #832]	@ (800a884 <refrigera+0x350>)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	18d3      	adds	r3, r2, r3
 800a546:	2200      	movs	r2, #0
 800a548:	701a      	strb	r2, [r3, #0]
					GPIOR1[i] = 0;										// Limpia registro de banderas
 800a54a:	4acf      	ldr	r2, [pc, #828]	@ (800a888 <refrigera+0x354>)
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	18d3      	adds	r3, r2, r3
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++) { //clr	GPIOR0 //clr GPIOR1;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	3301      	adds	r3, #1
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b07      	cmp	r3, #7
 800a55e:	ddef      	ble.n	800a540 <refrigera+0xc>
				}
				wreg = 	Plantilla [logicos]; //mov wreg,logicos;		;	/ Parámetro A2
 800a560:	4bca      	ldr	r3, [pc, #808]	@ (800a88c <refrigera+0x358>)
 800a562:	2253      	movs	r2, #83	@ 0x53
 800a564:	5c9a      	ldrb	r2, [r3, r2]
 800a566:	4bca      	ldr	r3, [pc, #808]	@ (800a890 <refrigera+0x35c>)
 800a568:	701a      	strb	r2, [r3, #0]
				if(!GetRegFlagState(wreg,0)){ //btjf wreg,#0,refrigera_j00;    // Indica función ahorradora
 800a56a:	4bc9      	ldr	r3, [pc, #804]	@ (800a890 <refrigera+0x35c>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	001a      	movs	r2, r3
 800a570:	2301      	movs	r3, #1
 800a572:	4013      	ands	r3, r2
 800a574:	d003      	beq.n	800a57e <refrigera+0x4a>
					goto refrigera_j00;
				}
				GPIOR0 [f_ahorra] = 1; //bset GPIOR0,#f_ahorra
 800a576:	4bc3      	ldr	r3, [pc, #780]	@ (800a884 <refrigera+0x350>)
 800a578:	2201      	movs	r2, #1
 800a57a:	70da      	strb	r2, [r3, #3]
 800a57c:	e000      	b.n	800a580 <refrigera+0x4c>
					goto refrigera_j00;
 800a57e:	46c0      	nop			@ (mov r8, r8)
refrigera_j00:
				if(!GetRegFlagState(wreg, 1)){ //btjf wreg,#1,refrigera_j01;
 800a580:	4bc3      	ldr	r3, [pc, #780]	@ (800a890 <refrigera+0x35c>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	001a      	movs	r2, r3
 800a586:	2302      	movs	r3, #2
 800a588:	4013      	ands	r3, r2
 800a58a:	d003      	beq.n	800a594 <refrigera+0x60>
					goto refrigera_j01;
				}
				GPIOR0 [f_disable] = 1; //bset GPIOR0,#f_disable			/ Deshabilitado el deshielo al arranque
 800a58c:	4bbd      	ldr	r3, [pc, #756]	@ (800a884 <refrigera+0x350>)
 800a58e:	2201      	movs	r2, #1
 800a590:	711a      	strb	r2, [r3, #4]
 800a592:	e000      	b.n	800a596 <refrigera+0x62>
					goto refrigera_j01;
 800a594:	46c0      	nop			@ (mov r8, r8)

refrigera_j01:
				wreg = Plantilla [histvol]; //mov wreg,histvol
 800a596:	4bbd      	ldr	r3, [pc, #756]	@ (800a88c <refrigera+0x358>)
 800a598:	2262      	movs	r2, #98	@ 0x62
 800a59a:	5c9a      	ldrb	r2, [r3, r2]
 800a59c:	4bbc      	ldr	r3, [pc, #752]	@ (800a890 <refrigera+0x35c>)
 800a59e:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();		//call BaBentre10_math
 800a5a0:	f7fb ffa6 	bl	80064f0 <BaBentre10_math>
                //ld A,protype;
				if(Plantilla [protype] != 0x02){ //cp A,#$02;					//	Protección de voltaje 220v?
 800a5a4:	4bb9      	ldr	r3, [pc, #740]	@ (800a88c <refrigera+0x358>)
 800a5a6:	2257      	movs	r2, #87	@ 0x57
 800a5a8:	5c9b      	ldrb	r3, [r3, r2]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d11e      	bne.n	800a5ec <refrigera+0xb8>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
				}
				//ld a,volt_100
				volt_min = Plantilla [volt_100] + 100; //add a,#100				Carga como voltaje minimo
 800a5ae:	4bb7      	ldr	r3, [pc, #732]	@ (800a88c <refrigera+0x358>)
 800a5b0:	2243      	movs	r2, #67	@ 0x43
 800a5b2:	5c9b      	ldrb	r3, [r3, r2]
 800a5b4:	3364      	adds	r3, #100	@ 0x64
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	4bb6      	ldr	r3, [pc, #728]	@ (800a894 <refrigera+0x360>)
 800a5ba:	701a      	strb	r2, [r3, #0]
				//ld volt_min,a;
				volt_hmin = volt_min + waux;//add a,waux //ld volt_hmin,a;		Carga como voltaje minimo con histeresis
 800a5bc:	4bb5      	ldr	r3, [pc, #724]	@ (800a894 <refrigera+0x360>)
 800a5be:	781a      	ldrb	r2, [r3, #0]
 800a5c0:	4bb5      	ldr	r3, [pc, #724]	@ (800a898 <refrigera+0x364>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	18d3      	adds	r3, r2, r3
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	4bb4      	ldr	r3, [pc, #720]	@ (800a89c <refrigera+0x368>)
 800a5ca:	701a      	strb	r2, [r3, #0]
				//ld a,volt_200
				volt_max = Plantilla [volt_200] + 200; //add a,#200 //ld volt_max,a;		//Carga como voltaje maximo
 800a5cc:	4baf      	ldr	r3, [pc, #700]	@ (800a88c <refrigera+0x358>)
 800a5ce:	2244      	movs	r2, #68	@ 0x44
 800a5d0:	5c9b      	ldrb	r3, [r3, r2]
 800a5d2:	3b38      	subs	r3, #56	@ 0x38
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	4bb2      	ldr	r3, [pc, #712]	@ (800a8a0 <refrigera+0x36c>)
 800a5d8:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg  //ld	volt_hmax,a
 800a5da:	4bb1      	ldr	r3, [pc, #708]	@ (800a8a0 <refrigera+0x36c>)
 800a5dc:	781a      	ldrb	r2, [r3, #0]
 800a5de:	4bac      	ldr	r3, [pc, #688]	@ (800a890 <refrigera+0x35c>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	4baf      	ldr	r3, [pc, #700]	@ (800a8a4 <refrigera+0x370>)
 800a5e8:	701a      	strb	r2, [r3, #0]
				goto set_protvolt; //jra set_protvolt
 800a5ea:	e021      	b.n	800a630 <refrigera+0xfc>
					goto ask_protvolt_120; //jrne ask_protvolt_120;			;		No, Pregunta por la de 120v
 800a5ec:	46c0      	nop			@ (mov r8, r8)

ask_protvolt_120:
				if(Plantilla [protype] != 0x01){ //cp A,#$01;
 800a5ee:	4ba7      	ldr	r3, [pc, #668]	@ (800a88c <refrigera+0x358>)
 800a5f0:	2257      	movs	r2, #87	@ 0x57
 800a5f2:	5c9b      	ldrb	r3, [r3, r2]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d11f      	bne.n	800a638 <refrigera+0x104>
					goto refrige05;//jrne refrige05
				}
        //ld	 a,volt_000
				volt_min = Plantilla [volt_000]; //ld volt_min,a;				//Carga como voltaje minimo
 800a5f8:	4ba4      	ldr	r3, [pc, #656]	@ (800a88c <refrigera+0x358>)
 800a5fa:	2242      	movs	r2, #66	@ 0x42
 800a5fc:	5c9a      	ldrb	r2, [r3, r2]
 800a5fe:	4ba5      	ldr	r3, [pc, #660]	@ (800a894 <refrigera+0x360>)
 800a600:	701a      	strb	r2, [r3, #0]
				volt_hmin = volt_min + waux; //add a,waux //ld volt_hmin,a;		//Carga como voltaje minimo con histeresis
 800a602:	4ba4      	ldr	r3, [pc, #656]	@ (800a894 <refrigera+0x360>)
 800a604:	781a      	ldrb	r2, [r3, #0]
 800a606:	4ba4      	ldr	r3, [pc, #656]	@ (800a898 <refrigera+0x364>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	18d3      	adds	r3, r2, r3
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	4ba3      	ldr	r3, [pc, #652]	@ (800a89c <refrigera+0x368>)
 800a610:	701a      	strb	r2, [r3, #0]
				volt_max = Plantilla [volt_100] + 100;//ld a,volt_100 //add a,#100		//Carga como voltaje maximo
 800a612:	4b9e      	ldr	r3, [pc, #632]	@ (800a88c <refrigera+0x358>)
 800a614:	2243      	movs	r2, #67	@ 0x43
 800a616:	5c9b      	ldrb	r3, [r3, r2]
 800a618:	3364      	adds	r3, #100	@ 0x64
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	4ba0      	ldr	r3, [pc, #640]	@ (800a8a0 <refrigera+0x36c>)
 800a61e:	701a      	strb	r2, [r3, #0]
				volt_hmax = volt_max - wreg; //sub a,wreg //ld volt_hmax,a				//Carga como voltaje maximo con histeresis
 800a620:	4b9f      	ldr	r3, [pc, #636]	@ (800a8a0 <refrigera+0x36c>)
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	4b9a      	ldr	r3, [pc, #616]	@ (800a890 <refrigera+0x35c>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	4b9d      	ldr	r3, [pc, #628]	@ (800a8a4 <refrigera+0x370>)
 800a62e:	701a      	strb	r2, [r3, #0]

set_protvolt:
                GPIOR0[f_volt] = 1;				//;	/ Indica protección de voltaje
 800a630:	4b94      	ldr	r3, [pc, #592]	@ (800a884 <refrigera+0x350>)
 800a632:	2201      	movs	r2, #1
 800a634:	719a      	strb	r2, [r3, #6]
 800a636:	e000      	b.n	800a63a <refrigera+0x106>
					goto refrige05;//jrne refrige05
 800a638:	46c0      	nop			@ (mov r8, r8)
refrige05:
				GPIOR1[f_led] = 1; //bset	GPIOR1,#f_led;
 800a63a:	4b93      	ldr	r3, [pc, #588]	@ (800a888 <refrigera+0x354>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	705a      	strb	r2, [r3, #1]

				//;*****************************
				//; Para firmware de equipo medico solo se permite deshielo por ventilador, ya que el relevador de deshielo se usa para cerradura
				//;	por lo que se fuerza el parámetro de tipo de deshielo (dhmode) a ser igual a cero
				Plantilla [dhmode] = 0; //clr dhmode
 800a640:	4b92      	ldr	r3, [pc, #584]	@ (800a88c <refrigera+0x358>)
 800a642:	2255      	movs	r2, #85	@ 0x55
 800a644:	2100      	movs	r1, #0
 800a646:	5499      	strb	r1, [r3, r2]

              ///ldw X,spdiur_w
              //ldw	Y,difdiur_w;
              // liminf_w = (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
				liminf_w = TwoByteInArrayToWord (&Plantilla[spdiur_H]);				// (uint16_t)(Plantilla[spdiur_H] * 256) + (uint16_t)(Plantilla[spdiur_L]);  //ldw liminf_w,X
 800a648:	4b97      	ldr	r3, [pc, #604]	@ (800a8a8 <refrigera+0x374>)
 800a64a:	0018      	movs	r0, r3
 800a64c:	f7fb fd08 	bl	8006060 <TwoByteInArrayToWord>
 800a650:	0003      	movs	r3, r0
 800a652:	b29a      	uxth	r2, r3
 800a654:	4b95      	ldr	r3, [pc, #596]	@ (800a8ac <refrigera+0x378>)
 800a656:	801a      	strh	r2, [r3, #0]
              //tempo2 = spdiur_w; //ldw tempo2,X
              //waux = difdiur_w; //waux,Y
              //call sumafbcd_math
              //ldw     X,waux
              //ldw   	limsup_w,X
				limsup_w = liminf_w + TwoByteInArrayToWord (&Plantilla[difdiur_H]);       //
 800a658:	4b95      	ldr	r3, [pc, #596]	@ (800a8b0 <refrigera+0x37c>)
 800a65a:	0018      	movs	r0, r3
 800a65c:	f7fb fd00 	bl	8006060 <TwoByteInArrayToWord>
 800a660:	0003      	movs	r3, r0
 800a662:	b29a      	uxth	r2, r3
 800a664:	4b91      	ldr	r3, [pc, #580]	@ (800a8ac <refrigera+0x378>)
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	18d3      	adds	r3, r2, r3
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	4b91      	ldr	r3, [pc, #580]	@ (800a8b4 <refrigera+0x380>)
 800a66e:	801a      	strh	r2, [r3, #0]

// ;// codigo para modos de ahorro 1 y 2
				if(!flagsC[f_ahorro1]){ //btjf flagsC,#f_ahorro1,no_ahorro1
 800a670:	4b91      	ldr	r3, [pc, #580]	@ (800a8b8 <refrigera+0x384>)
 800a672:	785b      	ldrb	r3, [r3, #1]
 800a674:	2201      	movs	r2, #1
 800a676:	4053      	eors	r3, r2
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d137      	bne.n	800a6ee <refrigera+0x1ba>
					goto no_ahorro1;
				}
				liminf_w = liminf_w +  TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800a67e:	4b8f      	ldr	r3, [pc, #572]	@ (800a8bc <refrigera+0x388>)
 800a680:	0018      	movs	r0, r3
 800a682:	f7fb fced 	bl	8006060 <TwoByteInArrayToWord>
 800a686:	0003      	movs	r3, r0
 800a688:	b29a      	uxth	r2, r3
 800a68a:	4b88      	ldr	r3, [pc, #544]	@ (800a8ac <refrigera+0x378>)
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	18d3      	adds	r3, r2, r3
 800a690:	b29a      	uxth	r2, r3
 800a692:	4b86      	ldr	r3, [pc, #536]	@ (800a8ac <refrigera+0x378>)
 800a694:	801a      	strh	r2, [r3, #0]
				limsup_w =  limsup_w + TwoByteInArrayToWord (&Plantilla[difAhorro1_H]);
 800a696:	4b89      	ldr	r3, [pc, #548]	@ (800a8bc <refrigera+0x388>)
 800a698:	0018      	movs	r0, r3
 800a69a:	f7fb fce1 	bl	8006060 <TwoByteInArrayToWord>
 800a69e:	0003      	movs	r3, r0
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	4b84      	ldr	r3, [pc, #528]	@ (800a8b4 <refrigera+0x380>)
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	18d3      	adds	r3, r2, r3
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	4b82      	ldr	r3, [pc, #520]	@ (800a8b4 <refrigera+0x380>)
 800a6ac:	801a      	strh	r2, [r3, #0]

				if(!flagsC[f_ahorro2]){ // btjf	flagsC,#f_ahorro2,no_ahorro1
 800a6ae:	4b82      	ldr	r3, [pc, #520]	@ (800a8b8 <refrigera+0x384>)
 800a6b0:	789b      	ldrb	r3, [r3, #2]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4053      	eors	r3, r2
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d11a      	bne.n	800a6f2 <refrigera+0x1be>
					goto no_ahorro1;
				}
				liminf_w = liminf_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800a6bc:	4b80      	ldr	r3, [pc, #512]	@ (800a8c0 <refrigera+0x38c>)
 800a6be:	0018      	movs	r0, r3
 800a6c0:	f7fb fcce 	bl	8006060 <TwoByteInArrayToWord>
 800a6c4:	0003      	movs	r3, r0
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	4b78      	ldr	r3, [pc, #480]	@ (800a8ac <refrigera+0x378>)
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	18d3      	adds	r3, r2, r3
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	4b76      	ldr	r3, [pc, #472]	@ (800a8ac <refrigera+0x378>)
 800a6d2:	801a      	strh	r2, [r3, #0]
				limsup_w = limsup_w  + TwoByteInArrayToWord (&Plantilla[difAhorro2_H]);
 800a6d4:	4b7a      	ldr	r3, [pc, #488]	@ (800a8c0 <refrigera+0x38c>)
 800a6d6:	0018      	movs	r0, r3
 800a6d8:	f7fb fcc2 	bl	8006060 <TwoByteInArrayToWord>
 800a6dc:	0003      	movs	r3, r0
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	4b74      	ldr	r3, [pc, #464]	@ (800a8b4 <refrigera+0x380>)
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	18d3      	adds	r3, r2, r3
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	4b72      	ldr	r3, [pc, #456]	@ (800a8b4 <refrigera+0x380>)
 800a6ea:	801a      	strh	r2, [r3, #0]
 800a6ec:	e002      	b.n	800a6f4 <refrigera+0x1c0>
					goto no_ahorro1;
 800a6ee:	46c0      	nop			@ (mov r8, r8)
 800a6f0:	e000      	b.n	800a6f4 <refrigera+0x1c0>
					goto no_ahorro1;
 800a6f2:	46c0      	nop			@ (mov r8, r8)

no_ahorro1:


				if(!GetRegFlagState(edorefri,1)){ //btjf	edorefri,#1,refrigera_j04;
 800a6f4:	4b73      	ldr	r3, [pc, #460]	@ (800a8c4 <refrigera+0x390>)
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	001a      	movs	r2, r3
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	d138      	bne.n	800a772 <refrigera+0x23e>
					goto refrigera_j04;
 800a700:	46c0      	nop			@ (mov r8, r8)
				}
				goto refrige10;
refrigera_j04:
				offdpy();		//call offdpy			/// Apaga el display
 800a702:	f7fc f8b3 	bl	800686c <offdpy>
				//datled &=  0x80;	//ld A,datled//and A,#$80;	// Apaga los led´s
				for(uint8_t k=0; k<7;k++){
 800a706:	2313      	movs	r3, #19
 800a708:	18fb      	adds	r3, r7, r3
 800a70a:	2200      	movs	r2, #0
 800a70c:	701a      	strb	r2, [r3, #0]
 800a70e:	e00f      	b.n	800a730 <refrigera+0x1fc>
					if(k!=4)
 800a710:	2213      	movs	r2, #19
 800a712:	18bb      	adds	r3, r7, r2
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b04      	cmp	r3, #4
 800a718:	d004      	beq.n	800a724 <refrigera+0x1f0>
						datled[k] = 0;
 800a71a:	18bb      	adds	r3, r7, r2
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	4a6a      	ldr	r2, [pc, #424]	@ (800a8c8 <refrigera+0x394>)
 800a720:	2100      	movs	r1, #0
 800a722:	54d1      	strb	r1, [r2, r3]
				for(uint8_t k=0; k<7;k++){
 800a724:	2113      	movs	r1, #19
 800a726:	187b      	adds	r3, r7, r1
 800a728:	781a      	ldrb	r2, [r3, #0]
 800a72a:	187b      	adds	r3, r7, r1
 800a72c:	3201      	adds	r2, #1
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	2313      	movs	r3, #19
 800a732:	18fb      	adds	r3, r7, r3
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b06      	cmp	r3, #6
 800a738:	d9ea      	bls.n	800a710 <refrigera+0x1dc>
				}
				if(GetRegFlagState(edorefri,0)){ //btjt	edorefri,#0,refrigera_j05;
 800a73a:	4b62      	ldr	r3, [pc, #392]	@ (800a8c4 <refrigera+0x390>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	001a      	movs	r2, r3
 800a740:	2301      	movs	r3, #1
 800a742:	4013      	ands	r3, r2
 800a744:	d100      	bne.n	800a748 <refrigera+0x214>
 800a746:	e1fa      	b.n	800ab3e <refrigera+0x60a>
					goto refrigera_j05;
 800a748:	46c0      	nop			@ (mov r8, r8)
            	}
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
refrigera_j05:
				goto	autopru;		// edorefri = 1; Estado de diagnóstico del equipo
 800a74a:	46c0      	nop			@ (mov r8, r8)

finindi:     goto finref;

//;--------------------------------------------------------------------------------------------------
autopru:
            wreg = durautop;
 800a74c:	4b5f      	ldr	r3, [pc, #380]	@ (800a8cc <refrigera+0x398>)
 800a74e:	781a      	ldrb	r2, [r3, #0]
 800a750:	4b4f      	ldr	r3, [pc, #316]	@ (800a890 <refrigera+0x35c>)
 800a752:	701a      	strb	r2, [r3, #0]
            latchtimeh = (uint16_t)(wreg);		// mov			latchtimel,wreg;,	Copia el tiempo que esta corriendo
 800a754:	4b4e      	ldr	r3, [pc, #312]	@ (800a890 <refrigera+0x35c>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	001a      	movs	r2, r3
 800a75a:	4b5d      	ldr	r3, [pc, #372]	@ (800a8d0 <refrigera+0x39c>)
 800a75c:	801a      	strh	r2, [r3, #0]
            blink_640();						//call blink_640			//call		blink_640;				/ En wreg quedan los múltiplos de 640 ms
 800a75e:	f7fb fccf 	bl	8006100 <blink_640>
            if(wreg != 0){						/// ¿Es el primer ciclo?
 800a762:	4b4b      	ldr	r3, [pc, #300]	@ (800a890 <refrigera+0x35c>)
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d101      	bne.n	800a76e <refrigera+0x23a>
 800a76a:	f000 fbaa 	bl	800aec2 <refrigera+0x98e>
            	goto version;					//jrne		version;					/ No, ve a mostrar la version
 800a76e:	f000 fbac 	bl	800aeca <refrigera+0x996>
				goto refrige10;
 800a772:	46c0      	nop			@ (mov r8, r8)
				desptdv_math();			//call desptdv_math
 800a774:	f7fb fd34 	bl	80061e0 <desptdv_math>
				Bclear_Clear_trfst(datled, datled,2, 3);
 800a778:	4953      	ldr	r1, [pc, #332]	@ (800a8c8 <refrigera+0x394>)
 800a77a:	4853      	ldr	r0, [pc, #332]	@ (800a8c8 <refrigera+0x394>)
 800a77c:	2303      	movs	r3, #3
 800a77e:	2202      	movs	r2, #2
 800a780:	f002 fbeb 	bl	800cf5a <Bclear_Clear_trfst>
            if(!botonst[b3_f1]){ //btjf botonst,#b3_f1,no_Func_Lock;		/ ¿Función primaria del botón lampara?
 800a784:	4b53      	ldr	r3, [pc, #332]	@ (800a8d4 <refrigera+0x3a0>)
 800a786:	791b      	ldrb	r3, [r3, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	4053      	eors	r3, r2
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d137      	bne.n	800a802 <refrigera+0x2ce>
            cntMsgCmd = 250;
 800a792:	4b51      	ldr	r3, [pc, #324]	@ (800a8d8 <refrigera+0x3a4>)
 800a794:	22fa      	movs	r2, #250	@ 0xfa
 800a796:	701a      	strb	r2, [r3, #0]
            numMsg = 3;
 800a798:	4b50      	ldr	r3, [pc, #320]	@ (800a8dc <refrigera+0x3a8>)
 800a79a:	2203      	movs	r2, #3
 800a79c:	701a      	strb	r2, [r3, #0]
            estado1[est1LockDr] ^= 0x1;
 800a79e:	4b50      	ldr	r3, [pc, #320]	@ (800a8e0 <refrigera+0x3ac>)
 800a7a0:	799b      	ldrb	r3, [r3, #6]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	4053      	eors	r3, r2
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	1e5a      	subs	r2, r3, #1
 800a7aa:	4193      	sbcs	r3, r2
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	4b4c      	ldr	r3, [pc, #304]	@ (800a8e0 <refrigera+0x3ac>)
 800a7b0:	719a      	strb	r2, [r3, #6]
            waux = findLastValue((uint32_t)&eeEstado1);;
 800a7b2:	4b4c      	ldr	r3, [pc, #304]	@ (800a8e4 <refrigera+0x3b0>)
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f7f8 fa31 	bl	8002c1c <findLastValue>
 800a7ba:	0003      	movs	r3, r0
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	4b36      	ldr	r3, [pc, #216]	@ (800a898 <refrigera+0x364>)
 800a7c0:	701a      	strb	r2, [r3, #0]
            BitClear(waux, est1LockDr);//bres waux,#est1LockDr
 800a7c2:	4b35      	ldr	r3, [pc, #212]	@ (800a898 <refrigera+0x364>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2240      	movs	r2, #64	@ 0x40
 800a7c8:	4393      	bics	r3, r2
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	4b32      	ldr	r3, [pc, #200]	@ (800a898 <refrigera+0x364>)
 800a7ce:	701a      	strb	r2, [r3, #0]
            if(!estado1[est1LockDr]){//btjf estado1,#est1LockDr,func_lock_01;
 800a7d0:	4b43      	ldr	r3, [pc, #268]	@ (800a8e0 <refrigera+0x3ac>)
 800a7d2:	799b      	ldrb	r3, [r3, #6]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	4053      	eors	r3, r2
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d107      	bne.n	800a7ee <refrigera+0x2ba>
            BitSet(waux, est1LockDr); //bset waux,#est1LockDr
 800a7de:	4b2e      	ldr	r3, [pc, #184]	@ (800a898 <refrigera+0x364>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2240      	movs	r2, #64	@ 0x40
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	4b2b      	ldr	r3, [pc, #172]	@ (800a898 <refrigera+0x364>)
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	e000      	b.n	800a7f0 <refrigera+0x2bc>
            	goto func_lock_01;
 800a7ee:	46c0      	nop			@ (mov r8, r8)
			wreeprom ( waux,  &eeEstado1);
 800a7f0:	4b29      	ldr	r3, [pc, #164]	@ (800a898 <refrigera+0x364>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	001a      	movs	r2, r3
 800a7f6:	4b3b      	ldr	r3, [pc, #236]	@ (800a8e4 <refrigera+0x3b0>)
 800a7f8:	0019      	movs	r1, r3
 800a7fa:	0010      	movs	r0, r2
 800a7fc:	f7fc fcba 	bl	8007174 <wreeprom>
 800a800:	e000      	b.n	800a804 <refrigera+0x2d0>
            	goto no_Func_Lock;
 800a802:	46c0      	nop			@ (mov r8, r8)
               if(!botonst[b2_f1]){ //btjf botonst,#b2_f1,refrigera_j06c;   / ¿Función primaria del botón lampara?
 800a804:	4b33      	ldr	r3, [pc, #204]	@ (800a8d4 <refrigera+0x3a0>)
 800a806:	789b      	ldrb	r3, [r3, #2]
 800a808:	2201      	movs	r2, #1
 800a80a:	4053      	eors	r3, r2
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d16a      	bne.n	800a8e8 <refrigera+0x3b4>
               cntMsgCmd = 250; //mov cntMsgCmd,#250
 800a812:	4b31      	ldr	r3, [pc, #196]	@ (800a8d8 <refrigera+0x3a4>)
 800a814:	22fa      	movs	r2, #250	@ 0xfa
 800a816:	701a      	strb	r2, [r3, #0]
               numMsg = 2; //mov numMsg,#2
 800a818:	4b30      	ldr	r3, [pc, #192]	@ (800a8dc <refrigera+0x3a8>)
 800a81a:	2202      	movs	r2, #2
 800a81c:	701a      	strb	r2, [r3, #0]
               flagsC[f_lampDoor] ^= 0x1;// BitComplement(flagsC,f_lampDoor);			//	flagsC[f_lampDoor] = 0; //bcpl flagsC,#f_lampDoor
 800a81e:	4b26      	ldr	r3, [pc, #152]	@ (800a8b8 <refrigera+0x384>)
 800a820:	799b      	ldrb	r3, [r3, #6]
 800a822:	2201      	movs	r2, #1
 800a824:	4053      	eors	r3, r2
 800a826:	b2db      	uxtb	r3, r3
 800a828:	1e5a      	subs	r2, r3, #1
 800a82a:	4193      	sbcs	r3, r2
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	4b22      	ldr	r3, [pc, #136]	@ (800a8b8 <refrigera+0x384>)
 800a830:	719a      	strb	r2, [r3, #6]
               waux = findLastValue((uint32_t)&eeEstado1);;
 800a832:	4b2c      	ldr	r3, [pc, #176]	@ (800a8e4 <refrigera+0x3b0>)
 800a834:	0018      	movs	r0, r3
 800a836:	f7f8 f9f1 	bl	8002c1c <findLastValue>
 800a83a:	0003      	movs	r3, r0
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	4b16      	ldr	r3, [pc, #88]	@ (800a898 <refrigera+0x364>)
 800a840:	701a      	strb	r2, [r3, #0]
               BitClear(waux, est1Lamp);//bres waux,#est1Lamp
 800a842:	4b15      	ldr	r3, [pc, #84]	@ (800a898 <refrigera+0x364>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2204      	movs	r2, #4
 800a848:	4393      	bics	r3, r2
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	4b12      	ldr	r3, [pc, #72]	@ (800a898 <refrigera+0x364>)
 800a84e:	701a      	strb	r2, [r3, #0]
               if(!flagsC[f_lampDoor]){ //btjf flagsC,#f_lampDoor,refrigera_j06d;
 800a850:	4b19      	ldr	r3, [pc, #100]	@ (800a8b8 <refrigera+0x384>)
 800a852:	799b      	ldrb	r3, [r3, #6]
 800a854:	2201      	movs	r2, #1
 800a856:	4053      	eors	r3, r2
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d107      	bne.n	800a86e <refrigera+0x33a>
               BitSet(waux, est1Lamp);//bset waux,#est1Lamp
 800a85e:	4b0e      	ldr	r3, [pc, #56]	@ (800a898 <refrigera+0x364>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2204      	movs	r2, #4
 800a864:	4313      	orrs	r3, r2
 800a866:	b2da      	uxtb	r2, r3
 800a868:	4b0b      	ldr	r3, [pc, #44]	@ (800a898 <refrigera+0x364>)
 800a86a:	701a      	strb	r2, [r3, #0]
 800a86c:	e000      	b.n	800a870 <refrigera+0x33c>
            	   goto refrigera_j06d;
 800a86e:	46c0      	nop			@ (mov r8, r8)
				wreeprom ( waux,  &eeEstado1);
 800a870:	4b09      	ldr	r3, [pc, #36]	@ (800a898 <refrigera+0x364>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	001a      	movs	r2, r3
 800a876:	4b1b      	ldr	r3, [pc, #108]	@ (800a8e4 <refrigera+0x3b0>)
 800a878:	0019      	movs	r1, r3
 800a87a:	0010      	movs	r0, r2
 800a87c:	f7fc fc7a 	bl	8007174 <wreeprom>
 800a880:	e033      	b.n	800a8ea <refrigera+0x3b6>
 800a882:	46c0      	nop			@ (mov r8, r8)
 800a884:	20000ba4 	.word	0x20000ba4
 800a888:	20000be0 	.word	0x20000be0
 800a88c:	200000b8 	.word	0x200000b8
 800a890:	20000b55 	.word	0x20000b55
 800a894:	20000c24 	.word	0x20000c24
 800a898:	20000b54 	.word	0x20000b54
 800a89c:	20000c26 	.word	0x20000c26
 800a8a0:	20000c23 	.word	0x20000c23
 800a8a4:	20000c25 	.word	0x20000c25
 800a8a8:	200000b9 	.word	0x200000b9
 800a8ac:	20000bac 	.word	0x20000bac
 800a8b0:	200000bb 	.word	0x200000bb
 800a8b4:	20000bae 	.word	0x20000bae
 800a8b8:	20000c3c 	.word	0x20000c3c
 800a8bc:	200000d3 	.word	0x200000d3
 800a8c0:	200000d5 	.word	0x200000d5
 800a8c4:	20000b98 	.word	0x20000b98
 800a8c8:	20000b90 	.word	0x20000b90
 800a8cc:	20000b6c 	.word	0x20000b6c
 800a8d0:	20000bba 	.word	0x20000bba
 800a8d4:	20000b9c 	.word	0x20000b9c
 800a8d8:	20001064 	.word	0x20001064
 800a8dc:	20001065 	.word	0x20001065
 800a8e0:	20001044 	.word	0x20001044
 800a8e4:	0803f803 	.word	0x0803f803
            	   goto refrigera_j06c;
 800a8e8:	46c0      	nop			@ (mov r8, r8)
                if(flagsC[f_ahorro2]){//btjt flagsC,#f_ahorro2,refrigera_j06;
 800a8ea:	4bd4      	ldr	r3, [pc, #848]	@ (800ac3c <refrigera+0x708>)
 800a8ec:	789b      	ldrb	r3, [r3, #2]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d121      	bne.n	800a936 <refrigera+0x402>
                if(flagsa[nocturno]){//btjt flagsa,#nocturno,refrigera_j06
 800a8f2:	4bd3      	ldr	r3, [pc, #844]	@ (800ac40 <refrigera+0x70c>)
 800a8f4:	78db      	ldrb	r3, [r3, #3]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d11f      	bne.n	800a93a <refrigera+0x406>
                if(!flagsb[f_luzb]){ //btjf flagsb,#f_luzb,refrigera_j06
 800a8fa:	4bd2      	ldr	r3, [pc, #840]	@ (800ac44 <refrigera+0x710>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2201      	movs	r2, #1
 800a900:	4053      	eors	r3, r2
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d11a      	bne.n	800a93e <refrigera+0x40a>
                if(flagsC[f_lampDoor]){//btjt flagsC,#f_lampDoor,refrigera_j06a
 800a908:	4bcc      	ldr	r3, [pc, #816]	@ (800ac3c <refrigera+0x708>)
 800a90a:	799b      	ldrb	r3, [r3, #6]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10b      	bne.n	800a928 <refrigera+0x3f4>
                if(retLampOff != 0){ //tnz retLampOff
 800a910:	4bcd      	ldr	r3, [pc, #820]	@ (800ac48 <refrigera+0x714>)
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d109      	bne.n	800a92c <refrigera+0x3f8>
                if(!flagsC[f_doorOpen]){ //btjf flagsC,#f_doorOpen,refrigera_j06;
 800a918:	4bc8      	ldr	r3, [pc, #800]	@ (800ac3c <refrigera+0x708>)
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2201      	movs	r2, #1
 800a91e:	4053      	eors	r3, r2
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10d      	bne.n	800a942 <refrigera+0x40e>
refrigera_j06a:
 800a926:	e002      	b.n	800a92e <refrigera+0x3fa>
                	goto refrigera_j06a;
 800a928:	46c0      	nop			@ (mov r8, r8)
 800a92a:	e000      	b.n	800a92e <refrigera+0x3fa>
                	goto refrigera_j06a; //jrne	refrigera_j06a
 800a92c:	46c0      	nop			@ (mov r8, r8)
                 GPIOR0[f_lamp] = 1;// bset		GPIOR0,#f_lamp; 	/ No, enciende bandera de activación de lámpara
 800a92e:	4bc7      	ldr	r3, [pc, #796]	@ (800ac4c <refrigera+0x718>)
 800a930:	2201      	movs	r2, #1
 800a932:	709a      	strb	r2, [r3, #2]
 800a934:	e006      	b.n	800a944 <refrigera+0x410>
                	goto refrigera_j06;
 800a936:	46c0      	nop			@ (mov r8, r8)
 800a938:	e004      	b.n	800a944 <refrigera+0x410>
                	goto refrigera_j06;
 800a93a:	46c0      	nop			@ (mov r8, r8)
 800a93c:	e002      	b.n	800a944 <refrigera+0x410>
                	goto refrigera_j06;
 800a93e:	46c0      	nop			@ (mov r8, r8)
 800a940:	e000      	b.n	800a944 <refrigera+0x410>
                	goto refrigera_j06;
 800a942:	46c0      	nop			@ (mov r8, r8)
                if(GetRegFlagState(edorefri, 0)){ //btjt edorefri,#0,refrigera_j07;
 800a944:	4bc2      	ldr	r3, [pc, #776]	@ (800ac50 <refrigera+0x71c>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	001a      	movs	r2, r3
 800a94a:	2301      	movs	r3, #1
 800a94c:	4013      	ands	r3, r2
 800a94e:	d101      	bne.n	800a954 <refrigera+0x420>
 800a950:	f000 fc2c 	bl	800b1ac <refrigera+0xc78>
                	goto refrigera_j07;
 800a954:	46c0      	nop			@ (mov r8, r8)
refrigera_j07:	goto autodesh;					//jp			autodesh;		/ edorefri = 3; Estado de deshielo de modo automático
 800a956:	46c0      	nop			@ (mov r8, r8)
control_j07:

finctl:       	 goto finref;
//;--------------------------------------------------------------------------------------------------
autodesh:
				Bset_Clear_trfst(datled, datled,3,luzF);
 800a958:	49be      	ldr	r1, [pc, #760]	@ (800ac54 <refrigera+0x720>)
 800a95a:	48be      	ldr	r0, [pc, #760]	@ (800ac54 <refrigera+0x720>)
 800a95c:	2307      	movs	r3, #7
 800a95e:	2203      	movs	r2, #3
 800a960:	f002 fae0 	bl	800cf24 <Bset_Clear_trfst>
//				BitSet(datled,3);				//bset datled,#3					bset		datled,#3;0x08;	/ Enciende la luz de deshielo
//				BitClear(datled,luzF);			//bres datled,#luzF

				////ld A,numSens
				if(Plantilla[numSens] == 1){
 800a964:	4bbc      	ldr	r3, [pc, #752]	@ (800ac58 <refrigera+0x724>)
 800a966:	2259      	movs	r2, #89	@ 0x59
 800a968:	5c9b      	ldrb	r3, [r3, r2]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d001      	beq.n	800a972 <refrigera+0x43e>
 800a96e:	f000 fe59 	bl	800b624 <refrigera+0x10f0>
					goto deshXvent;				/// Si el número de sensores con el que trabaja es 1, el deshielo siempre es por ventilador (o natural)
 800a972:	f000 fe67 	bl	800b644 <refrigera+0x1110>
				cntblkh = 0;					//;		/ Inicia el contador de parpadeos
 800a976:	4bb9      	ldr	r3, [pc, #740]	@ (800ac5c <refrigera+0x728>)
 800a978:	2200      	movs	r2, #0
 800a97a:	801a      	strh	r2, [r3, #0]
				goto finref;
 800a97c:	e05b      	b.n	800aa36 <refrigera+0x502>
					//ld			A,#$13;
					//and			A,modo;
				 if((0x13 & modo ) == 0){
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
				 }
				 goto toctl_0;					//jp			toctl_0;			/ Cambia al estado de control
 800a97e:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [dripposd];
 800a980:	4bb5      	ldr	r3, [pc, #724]	@ (800ac58 <refrigera+0x724>)
 800a982:	2264      	movs	r2, #100	@ 0x64
 800a984:	5c9a      	ldrb	r2, [r3, r2]
 800a986:	4bb6      	ldr	r3, [pc, #728]	@ (800ac60 <refrigera+0x72c>)
 800a988:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();			//call BaBentre10_math
 800a98a:	f7fb fdb1 	bl	80064f0 <BaBentre10_math>
				drp_comph = (uint16_t)(waux * 60);
 800a98e:	4bb5      	ldr	r3, [pc, #724]	@ (800ac64 <refrigera+0x730>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	001a      	movs	r2, r3
 800a994:	233c      	movs	r3, #60	@ 0x3c
 800a996:	4353      	muls	r3, r2
 800a998:	b29a      	uxth	r2, r3
 800a99a:	4bb3      	ldr	r3, [pc, #716]	@ (800ac68 <refrigera+0x734>)
 800a99c:	801a      	strh	r2, [r3, #0]
				drp_fanh = (uint16_t)(wreg * 60);
 800a99e:	4bb0      	ldr	r3, [pc, #704]	@ (800ac60 <refrigera+0x72c>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	001a      	movs	r2, r3
 800a9a4:	233c      	movs	r3, #60	@ 0x3c
 800a9a6:	4353      	muls	r3, r2
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	4bb0      	ldr	r3, [pc, #704]	@ (800ac6c <refrigera+0x738>)
 800a9ac:	801a      	strh	r2, [r3, #0]
		 	 	 minbrake_load();				// call minbrake_load
 800a9ae:	f7fb fbf7 	bl	80061a0 <minbrake_load>
		 	 	 edorefri = 0x02;				// Carga el estado de Control
 800a9b2:	4ba7      	ldr	r3, [pc, #668]	@ (800ac50 <refrigera+0x71c>)
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	701a      	strb	r2, [r3, #0]
		 	 	 goto todh20;
 800a9b8:	e03a      	b.n	800aa30 <refrigera+0x4fc>
				retvent = 20;
 800a9ba:	4bad      	ldr	r3, [pc, #692]	@ (800ac70 <refrigera+0x73c>)
 800a9bc:	2214      	movs	r2, #20
 800a9be:	701a      	strb	r2, [r3, #0]
				tminstoph = (0*256) + 50;			//;/ Carga el tiempo mínimo de descanso del compresor
 800a9c0:	4bac      	ldr	r3, [pc, #688]	@ (800ac74 <refrigera+0x740>)
 800a9c2:	2232      	movs	r2, #50	@ 0x32
 800a9c4:	801a      	strh	r2, [r3, #0]
				edorefri = 0x02;				// Carga el estado de Control
 800a9c6:	4ba2      	ldr	r3, [pc, #648]	@ (800ac50 <refrigera+0x71c>)
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	701a      	strb	r2, [r3, #0]
				goto todh20;
 800a9cc:	e030      	b.n	800aa30 <refrigera+0x4fc>
                  goto todh; //jp todh
 800a9ce:	46c0      	nop			@ (mov r8, r8)
 800a9d0:	e000      	b.n	800a9d4 <refrigera+0x4a0>
				goto todh; //jp			todh;			/ Si, cambia al estado de deshielo automático
 800a9d2:	46c0      	nop			@ (mov r8, r8)
todh:      		cntdpyev = 0;									// Cancela el desplegado de Tevaporador
 800a9d4:	4ba8      	ldr	r3, [pc, #672]	@ (800ac78 <refrigera+0x744>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	701a      	strb	r2, [r3, #0]
				ldadaptivo();	//call ldadaptivo				// Carga tiempo total de interdeshielo en segundos
 800a9da:	f7fb fb71 	bl	80060c0 <ldadaptivo>
				wreg = Plantilla [timedh];//ld	A,dhmode;		// Toma el tiempo de duración del deshielo en minutos
 800a9de:	4b9e      	ldr	r3, [pc, #632]	@ (800ac58 <refrigera+0x724>)
 800a9e0:	2247      	movs	r2, #71	@ 0x47
 800a9e2:	5c9a      	ldrb	r2, [r3, r2]
 800a9e4:	4b9e      	ldr	r3, [pc, #632]	@ (800ac60 <refrigera+0x72c>)
 800a9e6:	701a      	strb	r2, [r3, #0]
				if(Plantilla [dhmode] != 0x01 ){//cp A,#$01;		/// ¿Deshielo por gas caliente?
 800a9e8:	4b9b      	ldr	r3, [pc, #620]	@ (800ac58 <refrigera+0x724>)
 800a9ea:	2255      	movs	r2, #85	@ 0x55
 800a9ec:	5c9b      	ldrb	r3, [r3, r2]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d102      	bne.n	800a9f8 <refrigera+0x4c4>
				BaBentre10_math();					//call BaBentre10_math
 800a9f2:	f7fb fd7d 	bl	80064f0 <BaBentre10_math>
				goto todh2;
 800a9f6:	e014      	b.n	800aa22 <refrigera+0x4ee>
					goto todh1;
 800a9f8:	46c0      	nop			@ (mov r8, r8)
todh1:			STM8_16_X =  wreg * 60;			//Plantilla [timedh] *  Número de segundos por minuto
 800a9fa:	4b99      	ldr	r3, [pc, #612]	@ (800ac60 <refrigera+0x72c>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	001a      	movs	r2, r3
 800aa00:	233c      	movs	r3, #60	@ 0x3c
 800aa02:	4353      	muls	r3, r2
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	4b9d      	ldr	r3, [pc, #628]	@ (800ac7c <refrigera+0x748>)
 800aa08:	801a      	strh	r2, [r3, #0]
				resulh = highByte(STM8_16_X);
 800aa0a:	4b9c      	ldr	r3, [pc, #624]	@ (800ac7c <refrigera+0x748>)
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	0a1b      	lsrs	r3, r3, #8
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	4b9a      	ldr	r3, [pc, #616]	@ (800ac80 <refrigera+0x74c>)
 800aa16:	701a      	strb	r2, [r3, #0]
				resull = lowByte(STM8_16_X);		//ldw     resulh,X
 800aa18:	4b98      	ldr	r3, [pc, #608]	@ (800ac7c <refrigera+0x748>)
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	4b99      	ldr	r3, [pc, #612]	@ (800ac84 <refrigera+0x750>)
 800aa20:	701a      	strb	r2, [r3, #0]
				durdhh = (resulh*256) + resull;
 800aa22:	4b98      	ldr	r3, [pc, #608]	@ (800ac84 <refrigera+0x750>)
 800aa24:	781a      	ldrb	r2, [r3, #0]
 800aa26:	4b98      	ldr	r3, [pc, #608]	@ (800ac88 <refrigera+0x754>)
 800aa28:	701a      	strb	r2, [r3, #0]
				edorefri = 0x03;						//;	/ Carga el estado de Autodeshielo
 800aa2a:	4b89      	ldr	r3, [pc, #548]	@ (800ac50 <refrigera+0x71c>)
 800aa2c:	2203      	movs	r2, #3
 800aa2e:	701a      	strb	r2, [r3, #0]
todh20:    	 	minfunc = 0x04;						/// 4 segundos de función activa como mínimo
 800aa30:	4b96      	ldr	r3, [pc, #600]	@ (800ac8c <refrigera+0x758>)
 800aa32:	2204      	movs	r2, #4
 800aa34:	701a      	strb	r2, [r3, #0]
                if(GPIOR0[f_comp]){
 800aa36:	4b85      	ldr	r3, [pc, #532]	@ (800ac4c <refrigera+0x718>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d103      	bne.n	800aa46 <refrigera+0x512>
				datled[luzC] = 0; 		// bres		datled,#luzC; / Apaga LED de compresor
 800aa3e:	4b85      	ldr	r3, [pc, #532]	@ (800ac54 <refrigera+0x720>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	709a      	strb	r2, [r3, #2]
 800aa44:	e000      	b.n	800aa48 <refrigera+0x514>
                	goto refrigera_j11;
 800aa46:	46c0      	nop			@ (mov r8, r8)
				estado1_Aux = findLastValue((uint32_t)&eeEstado1);
 800aa48:	4b91      	ldr	r3, [pc, #580]	@ (800ac90 <refrigera+0x75c>)
 800aa4a:	0018      	movs	r0, r3
 800aa4c:	f7f8 f8e6 	bl	8002c1c <findLastValue>
 800aa50:	0002      	movs	r2, r0
 800aa52:	1dfb      	adds	r3, r7, #7
 800aa54:	701a      	strb	r2, [r3, #0]
                if(!GetRegFlagState(estado1_Aux,est1LockDr)){ //btjf eeEstado1,#est1LockDr,refrigeraLockDrOFF
 800aa56:	1dfb      	adds	r3, r7, #7
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2240      	movs	r2, #64	@ 0x40
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	d003      	beq.n	800aa68 <refrigera+0x534>
                GPIOR0[f_dh] = 1; 			//bset		GPIOR0,#f_dh
 800aa60:	4b7a      	ldr	r3, [pc, #488]	@ (800ac4c <refrigera+0x718>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	705a      	strb	r2, [r3, #1]
 800aa66:	e000      	b.n	800aa6a <refrigera+0x536>
                	goto refrigeraLockDrOFF;
 800aa68:	46c0      	nop			@ (mov r8, r8)
               if(cntNoct_H == 0){//ld A,cntNoct_H;  or A,cntNoct_L;		/ terminó el tiempo de Nocturno?
 800aa6a:	4b8a      	ldr	r3, [pc, #552]	@ (800ac94 <refrigera+0x760>)
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00f      	beq.n	800aa92 <refrigera+0x55e>
               GPIOR0[f_comp] = 0;				//bres		GPIOR0,#f_comp
 800aa72:	4b76      	ldr	r3, [pc, #472]	@ (800ac4c <refrigera+0x718>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
               GPIOR0[f_dh] = 0;				//bres		GPIOR0,#f_dh
 800aa78:	4b74      	ldr	r3, [pc, #464]	@ (800ac4c <refrigera+0x718>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	705a      	strb	r2, [r3, #1]
               GPIOR1[f_fan] = 0;					//;manten las cargas apagadas
 800aa7e:	4b86      	ldr	r3, [pc, #536]	@ (800ac98 <refrigera+0x764>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
               Bclear_Clear_trfst(datled, datled,luzC, luzF);
 800aa84:	4973      	ldr	r1, [pc, #460]	@ (800ac54 <refrigera+0x720>)
 800aa86:	4873      	ldr	r0, [pc, #460]	@ (800ac54 <refrigera+0x720>)
 800aa88:	2307      	movs	r3, #7
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	f002 fa65 	bl	800cf5a <Bclear_Clear_trfst>
               goto endNoct;
 800aa90:	e01b      	b.n	800aaca <refrigera+0x596>
            	   goto endNocturno;
 800aa92:	46c0      	nop			@ (mov r8, r8)
              if(!flagsa[nocturno]){ //btjf flagsa,#nocturno,endNoct
 800aa94:	4b6a      	ldr	r3, [pc, #424]	@ (800ac40 <refrigera+0x70c>)
 800aa96:	78db      	ldrb	r3, [r3, #3]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	4053      	eors	r3, r2
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d112      	bne.n	800aac8 <refrigera+0x594>
              Bset_Clear_trfst(flagsb,flagsa,f_luzb, 3);
 800aaa2:	4967      	ldr	r1, [pc, #412]	@ (800ac40 <refrigera+0x70c>)
 800aaa4:	4867      	ldr	r0, [pc, #412]	@ (800ac44 <refrigera+0x710>)
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f002 fa3b 	bl	800cf24 <Bset_Clear_trfst>
              Bset_Clear_trfst(flagsC,datled,f_ahorro1, 4);
 800aaae:	4969      	ldr	r1, [pc, #420]	@ (800ac54 <refrigera+0x720>)
 800aab0:	4862      	ldr	r0, [pc, #392]	@ (800ac3c <refrigera+0x708>)
 800aab2:	2304      	movs	r3, #4
 800aab4:	2201      	movs	r2, #1
 800aab6:	f002 fa35 	bl	800cf24 <Bset_Clear_trfst>
              t_ahorro1_H = 0;
 800aaba:	4b78      	ldr	r3, [pc, #480]	@ (800ac9c <refrigera+0x768>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	801a      	strh	r2, [r3, #0]
              t_ahorro2_H = 0;						//;			/ provoca entrada a modo ahorro2
 800aac0:	4b77      	ldr	r3, [pc, #476]	@ (800aca0 <refrigera+0x76c>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	801a      	strh	r2, [r3, #0]
 800aac6:	e000      	b.n	800aaca <refrigera+0x596>
            	  goto endNoct;
 800aac8:	46c0      	nop			@ (mov r8, r8)
			estado1_Aux = findLastValue((uint32_t)&eeEstado1);
 800aaca:	4b71      	ldr	r3, [pc, #452]	@ (800ac90 <refrigera+0x75c>)
 800aacc:	0018      	movs	r0, r3
 800aace:	f7f8 f8a5 	bl	8002c1c <findLastValue>
 800aad2:	0002      	movs	r2, r0
 800aad4:	1dfb      	adds	r3, r7, #7
 800aad6:	701a      	strb	r2, [r3, #0]
			if(GetRegFlagState (estado1_Aux, est1Refri)){ //btjt eeEstado1,#est1Refri,refriON
 800aad8:	1dfb      	adds	r3, r7, #7
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2201      	movs	r2, #1
 800aade:	4013      	ands	r3, r2
 800aae0:	d118      	bne.n	800ab14 <refrigera+0x5e0>
refriOFF:
 800aae2:	46c0      	nop			@ (mov r8, r8)
		   st_refri();
 800aae4:	f000 fe22 	bl	800b72c <st_refri>
           for(uint8_t k=0; k<8; k++){
 800aae8:	2312      	movs	r3, #18
 800aaea:	18fb      	adds	r3, r7, r3
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e00a      	b.n	800ab08 <refrigera+0x5d4>
        	   datled[k] = 0;
 800aaf2:	2012      	movs	r0, #18
 800aaf4:	183b      	adds	r3, r7, r0
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	4a56      	ldr	r2, [pc, #344]	@ (800ac54 <refrigera+0x720>)
 800aafa:	2100      	movs	r1, #0
 800aafc:	54d1      	strb	r1, [r2, r3]
           for(uint8_t k=0; k<8; k++){
 800aafe:	183b      	adds	r3, r7, r0
 800ab00:	781a      	ldrb	r2, [r3, #0]
 800ab02:	183b      	adds	r3, r7, r0
 800ab04:	3201      	adds	r2, #1
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	2312      	movs	r3, #18
 800ab0a:	18fb      	adds	r3, r7, r3
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	d9ef      	bls.n	800aaf2 <refrigera+0x5be>
refriON:
 800ab12:	e000      	b.n	800ab16 <refrigera+0x5e2>
            	 goto refriON;
 800ab14:	46c0      	nop			@ (mov r8, r8)
         if(!flagsBattery[batON]){//btjf flagsBattery,#batON,ac_OK
 800ab16:	4b63      	ldr	r3, [pc, #396]	@ (800aca4 <refrigera+0x770>)
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	4053      	eors	r3, r2
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d109      	bne.n	800ab38 <refrigera+0x604>
         st_refri();
 800ab24:	f000 fe02 	bl	800b72c <st_refri>
         timeRstBLE = 1;					// manten modulo wifi en reset
 800ab28:	4b5f      	ldr	r3, [pc, #380]	@ (800aca8 <refrigera+0x774>)
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	701a      	strb	r2, [r3, #0]
         flagsC[f_spReached] = 1; 			///bset	flagsC,#f_spReached; / indica que el setpoint fue alcanzado para permitir fallas de temperatura
 800ab2e:	4b43      	ldr	r3, [pc, #268]	@ (800ac3c <refrigera+0x708>)
 800ab30:	2201      	movs	r2, #1
 800ab32:	71da      	strb	r2, [r3, #7]
         goto main_refrigera;
 800ab34:	f000 fdbc 	bl	800b6b0 <refrigera+0x117c>
        	 goto ac_OK;
 800ab38:	46c0      	nop			@ (mov r8, r8)
         goto main_refrigera;
 800ab3a:	f000 fdb9 	bl	800b6b0 <refrigera+0x117c>
            	goto	indica;			//jp			indica;			/ edorefri = 0; Indicación de los parámetros de operación
 800ab3e:	46c0      	nop			@ (mov r8, r8)
          fauto[3] = 0; 	//bres fauto,#3
 800ab40:	4b5a      	ldr	r3, [pc, #360]	@ (800acac <refrigera+0x778>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	70da      	strb	r2, [r3, #3]
          Load_ret1();			// Carga el retardo para entrar a nocturno con luz.
 800ab46:	f7fb faa1 	bl	800608c <Load_ret1>
          Load_ret2();			// Carga retardo de tiempo permitido con puerta abierta.
 800ab4a:	f7fb faa7 	bl	800609c <Load_ret2>
          Bclear_Clear_trfst(trefst, trefst,6, 7);
 800ab4e:	4958      	ldr	r1, [pc, #352]	@ (800acb0 <refrigera+0x77c>)
 800ab50:	4857      	ldr	r0, [pc, #348]	@ (800acb0 <refrigera+0x77c>)
 800ab52:	2307      	movs	r3, #7
 800ab54:	2206      	movs	r2, #6
 800ab56:	f002 fa00 	bl	800cf5a <Bclear_Clear_trfst>
          cntobscu = 0x02;		// Carga el contador de tiempo de obscuridad con 2 segundos
 800ab5a:	4b56      	ldr	r3, [pc, #344]	@ (800acb4 <refrigera+0x780>)
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	701a      	strb	r2, [r3, #0]
          wreg = 0x05;
 800ab60:	4b3f      	ldr	r3, [pc, #252]	@ (800ac60 <refrigera+0x72c>)
 800ab62:	2205      	movs	r2, #5
 800ab64:	701a      	strb	r2, [r3, #0]
          if(!(fauto[6])){ //btjf fauto,#6,no_change_time
 800ab66:	4b51      	ldr	r3, [pc, #324]	@ (800acac <refrigera+0x778>)
 800ab68:	799b      	ldrb	r3, [r3, #6]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4053      	eors	r3, r2
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <refrigera+0x648>
          wreg = 0x01;
 800ab74:	4b3a      	ldr	r3, [pc, #232]	@ (800ac60 <refrigera+0x72c>)
 800ab76:	2201      	movs	r2, #1
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	e000      	b.n	800ab7e <refrigera+0x64a>
        	  goto no_change_time;
 800ab7c:	46c0      	nop			@ (mov r8, r8)
			retvent = wreg;				//mov			retvent,wreg;	/ Carga el retardo de encendido del ventilador con 5 segundos
 800ab7e:	4b38      	ldr	r3, [pc, #224]	@ (800ac60 <refrigera+0x72c>)
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	4b3b      	ldr	r3, [pc, #236]	@ (800ac70 <refrigera+0x73c>)
 800ab84:	701a      	strb	r2, [r3, #0]
			interdhh = (uint16_t)wreg;			//mov			interdhl,wreg;	/ Carga 5 segundos para pasar a deshielo
 800ab86:	4b36      	ldr	r3, [pc, #216]	@ (800ac60 <refrigera+0x72c>)
 800ab88:	781a      	ldrb	r2, [r3, #0]
 800ab8a:	4b4b      	ldr	r3, [pc, #300]	@ (800acb8 <refrigera+0x784>)
 800ab8c:	701a      	strb	r2, [r3, #0]
			blink_640();				//call blink_640			/// En wreg quedan los múltiplos de 640 ms
 800ab8e:	f7fb fab7 	bl	8006100 <blink_640>
			if(cntblkh < 100){//cpw X,#100
 800ab92:	4b32      	ldr	r3, [pc, #200]	@ (800ac5c <refrigera+0x728>)
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	2b63      	cmp	r3, #99	@ 0x63
 800ab98:	d929      	bls.n	800abee <refrigera+0x6ba>
			if(cntblkh <= 250){
 800ab9a:	4b30      	ldr	r3, [pc, #192]	@ (800ac5c <refrigera+0x728>)
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	2bfa      	cmp	r3, #250	@ 0xfa
 800aba0:	d92d      	bls.n	800abfe <refrigera+0x6ca>
			if(cntblkh < 300){
 800aba2:	4b2e      	ldr	r3, [pc, #184]	@ (800ac5c <refrigera+0x728>)
 800aba4:	881a      	ldrh	r2, [r3, #0]
 800aba6:	2396      	movs	r3, #150	@ 0x96
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	429a      	cmp	r2, r3
 800abac:	d321      	bcc.n	800abf2 <refrigera+0x6be>
			if(cntblkh < 450){
 800abae:	4b2b      	ldr	r3, [pc, #172]	@ (800ac5c <refrigera+0x728>)
 800abb0:	881a      	ldrh	r2, [r3, #0]
 800abb2:	23e1      	movs	r3, #225	@ 0xe1
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d200      	bcs.n	800abbc <refrigera+0x688>
 800abba:	e09a      	b.n	800acf2 <refrigera+0x7be>
			if(cntblkh < 500){
 800abbc:	4b27      	ldr	r3, [pc, #156]	@ (800ac5c <refrigera+0x728>)
 800abbe:	881a      	ldrh	r2, [r3, #0]
 800abc0:	23fa      	movs	r3, #250	@ 0xfa
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d316      	bcc.n	800abf6 <refrigera+0x6c2>
			if(cntblkh < 650){
 800abc8:	4b24      	ldr	r3, [pc, #144]	@ (800ac5c <refrigera+0x728>)
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	4a3b      	ldr	r2, [pc, #236]	@ (800acbc <refrigera+0x788>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d800      	bhi.n	800abd4 <refrigera+0x6a0>
 800abd2:	e0ec      	b.n	800adae <refrigera+0x87a>
			if(cntblkh < 700){
 800abd4:	4b21      	ldr	r3, [pc, #132]	@ (800ac5c <refrigera+0x728>)
 800abd6:	881a      	ldrh	r2, [r3, #0]
 800abd8:	23af      	movs	r3, #175	@ 0xaf
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	429a      	cmp	r2, r3
 800abde:	d30c      	bcc.n	800abfa <refrigera+0x6c6>
			if(cntblkh < 850){
 800abe0:	4b1e      	ldr	r3, [pc, #120]	@ (800ac5c <refrigera+0x728>)
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	4a36      	ldr	r2, [pc, #216]	@ (800acc0 <refrigera+0x78c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d800      	bhi.n	800abec <refrigera+0x6b8>
 800abea:	e0fe      	b.n	800adea <refrigera+0x8b6>
indi_off:
 800abec:	e006      	b.n	800abfc <refrigera+0x6c8>
				goto indi_off; //jrult	indi_off
 800abee:	46c0      	nop			@ (mov r8, r8)
 800abf0:	e119      	b.n	800ae26 <refrigera+0x8f2>
				goto indi_off; //rult indi_off
 800abf2:	46c0      	nop			@ (mov r8, r8)
 800abf4:	e117      	b.n	800ae26 <refrigera+0x8f2>
				goto indi_off; //rult indi_off
 800abf6:	46c0      	nop			@ (mov r8, r8)
 800abf8:	e115      	b.n	800ae26 <refrigera+0x8f2>
				goto indi_off; //rult indi_off
 800abfa:	46c0      	nop			@ (mov r8, r8)
           goto defindi;
 800abfc:	e113      	b.n	800ae26 <refrigera+0x8f2>
				goto Indi_int; //jrule	Indi_int
 800abfe:	46c0      	nop			@ (mov r8, r8)
			soloent (findLastValue((uint32_t) &eePlantilla[interdh]));
 800ac00:	4b30      	ldr	r3, [pc, #192]	@ (800acc4 <refrigera+0x790>)
 800ac02:	0018      	movs	r0, r3
 800ac04:	f7f8 f80a 	bl	8002c1c <findLastValue>
 800ac08:	0003      	movs	r3, r0
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	f7fb fc3e 	bl	800648c <soloent>
			op_menu (findLastValue((uint32_t) &eePlantilla[eeD1_Msg1]) , findLastValue((uint32_t) &eePlantilla[eeD2_Msg1]));
 800ac10:	4b2d      	ldr	r3, [pc, #180]	@ (800acc8 <refrigera+0x794>)
 800ac12:	0018      	movs	r0, r3
 800ac14:	f7f8 f802 	bl	8002c1c <findLastValue>
 800ac18:	0003      	movs	r3, r0
 800ac1a:	b2dc      	uxtb	r4, r3
 800ac1c:	4b2b      	ldr	r3, [pc, #172]	@ (800accc <refrigera+0x798>)
 800ac1e:	0018      	movs	r0, r3
 800ac20:	f7f7 fffc 	bl	8002c1c <findLastValue>
 800ac24:	0003      	movs	r3, r0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	0019      	movs	r1, r3
 800ac2a:	0020      	movs	r0, r4
 800ac2c:	f7fc fab6 	bl	800719c <op_menu>
             for(uint8_t k=0; k<8; k++){
 800ac30:	2311      	movs	r3, #17
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	2200      	movs	r2, #0
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	e055      	b.n	800ace6 <refrigera+0x7b2>
 800ac3a:	46c0      	nop			@ (mov r8, r8)
 800ac3c:	20000c3c 	.word	0x20000c3c
 800ac40:	20000b78 	.word	0x20000b78
 800ac44:	20000be8 	.word	0x20000be8
 800ac48:	20001066 	.word	0x20001066
 800ac4c:	20000ba4 	.word	0x20000ba4
 800ac50:	20000b98 	.word	0x20000b98
 800ac54:	20000b90 	.word	0x20000b90
 800ac58:	200000b8 	.word	0x200000b8
 800ac5c:	20000b4c 	.word	0x20000b4c
 800ac60:	20000b55 	.word	0x20000b55
 800ac64:	20000b54 	.word	0x20000b54
 800ac68:	20000bfa 	.word	0x20000bfa
 800ac6c:	20000bfc 	.word	0x20000bfc
 800ac70:	20000b6a 	.word	0x20000b6a
 800ac74:	20000b62 	.word	0x20000b62
 800ac78:	20000b6d 	.word	0x20000b6d
 800ac7c:	200008d2 	.word	0x200008d2
 800ac80:	20000b47 	.word	0x20000b47
 800ac84:	20000b48 	.word	0x20000b48
 800ac88:	20000bb8 	.word	0x20000bb8
 800ac8c:	20000b6b 	.word	0x20000b6b
 800ac90:	0803f803 	.word	0x0803f803
 800ac94:	20000c44 	.word	0x20000c44
 800ac98:	20000be0 	.word	0x20000be0
 800ac9c:	20000c30 	.word	0x20000c30
 800aca0:	20000c32 	.word	0x20000c32
 800aca4:	200010a8 	.word	0x200010a8
 800aca8:	20000ee8 	.word	0x20000ee8
 800acac:	20000bd8 	.word	0x20000bd8
 800acb0:	20000b88 	.word	0x20000b88
 800acb4:	20000b6e 	.word	0x20000b6e
 800acb8:	20000bb6 	.word	0x20000bb6
 800acbc:	00000289 	.word	0x00000289
 800acc0:	00000351 	.word	0x00000351
 800acc4:	0803f046 	.word	0x0803f046
 800acc8:	0803f05f 	.word	0x0803f05f
 800accc:	0803f060 	.word	0x0803f060
            	 datled[k] = 0;
 800acd0:	2011      	movs	r0, #17
 800acd2:	183b      	adds	r3, r7, r0
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	4ac3      	ldr	r2, [pc, #780]	@ (800afe4 <refrigera+0xab0>)
 800acd8:	2100      	movs	r1, #0
 800acda:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800acdc:	183b      	adds	r3, r7, r0
 800acde:	781a      	ldrb	r2, [r3, #0]
 800ace0:	183b      	adds	r3, r7, r0
 800ace2:	3201      	adds	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	2311      	movs	r3, #17
 800ace8:	18fb      	adds	r3, r7, r3
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b07      	cmp	r3, #7
 800acee:	d9ef      	bls.n	800acd0 <refrigera+0x79c>
             goto defindi;
 800acf0:	e099      	b.n	800ae26 <refrigera+0x8f2>
				goto Indi_time;//rult Indi_time
 800acf2:	46c0      	nop			@ (mov r8, r8)
            if(findLastValue((uint32_t) &eePlantilla[dhmode]) != 1){
 800acf4:	4bbc      	ldr	r3, [pc, #752]	@ (800afe8 <refrigera+0xab4>)
 800acf6:	0018      	movs	r0, r3
 800acf8:	f7f7 ff90 	bl	8002c1c <findLastValue>
 800acfc:	0003      	movs	r3, r0
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d10b      	bne.n	800ad1a <refrigera+0x7e6>
            soloent( findLastValue((uint32_t) &eePlantilla[timedh]) );
 800ad02:	4bba      	ldr	r3, [pc, #744]	@ (800afec <refrigera+0xab8>)
 800ad04:	0018      	movs	r0, r3
 800ad06:	f7f7 ff89 	bl	8002c1c <findLastValue>
 800ad0a:	0003      	movs	r3, r0
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	f7fb fbbd 	bl	800648c <soloent>
            datled[dp] = 1;					//;	/ Enciende el punto
 800ad12:	4bb4      	ldr	r3, [pc, #720]	@ (800afe4 <refrigera+0xab0>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	701a      	strb	r2, [r3, #0]
            goto defindi;
 800ad18:	e085      	b.n	800ae26 <refrigera+0x8f2>
				goto indica45;
 800ad1a:	46c0      	nop			@ (mov r8, r8)
            convad10(Plantilla[timedh]);			//call convad10
 800ad1c:	4bb4      	ldr	r3, [pc, #720]	@ (800aff0 <refrigera+0xabc>)
 800ad1e:	2247      	movs	r2, #71	@ 0x47
 800ad20:	5c9b      	ldrb	r3, [r3, r2]
 800ad22:	0018      	movs	r0, r3
 800ad24:	f7fb fb7c 	bl	8006420 <convad10>
            if(findLastValue((uint32_t) &eePlantilla[eeprotype])){
 800ad28:	4bb2      	ldr	r3, [pc, #712]	@ (800aff4 <refrigera+0xac0>)
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f7f7 ff76 	bl	8002c1c <findLastValue>
 800ad30:	1e03      	subs	r3, r0, #0
 800ad32:	d10e      	bne.n	800ad52 <refrigera+0x81e>
            if(findLastValue((uint32_t) &eePlantilla[eeprotype]) == 2){
 800ad34:	4baf      	ldr	r3, [pc, #700]	@ (800aff4 <refrigera+0xac0>)
 800ad36:	0018      	movs	r0, r3
 800ad38:	f7f7 ff70 	bl	8002c1c <findLastValue>
 800ad3c:	0003      	movs	r3, r0
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d00f      	beq.n	800ad62 <refrigera+0x82e>
indica_na:
 800ad42:	46c0      	nop			@ (mov r8, r8)
            wreg = 0x26;				//"-"
 800ad44:	4bac      	ldr	r3, [pc, #688]	@ (800aff8 <refrigera+0xac4>)
 800ad46:	2226      	movs	r2, #38	@ 0x26
 800ad48:	701a      	strb	r2, [r3, #0]
            waux = 0x26;				//"-"
 800ad4a:	4bac      	ldr	r3, [pc, #688]	@ (800affc <refrigera+0xac8>)
 800ad4c:	2226      	movs	r2, #38	@ 0x26
 800ad4e:	701a      	strb	r2, [r3, #0]
            goto indica_volt;
 800ad50:	e00f      	b.n	800ad72 <refrigera+0x83e>
            	goto indica_110v; //jreq indica_110v
 800ad52:	46c0      	nop			@ (mov r8, r8)
             wreg = 0x1F;				//" "
 800ad54:	4ba8      	ldr	r3, [pc, #672]	@ (800aff8 <refrigera+0xac4>)
 800ad56:	221f      	movs	r2, #31
 800ad58:	701a      	strb	r2, [r3, #0]
             waux = 0x0B;				//"b"
 800ad5a:	4ba8      	ldr	r3, [pc, #672]	@ (800affc <refrigera+0xac8>)
 800ad5c:	220b      	movs	r2, #11
 800ad5e:	701a      	strb	r2, [r3, #0]
             goto indica_volt;
 800ad60:	e007      	b.n	800ad72 <refrigera+0x83e>
            	goto indica_220v; //jreq indica_220v
 800ad62:	46c0      	nop			@ (mov r8, r8)
              wreg = 0x1F;				//" "
 800ad64:	4ba4      	ldr	r3, [pc, #656]	@ (800aff8 <refrigera+0xac4>)
 800ad66:	221f      	movs	r2, #31
 800ad68:	701a      	strb	r2, [r3, #0]
              waux = 0x0A;				//"A"
 800ad6a:	4ba4      	ldr	r3, [pc, #656]	@ (800affc <refrigera+0xac8>)
 800ad6c:	220a      	movs	r2, #10
 800ad6e:	701a      	strb	r2, [r3, #0]
              goto indica_volt;
 800ad70:	46c0      	nop			@ (mov r8, r8)
			 op_menu (wreg, waux);
 800ad72:	4ba1      	ldr	r3, [pc, #644]	@ (800aff8 <refrigera+0xac4>)
 800ad74:	781a      	ldrb	r2, [r3, #0]
 800ad76:	4ba1      	ldr	r3, [pc, #644]	@ (800affc <refrigera+0xac8>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	0019      	movs	r1, r3
 800ad7c:	0010      	movs	r0, r2
 800ad7e:	f7fc fa0d 	bl	800719c <op_menu>
             for(uint8_t k=0; k<8; k++){
 800ad82:	2310      	movs	r3, #16
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e00a      	b.n	800ada2 <refrigera+0x86e>
            	 datled[k] = 0;
 800ad8c:	2010      	movs	r0, #16
 800ad8e:	183b      	adds	r3, r7, r0
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	4a94      	ldr	r2, [pc, #592]	@ (800afe4 <refrigera+0xab0>)
 800ad94:	2100      	movs	r1, #0
 800ad96:	54d1      	strb	r1, [r2, r3]
             for(uint8_t k=0; k<8; k++){
 800ad98:	183b      	adds	r3, r7, r0
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	183b      	adds	r3, r7, r0
 800ad9e:	3201      	adds	r2, #1
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	2310      	movs	r3, #16
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b07      	cmp	r3, #7
 800adaa:	d9ef      	bls.n	800ad8c <refrigera+0x858>
             goto defindi;
 800adac:	e03b      	b.n	800ae26 <refrigera+0x8f2>
				goto Indi_sp; //rult Indi_sp
 800adae:	46c0      	nop			@ (mov r8, r8)
Indi_sp:    sp_dpy();					//call sp_dpy				/ Despliega el Set Point que esta operando
 800adb0:	f7fb f9d0 	bl	8006154 <sp_dpy>
			soloent(versionFirm1);		//call soloent
 800adb4:	4b92      	ldr	r3, [pc, #584]	@ (800b000 <refrigera+0xacc>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	0018      	movs	r0, r3
 800adba:	f7fb fb67 	bl	800648c <soloent>
			for(uint8_t k=0; k<8; k++){
 800adbe:	230f      	movs	r3, #15
 800adc0:	18fb      	adds	r3, r7, r3
 800adc2:	2200      	movs	r2, #0
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	e00a      	b.n	800adde <refrigera+0x8aa>
				datled[k] = 0;
 800adc8:	200f      	movs	r0, #15
 800adca:	183b      	adds	r3, r7, r0
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	4a85      	ldr	r2, [pc, #532]	@ (800afe4 <refrigera+0xab0>)
 800add0:	2100      	movs	r1, #0
 800add2:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k=0; k<8; k++){
 800add4:	183b      	adds	r3, r7, r0
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	183b      	adds	r3, r7, r0
 800adda:	3201      	adds	r2, #1
 800addc:	701a      	strb	r2, [r3, #0]
 800adde:	230f      	movs	r3, #15
 800ade0:	18fb      	adds	r3, r7, r3
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b07      	cmp	r3, #7
 800ade6:	d9ef      	bls.n	800adc8 <refrigera+0x894>
			goto defindi;
 800ade8:	e01d      	b.n	800ae26 <refrigera+0x8f2>
				goto Indi_dif; //rult Indi_dif
 800adea:	46c0      	nop			@ (mov r8, r8)
Indi_dif:	dif_dpy();		//call dif_dpy		// Despliega el Diferencial que este operando
 800adec:	f7fb f9be 	bl	800616c <dif_dpy>
            soloent(versionFirm2);				//call		soloent;
 800adf0:	4b84      	ldr	r3, [pc, #528]	@ (800b004 <refrigera+0xad0>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	0018      	movs	r0, r3
 800adf6:	f7fb fb49 	bl	800648c <soloent>
            for(uint8_t k=0; k<8; k++){
 800adfa:	230e      	movs	r3, #14
 800adfc:	18fb      	adds	r3, r7, r3
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	e00a      	b.n	800ae1a <refrigera+0x8e6>
            	datled[k] = 0;
 800ae04:	200e      	movs	r0, #14
 800ae06:	183b      	adds	r3, r7, r0
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	4a76      	ldr	r2, [pc, #472]	@ (800afe4 <refrigera+0xab0>)
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	54d1      	strb	r1, [r2, r3]
            for(uint8_t k=0; k<8; k++){
 800ae10:	183b      	adds	r3, r7, r0
 800ae12:	781a      	ldrb	r2, [r3, #0]
 800ae14:	183b      	adds	r3, r7, r0
 800ae16:	3201      	adds	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	230e      	movs	r3, #14
 800ae1c:	18fb      	adds	r3, r7, r3
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b07      	cmp	r3, #7
 800ae22:	d9ef      	bls.n	800ae04 <refrigera+0x8d0>
defindi:   buildmode();					//call buildmode;				//	/ Construye el modo de cambio de estado para la rutina refrigera
 800ae24:	46c0      	nop			@ (mov r8, r8)
 800ae26:	f7fc f8b7 	bl	8006f98 <buildmode>
           if(!GetRegFlagState(modo,tinic)){//btjf modo,#tinic,indica_j00;
 800ae2a:	4b77      	ldr	r3, [pc, #476]	@ (800b008 <refrigera+0xad4>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	b25b      	sxtb	r3, r3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	db2a      	blt.n	800ae8a <refrigera+0x956>
        	   goto indica_j00;
 800ae34:	46c0      	nop			@ (mov r8, r8)
            if(Plantilla [numSens] != 1){ 	// Si el número de sensores con el que trabaja es 1, no preguntes por condiciones iniciales del sensor evaporador
 800ae36:	4b6e      	ldr	r3, [pc, #440]	@ (800aff0 <refrigera+0xabc>)
 800ae38:	2259      	movs	r2, #89	@ 0x59
 800ae3a:	5c9b      	ldrb	r3, [r3, r2]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d104      	bne.n	800ae4a <refrigera+0x916>
            if(GPIOR0[f_disable]){ //btjt GPIOR0,#f_disable,indica_j01  /// Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800ae40:	4b72      	ldr	r3, [pc, #456]	@ (800b00c <refrigera+0xad8>)
 800ae42:	791b      	ldrb	r3, [r3, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d01c      	beq.n	800ae82 <refrigera+0x94e>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque? sí, carga interdeshielo
 800ae48:	e018      	b.n	800ae7c <refrigera+0x948>
            	goto indica_j00b;
 800ae4a:	46c0      	nop			@ (mov r8, r8)
             if(trefst[f_sda]){ //btjt trefst,#f_sda,indica_j01;
 800ae4c:	4b70      	ldr	r3, [pc, #448]	@ (800b010 <refrigera+0xadc>)
 800ae4e:	78db      	ldrb	r3, [r3, #3]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10e      	bne.n	800ae72 <refrigera+0x93e>
            if(trefst[f_sdc]){ //btjt trefst,#f_sdc,indica_j01
 800ae54:	4b6e      	ldr	r3, [pc, #440]	@ (800b010 <refrigera+0xadc>)
 800ae56:	789b      	ldrb	r3, [r3, #2]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10c      	bne.n	800ae76 <refrigera+0x942>
            if(GPIOR0[f_disable]){//btjt GPIOR0,#f_disable,indica_j01
 800ae5c:	4b6b      	ldr	r3, [pc, #428]	@ (800b00c <refrigera+0xad8>)
 800ae5e:	791b      	ldrb	r3, [r3, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <refrigera+0x946>
            if(!GetRegFlagState(modo,limech)){ //btjf modo,#limech,indica_j02;
 800ae64:	4b68      	ldr	r3, [pc, #416]	@ (800b008 <refrigera+0xad4>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	001a      	movs	r2, r3
 800ae6a:	2310      	movs	r3, #16
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	d00a      	beq.n	800ae86 <refrigera+0x952>
indica_j01:		ldadaptivo();	// call ldadaptivo
 800ae70:	e004      	b.n	800ae7c <refrigera+0x948>
            	 goto indica_j01;
 800ae72:	46c0      	nop			@ (mov r8, r8)
 800ae74:	e002      	b.n	800ae7c <refrigera+0x948>
            	goto indica_j01;			//indica_j01;	/ ¿Falla en el sensor de evaporador?
 800ae76:	46c0      	nop			@ (mov r8, r8)
 800ae78:	e000      	b.n	800ae7c <refrigera+0x948>
            	goto indica_j01;		//indica_j01;/ Esta deshabilitado el deshielo al arranque?
 800ae7a:	46c0      	nop			@ (mov r8, r8)
indica_j01:		ldadaptivo();	// call ldadaptivo
 800ae7c:	f7fb f920 	bl	80060c0 <ldadaptivo>
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800ae80:	e59b      	b.n	800a9ba <refrigera+0x486>
            goto indica_j02;
 800ae82:	46c0      	nop			@ (mov r8, r8)
 800ae84:	e599      	b.n	800a9ba <refrigera+0x486>
            	goto indica_j02;		//indica_j02;	/ La temperatura del evaporador esta por debajo del límite establecido?
 800ae86:	46c0      	nop			@ (mov r8, r8)
			goto	toctl_inicio;			//jp      toctl_inicio     ;RM_20230419  Para retardo al inicio
 800ae88:	e597      	b.n	800a9ba <refrigera+0x486>
           goto defind10;				/// No, pregunta por otro modo
 800ae8a:	46c0      	nop			@ (mov r8, r8)
             if(holdseg != 0){  //tnz holdseg; jrne finindi;	/ ¿Ya es más de 1 segundo?
 800ae8c:	4b61      	ldr	r3, [pc, #388]	@ (800b014 <refrigera+0xae0>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d112      	bne.n	800aeba <refrigera+0x986>
             if(trefst[f_sac]){ //btjt trefst,#f_sac,indica_j04
 800ae94:	4b5e      	ldr	r3, [pc, #376]	@ (800b010 <refrigera+0xadc>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d010      	beq.n	800aebe <refrigera+0x98a>
            	 goto indica_j04;
 800ae9c:	46c0      	nop			@ (mov r8, r8)
             goto toap;			//	jp			toap;			/ Entra a autoprueba con el conector
 800ae9e:	46c0      	nop			@ (mov r8, r8)
toap:     		durautop = 17;				//  Carga el tiempo de duracuón de la autoprueba
 800aea0:	4b5d      	ldr	r3, [pc, #372]	@ (800b018 <refrigera+0xae4>)
 800aea2:	2211      	movs	r2, #17
 800aea4:	701a      	strb	r2, [r3, #0]
          		durautop2 = 8;				//  Carga el tiempo de duracuón de la autoprueba
 800aea6:	4b5d      	ldr	r3, [pc, #372]	@ (800b01c <refrigera+0xae8>)
 800aea8:	2208      	movs	r2, #8
 800aeaa:	701a      	strb	r2, [r3, #0]
          		edorefri = 0x01;				/// Carga el estado de Autoprueba
 800aeac:	4b5c      	ldr	r3, [pc, #368]	@ (800b020 <refrigera+0xaec>)
 800aeae:	2201      	movs	r2, #1
 800aeb0:	701a      	strb	r2, [r3, #0]
          		cntseg = 0;
 800aeb2:	4b5c      	ldr	r3, [pc, #368]	@ (800b024 <refrigera+0xaf0>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	701a      	strb	r2, [r3, #0]
 800aeb8:	e55d      	b.n	800a976 <refrigera+0x442>
            	 goto finindi;
 800aeba:	46c0      	nop			@ (mov r8, r8)
 800aebc:	e5bb      	b.n	800aa36 <refrigera+0x502>
             goto finindi;
 800aebe:	46c0      	nop			@ (mov r8, r8)
finindi:     goto finref;
 800aec0:	e5b9      	b.n	800aa36 <refrigera+0x502>
            fauto[7] = 1;						//bset		fauto,#7
 800aec2:	4b59      	ldr	r3, [pc, #356]	@ (800b028 <refrigera+0xaf4>)
 800aec4:	2201      	movs	r2, #1
 800aec6:	71da      	strb	r2, [r3, #7]
            goto defap;							/// Sí, mantiene apagado todo
 800aec8:	e159      	b.n	800b17e <refrigera+0xc4a>
			if(fauto[1]){//btjt fauto,#1,fail_det		// Ya se detecto una falla? si, no hagas secuencia
 800aeca:	4b57      	ldr	r3, [pc, #348]	@ (800b028 <refrigera+0xaf4>)
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d150      	bne.n	800af74 <refrigera+0xa40>
			wreg = num_ver;			//;		/ Versión del Firmware
 800aed2:	4b49      	ldr	r3, [pc, #292]	@ (800aff8 <refrigera+0xac4>)
 800aed4:	2205      	movs	r2, #5
 800aed6:	701a      	strb	r2, [r3, #0]
			soloent1();				//call soloent1
 800aed8:	f7fb faf6 	bl	80064c8 <soloent1>
			datled[0] = 1;//BitSet(datled,0);			/// Enciende el punto
 800aedc:	4b41      	ldr	r3, [pc, #260]	@ (800afe4 <refrigera+0xab0>)
 800aede:	2201      	movs	r2, #1
 800aee0:	701a      	strb	r2, [r3, #0]
			fauto[0] = 1;			/// No muestres fallas de sensor ambiente
 800aee2:	4b51      	ldr	r3, [pc, #324]	@ (800b028 <refrigera+0xaf4>)
 800aee4:	2201      	movs	r2, #1
 800aee6:	701a      	strb	r2, [r3, #0]
           if(durautop <= 16){
 800aee8:	4b4b      	ldr	r3, [pc, #300]	@ (800b018 <refrigera+0xae4>)
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b10      	cmp	r3, #16
 800aeee:	d90c      	bls.n	800af0a <refrigera+0x9d6>
           if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){
 800aef0:	4b4e      	ldr	r3, [pc, #312]	@ (800b02c <refrigera+0xaf8>)
 800aef2:	2110      	movs	r1, #16
 800aef4:	0018      	movs	r0, r3
 800aef6:	f008 fbc5 	bl	8013684 <HAL_GPIO_ReadPin>
 800aefa:	1e03      	subs	r3, r0, #0
 800aefc:	d003      	beq.n	800af06 <refrigera+0x9d2>
           trefst[4] = 1; //bset		trefst,#4;				/	Sí, activa alarma de puerta abierta
 800aefe:	4b44      	ldr	r3, [pc, #272]	@ (800b010 <refrigera+0xadc>)
 800af00:	2201      	movs	r2, #1
 800af02:	711a      	strb	r2, [r3, #4]
           goto ask_fail;
 800af04:	e020      	b.n	800af48 <refrigera+0xa14>
        	   goto no_op_door;//btjf PD_IDR,#swdoor,no_op_door
 800af06:	46c0      	nop			@ (mov r8, r8)
            goto defap;
 800af08:	e139      	b.n	800b17e <refrigera+0xc4a>
        	   goto door_det; //jrule door_det
 800af0a:	46c0      	nop			@ (mov r8, r8)
			if(durautop <= 13){ //jrule do_sec ***
 800af0c:	4b42      	ldr	r3, [pc, #264]	@ (800b018 <refrigera+0xae4>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b0d      	cmp	r3, #13
 800af12:	d915      	bls.n	800af40 <refrigera+0xa0c>
			datled[1] = 0;					//bres		datled,#1;				/ apaga el signo
 800af14:	4b33      	ldr	r3, [pc, #204]	@ (800afe4 <refrigera+0xab0>)
 800af16:	2200      	movs	r2, #0
 800af18:	705a      	strb	r2, [r3, #1]
            if(!HAL_GPIO_ReadPin(PFULLDEF_P5_PORT,PFULLDEF_P5_PIN)){//btjf PD_IDR,#swdoor,no_det_door;
 800af1a:	4b44      	ldr	r3, [pc, #272]	@ (800b02c <refrigera+0xaf8>)
 800af1c:	2110      	movs	r1, #16
 800af1e:	0018      	movs	r0, r3
 800af20:	f008 fbb0 	bl	8013684 <HAL_GPIO_ReadPin>
 800af24:	1e03      	subs	r3, r0, #0
 800af26:	d009      	beq.n	800af3c <refrigera+0xa08>
            fauto[2] = 1;					//bset		fauto,#2;					/ Indica que se abrio la puerta
 800af28:	4b3f      	ldr	r3, [pc, #252]	@ (800b028 <refrigera+0xaf4>)
 800af2a:	2201      	movs	r2, #1
 800af2c:	709a      	strb	r2, [r3, #2]
            datled[1] = 1;		 		//bset		datled,#1;				/ prende el signo
 800af2e:	4b2d      	ldr	r3, [pc, #180]	@ (800afe4 <refrigera+0xab0>)
 800af30:	2201      	movs	r2, #1
 800af32:	705a      	strb	r2, [r3, #1]
            GPIOR1[f_led] = 0;				// Apaga el led inidcador
 800af34:	4b3e      	ldr	r3, [pc, #248]	@ (800b030 <refrigera+0xafc>)
 800af36:	2200      	movs	r2, #0
 800af38:	705a      	strb	r2, [r3, #1]
			goto defap;
 800af3a:	e120      	b.n	800b17e <refrigera+0xc4a>
            	goto no_det_door;				//	¿La puerta está abierta?
 800af3c:	46c0      	nop			@ (mov r8, r8)
			goto defap;
 800af3e:	e11e      	b.n	800b17e <refrigera+0xc4a>
            	goto do_sec;
 800af40:	46c0      	nop			@ (mov r8, r8)
           	   fauto[0] = 0;		//bres		fauto,#0;					/ Ya se pueden mostrar fallas de sensor ambiente
 800af42:	4b39      	ldr	r3, [pc, #228]	@ (800b028 <refrigera+0xaf4>)
 800af44:	2200      	movs	r2, #0
 800af46:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<8;k++){
 800af48:	2300      	movs	r3, #0
 800af4a:	60bb      	str	r3, [r7, #8]
 800af4c:	e00e      	b.n	800af6c <refrigera+0xa38>
				if(trefst[k] != 0){//tnz  trefst					//;						/ Hay alguna falla ?
 800af4e:	4a30      	ldr	r2, [pc, #192]	@ (800b010 <refrigera+0xadc>)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	18d3      	adds	r3, r2, r3
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10e      	bne.n	800af78 <refrigera+0xa44>
           	   if(trefst2[k] != 0 ){//tnz trefst2;					;						/ Hay alguna falla ?
 800af5a:	4a36      	ldr	r2, [pc, #216]	@ (800b034 <refrigera+0xb00>)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	18d3      	adds	r3, r2, r3
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10a      	bne.n	800af7c <refrigera+0xa48>
			for(int k=0;k<8;k++){
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	3301      	adds	r3, #1
 800af6a:	60bb      	str	r3, [r7, #8]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b07      	cmp	r3, #7
 800af70:	dded      	ble.n	800af4e <refrigera+0xa1a>
           	   goto ask_do_sec;	//;				/	No, continua con la secuencia
 800af72:	e088      	b.n	800b086 <refrigera+0xb52>
				goto fail_det;			//fail_det;/ Ya se detecto una falla? si, no hagas secuencia
 800af74:	46c0      	nop			@ (mov r8, r8)
 800af76:	e004      	b.n	800af82 <refrigera+0xa4e>
           		   goto fail_det;//jrne fail_det
 800af78:	46c0      	nop			@ (mov r8, r8)
 800af7a:	e002      	b.n	800af82 <refrigera+0xa4e>
           		   goto fail_det; //jrne fail_det
 800af7c:	46c0      	nop			@ (mov r8, r8)
 800af7e:	e000      	b.n	800af82 <refrigera+0xa4e>
				goto fail_det;
 800af80:	46c0      	nop			@ (mov r8, r8)
			op_menu (0x0A, 0x0A);
 800af82:	210a      	movs	r1, #10
 800af84:	200a      	movs	r0, #10
 800af86:	f7fc f909 	bl	800719c <op_menu>
			if(GetRegFlagState (lowByte(cntblkh), 6)){ //btjt	cntblkl,#6,blk_aa0;
 800af8a:	4b2b      	ldr	r3, [pc, #172]	@ (800b038 <refrigera+0xb04>)
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	001a      	movs	r2, r3
 800af92:	2340      	movs	r3, #64	@ 0x40
 800af94:	4013      	ands	r3, r2
 800af96:	d104      	bne.n	800afa2 <refrigera+0xa6e>
			op_menu (0x1F, 0X1F);
 800af98:	211f      	movs	r1, #31
 800af9a:	201f      	movs	r0, #31
 800af9c:	f7fc f8fe 	bl	800719c <op_menu>
 800afa0:	e000      	b.n	800afa4 <refrigera+0xa70>
				goto blk_aa0;							//blk_aa0;		/ Parpadea cada 640 ms
 800afa2:	46c0      	nop			@ (mov r8, r8)
           fauto[1] = 1;	//;					/ indica de hubo falla
 800afa4:	4b20      	ldr	r3, [pc, #128]	@ (800b028 <refrigera+0xaf4>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	705a      	strb	r2, [r3, #1]
           fauto[7] = 1;
 800afaa:	4b1f      	ldr	r3, [pc, #124]	@ (800b028 <refrigera+0xaf4>)
 800afac:	2201      	movs	r2, #1
 800afae:	71da      	strb	r2, [r3, #7]
           if(trefst[f_hv]){//btjt trefst,#f_hv,dpy_volt_f;		;	/ Hay alarma de voltaje?
 800afb0:	4b17      	ldr	r3, [pc, #92]	@ (800b010 <refrigera+0xadc>)
 800afb2:	79db      	ldrb	r3, [r3, #7]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d107      	bne.n	800afc8 <refrigera+0xa94>
           if(!trefst[f_lv]){  //btjf trefst,#f_lv,no_dpy_volt_f;
 800afb8:	4b15      	ldr	r3, [pc, #84]	@ (800b010 <refrigera+0xadc>)
 800afba:	799b      	ldrb	r3, [r3, #6]
 800afbc:	2201      	movs	r2, #1
 800afbe:	4053      	eors	r3, r2
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d15d      	bne.n	800b082 <refrigera+0xb4e>
dpy_volt_f:
 800afc6:	e000      	b.n	800afca <refrigera+0xa96>
        	   goto dpy_volt_f;
 800afc8:	46c0      	nop			@ (mov r8, r8)
              fauto[3] = 0;					//bres		fauto,#3
 800afca:	4b17      	ldr	r3, [pc, #92]	@ (800b028 <refrigera+0xaf4>)
 800afcc:	2200      	movs	r2, #0
 800afce:	70da      	strb	r2, [r3, #3]
              if(GetRegFlagState(durautop2, 0)){//btjt durautop2,#0,no_dpy_f
 800afd0:	4b12      	ldr	r3, [pc, #72]	@ (800b01c <refrigera+0xae8>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	001a      	movs	r2, r3
 800afd6:	2301      	movs	r3, #1
 800afd8:	4013      	ands	r3, r2
 800afda:	d12f      	bne.n	800b03c <refrigera+0xb08>
              fauto[3] = 1;					//bset		fauto,#3
 800afdc:	4b12      	ldr	r3, [pc, #72]	@ (800b028 <refrigera+0xaf4>)
 800afde:	2201      	movs	r2, #1
 800afe0:	70da      	strb	r2, [r3, #3]
 800afe2:	e02c      	b.n	800b03e <refrigera+0xb0a>
 800afe4:	20000b90 	.word	0x20000b90
 800afe8:	0803f055 	.word	0x0803f055
 800afec:	0803f047 	.word	0x0803f047
 800aff0:	200000b8 	.word	0x200000b8
 800aff4:	0803f057 	.word	0x0803f057
 800aff8:	20000b55 	.word	0x20000b55
 800affc:	20000b54 	.word	0x20000b54
 800b000:	0801e7f0 	.word	0x0801e7f0
 800b004:	0801e7f1 	.word	0x0801e7f1
 800b008:	20000b52 	.word	0x20000b52
 800b00c:	20000ba4 	.word	0x20000ba4
 800b010:	20000b88 	.word	0x20000b88
 800b014:	20000b53 	.word	0x20000b53
 800b018:	20000b6c 	.word	0x20000b6c
 800b01c:	20000c28 	.word	0x20000c28
 800b020:	20000b98 	.word	0x20000b98
 800b024:	20000b4b 	.word	0x20000b4b
 800b028:	20000bd8 	.word	0x20000bd8
 800b02c:	50000400 	.word	0x50000400
 800b030:	20000be0 	.word	0x20000be0
 800b034:	20000b80 	.word	0x20000b80
 800b038:	20000b4c 	.word	0x20000b4c
            	  goto no_dpy_f;
 800b03c:	46c0      	nop			@ (mov r8, r8)
				wreg = voltl;
 800b03e:	4bc1      	ldr	r3, [pc, #772]	@ (800b344 <refrigera+0xe10>)
 800b040:	781a      	ldrb	r2, [r3, #0]
 800b042:	4bc1      	ldr	r3, [pc, #772]	@ (800b348 <refrigera+0xe14>)
 800b044:	701a      	strb	r2, [r3, #0]
				if(wreg < 100 ){ //ld a,voltl
 800b046:	4bc0      	ldr	r3, [pc, #768]	@ (800b348 <refrigera+0xe14>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b63      	cmp	r3, #99	@ 0x63
 800b04c:	d910      	bls.n	800b070 <refrigera+0xb3c>
				wreg = wreg - 100;
 800b04e:	4bbe      	ldr	r3, [pc, #760]	@ (800b348 <refrigera+0xe14>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	3b64      	subs	r3, #100	@ 0x64
 800b054:	b2da      	uxtb	r2, r3
 800b056:	4bbc      	ldr	r3, [pc, #752]	@ (800b348 <refrigera+0xe14>)
 800b058:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b05a:	4bbb      	ldr	r3, [pc, #748]	@ (800b348 <refrigera+0xe14>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b63      	cmp	r3, #99	@ 0x63
 800b060:	d908      	bls.n	800b074 <refrigera+0xb40>
				wreg = wreg - 100;
 800b062:	4bb9      	ldr	r3, [pc, #740]	@ (800b348 <refrigera+0xe14>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	3b64      	subs	r3, #100	@ 0x64
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	4bb7      	ldr	r3, [pc, #732]	@ (800b348 <refrigera+0xe14>)
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	e002      	b.n	800b076 <refrigera+0xb42>
					goto under_100_f; //jrult under_100_f
 800b070:	46c0      	nop			@ (mov r8, r8)
 800b072:	e000      	b.n	800b076 <refrigera+0xb42>
					goto under_100_f;
 800b074:	46c0      	nop			@ (mov r8, r8)
				soloent1();	//call soloent1
 800b076:	f7fb fa27 	bl	80064c8 <soloent1>
				datled[0] = 0;			//bres		datled,#0;				/ apaga el punto
 800b07a:	4bb4      	ldr	r3, [pc, #720]	@ (800b34c <refrigera+0xe18>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	701a      	strb	r2, [r3, #0]
                goto defap;					// Si, no hagas secuencia
 800b080:	e07d      	b.n	800b17e <refrigera+0xc4a>
        	   goto no_dpy_volt_f;
 800b082:	46c0      	nop			@ (mov r8, r8)
                goto defap;					// Si, no hagas secuencia
 800b084:	e07b      	b.n	800b17e <refrigera+0xc4a>
				if(fauto[2]){						// se abrio la puerta? Si, realiza la secuencia
 800b086:	4bb2      	ldr	r3, [pc, #712]	@ (800b350 <refrigera+0xe1c>)
 800b088:	789b      	ldrb	r3, [r3, #2]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d100      	bne.n	800b090 <refrigera+0xb5c>
 800b08e:	e777      	b.n	800af80 <refrigera+0xa4c>
					goto on_compres;
 800b090:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 1;			// Enciende el compresor
 800b092:	4bb0      	ldr	r3, [pc, #704]	@ (800b354 <refrigera+0xe20>)
 800b094:	2201      	movs	r2, #1
 800b096:	701a      	strb	r2, [r3, #0]
				datled[luzC] = 1;//BitSet(datled,luzC);			// Enciende el compresor
 800b098:	4bac      	ldr	r3, [pc, #688]	@ (800b34c <refrigera+0xe18>)
 800b09a:	2201      	movs	r2, #1
 800b09c:	709a      	strb	r2, [r3, #2]
				if(durautop <= 11 ){//cp A,#11;
 800b09e:	4bae      	ldr	r3, [pc, #696]	@ (800b358 <refrigera+0xe24>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b0b      	cmp	r3, #11
 800b0a4:	d864      	bhi.n	800b170 <refrigera+0xc3c>
            	 	 goto on_desh;
 800b0a6:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_comp] = 0;					// apaga el compresor
 800b0a8:	4baa      	ldr	r3, [pc, #680]	@ (800b354 <refrigera+0xe20>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzD, luzC);
 800b0ae:	49a7      	ldr	r1, [pc, #668]	@ (800b34c <refrigera+0xe18>)
 800b0b0:	48a6      	ldr	r0, [pc, #664]	@ (800b34c <refrigera+0xe18>)
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	2203      	movs	r2, #3
 800b0b6:	f001 ff35 	bl	800cf24 <Bset_Clear_trfst>
				GPIOR0[f_dh] = 1;					// Enciende el deshielo
 800b0ba:	4ba6      	ldr	r3, [pc, #664]	@ (800b354 <refrigera+0xe20>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	705a      	strb	r2, [r3, #1]
            	datled[luzD] = 1;// BitSet(datled,luzD);				// Enciende el deshielo
 800b0c0:	4ba2      	ldr	r3, [pc, #648]	@ (800b34c <refrigera+0xe18>)
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	70da      	strb	r2, [r3, #3]
            	if(durautop <= 9){
 800b0c6:	4ba4      	ldr	r3, [pc, #656]	@ (800b358 <refrigera+0xe24>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	2b09      	cmp	r3, #9
 800b0cc:	d852      	bhi.n	800b174 <refrigera+0xc40>
            		goto on_vent;//jrule on_vent
 800b0ce:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_dh] = 0;						/// apaga el deshielo
 800b0d0:	4ba0      	ldr	r3, [pc, #640]	@ (800b354 <refrigera+0xe20>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	705a      	strb	r2, [r3, #1]
				Bset_Clear_trfst(datled, datled,luzF, luzD);
 800b0d6:	499d      	ldr	r1, [pc, #628]	@ (800b34c <refrigera+0xe18>)
 800b0d8:	489c      	ldr	r0, [pc, #624]	@ (800b34c <refrigera+0xe18>)
 800b0da:	2303      	movs	r3, #3
 800b0dc:	2207      	movs	r2, #7
 800b0de:	f001 ff21 	bl	800cf24 <Bset_Clear_trfst>
				GPIOR1[f_fan] = 1;					/// Enciende el ventilador
 800b0e2:	4b9e      	ldr	r3, [pc, #632]	@ (800b35c <refrigera+0xe28>)
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	701a      	strb	r2, [r3, #0]
				if(durautop <= 7){
 800b0e8:	4b9b      	ldr	r3, [pc, #620]	@ (800b358 <refrigera+0xe24>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b07      	cmp	r3, #7
 800b0ee:	d843      	bhi.n	800b178 <refrigera+0xc44>
					goto on_lamp; //jrule	on_lamp
 800b0f0:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 0;						// apaga el ventilador
 800b0f2:	4b9a      	ldr	r3, [pc, #616]	@ (800b35c <refrigera+0xe28>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	701a      	strb	r2, [r3, #0]
				Bset_Clear_trfst(datled, datled,luzN, luzF);
 800b0f8:	4994      	ldr	r1, [pc, #592]	@ (800b34c <refrigera+0xe18>)
 800b0fa:	4894      	ldr	r0, [pc, #592]	@ (800b34c <refrigera+0xe18>)
 800b0fc:	2307      	movs	r3, #7
 800b0fe:	2204      	movs	r2, #4
 800b100:	f001 ff10 	bl	800cf24 <Bset_Clear_trfst>
				GPIOR0[f_lamp] = 1;					// Enciende el lampara
 800b104:	4b93      	ldr	r3, [pc, #588]	@ (800b354 <refrigera+0xe20>)
 800b106:	2201      	movs	r2, #1
 800b108:	709a      	strb	r2, [r3, #2]
				if(durautop <= 05){
 800b10a:	4b93      	ldr	r3, [pc, #588]	@ (800b358 <refrigera+0xe24>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b05      	cmp	r3, #5
 800b110:	d834      	bhi.n	800b17c <refrigera+0xc48>
					goto dpy_volt; //jrule	dpy_volt
 800b112:	46c0      	nop			@ (mov r8, r8)
				GPIOR0[f_lamp] = 0;					// apaga el lampara
 800b114:	4b8f      	ldr	r3, [pc, #572]	@ (800b354 <refrigera+0xe20>)
 800b116:	2200      	movs	r2, #0
 800b118:	709a      	strb	r2, [r3, #2]
				datled[luzN] = 0;// BitClear(datled,luzN); 				// apaga el lampara
 800b11a:	4b8c      	ldr	r3, [pc, #560]	@ (800b34c <refrigera+0xe18>)
 800b11c:	2200      	movs	r2, #0
 800b11e:	711a      	strb	r2, [r3, #4]
				wreg = voltl;
 800b120:	4b88      	ldr	r3, [pc, #544]	@ (800b344 <refrigera+0xe10>)
 800b122:	781a      	ldrb	r2, [r3, #0]
 800b124:	4b88      	ldr	r3, [pc, #544]	@ (800b348 <refrigera+0xe14>)
 800b126:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b128:	4b87      	ldr	r3, [pc, #540]	@ (800b348 <refrigera+0xe14>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b63      	cmp	r3, #99	@ 0x63
 800b12e:	d910      	bls.n	800b152 <refrigera+0xc1e>
				wreg = wreg - 100;
 800b130:	4b85      	ldr	r3, [pc, #532]	@ (800b348 <refrigera+0xe14>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	3b64      	subs	r3, #100	@ 0x64
 800b136:	b2da      	uxtb	r2, r3
 800b138:	4b83      	ldr	r3, [pc, #524]	@ (800b348 <refrigera+0xe14>)
 800b13a:	701a      	strb	r2, [r3, #0]
				if(wreg < 100){
 800b13c:	4b82      	ldr	r3, [pc, #520]	@ (800b348 <refrigera+0xe14>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b63      	cmp	r3, #99	@ 0x63
 800b142:	d908      	bls.n	800b156 <refrigera+0xc22>
				wreg = wreg - 100;
 800b144:	4b80      	ldr	r3, [pc, #512]	@ (800b348 <refrigera+0xe14>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	3b64      	subs	r3, #100	@ 0x64
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	4b7e      	ldr	r3, [pc, #504]	@ (800b348 <refrigera+0xe14>)
 800b14e:	701a      	strb	r2, [r3, #0]
 800b150:	e002      	b.n	800b158 <refrigera+0xc24>
					goto under_100; //jrult	under_100
 800b152:	46c0      	nop			@ (mov r8, r8)
 800b154:	e000      	b.n	800b158 <refrigera+0xc24>
					goto under_100;
 800b156:	46c0      	nop			@ (mov r8, r8)
				soloent1();			//call soloent1
 800b158:	f7fb f9b6 	bl	80064c8 <soloent1>
				datled[0]= 0; //BitClear(datled,0);			// apaga el punto
 800b15c:	4b7b      	ldr	r3, [pc, #492]	@ (800b34c <refrigera+0xe18>)
 800b15e:	2200      	movs	r2, #0
 800b160:	701a      	strb	r2, [r3, #0]
				fauto[6] = 1;
 800b162:	4b7b      	ldr	r3, [pc, #492]	@ (800b350 <refrigera+0xe1c>)
 800b164:	2201      	movs	r2, #1
 800b166:	719a      	strb	r2, [r3, #6]
				fauto[7] = 0;
 800b168:	4b79      	ldr	r3, [pc, #484]	@ (800b350 <refrigera+0xe1c>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	71da      	strb	r2, [r3, #7]
 800b16e:	e006      	b.n	800b17e <refrigera+0xc4a>
             	 goto defap;
 800b170:	46c0      	nop			@ (mov r8, r8)
 800b172:	e004      	b.n	800b17e <refrigera+0xc4a>
            	goto defap;
 800b174:	46c0      	nop			@ (mov r8, r8)
 800b176:	e002      	b.n	800b17e <refrigera+0xc4a>
				goto defap;
 800b178:	46c0      	nop			@ (mov r8, r8)
 800b17a:	e000      	b.n	800b17e <refrigera+0xc4a>
				goto defap;
 800b17c:	46c0      	nop			@ (mov r8, r8)
defap:			buildmode();			//call		buildmode;		/ Construye el modo de cambio de estado
 800b17e:	f7fb ff0b 	bl	8006f98 <buildmode>
				if(!GetRegFlagState(modo,0)){ //btjf modo,#0,finap;
 800b182:	4b77      	ldr	r3, [pc, #476]	@ (800b360 <refrigera+0xe2c>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	001a      	movs	r2, r3
 800b188:	2301      	movs	r3, #1
 800b18a:	4013      	ands	r3, r2
 800b18c:	d00c      	beq.n	800b1a8 <refrigera+0xc74>
defap1:			goto toindi;						// Cambia al estado de indicación de parámetros
 800b18e:	46c0      	nop			@ (mov r8, r8)
 800b190:	46c0      	nop			@ (mov r8, r8)
toindi:			flagsa[0] = 1;		 	//bset		flagsa,#0;0x01;	/ Indica período de arranque
 800b192:	4b74      	ldr	r3, [pc, #464]	@ (800b364 <refrigera+0xe30>)
 800b194:	2201      	movs	r2, #1
 800b196:	701a      	strb	r2, [r3, #0]
				cntseg = time_auto - time_ini;
 800b198:	4b73      	ldr	r3, [pc, #460]	@ (800b368 <refrigera+0xe34>)
 800b19a:	2202      	movs	r2, #2
 800b19c:	701a      	strb	r2, [r3, #0]
				edorefri = 0;
 800b19e:	4b73      	ldr	r3, [pc, #460]	@ (800b36c <refrigera+0xe38>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]
				goto toap10;					// Limpia contador de parpadeos
 800b1a4:	f7ff fbe7 	bl	800a976 <refrigera+0x442>
					goto finap;
 800b1a8:	46c0      	nop			@ (mov r8, r8)
finap:			goto finref;
 800b1aa:	e444      	b.n	800aa36 <refrigera+0x502>
                goto	control;				//jp			control ;		/ edorefri = 2; Control de temperatura basado en la temperatura ambiente
 800b1ac:	46c0      	nop			@ (mov r8, r8)
				datled[luzF] = 0;			//bres		datled,#luzF
 800b1ae:	4b67      	ldr	r3, [pc, #412]	@ (800b34c <refrigera+0xe18>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	71da      	strb	r2, [r3, #7]
				if(drp_fanh == 0){
 800b1b4:	4b6e      	ldr	r3, [pc, #440]	@ (800b370 <refrigera+0xe3c>)
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d000      	beq.n	800b1be <refrigera+0xc8a>
 800b1bc:	e060      	b.n	800b280 <refrigera+0xd4c>
					goto ask_door_fan; //jreq ask_door_fan
 800b1be:	46c0      	nop			@ (mov r8, r8)
               if(GetRegFlagState(Plantilla[logicos2],ventDoorOFF)){ //btjt logicos2,#ventDoorOFF,ask_fan_on	/ sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800b1c0:	4b6c      	ldr	r3, [pc, #432]	@ (800b374 <refrigera+0xe40>)
 800b1c2:	225b      	movs	r2, #91	@ 0x5b
 800b1c4:	5c9b      	ldrb	r3, [r3, r2]
 800b1c6:	001a      	movs	r2, r3
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	d108      	bne.n	800b1e0 <refrigera+0xcac>
               if(cnt_pta_fan == 0){//tnz cnt_pta_fan;			// El contador de puerta abierta llego a cero?
 800b1ce:	4b6a      	ldr	r3, [pc, #424]	@ (800b378 <refrigera+0xe44>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d006      	beq.n	800b1e4 <refrigera+0xcb0>
               if(retvent == 0){ //tnz retvent
 800b1d6:	4b69      	ldr	r3, [pc, #420]	@ (800b37c <refrigera+0xe48>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d152      	bne.n	800b284 <refrigera+0xd50>
            	   goto ask_fan_on;//jreq ask_fan_on;			// Si,el ventilador puede ser encendido
 800b1de:	e002      	b.n	800b1e6 <refrigera+0xcb2>
            	   goto ask_fan_on;
 800b1e0:	46c0      	nop			@ (mov r8, r8)
 800b1e2:	e000      	b.n	800b1e6 <refrigera+0xcb2>
            	   goto ask_fan_on; //jreq ask_fan_on;			// Si, ignora el control de puerta.
 800b1e4:	46c0      	nop			@ (mov r8, r8)
				if(!portX[rel_co]){			//	btjf PA_ODR,#rel_co,fan_control
 800b1e6:	4b66      	ldr	r3, [pc, #408]	@ (800b380 <refrigera+0xe4c>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	4053      	eors	r3, r2
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d104      	bne.n	800b1fe <refrigera+0xcca>
				if(ret_fan_co != 0){ //tnz ret_fan_co
 800b1f4:	4b63      	ldr	r3, [pc, #396]	@ (800b384 <refrigera+0xe50>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d033      	beq.n	800b264 <refrigera+0xd30>
					goto fan_off; //jrne fan_off
 800b1fc:	e047      	b.n	800b28e <refrigera+0xd5a>
					goto	fan_control;		// ¿Esta encendido el compresor?    RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b1fe:	46c0      	nop			@ (mov r8, r8)
				wreg = Plantilla [cicloFd];			// Carga ciclo de ventilador diurno
 800b200:	4b5c      	ldr	r3, [pc, #368]	@ (800b374 <refrigera+0xe40>)
 800b202:	2268      	movs	r2, #104	@ 0x68
 800b204:	5c9a      	ldrb	r2, [r3, r2]
 800b206:	4b50      	ldr	r3, [pc, #320]	@ (800b348 <refrigera+0xe14>)
 800b208:	701a      	strb	r2, [r3, #0]
				BaBentre10_math();					//  BaBentre10
 800b20a:	f7fb f971 	bl	80064f0 <BaBentre10_math>
				if(waux != 0){						// esta en cero la parte alta???
 800b20e:	4b5e      	ldr	r3, [pc, #376]	@ (800b388 <refrigera+0xe54>)
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d038      	beq.n	800b288 <refrigera+0xd54>
					goto ciclof_00;					// No, pregunta por parte baja
 800b216:	46c0      	nop			@ (mov r8, r8)
ciclof_00:		if(wreg != 0){//tnz wreg;					// esta en cero la parte baja ??
 800b218:	4b4b      	ldr	r3, [pc, #300]	@ (800b348 <refrigera+0xe14>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d023      	beq.n	800b268 <refrigera+0xd34>
					goto ciclof_01; //jrne ciclof_01;		// No, continua con el cicleo
 800b220:	46c0      	nop			@ (mov r8, r8)
ciclof_01:		if(!portX[rel_fn]){				 //btjf		PA_ODR,#rel_fn,ciclo_off; Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b222:	4b57      	ldr	r3, [pc, #348]	@ (800b380 <refrigera+0xe4c>)
 800b224:	78db      	ldrb	r3, [r3, #3]
 800b226:	2201      	movs	r2, #1
 800b228:	4053      	eors	r3, r2
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00e      	beq.n	800b24e <refrigera+0xd1a>
					goto	ciclo_off; 				//Manuel 01-MAR-2022 Esta encendido el ventilador????
 800b230:	46c0      	nop			@ (mov r8, r8)
				if(toff_fan == 0){ //tnz toff_fan;	// ya termino ciclo de apagado?
 800b232:	4b56      	ldr	r3, [pc, #344]	@ (800b38c <refrigera+0xe58>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d128      	bne.n	800b28c <refrigera+0xd58>
					goto ld_ciclo_on; //jreq ld_ciclo_on;
 800b23a:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan != 0){ //tnz ton_fan
 800b23c:	4b54      	ldr	r3, [pc, #336]	@ (800b390 <refrigera+0xe5c>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d113      	bne.n	800b26c <refrigera+0xd38>
				ton_fan = waux; //mov ton_fan,waux;		// Si, carga tiempo de encendido
 800b244:	4b50      	ldr	r3, [pc, #320]	@ (800b388 <refrigera+0xe54>)
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	4b51      	ldr	r3, [pc, #324]	@ (800b390 <refrigera+0xe5c>)
 800b24a:	701a      	strb	r2, [r3, #0]
				goto fan_on; //jra	fan_on;					// cambia a encendido
 800b24c:	e011      	b.n	800b272 <refrigera+0xd3e>
				goto ciclo_on;					/// Si, ciclo de encendido
 800b24e:	46c0      	nop			@ (mov r8, r8)
				if(ton_fan == 0){ //tnz	ton_fan;			// ya termino ciclo de apagado?
 800b250:	4b4f      	ldr	r3, [pc, #316]	@ (800b390 <refrigera+0xe5c>)
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10b      	bne.n	800b270 <refrigera+0xd3c>
					goto ld_ciclo_off; //jreq ld_ciclo_off;
 800b258:	46c0      	nop			@ (mov r8, r8)
				toff_fan = wreg;//mov	toff_fan,wreg;		// Si, carga tiempo de encendido
 800b25a:	4b3b      	ldr	r3, [pc, #236]	@ (800b348 <refrigera+0xe14>)
 800b25c:	781a      	ldrb	r2, [r3, #0]
 800b25e:	4b4b      	ldr	r3, [pc, #300]	@ (800b38c <refrigera+0xe58>)
 800b260:	701a      	strb	r2, [r3, #0]
				goto fan_off;//jra fan_off;					// cambia a encendido
 800b262:	e014      	b.n	800b28e <refrigera+0xd5a>
				goto fan_on;//jra fan_on			// Si, el ventilador permanece encedido
 800b264:	46c0      	nop			@ (mov r8, r8)
 800b266:	e004      	b.n	800b272 <refrigera+0xd3e>
				goto fan_on; //jra	fan_on;					// Si, manten encendido el ventilado
 800b268:	46c0      	nop			@ (mov r8, r8)
 800b26a:	e002      	b.n	800b272 <refrigera+0xd3e>
					goto fan_on; //jrne fan_on
 800b26c:	46c0      	nop			@ (mov r8, r8)
 800b26e:	e000      	b.n	800b272 <refrigera+0xd3e>
				goto fan_on;//jra fan_on;					// No, manten apagado el ventilador
 800b270:	46c0      	nop			@ (mov r8, r8)
				GPIOR1[f_fan] = 1; 		//bset		GPIOR1,#f_fan;;	/ Enciende el ventilador
 800b272:	4b3a      	ldr	r3, [pc, #232]	@ (800b35c <refrigera+0xe28>)
 800b274:	2201      	movs	r2, #1
 800b276:	701a      	strb	r2, [r3, #0]
				datled[luzF] = 1;//bset datled,#luzF
 800b278:	4b34      	ldr	r3, [pc, #208]	@ (800b34c <refrigera+0xe18>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	71da      	strb	r2, [r3, #7]
 800b27e:	e006      	b.n	800b28e <refrigera+0xd5a>
				goto fan_off;
 800b280:	46c0      	nop			@ (mov r8, r8)
 800b282:	e004      	b.n	800b28e <refrigera+0xd5a>
               goto fan_off; //jra fan_off						// No, manten apagado el ventilador
 800b284:	46c0      	nop			@ (mov r8, r8)
 800b286:	e002      	b.n	800b28e <refrigera+0xd5a>
				goto fan_off;							// Si, manten apagado el ventilador
 800b288:	46c0      	nop			@ (mov r8, r8)
 800b28a:	e000      	b.n	800b28e <refrigera+0xd5a>
				goto fan_off;						// No, manten apagado el ventilador
 800b28c:	46c0      	nop			@ (mov r8, r8)
               latchtimeh = interdhh;  //mov latchtimeh,interdhh;
 800b28e:	4b41      	ldr	r3, [pc, #260]	@ (800b394 <refrigera+0xe60>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	001a      	movs	r2, r3
 800b294:	4b40      	ldr	r3, [pc, #256]	@ (800b398 <refrigera+0xe64>)
 800b296:	801a      	strh	r2, [r3, #0]
               if(trefst[f_sac]){//btjt	trefst,#f_sac,control_j02;		/ Es sensor de ambiente esta en corto?
 800b298:	4b40      	ldr	r3, [pc, #256]	@ (800b39c <refrigera+0xe68>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d107      	bne.n	800b2b0 <refrigera+0xd7c>
               if(!trefst[f_saa]){ //btjf	trefst,#f_saa,control_j03;	/ No, entonces el sensor de ambiente esta abierto?
 800b2a0:	4b3e      	ldr	r3, [pc, #248]	@ (800b39c <refrigera+0xe68>)
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	4053      	eors	r3, r2
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <refrigera+0xd82>
control_j02:	//manuel reduc...     jp			refrioff;		/ Si, apaga el refrigerador
 800b2ae:	e000      	b.n	800b2b2 <refrigera+0xd7e>
            	   goto control_j02;
 800b2b0:	46c0      	nop			@ (mov r8, r8)
				goto refrioff; //jra refrioff;    / Si, apaga el refrigerador
 800b2b2:	46c0      	nop			@ (mov r8, r8)
				goto rest;
 800b2b4:	e029      	b.n	800b30a <refrigera+0xdd6>
            	   goto control_j03;
 800b2b6:	46c0      	nop			@ (mov r8, r8)
				if(trefst2[f_co_ex]){ //btjt trefst2,#f_co_ex,defctl
 800b2b8:	4b39      	ldr	r3, [pc, #228]	@ (800b3a0 <refrigera+0xe6c>)
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d13a      	bne.n	800b336 <refrigera+0xe02>
ctl13:
 800b2c0:	46c0      	nop			@ (mov r8, r8)
				asm ("nop");
 800b2c2:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)tdev_to_Word() < (int16_t)limsup_w){		// tdev - limsup ;	/ tdev > ó = limsup?
 800b2c4:	f7fa feb4 	bl	8006030 <tdev_to_Word>
 800b2c8:	0003      	movs	r3, r0
 800b2ca:	b21a      	sxth	r2, r3
 800b2cc:	4b35      	ldr	r3, [pc, #212]	@ (800b3a4 <refrigera+0xe70>)
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	b21b      	sxth	r3, r3
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	db09      	blt.n	800b2ea <refrigera+0xdb6>
ctl15:			//	ld			A,tminstopl;
 800b2d6:	46c0      	nop			@ (mov r8, r8)
				if(tminstoph != 0){						// Ya terminó el tiempo mínimo de descanso?
 800b2d8:	4b33      	ldr	r3, [pc, #204]	@ (800b3a8 <refrigera+0xe74>)
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d12c      	bne.n	800b33a <refrigera+0xe06>
				if(drp_comph != 0){
 800b2e0:	4b32      	ldr	r3, [pc, #200]	@ (800b3ac <refrigera+0xe78>)
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01e      	beq.n	800b326 <refrigera+0xdf2>
					goto defctl;
 800b2e8:	e067      	b.n	800b3ba <refrigera+0xe86>
					goto ctl20; //jrslt	ctl20		// No,Revisa el otro límite
 800b2ea:	46c0      	nop			@ (mov r8, r8)
				if((int16_t)liminf_w < (int16_t)tdev_to_Word()){		/// liminf - tdev  ;	/ tdev < ó = liminf?
 800b2ec:	f7fa fea0 	bl	8006030 <tdev_to_Word>
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	b21a      	sxth	r2, r3
 800b2f4:	4b2e      	ldr	r3, [pc, #184]	@ (800b3b0 <refrigera+0xe7c>)
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	b21b      	sxth	r3, r3
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	dc0d      	bgt.n	800b31a <refrigera+0xde6>
				Bset_Clear_trfst(flagsC, datled,f_spReached, 6);
 800b2fe:	4913      	ldr	r1, [pc, #76]	@ (800b34c <refrigera+0xe18>)
 800b300:	482c      	ldr	r0, [pc, #176]	@ (800b3b4 <refrigera+0xe80>)
 800b302:	2306      	movs	r3, #6
 800b304:	2207      	movs	r2, #7
 800b306:	f001 fe0d 	bl	800cf24 <Bset_Clear_trfst>
rest:			if(portX[rel_co]){	//btjt		PA_ODR,#rel_co,control_j04;	/ Esta encendido el compresor?      RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b30a:	4b1d      	ldr	r3, [pc, #116]	@ (800b380 <refrigera+0xe4c>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d015      	beq.n	800b33e <refrigera+0xe0a>
					goto control_j04;
 800b312:	46c0      	nop			@ (mov r8, r8)
				minbrake_load();	//call minbrake_load
 800b314:	f7fa ff44 	bl	80061a0 <minbrake_load>
				goto defctl;		// Si, termina con compresor apagado
 800b318:	e04f      	b.n	800b3ba <refrigera+0xe86>
					goto equal;
 800b31a:	46c0      	nop			@ (mov r8, r8)
equal:			if(portX[rel_co]){		//btjt		PA_ODR,#rel_co,control_j05;	/ Deja el compresor como está en ese momentoRM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b31c:	4b18      	ldr	r3, [pc, #96]	@ (800b380 <refrigera+0xe4c>)
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d049      	beq.n	800b3b8 <refrigera+0xe84>
					goto control_j05;
 800b324:	e000      	b.n	800b328 <refrigera+0xdf4>
				goto on_comp;						// Enciende el compresor
 800b326:	46c0      	nop			@ (mov r8, r8)
on_comp:		GPIOR0[f_comp] = 1;			//	bset		GPIOR0,#f_comp;	/ Enciende el compresor
 800b328:	4b0a      	ldr	r3, [pc, #40]	@ (800b354 <refrigera+0xe20>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	701a      	strb	r2, [r3, #0]
				datled[2] =1;			//	bset		datled,#2;0x04;	/ Enciende la luz de compresor
 800b32e:	4b07      	ldr	r3, [pc, #28]	@ (800b34c <refrigera+0xe18>)
 800b330:	2201      	movs	r2, #1
 800b332:	709a      	strb	r2, [r3, #2]
				goto defctl;
 800b334:	e041      	b.n	800b3ba <refrigera+0xe86>
             		 goto defctl;
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	e03f      	b.n	800b3ba <refrigera+0xe86>
					goto defctl;					// No, espera
 800b33a:	46c0      	nop			@ (mov r8, r8)
 800b33c:	e03d      	b.n	800b3ba <refrigera+0xe86>
        		goto defctl;			//jra			defctl;			/ No, deja correr el tiempo de descanso
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	e03b      	b.n	800b3ba <refrigera+0xe86>
 800b342:	46c0      	nop			@ (mov r8, r8)
 800b344:	20000bce 	.word	0x20000bce
 800b348:	20000b55 	.word	0x20000b55
 800b34c:	20000b90 	.word	0x20000b90
 800b350:	20000bd8 	.word	0x20000bd8
 800b354:	20000ba4 	.word	0x20000ba4
 800b358:	20000b6c 	.word	0x20000b6c
 800b35c:	20000be0 	.word	0x20000be0
 800b360:	20000b52 	.word	0x20000b52
 800b364:	20000b78 	.word	0x20000b78
 800b368:	20000b4b 	.word	0x20000b4b
 800b36c:	20000b98 	.word	0x20000b98
 800b370:	20000bfc 	.word	0x20000bfc
 800b374:	200000b8 	.word	0x200000b8
 800b378:	20000c27 	.word	0x20000c27
 800b37c:	20000b6a 	.word	0x20000b6a
 800b380:	20000b58 	.word	0x20000b58
 800b384:	20000b74 	.word	0x20000b74
 800b388:	20000b54 	.word	0x20000b54
 800b38c:	20000bf9 	.word	0x20000bf9
 800b390:	20000bf8 	.word	0x20000bf8
 800b394:	20000bb6 	.word	0x20000bb6
 800b398:	20000bba 	.word	0x20000bba
 800b39c:	20000b88 	.word	0x20000b88
 800b3a0:	20000b80 	.word	0x20000b80
 800b3a4:	20000bae 	.word	0x20000bae
 800b3a8:	20000b62 	.word	0x20000b62
 800b3ac:	20000bfa 	.word	0x20000bfa
 800b3b0:	20000bac 	.word	0x20000bac
 800b3b4:	20000c3c 	.word	0x20000c3c
        		goto defctl;
 800b3b8:	46c0      	nop			@ (mov r8, r8)
				Plantilla [timeDefi] = 0; //clr timeDefi **************************************************
 800b3ba:	4bbf      	ldr	r3, [pc, #764]	@ (800b6b8 <refrigera+0x1184>)
 800b3bc:	224d      	movs	r2, #77	@ 0x4d
 800b3be:	2100      	movs	r1, #0
 800b3c0:	5499      	strb	r1, [r3, r2]
				if(Plantilla[timeDefi] == 0 ){ /// si el tiempo de deficiencia es 0, se cancela la detección de falla "A"
 800b3c2:	4bbd      	ldr	r3, [pc, #756]	@ (800b6b8 <refrigera+0x1184>)
 800b3c4:	224d      	movs	r2, #77	@ 0x4d
 800b3c6:	5c9b      	ldrb	r3, [r3, r2]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d100      	bne.n	800b3ce <refrigera+0xe9a>
 800b3cc:	e0a5      	b.n	800b51a <refrigera+0xfe6>
				if(portX[rel_co]){ //btjt		PA_ODR,#rel_co,chkTimeDefi; / sí el compresor está encendido checa el tiempo para realizar mediciones de deficiencia, si está apagado manten cargado el tiempode deficiencia         RM_20220714 Cambio en pin de compresor pasa de PC a PA
 800b3ce:	4bbb      	ldr	r3, [pc, #748]	@ (800b6bc <refrigera+0x1188>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d120      	bne.n	800b418 <refrigera+0xee4>
				STM8_16_X = Plantilla[timeDefi] *60;
 800b3d6:	4bb8      	ldr	r3, [pc, #736]	@ (800b6b8 <refrigera+0x1184>)
 800b3d8:	224d      	movs	r2, #77	@ 0x4d
 800b3da:	5c9b      	ldrb	r3, [r3, r2]
 800b3dc:	001a      	movs	r2, r3
 800b3de:	233c      	movs	r3, #60	@ 0x3c
 800b3e0:	4353      	muls	r3, r2
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	4bb6      	ldr	r3, [pc, #728]	@ (800b6c0 <refrigera+0x118c>)
 800b3e6:	801a      	strh	r2, [r3, #0]
				if( STM8_16_X == cntDefi_H ){	// sí el contador viene con un valor distinto, entonces se apago compresor antes de que el contador llegara a cero
 800b3e8:	4bb5      	ldr	r3, [pc, #724]	@ (800b6c0 <refrigera+0x118c>)
 800b3ea:	881a      	ldrh	r2, [r3, #0]
 800b3ec:	4bb5      	ldr	r3, [pc, #724]	@ (800b6c4 <refrigera+0x1190>)
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d005      	beq.n	800b400 <refrigera+0xecc>
				if(Plantilla[numSens] == 3){ 	// se está trabajando con 3 sensores?
 800b3f4:	4bb0      	ldr	r3, [pc, #704]	@ (800b6b8 <refrigera+0x1184>)
 800b3f6:	2259      	movs	r2, #89	@ 0x59
 800b3f8:	5c9b      	ldrb	r3, [r3, r2]
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	d134      	bne.n	800b468 <refrigera+0xf34>
					goto chkTimeDefi_3s_01;		// Sí, realiza mediciones para 3 sensores unicamente
 800b3fe:	e05c      	b.n	800b4ba <refrigera+0xf86>
					goto loadDefiCnts;
 800b400:	46c0      	nop			@ (mov r8, r8)
				cntDefi_H = STM8_16_X;
 800b402:	4baf      	ldr	r3, [pc, #700]	@ (800b6c0 <refrigera+0x118c>)
 800b404:	881a      	ldrh	r2, [r3, #0]
 800b406:	4baf      	ldr	r3, [pc, #700]	@ (800b6c4 <refrigera+0x1190>)
 800b408:	801a      	strh	r2, [r3, #0]
				cntDefi1_H = STM8_16_X - 1;				// subw		X,#1
 800b40a:	4bad      	ldr	r3, [pc, #692]	@ (800b6c0 <refrigera+0x118c>)
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	3b01      	subs	r3, #1
 800b410:	b29a      	uxth	r2, r3
 800b412:	4bad      	ldr	r3, [pc, #692]	@ (800b6c8 <refrigera+0x1194>)
 800b414:	801a      	strh	r2, [r3, #0]
				goto noChkTimeDefi;
 800b416:	e085      	b.n	800b524 <refrigera+0xff0>
					goto chkTimeDefi;
 800b418:	46c0      	nop			@ (mov r8, r8)
				if(Plantilla[numSens] == 3){			/// se está trabajando con 3 sensores?
 800b41a:	4ba7      	ldr	r3, [pc, #668]	@ (800b6b8 <refrigera+0x1184>)
 800b41c:	2259      	movs	r2, #89	@ 0x59
 800b41e:	5c9b      	ldrb	r3, [r3, r2]
 800b420:	2b03      	cmp	r3, #3
 800b422:	d03c      	beq.n	800b49e <refrigera+0xf6a>
chkTimeDefi_1s:
 800b424:	46c0      	nop			@ (mov r8, r8)
 800b426:	e002      	b.n	800b42e <refrigera+0xefa>
                	   goto chkTimeDefi_1s;
 800b428:	46c0      	nop			@ (mov r8, r8)
 800b42a:	e000      	b.n	800b42e <refrigera+0xefa>
                	   goto chkTimeDefi_1s;
 800b42c:	46c0      	nop			@ (mov r8, r8)
                  if(trefst2[f_s3short]){	//btjt		trefst2,#f_s3short,noAlarmDefi;	Si hay alguna falla con el sensor ambiente cancela falla de deficiencia
 800b42e:	4ba7      	ldr	r3, [pc, #668]	@ (800b6cc <refrigera+0x1198>)
 800b430:	791b      	ldrb	r3, [r3, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d000      	beq.n	800b438 <refrigera+0xf04>
 800b436:	e067      	b.n	800b508 <refrigera+0xfd4>
                  if(trefst2[f_s3open]){//btjt trefst2,#f_s3open,noAlarmDefi
 800b438:	4ba4      	ldr	r3, [pc, #656]	@ (800b6cc <refrigera+0x1198>)
 800b43a:	795b      	ldrb	r3, [r3, #5]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d000      	beq.n	800b442 <refrigera+0xf0e>
 800b440:	e064      	b.n	800b50c <refrigera+0xfd8>
                  if(cntDefi_H != cntDefi1_H){ //cpw			X,cntDefi1_H;			/ es tiempo de realizar primera medición ?
 800b442:	4ba0      	ldr	r3, [pc, #640]	@ (800b6c4 <refrigera+0x1190>)
 800b444:	881a      	ldrh	r2, [r3, #0]
 800b446:	4ba0      	ldr	r3, [pc, #640]	@ (800b6c8 <refrigera+0x1194>)
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d106      	bne.n	800b45c <refrigera+0xf28>
                  tempDefi1 = tdev_to_Word();				// ldw	tempDefi1,X;
 800b44e:	f7fa fdef 	bl	8006030 <tdev_to_Word>
 800b452:	0003      	movs	r3, r0
 800b454:	b29a      	uxth	r2, r3
 800b456:	4b9e      	ldr	r3, [pc, #632]	@ (800b6d0 <refrigera+0x119c>)
 800b458:	801a      	strh	r2, [r3, #0]
                  goto finChkTimeDefi;						//jra			finChkTimeDefi;		/ continua
 800b45a:	e063      	b.n	800b524 <refrigera+0xff0>
                	  goto chkTimeDefi_1s_01; //jrne chkTimeDefi_1s_01
 800b45c:	46c0      	nop			@ (mov r8, r8)
                    if(cntDefi_H != 1){ //cpw X,#1
 800b45e:	4b99      	ldr	r3, [pc, #612]	@ (800b6c4 <refrigera+0x1190>)
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d15b      	bne.n	800b51e <refrigera+0xfea>
chkTimeDefi_1s_02:
 800b466:	e000      	b.n	800b46a <refrigera+0xf36>
				goto chkTimeDefi_1s_02;			//jra			chkTimeDefi_1s_02;	/ No, realiza la segunda medición de 1 sensor
 800b468:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tempDefi1;							//ldw			X,tempDefi1;			/ carga temperatura ambiente inicial (inicio del ciclo de compresor)
 800b46a:	4b99      	ldr	r3, [pc, #612]	@ (800b6d0 <refrigera+0x119c>)
 800b46c:	881a      	ldrh	r2, [r3, #0]
 800b46e:	4b94      	ldr	r3, [pc, #592]	@ (800b6c0 <refrigera+0x118c>)
 800b470:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tdev_to_Word();			//subw		X,tdevl;					/ resta temperatura ambiente actual (pasado el tiempo timeDefi de compresor encendido)
 800b472:	4b93      	ldr	r3, [pc, #588]	@ (800b6c0 <refrigera+0x118c>)
 800b474:	881c      	ldrh	r4, [r3, #0]
 800b476:	f7fa fddb 	bl	8006030 <tdev_to_Word>
 800b47a:	0003      	movs	r3, r0
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	1ae3      	subs	r3, r4, r3
 800b480:	b29a      	uxth	r2, r3
 800b482:	4b8f      	ldr	r3, [pc, #572]	@ (800b6c0 <refrigera+0x118c>)
 800b484:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){ // cpw X,difDefi		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800b486:	4b93      	ldr	r3, [pc, #588]	@ (800b6d4 <refrigera+0x11a0>)
 800b488:	0018      	movs	r0, r3
 800b48a:	f7fa fde9 	bl	8006060 <TwoByteInArrayToWord>
 800b48e:	0003      	movs	r3, r0
 800b490:	b21a      	sxth	r2, r3
 800b492:	4b8b      	ldr	r3, [pc, #556]	@ (800b6c0 <refrigera+0x118c>)
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	b21b      	sxth	r3, r3
 800b498:	429a      	cmp	r2, r3
 800b49a:	dc28      	bgt.n	800b4ee <refrigera+0xfba>
                    	goto noAlarmDefi; //jrsge noAlarmDefi;
 800b49c:	e039      	b.n	800b512 <refrigera+0xfde>
					goto chkTimeDefi_3s;				/// realiza mediciones para 3 sensores unicamente
 800b49e:	46c0      	nop			@ (mov r8, r8)
                   if(trefst2[f_s3short]){ //btjt trefst2,#f_s3short,chkTimeDefi_1s;	Si hay alguna falla con el sensor de salida de aire realiza mediciones con un solo sensor
 800b4a0:	4b8a      	ldr	r3, [pc, #552]	@ (800b6cc <refrigera+0x1198>)
 800b4a2:	791b      	ldrb	r3, [r3, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1bf      	bne.n	800b428 <refrigera+0xef4>
                   if(trefst2[f_s3open]){ //btjt trefst2,#f_s3open,chkTimeDefi_1s
 800b4a8:	4b88      	ldr	r3, [pc, #544]	@ (800b6cc <refrigera+0x1198>)
 800b4aa:	795b      	ldrb	r3, [r3, #5]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1bd      	bne.n	800b42c <refrigera+0xef8>
                   if(cntDefi_H != 1){ //cpw X,#1
 800b4b0:	4b84      	ldr	r3, [pc, #528]	@ (800b6c4 <refrigera+0x1190>)
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d134      	bne.n	800b522 <refrigera+0xfee>
chkTimeDefi_3s_01:
 800b4b8:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();			// carga temperatura ambiente
 800b4ba:	f7fa fdb9 	bl	8006030 <tdev_to_Word>
 800b4be:	0003      	movs	r3, r0
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	4b7f      	ldr	r3, [pc, #508]	@ (800b6c0 <refrigera+0x118c>)
 800b4c4:	801a      	strh	r2, [r3, #0]
					STM8_16_X = (int16_t)STM8_16_X - (int16_t)tret_w;		// subw		X,tret_w;				/ resta temperatura de salida de aire
 800b4c6:	4b7e      	ldr	r3, [pc, #504]	@ (800b6c0 <refrigera+0x118c>)
 800b4c8:	881a      	ldrh	r2, [r3, #0]
 800b4ca:	4b83      	ldr	r3, [pc, #524]	@ (800b6d8 <refrigera+0x11a4>)
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	4b7b      	ldr	r3, [pc, #492]	@ (800b6c0 <refrigera+0x118c>)
 800b4d4:	801a      	strh	r2, [r3, #0]
                    if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[difDefi_H])){	//jrsge		noAlarmDefi;		/	el diferencial es mayor al definido para alarma? Sí, sal sin alarma de deficiencia
 800b4d6:	4b7f      	ldr	r3, [pc, #508]	@ (800b6d4 <refrigera+0x11a0>)
 800b4d8:	0018      	movs	r0, r3
 800b4da:	f7fa fdc1 	bl	8006060 <TwoByteInArrayToWord>
 800b4de:	0003      	movs	r3, r0
 800b4e0:	b21a      	sxth	r2, r3
 800b4e2:	4b77      	ldr	r3, [pc, #476]	@ (800b6c0 <refrigera+0x118c>)
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	b21b      	sxth	r3, r3
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	dd11      	ble.n	800b510 <refrigera+0xfdc>
alarmDefi:
 800b4ec:	e000      	b.n	800b4f0 <refrigera+0xfbc>
                    goto alarmDefi;									//jra			alarmDefi;				/ No, activa alarma de deficiencia
 800b4ee:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi] = 1; //bset	trefst2,#f_defi;			// activa alarma de deficiencia
 800b4f0:	4b76      	ldr	r3, [pc, #472]	@ (800b6cc <refrigera+0x1198>)
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	719a      	strb	r2, [r3, #6]
                    interdhh = 0;//clr interdhh
 800b4f6:	4b79      	ldr	r3, [pc, #484]	@ (800b6dc <refrigera+0x11a8>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	701a      	strb	r2, [r3, #0]
                    latchtimeh = interdhh; //mov latchtimeh,interdhh
 800b4fc:	4b77      	ldr	r3, [pc, #476]	@ (800b6dc <refrigera+0x11a8>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	001a      	movs	r2, r3
 800b502:	4b77      	ldr	r3, [pc, #476]	@ (800b6e0 <refrigera+0x11ac>)
 800b504:	801a      	strh	r2, [r3, #0]
                    goto finChkTimeDefi; //jra	finChkTimeDefi
 800b506:	e00d      	b.n	800b524 <refrigera+0xff0>
                	  goto noAlarmDefi;
 800b508:	46c0      	nop			@ (mov r8, r8)
 800b50a:	e002      	b.n	800b512 <refrigera+0xfde>
                	  goto noAlarmDefi;
 800b50c:	46c0      	nop			@ (mov r8, r8)
 800b50e:	e000      	b.n	800b512 <refrigera+0xfde>
                    	goto noAlarmDefi;//jrsge noAlarmDefi;
 800b510:	46c0      	nop			@ (mov r8, r8)
					trefst2[f_defi]=0; //bres trefst2,#f_defi;		/// borra alarma de deficiencia
 800b512:	4b6e      	ldr	r3, [pc, #440]	@ (800b6cc <refrigera+0x1198>)
 800b514:	2200      	movs	r2, #0
 800b516:	719a      	strb	r2, [r3, #6]
 800b518:	e004      	b.n	800b524 <refrigera+0xff0>
					goto noChkTimeDefi; //jreq	noChkTimeDefi
 800b51a:	46c0      	nop			@ (mov r8, r8)
 800b51c:	e002      	b.n	800b524 <refrigera+0xff0>
                    	goto finChkTimeDefi;	//jrne		finChkTimeDefi;		/ es momento de realizar las últimas mediciones ? No,continúa
 800b51e:	46c0      	nop			@ (mov r8, r8)
 800b520:	e000      	b.n	800b524 <refrigera+0xff0>
                	   goto finChkTimeDefi; //jrne finChkTimeDefi			/ realiza mediciones solo en el último segundo del tiempo de deficiencia
 800b522:	46c0      	nop			@ (mov r8, r8)
					STM8_16_X = tdev_to_Word();	//ldw     X,waux
 800b524:	f7fa fd84 	bl	8006030 <tdev_to_Word>
 800b528:	0003      	movs	r3, r0
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	4b64      	ldr	r3, [pc, #400]	@ (800b6c0 <refrigera+0x118c>)
 800b52e:	801a      	strh	r2, [r3, #0]
					if((int16_t)STM8_16_X < (int16_t)TwoByteInArrayToWord (&Plantilla[defrResetTemp_H])){ //cpw X,defrResetTemp;
 800b530:	4b6c      	ldr	r3, [pc, #432]	@ (800b6e4 <refrigera+0x11b0>)
 800b532:	0018      	movs	r0, r3
 800b534:	f7fa fd94 	bl	8006060 <TwoByteInArrayToWord>
 800b538:	0003      	movs	r3, r0
 800b53a:	b21a      	sxth	r2, r3
 800b53c:	4b60      	ldr	r3, [pc, #384]	@ (800b6c0 <refrigera+0x118c>)
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	b21b      	sxth	r3, r3
 800b542:	429a      	cmp	r2, r3
 800b544:	dc02      	bgt.n	800b54c <refrigera+0x1018>
					ldadaptivo();		//call ldadaptivo				/// no, carga de nuevo el tiempo para entrar a deshielo (mínimo y máximo)
 800b546:	f7fa fdbb 	bl	80060c0 <ldadaptivo>
					goto defct10; //jra defct10;				//	/ omite entrada a deshielo por tiempo o temperatura
 800b54a:	e058      	b.n	800b5fe <refrigera+0x10ca>
						goto no_reset_interdh; //jrslt no_reset_interdh;		/ sí, pregunta si ya termino el interdeshielo
 800b54c:	46c0      	nop			@ (mov r8, r8)
                  if(Plantilla[numSens] == 1){ //cp A,#1
 800b54e:	4b5a      	ldr	r3, [pc, #360]	@ (800b6b8 <refrigera+0x1184>)
 800b550:	2259      	movs	r2, #89	@ 0x59
 800b552:	5c9b      	ldrb	r3, [r3, r2]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d03c      	beq.n	800b5d2 <refrigera+0x109e>
                  STM8_16_X = (uint16_t)(tdevl * 256) + (uint16_t)(tdevf);
 800b558:	4b63      	ldr	r3, [pc, #396]	@ (800b6e8 <refrigera+0x11b4>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	b29b      	uxth	r3, r3
 800b560:	4a62      	ldr	r2, [pc, #392]	@ (800b6ec <refrigera+0x11b8>)
 800b562:	7812      	ldrb	r2, [r2, #0]
 800b564:	189b      	adds	r3, r3, r2
 800b566:	b29a      	uxth	r2, r3
 800b568:	4b55      	ldr	r3, [pc, #340]	@ (800b6c0 <refrigera+0x118c>)
 800b56a:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_saa]){ //btjt	trefst,#f_saa,noDeshXTemp;
 800b56c:	4b60      	ldr	r3, [pc, #384]	@ (800b6f0 <refrigera+0x11bc>)
 800b56e:	785b      	ldrb	r3, [r3, #1]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d130      	bne.n	800b5d6 <refrigera+0x10a2>
                  if(trefst[f_sac]){ //btjt	trefst,#f_sac,noDeshXTemp;		/ ¿Falla en el sensor ambiente? Sí, no entres a deshielo por temperatura.
 800b574:	4b5e      	ldr	r3, [pc, #376]	@ (800b6f0 <refrigera+0x11bc>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d12e      	bne.n	800b5da <refrigera+0x10a6>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTempAmb_H])){ //cpw	X,defrStartTempAmb;   TEMP_ambiente < defrStartTempAmb programado
 800b57c:	4b5d      	ldr	r3, [pc, #372]	@ (800b6f4 <refrigera+0x11c0>)
 800b57e:	0018      	movs	r0, r3
 800b580:	f7fa fd6e 	bl	8006060 <TwoByteInArrayToWord>
 800b584:	0003      	movs	r3, r0
 800b586:	b21a      	sxth	r2, r3
 800b588:	4b4d      	ldr	r3, [pc, #308]	@ (800b6c0 <refrigera+0x118c>)
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	b21b      	sxth	r3, r3
 800b58e:	429a      	cmp	r2, r3
 800b590:	dd25      	ble.n	800b5de <refrigera+0x10aa>
                  STM8_16_X = (uint16_t)(teval * 256) + (uint16_t)(tevaf);
 800b592:	4b59      	ldr	r3, [pc, #356]	@ (800b6f8 <refrigera+0x11c4>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	021b      	lsls	r3, r3, #8
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4a58      	ldr	r2, [pc, #352]	@ (800b6fc <refrigera+0x11c8>)
 800b59c:	7812      	ldrb	r2, [r2, #0]
 800b59e:	189b      	adds	r3, r3, r2
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	4b47      	ldr	r3, [pc, #284]	@ (800b6c0 <refrigera+0x118c>)
 800b5a4:	801a      	strh	r2, [r3, #0]
                  if(trefst[f_sda]){//btjt	trefst,#f_sda,noDeshXTemp;
 800b5a6:	4b52      	ldr	r3, [pc, #328]	@ (800b6f0 <refrigera+0x11bc>)
 800b5a8:	78db      	ldrb	r3, [r3, #3]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d119      	bne.n	800b5e2 <refrigera+0x10ae>
                  if(trefst[f_sdc]){//btjt	trefst,#f_sdc,noDeshXTemp		/ ¿Falla en el sensor de evaporador? Sí, no entres a deshielo por temperatura.
 800b5ae:	4b50      	ldr	r3, [pc, #320]	@ (800b6f0 <refrigera+0x11bc>)
 800b5b0:	789b      	ldrb	r3, [r3, #2]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d117      	bne.n	800b5e6 <refrigera+0x10b2>
                  if((int16_t)STM8_16_X >= (int16_t)TwoByteInArrayToWord (&Plantilla[defrStartTemp_H])){//	cpw X,defrStartTemp;	TEMP_congelador < defrStartTemp programado
 800b5b6:	4b52      	ldr	r3, [pc, #328]	@ (800b700 <refrigera+0x11cc>)
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f7fa fd51 	bl	8006060 <TwoByteInArrayToWord>
 800b5be:	0003      	movs	r3, r0
 800b5c0:	b21a      	sxth	r2, r3
 800b5c2:	4b3f      	ldr	r3, [pc, #252]	@ (800b6c0 <refrigera+0x118c>)
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	b21b      	sxth	r3, r3
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	dd01      	ble.n	800b5d0 <refrigera+0x109c>
 800b5cc:	f7ff f9ff 	bl	800a9ce <refrigera+0x49a>
                	  goto noDeshXTemp;//jrsge noDeshXTemp
 800b5d0:	e00a      	b.n	800b5e8 <refrigera+0x10b4>
                	  goto noDeshXTemp;//jreq noDeshXTemp;   / Si el número de sensores con el que trabaja es 1, no revises temperatura de evaporador para entrar a deshielo
 800b5d2:	46c0      	nop			@ (mov r8, r8)
 800b5d4:	e008      	b.n	800b5e8 <refrigera+0x10b4>
                	  goto noDeshXTemp;
 800b5d6:	46c0      	nop			@ (mov r8, r8)
 800b5d8:	e006      	b.n	800b5e8 <refrigera+0x10b4>
                	  goto noDeshXTemp;
 800b5da:	46c0      	nop			@ (mov r8, r8)
 800b5dc:	e004      	b.n	800b5e8 <refrigera+0x10b4>
                	  goto noDeshXTemp; //jrsge	noDeshXTemp
 800b5de:	46c0      	nop			@ (mov r8, r8)
 800b5e0:	e002      	b.n	800b5e8 <refrigera+0x10b4>
                	  goto noDeshXTemp;
 800b5e2:	46c0      	nop			@ (mov r8, r8)
 800b5e4:	e000      	b.n	800b5e8 <refrigera+0x10b4>
                	  goto noDeshXTemp;
 800b5e6:	46c0      	nop			@ (mov r8, r8)
				buildmode();		//call buildmode	/ Construye el modo de cambio de estado para la rutina refrigera
 800b5e8:	f7fb fcd6 	bl	8006f98 <buildmode>
				if(!GetRegFlagState(modo, 0)){//btjf modo,#0,control_j06;		/ Es el modo xxxxxxx1?
 800b5ec:	4b45      	ldr	r3, [pc, #276]	@ (800b704 <refrigera+0x11d0>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	001a      	movs	r2, r3
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	d001      	beq.n	800b5fc <refrigera+0x10c8>
 800b5f8:	f7ff f9eb 	bl	800a9d2 <refrigera+0x49e>
            	   goto control_j06;
 800b5fc:	46c0      	nop			@ (mov r8, r8)
				if(minfunc != 0){ //tnz minfunc
 800b5fe:	4b42      	ldr	r3, [pc, #264]	@ (800b708 <refrigera+0x11d4>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d108      	bne.n	800b618 <refrigera+0x10e4>
				if(!flags_accMenu){ //btjf flags_accMenu,#0,control_j07	/ ¿deshielo forzado por selección de menú?
 800b606:	4b41      	ldr	r3, [pc, #260]	@ (800b70c <refrigera+0x11d8>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d007      	beq.n	800b61e <refrigera+0x10ea>
				flags_accMenu = 0;//  //bres flags_accMenu,#0
 800b60e:	4b3f      	ldr	r3, [pc, #252]	@ (800b70c <refrigera+0x11d8>)
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
            	goto todh; //	jp			todh;			/ Si, cambia al estado de deshielo
 800b614:	f7ff f9de 	bl	800a9d4 <refrigera+0x4a0>
					goto finctl; //jrne	finctl;
 800b618:	46c0      	nop			@ (mov r8, r8)
 800b61a:	f7ff fa0c 	bl	800aa36 <refrigera+0x502>
            		goto control_j07;
 800b61e:	46c0      	nop			@ (mov r8, r8)
finctl:       	 goto finref;
 800b620:	f7ff fa09 	bl	800aa36 <refrigera+0x502>
				if(Plantilla[dhmode] != 0x01){	// Es deshielo por válvula?
 800b624:	4b24      	ldr	r3, [pc, #144]	@ (800b6b8 <refrigera+0x1184>)
 800b626:	2255      	movs	r2, #85	@ 0x55
 800b628:	5c9b      	ldrb	r3, [r3, r2]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d103      	bne.n	800b636 <refrigera+0x1102>
				GPIOR0[f_comp] = 1;				//bset		GPIOR0,#f_comp;	/ Enciende el compresor para que circule el gas
 800b62e:	4b38      	ldr	r3, [pc, #224]	@ (800b710 <refrigera+0x11dc>)
 800b630:	2201      	movs	r2, #1
 800b632:	701a      	strb	r2, [r3, #0]
 800b634:	e000      	b.n	800b638 <refrigera+0x1104>
					goto deshie20;				/// No
 800b636:	46c0      	nop			@ (mov r8, r8)
deshie20:       if(Plantilla[dhmode] != 0){		// Es deshielo por circulación de aire?
 800b638:	4b1f      	ldr	r3, [pc, #124]	@ (800b6b8 <refrigera+0x1184>)
 800b63a:	2255      	movs	r2, #85	@ 0x55
 800b63c:	5c9b      	ldrb	r3, [r3, r2]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d114      	bne.n	800b66c <refrigera+0x1138>
deshXvent:
 800b642:	46c0      	nop			@ (mov r8, r8)
				if(GetRegFlagState(Plantilla[logicos2], ventDoorOFF)){ //btjt		logicos2,#ventDoorOFF,deshie24; / sí los parámetros de configuración lo indican ignora el control de ventilador por puerta
 800b644:	4b1c      	ldr	r3, [pc, #112]	@ (800b6b8 <refrigera+0x1184>)
 800b646:	225b      	movs	r2, #91	@ 0x5b
 800b648:	5c9b      	ldrb	r3, [r3, r2]
 800b64a:	001a      	movs	r2, r3
 800b64c:	2302      	movs	r3, #2
 800b64e:	4013      	ands	r3, r2
 800b650:	d104      	bne.n	800b65c <refrigera+0x1128>
				if(retvent != 0){ //tnz retvent
 800b652:	4b30      	ldr	r3, [pc, #192]	@ (800b714 <refrigera+0x11e0>)
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10d      	bne.n	800b676 <refrigera+0x1142>
deshie24:
 800b65a:	e000      	b.n	800b65e <refrigera+0x112a>
					goto deshie24;
 800b65c:	46c0      	nop			@ (mov r8, r8)
             	 GPIOR1[f_fan] = 1;				/// bset		GPIOR1,#f_fan;	/ Enciende la Función de ventilador
 800b65e:	4b2e      	ldr	r3, [pc, #184]	@ (800b718 <refrigera+0x11e4>)
 800b660:	2201      	movs	r2, #1
 800b662:	701a      	strb	r2, [r3, #0]
             	 datled[luzF] = 1;			// 	bset		datled,#luzF
 800b664:	4b2d      	ldr	r3, [pc, #180]	@ (800b71c <refrigera+0x11e8>)
 800b666:	2201      	movs	r2, #1
 800b668:	71da      	strb	r2, [r3, #7]
             	 goto deshie30;					//	jra			deshie30
 800b66a:	e005      	b.n	800b678 <refrigera+0x1144>
					goto deshie25;				//;		/ No, acciona el deshielo
 800b66c:	46c0      	nop			@ (mov r8, r8)
deshie25:        GPIOR0[f_dh] = 1;				//bset		GPIOR0,#f_dh;	/ Enciende la Función de deshielo
 800b66e:	4b28      	ldr	r3, [pc, #160]	@ (800b710 <refrigera+0x11dc>)
 800b670:	2201      	movs	r2, #1
 800b672:	705a      	strb	r2, [r3, #1]
 800b674:	e000      	b.n	800b678 <refrigera+0x1144>
					goto deshie30; //jrne		deshie30;		/ No, espera
 800b676:	46c0      	nop			@ (mov r8, r8)
deshie30:        holdseg = 0;						//clr			holdseg;		/ Para iniciar desde cero segundos
 800b678:	4b29      	ldr	r3, [pc, #164]	@ (800b720 <refrigera+0x11ec>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	701a      	strb	r2, [r3, #0]
				 cnthold = Plantilla[timeHold];		// mov			cnthold,timeHold;		/ Carga el contador con tiempo de bloqueo despues de deshielo (15 minutos)
 800b67e:	4b0e      	ldr	r3, [pc, #56]	@ (800b6b8 <refrigera+0x1184>)
 800b680:	224c      	movs	r2, #76	@ 0x4c
 800b682:	5c9a      	ldrb	r2, [r3, r2]
 800b684:	4b27      	ldr	r3, [pc, #156]	@ (800b724 <refrigera+0x11f0>)
 800b686:	701a      	strb	r2, [r3, #0]
				 latchtimeh = durdhh;				//mov			latchtimeh,durdhh;/ Copia el tiempo que esta corriendo para el estado vigente
 800b688:	4b27      	ldr	r3, [pc, #156]	@ (800b728 <refrigera+0x11f4>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	001a      	movs	r2, r3
 800b68e:	4b14      	ldr	r3, [pc, #80]	@ (800b6e0 <refrigera+0x11ac>)
 800b690:	801a      	strh	r2, [r3, #0]
defadh:	         buildmode();				//call		buildmode;		/ Construye el modo de cambio de estado para la rutina refrigera
 800b692:	f7fb fc81 	bl	8006f98 <buildmode>
				 if((0x13 & modo ) == 0){
 800b696:	4b1b      	ldr	r3, [pc, #108]	@ (800b704 <refrigera+0x11d0>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2213      	movs	r2, #19
 800b69c:	4013      	ands	r3, r2
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <refrigera+0x1174>
 800b6a4:	f7ff f96b 	bl	800a97e <refrigera+0x44a>
					goto defadh10;				//jreq		defadh10;		/ No, revisa otra condición
 800b6a8:	46c0      	nop			@ (mov r8, r8)

defadh10:	     if(minfunc != 0){
					goto finadh;				//jrne		finadh;			/ No, esperate
             	 }

finadh:		     goto finref;
 800b6aa:	46c0      	nop			@ (mov r8, r8)
 800b6ac:	f7ff f9c3 	bl	800aa36 <refrigera+0x502>


main_refrigera:


}
 800b6b0:	46c0      	nop			@ (mov r8, r8)
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	b007      	add	sp, #28
 800b6b6:	bd90      	pop	{r4, r7, pc}
 800b6b8:	200000b8 	.word	0x200000b8
 800b6bc:	20000b58 	.word	0x20000b58
 800b6c0:	200008d2 	.word	0x200008d2
 800b6c4:	20000c36 	.word	0x20000c36
 800b6c8:	20000c3a 	.word	0x20000c3a
 800b6cc:	20000b80 	.word	0x20000b80
 800b6d0:	20000c38 	.word	0x20000c38
 800b6d4:	200000eb 	.word	0x200000eb
 800b6d8:	20000c54 	.word	0x20000c54
 800b6dc:	20000bb6 	.word	0x20000bb6
 800b6e0:	20000bba 	.word	0x20000bba
 800b6e4:	200000cb 	.word	0x200000cb
 800b6e8:	20000bb0 	.word	0x20000bb0
 800b6ec:	20000bb1 	.word	0x20000bb1
 800b6f0:	20000b88 	.word	0x20000b88
 800b6f4:	200000cf 	.word	0x200000cf
 800b6f8:	20000bb2 	.word	0x20000bb2
 800b6fc:	20000bb3 	.word	0x20000bb3
 800b700:	200000cd 	.word	0x200000cd
 800b704:	20000b52 	.word	0x20000b52
 800b708:	20000b6b 	.word	0x20000b6b
 800b70c:	20000c50 	.word	0x20000c50
 800b710:	20000ba4 	.word	0x20000ba4
 800b714:	20000b6a 	.word	0x20000b6a
 800b718:	20000be0 	.word	0x20000be0
 800b71c:	20000b90 	.word	0x20000b90
 800b720:	20000b53 	.word	0x20000b53
 800b724:	20000bc7 	.word	0x20000bc7
 800b728:	20000bb8 	.word	0x20000bb8

0800b72c <st_refri>:

void st_refri (void)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	af00      	add	r7, sp, #0
    GPIOR0[f_comp] = 0;					//bres		GPIOR0,#f_comp
 800b730:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <st_refri+0x30>)
 800b732:	2200      	movs	r2, #0
 800b734:	701a      	strb	r2, [r3, #0]
    GPIOR0[f_dh] = 0;					//bres		GPIOR0,#f_dh
 800b736:	4b09      	ldr	r3, [pc, #36]	@ (800b75c <st_refri+0x30>)
 800b738:	2200      	movs	r2, #0
 800b73a:	705a      	strb	r2, [r3, #1]
    GPIOR0[f_lamp] = 0;					//bres		GPIOR0,#f_lamp
 800b73c:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <st_refri+0x30>)
 800b73e:	2200      	movs	r2, #0
 800b740:	709a      	strb	r2, [r3, #2]
    //;mov			colorPredef,#7;				/ Si el estado de la lámpara es Off apaga la lámpara vía comunicación
    GPIOR1[f_fan] = 0;					//bres		GPIOR1,#f_fan		;manten las cargas apagadas
 800b742:	4b07      	ldr	r3, [pc, #28]	@ (800b760 <st_refri+0x34>)
 800b744:	2200      	movs	r2, #0
 800b746:	701a      	strb	r2, [r3, #0]
    minbrake_load();		//call minbrake_load
 800b748:	f7fa fd2a 	bl	80061a0 <minbrake_load>
    edorefri = 0x02;						/// manten equipo en estado de Control
 800b74c:	4b05      	ldr	r3, [pc, #20]	@ (800b764 <st_refri+0x38>)
 800b74e:	2202      	movs	r2, #2
 800b750:	701a      	strb	r2, [r3, #0]
    ldadaptivo();		//call ldadaptivo					/// manten cargado el tiempo entre deshielo
 800b752:	f7fa fcb5 	bl	80060c0 <ldadaptivo>
}
 800b756:	46c0      	nop			@ (mov r8, r8)
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000ba4 	.word	0x20000ba4
 800b760:	20000be0 	.word	0x20000be0
 800b764:	20000b98 	.word	0x20000b98

0800b768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b76e:	4b0f      	ldr	r3, [pc, #60]	@ (800b7ac <HAL_MspInit+0x44>)
 800b770:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b772:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ac <HAL_MspInit+0x44>)
 800b774:	2180      	movs	r1, #128	@ 0x80
 800b776:	0549      	lsls	r1, r1, #21
 800b778:	430a      	orrs	r2, r1
 800b77a:	659a      	str	r2, [r3, #88]	@ 0x58
 800b77c:	4b0b      	ldr	r3, [pc, #44]	@ (800b7ac <HAL_MspInit+0x44>)
 800b77e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b780:	2380      	movs	r3, #128	@ 0x80
 800b782:	055b      	lsls	r3, r3, #21
 800b784:	4013      	ands	r3, r2
 800b786:	607b      	str	r3, [r7, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b78a:	4b08      	ldr	r3, [pc, #32]	@ (800b7ac <HAL_MspInit+0x44>)
 800b78c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b78e:	4b07      	ldr	r3, [pc, #28]	@ (800b7ac <HAL_MspInit+0x44>)
 800b790:	2101      	movs	r1, #1
 800b792:	430a      	orrs	r2, r1
 800b794:	661a      	str	r2, [r3, #96]	@ 0x60
 800b796:	4b05      	ldr	r3, [pc, #20]	@ (800b7ac <HAL_MspInit+0x44>)
 800b798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b79a:	2201      	movs	r2, #1
 800b79c:	4013      	ands	r3, r2
 800b79e:	603b      	str	r3, [r7, #0]
 800b7a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b7a2:	46c0      	nop			@ (mov r8, r8)
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	b002      	add	sp, #8
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	46c0      	nop			@ (mov r8, r8)
 800b7ac:	40021000 	.word	0x40021000

0800b7b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b7b0:	b590      	push	{r4, r7, lr}
 800b7b2:	b09d      	sub	sp, #116	@ 0x74
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7b8:	235c      	movs	r3, #92	@ 0x5c
 800b7ba:	18fb      	adds	r3, r7, r3
 800b7bc:	0018      	movs	r0, r3
 800b7be:	2314      	movs	r3, #20
 800b7c0:	001a      	movs	r2, r3
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	f00f face 	bl	801ad64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b7c8:	2418      	movs	r4, #24
 800b7ca:	193b      	adds	r3, r7, r4
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	2344      	movs	r3, #68	@ 0x44
 800b7d0:	001a      	movs	r2, r3
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	f00f fac6 	bl	801ad64 <memset>
  if(hadc->Instance==ADC1)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a3b      	ldr	r2, [pc, #236]	@ (800b8cc <HAL_ADC_MspInit+0x11c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d16f      	bne.n	800b8c2 <HAL_ADC_MspInit+0x112>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b7e2:	193b      	adds	r3, r7, r4
 800b7e4:	2280      	movs	r2, #128	@ 0x80
 800b7e6:	01d2      	lsls	r2, r2, #7
 800b7e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800b7ea:	193b      	adds	r3, r7, r4
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b7f0:	193b      	adds	r3, r7, r4
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	f00a fff2 	bl	80167dc <HAL_RCCEx_PeriphCLKConfig>
 800b7f8:	1e03      	subs	r3, r0, #0
 800b7fa:	d001      	beq.n	800b800 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800b7fc:	f7fe fcf4 	bl	800a1e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800b800:	4b33      	ldr	r3, [pc, #204]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b802:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b804:	4b32      	ldr	r3, [pc, #200]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b806:	2180      	movs	r1, #128	@ 0x80
 800b808:	0349      	lsls	r1, r1, #13
 800b80a:	430a      	orrs	r2, r1
 800b80c:	661a      	str	r2, [r3, #96]	@ 0x60
 800b80e:	4b30      	ldr	r3, [pc, #192]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b810:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b812:	2380      	movs	r3, #128	@ 0x80
 800b814:	035b      	lsls	r3, r3, #13
 800b816:	4013      	ands	r3, r2
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b81c:	4b2c      	ldr	r3, [pc, #176]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b81e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b820:	4b2b      	ldr	r3, [pc, #172]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b822:	2104      	movs	r1, #4
 800b824:	430a      	orrs	r2, r1
 800b826:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b828:	4b29      	ldr	r3, [pc, #164]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b82a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b82c:	2204      	movs	r2, #4
 800b82e:	4013      	ands	r3, r2
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b834:	4b26      	ldr	r3, [pc, #152]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b838:	4b25      	ldr	r3, [pc, #148]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b83a:	2101      	movs	r1, #1
 800b83c:	430a      	orrs	r2, r1
 800b83e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b840:	4b23      	ldr	r3, [pc, #140]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b844:	2201      	movs	r2, #1
 800b846:	4013      	ands	r3, r2
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b84c:	4b20      	ldr	r3, [pc, #128]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b84e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b850:	4b1f      	ldr	r3, [pc, #124]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b852:	2102      	movs	r1, #2
 800b854:	430a      	orrs	r2, r1
 800b856:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b858:	4b1d      	ldr	r3, [pc, #116]	@ (800b8d0 <HAL_ADC_MspInit+0x120>)
 800b85a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b85c:	2202      	movs	r2, #2
 800b85e:	4013      	ands	r3, r2
 800b860:	60bb      	str	r3, [r7, #8]
 800b862:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN9
    PA6     ------> ADC1_IN10
    PA7     ------> ADC1_IN14
    PB1     ------> ADC1_IN18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b864:	245c      	movs	r4, #92	@ 0x5c
 800b866:	193b      	adds	r3, r7, r4
 800b868:	2203      	movs	r2, #3
 800b86a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b86c:	193b      	adds	r3, r7, r4
 800b86e:	2203      	movs	r2, #3
 800b870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b872:	193b      	adds	r3, r7, r4
 800b874:	2200      	movs	r2, #0
 800b876:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b878:	193b      	adds	r3, r7, r4
 800b87a:	4a16      	ldr	r2, [pc, #88]	@ (800b8d4 <HAL_ADC_MspInit+0x124>)
 800b87c:	0019      	movs	r1, r3
 800b87e:	0010      	movs	r0, r2
 800b880:	f007 fcac 	bl	80131dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b884:	193b      	adds	r3, r7, r4
 800b886:	22e0      	movs	r2, #224	@ 0xe0
 800b888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b88a:	193b      	adds	r3, r7, r4
 800b88c:	2203      	movs	r2, #3
 800b88e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b890:	193b      	adds	r3, r7, r4
 800b892:	2200      	movs	r2, #0
 800b894:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b896:	193a      	adds	r2, r7, r4
 800b898:	23a0      	movs	r3, #160	@ 0xa0
 800b89a:	05db      	lsls	r3, r3, #23
 800b89c:	0011      	movs	r1, r2
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f007 fc9c 	bl	80131dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b8a4:	193b      	adds	r3, r7, r4
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b8aa:	193b      	adds	r3, r7, r4
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b0:	193b      	adds	r3, r7, r4
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8b6:	193b      	adds	r3, r7, r4
 800b8b8:	4a07      	ldr	r2, [pc, #28]	@ (800b8d8 <HAL_ADC_MspInit+0x128>)
 800b8ba:	0019      	movs	r1, r3
 800b8bc:	0010      	movs	r0, r2
 800b8be:	f007 fc8d 	bl	80131dc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800b8c2:	46c0      	nop			@ (mov r8, r8)
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	b01d      	add	sp, #116	@ 0x74
 800b8c8:	bd90      	pop	{r4, r7, pc}
 800b8ca:	46c0      	nop			@ (mov r8, r8)
 800b8cc:	40012400 	.word	0x40012400
 800b8d0:	40021000 	.word	0x40021000
 800b8d4:	50000800 	.word	0x50000800
 800b8d8:	50000400 	.word	0x50000400

0800b8dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b8dc:	b590      	push	{r4, r7, lr}
 800b8de:	b09b      	sub	sp, #108	@ 0x6c
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8e4:	2354      	movs	r3, #84	@ 0x54
 800b8e6:	18fb      	adds	r3, r7, r3
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	2314      	movs	r3, #20
 800b8ec:	001a      	movs	r2, r3
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	f00f fa38 	bl	801ad64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b8f4:	2410      	movs	r4, #16
 800b8f6:	193b      	adds	r3, r7, r4
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	2344      	movs	r3, #68	@ 0x44
 800b8fc:	001a      	movs	r2, r3
 800b8fe:	2100      	movs	r1, #0
 800b900:	f00f fa30 	bl	801ad64 <memset>
  if(hi2c->Instance==I2C1)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a50      	ldr	r2, [pc, #320]	@ (800ba4c <HAL_I2C_MspInit+0x170>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d000      	beq.n	800b910 <HAL_I2C_MspInit+0x34>
 800b90e:	e099      	b.n	800ba44 <HAL_I2C_MspInit+0x168>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800b910:	193b      	adds	r3, r7, r4
 800b912:	2220      	movs	r2, #32
 800b914:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800b916:	193b      	adds	r3, r7, r4
 800b918:	2280      	movs	r2, #128	@ 0x80
 800b91a:	0192      	lsls	r2, r2, #6
 800b91c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b91e:	193b      	adds	r3, r7, r4
 800b920:	0018      	movs	r0, r3
 800b922:	f00a ff5b 	bl	80167dc <HAL_RCCEx_PeriphCLKConfig>
 800b926:	1e03      	subs	r3, r0, #0
 800b928:	d001      	beq.n	800b92e <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800b92a:	f7fe fc5d 	bl	800a1e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b92e:	4b48      	ldr	r3, [pc, #288]	@ (800ba50 <HAL_I2C_MspInit+0x174>)
 800b930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b932:	4b47      	ldr	r3, [pc, #284]	@ (800ba50 <HAL_I2C_MspInit+0x174>)
 800b934:	2102      	movs	r1, #2
 800b936:	430a      	orrs	r2, r1
 800b938:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b93a:	4b45      	ldr	r3, [pc, #276]	@ (800ba50 <HAL_I2C_MspInit+0x174>)
 800b93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b93e:	2202      	movs	r2, #2
 800b940:	4013      	ands	r3, r2
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b946:	2154      	movs	r1, #84	@ 0x54
 800b948:	187b      	adds	r3, r7, r1
 800b94a:	22c0      	movs	r2, #192	@ 0xc0
 800b94c:	0092      	lsls	r2, r2, #2
 800b94e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b950:	187b      	adds	r3, r7, r1
 800b952:	2212      	movs	r2, #18
 800b954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b956:	187b      	adds	r3, r7, r1
 800b958:	2200      	movs	r2, #0
 800b95a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b95c:	187b      	adds	r3, r7, r1
 800b95e:	2203      	movs	r2, #3
 800b960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b962:	187b      	adds	r3, r7, r1
 800b964:	2204      	movs	r2, #4
 800b966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b968:	187b      	adds	r3, r7, r1
 800b96a:	4a3a      	ldr	r2, [pc, #232]	@ (800ba54 <HAL_I2C_MspInit+0x178>)
 800b96c:	0019      	movs	r1, r3
 800b96e:	0010      	movs	r0, r2
 800b970:	f007 fc34 	bl	80131dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b974:	4b36      	ldr	r3, [pc, #216]	@ (800ba50 <HAL_I2C_MspInit+0x174>)
 800b976:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b978:	4b35      	ldr	r3, [pc, #212]	@ (800ba50 <HAL_I2C_MspInit+0x174>)
 800b97a:	2180      	movs	r1, #128	@ 0x80
 800b97c:	0389      	lsls	r1, r1, #14
 800b97e:	430a      	orrs	r2, r1
 800b980:	659a      	str	r2, [r3, #88]	@ 0x58
 800b982:	4b33      	ldr	r3, [pc, #204]	@ (800ba50 <HAL_I2C_MspInit+0x174>)
 800b984:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b986:	2380      	movs	r3, #128	@ 0x80
 800b988:	039b      	lsls	r3, r3, #14
 800b98a:	4013      	ands	r3, r2
 800b98c:	60bb      	str	r3, [r7, #8]
 800b98e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800b990:	4b31      	ldr	r3, [pc, #196]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b992:	4a32      	ldr	r2, [pc, #200]	@ (800ba5c <HAL_I2C_MspInit+0x180>)
 800b994:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800b996:	4b30      	ldr	r3, [pc, #192]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b998:	2209      	movs	r2, #9
 800b99a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b99c:	4b2e      	ldr	r3, [pc, #184]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b9a2:	4b2d      	ldr	r3, [pc, #180]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b9a8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9aa:	2280      	movs	r2, #128	@ 0x80
 800b9ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b9ae:	4b2a      	ldr	r3, [pc, #168]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b9b4:	4b28      	ldr	r3, [pc, #160]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800b9ba:	4b27      	ldr	r3, [pc, #156]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b9c0:	4b25      	ldr	r3, [pc, #148]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800b9c6:	4b24      	ldr	r3, [pc, #144]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9c8:	0018      	movs	r0, r3
 800b9ca:	f006 fe5b 	bl	8012684 <HAL_DMA_Init>
 800b9ce:	1e03      	subs	r3, r0, #0
 800b9d0:	d001      	beq.n	800b9d6 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800b9d2:	f7fe fc09 	bl	800a1e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a1f      	ldr	r2, [pc, #124]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9da:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b9dc:	4b1e      	ldr	r3, [pc, #120]	@ (800ba58 <HAL_I2C_MspInit+0x17c>)
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800b9e2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800b9e4:	4a1f      	ldr	r2, [pc, #124]	@ (800ba64 <HAL_I2C_MspInit+0x188>)
 800b9e6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800b9e8:	4b1d      	ldr	r3, [pc, #116]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800b9ea:	220a      	movs	r2, #10
 800b9ec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b9ee:	4b1c      	ldr	r3, [pc, #112]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800b9f0:	2210      	movs	r2, #16
 800b9f2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b9fa:	4b19      	ldr	r3, [pc, #100]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800b9fc:	2280      	movs	r2, #128	@ 0x80
 800b9fe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba00:	4b17      	ldr	r3, [pc, #92]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba06:	4b16      	ldr	r3, [pc, #88]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800ba0c:	4b14      	ldr	r3, [pc, #80]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ba12:	4b13      	ldr	r3, [pc, #76]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800ba18:	4b11      	ldr	r3, [pc, #68]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	f006 fe32 	bl	8012684 <HAL_DMA_Init>
 800ba20:	1e03      	subs	r3, r0, #0
 800ba22:	d001      	beq.n	800ba28 <HAL_I2C_MspInit+0x14c>
    {
      Error_Handler();
 800ba24:	f7fe fbe0 	bl	800a1e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a0d      	ldr	r2, [pc, #52]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800ba2c:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba60 <HAL_I2C_MspInit+0x184>)
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800ba34:	2200      	movs	r2, #0
 800ba36:	2100      	movs	r1, #0
 800ba38:	2017      	movs	r0, #23
 800ba3a:	f006 fde1 	bl	8012600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800ba3e:	2017      	movs	r0, #23
 800ba40:	f006 fdf3 	bl	801262a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800ba44:	46c0      	nop			@ (mov r8, r8)
 800ba46:	46bd      	mov	sp, r7
 800ba48:	b01b      	add	sp, #108	@ 0x6c
 800ba4a:	bd90      	pop	{r4, r7, pc}
 800ba4c:	40005400 	.word	0x40005400
 800ba50:	40021000 	.word	0x40021000
 800ba54:	50000400 	.word	0x50000400
 800ba58:	2000048c 	.word	0x2000048c
 800ba5c:	40020080 	.word	0x40020080
 800ba60:	200004ec 	.word	0x200004ec
 800ba64:	4002006c 	.word	0x4002006c

0800ba68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a13      	ldr	r2, [pc, #76]	@ (800bac4 <HAL_I2C_MspDeInit+0x5c>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d120      	bne.n	800babc <HAL_I2C_MspDeInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800ba7a:	4b13      	ldr	r3, [pc, #76]	@ (800bac8 <HAL_I2C_MspDeInit+0x60>)
 800ba7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ba7e:	4b12      	ldr	r3, [pc, #72]	@ (800bac8 <HAL_I2C_MspDeInit+0x60>)
 800ba80:	4912      	ldr	r1, [pc, #72]	@ (800bacc <HAL_I2C_MspDeInit+0x64>)
 800ba82:	400a      	ands	r2, r1
 800ba84:	659a      	str	r2, [r3, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800ba86:	2380      	movs	r3, #128	@ 0x80
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	4a11      	ldr	r2, [pc, #68]	@ (800bad0 <HAL_I2C_MspDeInit+0x68>)
 800ba8c:	0019      	movs	r1, r3
 800ba8e:	0010      	movs	r0, r2
 800ba90:	f007 fd18 	bl	80134c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800ba94:	2380      	movs	r3, #128	@ 0x80
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	4a0d      	ldr	r2, [pc, #52]	@ (800bad0 <HAL_I2C_MspDeInit+0x68>)
 800ba9a:	0019      	movs	r1, r3
 800ba9c:	0010      	movs	r0, r2
 800ba9e:	f007 fd11 	bl	80134c4 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baa6:	0018      	movs	r0, r3
 800baa8:	f006 fe98 	bl	80127dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab0:	0018      	movs	r0, r3
 800bab2:	f006 fe93 	bl	80127dc <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800bab6:	2017      	movs	r0, #23
 800bab8:	f006 fdc7 	bl	801264a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800babc:	46c0      	nop			@ (mov r8, r8)
 800babe:	46bd      	mov	sp, r7
 800bac0:	b002      	add	sp, #8
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	40005400 	.word	0x40005400
 800bac8:	40021000 	.word	0x40021000
 800bacc:	ffdfffff 	.word	0xffdfffff
 800bad0:	50000400 	.word	0x50000400

0800bad4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b095      	sub	sp, #84	@ 0x54
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800badc:	240c      	movs	r4, #12
 800bade:	193b      	adds	r3, r7, r4
 800bae0:	0018      	movs	r0, r3
 800bae2:	2344      	movs	r3, #68	@ 0x44
 800bae4:	001a      	movs	r2, r3
 800bae6:	2100      	movs	r1, #0
 800bae8:	f00f f93c 	bl	801ad64 <memset>
  if(hrtc->Instance==RTC)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a1a      	ldr	r2, [pc, #104]	@ (800bb5c <HAL_RTC_MspInit+0x88>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d12e      	bne.n	800bb54 <HAL_RTC_MspInit+0x80>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800baf6:	193b      	adds	r3, r7, r4
 800baf8:	2280      	movs	r2, #128	@ 0x80
 800bafa:	0212      	lsls	r2, r2, #8
 800bafc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800bafe:	193b      	adds	r3, r7, r4
 800bb00:	2280      	movs	r2, #128	@ 0x80
 800bb02:	0092      	lsls	r2, r2, #2
 800bb04:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb06:	193b      	adds	r3, r7, r4
 800bb08:	0018      	movs	r0, r3
 800bb0a:	f00a fe67 	bl	80167dc <HAL_RCCEx_PeriphCLKConfig>
 800bb0e:	1e03      	subs	r3, r0, #0
 800bb10:	d001      	beq.n	800bb16 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800bb12:	f7fe fb69 	bl	800a1e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bb16:	4a12      	ldr	r2, [pc, #72]	@ (800bb60 <HAL_RTC_MspInit+0x8c>)
 800bb18:	2390      	movs	r3, #144	@ 0x90
 800bb1a:	58d3      	ldr	r3, [r2, r3]
 800bb1c:	4910      	ldr	r1, [pc, #64]	@ (800bb60 <HAL_RTC_MspInit+0x8c>)
 800bb1e:	2280      	movs	r2, #128	@ 0x80
 800bb20:	0212      	lsls	r2, r2, #8
 800bb22:	4313      	orrs	r3, r2
 800bb24:	2290      	movs	r2, #144	@ 0x90
 800bb26:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800bb28:	4b0d      	ldr	r3, [pc, #52]	@ (800bb60 <HAL_RTC_MspInit+0x8c>)
 800bb2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb2c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb60 <HAL_RTC_MspInit+0x8c>)
 800bb2e:	2180      	movs	r1, #128	@ 0x80
 800bb30:	00c9      	lsls	r1, r1, #3
 800bb32:	430a      	orrs	r2, r1
 800bb34:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb36:	4b0a      	ldr	r3, [pc, #40]	@ (800bb60 <HAL_RTC_MspInit+0x8c>)
 800bb38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb3a:	2380      	movs	r3, #128	@ 0x80
 800bb3c:	00db      	lsls	r3, r3, #3
 800bb3e:	4013      	ands	r3, r2
 800bb40:	60bb      	str	r3, [r7, #8]
 800bb42:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800bb44:	2200      	movs	r2, #0
 800bb46:	2100      	movs	r1, #0
 800bb48:	2002      	movs	r0, #2
 800bb4a:	f006 fd59 	bl	8012600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800bb4e:	2002      	movs	r0, #2
 800bb50:	f006 fd6b 	bl	801262a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800bb54:	46c0      	nop			@ (mov r8, r8)
 800bb56:	46bd      	mov	sp, r7
 800bb58:	b015      	add	sp, #84	@ 0x54
 800bb5a:	bd90      	pop	{r4, r7, pc}
 800bb5c:	40002800 	.word	0x40002800
 800bb60:	40021000 	.word	0x40021000

0800bb64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a12      	ldr	r2, [pc, #72]	@ (800bbbc <HAL_TIM_Base_MspInit+0x58>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d10c      	bne.n	800bb90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bb76:	4b12      	ldr	r3, [pc, #72]	@ (800bbc0 <HAL_TIM_Base_MspInit+0x5c>)
 800bb78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb7a:	4b11      	ldr	r3, [pc, #68]	@ (800bbc0 <HAL_TIM_Base_MspInit+0x5c>)
 800bb7c:	2102      	movs	r1, #2
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb82:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc0 <HAL_TIM_Base_MspInit+0x5c>)
 800bb84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb86:	2202      	movs	r2, #2
 800bb88:	4013      	ands	r3, r2
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800bb8e:	e010      	b.n	800bbb2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a0b      	ldr	r2, [pc, #44]	@ (800bbc4 <HAL_TIM_Base_MspInit+0x60>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d10b      	bne.n	800bbb2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800bb9a:	4b09      	ldr	r3, [pc, #36]	@ (800bbc0 <HAL_TIM_Base_MspInit+0x5c>)
 800bb9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb9e:	4b08      	ldr	r3, [pc, #32]	@ (800bbc0 <HAL_TIM_Base_MspInit+0x5c>)
 800bba0:	2110      	movs	r1, #16
 800bba2:	430a      	orrs	r2, r1
 800bba4:	659a      	str	r2, [r3, #88]	@ 0x58
 800bba6:	4b06      	ldr	r3, [pc, #24]	@ (800bbc0 <HAL_TIM_Base_MspInit+0x5c>)
 800bba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbaa:	2210      	movs	r2, #16
 800bbac:	4013      	ands	r3, r2
 800bbae:	60bb      	str	r3, [r7, #8]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
}
 800bbb2:	46c0      	nop			@ (mov r8, r8)
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	b004      	add	sp, #16
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	46c0      	nop			@ (mov r8, r8)
 800bbbc:	40000400 	.word	0x40000400
 800bbc0:	40021000 	.word	0x40021000
 800bbc4:	40001000 	.word	0x40001000

0800bbc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800bbc8:	b590      	push	{r4, r7, lr}
 800bbca:	b089      	sub	sp, #36	@ 0x24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbd0:	240c      	movs	r4, #12
 800bbd2:	193b      	adds	r3, r7, r4
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	2314      	movs	r3, #20
 800bbd8:	001a      	movs	r2, r3
 800bbda:	2100      	movs	r1, #0
 800bbdc:	f00f f8c2 	bl	801ad64 <memset>
  if(htim->Instance==TIM3)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a14      	ldr	r2, [pc, #80]	@ (800bc38 <HAL_TIM_MspPostInit+0x70>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d121      	bne.n	800bc2e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bbea:	4b14      	ldr	r3, [pc, #80]	@ (800bc3c <HAL_TIM_MspPostInit+0x74>)
 800bbec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bbee:	4b13      	ldr	r3, [pc, #76]	@ (800bc3c <HAL_TIM_MspPostInit+0x74>)
 800bbf0:	2104      	movs	r1, #4
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bbf6:	4b11      	ldr	r3, [pc, #68]	@ (800bc3c <HAL_TIM_MspPostInit+0x74>)
 800bbf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	60bb      	str	r3, [r7, #8]
 800bc00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800bc02:	0021      	movs	r1, r4
 800bc04:	187b      	adds	r3, r7, r1
 800bc06:	2280      	movs	r2, #128	@ 0x80
 800bc08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc0a:	187b      	adds	r3, r7, r1
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc10:	187b      	adds	r3, r7, r1
 800bc12:	2200      	movs	r2, #0
 800bc14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc16:	187b      	adds	r3, r7, r1
 800bc18:	2200      	movs	r2, #0
 800bc1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bc1c:	187b      	adds	r3, r7, r1
 800bc1e:	2202      	movs	r2, #2
 800bc20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc22:	187b      	adds	r3, r7, r1
 800bc24:	4a06      	ldr	r2, [pc, #24]	@ (800bc40 <HAL_TIM_MspPostInit+0x78>)
 800bc26:	0019      	movs	r1, r3
 800bc28:	0010      	movs	r0, r2
 800bc2a:	f007 fad7 	bl	80131dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800bc2e:	46c0      	nop			@ (mov r8, r8)
 800bc30:	46bd      	mov	sp, r7
 800bc32:	b009      	add	sp, #36	@ 0x24
 800bc34:	bd90      	pop	{r4, r7, pc}
 800bc36:	46c0      	nop			@ (mov r8, r8)
 800bc38:	40000400 	.word	0x40000400
 800bc3c:	40021000 	.word	0x40021000
 800bc40:	50000800 	.word	0x50000800

0800bc44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bc44:	b590      	push	{r4, r7, lr}
 800bc46:	b09d      	sub	sp, #116	@ 0x74
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc4c:	235c      	movs	r3, #92	@ 0x5c
 800bc4e:	18fb      	adds	r3, r7, r3
 800bc50:	0018      	movs	r0, r3
 800bc52:	2314      	movs	r3, #20
 800bc54:	001a      	movs	r2, r3
 800bc56:	2100      	movs	r1, #0
 800bc58:	f00f f884 	bl	801ad64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bc5c:	2418      	movs	r4, #24
 800bc5e:	193b      	adds	r3, r7, r4
 800bc60:	0018      	movs	r0, r3
 800bc62:	2344      	movs	r3, #68	@ 0x44
 800bc64:	001a      	movs	r2, r3
 800bc66:	2100      	movs	r1, #0
 800bc68:	f00f f87c 	bl	801ad64 <memset>
  if(huart->Instance==USART2)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4aa0      	ldr	r2, [pc, #640]	@ (800bef4 <HAL_UART_MspInit+0x2b0>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d000      	beq.n	800bc78 <HAL_UART_MspInit+0x34>
 800bc76:	e09a      	b.n	800bdae <HAL_UART_MspInit+0x16a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800bc78:	193b      	adds	r3, r7, r4
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bc7e:	193b      	adds	r3, r7, r4
 800bc80:	2200      	movs	r2, #0
 800bc82:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bc84:	193b      	adds	r3, r7, r4
 800bc86:	0018      	movs	r0, r3
 800bc88:	f00a fda8 	bl	80167dc <HAL_RCCEx_PeriphCLKConfig>
 800bc8c:	1e03      	subs	r3, r0, #0
 800bc8e:	d001      	beq.n	800bc94 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800bc90:	f7fe faaa 	bl	800a1e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800bc94:	4b98      	ldr	r3, [pc, #608]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bc96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc98:	4b97      	ldr	r3, [pc, #604]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bc9a:	2180      	movs	r1, #128	@ 0x80
 800bc9c:	0289      	lsls	r1, r1, #10
 800bc9e:	430a      	orrs	r2, r1
 800bca0:	659a      	str	r2, [r3, #88]	@ 0x58
 800bca2:	4b95      	ldr	r3, [pc, #596]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bca4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bca6:	2380      	movs	r3, #128	@ 0x80
 800bca8:	029b      	lsls	r3, r3, #10
 800bcaa:	4013      	ands	r3, r2
 800bcac:	617b      	str	r3, [r7, #20]
 800bcae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcb0:	4b91      	ldr	r3, [pc, #580]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bcb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcb4:	4b90      	ldr	r3, [pc, #576]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bcbc:	4b8e      	ldr	r3, [pc, #568]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bcbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	613b      	str	r3, [r7, #16]
 800bcc6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bcc8:	215c      	movs	r1, #92	@ 0x5c
 800bcca:	187b      	adds	r3, r7, r1
 800bccc:	220c      	movs	r2, #12
 800bcce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd0:	187b      	adds	r3, r7, r1
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd6:	187b      	adds	r3, r7, r1
 800bcd8:	2200      	movs	r2, #0
 800bcda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcdc:	187b      	adds	r3, r7, r1
 800bcde:	2200      	movs	r2, #0
 800bce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bce2:	187b      	adds	r3, r7, r1
 800bce4:	2207      	movs	r2, #7
 800bce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bce8:	187a      	adds	r2, r7, r1
 800bcea:	23a0      	movs	r3, #160	@ 0xa0
 800bcec:	05db      	lsls	r3, r3, #23
 800bcee:	0011      	movs	r1, r2
 800bcf0:	0018      	movs	r0, r3
 800bcf2:	f007 fa73 	bl	80131dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800bcf6:	4b81      	ldr	r3, [pc, #516]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bcf8:	4a81      	ldr	r2, [pc, #516]	@ (800bf00 <HAL_UART_MspInit+0x2bc>)
 800bcfa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800bcfc:	4b7f      	ldr	r3, [pc, #508]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bcfe:	2247      	movs	r2, #71	@ 0x47
 800bd00:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bd02:	4b7e      	ldr	r3, [pc, #504]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bd08:	4b7c      	ldr	r3, [pc, #496]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bd0e:	4b7b      	ldr	r3, [pc, #492]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd10:	2280      	movs	r2, #128	@ 0x80
 800bd12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bd14:	4b79      	ldr	r3, [pc, #484]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bd1a:	4b78      	ldr	r3, [pc, #480]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800bd20:	4b76      	ldr	r3, [pc, #472]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bd26:	4b75      	ldr	r3, [pc, #468]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800bd2c:	4b73      	ldr	r3, [pc, #460]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd2e:	0018      	movs	r0, r3
 800bd30:	f006 fca8 	bl	8012684 <HAL_DMA_Init>
 800bd34:	1e03      	subs	r3, r0, #0
 800bd36:	d001      	beq.n	800bd3c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800bd38:	f7fe fa56 	bl	800a1e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2180      	movs	r1, #128	@ 0x80
 800bd40:	4a6e      	ldr	r2, [pc, #440]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd42:	505a      	str	r2, [r3, r1]
 800bd44:	4b6d      	ldr	r3, [pc, #436]	@ (800befc <HAL_UART_MspInit+0x2b8>)
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800bd4a:	4b6e      	ldr	r3, [pc, #440]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd4c:	4a6e      	ldr	r2, [pc, #440]	@ (800bf08 <HAL_UART_MspInit+0x2c4>)
 800bd4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800bd50:	4b6c      	ldr	r3, [pc, #432]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd52:	2248      	movs	r2, #72	@ 0x48
 800bd54:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bd56:	4b6b      	ldr	r3, [pc, #428]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd58:	2210      	movs	r2, #16
 800bd5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bd5c:	4b69      	ldr	r3, [pc, #420]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bd62:	4b68      	ldr	r3, [pc, #416]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd64:	2280      	movs	r2, #128	@ 0x80
 800bd66:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bd68:	4b66      	ldr	r3, [pc, #408]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bd6e:	4b65      	ldr	r3, [pc, #404]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800bd74:	4b63      	ldr	r3, [pc, #396]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bd7a:	4b62      	ldr	r3, [pc, #392]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800bd80:	4b60      	ldr	r3, [pc, #384]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd82:	0018      	movs	r0, r3
 800bd84:	f006 fc7e 	bl	8012684 <HAL_DMA_Init>
 800bd88:	1e03      	subs	r3, r0, #0
 800bd8a:	d001      	beq.n	800bd90 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 800bd8c:	f7fe fa2c 	bl	800a1e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a5c      	ldr	r2, [pc, #368]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd94:	67da      	str	r2, [r3, #124]	@ 0x7c
 800bd96:	4b5b      	ldr	r3, [pc, #364]	@ (800bf04 <HAL_UART_MspInit+0x2c0>)
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	201c      	movs	r0, #28
 800bda2:	f006 fc2d 	bl	8012600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800bda6:	201c      	movs	r0, #28
 800bda8:	f006 fc3f 	bl	801262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800bdac:	e09e      	b.n	800beec <HAL_UART_MspInit+0x2a8>
  else if(huart->Instance==USART4)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a56      	ldr	r2, [pc, #344]	@ (800bf0c <HAL_UART_MspInit+0x2c8>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d000      	beq.n	800bdba <HAL_UART_MspInit+0x176>
 800bdb8:	e098      	b.n	800beec <HAL_UART_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART4;
 800bdba:	2118      	movs	r1, #24
 800bdbc:	187b      	adds	r3, r7, r1
 800bdbe:	2280      	movs	r2, #128	@ 0x80
 800bdc0:	0292      	lsls	r2, r2, #10
 800bdc2:	601a      	str	r2, [r3, #0]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bdc4:	187b      	adds	r3, r7, r1
 800bdc6:	0018      	movs	r0, r3
 800bdc8:	f00a fd08 	bl	80167dc <HAL_RCCEx_PeriphCLKConfig>
 800bdcc:	1e03      	subs	r3, r0, #0
 800bdce:	d001      	beq.n	800bdd4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800bdd0:	f7fe fa0a 	bl	800a1e8 <Error_Handler>
    __HAL_RCC_USART4_CLK_ENABLE();
 800bdd4:	4b48      	ldr	r3, [pc, #288]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bdd6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bdd8:	4b47      	ldr	r3, [pc, #284]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bdda:	2180      	movs	r1, #128	@ 0x80
 800bddc:	0309      	lsls	r1, r1, #12
 800bdde:	430a      	orrs	r2, r1
 800bde0:	659a      	str	r2, [r3, #88]	@ 0x58
 800bde2:	4b45      	ldr	r3, [pc, #276]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bde4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bde6:	2380      	movs	r3, #128	@ 0x80
 800bde8:	031b      	lsls	r3, r3, #12
 800bdea:	4013      	ands	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdf0:	4b41      	ldr	r3, [pc, #260]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bdf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdf4:	4b40      	ldr	r3, [pc, #256]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bdfc:	4b3e      	ldr	r3, [pc, #248]	@ (800bef8 <HAL_UART_MspInit+0x2b4>)
 800bdfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be00:	2201      	movs	r2, #1
 800be02:	4013      	ands	r3, r2
 800be04:	60bb      	str	r3, [r7, #8]
 800be06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800be08:	215c      	movs	r1, #92	@ 0x5c
 800be0a:	187b      	adds	r3, r7, r1
 800be0c:	2203      	movs	r2, #3
 800be0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be10:	187b      	adds	r3, r7, r1
 800be12:	2202      	movs	r2, #2
 800be14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be16:	187b      	adds	r3, r7, r1
 800be18:	2200      	movs	r2, #0
 800be1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be1c:	187b      	adds	r3, r7, r1
 800be1e:	2200      	movs	r2, #0
 800be20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART4;
 800be22:	187b      	adds	r3, r7, r1
 800be24:	2208      	movs	r2, #8
 800be26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be28:	187a      	adds	r2, r7, r1
 800be2a:	23a0      	movs	r3, #160	@ 0xa0
 800be2c:	05db      	lsls	r3, r3, #23
 800be2e:	0011      	movs	r1, r2
 800be30:	0018      	movs	r0, r3
 800be32:	f007 f9d3 	bl	80131dc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800be36:	4b36      	ldr	r3, [pc, #216]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be38:	4a36      	ldr	r2, [pc, #216]	@ (800bf14 <HAL_UART_MspInit+0x2d0>)
 800be3a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800be3c:	4b34      	ldr	r3, [pc, #208]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be3e:	224b      	movs	r2, #75	@ 0x4b
 800be40:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be42:	4b33      	ldr	r3, [pc, #204]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be44:	2200      	movs	r2, #0
 800be46:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be48:	4b31      	ldr	r3, [pc, #196]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800be4e:	4b30      	ldr	r3, [pc, #192]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be50:	2280      	movs	r2, #128	@ 0x80
 800be52:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be54:	4b2e      	ldr	r3, [pc, #184]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be56:	2200      	movs	r2, #0
 800be58:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be5a:	4b2d      	ldr	r3, [pc, #180]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be5c:	2200      	movs	r2, #0
 800be5e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800be60:	4b2b      	ldr	r3, [pc, #172]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be62:	2200      	movs	r2, #0
 800be64:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800be66:	4b2a      	ldr	r3, [pc, #168]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be68:	2200      	movs	r2, #0
 800be6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800be6c:	4b28      	ldr	r3, [pc, #160]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be6e:	0018      	movs	r0, r3
 800be70:	f006 fc08 	bl	8012684 <HAL_DMA_Init>
 800be74:	1e03      	subs	r3, r0, #0
 800be76:	d001      	beq.n	800be7c <HAL_UART_MspInit+0x238>
      Error_Handler();
 800be78:	f7fe f9b6 	bl	800a1e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2180      	movs	r1, #128	@ 0x80
 800be80:	4a23      	ldr	r2, [pc, #140]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be82:	505a      	str	r2, [r3, r1]
 800be84:	4b22      	ldr	r3, [pc, #136]	@ (800bf10 <HAL_UART_MspInit+0x2cc>)
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel3;
 800be8a:	4b23      	ldr	r3, [pc, #140]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800be8c:	4a23      	ldr	r2, [pc, #140]	@ (800bf1c <HAL_UART_MspInit+0x2d8>)
 800be8e:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800be90:	4b21      	ldr	r3, [pc, #132]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800be92:	224c      	movs	r2, #76	@ 0x4c
 800be94:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800be96:	4b20      	ldr	r3, [pc, #128]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800be98:	2210      	movs	r2, #16
 800be9a:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be9c:	4b1e      	ldr	r3, [pc, #120]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bea2:	4b1d      	ldr	r3, [pc, #116]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800bea4:	2280      	movs	r2, #128	@ 0x80
 800bea6:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bea8:	4b1b      	ldr	r3, [pc, #108]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800beaa:	2200      	movs	r2, #0
 800beac:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800beae:	4b1a      	ldr	r3, [pc, #104]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800beb4:	4b18      	ldr	r3, [pc, #96]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800beba:	4b17      	ldr	r3, [pc, #92]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800bec0:	4b15      	ldr	r3, [pc, #84]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800bec2:	0018      	movs	r0, r3
 800bec4:	f006 fbde 	bl	8012684 <HAL_DMA_Init>
 800bec8:	1e03      	subs	r3, r0, #0
 800beca:	d001      	beq.n	800bed0 <HAL_UART_MspInit+0x28c>
      Error_Handler();
 800becc:	f7fe f98c 	bl	800a1e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a11      	ldr	r2, [pc, #68]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800bed4:	67da      	str	r2, [r3, #124]	@ 0x7c
 800bed6:	4b10      	ldr	r3, [pc, #64]	@ (800bf18 <HAL_UART_MspInit+0x2d4>)
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_LPUART3_IRQn, 0, 0);
 800bedc:	2200      	movs	r2, #0
 800bede:	2100      	movs	r1, #0
 800bee0:	201e      	movs	r0, #30
 800bee2:	f006 fb8d 	bl	8012600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_LPUART3_IRQn);
 800bee6:	201e      	movs	r0, #30
 800bee8:	f006 fb9f 	bl	801262a <HAL_NVIC_EnableIRQ>
}
 800beec:	46c0      	nop			@ (mov r8, r8)
 800beee:	46bd      	mov	sp, r7
 800bef0:	b01d      	add	sp, #116	@ 0x74
 800bef2:	bd90      	pop	{r4, r7, pc}
 800bef4:	40004400 	.word	0x40004400
 800bef8:	40021000 	.word	0x40021000
 800befc:	20000750 	.word	0x20000750
 800bf00:	40020058 	.word	0x40020058
 800bf04:	200007b0 	.word	0x200007b0
 800bf08:	40020044 	.word	0x40020044
 800bf0c:	40004c00 	.word	0x40004c00
 800bf10:	20000810 	.word	0x20000810
 800bf14:	4002001c 	.word	0x4002001c
 800bf18:	20000870 	.word	0x20000870
 800bf1c:	40020030 	.word	0x40020030

0800bf20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800bf24:	46c0      	nop			@ (mov r8, r8)
 800bf26:	e7fd      	b.n	800bf24 <NMI_Handler+0x4>

0800bf28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bf2c:	46c0      	nop			@ (mov r8, r8)
 800bf2e:	e7fd      	b.n	800bf2c <HardFault_Handler+0x4>

0800bf30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bf34:	46c0      	nop			@ (mov r8, r8)
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bf3e:	46c0      	nop			@ (mov r8, r8)
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bf48:	f005 f904 	bl	8011154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bf4c:	46c0      	nop			@ (mov r8, r8)
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
	...

0800bf54 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800bf58:	4b03      	ldr	r3, [pc, #12]	@ (800bf68 <RTC_TAMP_IRQHandler+0x14>)
 800bf5a:	0018      	movs	r0, r3
 800bf5c:	f00c f890 	bl	8018080 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800bf60:	46c0      	nop			@ (mov r8, r8)
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	46c0      	nop			@ (mov r8, r8)
 800bf68:	20000560 	.word	0x20000560

0800bf6c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800bf70:	2380      	movs	r3, #128	@ 0x80
 800bf72:	021b      	lsls	r3, r3, #8
 800bf74:	0018      	movs	r0, r3
 800bf76:	f007 fbdb 	bl	8013730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800bf7a:	46c0      	nop			@ (mov r8, r8)
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800bf84:	4b05      	ldr	r3, [pc, #20]	@ (800bf9c <DMA1_Channel2_3_IRQHandler+0x1c>)
 800bf86:	0018      	movs	r0, r3
 800bf88:	f006 fe0e 	bl	8012ba8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800bf8c:	4b04      	ldr	r3, [pc, #16]	@ (800bfa0 <DMA1_Channel2_3_IRQHandler+0x20>)
 800bf8e:	0018      	movs	r0, r3
 800bf90:	f006 fe0a 	bl	8012ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800bf94:	46c0      	nop			@ (mov r8, r8)
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	46c0      	nop			@ (mov r8, r8)
 800bf9c:	20000810 	.word	0x20000810
 800bfa0:	20000870 	.word	0x20000870

0800bfa4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX_OVR_IT + DMA1 channel 4 to 7 + DMA2 channel 1 to 5.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800bfa8:	4b09      	ldr	r3, [pc, #36]	@ (800bfd0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x2c>)
 800bfaa:	0018      	movs	r0, r3
 800bfac:	f006 fdfc 	bl	8012ba8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800bfb0:	4b08      	ldr	r3, [pc, #32]	@ (800bfd4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x30>)
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	f006 fdf8 	bl	8012ba8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800bfb8:	4b07      	ldr	r3, [pc, #28]	@ (800bfd8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x34>)
 800bfba:	0018      	movs	r0, r3
 800bfbc:	f006 fdf4 	bl	8012ba8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800bfc0:	4b06      	ldr	r3, [pc, #24]	@ (800bfdc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQHandler+0x38>)
 800bfc2:	0018      	movs	r0, r3
 800bfc4:	f006 fdf0 	bl	8012ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX_OVR_IRQn 1 */
}
 800bfc8:	46c0      	nop			@ (mov r8, r8)
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	46c0      	nop			@ (mov r8, r8)
 800bfd0:	200007b0 	.word	0x200007b0
 800bfd4:	20000750 	.word	0x20000750
 800bfd8:	200004ec 	.word	0x200004ec
 800bfdc:	2000048c 	.word	0x2000048c

0800bfe0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800bfe4:	4b09      	ldr	r3, [pc, #36]	@ (800c00c <I2C1_IRQHandler+0x2c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	699a      	ldr	r2, [r3, #24]
 800bfea:	23e0      	movs	r3, #224	@ 0xe0
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	4013      	ands	r3, r2
 800bff0:	d004      	beq.n	800bffc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800bff2:	4b06      	ldr	r3, [pc, #24]	@ (800c00c <I2C1_IRQHandler+0x2c>)
 800bff4:	0018      	movs	r0, r3
 800bff6:	f007 fed5 	bl	8013da4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800bffa:	e003      	b.n	800c004 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800bffc:	4b03      	ldr	r3, [pc, #12]	@ (800c00c <I2C1_IRQHandler+0x2c>)
 800bffe:	0018      	movs	r0, r3
 800c000:	f007 feb6 	bl	8013d70 <HAL_I2C_EV_IRQHandler>
}
 800c004:	46c0      	nop			@ (mov r8, r8)
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	46c0      	nop			@ (mov r8, r8)
 800c00c:	20000438 	.word	0x20000438

0800c010 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt (combined with EXTI 26) + LPUART2 global interrupt (combined with EXTI lines 35).
  */
void USART2_LPUART2_IRQHandler(void)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c014:	4b03      	ldr	r3, [pc, #12]	@ (800c024 <USART2_LPUART2_IRQHandler+0x14>)
 800c016:	0018      	movs	r0, r3
 800c018:	f00d faa0 	bl	801955c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 800c01c:	46c0      	nop			@ (mov r8, r8)
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	46c0      	nop			@ (mov r8, r8)
 800c024:	20000628 	.word	0x20000628

0800c028 <USART4_LPUART3_IRQHandler>:

/**
  * @brief This function handles USART4  global interrupt (combined with EXTI 20) + LPUART3 (combined with EXTI lines 34).
  */
void USART4_LPUART3_IRQHandler(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_LPUART3_IRQn 0 */

  /* USER CODE END USART4_LPUART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c02c:	4b03      	ldr	r3, [pc, #12]	@ (800c03c <USART4_LPUART3_IRQHandler+0x14>)
 800c02e:	0018      	movs	r0, r3
 800c030:	f00d fa94 	bl	801955c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_LPUART3_IRQn 1 */

  /* USER CODE END USART4_LPUART3_IRQn 1 */
}
 800c034:	46c0      	nop			@ (mov r8, r8)
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	46c0      	nop			@ (mov r8, r8)
 800c03c:	200006bc 	.word	0x200006bc

0800c040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c048:	4a14      	ldr	r2, [pc, #80]	@ (800c09c <_sbrk+0x5c>)
 800c04a:	4b15      	ldr	r3, [pc, #84]	@ (800c0a0 <_sbrk+0x60>)
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c054:	4b13      	ldr	r3, [pc, #76]	@ (800c0a4 <_sbrk+0x64>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c05c:	4b11      	ldr	r3, [pc, #68]	@ (800c0a4 <_sbrk+0x64>)
 800c05e:	4a12      	ldr	r2, [pc, #72]	@ (800c0a8 <_sbrk+0x68>)
 800c060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c062:	4b10      	ldr	r3, [pc, #64]	@ (800c0a4 <_sbrk+0x64>)
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	18d3      	adds	r3, r2, r3
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d207      	bcs.n	800c080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c070:	f00e feb6 	bl	801ade0 <__errno>
 800c074:	0003      	movs	r3, r0
 800c076:	220c      	movs	r2, #12
 800c078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c07a:	2301      	movs	r3, #1
 800c07c:	425b      	negs	r3, r3
 800c07e:	e009      	b.n	800c094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c080:	4b08      	ldr	r3, [pc, #32]	@ (800c0a4 <_sbrk+0x64>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c086:	4b07      	ldr	r3, [pc, #28]	@ (800c0a4 <_sbrk+0x64>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	18d2      	adds	r2, r2, r3
 800c08e:	4b05      	ldr	r3, [pc, #20]	@ (800c0a4 <_sbrk+0x64>)
 800c090:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c092:	68fb      	ldr	r3, [r7, #12]
}
 800c094:	0018      	movs	r0, r3
 800c096:	46bd      	mov	sp, r7
 800c098:	b006      	add	sp, #24
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	20008000 	.word	0x20008000
 800c0a0:	00000400 	.word	0x00000400
 800c0a4:	20001114 	.word	0x20001114
 800c0a8:	200012d8 	.word	0x200012d8

0800c0ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c0b2:	4b12      	ldr	r3, [pc, #72]	@ (800c0fc <SystemInit+0x50>)
 800c0b4:	2280      	movs	r2, #128	@ 0x80
 800c0b6:	0512      	lsls	r2, r2, #20
 800c0b8:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800c0ba:	4a11      	ldr	r2, [pc, #68]	@ (800c100 <SystemInit+0x54>)
 800c0bc:	2380      	movs	r3, #128	@ 0x80
 800c0be:	58d3      	ldr	r3, [r2, r3]
 800c0c0:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800c0c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c100 <SystemInit+0x54>)
 800c0c4:	6a1b      	ldr	r3, [r3, #32]
 800c0c6:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	2380      	movs	r3, #128	@ 0x80
 800c0cc:	025b      	lsls	r3, r3, #9
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	d010      	beq.n	800c0f4 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	22ff      	movs	r2, #255	@ 0xff
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	2bcc      	cmp	r3, #204	@ 0xcc
 800c0da:	d00b      	beq.n	800c0f4 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	22ff      	movs	r2, #255	@ 0xff
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	2baa      	cmp	r3, #170	@ 0xaa
 800c0e4:	d006      	beq.n	800c0f4 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800c0e6:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <SystemInit+0x54>)
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	4b05      	ldr	r3, [pc, #20]	@ (800c100 <SystemInit+0x54>)
 800c0ec:	2180      	movs	r1, #128	@ 0x80
 800c0ee:	02c9      	lsls	r1, r1, #11
 800c0f0:	430a      	orrs	r2, r1
 800c0f2:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800c0f4:	46c0      	nop			@ (mov r8, r8)
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	b002      	add	sp, #8
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	e000ed00 	.word	0xe000ed00
 800c100:	40022000 	.word	0x40022000

0800c104 <temper>:
//uint8_t trefst2_aux = 0;
//aux
//////////////////////////////////////////////////////////////////////////////////////////////////7
//uint16_t adcram = 0;
//*************************************************************************************************
void temper(void){
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0


	cnttemp++;
 800c10a:	4bbb      	ldr	r3, [pc, #748]	@ (800c3f8 <temper+0x2f4>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	3301      	adds	r3, #1
 800c110:	b2da      	uxtb	r2, r3
 800c112:	4bb9      	ldr	r3, [pc, #740]	@ (800c3f8 <temper+0x2f4>)
 800c114:	701a      	strb	r2, [r3, #0]
	A = cnttemp;
 800c116:	4bb8      	ldr	r3, [pc, #736]	@ (800c3f8 <temper+0x2f4>)
 800c118:	781a      	ldrb	r2, [r3, #0]
 800c11a:	4bb8      	ldr	r3, [pc, #736]	@ (800c3fc <temper+0x2f8>)
 800c11c:	701a      	strb	r2, [r3, #0]

	if(A >= 50) 	   //Manuel 07-Mar-2022	$64;		/ cntemp es menor
 800c11e:	4bb7      	ldr	r3, [pc, #732]	@ (800c3fc <temper+0x2f8>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	2b31      	cmp	r3, #49	@ 0x31
 800c124:	d801      	bhi.n	800c12a <temper+0x26>
 800c126:	f000 fcbd 	bl	800caa4 <temper+0x9a0>
		goto tempe05;  // Sí no tomes muestras
 800c12a:	46c0      	nop			@ (mov r8, r8)
	goto fintemp;      // No, sincroniza la lectura con el dígito 1

tempe05:
		decwreg(&retcncfa); // Decrementa tiempo para liberar fallas
 800c12c:	4bb4      	ldr	r3, [pc, #720]	@ (800c400 <temper+0x2fc>)
 800c12e:	0018      	movs	r0, r3
 800c130:	f7fa ff1f 	bl	8006f72 <decwreg>
		decwreg(&retcncfe);
 800c134:	4bb3      	ldr	r3, [pc, #716]	@ (800c404 <temper+0x300>)
 800c136:	0018      	movs	r0, r3
 800c138:	f7fa ff1b 	bl	8006f72 <decwreg>
		decwreg(&retcncfr);
 800c13c:	4bb2      	ldr	r3, [pc, #712]	@ (800c408 <temper+0x304>)
 800c13e:	0018      	movs	r0, r3
 800c140:	f7fa ff17 	bl	8006f72 <decwreg>
		decwreg(&retcncfc);
 800c144:	4bb1      	ldr	r3, [pc, #708]	@ (800c40c <temper+0x308>)
 800c146:	0018      	movs	r0, r3
 800c148:	f7fa ff13 	bl	8006f72 <decwreg>
//temper_j00:
		cnttemp = 0;   	   // Inicia el contador de 100 ms
 800c14c:	4baa      	ldr	r3, [pc, #680]	@ (800c3f8 <temper+0x2f4>)
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
				sConfig.Channel = ADC_CHANNEL_10;
				sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
				adcram = capturaAD();  //Convierte la señal*/
								        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800c152:	4baf      	ldr	r3, [pc, #700]	@ (800c410 <temper+0x30c>)
 800c154:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c156:	4bae      	ldr	r3, [pc, #696]	@ (800c410 <temper+0x30c>)
 800c158:	2280      	movs	r2, #128	@ 0x80
 800c15a:	01d2      	lsls	r2, r2, #7
 800c15c:	400a      	ands	r2, r1
 800c15e:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c160:	4bab      	ldr	r3, [pc, #684]	@ (800c410 <temper+0x30c>)
 800c162:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c164:	4baa      	ldr	r3, [pc, #680]	@ (800c410 <temper+0x30c>)
 800c166:	2280      	movs	r2, #128	@ 0x80
 800c168:	00d2      	lsls	r2, r2, #3
 800c16a:	400a      	ands	r2, r1
 800c16c:	629a      	str	r2, [r3, #40]	@ 0x28
				        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c16e:	4ba8      	ldr	r3, [pc, #672]	@ (800c410 <temper+0x30c>)
 800c170:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c172:	4ba7      	ldr	r3, [pc, #668]	@ (800c410 <temper+0x30c>)
 800c174:	2280      	movs	r2, #128	@ 0x80
 800c176:	02d2      	lsls	r2, r2, #11
 800c178:	400a      	ands	r2, r1
 800c17a:	629a      	str	r2, [r3, #40]	@ 0x28

				        ADC1->CHSELR |= ADC_CHSELR_CHSEL0;  // Canal 0
 800c17c:	4ba4      	ldr	r3, [pc, #656]	@ (800c410 <temper+0x30c>)
 800c17e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c180:	4ba3      	ldr	r3, [pc, #652]	@ (800c410 <temper+0x30c>)
 800c182:	2101      	movs	r1, #1
 800c184:	430a      	orrs	r2, r1
 800c186:	629a      	str	r2, [r3, #40]	@ 0x28

				        capturaAD ();
 800c188:	f000 fe46 	bl	800ce18 <capturaAD>
//lookshort_S4:
		Y_A();
 800c18c:	f000 feb4 	bl	800cef8 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 0x01)
 800c190:	4b9a      	ldr	r3, [pc, #616]	@ (800c3fc <temper+0x2f8>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d005      	beq.n	800c1a4 <temper+0xa0>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
		if(Y < 942)						// Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c198:	4b9e      	ldr	r3, [pc, #632]	@ (800c414 <temper+0x310>)
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	4a9e      	ldr	r2, [pc, #632]	@ (800c418 <temper+0x314>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d808      	bhi.n	800c1b4 <temper+0xb0>
			goto lookopen_S04;          // No, revise límite inferior
 800c1a2:	e010      	b.n	800c1c6 <temper+0xc2>
			goto cmp_man_01_s04;        // En autoprueba deja estos límites
 800c1a4:	46c0      	nop			@ (mov r8, r8)
		goto sens_short_S04;

cmp_man_01_s04:
		if(Y < 0x01C4)                  // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c1a6:	4b9b      	ldr	r3, [pc, #620]	@ (800c414 <temper+0x310>)
 800c1a8:	881a      	ldrh	r2, [r3, #0]
 800c1aa:	23e2      	movs	r3, #226	@ 0xe2
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d308      	bcc.n	800c1c4 <temper+0xc0>
			goto lookopen_S04;          // No, revise límite inferior

sens_short_S04:
 800c1b2:	e000      	b.n	800c1b6 <temper+0xb2>
		goto sens_short_S04;
 800c1b4:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800c1b6:	4999      	ldr	r1, [pc, #612]	@ (800c41c <temper+0x318>)
 800c1b8:	4899      	ldr	r0, [pc, #612]	@ (800c420 <temper+0x31c>)
 800c1ba:	2307      	movs	r3, #7
 800c1bc:	2205      	movs	r2, #5
 800c1be:	f000 feb1 	bl	800cf24 <Bset_Clear_trfst>
//		BitSet(trefst,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,7); //#f_s4open   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,7); //#f_s4open   // Cancela la otras falla del sensor de salida

		goto loadret_S04;  /// Carga el retardo de cancelación
 800c1c2:	e01c      	b.n	800c1fe <temper+0xfa>
			goto lookopen_S04;          // No, revise límite inferior
 800c1c4:	46c0      	nop			@ (mov r8, r8)

lookopen_S04:
		A = edorefri;
 800c1c6:	4b97      	ldr	r3, [pc, #604]	@ (800c424 <temper+0x320>)
 800c1c8:	781a      	ldrb	r2, [r3, #0]
 800c1ca:	4b8c      	ldr	r3, [pc, #560]	@ (800c3fc <temper+0x2f8>)
 800c1cc:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800c1ce:	4b8b      	ldr	r3, [pc, #556]	@ (800c3fc <temper+0x2f8>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d004      	beq.n	800c1e0 <temper+0xdc>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
		if(Y >= 0x002B)           // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800c1d6:	4b8f      	ldr	r3, [pc, #572]	@ (800c414 <temper+0x310>)
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1dc:	d908      	bls.n	800c1f0 <temper+0xec>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800c1de:	e013      	b.n	800c208 <temper+0x104>
			goto cmp_man_02_S04;  // En autoprueba deja estos límites
 800c1e0:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S04;

cmp_man_02_S04:
		if(Y >= 0x01AE)           // Límite inferior 0x1B4 /  con tolerancia del 1% en el
 800c1e2:	4b8c      	ldr	r3, [pc, #560]	@ (800c414 <temper+0x310>)
 800c1e4:	881a      	ldrh	r2, [r3, #0]
 800c1e6:	23d7      	movs	r3, #215	@ 0xd7
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d20b      	bcs.n	800c206 <temper+0x102>
			goto sens_ok_S04;     // Sí, indica sensor OK

sens_open_S04:
 800c1ee:	e000      	b.n	800c1f2 <temper+0xee>
		goto sens_open_S04;
 800c1f0:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst[0],7, 5);
 800c1f2:	498b      	ldr	r1, [pc, #556]	@ (800c420 <temper+0x31c>)
 800c1f4:	4889      	ldr	r0, [pc, #548]	@ (800c41c <temper+0x318>)
 800c1f6:	2305      	movs	r3, #5
 800c1f8:	2207      	movs	r2, #7
 800c1fa:	f000 fe93 	bl	800cf24 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,7);  //#f_s4open   // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst,5); //#f_s4short  // Cancela la otras falla del sensor de salida
		//BitClear(trefst_aux,5); //#f_s4short  // Cancela la otras falla del sensor de salida

loadret_S04:
		retcncfc = 0x0F;    // Carga retardo de cancelación de falla; 1.5 segundos
 800c1fe:	4b83      	ldr	r3, [pc, #524]	@ (800c40c <temper+0x308>)
 800c200:	220f      	movs	r2, #15
 800c202:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s04;
 800c204:	e010      	b.n	800c228 <temper+0x124>
			goto sens_ok_S04;     // Sí, indica sensor OK
 800c206:	46c0      	nop			@ (mov r8, r8)

sens_ok_S04:
		A = retcncfc;
 800c208:	4b80      	ldr	r3, [pc, #512]	@ (800c40c <temper+0x308>)
 800c20a:	781a      	ldrb	r2, [r3, #0]
 800c20c:	4b7b      	ldr	r3, [pc, #492]	@ (800c3fc <temper+0x2f8>)
 800c20e:	701a      	strb	r2, [r3, #0]
		if(A != 0)         // Ya se agotó el retardo?
 800c210:	4b7a      	ldr	r3, [pc, #488]	@ (800c3fc <temper+0x2f8>)
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d106      	bne.n	800c226 <temper+0x122>
			goto tempeLoad_s04;
		Bclear_Clear_trfst(&trefst[0], &trefst2[0],5, 7);
 800c218:	4980      	ldr	r1, [pc, #512]	@ (800c41c <temper+0x318>)
 800c21a:	4881      	ldr	r0, [pc, #516]	@ (800c420 <temper+0x31c>)
 800c21c:	2307      	movs	r3, #7
 800c21e:	2205      	movs	r2, #5
 800c220:	f000 fe9b 	bl	800cf5a <Bclear_Clear_trfst>
 800c224:	e000      	b.n	800c228 <temper+0x124>
			goto tempeLoad_s04;
 800c226:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,5);  //#f_s4short  // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,7);  //#f_s4open  // Cancela banderas de falla de sensor de salida

tempeLoad_s04:
		tsacram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c228:	4b7f      	ldr	r3, [pc, #508]	@ (800c428 <temper+0x324>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	001a      	movs	r2, r3
 800c22e:	4b7f      	ldr	r3, [pc, #508]	@ (800c42c <temper+0x328>)
 800c230:	8819      	ldrh	r1, [r3, #0]
 800c232:	4b7f      	ldr	r3, [pc, #508]	@ (800c430 <temper+0x32c>)
 800c234:	0052      	lsls	r2, r2, #1
 800c236:	52d1      	strh	r1, [r2, r3]
		    // Verificar si el modo de secuencia es fijo o en reversa
				//if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
						//(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
				//{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c238:	4b75      	ldr	r3, [pc, #468]	@ (800c410 <temper+0x30c>)
 800c23a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c23c:	4b74      	ldr	r3, [pc, #464]	@ (800c410 <temper+0x30c>)
 800c23e:	2280      	movs	r2, #128	@ 0x80
 800c240:	00d2      	lsls	r2, r2, #3
 800c242:	400a      	ands	r2, r1
 800c244:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800c246:	4b72      	ldr	r3, [pc, #456]	@ (800c410 <temper+0x30c>)
 800c248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c24a:	4b71      	ldr	r3, [pc, #452]	@ (800c410 <temper+0x30c>)
 800c24c:	2101      	movs	r1, #1
 800c24e:	400a      	ands	r2, r1
 800c250:	629a      	str	r2, [r3, #40]	@ 0x28
			        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c252:	4b6f      	ldr	r3, [pc, #444]	@ (800c410 <temper+0x30c>)
 800c254:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c256:	4b6e      	ldr	r3, [pc, #440]	@ (800c410 <temper+0x30c>)
 800c258:	2280      	movs	r2, #128	@ 0x80
 800c25a:	02d2      	lsls	r2, r2, #11
 800c25c:	400a      	ands	r2, r1
 800c25e:	629a      	str	r2, [r3, #40]	@ 0x28

			        ADC1->CHSELR |= ADC_CHSELR_CHSEL18;  // Canal 0
 800c260:	4b6b      	ldr	r3, [pc, #428]	@ (800c410 <temper+0x30c>)
 800c262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c264:	4b6a      	ldr	r3, [pc, #424]	@ (800c410 <temper+0x30c>)
 800c266:	2180      	movs	r1, #128	@ 0x80
 800c268:	02c9      	lsls	r1, r1, #11
 800c26a:	430a      	orrs	r2, r1
 800c26c:	629a      	str	r2, [r3, #40]	@ 0x28
					capturaAD();
 800c26e:	f000 fdd3 	bl	800ce18 <capturaAD>
			sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
			HAL_ADC_ConfigChannel(&hadc, &sConfig);
			adcram = capturaAD();  // Convierte la señal*/


	Y_A();
 800c272:	f000 fe41 	bl	800cef8 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800c276:	4b61      	ldr	r3, [pc, #388]	@ (800c3fc <temper+0x2f8>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d005      	beq.n	800c28a <temper+0x186>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
	if(Y < 950)                 // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c27e:	4b65      	ldr	r3, [pc, #404]	@ (800c414 <temper+0x310>)
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	4a6c      	ldr	r2, [pc, #432]	@ (800c434 <temper+0x330>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d808      	bhi.n	800c29a <temper+0x196>
		goto lookopen_S03;      // No, revise límite inferior
 800c288:	e010      	b.n	800c2ac <temper+0x1a8>
		goto cmp_man_01_s03;    // En autoprueba deja estos límites
 800c28a:	46c0      	nop			@ (mov r8, r8)
	goto sens_short_S03;

cmp_man_01_s03:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c28c:	4b61      	ldr	r3, [pc, #388]	@ (800c414 <temper+0x310>)
 800c28e:	881a      	ldrh	r2, [r3, #0]
 800c290:	23e2      	movs	r3, #226	@ 0xe2
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	429a      	cmp	r2, r3
 800c296:	d308      	bcc.n	800c2aa <temper+0x1a6>
			goto lookopen_S03; // No, revise límite inferior

sens_short_S03:
 800c298:	e000      	b.n	800c29c <temper+0x198>
	goto sens_short_S03;
 800c29a:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800c29c:	495f      	ldr	r1, [pc, #380]	@ (800c41c <temper+0x318>)
 800c29e:	485f      	ldr	r0, [pc, #380]	@ (800c41c <temper+0x318>)
 800c2a0:	2305      	movs	r3, #5
 800c2a2:	2204      	movs	r2, #4
 800c2a4:	f000 fe3e 	bl	800cf24 <Bset_Clear_trfst>
//		BitSet(trefst2,4);     // Indica la falla (Sensor de salida en corto)
		//BitSet(trefst2_aux,4);     // Indica la falla (Sensor de salida en corto)
//		BitClear(trefst2,5);   // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,5);   // Cancela la otras falla del sensor de salida
		goto loadret_S03;      // Carga el retardo de cancelación
 800c2a8:	e01c      	b.n	800c2e4 <temper+0x1e0>
			goto lookopen_S03; // No, revise límite inferior
 800c2aa:	46c0      	nop			@ (mov r8, r8)

lookopen_S03:
		A = edorefri;
 800c2ac:	4b5d      	ldr	r3, [pc, #372]	@ (800c424 <temper+0x320>)
 800c2ae:	781a      	ldrb	r2, [r3, #0]
 800c2b0:	4b52      	ldr	r3, [pc, #328]	@ (800c3fc <temper+0x2f8>)
 800c2b2:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800c2b4:	4b51      	ldr	r3, [pc, #324]	@ (800c3fc <temper+0x2f8>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d004      	beq.n	800c2c6 <temper+0x1c2>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites

		if(Y >= 0x002B)            // Ajuste en comportamiento de la Falla del sensor evaporador
 800c2bc:	4b55      	ldr	r3, [pc, #340]	@ (800c414 <temper+0x310>)
 800c2be:	881b      	ldrh	r3, [r3, #0]
 800c2c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2c2:	d908      	bls.n	800c2d6 <temper+0x1d2>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800c2c4:	e013      	b.n	800c2ee <temper+0x1ea>
			goto cmp_man_02_S03;   // En autoprueba deja estos límites
 800c2c6:	46c0      	nop			@ (mov r8, r8)
		goto sens_open_S03;

cmp_man_02_S03:
		if(Y >= 0x01AE)            // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800c2c8:	4b52      	ldr	r3, [pc, #328]	@ (800c414 <temper+0x310>)
 800c2ca:	881a      	ldrh	r2, [r3, #0]
 800c2cc:	23d7      	movs	r3, #215	@ 0xd7
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d20b      	bcs.n	800c2ec <temper+0x1e8>
			goto sens_ok_S03;      // Sí, indica sensor OK

sens_open_S03:
 800c2d4:	e000      	b.n	800c2d8 <temper+0x1d4>
		goto sens_open_S03;
 800c2d6:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst2[0], &trefst2[0],5, 4);
 800c2d8:	4950      	ldr	r1, [pc, #320]	@ (800c41c <temper+0x318>)
 800c2da:	4850      	ldr	r0, [pc, #320]	@ (800c41c <temper+0x318>)
 800c2dc:	2304      	movs	r3, #4
 800c2de:	2205      	movs	r2, #5
 800c2e0:	f000 fe20 	bl	800cf24 <Bset_Clear_trfst>
		//BitSet(trefst2_aux,5);         // Indica la falla (Sensor de salida abierto)
//		BitClear(trefst2,4);       // Cancela la otras falla del sensor de salida
		//BitClear(trefst2_aux,4);       // Cancela la otras falla del sensor de salida

loadret_S03:
		retcncfr = 0x0F;           // Carga retardo de cancelación de falla; 1.5 segundos
 800c2e4:	4b48      	ldr	r3, [pc, #288]	@ (800c408 <temper+0x304>)
 800c2e6:	220f      	movs	r2, #15
 800c2e8:	701a      	strb	r2, [r3, #0]
		goto tempeLoad_s03;
 800c2ea:	e010      	b.n	800c30e <temper+0x20a>
			goto sens_ok_S03;      // Sí, indica sensor OK
 800c2ec:	46c0      	nop			@ (mov r8, r8)

sens_ok_S03:
		A = retcncfr;
 800c2ee:	4b46      	ldr	r3, [pc, #280]	@ (800c408 <temper+0x304>)
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	4b42      	ldr	r3, [pc, #264]	@ (800c3fc <temper+0x2f8>)
 800c2f4:	701a      	strb	r2, [r3, #0]
		if(A != 0)                 // Ya se agotó el retardo?
 800c2f6:	4b41      	ldr	r3, [pc, #260]	@ (800c3fc <temper+0x2f8>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d106      	bne.n	800c30c <temper+0x208>
			goto tempeLoad_s03;
		Bclear_Clear_trfst(&trefst2[0], &trefst2[0],4, 5);
 800c2fe:	4947      	ldr	r1, [pc, #284]	@ (800c41c <temper+0x318>)
 800c300:	4846      	ldr	r0, [pc, #280]	@ (800c41c <temper+0x318>)
 800c302:	2305      	movs	r3, #5
 800c304:	2204      	movs	r2, #4
 800c306:	f000 fe28 	bl	800cf5a <Bclear_Clear_trfst>
 800c30a:	e000      	b.n	800c30e <temper+0x20a>
			goto tempeLoad_s03;
 800c30c:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);       // Cancela banderas de falla de sensor de salida
//		BitClear(trefst2,5);	   // Cancela banderas de falla de sensor de salida
		//BitClear(trefst2_aux,5);	   // Cancela banderas de falla de sensor de salida

tempeLoad_s03:
		tretram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c30e:	4b46      	ldr	r3, [pc, #280]	@ (800c428 <temper+0x324>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	001a      	movs	r2, r3
 800c314:	4b45      	ldr	r3, [pc, #276]	@ (800c42c <temper+0x328>)
 800c316:	8819      	ldrh	r1, [r3, #0]
 800c318:	4b47      	ldr	r3, [pc, #284]	@ (800c438 <temper+0x334>)
 800c31a:	0052      	lsls	r2, r2, #1
 800c31c:	52d1      	strh	r1, [r2, r3]
		    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
		        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
		    //{
		        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida

		        ADC1->CHSELR &= ADC_CHSELR_CHSEL14;
 800c31e:	4b3c      	ldr	r3, [pc, #240]	@ (800c410 <temper+0x30c>)
 800c320:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c322:	4b3b      	ldr	r3, [pc, #236]	@ (800c410 <temper+0x30c>)
 800c324:	2280      	movs	r2, #128	@ 0x80
 800c326:	01d2      	lsls	r2, r2, #7
 800c328:	400a      	ands	r2, r1
 800c32a:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800c32c:	4b38      	ldr	r3, [pc, #224]	@ (800c410 <temper+0x30c>)
 800c32e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c330:	4b37      	ldr	r3, [pc, #220]	@ (800c410 <temper+0x30c>)
 800c332:	2101      	movs	r1, #1
 800c334:	400a      	ands	r2, r1
 800c336:	629a      	str	r2, [r3, #40]	@ 0x28
		        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c338:	4b35      	ldr	r3, [pc, #212]	@ (800c410 <temper+0x30c>)
 800c33a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c33c:	4b34      	ldr	r3, [pc, #208]	@ (800c410 <temper+0x30c>)
 800c33e:	2280      	movs	r2, #128	@ 0x80
 800c340:	02d2      	lsls	r2, r2, #11
 800c342:	400a      	ands	r2, r1
 800c344:	629a      	str	r2, [r3, #40]	@ 0x28

		        ADC1->CHSELR |= ADC_CHSELR_CHSEL10;  // Canal 0
 800c346:	4b32      	ldr	r3, [pc, #200]	@ (800c410 <temper+0x30c>)
 800c348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c34a:	4b31      	ldr	r3, [pc, #196]	@ (800c410 <temper+0x30c>)
 800c34c:	2180      	movs	r1, #128	@ 0x80
 800c34e:	00c9      	lsls	r1, r1, #3
 800c350:	430a      	orrs	r2, r1
 800c352:	629a      	str	r2, [r3, #40]	@ 0x28
		        capturaAD ();
 800c354:	f000 fd60 	bl	800ce18 <capturaAD>
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
		HAL_ADC_ConfigChannel(&hadc, &sConfig);
		adcram = capturaAD(); // Convierte la señal*/


		Y_A();
 800c358:	f000 fdce 	bl	800cef8 <Y_A>
		//Y = adcramh;
		//A = edorefri;

		if(A == 1)
 800c35c:	4b27      	ldr	r3, [pc, #156]	@ (800c3fc <temper+0x2f8>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d005      	beq.n	800c370 <temper+0x26c>
			goto cmp_man_01;   // En autoprueba deja estos límites
		if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c364:	4b2b      	ldr	r3, [pc, #172]	@ (800c414 <temper+0x310>)
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	4a32      	ldr	r2, [pc, #200]	@ (800c434 <temper+0x330>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d808      	bhi.n	800c380 <temper+0x27c>
			goto lookopen;     // No, revise límite inferior
 800c36e:	e010      	b.n	800c392 <temper+0x28e>
			goto cmp_man_01;   // En autoprueba deja estos límites
 800c370:	46c0      	nop			@ (mov r8, r8)
		goto sens_short;

cmp_man_01:
		if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c372:	4b28      	ldr	r3, [pc, #160]	@ (800c414 <temper+0x310>)
 800c374:	881a      	ldrh	r2, [r3, #0]
 800c376:	23e2      	movs	r3, #226	@ 0xe2
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d308      	bcc.n	800c390 <temper+0x28c>
			goto lookopen;     // No, revise límite inferior

sens_short:
 800c37e:	e000      	b.n	800c382 <temper+0x27e>
		goto sens_short;
 800c380:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800c382:	4927      	ldr	r1, [pc, #156]	@ (800c420 <temper+0x31c>)
 800c384:	4826      	ldr	r0, [pc, #152]	@ (800c420 <temper+0x31c>)
 800c386:	2301      	movs	r3, #1
 800c388:	2200      	movs	r2, #0
 800c38a:	f000 fdcb 	bl	800cf24 <Bset_Clear_trfst>

//		BitSet(trefst,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
		//BitSet(trefst_aux,0);       //0x01;	/ Indica la falla (Sensor de ambiente en corto)
//		BitClear(trefst,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,1);     //0x02;	/ Cancela la otras falla del sensor de ambiente interno
		goto loadret;           // Carga el retardo de cancelación
 800c38e:	e01c      	b.n	800c3ca <temper+0x2c6>
			goto lookopen;     // No, revise límite inferior
 800c390:	46c0      	nop			@ (mov r8, r8)

lookopen:
		A = edorefri;
 800c392:	4b24      	ldr	r3, [pc, #144]	@ (800c424 <temper+0x320>)
 800c394:	781a      	ldrb	r2, [r3, #0]
 800c396:	4b19      	ldr	r3, [pc, #100]	@ (800c3fc <temper+0x2f8>)
 800c398:	701a      	strb	r2, [r3, #0]
		if(A == 1)
 800c39a:	4b18      	ldr	r3, [pc, #96]	@ (800c3fc <temper+0x2f8>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d004      	beq.n	800c3ac <temper+0x2a8>
			goto cmp_man_02;    // En autoprueba deja estos límites
		if(Y >= 0x002B)         // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800c3a2:	4b1c      	ldr	r3, [pc, #112]	@ (800c414 <temper+0x310>)
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a8:	d908      	bls.n	800c3bc <temper+0x2b8>
			goto sens_ok;       // Sí, indica sensor OK
 800c3aa:	e016      	b.n	800c3da <temper+0x2d6>
			goto cmp_man_02;    // En autoprueba deja estos límites
 800c3ac:	46c0      	nop			@ (mov r8, r8)
		goto sens_open;

cmp_man_02:
		if(Y >= 0x01AE)         // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800c3ae:	4b19      	ldr	r3, [pc, #100]	@ (800c414 <temper+0x310>)
 800c3b0:	881a      	ldrh	r2, [r3, #0]
 800c3b2:	23d7      	movs	r3, #215	@ 0xd7
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d20e      	bcs.n	800c3d8 <temper+0x2d4>
			goto sens_ok;       // Sí, indica sensor OK

sens_open:
 800c3ba:	e000      	b.n	800c3be <temper+0x2ba>
		goto sens_open;
 800c3bc:	46c0      	nop			@ (mov r8, r8)
		Bset_Clear_trfst(&trefst[0], &trefst[0],1, 0);
 800c3be:	4918      	ldr	r1, [pc, #96]	@ (800c420 <temper+0x31c>)
 800c3c0:	4817      	ldr	r0, [pc, #92]	@ (800c420 <temper+0x31c>)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f000 fdad 	bl	800cf24 <Bset_Clear_trfst>
		//BitSet(trefst_aux,1);      //0x02;	/ Indica la falla (Sensor de ambiente abierto)
//		BitClear(trefst,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno
		//BitClear(trefst_aux,0);    //0x01;	/ Cancela la otras falla del sensor de ambiente interno

loadret:
		retcncfa = 0x0F;   	   // Carga retardo de cancelación de falla; 1.5 segundos
 800c3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c400 <temper+0x2fc>)
 800c3cc:	220f      	movs	r2, #15
 800c3ce:	701a      	strb	r2, [r3, #0]
		cnthold = 0;           // Cancela el retardo de retención de display
 800c3d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c43c <temper+0x338>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	701a      	strb	r2, [r3, #0]
		goto tempe13;
 800c3d6:	e034      	b.n	800c442 <temper+0x33e>
			goto sens_ok;       // Sí, indica sensor OK
 800c3d8:	46c0      	nop			@ (mov r8, r8)

sens_ok:
		A = retcncfa;
 800c3da:	4b09      	ldr	r3, [pc, #36]	@ (800c400 <temper+0x2fc>)
 800c3dc:	781a      	ldrb	r2, [r3, #0]
 800c3de:	4b07      	ldr	r3, [pc, #28]	@ (800c3fc <temper+0x2f8>)
 800c3e0:	701a      	strb	r2, [r3, #0]
		if(A != 0)            // Ya se agotó el retardo?
 800c3e2:	4b06      	ldr	r3, [pc, #24]	@ (800c3fc <temper+0x2f8>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d12a      	bne.n	800c440 <temper+0x33c>
			goto tempe13;

		//BitClear(trefst_aux,0);   // Cancela banderas de falla de sensor de ambiente
		Bclear_Clear_trfst(&trefst[0], &trefst[0],0, 1);
 800c3ea:	490d      	ldr	r1, [pc, #52]	@ (800c420 <temper+0x31c>)
 800c3ec:	480c      	ldr	r0, [pc, #48]	@ (800c420 <temper+0x31c>)
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f000 fdb2 	bl	800cf5a <Bclear_Clear_trfst>
 800c3f6:	e024      	b.n	800c442 <temper+0x33e>
 800c3f8:	20000bbf 	.word	0x20000bbf
 800c3fc:	2000115a 	.word	0x2000115a
 800c400:	20000bc4 	.word	0x20000bc4
 800c404:	20000bc5 	.word	0x20000bc5
 800c408:	20000c52 	.word	0x20000c52
 800c40c:	20000c53 	.word	0x20000c53
 800c410:	40012400 	.word	0x40012400
 800c414:	2000115c 	.word	0x2000115c
 800c418:	000003ad 	.word	0x000003ad
 800c41c:	20000b80 	.word	0x20000b80
 800c420:	20000b88 	.word	0x20000b88
 800c424:	20000b98 	.word	0x20000b98
 800c428:	20000bc0 	.word	0x20000bc0
 800c42c:	20000b60 	.word	0x20000b60
 800c430:	20001118 	.word	0x20001118
 800c434:	000003b5 	.word	0x000003b5
 800c438:	20001128 	.word	0x20001128
 800c43c:	20000bc7 	.word	0x20000bc7
			goto tempe13;
 800c440:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,0);   // Cancela banderas de falla de sensor de ambiente
		//BitClear(trefst_aux,1);   // Cancela banderas de falla de sensor de ambiente
//		BitClear(trefst,1);   // Cancela banderas de falla de sensor de ambiente

tempe13:
	tambram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c442:	4bcd      	ldr	r3, [pc, #820]	@ (800c778 <temper+0x674>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	001a      	movs	r2, r3
 800c448:	4bcc      	ldr	r3, [pc, #816]	@ (800c77c <temper+0x678>)
 800c44a:	8819      	ldrh	r1, [r3, #0]
 800c44c:	4bcc      	ldr	r3, [pc, #816]	@ (800c780 <temper+0x67c>)
 800c44e:	0052      	lsls	r2, r2, #1
 800c450:	52d1      	strh	r1, [r2, r3]
	    // Verificar si el modo de secuencia es fijo o en reversa
	    //if ((ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED ||
	        //(ADC1->CFGR1 & ADC_CFGR1_SCANDIR) == ADC_SCAN_SEQ_FIXED_BACKWARD)
	   // {
	        // Habilitar el canal 0 en la secuencia de conversión usando la directiva definida
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL10;
 800c452:	4bcc      	ldr	r3, [pc, #816]	@ (800c784 <temper+0x680>)
 800c454:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c456:	4bcb      	ldr	r3, [pc, #812]	@ (800c784 <temper+0x680>)
 800c458:	2280      	movs	r2, #128	@ 0x80
 800c45a:	00d2      	lsls	r2, r2, #3
 800c45c:	400a      	ands	r2, r1
 800c45e:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL0;
 800c460:	4bc8      	ldr	r3, [pc, #800]	@ (800c784 <temper+0x680>)
 800c462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c464:	4bc7      	ldr	r3, [pc, #796]	@ (800c784 <temper+0x680>)
 800c466:	2101      	movs	r1, #1
 800c468:	400a      	ands	r2, r1
 800c46a:	629a      	str	r2, [r3, #40]	@ 0x28
	        ADC1->CHSELR &= ADC_CHSELR_CHSEL18;
 800c46c:	4bc5      	ldr	r3, [pc, #788]	@ (800c784 <temper+0x680>)
 800c46e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c470:	4bc4      	ldr	r3, [pc, #784]	@ (800c784 <temper+0x680>)
 800c472:	2280      	movs	r2, #128	@ 0x80
 800c474:	02d2      	lsls	r2, r2, #11
 800c476:	400a      	ands	r2, r1
 800c478:	629a      	str	r2, [r3, #40]	@ 0x28

	        ADC1->CHSELR |= ADC_CHSELR_CHSEL14;  // Canal 0
 800c47a:	4bc2      	ldr	r3, [pc, #776]	@ (800c784 <temper+0x680>)
 800c47c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c47e:	4bc1      	ldr	r3, [pc, #772]	@ (800c784 <temper+0x680>)
 800c480:	2180      	movs	r1, #128	@ 0x80
 800c482:	01c9      	lsls	r1, r1, #7
 800c484:	430a      	orrs	r2, r1
 800c486:	629a      	str	r2, [r3, #40]	@ 0x28
	        capturaAD ();
 800c488:	f000 fcc6 	bl	800ce18 <capturaAD>
	sConfig.Channel = ADC_CHANNEL_7; ///////////////////////////////////////////Cambiar canales
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
	adcram = capturaAD();  //Convierte la señal*/

	Y_A();
 800c48c:	f000 fd34 	bl	800cef8 <Y_A>
	//Y = adcramh;
	//A = edorefri;

	if(A == 1)
 800c490:	4bbd      	ldr	r3, [pc, #756]	@ (800c788 <temper+0x684>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d005      	beq.n	800c4a4 <temper+0x3a0>
		goto cmp_man_03;   // En autoprueba deja estos límites
	if(Y < 950)            // Límite superior 942 (4.6v (rt = 27.4k rs = 55))
 800c498:	4bbc      	ldr	r3, [pc, #752]	@ (800c78c <temper+0x688>)
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	4abc      	ldr	r2, [pc, #752]	@ (800c790 <temper+0x68c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d808      	bhi.n	800c4b4 <temper+0x3b0>
		goto lookopene;    // No, revise límite inferior
 800c4a2:	e010      	b.n	800c4c6 <temper+0x3c2>
		goto cmp_man_03;   // En autoprueba deja estos límites
 800c4a4:	46c0      	nop			@ (mov r8, r8)
	goto senshorte;

cmp_man_03:
	if(Y < 0x01C4)         // Límite superior 0x1BE \  Límites para autoprueba | Para una resistencia de 22 [Kohm]
 800c4a6:	4bb9      	ldr	r3, [pc, #740]	@ (800c78c <temper+0x688>)
 800c4a8:	881a      	ldrh	r2, [r3, #0]
 800c4aa:	23e2      	movs	r3, #226	@ 0xe2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d308      	bcc.n	800c4c4 <temper+0x3c0>
		goto lookopene;    // No, revise límite inferior

senshorte:
 800c4b2:	e000      	b.n	800c4b6 <temper+0x3b2>
	goto senshorte;
 800c4b4:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800c4b6:	49b7      	ldr	r1, [pc, #732]	@ (800c794 <temper+0x690>)
 800c4b8:	48b6      	ldr	r0, [pc, #728]	@ (800c794 <temper+0x690>)
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	2202      	movs	r2, #2
 800c4be:	f000 fd31 	bl	800cf24 <Bset_Clear_trfst>

//	BitSet(trefst,2);      //0x04   / Indica sensor del evaporador en corto
	//BitSet(trefst_aux,2);      //0x04   / Indica sensor del evaporador en corto
//	BitClear(trefst,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,3);     //0x28;	/ Cancela las otras dos fallas del sensor de evaporador
	goto loadret2;         // Carga retardo de cancelación de falla
 800c4c2:	e01c      	b.n	800c4fe <temper+0x3fa>
		goto lookopene;    // No, revise límite inferior
 800c4c4:	46c0      	nop			@ (mov r8, r8)

lookopene:
	A = edorefri;
 800c4c6:	4bb4      	ldr	r3, [pc, #720]	@ (800c798 <temper+0x694>)
 800c4c8:	781a      	ldrb	r2, [r3, #0]
 800c4ca:	4baf      	ldr	r3, [pc, #700]	@ (800c788 <temper+0x684>)
 800c4cc:	701a      	strb	r2, [r3, #0]
	if(A == 1)
 800c4ce:	4bae      	ldr	r3, [pc, #696]	@ (800c788 <temper+0x684>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d004      	beq.n	800c4e0 <temper+0x3dc>
		goto cmp_man_04;   // En autoprueba deja estos límites
	if(Y >= 0x002B)        // Ajuste en comportamiento de la Falla del sensor evaporador IJG 30/07/14
 800c4d6:	4bad      	ldr	r3, [pc, #692]	@ (800c78c <temper+0x688>)
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4dc:	d908      	bls.n	800c4f0 <temper+0x3ec>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800c4de:	e013      	b.n	800c508 <temper+0x404>
		goto cmp_man_04;   // En autoprueba deja estos límites
 800c4e0:	46c0      	nop			@ (mov r8, r8)
	goto sens_opene;

cmp_man_04:
	if(Y >= 0x01AE)        // Límite inferior 0x1B4 /  con tolerancia del 1% en el probador.
 800c4e2:	4baa      	ldr	r3, [pc, #680]	@ (800c78c <temper+0x688>)
 800c4e4:	881a      	ldrh	r2, [r3, #0]
 800c4e6:	23d7      	movs	r3, #215	@ 0xd7
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d20b      	bcs.n	800c506 <temper+0x402>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla

sens_opene:
 800c4ee:	e000      	b.n	800c4f2 <temper+0x3ee>
	goto sens_opene;
 800c4f0:	46c0      	nop			@ (mov r8, r8)
	Bset_Clear_trfst(&trefst[0], &trefst[0],3, 2);
 800c4f2:	49a8      	ldr	r1, [pc, #672]	@ (800c794 <temper+0x690>)
 800c4f4:	48a7      	ldr	r0, [pc, #668]	@ (800c794 <temper+0x690>)
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	2203      	movs	r2, #3
 800c4fa:	f000 fd13 	bl	800cf24 <Bset_Clear_trfst>
	//BitSet(trefst_aux,3);   //0x08;	/ Indica sensor del evaporador abierto
//	BitClear(trefst,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador
	//BitClear(trefst_aux,2); //0x24;	/ Cancela las otras dos fallas del sensor de evaporador

loadret2:
	retcncfe = 0x14;    // Carga retardo de cancelación de falla; 2 segundos
 800c4fe:	4ba7      	ldr	r3, [pc, #668]	@ (800c79c <temper+0x698>)
 800c500:	2214      	movs	r2, #20
 800c502:	701a      	strb	r2, [r3, #0]
	goto tempe16;
 800c504:	e010      	b.n	800c528 <temper+0x424>
		goto sens_oke;     // Si, entrega el dato medido y cancela las banderas de falla
 800c506:	46c0      	nop			@ (mov r8, r8)

sens_oke:
	A = retcncfe;
 800c508:	4ba4      	ldr	r3, [pc, #656]	@ (800c79c <temper+0x698>)
 800c50a:	781a      	ldrb	r2, [r3, #0]
 800c50c:	4b9e      	ldr	r3, [pc, #632]	@ (800c788 <temper+0x684>)
 800c50e:	701a      	strb	r2, [r3, #0]
	if(A != 0)          // Ya se agotó el retardo?
 800c510:	4b9d      	ldr	r3, [pc, #628]	@ (800c788 <temper+0x684>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d106      	bne.n	800c526 <temper+0x422>
		goto tempe16;
	Bclear_Clear_trfst(&trefst[0], &trefst[0],2, 3);
 800c518:	499e      	ldr	r1, [pc, #632]	@ (800c794 <temper+0x690>)
 800c51a:	489e      	ldr	r0, [pc, #632]	@ (800c794 <temper+0x690>)
 800c51c:	2303      	movs	r3, #3
 800c51e:	2202      	movs	r2, #2
 800c520:	f000 fd1b 	bl	800cf5a <Bclear_Clear_trfst>
 800c524:	e000      	b.n	800c528 <temper+0x424>
		goto tempe16;
 800c526:	46c0      	nop			@ (mov r8, r8)
	//BitClear(trefst_aux,2); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
//	BitClear(trefst,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador
	//BitClear(trefst_aux,3); //0x0C;	/ Cancela indicaciones de falla del sensor del evaporador

tempe16:
	if(trefst[2]) //#f_sdc // El sensor del evaporador esta en corto?
 800c528:	4b9a      	ldr	r3, [pc, #616]	@ (800c794 <temper+0x690>)
 800c52a:	789b      	ldrb	r3, [r3, #2]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d004      	beq.n	800c53a <temper+0x436>
	//if(GetRegFlagState(trefst_aux, 2)) //#f_sdc // El sensor del evaporador esta en corto?
		goto temper_j01;
 800c530:	46c0      	nop			@ (mov r8, r8)
	goto tempe16a;                 // No, revisa temperatura alta

temper_j01:
		adcramh = 0x000A;           // Carga el dato de temperatura del evaporador con < -50°C
 800c532:	4b92      	ldr	r3, [pc, #584]	@ (800c77c <temper+0x678>)
 800c534:	220a      	movs	r2, #10
 800c536:	801a      	strh	r2, [r3, #0]
 800c538:	e000      	b.n	800c53c <temper+0x438>
	goto tempe16a;                 // No, revisa temperatura alta
 800c53a:	46c0      	nop			@ (mov r8, r8)
tempe16a:
		tevaram[cntmues] = adcramh;//////////////////////////////////////////////////////Reduccion de obtencion de muestra
 800c53c:	4b8e      	ldr	r3, [pc, #568]	@ (800c778 <temper+0x674>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	001a      	movs	r2, r3
 800c542:	4b8e      	ldr	r3, [pc, #568]	@ (800c77c <temper+0x678>)
 800c544:	8819      	ldrh	r1, [r3, #0]
 800c546:	4b96      	ldr	r3, [pc, #600]	@ (800c7a0 <temper+0x69c>)
 800c548:	0052      	lsls	r2, r2, #1
 800c54a:	52d1      	strh	r1, [r2, r3]

	ldw			X,#volt_12vcd;
	mov			wreg,cntmues;
	call		cargamues;*/

		cntmues++;         //Incrementa el contador de muestra
 800c54c:	4b8a      	ldr	r3, [pc, #552]	@ (800c778 <temper+0x674>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	3301      	adds	r3, #1
 800c552:	b2da      	uxtb	r2, r3
 800c554:	4b88      	ldr	r3, [pc, #544]	@ (800c778 <temper+0x674>)
 800c556:	701a      	strb	r2, [r3, #0]
		A = cntmues;
 800c558:	4b87      	ldr	r3, [pc, #540]	@ (800c778 <temper+0x674>)
 800c55a:	781a      	ldrb	r2, [r3, #0]
 800c55c:	4b8a      	ldr	r3, [pc, #552]	@ (800c788 <temper+0x684>)
 800c55e:	701a      	strb	r2, [r3, #0]
		if(A >= 8)         // Ya fueron 8 muestras?
 800c560:	4b89      	ldr	r3, [pc, #548]	@ (800c788 <temper+0x684>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b07      	cmp	r3, #7
 800c566:	d800      	bhi.n	800c56a <temper+0x466>
 800c568:	e29e      	b.n	800caa8 <temper+0x9a4>
			goto tempe17;  // Si, obten el promedio
 800c56a:	46c0      	nop			@ (mov r8, r8)
bateria_descargada:
							 bset		 flagsBattery,#batOFF
							 ;mov     edo_display,#$00    ;El display debe estar APAGADO

fin_revisa_v12v:
*/  resul = 0;
 800c56c:	4b8d      	ldr	r3, [pc, #564]	@ (800c7a4 <temper+0x6a0>)
 800c56e:	2200      	movs	r2, #0
 800c570:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c572:	1dfb      	adds	r3, r7, #7
 800c574:	2200      	movs	r2, #0
 800c576:	701a      	strb	r2, [r3, #0]
 800c578:	e00f      	b.n	800c59a <temper+0x496>
	{
		resul = resul + tsacram[i];    // Calcula el promedio
 800c57a:	1dfb      	adds	r3, r7, #7
 800c57c:	781a      	ldrb	r2, [r3, #0]
 800c57e:	4b8a      	ldr	r3, [pc, #552]	@ (800c7a8 <temper+0x6a4>)
 800c580:	0052      	lsls	r2, r2, #1
 800c582:	5ad2      	ldrh	r2, [r2, r3]
 800c584:	4b87      	ldr	r3, [pc, #540]	@ (800c7a4 <temper+0x6a0>)
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	18d3      	adds	r3, r2, r3
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	4b85      	ldr	r3, [pc, #532]	@ (800c7a4 <temper+0x6a0>)
 800c58e:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c590:	1dfb      	adds	r3, r7, #7
 800c592:	781a      	ldrb	r2, [r3, #0]
 800c594:	1dfb      	adds	r3, r7, #7
 800c596:	3201      	adds	r2, #1
 800c598:	701a      	strb	r2, [r3, #0]
 800c59a:	1dfb      	adds	r3, r7, #7
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	2b07      	cmp	r3, #7
 800c5a0:	d9eb      	bls.n	800c57a <temper+0x476>
	}
	resul = resul / 8;
 800c5a2:	4b80      	ldr	r3, [pc, #512]	@ (800c7a4 <temper+0x6a0>)
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	08db      	lsrs	r3, r3, #3
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	4b7e      	ldr	r3, [pc, #504]	@ (800c7a4 <temper+0x6a0>)
 800c5ac:	801a      	strh	r2, [r3, #0]
	linealiza();
 800c5ae:	f000 fafb 	bl	800cba8 <linealiza>
	X = tempo;
 800c5b2:	4b7e      	ldr	r3, [pc, #504]	@ (800c7ac <temper+0x6a8>)
 800c5b4:	881a      	ldrh	r2, [r3, #0]
 800c5b6:	4b7e      	ldr	r3, [pc, #504]	@ (800c7b0 <temper+0x6ac>)
 800c5b8:	801a      	strh	r2, [r3, #0]
	tsac_w = X;        //Entrega el dato de temperatura de salida linealizada del sensor 4 ambiente o condensador
 800c5ba:	4b7d      	ldr	r3, [pc, #500]	@ (800c7b0 <temper+0x6ac>)
 800c5bc:	881a      	ldrh	r2, [r3, #0]
 800c5be:	4b7d      	ldr	r3, [pc, #500]	@ (800c7b4 <temper+0x6b0>)
 800c5c0:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800c5c2:	4b78      	ldr	r3, [pc, #480]	@ (800c7a4 <temper+0x6a0>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c5c8:	1dbb      	adds	r3, r7, #6
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	e00f      	b.n	800c5f0 <temper+0x4ec>
	{
		resul = resul + tretram[i];   // Calcula el promedio
 800c5d0:	1dbb      	adds	r3, r7, #6
 800c5d2:	781a      	ldrb	r2, [r3, #0]
 800c5d4:	4b78      	ldr	r3, [pc, #480]	@ (800c7b8 <temper+0x6b4>)
 800c5d6:	0052      	lsls	r2, r2, #1
 800c5d8:	5ad2      	ldrh	r2, [r2, r3]
 800c5da:	4b72      	ldr	r3, [pc, #456]	@ (800c7a4 <temper+0x6a0>)
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	18d3      	adds	r3, r2, r3
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	4b70      	ldr	r3, [pc, #448]	@ (800c7a4 <temper+0x6a0>)
 800c5e4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c5e6:	1dbb      	adds	r3, r7, #6
 800c5e8:	781a      	ldrb	r2, [r3, #0]
 800c5ea:	1dbb      	adds	r3, r7, #6
 800c5ec:	3201      	adds	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]
 800c5f0:	1dbb      	adds	r3, r7, #6
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b07      	cmp	r3, #7
 800c5f6:	d9eb      	bls.n	800c5d0 <temper+0x4cc>
	}
	resul = resul / 8;
 800c5f8:	4b6a      	ldr	r3, [pc, #424]	@ (800c7a4 <temper+0x6a0>)
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	08db      	lsrs	r3, r3, #3
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	4b68      	ldr	r3, [pc, #416]	@ (800c7a4 <temper+0x6a0>)
 800c602:	801a      	strh	r2, [r3, #0]
	linealiza();
 800c604:	f000 fad0 	bl	800cba8 <linealiza>
	X = tempo;
 800c608:	4b68      	ldr	r3, [pc, #416]	@ (800c7ac <temper+0x6a8>)
 800c60a:	881a      	ldrh	r2, [r3, #0]
 800c60c:	4b68      	ldr	r3, [pc, #416]	@ (800c7b0 <temper+0x6ac>)
 800c60e:	801a      	strh	r2, [r3, #0]
	tret_w = X;    /// Entrega el dato de temperatura de salida linealizada
 800c610:	4b67      	ldr	r3, [pc, #412]	@ (800c7b0 <temper+0x6ac>)
 800c612:	881a      	ldrh	r2, [r3, #0]
 800c614:	4b69      	ldr	r3, [pc, #420]	@ (800c7bc <temper+0x6b8>)
 800c616:	801a      	strh	r2, [r3, #0]


	resul = 0;
 800c618:	4b62      	ldr	r3, [pc, #392]	@ (800c7a4 <temper+0x6a0>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c61e:	1d7b      	adds	r3, r7, #5
 800c620:	2200      	movs	r2, #0
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	e00f      	b.n	800c646 <temper+0x542>
	{
		resul = resul + tevaram[i];      // Calcula el promedio
 800c626:	1d7b      	adds	r3, r7, #5
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	4b5d      	ldr	r3, [pc, #372]	@ (800c7a0 <temper+0x69c>)
 800c62c:	0052      	lsls	r2, r2, #1
 800c62e:	5ad2      	ldrh	r2, [r2, r3]
 800c630:	4b5c      	ldr	r3, [pc, #368]	@ (800c7a4 <temper+0x6a0>)
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	18d3      	adds	r3, r2, r3
 800c636:	b29a      	uxth	r2, r3
 800c638:	4b5a      	ldr	r3, [pc, #360]	@ (800c7a4 <temper+0x6a0>)
 800c63a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c63c:	1d7b      	adds	r3, r7, #5
 800c63e:	781a      	ldrb	r2, [r3, #0]
 800c640:	1d7b      	adds	r3, r7, #5
 800c642:	3201      	adds	r2, #1
 800c644:	701a      	strb	r2, [r3, #0]
 800c646:	1d7b      	adds	r3, r7, #5
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b07      	cmp	r3, #7
 800c64c:	d9eb      	bls.n	800c626 <temper+0x522>
	}
	resul = resul / 8;
 800c64e:	4b55      	ldr	r3, [pc, #340]	@ (800c7a4 <temper+0x6a0>)
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	08db      	lsrs	r3, r3, #3
 800c654:	b29a      	uxth	r2, r3
 800c656:	4b53      	ldr	r3, [pc, #332]	@ (800c7a4 <temper+0x6a0>)
 800c658:	801a      	strh	r2, [r3, #0]
	linealiza();
 800c65a:	f000 faa5 	bl	800cba8 <linealiza>
	tevaf = lowByte(tempo);      // Entrega el dato de temperatura del evaporador a 10 bits
 800c65e:	4b53      	ldr	r3, [pc, #332]	@ (800c7ac <temper+0x6a8>)
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	b2da      	uxtb	r2, r3
 800c664:	4b56      	ldr	r3, [pc, #344]	@ (800c7c0 <temper+0x6bc>)
 800c666:	701a      	strb	r2, [r3, #0]
	teval = highByte(tempo);
 800c668:	4b50      	ldr	r3, [pc, #320]	@ (800c7ac <temper+0x6a8>)
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	0a1b      	lsrs	r3, r3, #8
 800c66e:	b29b      	uxth	r3, r3
 800c670:	b2da      	uxtb	r2, r3
 800c672:	4b54      	ldr	r3, [pc, #336]	@ (800c7c4 <temper+0x6c0>)
 800c674:	701a      	strb	r2, [r3, #0]

	resul = 0;
 800c676:	4b4b      	ldr	r3, [pc, #300]	@ (800c7a4 <temper+0x6a0>)
 800c678:	2200      	movs	r2, #0
 800c67a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c67c:	1d3b      	adds	r3, r7, #4
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
 800c682:	e00f      	b.n	800c6a4 <temper+0x5a0>
	{
		resul = resul + tambram[i];    // Calcula el promedio
 800c684:	1d3b      	adds	r3, r7, #4
 800c686:	781a      	ldrb	r2, [r3, #0]
 800c688:	4b3d      	ldr	r3, [pc, #244]	@ (800c780 <temper+0x67c>)
 800c68a:	0052      	lsls	r2, r2, #1
 800c68c:	5ad2      	ldrh	r2, [r2, r3]
 800c68e:	4b45      	ldr	r3, [pc, #276]	@ (800c7a4 <temper+0x6a0>)
 800c690:	881b      	ldrh	r3, [r3, #0]
 800c692:	18d3      	adds	r3, r2, r3
 800c694:	b29a      	uxth	r2, r3
 800c696:	4b43      	ldr	r3, [pc, #268]	@ (800c7a4 <temper+0x6a0>)
 800c698:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 800c69a:	1d3b      	adds	r3, r7, #4
 800c69c:	781a      	ldrb	r2, [r3, #0]
 800c69e:	1d3b      	adds	r3, r7, #4
 800c6a0:	3201      	adds	r2, #1
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	1d3b      	adds	r3, r7, #4
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b07      	cmp	r3, #7
 800c6aa:	d9eb      	bls.n	800c684 <temper+0x580>
	}
	resul = resul / 8;
 800c6ac:	4b3d      	ldr	r3, [pc, #244]	@ (800c7a4 <temper+0x6a0>)
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	08db      	lsrs	r3, r3, #3
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	4b3b      	ldr	r3, [pc, #236]	@ (800c7a4 <temper+0x6a0>)
 800c6b6:	801a      	strh	r2, [r3, #0]

	Y = promant;                  // Toma el valor anterior del promedio
 800c6b8:	4b43      	ldr	r3, [pc, #268]	@ (800c7c8 <temper+0x6c4>)
 800c6ba:	881a      	ldrh	r2, [r3, #0]
 800c6bc:	4b33      	ldr	r3, [pc, #204]	@ (800c78c <temper+0x688>)
 800c6be:	801a      	strh	r2, [r3, #0]
	Y = Y - resul;			      // w = promant - Resul
 800c6c0:	4b32      	ldr	r3, [pc, #200]	@ (800c78c <temper+0x688>)
 800c6c2:	881a      	ldrh	r2, [r3, #0]
 800c6c4:	4b37      	ldr	r3, [pc, #220]	@ (800c7a4 <temper+0x6a0>)
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	4b2f      	ldr	r3, [pc, #188]	@ (800c78c <temper+0x688>)
 800c6ce:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800c6d0:	4b2e      	ldr	r3, [pc, #184]	@ (800c78c <temper+0x688>)
 800c6d2:	881b      	ldrh	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d100      	bne.n	800c6da <temper+0x5d6>
 800c6d8:	e0ab      	b.n	800c832 <temper+0x72e>
		goto tempe27;                //nota1: checar comparaciones
	else if ((GetRegFlagState(Y, 15)) == 0)
 800c6da:	4b2c      	ldr	r3, [pc, #176]	@ (800c78c <temper+0x688>)
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	b21b      	sxth	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	da18      	bge.n	800c716 <temper+0x612>
		goto tempe25b;            //La diferencia de promedios es positiva?

	Y = Y - 0xFFFF;               // La diferencia es igual a -1?
 800c6e4:	4b29      	ldr	r3, [pc, #164]	@ (800c78c <temper+0x688>)
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	4b27      	ldr	r3, [pc, #156]	@ (800c78c <temper+0x688>)
 800c6ee:	801a      	strh	r2, [r3, #0]
	if (Y == 0)
 800c6f0:	4b26      	ldr	r3, [pc, #152]	@ (800c78c <temper+0x688>)
 800c6f2:	881b      	ldrh	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d028      	beq.n	800c74a <temper+0x646>
		goto vesiestab;  		  // Si, revisa estabilidad
	Y = resul;
 800c6f8:	4b2a      	ldr	r3, [pc, #168]	@ (800c7a4 <temper+0x6a0>)
 800c6fa:	881a      	ldrh	r2, [r3, #0]
 800c6fc:	4b23      	ldr	r3, [pc, #140]	@ (800c78c <temper+0x688>)
 800c6fe:	801a      	strh	r2, [r3, #0]
	Y = Y - 0x0001;              // Decrementa el promedio actual
 800c700:	4b22      	ldr	r3, [pc, #136]	@ (800c78c <temper+0x688>)
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	3b01      	subs	r3, #1
 800c706:	b29a      	uxth	r2, r3
 800c708:	4b20      	ldr	r3, [pc, #128]	@ (800c78c <temper+0x688>)
 800c70a:	801a      	strh	r2, [r3, #0]
	resul = Y;
 800c70c:	4b1f      	ldr	r3, [pc, #124]	@ (800c78c <temper+0x688>)
 800c70e:	881a      	ldrh	r2, [r3, #0]
 800c710:	4b24      	ldr	r3, [pc, #144]	@ (800c7a4 <temper+0x6a0>)
 800c712:	801a      	strh	r2, [r3, #0]
	goto tempe26;
 800c714:	e076      	b.n	800c804 <temper+0x700>
		goto tempe25b;            //La diferencia de promedios es positiva?
 800c716:	46c0      	nop			@ (mov r8, r8)

tempe25b:
		Y = Y - 0x0001;           // La diferencia es igual a 1?
 800c718:	4b1c      	ldr	r3, [pc, #112]	@ (800c78c <temper+0x688>)
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	b29a      	uxth	r2, r3
 800c720:	4b1a      	ldr	r3, [pc, #104]	@ (800c78c <temper+0x688>)
 800c722:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800c724:	4b19      	ldr	r3, [pc, #100]	@ (800c78c <temper+0x688>)
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d010      	beq.n	800c74e <temper+0x64a>
			goto vesiestab;       // Si, revisa estabilidad
		Y = resul;
 800c72c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a4 <temper+0x6a0>)
 800c72e:	881a      	ldrh	r2, [r3, #0]
 800c730:	4b16      	ldr	r3, [pc, #88]	@ (800c78c <temper+0x688>)
 800c732:	801a      	strh	r2, [r3, #0]
		Y = Y + 0x0001;          // Decrementa el promedio actual
 800c734:	4b15      	ldr	r3, [pc, #84]	@ (800c78c <temper+0x688>)
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	3301      	adds	r3, #1
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	4b13      	ldr	r3, [pc, #76]	@ (800c78c <temper+0x688>)
 800c73e:	801a      	strh	r2, [r3, #0]
		resul = Y;
 800c740:	4b12      	ldr	r3, [pc, #72]	@ (800c78c <temper+0x688>)
 800c742:	881a      	ldrh	r2, [r3, #0]
 800c744:	4b17      	ldr	r3, [pc, #92]	@ (800c7a4 <temper+0x6a0>)
 800c746:	801a      	strh	r2, [r3, #0]
		goto tempe26;
 800c748:	e05c      	b.n	800c804 <temper+0x700>
		goto vesiestab;  		  // Si, revisa estabilidad
 800c74a:	46c0      	nop			@ (mov r8, r8)
 800c74c:	e000      	b.n	800c750 <temper+0x64c>
			goto vesiestab;       // Si, revisa estabilidad
 800c74e:	46c0      	nop			@ (mov r8, r8)

vesiestab:
		Y = ultimoprm;     // Toma el valor del último promedio
 800c750:	4b1e      	ldr	r3, [pc, #120]	@ (800c7cc <temper+0x6c8>)
 800c752:	881a      	ldrh	r2, [r3, #0]
 800c754:	4b0d      	ldr	r3, [pc, #52]	@ (800c78c <temper+0x688>)
 800c756:	801a      	strh	r2, [r3, #0]
		Y = Y - resul;     //w = prominter - Resul
 800c758:	4b0c      	ldr	r3, [pc, #48]	@ (800c78c <temper+0x688>)
 800c75a:	881a      	ldrh	r2, [r3, #0]
 800c75c:	4b11      	ldr	r3, [pc, #68]	@ (800c7a4 <temper+0x6a0>)
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	b29a      	uxth	r2, r3
 800c764:	4b09      	ldr	r3, [pc, #36]	@ (800c78c <temper+0x688>)
 800c766:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800c768:	4b08      	ldr	r3, [pc, #32]	@ (800c78c <temper+0x688>)
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d031      	beq.n	800c7d4 <temper+0x6d0>
			goto estable;  // El nuevo dato es igual a último?
		cntsame = 0;       // No, inicia el contador de promedios iguales
 800c770:	4b17      	ldr	r3, [pc, #92]	@ (800c7d0 <temper+0x6cc>)
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
		goto noestab;
 800c776:	e034      	b.n	800c7e2 <temper+0x6de>
 800c778:	20000bc0 	.word	0x20000bc0
 800c77c:	20000b60 	.word	0x20000b60
 800c780:	20001138 	.word	0x20001138
 800c784:	40012400 	.word	0x40012400
 800c788:	2000115a 	.word	0x2000115a
 800c78c:	2000115c 	.word	0x2000115c
 800c790:	000003b5 	.word	0x000003b5
 800c794:	20000b88 	.word	0x20000b88
 800c798:	20000b98 	.word	0x20000b98
 800c79c:	20000bc5 	.word	0x20000bc5
 800c7a0:	20001148 	.word	0x20001148
 800c7a4:	20001160 	.word	0x20001160
 800c7a8:	20001118 	.word	0x20001118
 800c7ac:	20001162 	.word	0x20001162
 800c7b0:	2000115e 	.word	0x2000115e
 800c7b4:	200010a0 	.word	0x200010a0
 800c7b8:	20001128 	.word	0x20001128
 800c7bc:	20000c54 	.word	0x20000c54
 800c7c0:	20000bb3 	.word	0x20000bb3
 800c7c4:	20000bb2 	.word	0x20000bb2
 800c7c8:	20001166 	.word	0x20001166
 800c7cc:	20001168 	.word	0x20001168
 800c7d0:	20000bc6 	.word	0x20000bc6
			goto estable;  // El nuevo dato es igual a último?
 800c7d4:	46c0      	nop			@ (mov r8, r8)

estable:
		cntsame++;         // Si, incrementa el contador
 800c7d6:	4bc8      	ldr	r3, [pc, #800]	@ (800caf8 <temper+0x9f4>)
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	4bc6      	ldr	r3, [pc, #792]	@ (800caf8 <temper+0x9f4>)
 800c7e0:	701a      	strb	r2, [r3, #0]

noestab:
		Y = resul;
 800c7e2:	4bc6      	ldr	r3, [pc, #792]	@ (800cafc <temper+0x9f8>)
 800c7e4:	881a      	ldrh	r2, [r3, #0]
 800c7e6:	4bc6      	ldr	r3, [pc, #792]	@ (800cb00 <temper+0x9fc>)
 800c7e8:	801a      	strh	r2, [r3, #0]
		ultimoprm = Y;     // Almacena el último dato para la siguiente comparación
 800c7ea:	4bc5      	ldr	r3, [pc, #788]	@ (800cb00 <temper+0x9fc>)
 800c7ec:	881a      	ldrh	r2, [r3, #0]
 800c7ee:	4bc5      	ldr	r3, [pc, #788]	@ (800cb04 <temper+0xa00>)
 800c7f0:	801a      	strh	r2, [r3, #0]
		A = cntsame;
 800c7f2:	4bc1      	ldr	r3, [pc, #772]	@ (800caf8 <temper+0x9f4>)
 800c7f4:	781a      	ldrb	r2, [r3, #0]
 800c7f6:	4bc4      	ldr	r3, [pc, #784]	@ (800cb08 <temper+0xa04>)
 800c7f8:	701a      	strb	r2, [r3, #0]
		if (A < 0x0F) // Ya esta estable por lo menos por 12 segundos?
 800c7fa:	4bc3      	ldr	r3, [pc, #780]	@ (800cb08 <temper+0xa04>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	2b0e      	cmp	r3, #14
 800c800:	d920      	bls.n	800c844 <temper+0x740>
			goto tempe29;

tempe26:
 800c802:	46c0      	nop			@ (mov r8, r8)
		X = resul;          // Almacena el dato anteriorpara la siguiente comparación
 800c804:	4bbd      	ldr	r3, [pc, #756]	@ (800cafc <temper+0x9f8>)
 800c806:	881a      	ldrh	r2, [r3, #0]
 800c808:	4bc0      	ldr	r3, [pc, #768]	@ (800cb0c <temper+0xa08>)
 800c80a:	801a      	strh	r2, [r3, #0]
		promant = X;
 800c80c:	4bbf      	ldr	r3, [pc, #764]	@ (800cb0c <temper+0xa08>)
 800c80e:	881a      	ldrh	r2, [r3, #0]
 800c810:	4bbf      	ldr	r3, [pc, #764]	@ (800cb10 <temper+0xa0c>)
 800c812:	801a      	strh	r2, [r3, #0]
		linealiza();
 800c814:	f000 f9c8 	bl	800cba8 <linealiza>
		tdevf = lowByte(tempo);  // Entrega el dato de temperatura del ambiente en °C con fracción
 800c818:	4bbe      	ldr	r3, [pc, #760]	@ (800cb14 <temper+0xa10>)
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	4bbe      	ldr	r3, [pc, #760]	@ (800cb18 <temper+0xa14>)
 800c820:	701a      	strb	r2, [r3, #0]
		tdevl = highByte(tempo);
 800c822:	4bbc      	ldr	r3, [pc, #752]	@ (800cb14 <temper+0xa10>)
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	0a1b      	lsrs	r3, r3, #8
 800c828:	b29b      	uxth	r3, r3
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	4bbb      	ldr	r3, [pc, #748]	@ (800cb1c <temper+0xa18>)
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	e000      	b.n	800c834 <temper+0x730>
		goto tempe27;                //nota1: checar comparaciones
 800c832:	46c0      	nop			@ (mov r8, r8)

tempe27:
		ultimoprm = promant;  // Actualiza el dato del último promedio
 800c834:	4bb6      	ldr	r3, [pc, #728]	@ (800cb10 <temper+0xa0c>)
 800c836:	881a      	ldrh	r2, [r3, #0]
 800c838:	4bb2      	ldr	r3, [pc, #712]	@ (800cb04 <temper+0xa00>)
 800c83a:	801a      	strh	r2, [r3, #0]
		cntsame = 0;          // Inicia el contador de promedios iguales hacia arriba
 800c83c:	4bae      	ldr	r3, [pc, #696]	@ (800caf8 <temper+0x9f4>)
 800c83e:	2200      	movs	r2, #0
 800c840:	701a      	strb	r2, [r3, #0]
 800c842:	e000      	b.n	800c846 <temper+0x742>
			goto tempe29;
 800c844:	46c0      	nop			@ (mov r8, r8)

tempe29:
		X = tdev_to_Word();	// tdev;
 800c846:	f7f9 fbf3 	bl	8006030 <tdev_to_Word>
 800c84a:	0003      	movs	r3, r0
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	4baf      	ldr	r3, [pc, #700]	@ (800cb0c <temper+0xa08>)
 800c850:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800c852:	4bae      	ldr	r3, [pc, #696]	@ (800cb0c <temper+0xa08>)
 800c854:	881a      	ldrh	r2, [r3, #0]
 800c856:	4bb2      	ldr	r3, [pc, #712]	@ (800cb20 <temper+0xa1c>)
 800c858:	801a      	strh	r2, [r3, #0]

		A = Plantilla [numSens];
 800c85a:	4bb2      	ldr	r3, [pc, #712]	@ (800cb24 <temper+0xa20>)
 800c85c:	2259      	movs	r2, #89	@ 0x59
 800c85e:	5c9a      	ldrb	r2, [r3, r2]
 800c860:	4ba9      	ldr	r3, [pc, #676]	@ (800cb08 <temper+0xa04>)
 800c862:	701a      	strb	r2, [r3, #0]
		if (A < 3)
 800c864:	4ba8      	ldr	r3, [pc, #672]	@ (800cb08 <temper+0xa04>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d91d      	bls.n	800c8a8 <temper+0x7a4>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
		if(!GetRegFlagState(Plantilla [logicos], 7))// if(GetRegFlagState(Plantilla [logicos], 7) == 0) // Sí está seleccionada la función visualiza sensor 3 en display
 800c86c:	4bad      	ldr	r3, [pc, #692]	@ (800cb24 <temper+0xa20>)
 800c86e:	2253      	movs	r2, #83	@ 0x53
 800c870:	5c9b      	ldrb	r3, [r3, r2]
 800c872:	b25b      	sxtb	r3, r3
 800c874:	2b00      	cmp	r3, #0
 800c876:	da19      	bge.n	800c8ac <temper+0x7a8>
			goto tempe26a;
		if(trefst2[4]) //#f_s3short
 800c878:	4bab      	ldr	r3, [pc, #684]	@ (800cb28 <temper+0xa24>)
 800c87a:	791b      	ldrb	r3, [r3, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d107      	bne.n	800c890 <temper+0x78c>
		//if(GetRegFlagState(trefst2_aux, 4)) //#f_s3short
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
		if(!trefst2[5]) //#f_s3open
 800c880:	4ba9      	ldr	r3, [pc, #676]	@ (800cb28 <temper+0xa24>)
 800c882:	795b      	ldrb	r3, [r3, #5]
 800c884:	2201      	movs	r2, #1
 800c886:	4053      	eors	r3, r2
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d102      	bne.n	800c894 <temper+0x790>
		//if(GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
desptdv_failSens3:
 800c88e:	e000      	b.n	800c892 <temper+0x78e>
			goto desptdv_failSens3;   // El sensor 3 esta en corto?
 800c890:	46c0      	nop			@ (mov r8, r8)
		goto tempe26a;                // Si el sensor 3 tiene alguna falla , muestra temperatura de sensor 1
 800c892:	e00c      	b.n	800c8ae <temper+0x7aa>
			goto desptdv_OKSens3;     // No, entonces el sensor 3 esta abierto?
 800c894:	46c0      	nop			@ (mov r8, r8)
desptdv_OKSens3:
		X = tret_w;
 800c896:	4ba5      	ldr	r3, [pc, #660]	@ (800cb2c <temper+0xa28>)
 800c898:	881a      	ldrh	r2, [r3, #0]
 800c89a:	4b9c      	ldr	r3, [pc, #624]	@ (800cb0c <temper+0xa08>)
 800c89c:	801a      	strh	r2, [r3, #0]
		tDisplay_w = X;
 800c89e:	4b9b      	ldr	r3, [pc, #620]	@ (800cb0c <temper+0xa08>)
 800c8a0:	881a      	ldrh	r2, [r3, #0]
 800c8a2:	4b9f      	ldr	r3, [pc, #636]	@ (800cb20 <temper+0xa1c>)
 800c8a4:	801a      	strh	r2, [r3, #0]
 800c8a6:	e002      	b.n	800c8ae <temper+0x7aa>
			goto tempe26a;   // si el numero de sensores no es tres, siempre muestra en display sensor 1
 800c8a8:	46c0      	nop			@ (mov r8, r8)
 800c8aa:	e000      	b.n	800c8ae <temper+0x7aa>
			goto tempe26a;
 800c8ac:	46c0      	nop			@ (mov r8, r8)

tempe26a:
		if (retcncfa == 0x00)          // Ya llegó a cero el retardo
 800c8ae:	4ba0      	ldr	r3, [pc, #640]	@ (800cb30 <temper+0xa2c>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d014      	beq.n	800c8e0 <temper+0x7dc>
			goto tempe30;              // Si
		else if(retcncfa < 0x09)       // Ya se obtuvo un promedio correcto?
 800c8b6:	4b9e      	ldr	r3, [pc, #632]	@ (800cb30 <temper+0xa2c>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	2b08      	cmp	r3, #8
 800c8bc:	d800      	bhi.n	800c8c0 <temper+0x7bc>
 800c8be:	e073      	b.n	800c9a8 <temper+0x8a4>
			goto tempe39;              // Si, cargalo al display
		X = 0xFE34;
 800c8c0:	4b92      	ldr	r3, [pc, #584]	@ (800cb0c <temper+0xa08>)
 800c8c2:	4a9c      	ldr	r2, [pc, #624]	@ (800cb34 <temper+0xa30>)
 800c8c4:	801a      	strh	r2, [r3, #0]
		// tdev = X;
		tdevl = highByte(X);
 800c8c6:	4b91      	ldr	r3, [pc, #580]	@ (800cb0c <temper+0xa08>)
 800c8c8:	881b      	ldrh	r3, [r3, #0]
 800c8ca:	0a1b      	lsrs	r3, r3, #8
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	4b92      	ldr	r3, [pc, #584]	@ (800cb1c <temper+0xa18>)
 800c8d2:	701a      	strb	r2, [r3, #0]
		tdevf = lowByte(X);
 800c8d4:	4b8d      	ldr	r3, [pc, #564]	@ (800cb0c <temper+0xa08>)
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	b2da      	uxtb	r2, r3
 800c8da:	4b8f      	ldr	r3, [pc, #572]	@ (800cb18 <temper+0xa14>)
 800c8dc:	701a      	strb	r2, [r3, #0]
		goto tempe40;
 800c8de:	e0a2      	b.n	800ca26 <temper+0x922>
			goto tempe30;              // Si
 800c8e0:	46c0      	nop			@ (mov r8, r8)


tempe30:
		if(!flagsa[0]) //#arran   // Estas en período de arranque?     nota 2: Cambiar flagsa a registro
 800c8e2:	4b95      	ldr	r3, [pc, #596]	@ (800cb38 <temper+0xa34>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	4053      	eors	r3, r2
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d05d      	beq.n	800c9ac <temper+0x8a8>
			goto temper_j02;      // Si, toma el dato de temperatura medido
 800c8f0:	46c0      	nop			@ (mov r8, r8)
		goto tempe39;

temper_j02:
		Y = tdevdpy_w;         // manuel_math_change//   tdevdpyl;
 800c8f2:	4b92      	ldr	r3, [pc, #584]	@ (800cb3c <temper+0xa38>)
 800c8f4:	881a      	ldrh	r2, [r3, #0]
 800c8f6:	4b82      	ldr	r3, [pc, #520]	@ (800cb00 <temper+0x9fc>)
 800c8f8:	801a      	strh	r2, [r3, #0]
		Y = Y - tDisplay_w;    // w = TdeVdpy - TdeV
 800c8fa:	4b81      	ldr	r3, [pc, #516]	@ (800cb00 <temper+0x9fc>)
 800c8fc:	881a      	ldrh	r2, [r3, #0]
 800c8fe:	4b88      	ldr	r3, [pc, #544]	@ (800cb20 <temper+0xa1c>)
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	b29a      	uxth	r2, r3
 800c906:	4b7e      	ldr	r3, [pc, #504]	@ (800cb00 <temper+0x9fc>)
 800c908:	801a      	strh	r2, [r3, #0]
		if (Y == 0)
 800c90a:	4b7d      	ldr	r3, [pc, #500]	@ (800cb00 <temper+0x9fc>)
 800c90c:	881b      	ldrh	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d100      	bne.n	800c914 <temper+0x810>
 800c912:	e083      	b.n	800ca1c <temper+0x918>
			goto tempe40;
		else if (!(GetRegFlagState(Y, 15)))//else if ((GetRegFlagState(Y, 15)) == 0)                               //nota3 checar combinacion con JRSGT
 800c914:	4b7a      	ldr	r3, [pc, #488]	@ (800cb00 <temper+0x9fc>)
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	b21b      	sxth	r3, r3
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	da48      	bge.n	800c9b0 <temper+0x8ac>
			goto tempe39;      // La diferencia es positiva?

		A =  Plantilla [filtro];
 800c91e:	4b81      	ldr	r3, [pc, #516]	@ (800cb24 <temper+0xa20>)
 800c920:	2254      	movs	r2, #84	@ 0x54
 800c922:	5c9a      	ldrb	r2, [r3, r2]
 800c924:	4b78      	ldr	r3, [pc, #480]	@ (800cb08 <temper+0xa04>)
 800c926:	701a      	strb	r2, [r3, #0]
		if(A == 0)
 800c928:	4b77      	ldr	r3, [pc, #476]	@ (800cb08 <temper+0xa04>)
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d041      	beq.n	800c9b4 <temper+0x8b0>
			goto tempe39;
		A = A << 1;
 800c930:	4b75      	ldr	r3, [pc, #468]	@ (800cb08 <temper+0xa04>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	18db      	adds	r3, r3, r3
 800c936:	b2da      	uxtb	r2, r3
 800c938:	4b73      	ldr	r3, [pc, #460]	@ (800cb08 <temper+0xa04>)
 800c93a:	701a      	strb	r2, [r3, #0]
		ret_up++;              // 800 ms más de retardo
 800c93c:	4b80      	ldr	r3, [pc, #512]	@ (800cb40 <temper+0xa3c>)
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	3301      	adds	r3, #1
 800c942:	b2da      	uxtb	r2, r3
 800c944:	4b7e      	ldr	r3, [pc, #504]	@ (800cb40 <temper+0xa3c>)
 800c946:	701a      	strb	r2, [r3, #0]

		if(A > ret_up)
 800c948:	4b6f      	ldr	r3, [pc, #444]	@ (800cb08 <temper+0xa04>)
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	4b7c      	ldr	r3, [pc, #496]	@ (800cb40 <temper+0xa3c>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	429a      	cmp	r2, r3
 800c952:	d900      	bls.n	800c956 <temper+0x852>
 800c954:	e06b      	b.n	800ca2e <temper+0x92a>
			goto tempe50;

		Y = (Y ^ 0xFFFF) + 1;
 800c956:	4b6a      	ldr	r3, [pc, #424]	@ (800cb00 <temper+0x9fc>)
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	425b      	negs	r3, r3
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	4b68      	ldr	r3, [pc, #416]	@ (800cb00 <temper+0x9fc>)
 800c960:	801a      	strh	r2, [r3, #0]
		if (Y < 11)           // Se compara con 0xFE si se quieren dos decrementos abajo
 800c962:	4b67      	ldr	r3, [pc, #412]	@ (800cb00 <temper+0x9fc>)
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	2b0a      	cmp	r3, #10
 800c968:	d90e      	bls.n	800c988 <temper+0x884>
			goto tempe37b;

		X = tDisplay_w;
 800c96a:	4b6d      	ldr	r3, [pc, #436]	@ (800cb20 <temper+0xa1c>)
 800c96c:	881a      	ldrh	r2, [r3, #0]
 800c96e:	4b67      	ldr	r3, [pc, #412]	@ (800cb0c <temper+0xa08>)
 800c970:	801a      	strh	r2, [r3, #0]
		X = X - 10;            //w = tdev - 1.0
 800c972:	4b66      	ldr	r3, [pc, #408]	@ (800cb0c <temper+0xa08>)
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	3b0a      	subs	r3, #10
 800c978:	b29a      	uxth	r2, r3
 800c97a:	4b64      	ldr	r3, [pc, #400]	@ (800cb0c <temper+0xa08>)
 800c97c:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800c97e:	4b63      	ldr	r3, [pc, #396]	@ (800cb0c <temper+0xa08>)
 800c980:	881a      	ldrh	r2, [r3, #0]
 800c982:	4b70      	ldr	r3, [pc, #448]	@ (800cb44 <temper+0xa40>)
 800c984:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800c986:	e021      	b.n	800c9cc <temper+0x8c8>
			goto tempe37b;
 800c988:	46c0      	nop			@ (mov r8, r8)

tempe37b:
		X = tdevdpy_w;     //manuel_math_change//  tdevdpyf;
 800c98a:	4b6c      	ldr	r3, [pc, #432]	@ (800cb3c <temper+0xa38>)
 800c98c:	881a      	ldrh	r2, [r3, #0]
 800c98e:	4b5f      	ldr	r3, [pc, #380]	@ (800cb0c <temper+0xa08>)
 800c990:	801a      	strh	r2, [r3, #0]
		X = X + 1;         //manuel_math_change//  tdevdpyl;
 800c992:	4b5e      	ldr	r3, [pc, #376]	@ (800cb0c <temper+0xa08>)
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	3301      	adds	r3, #1
 800c998:	b29a      	uxth	r2, r3
 800c99a:	4b5c      	ldr	r3, [pc, #368]	@ (800cb0c <temper+0xa08>)
 800c99c:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800c99e:	4b5b      	ldr	r3, [pc, #364]	@ (800cb0c <temper+0xa08>)
 800c9a0:	881a      	ldrh	r2, [r3, #0]
 800c9a2:	4b68      	ldr	r3, [pc, #416]	@ (800cb44 <temper+0xa40>)
 800c9a4:	801a      	strh	r2, [r3, #0]
		goto tempe39a;
 800c9a6:	e011      	b.n	800c9cc <temper+0x8c8>
			goto tempe39;              // Si, cargalo al display
 800c9a8:	46c0      	nop			@ (mov r8, r8)
 800c9aa:	e004      	b.n	800c9b6 <temper+0x8b2>
		goto tempe39;
 800c9ac:	46c0      	nop			@ (mov r8, r8)
 800c9ae:	e002      	b.n	800c9b6 <temper+0x8b2>
			goto tempe39;      // La diferencia es positiva?
 800c9b0:	46c0      	nop			@ (mov r8, r8)
 800c9b2:	e000      	b.n	800c9b6 <temper+0x8b2>
			goto tempe39;
 800c9b4:	46c0      	nop			@ (mov r8, r8)

tempe39:
		X = tDisplay_w;
 800c9b6:	4b5a      	ldr	r3, [pc, #360]	@ (800cb20 <temper+0xa1c>)
 800c9b8:	881a      	ldrh	r2, [r3, #0]
 800c9ba:	4b54      	ldr	r3, [pc, #336]	@ (800cb0c <temper+0xa08>)
 800c9bc:	801a      	strh	r2, [r3, #0]
		//waux = X;
		raux = X;
 800c9be:	4b53      	ldr	r3, [pc, #332]	@ (800cb0c <temper+0xa08>)
 800c9c0:	881a      	ldrh	r2, [r3, #0]
 800c9c2:	4b60      	ldr	r3, [pc, #384]	@ (800cb44 <temper+0xa40>)
 800c9c4:	801a      	strh	r2, [r3, #0]
		cnthold = 0;                  // Cancela el retardo
 800c9c6:	4b60      	ldr	r3, [pc, #384]	@ (800cb48 <temper+0xa44>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	701a      	strb	r2, [r3, #0]
tempe39a:
//		tnz			cntHoldP;		/ Ya terminó el tiempo de bloqueo por puerta?
//		jrne		tempe40;  / no, congela display
//		;sí, pregunta por tiemmpo de bloqueo por deshielo

		if(cntHoldP)
 800c9cc:	4b5f      	ldr	r3, [pc, #380]	@ (800cb4c <temper+0xa48>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d125      	bne.n	800ca20 <temper+0x91c>
			goto tempe40;

		A = cnthold;
 800c9d4:	4b5c      	ldr	r3, [pc, #368]	@ (800cb48 <temper+0xa44>)
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	4b4b      	ldr	r3, [pc, #300]	@ (800cb08 <temper+0xa04>)
 800c9da:	701a      	strb	r2, [r3, #0]
		if (A == 0)                   // Ya terminó el tiempo?
 800c9dc:	4b4a      	ldr	r3, [pc, #296]	@ (800cb08 <temper+0xa04>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d011      	beq.n	800ca08 <temper+0x904>
			goto tempe39b;            // Si, carga el dato a tdevdpy

		Y = limsup_w;                 // manuel_math_change//   limsupl;/ Compara contra el límite superior para que congele en ese valor
 800c9e4:	4b5a      	ldr	r3, [pc, #360]	@ (800cb50 <temper+0xa4c>)
 800c9e6:	881a      	ldrh	r2, [r3, #0]
 800c9e8:	4b45      	ldr	r3, [pc, #276]	@ (800cb00 <temper+0x9fc>)
 800c9ea:	801a      	strh	r2, [r3, #0]
		//Y = Y - waux;
		Y = Y - raux;                 // tdev esta por arriba de limsup?
 800c9ec:	4b44      	ldr	r3, [pc, #272]	@ (800cb00 <temper+0x9fc>)
 800c9ee:	881a      	ldrh	r2, [r3, #0]
 800c9f0:	4b54      	ldr	r3, [pc, #336]	@ (800cb44 <temper+0xa40>)
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	4b41      	ldr	r3, [pc, #260]	@ (800cb00 <temper+0x9fc>)
 800c9fa:	801a      	strh	r2, [r3, #0]
		//if(Y < 0)   //////////////////JRSLT              nota4: checar combinacion con JRSLT
		if(GetRegFlagState(Y, 15))
 800c9fc:	4b40      	ldr	r3, [pc, #256]	@ (800cb00 <temper+0x9fc>)
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	b21b      	sxth	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	db0e      	blt.n	800ca24 <temper+0x920>
			goto tempe40;             // Si, congela el display en limsup
tempe39b:
 800ca06:	e000      	b.n	800ca0a <temper+0x906>
			goto tempe39b;            // Si, carga el dato a tdevdpy
 800ca08:	46c0      	nop			@ (mov r8, r8)
//tdevdpyl,waux;	/ Almacena el dato anterior para la siguiente comparación
		// X = waux;
		X = raux;
 800ca0a:	4b4e      	ldr	r3, [pc, #312]	@ (800cb44 <temper+0xa40>)
 800ca0c:	881a      	ldrh	r2, [r3, #0]
 800ca0e:	4b3f      	ldr	r3, [pc, #252]	@ (800cb0c <temper+0xa08>)
 800ca10:	801a      	strh	r2, [r3, #0]
		tdevdpy_w = X;
 800ca12:	4b3e      	ldr	r3, [pc, #248]	@ (800cb0c <temper+0xa08>)
 800ca14:	881a      	ldrh	r2, [r3, #0]
 800ca16:	4b49      	ldr	r3, [pc, #292]	@ (800cb3c <temper+0xa38>)
 800ca18:	801a      	strh	r2, [r3, #0]
 800ca1a:	e004      	b.n	800ca26 <temper+0x922>
			goto tempe40;
 800ca1c:	46c0      	nop			@ (mov r8, r8)
 800ca1e:	e002      	b.n	800ca26 <temper+0x922>
			goto tempe40;
 800ca20:	46c0      	nop			@ (mov r8, r8)
 800ca22:	e000      	b.n	800ca26 <temper+0x922>
			goto tempe40;             // Si, congela el display en limsup
 800ca24:	46c0      	nop			@ (mov r8, r8)
tempe40:
		ret_up = 0;  // Inicia el retardo hacia arriba
 800ca26:	4b46      	ldr	r3, [pc, #280]	@ (800cb40 <temper+0xa3c>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	701a      	strb	r2, [r3, #0]
 800ca2c:	e000      	b.n	800ca30 <temper+0x92c>
			goto tempe50;
 800ca2e:	46c0      	nop			@ (mov r8, r8)
tempe50:
		cntmues = 0;
 800ca30:	4b48      	ldr	r3, [pc, #288]	@ (800cb54 <temper+0xa50>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
		if (!trefst[3]) //#f_sda
 800ca36:	4b48      	ldr	r3, [pc, #288]	@ (800cb58 <temper+0xa54>)
 800ca38:	78db      	ldrb	r3, [r3, #3]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	4053      	eors	r3, r2
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10f      	bne.n	800ca64 <temper+0x960>
		//if (GetRegFlagState(trefst_aux, 3) == 0) //#f_sda
			goto tempe52;
		X = 0xFE34;
 800ca44:	4b31      	ldr	r3, [pc, #196]	@ (800cb0c <temper+0xa08>)
 800ca46:	4a3b      	ldr	r2, [pc, #236]	@ (800cb34 <temper+0xa30>)
 800ca48:	801a      	strh	r2, [r3, #0]
		tevaf = lowByte(X);      // Entrega el dato de temperatura del evaporador a 10 bits
 800ca4a:	4b30      	ldr	r3, [pc, #192]	@ (800cb0c <temper+0xa08>)
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	4b42      	ldr	r3, [pc, #264]	@ (800cb5c <temper+0xa58>)
 800ca52:	701a      	strb	r2, [r3, #0]
		teval = highByte(X);
 800ca54:	4b2d      	ldr	r3, [pc, #180]	@ (800cb0c <temper+0xa08>)
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	0a1b      	lsrs	r3, r3, #8
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	4b40      	ldr	r3, [pc, #256]	@ (800cb60 <temper+0xa5c>)
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	e000      	b.n	800ca66 <temper+0x962>
			goto tempe52;
 800ca64:	46c0      	nop			@ (mov r8, r8)

tempe52:
		if (!trefst2[5]) //#f_s3open
 800ca66:	4b30      	ldr	r3, [pc, #192]	@ (800cb28 <temper+0xa24>)
 800ca68:	795b      	ldrb	r3, [r3, #5]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	4053      	eors	r3, r2
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d107      	bne.n	800ca84 <temper+0x980>
		//if (GetRegFlagState(trefst2_aux, 5) == 0) //#f_s3open
			goto tempe53;
		X = 0xFE34;
 800ca74:	4b25      	ldr	r3, [pc, #148]	@ (800cb0c <temper+0xa08>)
 800ca76:	4a2f      	ldr	r2, [pc, #188]	@ (800cb34 <temper+0xa30>)
 800ca78:	801a      	strh	r2, [r3, #0]
		tret_w = X;
 800ca7a:	4b24      	ldr	r3, [pc, #144]	@ (800cb0c <temper+0xa08>)
 800ca7c:	881a      	ldrh	r2, [r3, #0]
 800ca7e:	4b2b      	ldr	r3, [pc, #172]	@ (800cb2c <temper+0xa28>)
 800ca80:	801a      	strh	r2, [r3, #0]
 800ca82:	e000      	b.n	800ca86 <temper+0x982>
			goto tempe53;
 800ca84:	46c0      	nop			@ (mov r8, r8)

tempe53:
		if (!trefst2[7]) //#f_s4open
 800ca86:	4b28      	ldr	r3, [pc, #160]	@ (800cb28 <temper+0xa24>)
 800ca88:	79db      	ldrb	r3, [r3, #7]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	4053      	eors	r3, r2
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10b      	bne.n	800caac <temper+0x9a8>
		//if (GetRegFlagState(trefst2_aux, 7) == 0) //#f_s4open
			goto fintemp;
		X = 0xFE34;
 800ca94:	4b1d      	ldr	r3, [pc, #116]	@ (800cb0c <temper+0xa08>)
 800ca96:	4a27      	ldr	r2, [pc, #156]	@ (800cb34 <temper+0xa30>)
 800ca98:	801a      	strh	r2, [r3, #0]
		tsac_w = X;
 800ca9a:	4b1c      	ldr	r3, [pc, #112]	@ (800cb0c <temper+0xa08>)
 800ca9c:	881a      	ldrh	r2, [r3, #0]
 800ca9e:	4b31      	ldr	r3, [pc, #196]	@ (800cb64 <temper+0xa60>)
 800caa0:	801a      	strh	r2, [r3, #0]
 800caa2:	e004      	b.n	800caae <temper+0x9aa>
	goto fintemp;      // No, sincroniza la lectura con el dígito 1
 800caa4:	46c0      	nop			@ (mov r8, r8)
 800caa6:	e002      	b.n	800caae <temper+0x9aa>
			goto fintemp;
 800caa8:	46c0      	nop			@ (mov r8, r8)
 800caaa:	e000      	b.n	800caae <temper+0x9aa>
			goto fintemp;
 800caac:	46c0      	nop			@ (mov r8, r8)

fintemp:

		A = edorefri;
 800caae:	4b2e      	ldr	r3, [pc, #184]	@ (800cb68 <temper+0xa64>)
 800cab0:	781a      	ldrb	r2, [r3, #0]
 800cab2:	4b15      	ldr	r3, [pc, #84]	@ (800cb08 <temper+0xa04>)
 800cab4:	701a      	strb	r2, [r3, #0]

		if (A == 1)
 800cab6:	4b14      	ldr	r3, [pc, #80]	@ (800cb08 <temper+0xa04>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d066      	beq.n	800cb8c <temper+0xa88>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
		A = Plantilla [numSens];
 800cabe:	4b19      	ldr	r3, [pc, #100]	@ (800cb24 <temper+0xa20>)
 800cac0:	2259      	movs	r2, #89	@ 0x59
 800cac2:	5c9a      	ldrb	r2, [r3, r2]
 800cac4:	4b10      	ldr	r3, [pc, #64]	@ (800cb08 <temper+0xa04>)
 800cac6:	701a      	strb	r2, [r3, #0]
		if (A == 4)
 800cac8:	4b0f      	ldr	r3, [pc, #60]	@ (800cb08 <temper+0xa04>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d05f      	beq.n	800cb90 <temper+0xa8c>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 3)
 800cad0:	4b0d      	ldr	r3, [pc, #52]	@ (800cb08 <temper+0xa04>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	d051      	beq.n	800cb7c <temper+0xa78>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
		if (A == 2)
 800cad8:	4b0b      	ldr	r3, [pc, #44]	@ (800cb08 <temper+0xa04>)
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d045      	beq.n	800cb6c <temper+0xa68>
			goto clrRetFail;
		if (A != 1)
 800cae0:	4b09      	ldr	r3, [pc, #36]	@ (800cb08 <temper+0xa04>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d155      	bne.n	800cb94 <temper+0xa90>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador

clrEvaFail:
 800cae8:	46c0      	nop			@ (mov r8, r8)
		Bclear_Clear_trfst(trefst, trefst,2, 3);
 800caea:	491b      	ldr	r1, [pc, #108]	@ (800cb58 <temper+0xa54>)
 800caec:	481a      	ldr	r0, [pc, #104]	@ (800cb58 <temper+0xa54>)
 800caee:	2303      	movs	r3, #3
 800caf0:	2202      	movs	r2, #2
 800caf2:	f000 fa32 	bl	800cf5a <Bclear_Clear_trfst>
 800caf6:	e03a      	b.n	800cb6e <temper+0xa6a>
 800caf8:	20000bc6 	.word	0x20000bc6
 800cafc:	20001160 	.word	0x20001160
 800cb00:	2000115c 	.word	0x2000115c
 800cb04:	20001168 	.word	0x20001168
 800cb08:	2000115a 	.word	0x2000115a
 800cb0c:	2000115e 	.word	0x2000115e
 800cb10:	20001166 	.word	0x20001166
 800cb14:	20001162 	.word	0x20001162
 800cb18:	20000bb1 	.word	0x20000bb1
 800cb1c:	20000bb0 	.word	0x20000bb0
 800cb20:	200010a2 	.word	0x200010a2
 800cb24:	200000b8 	.word	0x200000b8
 800cb28:	20000b80 	.word	0x20000b80
 800cb2c:	20000c54 	.word	0x20000c54
 800cb30:	20000bc4 	.word	0x20000bc4
 800cb34:	fffffe34 	.word	0xfffffe34
 800cb38:	20000b78 	.word	0x20000b78
 800cb3c:	20000bb4 	.word	0x20000bb4
 800cb40:	20000bc3 	.word	0x20000bc3
 800cb44:	20001164 	.word	0x20001164
 800cb48:	20000bc7 	.word	0x20000bc7
 800cb4c:	200010b0 	.word	0x200010b0
 800cb50:	20000bae 	.word	0x20000bae
 800cb54:	20000bc0 	.word	0x20000bc0
 800cb58:	20000b88 	.word	0x20000b88
 800cb5c:	20000bb3 	.word	0x20000bb3
 800cb60:	20000bb2 	.word	0x20000bb2
 800cb64:	200010a0 	.word	0x200010a0
 800cb68:	20000b98 	.word	0x20000b98
			goto clrRetFail;
 800cb6c:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
//		BitClear(trefst,3);
		//BitClear(trefst_aux,3);

clrRetFail:
		Bclear_Clear_trfst(trefst2, trefst2,4, 5);
 800cb6e:	490c      	ldr	r1, [pc, #48]	@ (800cba0 <temper+0xa9c>)
 800cb70:	480b      	ldr	r0, [pc, #44]	@ (800cba0 <temper+0xa9c>)
 800cb72:	2305      	movs	r3, #5
 800cb74:	2204      	movs	r2, #4
 800cb76:	f000 f9f0 	bl	800cf5a <Bclear_Clear_trfst>
 800cb7a:	e000      	b.n	800cb7e <temper+0xa7a>
			goto clrSacFail;     // sí hay tres sensores no preguntes si hay que borrar fallas
 800cb7c:	46c0      	nop			@ (mov r8, r8)
		//BitClear(trefst2_aux,4);     // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,5);
		//BitClear(trefst2_aux,5);

clrSacFail:
		Bclear_Clear_trfst(trefst, trefst2,5, 7);
 800cb7e:	4908      	ldr	r1, [pc, #32]	@ (800cba0 <temper+0xa9c>)
 800cb80:	4808      	ldr	r0, [pc, #32]	@ (800cba4 <temper+0xaa0>)
 800cb82:	2307      	movs	r3, #7
 800cb84:	2205      	movs	r2, #5
 800cb86:	f000 f9e8 	bl	800cf5a <Bclear_Clear_trfst>
 800cb8a:	e004      	b.n	800cb96 <temper+0xa92>
			goto noClrSensFail;  // sí estás en autoprueba permite fallas
 800cb8c:	46c0      	nop			@ (mov r8, r8)
 800cb8e:	e002      	b.n	800cb96 <temper+0xa92>
			goto noClrSensFail;  // sí hay tres sensores no preguntes si hay que borrar fallas
 800cb90:	46c0      	nop			@ (mov r8, r8)
 800cb92:	e000      	b.n	800cb96 <temper+0xa92>
			goto noClrSensFail;  // Si el número de sensores con el que trabaja es 1, borra fallas de evaporador
 800cb94:	46c0      	nop			@ (mov r8, r8)
//		BitClear(trefst,5); //#f_s4short   // Cancela la fallas del sensor de retorno
		//BitClear(trefst_aux,5); //#f_s4short   // Cancela la fallas del sensor de retorno
//		BitClear(trefst2,7); //#f_s4open
		//BitClear(trefst2_aux,7); //#f_s4open
noClrSensFail:
		asm ("nop");
 800cb96:	46c0      	nop			@ (mov r8, r8)




}
 800cb98:	46c0      	nop			@ (mov r8, r8)
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	b002      	add	sp, #8
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	20000b80 	.word	0x20000b80
 800cba4:	20000b88 	.word	0x20000b88

0800cba8 <linealiza>:

//*************************************************************************************************

void linealiza (void)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	af00      	add	r7, sp, #0
	tempo = 0;
 800cbac:	4b57      	ldr	r3, [pc, #348]	@ (800cd0c <linealiza+0x164>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	801a      	strh	r2, [r3, #0]
	Y = resul;
 800cbb2:	4b57      	ldr	r3, [pc, #348]	@ (800cd10 <linealiza+0x168>)
 800cbb4:	881a      	ldrh	r2, [r3, #0]
 800cbb6:	4b57      	ldr	r3, [pc, #348]	@ (800cd14 <linealiza+0x16c>)
 800cbb8:	801a      	strh	r2, [r3, #0]
	curva = Y;                  // Almacena el dato para ajuste de curva
 800cbba:	4b56      	ldr	r3, [pc, #344]	@ (800cd14 <linealiza+0x16c>)
 800cbbc:	881a      	ldrh	r2, [r3, #0]
 800cbbe:	4b56      	ldr	r3, [pc, #344]	@ (800cd18 <linealiza+0x170>)
 800cbc0:	801a      	strh	r2, [r3, #0]

	//  verifica en que rango de la curva cae
	if(curva >= 910)
 800cbc2:	4b55      	ldr	r3, [pc, #340]	@ (800cd18 <linealiza+0x170>)
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	4a55      	ldr	r2, [pc, #340]	@ (800cd1c <linealiza+0x174>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d80e      	bhi.n	800cbea <linealiza+0x42>
		goto wise_hot_3;
	else if(curva >= 826)
 800cbcc:	4b52      	ldr	r3, [pc, #328]	@ (800cd18 <linealiza+0x170>)
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	4a53      	ldr	r2, [pc, #332]	@ (800cd20 <linealiza+0x178>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d810      	bhi.n	800cbf8 <linealiza+0x50>
		goto wise_hot_2;
	else if(curva >= 683)
 800cbd6:	4b50      	ldr	r3, [pc, #320]	@ (800cd18 <linealiza+0x170>)
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	4a52      	ldr	r2, [pc, #328]	@ (800cd24 <linealiza+0x17c>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d812      	bhi.n	800cc06 <linealiza+0x5e>
		goto wise_hot_1;
	else if(curva >= 203)
 800cbe0:	4b4d      	ldr	r3, [pc, #308]	@ (800cd18 <linealiza+0x170>)
 800cbe2:	881b      	ldrh	r3, [r3, #0]
 800cbe4:	2bca      	cmp	r3, #202	@ 0xca
 800cbe6:	d91c      	bls.n	800cc22 <linealiza+0x7a>
		goto lil_principal;
 800cbe8:	e015      	b.n	800cc16 <linealiza+0x6e>
		goto wise_hot_3;
 800cbea:	46c0      	nop			@ (mov r8, r8)
		goto curva_fria;


wise_hot_3:

	wise_hot_rep (83, 0xFFFF);
 800cbec:	4b4e      	ldr	r3, [pc, #312]	@ (800cd28 <linealiza+0x180>)
 800cbee:	0019      	movs	r1, r3
 800cbf0:	2053      	movs	r0, #83	@ 0x53
 800cbf2:	f000 f94d 	bl	800ce90 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;              // En tempo2 quedó el entero del dato de temperatura
//	X = X - 0xFFFF;         // ordenada al origen en °C  (-255.996)
//	tempo = X;
	goto fincurva;
 800cbf6:	e01b      	b.n	800cc30 <linealiza+0x88>
		goto wise_hot_2;
 800cbf8:	46c0      	nop			@ (mov r8, r8)

wise_hot_2:
	wise_hot_rep (52, 0x93CC);
 800cbfa:	4b4c      	ldr	r3, [pc, #304]	@ (800cd2c <linealiza+0x184>)
 800cbfc:	0019      	movs	r1, r3
 800cbfe:	2034      	movs	r0, #52	@ 0x34
 800cc00:	f000 f946 	bl	800ce90 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x93CC;         // ordenada al origen en °C  (-147.8)
//	tempo = X;
	goto fincurva;
 800cc04:	e014      	b.n	800cc30 <linealiza+0x88>
		goto wise_hot_1;
 800cc06:	46c0      	nop			@ (mov r8, r8)


wise_hot_1:

	wise_hot_rep (29, 0x4980);
 800cc08:	2393      	movs	r3, #147	@ 0x93
 800cc0a:	01db      	lsls	r3, r3, #7
 800cc0c:	0019      	movs	r1, r3
 800cc0e:	201d      	movs	r0, #29
 800cc10:	f000 f93e 	bl	800ce90 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x4980;         // ordenada al origen en °C  (-77.0)
//	tempo = X;
	goto fincurva;
 800cc14:	e00c      	b.n	800cc30 <linealiza+0x88>

lil_principal:

	wise_hot_rep (19, 0x2ECC);
 800cc16:	4b46      	ldr	r3, [pc, #280]	@ (800cd30 <linealiza+0x188>)
 800cc18:	0019      	movs	r1, r3
 800cc1a:	2013      	movs	r0, #19
 800cc1c:	f000 f938 	bl	800ce90 <wise_hot_rep>
//	mult1x2();              // Multiplica
//
//	X = resul;
//	X = X - 0x2ECC;         // ordenada al origen en °C  (-46.8)
//	tempo = X;
	goto fincurva;
 800cc20:	e006      	b.n	800cc30 <linealiza+0x88>
		goto curva_fria;
 800cc22:	46c0      	nop			@ (mov r8, r8)


curva_fria:

	wise_hot_rep (30, 0x3780);
 800cc24:	23de      	movs	r3, #222	@ 0xde
 800cc26:	019b      	lsls	r3, r3, #6
 800cc28:	0019      	movs	r1, r3
 800cc2a:	201e      	movs	r0, #30
 800cc2c:	f000 f930 	bl	800ce90 <wise_hot_rep>

//goto fincurva;

fincurva:

	X = tempo;
 800cc30:	4b36      	ldr	r3, [pc, #216]	@ (800cd0c <linealiza+0x164>)
 800cc32:	881a      	ldrh	r2, [r3, #0]
 800cc34:	4b3f      	ldr	r3, [pc, #252]	@ (800cd34 <linealiza+0x18c>)
 800cc36:	801a      	strh	r2, [r3, #0]
	Y = X;                   //guarda una copia en Y
 800cc38:	4b3e      	ldr	r3, [pc, #248]	@ (800cd34 <linealiza+0x18c>)
 800cc3a:	881a      	ldrh	r2, [r3, #0]
 800cc3c:	4b35      	ldr	r3, [pc, #212]	@ (800cd14 <linealiza+0x16c>)
 800cc3e:	801a      	strh	r2, [r3, #0]
	if(GetRegFlagState(Y, 15))  //es dato positivo o negativo ?
 800cc40:	4b34      	ldr	r3, [pc, #208]	@ (800cd14 <linealiza+0x16c>)
 800cc42:	881b      	ldrh	r3, [r3, #0]
 800cc44:	b21b      	sxth	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	da05      	bge.n	800cc56 <linealiza+0xae>
		X = (X ^ 0xFFFF) + 1;
 800cc4a:	4b3a      	ldr	r3, [pc, #232]	@ (800cd34 <linealiza+0x18c>)
 800cc4c:	881b      	ldrh	r3, [r3, #0]
 800cc4e:	425b      	negs	r3, r3
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	4b38      	ldr	r3, [pc, #224]	@ (800cd34 <linealiza+0x18c>)
 800cc54:	801a      	strh	r2, [r3, #0]


	A = highByte(X);          //guarda el valor de la parte alta
 800cc56:	4b37      	ldr	r3, [pc, #220]	@ (800cd34 <linealiza+0x18c>)
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	0a1b      	lsrs	r3, r3, #8
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	4b35      	ldr	r3, [pc, #212]	@ (800cd38 <linealiza+0x190>)
 800cc62:	701a      	strb	r2, [r3, #0]
	waux = A;
 800cc64:	4b34      	ldr	r3, [pc, #208]	@ (800cd38 <linealiza+0x190>)
 800cc66:	781a      	ldrb	r2, [r3, #0]
 800cc68:	4b34      	ldr	r3, [pc, #208]	@ (800cd3c <linealiza+0x194>)
 800cc6a:	701a      	strb	r2, [r3, #0]
	A = 10;
 800cc6c:	4b32      	ldr	r3, [pc, #200]	@ (800cd38 <linealiza+0x190>)
 800cc6e:	220a      	movs	r2, #10
 800cc70:	701a      	strb	r2, [r3, #0]

	X = lowByte(X) * A;
 800cc72:	4b30      	ldr	r3, [pc, #192]	@ (800cd34 <linealiza+0x18c>)
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	001a      	movs	r2, r3
 800cc7a:	4b2f      	ldr	r3, [pc, #188]	@ (800cd38 <linealiza+0x190>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	4353      	muls	r3, r2
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	4b2c      	ldr	r3, [pc, #176]	@ (800cd34 <linealiza+0x18c>)
 800cc84:	801a      	strh	r2, [r3, #0]
	A = highByte(X);
 800cc86:	4b2b      	ldr	r3, [pc, #172]	@ (800cd34 <linealiza+0x18c>)
 800cc88:	881b      	ldrh	r3, [r3, #0]
 800cc8a:	0a1b      	lsrs	r3, r3, #8
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	4b29      	ldr	r3, [pc, #164]	@ (800cd38 <linealiza+0x190>)
 800cc92:	701a      	strb	r2, [r3, #0]
	X = 0;                    //borra la parte baja no interesa ya que son centesimas y milesimas etc.....
 800cc94:	4b27      	ldr	r3, [pc, #156]	@ (800cd34 <linealiza+0x18c>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	801a      	strh	r2, [r3, #0]
	X = A;
 800cc9a:	4b27      	ldr	r3, [pc, #156]	@ (800cd38 <linealiza+0x190>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	001a      	movs	r2, r3
 800cca0:	4b24      	ldr	r3, [pc, #144]	@ (800cd34 <linealiza+0x18c>)
 800cca2:	801a      	strh	r2, [r3, #0]

	tempo = X;                //esta es la parte de la decena
 800cca4:	4b23      	ldr	r3, [pc, #140]	@ (800cd34 <linealiza+0x18c>)
 800cca6:	881a      	ldrh	r2, [r3, #0]
 800cca8:	4b18      	ldr	r3, [pc, #96]	@ (800cd0c <linealiza+0x164>)
 800ccaa:	801a      	strh	r2, [r3, #0]

	//procesa la parte entera
	A = waux;                 //guarda el valor de l parte alta
 800ccac:	4b23      	ldr	r3, [pc, #140]	@ (800cd3c <linealiza+0x194>)
 800ccae:	781a      	ldrb	r2, [r3, #0]
 800ccb0:	4b21      	ldr	r3, [pc, #132]	@ (800cd38 <linealiza+0x190>)
 800ccb2:	701a      	strb	r2, [r3, #0]
	X = A;
 800ccb4:	4b20      	ldr	r3, [pc, #128]	@ (800cd38 <linealiza+0x190>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	001a      	movs	r2, r3
 800ccba:	4b1e      	ldr	r3, [pc, #120]	@ (800cd34 <linealiza+0x18c>)
 800ccbc:	801a      	strh	r2, [r3, #0]

	A = 10;
 800ccbe:	4b1e      	ldr	r3, [pc, #120]	@ (800cd38 <linealiza+0x190>)
 800ccc0:	220a      	movs	r2, #10
 800ccc2:	701a      	strb	r2, [r3, #0]
	X = lowByte(X) * A;
 800ccc4:	4b1b      	ldr	r3, [pc, #108]	@ (800cd34 <linealiza+0x18c>)
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	001a      	movs	r2, r3
 800cccc:	4b1a      	ldr	r3, [pc, #104]	@ (800cd38 <linealiza+0x190>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	4353      	muls	r3, r2
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	4b17      	ldr	r3, [pc, #92]	@ (800cd34 <linealiza+0x18c>)
 800ccd6:	801a      	strh	r2, [r3, #0]

	X = X + tempo;
 800ccd8:	4b16      	ldr	r3, [pc, #88]	@ (800cd34 <linealiza+0x18c>)
 800ccda:	881a      	ldrh	r2, [r3, #0]
 800ccdc:	4b0b      	ldr	r3, [pc, #44]	@ (800cd0c <linealiza+0x164>)
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	18d3      	adds	r3, r2, r3
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	4b13      	ldr	r3, [pc, #76]	@ (800cd34 <linealiza+0x18c>)
 800cce6:	801a      	strh	r2, [r3, #0]

	if(GetRegFlagState(Y, 15))
 800cce8:	4b0a      	ldr	r3, [pc, #40]	@ (800cd14 <linealiza+0x16c>)
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	b21b      	sxth	r3, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	da05      	bge.n	800ccfe <linealiza+0x156>
	X = (X ^ 0xFFFF) + 1;
 800ccf2:	4b10      	ldr	r3, [pc, #64]	@ (800cd34 <linealiza+0x18c>)
 800ccf4:	881b      	ldrh	r3, [r3, #0]
 800ccf6:	425b      	negs	r3, r3
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	4b0e      	ldr	r3, [pc, #56]	@ (800cd34 <linealiza+0x18c>)
 800ccfc:	801a      	strh	r2, [r3, #0]

	tempo = X;              //esta es la parte de la decena
 800ccfe:	4b0d      	ldr	r3, [pc, #52]	@ (800cd34 <linealiza+0x18c>)
 800cd00:	881a      	ldrh	r2, [r3, #0]
 800cd02:	4b02      	ldr	r3, [pc, #8]	@ (800cd0c <linealiza+0x164>)
 800cd04:	801a      	strh	r2, [r3, #0]
}
 800cd06:	46c0      	nop			@ (mov r8, r8)
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20001162 	.word	0x20001162
 800cd10:	20001160 	.word	0x20001160
 800cd14:	2000115c 	.word	0x2000115c
 800cd18:	20001158 	.word	0x20001158
 800cd1c:	0000038d 	.word	0x0000038d
 800cd20:	00000339 	.word	0x00000339
 800cd24:	000002aa 	.word	0x000002aa
 800cd28:	0000ffff 	.word	0x0000ffff
 800cd2c:	000093cc 	.word	0x000093cc
 800cd30:	00002ecc 	.word	0x00002ecc
 800cd34:	2000115e 	.word	0x2000115e
 800cd38:	2000115a 	.word	0x2000115a
 800cd3c:	20000b54 	.word	0x20000b54

0800cd40 <mult1x2>:

void mult1x2(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0
	resul = Y;                   // salva el valor a multiplicar
 800cd44:	4b2f      	ldr	r3, [pc, #188]	@ (800ce04 <mult1x2+0xc4>)
 800cd46:	881a      	ldrh	r2, [r3, #0]
 800cd48:	4b2f      	ldr	r3, [pc, #188]	@ (800ce08 <mult1x2+0xc8>)
 800cd4a:	801a      	strh	r2, [r3, #0]

	A = highByte(resul);
 800cd4c:	4b2e      	ldr	r3, [pc, #184]	@ (800ce08 <mult1x2+0xc8>)
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	0a1b      	lsrs	r3, r3, #8
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	4b2d      	ldr	r3, [pc, #180]	@ (800ce0c <mult1x2+0xcc>)
 800cd58:	701a      	strb	r2, [r3, #0]
	Y = A;
 800cd5a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce0c <mult1x2+0xcc>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	001a      	movs	r2, r3
 800cd60:	4b28      	ldr	r3, [pc, #160]	@ (800ce04 <mult1x2+0xc4>)
 800cd62:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800cd64:	4b2a      	ldr	r3, [pc, #168]	@ (800ce10 <mult1x2+0xd0>)
 800cd66:	781a      	ldrb	r2, [r3, #0]
 800cd68:	4b28      	ldr	r3, [pc, #160]	@ (800ce0c <mult1x2+0xcc>)
 800cd6a:	701a      	strb	r2, [r3, #0]

	Y = Y * A;                   // Realiza la multiplicación de las dieciseisenas
 800cd6c:	4b27      	ldr	r3, [pc, #156]	@ (800ce0c <mult1x2+0xcc>)
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	001a      	movs	r2, r3
 800cd72:	4b24      	ldr	r3, [pc, #144]	@ (800ce04 <mult1x2+0xc4>)
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	4353      	muls	r3, r2
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	4b22      	ldr	r3, [pc, #136]	@ (800ce04 <mult1x2+0xc4>)
 800cd7c:	801a      	strh	r2, [r3, #0]

	raux = Y;                    //Y Guardalo
 800cd7e:	4b21      	ldr	r3, [pc, #132]	@ (800ce04 <mult1x2+0xc4>)
 800cd80:	881a      	ldrh	r2, [r3, #0]
 800cd82:	4b24      	ldr	r3, [pc, #144]	@ (800ce14 <mult1x2+0xd4>)
 800cd84:	801a      	strh	r2, [r3, #0]

	A = lowByte(resul);
 800cd86:	4b20      	ldr	r3, [pc, #128]	@ (800ce08 <mult1x2+0xc8>)
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	4b1f      	ldr	r3, [pc, #124]	@ (800ce0c <mult1x2+0xcc>)
 800cd8e:	701a      	strb	r2, [r3, #0]
	Y = A;
 800cd90:	4b1e      	ldr	r3, [pc, #120]	@ (800ce0c <mult1x2+0xcc>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	001a      	movs	r2, r3
 800cd96:	4b1b      	ldr	r3, [pc, #108]	@ (800ce04 <mult1x2+0xc4>)
 800cd98:	801a      	strh	r2, [r3, #0]
	A = wreg;                    //multiplicador
 800cd9a:	4b1d      	ldr	r3, [pc, #116]	@ (800ce10 <mult1x2+0xd0>)
 800cd9c:	781a      	ldrb	r2, [r3, #0]
 800cd9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ce0c <mult1x2+0xcc>)
 800cda0:	701a      	strb	r2, [r3, #0]
	Y = Y*A;                     // Realiza la multiplicación de las unidades
 800cda2:	4b1a      	ldr	r3, [pc, #104]	@ (800ce0c <mult1x2+0xcc>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	001a      	movs	r2, r3
 800cda8:	4b16      	ldr	r3, [pc, #88]	@ (800ce04 <mult1x2+0xc4>)
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	4353      	muls	r3, r2
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	4b14      	ldr	r3, [pc, #80]	@ (800ce04 <mult1x2+0xc4>)
 800cdb2:	801a      	strh	r2, [r3, #0]

	A = lowByte(Y);
 800cdb4:	4b13      	ldr	r3, [pc, #76]	@ (800ce04 <mult1x2+0xc4>)
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	4b14      	ldr	r3, [pc, #80]	@ (800ce0c <mult1x2+0xcc>)
 800cdbc:	701a      	strb	r2, [r3, #0]
	resul = A;
 800cdbe:	4b13      	ldr	r3, [pc, #76]	@ (800ce0c <mult1x2+0xcc>)
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	001a      	movs	r2, r3
 800cdc4:	4b10      	ldr	r3, [pc, #64]	@ (800ce08 <mult1x2+0xc8>)
 800cdc6:	801a      	strh	r2, [r3, #0]
	A = highByte(Y);
 800cdc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ce04 <mult1x2+0xc4>)
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	0a1b      	lsrs	r3, r3, #8
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ce0c <mult1x2+0xcc>)
 800cdd4:	701a      	strb	r2, [r3, #0]
	A = A + lowByte(raux);      //Suma dieciseisenas
 800cdd6:	4b0f      	ldr	r3, [pc, #60]	@ (800ce14 <mult1x2+0xd4>)
 800cdd8:	881b      	ldrh	r3, [r3, #0]
 800cdda:	b2da      	uxtb	r2, r3
 800cddc:	4b0b      	ldr	r3, [pc, #44]	@ (800ce0c <mult1x2+0xcc>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	18d3      	adds	r3, r2, r3
 800cde2:	b2da      	uxtb	r2, r3
 800cde4:	4b09      	ldr	r3, [pc, #36]	@ (800ce0c <mult1x2+0xcc>)
 800cde6:	701a      	strb	r2, [r3, #0]

	resul = (A << 8) + resul;
 800cde8:	4b08      	ldr	r3, [pc, #32]	@ (800ce0c <mult1x2+0xcc>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	021b      	lsls	r3, r3, #8
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	4b05      	ldr	r3, [pc, #20]	@ (800ce08 <mult1x2+0xc8>)
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	18d3      	adds	r3, r2, r3
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	4b03      	ldr	r3, [pc, #12]	@ (800ce08 <mult1x2+0xc8>)
 800cdfa:	801a      	strh	r2, [r3, #0]
}
 800cdfc:	46c0      	nop			@ (mov r8, r8)
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	46c0      	nop			@ (mov r8, r8)
 800ce04:	2000115c 	.word	0x2000115c
 800ce08:	20001160 	.word	0x20001160
 800ce0c:	2000115a 	.word	0x2000115a
 800ce10:	20000b55 	.word	0x20000b55
 800ce14:	20001164 	.word	0x20001164

0800ce18 <capturaAD>:

void capturaAD (void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADEN;
 800ce1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ce88 <capturaAD+0x70>)
 800ce20:	689a      	ldr	r2, [r3, #8]
 800ce22:	4b19      	ldr	r3, [pc, #100]	@ (800ce88 <capturaAD+0x70>)
 800ce24:	2101      	movs	r1, #1
 800ce26:	430a      	orrs	r2, r1
 800ce28:	609a      	str	r2, [r3, #8]
	ADC1->ISR |= (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR);
 800ce2a:	4b17      	ldr	r3, [pc, #92]	@ (800ce88 <capturaAD+0x70>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	4b16      	ldr	r3, [pc, #88]	@ (800ce88 <capturaAD+0x70>)
 800ce30:	211c      	movs	r1, #28
 800ce32:	430a      	orrs	r2, r1
 800ce34:	601a      	str	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800ce36:	4b14      	ldr	r3, [pc, #80]	@ (800ce88 <capturaAD+0x70>)
 800ce38:	689a      	ldr	r2, [r3, #8]
 800ce3a:	4b13      	ldr	r3, [pc, #76]	@ (800ce88 <capturaAD+0x70>)
 800ce3c:	2104      	movs	r1, #4
 800ce3e:	430a      	orrs	r2, r1
 800ce40:	609a      	str	r2, [r3, #8]

	while ((ADC1->ISR & ADC_FLAG_EOC) == 0)
 800ce42:	46c0      	nop			@ (mov r8, r8)
 800ce44:	4b10      	ldr	r3, [pc, #64]	@ (800ce88 <capturaAD+0x70>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2204      	movs	r2, #4
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	d0fa      	beq.n	800ce44 <capturaAD+0x2c>
	{
	}
	ADC1->CR &= ~(ADC_IER_EOCIE | ADC_IER_EOSIE);
 800ce4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ce88 <capturaAD+0x70>)
 800ce50:	689a      	ldr	r2, [r3, #8]
 800ce52:	4b0d      	ldr	r3, [pc, #52]	@ (800ce88 <capturaAD+0x70>)
 800ce54:	210c      	movs	r1, #12
 800ce56:	438a      	bics	r2, r1
 800ce58:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0; i < 250; i++)
 800ce5a:	1dfb      	adds	r3, r7, #7
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	e009      	b.n	800ce76 <capturaAD+0x5e>

	adcramh = ADC1->DR;
 800ce62:	4b09      	ldr	r3, [pc, #36]	@ (800ce88 <capturaAD+0x70>)
 800ce64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	4b08      	ldr	r3, [pc, #32]	@ (800ce8c <capturaAD+0x74>)
 800ce6a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i < 250; i++)
 800ce6c:	1dfb      	adds	r3, r7, #7
 800ce6e:	781a      	ldrb	r2, [r3, #0]
 800ce70:	1dfb      	adds	r3, r7, #7
 800ce72:	3201      	adds	r2, #1
 800ce74:	701a      	strb	r2, [r3, #0]
 800ce76:	1dfb      	adds	r3, r7, #7
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	2bf9      	cmp	r3, #249	@ 0xf9
 800ce7c:	d9f1      	bls.n	800ce62 <capturaAD+0x4a>
}
 800ce7e:	46c0      	nop			@ (mov r8, r8)
 800ce80:	46c0      	nop			@ (mov r8, r8)
 800ce82:	46bd      	mov	sp, r7
 800ce84:	b002      	add	sp, #8
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	40012400 	.word	0x40012400
 800ce8c:	20000b60 	.word	0x20000b60

0800ce90 <wise_hot_rep>:

void wise_hot_rep (uint8_t wreg_p, uint16_t X_p)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	0002      	movs	r2, r0
 800ce98:	1dfb      	adds	r3, r7, #7
 800ce9a:	701a      	strb	r2, [r3, #0]
 800ce9c:	1d3b      	adds	r3, r7, #4
 800ce9e:	1c0a      	adds	r2, r1, #0
 800cea0:	801a      	strh	r2, [r3, #0]
	wreg = wreg_p;              // Multiplica el dato por el factor
 800cea2:	4b0f      	ldr	r3, [pc, #60]	@ (800cee0 <wise_hot_rep+0x50>)
 800cea4:	1dfa      	adds	r2, r7, #7
 800cea6:	7812      	ldrb	r2, [r2, #0]
 800cea8:	701a      	strb	r2, [r3, #0]
	Y = curva;
 800ceaa:	4b0e      	ldr	r3, [pc, #56]	@ (800cee4 <wise_hot_rep+0x54>)
 800ceac:	881a      	ldrh	r2, [r3, #0]
 800ceae:	4b0e      	ldr	r3, [pc, #56]	@ (800cee8 <wise_hot_rep+0x58>)
 800ceb0:	801a      	strh	r2, [r3, #0]

	mult1x2();              // Multiplica
 800ceb2:	f7ff ff45 	bl	800cd40 <mult1x2>

	X = resul;              // En tempo2 quedó el entero del dato de temperatura
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ceec <wise_hot_rep+0x5c>)
 800ceb8:	881a      	ldrh	r2, [r3, #0]
 800ceba:	4b0d      	ldr	r3, [pc, #52]	@ (800cef0 <wise_hot_rep+0x60>)
 800cebc:	801a      	strh	r2, [r3, #0]
	X = X - X_p;         // ordenada al origen en °C  (-255.996)
 800cebe:	4b0c      	ldr	r3, [pc, #48]	@ (800cef0 <wise_hot_rep+0x60>)
 800cec0:	881a      	ldrh	r2, [r3, #0]
 800cec2:	1d3b      	adds	r3, r7, #4
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	4b09      	ldr	r3, [pc, #36]	@ (800cef0 <wise_hot_rep+0x60>)
 800cecc:	801a      	strh	r2, [r3, #0]
	tempo = X;
 800cece:	4b08      	ldr	r3, [pc, #32]	@ (800cef0 <wise_hot_rep+0x60>)
 800ced0:	881a      	ldrh	r2, [r3, #0]
 800ced2:	4b08      	ldr	r3, [pc, #32]	@ (800cef4 <wise_hot_rep+0x64>)
 800ced4:	801a      	strh	r2, [r3, #0]
}
 800ced6:	46c0      	nop			@ (mov r8, r8)
 800ced8:	46bd      	mov	sp, r7
 800ceda:	b002      	add	sp, #8
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	46c0      	nop			@ (mov r8, r8)
 800cee0:	20000b55 	.word	0x20000b55
 800cee4:	20001158 	.word	0x20001158
 800cee8:	2000115c 	.word	0x2000115c
 800ceec:	20001160 	.word	0x20001160
 800cef0:	2000115e 	.word	0x2000115e
 800cef4:	20001162 	.word	0x20001162

0800cef8 <Y_A>:

void Y_A (void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	af00      	add	r7, sp, #0
	Y = adcramh;
 800cefc:	4b05      	ldr	r3, [pc, #20]	@ (800cf14 <Y_A+0x1c>)
 800cefe:	881a      	ldrh	r2, [r3, #0]
 800cf00:	4b05      	ldr	r3, [pc, #20]	@ (800cf18 <Y_A+0x20>)
 800cf02:	801a      	strh	r2, [r3, #0]
	A = edorefri;
 800cf04:	4b05      	ldr	r3, [pc, #20]	@ (800cf1c <Y_A+0x24>)
 800cf06:	781a      	ldrb	r2, [r3, #0]
 800cf08:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <Y_A+0x28>)
 800cf0a:	701a      	strb	r2, [r3, #0]
}
 800cf0c:	46c0      	nop			@ (mov r8, r8)
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	46c0      	nop			@ (mov r8, r8)
 800cf14:	20000b60 	.word	0x20000b60
 800cf18:	2000115c 	.word	0x2000115c
 800cf1c:	20000b98 	.word	0x20000b98
 800cf20:	2000115a 	.word	0x2000115a

0800cf24 <Bset_Clear_trfst>:

void Bset_Clear_trfst(uint8_t * trfst_1, uint8_t * trfst_2,uint8_t X, uint8_t Y)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	0019      	movs	r1, r3
 800cf30:	1dfb      	adds	r3, r7, #7
 800cf32:	701a      	strb	r2, [r3, #0]
 800cf34:	1dbb      	adds	r3, r7, #6
 800cf36:	1c0a      	adds	r2, r1, #0
 800cf38:	701a      	strb	r2, [r3, #0]
	*(trfst_1 + X) = 1; // BitSet(trfst_1,X);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
 800cf3a:	1dfb      	adds	r3, r7, #7
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	18d3      	adds	r3, r2, r3
 800cf42:	2201      	movs	r2, #1
 800cf44:	701a      	strb	r2, [r3, #0]
	//BitSet(trefst_aux,5);   //#f_s4short   // Indica la falla (Sensor de salida en corto)
	*(trfst_2 + Y) = 0; // BitClear(trfst_2,Y); //#f_s4open   // Cancela la otras falla del sensor de salida
 800cf46:	1dbb      	adds	r3, r7, #6
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	18d3      	adds	r3, r2, r3
 800cf4e:	2200      	movs	r2, #0
 800cf50:	701a      	strb	r2, [r3, #0]
}
 800cf52:	46c0      	nop			@ (mov r8, r8)
 800cf54:	46bd      	mov	sp, r7
 800cf56:	b004      	add	sp, #16
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <Bclear_Clear_trfst>:

void Bclear_Clear_trfst(uint8_t * trfst_3, uint8_t * trfst_4,uint8_t V, uint8_t W)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	60b9      	str	r1, [r7, #8]
 800cf64:	0019      	movs	r1, r3
 800cf66:	1dfb      	adds	r3, r7, #7
 800cf68:	701a      	strb	r2, [r3, #0]
 800cf6a:	1dbb      	adds	r3, r7, #6
 800cf6c:	1c0a      	adds	r2, r1, #0
 800cf6e:	701a      	strb	r2, [r3, #0]
	*(trfst_3 + V) = 0;// BitClear(trfst_3,V);      // Cancela la fallas del sensor de evaporador
 800cf70:	1dfb      	adds	r3, r7, #7
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	18d3      	adds	r3, r2, r3
 800cf78:	2200      	movs	r2, #0
 800cf7a:	701a      	strb	r2, [r3, #0]
	//BitClear(trefst_aux,2);      // Cancela la fallas del sensor de evaporador
	*(trfst_4 + W) = 0;// BitClear(trfst_4,W);
 800cf7c:	1dbb      	adds	r3, r7, #6
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	68ba      	ldr	r2, [r7, #8]
 800cf82:	18d3      	adds	r3, r2, r3
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
}
 800cf88:	46c0      	nop			@ (mov r8, r8)
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	b004      	add	sp, #16
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <tiempo>:

#include "main.h"
#include "customMain.h"


void tiempo (void){
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0

    asm ("nop");
 800cf94:	46c0      	nop			@ (mov r8, r8)



		if(cntbase < 8){				//  Esta iniciando la centésima?
 800cf96:	4bd3      	ldr	r3, [pc, #844]	@ (800d2e4 <tiempo+0x354>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	2b07      	cmp	r3, #7
 800cf9c:	d900      	bls.n	800cfa0 <tiempo+0x10>
 800cf9e:	e265      	b.n	800d46c <tiempo+0x4dc>
			goto tiempo10;				//	jrult		tiempo10;
 800cfa0:	46c0      	nop			@ (mov r8, r8)
		}  //compara a cntbase
		goto fintiem;					// jp			fintiem;		/ No, termina

	////    Variables que se decrenetan cada centesima
tiempo10:
				cntblkh++;						/// Cada 10 ms
 800cfa2:	4bd1      	ldr	r3, [pc, #836]	@ (800d2e8 <tiempo+0x358>)
 800cfa4:	881b      	ldrh	r3, [r3, #0]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	4bcf      	ldr	r3, [pc, #828]	@ (800d2e8 <tiempo+0x358>)
 800cfac:	801a      	strh	r2, [r3, #0]

			   decwreg(&delayComStat);
 800cfae:	4bcf      	ldr	r3, [pc, #828]	@ (800d2ec <tiempo+0x35c>)
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	f7f9 ffde 	bl	8006f72 <decwreg>
			   decwreg(&cntMsgCmd);			//	Decrementa tiempo de desplegado de mensajes de comando
 800cfb6:	4bce      	ldr	r3, [pc, #824]	@ (800d2f0 <tiempo+0x360>)
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f7f9 ffda 	bl	8006f72 <decwreg>
			   decwreg(&timeBuzzOn);		//	Decrementa tiempo de encedido del buzzer
 800cfbe:	4bcd      	ldr	r3, [pc, #820]	@ (800d2f4 <tiempo+0x364>)
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f7f9 ffd6 	bl	8006f72 <decwreg>

			   decwreg(&cntdpysp);			//	Decrementa tiempo de desplegado de nuevo setpoint
 800cfc6:	4bcc      	ldr	r3, [pc, #816]	@ (800d2f8 <tiempo+0x368>)
 800cfc8:	0018      	movs	r0, r3
 800cfca:	f7f9 ffd2 	bl	8006f72 <decwreg>
		       decwreg(&retcapfc);			//	Agota el retardo para capturar señal de Fotocelda
 800cfce:	4bcb      	ldr	r3, [pc, #812]	@ (800d2fc <tiempo+0x36c>)
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	f7f9 ffce 	bl	8006f72 <decwreg>

		       decwreg(&cnt_ecom);			//	Agota el retardo
 800cfd6:	4bca      	ldr	r3, [pc, #808]	@ (800d300 <tiempo+0x370>)
 800cfd8:	0018      	movs	r0, r3
 800cfda:	f7f9 ffca 	bl	8006f72 <decwreg>
		       decwreg(&cnt_dpyrst);		//	Agota el retardo
 800cfde:	4bc9      	ldr	r3, [pc, #804]	@ (800d304 <tiempo+0x374>)
 800cfe0:	0018      	movs	r0, r3
 800cfe2:	f7f9 ffc6 	bl	8006f72 <decwreg>
		       decwreg(&cnt_btn);			//	Agota el retardo
 800cfe6:	4bc8      	ldr	r3, [pc, #800]	@ (800d308 <tiempo+0x378>)
 800cfe8:	0018      	movs	r0, r3
 800cfea:	f7f9 ffc2 	bl	8006f72 <decwreg>
		       decwreg(&cnt_blk_btn);		//	Agota el retardo
 800cfee:	4bc7      	ldr	r3, [pc, #796]	@ (800d30c <tiempo+0x37c>)
 800cff0:	0018      	movs	r0, r3
 800cff2:	f7f9 ffbe 	bl	8006f72 <decwreg>

		       cntcent++;					//	Una centésima más
 800cff6:	4bc6      	ldr	r3, [pc, #792]	@ (800d310 <tiempo+0x380>)
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	4bc4      	ldr	r3, [pc, #784]	@ (800d310 <tiempo+0x380>)
 800d000:	701a      	strb	r2, [r3, #0]
		       if (!GetRegFlagState(cntcent, 0)){  		//	btjf		cntcent,#0,no_dec_deb
 800d002:	4bc3      	ldr	r3, [pc, #780]	@ (800d310 <tiempo+0x380>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	001a      	movs	r2, r3
 800d008:	2301      	movs	r3, #1
 800d00a:	4013      	ands	r3, r2
 800d00c:	d01c      	beq.n	800d048 <tiempo+0xb8>
			        goto no_dec_deb;
		       }

		       decwreg(&deb2_btn1);			// Agota el retardo para función secundaria de botones
 800d00e:	4bc1      	ldr	r3, [pc, #772]	@ (800d314 <tiempo+0x384>)
 800d010:	0018      	movs	r0, r3
 800d012:	f7f9 ffae 	bl	8006f72 <decwreg>
		       decwreg(&deb2_btn2);			// Agota el retardo para función secundaria de botones
 800d016:	4bc0      	ldr	r3, [pc, #768]	@ (800d318 <tiempo+0x388>)
 800d018:	0018      	movs	r0, r3
 800d01a:	f7f9 ffaa 	bl	8006f72 <decwreg>
		       decwreg(&deb2_btn3);			// Agota el retardo para función secundaria de botones
 800d01e:	4bbf      	ldr	r3, [pc, #764]	@ (800d31c <tiempo+0x38c>)
 800d020:	0018      	movs	r0, r3
 800d022:	f7f9 ffa6 	bl	8006f72 <decwreg>
		       decwreg(&deb2_btn4);			// Agota el retardo para función secundaria de botones
 800d026:	4bbe      	ldr	r3, [pc, #760]	@ (800d320 <tiempo+0x390>)
 800d028:	0018      	movs	r0, r3
 800d02a:	f7f9 ffa2 	bl	8006f72 <decwreg>
		       decwreg(&deb1_btn2);			// Agota el retardo para función secundaria de botones
 800d02e:	4bbd      	ldr	r3, [pc, #756]	@ (800d324 <tiempo+0x394>)
 800d030:	0018      	movs	r0, r3
 800d032:	f7f9 ff9e 	bl	8006f72 <decwreg>
		       decwreg(&deb1_btn3);			// Agota el retardo para función secundaria de botones
 800d036:	4bbc      	ldr	r3, [pc, #752]	@ (800d328 <tiempo+0x398>)
 800d038:	0018      	movs	r0, r3
 800d03a:	f7f9 ff9a 	bl	8006f72 <decwreg>
		       decwreg(&deb_2btn);			// Agota el retardo para función secundaria de botones
 800d03e:	4bbb      	ldr	r3, [pc, #748]	@ (800d32c <tiempo+0x39c>)
 800d040:	0018      	movs	r0, r3
 800d042:	f7f9 ff96 	bl	8006f72 <decwreg>
 800d046:	e000      	b.n	800d04a <tiempo+0xba>
			        goto no_dec_deb;
 800d048:	46c0      	nop			@ (mov r8, r8)
no_dec_deb:

		        if(cntcent >= 100){ 		// cp			A,#$64;	/ ¿Se completo un segundo?
 800d04a:	4bb1      	ldr	r3, [pc, #708]	@ (800d310 <tiempo+0x380>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b63      	cmp	r3, #99	@ 0x63
 800d050:	d800      	bhi.n	800d054 <tiempo+0xc4>
 800d052:	e20d      	b.n	800d470 <tiempo+0x4e0>
		        	goto tiempo12;			//;jruge		tiempo12
 800d054:	46c0      	nop			@ (mov r8, r8)
		        }
		        goto fintiem;

tiempo12:
				cntcent = 0;				//clr			cntcent;		/ Si, inicia desde 0 centésimas
 800d056:	4bae      	ldr	r3, [pc, #696]	@ (800d310 <tiempo+0x380>)
 800d058:	2200      	movs	r2, #0
 800d05a:	701a      	strb	r2, [r3, #0]
//;-----------------------------------------------------------------------------------

				//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
				//ld			A,BluetoothState
				//cp			A,#3
				if(BluetoothState!=3)//jrne		endSelect
 800d05c:	4bb4      	ldr	r3, [pc, #720]	@ (800d330 <tiempo+0x3a0>)
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2b03      	cmp	r3, #3
 800d062:	d13e      	bne.n	800d0e2 <tiempo+0x152>
					goto endSelect;
				//ldw			X,#cntSetName;
				decword(&cntSetName);//call		decword
 800d064:	4bb3      	ldr	r3, [pc, #716]	@ (800d334 <tiempo+0x3a4>)
 800d066:	0018      	movs	r0, r3
 800d068:	f7f9 ff71 	bl	8006f4e <decword>
				//btjt	flagsTxControl,#f_statBLE,no_toggleCOM;  Con conexión BLE activa no cambies el canal de comunicacion
				//; no cambies de canal de comunicación si se está transmitiendo algun logger via wifi
				//btjt	flagsWIFI,#f_timeLoggerCmd,no_toggleCOM;
				//btjt	flagsWIFI,#f_eventLoggerCmd,no_toggleCOM;

				if(flagsTxControl[f_statBLE] || flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800d06c:	4bb2      	ldr	r3, [pc, #712]	@ (800d338 <tiempo+0x3a8>)
 800d06e:	785b      	ldrb	r3, [r3, #1]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d11a      	bne.n	800d0aa <tiempo+0x11a>
 800d074:	4bb1      	ldr	r3, [pc, #708]	@ (800d33c <tiempo+0x3ac>)
 800d076:	78db      	ldrb	r3, [r3, #3]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d116      	bne.n	800d0aa <tiempo+0x11a>
 800d07c:	4baf      	ldr	r3, [pc, #700]	@ (800d33c <tiempo+0x3ac>)
 800d07e:	791b      	ldrb	r3, [r3, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d112      	bne.n	800d0aa <tiempo+0x11a>
					goto no_toggleCOM;

toggleCOM:
 800d084:	46c0      	nop			@ (mov r8, r8)
				//; no cambies el canal de comunicación si hay una respuesta en transmisión en progreso
				//tnz		keyTx
				if(keyTx)//jrne	no_toggleCOM
 800d086:	4bae      	ldr	r3, [pc, #696]	@ (800d340 <tiempo+0x3b0>)
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10f      	bne.n	800d0ae <tiempo+0x11e>
					goto no_toggleCOM;
				flagsTxControl[f_select] ^= 0x1;// bcpl		flagsTxControl,#f_select
 800d08e:	4baa      	ldr	r3, [pc, #680]	@ (800d338 <tiempo+0x3a8>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2201      	movs	r2, #1
 800d094:	4053      	eors	r3, r2
 800d096:	b2db      	uxtb	r3, r3
 800d098:	1e5a      	subs	r2, r3, #1
 800d09a:	4193      	sbcs	r3, r2
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	4ba6      	ldr	r3, [pc, #664]	@ (800d338 <tiempo+0x3a8>)
 800d0a0:	701a      	strb	r2, [r3, #0]
				delayComStat = 10;//mov			delayComStat,#10
 800d0a2:	4b92      	ldr	r3, [pc, #584]	@ (800d2ec <tiempo+0x35c>)
 800d0a4:	220a      	movs	r2, #10
 800d0a6:	701a      	strb	r2, [r3, #0]
 800d0a8:	e002      	b.n	800d0b0 <tiempo+0x120>
					goto no_toggleCOM;
 800d0aa:	46c0      	nop			@ (mov r8, r8)
 800d0ac:	e000      	b.n	800d0b0 <tiempo+0x120>
					goto no_toggleCOM;
 800d0ae:	46c0      	nop			@ (mov r8, r8)
no_toggleCOM:

				if(!flagsTxControl[f_select])//btjf		flagsTxControl,#f_select,BLEselect
 800d0b0:	4ba1      	ldr	r3, [pc, #644]	@ (800d338 <tiempo+0x3a8>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	4053      	eors	r3, r2
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d108      	bne.n	800d0d0 <tiempo+0x140>
					goto BLEselect;
WIFIselect:
 800d0be:	46c0      	nop			@ (mov r8, r8)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);//bset		PE_ODR,#2
 800d0c0:	2380      	movs	r3, #128	@ 0x80
 800d0c2:	015b      	lsls	r3, r3, #5
 800d0c4:	489f      	ldr	r0, [pc, #636]	@ (800d344 <tiempo+0x3b4>)
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	0019      	movs	r1, r3
 800d0ca:	f006 faf8 	bl	80136be <HAL_GPIO_WritePin>
				goto endSelect;//jra			endSelect
 800d0ce:	e009      	b.n	800d0e4 <tiempo+0x154>
					goto BLEselect;
 800d0d0:	46c0      	nop			@ (mov r8, r8)
BLEselect:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);//bres		PE_ODR,#2
 800d0d2:	2380      	movs	r3, #128	@ 0x80
 800d0d4:	015b      	lsls	r3, r3, #5
 800d0d6:	489b      	ldr	r0, [pc, #620]	@ (800d344 <tiempo+0x3b4>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	0019      	movs	r1, r3
 800d0dc:	f006 faef 	bl	80136be <HAL_GPIO_WritePin>
 800d0e0:	e000      	b.n	800d0e4 <tiempo+0x154>
					goto endSelect;
 800d0e2:	46c0      	nop			@ (mov r8, r8)
//    		    timeSeconds_HW++;				// Sí, Incrementa parte alta del tiempo UNIX
//no_inc_timeH:
//
//noIncTime:

	            decword(&temp_doorEvent);		// decremnta registro de duración evento puerta
 800d0e4:	4b98      	ldr	r3, [pc, #608]	@ (800d348 <tiempo+0x3b8>)
 800d0e6:	0018      	movs	r0, r3
 800d0e8:	f7f9 ff31 	bl	8006f4e <decword>
	            decwreg(&timeTxTBLE);
 800d0ec:	4b97      	ldr	r3, [pc, #604]	@ (800d34c <tiempo+0x3bc>)
 800d0ee:	0018      	movs	r0, r3
 800d0f0:	f7f9 ff3f 	bl	8006f72 <decwreg>
				decword(&timeoutTBLE);
 800d0f4:	4b96      	ldr	r3, [pc, #600]	@ (800d350 <tiempo+0x3c0>)
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f7f9 ff29 	bl	8006f4e <decword>
	            decwreg(&timeTxTWF);
 800d0fc:	4b95      	ldr	r3, [pc, #596]	@ (800d354 <tiempo+0x3c4>)
 800d0fe:	0018      	movs	r0, r3
 800d100:	f7f9 ff37 	bl	8006f72 <decwreg>
		    	decword(&timeoutTWF);			// decrementa timeout token wifi
 800d104:	4b94      	ldr	r3, [pc, #592]	@ (800d358 <tiempo+0x3c8>)
 800d106:	0018      	movs	r0, r3
 800d108:	f7f9 ff21 	bl	8006f4e <decword>
		    	decwreg(&timeoutTxWifi);		// decrementa timeout respuesta de wifi
 800d10c:	4b93      	ldr	r3, [pc, #588]	@ (800d35c <tiempo+0x3cc>)
 800d10e:	0018      	movs	r0, r3
 800d110:	f7f9 ff2f 	bl	8006f72 <decwreg>
		    	decwreg(&delayTxLoggWifi);		// decrementa tiempo entre envíos de logger
 800d114:	4b92      	ldr	r3, [pc, #584]	@ (800d360 <tiempo+0x3d0>)
 800d116:	0018      	movs	r0, r3
 800d118:	f7f9 ff2b 	bl	8006f72 <decwreg>
		    	decwreg(&retLampOff);			// decrementa tiempo de retardo para apagado de lampara
 800d11c:	4b91      	ldr	r3, [pc, #580]	@ (800d364 <tiempo+0x3d4>)
 800d11e:	0018      	movs	r0, r3
 800d120:	f7f9 ff27 	bl	8006f72 <decwreg>
		    	decwreg(&retPowerOn);			// decrementa tiempo de retardo para apagado de lampara
 800d124:	4b90      	ldr	r3, [pc, #576]	@ (800d368 <tiempo+0x3d8>)
 800d126:	0018      	movs	r0, r3
 800d128:	f7f9 ff23 	bl	8006f72 <decwreg>
		    	decwreg(&timeUnlockWIFI);		// decrementa tiempo de desbloqueo de comandos protegidos por password
 800d12c:	4b8f      	ldr	r3, [pc, #572]	@ (800d36c <tiempo+0x3dc>)
 800d12e:	0018      	movs	r0, r3
 800d130:	f7f9 ff1f 	bl	8006f72 <decwreg>
		    	decwreg(&debBtn2F3);			// Agota el retardo para función 3 boton 2
 800d134:	4b8e      	ldr	r3, [pc, #568]	@ (800d370 <tiempo+0x3e0>)
 800d136:	0018      	movs	r0, r3
 800d138:	f7f9 ff1b 	bl	8006f72 <decwreg>


		    	decword(&silencioAlarmH);		// decremnta registro de duración evento puerta
 800d13c:	4b8d      	ldr	r3, [pc, #564]	@ (800d374 <tiempo+0x3e4>)
 800d13e:	0018      	movs	r0, r3
 800d140:	f7f9 ff05 	bl	8006f4e <decword>
		    	decword(&timePreDh_h);
 800d144:	4b8c      	ldr	r3, [pc, #560]	@ (800d378 <tiempo+0x3e8>)
 800d146:	0018      	movs	r0, r3
 800d148:	f7f9 ff01 	bl	8006f4e <decword>
tiempo16:		//call		decwreg;
				//incw		X;
				//cpw			X,#End_sec;
				//jrult		tiempo16;

		    	decwreg(&retvent);//	Retardo para el encendido del ventilor
 800d14c:	4b8b      	ldr	r3, [pc, #556]	@ (800d37c <tiempo+0x3ec>)
 800d14e:	0018      	movs	r0, r3
 800d150:	f7f9 ff0f 	bl	8006f72 <decwreg>
		    	decwreg(&minfunc);//		Tiempo mínimo de función activa
 800d154:	4b8a      	ldr	r3, [pc, #552]	@ (800d380 <tiempo+0x3f0>)
 800d156:	0018      	movs	r0, r3
 800d158:	f7f9 ff0b 	bl	8006f72 <decwreg>
		    	decwreg(&durautop);//	Duración de autoprueba
 800d15c:	4b89      	ldr	r3, [pc, #548]	@ (800d384 <tiempo+0x3f4>)
 800d15e:	0018      	movs	r0, r3
 800d160:	f7f9 ff07 	bl	8006f72 <decwreg>
		    	decwreg(&cntdpyev);//	Tiempo desplegado temperatura de evaporador
 800d164:	4b88      	ldr	r3, [pc, #544]	@ (800d388 <tiempo+0x3f8>)
 800d166:	0018      	movs	r0, r3
 800d168:	f7f9 ff03 	bl	8006f72 <decwreg>
		    	decwreg(&cntobscu);//	Contador de tiempo de obscuridad en la fotocelda
 800d16c:	4b87      	ldr	r3, [pc, #540]	@ (800d38c <tiempo+0x3fc>)
 800d16e:	0018      	movs	r0, r3
 800d170:	f7f9 feff 	bl	8006f72 <decwreg>
		    	decwreg(&cntfail);//		Contador para indicar fallas
 800d174:	4b86      	ldr	r3, [pc, #536]	@ (800d390 <tiempo+0x400>)
 800d176:	0018      	movs	r0, r3
 800d178:	f7f9 fefb 	bl	8006f72 <decwreg>
		    	decwreg(&valflvl);//
 800d17c:	4b85      	ldr	r3, [pc, #532]	@ (800d394 <tiempo+0x404>)
 800d17e:	0018      	movs	r0, r3
 800d180:	f7f9 fef7 	bl	8006f72 <decwreg>
		    	decwreg(&valfhvl);//
 800d184:	4b84      	ldr	r3, [pc, #528]	@ (800d398 <tiempo+0x408>)
 800d186:	0018      	movs	r0, r3
 800d188:	f7f9 fef3 	bl	8006f72 <decwreg>
		    	decwreg(&cnt_prog);//
 800d18c:	4b83      	ldr	r3, [pc, #524]	@ (800d39c <tiempo+0x40c>)
 800d18e:	0018      	movs	r0, r3
 800d190:	f7f9 feef 	bl	8006f72 <decwreg>
		    	decwreg(&cnt_btn_hld);//
 800d194:	4b82      	ldr	r3, [pc, #520]	@ (800d3a0 <tiempo+0x410>)
 800d196:	0018      	movs	r0, r3
 800d198:	f7f9 feeb 	bl	8006f72 <decwreg>
		    	decwreg(&ret_fan_co);//	Retardo para el encendido del ventilor por compresor recien encendido
 800d19c:	4b81      	ldr	r3, [pc, #516]	@ (800d3a4 <tiempo+0x414>)
 800d19e:	0018      	movs	r0, r3
 800d1a0:	f7f9 fee7 	bl	8006f72 <decwreg>
		    	decwreg(&End_sec);//
 800d1a4:	4b80      	ldr	r3, [pc, #512]	@ (800d3a8 <tiempo+0x418>)
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	f7f9 fee3 	bl	8006f72 <decwreg>



		    	decword(&cntDefi_H); // decrementa tiempo de desficiencia
 800d1ac:	4b7f      	ldr	r3, [pc, #508]	@ (800d3ac <tiempo+0x41c>)
 800d1ae:	0018      	movs	r0, r3
 800d1b0:	f7f9 fecd 	bl	8006f4e <decword>

		    	decwreg(&timeOutRst);
 800d1b4:	4b7e      	ldr	r3, [pc, #504]	@ (800d3b0 <tiempo+0x420>)
 800d1b6:	0018      	movs	r0, r3
 800d1b8:	f7f9 fedb 	bl	8006f72 <decwreg>
		    	decwreg(&timeOutRx);
 800d1bc:	4b7d      	ldr	r3, [pc, #500]	@ (800d3b4 <tiempo+0x424>)
 800d1be:	0018      	movs	r0, r3
 800d1c0:	f7f9 fed7 	bl	8006f72 <decwreg>
		    	decwreg(&timeRstBLE);
 800d1c4:	4b7c      	ldr	r3, [pc, #496]	@ (800d3b8 <tiempo+0x428>)
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	f7f9 fed3 	bl	8006f72 <decwreg>
		    	decword(&cntLogger_H);			// decrementra contador de logger
 800d1cc:	4b7b      	ldr	r3, [pc, #492]	@ (800d3bc <tiempo+0x42c>)
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	f7f9 febd 	bl	8006f4e <decword>
		    	decwreg(&cntInitTx);
 800d1d4:	4b7a      	ldr	r3, [pc, #488]	@ (800d3c0 <tiempo+0x430>)
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	f7f9 fecb 	bl	8006f72 <decwreg>
		    	decword(&timeDataWF_H);			// decrementra contador de envio de datos por tiempo WIFI
 800d1dc:	4b79      	ldr	r3, [pc, #484]	@ (800d3c4 <tiempo+0x434>)
 800d1de:	0018      	movs	r0, r3
 800d1e0:	f7f9 feb5 	bl	8006f4e <decword>

		    	decword(&t_ahorro1_H);
 800d1e4:	4b78      	ldr	r3, [pc, #480]	@ (800d3c8 <tiempo+0x438>)
 800d1e6:	0018      	movs	r0, r3
 800d1e8:	f7f9 feb1 	bl	8006f4e <decword>
		    	decword(&t_ahorro2_H);
 800d1ec:	4b77      	ldr	r3, [pc, #476]	@ (800d3cc <tiempo+0x43c>)
 800d1ee:	0018      	movs	r0, r3
 800d1f0:	f7f9 fead 	bl	8006f4e <decword>
		    	decword(&cntNoct_H);
 800d1f4:	4b76      	ldr	r3, [pc, #472]	@ (800d3d0 <tiempo+0x440>)
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f7f9 fea9 	bl	8006f4e <decword>

		    	if(GetRegFlagState(durautop, 0)){   //btjt durautop,#0,no_dec2
 800d1fc:	4b61      	ldr	r3, [pc, #388]	@ (800d384 <tiempo+0x3f4>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	001a      	movs	r2, r3
 800d202:	2301      	movs	r3, #1
 800d204:	4013      	ands	r3, r2
 800d206:	d104      	bne.n	800d212 <tiempo+0x282>
		    		goto no_dec2;
		    	}
	    		decwreg(&durautop2);
 800d208:	4b72      	ldr	r3, [pc, #456]	@ (800d3d4 <tiempo+0x444>)
 800d20a:	0018      	movs	r0, r3
 800d20c:	f7f9 feb1 	bl	8006f72 <decwreg>
 800d210:	e000      	b.n	800d214 <tiempo+0x284>
		    		goto no_dec2;
 800d212:	46c0      	nop			@ (mov r8, r8)
		    	  //btjt		durautop,#0,no_dec2

no_dec2:

		    	decword(&retproth);
 800d214:	4b70      	ldr	r3, [pc, #448]	@ (800d3d8 <tiempo+0x448>)
 800d216:	0018      	movs	r0, r3
 800d218:	f7f9 fe99 	bl	8006f4e <decword>
		    	decword(&tminstoph);			// Decrementa tiempo de descanso del compresor
 800d21c:	4b6f      	ldr	r3, [pc, #444]	@ (800d3dc <tiempo+0x44c>)
 800d21e:	0018      	movs	r0, r3
 800d220:	f7f9 fe95 	bl	8006f4e <decword>
		    	decword(&cntpah);				// Decremetna tiempo permitido de puerta abierta.
 800d224:	4b6e      	ldr	r3, [pc, #440]	@ (800d3e0 <tiempo+0x450>)
 800d226:	0018      	movs	r0, r3
 800d228:	f7f9 fe91 	bl	8006f4e <decword>
		    	decword(&drp_fanh);
 800d22c:	4b6d      	ldr	r3, [pc, #436]	@ (800d3e4 <tiempo+0x454>)
 800d22e:	0018      	movs	r0, r3
 800d230:	f7f9 fe8d 	bl	8006f4e <decword>
		    	decword(&drp_comph);
 800d234:	4b6c      	ldr	r3, [pc, #432]	@ (800d3e8 <tiempo+0x458>)
 800d236:	0018      	movs	r0, r3
 800d238:	f7f9 fe89 	bl	8006f4e <decword>


		    	if(interdhh >= coontimeh ){  //jruge tiempo 17, salta si c = 0  *************************
 800d23c:	4b6b      	ldr	r3, [pc, #428]	@ (800d3ec <tiempo+0x45c>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	001a      	movs	r2, r3
 800d242:	4b6b      	ldr	r3, [pc, #428]	@ (800d3f0 <tiempo+0x460>)
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	429a      	cmp	r2, r3
 800d248:	d204      	bcs.n	800d254 <tiempo+0x2c4>
		    		goto tiempo_17;
		    	}

		        if(portX[rel_co]){  //tiempo_j00 = tiempo_17
 800d24a:	4b6a      	ldr	r3, [pc, #424]	@ (800d3f4 <tiempo+0x464>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d006      	beq.n	800d260 <tiempo+0x2d0>
		        	goto	tiempo_j00;		//tiempo_j00;	/ Esta encendido el compresor?    ;RM_20220623  Cambio de puerto para compresor
 800d252:	e000      	b.n	800d256 <tiempo+0x2c6>
		    		goto tiempo_17;
 800d254:	46c0      	nop			@ (mov r8, r8)
		        }
	        	goto tiempo20; //jra tiempo20

tiempo_j00:
tiempo_17:       decword(&interdhh);			// Agota el tiempo de interdeshielo
 800d256:	4b65      	ldr	r3, [pc, #404]	@ (800d3ec <tiempo+0x45c>)
 800d258:	0018      	movs	r0, r3
 800d25a:	f7f9 fe78 	bl	8006f4e <decword>
 800d25e:	e000      	b.n	800d262 <tiempo+0x2d2>
	        	goto tiempo20; //jra tiempo20
 800d260:	46c0      	nop			@ (mov r8, r8)

tiempo20:		 decword(&durdhh);				// Agota la duración del deshielo
 800d262:	4b65      	ldr	r3, [pc, #404]	@ (800d3f8 <tiempo+0x468>)
 800d264:	0018      	movs	r0, r3
 800d266:	f7f9 fe72 	bl	8006f4e <decword>

				holdseg++;						// Contador de segundos para retencion de display
 800d26a:	4b64      	ldr	r3, [pc, #400]	@ (800d3fc <tiempo+0x46c>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	3301      	adds	r3, #1
 800d270:	b2da      	uxtb	r2, r3
 800d272:	4b62      	ldr	r3, [pc, #392]	@ (800d3fc <tiempo+0x46c>)
 800d274:	701a      	strb	r2, [r3, #0]
    	    	if(holdseg < 60){
 800d276:	4b61      	ldr	r3, [pc, #388]	@ (800d3fc <tiempo+0x46c>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b3b      	cmp	r3, #59	@ 0x3b
 800d27c:	d907      	bls.n	800d28e <tiempo+0x2fe>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
		    	 }
	 			holdseg = 0;					//clr			holdseg;		/ Sí, reinicia contador de segundos
 800d27e:	4b5f      	ldr	r3, [pc, #380]	@ (800d3fc <tiempo+0x46c>)
 800d280:	2200      	movs	r2, #0
 800d282:	701a      	strb	r2, [r3, #0]
		        decwreg(&cnthold);
 800d284:	4b5e      	ldr	r3, [pc, #376]	@ (800d400 <tiempo+0x470>)
 800d286:	0018      	movs	r0, r3
 800d288:	f7f9 fe73 	bl	8006f72 <decwreg>
 800d28c:	e000      	b.n	800d290 <tiempo+0x300>
    	    		 goto tiempo40;				//jrult		tiempo40;		/ No, continua
 800d28e:	46c0      	nop			@ (mov r8, r8)

tiempo40:
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);	 //28-May-2024: Salida IO7 toogle test
 800d290:	2380      	movs	r3, #128	@ 0x80
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	4a2b      	ldr	r2, [pc, #172]	@ (800d344 <tiempo+0x3b4>)
 800d296:	0019      	movs	r1, r3
 800d298:	0010      	movs	r0, r2
 800d29a:	f006 fa2d 	bl	80136f8 <HAL_GPIO_TogglePin>
				if(GetRegFlagState(cntseg, 3)){
 800d29e:	4b59      	ldr	r3, [pc, #356]	@ (800d404 <tiempo+0x474>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	001a      	movs	r2, r3
 800d2a4:	2308      	movs	r3, #8
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	d001      	beq.n	800d2ae <tiempo+0x31e>
					asm ("nop");
 800d2aa:	46c0      	nop			@ (mov r8, r8)
 800d2ac:	e000      	b.n	800d2b0 <tiempo+0x320>
					// GPIOR0[f_dh]  = 0;				// Apaga DH       		..   Toogle FUNIONA OK
					// GPIOR1[f_fan] = 0;					// Apaga FAN		  	..   Toogle FUNIONA OK
					//GPIOR0[f_lamp] = 0;				// Apaga  lampara 		..   Toogle FUNIONA OK
				}
				else{
					asm ("nop");
 800d2ae:	46c0      	nop			@ (mov r8, r8)
					// GPIOR1[f_fan] = 1;					// Enciende FAN
					// GPIOR0[f_lamp] = 1;				// Enciende lampara
				}
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

				cntseg++;							//inc			cntseg;			/ Un segundo más
 800d2b0:	4b54      	ldr	r3, [pc, #336]	@ (800d404 <tiempo+0x474>)
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	4b52      	ldr	r3, [pc, #328]	@ (800d404 <tiempo+0x474>)
 800d2ba:	701a      	strb	r2, [r3, #0]
				if(cntseg < 9){ //cp cntseg, #9
 800d2bc:	4b51      	ldr	r3, [pc, #324]	@ (800d404 <tiempo+0x474>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b08      	cmp	r3, #8
 800d2c2:	d903      	bls.n	800d2cc <tiempo+0x33c>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
		    	}
				flagsa[0]= 0;		 // bres		flagsa,#0;0x01;	/ Si, termina arranque
 800d2c4:	4b50      	ldr	r3, [pc, #320]	@ (800d408 <tiempo+0x478>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	701a      	strb	r2, [r3, #0]
 800d2ca:	e000      	b.n	800d2ce <tiempo+0x33e>
		    		goto tiempo50;				//jrult		tiempo50;		/ No, espera otro segundo
 800d2cc:	46c0      	nop			@ (mov r8, r8)
tiempo50: 		if(!GetRegFlagState(cntseg, 4)){ // btjf		//cntseg,#4,tiempo_j01; **********************************
 800d2ce:	4b4d      	ldr	r3, [pc, #308]	@ (800d404 <tiempo+0x474>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	001a      	movs	r2, r3
 800d2d4:	2310      	movs	r3, #16
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	d100      	bne.n	800d2dc <tiempo+0x34c>
 800d2da:	e097      	b.n	800d40c <tiempo+0x47c>
					goto	tiempo_j01;		// Ya son 16 segundos?
		    	}
				flagsa[7] = 0;			 //bres		flagsa,#7    / Si, termina inicalización
 800d2dc:	4b4a      	ldr	r3, [pc, #296]	@ (800d408 <tiempo+0x478>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	71da      	strb	r2, [r3, #7]
 800d2e2:	e094      	b.n	800d40e <tiempo+0x47e>
 800d2e4:	20000bbe 	.word	0x20000bbe
 800d2e8:	20000b4c 	.word	0x20000b4c
 800d2ec:	200010f4 	.word	0x200010f4
 800d2f0:	20001064 	.word	0x20001064
 800d2f4:	2000109d 	.word	0x2000109d
 800d2f8:	20000bc2 	.word	0x20000bc2
 800d2fc:	20000bc9 	.word	0x20000bc9
 800d300:	20000c20 	.word	0x20000c20
 800d304:	20000c21 	.word	0x20000c21
 800d308:	20000c22 	.word	0x20000c22
 800d30c:	20000c34 	.word	0x20000c34
 800d310:	20000b4a 	.word	0x20000b4a
 800d314:	20000c10 	.word	0x20000c10
 800d318:	20000c11 	.word	0x20000c11
 800d31c:	20000c12 	.word	0x20000c12
 800d320:	20000c13 	.word	0x20000c13
 800d324:	20000c14 	.word	0x20000c14
 800d328:	20000c15 	.word	0x20000c15
 800d32c:	20000c16 	.word	0x20000c16
 800d330:	2000004c 	.word	0x2000004c
 800d334:	200010f8 	.word	0x200010f8
 800d338:	200010ec 	.word	0x200010ec
 800d33c:	20000f50 	.word	0x20000f50
 800d340:	20000e19 	.word	0x20000e19
 800d344:	50000400 	.word	0x50000400
 800d348:	20000ed8 	.word	0x20000ed8
 800d34c:	200010fa 	.word	0x200010fa
 800d350:	200010fc 	.word	0x200010fc
 800d354:	20000f3a 	.word	0x20000f3a
 800d358:	20000f4c 	.word	0x20000f4c
 800d35c:	20000f7a 	.word	0x20000f7a
 800d360:	20000f7b 	.word	0x20000f7b
 800d364:	20001066 	.word	0x20001066
 800d368:	2000109e 	.word	0x2000109e
 800d36c:	20000ee7 	.word	0x20000ee7
 800d370:	200010a4 	.word	0x200010a4
 800d374:	20000fa0 	.word	0x20000fa0
 800d378:	200010fe 	.word	0x200010fe
 800d37c:	20000b6a 	.word	0x20000b6a
 800d380:	20000b6b 	.word	0x20000b6b
 800d384:	20000b6c 	.word	0x20000b6c
 800d388:	20000b6d 	.word	0x20000b6d
 800d38c:	20000b6e 	.word	0x20000b6e
 800d390:	20000b6f 	.word	0x20000b6f
 800d394:	20000b70 	.word	0x20000b70
 800d398:	20000b71 	.word	0x20000b71
 800d39c:	20000b72 	.word	0x20000b72
 800d3a0:	20000b73 	.word	0x20000b73
 800d3a4:	20000b74 	.word	0x20000b74
 800d3a8:	20000b75 	.word	0x20000b75
 800d3ac:	20000c36 	.word	0x20000c36
 800d3b0:	20000ee5 	.word	0x20000ee5
 800d3b4:	20000ee6 	.word	0x20000ee6
 800d3b8:	20000ee8 	.word	0x20000ee8
 800d3bc:	20000d98 	.word	0x20000d98
 800d3c0:	20000e1a 	.word	0x20000e1a
 800d3c4:	20000f4e 	.word	0x20000f4e
 800d3c8:	20000c30 	.word	0x20000c30
 800d3cc:	20000c32 	.word	0x20000c32
 800d3d0:	20000c44 	.word	0x20000c44
 800d3d4:	20000c28 	.word	0x20000c28
 800d3d8:	20000b68 	.word	0x20000b68
 800d3dc:	20000b62 	.word	0x20000b62
 800d3e0:	20000b66 	.word	0x20000b66
 800d3e4:	20000bfc 	.word	0x20000bfc
 800d3e8:	20000bfa 	.word	0x20000bfa
 800d3ec:	20000bb6 	.word	0x20000bb6
 800d3f0:	20000bbc 	.word	0x20000bbc
 800d3f4:	20000b58 	.word	0x20000b58
 800d3f8:	20000bb8 	.word	0x20000bb8
 800d3fc:	20000b53 	.word	0x20000b53
 800d400:	20000bc7 	.word	0x20000bc7
 800d404:	20000b4b 	.word	0x20000b4b
 800d408:	20000b78 	.word	0x20000b78
					goto	tiempo_j01;		// Ya son 16 segundos?
 800d40c:	46c0      	nop			@ (mov r8, r8)
tiempo_j01:		if(cntseg < 60){  				//cp			A,#$3C;	/ Ya se completó un minuto?
 800d40e:	4b1c      	ldr	r3, [pc, #112]	@ (800d480 <tiempo+0x4f0>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b3b      	cmp	r3, #59	@ 0x3b
 800d414:	d92e      	bls.n	800d474 <tiempo+0x4e4>
					goto fintiem;				//jrult fintiem
		    	 }
		    	 cntseg = 0;
 800d416:	4b1a      	ldr	r3, [pc, #104]	@ (800d480 <tiempo+0x4f0>)
 800d418:	2200      	movs	r2, #0
 800d41a:	701a      	strb	r2, [r3, #0]

		    	 fauto [7] = 0; //bres		fauto,#7 ********************************* esta declarado como 8 bits
 800d41c:	4b19      	ldr	r3, [pc, #100]	@ (800d484 <tiempo+0x4f4>)
 800d41e:	2200      	movs	r2, #0
 800d420:	71da      	strb	r2, [r3, #7]

 ////    Variables que se decrementan cada minuto

		    	 decwreg(&cnt_pta_fan); // Agota tiempo de encendido de ventilador
 800d422:	4b19      	ldr	r3, [pc, #100]	@ (800d488 <tiempo+0x4f8>)
 800d424:	0018      	movs	r0, r3
 800d426:	f7f9 fda4 	bl	8006f72 <decwreg>
	    		 decwreg(&ton_fan);  //Agota tiempo de encendido de ventilador
 800d42a:	4b18      	ldr	r3, [pc, #96]	@ (800d48c <tiempo+0x4fc>)
 800d42c:	0018      	movs	r0, r3
 800d42e:	f7f9 fda0 	bl	8006f72 <decwreg>
	    	     decwreg(&toff_fan); //Agota tiempo de apagado de ventilador
 800d432:	4b17      	ldr	r3, [pc, #92]	@ (800d490 <tiempo+0x500>)
 800d434:	0018      	movs	r0, r3
 800d436:	f7f9 fd9c 	bl	8006f72 <decwreg>
	    		 decwreg(&retnoct); // Agota el retardo para entrar a modo nocturno de forma automática
 800d43a:	4b16      	ldr	r3, [pc, #88]	@ (800d494 <tiempo+0x504>)
 800d43c:	0018      	movs	r0, r3
 800d43e:	f7f9 fd98 	bl	8006f72 <decwreg>
	    		 decwreg(&cnthitemp); //Agota el tiempo temperatura alta
 800d442:	4b15      	ldr	r3, [pc, #84]	@ (800d498 <tiempo+0x508>)
 800d444:	0018      	movs	r0, r3
 800d446:	f7f9 fd94 	bl	8006f72 <decwreg>
	    		 decword(&retnocth); //Agota el retardo para entrar a modo nocturno con luz
 800d44a:	4b14      	ldr	r3, [pc, #80]	@ (800d49c <tiempo+0x50c>)
 800d44c:	0018      	movs	r0, r3
 800d44e:	f7f9 fd7e 	bl	8006f4e <decword>
	    		 decword(&cntworkh); //Agota el tiempo maximo de trabajo de compresor
 800d452:	4b13      	ldr	r3, [pc, #76]	@ (800d4a0 <tiempo+0x510>)
 800d454:	0018      	movs	r0, r3
 800d456:	f7f9 fd7a 	bl	8006f4e <decword>
	    		 decword(&cntexhah); //Agota el tiempo de descanso de compresor por compresor exhausto
 800d45a:	4b12      	ldr	r3, [pc, #72]	@ (800d4a4 <tiempo+0x514>)
 800d45c:	0018      	movs	r0, r3
 800d45e:	f7f9 fd76 	bl	8006f4e <decword>

	    		 decwreg(&timerOffManto); // Agota tiempo de apagado de mantenimiento
 800d462:	4b11      	ldr	r3, [pc, #68]	@ (800d4a8 <tiempo+0x518>)
 800d464:	0018      	movs	r0, r3
 800d466:	f7f9 fd84 	bl	8006f72 <decwreg>
	    		 goto fintiem;
 800d46a:	e004      	b.n	800d476 <tiempo+0x4e6>
		goto fintiem;					// jp			fintiem;		/ No, termina
 800d46c:	46c0      	nop			@ (mov r8, r8)
 800d46e:	e002      	b.n	800d476 <tiempo+0x4e6>
		        goto fintiem;
 800d470:	46c0      	nop			@ (mov r8, r8)
 800d472:	e000      	b.n	800d476 <tiempo+0x4e6>
					goto fintiem;				//jrult fintiem
 800d474:	46c0      	nop			@ (mov r8, r8)


fintiem:
tiempo_j02:
	             goto main_tiempo;
 800d476:	46c0      	nop			@ (mov r8, r8)
main_tiempo:

}
 800d478:	46c0      	nop			@ (mov r8, r8)
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	46c0      	nop			@ (mov r8, r8)
 800d480:	20000b4b 	.word	0x20000b4b
 800d484:	20000bd8 	.word	0x20000bd8
 800d488:	20000c27 	.word	0x20000c27
 800d48c:	20000bf8 	.word	0x20000bf8
 800d490:	20000bf9 	.word	0x20000bf9
 800d494:	20000bc8 	.word	0x20000bc8
 800d498:	20000bcb 	.word	0x20000bcb
 800d49c:	20000b64 	.word	0x20000b64
 800d4a0:	20000c2c 	.word	0x20000c2c
 800d4a4:	20000c2e 	.word	0x20000c2e
 800d4a8:	20000c51 	.word	0x20000c51

0800d4ac <tx_buffer_prep>:

#include "main.h"
#include "customMain.h"


void tx_buffer_prep (void){
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
	uint8_t *point_X;
	uint8_t *point_Y;

tx_buffer_pr:
		// ((Paso:1)) Nota, se envia primero el header y (Paso:2) Despues la informacion y (Paso:3) checksum
		if(flagsTX [2]){							// Hay que transmitir Header ??
 800d4b2:	4b6f      	ldr	r3, [pc, #444]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d4b4:	789b      	ldrb	r3, [r3, #2]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d023      	beq.n	800d502 <tx_buffer_prep+0x56>
			goto	tx_header;
 800d4ba:	46c0      	nop			@ (mov r8, r8)
		}
		goto	tx_buffer;		//	jp		tx_buffer
//;----------------------------------------------------------------------------------------------------------------
tx_header:
									;//---- Carga datos a array de transmisión
	    point_Y = &Bloque_Header [softVersion1];	//&softVersion1;
 800d4bc:	4b6d      	ldr	r3, [pc, #436]	@ (800d674 <tx_buffer_prep+0x1c8>)
 800d4be:	603b      	str	r3, [r7, #0]
	    point_X = &ImberaProtocolBuffer [0];
 800d4c0:	4b6d      	ldr	r3, [pc, #436]	@ (800d678 <tx_buffer_prep+0x1cc>)
 800d4c2:	607b      	str	r3, [r7, #4]
	    //uint8_t A_STM8;

load_header_tx:

		    STM8_A = *point_Y;          			// *ImberaProtocolBuffer = *softVersion1
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	781a      	ldrb	r2, [r3, #0]
 800d4c8:	4b6c      	ldr	r3, [pc, #432]	@ (800d67c <tx_buffer_prep+0x1d0>)
 800d4ca:	701a      	strb	r2, [r3, #0]
	    	*point_X = STM8_A;
 800d4cc:	4b6b      	ldr	r3, [pc, #428]	@ (800d67c <tx_buffer_prep+0x1d0>)
 800d4ce:	781a      	ldrb	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	701a      	strb	r2, [r3, #0]
	    	build_chksum(STM8_A);
 800d4d4:	4b69      	ldr	r3, [pc, #420]	@ (800d67c <tx_buffer_prep+0x1d0>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	0018      	movs	r0, r3
 800d4da:	f7f9 fd1d 	bl	8006f18 <build_chksum>
	    	point_X++;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	607b      	str	r3, [r7, #4]
	    	point_Y++;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	603b      	str	r3, [r7, #0]
	   if( point_Y <= &Bloque_Header [dataSize]){
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	4b64      	ldr	r3, [pc, #400]	@ (800d680 <tx_buffer_prep+0x1d4>)
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d800      	bhi.n	800d4f4 <tx_buffer_prep+0x48>
		   goto load_header_tx;		//jrule load_header_tx
 800d4f2:	e7e7      	b.n	800d4c4 <tx_buffer_prep+0x18>
	   }

	    sizeTX = size_Header;					// Indica tamaño de header
 800d4f4:	4b63      	ldr	r3, [pc, #396]	@ (800d684 <tx_buffer_prep+0x1d8>)
 800d4f6:	2208      	movs	r2, #8
 800d4f8:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// indica que ya se envió header
 800d4fa:	4b5d      	ldr	r3, [pc, #372]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	709a      	strb	r2, [r3, #2]
		goto	endTx;  //jp		endTx
 800d500:	e0b1      	b.n	800d666 <tx_buffer_prep+0x1ba>
		goto	tx_buffer;		//	jp		tx_buffer
 800d502:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------------------------------------------------------------
tx_buffer:
		// (Paso:3) checksum
		if(!flagsTX [0]){					//btjf	flagsTX,#0,notest;		// Hay que tomar en cuenta que viene de memoria llena ?
 800d504:	4b5a      	ldr	r3, [pc, #360]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2201      	movs	r2, #1
 800d50a:	4053      	eors	r3, r2
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d107      	bne.n	800d522 <tx_buffer_prep+0x76>
			goto	notest;
		}
		if(!flagsTX [1]){					//btjf	flagsTX,#1,load_buffer_tx_prep
 800d512:	4b57      	ldr	r3, [pc, #348]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d514:	785b      	ldrb	r3, [r3, #1]
 800d516:	2201      	movs	r2, #1
 800d518:	4053      	eors	r3, r2
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d140      	bne.n	800d5a2 <tx_buffer_prep+0xf6>
			goto	load_buffer_tx_prep;
		}
notest:
 800d520:	e000      	b.n	800d524 <tx_buffer_prep+0x78>
			goto	notest;
 800d522:	46c0      	nop			@ (mov r8, r8)
		//notest: : poner aqui el codigo de "notest"
		if(pointTx < pointEndTx){
 800d524:	4b58      	ldr	r3, [pc, #352]	@ (800d688 <tx_buffer_prep+0x1dc>)
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	4b58      	ldr	r3, [pc, #352]	@ (800d68c <tx_buffer_prep+0x1e0>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d33a      	bcc.n	800d5a6 <tx_buffer_prep+0xfa>
//	;							;btjf	flagsTX,#0,noTestLoop
//	;							nop
//	;							jra		testLoop
//	;noTestLoop:

chksum_tx:
 800d530:	46c0      	nop			@ (mov r8, r8)
		if(flagsTX [3]){			//btjt flagsTX,#3,prep_endTx; // ya se envió chksum ?
 800d532:	4b4f      	ldr	r3, [pc, #316]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d534:	78db      	ldrb	r3, [r3, #3]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d122      	bne.n	800d580 <tx_buffer_prep+0xd4>
			goto	prep_endTx;
		}
		// LDW		Y,#chksum_HW;					// Apunta a bloque de chksum
		point_X = &ImberaProtocolBuffer[0];
 800d53a:	4b4f      	ldr	r3, [pc, #316]	@ (800d678 <tx_buffer_prep+0x1cc>)
 800d53c:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;						// limpia contrador de datos cargados
 800d53e:	4b54      	ldr	r3, [pc, #336]	@ (800d690 <tx_buffer_prep+0x1e4>)
 800d540:	2200      	movs	r2, #0
 800d542:	701a      	strb	r2, [r3, #0]

		ImberaProtocolBuffer [0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800d544:	4b53      	ldr	r3, [pc, #332]	@ (800d694 <tx_buffer_prep+0x1e8>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	0e1b      	lsrs	r3, r3, #24
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	4b4a      	ldr	r3, [pc, #296]	@ (800d678 <tx_buffer_prep+0x1cc>)
 800d54e:	701a      	strb	r2, [r3, #0]
		ImberaProtocolBuffer [1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800d550:	4b50      	ldr	r3, [pc, #320]	@ (800d694 <tx_buffer_prep+0x1e8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	0c1b      	lsrs	r3, r3, #16
 800d556:	b2da      	uxtb	r2, r3
 800d558:	4b47      	ldr	r3, [pc, #284]	@ (800d678 <tx_buffer_prep+0x1cc>)
 800d55a:	705a      	strb	r2, [r3, #1]
		ImberaProtocolBuffer [2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800d55c:	4b4d      	ldr	r3, [pc, #308]	@ (800d694 <tx_buffer_prep+0x1e8>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	0a1b      	lsrs	r3, r3, #8
 800d562:	b2da      	uxtb	r2, r3
 800d564:	4b44      	ldr	r3, [pc, #272]	@ (800d678 <tx_buffer_prep+0x1cc>)
 800d566:	709a      	strb	r2, [r3, #2]
		ImberaProtocolBuffer [3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800d568:	4b4a      	ldr	r3, [pc, #296]	@ (800d694 <tx_buffer_prep+0x1e8>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	4b42      	ldr	r3, [pc, #264]	@ (800d678 <tx_buffer_prep+0x1cc>)
 800d570:	70da      	strb	r2, [r3, #3]

		sizeTX = 4;					// Indica tamaño de chksum
 800d572:	4b44      	ldr	r3, [pc, #272]	@ (800d684 <tx_buffer_prep+0x1d8>)
 800d574:	2204      	movs	r2, #4
 800d576:	701a      	strb	r2, [r3, #0]
		flagsTX [3] = 1;			// indica que ya se envió header
 800d578:	4b3d      	ldr	r3, [pc, #244]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d57a:	2201      	movs	r2, #1
 800d57c:	70da      	strb	r2, [r3, #3]
		goto	endTx;		//jp		endTx
 800d57e:	e072      	b.n	800d666 <tx_buffer_prep+0x1ba>
			goto	prep_endTx;
 800d580:	46c0      	nop			@ (mov r8, r8)

prep_endTx:
		keyTx = 0;								// termina Tx
 800d582:	4b45      	ldr	r3, [pc, #276]	@ (800d698 <tx_buffer_prep+0x1ec>)
 800d584:	2200      	movs	r2, #0
 800d586:	701a      	strb	r2, [r3, #0]
		flagsTX [1] = 0;
 800d588:	4b39      	ldr	r3, [pc, #228]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	705a      	strb	r2, [r3, #1]
		flagsTX [0] = 0;
 800d58e:	4b38      	ldr	r3, [pc, #224]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d590:	2200      	movs	r2, #0
 800d592:	701a      	strb	r2, [r3, #0]
		flagsLogger [4] = 0;				// permite loggeo de eventos
 800d594:	4b41      	ldr	r3, [pc, #260]	@ (800d69c <tx_buffer_prep+0x1f0>)
 800d596:	2200      	movs	r2, #0
 800d598:	711a      	strb	r2, [r3, #4]
		flagsLogger [5] = 0;				// permite loggeo de datos
 800d59a:	4b40      	ldr	r3, [pc, #256]	@ (800d69c <tx_buffer_prep+0x1f0>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	715a      	strb	r2, [r3, #5]
		goto  endTx;  //			jra		endTx
 800d5a0:	e061      	b.n	800d666 <tx_buffer_prep+0x1ba>
			goto	load_buffer_tx_prep;
 800d5a2:	46c0      	nop			@ (mov r8, r8)
 800d5a4:	e000      	b.n	800d5a8 <tx_buffer_prep+0xfc>
			goto	load_buffer_tx_prep;					//jrult load_buffer_tx_prep
 800d5a6:	46c0      	nop			@ (mov r8, r8)

load_buffer_tx_prep:
		//;//---- Carga datos a array de transmisión
		point_Y = pointTx;					// Apunta a los datos a loggear
 800d5a8:	4b37      	ldr	r3, [pc, #220]	@ (800d688 <tx_buffer_prep+0x1dc>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	603b      	str	r3, [r7, #0]
		point_X = &ImberaProtocolBuffer[0];	// Apunta al buffer de datos en RAM
 800d5ae:	4b32      	ldr	r3, [pc, #200]	@ (800d678 <tx_buffer_prep+0x1cc>)
 800d5b0:	607b      	str	r3, [r7, #4]
		cntByteTx = 0;								// limpia contrador de datos cargados
 800d5b2:	4b37      	ldr	r3, [pc, #220]	@ (800d690 <tx_buffer_prep+0x1e4>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	701a      	strb	r2, [r3, #0]
load_buffer_tx:
		STM8_A = *point_Y;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	781a      	ldrb	r2, [r3, #0]
 800d5bc:	4b2f      	ldr	r3, [pc, #188]	@ (800d67c <tx_buffer_prep+0x1d0>)
 800d5be:	701a      	strb	r2, [r3, #0]



		if (flagsRxFirm [0]){
 800d5c0:	4b37      	ldr	r3, [pc, #220]	@ (800d6a0 <tx_buffer_prep+0x1f4>)
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d111      	bne.n	800d5ec <tx_buffer_prep+0x140>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
		}
		//; Sí se está transmitiendo logger considera su dirección
		if (flagsLogger [4]){
 800d5c8:	4b34      	ldr	r3, [pc, #208]	@ (800d69c <tx_buffer_prep+0x1f0>)
 800d5ca:	791b      	ldrb	r3, [r3, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d107      	bne.n	800d5e0 <tx_buffer_prep+0x134>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
		}
		if (!flagsLogger [5]){
 800d5d0:	4b32      	ldr	r3, [pc, #200]	@ (800d69c <tx_buffer_prep+0x1f0>)
 800d5d2:	795b      	ldrb	r3, [r3, #5]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	4053      	eors	r3, r2
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d108      	bne.n	800d5f0 <tx_buffer_prep+0x144>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
		}
loadLoggerDir:
 800d5de:	e000      	b.n	800d5e2 <tx_buffer_prep+0x136>
			goto  loadLoggerDir;		// btjt	flagsLogger,#4,loadLoggerDir
 800d5e0:	46c0      	nop			@ (mov r8, r8)
		STM8_A = *point_Y;		//	LDF		A,($010000,Y)
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781a      	ldrb	r2, [r3, #0]
 800d5e6:	4b25      	ldr	r3, [pc, #148]	@ (800d67c <tx_buffer_prep+0x1d0>)
 800d5e8:	701a      	strb	r2, [r3, #0]
 800d5ea:	e002      	b.n	800d5f2 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjt	flagsRxFirm,#0,noLoadLoggerDir
 800d5ec:	46c0      	nop			@ (mov r8, r8)
 800d5ee:	e000      	b.n	800d5f2 <tx_buffer_prep+0x146>
			goto  noLoadLoggerDir;		// btjf	flagsLogger,#5,noLoadLoggerDir
 800d5f0:	46c0      	nop			@ (mov r8, r8)
noLoadLoggerDir:

		*point_X = STM8_A;
 800d5f2:	4b22      	ldr	r3, [pc, #136]	@ (800d67c <tx_buffer_prep+0x1d0>)
 800d5f4:	781a      	ldrb	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	701a      	strb	r2, [r3, #0]
		*point_X++;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	607b      	str	r3, [r7, #4]
		*point_Y++;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	3301      	adds	r3, #1
 800d604:	603b      	str	r3, [r7, #0]
		cntByteTx++;
 800d606:	4b22      	ldr	r3, [pc, #136]	@ (800d690 <tx_buffer_prep+0x1e4>)
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	3301      	adds	r3, #1
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	4b20      	ldr	r3, [pc, #128]	@ (800d690 <tx_buffer_prep+0x1e4>)
 800d610:	701a      	strb	r2, [r3, #0]

		build_chksum(STM8_A);
 800d612:	4b1a      	ldr	r3, [pc, #104]	@ (800d67c <tx_buffer_prep+0x1d0>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	0018      	movs	r0, r3
 800d618:	f7f9 fc7e 	bl	8006f18 <build_chksum>

		if(!flagsTX [0]){
 800d61c:	4b14      	ldr	r3, [pc, #80]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2201      	movs	r2, #1
 800d622:	4053      	eors	r3, r2
 800d624:	b2db      	uxtb	r3, r3
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10b      	bne.n	800d642 <tx_buffer_prep+0x196>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
		}

		if(point_Y != loggerEnd){
 800d62a:	4b1e      	ldr	r3, [pc, #120]	@ (800d6a4 <tx_buffer_prep+0x1f8>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	429a      	cmp	r2, r3
 800d632:	d108      	bne.n	800d646 <tx_buffer_prep+0x19a>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger

		}
		point_Y = loggerStart; 			// ldw		Y,loggerStart;							// si se desborda vuelve al inicio de la flash reservada
 800d634:	4b1c      	ldr	r3, [pc, #112]	@ (800d6a8 <tx_buffer_prep+0x1fc>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	603b      	str	r3, [r7, #0]
		flagsTX [1] = 1;				//bset	flagsTX,#1;				// indica que ya dió la vuelta
 800d63a:	4b0d      	ldr	r3, [pc, #52]	@ (800d670 <tx_buffer_prep+0x1c4>)
 800d63c:	2201      	movs	r2, #1
 800d63e:	705a      	strb	r2, [r3, #1]
 800d640:	e002      	b.n	800d648 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800d642:	46c0      	nop			@ (mov r8, r8)
 800d644:	e000      	b.n	800d648 <tx_buffer_prep+0x19c>
			goto  no_clr_pointer;		// 	btjf	flagsTX,#0,no_clr_pointer; / no reinicies puntero si no hay que pasar por fin de logger
 800d646:	46c0      	nop			@ (mov r8, r8)
no_clr_pointer:

		//ld		A,cntByteTx;					// Ya se cargaron los 10 datos ?

		if(cntByteTx < blockSizeTX){
 800d648:	4b11      	ldr	r3, [pc, #68]	@ (800d690 <tx_buffer_prep+0x1e4>)
 800d64a:	781a      	ldrb	r2, [r3, #0]
 800d64c:	4b17      	ldr	r3, [pc, #92]	@ (800d6ac <tx_buffer_prep+0x200>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d200      	bcs.n	800d656 <tx_buffer_prep+0x1aa>
			goto	load_buffer_tx;			//jrult	load_buffer_tx;						// No, continua cargadno
 800d654:	e7b0      	b.n	800d5b8 <tx_buffer_prep+0x10c>
		}
// cierra el : while(cntByteTx < blockSizeTX)

		pointTx = point_Y;						// guarda el nuevo puntero de transmisión
 800d656:	4b0c      	ldr	r3, [pc, #48]	@ (800d688 <tx_buffer_prep+0x1dc>)
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	601a      	str	r2, [r3, #0]
		sizeTX = blockSizeTX;
 800d65c:	4b13      	ldr	r3, [pc, #76]	@ (800d6ac <tx_buffer_prep+0x200>)
 800d65e:	781a      	ldrb	r2, [r3, #0]
 800d660:	4b08      	ldr	r3, [pc, #32]	@ (800d684 <tx_buffer_prep+0x1d8>)
 800d662:	701a      	strb	r2, [r3, #0]
		goto	endTx;		 //jp		endTx
 800d664:	46c0      	nop			@ (mov r8, r8)



endTx:
}
 800d666:	46c0      	nop			@ (mov r8, r8)
 800d668:	46bd      	mov	sp, r7
 800d66a:	b002      	add	sp, #8
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	46c0      	nop			@ (mov r8, r8)
 800d670:	20000e1c 	.word	0x20000e1c
 800d674:	20000dd8 	.word	0x20000dd8
 800d678:	20000e38 	.word	0x20000e38
 800d67c:	200008d0 	.word	0x200008d0
 800d680:	20000ddf 	.word	0x20000ddf
 800d684:	20000e32 	.word	0x20000e32
 800d688:	20000e14 	.word	0x20000e14
 800d68c:	20000e10 	.word	0x20000e10
 800d690:	20000e18 	.word	0x20000e18
 800d694:	20000e34 	.word	0x20000e34
 800d698:	20000e19 	.word	0x20000e19
 800d69c:	20000e04 	.word	0x20000e04
 800d6a0:	20000edc 	.word	0x20000edc
 800d6a4:	20000e2c 	.word	0x20000e2c
 800d6a8:	20000e28 	.word	0x20000e28
 800d6ac:	20000e30 	.word	0x20000e30

0800d6b0 <tx_control>:
uint32_t    direccion_fw = 0x8018800;
uint32_t    direccion_borrado = 0x8018800;

uint32_t   chksum_to_compare = 0;

void tx_control(void){
 800d6b0:	b590      	push	{r4, r7, lr}
 800d6b2:	b093      	sub	sp, #76	@ 0x4c
 800d6b4:	af00      	add	r7, sp, #0

	//; Funciones de está seccción no se ejecutan hasta que la maquina de estados BLE esté en transmit/recieve
	//ld			A,BluetoothState
	//cp			A,#3
	//jrne		end_tx_control_b ; directamente sal de tx_control
	if(BluetoothState != 3)
 800d6b6:	4bda      	ldr	r3, [pc, #872]	@ (800da20 <tx_control+0x370>)
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d001      	beq.n	800d6c2 <tx_control+0x12>
 800d6be:	f003 f9b0 	bl	8010a22 <tx_control+0x3372>
		goto end_tx_control_b;

	//; / define el estado actual de la conexion correspondiente
	//tnz			delayComStat
	//jrne		end_tx_control
	if(delayComStat)
 800d6c2:	4bd8      	ldr	r3, [pc, #864]	@ (800da24 <tx_control+0x374>)
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <tx_control+0x1e>
 800d6ca:	f002 f893 	bl	800f7f4 <tx_control+0x2144>
		goto end_tx_control;
statDef:
 800d6ce:	46c0      	nop			@ (mov r8, r8)
	//tnz			statComFlag
	//jreq		statDef_clr
	if(statComFlag==0)
 800d6d0:	4bd5      	ldr	r3, [pc, #852]	@ (800da28 <tx_control+0x378>)
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d029      	beq.n	800d72c <tx_control+0x7c>
		goto statDef_clr;
	//;si el pin de estado está en 1 , pregunta por que comunicacion está activa
	if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,statDef_WIFI
 800d6d8:	4bd4      	ldr	r3, [pc, #848]	@ (800da2c <tx_control+0x37c>)
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d11d      	bne.n	800d71c <tx_control+0x6c>
		goto statDef_WIFI;
statDef_BLE:
 800d6e0:	46c0      	nop			@ (mov r8, r8)
	flagsTxControl[f_statBLE] = 1;	//bset		flagsTxControl,#f_statBLE
 800d6e2:	4bd2      	ldr	r3, [pc, #840]	@ (800da2c <tx_control+0x37c>)
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	705a      	strb	r2, [r3, #1]
	//ldw		X,#300;
	timeoutTWF = 300;	//ldw		timeoutTWF,X;					/ manten carga time out de Token (5 min)
 800d6e8:	4bd1      	ldr	r3, [pc, #836]	@ (800da30 <tx_control+0x380>)
 800d6ea:	2296      	movs	r2, #150	@ 0x96
 800d6ec:	0052      	lsls	r2, r2, #1
 800d6ee:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800d6f0:	233f      	movs	r3, #63	@ 0x3f
 800d6f2:	18fb      	adds	r3, r7, r3
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	701a      	strb	r2, [r3, #0]
 800d6f8:	e00a      	b.n	800d710 <tx_control+0x60>
		flagsWIFI[i] = 0;
 800d6fa:	203f      	movs	r0, #63	@ 0x3f
 800d6fc:	183b      	adds	r3, r7, r0
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	4acc      	ldr	r2, [pc, #816]	@ (800da34 <tx_control+0x384>)
 800d702:	2100      	movs	r1, #0
 800d704:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<8; i++)		//clr		flagsWIFI;/				limpia banderas para permitir logger mientras hay conexión BLE
 800d706:	183b      	adds	r3, r7, r0
 800d708:	781a      	ldrb	r2, [r3, #0]
 800d70a:	183b      	adds	r3, r7, r0
 800d70c:	3201      	adds	r2, #1
 800d70e:	701a      	strb	r2, [r3, #0]
 800d710:	233f      	movs	r3, #63	@ 0x3f
 800d712:	18fb      	adds	r3, r7, r3
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b07      	cmp	r3, #7
 800d718:	d9ef      	bls.n	800d6fa <tx_control+0x4a>
	goto end_statDef;//jra			end_statDef
 800d71a:	e044      	b.n	800d7a6 <tx_control+0xf6>
		goto statDef_WIFI;
 800d71c:	46c0      	nop			@ (mov r8, r8)
statDef_WIFI:
	flagsTxControl[f_statWIFI] = 1;	//bset		flagsTxControl,#f_statWIFI
 800d71e:	4bc3      	ldr	r3, [pc, #780]	@ (800da2c <tx_control+0x37c>)
 800d720:	2201      	movs	r2, #1
 800d722:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 255;			// mov			statComWIFIFlag,#255
 800d724:	4bc4      	ldr	r3, [pc, #784]	@ (800da38 <tx_control+0x388>)
 800d726:	22ff      	movs	r2, #255	@ 0xff
 800d728:	701a      	strb	r2, [r3, #0]
	goto end_statDef;				// jra			end_statDef
 800d72a:	e03c      	b.n	800d7a6 <tx_control+0xf6>
		goto statDef_clr;
 800d72c:	46c0      	nop			@ (mov r8, r8)
statDef_clr:
	//;pregunta por que comunicacion está inactiva
	//btjt		flagsTxControl,#f_select,statDef_clrWIFI
	if(flagsTxControl[f_select])
 800d72e:	4bbf      	ldr	r3, [pc, #764]	@ (800da2c <tx_control+0x37c>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d130      	bne.n	800d798 <tx_control+0xe8>
		goto statDef_clrWIFI;
statDef_clrBLE:
 800d736:	46c0      	nop			@ (mov r8, r8)

	//btjf	flagsTxControl,#f_statBLE,noCancelTx ;// sólo si viene de una desconexión cancela la transmisión que estuviera en progreso
	if(flagsTxControl[f_statBLE])
 800d738:	4bbc      	ldr	r3, [pc, #752]	@ (800da2c <tx_control+0x37c>)
 800d73a:	785b      	ldrb	r3, [r3, #1]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d123      	bne.n	800d788 <tx_control+0xd8>
		goto noCancelTx;

	keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 800d740:	4bbe      	ldr	r3, [pc, #760]	@ (800da3c <tx_control+0x38c>)
 800d742:	2200      	movs	r2, #0
 800d744:	701a      	strb	r2, [r3, #0]
	// clr		flagsTX
	//clr		flagsRxFirm
	for(uint8_t i=0 ; i<8 ; i++){
 800d746:	233e      	movs	r3, #62	@ 0x3e
 800d748:	18fb      	adds	r3, r7, r3
 800d74a:	2200      	movs	r2, #0
 800d74c:	701a      	strb	r2, [r3, #0]
 800d74e:	e00f      	b.n	800d770 <tx_control+0xc0>
		flagsTX[i] = 0;
 800d750:	203e      	movs	r0, #62	@ 0x3e
 800d752:	183b      	adds	r3, r7, r0
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	4aba      	ldr	r2, [pc, #744]	@ (800da40 <tx_control+0x390>)
 800d758:	2100      	movs	r1, #0
 800d75a:	54d1      	strb	r1, [r2, r3]
		flagsRxFirm[i] = 0;
 800d75c:	183b      	adds	r3, r7, r0
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	4ab8      	ldr	r2, [pc, #736]	@ (800da44 <tx_control+0x394>)
 800d762:	2100      	movs	r1, #0
 800d764:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0 ; i<8 ; i++){
 800d766:	183b      	adds	r3, r7, r0
 800d768:	781a      	ldrb	r2, [r3, #0]
 800d76a:	183b      	adds	r3, r7, r0
 800d76c:	3201      	adds	r2, #1
 800d76e:	701a      	strb	r2, [r3, #0]
 800d770:	233e      	movs	r3, #62	@ 0x3e
 800d772:	18fb      	adds	r3, r7, r3
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	2b07      	cmp	r3, #7
 800d778:	d9ea      	bls.n	800d750 <tx_control+0xa0>
	}

	flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 800d77a:	4bb3      	ldr	r3, [pc, #716]	@ (800da48 <tx_control+0x398>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	711a      	strb	r2, [r3, #4]
	flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 800d780:	4bb1      	ldr	r3, [pc, #708]	@ (800da48 <tx_control+0x398>)
 800d782:	2200      	movs	r2, #0
 800d784:	715a      	strb	r2, [r3, #5]
 800d786:	e000      	b.n	800d78a <tx_control+0xda>
		goto noCancelTx;
 800d788:	46c0      	nop			@ (mov r8, r8)
noCancelTx:

	flagsTxControl[f_statBLE] = 0;		//bres		flagsTxControl,#f_statBLE
 800d78a:	4ba8      	ldr	r3, [pc, #672]	@ (800da2c <tx_control+0x37c>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	705a      	strb	r2, [r3, #1]
	DevLock = 0;						//clr			DevLock;			sí se pierde conexión BLE el candado vuelve a estar activo
 800d790:	4bae      	ldr	r3, [pc, #696]	@ (800da4c <tx_control+0x39c>)
 800d792:	2200      	movs	r2, #0
 800d794:	701a      	strb	r2, [r3, #0]
	goto end_statDef;					//jra			end_statDef
 800d796:	e006      	b.n	800d7a6 <tx_control+0xf6>
		goto statDef_clrWIFI;
 800d798:	46c0      	nop			@ (mov r8, r8)
statDef_clrWIFI:
	flagsTxControl[f_statWIFI] = 0;		//bres		flagsTxControl,#f_statWIFI
 800d79a:	4ba4      	ldr	r3, [pc, #656]	@ (800da2c <tx_control+0x37c>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	709a      	strb	r2, [r3, #2]
	statComWIFIFlag = 0;				//clr			statComWIFIFlag
 800d7a0:	4ba5      	ldr	r3, [pc, #660]	@ (800da38 <tx_control+0x388>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	701a      	strb	r2, [r3, #0]
//;===========================================================
//;										TOKEN BLE
//;===========================================================
tokenBLE:
	//;Token solo se manda cuando está seleccionada la comunicación BLE
	if(!flagsTxControl[f_select])//btjf	flagsTxControl,#f_select,tokenBLE_01
 800d7a6:	4ba1      	ldr	r3, [pc, #644]	@ (800da2c <tx_control+0x37c>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	4053      	eors	r3, r2
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d058      	beq.n	800d866 <tx_control+0x1b6>
		goto tokenBLE_01;
 800d7b4:	46c0      	nop			@ (mov r8, r8)
tokenBLE_01:

//	btjt	flagsRxFirm,#0,tokenBLE_02; Empezó recepción de Firmware ?
//	btjt	flagsLogger,#5,tokenBLE_02; Empezó Tx logger datos
//	btjt	flagsLogger,#4,tokenBLE_02; Empezó Tx logger eventos
	if(flagsRxFirm[0] || flagsLogger[4] || flagsLogger[5])
 800d7b6:	4ba3      	ldr	r3, [pc, #652]	@ (800da44 <tx_control+0x394>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d117      	bne.n	800d7ee <tx_control+0x13e>
 800d7be:	4ba2      	ldr	r3, [pc, #648]	@ (800da48 <tx_control+0x398>)
 800d7c0:	791b      	ldrb	r3, [r3, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d113      	bne.n	800d7ee <tx_control+0x13e>
 800d7c6:	4ba0      	ldr	r3, [pc, #640]	@ (800da48 <tx_control+0x398>)
 800d7c8:	795b      	ldrb	r3, [r3, #5]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10f      	bne.n	800d7ee <tx_control+0x13e>
		goto tokenBLE_02;

	//tnz		codeTX
	if(codeTX == 0)//jreq	tx_tokenBLE;			/se recibió algun comando valido? No, checa sí hay que mandar token
 800d7ce:	4ba0      	ldr	r3, [pc, #640]	@ (800da50 <tx_control+0x3a0>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d019      	beq.n	800d80a <tx_control+0x15a>
		goto tx_tokenBLE;
	//;Interpreta comando

	//ld		A,codeTX
	//cp		A,#$80;						/ se recibió respuesta WIFI ?
	if(codeTX == 0x80)		//jreq	finTokenBLE
 800d7d6:	4b9e      	ldr	r3, [pc, #632]	@ (800da50 <tx_control+0x3a0>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	2b80      	cmp	r3, #128	@ 0x80
 800d7dc:	d045      	beq.n	800d86a <tx_control+0x1ba>
		goto finTokenBLE;
	//cp		A,#$81;						/ se recibió respuesta BLE ?
	if(codeTX != 0x81)		//jrne	tokenBLE_03;			/ no, es otro comando, deja correr la ejecución
 800d7de:	4b9c      	ldr	r3, [pc, #624]	@ (800da50 <tx_control+0x3a0>)
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	2b81      	cmp	r3, #129	@ 0x81
 800d7e4:	d108      	bne.n	800d7f8 <tx_control+0x148>
		goto tokenBLE_03;
	codeTX = 0;				// clr		codeTX;						/ sí, limpia código de Tx
 800d7e6:	4b9a      	ldr	r3, [pc, #616]	@ (800da50 <tx_control+0x3a0>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	701a      	strb	r2, [r3, #0]
 800d7ec:	e000      	b.n	800d7f0 <tx_control+0x140>
		goto tokenBLE_02;
 800d7ee:	46c0      	nop			@ (mov r8, r8)
tokenBLE_02:
	flagsTX2[2] = 1;		//bset	flagsTX2,#2;			/ sí se recibió repuesta, levanta bandera de token recibido
 800d7f0:	4b98      	ldr	r3, [pc, #608]	@ (800da54 <tx_control+0x3a4>)
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	709a      	strb	r2, [r3, #2]
 800d7f6:	e000      	b.n	800d7fa <tx_control+0x14a>
		goto tokenBLE_03;
 800d7f8:	46c0      	nop			@ (mov r8, r8)

tokenBLE_03:
	//; la recepccion de cualquier comando tomala como una respuesta de  modulo de counicación
	timeTxTBLE = 20;			//mov		timeTxTBLE,#20;		/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800d7fa:	4b97      	ldr	r3, [pc, #604]	@ (800da58 <tx_control+0x3a8>)
 800d7fc:	2214      	movs	r2, #20
 800d7fe:	701a      	strb	r2, [r3, #0]
	//ldw		X,#300;
	timeoutTBLE = 300;			//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 800d800:	4b96      	ldr	r3, [pc, #600]	@ (800da5c <tx_control+0x3ac>)
 800d802:	2296      	movs	r2, #150	@ 0x96
 800d804:	0052      	lsls	r2, r2, #1
 800d806:	801a      	strh	r2, [r3, #0]
	goto finTokenBLE;			//jra		finTokenBLE
 800d808:	e034      	b.n	800d874 <tx_control+0x1c4>
		goto tx_tokenBLE;
 800d80a:	46c0      	nop			@ (mov r8, r8)

tx_tokenBLE:
	//tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx)//jrne	finTokenBLE;						/ espera a que terminé
 800d80c:	4b8b      	ldr	r3, [pc, #556]	@ (800da3c <tx_control+0x38c>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d12c      	bne.n	800d86e <tx_control+0x1be>
		goto finTokenBLE;
	//tnz		timeTxTBLE;						/ ya se cumplió tiempo para enviar Token Wifi ?
	if(timeTxTBLE)//jrne	finTokenBLE;					/ no, continua
 800d814:	4b90      	ldr	r3, [pc, #576]	@ (800da58 <tx_control+0x3a8>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d12a      	bne.n	800d872 <tx_control+0x1c2>
		goto finTokenBLE;

	timeTxTBLE = 20;//mov		timeTxTBLE,#20;				/ vuelve a cargar tiempo para enviar Token (cada 30s)
 800d81c:	4b8e      	ldr	r3, [pc, #568]	@ (800da58 <tx_control+0x3a8>)
 800d81e:	2214      	movs	r2, #20
 800d820:	701a      	strb	r2, [r3, #0]

	//ldw		X,#$40FA
	//ldw		bufferTxControl,X
	bufferTxControl[0] = 0x40;
 800d822:	4b8f      	ldr	r3, [pc, #572]	@ (800da60 <tx_control+0x3b0>)
 800d824:	2240      	movs	r2, #64	@ 0x40
 800d826:	701a      	strb	r2, [r3, #0]
	bufferTxControl[1] = 0xFA;
 800d828:	4b8d      	ldr	r3, [pc, #564]	@ (800da60 <tx_control+0x3b0>)
 800d82a:	22fa      	movs	r2, #250	@ 0xfa
 800d82c:	705a      	strb	r2, [r3, #1]
	flagsTX[2] = 0;				//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d82e:	4b84      	ldr	r3, [pc, #528]	@ (800da40 <tx_control+0x390>)
 800d830:	2200      	movs	r2, #0
 800d832:	709a      	strb	r2, [r3, #2]
	//ldw		pointTx,X
	//ldw		pointInitTx,X
	//incw	X
	//ldw		pointEndTx,X
	//mov		blockSizeTX,#2
	pointTx = &bufferTxControl[0];
 800d834:	4b8b      	ldr	r3, [pc, #556]	@ (800da64 <tx_control+0x3b4>)
 800d836:	4a8a      	ldr	r2, [pc, #552]	@ (800da60 <tx_control+0x3b0>)
 800d838:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800d83a:	4b8b      	ldr	r3, [pc, #556]	@ (800da68 <tx_control+0x3b8>)
 800d83c:	4a88      	ldr	r2, [pc, #544]	@ (800da60 <tx_control+0x3b0>)
 800d83e:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[2];
 800d840:	4b8a      	ldr	r3, [pc, #552]	@ (800da6c <tx_control+0x3bc>)
 800d842:	4a8b      	ldr	r2, [pc, #556]	@ (800da70 <tx_control+0x3c0>)
 800d844:	601a      	str	r2, [r3, #0]
	blockSizeTX = 2;
 800d846:	4b8b      	ldr	r3, [pc, #556]	@ (800da74 <tx_control+0x3c4>)
 800d848:	2202      	movs	r2, #2
 800d84a:	701a      	strb	r2, [r3, #0]

	//clrw	X
	//ldw		chksum_HW,X
	//ldw		chksum_LW,X;					/ limpia registros de checksum
	chksum_32_HW_LW = 0;
 800d84c:	4b8a      	ldr	r3, [pc, #552]	@ (800da78 <tx_control+0x3c8>)
 800d84e:	2200      	movs	r2, #0
 800d850:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;					// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d852:	4b7b      	ldr	r3, [pc, #492]	@ (800da40 <tx_control+0x390>)
 800d854:	2201      	movs	r2, #1
 800d856:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;					//mov		keyTx,#$55;						/ listo para mandar transmisión
 800d858:	4b78      	ldr	r3, [pc, #480]	@ (800da3c <tx_control+0x38c>)
 800d85a:	2255      	movs	r2, #85	@ 0x55
 800d85c:	701a      	strb	r2, [r3, #0]
	codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800d85e:	4b7c      	ldr	r3, [pc, #496]	@ (800da50 <tx_control+0x3a0>)
 800d860:	2200      	movs	r2, #0
 800d862:	701a      	strb	r2, [r3, #0]

	goto finTokenBLE;//jra		finTokenBLE
 800d864:	e006      	b.n	800d874 <tx_control+0x1c4>
	goto finTokenBLE;//jra		finTokenBLE
 800d866:	46c0      	nop			@ (mov r8, r8)
 800d868:	e004      	b.n	800d874 <tx_control+0x1c4>
		goto finTokenBLE;
 800d86a:	46c0      	nop			@ (mov r8, r8)
 800d86c:	e002      	b.n	800d874 <tx_control+0x1c4>
		goto finTokenBLE;
 800d86e:	46c0      	nop			@ (mov r8, r8)
 800d870:	e000      	b.n	800d874 <tx_control+0x1c4>
		goto finTokenBLE;
 800d872:	46c0      	nop			@ (mov r8, r8)
//;										TOKEN WiFi
//;===========================================================
tokenWiFi:

	//;Token solo se manda cuando está seleccionada la comunicación WIFI
	if(flagsTxControl[f_select])	//btjt	flagsTxControl,#f_select,tokenWiFi_01
 800d874:	4b6d      	ldr	r3, [pc, #436]	@ (800da2c <tx_control+0x37c>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d100      	bne.n	800d87e <tx_control+0x1ce>
 800d87c:	e14d      	b.n	800db1a <tx_control+0x46a>
		goto tokenWiFi_01;
 800d87e:	46c0      	nop			@ (mov r8, r8)
	goto finTokenWiFi;				//jra		finTokenWiFi
tokenWiFi_01:

	//btjt	flagsWIFI,#f_timeLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	//btjt	flagsWIFI,#f_eventLoggerCmd,tokenWiFi_02; si se está transmitiendo logger Wifi no mandes nombre de difusion
	if(flagsWIFI[f_timeLoggerCmd] || flagsWIFI[f_eventLoggerCmd])
 800d880:	4b6c      	ldr	r3, [pc, #432]	@ (800da34 <tx_control+0x384>)
 800d882:	78db      	ldrb	r3, [r3, #3]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d130      	bne.n	800d8ea <tx_control+0x23a>
 800d888:	4b6a      	ldr	r3, [pc, #424]	@ (800da34 <tx_control+0x384>)
 800d88a:	791b      	ldrb	r3, [r3, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d12c      	bne.n	800d8ea <tx_control+0x23a>
		goto tokenWiFi_02;

	//ldw		X,cntSetName
	//tnzw	X
	if(cntSetName)//jrne	tokenWiFi_02
 800d890:	4b7a      	ldr	r3, [pc, #488]	@ (800da7c <tx_control+0x3cc>)
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d12a      	bne.n	800d8ee <tx_control+0x23e>
		goto tokenWiFi_02;

	//ldw			X,#600
	cntSetName = 600;	//ldw			cntSetName,X
 800d898:	4b78      	ldr	r3, [pc, #480]	@ (800da7c <tx_control+0x3cc>)
 800d89a:	2296      	movs	r2, #150	@ 0x96
 800d89c:	0092      	lsls	r2, r2, #2
 800d89e:	801a      	strh	r2, [r3, #0]

	//;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
	//;copia los datos al buffer de tx
	//ldw		X,#difName
	//ldw		Y,#bufferTxControl
	wreg = 50;//mov		wreg,#50
 800d8a0:	4b77      	ldr	r3, [pc, #476]	@ (800da80 <tx_control+0x3d0>)
 800d8a2:	2232      	movs	r2, #50	@ 0x32
 800d8a4:	701a      	strb	r2, [r3, #0]
	copyVector(&difName[0],&bufferTxControl[0]);//call	copyVector
 800d8a6:	4a6e      	ldr	r2, [pc, #440]	@ (800da60 <tx_control+0x3b0>)
 800d8a8:	4b76      	ldr	r3, [pc, #472]	@ (800da84 <tx_control+0x3d4>)
 800d8aa:	0011      	movs	r1, r2
 800d8ac:	0018      	movs	r0, r3
 800d8ae:	f7f9 fb0f 	bl	8006ed0 <copyVector>
//	ldw		pointTx,X
//	ldw		pointInitTx,X
//	ldw		X,#(bufferTxControl+50)
//	ldw		pointEndTx,X
//	mov		blockSizeTX,#50
	pointTx = &bufferTxControl[0];
 800d8b2:	4b6c      	ldr	r3, [pc, #432]	@ (800da64 <tx_control+0x3b4>)
 800d8b4:	4a6a      	ldr	r2, [pc, #424]	@ (800da60 <tx_control+0x3b0>)
 800d8b6:	601a      	str	r2, [r3, #0]
	pointInitTx = &bufferTxControl[0];
 800d8b8:	4b6b      	ldr	r3, [pc, #428]	@ (800da68 <tx_control+0x3b8>)
 800d8ba:	4a69      	ldr	r2, [pc, #420]	@ (800da60 <tx_control+0x3b0>)
 800d8bc:	601a      	str	r2, [r3, #0]
	pointEndTx = &bufferTxControl[50];
 800d8be:	4b6b      	ldr	r3, [pc, #428]	@ (800da6c <tx_control+0x3bc>)
 800d8c0:	4a71      	ldr	r2, [pc, #452]	@ (800da88 <tx_control+0x3d8>)
 800d8c2:	601a      	str	r2, [r3, #0]
	blockSizeTX = 50;
 800d8c4:	4b6b      	ldr	r3, [pc, #428]	@ (800da74 <tx_control+0x3c4>)
 800d8c6:	2232      	movs	r2, #50	@ 0x32
 800d8c8:	701a      	strb	r2, [r3, #0]

	flagsTX[2] = 0;		//bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800d8ca:	4b5d      	ldr	r3, [pc, #372]	@ (800da40 <tx_control+0x390>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	709a      	strb	r2, [r3, #2]

	//clrw	X
	//ldw		chksum_HW,X
	chksum_32_HW_LW = 0;		//ldw		chksum_LW,X;					/ limpia registros de checksum
 800d8d0:	4b69      	ldr	r3, [pc, #420]	@ (800da78 <tx_control+0x3c8>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
	flagsTX[3] = 1;				//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800d8d6:	4b5a      	ldr	r3, [pc, #360]	@ (800da40 <tx_control+0x390>)
 800d8d8:	2201      	movs	r2, #1
 800d8da:	70da      	strb	r2, [r3, #3]
	keyTx = 0x55;				//mov		keyTx,#$55;						/ listo para mandar transmisión
 800d8dc:	4b57      	ldr	r3, [pc, #348]	@ (800da3c <tx_control+0x38c>)
 800d8de:	2255      	movs	r2, #85	@ 0x55
 800d8e0:	701a      	strb	r2, [r3, #0]
	codeTX= 0;					//clr		codeTX;								/ limpia código de Tx
 800d8e2:	4b5b      	ldr	r3, [pc, #364]	@ (800da50 <tx_control+0x3a0>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	701a      	strb	r2, [r3, #0]

	goto finTokenWiFi;//jra		finTokenWiFi
 800d8e8:	e11c      	b.n	800db24 <tx_control+0x474>
		goto tokenWiFi_02;
 800d8ea:	46c0      	nop			@ (mov r8, r8)
 800d8ec:	e000      	b.n	800d8f0 <tx_control+0x240>
		goto tokenWiFi_02;
 800d8ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(flagsWIFI[f_eventLoggerCmd]){//btjt	flagsWIFI,#f_eventLoggerCmd,rx_tokenWiFi_02 / si se está transmitiendo logger Wifi no mandes token y consideralo como OK
			goto rx_tokenWiFi_02;
		}*/
		// CGM 06/01/2024
		if(flagsRxFirm[0] | flagsLogger[5] | flagsLogger[4] | flagsWIFI[f_timeLoggerCmd] | flagsWIFI[f_eventLoggerCmd]){//btjt	flagsRxFirm,#0,rx_tokenWiFi_02 / Empezó recepción de Firmware ?
 800d8f0:	4b54      	ldr	r3, [pc, #336]	@ (800da44 <tx_control+0x394>)
 800d8f2:	781a      	ldrb	r2, [r3, #0]
 800d8f4:	4b54      	ldr	r3, [pc, #336]	@ (800da48 <tx_control+0x398>)
 800d8f6:	795b      	ldrb	r3, [r3, #5]
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	4b52      	ldr	r3, [pc, #328]	@ (800da48 <tx_control+0x398>)
 800d8fe:	791b      	ldrb	r3, [r3, #4]
 800d900:	4313      	orrs	r3, r2
 800d902:	b2da      	uxtb	r2, r3
 800d904:	4b4b      	ldr	r3, [pc, #300]	@ (800da34 <tx_control+0x384>)
 800d906:	78db      	ldrb	r3, [r3, #3]
 800d908:	4313      	orrs	r3, r2
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	4b49      	ldr	r3, [pc, #292]	@ (800da34 <tx_control+0x384>)
 800d90e:	791b      	ldrb	r3, [r3, #4]
 800d910:	4313      	orrs	r3, r2
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d000      	beq.n	800d91a <tx_control+0x26a>
 800d918:	e0f7      	b.n	800db0a <tx_control+0x45a>
			goto rx_tokenWiFi_02;
		}

		if (codeTX != 0){
 800d91a:	4b4d      	ldr	r3, [pc, #308]	@ (800da50 <tx_control+0x3a0>)
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d000      	beq.n	800d924 <tx_control+0x274>
 800d922:	e0e8      	b.n	800daf6 <tx_control+0x446>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
		}

tx_tokenWiFi:
 800d924:	46c0      	nop			@ (mov r8, r8)
		if(keyTx != 0){//tnz keyTx;	/ se está atendiendo alguna transmisión?
 800d926:	4b45      	ldr	r3, [pc, #276]	@ (800da3c <tx_control+0x38c>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d000      	beq.n	800d930 <tx_control+0x280>
 800d92e:	e0f6      	b.n	800db1e <tx_control+0x46e>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
		}
		if(timeTxTWF != 0){//tnz timeTxTWF; / ya se cumplió tiempo para enviar Token Wifi ?
 800d930:	4b56      	ldr	r3, [pc, #344]	@ (800da8c <tx_control+0x3dc>)
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d000      	beq.n	800d93a <tx_control+0x28a>
 800d938:	e0c2      	b.n	800dac0 <tx_control+0x410>
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
		}

		timeTxTWF = 30; //mov timeTxTWF,#30;  / vuelve a cargar tiempo para enviar Token (cada 30s)
 800d93a:	4b54      	ldr	r3, [pc, #336]	@ (800da8c <tx_control+0x3dc>)
 800d93c:	221e      	movs	r2, #30
 800d93e:	701a      	strb	r2, [r3, #0]

		bufferTxControl[0] = 0x40;		//ldw X,#$40F8
 800d940:	4b47      	ldr	r3, [pc, #284]	@ (800da60 <tx_control+0x3b0>)
 800d942:	2240      	movs	r2, #64	@ 0x40
 800d944:	701a      	strb	r2, [r3, #0]
		bufferTxControl[1] = 0xF8;		//ldw bufferTxControl,X
 800d946:	4b46      	ldr	r3, [pc, #280]	@ (800da60 <tx_control+0x3b0>)
 800d948:	22f8      	movs	r2, #248	@ 0xf8
 800d94a:	705a      	strb	r2, [r3, #1]
//		bufferTxControl[6] = eeLong1;	//ldw X,eeLong1
//		bufferTxControl[7] = eeLong2;	//ldw bufferTxControl+6,X
//		bufferTxControl[8] = eeLong3;	//ldw X,eeLong3
//		bufferTxControl[9] = eeLong4;	//ldw bufferTxControl+8,X

		bufferTxControl[2] = findLastValue((uint32_t) &eeLat1);	//ldw X,eeLat1
 800d94c:	4b50      	ldr	r3, [pc, #320]	@ (800da90 <tx_control+0x3e0>)
 800d94e:	0018      	movs	r0, r3
 800d950:	f7f5 f964 	bl	8002c1c <findLastValue>
 800d954:	0003      	movs	r3, r0
 800d956:	b2da      	uxtb	r2, r3
 800d958:	4b41      	ldr	r3, [pc, #260]	@ (800da60 <tx_control+0x3b0>)
 800d95a:	709a      	strb	r2, [r3, #2]
		bufferTxControl[3] = findLastValue((uint32_t) &eeLat2);	//ldw bufferTxControl+2,X
 800d95c:	4b4d      	ldr	r3, [pc, #308]	@ (800da94 <tx_control+0x3e4>)
 800d95e:	0018      	movs	r0, r3
 800d960:	f7f5 f95c 	bl	8002c1c <findLastValue>
 800d964:	0003      	movs	r3, r0
 800d966:	b2da      	uxtb	r2, r3
 800d968:	4b3d      	ldr	r3, [pc, #244]	@ (800da60 <tx_control+0x3b0>)
 800d96a:	70da      	strb	r2, [r3, #3]
		bufferTxControl[4] = findLastValue((uint32_t) &eeLat3);	//ldw X,eeLat3
 800d96c:	4b4a      	ldr	r3, [pc, #296]	@ (800da98 <tx_control+0x3e8>)
 800d96e:	0018      	movs	r0, r3
 800d970:	f7f5 f954 	bl	8002c1c <findLastValue>
 800d974:	0003      	movs	r3, r0
 800d976:	b2da      	uxtb	r2, r3
 800d978:	4b39      	ldr	r3, [pc, #228]	@ (800da60 <tx_control+0x3b0>)
 800d97a:	711a      	strb	r2, [r3, #4]
		bufferTxControl[5] = findLastValue((uint32_t) &eeLat4);	//ldw bufferTxControl+4,X
 800d97c:	4b47      	ldr	r3, [pc, #284]	@ (800da9c <tx_control+0x3ec>)
 800d97e:	0018      	movs	r0, r3
 800d980:	f7f5 f94c 	bl	8002c1c <findLastValue>
 800d984:	0003      	movs	r3, r0
 800d986:	b2da      	uxtb	r2, r3
 800d988:	4b35      	ldr	r3, [pc, #212]	@ (800da60 <tx_control+0x3b0>)
 800d98a:	715a      	strb	r2, [r3, #5]
		bufferTxControl[6] = findLastValue((uint32_t) &eeLong1);	//ldw X,eeLong1
 800d98c:	4b44      	ldr	r3, [pc, #272]	@ (800daa0 <tx_control+0x3f0>)
 800d98e:	0018      	movs	r0, r3
 800d990:	f7f5 f944 	bl	8002c1c <findLastValue>
 800d994:	0003      	movs	r3, r0
 800d996:	b2da      	uxtb	r2, r3
 800d998:	4b31      	ldr	r3, [pc, #196]	@ (800da60 <tx_control+0x3b0>)
 800d99a:	719a      	strb	r2, [r3, #6]
		bufferTxControl[7] = findLastValue((uint32_t) &eeLong2);	//ldw bufferTxControl+6,X
 800d99c:	4b41      	ldr	r3, [pc, #260]	@ (800daa4 <tx_control+0x3f4>)
 800d99e:	0018      	movs	r0, r3
 800d9a0:	f7f5 f93c 	bl	8002c1c <findLastValue>
 800d9a4:	0003      	movs	r3, r0
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	4b2d      	ldr	r3, [pc, #180]	@ (800da60 <tx_control+0x3b0>)
 800d9aa:	71da      	strb	r2, [r3, #7]
		bufferTxControl[8] = findLastValue((uint32_t) &eeLong3);	//ldw X,eeLong3
 800d9ac:	4b3e      	ldr	r3, [pc, #248]	@ (800daa8 <tx_control+0x3f8>)
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f7f5 f934 	bl	8002c1c <findLastValue>
 800d9b4:	0003      	movs	r3, r0
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	4b29      	ldr	r3, [pc, #164]	@ (800da60 <tx_control+0x3b0>)
 800d9ba:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = findLastValue((uint32_t) &eeLong4);	//ldw bufferTxControl+8,X
 800d9bc:	4b3b      	ldr	r3, [pc, #236]	@ (800daac <tx_control+0x3fc>)
 800d9be:	0018      	movs	r0, r3
 800d9c0:	f7f5 f92c 	bl	8002c1c <findLastValue>
 800d9c4:	0003      	movs	r3, r0
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	4b25      	ldr	r3, [pc, #148]	@ (800da60 <tx_control+0x3b0>)
 800d9ca:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = versionFirm1;
 800d9cc:	4b38      	ldr	r3, [pc, #224]	@ (800dab0 <tx_control+0x400>)
 800d9ce:	781a      	ldrb	r2, [r3, #0]
 800d9d0:	4b23      	ldr	r3, [pc, #140]	@ (800da60 <tx_control+0x3b0>)
 800d9d2:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = versionFirm2;
 800d9d4:	4b37      	ldr	r3, [pc, #220]	@ (800dab4 <tx_control+0x404>)
 800d9d6:	781a      	ldrb	r2, [r3, #0]
 800d9d8:	4b21      	ldr	r3, [pc, #132]	@ (800da60 <tx_control+0x3b0>)
 800d9da:	72da      	strb	r2, [r3, #11]
		bufferTxControl[12] = fm_hardware;
 800d9dc:	4b36      	ldr	r3, [pc, #216]	@ (800dab8 <tx_control+0x408>)
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	4b1f      	ldr	r3, [pc, #124]	@ (800da60 <tx_control+0x3b0>)
 800d9e2:	731a      	strb	r2, [r3, #12]

		flagsTX[2] = 0; //bres flagsTX,#2;	/ Indica que no hay que transmitir Header
 800d9e4:	4b16      	ldr	r3, [pc, #88]	@ (800da40 <tx_control+0x390>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	709a      	strb	r2, [r3, #2]

		point_X = &bufferTxControl[0];  // ldw	X,#bufferTxControl
 800d9ea:	4b1d      	ldr	r3, [pc, #116]	@ (800da60 <tx_control+0x3b0>)
 800d9ec:	647b      	str	r3, [r7, #68]	@ 0x44
		pointTx = point_X;				// ldw		pointTx,X
 800d9ee:	4b1d      	ldr	r3, [pc, #116]	@ (800da64 <tx_control+0x3b4>)
 800d9f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9f2:	601a      	str	r2, [r3, #0]
		pointInitTx = point_X;			// ldw		pointInitTx,X
 800d9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800da68 <tx_control+0x3b8>)
 800d9f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9f8:	601a      	str	r2, [r3, #0]

		//pointEndTx = &bufferTxControl[10];		// ldw		X,#(bufferTxControl+10)
    										// ldw		pointEndTx,X
		pointEndTx = &bufferTxControl[13];
 800d9fa:	4b1c      	ldr	r3, [pc, #112]	@ (800da6c <tx_control+0x3bc>)
 800d9fc:	4a2f      	ldr	r2, [pc, #188]	@ (800dabc <tx_control+0x40c>)
 800d9fe:	601a      	str	r2, [r3, #0]
		//blockSizeTX = 10;						// mov		blockSizeTX,#10
		blockSizeTX = 13;
 800da00:	4b1c      	ldr	r3, [pc, #112]	@ (800da74 <tx_control+0x3c4>)
 800da02:	220d      	movs	r2, #13
 800da04:	701a      	strb	r2, [r3, #0]
		//clrw	X
		//ldw	chksum_HW,X
		chksum_32_HW_LW = 0;		// ldw	chksum_LW,X;					/ limpia registros de checksum
 800da06:	4b1c      	ldr	r3, [pc, #112]	@ (800da78 <tx_control+0x3c8>)
 800da08:	2200      	movs	r2, #0
 800da0a:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;			//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800da0c:	4b0c      	ldr	r3, [pc, #48]	@ (800da40 <tx_control+0x390>)
 800da0e:	2201      	movs	r2, #1
 800da10:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55;				//mov	keyTx,#$55;						/ listo para mandar transmisión
 800da12:	4b0a      	ldr	r3, [pc, #40]	@ (800da3c <tx_control+0x38c>)
 800da14:	2255      	movs	r2, #85	@ 0x55
 800da16:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					//clr		codeTX;								/ limpia código de Tx
 800da18:	4b0d      	ldr	r3, [pc, #52]	@ (800da50 <tx_control+0x3a0>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	701a      	strb	r2, [r3, #0]

		goto finTokenWiFi;			//		jra		finTokenWiFi
 800da1e:	e081      	b.n	800db24 <tx_control+0x474>
 800da20:	2000004c 	.word	0x2000004c
 800da24:	200010f4 	.word	0x200010f4
 800da28:	200010f6 	.word	0x200010f6
 800da2c:	200010ec 	.word	0x200010ec
 800da30:	20000f4c 	.word	0x20000f4c
 800da34:	20000f50 	.word	0x20000f50
 800da38:	200010f7 	.word	0x200010f7
 800da3c:	20000e19 	.word	0x20000e19
 800da40:	20000e1c 	.word	0x20000e1c
 800da44:	20000edc 	.word	0x20000edc
 800da48:	20000e04 	.word	0x20000e04
 800da4c:	200010f5 	.word	0x200010f5
 800da50:	20000e24 	.word	0x20000e24
 800da54:	20000f44 	.word	0x20000f44
 800da58:	200010fa 	.word	0x200010fa
 800da5c:	200010fc 	.word	0x200010fc
 800da60:	20000fa8 	.word	0x20000fa8
 800da64:	20000e14 	.word	0x20000e14
 800da68:	20000e0c 	.word	0x20000e0c
 800da6c:	20000e10 	.word	0x20000e10
 800da70:	20000faa 	.word	0x20000faa
 800da74:	20000e30 	.word	0x20000e30
 800da78:	20000e34 	.word	0x20000e34
 800da7c:	200010f8 	.word	0x200010f8
 800da80:	20000b55 	.word	0x20000b55
 800da84:	2000021c 	.word	0x2000021c
 800da88:	20000fda 	.word	0x20000fda
 800da8c:	20000f3a 	.word	0x20000f3a
 800da90:	0803f808 	.word	0x0803f808
 800da94:	0803f809 	.word	0x0803f809
 800da98:	0803f80a 	.word	0x0803f80a
 800da9c:	0803f80b 	.word	0x0803f80b
 800daa0:	0803f80c 	.word	0x0803f80c
 800daa4:	0803f80d 	.word	0x0803f80d
 800daa8:	0803f80e 	.word	0x0803f80e
 800daac:	0803f80f 	.word	0x0803f80f
 800dab0:	0801e7f0 	.word	0x0801e7f0
 800dab4:	0801e7f1 	.word	0x0801e7f1
 800dab8:	0801e7f2 	.word	0x0801e7f2
 800dabc:	20000fb5 	.word	0x20000fb5
			goto rx_tokenWiFi; //jrne rx_tokenWiFi; / no, continua
 800dac0:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi:
		//ld A,codeTX
		if(codeTX == 0x80){ // cp	A,#$80;	/ se recibió respuesta del modulo WiFi ?
 800dac2:	4be4      	ldr	r3, [pc, #912]	@ (800de54 <tx_control+0x7a4>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b80      	cmp	r3, #128	@ 0x80
 800dac8:	d00e      	beq.n	800dae8 <tx_control+0x438>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
		}
		//ldw	X,timeoutTWF;	/ No,checa time out
		if(timeoutTWF != 1){//cpw X,#1  // ya se ciumplió time out ?
 800daca:	4be3      	ldr	r3, [pc, #908]	@ (800de58 <tx_control+0x7a8>)
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d127      	bne.n	800db22 <tx_control+0x472>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
		}
		flagsTX2[1] = 0;//bres flagsTX2,#1; / sí, cancela bandera de token recibido
 800dad2:	4be2      	ldr	r3, [pc, #904]	@ (800de5c <tx_control+0x7ac>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	705a      	strb	r2, [r3, #1]
		timeRstBLE = 5; //mov timeRstBLE,#5; / carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 800dad8:	4be1      	ldr	r3, [pc, #900]	@ (800de60 <tx_control+0x7b0>)
 800dada:	2205      	movs	r2, #5
 800dadc:	701a      	strb	r2, [r3, #0]
		//ldw	X,#300;
		timeoutTWF = 300;//ldw timeoutTWF,X;/ carga time out de Token (5 min)
 800dade:	4bde      	ldr	r3, [pc, #888]	@ (800de58 <tx_control+0x7a8>)
 800dae0:	2296      	movs	r2, #150	@ 0x96
 800dae2:	0052      	lsls	r2, r2, #1
 800dae4:	801a      	strh	r2, [r3, #0]
		goto finTokenWiFi;//jra finTokenWiFi
 800dae6:	e01d      	b.n	800db24 <tx_control+0x474>
			goto rx_tokenWiFi_01;//jreq rx_tokenWiFi_01; / sí
 800dae8:	46c0      	nop			@ (mov r8, r8)
 800daea:	e000      	b.n	800daee <tx_control+0x43e>

rx_tokenWiFi_02b:

		//	ld	A,codeTX
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
			goto rx_tokenWiFi_01;//	jreq rx_tokenWiFi_01;  / Sí
 800daec:	46c0      	nop			@ (mov r8, r8)
		codeTX = 0;//clr codeTX / / limpia código de Tx
 800daee:	4bd9      	ldr	r3, [pc, #868]	@ (800de54 <tx_control+0x7a4>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	e000      	b.n	800daf8 <tx_control+0x448>
			goto	rx_tokenWiFi_02b;			//jrne	rx_tokenWiFi_02b;			/ si llego algún comando no mandes token y consideralo como OK
 800daf6:	46c0      	nop			@ (mov r8, r8)
		if(codeTX == 0x80){//	cp	A,#$80;			/ se recibió respuesta del modulo WiFi ?
 800daf8:	4bd6      	ldr	r3, [pc, #856]	@ (800de54 <tx_control+0x7a4>)
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	2b80      	cmp	r3, #128	@ 0x80
 800dafe:	d0f5      	beq.n	800daec <tx_control+0x43c>
		}
		timeoutTWF = 300;
 800db00:	4bd5      	ldr	r3, [pc, #852]	@ (800de58 <tx_control+0x7a8>)
 800db02:	2296      	movs	r2, #150	@ 0x96
 800db04:	0052      	lsls	r2, r2, #1
 800db06:	801a      	strh	r2, [r3, #0]
 800db08:	e000      	b.n	800db0c <tx_control+0x45c>
			goto rx_tokenWiFi_02;
 800db0a:	46c0      	nop			@ (mov r8, r8)

rx_tokenWiFi_02:

		timeTxTWF = 30;			// mov		timeTxTWF,#30;				/ vuelve a cargar tiempo para enviar Token (cada 30s) (carga de nuevo delay para evitar que el token se envíe al instante despues de ciertas transmisiones)
 800db0c:	4bd5      	ldr	r3, [pc, #852]	@ (800de64 <tx_control+0x7b4>)
 800db0e:	221e      	movs	r2, #30
 800db10:	701a      	strb	r2, [r3, #0]

		flagsTX2[1]=1; //bset	flagsTX2,#1; // sí se recibió repuesta, levanta bandera de token recibido
 800db12:	4bd2      	ldr	r3, [pc, #840]	@ (800de5c <tx_control+0x7ac>)
 800db14:	2201      	movs	r2, #1
 800db16:	705a      	strb	r2, [r3, #1]
		//ldw	X,#300;
		//timeoutTWF = 300;		//ldw	timeoutTWF,X;	/ carga time out de Token (5 min)
		goto finTokenWiFi;		//jra	finTokenWiFi;
 800db18:	e004      	b.n	800db24 <tx_control+0x474>
	goto finTokenWiFi;				//jra		finTokenWiFi
 800db1a:	46c0      	nop			@ (mov r8, r8)
 800db1c:	e002      	b.n	800db24 <tx_control+0x474>
			goto finTokenWiFi; /// jrne	finTokenWiFi; / espera a que terminé
 800db1e:	46c0      	nop			@ (mov r8, r8)
 800db20:	e000      	b.n	800db24 <tx_control+0x474>
			goto finTokenWiFi;//jrne  inTokenWiFi;   / No, continúa
 800db22:	46c0      	nop			@ (mov r8, r8)

finTokenWiFi:
		if(flagsTX2[1]){//	btjt flagsTX2,#1,tokenWiFi_OK; / si ya se recibió Token Wifi permite Rx/Tx de comandos
 800db24:	4bcd      	ldr	r3, [pc, #820]	@ (800de5c <tx_control+0x7ac>)
 800db26:	785b      	ldrb	r3, [r3, #1]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <tx_control+0x480>
 800db2c:	f001 fe64 	bl	800f7f8 <tx_control+0x2148>
			goto tokenWiFi_OK;
 800db30:	46c0      	nop			@ (mov r8, r8)

tokenWiFi_OK:


//;===========================================================
		if(!flagsWIFI[f_timeLoggerCmd]){//	btjf flagsWIFI,#f_timeLoggerCmd,tx_control_00; si se está transmitiendo logger Wifi no revisa comando BLE
 800db32:	4bcd      	ldr	r3, [pc, #820]	@ (800de68 <tx_control+0x7b8>)
 800db34:	78db      	ldrb	r3, [r3, #3]
 800db36:	2201      	movs	r2, #1
 800db38:	4053      	eors	r3, r2
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <tx_control+0x494>
 800db40:	f000 fcca 	bl	800e4d8 <tx_control+0xe28>
			goto tx_control_00;
 800db44:	46c0      	nop			@ (mov r8, r8)
		}
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
tx_control_00:
		if(!flagsWIFI[f_eventLoggerCmd]){//btjf flagsWIFI,#f_eventLoggerCmd,tx_control_00b /  si se está transmitiendo logger Wifi no revisa comando BLE
 800db46:	4bc8      	ldr	r3, [pc, #800]	@ (800de68 <tx_control+0x7b8>)
 800db48:	791b      	ldrb	r3, [r3, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	4053      	eors	r3, r2
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	2b00      	cmp	r3, #0
 800db52:	d101      	bne.n	800db58 <tx_control+0x4a8>
 800db54:	f000 fcc2 	bl	800e4dc <tx_control+0xe2c>
			goto tx_control_00b;
 800db58:	46c0      	nop			@ (mov r8, r8)
		//		goto noLoadResetBLE;		//	jrne noLoadResetBLE;	/ no, continúa
		//}

noLoadResetBLE:

		if(!flagsRxFirm[0]){//	btjf	flagsRxFirm,#0,ask_tx_control_01; Empezó recepción de Firmware ?
 800db5a:	4bc4      	ldr	r3, [pc, #784]	@ (800de6c <tx_control+0x7bc>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2201      	movs	r2, #1
 800db60:	4053      	eors	r3, r2
 800db62:	b2db      	uxtb	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d13a      	bne.n	800dbde <tx_control+0x52e>
			goto ask_tx_control_01;
		}
		timeOutRst = 241;//	mov timeOutRst,#241; / carga time out de resetcon 60 segundos
 800db68:	4bc1      	ldr	r3, [pc, #772]	@ (800de70 <tx_control+0x7c0>)
 800db6a:	22f1      	movs	r2, #241	@ 0xf1
 800db6c:	701a      	strb	r2, [r3, #0]

		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;	/ carga time out de Token (5 min)
 800db6e:	4bba      	ldr	r3, [pc, #744]	@ (800de58 <tx_control+0x7a8>)
 800db70:	2296      	movs	r2, #150	@ 0x96
 800db72:	0052      	lsls	r2, r2, #1
 800db74:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 800db76:	4bbf      	ldr	r3, [pc, #764]	@ (800de74 <tx_control+0x7c4>)
 800db78:	2296      	movs	r2, #150	@ 0x96
 800db7a:	0052      	lsls	r2, r2, #1
 800db7c:	801a      	strh	r2, [r3, #0]
		if(timeOutRx != 0){//tnz timeOutRx
 800db7e:	4bbe      	ldr	r3, [pc, #760]	@ (800de78 <tx_control+0x7c8>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d118      	bne.n	800dbb8 <tx_control+0x508>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
		}
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800db86:	233d      	movs	r3, #61	@ 0x3d
 800db88:	18fb      	adds	r3, r7, r3
 800db8a:	2200      	movs	r2, #0
 800db8c:	701a      	strb	r2, [r3, #0]
 800db8e:	e00a      	b.n	800dba6 <tx_control+0x4f6>
			flagsRxFirm [i]= 0;
 800db90:	203d      	movs	r0, #61	@ 0x3d
 800db92:	183b      	adds	r3, r7, r0
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	4ab5      	ldr	r2, [pc, #724]	@ (800de6c <tx_control+0x7bc>)
 800db98:	2100      	movs	r1, #0
 800db9a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<8; i++){//clr flagsRxFirm;	/ borra banderas de Rx de firmware para cancelar proceso
 800db9c:	183b      	adds	r3, r7, r0
 800db9e:	781a      	ldrb	r2, [r3, #0]
 800dba0:	183b      	adds	r3, r7, r0
 800dba2:	3201      	adds	r2, #1
 800dba4:	701a      	strb	r2, [r3, #0]
 800dba6:	233d      	movs	r3, #61	@ 0x3d
 800dba8:	18fb      	adds	r3, r7, r3
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b07      	cmp	r3, #7
 800dbae:	d9ef      	bls.n	800db90 <tx_control+0x4e0>
		}
		codeTX = 0;//clr	codeTX;		/ ignora comandos si es que se producieron
 800dbb0:	4ba8      	ldr	r3, [pc, #672]	@ (800de54 <tx_control+0x7a4>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	701a      	strb	r2, [r3, #0]
		goto ask_tx_control_01;//jp	ask_tx_control_01;	/ no entres a proceso de Rx firmware
 800dbb6:	e013      	b.n	800dbe0 <tx_control+0x530>
			goto noTimeOutRx;//jrne	noTimeOutRx;	/ se cumplió el time out de recepción ?
 800dbb8:	46c0      	nop			@ (mov r8, r8)

noTimeOutRx:
		goto 	rx_firmware;			//jp		rx_firmware
 800dbba:	46c0      	nop			@ (mov r8, r8)
			//<<<<<<<<<<<< Aqui me quede  <<<<<<<<<<<<<<<
//;----------------------------------------------------------
//;										Rx Firmware(Número de Bloques)
//;----------------------------------------------------------
rx_firmware:
			flagsLogger[4]=1;		// bset	flagsLogger,#4;				/ cancela loggeo de eventos
 800dbbc:	4baf      	ldr	r3, [pc, #700]	@ (800de7c <tx_control+0x7cc>)
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	711a      	strb	r2, [r3, #4]
			flagsLogger[5]=1;		// bset	flagsLogger,#5;				/ cancela loggeo de datos
 800dbc2:	4bae      	ldr	r3, [pc, #696]	@ (800de7c <tx_control+0x7cc>)
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	715a      	strb	r2, [r3, #5]
			if(!flagsRxFirm[3]){ // btjf	flagsRxFirm,#3,rx_firmware01; Ya se completo la recepción de bloques de firmware ?
 800dbc8:	4ba8      	ldr	r3, [pc, #672]	@ (800de6c <tx_control+0x7bc>)
 800dbca:	78db      	ldrb	r3, [r3, #3]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	4053      	eors	r3, r2
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <tx_control+0x52a>
 800dbd6:	f001 f959 	bl	800ee8c <tx_control+0x17dc>
				goto rx_firmware01;
 800dbda:	f001 f82d 	bl	800ec38 <tx_control+0x1588>
			goto ask_tx_control_01;
 800dbde:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x21){					//	cp	A,#$21
 800dbe0:	4b9c      	ldr	r3, [pc, #624]	@ (800de54 <tx_control+0x7a4>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	2b21      	cmp	r3, #33	@ 0x21
 800dbe6:	d131      	bne.n	800dc4c <tx_control+0x59c>
		timeOutRst = 241;					//	mov	 timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800dbe8:	4ba1      	ldr	r3, [pc, #644]	@ (800de70 <tx_control+0x7c0>)
 800dbea:	22f1      	movs	r2, #241	@ 0xf1
 800dbec:	701a      	strb	r2, [r3, #0]
		goto tx_control_handshake;//		jp	tx_control_handshake
 800dbee:	46c0      	nop			@ (mov r8, r8)
		Bloque_handshake[comando1] = 0xF1; 				// comando1 = 0xF1;
 800dbf0:	4ba3      	ldr	r3, [pc, #652]	@ (800de80 <tx_control+0x7d0>)
 800dbf2:	22f1      	movs	r2, #241	@ 0xf1
 800dbf4:	701a      	strb	r2, [r3, #0]
		Bloque_handshake[comando2] = 0x3F;   		 	//comando2 = 0x3F;
 800dbf6:	4ba2      	ldr	r3, [pc, #648]	@ (800de80 <tx_control+0x7d0>)
 800dbf8:	223f      	movs	r2, #63	@ 0x3f
 800dbfa:	705a      	strb	r2, [r3, #1]
		Bloque_handshake[model] = fm_modelo;   			// model = fm_modelo;
 800dbfc:	4ba1      	ldr	r3, [pc, #644]	@ (800de84 <tx_control+0x7d4>)
 800dbfe:	781a      	ldrb	r2, [r3, #0]
 800dc00:	4b9f      	ldr	r3, [pc, #636]	@ (800de80 <tx_control+0x7d0>)
 800dc02:	739a      	strb	r2, [r3, #14]
		Bloque_handshake[versionSoft1] = versionFirm1;	// versionSoft1 = versionFirm1;
 800dc04:	4ba0      	ldr	r3, [pc, #640]	@ (800de88 <tx_control+0x7d8>)
 800dc06:	781a      	ldrb	r2, [r3, #0]
 800dc08:	4b9d      	ldr	r3, [pc, #628]	@ (800de80 <tx_control+0x7d0>)
 800dc0a:	73da      	strb	r2, [r3, #15]
		Bloque_handshake[versionSoft2] = versionFirm2;	// versionSoft2 = versionFirm2;
 800dc0c:	4b9f      	ldr	r3, [pc, #636]	@ (800de8c <tx_control+0x7dc>)
 800dc0e:	781a      	ldrb	r2, [r3, #0]
 800dc10:	4b9b      	ldr	r3, [pc, #620]	@ (800de80 <tx_control+0x7d0>)
 800dc12:	741a      	strb	r2, [r3, #16]
		Bloque_handshake[plantParam1] = Plantilla[plantilla1];		// plantParam1 = plantilla1;
 800dc14:	4b9e      	ldr	r3, [pc, #632]	@ (800de90 <tx_control+0x7e0>)
 800dc16:	227d      	movs	r2, #125	@ 0x7d
 800dc18:	5c9a      	ldrb	r2, [r3, r2]
 800dc1a:	4b99      	ldr	r3, [pc, #612]	@ (800de80 <tx_control+0x7d0>)
 800dc1c:	745a      	strb	r2, [r3, #17]
		Bloque_handshake[plantParam2] = Plantilla[plantilla2];		// plantParam2 = plantilla2;
 800dc1e:	4b9c      	ldr	r3, [pc, #624]	@ (800de90 <tx_control+0x7e0>)
 800dc20:	227e      	movs	r2, #126	@ 0x7e
 800dc22:	5c9a      	ldrb	r2, [r3, r2]
 800dc24:	4b96      	ldr	r3, [pc, #600]	@ (800de80 <tx_control+0x7d0>)
 800dc26:	749a      	strb	r2, [r3, #18]
		Bloque_handshake[checkList1] = fm_modelo0;		// checkList1 = fm_modelo0;
 800dc28:	4b9a      	ldr	r3, [pc, #616]	@ (800de94 <tx_control+0x7e4>)
 800dc2a:	781a      	ldrb	r2, [r3, #0]
 800dc2c:	4b94      	ldr	r3, [pc, #592]	@ (800de80 <tx_control+0x7d0>)
 800dc2e:	74da      	strb	r2, [r3, #19]
		Bloque_handshake[checkList2] = fm_hardware;		// checkList2 = fm_hardware;
 800dc30:	4b99      	ldr	r3, [pc, #612]	@ (800de98 <tx_control+0x7e8>)
 800dc32:	781a      	ldrb	r2, [r3, #0]
 800dc34:	4b92      	ldr	r3, [pc, #584]	@ (800de80 <tx_control+0x7d0>)
 800dc36:	751a      	strb	r2, [r3, #20]
		point_X = &Bloque_handshake[0];	 // Apunta a los datos
 800dc38:	4b91      	ldr	r3, [pc, #580]	@ (800de80 <tx_control+0x7d0>)
 800dc3a:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 // Apunta al buffer de datos en RAM
 800dc3c:	4b97      	ldr	r3, [pc, #604]	@ (800de9c <tx_control+0x7ec>)
 800dc3e:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800dc40:	233c      	movs	r3, #60	@ 0x3c
 800dc42:	18fb      	adds	r3, r7, r3
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
 800dc48:	f000 fc64 	bl	800e514 <tx_control+0xe64>
			goto ask_tx_control_02;			//	jrne ask_tx_control_02
 800dc4c:	46c0      	nop			@ (mov r8, r8)
		if(flagsWIFI[f_serverConnect]){//	btjt flagsWIFI,#f_serverConnect,ask_tx_control_04; / Sí hay conexión con servidor no permitas comando de petiución de logger
 800dc4e:	4b86      	ldr	r3, [pc, #536]	@ (800de68 <tx_control+0x7b8>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d148      	bne.n	800dce8 <tx_control+0x638>
		if(codeTX != 0x60){//	cp	A,#$60
 800dc56:	4b7f      	ldr	r3, [pc, #508]	@ (800de54 <tx_control+0x7a4>)
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	2b60      	cmp	r3, #96	@ 0x60
 800dc5c:	d11f      	bne.n	800dc9e <tx_control+0x5ee>
		timeOutRst = 241;//	mov	timeOutRst,#241; / carga time out de resetcon 60 segundos
 800dc5e:	4b84      	ldr	r3, [pc, #528]	@ (800de70 <tx_control+0x7c0>)
 800dc60:	22f1      	movs	r2, #241	@ 0xf1
 800dc62:	701a      	strb	r2, [r3, #0]
		goto tx_control_dataLogger;//	jp	tx_control_dataLogger
 800dc64:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockDATA;//mov cntBlockFlash,cntBlockDATA
 800dc66:	4b8e      	ldr	r3, [pc, #568]	@ (800dea0 <tx_control+0x7f0>)
 800dc68:	781a      	ldrb	r2, [r3, #0]
 800dc6a:	4b8e      	ldr	r3, [pc, #568]	@ (800dea4 <tx_control+0x7f4>)
 800dc6c:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA; //mov	cntByteBlock,cntByteBlockDATA
 800dc6e:	4b8e      	ldr	r3, [pc, #568]	@ (800dea8 <tx_control+0x7f8>)
 800dc70:	781a      	ldrb	r2, [r3, #0]
 800dc72:	4b8e      	ldr	r3, [pc, #568]	@ (800deac <tx_control+0x7fc>)
 800dc74:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 3; //mov	offsetInitTX,#3; // Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800dc76:	4b8e      	ldr	r3, [pc, #568]	@ (800deb0 <tx_control+0x800>)
 800dc78:	2203      	movs	r2, #3
 800dc7a:	701a      	strb	r2, [r3, #0]
		dirBuffer = &data_buffer[0];
 800dc7c:	4b8d      	ldr	r3, [pc, #564]	@ (800deb4 <tx_control+0x804>)
 800dc7e:	4a8e      	ldr	r2, [pc, #568]	@ (800deb8 <tx_control+0x808>)
 800dc80:	601a      	str	r2, [r3, #0]
		dirLogger = &dataLogger[0];
 800dc82:	4b8e      	ldr	r3, [pc, #568]	@ (800debc <tx_control+0x80c>)
 800dc84:	4a8e      	ldr	r2, [pc, #568]	@ (800dec0 <tx_control+0x810>)
 800dc86:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[1]){//btjf	flagsLogger,#1,noFullFlagTXDATA;	/ se llenó al menos una vez el DATA logger ?
 800dc88:	4b7c      	ldr	r3, [pc, #496]	@ (800de7c <tx_control+0x7cc>)
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	4053      	eors	r3, r2
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <tx_control+0x5ea>
 800dc96:	f000 fc84 	bl	800e5a2 <tx_control+0xef2>
			goto noFullFlagTXDATA;
 800dc9a:	f000 fc85 	bl	800e5a8 <tx_control+0xef8>
			goto ask_tx_control_03;//	jrne ask_tx_control_03
 800dc9e:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x61){//	cp		A,#$61
 800dca0:	4b6c      	ldr	r3, [pc, #432]	@ (800de54 <tx_control+0x7a4>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	2b61      	cmp	r3, #97	@ 0x61
 800dca6:	d121      	bne.n	800dcec <tx_control+0x63c>
		timeOutRst = 241;//	mov		timeOutRst,#241;		/ carga time out de resetcon 60 segundos
 800dca8:	4b71      	ldr	r3, [pc, #452]	@ (800de70 <tx_control+0x7c0>)
 800dcaa:	22f1      	movs	r2, #241	@ 0xf1
 800dcac:	701a      	strb	r2, [r3, #0]
		goto tx_control_eventLogger;//	jp		tx_control_eventLogger
 800dcae:	46c0      	nop			@ (mov r8, r8)
		cntBlockFlash = cntBlockEVENT;//mov cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800dcb0:	4b84      	ldr	r3, [pc, #528]	@ (800dec4 <tx_control+0x814>)
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	4b7b      	ldr	r3, [pc, #492]	@ (800dea4 <tx_control+0x7f4>)
 800dcb6:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;//mov cntByteBlock,cntByteBlockEVENT
 800dcb8:	4b83      	ldr	r3, [pc, #524]	@ (800dec8 <tx_control+0x818>)
 800dcba:	781a      	ldrb	r2, [r3, #0]
 800dcbc:	4b7b      	ldr	r3, [pc, #492]	@ (800deac <tx_control+0x7fc>)
 800dcbe:	701a      	strb	r2, [r3, #0]
		offsetInitTX = 10;//mov offsetInitTX,#10;			/ Indica el offset a tomar en cuenta en caso de que el Loogger se haya llenado alguna vez
 800dcc0:	4b7b      	ldr	r3, [pc, #492]	@ (800deb0 <tx_control+0x800>)
 800dcc2:	220a      	movs	r2, #10
 800dcc4:	701a      	strb	r2, [r3, #0]
		dirBuffer = &event_buffer[0];
 800dcc6:	4b7b      	ldr	r3, [pc, #492]	@ (800deb4 <tx_control+0x804>)
 800dcc8:	4a80      	ldr	r2, [pc, #512]	@ (800decc <tx_control+0x81c>)
 800dcca:	601a      	str	r2, [r3, #0]
		dirLogger = &eventLogger[0];
 800dccc:	4b7b      	ldr	r3, [pc, #492]	@ (800debc <tx_control+0x80c>)
 800dcce:	4a80      	ldr	r2, [pc, #512]	@ (800ded0 <tx_control+0x820>)
 800dcd0:	601a      	str	r2, [r3, #0]
		if(!flagsLogger[2]){//btjf	flagsLogger,#2,noFullFlagTXEVENT;	/ se llenó al menos una vez el EVENT logger ?
 800dcd2:	4b6a      	ldr	r3, [pc, #424]	@ (800de7c <tx_control+0x7cc>)
 800dcd4:	789b      	ldrb	r3, [r3, #2]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	4053      	eors	r3, r2
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <tx_control+0x634>
 800dce0:	f000 fcec 	bl	800e6bc <tx_control+0x100c>
			goto noFullFlagTXEVENT;
 800dce4:	f000 fced 	bl	800e6c2 <tx_control+0x1012>
			goto ask_tx_control_04;
 800dce8:	46c0      	nop			@ (mov r8, r8)
 800dcea:	e000      	b.n	800dcee <tx_control+0x63e>
			goto ask_tx_control_04;//	jrne	ask_tx_control_04
 800dcec:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x53){//	cp	A,#$53
 800dcee:	4b59      	ldr	r3, [pc, #356]	@ (800de54 <tx_control+0x7a4>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b53      	cmp	r3, #83	@ 0x53
 800dcf4:	d12e      	bne.n	800dd54 <tx_control+0x6a4>
		timeOutRst = 241;//	mov	timeOutRst,#241;	/ carga time out de resetcon 60 segundos
 800dcf6:	4b5e      	ldr	r3, [pc, #376]	@ (800de70 <tx_control+0x7c0>)
 800dcf8:	22f1      	movs	r2, #241	@ 0xf1
 800dcfa:	701a      	strb	r2, [r3, #0]
		goto tx_control_realTimeState;//	jp	tx_control_realTimeState
 800dcfc:	46c0      	nop			@ (mov r8, r8)
		Bloque_TiempoReal [tempAmb_RT_H] = tdevl;								// copia el dato de temperatura ambiente
 800dcfe:	4b75      	ldr	r3, [pc, #468]	@ (800ded4 <tx_control+0x824>)
 800dd00:	781a      	ldrb	r2, [r3, #0]
 800dd02:	4b75      	ldr	r3, [pc, #468]	@ (800ded8 <tx_control+0x828>)
 800dd04:	701a      	strb	r2, [r3, #0]
		Bloque_TiempoReal [tempAmb_RT_L] = tdevf;								// copia el dato de temperatura ambiente
 800dd06:	4b75      	ldr	r3, [pc, #468]	@ (800dedc <tx_control+0x82c>)
 800dd08:	781a      	ldrb	r2, [r3, #0]
 800dd0a:	4b73      	ldr	r3, [pc, #460]	@ (800ded8 <tx_control+0x828>)
 800dd0c:	705a      	strb	r2, [r3, #1]
		Bloque_TiempoReal [tempEva_RT_H] = teval;								// copia el dato de temperatura evaporador
 800dd0e:	4b74      	ldr	r3, [pc, #464]	@ (800dee0 <tx_control+0x830>)
 800dd10:	781a      	ldrb	r2, [r3, #0]
 800dd12:	4b71      	ldr	r3, [pc, #452]	@ (800ded8 <tx_control+0x828>)
 800dd14:	709a      	strb	r2, [r3, #2]
		Bloque_TiempoReal [tempEva_RT_L] = tevaf;								// copia el dato de temperatura evaporador
 800dd16:	4b73      	ldr	r3, [pc, #460]	@ (800dee4 <tx_control+0x834>)
 800dd18:	781a      	ldrb	r2, [r3, #0]
 800dd1a:	4b6f      	ldr	r3, [pc, #444]	@ (800ded8 <tx_control+0x828>)
 800dd1c:	70da      	strb	r2, [r3, #3]
		Bloque_TiempoReal [tempSal_RT_H] = highByte(tret_w);	// copia el dato de temperatura de salida
 800dd1e:	4b72      	ldr	r3, [pc, #456]	@ (800dee8 <tx_control+0x838>)
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	0a1b      	lsrs	r3, r3, #8
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	4b6b      	ldr	r3, [pc, #428]	@ (800ded8 <tx_control+0x828>)
 800dd2a:	711a      	strb	r2, [r3, #4]
		Bloque_TiempoReal [tempSal_RT_L] = lowByte(tret_w);			// copia el dato de temperatura de salida
 800dd2c:	4b6e      	ldr	r3, [pc, #440]	@ (800dee8 <tx_control+0x838>)
 800dd2e:	881b      	ldrh	r3, [r3, #0]
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	4b69      	ldr	r3, [pc, #420]	@ (800ded8 <tx_control+0x828>)
 800dd34:	715a      	strb	r2, [r3, #5]
		Bloque_TiempoReal [volt_RT]= voltl;				//volt_RT,voltl;	/ toma el volatje de la función de medición rms
 800dd36:	4b6d      	ldr	r3, [pc, #436]	@ (800deec <tx_control+0x83c>)
 800dd38:	781a      	ldrb	r2, [r3, #0]
 800dd3a:	4b67      	ldr	r3, [pc, #412]	@ (800ded8 <tx_control+0x828>)
 800dd3c:	719a      	strb	r2, [r3, #6]
		Bloque_TiempoReal [actuadores_RT] = 0;
 800dd3e:	4b66      	ldr	r3, [pc, #408]	@ (800ded8 <tx_control+0x828>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_comp])											// compresor activo ?
 800dd44:	4b6a      	ldr	r3, [pc, #424]	@ (800def0 <tx_control+0x840>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d101      	bne.n	800dd50 <tx_control+0x6a0>
 800dd4c:	f000 fd0a 	bl	800e764 <tx_control+0x10b4>
 800dd50:	f000 fd01 	bl	800e756 <tx_control+0x10a6>
			goto ask_tx_control_05;//	jrne ask_tx_control_05
 800dd54:	46c0      	nop			@ (mov r8, r8)
		if(codeTX != 0x51){ //cp	A,#$51
 800dd56:	4b3f      	ldr	r3, [pc, #252]	@ (800de54 <tx_control+0x7a4>)
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	2b51      	cmp	r3, #81	@ 0x51
 800dd5c:	d125      	bne.n	800ddaa <tx_control+0x6fa>
		timeOutRst = 241;//timeOutRst,#241;;  /carga time out de resetcon 60 segundos
 800dd5e:	4b44      	ldr	r3, [pc, #272]	@ (800de70 <tx_control+0x7c0>)
 800dd60:	22f1      	movs	r2, #241	@ 0xf1
 800dd62:	701a      	strb	r2, [r3, #0]
		goto tx_control_parameters; //jp tx_control_parameters
 800dd64:	46c0      	nop			@ (mov r8, r8)
		Bloque_Header [softVersion1] = version1;		// mov		softVersion1,version1
 800dd66:	4b63      	ldr	r3, [pc, #396]	@ (800def4 <tx_control+0x844>)
 800dd68:	227b      	movs	r2, #123	@ 0x7b
 800dd6a:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = version2;		// mov		softVersion2,version2;	/ Carga versión del firmware
 800dd6c:	4b61      	ldr	r3, [pc, #388]	@ (800def4 <tx_control+0x844>)
 800dd6e:	227c      	movs	r2, #124	@ 0x7c
 800dd70:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800dd72:	4b60      	ldr	r3, [pc, #384]	@ (800def4 <tx_control+0x844>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800dd78:	4b5e      	ldr	r3, [pc, #376]	@ (800def4 <tx_control+0x844>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800dd7e:	4b5d      	ldr	r3, [pc, #372]	@ (800def4 <tx_control+0x844>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800dd84:	4b5b      	ldr	r3, [pc, #364]	@ (800def4 <tx_control+0x844>)
 800dd86:	2201      	movs	r2, #1
 800dd88:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 04;					//mov		dataType,#04
 800dd8a:	4b5a      	ldr	r3, [pc, #360]	@ (800def4 <tx_control+0x844>)
 800dd8c:	2204      	movs	r2, #4
 800dd8e:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 128;					//mov		dataSize,#128
 800dd90:	4b58      	ldr	r3, [pc, #352]	@ (800def4 <tx_control+0x844>)
 800dd92:	2280      	movs	r2, #128	@ 0x80
 800dd94:	71da      	strb	r2, [r3, #7]
		point_X = &Bloque_Header[softVersion1];	 // ldw		X,#softVersion1
 800dd96:	4b57      	ldr	r3, [pc, #348]	@ (800def4 <tx_control+0x844>)
 800dd98:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800dd9a:	4b40      	ldr	r3, [pc, #256]	@ (800de9c <tx_control+0x7ec>)
 800dd9c:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800dd9e:	2334      	movs	r3, #52	@ 0x34
 800dda0:	18fb      	adds	r3, r7, r3
 800dda2:	2200      	movs	r2, #0
 800dda4:	701a      	strb	r2, [r3, #0]
 800dda6:	f000 fe19 	bl	800e9dc <tx_control+0x132c>
			goto ask_tx_control_06;//jrne	ask_tx_control_06
 800ddaa:	46c0      	nop			@ (mov r8, r8)
	    if(codeTX != 0x50){ //cp A,#$50
 800ddac:	4b29      	ldr	r3, [pc, #164]	@ (800de54 <tx_control+0x7a4>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	2b50      	cmp	r3, #80	@ 0x50
 800ddb2:	d112      	bne.n	800ddda <tx_control+0x72a>
		timeOutRst = 241;				// carga time out de resetcon 60 segundos
 800ddb4:	4b2e      	ldr	r3, [pc, #184]	@ (800de70 <tx_control+0x7c0>)
 800ddb6:	22f1      	movs	r2, #241	@ 0xf1
 800ddb8:	701a      	strb	r2, [r3, #0]
		goto tx_control_writeParam;  //jp	tx_control_writeParam
 800ddba:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[125] == findLastValue((uint32_t) &eePlantilla[eeversion1])){
 800ddbc:	4b4e      	ldr	r3, [pc, #312]	@ (800def8 <tx_control+0x848>)
 800ddbe:	227d      	movs	r2, #125	@ 0x7d
 800ddc0:	5c9b      	ldrb	r3, [r3, r2]
 800ddc2:	001c      	movs	r4, r3
 800ddc4:	4b4d      	ldr	r3, [pc, #308]	@ (800defc <tx_control+0x84c>)
 800ddc6:	0018      	movs	r0, r3
 800ddc8:	f7f4 ff28 	bl	8002c1c <findLastValue>
 800ddcc:	0003      	movs	r3, r0
 800ddce:	429c      	cmp	r4, r3
 800ddd0:	d001      	beq.n	800ddd6 <tx_control+0x726>
 800ddd2:	f000 ff09 	bl	800ebe8 <tx_control+0x1538>
				goto 	verifica_version2;		//jreq	verifica_version2
 800ddd6:	f000 fea3 	bl	800eb20 <tx_control+0x1470>
		goto	ask_tx_control_07;	// jrne	ask_tx_control_07
 800ddda:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x46){//	cp	A,#$46
 800dddc:	4b1d      	ldr	r3, [pc, #116]	@ (800de54 <tx_control+0x7a4>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	2b46      	cmp	r3, #70	@ 0x46
 800dde2:	d126      	bne.n	800de32 <tx_control+0x782>
			timeOutRst = 241;//	mov	timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800dde4:	4b22      	ldr	r3, [pc, #136]	@ (800de70 <tx_control+0x7c0>)
 800dde6:	22f1      	movs	r2, #241	@ 0xf1
 800dde8:	701a      	strb	r2, [r3, #0]
			goto tx_control_writeFirm;//jp tx_control_writeFirm
 800ddea:	46c0      	nop			@ (mov r8, r8)
            Bloque_handshake [comando1] = 0xF1;//	mov	comando1,#$F1
 800ddec:	4b24      	ldr	r3, [pc, #144]	@ (800de80 <tx_control+0x7d0>)
 800ddee:	22f1      	movs	r2, #241	@ 0xf1
 800ddf0:	701a      	strb	r2, [r3, #0]
            Bloque_handshake [comando2] = 0X03;//	mov	comando2,#$03;	/ indica que está listo para la recepción del firmware
 800ddf2:	4b23      	ldr	r3, [pc, #140]	@ (800de80 <tx_control+0x7d0>)
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	705a      	strb	r2, [r3, #1]
            flagsRxFirm[0] = 1;//	bset flagsRxFirm,#0;	/ indica que se comienza con recepción de fimware
 800ddf8:	4b1c      	ldr	r3, [pc, #112]	@ (800de6c <tx_control+0x7bc>)
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	701a      	strb	r2, [r3, #0]
            pointTx = &Bloque_handshake [comando1];//ldw	pointTx,X
 800ddfe:	4b40      	ldr	r3, [pc, #256]	@ (800df00 <tx_control+0x850>)
 800de00:	4a1f      	ldr	r2, [pc, #124]	@ (800de80 <tx_control+0x7d0>)
 800de02:	601a      	str	r2, [r3, #0]
            pointInitTx = &Bloque_handshake [comando1];//	ldw	pointInitTx,X
 800de04:	4b3f      	ldr	r3, [pc, #252]	@ (800df04 <tx_control+0x854>)
 800de06:	4a1e      	ldr	r2, [pc, #120]	@ (800de80 <tx_control+0x7d0>)
 800de08:	601a      	str	r2, [r3, #0]
            pointEndTx =  &Bloque_handshake [comando2];//	ldw	pointEndTx,X
 800de0a:	4b3f      	ldr	r3, [pc, #252]	@ (800df08 <tx_control+0x858>)
 800de0c:	4a3f      	ldr	r2, [pc, #252]	@ (800df0c <tx_control+0x85c>)
 800de0e:	601a      	str	r2, [r3, #0]
            blockSizeTX = 2;//	mov	blockSizeTX,#2
 800de10:	4b3f      	ldr	r3, [pc, #252]	@ (800df10 <tx_control+0x860>)
 800de12:	2202      	movs	r2, #2
 800de14:	701a      	strb	r2, [r3, #0]
            flagsTX [3] = 1; //	bset flagsTX,#3;	/ evita que se mande checksum
 800de16:	4b3f      	ldr	r3, [pc, #252]	@ (800df14 <tx_control+0x864>)
 800de18:	2201      	movs	r2, #1
 800de1a:	70da      	strb	r2, [r3, #3]
            keyTx = 0x55;//	mov	 keyTx,#$55;	/ listo para mandar transmisión
 800de1c:	4b3e      	ldr	r3, [pc, #248]	@ (800df18 <tx_control+0x868>)
 800de1e:	2255      	movs	r2, #85	@ 0x55
 800de20:	701a      	strb	r2, [r3, #0]
            codeTX = 0x00;//	clr	codeTX;
 800de22:	4b0c      	ldr	r3, [pc, #48]	@ (800de54 <tx_control+0x7a4>)
 800de24:	2200      	movs	r2, #0
 800de26:	701a      	strb	r2, [r3, #0]
            timeOutRx = 5;//	mov	timeOutRx,#5;	/ carga time out para recibir respuestas
 800de28:	4b13      	ldr	r3, [pc, #76]	@ (800de78 <tx_control+0x7c8>)
 800de2a:	2205      	movs	r2, #5
 800de2c:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;//	jp	end_tx_control
 800de2e:	f001 fce6 	bl	800f7fe <tx_control+0x214e>
					goto ask_tx_control_08;//	jrne	ask_tx_control_08
 800de32:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x54){//	cp	A,#$54
 800de34:	4b07      	ldr	r3, [pc, #28]	@ (800de54 <tx_control+0x7a4>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b54      	cmp	r3, #84	@ 0x54
 800de3a:	d171      	bne.n	800df20 <tx_control+0x870>
			timeOutRst = 241;//	mov		timeOutRst,#241;				/ carga time out de resetcon 60 segundos
 800de3c:	4b0c      	ldr	r3, [pc, #48]	@ (800de70 <tx_control+0x7c0>)
 800de3e:	22f1      	movs	r2, #241	@ 0xf1
 800de40:	701a      	strb	r2, [r3, #0]
			goto tx_clean_logger;//jp tx_clean_logger
 800de42:	46c0      	nop			@ (mov r8, r8)
//			;										Clean logger
//			;----------------------------------------------------------
tx_clean_logger:


			clean_buffer();	//	call	clean_buffer
 800de44:	f7f9 f82c 	bl	8006ea0 <clean_buffer>
			cntBloqFirm = 0;//	clr		cntBloqFirm
 800de48:	4b34      	ldr	r3, [pc, #208]	@ (800df1c <tx_control+0x86c>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	f001 f89a 	bl	800ef86 <tx_control+0x18d6>
 800de52:	46c0      	nop			@ (mov r8, r8)
 800de54:	20000e24 	.word	0x20000e24
 800de58:	20000f4c 	.word	0x20000f4c
 800de5c:	20000f44 	.word	0x20000f44
 800de60:	20000ee8 	.word	0x20000ee8
 800de64:	20000f3a 	.word	0x20000f3a
 800de68:	20000f50 	.word	0x20000f50
 800de6c:	20000edc 	.word	0x20000edc
 800de70:	20000ee5 	.word	0x20000ee5
 800de74:	200010fc 	.word	0x200010fc
 800de78:	20000ee6 	.word	0x20000ee6
 800de7c:	20000e04 	.word	0x20000e04
 800de80:	20000de0 	.word	0x20000de0
 800de84:	0801e7f4 	.word	0x0801e7f4
 800de88:	0801e7f0 	.word	0x0801e7f0
 800de8c:	0801e7f1 	.word	0x0801e7f1
 800de90:	200000b8 	.word	0x200000b8
 800de94:	0801e7f3 	.word	0x0801e7f3
 800de98:	0801e7f2 	.word	0x0801e7f2
 800de9c:	20000fa8 	.word	0x20000fa8
 800dea0:	20000dad 	.word	0x20000dad
 800dea4:	20000d9a 	.word	0x20000d9a
 800dea8:	20000dac 	.word	0x20000dac
 800deac:	20000d9b 	.word	0x20000d9b
 800deb0:	20000e31 	.word	0x20000e31
 800deb4:	20000da4 	.word	0x20000da4
 800deb8:	20000c8c 	.word	0x20000c8c
 800debc:	20000da0 	.word	0x20000da0
 800dec0:	0803c000 	.word	0x0803c000
 800dec4:	20000daf 	.word	0x20000daf
 800dec8:	20000dae 	.word	0x20000dae
 800decc:	20000d0c 	.word	0x20000d0c
 800ded0:	08037000 	.word	0x08037000
 800ded4:	20000bb0 	.word	0x20000bb0
 800ded8:	20000df8 	.word	0x20000df8
 800dedc:	20000bb1 	.word	0x20000bb1
 800dee0:	20000bb2 	.word	0x20000bb2
 800dee4:	20000bb3 	.word	0x20000bb3
 800dee8:	20000c54 	.word	0x20000c54
 800deec:	20000bce 	.word	0x20000bce
 800def0:	20000ba4 	.word	0x20000ba4
 800def4:	20000dd8 	.word	0x20000dd8
 800def8:	20000984 	.word	0x20000984
 800defc:	0803f07b 	.word	0x0803f07b
 800df00:	20000e14 	.word	0x20000e14
 800df04:	20000e0c 	.word	0x20000e0c
 800df08:	20000e10 	.word	0x20000e10
 800df0c:	20000de1 	.word	0x20000de1
 800df10:	20000e30 	.word	0x20000e30
 800df14:	20000e1c 	.word	0x20000e1c
 800df18:	20000e19 	.word	0x20000e19
 800df1c:	20000ed1 	.word	0x20000ed1
				goto ask_tx_control_09;//	jrne ask_tx_control_09
 800df20:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x55){//	cp	A,#$55
 800df22:	4bbb      	ldr	r3, [pc, #748]	@ (800e210 <tx_control+0xb60>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	2b55      	cmp	r3, #85	@ 0x55
 800df28:	d105      	bne.n	800df36 <tx_control+0x886>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800df2a:	4bba      	ldr	r3, [pc, #744]	@ (800e214 <tx_control+0xb64>)
 800df2c:	22f0      	movs	r2, #240	@ 0xf0
 800df2e:	701a      	strb	r2, [r3, #0]
			goto tx_modParam;//	jp tx_modParam
 800df30:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_modParam:

fin_tx_modParam:
			goto end_tx_control;		//jp		end_tx_control
 800df32:	f001 fc64 	bl	800f7fe <tx_control+0x214e>
				goto ask_tx_control_10;//	jrne ask_tx_control_10
 800df36:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x56){//cp A,#$56
 800df38:	4bb5      	ldr	r3, [pc, #724]	@ (800e210 <tx_control+0xb60>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b56      	cmp	r3, #86	@ 0x56
 800df3e:	d132      	bne.n	800dfa6 <tx_control+0x8f6>
			timeOutRst = 240;//mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800df40:	4bb4      	ldr	r3, [pc, #720]	@ (800e214 <tx_control+0xb64>)
 800df42:	22f0      	movs	r2, #240	@ 0xf0
 800df44:	701a      	strb	r2, [r3, #0]
			goto tx_write_status;//jp	tx_write_status
 800df46:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_status:
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800df48:	4bb3      	ldr	r3, [pc, #716]	@ (800e218 <tx_control+0xb68>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	601a      	str	r2, [r3, #0]

			//ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;	// clr		wreg
 800df4e:	4bb3      	ldr	r3, [pc, #716]	@ (800e21c <tx_control+0xb6c>)
 800df50:	2200      	movs	r2, #0
 800df52:	701a      	strb	r2, [r3, #0]
			waux = 6;	// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800df54:	4bb2      	ldr	r3, [pc, #712]	@ (800e220 <tx_control+0xb70>)
 800df56:	2206      	movs	r2, #6
 800df58:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800df5a:	4bb2      	ldr	r3, [pc, #712]	@ (800e224 <tx_control+0xb74>)
 800df5c:	2106      	movs	r1, #6
 800df5e:	0018      	movs	r0, r3
 800df60:	f7f8 ff68 	bl	8006e34 <buildChksumBloq>
			chksum_to_compare = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800df68:	4bae      	ldr	r3, [pc, #696]	@ (800e224 <tx_control+0xb74>)
 800df6a:	799b      	ldrb	r3, [r3, #6]
 800df6c:	061b      	lsls	r3, r3, #24
 800df6e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800df70:	4bac      	ldr	r3, [pc, #688]	@ (800e224 <tx_control+0xb74>)
 800df72:	79db      	ldrb	r3, [r3, #7]
 800df74:	041b      	lsls	r3, r3, #16
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	18d3      	adds	r3, r2, r3
 800df7a:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800df7c:	4ba9      	ldr	r3, [pc, #676]	@ (800e224 <tx_control+0xb74>)
 800df7e:	7a1b      	ldrb	r3, [r3, #8]
 800df80:	021b      	lsls	r3, r3, #8
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	18d3      	adds	r3, r2, r3
 800df86:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800df88:	4ba6      	ldr	r3, [pc, #664]	@ (800e224 <tx_control+0xb74>)
 800df8a:	7a5b      	ldrb	r3, [r3, #9]
 800df8c:	001a      	movs	r2, r3
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	189b      	adds	r3, r3, r2
 800df92:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800df94:	4ba0      	ldr	r3, [pc, #640]	@ (800e218 <tx_control+0xb68>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d101      	bne.n	800dfa2 <tx_control+0x8f2>
 800df9e:	f001 f85b 	bl	800f058 <tx_control+0x19a8>
				goto tx_write_status_error;
 800dfa2:	f001 f911 	bl	800f1c8 <tx_control+0x1b18>
				goto ask_tx_control_11;//jrne	ask_tx_control_11
 800dfa6:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x57){//	cp	A,#$57
 800dfa8:	4b99      	ldr	r3, [pc, #612]	@ (800e210 <tx_control+0xb60>)
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b57      	cmp	r3, #87	@ 0x57
 800dfae:	d10e      	bne.n	800dfce <tx_control+0x91e>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800dfb0:	4b98      	ldr	r3, [pc, #608]	@ (800e214 <tx_control+0xb64>)
 800dfb2:	22f0      	movs	r2, #240	@ 0xf0
 800dfb4:	701a      	strb	r2, [r3, #0]
			goto tx_read_status;//jp	tx_read_status
 800dfb6:	46c0      	nop			@ (mov r8, r8)
// ----------------------------------------------------------//----------------------------------------------------------

tx_read_status:
		// carga información a enviar.
		// mov		estado1,eeEstado1
		uint8_t estado1_Aux = findLastValue((uint32_t)&eeEstado1);
 800dfb8:	4b9b      	ldr	r3, [pc, #620]	@ (800e228 <tx_control+0xb78>)
 800dfba:	0018      	movs	r0, r3
 800dfbc:	f7f4 fe2e 	bl	8002c1c <findLastValue>
 800dfc0:	0002      	movs	r2, r0
 800dfc2:	1dfb      	adds	r3, r7, #7
 800dfc4:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	623b      	str	r3, [r7, #32]
 800dfca:	f001 f985 	bl	800f2d8 <tx_control+0x1c28>
				goto ask_tx_control_12;//	jrne ask_tx_control_12
 800dfce:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x58){//	cp	A,#$58
 800dfd0:	4b8f      	ldr	r3, [pc, #572]	@ (800e210 <tx_control+0xb60>)
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	2b58      	cmp	r3, #88	@ 0x58
 800dfd6:	d132      	bne.n	800e03e <tx_control+0x98e>
			timeOutRst = 240;//	mov	timeOutRst,#240;	// carga time out de resetcon 240 segundos
 800dfd8:	4b8e      	ldr	r3, [pc, #568]	@ (800e214 <tx_control+0xb64>)
 800dfda:	22f0      	movs	r2, #240	@ 0xf0
 800dfdc:	701a      	strb	r2, [r3, #0]
			goto tx_timeUNIX;//	jp	tx_timeUNIX
 800dfde:	46c0      	nop			@ (mov r8, r8)

//----------------------------------------------------------
tx_timeUNIX:
		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0; // ldw		chksum_LW,X;					/ limpia registros de checksum
 800dfe0:	4b8d      	ldr	r3, [pc, #564]	@ (800e218 <tx_control+0xb68>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	601a      	str	r2, [r3, #0]

		// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
		wreg = 0;// clr		wreg
 800dfe6:	4b8d      	ldr	r3, [pc, #564]	@ (800e21c <tx_control+0xb6c>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	701a      	strb	r2, [r3, #0]
		waux = 6;// mov 	waux,#6;							/ tamaño del bloque a calcular el chksum
 800dfec:	4b8c      	ldr	r3, [pc, #560]	@ (800e220 <tx_control+0xb70>)
 800dfee:	2206      	movs	r2, #6
 800dff0:	701a      	strb	r2, [r3, #0]

		buildChksumBloq(&RxBuffer_Ble[0],6);		// call	buildChksumBloq
 800dff2:	4b8c      	ldr	r3, [pc, #560]	@ (800e224 <tx_control+0xb74>)
 800dff4:	2106      	movs	r1, #6
 800dff6:	0018      	movs	r0, r3
 800dff8:	f7f8 ff1c 	bl	8006e34 <buildChksumBloq>
		chksum_to_compare = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	60bb      	str	r3, [r7, #8]
		chksum_to_compare = ((uint32_t)RxBuffer_Ble[6])  <<24;
 800e000:	4b88      	ldr	r3, [pc, #544]	@ (800e224 <tx_control+0xb74>)
 800e002:	799b      	ldrb	r3, [r3, #6]
 800e004:	061b      	lsls	r3, r3, #24
 800e006:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[7]) <<16;
 800e008:	4b86      	ldr	r3, [pc, #536]	@ (800e224 <tx_control+0xb74>)
 800e00a:	79db      	ldrb	r3, [r3, #7]
 800e00c:	041b      	lsls	r3, r3, #16
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	18d3      	adds	r3, r2, r3
 800e012:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[8]) <<8;
 800e014:	4b83      	ldr	r3, [pc, #524]	@ (800e224 <tx_control+0xb74>)
 800e016:	7a1b      	ldrb	r3, [r3, #8]
 800e018:	021b      	lsls	r3, r3, #8
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	18d3      	adds	r3, r2, r3
 800e01e:	60bb      	str	r3, [r7, #8]
		chksum_to_compare += ((uint32_t)RxBuffer_Ble[9]);
 800e020:	4b80      	ldr	r3, [pc, #512]	@ (800e224 <tx_control+0xb74>)
 800e022:	7a5b      	ldrb	r3, [r3, #9]
 800e024:	001a      	movs	r2, r3
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	189b      	adds	r3, r3, r2
 800e02a:	60bb      	str	r3, [r7, #8]

		if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e02c:	4b7a      	ldr	r3, [pc, #488]	@ (800e218 <tx_control+0xb68>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	429a      	cmp	r2, r3
 800e034:	d101      	bne.n	800e03a <tx_control+0x98a>
 800e036:	f001 fa5c 	bl	800f4f2 <tx_control+0x1e42>
			goto tx_write_status_error;
 800e03a:	f001 f8c5 	bl	800f1c8 <tx_control+0x1b18>
				goto ask_tx_control_13;//	jrne ask_tx_control_13
 800e03e:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x59){//	cp		A,#$59
 800e040:	4b73      	ldr	r3, [pc, #460]	@ (800e210 <tx_control+0xb60>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b59      	cmp	r3, #89	@ 0x59
 800e046:	d132      	bne.n	800e0ae <tx_control+0x9fe>
			timeOutRst = 240;//	mov		timeOutRst,#240; // carga time out de resetcon 240 segundos
 800e048:	4b72      	ldr	r3, [pc, #456]	@ (800e214 <tx_control+0xb64>)
 800e04a:	22f0      	movs	r2, #240	@ 0xf0
 800e04c:	701a      	strb	r2, [r3, #0]
			goto tx_write_GEO;//jp tx_write_GEO
 800e04e:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_write_GEO:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e050:	4b71      	ldr	r3, [pc, #452]	@ (800e218 <tx_control+0xb68>)
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0;					// clr		wreg
 800e056:	4b71      	ldr	r3, [pc, #452]	@ (800e21c <tx_control+0xb6c>)
 800e058:	2200      	movs	r2, #0
 800e05a:	701a      	strb	r2, [r3, #0]
			waux = 10;					// mov 	waux,#10;							/ tamaño del bloque a calcular el chksum
 800e05c:	4b70      	ldr	r3, [pc, #448]	@ (800e220 <tx_control+0xb70>)
 800e05e:	220a      	movs	r2, #10
 800e060:	701a      	strb	r2, [r3, #0]
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;					/ compara la parte baja del checksum
			// ldw		X,resulh;
			// cpw		X,chksum_HW;					/ compara la parte baja del checksum

			buildChksumBloq(&RxBuffer_Ble[0],10);		// call	buildChksumBloq
 800e062:	4b70      	ldr	r3, [pc, #448]	@ (800e224 <tx_control+0xb74>)
 800e064:	210a      	movs	r1, #10
 800e066:	0018      	movs	r0, r3
 800e068:	f7f8 fee4 	bl	8006e34 <buildChksumBloq>
			chksum_to_compare = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[10])  <<24;
 800e070:	4b6c      	ldr	r3, [pc, #432]	@ (800e224 <tx_control+0xb74>)
 800e072:	7a9b      	ldrb	r3, [r3, #10]
 800e074:	061b      	lsls	r3, r3, #24
 800e076:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[11]) <<16;
 800e078:	4b6a      	ldr	r3, [pc, #424]	@ (800e224 <tx_control+0xb74>)
 800e07a:	7adb      	ldrb	r3, [r3, #11]
 800e07c:	041b      	lsls	r3, r3, #16
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	18d3      	adds	r3, r2, r3
 800e082:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<8;
 800e084:	4b67      	ldr	r3, [pc, #412]	@ (800e224 <tx_control+0xb74>)
 800e086:	7b1b      	ldrb	r3, [r3, #12]
 800e088:	021b      	lsls	r3, r3, #8
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	18d3      	adds	r3, r2, r3
 800e08e:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]);
 800e090:	4b64      	ldr	r3, [pc, #400]	@ (800e224 <tx_control+0xb74>)
 800e092:	7b5b      	ldrb	r3, [r3, #13]
 800e094:	001a      	movs	r2, r3
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	189b      	adds	r3, r3, r2
 800e09a:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e09c:	4b5e      	ldr	r3, [pc, #376]	@ (800e218 <tx_control+0xb68>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d101      	bne.n	800e0aa <tx_control+0x9fa>
 800e0a6:	f001 fa41 	bl	800f52c <tx_control+0x1e7c>
				goto tx_write_GEO_error;
 800e0aa:	f001 faa6 	bl	800f5fa <tx_control+0x1f4a>
				goto ask_tx_control_14;//	jrne	ask_tx_control_14
 800e0ae:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5A){//cp	A,#$5A
 800e0b0:	4b57      	ldr	r3, [pc, #348]	@ (800e210 <tx_control+0xb60>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b5a      	cmp	r3, #90	@ 0x5a
 800e0b6:	d000      	beq.n	800e0ba <tx_control+0xa0a>
 800e0b8:	e0dc      	b.n	800e274 <tx_control+0xbc4>
			timeOutRst = 240;//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e0ba:	4b56      	ldr	r3, [pc, #344]	@ (800e214 <tx_control+0xb64>)
 800e0bc:	22f0      	movs	r2, #240	@ 0xf0
 800e0be:	701a      	strb	r2, [r3, #0]
			goto tx_read_GEO;//jp tx_read_GEO
 800e0c0:	46c0      	nop			@ (mov r8, r8)

fin_tx_write_GEO:
			goto end_tx_control;		//jp		end_tx_control
//----------------------------------------------------------
tx_read_GEO:
			blockSizeTX = 8; // mov		blockSizeTX,#8;				/ tamaño del bloque
 800e0c2:	4b5a      	ldr	r3, [pc, #360]	@ (800e22c <tx_control+0xb7c>)
 800e0c4:	2208      	movs	r2, #8
 800e0c6:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			// mov		softVersion1,version1
			Bloque_Header[softVersion1] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800e0c8:	4b59      	ldr	r3, [pc, #356]	@ (800e230 <tx_control+0xb80>)
 800e0ca:	227c      	movs	r2, #124	@ 0x7c
 800e0cc:	5c9a      	ldrb	r2, [r3, r2]
 800e0ce:	4b59      	ldr	r3, [pc, #356]	@ (800e234 <tx_control+0xb84>)
 800e0d0:	701a      	strb	r2, [r3, #0]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e0d2:	4b58      	ldr	r3, [pc, #352]	@ (800e234 <tx_control+0xb84>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e0d8:	4b56      	ldr	r3, [pc, #344]	@ (800e234 <tx_control+0xb84>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e0de:	4b55      	ldr	r3, [pc, #340]	@ (800e234 <tx_control+0xb84>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e0e4:	4b53      	ldr	r3, [pc, #332]	@ (800e234 <tx_control+0xb84>)
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 6;// mov		dataType,#06
 800e0ea:	4b52      	ldr	r3, [pc, #328]	@ (800e234 <tx_control+0xb84>)
 800e0ec:	2206      	movs	r2, #6
 800e0ee:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;				// mov		dataSize,blockSizeTX
 800e0f0:	4b4e      	ldr	r3, [pc, #312]	@ (800e22c <tx_control+0xb7c>)
 800e0f2:	781a      	ldrb	r2, [r3, #0]
 800e0f4:	4b4f      	ldr	r3, [pc, #316]	@ (800e234 <tx_control+0xb84>)
 800e0f6:	71da      	strb	r2, [r3, #7]
			// ;Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			// ;copia los datos al buffer de tx

			// ldw		X,#softVersion1
			// ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800e0f8:	4b48      	ldr	r3, [pc, #288]	@ (800e21c <tx_control+0xb6c>)
 800e0fa:	2208      	movs	r2, #8
 800e0fc:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl);// call	copyVector
 800e0fe:	4a4e      	ldr	r2, [pc, #312]	@ (800e238 <tx_control+0xb88>)
 800e100:	4b4c      	ldr	r3, [pc, #304]	@ (800e234 <tx_control+0xb84>)
 800e102:	0011      	movs	r1, r2
 800e104:	0018      	movs	r0, r3
 800e106:	f7f8 fee3 	bl	8006ed0 <copyVector>
//			bufferTxControl[12]	= eeLong1;
//			bufferTxControl[13]	= eeLong2;
//			bufferTxControl[14] = eeLong3;
//			bufferTxControl[15] = eeLong4;

			bufferTxControl[8] = findLastValue((uint32_t) &eeLat1);
 800e10a:	4b4c      	ldr	r3, [pc, #304]	@ (800e23c <tx_control+0xb8c>)
 800e10c:	0018      	movs	r0, r3
 800e10e:	f7f4 fd85 	bl	8002c1c <findLastValue>
 800e112:	0003      	movs	r3, r0
 800e114:	b2da      	uxtb	r2, r3
 800e116:	4b48      	ldr	r3, [pc, #288]	@ (800e238 <tx_control+0xb88>)
 800e118:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = findLastValue((uint32_t) &eeLat2);
 800e11a:	4b49      	ldr	r3, [pc, #292]	@ (800e240 <tx_control+0xb90>)
 800e11c:	0018      	movs	r0, r3
 800e11e:	f7f4 fd7d 	bl	8002c1c <findLastValue>
 800e122:	0003      	movs	r3, r0
 800e124:	b2da      	uxtb	r2, r3
 800e126:	4b44      	ldr	r3, [pc, #272]	@ (800e238 <tx_control+0xb88>)
 800e128:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] = findLastValue((uint32_t) &eeLat3);
 800e12a:	4b46      	ldr	r3, [pc, #280]	@ (800e244 <tx_control+0xb94>)
 800e12c:	0018      	movs	r0, r3
 800e12e:	f7f4 fd75 	bl	8002c1c <findLastValue>
 800e132:	0003      	movs	r3, r0
 800e134:	b2da      	uxtb	r2, r3
 800e136:	4b40      	ldr	r3, [pc, #256]	@ (800e238 <tx_control+0xb88>)
 800e138:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = findLastValue((uint32_t) &eeLat4);
 800e13a:	4b43      	ldr	r3, [pc, #268]	@ (800e248 <tx_control+0xb98>)
 800e13c:	0018      	movs	r0, r3
 800e13e:	f7f4 fd6d 	bl	8002c1c <findLastValue>
 800e142:	0003      	movs	r3, r0
 800e144:	b2da      	uxtb	r2, r3
 800e146:	4b3c      	ldr	r3, [pc, #240]	@ (800e238 <tx_control+0xb88>)
 800e148:	72da      	strb	r2, [r3, #11]
			bufferTxControl[12]	= findLastValue((uint32_t) &eeLong1);
 800e14a:	4b40      	ldr	r3, [pc, #256]	@ (800e24c <tx_control+0xb9c>)
 800e14c:	0018      	movs	r0, r3
 800e14e:	f7f4 fd65 	bl	8002c1c <findLastValue>
 800e152:	0003      	movs	r3, r0
 800e154:	b2da      	uxtb	r2, r3
 800e156:	4b38      	ldr	r3, [pc, #224]	@ (800e238 <tx_control+0xb88>)
 800e158:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13]	= findLastValue((uint32_t) &eeLong2);
 800e15a:	4b3d      	ldr	r3, [pc, #244]	@ (800e250 <tx_control+0xba0>)
 800e15c:	0018      	movs	r0, r3
 800e15e:	f7f4 fd5d 	bl	8002c1c <findLastValue>
 800e162:	0003      	movs	r3, r0
 800e164:	b2da      	uxtb	r2, r3
 800e166:	4b34      	ldr	r3, [pc, #208]	@ (800e238 <tx_control+0xb88>)
 800e168:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = findLastValue((uint32_t) &eeLong3);
 800e16a:	4b3a      	ldr	r3, [pc, #232]	@ (800e254 <tx_control+0xba4>)
 800e16c:	0018      	movs	r0, r3
 800e16e:	f7f4 fd55 	bl	8002c1c <findLastValue>
 800e172:	0003      	movs	r3, r0
 800e174:	b2da      	uxtb	r2, r3
 800e176:	4b30      	ldr	r3, [pc, #192]	@ (800e238 <tx_control+0xb88>)
 800e178:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = findLastValue((uint32_t) &eeLong4);
 800e17a:	4b37      	ldr	r3, [pc, #220]	@ (800e258 <tx_control+0xba8>)
 800e17c:	0018      	movs	r0, r3
 800e17e:	f7f4 fd4d 	bl	8002c1c <findLastValue>
 800e182:	0003      	movs	r3, r0
 800e184:	b2da      	uxtb	r2, r3
 800e186:	4b2c      	ldr	r3, [pc, #176]	@ (800e238 <tx_control+0xb88>)
 800e188:	73da      	strb	r2, [r3, #15]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e18a:	4b23      	ldr	r3, [pc, #140]	@ (800e218 <tx_control+0xb68>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg = 0;		// clr		wreg
 800e190:	4b22      	ldr	r3, [pc, #136]	@ (800e21c <tx_control+0xb6c>)
 800e192:	2200      	movs	r2, #0
 800e194:	701a      	strb	r2, [r3, #0]
			waux = 16;		// mov 	waux,#16;							/ tamaño del bloque a calcular el chksum
 800e196:	4b22      	ldr	r3, [pc, #136]	@ (800e220 <tx_control+0xb70>)
 800e198:	2210      	movs	r2, #16
 800e19a:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);// call	buildChksumBloq
 800e19c:	4b20      	ldr	r3, [pc, #128]	@ (800e220 <tx_control+0xb70>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	001a      	movs	r2, r3
 800e1a2:	4b25      	ldr	r3, [pc, #148]	@ (800e238 <tx_control+0xb88>)
 800e1a4:	0011      	movs	r1, r2
 800e1a6:	0018      	movs	r0, r3
 800e1a8:	f7f8 fe44 	bl	8006e34 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+16,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+18,X
			bufferTxControl[16] = ((chksum_32_HW_LW & 0xFF000000)>>24);
 800e1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e218 <tx_control+0xb68>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	0e1b      	lsrs	r3, r3, #24
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	4b20      	ldr	r3, [pc, #128]	@ (800e238 <tx_control+0xb88>)
 800e1b6:	741a      	strb	r2, [r3, #16]
			bufferTxControl[17] = ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800e1b8:	4b17      	ldr	r3, [pc, #92]	@ (800e218 <tx_control+0xb68>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	0c1b      	lsrs	r3, r3, #16
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800e238 <tx_control+0xb88>)
 800e1c2:	745a      	strb	r2, [r3, #17]
			bufferTxControl[18] = ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800e1c4:	4b14      	ldr	r3, [pc, #80]	@ (800e218 <tx_control+0xb68>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	0a1b      	lsrs	r3, r3, #8
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e238 <tx_control+0xb88>)
 800e1ce:	749a      	strb	r2, [r3, #18]
			bufferTxControl[19] = (chksum_32_HW_LW & 0x000000FF);
 800e1d0:	4b11      	ldr	r3, [pc, #68]	@ (800e218 <tx_control+0xb68>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	4b18      	ldr	r3, [pc, #96]	@ (800e238 <tx_control+0xb88>)
 800e1d8:	74da      	strb	r2, [r3, #19]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0]; 			// ldw		pointTx,X
 800e1da:	4b20      	ldr	r3, [pc, #128]	@ (800e25c <tx_control+0xbac>)
 800e1dc:	4a16      	ldr	r2, [pc, #88]	@ (800e238 <tx_control+0xb88>)
 800e1de:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800e1e0:	4b1f      	ldr	r3, [pc, #124]	@ (800e260 <tx_control+0xbb0>)
 800e1e2:	4a15      	ldr	r2, [pc, #84]	@ (800e238 <tx_control+0xb88>)
 800e1e4:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+20)
			pointEndTx = &bufferTxControl[20];// ldw		pointEndTx,X
 800e1e6:	4b1f      	ldr	r3, [pc, #124]	@ (800e264 <tx_control+0xbb4>)
 800e1e8:	4a1f      	ldr	r2, [pc, #124]	@ (800e268 <tx_control+0xbb8>)
 800e1ea:	601a      	str	r2, [r3, #0]
			blockSizeTX = 20;// mov		blockSizeTX,#20
 800e1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800e22c <tx_control+0xb7c>)
 800e1ee:	2214      	movs	r2, #20
 800e1f0:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0;		// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800e26c <tx_control+0xbbc>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita enviar chksum
 800e1f8:	4b1c      	ldr	r3, [pc, #112]	@ (800e26c <tx_control+0xbbc>)
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	70da      	strb	r2, [r3, #3]

			keyTx = 0X55;		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800e1fe:	4b1c      	ldr	r3, [pc, #112]	@ (800e270 <tx_control+0xbc0>)
 800e200:	2255      	movs	r2, #85	@ 0x55
 800e202:	701a      	strb	r2, [r3, #0]
			codeTX = 0;			// clr		codeTX;
 800e204:	4b02      	ldr	r3, [pc, #8]	@ (800e210 <tx_control+0xb60>)
 800e206:	2200      	movs	r2, #0
 800e208:	701a      	strb	r2, [r3, #0]

fin_tx_read_GEO:
			goto end_tx_control;		//jp		end_tx_control
 800e20a:	f001 faf8 	bl	800f7fe <tx_control+0x214e>
 800e20e:	46c0      	nop			@ (mov r8, r8)
 800e210:	20000e24 	.word	0x20000e24
 800e214:	20000ee5 	.word	0x20000ee5
 800e218:	20000e34 	.word	0x20000e34
 800e21c:	20000b55 	.word	0x20000b55
 800e220:	20000b54 	.word	0x20000b54
 800e224:	20000984 	.word	0x20000984
 800e228:	0803f803 	.word	0x0803f803
 800e22c:	20000e30 	.word	0x20000e30
 800e230:	200000b8 	.word	0x200000b8
 800e234:	20000dd8 	.word	0x20000dd8
 800e238:	20000fa8 	.word	0x20000fa8
 800e23c:	0803f808 	.word	0x0803f808
 800e240:	0803f809 	.word	0x0803f809
 800e244:	0803f80a 	.word	0x0803f80a
 800e248:	0803f80b 	.word	0x0803f80b
 800e24c:	0803f80c 	.word	0x0803f80c
 800e250:	0803f80d 	.word	0x0803f80d
 800e254:	0803f80e 	.word	0x0803f80e
 800e258:	0803f80f 	.word	0x0803f80f
 800e25c:	20000e14 	.word	0x20000e14
 800e260:	20000e0c 	.word	0x20000e0c
 800e264:	20000e10 	.word	0x20000e10
 800e268:	20000fbc 	.word	0x20000fbc
 800e26c:	20000e1c 	.word	0x20000e1c
 800e270:	20000e19 	.word	0x20000e19
				goto ask_tx_control_15;//jrne	ask_tx_control_15
 800e274:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5B){//	cp	A,#$5B
 800e276:	4bf1      	ldr	r3, [pc, #964]	@ (800e63c <tx_control+0xf8c>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2b5b      	cmp	r3, #91	@ 0x5b
 800e27c:	d000      	beq.n	800e280 <tx_control+0xbd0>
 800e27e:	e089      	b.n	800e394 <tx_control+0xce4>
			timeOutRst = 240;//	mov	timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e280:	4bef      	ldr	r3, [pc, #956]	@ (800e640 <tx_control+0xf90>)
 800e282:	22f0      	movs	r2, #240	@ 0xf0
 800e284:	701a      	strb	r2, [r3, #0]
			goto tx_read_timeUNIX;//	jp	tx_read_timeUNIX
 800e286:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_read_timeUNIX:
			blockSizeTX = 4 ; // mov		blockSizeTX,#4;				/ tamaño del bloque
 800e288:	4bee      	ldr	r3, [pc, #952]	@ (800e644 <tx_control+0xf94>)
 800e28a:	2204      	movs	r2, #4
 800e28c:	701a      	strb	r2, [r3, #0]

			// Carga datos de Header
			Bloque_Header[softVersion1] = Plantilla[version1]; 	// mov		softVersion1,version1
 800e28e:	4bee      	ldr	r3, [pc, #952]	@ (800e648 <tx_control+0xf98>)
 800e290:	227b      	movs	r2, #123	@ 0x7b
 800e292:	5c9a      	ldrb	r2, [r3, r2]
 800e294:	4bed      	ldr	r3, [pc, #948]	@ (800e64c <tx_control+0xf9c>)
 800e296:	701a      	strb	r2, [r3, #0]
			Bloque_Header[softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800e298:	4beb      	ldr	r3, [pc, #940]	@ (800e648 <tx_control+0xf98>)
 800e29a:	227c      	movs	r2, #124	@ 0x7c
 800e29c:	5c9a      	ldrb	r2, [r3, r2]
 800e29e:	4beb      	ldr	r3, [pc, #940]	@ (800e64c <tx_control+0xf9c>)
 800e2a0:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e2a2:	4bea      	ldr	r3, [pc, #936]	@ (800e64c <tx_control+0xf9c>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e2a8:	4be8      	ldr	r3, [pc, #928]	@ (800e64c <tx_control+0xf9c>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e2ae:	4be7      	ldr	r3, [pc, #924]	@ (800e64c <tx_control+0xf9c>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e2b4:	4be5      	ldr	r3, [pc, #916]	@ (800e64c <tx_control+0xf9c>)
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType]  = 7;				// mov		dataType,#07
 800e2ba:	4be4      	ldr	r3, [pc, #912]	@ (800e64c <tx_control+0xf9c>)
 800e2bc:	2207      	movs	r2, #7
 800e2be:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800e2c0:	4be0      	ldr	r3, [pc, #896]	@ (800e644 <tx_control+0xf94>)
 800e2c2:	781a      	ldrb	r2, [r3, #0]
 800e2c4:	4be1      	ldr	r3, [pc, #900]	@ (800e64c <tx_control+0xf9c>)
 800e2c6:	71da      	strb	r2, [r3, #7]
			flagsTX[2] = 1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800e2c8:	4be1      	ldr	r3, [pc, #900]	@ (800e650 <tx_control+0xfa0>)
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	709a      	strb	r2, [r3, #2]
			//Indica direcciones iniciales de datos a copiar y cantidad de datos (X origen, Y destino, wreg tamaño)
			//copia los datos al buffer de tx

			//ldw		X,#softVersion1
			//ldw		Y,#bufferTxControl
			wreg = 8;// mov		wreg,#8
 800e2ce:	4be1      	ldr	r3, [pc, #900]	@ (800e654 <tx_control+0xfa4>)
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	701a      	strb	r2, [r3, #0]
			copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);// call	copyVector
 800e2d4:	4ae0      	ldr	r2, [pc, #896]	@ (800e658 <tx_control+0xfa8>)
 800e2d6:	4bdd      	ldr	r3, [pc, #884]	@ (800e64c <tx_control+0xf9c>)
 800e2d8:	0011      	movs	r1, r2
 800e2da:	0018      	movs	r0, r3
 800e2dc:	f7f8 fdf8 	bl	8006ed0 <copyVector>

			// Carga información de tiempo UNIX en el buffer a tranmitir
			// ldw		X,timeSeconds_HW
			bufferTxControl[8] = (uint8_t) ((timeSeconds_HW )>>8);	// ldw		bufferTxControl+8,X
 800e2e0:	4bde      	ldr	r3, [pc, #888]	@ (800e65c <tx_control+0xfac>)
 800e2e2:	881b      	ldrh	r3, [r3, #0]
 800e2e4:	0a1b      	lsrs	r3, r3, #8
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	4bdb      	ldr	r3, [pc, #876]	@ (800e658 <tx_control+0xfa8>)
 800e2ec:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] = (uint8_t) (timeSeconds_HW & 0x00FF);
 800e2ee:	4bdb      	ldr	r3, [pc, #876]	@ (800e65c <tx_control+0xfac>)
 800e2f0:	881b      	ldrh	r3, [r3, #0]
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	4bd8      	ldr	r3, [pc, #864]	@ (800e658 <tx_control+0xfa8>)
 800e2f6:	725a      	strb	r2, [r3, #9]
			// ldw		X,timeSeconds_LW
			bufferTxControl[10] = (uint8_t) ((timeSeconds_LW )>>8);	// ldw		bufferTxControl+10,X
 800e2f8:	4bd9      	ldr	r3, [pc, #868]	@ (800e660 <tx_control+0xfb0>)
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	0a1b      	lsrs	r3, r3, #8
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	b2da      	uxtb	r2, r3
 800e302:	4bd5      	ldr	r3, [pc, #852]	@ (800e658 <tx_control+0xfa8>)
 800e304:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] = (uint8_t) (timeSeconds_LW & 0x00FF);
 800e306:	4bd6      	ldr	r3, [pc, #856]	@ (800e660 <tx_control+0xfb0>)
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	b2da      	uxtb	r2, r3
 800e30c:	4bd2      	ldr	r3, [pc, #840]	@ (800e658 <tx_control+0xfa8>)
 800e30e:	72da      	strb	r2, [r3, #11]

			// Añade chksum al buffer a transmiir
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW=0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e310:	4bd4      	ldr	r3, [pc, #848]	@ (800e664 <tx_control+0xfb4>)
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]

			// ldw		X,#bufferTxControl;			/ carga dirección del buffer a calcular chksum
			wreg=0;				// clr		wreg
 800e316:	4bcf      	ldr	r3, [pc, #828]	@ (800e654 <tx_control+0xfa4>)
 800e318:	2200      	movs	r2, #0
 800e31a:	701a      	strb	r2, [r3, #0]
			waux=12;			// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800e31c:	4bd2      	ldr	r3, [pc, #840]	@ (800e668 <tx_control+0xfb8>)
 800e31e:	220c      	movs	r2, #12
 800e320:	701a      	strb	r2, [r3, #0]
			buildChksumBloq(&bufferTxControl[0],waux);	// call	buildChksumBloq
 800e322:	4bd1      	ldr	r3, [pc, #836]	@ (800e668 <tx_control+0xfb8>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	001a      	movs	r2, r3
 800e328:	4bcb      	ldr	r3, [pc, #812]	@ (800e658 <tx_control+0xfa8>)
 800e32a:	0011      	movs	r1, r2
 800e32c:	0018      	movs	r0, r3
 800e32e:	f7f8 fd81 	bl	8006e34 <buildChksumBloq>

			// ldw		X,chksum_HW
			// ldw		bufferTxControl+12,X
			// ldw		X,chksum_LW
			// ldw		bufferTxControl+14,X
			bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800e332:	4bcc      	ldr	r3, [pc, #816]	@ (800e664 <tx_control+0xfb4>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	0e1b      	lsrs	r3, r3, #24
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	4bc7      	ldr	r3, [pc, #796]	@ (800e658 <tx_control+0xfa8>)
 800e33c:	731a      	strb	r2, [r3, #12]
			bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800e33e:	4bc9      	ldr	r3, [pc, #804]	@ (800e664 <tx_control+0xfb4>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	0c1b      	lsrs	r3, r3, #16
 800e344:	b2da      	uxtb	r2, r3
 800e346:	4bc4      	ldr	r3, [pc, #784]	@ (800e658 <tx_control+0xfa8>)
 800e348:	735a      	strb	r2, [r3, #13]
			bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800e34a:	4bc6      	ldr	r3, [pc, #792]	@ (800e664 <tx_control+0xfb4>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	0a1b      	lsrs	r3, r3, #8
 800e350:	b2da      	uxtb	r2, r3
 800e352:	4bc1      	ldr	r3, [pc, #772]	@ (800e658 <tx_control+0xfa8>)
 800e354:	739a      	strb	r2, [r3, #14]
			bufferTxControl[15] = (uint8_t) (chksum_32_HW_LW & 0x000000FF);
 800e356:	4bc3      	ldr	r3, [pc, #780]	@ (800e664 <tx_control+0xfb4>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	b2da      	uxtb	r2, r3
 800e35c:	4bbe      	ldr	r3, [pc, #760]	@ (800e658 <tx_control+0xfa8>)
 800e35e:	73da      	strb	r2, [r3, #15]

			// ldw		X,#bufferTxControl
			pointTx = &bufferTxControl[0];			// ldw		pointTx,X
 800e360:	4bc2      	ldr	r3, [pc, #776]	@ (800e66c <tx_control+0xfbc>)
 800e362:	4abd      	ldr	r2, [pc, #756]	@ (800e658 <tx_control+0xfa8>)
 800e364:	601a      	str	r2, [r3, #0]
			pointInitTx = &bufferTxControl[0];		// ldw		pointInitTx,X
 800e366:	4bc2      	ldr	r3, [pc, #776]	@ (800e670 <tx_control+0xfc0>)
 800e368:	4abb      	ldr	r2, [pc, #748]	@ (800e658 <tx_control+0xfa8>)
 800e36a:	601a      	str	r2, [r3, #0]
			// ldw		X,#(bufferTxControl+16)
			pointEndTx = &bufferTxControl[16];		// ldw		pointEndTx,X
 800e36c:	4bc1      	ldr	r3, [pc, #772]	@ (800e674 <tx_control+0xfc4>)
 800e36e:	4ac2      	ldr	r2, [pc, #776]	@ (800e678 <tx_control+0xfc8>)
 800e370:	601a      	str	r2, [r3, #0]
			blockSizeTX = 16; 						// mov		blockSizeTX,#16
 800e372:	4bb4      	ldr	r3, [pc, #720]	@ (800e644 <tx_control+0xf94>)
 800e374:	2210      	movs	r2, #16
 800e376:	701a      	strb	r2, [r3, #0]

			flagsTX[2] = 0; 						// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800e378:	4bb5      	ldr	r3, [pc, #724]	@ (800e650 <tx_control+0xfa0>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	709a      	strb	r2, [r3, #2]
			flagsTX[3] = 1;							// bset	flagsTX,#3;						/ evita enviar chksum
 800e37e:	4bb4      	ldr	r3, [pc, #720]	@ (800e650 <tx_control+0xfa0>)
 800e380:	2201      	movs	r2, #1
 800e382:	70da      	strb	r2, [r3, #3]

			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800e384:	4bbd      	ldr	r3, [pc, #756]	@ (800e67c <tx_control+0xfcc>)
 800e386:	2255      	movs	r2, #85	@ 0x55
 800e388:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800e38a:	4bac      	ldr	r3, [pc, #688]	@ (800e63c <tx_control+0xf8c>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	701a      	strb	r2, [r3, #0]

fin_tx_read_timeUNIX:
			goto end_tx_control;				//jp		end_tx_control
 800e390:	f001 fa35 	bl	800f7fe <tx_control+0x214e>
				goto ask_tx_control_16;//	jrne ask_tx_control_16
 800e394:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5C){//cp A,#$5C
 800e396:	4ba9      	ldr	r3, [pc, #676]	@ (800e63c <tx_control+0xf8c>)
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	2b5c      	cmp	r3, #92	@ 0x5c
 800e39c:	d132      	bne.n	800e404 <tx_control+0xd54>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e39e:	4ba8      	ldr	r3, [pc, #672]	@ (800e640 <tx_control+0xf90>)
 800e3a0:	22f0      	movs	r2, #240	@ 0xf0
 800e3a2:	701a      	strb	r2, [r3, #0]
			goto tx_timeBCD;//jp tx_timeBCD
 800e3a4:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_timeBCD:
// checa el chksum
			// clrw	X
			// ldw		chksum_HW,X
			chksum_32_HW_LW = 0;	// ldw		chksum_LW,X;					/ limpia registros de checksum
 800e3a6:	4baf      	ldr	r3, [pc, #700]	@ (800e664 <tx_control+0xfb4>)
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]

			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			wreg = 0; 				// clr		wreg
 800e3ac:	4ba9      	ldr	r3, [pc, #676]	@ (800e654 <tx_control+0xfa4>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
			waux = 11;				// mov 	waux,#11;							/ tamaño del bloque a calcular el chksum
 800e3b2:	4bad      	ldr	r3, [pc, #692]	@ (800e668 <tx_control+0xfb8>)
 800e3b4:	220b      	movs	r2, #11
 800e3b6:	701a      	strb	r2, [r3, #0]
			// toma los datos de tiempo
			// ldw		X,#RxBuffer_Ble;			/ carga dirección del buffer de recepción
			// addw	X,#2;
			// ldw		X,tempo2;
			// cpw		X,chksum_LW;
			buildChksumBloq(&RxBuffer_Ble[0],11);		// call	buildChksumBloq
 800e3b8:	4bb1      	ldr	r3, [pc, #708]	@ (800e680 <tx_control+0xfd0>)
 800e3ba:	210b      	movs	r1, #11
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f7f8 fd39 	bl	8006e34 <buildChksumBloq>
			chksum_to_compare = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[11])  <<24;
 800e3c6:	4bae      	ldr	r3, [pc, #696]	@ (800e680 <tx_control+0xfd0>)
 800e3c8:	7adb      	ldrb	r3, [r3, #11]
 800e3ca:	061b      	lsls	r3, r3, #24
 800e3cc:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[12]) <<16;
 800e3ce:	4bac      	ldr	r3, [pc, #688]	@ (800e680 <tx_control+0xfd0>)
 800e3d0:	7b1b      	ldrb	r3, [r3, #12]
 800e3d2:	041b      	lsls	r3, r3, #16
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	18d3      	adds	r3, r2, r3
 800e3d8:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[13]) <<8;
 800e3da:	4ba9      	ldr	r3, [pc, #676]	@ (800e680 <tx_control+0xfd0>)
 800e3dc:	7b5b      	ldrb	r3, [r3, #13]
 800e3de:	021b      	lsls	r3, r3, #8
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	18d3      	adds	r3, r2, r3
 800e3e4:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[14]);
 800e3e6:	4ba6      	ldr	r3, [pc, #664]	@ (800e680 <tx_control+0xfd0>)
 800e3e8:	7b9b      	ldrb	r3, [r3, #14]
 800e3ea:	001a      	movs	r2, r3
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	189b      	adds	r3, r3, r2
 800e3f0:	60bb      	str	r3, [r7, #8]

			if(chksum_to_compare!= chksum_32_HW_LW){// jrne	tx_timeBCD_error;			/ si no iguales sal sin modificar Geolocalización
 800e3f2:	4b9c      	ldr	r3, [pc, #624]	@ (800e664 <tx_control+0xfb4>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d101      	bne.n	800e400 <tx_control+0xd50>
 800e3fc:	f001 f95e 	bl	800f6bc <tx_control+0x200c>
				goto tx_timeBCD_error;
 800e400:	f001 f9dc 	bl	800f7bc <tx_control+0x210c>
				goto ask_tx_control_17;//jrne	ask_tx_control_17
 800e404:	46c0      	nop			@ (mov r8, r8)
			if(codeTX != 0x5F){//cp		A,#$5F
 800e406:	4b8d      	ldr	r3, [pc, #564]	@ (800e63c <tx_control+0xf8c>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b5f      	cmp	r3, #95	@ 0x5f
 800e40c:	d142      	bne.n	800e494 <tx_control+0xde4>
			timeOutRst = 240;//mov timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e40e:	4b8c      	ldr	r3, [pc, #560]	@ (800e640 <tx_control+0xf90>)
 800e410:	22f0      	movs	r2, #240	@ 0xf0
 800e412:	701a      	strb	r2, [r3, #0]
			goto tx_infoReloj;//jp		tx_infoReloj
 800e414:	46c0      	nop			@ (mov r8, r8)
			//typeClock = 0;					// mov		typeClock,#0;				Reloj interno
			// ;mov		typeClock,#1;				Reloj con señal de CA
			//if(!flagsTime[f_timeConfigRTC]){// btjf		flagsTime,#f_timeConfigRTC,noCristal;// Ya se configuro RTC ? no, no actualices tiempos
			//	goto noCristal;
			//}
			typeClock = 2;					// mov		typeClock,#2;				Reloj cristal
 800e416:	4b9b      	ldr	r3, [pc, #620]	@ (800e684 <tx_control+0xfd4>)
 800e418:	2202      	movs	r2, #2
 800e41a:	701a      	strb	r2, [r3, #0]
//noCristal:

			// ldw		X,#typeClock;				/ inicio del bloque
			pointTx = &typeClock ;				// ldw		pointTx,X
 800e41c:	4b93      	ldr	r3, [pc, #588]	@ (800e66c <tx_control+0xfbc>)
 800e41e:	4a99      	ldr	r2, [pc, #612]	@ (800e684 <tx_control+0xfd4>)
 800e420:	601a      	str	r2, [r3, #0]
			pointInitTx = &typeClock;			// ldw		pointInitTx,X
 800e422:	4b93      	ldr	r3, [pc, #588]	@ (800e670 <tx_control+0xfc0>)
 800e424:	4a97      	ldr	r2, [pc, #604]	@ (800e684 <tx_control+0xfd4>)
 800e426:	601a      	str	r2, [r3, #0]
			// ldw		X,#(typeClock + 1);				/ fin del bloque
			pointEndTx = pointInitTx + 1;// ldw		pointEndTx,X
 800e428:	4b91      	ldr	r3, [pc, #580]	@ (800e670 <tx_control+0xfc0>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	1c5a      	adds	r2, r3, #1
 800e42e:	4b91      	ldr	r3, [pc, #580]	@ (800e674 <tx_control+0xfc4>)
 800e430:	601a      	str	r2, [r3, #0]
			blockSizeTX = 1;// mov		blockSizeTX,#1;				/ tamaño del bloque
 800e432:	4b84      	ldr	r3, [pc, #528]	@ (800e644 <tx_control+0xf94>)
 800e434:	2201      	movs	r2, #1
 800e436:	701a      	strb	r2, [r3, #0]

			//; Carga datos de Header
			Bloque_Header [softVersion1] = Plantilla[version1];	 // mov		softVersion1,version1
 800e438:	4b83      	ldr	r3, [pc, #524]	@ (800e648 <tx_control+0xf98>)
 800e43a:	227b      	movs	r2, #123	@ 0x7b
 800e43c:	5c9a      	ldrb	r2, [r3, r2]
 800e43e:	4b83      	ldr	r3, [pc, #524]	@ (800e64c <tx_control+0xf9c>)
 800e440:	701a      	strb	r2, [r3, #0]
			Bloque_Header [softVersion2] = Plantilla[version2];	// mov		softVersion2,version2;	/ Carga versión del firmware
 800e442:	4b81      	ldr	r3, [pc, #516]	@ (800e648 <tx_control+0xf98>)
 800e444:	227c      	movs	r2, #124	@ 0x7c
 800e446:	5c9a      	ldrb	r2, [r3, r2]
 800e448:	4b80      	ldr	r3, [pc, #512]	@ (800e64c <tx_control+0xf9c>)
 800e44a:	705a      	strb	r2, [r3, #1]

			//ldw		X,#0
			//ldw		bufferSize_HW,X
			Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e44c:	4b7f      	ldr	r3, [pc, #508]	@ (800e64c <tx_control+0xf9c>)
 800e44e:	2200      	movs	r2, #0
 800e450:	709a      	strb	r2, [r3, #2]
			Bloque_Header [bufferSize_3] = lowByte(0);
 800e452:	4b7e      	ldr	r3, [pc, #504]	@ (800e64c <tx_control+0xf9c>)
 800e454:	2200      	movs	r2, #0
 800e456:	70da      	strb	r2, [r3, #3]

			//ldw	X,#1
			Bloque_Header [bufferSize_2] = highByte(1); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e458:	4b7c      	ldr	r3, [pc, #496]	@ (800e64c <tx_control+0xf9c>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	711a      	strb	r2, [r3, #4]
			Bloque_Header [bufferSize_1] = lowByte(1);
 800e45e:	4b7b      	ldr	r3, [pc, #492]	@ (800e64c <tx_control+0xf9c>)
 800e460:	2201      	movs	r2, #1
 800e462:	715a      	strb	r2, [r3, #5]

			Bloque_Header[dataType] = 9;				// mov		dataType,#09
 800e464:	4b79      	ldr	r3, [pc, #484]	@ (800e64c <tx_control+0xf9c>)
 800e466:	2209      	movs	r2, #9
 800e468:	719a      	strb	r2, [r3, #6]
			Bloque_Header[dataSize] = blockSizeTX;		// mov		dataSize,blockSizeTX
 800e46a:	4b76      	ldr	r3, [pc, #472]	@ (800e644 <tx_control+0xf94>)
 800e46c:	781a      	ldrb	r2, [r3, #0]
 800e46e:	4b77      	ldr	r3, [pc, #476]	@ (800e64c <tx_control+0xf9c>)
 800e470:	71da      	strb	r2, [r3, #7]
			flagsTX[2]=1;								// bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800e472:	4b77      	ldr	r3, [pc, #476]	@ (800e650 <tx_control+0xfa0>)
 800e474:	2201      	movs	r2, #1
 800e476:	709a      	strb	r2, [r3, #2]

			//clrw	X
			//ldw		chksum_HW,X
			chksum_32_HW_LW = 0; 	//ldw		chksum_LW,X;					/ limpia registros de checksum
 800e478:	4b7a      	ldr	r3, [pc, #488]	@ (800e664 <tx_control+0xfb4>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	601a      	str	r2, [r3, #0]
			flagsTX[3]=0;			// bres	flagsTX,#3;						/ indica que no se ha enviado el checksum
 800e47e:	4b74      	ldr	r3, [pc, #464]	@ (800e650 <tx_control+0xfa0>)
 800e480:	2200      	movs	r2, #0
 800e482:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800e484:	4b7d      	ldr	r3, [pc, #500]	@ (800e67c <tx_control+0xfcc>)
 800e486:	2255      	movs	r2, #85	@ 0x55
 800e488:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800e48a:	4b6c      	ldr	r3, [pc, #432]	@ (800e63c <tx_control+0xf8c>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	701a      	strb	r2, [r3, #0]

fin_tx_infoReloj:
			goto end_tx_control;		//jp		end_tx_control
 800e490:	f001 f9b5 	bl	800f7fe <tx_control+0x214e>
				goto ask_tx_control_18;//jrne	ask_tx_control_17
 800e494:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x62)//jrne	ask_tx_control_19
 800e496:	4b69      	ldr	r3, [pc, #420]	@ (800e63c <tx_control+0xf8c>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	2b62      	cmp	r3, #98	@ 0x62
 800e49c:	d10b      	bne.n	800e4b6 <tx_control+0xe06>
			timeOutRst = 240; //mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e49e:	4b68      	ldr	r3, [pc, #416]	@ (800e640 <tx_control+0xf90>)
 800e4a0:	22f0      	movs	r2, #240	@ 0xf0
 800e4a2:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_datalogger;//jp		tx_wifi_datalogger
 800e4a4:	46c0      	nop			@ (mov r8, r8)
//----------------------------------------------------------
tx_wifi_datalogger:

			flagsWIFI[f_timeLoggerSend] = 1;	//bset		flagsWIFI,#f_timeLoggerSend;
 800e4a6:	4b78      	ldr	r3, [pc, #480]	@ (800e688 <tx_control+0xfd8>)
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	705a      	strb	r2, [r3, #1]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800e4ac:	4b63      	ldr	r3, [pc, #396]	@ (800e63c <tx_control+0xf8c>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800e4b2:	f001 f9a4 	bl	800f7fe <tx_control+0x214e>
				goto ask_tx_control_19;
 800e4b6:	46c0      	nop			@ (mov r8, r8)
			if(codeTX!= 0x63)//jrne	ask_tx_control_20
 800e4b8:	4b60      	ldr	r3, [pc, #384]	@ (800e63c <tx_control+0xf8c>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	2b63      	cmp	r3, #99	@ 0x63
 800e4be:	d10f      	bne.n	800e4e0 <tx_control+0xe30>
			timeOutRst = 240;		//mov		timeOutRst,#240;				// carga time out de resetcon 240 segundos
 800e4c0:	4b5f      	ldr	r3, [pc, #380]	@ (800e640 <tx_control+0xf90>)
 800e4c2:	22f0      	movs	r2, #240	@ 0xf0
 800e4c4:	701a      	strb	r2, [r3, #0]
			goto tx_wifi_eventlogger;//jp		tx_wifi_eventlogger
 800e4c6:	46c0      	nop			@ (mov r8, r8)

//;----------------------------------------------------------
tx_wifi_eventlogger:
			flagsWIFI[f_eventLoggerSend] = 1;	//bset		flagsWIFI,#f_eventLoggerSend;
 800e4c8:	4b6f      	ldr	r3, [pc, #444]	@ (800e688 <tx_control+0xfd8>)
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	709a      	strb	r2, [r3, #2]
			codeTX = 0;							//clr		codeTX;								/ limpia código de Tx
 800e4ce:	4b5b      	ldr	r3, [pc, #364]	@ (800e63c <tx_control+0xf8c>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	701a      	strb	r2, [r3, #0]

			goto end_tx_control;				//jp		end_tx_control
 800e4d4:	f001 f993 	bl	800f7fe <tx_control+0x214e>
		goto jmp_tx_wifi;//  jp jmp_tx_wifi;
 800e4d8:	46c0      	nop			@ (mov r8, r8)
 800e4da:	e002      	b.n	800e4e2 <tx_control+0xe32>
		goto jmp_tx_wifi;//jp jmp_tx_wifi / no, continua
 800e4dc:	46c0      	nop			@ (mov r8, r8)
 800e4de:	e000      	b.n	800e4e2 <tx_control+0xe32>
				goto ask_tx_control_20;
 800e4e0:	46c0      	nop			@ (mov r8, r8)
			goto	tx_wifi;			//jp		tx_wifi
 800e4e2:	46c0      	nop			@ (mov r8, r8)

		//if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){ // btjt 		PE_IDR,#wifi_connect,tx_wifi_OK
		//	goto tx_wifi_OK;
		//}
		//; logger, telemetria y eventos por servidor solo están permitidos con comunicación WiFi seleccionada
		if(flagsTxControl[f_select])//btjt		flagsTxControl,#f_select,tx_wifi_01
 800e4e4:	4b69      	ldr	r3, [pc, #420]	@ (800e68c <tx_control+0xfdc>)
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d101      	bne.n	800e4f0 <tx_control+0xe40>
 800e4ec:	f002 fa87 	bl	80109fe <tx_control+0x334e>
			goto tx_wifi_01;
 800e4f0:	f001 f9ab 	bl	800f84a <tx_control+0x219a>
	     	point_Y[i] = point_X[i];
 800e4f4:	203c      	movs	r0, #60	@ 0x3c
 800e4f6:	183b      	adds	r3, r7, r0
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4fc:	18d2      	adds	r2, r2, r3
 800e4fe:	183b      	adds	r3, r7, r0
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e504:	18cb      	adds	r3, r1, r3
 800e506:	7812      	ldrb	r2, [r2, #0]
 800e508:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < size_handshake ; i++ )
 800e50a:	183b      	adds	r3, r7, r0
 800e50c:	781a      	ldrb	r2, [r3, #0]
 800e50e:	183b      	adds	r3, r7, r0
 800e510:	3201      	adds	r2, #1
 800e512:	701a      	strb	r2, [r3, #0]
 800e514:	233c      	movs	r3, #60	@ 0x3c
 800e516:	18fb      	adds	r3, r7, r3
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	2b14      	cmp	r3, #20
 800e51c:	d9ea      	bls.n	800e4f4 <tx_control+0xe44>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800e51e:	4b51      	ldr	r3, [pc, #324]	@ (800e664 <tx_control+0xfb4>)
 800e520:	2200      	movs	r2, #0
 800e522:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];
 800e524:	4b4c      	ldr	r3, [pc, #304]	@ (800e658 <tx_control+0xfa8>)
 800e526:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, size_handshake);
 800e528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e52a:	2115      	movs	r1, #21
 800e52c:	0018      	movs	r0, r3
 800e52e:	f7f8 fc81 	bl	8006e34 <buildChksumBloq>
		asm ("nop");
 800e532:	46c0      	nop			@ (mov r8, r8)
		bufferTxControl [size_handshake+0] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800e534:	4b4b      	ldr	r3, [pc, #300]	@ (800e664 <tx_control+0xfb4>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	0e1b      	lsrs	r3, r3, #24
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	4b46      	ldr	r3, [pc, #280]	@ (800e658 <tx_control+0xfa8>)
 800e53e:	755a      	strb	r2, [r3, #21]
		bufferTxControl [size_handshake+1] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800e540:	4b48      	ldr	r3, [pc, #288]	@ (800e664 <tx_control+0xfb4>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	0c1b      	lsrs	r3, r3, #16
 800e546:	b2da      	uxtb	r2, r3
 800e548:	4b43      	ldr	r3, [pc, #268]	@ (800e658 <tx_control+0xfa8>)
 800e54a:	759a      	strb	r2, [r3, #22]
		bufferTxControl [size_handshake+2] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800e54c:	4b45      	ldr	r3, [pc, #276]	@ (800e664 <tx_control+0xfb4>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	0a1b      	lsrs	r3, r3, #8
 800e552:	b2da      	uxtb	r2, r3
 800e554:	4b40      	ldr	r3, [pc, #256]	@ (800e658 <tx_control+0xfa8>)
 800e556:	75da      	strb	r2, [r3, #23]
		bufferTxControl [size_handshake+3] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800e558:	4b42      	ldr	r3, [pc, #264]	@ (800e664 <tx_control+0xfb4>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	4b3e      	ldr	r3, [pc, #248]	@ (800e658 <tx_control+0xfa8>)
 800e560:	761a      	strb	r2, [r3, #24]
	    pointTx = &bufferTxControl[0];
 800e562:	4b42      	ldr	r3, [pc, #264]	@ (800e66c <tx_control+0xfbc>)
 800e564:	4a3c      	ldr	r2, [pc, #240]	@ (800e658 <tx_control+0xfa8>)
 800e566:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800e568:	4b41      	ldr	r3, [pc, #260]	@ (800e670 <tx_control+0xfc0>)
 800e56a:	4a3b      	ldr	r2, [pc, #236]	@ (800e658 <tx_control+0xfa8>)
 800e56c:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [size_handshake + 4];
 800e56e:	4b41      	ldr	r3, [pc, #260]	@ (800e674 <tx_control+0xfc4>)
 800e570:	4a47      	ldr	r2, [pc, #284]	@ (800e690 <tx_control+0xfe0>)
 800e572:	601a      	str	r2, [r3, #0]
	    blockSizeTX = size_handshake + 4;   //4 bytes Checksum
 800e574:	4b33      	ldr	r3, [pc, #204]	@ (800e644 <tx_control+0xf94>)
 800e576:	2219      	movs	r2, #25
 800e578:	701a      	strb	r2, [r3, #0]
		flagsTX [4] = 1;					// Indica que ya hubo un handshake
 800e57a:	4b35      	ldr	r3, [pc, #212]	@ (800e650 <tx_control+0xfa0>)
 800e57c:	2201      	movs	r2, #1
 800e57e:	711a      	strb	r2, [r3, #4]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800e580:	4b33      	ldr	r3, [pc, #204]	@ (800e650 <tx_control+0xfa0>)
 800e582:	2200      	movs	r2, #0
 800e584:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800e586:	4b37      	ldr	r3, [pc, #220]	@ (800e664 <tx_control+0xfb4>)
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]
		flagsTX [3] = 1;					// indica que no se tiene que mandar checksum
 800e58c:	4b30      	ldr	r3, [pc, #192]	@ (800e650 <tx_control+0xfa0>)
 800e58e:	2201      	movs	r2, #1
 800e590:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800e592:	4b3a      	ldr	r3, [pc, #232]	@ (800e67c <tx_control+0xfcc>)
 800e594:	2255      	movs	r2, #85	@ 0x55
 800e596:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;						// limpia código de Tx
 800e598:	4b28      	ldr	r3, [pc, #160]	@ (800e63c <tx_control+0xf8c>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	701a      	strb	r2, [r3, #0]
		goto	end_tx_control;			//jp		end_tx_control
 800e59e:	f001 f92e 	bl	800f7fe <tx_control+0x214e>
		flagsTX [0] = 1;//bset	flagsTX,#0;						/ toma en cuenta que la memoria ya se llenó al menos una vez
 800e5a2:	4b2b      	ldr	r3, [pc, #172]	@ (800e650 <tx_control+0xfa0>)
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//	mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800e5a8:	4b26      	ldr	r3, [pc, #152]	@ (800e644 <tx_control+0xf94>)
 800e5aa:	2208      	movs	r2, #8
 800e5ac:	701a      	strb	r2, [r3, #0]
		flagsLogger[5] = 1;//	bset flagsLogger,#5;				/ cancela loggeo de datos hasta que terminé la Tx
 800e5ae:	4b39      	ldr	r3, [pc, #228]	@ (800e694 <tx_control+0xfe4>)
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	715a      	strb	r2, [r3, #5]
		loggerStart = &dataLogger[0]; //	ldw	loggerStart,X
 800e5b4:	4b38      	ldr	r3, [pc, #224]	@ (800e698 <tx_control+0xfe8>)
 800e5b6:	4a39      	ldr	r2, [pc, #228]	@ (800e69c <tx_control+0xfec>)
 800e5b8:	601a      	str	r2, [r3, #0]
		point_X = &dataLoggerFin; //	ldw	X,#dataLoggerFin
 800e5ba:	4b39      	ldr	r3, [pc, #228]	@ (800e6a0 <tx_control+0xff0>)
 800e5bc:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;		//incw X ******************************************
 800e5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;	//	ldw	loggerEnd,X
 800e5c4:	4b37      	ldr	r3, [pc, #220]	@ (800e6a4 <tx_control+0xff4>)
 800e5c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5c8:	601a      	str	r2, [r3, #0]
		numBlock = 96; //mov	numBlock,#96
 800e5ca:	4b37      	ldr	r3, [pc, #220]	@ (800e6a8 <tx_control+0xff8>)
 800e5cc:	2260      	movs	r2, #96	@ 0x60
 800e5ce:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegDATA;	//ldw	cntReg,X
 800e5d0:	4b36      	ldr	r3, [pc, #216]	@ (800e6ac <tx_control+0xffc>)
 800e5d2:	881a      	ldrh	r2, [r3, #0]
 800e5d4:	4b36      	ldr	r3, [pc, #216]	@ (800e6b0 <tx_control+0x1000>)
 800e5d6:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegDATA;//ldw	cntRegPNT,X
 800e5d8:	4b36      	ldr	r3, [pc, #216]	@ (800e6b4 <tx_control+0x1004>)
 800e5da:	4a37      	ldr	r2, [pc, #220]	@ (800e6b8 <tx_control+0x1008>)
 800e5dc:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();	//call	prepTXlogg_2;
 800e5de:	f002 fa5f 	bl	8010aa0 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800e5e2:	4b19      	ldr	r3, [pc, #100]	@ (800e648 <tx_control+0xf98>)
 800e5e4:	227b      	movs	r2, #123	@ 0x7b
 800e5e6:	5c9a      	ldrb	r2, [r3, r2]
 800e5e8:	4b18      	ldr	r3, [pc, #96]	@ (800e64c <tx_control+0xf9c>)
 800e5ea:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];//mov softVersion2,version2;	/ Carga versión del firmware
 800e5ec:	4b16      	ldr	r3, [pc, #88]	@ (800e648 <tx_control+0xf98>)
 800e5ee:	227c      	movs	r2, #124	@ 0x7c
 800e5f0:	5c9a      	ldrb	r2, [r3, r2]
 800e5f2:	4b16      	ldr	r3, [pc, #88]	@ (800e64c <tx_control+0xf9c>)
 800e5f4:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);//ldw	bufferSize_HW,X
 800e5f6:	4b15      	ldr	r3, [pc, #84]	@ (800e64c <tx_control+0xf9c>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800e5fc:	4b13      	ldr	r3, [pc, #76]	@ (800e64c <tx_control+0xf9c>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = highByte(1344);	// bufferSize_LW
 800e602:	4b12      	ldr	r3, [pc, #72]	@ (800e64c <tx_control+0xf9c>)
 800e604:	2205      	movs	r2, #5
 800e606:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = lowByte(1344);
 800e608:	4b10      	ldr	r3, [pc, #64]	@ (800e64c <tx_control+0xf9c>)
 800e60a:	2240      	movs	r2, #64	@ 0x40
 800e60c:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 1; //mov	dataType,#01
 800e60e:	4b0f      	ldr	r3, [pc, #60]	@ (800e64c <tx_control+0xf9c>)
 800e610:	2201      	movs	r2, #1
 800e612:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = 9; //mov	dataSize,#9
 800e614:	4b0d      	ldr	r3, [pc, #52]	@ (800e64c <tx_control+0xf9c>)
 800e616:	2209      	movs	r2, #9
 800e618:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; //bset flagsTX,#2;	// Indica que hay que transmitir Header
 800e61a:	4b0d      	ldr	r3, [pc, #52]	@ (800e650 <tx_control+0xfa0>)
 800e61c:	2201      	movs	r2, #1
 800e61e:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 800e620:	4b10      	ldr	r3, [pc, #64]	@ (800e664 <tx_control+0xfb4>)
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 0;			//bres	flagsTX,#3;			/ indica que no se ha enciado el checksum
 800e626:	4b0a      	ldr	r3, [pc, #40]	@ (800e650 <tx_control+0xfa0>)
 800e628:	2200      	movs	r2, #0
 800e62a:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;			//mov keyTx,#$55;		/ listo para mandar transmisión
 800e62c:	4b13      	ldr	r3, [pc, #76]	@ (800e67c <tx_control+0xfcc>)
 800e62e:	2255      	movs	r2, #85	@ 0x55
 800e630:	701a      	strb	r2, [r3, #0]
		codeTX = 0;				//clr codeTX;		/ limpia código de Tx
 800e632:	4b02      	ldr	r3, [pc, #8]	@ (800e63c <tx_control+0xf8c>)
 800e634:	2200      	movs	r2, #0
 800e636:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;//jp end_tx_control
 800e638:	f001 f8e1 	bl	800f7fe <tx_control+0x214e>
 800e63c:	20000e24 	.word	0x20000e24
 800e640:	20000ee5 	.word	0x20000ee5
 800e644:	20000e30 	.word	0x20000e30
 800e648:	200000b8 	.word	0x200000b8
 800e64c:	20000dd8 	.word	0x20000dd8
 800e650:	20000e1c 	.word	0x20000e1c
 800e654:	20000b55 	.word	0x20000b55
 800e658:	20000fa8 	.word	0x20000fa8
 800e65c:	20000db0 	.word	0x20000db0
 800e660:	20000db2 	.word	0x20000db2
 800e664:	20000e34 	.word	0x20000e34
 800e668:	20000b54 	.word	0x20000b54
 800e66c:	20000e14 	.word	0x20000e14
 800e670:	20000e0c 	.word	0x20000e0c
 800e674:	20000e10 	.word	0x20000e10
 800e678:	20000fb8 	.word	0x20000fb8
 800e67c:	20000e19 	.word	0x20000e19
 800e680:	20000984 	.word	0x20000984
 800e684:	200010b1 	.word	0x200010b1
 800e688:	20000f50 	.word	0x20000f50
 800e68c:	200010ec 	.word	0x200010ec
 800e690:	20000fc1 	.word	0x20000fc1
 800e694:	20000e04 	.word	0x20000e04
 800e698:	20000e28 	.word	0x20000e28
 800e69c:	0803c000 	.word	0x0803c000
 800e6a0:	0803efff 	.word	0x0803efff
 800e6a4:	20000e2c 	.word	0x20000e2c
 800e6a8:	20000d9d 	.word	0x20000d9d
 800e6ac:	2000103a 	.word	0x2000103a
 800e6b0:	2000103e 	.word	0x2000103e
 800e6b4:	20001040 	.word	0x20001040
 800e6b8:	0803f810 	.word	0x0803f810
		flagsTX[0] = 1;//bset	flagsTX,#0;		/ toma en cuenta que la memoria ya se llenó al menos una vez
 800e6bc:	4bcd      	ldr	r3, [pc, #820]	@ (800e9f4 <tx_control+0x1344>)
 800e6be:	2201      	movs	r2, #1
 800e6c0:	701a      	strb	r2, [r3, #0]
		blockSizeTX = 8;//mov	blockSizeTX,#8;				/ Indica que el tamaño de los bloques de transmisión
 800e6c2:	4bcd      	ldr	r3, [pc, #820]	@ (800e9f8 <tx_control+0x1348>)
 800e6c4:	2208      	movs	r2, #8
 800e6c6:	701a      	strb	r2, [r3, #0]
		flagsLogger[4] = 1;//bset	flagsLogger,#4;				/ cancela loggeo de eventos hasta que terminé la Tx
 800e6c8:	4bcc      	ldr	r3, [pc, #816]	@ (800e9fc <tx_control+0x134c>)
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	711a      	strb	r2, [r3, #4]
		loggerStart = &eventLogger[0];
 800e6ce:	4bcc      	ldr	r3, [pc, #816]	@ (800ea00 <tx_control+0x1350>)
 800e6d0:	4acc      	ldr	r2, [pc, #816]	@ (800ea04 <tx_control+0x1354>)
 800e6d2:	601a      	str	r2, [r3, #0]
		point_X = &eventLoggerFin;		//ldw	X,#eventLoggerFin
 800e6d4:	4bcc      	ldr	r3, [pc, #816]	@ (800ea08 <tx_control+0x1358>)
 800e6d6:	647b      	str	r3, [r7, #68]	@ 0x44
		point_X++;						//incw	X ******************
 800e6d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6da:	3301      	adds	r3, #1
 800e6dc:	647b      	str	r3, [r7, #68]	@ 0x44
		loggerEnd = point_X;			//ldw	loggerEnd,X
 800e6de:	4bcb      	ldr	r3, [pc, #812]	@ (800ea0c <tx_control+0x135c>)
 800e6e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6e2:	601a      	str	r2, [r3, #0]
		numBlock = 160;//mov numBlock,#160;	/ número máximo de bloque a guardar del logger de eventos (96 bloques de  128 bytes = 12kb )
 800e6e4:	4bca      	ldr	r3, [pc, #808]	@ (800ea10 <tx_control+0x1360>)
 800e6e6:	22a0      	movs	r2, #160	@ 0xa0
 800e6e8:	701a      	strb	r2, [r3, #0]
		cntReg = cntRegEVENT;			//ldw	cntReg,X
 800e6ea:	4bca      	ldr	r3, [pc, #808]	@ (800ea14 <tx_control+0x1364>)
 800e6ec:	881a      	ldrh	r2, [r3, #0]
 800e6ee:	4bca      	ldr	r3, [pc, #808]	@ (800ea18 <tx_control+0x1368>)
 800e6f0:	801a      	strh	r2, [r3, #0]
		cntRegPNT = &eeCntRegEVENT;		//ldw	cntRegPNT,X
 800e6f2:	4bca      	ldr	r3, [pc, #808]	@ (800ea1c <tx_control+0x136c>)
 800e6f4:	4aca      	ldr	r2, [pc, #808]	@ (800ea20 <tx_control+0x1370>)
 800e6f6:	601a      	str	r2, [r3, #0]
		prepTXlogg_2();		//call	prepTXlogg_2;
 800e6f8:	f002 f9d2 	bl	8010aa0 <prepTXlogg_2>
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800e6fc:	4bc9      	ldr	r3, [pc, #804]	@ (800ea24 <tx_control+0x1374>)
 800e6fe:	227b      	movs	r2, #123	@ 0x7b
 800e700:	5c9a      	ldrb	r2, [r3, r2]
 800e702:	4bc9      	ldr	r3, [pc, #804]	@ (800ea28 <tx_control+0x1378>)
 800e704:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];	////mov	softVersion2,version2;	/ Carga versión del firmware
 800e706:	4bc7      	ldr	r3, [pc, #796]	@ (800ea24 <tx_control+0x1374>)
 800e708:	227c      	movs	r2, #124	@ 0x7c
 800e70a:	5c9a      	ldrb	r2, [r3, r2]
 800e70c:	4bc6      	ldr	r3, [pc, #792]	@ (800ea28 <tx_control+0x1378>)
 800e70e:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = highByte(0);	//*************** ????
 800e710:	4bc5      	ldr	r3, [pc, #788]	@ (800ea28 <tx_control+0x1378>)
 800e712:	2200      	movs	r2, #0
 800e714:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = lowByte(0);
 800e716:	4bc4      	ldr	r3, [pc, #784]	@ (800ea28 <tx_control+0x1378>)
 800e718:	2200      	movs	r2, #0
 800e71a:	70da      	strb	r2, [r3, #3]
 	 	 Bloque_Header [bufferSize_2] = highByte(1440); //ldw	bufferSize_LW,X; / carga el número de registros en caso de memoria llena
 800e71c:	4bc2      	ldr	r3, [pc, #776]	@ (800ea28 <tx_control+0x1378>)
 800e71e:	2205      	movs	r2, #5
 800e720:	711a      	strb	r2, [r3, #4]
 	 	 Bloque_Header [bufferSize_1] = lowByte(1440);
 800e722:	4bc1      	ldr	r3, [pc, #772]	@ (800ea28 <tx_control+0x1378>)
 800e724:	22a0      	movs	r2, #160	@ 0xa0
 800e726:	715a      	strb	r2, [r3, #5]
 	 	 Bloque_Header [dataType] = 2;//mov dataType,#02
 800e728:	4bbf      	ldr	r3, [pc, #764]	@ (800ea28 <tx_control+0x1378>)
 800e72a:	2202      	movs	r2, #2
 800e72c:	719a      	strb	r2, [r3, #6]
 	 	 Bloque_Header [dataSize] = 14; //mov	dataSize,#14
 800e72e:	4bbe      	ldr	r3, [pc, #760]	@ (800ea28 <tx_control+0x1378>)
 800e730:	220e      	movs	r2, #14
 800e732:	71da      	strb	r2, [r3, #7]
 	 	 flagsTX[2] = 1;			//bset	flagsTX,#2; / Indica que hay que transmitir Header
 800e734:	4baf      	ldr	r3, [pc, #700]	@ (800e9f4 <tx_control+0x1344>)
 800e736:	2201      	movs	r2, #1
 800e738:	709a      	strb	r2, [r3, #2]
 	 	 chksum_32_HW_LW = 0;
 800e73a:	4bbc      	ldr	r3, [pc, #752]	@ (800ea2c <tx_control+0x137c>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	601a      	str	r2, [r3, #0]
 	 	 flagsTX[3] = 0;//bres	flagsTX,#3;						/ indica que no se ha enciado el checksum
 800e740:	4bac      	ldr	r3, [pc, #688]	@ (800e9f4 <tx_control+0x1344>)
 800e742:	2200      	movs	r2, #0
 800e744:	70da      	strb	r2, [r3, #3]
 	 	 keyTx = 0x55;//mov		keyTx,#$55;						/ listo para mandar transmisión
 800e746:	4bba      	ldr	r3, [pc, #744]	@ (800ea30 <tx_control+0x1380>)
 800e748:	2255      	movs	r2, #85	@ 0x55
 800e74a:	701a      	strb	r2, [r3, #0]
 	 	 codeTX = 0;//clr		codeTX;								/ limpia código de Tx
 800e74c:	4bb9      	ldr	r3, [pc, #740]	@ (800ea34 <tx_control+0x1384>)
 800e74e:	2200      	movs	r2, #0
 800e750:	701a      	strb	r2, [r3, #0]
 	 	 goto end_tx_control;//jp		end_tx_control
 800e752:	f001 f854 	bl	800f7fe <tx_control+0x214e>
			Bloque_TiempoReal[actuadores_RT] |= 0x1;// BitSet(Bloque_TiempoReal[actuadores_RT], 0);				// carga estado de compresor
 800e756:	4bb8      	ldr	r3, [pc, #736]	@ (800ea38 <tx_control+0x1388>)
 800e758:	79db      	ldrb	r3, [r3, #7]
 800e75a:	2201      	movs	r2, #1
 800e75c:	4313      	orrs	r3, r2
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	4bb5      	ldr	r3, [pc, #724]	@ (800ea38 <tx_control+0x1388>)
 800e762:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_dh])												// deshielo activo ?
 800e764:	4bb5      	ldr	r3, [pc, #724]	@ (800ea3c <tx_control+0x138c>)
 800e766:	785b      	ldrb	r3, [r3, #1]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d006      	beq.n	800e77a <tx_control+0x10ca>
			Bloque_TiempoReal[actuadores_RT] |= 0x2;//BitSet(Bloque_TiempoReal[actuadores_RT], 1);				// carga estado de deshielo
 800e76c:	4bb2      	ldr	r3, [pc, #712]	@ (800ea38 <tx_control+0x1388>)
 800e76e:	79db      	ldrb	r3, [r3, #7]
 800e770:	2202      	movs	r2, #2
 800e772:	4313      	orrs	r3, r2
 800e774:	b2da      	uxtb	r2, r3
 800e776:	4bb0      	ldr	r3, [pc, #704]	@ (800ea38 <tx_control+0x1388>)
 800e778:	71da      	strb	r2, [r3, #7]
		if (flagsC[0])													// puerta abierta ?
 800e77a:	4bb1      	ldr	r3, [pc, #708]	@ (800ea40 <tx_control+0x1390>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d006      	beq.n	800e790 <tx_control+0x10e0>
			Bloque_TiempoReal[actuadores_RT] |= 0x4;////BitSet(Bloque_TiempoReal[actuadores_RT], 2);				// sí, indica puerta abierta
 800e782:	4bad      	ldr	r3, [pc, #692]	@ (800ea38 <tx_control+0x1388>)
 800e784:	79db      	ldrb	r3, [r3, #7]
 800e786:	2204      	movs	r2, #4
 800e788:	4313      	orrs	r3, r2
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	4baa      	ldr	r3, [pc, #680]	@ (800ea38 <tx_control+0x1388>)
 800e78e:	71da      	strb	r2, [r3, #7]
		if (flagsC[1])													// Modo ahorro 1 activo ?
 800e790:	4bab      	ldr	r3, [pc, #684]	@ (800ea40 <tx_control+0x1390>)
 800e792:	785b      	ldrb	r3, [r3, #1]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d006      	beq.n	800e7a6 <tx_control+0x10f6>
			Bloque_TiempoReal[actuadores_RT] |= 0x8;////BitSet(Bloque_TiempoReal[actuadores_RT], 3);				// Modo ahorro 1 activo ?
 800e798:	4ba7      	ldr	r3, [pc, #668]	@ (800ea38 <tx_control+0x1388>)
 800e79a:	79db      	ldrb	r3, [r3, #7]
 800e79c:	2208      	movs	r2, #8
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	4ba5      	ldr	r3, [pc, #660]	@ (800ea38 <tx_control+0x1388>)
 800e7a4:	71da      	strb	r2, [r3, #7]
		if (flagsC[2])													// Modo ahorro 1 activo ?
 800e7a6:	4ba6      	ldr	r3, [pc, #664]	@ (800ea40 <tx_control+0x1390>)
 800e7a8:	789b      	ldrb	r3, [r3, #2]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d006      	beq.n	800e7bc <tx_control+0x110c>
			Bloque_TiempoReal[actuadores_RT] |= 0x10;//BitSet(Bloque_TiempoReal[actuadores_RT], 4);				//	sí, indicalo
 800e7ae:	4ba2      	ldr	r3, [pc, #648]	@ (800ea38 <tx_control+0x1388>)
 800e7b0:	79db      	ldrb	r3, [r3, #7]
 800e7b2:	2210      	movs	r2, #16
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	b2da      	uxtb	r2, r3
 800e7b8:	4b9f      	ldr	r3, [pc, #636]	@ (800ea38 <tx_control+0x1388>)
 800e7ba:	71da      	strb	r2, [r3, #7]
		if (flagsa[nocturno])//if (!GetRegFlagState(flagsa, nocturno))											//  Modo nocturno activo ?
 800e7bc:	4ba1      	ldr	r3, [pc, #644]	@ (800ea44 <tx_control+0x1394>)
 800e7be:	78db      	ldrb	r3, [r3, #3]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d006      	beq.n	800e7d2 <tx_control+0x1122>
			Bloque_TiempoReal[actuadores_RT] |= 0x20;//BitSet(Bloque_TiempoReal[actuadores_RT], 5);				//	sí, indicalo
 800e7c4:	4b9c      	ldr	r3, [pc, #624]	@ (800ea38 <tx_control+0x1388>)
 800e7c6:	79db      	ldrb	r3, [r3, #7]
 800e7c8:	2220      	movs	r2, #32
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	4b9a      	ldr	r3, [pc, #616]	@ (800ea38 <tx_control+0x1388>)
 800e7d0:	71da      	strb	r2, [r3, #7]
		if (GPIOR1 [f_fan])												// ventilador activo ?
 800e7d2:	4b9d      	ldr	r3, [pc, #628]	@ (800ea48 <tx_control+0x1398>)
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d006      	beq.n	800e7e8 <tx_control+0x1138>
			Bloque_TiempoReal[actuadores_RT] |= 0x40;//BitSet(Bloque_TiempoReal[actuadores_RT], 6);				//	sí, indicalo
 800e7da:	4b97      	ldr	r3, [pc, #604]	@ (800ea38 <tx_control+0x1388>)
 800e7dc:	79db      	ldrb	r3, [r3, #7]
 800e7de:	2240      	movs	r2, #64	@ 0x40
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	4b94      	ldr	r3, [pc, #592]	@ (800ea38 <tx_control+0x1388>)
 800e7e6:	71da      	strb	r2, [r3, #7]
		if (GPIOR0 [f_lamp])											//  rele auxiliar activo ?
 800e7e8:	4b94      	ldr	r3, [pc, #592]	@ (800ea3c <tx_control+0x138c>)
 800e7ea:	789b      	ldrb	r3, [r3, #2]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d007      	beq.n	800e800 <tx_control+0x1150>
			Bloque_TiempoReal[actuadores_RT] |= 0x80;//BitSet(Bloque_TiempoReal[actuadores_RT], 7);				//  sí, indicalo
 800e7f0:	4b91      	ldr	r3, [pc, #580]	@ (800ea38 <tx_control+0x1388>)
 800e7f2:	79db      	ldrb	r3, [r3, #7]
 800e7f4:	2280      	movs	r2, #128	@ 0x80
 800e7f6:	4252      	negs	r2, r2
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	4b8e      	ldr	r3, [pc, #568]	@ (800ea38 <tx_control+0x1388>)
 800e7fe:	71da      	strb	r2, [r3, #7]
		Bloque_TiempoReal[alarmas2_RT] =0;
 800e800:	4b8d      	ldr	r3, [pc, #564]	@ (800ea38 <tx_control+0x1388>)
 800e802:	2200      	movs	r2, #0
 800e804:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800e806:	2300      	movs	r3, #0
 800e808:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e80a:	e011      	b.n	800e830 <tx_control+0x1180>
			Bloque_TiempoReal[alarmas2_RT] |=(uint8_t) (trefst2[k]<<k);
 800e80c:	4b8a      	ldr	r3, [pc, #552]	@ (800ea38 <tx_control+0x1388>)
 800e80e:	7a1a      	ldrb	r2, [r3, #8]
 800e810:	498e      	ldr	r1, [pc, #568]	@ (800ea4c <tx_control+0x139c>)
 800e812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e814:	18cb      	adds	r3, r1, r3
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	0019      	movs	r1, r3
 800e81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e81c:	4099      	lsls	r1, r3
 800e81e:	000b      	movs	r3, r1
 800e820:	b2db      	uxtb	r3, r3
 800e822:	4313      	orrs	r3, r2
 800e824:	b2da      	uxtb	r2, r3
 800e826:	4b84      	ldr	r3, [pc, #528]	@ (800ea38 <tx_control+0x1388>)
 800e828:	721a      	strb	r2, [r3, #8]
		for(int k=0;k<8;k++){
 800e82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82c:	3301      	adds	r3, #1
 800e82e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e832:	2b07      	cmp	r3, #7
 800e834:	ddea      	ble.n	800e80c <tx_control+0x115c>
		Bloque_TiempoReal[alarmas2_RT] &= 0xFE;//BitClear(Bloque_TiempoReal[alarmas2_RT],0);
 800e836:	4b80      	ldr	r3, [pc, #512]	@ (800ea38 <tx_control+0x1388>)
 800e838:	7a1b      	ldrb	r3, [r3, #8]
 800e83a:	2201      	movs	r2, #1
 800e83c:	4393      	bics	r3, r2
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	4b7d      	ldr	r3, [pc, #500]	@ (800ea38 <tx_control+0x1388>)
 800e842:	721a      	strb	r2, [r3, #8]
		for(uint8_t k=0; k<8; k++){
 800e844:	2337      	movs	r3, #55	@ 0x37
 800e846:	18fb      	adds	r3, r7, r3
 800e848:	2200      	movs	r2, #0
 800e84a:	701a      	strb	r2, [r3, #0]
 800e84c:	e017      	b.n	800e87e <tx_control+0x11ce>
			Bloque_TiempoReal [alarmas_RT] |= (uint8_t) trefst[k]<<k;
 800e84e:	4b7a      	ldr	r3, [pc, #488]	@ (800ea38 <tx_control+0x1388>)
 800e850:	7a5b      	ldrb	r3, [r3, #9]
 800e852:	b25a      	sxtb	r2, r3
 800e854:	2037      	movs	r0, #55	@ 0x37
 800e856:	183b      	adds	r3, r7, r0
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	497d      	ldr	r1, [pc, #500]	@ (800ea50 <tx_control+0x13a0>)
 800e85c:	5ccb      	ldrb	r3, [r1, r3]
 800e85e:	0019      	movs	r1, r3
 800e860:	183b      	adds	r3, r7, r0
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	4099      	lsls	r1, r3
 800e866:	000b      	movs	r3, r1
 800e868:	b25b      	sxtb	r3, r3
 800e86a:	4313      	orrs	r3, r2
 800e86c:	b25b      	sxtb	r3, r3
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	4b71      	ldr	r3, [pc, #452]	@ (800ea38 <tx_control+0x1388>)
 800e872:	725a      	strb	r2, [r3, #9]
		for(uint8_t k=0; k<8; k++){
 800e874:	183b      	adds	r3, r7, r0
 800e876:	781a      	ldrb	r2, [r3, #0]
 800e878:	183b      	adds	r3, r7, r0
 800e87a:	3201      	adds	r2, #1
 800e87c:	701a      	strb	r2, [r3, #0]
 800e87e:	2337      	movs	r3, #55	@ 0x37
 800e880:	18fb      	adds	r3, r7, r3
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	2b07      	cmp	r3, #7
 800e886:	d9e2      	bls.n	800e84e <tx_control+0x119e>
		blockSizeTX =size_TiempoReal;				// tamaño del bloque
 800e888:	4b5b      	ldr	r3, [pc, #364]	@ (800e9f8 <tx_control+0x1348>)
 800e88a:	220a      	movs	r2, #10
 800e88c:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion1] = Plantilla[version1];		// mov		softVersion1,version1
 800e88e:	4b65      	ldr	r3, [pc, #404]	@ (800ea24 <tx_control+0x1374>)
 800e890:	227b      	movs	r2, #123	@ 0x7b
 800e892:	5c9a      	ldrb	r2, [r3, r2]
 800e894:	4b64      	ldr	r3, [pc, #400]	@ (800ea28 <tx_control+0x1378>)
 800e896:	701a      	strb	r2, [r3, #0]
		Bloque_Header [softVersion2] = Plantilla[version2];		// mov		softVersion2,version2;	/ Carga versión del firmware
 800e898:	4b62      	ldr	r3, [pc, #392]	@ (800ea24 <tx_control+0x1374>)
 800e89a:	227c      	movs	r2, #124	@ 0x7c
 800e89c:	5c9a      	ldrb	r2, [r3, r2]
 800e89e:	4b62      	ldr	r3, [pc, #392]	@ (800ea28 <tx_control+0x1378>)
 800e8a0:	705a      	strb	r2, [r3, #1]
		Bloque_Header [bufferSize_4] = 0;				// bufferSize_HW
 800e8a2:	4b61      	ldr	r3, [pc, #388]	@ (800ea28 <tx_control+0x1378>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	709a      	strb	r2, [r3, #2]
		Bloque_Header [bufferSize_3] = 0;				// bufferSize_HW
 800e8a8:	4b5f      	ldr	r3, [pc, #380]	@ (800ea28 <tx_control+0x1378>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	70da      	strb	r2, [r3, #3]
		Bloque_Header [bufferSize_2] = 0;				// bufferSize_LW
 800e8ae:	4b5e      	ldr	r3, [pc, #376]	@ (800ea28 <tx_control+0x1378>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	711a      	strb	r2, [r3, #4]
		Bloque_Header [bufferSize_1] = 1;				// bufferSize_LW
 800e8b4:	4b5c      	ldr	r3, [pc, #368]	@ (800ea28 <tx_control+0x1378>)
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	715a      	strb	r2, [r3, #5]
		Bloque_Header [dataType] = 3;				//mov		dataType,#03
 800e8ba:	4b5b      	ldr	r3, [pc, #364]	@ (800ea28 <tx_control+0x1378>)
 800e8bc:	2203      	movs	r2, #3
 800e8be:	719a      	strb	r2, [r3, #6]
		Bloque_Header [dataSize] = blockSizeTX;	//mov		dataSize,blockSizeTX
 800e8c0:	4b4d      	ldr	r3, [pc, #308]	@ (800e9f8 <tx_control+0x1348>)
 800e8c2:	781a      	ldrb	r2, [r3, #0]
 800e8c4:	4b58      	ldr	r3, [pc, #352]	@ (800ea28 <tx_control+0x1378>)
 800e8c6:	71da      	strb	r2, [r3, #7]
		flagsTX [2] = 1;					// Indica que hay que transmitir Header
 800e8c8:	4b4a      	ldr	r3, [pc, #296]	@ (800e9f4 <tx_control+0x1344>)
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	709a      	strb	r2, [r3, #2]
		point_X = &Bloque_Header[0];	 // ldw		X,#softVersion1
 800e8ce:	4b56      	ldr	r3, [pc, #344]	@ (800ea28 <tx_control+0x1378>)
 800e8d0:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[0];	 //
 800e8d2:	4b60      	ldr	r3, [pc, #384]	@ (800ea54 <tx_control+0x13a4>)
 800e8d4:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 8 ; i++ )
 800e8d6:	2336      	movs	r3, #54	@ 0x36
 800e8d8:	18fb      	adds	r3, r7, r3
 800e8da:	2200      	movs	r2, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
 800e8de:	e00f      	b.n	800e900 <tx_control+0x1250>
			point_Y[i] = point_X[i];
 800e8e0:	2036      	movs	r0, #54	@ 0x36
 800e8e2:	183b      	adds	r3, r7, r0
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8e8:	18d2      	adds	r2, r2, r3
 800e8ea:	183b      	adds	r3, r7, r0
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8f0:	18cb      	adds	r3, r1, r3
 800e8f2:	7812      	ldrb	r2, [r2, #0]
 800e8f4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800e8f6:	183b      	adds	r3, r7, r0
 800e8f8:	781a      	ldrb	r2, [r3, #0]
 800e8fa:	183b      	adds	r3, r7, r0
 800e8fc:	3201      	adds	r2, #1
 800e8fe:	701a      	strb	r2, [r3, #0]
 800e900:	2336      	movs	r3, #54	@ 0x36
 800e902:	18fb      	adds	r3, r7, r3
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	2b07      	cmp	r3, #7
 800e908:	d9ea      	bls.n	800e8e0 <tx_control+0x1230>
		point_X = &Bloque_TiempoReal[0];	 // ldw		X,#tempAmb_RT
 800e90a:	4b4b      	ldr	r3, [pc, #300]	@ (800ea38 <tx_control+0x1388>)
 800e90c:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y = &bufferTxControl[8];	 //
 800e90e:	4b52      	ldr	r3, [pc, #328]	@ (800ea58 <tx_control+0x13a8>)
 800e910:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 10 ; i++ )
 800e912:	2335      	movs	r3, #53	@ 0x35
 800e914:	18fb      	adds	r3, r7, r3
 800e916:	2200      	movs	r2, #0
 800e918:	701a      	strb	r2, [r3, #0]
 800e91a:	e00f      	b.n	800e93c <tx_control+0x128c>
			point_Y[i] = point_X[i];
 800e91c:	2035      	movs	r0, #53	@ 0x35
 800e91e:	183b      	adds	r3, r7, r0
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e924:	18d2      	adds	r2, r2, r3
 800e926:	183b      	adds	r3, r7, r0
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e92c:	18cb      	adds	r3, r1, r3
 800e92e:	7812      	ldrb	r2, [r2, #0]
 800e930:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 10 ; i++ )
 800e932:	183b      	adds	r3, r7, r0
 800e934:	781a      	ldrb	r2, [r3, #0]
 800e936:	183b      	adds	r3, r7, r0
 800e938:	3201      	adds	r2, #1
 800e93a:	701a      	strb	r2, [r3, #0]
 800e93c:	2335      	movs	r3, #53	@ 0x35
 800e93e:	18fb      	adds	r3, r7, r3
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	2b09      	cmp	r3, #9
 800e944:	d9ea      	bls.n	800e91c <tx_control+0x126c>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800e946:	4b39      	ldr	r3, [pc, #228]	@ (800ea2c <tx_control+0x137c>)
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800e94c:	4b41      	ldr	r3, [pc, #260]	@ (800ea54 <tx_control+0x13a4>)
 800e94e:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 18);			// tamaño del bloque a calcular el chksum
 800e950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e952:	2112      	movs	r1, #18
 800e954:	0018      	movs	r0, r3
 800e956:	f7f8 fa6d 	bl	8006e34 <buildChksumBloq>
		bufferTxControl [18] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800e95a:	4b34      	ldr	r3, [pc, #208]	@ (800ea2c <tx_control+0x137c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	0e1b      	lsrs	r3, r3, #24
 800e960:	b2da      	uxtb	r2, r3
 800e962:	4b3c      	ldr	r3, [pc, #240]	@ (800ea54 <tx_control+0x13a4>)
 800e964:	749a      	strb	r2, [r3, #18]
		bufferTxControl [19] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800e966:	4b31      	ldr	r3, [pc, #196]	@ (800ea2c <tx_control+0x137c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	0c1b      	lsrs	r3, r3, #16
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	4b39      	ldr	r3, [pc, #228]	@ (800ea54 <tx_control+0x13a4>)
 800e970:	74da      	strb	r2, [r3, #19]
		bufferTxControl [20] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800e972:	4b2e      	ldr	r3, [pc, #184]	@ (800ea2c <tx_control+0x137c>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	0a1b      	lsrs	r3, r3, #8
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	4b36      	ldr	r3, [pc, #216]	@ (800ea54 <tx_control+0x13a4>)
 800e97c:	751a      	strb	r2, [r3, #20]
		bufferTxControl [21] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800e97e:	4b2b      	ldr	r3, [pc, #172]	@ (800ea2c <tx_control+0x137c>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	b2da      	uxtb	r2, r3
 800e984:	4b33      	ldr	r3, [pc, #204]	@ (800ea54 <tx_control+0x13a4>)
 800e986:	755a      	strb	r2, [r3, #21]
	    pointTx = &bufferTxControl[0];
 800e988:	4b34      	ldr	r3, [pc, #208]	@ (800ea5c <tx_control+0x13ac>)
 800e98a:	4a32      	ldr	r2, [pc, #200]	@ (800ea54 <tx_control+0x13a4>)
 800e98c:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800e98e:	4b34      	ldr	r3, [pc, #208]	@ (800ea60 <tx_control+0x13b0>)
 800e990:	4a30      	ldr	r2, [pc, #192]	@ (800ea54 <tx_control+0x13a4>)
 800e992:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [22];
 800e994:	4b33      	ldr	r3, [pc, #204]	@ (800ea64 <tx_control+0x13b4>)
 800e996:	4a34      	ldr	r2, [pc, #208]	@ (800ea68 <tx_control+0x13b8>)
 800e998:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 22;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800e99a:	4b17      	ldr	r3, [pc, #92]	@ (800e9f8 <tx_control+0x1348>)
 800e99c:	2216      	movs	r2, #22
 800e99e:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;					// Indica que no hay que transmitir Header
 800e9a0:	4b14      	ldr	r3, [pc, #80]	@ (800e9f4 <tx_control+0x1344>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;					// evita enviar chksum
 800e9a6:	4b13      	ldr	r3, [pc, #76]	@ (800e9f4 <tx_control+0x1344>)
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800e9ac:	4b20      	ldr	r3, [pc, #128]	@ (800ea30 <tx_control+0x1380>)
 800e9ae:	2255      	movs	r2, #85	@ 0x55
 800e9b0:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800e9b2:	4b20      	ldr	r3, [pc, #128]	@ (800ea34 <tx_control+0x1384>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800e9b8:	f000 ff21 	bl	800f7fe <tx_control+0x214e>
			point_Y[i] = point_X[i];
 800e9bc:	2034      	movs	r0, #52	@ 0x34
 800e9be:	183b      	adds	r3, r7, r0
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9c4:	18d2      	adds	r2, r2, r3
 800e9c6:	183b      	adds	r3, r7, r0
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e9cc:	18cb      	adds	r3, r1, r3
 800e9ce:	7812      	ldrb	r2, [r2, #0]
 800e9d0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8 ; i++ )
 800e9d2:	183b      	adds	r3, r7, r0
 800e9d4:	781a      	ldrb	r2, [r3, #0]
 800e9d6:	183b      	adds	r3, r7, r0
 800e9d8:	3201      	adds	r2, #1
 800e9da:	701a      	strb	r2, [r3, #0]
 800e9dc:	2334      	movs	r3, #52	@ 0x34
 800e9de:	18fb      	adds	r3, r7, r3
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	2b07      	cmp	r3, #7
 800e9e4:	d9ea      	bls.n	800e9bc <tx_control+0x130c>
		point_Y = &bufferTxControl[8];	 //
 800e9e6:	4b1c      	ldr	r3, [pc, #112]	@ (800ea58 <tx_control+0x13a8>)
 800e9e8:	643b      	str	r3, [r7, #64]	@ 0x40
		for(uint8_t i = 0; i < 128 ; i++ )
 800e9ea:	2333      	movs	r3, #51	@ 0x33
 800e9ec:	18fb      	adds	r3, r7, r3
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	701a      	strb	r2, [r3, #0]
 800e9f2:	e050      	b.n	800ea96 <tx_control+0x13e6>
 800e9f4:	20000e1c 	.word	0x20000e1c
 800e9f8:	20000e30 	.word	0x20000e30
 800e9fc:	20000e04 	.word	0x20000e04
 800ea00:	20000e28 	.word	0x20000e28
 800ea04:	08037000 	.word	0x08037000
 800ea08:	0803bfff 	.word	0x0803bfff
 800ea0c:	20000e2c 	.word	0x20000e2c
 800ea10:	20000d9d 	.word	0x20000d9d
 800ea14:	2000103c 	.word	0x2000103c
 800ea18:	2000103e 	.word	0x2000103e
 800ea1c:	20001040 	.word	0x20001040
 800ea20:	0803f812 	.word	0x0803f812
 800ea24:	200000b8 	.word	0x200000b8
 800ea28:	20000dd8 	.word	0x20000dd8
 800ea2c:	20000e34 	.word	0x20000e34
 800ea30:	20000e19 	.word	0x20000e19
 800ea34:	20000e24 	.word	0x20000e24
 800ea38:	20000df8 	.word	0x20000df8
 800ea3c:	20000ba4 	.word	0x20000ba4
 800ea40:	20000c3c 	.word	0x20000c3c
 800ea44:	20000b78 	.word	0x20000b78
 800ea48:	20000be0 	.word	0x20000be0
 800ea4c:	20000b80 	.word	0x20000b80
 800ea50:	20000b88 	.word	0x20000b88
 800ea54:	20000fa8 	.word	0x20000fa8
 800ea58:	20000fb0 	.word	0x20000fb0
 800ea5c:	20000e14 	.word	0x20000e14
 800ea60:	20000e0c 	.word	0x20000e0c
 800ea64:	20000e10 	.word	0x20000e10
 800ea68:	20000fbe 	.word	0x20000fbe
			point_Y[i] = findLastValue((uint32_t) &eePlantilla[i]);
 800ea6c:	2433      	movs	r4, #51	@ 0x33
 800ea6e:	193b      	adds	r3, r7, r4
 800ea70:	781a      	ldrb	r2, [r3, #0]
 800ea72:	4be7      	ldr	r3, [pc, #924]	@ (800ee10 <tx_control+0x1760>)
 800ea74:	18d3      	adds	r3, r2, r3
 800ea76:	0018      	movs	r0, r3
 800ea78:	f7f4 f8d0 	bl	8002c1c <findLastValue>
 800ea7c:	0001      	movs	r1, r0
 800ea7e:	0020      	movs	r0, r4
 800ea80:	183b      	adds	r3, r7, r0
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea86:	18d3      	adds	r3, r2, r3
 800ea88:	b2ca      	uxtb	r2, r1
 800ea8a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 128 ; i++ )
 800ea8c:	183b      	adds	r3, r7, r0
 800ea8e:	781a      	ldrb	r2, [r3, #0]
 800ea90:	183b      	adds	r3, r7, r0
 800ea92:	3201      	adds	r2, #1
 800ea94:	701a      	strb	r2, [r3, #0]
 800ea96:	2333      	movs	r3, #51	@ 0x33
 800ea98:	18fb      	adds	r3, r7, r3
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	b25b      	sxtb	r3, r3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	dae4      	bge.n	800ea6c <tx_control+0x13bc>
		chksum_32_HW_LW = 0;					// limpia registros de checksum
 800eaa2:	4bdc      	ldr	r3, [pc, #880]	@ (800ee14 <tx_control+0x1764>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	601a      	str	r2, [r3, #0]
		point_X = &bufferTxControl[0];			// carga dirección del buffer a calcular chksum
 800eaa8:	4bdb      	ldr	r3, [pc, #876]	@ (800ee18 <tx_control+0x1768>)
 800eaaa:	647b      	str	r3, [r7, #68]	@ 0x44
		buildChksumBloq (point_X, 136);			// tamaño del bloque a calcular el chksum
 800eaac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaae:	2188      	movs	r1, #136	@ 0x88
 800eab0:	0018      	movs	r0, r3
 800eab2:	f7f8 f9bf 	bl	8006e34 <buildChksumBloq>
		bufferTxControl [136] = (uint8_t)((chksum_32_HW_LW & 0xFF000000)>> 24);
 800eab6:	4bd7      	ldr	r3, [pc, #860]	@ (800ee14 <tx_control+0x1764>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	0e1b      	lsrs	r3, r3, #24
 800eabc:	b2d9      	uxtb	r1, r3
 800eabe:	4bd6      	ldr	r3, [pc, #856]	@ (800ee18 <tx_control+0x1768>)
 800eac0:	2288      	movs	r2, #136	@ 0x88
 800eac2:	5499      	strb	r1, [r3, r2]
		bufferTxControl [137] = (uint8_t)((chksum_32_HW_LW & 0x00FF0000)>> 16);
 800eac4:	4bd3      	ldr	r3, [pc, #844]	@ (800ee14 <tx_control+0x1764>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	0c1b      	lsrs	r3, r3, #16
 800eaca:	b2d9      	uxtb	r1, r3
 800eacc:	4bd2      	ldr	r3, [pc, #840]	@ (800ee18 <tx_control+0x1768>)
 800eace:	2289      	movs	r2, #137	@ 0x89
 800ead0:	5499      	strb	r1, [r3, r2]
		bufferTxControl [138] = (uint8_t)((chksum_32_HW_LW & 0x0000FF00)>>  8);
 800ead2:	4bd0      	ldr	r3, [pc, #832]	@ (800ee14 <tx_control+0x1764>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	0a1b      	lsrs	r3, r3, #8
 800ead8:	b2d9      	uxtb	r1, r3
 800eada:	4bcf      	ldr	r3, [pc, #828]	@ (800ee18 <tx_control+0x1768>)
 800eadc:	228a      	movs	r2, #138	@ 0x8a
 800eade:	5499      	strb	r1, [r3, r2]
		bufferTxControl [139] = (uint8_t)(chksum_32_HW_LW & 0x000000FF);
 800eae0:	4bcc      	ldr	r3, [pc, #816]	@ (800ee14 <tx_control+0x1764>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	b2d9      	uxtb	r1, r3
 800eae6:	4bcc      	ldr	r3, [pc, #816]	@ (800ee18 <tx_control+0x1768>)
 800eae8:	228b      	movs	r2, #139	@ 0x8b
 800eaea:	5499      	strb	r1, [r3, r2]
	    pointTx = &bufferTxControl[0];
 800eaec:	4bcb      	ldr	r3, [pc, #812]	@ (800ee1c <tx_control+0x176c>)
 800eaee:	4aca      	ldr	r2, [pc, #808]	@ (800ee18 <tx_control+0x1768>)
 800eaf0:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];
 800eaf2:	4bcb      	ldr	r3, [pc, #812]	@ (800ee20 <tx_control+0x1770>)
 800eaf4:	4ac8      	ldr	r2, [pc, #800]	@ (800ee18 <tx_control+0x1768>)
 800eaf6:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl [140];
 800eaf8:	4bca      	ldr	r3, [pc, #808]	@ (800ee24 <tx_control+0x1774>)
 800eafa:	4acb      	ldr	r2, [pc, #812]	@ (800ee28 <tx_control+0x1778>)
 800eafc:	601a      	str	r2, [r3, #0]
	    blockSizeTX = 140;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800eafe:	4bcb      	ldr	r3, [pc, #812]	@ (800ee2c <tx_control+0x177c>)
 800eb00:	228c      	movs	r2, #140	@ 0x8c
 800eb02:	701a      	strb	r2, [r3, #0]
		flagsTX [2] = 0;						// Indica que no hay que transmitir Header
 800eb04:	4bca      	ldr	r3, [pc, #808]	@ (800ee30 <tx_control+0x1780>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	709a      	strb	r2, [r3, #2]
		flagsTX [3] = 1;						// evita enviar chksum
 800eb0a:	4bc9      	ldr	r3, [pc, #804]	@ (800ee30 <tx_control+0x1780>)
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;						// listo para mandar transmisión
 800eb10:	4bc8      	ldr	r3, [pc, #800]	@ (800ee34 <tx_control+0x1784>)
 800eb12:	2255      	movs	r2, #85	@ 0x55
 800eb14:	701a      	strb	r2, [r3, #0]
		codeTX = 0x00;
 800eb16:	4bc8      	ldr	r3, [pc, #800]	@ (800ee38 <tx_control+0x1788>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		//jp		end_tx_control
 800eb1c:	f000 fe6f 	bl	800f7fe <tx_control+0x214e>
				goto 	verifica_version2;		//jreq	verifica_version2
 800eb20:	46c0      	nop			@ (mov r8, r8)
			if (RxBuffer_Ble[126] == findLastValue((uint32_t) &eePlantilla[eeversion2])){
 800eb22:	4bc6      	ldr	r3, [pc, #792]	@ (800ee3c <tx_control+0x178c>)
 800eb24:	227e      	movs	r2, #126	@ 0x7e
 800eb26:	5c9b      	ldrb	r3, [r3, r2]
 800eb28:	001c      	movs	r4, r3
 800eb2a:	4bc5      	ldr	r3, [pc, #788]	@ (800ee40 <tx_control+0x1790>)
 800eb2c:	0018      	movs	r0, r3
 800eb2e:	f7f4 f875 	bl	8002c1c <findLastValue>
 800eb32:	0003      	movs	r3, r0
 800eb34:	429c      	cmp	r4, r3
 800eb36:	d159      	bne.n	800ebec <tx_control+0x153c>
				goto 	verifica_version3;		//jreq	verifica_version3
 800eb38:	46c0      	nop			@ (mov r8, r8)
			if(RxBuffer_Ble[2] != 0xAA ){		// agrega offset para primer dato de seguridad
 800eb3a:	4bc0      	ldr	r3, [pc, #768]	@ (800ee3c <tx_control+0x178c>)
 800eb3c:	789b      	ldrb	r3, [r3, #2]
 800eb3e:	2baa      	cmp	r3, #170	@ 0xaa
 800eb40:	d156      	bne.n	800ebf0 <tx_control+0x1540>
			if(RxBuffer_Ble[67] != 0x66){		// agrega offset para segundo dato de seguridad
 800eb42:	4bbe      	ldr	r3, [pc, #760]	@ (800ee3c <tx_control+0x178c>)
 800eb44:	2243      	movs	r2, #67	@ 0x43
 800eb46:	5c9b      	ldrb	r3, [r3, r2]
 800eb48:	2b66      	cmp	r3, #102	@ 0x66
 800eb4a:	d153      	bne.n	800ebf4 <tx_control+0x1544>
			if(RxBuffer_Ble[129] != 0xCC){		// agrega offset para tercer dato de seguridad
 800eb4c:	4bbb      	ldr	r3, [pc, #748]	@ (800ee3c <tx_control+0x178c>)
 800eb4e:	2281      	movs	r2, #129	@ 0x81
 800eb50:	5c9b      	ldrb	r3, [r3, r2]
 800eb52:	2bcc      	cmp	r3, #204	@ 0xcc
 800eb54:	d150      	bne.n	800ebf8 <tx_control+0x1548>
			chksum_32_HW_LW = 0;					// limpia registros de checksum
 800eb56:	4baf      	ldr	r3, [pc, #700]	@ (800ee14 <tx_control+0x1764>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];			// carga dirección del buffer a calcular chksum
 800eb5c:	4bb7      	ldr	r3, [pc, #732]	@ (800ee3c <tx_control+0x178c>)
 800eb5e:	647b      	str	r3, [r7, #68]	@ 0x44
			buildChksumBloq (point_X, 130);			// tamaño del bloque a calcular el chksum
 800eb60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb62:	2182      	movs	r1, #130	@ 0x82
 800eb64:	0018      	movs	r0, r3
 800eb66:	f7f8 f965 	bl	8006e34 <buildChksumBloq>
			uint32_t chksum_to_compare = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60bb      	str	r3, [r7, #8]
			chksum_to_compare = ((uint32_t)RxBuffer_Ble[130])  <<24;
 800eb6e:	4bb3      	ldr	r3, [pc, #716]	@ (800ee3c <tx_control+0x178c>)
 800eb70:	2282      	movs	r2, #130	@ 0x82
 800eb72:	5c9b      	ldrb	r3, [r3, r2]
 800eb74:	061b      	lsls	r3, r3, #24
 800eb76:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[131]) <<16;
 800eb78:	4bb0      	ldr	r3, [pc, #704]	@ (800ee3c <tx_control+0x178c>)
 800eb7a:	2283      	movs	r2, #131	@ 0x83
 800eb7c:	5c9b      	ldrb	r3, [r3, r2]
 800eb7e:	041b      	lsls	r3, r3, #16
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	18d3      	adds	r3, r2, r3
 800eb84:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[132]) <<8;
 800eb86:	4bad      	ldr	r3, [pc, #692]	@ (800ee3c <tx_control+0x178c>)
 800eb88:	2284      	movs	r2, #132	@ 0x84
 800eb8a:	5c9b      	ldrb	r3, [r3, r2]
 800eb8c:	021b      	lsls	r3, r3, #8
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	18d3      	adds	r3, r2, r3
 800eb92:	60bb      	str	r3, [r7, #8]
			chksum_to_compare += ((uint32_t)RxBuffer_Ble[133]);
 800eb94:	4ba9      	ldr	r3, [pc, #676]	@ (800ee3c <tx_control+0x178c>)
 800eb96:	2285      	movs	r2, #133	@ 0x85
 800eb98:	5c9b      	ldrb	r3, [r3, r2]
 800eb9a:	001a      	movs	r2, r3
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	189b      	adds	r3, r3, r2
 800eba0:	60bb      	str	r3, [r7, #8]
			if (chksum_32_HW_LW != chksum_to_compare){
 800eba2:	4b9c      	ldr	r3, [pc, #624]	@ (800ee14 <tx_control+0x1764>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d127      	bne.n	800ebfc <tx_control+0x154c>
write_param:
 800ebac:	46c0      	nop			@ (mov r8, r8)
			ProgMemCode = 0x55;							//	mov		ProgMemCode,#$55;			/ Indica que se va a grabar bloque de EEPROM
 800ebae:	4ba5      	ldr	r3, [pc, #660]	@ (800ee44 <tx_control+0x1794>)
 800ebb0:	2255      	movs	r2, #85	@ 0x55
 800ebb2:	701a      	strb	r2, [r3, #0]
			point_X = &RxBuffer_Ble[0];					// apunta al buffer de datos RECIBIDOS
 800ebb4:	4ba1      	ldr	r3, [pc, #644]	@ (800ee3c <tx_control+0x178c>)
 800ebb6:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800ebb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebba:	3301      	adds	r3, #1
 800ebbc:	647b      	str	r3, [r7, #68]	@ 0x44
			point_X++;
 800ebbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	647b      	str	r3, [r7, #68]	@ 0x44
			dataPointer =	point_X;	// LDW		dataPointer,X
 800ebc4:	4ba0      	ldr	r3, [pc, #640]	@ (800ee48 <tx_control+0x1798>)
 800ebc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ebc8:	601a      	str	r2, [r3, #0]
			dirPointer =  &eePlantilla [eedato_seg1];	// LDW		dirPointer,X
 800ebca:	4ba0      	ldr	r3, [pc, #640]	@ (800ee4c <tx_control+0x179c>)
 800ebcc:	4a90      	ldr	r2, [pc, #576]	@ (800ee10 <tx_control+0x1760>)
 800ebce:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	GRABA_BLOQUE(point_X , point_Y);  , Cambia para ser Compatible con ASM
 800ebd0:	f7f8 f9b6 	bl	8006f40 <GRABA_BLOCK>
			Bloque_handshake[comando1] =	0xF1;	//mov		comando1,#$F1
 800ebd4:	4b9e      	ldr	r3, [pc, #632]	@ (800ee50 <tx_control+0x17a0>)
 800ebd6:	22f1      	movs	r2, #241	@ 0xf1
 800ebd8:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[comando2] =	0x3D;	//mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800ebda:	4b9d      	ldr	r3, [pc, #628]	@ (800ee50 <tx_control+0x17a0>)
 800ebdc:	223d      	movs	r2, #61	@ 0x3d
 800ebde:	705a      	strb	r2, [r3, #1]
			flagsTX[5]=1;						// bset 	flagsTX,#5;						/ inidca que hay que reiniciar el control.
 800ebe0:	4b93      	ldr	r3, [pc, #588]	@ (800ee30 <tx_control+0x1780>)
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	715a      	strb	r2, [r3, #5]
			goto	ok_writeParam;				//jp		ok_writeParam
 800ebe6:	e010      	b.n	800ec0a <tx_control+0x155a>
			goto	no_writeParam;				//jp		no_writeParam
 800ebe8:	46c0      	nop			@ (mov r8, r8)
 800ebea:	e008      	b.n	800ebfe <tx_control+0x154e>
			goto	no_writeParam;				//jp		no_writeParam
 800ebec:	46c0      	nop			@ (mov r8, r8)
 800ebee:	e006      	b.n	800ebfe <tx_control+0x154e>
				goto	no_writeParam;			//jrne	no_writeParam
 800ebf0:	46c0      	nop			@ (mov r8, r8)
 800ebf2:	e004      	b.n	800ebfe <tx_control+0x154e>
				goto	no_writeParam;			//jrne	no_writeParam
 800ebf4:	46c0      	nop			@ (mov r8, r8)
 800ebf6:	e002      	b.n	800ebfe <tx_control+0x154e>
				goto	no_writeParam;			//jrne	no_writeParam
 800ebf8:	46c0      	nop			@ (mov r8, r8)
 800ebfa:	e000      	b.n	800ebfe <tx_control+0x154e>
				goto	no_writeParam;		//jrne	no_writeParam;				/ si no iguales sal si grabar parámetros
 800ebfc:	46c0      	nop			@ (mov r8, r8)
			Bloque_handshake[0] =  0xF1;	//mov		comando1,#$F1
 800ebfe:	4b94      	ldr	r3, [pc, #592]	@ (800ee50 <tx_control+0x17a0>)
 800ec00:	22f1      	movs	r2, #241	@ 0xf1
 800ec02:	701a      	strb	r2, [r3, #0]
			Bloque_handshake[1] =  0x3E;	//mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800ec04:	4b92      	ldr	r3, [pc, #584]	@ (800ee50 <tx_control+0x17a0>)
 800ec06:	223e      	movs	r2, #62	@ 0x3e
 800ec08:	705a      	strb	r2, [r3, #1]
			pointTx = &Bloque_handshake[comando1];
 800ec0a:	4b84      	ldr	r3, [pc, #528]	@ (800ee1c <tx_control+0x176c>)
 800ec0c:	4a90      	ldr	r2, [pc, #576]	@ (800ee50 <tx_control+0x17a0>)
 800ec0e:	601a      	str	r2, [r3, #0]
			pointInitTx = &Bloque_handshake[comando1];
 800ec10:	4b83      	ldr	r3, [pc, #524]	@ (800ee20 <tx_control+0x1770>)
 800ec12:	4a8f      	ldr	r2, [pc, #572]	@ (800ee50 <tx_control+0x17a0>)
 800ec14:	601a      	str	r2, [r3, #0]
			pointEndTx = &Bloque_handshake [comando2];
 800ec16:	4b83      	ldr	r3, [pc, #524]	@ (800ee24 <tx_control+0x1774>)
 800ec18:	4a8e      	ldr	r2, [pc, #568]	@ (800ee54 <tx_control+0x17a4>)
 800ec1a:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;   //4 bytes ChecksumblockSizeTX = 25;   //4 bytes Checksum
 800ec1c:	4b83      	ldr	r3, [pc, #524]	@ (800ee2c <tx_control+0x177c>)
 800ec1e:	2202      	movs	r2, #2
 800ec20:	701a      	strb	r2, [r3, #0]
			flagsTX [3] = 1;						// bset	flagsTX,#3;						// evita que se mande checksum
 800ec22:	4b83      	ldr	r3, [pc, #524]	@ (800ee30 <tx_control+0x1780>)
 800ec24:	2201      	movs	r2, #1
 800ec26:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;						// listo para mandar transmisión
 800ec28:	4b82      	ldr	r3, [pc, #520]	@ (800ee34 <tx_control+0x1784>)
 800ec2a:	2255      	movs	r2, #85	@ 0x55
 800ec2c:	701a      	strb	r2, [r3, #0]
			codeTX = 0x00;
 800ec2e:	4b82      	ldr	r3, [pc, #520]	@ (800ee38 <tx_control+0x1788>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800ec34:	f000 fde3 	bl	800f7fe <tx_control+0x214e>
				goto rx_firmware01;
 800ec38:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[1]){		// btjt	flagsRxFirm,#1,rxBloqFirm; / Ya se sabe cuantos bloques se van a recibir ? Sí, ve a recibir bloques
 800ec3a:	4b87      	ldr	r3, [pc, #540]	@ (800ee58 <tx_control+0x17a8>)
 800ec3c:	785b      	ldrb	r3, [r3, #1]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d133      	bne.n	800ecaa <tx_control+0x15fa>
rx_numBloqFirm:
 800ec42:	46c0      	nop			@ (mov r8, r8)
			if(codeTX==0x49){
 800ec44:	4b7c      	ldr	r3, [pc, #496]	@ (800ee38 <tx_control+0x1788>)
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2b49      	cmp	r3, #73	@ 0x49
 800ec4a:	d000      	beq.n	800ec4e <tx_control+0x159e>
 800ec4c:	e192      	b.n	800ef74 <tx_control+0x18c4>
				goto rx_numBloqFirm_01;
 800ec4e:	46c0      	nop			@ (mov r8, r8)
			numBloqFirm = RxBuffer_Ble[2];
 800ec50:	4b7a      	ldr	r3, [pc, #488]	@ (800ee3c <tx_control+0x178c>)
 800ec52:	789a      	ldrb	r2, [r3, #2]
 800ec54:	4b81      	ldr	r3, [pc, #516]	@ (800ee5c <tx_control+0x17ac>)
 800ec56:	701a      	strb	r2, [r3, #0]
			cntBloqFirm = 0;		//clr		cntBloqFirm;					/ reinicia el contador de bloques recibidos
 800ec58:	4b81      	ldr	r3, [pc, #516]	@ (800ee60 <tx_control+0x17b0>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1;		//mov		comando1,#$F1
 800ec5e:	4b81      	ldr	r3, [pc, #516]	@ (800ee64 <tx_control+0x17b4>)
 800ec60:	22f1      	movs	r2, #241	@ 0xf1
 800ec62:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x07;		// mov		comando2,#$07;				/ indica que está listo para la recepción de los bloques del firmware
 800ec64:	4b7f      	ldr	r3, [pc, #508]	@ (800ee64 <tx_control+0x17b4>)
 800ec66:	2207      	movs	r2, #7
 800ec68:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[1]=1;					// bset	flagsRxFirm,#1;				/ indica que se recibieron el número de paquetes
 800ec6a:	4b7b      	ldr	r3, [pc, #492]	@ (800ee58 <tx_control+0x17a8>)
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	705a      	strb	r2, [r3, #1]
			chksumFirm_HW_LW=0;						// ldw		chksumFirm_LW,X;			/ limpia registros de checksum general del Firmware
 800ec70:	4b7d      	ldr	r3, [pc, #500]	@ (800ee68 <tx_control+0x17b8>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1];
 800ec76:	4b69      	ldr	r3, [pc, #420]	@ (800ee1c <tx_control+0x176c>)
 800ec78:	4a7a      	ldr	r2, [pc, #488]	@ (800ee64 <tx_control+0x17b4>)
 800ec7a:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800ec7c:	4b68      	ldr	r3, [pc, #416]	@ (800ee20 <tx_control+0x1770>)
 800ec7e:	4a79      	ldr	r2, [pc, #484]	@ (800ee64 <tx_control+0x17b4>)
 800ec80:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];
 800ec82:	4b68      	ldr	r3, [pc, #416]	@ (800ee24 <tx_control+0x1774>)
 800ec84:	4a79      	ldr	r2, [pc, #484]	@ (800ee6c <tx_control+0x17bc>)
 800ec86:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800ec88:	4b68      	ldr	r3, [pc, #416]	@ (800ee2c <tx_control+0x177c>)
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800ec8e:	4b68      	ldr	r3, [pc, #416]	@ (800ee30 <tx_control+0x1780>)
 800ec90:	2201      	movs	r2, #1
 800ec92:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ec94:	4b67      	ldr	r3, [pc, #412]	@ (800ee34 <tx_control+0x1784>)
 800ec96:	2255      	movs	r2, #85	@ 0x55
 800ec98:	701a      	strb	r2, [r3, #0]
			codeTX = 0;								// clr		codeTX;
 800ec9a:	4b67      	ldr	r3, [pc, #412]	@ (800ee38 <tx_control+0x1788>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	701a      	strb	r2, [r3, #0]
			timeOutRx = 5;							// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800eca0:	4b73      	ldr	r3, [pc, #460]	@ (800ee70 <tx_control+0x17c0>)
 800eca2:	2205      	movs	r2, #5
 800eca4:	701a      	strb	r2, [r3, #0]
			goto end_tx_control; 					//jp		end_tx_control
 800eca6:	f000 fdaa 	bl	800f7fe <tx_control+0x214e>
				goto rxBloqFirm;
 800ecaa:	46c0      	nop			@ (mov r8, r8)
			if (flagsRxFirm[2]){// btjt	flagsRxFirm,#2,rxBloqFirm_01
 800ecac:	4b6a      	ldr	r3, [pc, #424]	@ (800ee58 <tx_control+0x17a8>)
 800ecae:	789b      	ldrb	r3, [r3, #2]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d101      	bne.n	800ecb8 <tx_control+0x1608>
 800ecb4:	f000 fda2 	bl	800f7fc <tx_control+0x214c>
				goto rxBloqFirm_01;
 800ecb8:	46c0      	nop			@ (mov r8, r8)
			flagsRxFirm[2]=0; // bres	flagsRxFirm,#2;				/ borra bandera de paquete recibido
 800ecba:	4b67      	ldr	r3, [pc, #412]	@ (800ee58 <tx_control+0x17a8>)
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	709a      	strb	r2, [r3, #2]
			chksum_32_HW_LW=0;		// ldw		chksum_LW,X;					/ limpia registros de checksum
 800ecc0:	4b54      	ldr	r3, [pc, #336]	@ (800ee14 <tx_control+0x1764>)
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	601a      	str	r2, [r3, #0]
			wreg = 0;// clr		wreg
 800ecc6:	4b6b      	ldr	r3, [pc, #428]	@ (800ee74 <tx_control+0x17c4>)
 800ecc8:	2200      	movs	r2, #0
 800ecca:	701a      	strb	r2, [r3, #0]
			build_chksum(RxBuffer_Ble[0]); // call	build_chksum;	/ ve calculando el checksum
 800eccc:	4b5b      	ldr	r3, [pc, #364]	@ (800ee3c <tx_control+0x178c>)
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	0018      	movs	r0, r3
 800ecd2:	f7f8 f921 	bl	8006f18 <build_chksum>
			wreg++;			// inc		wreg
 800ecd6:	4b67      	ldr	r3, [pc, #412]	@ (800ee74 <tx_control+0x17c4>)
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	4b65      	ldr	r3, [pc, #404]	@ (800ee74 <tx_control+0x17c4>)
 800ece0:	701a      	strb	r2, [r3, #0]
			if(wreg<128){
 800ece2:	4b64      	ldr	r3, [pc, #400]	@ (800ee74 <tx_control+0x17c4>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	b25b      	sxtb	r3, r3
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	db00      	blt.n	800ecee <tx_control+0x163e>
				goto load_bloqFirm;
 800ecec:	e7ee      	b.n	800eccc <tx_control+0x161c>
			resulh = RxBuffer_Ble[1]; // ld		resulh,a
 800ecee:	4b53      	ldr	r3, [pc, #332]	@ (800ee3c <tx_control+0x178c>)
 800ecf0:	785a      	ldrb	r2, [r3, #1]
 800ecf2:	4b61      	ldr	r3, [pc, #388]	@ (800ee78 <tx_control+0x17c8>)
 800ecf4:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[2]; // ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800ecf6:	4b51      	ldr	r3, [pc, #324]	@ (800ee3c <tx_control+0x178c>)
 800ecf8:	789a      	ldrb	r2, [r3, #2]
 800ecfa:	4b60      	ldr	r3, [pc, #384]	@ (800ee7c <tx_control+0x17cc>)
 800ecfc:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[3];// ld		tempo2,a
 800ecfe:	4b4f      	ldr	r3, [pc, #316]	@ (800ee3c <tx_control+0x178c>)
 800ed00:	78da      	ldrb	r2, [r3, #3]
 800ed02:	4b5f      	ldr	r3, [pc, #380]	@ (800ee80 <tx_control+0x17d0>)
 800ed04:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[4];// ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800ed06:	4b4d      	ldr	r3, [pc, #308]	@ (800ee3c <tx_control+0x178c>)
 800ed08:	791a      	ldrb	r2, [r3, #4]
 800ed0a:	4b5e      	ldr	r3, [pc, #376]	@ (800ee84 <tx_control+0x17d4>)
 800ed0c:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1))!=((uint16_t)(chksum_32_HW_LW & 0x0000FFFF))){// jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800ed0e:	4b5c      	ldr	r3, [pc, #368]	@ (800ee80 <tx_control+0x17d0>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	021b      	lsls	r3, r3, #8
 800ed14:	b21a      	sxth	r2, r3
 800ed16:	4b5b      	ldr	r3, [pc, #364]	@ (800ee84 <tx_control+0x17d4>)
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	b21b      	sxth	r3, r3
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	b21a      	sxth	r2, r3
 800ed20:	4b3c      	ldr	r3, [pc, #240]	@ (800ee14 <tx_control+0x1764>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	b21b      	sxth	r3, r3
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d141      	bne.n	800edae <tx_control+0x16fe>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksum_32_HW_LW & 0xFFFF0000)>>16))){ //jrne	no_writeBloqFirm;			/ si no iguales sal si grabar bloque de firmware
 800ed2a:	4b53      	ldr	r3, [pc, #332]	@ (800ee78 <tx_control+0x17c8>)
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	021b      	lsls	r3, r3, #8
 800ed30:	b21a      	sxth	r2, r3
 800ed32:	4b52      	ldr	r3, [pc, #328]	@ (800ee7c <tx_control+0x17cc>)
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	b21b      	sxth	r3, r3
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	b21a      	sxth	r2, r3
 800ed3c:	4b35      	ldr	r3, [pc, #212]	@ (800ee14 <tx_control+0x1764>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	0c1b      	lsrs	r3, r3, #16
 800ed42:	b21b      	sxth	r3, r3
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d134      	bne.n	800edb2 <tx_control+0x1702>
no_inc_chksumFirm_HW:
 800ed48:	46c0      	nop			@ (mov r8, r8)
			chksumFirm_HW_LW += chksum_32_HW_LW; // 							ldw		chksumFirm_LW,X;			/ fuarda el checksum general calculado hasta ahora
 800ed4a:	4b47      	ldr	r3, [pc, #284]	@ (800ee68 <tx_control+0x17b8>)
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	4b31      	ldr	r3, [pc, #196]	@ (800ee14 <tx_control+0x1764>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	18d2      	adds	r2, r2, r3
 800ed54:	4b44      	ldr	r3, [pc, #272]	@ (800ee68 <tx_control+0x17b8>)
 800ed56:	601a      	str	r2, [r3, #0]
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800ed58:	4b3a      	ldr	r3, [pc, #232]	@ (800ee44 <tx_control+0x1794>)
 800ed5a:	22aa      	movs	r2, #170	@ 0xaa
 800ed5c:	701a      	strb	r2, [r3, #0]
			dataPointer = &RxBuffer_Ble[0];// LDW		dataPointer,X
 800ed5e:	4b3a      	ldr	r3, [pc, #232]	@ (800ee48 <tx_control+0x1798>)
 800ed60:	4a36      	ldr	r2, [pc, #216]	@ (800ee3c <tx_control+0x178c>)
 800ed62:	601a      	str	r2, [r3, #0]
			dirPointer = (128 * cntBloqFirm + eventLogger);// LDW		dirPointer,X
 800ed64:	4b3e      	ldr	r3, [pc, #248]	@ (800ee60 <tx_control+0x17b0>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	01db      	lsls	r3, r3, #7
 800ed6a:	001a      	movs	r2, r3
 800ed6c:	4b46      	ldr	r3, [pc, #280]	@ (800ee88 <tx_control+0x17d8>)
 800ed6e:	18d2      	adds	r2, r2, r3
 800ed70:	4b36      	ldr	r3, [pc, #216]	@ (800ee4c <tx_control+0x179c>)
 800ed72:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();// call	GRABA_BLOCK;					/ graba bloque de 128bytes en FLASH
 800ed74:	f7f8 f8e4 	bl	8006f40 <GRABA_BLOCK>
			cntBloqFirm++;// inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800ed78:	4b39      	ldr	r3, [pc, #228]	@ (800ee60 <tx_control+0x17b0>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	4b37      	ldr	r3, [pc, #220]	@ (800ee60 <tx_control+0x17b0>)
 800ed82:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm != numBloqFirm){//jrne	rxFirm_noComplete
 800ed84:	4b36      	ldr	r3, [pc, #216]	@ (800ee60 <tx_control+0x17b0>)
 800ed86:	781a      	ldrb	r2, [r3, #0]
 800ed88:	4b34      	ldr	r3, [pc, #208]	@ (800ee5c <tx_control+0x17ac>)
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d103      	bne.n	800ed98 <tx_control+0x16e8>
			flagsRxFirm[3]=1;// bset 	flagsRxFirm,#3;				/ indica que ya se recibieron todos los paquetes
 800ed90:	4b31      	ldr	r3, [pc, #196]	@ (800ee58 <tx_control+0x17a8>)
 800ed92:	2201      	movs	r2, #1
 800ed94:	70da      	strb	r2, [r3, #3]
 800ed96:	e000      	b.n	800ed9a <tx_control+0x16ea>
				goto rxFirm_noComplete ;
 800ed98:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800ed9a:	4b32      	ldr	r3, [pc, #200]	@ (800ee64 <tx_control+0x17b4>)
 800ed9c:	22f1      	movs	r2, #241	@ 0xf1
 800ed9e:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800eda0:	4b30      	ldr	r3, [pc, #192]	@ (800ee64 <tx_control+0x17b4>)
 800eda2:	223d      	movs	r2, #61	@ 0x3d
 800eda4:	705a      	strb	r2, [r3, #1]
			timeOutRx=5;				// mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800eda6:	4b32      	ldr	r3, [pc, #200]	@ (800ee70 <tx_control+0x17c0>)
 800eda8:	2205      	movs	r2, #5
 800edaa:	701a      	strb	r2, [r3, #0]
			goto ok_writeBloqFirm; 							// jp		ok_writeBloqFirm
 800edac:	e019      	b.n	800ede2 <tx_control+0x1732>
				goto no_writeBloqFirm;
 800edae:	46c0      	nop			@ (mov r8, r8)
 800edb0:	e000      	b.n	800edb4 <tx_control+0x1704>
				goto no_writeBloqFirm;
 800edb2:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1]=0xF1;	//mov		comando1,#$F1
 800edb4:	4b2b      	ldr	r3, [pc, #172]	@ (800ee64 <tx_control+0x17b4>)
 800edb6:	22f1      	movs	r2, #241	@ 0xf1
 800edb8:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2]=0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800edba:	4b2a      	ldr	r3, [pc, #168]	@ (800ee64 <tx_control+0x17b4>)
 800edbc:	223e      	movs	r2, #62	@ 0x3e
 800edbe:	705a      	strb	r2, [r3, #1]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800edc0:	2300      	movs	r3, #0
 800edc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800edc4:	e007      	b.n	800edd6 <tx_control+0x1726>
				flagsRxFirm[i]=0;
 800edc6:	4a24      	ldr	r2, [pc, #144]	@ (800ee58 <tx_control+0x17a8>)
 800edc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edca:	18d3      	adds	r3, r2, r3
 800edcc:	2200      	movs	r2, #0
 800edce:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<8; i++)				// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800edd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd2:	3301      	adds	r3, #1
 800edd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800edd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd8:	2b07      	cmp	r3, #7
 800edda:	ddf4      	ble.n	800edc6 <tx_control+0x1716>
			codeTX = 0;						// clr		codeTX;								/ ignora comandos si es que se producieron
 800eddc:	4b16      	ldr	r3, [pc, #88]	@ (800ee38 <tx_control+0x1788>)
 800edde:	2200      	movs	r2, #0
 800ede0:	701a      	strb	r2, [r3, #0]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800ede2:	4b0e      	ldr	r3, [pc, #56]	@ (800ee1c <tx_control+0x176c>)
 800ede4:	4a1f      	ldr	r2, [pc, #124]	@ (800ee64 <tx_control+0x17b4>)
 800ede6:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800ede8:	4b0d      	ldr	r3, [pc, #52]	@ (800ee20 <tx_control+0x1770>)
 800edea:	4a1e      	ldr	r2, [pc, #120]	@ (800ee64 <tx_control+0x17b4>)
 800edec:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800edee:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <tx_control+0x1774>)
 800edf0:	4a1e      	ldr	r2, [pc, #120]	@ (800ee6c <tx_control+0x17bc>)
 800edf2:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;				// mov		blockSizeTX,#2
 800edf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ee2c <tx_control+0x177c>)
 800edf6:	2202      	movs	r2, #2
 800edf8:	701a      	strb	r2, [r3, #0]
			flagsTX[3]=1;	// bset	flagsTX,#3;						/ evita que se mande checksum
 800edfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ee30 <tx_control+0x1780>)
 800edfc:	2201      	movs	r2, #1
 800edfe:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800ee00:	4b0c      	ldr	r3, [pc, #48]	@ (800ee34 <tx_control+0x1784>)
 800ee02:	2255      	movs	r2, #85	@ 0x55
 800ee04:	701a      	strb	r2, [r3, #0]
			codeTX = 0;		// clr		codeTX;
 800ee06:	4b0c      	ldr	r3, [pc, #48]	@ (800ee38 <tx_control+0x1788>)
 800ee08:	2200      	movs	r2, #0
 800ee0a:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;				// jp		end_tx_control
 800ee0c:	f000 fcf7 	bl	800f7fe <tx_control+0x214e>
 800ee10:	0803f000 	.word	0x0803f000
 800ee14:	20000e34 	.word	0x20000e34
 800ee18:	20000fa8 	.word	0x20000fa8
 800ee1c:	20000e14 	.word	0x20000e14
 800ee20:	20000e0c 	.word	0x20000e0c
 800ee24:	20000e10 	.word	0x20000e10
 800ee28:	20001034 	.word	0x20001034
 800ee2c:	20000e30 	.word	0x20000e30
 800ee30:	20000e1c 	.word	0x20000e1c
 800ee34:	20000e19 	.word	0x20000e19
 800ee38:	20000e24 	.word	0x20000e24
 800ee3c:	20000984 	.word	0x20000984
 800ee40:	0803f07c 	.word	0x0803f07c
 800ee44:	20000d8c 	.word	0x20000d8c
 800ee48:	20000d94 	.word	0x20000d94
 800ee4c:	20000d90 	.word	0x20000d90
 800ee50:	20000de0 	.word	0x20000de0
 800ee54:	20000de1 	.word	0x20000de1
 800ee58:	20000edc 	.word	0x20000edc
 800ee5c:	20000ed0 	.word	0x20000ed0
 800ee60:	20000ed1 	.word	0x20000ed1
 800ee64:	20000db4 	.word	0x20000db4
 800ee68:	20000ed4 	.word	0x20000ed4
 800ee6c:	20000db5 	.word	0x20000db5
 800ee70:	20000ee6 	.word	0x20000ee6
 800ee74:	20000b55 	.word	0x20000b55
 800ee78:	20000b47 	.word	0x20000b47
 800ee7c:	20000b48 	.word	0x20000b48
 800ee80:	20000b4e 	.word	0x20000b4e
 800ee84:	20000b4f 	.word	0x20000b4f
 800ee88:	08037000 	.word	0x08037000
			goto rxChkFirm;				// jp		rxChkFirm;
 800ee8c:	46c0      	nop			@ (mov r8, r8)
			if(flagsRxFirm[4]){//	btjt	flagsRxFirm,#4,end_rx_firmware; se recibió fimware con éxito, no realices nada más
 800ee8e:	4bdc      	ldr	r3, [pc, #880]	@ (800f200 <tx_control+0x1b50>)
 800ee90:	791b      	ldrb	r3, [r3, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d171      	bne.n	800ef7a <tx_control+0x18ca>
			if(codeTX != 0x4A){//				jrne	end_rx_firmware
 800ee96:	4bdb      	ldr	r3, [pc, #876]	@ (800f204 <tx_control+0x1b54>)
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	2b4a      	cmp	r3, #74	@ 0x4a
 800ee9c:	d170      	bne.n	800ef80 <tx_control+0x18d0>
			resulh = RxBuffer_Ble[2];	// ld		resulh,a
 800ee9e:	4bda      	ldr	r3, [pc, #872]	@ (800f208 <tx_control+0x1b58>)
 800eea0:	789a      	ldrb	r2, [r3, #2]
 800eea2:	4bda      	ldr	r3, [pc, #872]	@ (800f20c <tx_control+0x1b5c>)
 800eea4:	701a      	strb	r2, [r3, #0]
			resull = RxBuffer_Ble[3];	// ld		resull,a;							/ carga los 16 bits más significativos del checksum transmitido
 800eea6:	4bd8      	ldr	r3, [pc, #864]	@ (800f208 <tx_control+0x1b58>)
 800eea8:	78da      	ldrb	r2, [r3, #3]
 800eeaa:	4bd9      	ldr	r3, [pc, #868]	@ (800f210 <tx_control+0x1b60>)
 800eeac:	701a      	strb	r2, [r3, #0]
			tempo2 = RxBuffer_Ble[4];// ld		tempo2,a
 800eeae:	4bd6      	ldr	r3, [pc, #856]	@ (800f208 <tx_control+0x1b58>)
 800eeb0:	791a      	ldrb	r2, [r3, #4]
 800eeb2:	4bd8      	ldr	r3, [pc, #864]	@ (800f214 <tx_control+0x1b64>)
 800eeb4:	701a      	strb	r2, [r3, #0]
			tempo1 = RxBuffer_Ble[5]; // ld		tempo1,a;							/ carga los 16 bits más significativos del checksum transmitido
 800eeb6:	4bd4      	ldr	r3, [pc, #848]	@ (800f208 <tx_control+0x1b58>)
 800eeb8:	795a      	ldrb	r2, [r3, #5]
 800eeba:	4bd7      	ldr	r3, [pc, #860]	@ (800f218 <tx_control+0x1b68>)
 800eebc:	701a      	strb	r2, [r3, #0]
			if(((uint16_t)((tempo2<<8)|tempo1)) != ((uint16_t)(chksumFirm_HW_LW & 0x0000FFFF))){		// jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800eebe:	4bd5      	ldr	r3, [pc, #852]	@ (800f214 <tx_control+0x1b64>)
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	021b      	lsls	r3, r3, #8
 800eec4:	b21a      	sxth	r2, r3
 800eec6:	4bd4      	ldr	r3, [pc, #848]	@ (800f218 <tx_control+0x1b68>)
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	b21b      	sxth	r3, r3
 800eecc:	4313      	orrs	r3, r2
 800eece:	b21a      	sxth	r2, r3
 800eed0:	4bd2      	ldr	r3, [pc, #840]	@ (800f21c <tx_control+0x1b6c>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	b21b      	sxth	r3, r3
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d11b      	bne.n	800ef12 <tx_control+0x1862>
			if(((uint16_t)((resulh<<8)|resull)) != ((uint16_t)((chksumFirm_HW_LW & 0xFFFF0000)>>16))){//		jrne	rxFirmErr;						/ si no iguales sal si grabar bloque de firmware
 800eeda:	4bcc      	ldr	r3, [pc, #816]	@ (800f20c <tx_control+0x1b5c>)
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	021b      	lsls	r3, r3, #8
 800eee0:	b21a      	sxth	r2, r3
 800eee2:	4bcb      	ldr	r3, [pc, #812]	@ (800f210 <tx_control+0x1b60>)
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	b21b      	sxth	r3, r3
 800eee8:	4313      	orrs	r3, r2
 800eeea:	b21a      	sxth	r2, r3
 800eeec:	4bcb      	ldr	r3, [pc, #812]	@ (800f21c <tx_control+0x1b6c>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	0c1b      	lsrs	r3, r3, #16
 800eef2:	b21b      	sxth	r3, r3
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d10e      	bne.n	800ef16 <tx_control+0x1866>
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800eef8:	4bc9      	ldr	r3, [pc, #804]	@ (800f220 <tx_control+0x1b70>)
 800eefa:	22f1      	movs	r2, #241	@ 0xf1
 800eefc:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;//	mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800eefe:	4bc8      	ldr	r3, [pc, #800]	@ (800f220 <tx_control+0x1b70>)
 800ef00:	223d      	movs	r2, #61	@ 0x3d
 800ef02:	705a      	strb	r2, [r3, #1]
			flagsRxFirm[4] = 1;				// bset	flagsRxFirm,#4;				/ inidca que que el Fimware recibido es correcto
 800ef04:	4bbe      	ldr	r3, [pc, #760]	@ (800f200 <tx_control+0x1b50>)
 800ef06:	2201      	movs	r2, #1
 800ef08:	711a      	strb	r2, [r3, #4]
			timeOutRx=5;	//	mov		timeOutRx,#5;					/ carga time out para recibir respuestas
 800ef0a:	4bc6      	ldr	r3, [pc, #792]	@ (800f224 <tx_control+0x1b74>)
 800ef0c:	2205      	movs	r2, #5
 800ef0e:	701a      	strb	r2, [r3, #0]
			goto rxFirmOK;//	jp		rxFirmOK
 800ef10:	e019      	b.n	800ef46 <tx_control+0x1896>
				goto rxFirmErr;
 800ef12:	46c0      	nop			@ (mov r8, r8)
 800ef14:	e000      	b.n	800ef18 <tx_control+0x1868>
				goto rxFirmErr;
 800ef16:	46c0      	nop			@ (mov r8, r8)
			BloqDatalooger[comando1] = 0xF1; //	mov		comando1,#$F1
 800ef18:	4bc1      	ldr	r3, [pc, #772]	@ (800f220 <tx_control+0x1b70>)
 800ef1a:	22f1      	movs	r2, #241	@ 0xf1
 800ef1c:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E; // mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800ef1e:	4bc0      	ldr	r3, [pc, #768]	@ (800f220 <tx_control+0x1b70>)
 800ef20:	223e      	movs	r2, #62	@ 0x3e
 800ef22:	705a      	strb	r2, [r3, #1]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800ef24:	2300      	movs	r3, #0
 800ef26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef28:	e007      	b.n	800ef3a <tx_control+0x188a>
				flagsRxFirm[i]=0;
 800ef2a:	4ab5      	ldr	r2, [pc, #724]	@ (800f200 <tx_control+0x1b50>)
 800ef2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef2e:	18d3      	adds	r3, r2, r3
 800ef30:	2200      	movs	r2, #0
 800ef32:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<8; i++)// clr		flagsRxFirm;					/ borra banderas de Rx de firmware para cancelar proceso
 800ef34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef36:	3301      	adds	r3, #1
 800ef38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef3c:	2b07      	cmp	r3, #7
 800ef3e:	ddf4      	ble.n	800ef2a <tx_control+0x187a>
			codeTX = 0;// clr		codeTX;								/ ignora comandos si es que se producieron
 800ef40:	4bb0      	ldr	r3, [pc, #704]	@ (800f204 <tx_control+0x1b54>)
 800ef42:	2200      	movs	r2, #0
 800ef44:	701a      	strb	r2, [r3, #0]
			pointTx =  &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800ef46:	4bb8      	ldr	r3, [pc, #736]	@ (800f228 <tx_control+0x1b78>)
 800ef48:	4ab5      	ldr	r2, [pc, #724]	@ (800f220 <tx_control+0x1b70>)
 800ef4a:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800ef4c:	4bb7      	ldr	r3, [pc, #732]	@ (800f22c <tx_control+0x1b7c>)
 800ef4e:	4ab4      	ldr	r2, [pc, #720]	@ (800f220 <tx_control+0x1b70>)
 800ef50:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800ef52:	4bb7      	ldr	r3, [pc, #732]	@ (800f230 <tx_control+0x1b80>)
 800ef54:	4ab7      	ldr	r2, [pc, #732]	@ (800f234 <tx_control+0x1b84>)
 800ef56:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2; 						//mov		blockSizeTX,#2
 800ef58:	4bb7      	ldr	r3, [pc, #732]	@ (800f238 <tx_control+0x1b88>)
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800ef5e:	4bb7      	ldr	r3, [pc, #732]	@ (800f23c <tx_control+0x1b8c>)
 800ef60:	2201      	movs	r2, #1
 800ef62:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55 ;					// 	mov		keyTx,#$55;						/ listo para mandar transmisión
 800ef64:	4bb6      	ldr	r3, [pc, #728]	@ (800f240 <tx_control+0x1b90>)
 800ef66:	2255      	movs	r2, #85	@ 0x55
 800ef68:	701a      	strb	r2, [r3, #0]
			codeTX = 0;	// clr		codeTX;
 800ef6a:	4ba6      	ldr	r3, [pc, #664]	@ (800f204 <tx_control+0x1b54>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800ef70:	f000 fc45 	bl	800f7fe <tx_control+0x214e>
			goto end_rx_firmware;	// jp		end_rx_firmware
 800ef74:	46c0      	nop			@ (mov r8, r8)
 800ef76:	f000 fc42 	bl	800f7fe <tx_control+0x214e>
				goto end_rx_firmware;
 800ef7a:	46c0      	nop			@ (mov r8, r8)
 800ef7c:	f000 fc3f 	bl	800f7fe <tx_control+0x214e>
					goto end_rx_firmware;
 800ef80:	46c0      	nop			@ (mov r8, r8)
			goto end_tx_control; 			//jp		end_tx_control//----------------------------------------------------------
 800ef82:	f000 fc3c 	bl	800f7fe <tx_control+0x214e>
			ProgMemCode = 0xAA; // mov		ProgMemCode,#$AA;			/ Indica que se va a grabar bloque de FLASH
 800ef86:	4baf      	ldr	r3, [pc, #700]	@ (800f244 <tx_control+0x1b94>)
 800ef88:	22aa      	movs	r2, #170	@ 0xaa
 800ef8a:	701a      	strb	r2, [r3, #0]
			dataPointer = &data_buffer[0];		// LDW		dataPointer,X
 800ef8c:	4bae      	ldr	r3, [pc, #696]	@ (800f248 <tx_control+0x1b98>)
 800ef8e:	4aaf      	ldr	r2, [pc, #700]	@ (800f24c <tx_control+0x1b9c>)
 800ef90:	601a      	str	r2, [r3, #0]
			dirPointer  = (cntBloqFirm*128+&eventLogger[0]);		// LDW		dirPointer,X
 800ef92:	4baf      	ldr	r3, [pc, #700]	@ (800f250 <tx_control+0x1ba0>)
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	01db      	lsls	r3, r3, #7
 800ef98:	001a      	movs	r2, r3
 800ef9a:	4bae      	ldr	r3, [pc, #696]	@ (800f254 <tx_control+0x1ba4>)
 800ef9c:	18d2      	adds	r2, r2, r3
 800ef9e:	4bae      	ldr	r3, [pc, #696]	@ (800f258 <tx_control+0x1ba8>)
 800efa0:	601a      	str	r2, [r3, #0]
			cntBloqFirm++; // inc		cntBloqFirm;					/ incrmenta el contador de datos recibidos
 800efa2:	4bab      	ldr	r3, [pc, #684]	@ (800f250 <tx_control+0x1ba0>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	3301      	adds	r3, #1
 800efa8:	b2da      	uxtb	r2, r3
 800efaa:	4ba9      	ldr	r3, [pc, #676]	@ (800f250 <tx_control+0x1ba0>)
 800efac:	701a      	strb	r2, [r3, #0]
			if(cntBloqFirm!= 0){ // jrne	tx_clean_logger_loop
 800efae:	4ba8      	ldr	r3, [pc, #672]	@ (800f250 <tx_control+0x1ba0>)
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d000      	beq.n	800efb8 <tx_control+0x1908>
				goto tx_clean_logger_loop;
 800efb6:	e7e6      	b.n	800ef86 <tx_control+0x18d6>
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800efb8:	4b99      	ldr	r3, [pc, #612]	@ (800f220 <tx_control+0x1b70>)
 800efba:	22f1      	movs	r2, #241	@ 0xf1
 800efbc:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D; // mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800efbe:	4b98      	ldr	r3, [pc, #608]	@ (800f220 <tx_control+0x1b70>)
 800efc0:	223d      	movs	r2, #61	@ 0x3d
 800efc2:	705a      	strb	r2, [r3, #1]
			cntByteBlockDATA = 0; 	// clr		cntByteBlockDATA
 800efc4:	4ba5      	ldr	r3, [pc, #660]	@ (800f25c <tx_control+0x1bac>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	701a      	strb	r2, [r3, #0]
			cntBlockDATA = 0; 		// clr		cntBlockDATA
 800efca:	4ba5      	ldr	r3, [pc, #660]	@ (800f260 <tx_control+0x1bb0>)
 800efcc:	2200      	movs	r2, #0
 800efce:	701a      	strb	r2, [r3, #0]
			cntByteBlockEVENT = 0; // clr		cntByteBlockEVENT
 800efd0:	4ba4      	ldr	r3, [pc, #656]	@ (800f264 <tx_control+0x1bb4>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
			cntBlockEVENT = 0;		// clr		cntBlockEVENT
 800efd6:	4ba4      	ldr	r3, [pc, #656]	@ (800f268 <tx_control+0x1bb8>)
 800efd8:	2200      	movs	r2, #0
 800efda:	701a      	strb	r2, [r3, #0]
			dirBuffer = &data_buffer[0];	// ldw		dirBuffer,X
 800efdc:	4ba3      	ldr	r3, [pc, #652]	@ (800f26c <tx_control+0x1bbc>)
 800efde:	4a9b      	ldr	r2, [pc, #620]	@ (800f24c <tx_control+0x1b9c>)
 800efe0:	601a      	str	r2, [r3, #0]
			dirLogger = &dataLogger[0];		// ldw		dirLogger,X
 800efe2:	4ba3      	ldr	r3, [pc, #652]	@ (800f270 <tx_control+0x1bc0>)
 800efe4:	4aa3      	ldr	r2, [pc, #652]	@ (800f274 <tx_control+0x1bc4>)
 800efe6:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockDATA; 	// mov		cntBlockFlash,cntBlockDATA
 800efe8:	4b9d      	ldr	r3, [pc, #628]	@ (800f260 <tx_control+0x1bb0>)
 800efea:	781a      	ldrb	r2, [r3, #0]
 800efec:	4ba2      	ldr	r3, [pc, #648]	@ (800f278 <tx_control+0x1bc8>)
 800efee:	701a      	strb	r2, [r3, #0]
			load_next_buffer();				// call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800eff0:	f7f7 fe4e 	bl	8006c90 <load_next_buffer>
			dirBuffer = &event_buffer[0];  // ldw		dirBuffer,X
 800eff4:	4b9d      	ldr	r3, [pc, #628]	@ (800f26c <tx_control+0x1bbc>)
 800eff6:	4aa1      	ldr	r2, [pc, #644]	@ (800f27c <tx_control+0x1bcc>)
 800eff8:	601a      	str	r2, [r3, #0]
			dirLogger = & eventLogger[0];// ldw		dirLogger,X
 800effa:	4b9d      	ldr	r3, [pc, #628]	@ (800f270 <tx_control+0x1bc0>)
 800effc:	4a95      	ldr	r2, [pc, #596]	@ (800f254 <tx_control+0x1ba4>)
 800effe:	601a      	str	r2, [r3, #0]
			cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT
 800f000:	4b99      	ldr	r3, [pc, #612]	@ (800f268 <tx_control+0x1bb8>)
 800f002:	781a      	ldrb	r2, [r3, #0]
 800f004:	4b9c      	ldr	r3, [pc, #624]	@ (800f278 <tx_control+0x1bc8>)
 800f006:	701a      	strb	r2, [r3, #0]
			load_next_buffer(); // call	load_next_buffer	; carga buffer de RAM con el bloque de datos
 800f008:	f7f7 fe42 	bl	8006c90 <load_next_buffer>
			for(int i = 0; i<8; i++)
 800f00c:	2300      	movs	r3, #0
 800f00e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f010:	e007      	b.n	800f022 <tx_control+0x1972>
				flagsEvent[i] = 0;// clr		flagsEvent;		Cancela cualquier inicio de eventos
 800f012:	4a9b      	ldr	r2, [pc, #620]	@ (800f280 <tx_control+0x1bd0>)
 800f014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f016:	18d3      	adds	r3, r2, r3
 800f018:	2200      	movs	r2, #0
 800f01a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++)
 800f01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f01e:	3301      	adds	r3, #1
 800f020:	627b      	str	r3, [r7, #36]	@ 0x24
 800f022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f024:	2b07      	cmp	r3, #7
 800f026:	ddf4      	ble.n	800f012 <tx_control+0x1962>
			goto ok_clean_logger; //jp		ok_clean_logger
 800f028:	46c0      	nop			@ (mov r8, r8)
			pointTx = &BloqDatalooger[comando1];	// ldw		pointTx,X
 800f02a:	4b7f      	ldr	r3, [pc, #508]	@ (800f228 <tx_control+0x1b78>)
 800f02c:	4a7c      	ldr	r2, [pc, #496]	@ (800f220 <tx_control+0x1b70>)
 800f02e:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];// ldw		pointInitTx,X
 800f030:	4b7e      	ldr	r3, [pc, #504]	@ (800f22c <tx_control+0x1b7c>)
 800f032:	4a7b      	ldr	r2, [pc, #492]	@ (800f220 <tx_control+0x1b70>)
 800f034:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f036:	4b7e      	ldr	r3, [pc, #504]	@ (800f230 <tx_control+0x1b80>)
 800f038:	4a7e      	ldr	r2, [pc, #504]	@ (800f234 <tx_control+0x1b84>)
 800f03a:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f03c:	4b7e      	ldr	r3, [pc, #504]	@ (800f238 <tx_control+0x1b88>)
 800f03e:	2202      	movs	r2, #2
 800f040:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;		// bset	flagsTX,#3;						/ evita que se mande checksum
 800f042:	4b7e      	ldr	r3, [pc, #504]	@ (800f23c <tx_control+0x1b8c>)
 800f044:	2201      	movs	r2, #1
 800f046:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 		// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f048:	4b7d      	ldr	r3, [pc, #500]	@ (800f240 <tx_control+0x1b90>)
 800f04a:	2255      	movs	r2, #85	@ 0x55
 800f04c:	701a      	strb	r2, [r3, #0]
			codeTX=0;			//clr		codeTX;
 800f04e:	4b6d      	ldr	r3, [pc, #436]	@ (800f204 <tx_control+0x1b54>)
 800f050:	2200      	movs	r2, #0
 800f052:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;// jp		end_tx_control
 800f054:	f000 fbd3 	bl	800f7fe <tx_control+0x214e>
			wreg = RxBuffer_Ble[2];  // ld		wreg,A;
 800f058:	4b6b      	ldr	r3, [pc, #428]	@ (800f208 <tx_control+0x1b58>)
 800f05a:	789a      	ldrb	r2, [r3, #2]
 800f05c:	4b89      	ldr	r3, [pc, #548]	@ (800f284 <tx_control+0x1bd4>)
 800f05e:	701a      	strb	r2, [r3, #0]
			waux = findLastValue((uint32_t)&eeEstado1);
 800f060:	4b89      	ldr	r3, [pc, #548]	@ (800f288 <tx_control+0x1bd8>)
 800f062:	0018      	movs	r0, r3
 800f064:	f7f3 fdda 	bl	8002c1c <findLastValue>
 800f068:	0003      	movs	r3, r0
 800f06a:	b2da      	uxtb	r2, r3
 800f06c:	4b87      	ldr	r3, [pc, #540]	@ (800f28c <tx_control+0x1bdc>)
 800f06e:	701a      	strb	r2, [r3, #0]
			if(!GetRegFlagState(wreg, est1Refri)) {// btjf	wreg,#est1Refri,chk_est1_b1; / hay cambio de estado refrigerador on/off ?
 800f070:	4b84      	ldr	r3, [pc, #528]	@ (800f284 <tx_control+0x1bd4>)
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	001a      	movs	r2, r3
 800f076:	2301      	movs	r3, #1
 800f078:	4013      	ands	r3, r2
 800f07a:	d00d      	beq.n	800f098 <tx_control+0x19e8>
			BitComplement(waux,est1Refri);// bcpl	waux,#est1Refri; 			/ cambia el estado del refri
 800f07c:	4b83      	ldr	r3, [pc, #524]	@ (800f28c <tx_control+0x1bdc>)
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	2201      	movs	r2, #1
 800f082:	4053      	eors	r3, r2
 800f084:	b2da      	uxtb	r2, r3
 800f086:	4b81      	ldr	r3, [pc, #516]	@ (800f28c <tx_control+0x1bdc>)
 800f088:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800f08a:	4b81      	ldr	r3, [pc, #516]	@ (800f290 <tx_control+0x1be0>)
 800f08c:	22fa      	movs	r2, #250	@ 0xfa
 800f08e:	701a      	strb	r2, [r3, #0]
			numMsg = 1; 		// mov		numMsg,#1
 800f090:	4b80      	ldr	r3, [pc, #512]	@ (800f294 <tx_control+0x1be4>)
 800f092:	2201      	movs	r2, #1
 800f094:	701a      	strb	r2, [r3, #0]
 800f096:	e000      	b.n	800f09a <tx_control+0x19ea>
				goto chk_est1_b1;
 800f098:	46c0      	nop			@ (mov r8, r8)
chk_est1_b2:
 800f09a:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Lamp)){// btjf	wreg,#est1Lamp,chk_est1_b3; / hay cambio de estado de lampara ?
 800f09c:	4b79      	ldr	r3, [pc, #484]	@ (800f284 <tx_control+0x1bd4>)
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	001a      	movs	r2, r3
 800f0a2:	2304      	movs	r3, #4
 800f0a4:	4013      	ands	r3, r2
 800f0a6:	d027      	beq.n	800f0f8 <tx_control+0x1a48>
			flagsC[f_lampDoor] ^= 1;	 // bcpl	flagsC,#f_lampDoor;				/ cambia el estado de la bandera de control de lámpara
 800f0a8:	4b7b      	ldr	r3, [pc, #492]	@ (800f298 <tx_control+0x1be8>)
 800f0aa:	799b      	ldrb	r3, [r3, #6]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	4053      	eors	r3, r2
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	1e5a      	subs	r2, r3, #1
 800f0b4:	4193      	sbcs	r3, r2
 800f0b6:	b2da      	uxtb	r2, r3
 800f0b8:	4b77      	ldr	r3, [pc, #476]	@ (800f298 <tx_control+0x1be8>)
 800f0ba:	719a      	strb	r2, [r3, #6]
			waux &= 0xFB;// BitClear(waux,est1Lamp); // bres	waux,#est1Lamp
 800f0bc:	4b73      	ldr	r3, [pc, #460]	@ (800f28c <tx_control+0x1bdc>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	2204      	movs	r2, #4
 800f0c2:	4393      	bics	r3, r2
 800f0c4:	b2da      	uxtb	r2, r3
 800f0c6:	4b71      	ldr	r3, [pc, #452]	@ (800f28c <tx_control+0x1bdc>)
 800f0c8:	701a      	strb	r2, [r3, #0]
			if(!flagsC[f_lampDoor]){// btjf	flagsC,#f_lampDoor,chk_est1_b2_01;	actualiza estado de lampara para guardarlo en eeprom
 800f0ca:	4b73      	ldr	r3, [pc, #460]	@ (800f298 <tx_control+0x1be8>)
 800f0cc:	799b      	ldrb	r3, [r3, #6]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	4053      	eors	r3, r2
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d107      	bne.n	800f0e8 <tx_control+0x1a38>
			BitSet(waux,est1Lamp);// bset	waux,#est1Lamp
 800f0d8:	4b6c      	ldr	r3, [pc, #432]	@ (800f28c <tx_control+0x1bdc>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	2204      	movs	r2, #4
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	b2da      	uxtb	r2, r3
 800f0e2:	4b6a      	ldr	r3, [pc, #424]	@ (800f28c <tx_control+0x1bdc>)
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	e000      	b.n	800f0ea <tx_control+0x1a3a>
				goto chk_est1_b2_01;
 800f0e8:	46c0      	nop			@ (mov r8, r8)
			cntMsgCmd = 250; 	// mov		cntMsgCmd,#250
 800f0ea:	4b69      	ldr	r3, [pc, #420]	@ (800f290 <tx_control+0x1be0>)
 800f0ec:	22fa      	movs	r2, #250	@ 0xfa
 800f0ee:	701a      	strb	r2, [r3, #0]
			numMsg = 2; 		// mov		numMsg,#2
 800f0f0:	4b68      	ldr	r3, [pc, #416]	@ (800f294 <tx_control+0x1be4>)
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	701a      	strb	r2, [r3, #0]
 800f0f6:	e000      	b.n	800f0fa <tx_control+0x1a4a>
				goto chk_est1_b3;
 800f0f8:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Ahorro2)){ 	// btjf	wreg,#est1Ahorro2,chk_est1_b4; / hay cambio de estado modo ahorro 2 ?
 800f0fa:	4b62      	ldr	r3, [pc, #392]	@ (800f284 <tx_control+0x1bd4>)
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	001a      	movs	r2, r3
 800f100:	2308      	movs	r3, #8
 800f102:	4013      	ands	r3, r2
 800f104:	d019      	beq.n	800f13a <tx_control+0x1a8a>
			if(flagsC[f_ahorro2]){	// btjt	flagsC,#f_ahorro2,chk_est1_b3_01
 800f106:	4b64      	ldr	r3, [pc, #400]	@ (800f298 <tx_control+0x1be8>)
 800f108:	789b      	ldrb	r3, [r3, #2]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d106      	bne.n	800f11c <tx_control+0x1a6c>
			t_ahorro1_H = 0; 	// clr		t_ahorro1_H
 800f10e:	4b63      	ldr	r3, [pc, #396]	@ (800f29c <tx_control+0x1bec>)
 800f110:	2200      	movs	r2, #0
 800f112:	801a      	strh	r2, [r3, #0]
			t_ahorro2_H= 0;		// clr		t_ahorro2_H
 800f114:	4b62      	ldr	r3, [pc, #392]	@ (800f2a0 <tx_control+0x1bf0>)
 800f116:	2200      	movs	r2, #0
 800f118:	801a      	strh	r2, [r3, #0]
			goto chk_est1_b4;	// jra		chk_est1_b4
 800f11a:	e00f      	b.n	800f13c <tx_control+0x1a8c>
				goto chk_est1_b3_01;
 800f11c:	46c0      	nop			@ (mov r8, r8)
			cntdpysp = 0xF0; // mov			cntdpysp,#$F0;		/ Despliega Set Point y el diferencial
 800f11e:	4b61      	ldr	r3, [pc, #388]	@ (800f2a4 <tx_control+0x1bf4>)
 800f120:	22f0      	movs	r2, #240	@ 0xf0
 800f122:	701a      	strb	r2, [r3, #0]
			flagsC[f_ahorro1] = 0;	// bres	flagsC,#f_ahorro1
 800f124:	4b5c      	ldr	r3, [pc, #368]	@ (800f298 <tx_control+0x1be8>)
 800f126:	2200      	movs	r2, #0
 800f128:	705a      	strb	r2, [r3, #1]
			flagsC[f_ahorro2] = 0;		// bres	flagsC,#f_ahorro2
 800f12a:	4b5b      	ldr	r3, [pc, #364]	@ (800f298 <tx_control+0x1be8>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	709a      	strb	r2, [r3, #2]
			load_tiempoAhorro1();			// call	load_tiempoAhorro1;			/ cada que se abre puerta vuelve a cargar tiempos de ahorro
 800f130:	f7f7 fd5e 	bl	8006bf0 <load_tiempoAhorro1>
			load_tiempoAhorro2();			// call	load_tiempoAhorro2;
 800f134:	f7f7 fd7a 	bl	8006c2c <load_tiempoAhorro2>
 800f138:	e000      	b.n	800f13c <tx_control+0x1a8c>
				goto chk_est1_b4;
 800f13a:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Reset)){	//btjf	wreg,#est1Reset,chk_est1_b5; / hay solicitud de reset ?
 800f13c:	4b51      	ldr	r3, [pc, #324]	@ (800f284 <tx_control+0x1bd4>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	001a      	movs	r2, r3
 800f142:	2310      	movs	r3, #16
 800f144:	4013      	ands	r3, r2
 800f146:	d003      	beq.n	800f150 <tx_control+0x1aa0>
			estado1[est1Reset]=1;	//bset	estado1,#est1Reset
 800f148:	4b57      	ldr	r3, [pc, #348]	@ (800f2a8 <tx_control+0x1bf8>)
 800f14a:	2201      	movs	r2, #1
 800f14c:	711a      	strb	r2, [r3, #4]
 800f14e:	e000      	b.n	800f152 <tx_control+0x1aa2>
				goto chk_est1_b5;
 800f150:	46c0      	nop			@ (mov r8, r8)
			if(!GetRegFlagState(wreg, est1Snooze)){		//btjf	wreg,#est1Snooze,chk_est1_b6; / hay cambio de estado buzzer ?
 800f152:	4b4c      	ldr	r3, [pc, #304]	@ (800f284 <tx_control+0x1bd4>)
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	001a      	movs	r2, r3
 800f158:	2320      	movs	r3, #32
 800f15a:	4013      	ands	r3, r2
 800f15c:	d002      	beq.n	800f164 <tx_control+0x1ab4>
			ld_alarmDelay(); // call		ld_alarmDelay;				/ carga tiempo de Snooze LC
 800f15e:	f7f7 fe8d 	bl	8006e7c <ld_alarmDelay>
 800f162:	e000      	b.n	800f166 <tx_control+0x1ab6>
				goto chk_est1_b6;
 800f164:	46c0      	nop			@ (mov r8, r8)
			if(GetRegFlagState(Plantilla[logicos2],funReleDesh)){
 800f166:	4b51      	ldr	r3, [pc, #324]	@ (800f2ac <tx_control+0x1bfc>)
 800f168:	225b      	movs	r2, #91	@ 0x5b
 800f16a:	5c9b      	ldrb	r3, [r3, r2]
 800f16c:	001a      	movs	r2, r3
 800f16e:	2308      	movs	r3, #8
 800f170:	4013      	ands	r3, r2
 800f172:	d113      	bne.n	800f19c <tx_control+0x1aec>
			if(!GetRegFlagState(wreg, est1LockDr)){		// btjf	wreg,#est1LockDr,chk_est1_b7; / hay cambio de estado en cerradura ?
 800f174:	4b43      	ldr	r3, [pc, #268]	@ (800f284 <tx_control+0x1bd4>)
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	001a      	movs	r2, r3
 800f17a:	2340      	movs	r3, #64	@ 0x40
 800f17c:	4013      	ands	r3, r2
 800f17e:	d00f      	beq.n	800f1a0 <tx_control+0x1af0>
			BitComplement(waux,est1LockDr);	// bcpl	waux,#est1LockDr;	/ cambia estado de rele cerradura
 800f180:	4b42      	ldr	r3, [pc, #264]	@ (800f28c <tx_control+0x1bdc>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2240      	movs	r2, #64	@ 0x40
 800f186:	4053      	eors	r3, r2
 800f188:	b2da      	uxtb	r2, r3
 800f18a:	4b40      	ldr	r3, [pc, #256]	@ (800f28c <tx_control+0x1bdc>)
 800f18c:	701a      	strb	r2, [r3, #0]
			cntMsgCmd = 250;	// mov		cntMsgCmd,#250
 800f18e:	4b40      	ldr	r3, [pc, #256]	@ (800f290 <tx_control+0x1be0>)
 800f190:	22fa      	movs	r2, #250	@ 0xfa
 800f192:	701a      	strb	r2, [r3, #0]
			numMsg = 3;	// mov		numMsg,#3
 800f194:	4b3f      	ldr	r3, [pc, #252]	@ (800f294 <tx_control+0x1be4>)
 800f196:	2203      	movs	r2, #3
 800f198:	701a      	strb	r2, [r3, #0]
 800f19a:	e002      	b.n	800f1a2 <tx_control+0x1af2>
				goto deshTypeAct_05;
 800f19c:	46c0      	nop			@ (mov r8, r8)
 800f19e:	e000      	b.n	800f1a2 <tx_control+0x1af2>
				goto chk_est1_b7;
 800f1a0:	46c0      	nop			@ (mov r8, r8)
			wreeprom(waux,&eeEstado1);	// call	wreeprom;							/ ejecuta el grabado de estado 1
 800f1a2:	4b3a      	ldr	r3, [pc, #232]	@ (800f28c <tx_control+0x1bdc>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	001a      	movs	r2, r3
 800f1a8:	4b37      	ldr	r3, [pc, #220]	@ (800f288 <tx_control+0x1bd8>)
 800f1aa:	0019      	movs	r1, r3
 800f1ac:	0010      	movs	r0, r2
 800f1ae:	f7f7 ffe1 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg ); 			// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f1b2:	4b3f      	ldr	r3, [pc, #252]	@ (800f2b0 <tx_control+0x1c00>)
 800f1b4:	0018      	movs	r0, r3
 800f1b6:	f006 fc55 	bl	8015a64 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f1ba:	4b19      	ldr	r3, [pc, #100]	@ (800f220 <tx_control+0x1b70>)
 800f1bc:	22f1      	movs	r2, #241	@ 0xf1
 800f1be:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f1c0:	4b17      	ldr	r3, [pc, #92]	@ (800f220 <tx_control+0x1b70>)
 800f1c2:	223d      	movs	r2, #61	@ 0x3d
 800f1c4:	705a      	strb	r2, [r3, #1]
			goto tx_write_status_ok;// jra		tx_write_status_ok
 800f1c6:	e005      	b.n	800f1d4 <tx_control+0x1b24>
			BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f1c8:	4b15      	ldr	r3, [pc, #84]	@ (800f220 <tx_control+0x1b70>)
 800f1ca:	22f1      	movs	r2, #241	@ 0xf1
 800f1cc:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f1ce:	4b14      	ldr	r3, [pc, #80]	@ (800f220 <tx_control+0x1b70>)
 800f1d0:	223d      	movs	r2, #61	@ 0x3d
 800f1d2:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1]; 	// ldw		pointTx,X
 800f1d4:	4b14      	ldr	r3, [pc, #80]	@ (800f228 <tx_control+0x1b78>)
 800f1d6:	4a12      	ldr	r2, [pc, #72]	@ (800f220 <tx_control+0x1b70>)
 800f1d8:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f1da:	4b14      	ldr	r3, [pc, #80]	@ (800f22c <tx_control+0x1b7c>)
 800f1dc:	4a10      	ldr	r2, [pc, #64]	@ (800f220 <tx_control+0x1b70>)
 800f1de:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];	// ldw		pointEndTx,X
 800f1e0:	4b13      	ldr	r3, [pc, #76]	@ (800f230 <tx_control+0x1b80>)
 800f1e2:	4a14      	ldr	r2, [pc, #80]	@ (800f234 <tx_control+0x1b84>)
 800f1e4:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;						// mov		blockSizeTX,#2
 800f1e6:	4b14      	ldr	r3, [pc, #80]	@ (800f238 <tx_control+0x1b88>)
 800f1e8:	2202      	movs	r2, #2
 800f1ea:	701a      	strb	r2, [r3, #0]
			flagsTX[3]= 1;						// bset	flagsTX,#3;						/ evita que se mande checksum
 800f1ec:	4b13      	ldr	r3, [pc, #76]	@ (800f23c <tx_control+0x1b8c>)
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 							// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f1f2:	4b13      	ldr	r3, [pc, #76]	@ (800f240 <tx_control+0x1b90>)
 800f1f4:	2255      	movs	r2, #85	@ 0x55
 800f1f6:	701a      	strb	r2, [r3, #0]
			codeTX = 0; 							// clr		codeTX;
 800f1f8:	4b02      	ldr	r3, [pc, #8]	@ (800f204 <tx_control+0x1b54>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;					// jp		end_tx_control
 800f1fe:	e2fe      	b.n	800f7fe <tx_control+0x214e>
 800f200:	20000edc 	.word	0x20000edc
 800f204:	20000e24 	.word	0x20000e24
 800f208:	20000984 	.word	0x20000984
 800f20c:	20000b47 	.word	0x20000b47
 800f210:	20000b48 	.word	0x20000b48
 800f214:	20000b4e 	.word	0x20000b4e
 800f218:	20000b4f 	.word	0x20000b4f
 800f21c:	20000ed4 	.word	0x20000ed4
 800f220:	20000db4 	.word	0x20000db4
 800f224:	20000ee6 	.word	0x20000ee6
 800f228:	20000e14 	.word	0x20000e14
 800f22c:	20000e0c 	.word	0x20000e0c
 800f230:	20000e10 	.word	0x20000e10
 800f234:	20000db5 	.word	0x20000db5
 800f238:	20000e30 	.word	0x20000e30
 800f23c:	20000e1c 	.word	0x20000e1c
 800f240:	20000e19 	.word	0x20000e19
 800f244:	20000d8c 	.word	0x20000d8c
 800f248:	20000d94 	.word	0x20000d94
 800f24c:	20000c8c 	.word	0x20000c8c
 800f250:	20000ed1 	.word	0x20000ed1
 800f254:	08037000 	.word	0x08037000
 800f258:	20000d90 	.word	0x20000d90
 800f25c:	20000dac 	.word	0x20000dac
 800f260:	20000dad 	.word	0x20000dad
 800f264:	20000dae 	.word	0x20000dae
 800f268:	20000daf 	.word	0x20000daf
 800f26c:	20000da4 	.word	0x20000da4
 800f270:	20000da0 	.word	0x20000da0
 800f274:	0803c000 	.word	0x0803c000
 800f278:	20000d9a 	.word	0x20000d9a
 800f27c:	20000d0c 	.word	0x20000d0c
 800f280:	20000ec8 	.word	0x20000ec8
 800f284:	20000b55 	.word	0x20000b55
 800f288:	0803f803 	.word	0x0803f803
 800f28c:	20000b54 	.word	0x20000b54
 800f290:	20001064 	.word	0x20001064
 800f294:	20001065 	.word	0x20001065
 800f298:	20000c3c 	.word	0x20000c3c
 800f29c:	20000c30 	.word	0x20000c30
 800f2a0:	20000c32 	.word	0x20000c32
 800f2a4:	20000bc2 	.word	0x20000bc2
 800f2a8:	20001044 	.word	0x20001044
 800f2ac:	200000b8 	.word	0x200000b8
 800f2b0:	2000054c 	.word	0x2000054c
			estado1[k] = ((estado1_Aux>>k) & 0x1);
 800f2b4:	1dfb      	adds	r3, r7, #7
 800f2b6:	781a      	ldrb	r2, [r3, #0]
 800f2b8:	6a3b      	ldr	r3, [r7, #32]
 800f2ba:	411a      	asrs	r2, r3
 800f2bc:	0013      	movs	r3, r2
 800f2be:	2201      	movs	r2, #1
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	1e5a      	subs	r2, r3, #1
 800f2c4:	4193      	sbcs	r3, r2
 800f2c6:	b2d9      	uxtb	r1, r3
 800f2c8:	4ada      	ldr	r2, [pc, #872]	@ (800f634 <tx_control+0x1f84>)
 800f2ca:	6a3b      	ldr	r3, [r7, #32]
 800f2cc:	18d3      	adds	r3, r2, r3
 800f2ce:	1c0a      	adds	r2, r1, #0
 800f2d0:	701a      	strb	r2, [r3, #0]
		for(int k=0;k<8;k++)
 800f2d2:	6a3b      	ldr	r3, [r7, #32]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	623b      	str	r3, [r7, #32]
 800f2d8:	6a3b      	ldr	r3, [r7, #32]
 800f2da:	2b07      	cmp	r3, #7
 800f2dc:	ddea      	ble.n	800f2b4 <tx_control+0x1c04>
estado1_b1:
 800f2de:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Noct] = 0;		// bres	estado1,#est1Noct
 800f2e0:	4bd4      	ldr	r3, [pc, #848]	@ (800f634 <tx_control+0x1f84>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	705a      	strb	r2, [r3, #1]
		if (!flagsa[nocturno]){ 			// btjf	flagsa,#nocturno,estado1_b2; / estado nocturno activado ?
 800f2e6:	4bd4      	ldr	r3, [pc, #848]	@ (800f638 <tx_control+0x1f88>)
 800f2e8:	78db      	ldrb	r3, [r3, #3]
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	4053      	eors	r3, r2
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <tx_control+0x1c4c>
		estado1[est1Noct] = 1; // bset	estado1,#est1Noct;			/ sí, indicalo
 800f2f4:	4bcf      	ldr	r3, [pc, #828]	@ (800f634 <tx_control+0x1f84>)
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	705a      	strb	r2, [r3, #1]
 800f2fa:	e000      	b.n	800f2fe <tx_control+0x1c4e>
			goto estado1_b2;
 800f2fc:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Lamp] = 0;// bres	estado1,#est1Lamp
 800f2fe:	4bcd      	ldr	r3, [pc, #820]	@ (800f634 <tx_control+0x1f84>)
 800f300:	2200      	movs	r2, #0
 800f302:	709a      	strb	r2, [r3, #2]
		if (!GPIOR0[f_lamp]){			// btjf	GPIOR0,#f_lamp,estado1_b3; / lampara encendida ?
 800f304:	4bcd      	ldr	r3, [pc, #820]	@ (800f63c <tx_control+0x1f8c>)
 800f306:	789b      	ldrb	r3, [r3, #2]
 800f308:	2201      	movs	r2, #1
 800f30a:	4053      	eors	r3, r2
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d103      	bne.n	800f31a <tx_control+0x1c6a>
		estado1[est1Lamp] = 1;// bset	estado1,#est1Lamp;			/ sí, indicalo
 800f312:	4bc8      	ldr	r3, [pc, #800]	@ (800f634 <tx_control+0x1f84>)
 800f314:	2201      	movs	r2, #1
 800f316:	709a      	strb	r2, [r3, #2]
 800f318:	e000      	b.n	800f31c <tx_control+0x1c6c>
			goto estado1_b3;
 800f31a:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Ahorro2] = 0;// bres	estado1,#est1Ahorro2
 800f31c:	4bc5      	ldr	r3, [pc, #788]	@ (800f634 <tx_control+0x1f84>)
 800f31e:	2200      	movs	r2, #0
 800f320:	70da      	strb	r2, [r3, #3]
		if(!flagsC[f_ahorro2]){		// btjf	flagsC,#f_ahorro2,estado1_b4; / modo ahorro 2 activo  ?
 800f322:	4bc7      	ldr	r3, [pc, #796]	@ (800f640 <tx_control+0x1f90>)
 800f324:	789b      	ldrb	r3, [r3, #2]
 800f326:	2201      	movs	r2, #1
 800f328:	4053      	eors	r3, r2
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d103      	bne.n	800f338 <tx_control+0x1c88>
		estado1[est1Ahorro2] = 1;// bset	estado1,#est1Ahorro2;			/ sí, indicalo
 800f330:	4bc0      	ldr	r3, [pc, #768]	@ (800f634 <tx_control+0x1f84>)
 800f332:	2201      	movs	r2, #1
 800f334:	70da      	strb	r2, [r3, #3]
 800f336:	e000      	b.n	800f33a <tx_control+0x1c8a>
			goto estado1_b4;
 800f338:	46c0      	nop			@ (mov r8, r8)
		estado1[est1Snooze] = 0;// bres	estado1,#est1Snooze
 800f33a:	4bbe      	ldr	r3, [pc, #760]	@ (800f634 <tx_control+0x1f84>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	715a      	strb	r2, [r3, #5]
		if(!flagsBuzzer[0]){	// btjf	flagsBuzzer,#0,estado1_b6;
 800f340:	4bc0      	ldr	r3, [pc, #768]	@ (800f644 <tx_control+0x1f94>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	2201      	movs	r2, #1
 800f346:	4053      	eors	r3, r2
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d103      	bne.n	800f356 <tx_control+0x1ca6>
		estado1[est1Snooze] = 1;// bset	estado1,#est1Snooze
 800f34e:	4bb9      	ldr	r3, [pc, #740]	@ (800f634 <tx_control+0x1f84>)
 800f350:	2201      	movs	r2, #1
 800f352:	715a      	strb	r2, [r3, #5]
 800f354:	e000      	b.n	800f358 <tx_control+0x1ca8>
			goto estado1_b6;
 800f356:	46c0      	nop			@ (mov r8, r8)
		estado1[est1LockDr] = 0;// bres	estado1,#est1LockDr
 800f358:	4bb6      	ldr	r3, [pc, #728]	@ (800f634 <tx_control+0x1f84>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	719a      	strb	r2, [r3, #6]
		if(!GPIOR0[f_dh]){ // btjf	GPIOR0,#f_dh,estado1_b7;
 800f35e:	4bb7      	ldr	r3, [pc, #732]	@ (800f63c <tx_control+0x1f8c>)
 800f360:	785b      	ldrb	r3, [r3, #1]
 800f362:	2201      	movs	r2, #1
 800f364:	4053      	eors	r3, r2
 800f366:	b2db      	uxtb	r3, r3
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d103      	bne.n	800f374 <tx_control+0x1cc4>
		estado1[est1LockDr] = 1; // bset	estado1,#est1LockDr
 800f36c:	4bb1      	ldr	r3, [pc, #708]	@ (800f634 <tx_control+0x1f84>)
 800f36e:	2201      	movs	r2, #1
 800f370:	719a      	strb	r2, [r3, #6]
 800f372:	e000      	b.n	800f376 <tx_control+0x1cc6>
			goto estado1_b7;
 800f374:	46c0      	nop			@ (mov r8, r8)
		blockSizeTX = 4;// mov		blockSizeTX,#4;				/ tamaño del bloque
 800f376:	4bb4      	ldr	r3, [pc, #720]	@ (800f648 <tx_control+0x1f98>)
 800f378:	2204      	movs	r2, #4
 800f37a:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion1] = Plantilla[version1]; // mov		softVersion1,version1
 800f37c:	4bb3      	ldr	r3, [pc, #716]	@ (800f64c <tx_control+0x1f9c>)
 800f37e:	227b      	movs	r2, #123	@ 0x7b
 800f380:	5c9a      	ldrb	r2, [r3, r2]
 800f382:	4bb3      	ldr	r3, [pc, #716]	@ (800f650 <tx_control+0x1fa0>)
 800f384:	701a      	strb	r2, [r3, #0]
		Bloque_Header[softVersion2] = Plantilla[version2]; // mov		softVersion2,version2;	/ Carga versión del firmware
 800f386:	4bb1      	ldr	r3, [pc, #708]	@ (800f64c <tx_control+0x1f9c>)
 800f388:	227c      	movs	r2, #124	@ 0x7c
 800f38a:	5c9a      	ldrb	r2, [r3, r2]
 800f38c:	4bb0      	ldr	r3, [pc, #704]	@ (800f650 <tx_control+0x1fa0>)
 800f38e:	705a      	strb	r2, [r3, #1]
		Bloque_Header[bufferSize_4] = highByte(0); // ldw		bufferSize_HW,X
 800f390:	4baf      	ldr	r3, [pc, #700]	@ (800f650 <tx_control+0x1fa0>)
 800f392:	2200      	movs	r2, #0
 800f394:	709a      	strb	r2, [r3, #2]
		Bloque_Header[bufferSize_3] = lowByte(0);
 800f396:	4bae      	ldr	r3, [pc, #696]	@ (800f650 <tx_control+0x1fa0>)
 800f398:	2200      	movs	r2, #0
 800f39a:	70da      	strb	r2, [r3, #3]
		Bloque_Header[bufferSize_2] = highByte(1);
 800f39c:	4bac      	ldr	r3, [pc, #688]	@ (800f650 <tx_control+0x1fa0>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	711a      	strb	r2, [r3, #4]
		Bloque_Header[bufferSize_1] = lowByte(1);
 800f3a2:	4bab      	ldr	r3, [pc, #684]	@ (800f650 <tx_control+0x1fa0>)
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	715a      	strb	r2, [r3, #5]
		Bloque_Header[dataType] = 5; 		// mov		dataType,#05
 800f3a8:	4ba9      	ldr	r3, [pc, #676]	@ (800f650 <tx_control+0x1fa0>)
 800f3aa:	2205      	movs	r2, #5
 800f3ac:	719a      	strb	r2, [r3, #6]
		Bloque_Header[dataSize] = blockSizeTX; // mov		dataSize,blockSizeTX
 800f3ae:	4ba6      	ldr	r3, [pc, #664]	@ (800f648 <tx_control+0x1f98>)
 800f3b0:	781a      	ldrb	r2, [r3, #0]
 800f3b2:	4ba7      	ldr	r3, [pc, #668]	@ (800f650 <tx_control+0x1fa0>)
 800f3b4:	71da      	strb	r2, [r3, #7]
		flagsTX[2] = 1; // bset	flagsTX,#2;						/ Indica que hay que transmitir Header
 800f3b6:	4ba7      	ldr	r3, [pc, #668]	@ (800f654 <tx_control+0x1fa4>)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	709a      	strb	r2, [r3, #2]
		wreg = 8; // mov		wreg,#8
 800f3bc:	4ba6      	ldr	r3, [pc, #664]	@ (800f658 <tx_control+0x1fa8>)
 800f3be:	2208      	movs	r2, #8
 800f3c0:	701a      	strb	r2, [r3, #0]
		copyVector(&Bloque_Header[softVersion1],&bufferTxControl[0]);	// call	copyVector
 800f3c2:	4aa6      	ldr	r2, [pc, #664]	@ (800f65c <tx_control+0x1fac>)
 800f3c4:	4ba2      	ldr	r3, [pc, #648]	@ (800f650 <tx_control+0x1fa0>)
 800f3c6:	0011      	movs	r1, r2
 800f3c8:	0018      	movs	r0, r3
 800f3ca:	f7f7 fd81 	bl	8006ed0 <copyVector>
		bufferTxControl[8] = 0;
 800f3ce:	4ba3      	ldr	r3, [pc, #652]	@ (800f65c <tx_control+0x1fac>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	721a      	strb	r2, [r3, #8]
		bufferTxControl[9] = 0;
 800f3d4:	4ba1      	ldr	r3, [pc, #644]	@ (800f65c <tx_control+0x1fac>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	725a      	strb	r2, [r3, #9]
		bufferTxControl[10] = 0;
 800f3da:	4ba0      	ldr	r3, [pc, #640]	@ (800f65c <tx_control+0x1fac>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	729a      	strb	r2, [r3, #10]
		bufferTxControl[11] = 0;
 800f3e0:	4b9e      	ldr	r3, [pc, #632]	@ (800f65c <tx_control+0x1fac>)
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	61fb      	str	r3, [r7, #28]
 800f3ea:	e03e      	b.n	800f46a <tx_control+0x1dba>
			bufferTxControl[8] |= (uint8_t)(estado1[k]<<k);
 800f3ec:	4b9b      	ldr	r3, [pc, #620]	@ (800f65c <tx_control+0x1fac>)
 800f3ee:	7a1a      	ldrb	r2, [r3, #8]
 800f3f0:	4990      	ldr	r1, [pc, #576]	@ (800f634 <tx_control+0x1f84>)
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	18cb      	adds	r3, r1, r3
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	0019      	movs	r1, r3
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	4099      	lsls	r1, r3
 800f3fe:	000b      	movs	r3, r1
 800f400:	b2db      	uxtb	r3, r3
 800f402:	4313      	orrs	r3, r2
 800f404:	b2da      	uxtb	r2, r3
 800f406:	4b95      	ldr	r3, [pc, #596]	@ (800f65c <tx_control+0x1fac>)
 800f408:	721a      	strb	r2, [r3, #8]
			bufferTxControl[9] |= (uint8_t)(estado2[k]<<k);;
 800f40a:	4b94      	ldr	r3, [pc, #592]	@ (800f65c <tx_control+0x1fac>)
 800f40c:	7a5a      	ldrb	r2, [r3, #9]
 800f40e:	4994      	ldr	r1, [pc, #592]	@ (800f660 <tx_control+0x1fb0>)
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	18cb      	adds	r3, r1, r3
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	0019      	movs	r1, r3
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	4099      	lsls	r1, r3
 800f41c:	000b      	movs	r3, r1
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	4313      	orrs	r3, r2
 800f422:	b2da      	uxtb	r2, r3
 800f424:	4b8d      	ldr	r3, [pc, #564]	@ (800f65c <tx_control+0x1fac>)
 800f426:	725a      	strb	r2, [r3, #9]
			bufferTxControl[10] |= (uint8_t)(estado3[k]<<k);;
 800f428:	4b8c      	ldr	r3, [pc, #560]	@ (800f65c <tx_control+0x1fac>)
 800f42a:	7a9a      	ldrb	r2, [r3, #10]
 800f42c:	498d      	ldr	r1, [pc, #564]	@ (800f664 <tx_control+0x1fb4>)
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	18cb      	adds	r3, r1, r3
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	0019      	movs	r1, r3
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	4099      	lsls	r1, r3
 800f43a:	000b      	movs	r3, r1
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	4313      	orrs	r3, r2
 800f440:	b2da      	uxtb	r2, r3
 800f442:	4b86      	ldr	r3, [pc, #536]	@ (800f65c <tx_control+0x1fac>)
 800f444:	729a      	strb	r2, [r3, #10]
			bufferTxControl[11] |= (uint8_t)(estado4[k]<<k);;
 800f446:	4b85      	ldr	r3, [pc, #532]	@ (800f65c <tx_control+0x1fac>)
 800f448:	7ada      	ldrb	r2, [r3, #11]
 800f44a:	4987      	ldr	r1, [pc, #540]	@ (800f668 <tx_control+0x1fb8>)
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	18cb      	adds	r3, r1, r3
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	0019      	movs	r1, r3
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	4099      	lsls	r1, r3
 800f458:	000b      	movs	r3, r1
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	4313      	orrs	r3, r2
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	4b7e      	ldr	r3, [pc, #504]	@ (800f65c <tx_control+0x1fac>)
 800f462:	72da      	strb	r2, [r3, #11]
		for(int k=0;k<8;k++){
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	3301      	adds	r3, #1
 800f468:	61fb      	str	r3, [r7, #28]
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	2b07      	cmp	r3, #7
 800f46e:	ddbd      	ble.n	800f3ec <tx_control+0x1d3c>
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800f470:	4b7e      	ldr	r3, [pc, #504]	@ (800f66c <tx_control+0x1fbc>)
 800f472:	2200      	movs	r2, #0
 800f474:	601a      	str	r2, [r3, #0]
		wreg = 0;	// clr		wreg
 800f476:	4b78      	ldr	r3, [pc, #480]	@ (800f658 <tx_control+0x1fa8>)
 800f478:	2200      	movs	r2, #0
 800f47a:	701a      	strb	r2, [r3, #0]
		waux = 12;	// mov 	waux,#12;							/ tamaño del bloque a calcular el chksum
 800f47c:	4b7c      	ldr	r3, [pc, #496]	@ (800f670 <tx_control+0x1fc0>)
 800f47e:	220c      	movs	r2, #12
 800f480:	701a      	strb	r2, [r3, #0]
		buildChksumBloq(&bufferTxControl[0],waux); // call	buildChksumBloq
 800f482:	4b7b      	ldr	r3, [pc, #492]	@ (800f670 <tx_control+0x1fc0>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	001a      	movs	r2, r3
 800f488:	4b74      	ldr	r3, [pc, #464]	@ (800f65c <tx_control+0x1fac>)
 800f48a:	0011      	movs	r1, r2
 800f48c:	0018      	movs	r0, r3
 800f48e:	f7f7 fcd1 	bl	8006e34 <buildChksumBloq>
		bufferTxControl[12] = (uint8_t) ((chksum_32_HW_LW & 0xFF000000)>>24);
 800f492:	4b76      	ldr	r3, [pc, #472]	@ (800f66c <tx_control+0x1fbc>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	0e1b      	lsrs	r3, r3, #24
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	4b70      	ldr	r3, [pc, #448]	@ (800f65c <tx_control+0x1fac>)
 800f49c:	731a      	strb	r2, [r3, #12]
		bufferTxControl[13] = (uint8_t) ((chksum_32_HW_LW & 0x00FF0000)>>16);
 800f49e:	4b73      	ldr	r3, [pc, #460]	@ (800f66c <tx_control+0x1fbc>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	0c1b      	lsrs	r3, r3, #16
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	4b6d      	ldr	r3, [pc, #436]	@ (800f65c <tx_control+0x1fac>)
 800f4a8:	735a      	strb	r2, [r3, #13]
		bufferTxControl[14] = (uint8_t) ((chksum_32_HW_LW & 0x0000FF00)>>8);
 800f4aa:	4b70      	ldr	r3, [pc, #448]	@ (800f66c <tx_control+0x1fbc>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	0a1b      	lsrs	r3, r3, #8
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	4b6a      	ldr	r3, [pc, #424]	@ (800f65c <tx_control+0x1fac>)
 800f4b4:	739a      	strb	r2, [r3, #14]
		bufferTxControl[15] = (uint8_t) ((chksum_32_HW_LW & 0x000000FF));
 800f4b6:	4b6d      	ldr	r3, [pc, #436]	@ (800f66c <tx_control+0x1fbc>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	4b67      	ldr	r3, [pc, #412]	@ (800f65c <tx_control+0x1fac>)
 800f4be:	73da      	strb	r2, [r3, #15]
		pointTx = &bufferTxControl[0];		//ldw		pointTx,X
 800f4c0:	4b6c      	ldr	r3, [pc, #432]	@ (800f674 <tx_control+0x1fc4>)
 800f4c2:	4a66      	ldr	r2, [pc, #408]	@ (800f65c <tx_control+0x1fac>)
 800f4c4:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferTxControl[0];	// ldw		pointInitTx,X
 800f4c6:	4b6c      	ldr	r3, [pc, #432]	@ (800f678 <tx_control+0x1fc8>)
 800f4c8:	4a64      	ldr	r2, [pc, #400]	@ (800f65c <tx_control+0x1fac>)
 800f4ca:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferTxControl[16];	//ldw		pointEndTx,X
 800f4cc:	4b6b      	ldr	r3, [pc, #428]	@ (800f67c <tx_control+0x1fcc>)
 800f4ce:	4a6c      	ldr	r2, [pc, #432]	@ (800f680 <tx_control+0x1fd0>)
 800f4d0:	601a      	str	r2, [r3, #0]
		blockSizeTX=16;						// mov		blockSizeTX,#16
 800f4d2:	4b5d      	ldr	r3, [pc, #372]	@ (800f648 <tx_control+0x1f98>)
 800f4d4:	2210      	movs	r2, #16
 800f4d6:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;				// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800f4d8:	4b5e      	ldr	r3, [pc, #376]	@ (800f654 <tx_control+0x1fa4>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	709a      	strb	r2, [r3, #2]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita enviar chksum
 800f4de:	4b5d      	ldr	r3, [pc, #372]	@ (800f654 <tx_control+0x1fa4>)
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f4e4:	4b67      	ldr	r3, [pc, #412]	@ (800f684 <tx_control+0x1fd4>)
 800f4e6:	2255      	movs	r2, #85	@ 0x55
 800f4e8:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800f4ea:	4b67      	ldr	r3, [pc, #412]	@ (800f688 <tx_control+0x1fd8>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	701a      	strb	r2, [r3, #0]
		goto end_tx_control;		// jp		end_tx_control
 800f4f0:	e185      	b.n	800f7fe <tx_control+0x214e>
		BloqDatalooger[comando1] = 0xF1; 	// mov		comando1,#$F1
 800f4f2:	4b66      	ldr	r3, [pc, #408]	@ (800f68c <tx_control+0x1fdc>)
 800f4f4:	22f1      	movs	r2, #241	@ 0xf1
 800f4f6:	701a      	strb	r2, [r3, #0]
		BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f4f8:	4b64      	ldr	r3, [pc, #400]	@ (800f68c <tx_control+0x1fdc>)
 800f4fa:	223d      	movs	r2, #61	@ 0x3d
 800f4fc:	705a      	strb	r2, [r3, #1]
		goto tx_timeUNIX_ok;								//jra		tx_timeUNIX_ok
 800f4fe:	46c0      	nop			@ (mov r8, r8)
		pointTx = &BloqDatalooger[comando1];		//ldw		pointTx,X
 800f500:	4b5c      	ldr	r3, [pc, #368]	@ (800f674 <tx_control+0x1fc4>)
 800f502:	4a62      	ldr	r2, [pc, #392]	@ (800f68c <tx_control+0x1fdc>)
 800f504:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800f506:	4b5c      	ldr	r3, [pc, #368]	@ (800f678 <tx_control+0x1fc8>)
 800f508:	4a60      	ldr	r2, [pc, #384]	@ (800f68c <tx_control+0x1fdc>)
 800f50a:	601a      	str	r2, [r3, #0]
		pointEndTx = &BloqDatalooger[comando2];		//ldw		pointEndTx,X
 800f50c:	4b5b      	ldr	r3, [pc, #364]	@ (800f67c <tx_control+0x1fcc>)
 800f50e:	4a60      	ldr	r2, [pc, #384]	@ (800f690 <tx_control+0x1fe0>)
 800f510:	601a      	str	r2, [r3, #0]
		blockSizeTX = 2;							//mov		blockSizeTX,#2
 800f512:	4b4d      	ldr	r3, [pc, #308]	@ (800f648 <tx_control+0x1f98>)
 800f514:	2202      	movs	r2, #2
 800f516:	701a      	strb	r2, [r3, #0]
		flagsTX[3] = 1;				// bset	flagsTX,#3;						/ evita que se mande checksum
 800f518:	4b4e      	ldr	r3, [pc, #312]	@ (800f654 <tx_control+0x1fa4>)
 800f51a:	2201      	movs	r2, #1
 800f51c:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;				// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f51e:	4b59      	ldr	r3, [pc, #356]	@ (800f684 <tx_control+0x1fd4>)
 800f520:	2255      	movs	r2, #85	@ 0x55
 800f522:	701a      	strb	r2, [r3, #0]
		codeTX = 0;					// clr		codeTX;
 800f524:	4b58      	ldr	r3, [pc, #352]	@ (800f688 <tx_control+0x1fd8>)
 800f526:	2200      	movs	r2, #0
 800f528:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f52a:	e168      	b.n	800f7fe <tx_control+0x214e>
			wreeprom(RxBuffer_Ble[2], &eeLat1);					//call	wreeprom;							/ ejecuta el grabado Latitud 1
 800f52c:	4b59      	ldr	r3, [pc, #356]	@ (800f694 <tx_control+0x1fe4>)
 800f52e:	789b      	ldrb	r3, [r3, #2]
 800f530:	001a      	movs	r2, r3
 800f532:	4b59      	ldr	r3, [pc, #356]	@ (800f698 <tx_control+0x1fe8>)
 800f534:	0019      	movs	r1, r3
 800f536:	0010      	movs	r0, r2
 800f538:	f7f7 fe1c 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );  // MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f53c:	4b57      	ldr	r3, [pc, #348]	@ (800f69c <tx_control+0x1fec>)
 800f53e:	0018      	movs	r0, r3
 800f540:	f006 fa90 	bl	8015a64 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[3], &eeLat2);				// call	wreeprom;							/ ejecuta el grabado Latitud 2
 800f544:	4b53      	ldr	r3, [pc, #332]	@ (800f694 <tx_control+0x1fe4>)
 800f546:	78db      	ldrb	r3, [r3, #3]
 800f548:	001a      	movs	r2, r3
 800f54a:	4b55      	ldr	r3, [pc, #340]	@ (800f6a0 <tx_control+0x1ff0>)
 800f54c:	0019      	movs	r1, r3
 800f54e:	0010      	movs	r0, r2
 800f550:	f7f7 fe10 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f554:	4b51      	ldr	r3, [pc, #324]	@ (800f69c <tx_control+0x1fec>)
 800f556:	0018      	movs	r0, r3
 800f558:	f006 fa84 	bl	8015a64 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[4], &eeLat3);				// call	wreeprom;							/ ejecuta el grabado Latitud 3
 800f55c:	4b4d      	ldr	r3, [pc, #308]	@ (800f694 <tx_control+0x1fe4>)
 800f55e:	791b      	ldrb	r3, [r3, #4]
 800f560:	001a      	movs	r2, r3
 800f562:	4b50      	ldr	r3, [pc, #320]	@ (800f6a4 <tx_control+0x1ff4>)
 800f564:	0019      	movs	r1, r3
 800f566:	0010      	movs	r0, r2
 800f568:	f7f7 fe04 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f56c:	4b4b      	ldr	r3, [pc, #300]	@ (800f69c <tx_control+0x1fec>)
 800f56e:	0018      	movs	r0, r3
 800f570:	f006 fa78 	bl	8015a64 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[5], &eeLat4);				// call	wreeprom;							/ ejecuta el grabado Latitud 4
 800f574:	4b47      	ldr	r3, [pc, #284]	@ (800f694 <tx_control+0x1fe4>)
 800f576:	795b      	ldrb	r3, [r3, #5]
 800f578:	001a      	movs	r2, r3
 800f57a:	4b4b      	ldr	r3, [pc, #300]	@ (800f6a8 <tx_control+0x1ff8>)
 800f57c:	0019      	movs	r1, r3
 800f57e:	0010      	movs	r0, r2
 800f580:	f7f7 fdf8 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );						// MOV		IWDG_KR,#$AA;			/ Refresca el watch Dog mientras se efectua la grabacion de la memoria
 800f584:	4b45      	ldr	r3, [pc, #276]	@ (800f69c <tx_control+0x1fec>)
 800f586:	0018      	movs	r0, r3
 800f588:	f006 fa6c 	bl	8015a64 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[6], &eeLong1);
 800f58c:	4b41      	ldr	r3, [pc, #260]	@ (800f694 <tx_control+0x1fe4>)
 800f58e:	799b      	ldrb	r3, [r3, #6]
 800f590:	001a      	movs	r2, r3
 800f592:	4b46      	ldr	r3, [pc, #280]	@ (800f6ac <tx_control+0x1ffc>)
 800f594:	0019      	movs	r1, r3
 800f596:	0010      	movs	r0, r2
 800f598:	f7f7 fdec 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f59c:	4b3f      	ldr	r3, [pc, #252]	@ (800f69c <tx_control+0x1fec>)
 800f59e:	0018      	movs	r0, r3
 800f5a0:	f006 fa60 	bl	8015a64 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[7], &eeLong2);
 800f5a4:	4b3b      	ldr	r3, [pc, #236]	@ (800f694 <tx_control+0x1fe4>)
 800f5a6:	79db      	ldrb	r3, [r3, #7]
 800f5a8:	001a      	movs	r2, r3
 800f5aa:	4b41      	ldr	r3, [pc, #260]	@ (800f6b0 <tx_control+0x2000>)
 800f5ac:	0019      	movs	r1, r3
 800f5ae:	0010      	movs	r0, r2
 800f5b0:	f7f7 fde0 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f5b4:	4b39      	ldr	r3, [pc, #228]	@ (800f69c <tx_control+0x1fec>)
 800f5b6:	0018      	movs	r0, r3
 800f5b8:	f006 fa54 	bl	8015a64 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[8], &eeLong3);
 800f5bc:	4b35      	ldr	r3, [pc, #212]	@ (800f694 <tx_control+0x1fe4>)
 800f5be:	7a1b      	ldrb	r3, [r3, #8]
 800f5c0:	001a      	movs	r2, r3
 800f5c2:	4b3c      	ldr	r3, [pc, #240]	@ (800f6b4 <tx_control+0x2004>)
 800f5c4:	0019      	movs	r1, r3
 800f5c6:	0010      	movs	r0, r2
 800f5c8:	f7f7 fdd4 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f5cc:	4b33      	ldr	r3, [pc, #204]	@ (800f69c <tx_control+0x1fec>)
 800f5ce:	0018      	movs	r0, r3
 800f5d0:	f006 fa48 	bl	8015a64 <HAL_IWDG_Refresh>
			wreeprom(RxBuffer_Ble[9], &eeLong4);
 800f5d4:	4b2f      	ldr	r3, [pc, #188]	@ (800f694 <tx_control+0x1fe4>)
 800f5d6:	7a5b      	ldrb	r3, [r3, #9]
 800f5d8:	001a      	movs	r2, r3
 800f5da:	4b37      	ldr	r3, [pc, #220]	@ (800f6b8 <tx_control+0x2008>)
 800f5dc:	0019      	movs	r1, r3
 800f5de:	0010      	movs	r0, r2
 800f5e0:	f7f7 fdc8 	bl	8007174 <wreeprom>
			HAL_IWDG_Refresh( &hiwdg );
 800f5e4:	4b2d      	ldr	r3, [pc, #180]	@ (800f69c <tx_control+0x1fec>)
 800f5e6:	0018      	movs	r0, r3
 800f5e8:	f006 fa3c 	bl	8015a64 <HAL_IWDG_Refresh>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f5ec:	4b27      	ldr	r3, [pc, #156]	@ (800f68c <tx_control+0x1fdc>)
 800f5ee:	22f1      	movs	r2, #241	@ 0xf1
 800f5f0:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;	// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f5f2:	4b26      	ldr	r3, [pc, #152]	@ (800f68c <tx_control+0x1fdc>)
 800f5f4:	223d      	movs	r2, #61	@ 0x3d
 800f5f6:	705a      	strb	r2, [r3, #1]
			goto tx_write_GEO_ok;				// jra		tx_write_GEO_ok
 800f5f8:	e005      	b.n	800f606 <tx_control+0x1f56>
			BloqDatalooger[comando1] = 0xF1;	// mov		comando1,#$F1
 800f5fa:	4b24      	ldr	r3, [pc, #144]	@ (800f68c <tx_control+0x1fdc>)
 800f5fc:	22f1      	movs	r2, #241	@ 0xf1
 800f5fe:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;	// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f600:	4b22      	ldr	r3, [pc, #136]	@ (800f68c <tx_control+0x1fdc>)
 800f602:	223e      	movs	r2, #62	@ 0x3e
 800f604:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];		// ldw		pointTx,X
 800f606:	4b1b      	ldr	r3, [pc, #108]	@ (800f674 <tx_control+0x1fc4>)
 800f608:	4a20      	ldr	r2, [pc, #128]	@ (800f68c <tx_control+0x1fdc>)
 800f60a:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1];	//ldw		pointInitTx,X
 800f60c:	4b1a      	ldr	r3, [pc, #104]	@ (800f678 <tx_control+0x1fc8>)
 800f60e:	4a1f      	ldr	r2, [pc, #124]	@ (800f68c <tx_control+0x1fdc>)
 800f610:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2];		// ldw		pointEndTx,X
 800f612:	4b1a      	ldr	r3, [pc, #104]	@ (800f67c <tx_control+0x1fcc>)
 800f614:	4a1e      	ldr	r2, [pc, #120]	@ (800f690 <tx_control+0x1fe0>)
 800f616:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;							// mov		blockSizeTX,#2
 800f618:	4b0b      	ldr	r3, [pc, #44]	@ (800f648 <tx_control+0x1f98>)
 800f61a:	2202      	movs	r2, #2
 800f61c:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;								// bset	flagsTX,#3;						/ evita que se mande checksum
 800f61e:	4b0d      	ldr	r3, [pc, #52]	@ (800f654 <tx_control+0x1fa4>)
 800f620:	2201      	movs	r2, #1
 800f622:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55; 								// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f624:	4b17      	ldr	r3, [pc, #92]	@ (800f684 <tx_control+0x1fd4>)
 800f626:	2255      	movs	r2, #85	@ 0x55
 800f628:	701a      	strb	r2, [r3, #0]
			codeTX = 0;									// clr		codeTX;
 800f62a:	4b17      	ldr	r3, [pc, #92]	@ (800f688 <tx_control+0x1fd8>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f630:	e0e5      	b.n	800f7fe <tx_control+0x214e>
 800f632:	46c0      	nop			@ (mov r8, r8)
 800f634:	20001044 	.word	0x20001044
 800f638:	20000b78 	.word	0x20000b78
 800f63c:	20000ba4 	.word	0x20000ba4
 800f640:	20000c3c 	.word	0x20000c3c
 800f644:	20000f98 	.word	0x20000f98
 800f648:	20000e30 	.word	0x20000e30
 800f64c:	200000b8 	.word	0x200000b8
 800f650:	20000dd8 	.word	0x20000dd8
 800f654:	20000e1c 	.word	0x20000e1c
 800f658:	20000b55 	.word	0x20000b55
 800f65c:	20000fa8 	.word	0x20000fa8
 800f660:	2000104c 	.word	0x2000104c
 800f664:	20001054 	.word	0x20001054
 800f668:	2000105c 	.word	0x2000105c
 800f66c:	20000e34 	.word	0x20000e34
 800f670:	20000b54 	.word	0x20000b54
 800f674:	20000e14 	.word	0x20000e14
 800f678:	20000e0c 	.word	0x20000e0c
 800f67c:	20000e10 	.word	0x20000e10
 800f680:	20000fb8 	.word	0x20000fb8
 800f684:	20000e19 	.word	0x20000e19
 800f688:	20000e24 	.word	0x20000e24
 800f68c:	20000db4 	.word	0x20000db4
 800f690:	20000db5 	.word	0x20000db5
 800f694:	20000984 	.word	0x20000984
 800f698:	0803f808 	.word	0x0803f808
 800f69c:	2000054c 	.word	0x2000054c
 800f6a0:	0803f809 	.word	0x0803f809
 800f6a4:	0803f80a 	.word	0x0803f80a
 800f6a8:	0803f80b 	.word	0x0803f80b
 800f6ac:	0803f80c 	.word	0x0803f80c
 800f6b0:	0803f80d 	.word	0x0803f80d
 800f6b4:	0803f80e 	.word	0x0803f80e
 800f6b8:	0803f80f 	.word	0x0803f80f
			timeBCD_year = RxBuffer_Ble[2];// ld		timeBCD_year,A;
 800f6bc:	4bec      	ldr	r3, [pc, #944]	@ (800fa70 <tx_control+0x23c0>)
 800f6be:	789a      	ldrb	r2, [r3, #2]
 800f6c0:	4bec      	ldr	r3, [pc, #944]	@ (800fa74 <tx_control+0x23c4>)
 800f6c2:	701a      	strb	r2, [r3, #0]
			timeBCD_month = RxBuffer_Ble[3];
 800f6c4:	4bea      	ldr	r3, [pc, #936]	@ (800fa70 <tx_control+0x23c0>)
 800f6c6:	78da      	ldrb	r2, [r3, #3]
 800f6c8:	4beb      	ldr	r3, [pc, #940]	@ (800fa78 <tx_control+0x23c8>)
 800f6ca:	701a      	strb	r2, [r3, #0]
			timeBCD_day = RxBuffer_Ble[4];// ld		timeBCD_day,A;
 800f6cc:	4be8      	ldr	r3, [pc, #928]	@ (800fa70 <tx_control+0x23c0>)
 800f6ce:	791a      	ldrb	r2, [r3, #4]
 800f6d0:	4bea      	ldr	r3, [pc, #936]	@ (800fa7c <tx_control+0x23cc>)
 800f6d2:	701a      	strb	r2, [r3, #0]
			timeBCD_hour = RxBuffer_Ble[5];// ld		timeBCD_hour,A;
 800f6d4:	4be6      	ldr	r3, [pc, #920]	@ (800fa70 <tx_control+0x23c0>)
 800f6d6:	795a      	ldrb	r2, [r3, #5]
 800f6d8:	4be9      	ldr	r3, [pc, #932]	@ (800fa80 <tx_control+0x23d0>)
 800f6da:	701a      	strb	r2, [r3, #0]
			timeBCD_min = RxBuffer_Ble[6];// ld		timeBCD_min,A;
 800f6dc:	4be4      	ldr	r3, [pc, #912]	@ (800fa70 <tx_control+0x23c0>)
 800f6de:	799a      	ldrb	r2, [r3, #6]
 800f6e0:	4be8      	ldr	r3, [pc, #928]	@ (800fa84 <tx_control+0x23d4>)
 800f6e2:	701a      	strb	r2, [r3, #0]
			timeBCD_sec = RxBuffer_Ble[7];// ld		timeBCD_sec,A;
 800f6e4:	4be2      	ldr	r3, [pc, #904]	@ (800fa70 <tx_control+0x23c0>)
 800f6e6:	79da      	ldrb	r2, [r3, #7]
 800f6e8:	4be7      	ldr	r3, [pc, #924]	@ (800fa88 <tx_control+0x23d8>)
 800f6ea:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[8];//ld		waux,A;
 800f6ec:	4be0      	ldr	r3, [pc, #896]	@ (800fa70 <tx_control+0x23c0>)
 800f6ee:	7a1a      	ldrb	r2, [r3, #8]
 800f6f0:	4be6      	ldr	r3, [pc, #920]	@ (800fa8c <tx_control+0x23dc>)
 800f6f2:	701a      	strb	r2, [r3, #0]
			waux = waux<<5;
 800f6f4:	4be5      	ldr	r3, [pc, #916]	@ (800fa8c <tx_control+0x23dc>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	015b      	lsls	r3, r3, #5
 800f6fa:	b2da      	uxtb	r2, r3
 800f6fc:	4be3      	ldr	r3, [pc, #908]	@ (800fa8c <tx_control+0x23dc>)
 800f6fe:	701a      	strb	r2, [r3, #0]
			timeBCD_month |= (waux & 0xE0); // ld		timeBCD_month,A
 800f700:	4be2      	ldr	r3, [pc, #904]	@ (800fa8c <tx_control+0x23dc>)
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	b25b      	sxtb	r3, r3
 800f706:	221f      	movs	r2, #31
 800f708:	4393      	bics	r3, r2
 800f70a:	b25a      	sxtb	r2, r3
 800f70c:	4bda      	ldr	r3, [pc, #872]	@ (800fa78 <tx_control+0x23c8>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	b25b      	sxtb	r3, r3
 800f712:	4313      	orrs	r3, r2
 800f714:	b25b      	sxtb	r3, r3
 800f716:	b2da      	uxtb	r2, r3
 800f718:	4bd7      	ldr	r3, [pc, #860]	@ (800fa78 <tx_control+0x23c8>)
 800f71a:	701a      	strb	r2, [r3, #0]
			waux = RxBuffer_Ble[9];//ld		waux,A;
 800f71c:	4bd4      	ldr	r3, [pc, #848]	@ (800fa70 <tx_control+0x23c0>)
 800f71e:	7a5a      	ldrb	r2, [r3, #9]
 800f720:	4bda      	ldr	r3, [pc, #872]	@ (800fa8c <tx_control+0x23dc>)
 800f722:	701a      	strb	r2, [r3, #0]
			timeBCD_hour &= 0xBF;// BitClear(timeBCD_hour,6);
 800f724:	4bd6      	ldr	r3, [pc, #856]	@ (800fa80 <tx_control+0x23d0>)
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	2240      	movs	r2, #64	@ 0x40
 800f72a:	4393      	bics	r3, r2
 800f72c:	b2da      	uxtb	r2, r3
 800f72e:	4bd4      	ldr	r3, [pc, #848]	@ (800fa80 <tx_control+0x23d0>)
 800f730:	701a      	strb	r2, [r3, #0]
			hRtcDate.Year = timeBCD_year ;
 800f732:	4bd0      	ldr	r3, [pc, #832]	@ (800fa74 <tx_control+0x23c4>)
 800f734:	781a      	ldrb	r2, [r3, #0]
 800f736:	4bd6      	ldr	r3, [pc, #856]	@ (800fa90 <tx_control+0x23e0>)
 800f738:	70da      	strb	r2, [r3, #3]
			hRtcDate.Month = (timeBCD_month & 0x1F);
 800f73a:	4bcf      	ldr	r3, [pc, #828]	@ (800fa78 <tx_control+0x23c8>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	221f      	movs	r2, #31
 800f740:	4013      	ands	r3, r2
 800f742:	b2da      	uxtb	r2, r3
 800f744:	4bd2      	ldr	r3, [pc, #840]	@ (800fa90 <tx_control+0x23e0>)
 800f746:	705a      	strb	r2, [r3, #1]
			hRtcDate.Date = timeBCD_day;
 800f748:	4bcc      	ldr	r3, [pc, #816]	@ (800fa7c <tx_control+0x23cc>)
 800f74a:	781a      	ldrb	r2, [r3, #0]
 800f74c:	4bd0      	ldr	r3, [pc, #832]	@ (800fa90 <tx_control+0x23e0>)
 800f74e:	709a      	strb	r2, [r3, #2]
			hRtcDate.WeekDay = ((timeBCD_month & 0xE0)>>5);
 800f750:	4bc9      	ldr	r3, [pc, #804]	@ (800fa78 <tx_control+0x23c8>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	095b      	lsrs	r3, r3, #5
 800f756:	b2da      	uxtb	r2, r3
 800f758:	4bcd      	ldr	r3, [pc, #820]	@ (800fa90 <tx_control+0x23e0>)
 800f75a:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetDate(&hrtc, &hRtcDate, RTC_FORMAT_BCD);
 800f75c:	49cc      	ldr	r1, [pc, #816]	@ (800fa90 <tx_control+0x23e0>)
 800f75e:	4bcd      	ldr	r3, [pc, #820]	@ (800fa94 <tx_control+0x23e4>)
 800f760:	2201      	movs	r2, #1
 800f762:	0018      	movs	r0, r3
 800f764:	f008 fa34 	bl	8017bd0 <HAL_RTC_SetDate>
			hRtcTime.Hours = timeBCD_hour;
 800f768:	4bc5      	ldr	r3, [pc, #788]	@ (800fa80 <tx_control+0x23d0>)
 800f76a:	781a      	ldrb	r2, [r3, #0]
 800f76c:	4bca      	ldr	r3, [pc, #808]	@ (800fa98 <tx_control+0x23e8>)
 800f76e:	701a      	strb	r2, [r3, #0]
			hRtcTime.Minutes = timeBCD_min;
 800f770:	4bc4      	ldr	r3, [pc, #784]	@ (800fa84 <tx_control+0x23d4>)
 800f772:	781a      	ldrb	r2, [r3, #0]
 800f774:	4bc8      	ldr	r3, [pc, #800]	@ (800fa98 <tx_control+0x23e8>)
 800f776:	705a      	strb	r2, [r3, #1]
			hRtcTime.Seconds = timeBCD_sec;
 800f778:	4bc3      	ldr	r3, [pc, #780]	@ (800fa88 <tx_control+0x23d8>)
 800f77a:	781a      	ldrb	r2, [r3, #0]
 800f77c:	4bc6      	ldr	r3, [pc, #792]	@ (800fa98 <tx_control+0x23e8>)
 800f77e:	709a      	strb	r2, [r3, #2]
			hRtcTime.TimeFormat = RxBuffer_Ble[9];
 800f780:	4bbb      	ldr	r3, [pc, #748]	@ (800fa70 <tx_control+0x23c0>)
 800f782:	7a5a      	ldrb	r2, [r3, #9]
 800f784:	4bc4      	ldr	r3, [pc, #784]	@ (800fa98 <tx_control+0x23e8>)
 800f786:	70da      	strb	r2, [r3, #3]
			hRtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800f788:	4bc3      	ldr	r3, [pc, #780]	@ (800fa98 <tx_control+0x23e8>)
 800f78a:	2200      	movs	r2, #0
 800f78c:	60da      	str	r2, [r3, #12]
			hRtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800f78e:	4bc2      	ldr	r3, [pc, #776]	@ (800fa98 <tx_control+0x23e8>)
 800f790:	2200      	movs	r2, #0
 800f792:	611a      	str	r2, [r3, #16]
			HAL_RTC_SetTime(&hrtc, &hRtcTime, RTC_FORMAT_BCD);
 800f794:	49c0      	ldr	r1, [pc, #768]	@ (800fa98 <tx_control+0x23e8>)
 800f796:	4bbf      	ldr	r3, [pc, #764]	@ (800fa94 <tx_control+0x23e4>)
 800f798:	2201      	movs	r2, #1
 800f79a:	0018      	movs	r0, r3
 800f79c:	f008 f8f4 	bl	8017988 <HAL_RTC_SetTime>
			timeBCD_sec_ANT = timeBCD_sec;// mov     timeBCD_sec_ANT,timeBCD_sec       ;SEGUNDOS
 800f7a0:	4bb9      	ldr	r3, [pc, #740]	@ (800fa88 <tx_control+0x23d8>)
 800f7a2:	781a      	ldrb	r2, [r3, #0]
 800f7a4:	4bbd      	ldr	r3, [pc, #756]	@ (800fa9c <tx_control+0x23ec>)
 800f7a6:	701a      	strb	r2, [r3, #0]
			flagsTime[f_timeConfigRTC]=1;// bset	flagsTime,#f_timeConfigRTC; Ididca que el RTC fue configurado con los datos recibidos .
 800f7a8:	4bbd      	ldr	r3, [pc, #756]	@ (800faa0 <tx_control+0x23f0>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando1] = 0xF1; // mov		comando1,#$F1
 800f7ae:	4bbd      	ldr	r3, [pc, #756]	@ (800faa4 <tx_control+0x23f4>)
 800f7b0:	22f1      	movs	r2, #241	@ 0xf1
 800f7b2:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3D;// mov		comando2,#$3D;				/ indica que la grabación fue exitosa
 800f7b4:	4bbb      	ldr	r3, [pc, #748]	@ (800faa4 <tx_control+0x23f4>)
 800f7b6:	223d      	movs	r2, #61	@ 0x3d
 800f7b8:	705a      	strb	r2, [r3, #1]
			goto tx_timeBCD_ok;// jra		tx_timeBCD_ok
 800f7ba:	e005      	b.n	800f7c8 <tx_control+0x2118>
			BloqDatalooger[comando1] = 0xF1;// mov		comando1,#$F1
 800f7bc:	4bb9      	ldr	r3, [pc, #740]	@ (800faa4 <tx_control+0x23f4>)
 800f7be:	22f1      	movs	r2, #241	@ 0xf1
 800f7c0:	701a      	strb	r2, [r3, #0]
			BloqDatalooger[comando2] = 0x3E;// mov		comando2,#$3E;				/ indica que hubo un error y no se programaron los datos
 800f7c2:	4bb8      	ldr	r3, [pc, #736]	@ (800faa4 <tx_control+0x23f4>)
 800f7c4:	223e      	movs	r2, #62	@ 0x3e
 800f7c6:	705a      	strb	r2, [r3, #1]
			pointTx = &BloqDatalooger[comando1];// ldw		pointTx,X
 800f7c8:	4bb7      	ldr	r3, [pc, #732]	@ (800faa8 <tx_control+0x23f8>)
 800f7ca:	4ab6      	ldr	r2, [pc, #728]	@ (800faa4 <tx_control+0x23f4>)
 800f7cc:	601a      	str	r2, [r3, #0]
			pointInitTx = &BloqDatalooger[comando1]; // ldw		pointInitTx,X
 800f7ce:	4bb7      	ldr	r3, [pc, #732]	@ (800faac <tx_control+0x23fc>)
 800f7d0:	4ab4      	ldr	r2, [pc, #720]	@ (800faa4 <tx_control+0x23f4>)
 800f7d2:	601a      	str	r2, [r3, #0]
			pointEndTx = &BloqDatalooger[comando2]; // ldw		pointEndTx,X
 800f7d4:	4bb6      	ldr	r3, [pc, #728]	@ (800fab0 <tx_control+0x2400>)
 800f7d6:	4ab7      	ldr	r2, [pc, #732]	@ (800fab4 <tx_control+0x2404>)
 800f7d8:	601a      	str	r2, [r3, #0]
			blockSizeTX = 2;		// mov		blockSizeTX,#2
 800f7da:	4bb7      	ldr	r3, [pc, #732]	@ (800fab8 <tx_control+0x2408>)
 800f7dc:	2202      	movs	r2, #2
 800f7de:	701a      	strb	r2, [r3, #0]
			flagsTX[3] = 1;			// bset	flagsTX,#3;						/ evita que se mande checksum
 800f7e0:	4bb6      	ldr	r3, [pc, #728]	@ (800fabc <tx_control+0x240c>)
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	70da      	strb	r2, [r3, #3]
			keyTx = 0x55;			// mov		keyTx,#$55;						/ listo para mandar transmisión
 800f7e6:	4bb6      	ldr	r3, [pc, #728]	@ (800fac0 <tx_control+0x2410>)
 800f7e8:	2255      	movs	r2, #85	@ 0x55
 800f7ea:	701a      	strb	r2, [r3, #0]
			codeTX = 0;				// clr		codeTX;
 800f7ec:	4bb5      	ldr	r3, [pc, #724]	@ (800fac4 <tx_control+0x2414>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	701a      	strb	r2, [r3, #0]
			goto end_tx_control;		//jp		end_tx_control
 800f7f2:	e004      	b.n	800f7fe <tx_control+0x214e>
		goto end_tx_control;
 800f7f4:	46c0      	nop			@ (mov r8, r8)
 800f7f6:	e002      	b.n	800f7fe <tx_control+0x214e>
		goto end_tx_control;//	jp end_tx_control
 800f7f8:	46c0      	nop			@ (mov r8, r8)
 800f7fa:	e000      	b.n	800f7fe <tx_control+0x214e>
			goto end_tx_control;		//jp		end_tx_control
 800f7fc:	46c0      	nop			@ (mov r8, r8)
		if (keyTx)	{						//tnz		keyTx;									/ no entres al loop hasta terminar transmisión de respuesta
 800f7fe:	4bb0      	ldr	r3, [pc, #704]	@ (800fac0 <tx_control+0x2410>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d11b      	bne.n	800f83e <tx_control+0x218e>
		if(!flagsRxFirm[4]){ //btjf	flagsRxFirm,#4,ask_resetLoopTx
 800f806:	4bb0      	ldr	r3, [pc, #704]	@ (800fac8 <tx_control+0x2418>)
 800f808:	791b      	ldrb	r3, [r3, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	4053      	eors	r3, r2
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	2b00      	cmp	r3, #0
 800f812:	d103      	bne.n	800f81c <tx_control+0x216c>
		keyWrFirm=0xAA;// mov		keyWrFirm,#$AA
 800f814:	4bad      	ldr	r3, [pc, #692]	@ (800facc <tx_control+0x241c>)
 800f816:	22aa      	movs	r2, #170	@ 0xaa
 800f818:	701a      	strb	r2, [r3, #0]
 800f81a:	e000      	b.n	800f81e <tx_control+0x216e>
			goto ask_resetLoopTx;
 800f81c:	46c0      	nop			@ (mov r8, r8)
		if (estado1[est1Reset]){							//btjt	estado1,#est1Reset,resetLoopTx_2;	/ Se necesita reset ?  Entra al loop hasta esperar el reset
 800f81e:	4bac      	ldr	r3, [pc, #688]	@ (800fad0 <tx_control+0x2420>)
 800f820:	791b      	ldrb	r3, [r3, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d109      	bne.n	800f83a <tx_control+0x218a>
resetLoopTx:
 800f826:	46c0      	nop			@ (mov r8, r8)
		if (!flagsTX[5]){				/// Se necesita reset ?  Entra al loop hasta esperar el reset
 800f828:	4ba4      	ldr	r3, [pc, #656]	@ (800fabc <tx_control+0x240c>)
 800f82a:	795b      	ldrb	r3, [r3, #5]
 800f82c:	2201      	movs	r2, #1
 800f82e:	4053      	eors	r3, r2
 800f830:	b2db      	uxtb	r3, r3
 800f832:	2b00      	cmp	r3, #0
 800f834:	d106      	bne.n	800f844 <tx_control+0x2194>
		asm ("nop");
 800f836:	46c0      	nop			@ (mov r8, r8)
		goto	resetLoopTx;		//jra		resetLoopTx
 800f838:	e7f6      	b.n	800f828 <tx_control+0x2178>
		asm ("nop");
 800f83a:	46c0      	nop			@ (mov r8, r8)
 800f83c:	e7fd      	b.n	800f83a <tx_control+0x218a>
			goto	no_resetLoopTx;			//	jrne	no_resetLoopTx
 800f83e:	46c0      	nop			@ (mov r8, r8)
 800f840:	f001 f8f0 	bl	8010a24 <tx_control+0x3374>
			goto no_resetLoopTx;
 800f844:	46c0      	nop			@ (mov r8, r8)
		goto	end_tx_control_b;				//jp		end_tx_control_b
 800f846:	f001 f8ed 	bl	8010a24 <tx_control+0x3374>
			goto tx_wifi_01;
 800f84a:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;//jp			end_tx_wifi
tx_wifi_01:
		//;  Pregunta por el estado de la conexión a Servidor
		if(flagsTxControl[f_statWIFI])//btjt		flagsTxControl,#f_statWIFI,tx_wifi_OK
 800f84c:	4ba1      	ldr	r3, [pc, #644]	@ (800fad4 <tx_control+0x2424>)
 800f84e:	789b      	ldrb	r3, [r3, #2]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d119      	bne.n	800f888 <tx_control+0x21d8>
			goto tx_wifi_OK;
		flagsWIFI[f_serverConnect] = 0;// bres		flagsWIFI,#f_serverConnect; / baja bandera de conexión con servidor
 800f854:	4ba0      	ldr	r3, [pc, #640]	@ (800fad8 <tx_control+0x2428>)
 800f856:	2200      	movs	r2, #0
 800f858:	701a      	strb	r2, [r3, #0]
		// en desconexión borra banderas de logger enviado para que se envíen a la reconexión
		flagsWIFI[f_timeLoggerSend] = 0;// bres		flagsWIFI,#f_timeLoggerSend;
 800f85a:	4b9f      	ldr	r3, [pc, #636]	@ (800fad8 <tx_control+0x2428>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_eventLoggerSend] = 0;// bres		flagsWIFI,#f_eventLoggerSend;
 800f860:	4b9d      	ldr	r3, [pc, #628]	@ (800fad8 <tx_control+0x2428>)
 800f862:	2200      	movs	r2, #0
 800f864:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_timeLoggerCmd] = 0;// bres		flagsWIFI,#f_timeLoggerCmd;
 800f866:	4b9c      	ldr	r3, [pc, #624]	@ (800fad8 <tx_control+0x2428>)
 800f868:	2200      	movs	r2, #0
 800f86a:	70da      	strb	r2, [r3, #3]
		flagsWIFI[f_eventLoggerCmd] = 0;// bres		flagsWIFI,#f_eventLoggerCmd;
 800f86c:	4b9a      	ldr	r3, [pc, #616]	@ (800fad8 <tx_control+0x2428>)
 800f86e:	2200      	movs	r2, #0
 800f870:	711a      	strb	r2, [r3, #4]
		cntRegTxWifi = 0;
 800f872:	4b9a      	ldr	r3, [pc, #616]	@ (800fadc <tx_control+0x242c>)
 800f874:	2200      	movs	r2, #0
 800f876:	801a      	strh	r2, [r3, #0]
		blockLoggWifi = 0;
 800f878:	4b99      	ldr	r3, [pc, #612]	@ (800fae0 <tx_control+0x2430>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;
 800f87e:	4b99      	ldr	r3, [pc, #612]	@ (800fae4 <tx_control+0x2434>)
 800f880:	2200      	movs	r2, #0
 800f882:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp			end_tx_wifi
 800f884:	f001 f8cb 	bl	8010a1e <tx_control+0x336e>
			goto tx_wifi_OK;
 800f888:	46c0      	nop			@ (mov r8, r8)

tx_wifi_OK:
		flagsWIFI[f_serverConnect] = 1;// bset		flagsWIFI,#f_serverConnect;/ Indica que modulo Wifi avisó conexxión con servidor
 800f88a:	4b93      	ldr	r3, [pc, #588]	@ (800fad8 <tx_control+0x2428>)
 800f88c:	2201      	movs	r2, #1
 800f88e:	701a      	strb	r2, [r3, #0]

		// btjf	flagsRxFirm,#0,tx_wifi_OK_01; Empezó recepción de Firmware ?
		if(!flagsRxFirm[0]){
 800f890:	4b8d      	ldr	r3, [pc, #564]	@ (800fac8 <tx_control+0x2418>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2201      	movs	r2, #1
 800f896:	4053      	eors	r3, r2
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d101      	bne.n	800f8a2 <tx_control+0x21f2>
 800f89e:	f001 f8b1 	bl	8010a04 <tx_control+0x3354>
			goto tx_wifi_OK_01;
 800f8a2:	46c0      	nop			@ (mov r8, r8)
tx_wifi_OK_01:

tx_wifi_OK_02:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
	if(keyTx!=0){
 800f8a4:	4b86      	ldr	r3, [pc, #536]	@ (800fac0 <tx_control+0x2410>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d001      	beq.n	800f8b0 <tx_control+0x2200>
 800f8ac:	f001 f8ad 	bl	8010a0a <tx_control+0x335a>
	}

//;===========================================================
//;										Logger tiempo
//;===========================================================
tx_wifi_timeLoggerAsk:
 800f8b0:	46c0      	nop			@ (mov r8, r8)
		//; Pregunta si ya se envío el logger de tiempo
		//if(!flagsWIFI[f_timeLoggerSend]){
		if(flagsWIFI[f_timeLoggerSend]){
 800f8b2:	4b89      	ldr	r3, [pc, #548]	@ (800fad8 <tx_control+0x2428>)
 800f8b4:	785b      	ldrb	r3, [r3, #1]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d100      	bne.n	800f8bc <tx_control+0x220c>
 800f8ba:	e220      	b.n	800fcfe <tx_control+0x264e>
			goto tx_wifi_timeLogger;// btjf		flagsWIFI,#f_timeLoggerSend,tx_wifi_timeLogger
 800f8bc:	46c0      	nop			@ (mov r8, r8)

// ;------------------------------------------------------------
// ;------------- Envío de comando y tiempo actual
// ; Ya se envió el comando con la estampa de tiempo ?
// ; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_timeLoggerCmd]){// btjt		flagsWIFI,#f_timeLoggerCmd,tx_wifi_timeLogger_01
 800f8be:	4b86      	ldr	r3, [pc, #536]	@ (800fad8 <tx_control+0x2428>)
 800f8c0:	78db      	ldrb	r3, [r3, #3]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d000      	beq.n	800f8c8 <tx_control+0x2218>
 800f8c6:	e154      	b.n	800fb72 <tx_control+0x24c2>
			goto tx_wifi_timeLogger_01;
		}
		// ; en caso contrario carga información para transmitir comando
		flagsWIFI[f_timeLoggerCmd] = 1;	//bset		flagsWIFI,#f_timeLoggerCmd
 800f8c8:	4b83      	ldr	r3, [pc, #524]	@ (800fad8 <tx_control+0x2428>)
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	70da      	strb	r2, [r3, #3]
		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_cmd
		if(cntRegTxWifi)
 800f8ce:	4b83      	ldr	r3, [pc, #524]	@ (800fadc <tx_control+0x242c>)
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d130      	bne.n	800f938 <tx_control+0x2288>
			goto tx_wifi_timeLogger_cmd;

		// ;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockDATA;// mov		cntBlockFlash,cntBlockDATA; /pasa el número de bloques de datos grabados
 800f8d6:	4b84      	ldr	r3, [pc, #528]	@ (800fae8 <tx_control+0x2438>)
 800f8d8:	781a      	ldrb	r2, [r3, #0]
 800f8da:	4b84      	ldr	r3, [pc, #528]	@ (800faec <tx_control+0x243c>)
 800f8dc:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockDATA;// mov		cntByteBlock,cntByteBlockDATA
 800f8de:	4b84      	ldr	r3, [pc, #528]	@ (800faf0 <tx_control+0x2440>)
 800f8e0:	781a      	ldrb	r2, [r3, #0]
 800f8e2:	4b84      	ldr	r3, [pc, #528]	@ (800faf4 <tx_control+0x2444>)
 800f8e4:	701a      	strb	r2, [r3, #0]
		// ldw		X,#data_buffer
		dirBuffer = &data_buffer[0];// ldw		dirBuffer,X
 800f8e6:	4b84      	ldr	r3, [pc, #528]	@ (800faf8 <tx_control+0x2448>)
 800f8e8:	4a84      	ldr	r2, [pc, #528]	@ (800fafc <tx_control+0x244c>)
 800f8ea:	601a      	str	r2, [r3, #0]
		// ldw		X,#dataLogger
		dirLogger = &dataLogger[0]; //ldw		dirLogger,X
 800f8ec:	4b84      	ldr	r3, [pc, #528]	@ (800fb00 <tx_control+0x2450>)
 800f8ee:	4a85      	ldr	r2, [pc, #532]	@ (800fb04 <tx_control+0x2454>)
 800f8f0:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		dirBuffer[126] = cntByteBlock;// ld		(X),A
 800f8f2:	4b81      	ldr	r3, [pc, #516]	@ (800faf8 <tx_control+0x2448>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	337e      	adds	r3, #126	@ 0x7e
 800f8f8:	4a7e      	ldr	r2, [pc, #504]	@ (800faf4 <tx_control+0x2444>)
 800f8fa:	7812      	ldrb	r2, [r2, #0]
 800f8fc:	701a      	strb	r2, [r3, #0]

//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800f8fe:	4b82      	ldr	r3, [pc, #520]	@ (800fb08 <tx_control+0x2458>)
 800f900:	22aa      	movs	r2, #170	@ 0xaa
 800f902:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = dirLogger + 128*cntBlockFlash;// LDW		dirPointer,X
 800f904:	4b7e      	ldr	r3, [pc, #504]	@ (800fb00 <tx_control+0x2450>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a78      	ldr	r2, [pc, #480]	@ (800faec <tx_control+0x243c>)
 800f90a:	7812      	ldrb	r2, [r2, #0]
 800f90c:	01d2      	lsls	r2, r2, #7
 800f90e:	189a      	adds	r2, r3, r2
 800f910:	4b7e      	ldr	r3, [pc, #504]	@ (800fb0c <tx_control+0x245c>)
 800f912:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800f914:	4b78      	ldr	r3, [pc, #480]	@ (800faf8 <tx_control+0x2448>)
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	4b7d      	ldr	r3, [pc, #500]	@ (800fb10 <tx_control+0x2460>)
 800f91a:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800f91c:	f7f7 fb10 	bl	8006f40 <GRABA_BLOCK>

		// ldw		X,cntRegDATA
		cntReg = cntRegDATA;// ldw		cntReg,X
 800f920:	4b7c      	ldr	r3, [pc, #496]	@ (800fb14 <tx_control+0x2464>)
 800f922:	881a      	ldrh	r2, [r3, #0]
 800f924:	4b7c      	ldr	r3, [pc, #496]	@ (800fb18 <tx_control+0x2468>)
 800f926:	801a      	strh	r2, [r3, #0]
		// ldw		X,#eeCntRegDATA
		cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
 800f928:	4b7c      	ldr	r3, [pc, #496]	@ (800fb1c <tx_control+0x246c>)
 800f92a:	4a7d      	ldr	r2, [pc, #500]	@ (800fb20 <tx_control+0x2470>)
 800f92c:	601a      	str	r2, [r3, #0]
		save_cntReg();// call	save_cntReg
 800f92e:	f7f7 f9e9 	bl	8006d04 <save_cntReg>

		save_timeUNIX();// call	save_timeUNIX
 800f932:	f7f7 fa21 	bl	8006d78 <save_timeUNIX>
 800f936:	e000      	b.n	800f93a <tx_control+0x228a>
			goto tx_wifi_timeLogger_cmd;
 800f938:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_cmd:
		//; carga comando
		// ldw		X,#$4085
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800f93a:	4b7a      	ldr	r3, [pc, #488]	@ (800fb24 <tx_control+0x2474>)
 800f93c:	2240      	movs	r2, #64	@ 0x40
 800f93e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x85;
 800f940:	4b78      	ldr	r3, [pc, #480]	@ (800fb24 <tx_control+0x2474>)
 800f942:	2285      	movs	r2, #133	@ 0x85
 800f944:	705a      	strb	r2, [r3, #1]
		// ; carga versión de firmware
		// ldw		X,eeversion1
//		bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
//		bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 800f946:	4b78      	ldr	r3, [pc, #480]	@ (800fb28 <tx_control+0x2478>)
 800f948:	0018      	movs	r0, r3
 800f94a:	f7f3 f967 	bl	8002c1c <findLastValue>
 800f94e:	0003      	movs	r3, r0
 800f950:	b2da      	uxtb	r2, r3
 800f952:	4b74      	ldr	r3, [pc, #464]	@ (800fb24 <tx_control+0x2474>)
 800f954:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800f956:	4b75      	ldr	r3, [pc, #468]	@ (800fb2c <tx_control+0x247c>)
 800f958:	0018      	movs	r0, r3
 800f95a:	f7f3 f95f 	bl	8002c1c <findLastValue>
 800f95e:	0003      	movs	r3, r0
 800f960:	b2da      	uxtb	r2, r3
 800f962:	4b70      	ldr	r3, [pc, #448]	@ (800fb24 <tx_control+0x2474>)
 800f964:	70da      	strb	r2, [r3, #3]
		// ; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		bufferWifiTx+4,X
 800f966:	4b72      	ldr	r3, [pc, #456]	@ (800fb30 <tx_control+0x2480>)
 800f968:	881b      	ldrh	r3, [r3, #0]
 800f96a:	0a1b      	lsrs	r3, r3, #8
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	4b6c      	ldr	r3, [pc, #432]	@ (800fb24 <tx_control+0x2474>)
 800f972:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800f974:	4b6e      	ldr	r3, [pc, #440]	@ (800fb30 <tx_control+0x2480>)
 800f976:	881b      	ldrh	r3, [r3, #0]
 800f978:	b2da      	uxtb	r2, r3
 800f97a:	4b6a      	ldr	r3, [pc, #424]	@ (800fb24 <tx_control+0x2474>)
 800f97c:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		bufferWifiTx+6,X
 800f97e:	4b6d      	ldr	r3, [pc, #436]	@ (800fb34 <tx_control+0x2484>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	0a1b      	lsrs	r3, r3, #8
 800f984:	b29b      	uxth	r3, r3
 800f986:	b2da      	uxtb	r2, r3
 800f988:	4b66      	ldr	r3, [pc, #408]	@ (800fb24 <tx_control+0x2474>)
 800f98a:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800f98c:	4b69      	ldr	r3, [pc, #420]	@ (800fb34 <tx_control+0x2484>)
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	b2da      	uxtb	r2, r3
 800f992:	4b64      	ldr	r3, [pc, #400]	@ (800fb24 <tx_control+0x2474>)
 800f994:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[11] = eeLat4;
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;
		bufferWifiTx[8] = findLastValue((uint32_t) &eeLat1);
 800f996:	4b68      	ldr	r3, [pc, #416]	@ (800fb38 <tx_control+0x2488>)
 800f998:	0018      	movs	r0, r3
 800f99a:	f7f3 f93f 	bl	8002c1c <findLastValue>
 800f99e:	0003      	movs	r3, r0
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	4b60      	ldr	r3, [pc, #384]	@ (800fb24 <tx_control+0x2474>)
 800f9a4:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = findLastValue((uint32_t) &eeLat2);
 800f9a6:	4b65      	ldr	r3, [pc, #404]	@ (800fb3c <tx_control+0x248c>)
 800f9a8:	0018      	movs	r0, r3
 800f9aa:	f7f3 f937 	bl	8002c1c <findLastValue>
 800f9ae:	0003      	movs	r3, r0
 800f9b0:	b2da      	uxtb	r2, r3
 800f9b2:	4b5c      	ldr	r3, [pc, #368]	@ (800fb24 <tx_control+0x2474>)
 800f9b4:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = findLastValue((uint32_t) &eeLat3);
 800f9b6:	4b62      	ldr	r3, [pc, #392]	@ (800fb40 <tx_control+0x2490>)
 800f9b8:	0018      	movs	r0, r3
 800f9ba:	f7f3 f92f 	bl	8002c1c <findLastValue>
 800f9be:	0003      	movs	r3, r0
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	4b58      	ldr	r3, [pc, #352]	@ (800fb24 <tx_control+0x2474>)
 800f9c4:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = findLastValue((uint32_t) &eeLat4);
 800f9c6:	4b5f      	ldr	r3, [pc, #380]	@ (800fb44 <tx_control+0x2494>)
 800f9c8:	0018      	movs	r0, r3
 800f9ca:	f7f3 f927 	bl	8002c1c <findLastValue>
 800f9ce:	0003      	movs	r3, r0
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	4b54      	ldr	r3, [pc, #336]	@ (800fb24 <tx_control+0x2474>)
 800f9d4:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = findLastValue((uint32_t) &eeLong1);
 800f9d6:	4b5c      	ldr	r3, [pc, #368]	@ (800fb48 <tx_control+0x2498>)
 800f9d8:	0018      	movs	r0, r3
 800f9da:	f7f3 f91f 	bl	8002c1c <findLastValue>
 800f9de:	0003      	movs	r3, r0
 800f9e0:	b2da      	uxtb	r2, r3
 800f9e2:	4b50      	ldr	r3, [pc, #320]	@ (800fb24 <tx_control+0x2474>)
 800f9e4:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = findLastValue((uint32_t) &eeLong2);
 800f9e6:	4b59      	ldr	r3, [pc, #356]	@ (800fb4c <tx_control+0x249c>)
 800f9e8:	0018      	movs	r0, r3
 800f9ea:	f7f3 f917 	bl	8002c1c <findLastValue>
 800f9ee:	0003      	movs	r3, r0
 800f9f0:	b2da      	uxtb	r2, r3
 800f9f2:	4b4c      	ldr	r3, [pc, #304]	@ (800fb24 <tx_control+0x2474>)
 800f9f4:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = findLastValue((uint32_t) &eeLong3);
 800f9f6:	4b56      	ldr	r3, [pc, #344]	@ (800fb50 <tx_control+0x24a0>)
 800f9f8:	0018      	movs	r0, r3
 800f9fa:	f7f3 f90f 	bl	8002c1c <findLastValue>
 800f9fe:	0003      	movs	r3, r0
 800fa00:	b2da      	uxtb	r2, r3
 800fa02:	4b48      	ldr	r3, [pc, #288]	@ (800fb24 <tx_control+0x2474>)
 800fa04:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = findLastValue((uint32_t) &eeLong4);
 800fa06:	4b53      	ldr	r3, [pc, #332]	@ (800fb54 <tx_control+0x24a4>)
 800fa08:	0018      	movs	r0, r3
 800fa0a:	f7f3 f907 	bl	8002c1c <findLastValue>
 800fa0e:	0003      	movs	r3, r0
 800fa10:	b2da      	uxtb	r2, r3
 800fa12:	4b44      	ldr	r3, [pc, #272]	@ (800fb24 <tx_control+0x2474>)
 800fa14:	73da      	strb	r2, [r3, #15]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800fa16:	4b24      	ldr	r3, [pc, #144]	@ (800faa8 <tx_control+0x23f8>)
 800fa18:	4a42      	ldr	r2, [pc, #264]	@ (800fb24 <tx_control+0x2474>)
 800fa1a:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800fa1c:	4b23      	ldr	r3, [pc, #140]	@ (800faac <tx_control+0x23fc>)
 800fa1e:	4a41      	ldr	r2, [pc, #260]	@ (800fb24 <tx_control+0x2474>)
 800fa20:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 800fa22:	4b23      	ldr	r3, [pc, #140]	@ (800fab0 <tx_control+0x2400>)
 800fa24:	4a4c      	ldr	r2, [pc, #304]	@ (800fb58 <tx_control+0x24a8>)
 800fa26:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 800fa28:	4b23      	ldr	r3, [pc, #140]	@ (800fab8 <tx_control+0x2408>)
 800fa2a:	2210      	movs	r2, #16
 800fa2c:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800fa2e:	4b23      	ldr	r3, [pc, #140]	@ (800fabc <tx_control+0x240c>)
 800fa30:	2200      	movs	r2, #0
 800fa32:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fa34:	4b49      	ldr	r3, [pc, #292]	@ (800fb5c <tx_control+0x24ac>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	601a      	str	r2, [r3, #0]
		flagsTX[3]=1;//bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800fa3a:	4b20      	ldr	r3, [pc, #128]	@ (800fabc <tx_control+0x240c>)
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fa40:	4b1f      	ldr	r3, [pc, #124]	@ (800fac0 <tx_control+0x2410>)
 800fa42:	2255      	movs	r2, #85	@ 0x55
 800fa44:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800fa46:	4b1f      	ldr	r3, [pc, #124]	@ (800fac4 <tx_control+0x2414>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	701a      	strb	r2, [r3, #0]

		//;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_timeLogger_noInit
		if(cntRegTxWifi)
 800fa4c:	4b23      	ldr	r3, [pc, #140]	@ (800fadc <tx_control+0x242c>)
 800fa4e:	881b      	ldrh	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d000      	beq.n	800fa56 <tx_control+0x23a6>
 800fa54:	e084      	b.n	800fb60 <tx_control+0x24b0>
/*;Establece punteros iniciales y finales del envío de datos de tiempo
; pasa el número de bloques y bytes de datos de tiempo grabados
; limpia el contador de registros transmitidos
;	carga timeout en segundos*/

		blockLoggWifi = cntBlockDATA;// mov		blockLoggWifi,cntBlockDATA
 800fa56:	4b24      	ldr	r3, [pc, #144]	@ (800fae8 <tx_control+0x2438>)
 800fa58:	781a      	ldrb	r2, [r3, #0]
 800fa5a:	4b21      	ldr	r3, [pc, #132]	@ (800fae0 <tx_control+0x2430>)
 800fa5c:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockDATA;// mov		byteLoggWifi,cntByteBlockDATA
 800fa5e:	4b24      	ldr	r3, [pc, #144]	@ (800faf0 <tx_control+0x2440>)
 800fa60:	781a      	ldrb	r2, [r3, #0]
 800fa62:	4b20      	ldr	r3, [pc, #128]	@ (800fae4 <tx_control+0x2434>)
 800fa64:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;// ldw		cntRegTxWifi,X
 800fa66:	4b1d      	ldr	r3, [pc, #116]	@ (800fadc <tx_control+0x242c>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	801a      	strh	r2, [r3, #0]
 800fa6c:	e079      	b.n	800fb62 <tx_control+0x24b2>
 800fa6e:	46c0      	nop			@ (mov r8, r8)
 800fa70:	20000984 	.word	0x20000984
 800fa74:	20001070 	.word	0x20001070
 800fa78:	20001071 	.word	0x20001071
 800fa7c:	20001072 	.word	0x20001072
 800fa80:	20001073 	.word	0x20001073
 800fa84:	20001074 	.word	0x20001074
 800fa88:	20001075 	.word	0x20001075
 800fa8c:	20000b54 	.word	0x20000b54
 800fa90:	2000108c 	.word	0x2000108c
 800fa94:	20000560 	.word	0x20000560
 800fa98:	20001078 	.word	0x20001078
 800fa9c:	200010e9 	.word	0x200010e9
 800faa0:	20001068 	.word	0x20001068
 800faa4:	20000db4 	.word	0x20000db4
 800faa8:	20000e14 	.word	0x20000e14
 800faac:	20000e0c 	.word	0x20000e0c
 800fab0:	20000e10 	.word	0x20000e10
 800fab4:	20000db5 	.word	0x20000db5
 800fab8:	20000e30 	.word	0x20000e30
 800fabc:	20000e1c 	.word	0x20000e1c
 800fac0:	20000e19 	.word	0x20000e19
 800fac4:	20000e24 	.word	0x20000e24
 800fac8:	20000edc 	.word	0x20000edc
 800facc:	20000ee4 	.word	0x20000ee4
 800fad0:	20001044 	.word	0x20001044
 800fad4:	200010ec 	.word	0x200010ec
 800fad8:	20000f50 	.word	0x20000f50
 800fadc:	20000f78 	.word	0x20000f78
 800fae0:	20000f76 	.word	0x20000f76
 800fae4:	20000f77 	.word	0x20000f77
 800fae8:	20000dad 	.word	0x20000dad
 800faec:	20000d9a 	.word	0x20000d9a
 800faf0:	20000dac 	.word	0x20000dac
 800faf4:	20000d9b 	.word	0x20000d9b
 800faf8:	20000da4 	.word	0x20000da4
 800fafc:	20000c8c 	.word	0x20000c8c
 800fb00:	20000da0 	.word	0x20000da0
 800fb04:	0803c000 	.word	0x0803c000
 800fb08:	20000d8c 	.word	0x20000d8c
 800fb0c:	20000d90 	.word	0x20000d90
 800fb10:	20000d94 	.word	0x20000d94
 800fb14:	2000103a 	.word	0x2000103a
 800fb18:	2000103e 	.word	0x2000103e
 800fb1c:	20001040 	.word	0x20001040
 800fb20:	0803f810 	.word	0x0803f810
 800fb24:	20000f58 	.word	0x20000f58
 800fb28:	0803f07b 	.word	0x0803f07b
 800fb2c:	0803f07c 	.word	0x0803f07c
 800fb30:	20000db0 	.word	0x20000db0
 800fb34:	20000db2 	.word	0x20000db2
 800fb38:	0803f808 	.word	0x0803f808
 800fb3c:	0803f809 	.word	0x0803f809
 800fb40:	0803f80a 	.word	0x0803f80a
 800fb44:	0803f80b 	.word	0x0803f80b
 800fb48:	0803f80c 	.word	0x0803f80c
 800fb4c:	0803f80d 	.word	0x0803f80d
 800fb50:	0803f80e 	.word	0x0803f80e
 800fb54:	0803f80f 	.word	0x0803f80f
 800fb58:	20000f68 	.word	0x20000f68
 800fb5c:	20000e34 	.word	0x20000e34
			goto tx_wifi_timeLogger_noInit;
 800fb60:	46c0      	nop			@ (mov r8, r8)
tx_wifi_timeLogger_noInit:
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800fb62:	4be4      	ldr	r3, [pc, #912]	@ (800fef4 <tx_control+0x2844>)
 800fb64:	2203      	movs	r2, #3
 800fb66:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegDATA) == 0){
		//	goto tx_wifi_timeLogger_END;// jreq	tx_wifi_timeLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegDATA;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegDATA);
		numRegTx = 1343;
 800fb68:	4be3      	ldr	r3, [pc, #908]	@ (800fef8 <tx_control+0x2848>)
 800fb6a:	4ae4      	ldr	r2, [pc, #912]	@ (800fefc <tx_control+0x284c>)
 800fb6c:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 800fb6e:	f000 ff56 	bl	8010a1e <tx_control+0x336e>
			goto tx_wifi_timeLogger_01;
 800fb72:	46c0      	nop			@ (mov r8, r8)
;------------- Validación de respuesta, time out y envío de logger por Registro
*/
tx_wifi_timeLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX==0x3D){
 800fb74:	4be2      	ldr	r3, [pc, #904]	@ (800ff00 <tx_control+0x2850>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b3d      	cmp	r3, #61	@ 0x3d
 800fb7a:	d00e      	beq.n	800fb9a <tx_control+0x24ea>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
		}
		codeTX = 0;
 800fb7c:	4be0      	ldr	r3, [pc, #896]	@ (800ff00 <tx_control+0x2850>)
 800fb7e:	2200      	movs	r2, #0
 800fb80:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 800fb82:	4bdc      	ldr	r3, [pc, #880]	@ (800fef4 <tx_control+0x2844>)
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d104      	bne.n	800fb94 <tx_control+0x24e4>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
		}
		flagsWIFI[f_timeLoggerCmd]=0;// bres	flagsWIFI,#f_timeLoggerCmd
 800fb8a:	4bde      	ldr	r3, [pc, #888]	@ (800ff04 <tx_control+0x2854>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	70da      	strb	r2, [r3, #3]

tx_wifi_timeLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 800fb90:	f000 ff45 	bl	8010a1e <tx_control+0x336e>
			goto tx_wifi_timeLogger_02;// jrne	tx_wifi_timeLogger_02
 800fb94:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 800fb96:	f000 ff42 	bl	8010a1e <tx_control+0x336e>
			goto tx_wifi_timeLogger_03; // jreq	tx_wifi_timeLogger_03
 800fb9a:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_03:
		//; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
		//ldw		X,#300;
		timeoutTWF = 300;//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 800fb9c:	4bda      	ldr	r3, [pc, #872]	@ (800ff08 <tx_control+0x2858>)
 800fb9e:	2296      	movs	r2, #150	@ 0x96
 800fba0:	0052      	lsls	r2, r2, #1
 800fba2:	801a      	strh	r2, [r3, #0]
		//ldw		X,#300;
		timeoutTBLE = 300;//ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
 800fba4:	4bd9      	ldr	r3, [pc, #868]	@ (800ff0c <tx_control+0x285c>)
 800fba6:	2296      	movs	r2, #150	@ 0x96
 800fba8:	0052      	lsls	r2, r2, #1
 800fbaa:	801a      	strh	r2, [r3, #0]

		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800fbac:	4bd1      	ldr	r3, [pc, #836]	@ (800fef4 <tx_control+0x2844>)
 800fbae:	2203      	movs	r2, #3
 800fbb0:	701a      	strb	r2, [r3, #0]

		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		 if(numRegTx < cntRegTxWifi){
 800fbb2:	4bd1      	ldr	r3, [pc, #836]	@ (800fef8 <tx_control+0x2848>)
 800fbb4:	881a      	ldrh	r2, [r3, #0]
 800fbb6:	4bd6      	ldr	r3, [pc, #856]	@ (800ff10 <tx_control+0x2860>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d314      	bcc.n	800fbe8 <tx_control+0x2538>
		//cntReg = 0;// ldw		cntReg,X
		// ldw		X,#eeCntRegDATA
		//cntRegPNT = &eeCntRegDATA;// ldw		cntRegPNT,X
		//save_cntReg();// call	save_cntReg

tx_wifi_timeLogger_END:
 800fbbe:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_timeLoggerSend] = 1;// bset	flagsWIFI,#f_timeLoggerSend
		flagsWIFI[f_timeLoggerSend] = 0;
 800fbc0:	4bd0      	ldr	r3, [pc, #832]	@ (800ff04 <tx_control+0x2854>)
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	705a      	strb	r2, [r3, #1]
		flagsWIFI[f_timeLoggerCmd] = 0;	// bres	flagsWIFI,#f_timeLoggerCmd; // borra bandera de comando para liberar envío de token
 800fbc6:	4bcf      	ldr	r3, [pc, #828]	@ (800ff04 <tx_control+0x2854>)
 800fbc8:	2200      	movs	r2, #0
 800fbca:	70da      	strb	r2, [r3, #3]
		delayTxLoggWifi = 10;// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 800fbcc:	4bd1      	ldr	r3, [pc, #836]	@ (800ff14 <tx_control+0x2864>)
 800fbce:	220a      	movs	r2, #10
 800fbd0:	701a      	strb	r2, [r3, #0]

		blockLoggWifi = 0; 		//clr	blockLoggWifi
 800fbd2:	4bd1      	ldr	r3, [pc, #836]	@ (800ff18 <tx_control+0x2868>)
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;		//clr		byteLoggWifi
 800fbd8:	4bd0      	ldr	r3, [pc, #832]	@ (800ff1c <tx_control+0x286c>)
 800fbda:	2200      	movs	r2, #0
 800fbdc:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 800fbde:	4bcc      	ldr	r3, [pc, #816]	@ (800ff10 <tx_control+0x2860>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 800fbe4:	f000 ff1b 	bl	8010a1e <tx_control+0x336e>
			 goto tx_wifi_timeLogger_04;//jrult	tx_wifi_timeLogger_04
 800fbe8:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4083
		bufferWifiTx [0] = 0x40;	// ldw		bufferWifiTx,X
 800fbea:	4bcd      	ldr	r3, [pc, #820]	@ (800ff20 <tx_control+0x2870>)
 800fbec:	2240      	movs	r2, #64	@ 0x40
 800fbee:	701a      	strb	r2, [r3, #0]
		bufferWifiTx [1] = 0x83;
 800fbf0:	4bcb      	ldr	r3, [pc, #812]	@ (800ff20 <tx_control+0x2870>)
 800fbf2:	2283      	movs	r2, #131	@ 0x83
 800fbf4:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 800fbf6:	4bca      	ldr	r3, [pc, #808]	@ (800ff20 <tx_control+0x2870>)
 800fbf8:	2203      	movs	r2, #3
 800fbfa:	709a      	strb	r2, [r3, #2]
		// ; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];	// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 800fbfc:	4bc9      	ldr	r3, [pc, #804]	@ (800ff24 <tx_control+0x2874>)
 800fbfe:	0018      	movs	r0, r3
 800fc00:	f7f3 f80c 	bl	8002c1c <findLastValue>
 800fc04:	0003      	movs	r3, r0
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	4bc5      	ldr	r3, [pc, #788]	@ (800ff20 <tx_control+0x2870>)
 800fc0a:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800fc0c:	4bc6      	ldr	r3, [pc, #792]	@ (800ff28 <tx_control+0x2878>)
 800fc0e:	0018      	movs	r0, r3
 800fc10:	f7f3 f804 	bl	8002c1c <findLastValue>
 800fc14:	0003      	movs	r3, r0
 800fc16:	b2da      	uxtb	r2, r3
 800fc18:	4bc1      	ldr	r3, [pc, #772]	@ (800ff20 <tx_control+0x2870>)
 800fc1a:	711a      	strb	r2, [r3, #4]
tx_wifi_timeLogger_loadLogger_01:

		/* ; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes*/
		// tnz		byteLoggWifi
		if(byteLoggWifi != 0){
 800fc1c:	4bbf      	ldr	r3, [pc, #764]	@ (800ff1c <tx_control+0x286c>)
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d112      	bne.n	800fc4a <tx_control+0x259a>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
		}
		byteLoggWifi = offsetTimeLogg;// mov		byteLoggWifi,#offsetTimeLogg
 800fc24:	4bbd      	ldr	r3, [pc, #756]	@ (800ff1c <tx_control+0x286c>)
 800fc26:	227e      	movs	r2, #126	@ 0x7e
 800fc28:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi != 0){
 800fc2a:	4bbb      	ldr	r3, [pc, #748]	@ (800ff18 <tx_control+0x2868>)
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d103      	bne.n	800fc3a <tx_control+0x258a>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
		}
		blockLoggWifi = numBlockDATA;// mov		blockLoggWifi,#numBlockDATA
 800fc32:	4bb9      	ldr	r3, [pc, #740]	@ (800ff18 <tx_control+0x2868>)
 800fc34:	2260      	movs	r2, #96	@ 0x60
 800fc36:	701a      	strb	r2, [r3, #0]
 800fc38:	e000      	b.n	800fc3c <tx_control+0x258c>
			goto tx_wifi_timeLogger_loadLogger_02;// jrne	tx_wifi_timeLogger_loadLogger_02
 800fc3a:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 800fc3c:	4bb6      	ldr	r3, [pc, #728]	@ (800ff18 <tx_control+0x2868>)
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	4bb4      	ldr	r3, [pc, #720]	@ (800ff18 <tx_control+0x2868>)
 800fc46:	701a      	strb	r2, [r3, #0]
 800fc48:	e000      	b.n	800fc4c <tx_control+0x259c>
			goto tx_wifi_timeLogger_loadLogger_03;// jrne	tx_wifi_timeLogger_loadLogger_03
 800fc4a:	46c0      	nop			@ (mov r8, r8)

tx_wifi_timeLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegTimeLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegTimeLogg);	/ apunta al buffer de datos en RAM
 800fc4c:	4bb7      	ldr	r3, [pc, #732]	@ (800ff2c <tx_control+0x287c>)
 800fc4e:	643b      	str	r3, [r7, #64]	@ 0x40
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		// mul		X,A;										/ Multiplicalos
		// addw	X,#dataLogger;				/	apunta al inicio de la Flash resevada para Logger de datos de tiempo + el número de bloques grabados
		// clr		resulh
		// mov		resull,byteLoggWifi
		point_X = &dataLogger[128*blockLoggWifi+byteLoggWifi];// addw	X,resulh;							/ suma la posición de bytes
 800fc50:	4bb1      	ldr	r3, [pc, #708]	@ (800ff18 <tx_control+0x2868>)
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	01db      	lsls	r3, r3, #7
 800fc56:	4ab1      	ldr	r2, [pc, #708]	@ (800ff1c <tx_control+0x286c>)
 800fc58:	7812      	ldrb	r2, [r2, #0]
 800fc5a:	189a      	adds	r2, r3, r2
 800fc5c:	4bb4      	ldr	r3, [pc, #720]	@ (800ff30 <tx_control+0x2880>)
 800fc5e:	18d3      	adds	r3, r2, r3
 800fc60:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 800fc62:	4bb4      	ldr	r3, [pc, #720]	@ (800ff34 <tx_control+0x2884>)
 800fc64:	2200      	movs	r2, #0
 800fc66:	701a      	strb	r2, [r3, #0]

tx_wifi_timeLogger_loadLogger_04:
		point_X--;// decw	X;
 800fc68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 800fc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc70:	3b01      	subs	r3, #1
 800fc72:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;// dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 800fc74:	4ba9      	ldr	r3, [pc, #676]	@ (800ff1c <tx_control+0x286c>)
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	4ba7      	ldr	r3, [pc, #668]	@ (800ff1c <tx_control+0x286c>)
 800fc7e:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 800fc80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc82:	2380      	movs	r3, #128	@ 0x80
 800fc84:	025b      	lsls	r3, r3, #9
 800fc86:	5cd2      	ldrb	r2, [r2, r3]
 800fc88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc8a:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 800fc8c:	4ba9      	ldr	r3, [pc, #676]	@ (800ff34 <tx_control+0x2884>)
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	3301      	adds	r3, #1
 800fc92:	b2da      	uxtb	r2, r3
 800fc94:	4ba7      	ldr	r3, [pc, #668]	@ (800ff34 <tx_control+0x2884>)
 800fc96:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegTimeLogg
		if(wreg < sizeRegTimeLogg){
 800fc98:	4ba6      	ldr	r3, [pc, #664]	@ (800ff34 <tx_control+0x2884>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	2b08      	cmp	r3, #8
 800fc9e:	d800      	bhi.n	800fca2 <tx_control+0x25f2>
			goto tx_wifi_timeLogger_loadLogger_04;//jrult tx_wifi_timeLogger_loadLogger_04
 800fca0:	e7e2      	b.n	800fc68 <tx_control+0x25b8>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[13];// mov		waux,bufferWifiTx+13
 800fca2:	4b9f      	ldr	r3, [pc, #636]	@ (800ff20 <tx_control+0x2870>)
 800fca4:	7b5a      	ldrb	r2, [r3, #13]
 800fca6:	4ba4      	ldr	r3, [pc, #656]	@ (800ff38 <tx_control+0x2888>)
 800fca8:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[13] = 0;// clr		bufferWifiTx+13
 800fcaa:	4b9d      	ldr	r3, [pc, #628]	@ (800ff20 <tx_control+0x2870>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = waux;	//mov		bufferWifiTx+14,waux
 800fcb0:	4ba1      	ldr	r3, [pc, #644]	@ (800ff38 <tx_control+0x2888>)
 800fcb2:	781a      	ldrb	r2, [r3, #0]
 800fcb4:	4b9a      	ldr	r3, [pc, #616]	@ (800ff20 <tx_control+0x2870>)
 800fcb6:	739a      	strb	r2, [r3, #14]

		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800fcb8:	4ba0      	ldr	r3, [pc, #640]	@ (800ff3c <tx_control+0x288c>)
 800fcba:	4a99      	ldr	r2, [pc, #612]	@ (800ff20 <tx_control+0x2870>)
 800fcbc:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800fcbe:	4ba0      	ldr	r3, [pc, #640]	@ (800ff40 <tx_control+0x2890>)
 800fcc0:	4a97      	ldr	r2, [pc, #604]	@ (800ff20 <tx_control+0x2870>)
 800fcc2:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+15)
		pointEndTx = &bufferWifiTx[15];// ldw		pointEndTx,X
 800fcc4:	4b9f      	ldr	r3, [pc, #636]	@ (800ff44 <tx_control+0x2894>)
 800fcc6:	4aa0      	ldr	r2, [pc, #640]	@ (800ff48 <tx_control+0x2898>)
 800fcc8:	601a      	str	r2, [r3, #0]
		blockSizeTX = 15; // mov		blockSizeTX,#15
 800fcca:	4ba0      	ldr	r3, [pc, #640]	@ (800ff4c <tx_control+0x289c>)
 800fccc:	220f      	movs	r2, #15
 800fcce:	701a      	strb	r2, [r3, #0]

		flagsTX[2]=0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800fcd0:	4b9f      	ldr	r3, [pc, #636]	@ (800ff50 <tx_control+0x28a0>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fcd6:	4b9f      	ldr	r3, [pc, #636]	@ (800ff54 <tx_control+0x28a4>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	601a      	str	r2, [r3, #0]
		flagsTX[3] =1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800fcdc:	4b9c      	ldr	r3, [pc, #624]	@ (800ff50 <tx_control+0x28a0>)
 800fcde:	2201      	movs	r2, #1
 800fce0:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fce2:	4b9d      	ldr	r3, [pc, #628]	@ (800ff58 <tx_control+0x28a8>)
 800fce4:	2255      	movs	r2, #85	@ 0x55
 800fce6:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 800fce8:	4b85      	ldr	r3, [pc, #532]	@ (800ff00 <tx_control+0x2850>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	701a      	strb	r2, [r3, #0]

		// incrementa el contador de registros enviados
		// ldw		X,cntRegTxWifi
		// incw	X
		cntRegTxWifi++; //ldw		cntRegTxWifi,X
 800fcee:	4b88      	ldr	r3, [pc, #544]	@ (800ff10 <tx_control+0x2860>)
 800fcf0:	881b      	ldrh	r3, [r3, #0]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	b29a      	uxth	r2, r3
 800fcf6:	4b86      	ldr	r3, [pc, #536]	@ (800ff10 <tx_control+0x2860>)
 800fcf8:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;// jp			end_tx_wifi
 800fcfa:	f000 fe90 	bl	8010a1e <tx_control+0x336e>
		goto tx_wifi_eventLoggerAsk;	//jp			tx_wifi_eventLoggerAsk
 800fcfe:	46c0      	nop			@ (mov r8, r8)
		// ;										Logger eventos
		// ;===========================================================
tx_wifi_eventLoggerAsk:
		// ; Pregunta si ya se envío el logger de eventos
		//if(!flagsWIFI[f_eventLoggerSend]){
		if(flagsWIFI[f_eventLoggerSend]){
 800fd00:	4b80      	ldr	r3, [pc, #512]	@ (800ff04 <tx_control+0x2854>)
 800fd02:	789b      	ldrb	r3, [r3, #2]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d100      	bne.n	800fd0a <tx_control+0x265a>
 800fd08:	e211      	b.n	801012e <tx_control+0x2a7e>
			goto tx_wifi_eventLogger;// btjf		flagsWIFI,#f_eventLoggerSend,tx_wifi_eventLogger
 800fd0a:	46c0      	nop			@ (mov r8, r8)
//tx_wifi_eventDelayAsk:
		//;------------------------------------------------------------
		//;------------- Envío de comando y tiempo actual
		//; Ya se envió el comando con la estampa de tiempo ?
		//; si ya se mandó, espera respuesta de modulo WiFi.
		if(flagsWIFI[f_eventLoggerCmd]){
 800fd0c:	4b7d      	ldr	r3, [pc, #500]	@ (800ff04 <tx_control+0x2854>)
 800fd0e:	791b      	ldrb	r3, [r3, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d000      	beq.n	800fd16 <tx_control+0x2666>
 800fd14:	e0d9      	b.n	800feca <tx_control+0x281a>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
		}

		//; en caso contrario carga información para transmitir comando
		flagsWIFI[f_eventLoggerCmd]=1;// bset		flagsWIFI,#f_eventLoggerCmd
 800fd16:	4b7b      	ldr	r3, [pc, #492]	@ (800ff04 <tx_control+0x2854>)
 800fd18:	2201      	movs	r2, #1
 800fd1a:	711a      	strb	r2, [r3, #4]

		//;Sí el contador no viene en cero no grabes datos
		//ldw		X,cntRegTxWifi
		//tnzw	X
		//jrne	tx_wifi_eventLogger_cmd
		if(cntRegTxWifi)
 800fd1c:	4b7c      	ldr	r3, [pc, #496]	@ (800ff10 <tx_control+0x2860>)
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d12f      	bne.n	800fd84 <tx_control+0x26d4>
			goto tx_wifi_eventLogger_cmd;
		//;primero guarda lo que aun hay en el buffer .
		cntBlockFlash = cntBlockEVENT;// mov		cntBlockFlash,cntBlockEVENT; /pasa el número de bloques de datos grabados
 800fd24:	4b8d      	ldr	r3, [pc, #564]	@ (800ff5c <tx_control+0x28ac>)
 800fd26:	781a      	ldrb	r2, [r3, #0]
 800fd28:	4b8d      	ldr	r3, [pc, #564]	@ (800ff60 <tx_control+0x28b0>)
 800fd2a:	701a      	strb	r2, [r3, #0]
		cntByteBlock = cntByteBlockEVENT;// mov		cntByteBlock,cntByteBlockEVENT
 800fd2c:	4b8d      	ldr	r3, [pc, #564]	@ (800ff64 <tx_control+0x28b4>)
 800fd2e:	781a      	ldrb	r2, [r3, #0]
 800fd30:	4b8d      	ldr	r3, [pc, #564]	@ (800ff68 <tx_control+0x28b8>)
 800fd32:	701a      	strb	r2, [r3, #0]
		// ldw		X,#event_buffer
		dirBuffer = &event_buffer[0];// ldw		dirBuffer,X
 800fd34:	4b8d      	ldr	r3, [pc, #564]	@ (800ff6c <tx_control+0x28bc>)
 800fd36:	4a8e      	ldr	r2, [pc, #568]	@ (800ff70 <tx_control+0x28c0>)
 800fd38:	601a      	str	r2, [r3, #0]
		// ldw		X,#eventLogger
		dirLogger = &eventLogger[0];// ldw		dirLogger,X
 800fd3a:	4b8e      	ldr	r3, [pc, #568]	@ (800ff74 <tx_control+0x28c4>)
 800fd3c:	4a8e      	ldr	r2, [pc, #568]	@ (800ff78 <tx_control+0x28c8>)
 800fd3e:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer
		// clr		resulh
		// mov		resull,#126
		// addw	X,resulh
		// ld		A,cntByteBlock
		event_buffer[126]=cntByteBlock;// ld		(X),A
 800fd40:	4b89      	ldr	r3, [pc, #548]	@ (800ff68 <tx_control+0x28b8>)
 800fd42:	7819      	ldrb	r1, [r3, #0]
 800fd44:	4b8a      	ldr	r3, [pc, #552]	@ (800ff70 <tx_control+0x28c0>)
 800fd46:	227e      	movs	r2, #126	@ 0x7e
 800fd48:	5499      	strb	r1, [r3, r2]

		//;---- Graba buffer en bloque de flash
		ProgMemCode = 0xAA;// mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 800fd4a:	4b8c      	ldr	r3, [pc, #560]	@ (800ff7c <tx_control+0x28cc>)
 800fd4c:	22aa      	movs	r2, #170	@ 0xaa
 800fd4e:	701a      	strb	r2, [r3, #0]
		// ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
		// ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
		//mul		X,A;										/ Multiplicalos
		//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
		dirPointer = &dirLogger[128*cntBlockFlash];// LDW		dirPointer,X
 800fd50:	4b88      	ldr	r3, [pc, #544]	@ (800ff74 <tx_control+0x28c4>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a82      	ldr	r2, [pc, #520]	@ (800ff60 <tx_control+0x28b0>)
 800fd56:	7812      	ldrb	r2, [r2, #0]
 800fd58:	01d2      	lsls	r2, r2, #7
 800fd5a:	189a      	adds	r2, r3, r2
 800fd5c:	4b88      	ldr	r3, [pc, #544]	@ (800ff80 <tx_control+0x28d0>)
 800fd5e:	601a      	str	r2, [r3, #0]
		// LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
		dataPointer = dirBuffer;// LDW		dataPointer,X
 800fd60:	4b82      	ldr	r3, [pc, #520]	@ (800ff6c <tx_control+0x28bc>)
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	4b87      	ldr	r3, [pc, #540]	@ (800ff84 <tx_control+0x28d4>)
 800fd66:	601a      	str	r2, [r3, #0]
		GRABA_BLOCK();// call	GRABA_BLOCK
 800fd68:	f7f7 f8ea 	bl	8006f40 <GRABA_BLOCK>

		// ldw		X,cntRegEVENT
		cntReg = cntRegEVENT;// ldw		cntReg,X
 800fd6c:	4b86      	ldr	r3, [pc, #536]	@ (800ff88 <tx_control+0x28d8>)
 800fd6e:	881a      	ldrh	r2, [r3, #0]
 800fd70:	4b86      	ldr	r3, [pc, #536]	@ (800ff8c <tx_control+0x28dc>)
 800fd72:	801a      	strh	r2, [r3, #0]
		//ldw		X,#eeCntRegEVENT
		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
 800fd74:	4b86      	ldr	r3, [pc, #536]	@ (800ff90 <tx_control+0x28e0>)
 800fd76:	4a87      	ldr	r2, [pc, #540]	@ (800ff94 <tx_control+0x28e4>)
 800fd78:	601a      	str	r2, [r3, #0]
		save_cntReg();		// call	save_cntReg
 800fd7a:	f7f6 ffc3 	bl	8006d04 <save_cntReg>

		save_timeUNIX();	// call	save_timeUNIX
 800fd7e:	f7f6 fffb 	bl	8006d78 <save_timeUNIX>
 800fd82:	e000      	b.n	800fd86 <tx_control+0x26d6>
			goto tx_wifi_eventLogger_cmd;
 800fd84:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_cmd:
		//; carga comando
		// ldw		X,#$4086
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 800fd86:	4b66      	ldr	r3, [pc, #408]	@ (800ff20 <tx_control+0x2870>)
 800fd88:	2240      	movs	r2, #64	@ 0x40
 800fd8a:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x86;
 800fd8c:	4b64      	ldr	r3, [pc, #400]	@ (800ff20 <tx_control+0x2870>)
 800fd8e:	2286      	movs	r2, #134	@ 0x86
 800fd90:	705a      	strb	r2, [r3, #1]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[2] = eePlantilla[eeversion1];// ldw		bufferWifiTx+2,X
		//bufferWifiTx[3] = eePlantilla[eeversion2];
		bufferWifiTx[2] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 800fd92:	4b64      	ldr	r3, [pc, #400]	@ (800ff24 <tx_control+0x2874>)
 800fd94:	0018      	movs	r0, r3
 800fd96:	f7f2 ff41 	bl	8002c1c <findLastValue>
 800fd9a:	0003      	movs	r3, r0
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	4b60      	ldr	r3, [pc, #384]	@ (800ff20 <tx_control+0x2870>)
 800fda0:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 800fda2:	4b61      	ldr	r3, [pc, #388]	@ (800ff28 <tx_control+0x2878>)
 800fda4:	0018      	movs	r0, r3
 800fda6:	f7f2 ff39 	bl	8002c1c <findLastValue>
 800fdaa:	0003      	movs	r3, r0
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	4b5c      	ldr	r3, [pc, #368]	@ (800ff20 <tx_control+0x2870>)
 800fdb0:	70da      	strb	r2, [r3, #3]
		//; carga hora actual
		// ldw		X,timeSeconds_HW
		bufferWifiTx[4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8); // ldw		bufferWifiTx+4,X
 800fdb2:	4b79      	ldr	r3, [pc, #484]	@ (800ff98 <tx_control+0x28e8>)
 800fdb4:	881b      	ldrh	r3, [r3, #0]
 800fdb6:	0a1b      	lsrs	r3, r3, #8
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	b2da      	uxtb	r2, r3
 800fdbc:	4b58      	ldr	r3, [pc, #352]	@ (800ff20 <tx_control+0x2870>)
 800fdbe:	711a      	strb	r2, [r3, #4]
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0x00FF));
 800fdc0:	4b75      	ldr	r3, [pc, #468]	@ (800ff98 <tx_control+0x28e8>)
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	b2da      	uxtb	r2, r3
 800fdc6:	4b56      	ldr	r3, [pc, #344]	@ (800ff20 <tx_control+0x2870>)
 800fdc8:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		bufferWifiTx[6] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8); // ldw		bufferWifiTx+6,X
 800fdca:	4b74      	ldr	r3, [pc, #464]	@ (800ff9c <tx_control+0x28ec>)
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	0a1b      	lsrs	r3, r3, #8
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	4b52      	ldr	r3, [pc, #328]	@ (800ff20 <tx_control+0x2870>)
 800fdd6:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0x00FF));
 800fdd8:	4b70      	ldr	r3, [pc, #448]	@ (800ff9c <tx_control+0x28ec>)
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	b2da      	uxtb	r2, r3
 800fdde:	4b50      	ldr	r3, [pc, #320]	@ (800ff20 <tx_control+0x2870>)
 800fde0:	71da      	strb	r2, [r3, #7]
//		bufferWifiTx[12] = eeLong1;
//		bufferWifiTx[13] = eeLong2;
//		bufferWifiTx[14] = eeLong3;
//		bufferWifiTx[15] = eeLong4;

		bufferWifiTx[8] = findLastValue((uint32_t) &eeLat1);
 800fde2:	4b6f      	ldr	r3, [pc, #444]	@ (800ffa0 <tx_control+0x28f0>)
 800fde4:	0018      	movs	r0, r3
 800fde6:	f7f2 ff19 	bl	8002c1c <findLastValue>
 800fdea:	0003      	movs	r3, r0
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	4b4c      	ldr	r3, [pc, #304]	@ (800ff20 <tx_control+0x2870>)
 800fdf0:	721a      	strb	r2, [r3, #8]
		bufferWifiTx[9] = findLastValue((uint32_t) &eeLat2);
 800fdf2:	4b6c      	ldr	r3, [pc, #432]	@ (800ffa4 <tx_control+0x28f4>)
 800fdf4:	0018      	movs	r0, r3
 800fdf6:	f7f2 ff11 	bl	8002c1c <findLastValue>
 800fdfa:	0003      	movs	r3, r0
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	4b48      	ldr	r3, [pc, #288]	@ (800ff20 <tx_control+0x2870>)
 800fe00:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = findLastValue((uint32_t) &eeLat3);
 800fe02:	4b69      	ldr	r3, [pc, #420]	@ (800ffa8 <tx_control+0x28f8>)
 800fe04:	0018      	movs	r0, r3
 800fe06:	f7f2 ff09 	bl	8002c1c <findLastValue>
 800fe0a:	0003      	movs	r3, r0
 800fe0c:	b2da      	uxtb	r2, r3
 800fe0e:	4b44      	ldr	r3, [pc, #272]	@ (800ff20 <tx_control+0x2870>)
 800fe10:	729a      	strb	r2, [r3, #10]
		bufferWifiTx[11] = findLastValue((uint32_t) &eeLat4);
 800fe12:	4b66      	ldr	r3, [pc, #408]	@ (800ffac <tx_control+0x28fc>)
 800fe14:	0018      	movs	r0, r3
 800fe16:	f7f2 ff01 	bl	8002c1c <findLastValue>
 800fe1a:	0003      	movs	r3, r0
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	4b40      	ldr	r3, [pc, #256]	@ (800ff20 <tx_control+0x2870>)
 800fe20:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = findLastValue((uint32_t) &eeLong1);
 800fe22:	4b63      	ldr	r3, [pc, #396]	@ (800ffb0 <tx_control+0x2900>)
 800fe24:	0018      	movs	r0, r3
 800fe26:	f7f2 fef9 	bl	8002c1c <findLastValue>
 800fe2a:	0003      	movs	r3, r0
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	4b3c      	ldr	r3, [pc, #240]	@ (800ff20 <tx_control+0x2870>)
 800fe30:	731a      	strb	r2, [r3, #12]
		bufferWifiTx[13] = findLastValue((uint32_t) &eeLong2);
 800fe32:	4b60      	ldr	r3, [pc, #384]	@ (800ffb4 <tx_control+0x2904>)
 800fe34:	0018      	movs	r0, r3
 800fe36:	f7f2 fef1 	bl	8002c1c <findLastValue>
 800fe3a:	0003      	movs	r3, r0
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	4b38      	ldr	r3, [pc, #224]	@ (800ff20 <tx_control+0x2870>)
 800fe40:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = findLastValue((uint32_t) &eeLong3);
 800fe42:	4b5d      	ldr	r3, [pc, #372]	@ (800ffb8 <tx_control+0x2908>)
 800fe44:	0018      	movs	r0, r3
 800fe46:	f7f2 fee9 	bl	8002c1c <findLastValue>
 800fe4a:	0003      	movs	r3, r0
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	4b34      	ldr	r3, [pc, #208]	@ (800ff20 <tx_control+0x2870>)
 800fe50:	739a      	strb	r2, [r3, #14]
		bufferWifiTx[15] = findLastValue((uint32_t) &eeLong4);
 800fe52:	4b5a      	ldr	r3, [pc, #360]	@ (800ffbc <tx_control+0x290c>)
 800fe54:	0018      	movs	r0, r3
 800fe56:	f7f2 fee1 	bl	8002c1c <findLastValue>
 800fe5a:	0003      	movs	r3, r0
 800fe5c:	b2da      	uxtb	r2, r3
 800fe5e:	4b30      	ldr	r3, [pc, #192]	@ (800ff20 <tx_control+0x2870>)
 800fe60:	73da      	strb	r2, [r3, #15]


		// ;define inicio, fin y tamaño de bloque de tx
		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 800fe62:	4b36      	ldr	r3, [pc, #216]	@ (800ff3c <tx_control+0x288c>)
 800fe64:	4a2e      	ldr	r2, [pc, #184]	@ (800ff20 <tx_control+0x2870>)
 800fe66:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 800fe68:	4b35      	ldr	r3, [pc, #212]	@ (800ff40 <tx_control+0x2890>)
 800fe6a:	4a2d      	ldr	r2, [pc, #180]	@ (800ff20 <tx_control+0x2870>)
 800fe6c:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+16)
		pointEndTx= &bufferWifiTx[16];	// ldw		pointEndTx,X
 800fe6e:	4b35      	ldr	r3, [pc, #212]	@ (800ff44 <tx_control+0x2894>)
 800fe70:	4a53      	ldr	r2, [pc, #332]	@ (800ffc0 <tx_control+0x2910>)
 800fe72:	601a      	str	r2, [r3, #0]
		blockSizeTX = 16;// mov		blockSizeTX,#16
 800fe74:	4b35      	ldr	r3, [pc, #212]	@ (800ff4c <tx_control+0x289c>)
 800fe76:	2210      	movs	r2, #16
 800fe78:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 800fe7a:	4b35      	ldr	r3, [pc, #212]	@ (800ff50 <tx_control+0x28a0>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 800fe80:	4b34      	ldr	r3, [pc, #208]	@ (800ff54 <tx_control+0x28a4>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 800fe86:	4b32      	ldr	r3, [pc, #200]	@ (800ff50 <tx_control+0x28a0>)
 800fe88:	2201      	movs	r2, #1
 800fe8a:	70da      	strb	r2, [r3, #3]
		keyTx = 0X55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 800fe8c:	4b32      	ldr	r3, [pc, #200]	@ (800ff58 <tx_control+0x28a8>)
 800fe8e:	2255      	movs	r2, #85	@ 0x55
 800fe90:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 800fe92:	4b1b      	ldr	r3, [pc, #108]	@ (800ff00 <tx_control+0x2850>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	701a      	strb	r2, [r3, #0]

//		;Sí el contador no viene en cero continua utilizando los punteros sin iniciarlos
//		ldw		X,cntRegTxWifi
//		tnzw	X
//		jrne	tx_wifi_eventLogger_noInit
		if(cntRegTxWifi)
 800fe98:	4b1d      	ldr	r3, [pc, #116]	@ (800ff10 <tx_control+0x2860>)
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d10b      	bne.n	800feb8 <tx_control+0x2808>

		/*;Establece punteros iniciales y finales del envío de eventos
		; pasa el número de bloques y bytes de datos de tiempo grabados
		; limpia el contador de registros transmitidos
		;	carga timeout en segundos*/
		blockLoggWifi = cntBlockEVENT;// mov		blockLoggWifi,cntBlockEVENT
 800fea0:	4b2e      	ldr	r3, [pc, #184]	@ (800ff5c <tx_control+0x28ac>)
 800fea2:	781a      	ldrb	r2, [r3, #0]
 800fea4:	4b1c      	ldr	r3, [pc, #112]	@ (800ff18 <tx_control+0x2868>)
 800fea6:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = cntByteBlockEVENT;// mov		byteLoggWifi,cntByteBlockEVENT
 800fea8:	4b2e      	ldr	r3, [pc, #184]	@ (800ff64 <tx_control+0x28b4>)
 800feaa:	781a      	ldrb	r2, [r3, #0]
 800feac:	4b1b      	ldr	r3, [pc, #108]	@ (800ff1c <tx_control+0x286c>)
 800feae:	701a      	strb	r2, [r3, #0]
		// clrw	X
		cntRegTxWifi = 0;	// ldw		cntRegTxWifi,X
 800feb0:	4b17      	ldr	r3, [pc, #92]	@ (800ff10 <tx_control+0x2860>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	801a      	strh	r2, [r3, #0]
 800feb6:	e000      	b.n	800feba <tx_control+0x280a>
			goto tx_wifi_eventLogger_noInit;
 800feb8:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_noInit:
		timeoutTxWifi = 3;	// mov		timeoutTxWifi,#3
 800feba:	4b0e      	ldr	r3, [pc, #56]	@ (800fef4 <tx_control+0x2844>)
 800febc:	2203      	movs	r2, #3
 800febe:	701a      	strb	r2, [r3, #0]
		//if(findLastValue((uint32_t)&eeCntRegEVENT)==0){
		//	goto tx_wifi_eventLogger_END;// jreq	tx_wifi_eventLogger_END; / no, finaliza envío de logger de datos
		//}
		//numRegTx = eeCntRegEVENT;// ldw		numRegTx,X
		//numRegTx = findLastValue((uint32_t)&eeCntRegEVENT);
		numRegTx = 1439;
 800fec0:	4b0d      	ldr	r3, [pc, #52]	@ (800fef8 <tx_control+0x2848>)
 800fec2:	4a40      	ldr	r2, [pc, #256]	@ (800ffc4 <tx_control+0x2914>)
 800fec4:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 800fec6:	f000 fdaa 	bl	8010a1e <tx_control+0x336e>
			goto tx_wifi_eventLogger_01;// btjt		flagsWIFI,#f_eventLoggerCmd,tx_wifi_eventLogger_01
 800feca:	46c0      	nop			@ (mov r8, r8)
//;------------------------------------------------------------
//;------------- Validación de respuesta, time out y envío de logger por Registro
tx_wifi_eventLogger_01:
		// ld		A,codeTX
		// cp		A,#$3D
		if(codeTX == 0x3D){
 800fecc:	4b0c      	ldr	r3, [pc, #48]	@ (800ff00 <tx_control+0x2850>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	2b3d      	cmp	r3, #61	@ 0x3d
 800fed2:	d079      	beq.n	800ffc8 <tx_control+0x2918>
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
		}
		codeTX = 0;
 800fed4:	4b0a      	ldr	r3, [pc, #40]	@ (800ff00 <tx_control+0x2850>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	701a      	strb	r2, [r3, #0]
		//; checa timeout
		// tnz		timeoutTxWifi
		if(timeoutTxWifi != 0){
 800feda:	4b06      	ldr	r3, [pc, #24]	@ (800fef4 <tx_control+0x2844>)
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d104      	bne.n	800feec <tx_control+0x283c>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
		}
		flagsWIFI[f_eventLoggerCmd] = 0;// bres	flagsWIFI,#f_eventLoggerCmd
 800fee2:	4b08      	ldr	r3, [pc, #32]	@ (800ff04 <tx_control+0x2854>)
 800fee4:	2200      	movs	r2, #0
 800fee6:	711a      	strb	r2, [r3, #4]

tx_wifi_eventLogger_02:
		goto end_tx_wifi;// jp		end_tx_wifi
 800fee8:	f000 fd99 	bl	8010a1e <tx_control+0x336e>
			goto tx_wifi_eventLogger_02;// jrne	tx_wifi_eventLogger_02
 800feec:	46c0      	nop			@ (mov r8, r8)
		goto end_tx_wifi;// jp		end_tx_wifi
 800feee:	f000 fd96 	bl	8010a1e <tx_control+0x336e>
 800fef2:	46c0      	nop			@ (mov r8, r8)
 800fef4:	20000f7a 	.word	0x20000f7a
 800fef8:	20001038 	.word	0x20001038
 800fefc:	0000053f 	.word	0x0000053f
 800ff00:	20000e24 	.word	0x20000e24
 800ff04:	20000f50 	.word	0x20000f50
 800ff08:	20000f4c 	.word	0x20000f4c
 800ff0c:	200010fc 	.word	0x200010fc
 800ff10:	20000f78 	.word	0x20000f78
 800ff14:	20000f7b 	.word	0x20000f7b
 800ff18:	20000f76 	.word	0x20000f76
 800ff1c:	20000f77 	.word	0x20000f77
 800ff20:	20000f58 	.word	0x20000f58
 800ff24:	0803f07b 	.word	0x0803f07b
 800ff28:	0803f07c 	.word	0x0803f07c
 800ff2c:	20000f66 	.word	0x20000f66
 800ff30:	0803c000 	.word	0x0803c000
 800ff34:	20000b55 	.word	0x20000b55
 800ff38:	20000b54 	.word	0x20000b54
 800ff3c:	20000e14 	.word	0x20000e14
 800ff40:	20000e0c 	.word	0x20000e0c
 800ff44:	20000e10 	.word	0x20000e10
 800ff48:	20000f67 	.word	0x20000f67
 800ff4c:	20000e30 	.word	0x20000e30
 800ff50:	20000e1c 	.word	0x20000e1c
 800ff54:	20000e34 	.word	0x20000e34
 800ff58:	20000e19 	.word	0x20000e19
 800ff5c:	20000daf 	.word	0x20000daf
 800ff60:	20000d9a 	.word	0x20000d9a
 800ff64:	20000dae 	.word	0x20000dae
 800ff68:	20000d9b 	.word	0x20000d9b
 800ff6c:	20000da4 	.word	0x20000da4
 800ff70:	20000d0c 	.word	0x20000d0c
 800ff74:	20000da0 	.word	0x20000da0
 800ff78:	08037000 	.word	0x08037000
 800ff7c:	20000d8c 	.word	0x20000d8c
 800ff80:	20000d90 	.word	0x20000d90
 800ff84:	20000d94 	.word	0x20000d94
 800ff88:	2000103c 	.word	0x2000103c
 800ff8c:	2000103e 	.word	0x2000103e
 800ff90:	20001040 	.word	0x20001040
 800ff94:	0803f812 	.word	0x0803f812
 800ff98:	20000db0 	.word	0x20000db0
 800ff9c:	20000db2 	.word	0x20000db2
 800ffa0:	0803f808 	.word	0x0803f808
 800ffa4:	0803f809 	.word	0x0803f809
 800ffa8:	0803f80a 	.word	0x0803f80a
 800ffac:	0803f80b 	.word	0x0803f80b
 800ffb0:	0803f80c 	.word	0x0803f80c
 800ffb4:	0803f80d 	.word	0x0803f80d
 800ffb8:	0803f80e 	.word	0x0803f80e
 800ffbc:	0803f80f 	.word	0x0803f80f
 800ffc0:	20000f68 	.word	0x20000f68
 800ffc4:	0000059f 	.word	0x0000059f
			goto tx_wifi_eventLogger_03;// jreq	tx_wifi_eventLogger_03
 800ffc8:	46c0      	nop			@ (mov r8, r8)
//		; Mientras exista comunicacion exitosa en este proceso mante timeout cargado
//		ldw		X,#300;
//		ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
//		ldw		X,#300;
//		ldw		timeoutTBLE,X;					/ carga time out de Token (5 min)
		timeoutTWF = 300;
 800ffca:	4bd0      	ldr	r3, [pc, #832]	@ (801030c <tx_control+0x2c5c>)
 800ffcc:	2296      	movs	r2, #150	@ 0x96
 800ffce:	0052      	lsls	r2, r2, #1
 800ffd0:	801a      	strh	r2, [r3, #0]
		timeoutTBLE = 300;
 800ffd2:	4bcf      	ldr	r3, [pc, #828]	@ (8010310 <tx_control+0x2c60>)
 800ffd4:	2296      	movs	r2, #150	@ 0x96
 800ffd6:	0052      	lsls	r2, r2, #1
 800ffd8:	801a      	strh	r2, [r3, #0]
		//;	carga timeout en segundos
		timeoutTxWifi = 3;// mov		timeoutTxWifi,#3
 800ffda:	4bce      	ldr	r3, [pc, #824]	@ (8010314 <tx_control+0x2c64>)
 800ffdc:	2203      	movs	r2, #3
 800ffde:	701a      	strb	r2, [r3, #0]
		//; checa si ya se terminaron de enviar todos los registros del logger
		// ldw		X,numRegTx
		// ldw		resulh,X
		// ldw		X,cntRegTxWifi
		// cpw		X,resulh
		if(numRegTx < cntRegTxWifi){
 800ffe0:	4bcd      	ldr	r3, [pc, #820]	@ (8010318 <tx_control+0x2c68>)
 800ffe2:	881a      	ldrh	r2, [r3, #0]
 800ffe4:	4bcd      	ldr	r3, [pc, #820]	@ (801031c <tx_control+0x2c6c>)
 800ffe6:	881b      	ldrh	r3, [r3, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d314      	bcc.n	8010016 <tx_control+0x2966>
//		cntReg = 0;// ldw		cntReg,X
//		// ldw		X,#eeCntRegEVENT
//		cntRegPNT = &eeCntRegEVENT;// ldw		cntRegPNT,X
//		save_cntReg();// call	save_cntReg

tx_wifi_eventLogger_END:
 800ffec:	46c0      	nop			@ (mov r8, r8)
		//; indica que ya es enviaron todos los paquetes
		//flagsWIFI[f_eventLoggerSend] = 1; 	// bset	flagsWIFI,#f_eventLoggerSend
		flagsWIFI[f_eventLoggerSend] = 0;
 800ffee:	4bcc      	ldr	r3, [pc, #816]	@ (8010320 <tx_control+0x2c70>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	709a      	strb	r2, [r3, #2]
		flagsWIFI[f_eventLoggerCmd] = 0;	// bres	flagsWIFI,#f_eventLoggerCmd; // borra bandera de comando para liberar envío de token
 800fff4:	4bca      	ldr	r3, [pc, #808]	@ (8010320 <tx_control+0x2c70>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	711a      	strb	r2, [r3, #4]
		delayTxLoggWifi = 10;				// mov		delayTxLoggWifi,#10; / carga un retardo para comenzar a envíar el siguiente logger en segundos
 800fffa:	4bca      	ldr	r3, [pc, #808]	@ (8010324 <tx_control+0x2c74>)
 800fffc:	220a      	movs	r2, #10
 800fffe:	701a      	strb	r2, [r3, #0]
		blockLoggWifi = 0;//clr		blockLoggWifi
 8010000:	4bc9      	ldr	r3, [pc, #804]	@ (8010328 <tx_control+0x2c78>)
 8010002:	2200      	movs	r2, #0
 8010004:	701a      	strb	r2, [r3, #0]
		byteLoggWifi = 0;//clr		byteLoggWifi
 8010006:	4bc9      	ldr	r3, [pc, #804]	@ (801032c <tx_control+0x2c7c>)
 8010008:	2200      	movs	r2, #0
 801000a:	701a      	strb	r2, [r3, #0]
		//clrw	X
		cntRegTxWifi = 0;//ldw		cntRegTxWifi,X
 801000c:	4bc3      	ldr	r3, [pc, #780]	@ (801031c <tx_control+0x2c6c>)
 801000e:	2200      	movs	r2, #0
 8010010:	801a      	strh	r2, [r3, #0]

		goto end_tx_wifi;//jp		end_tx_wifi
 8010012:	f000 fd04 	bl	8010a1e <tx_control+0x336e>
			goto tx_wifi_eventLogger_04;// jrult	tx_wifi_eventLogger_04
 8010016:	46c0      	nop			@ (mov r8, r8)
tx_wifi_eventLogger_04:

		//;manda logger registro por registro
		// ldw		X,#$4084
		bufferWifiTx[0] = 0x40;// ldw		bufferWifiTx,X
 8010018:	4bc5      	ldr	r3, [pc, #788]	@ (8010330 <tx_control+0x2c80>)
 801001a:	2240      	movs	r2, #64	@ 0x40
 801001c:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x84;
 801001e:	4bc4      	ldr	r3, [pc, #784]	@ (8010330 <tx_control+0x2c80>)
 8010020:	2284      	movs	r2, #132	@ 0x84
 8010022:	705a      	strb	r2, [r3, #1]
		//; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 8010024:	4bc2      	ldr	r3, [pc, #776]	@ (8010330 <tx_control+0x2c80>)
 8010026:	2203      	movs	r2, #3
 8010028:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
		// ldw		X,eeversion1
		//bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
		//bufferWifiTx[4] = eePlantilla[eeversion2];
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 801002a:	4bc2      	ldr	r3, [pc, #776]	@ (8010334 <tx_control+0x2c84>)
 801002c:	0018      	movs	r0, r3
 801002e:	f7f2 fdf5 	bl	8002c1c <findLastValue>
 8010032:	0003      	movs	r3, r0
 8010034:	b2da      	uxtb	r2, r3
 8010036:	4bbe      	ldr	r3, [pc, #760]	@ (8010330 <tx_control+0x2c80>)
 8010038:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 801003a:	4bbf      	ldr	r3, [pc, #764]	@ (8010338 <tx_control+0x2c88>)
 801003c:	0018      	movs	r0, r3
 801003e:	f7f2 fded 	bl	8002c1c <findLastValue>
 8010042:	0003      	movs	r3, r0
 8010044:	b2da      	uxtb	r2, r3
 8010046:	4bba      	ldr	r3, [pc, #744]	@ (8010330 <tx_control+0x2c80>)
 8010048:	711a      	strb	r2, [r3, #4]
tx_wifi_eventLogger_loadLogger_01:

		//; Si el contador de bytes loggeado viene en cero quiere decir que ya no hay información en el bloque actual de 128 bytes
		//; por lo tanto hay que decrementar el contador de bloques y reubicar el contado de bytes
		// tnz		byteLoggWifi
		if(byteLoggWifi!=0){
 801004a:	4bb8      	ldr	r3, [pc, #736]	@ (801032c <tx_control+0x2c7c>)
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d112      	bne.n	8010078 <tx_control+0x29c8>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
		}
		byteLoggWifi = offsetEventLogg;// mov		byteLoggWifi,#offsetEventLogg
 8010052:	4bb6      	ldr	r3, [pc, #728]	@ (801032c <tx_control+0x2c7c>)
 8010054:	227e      	movs	r2, #126	@ 0x7e
 8010056:	701a      	strb	r2, [r3, #0]
		//; Si el contador de bloques llego a cero, hay que cargar el contador de bloques con su valor maximo
		// tnz		blockLoggWifi
		if(blockLoggWifi!=0){
 8010058:	4bb3      	ldr	r3, [pc, #716]	@ (8010328 <tx_control+0x2c78>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d103      	bne.n	8010068 <tx_control+0x29b8>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
		}
		blockLoggWifi = numBlockEVENT;// mov		blockLoggWifi,#numBlockEVENT
 8010060:	4bb1      	ldr	r3, [pc, #708]	@ (8010328 <tx_control+0x2c78>)
 8010062:	22a0      	movs	r2, #160	@ 0xa0
 8010064:	701a      	strb	r2, [r3, #0]
 8010066:	e000      	b.n	801006a <tx_control+0x29ba>
			goto tx_wifi_eventLogger_loadLogger_02;// jrne	tx_wifi_eventLogger_loadLogger_02
 8010068:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_02:
		blockLoggWifi--;// dec		blockLoggWifi; Ajuste
 801006a:	4baf      	ldr	r3, [pc, #700]	@ (8010328 <tx_control+0x2c78>)
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	3b01      	subs	r3, #1
 8010070:	b2da      	uxtb	r2, r3
 8010072:	4bad      	ldr	r3, [pc, #692]	@ (8010328 <tx_control+0x2c78>)
 8010074:	701a      	strb	r2, [r3, #0]
 8010076:	e000      	b.n	801007a <tx_control+0x29ca>
			goto tx_wifi_eventLogger_loadLogger_03;// jrne	tx_wifi_eventLogger_loadLogger_03
 8010078:	46c0      	nop			@ (mov r8, r8)

tx_wifi_eventLogger_loadLogger_03:

		point_Y = &bufferWifiTx[5 + sizeRegEventLogg];// LDW		Y,#(bufferWifiTx + 5 + sizeRegEventLogg);	/ apunta al buffer de datos en RAM
 801007a:	4bb0      	ldr	r3, [pc, #704]	@ (801033c <tx_control+0x2c8c>)
 801007c:	643b      	str	r3, [r7, #64]	@ 0x40
		mul		X,A;										/ Multiplicalos
		addw	X,#eventLogger;				/	apunta al inicio de la Flash resevada para Logger de eventos + el número de bloques grabados
		clr		resulh
		mov		resull,byteLoggWifi
		addw	X,resulh;							/ suma la posición de bytes*/
		point_X = &eventLogger[byteLoggWifi+128*blockLoggWifi];
 801007e:	4bab      	ldr	r3, [pc, #684]	@ (801032c <tx_control+0x2c7c>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	001a      	movs	r2, r3
 8010084:	4ba8      	ldr	r3, [pc, #672]	@ (8010328 <tx_control+0x2c78>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	01db      	lsls	r3, r3, #7
 801008a:	18d2      	adds	r2, r2, r3
 801008c:	4bac      	ldr	r3, [pc, #688]	@ (8010340 <tx_control+0x2c90>)
 801008e:	18d3      	adds	r3, r2, r3
 8010090:	647b      	str	r3, [r7, #68]	@ 0x44
		wreg = 0;// clr		wreg
 8010092:	4bac      	ldr	r3, [pc, #688]	@ (8010344 <tx_control+0x2c94>)
 8010094:	2200      	movs	r2, #0
 8010096:	701a      	strb	r2, [r3, #0]

tx_wifi_eventLogger_loadLogger_04:
		point_X--;// decw	X;
 8010098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801009a:	3b01      	subs	r3, #1
 801009c:	647b      	str	r3, [r7, #68]	@ 0x44
		point_Y--;// decw	Y;											/ decrementa apuntadores
 801009e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100a0:	3b01      	subs	r3, #1
 80100a2:	643b      	str	r3, [r7, #64]	@ 0x40
		byteLoggWifi--;//dec		byteLoggWifi;						/ al mismo tiempo decrementa el contador de bytes de logger
 80100a4:	4ba1      	ldr	r3, [pc, #644]	@ (801032c <tx_control+0x2c7c>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	b2da      	uxtb	r2, r3
 80100ac:	4b9f      	ldr	r3, [pc, #636]	@ (801032c <tx_control+0x2c7c>)
 80100ae:	701a      	strb	r2, [r3, #0]
		// LDF		A,($010000,X)
		*point_Y = *(point_X+0x010000);// LD		(Y),A;
 80100b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100b2:	2380      	movs	r3, #128	@ 0x80
 80100b4:	025b      	lsls	r3, r3, #9
 80100b6:	5cd2      	ldrb	r2, [r2, r3]
 80100b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100ba:	701a      	strb	r2, [r3, #0]
		wreg++;//inc		wreg
 80100bc:	4ba1      	ldr	r3, [pc, #644]	@ (8010344 <tx_control+0x2c94>)
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	3301      	adds	r3, #1
 80100c2:	b2da      	uxtb	r2, r3
 80100c4:	4b9f      	ldr	r3, [pc, #636]	@ (8010344 <tx_control+0x2c94>)
 80100c6:	701a      	strb	r2, [r3, #0]
		// ld		A,wreg
		// cp		A,#sizeRegEventLogg
		if(wreg<sizeRegEventLogg){
 80100c8:	4b9e      	ldr	r3, [pc, #632]	@ (8010344 <tx_control+0x2c94>)
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	2b0d      	cmp	r3, #13
 80100ce:	d800      	bhi.n	80100d2 <tx_control+0x2a22>
			goto tx_wifi_eventLogger_loadLogger_04;// jrult tx_wifi_eventLogger_loadLogger_04
 80100d0:	e7e2      	b.n	8010098 <tx_control+0x29e8>
		}

		//;Ajuste del dato de voltaje
		waux = bufferWifiTx[18];// mov		waux,bufferWifiTx+18
 80100d2:	4b97      	ldr	r3, [pc, #604]	@ (8010330 <tx_control+0x2c80>)
 80100d4:	7c9a      	ldrb	r2, [r3, #18]
 80100d6:	4b9c      	ldr	r3, [pc, #624]	@ (8010348 <tx_control+0x2c98>)
 80100d8:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0;// clr		bufferWifiTx+18
 80100da:	4b95      	ldr	r3, [pc, #596]	@ (8010330 <tx_control+0x2c80>)
 80100dc:	2200      	movs	r2, #0
 80100de:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux;// mov		bufferWifiTx+19,waux
 80100e0:	4b99      	ldr	r3, [pc, #612]	@ (8010348 <tx_control+0x2c98>)
 80100e2:	781a      	ldrb	r2, [r3, #0]
 80100e4:	4b92      	ldr	r3, [pc, #584]	@ (8010330 <tx_control+0x2c80>)
 80100e6:	74da      	strb	r2, [r3, #19]
		//;define inicio, fin y tamaño de bloque de tx

		// incrementa el contador de registros enviados


		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 80100e8:	4b98      	ldr	r3, [pc, #608]	@ (801034c <tx_control+0x2c9c>)
 80100ea:	4a91      	ldr	r2, [pc, #580]	@ (8010330 <tx_control+0x2c80>)
 80100ec:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80100ee:	4b98      	ldr	r3, [pc, #608]	@ (8010350 <tx_control+0x2ca0>)
 80100f0:	4a8f      	ldr	r2, [pc, #572]	@ (8010330 <tx_control+0x2c80>)
 80100f2:	601a      	str	r2, [r3, #0]
				// ldw		X,#(bufferWifiTx+20)
		pointEndTx= &bufferWifiTx[20];	// ldw		pointEndTx,X
 80100f4:	4b97      	ldr	r3, [pc, #604]	@ (8010354 <tx_control+0x2ca4>)
 80100f6:	4a98      	ldr	r2, [pc, #608]	@ (8010358 <tx_control+0x2ca8>)
 80100f8:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;// mov		blockSizeTX,#20
 80100fa:	4b98      	ldr	r3, [pc, #608]	@ (801035c <tx_control+0x2cac>)
 80100fc:	2214      	movs	r2, #20
 80100fe:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010100:	4b97      	ldr	r3, [pc, #604]	@ (8010360 <tx_control+0x2cb0>)
 8010102:	2200      	movs	r2, #0
 8010104:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW = 0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 8010106:	4b97      	ldr	r3, [pc, #604]	@ (8010364 <tx_control+0x2cb4>)
 8010108:	2200      	movs	r2, #0
 801010a:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 801010c:	4b94      	ldr	r3, [pc, #592]	@ (8010360 <tx_control+0x2cb0>)
 801010e:	2201      	movs	r2, #1
 8010110:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; 	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010112:	4b95      	ldr	r3, [pc, #596]	@ (8010368 <tx_control+0x2cb8>)
 8010114:	2255      	movs	r2, #85	@ 0x55
 8010116:	701a      	strb	r2, [r3, #0]
		codeTX = 0;//	clr		codeTX;								/ limpia código de Tx
 8010118:	4b94      	ldr	r3, [pc, #592]	@ (801036c <tx_control+0x2cbc>)
 801011a:	2200      	movs	r2, #0
 801011c:	701a      	strb	r2, [r3, #0]

		// ldw		X,cntRegTxWifi
		// incw	X

		cntRegTxWifi++;// ldw		cntRegTxWifi,X
 801011e:	4b7f      	ldr	r3, [pc, #508]	@ (801031c <tx_control+0x2c6c>)
 8010120:	881b      	ldrh	r3, [r3, #0]
 8010122:	3301      	adds	r3, #1
 8010124:	b29a      	uxth	r2, r3
 8010126:	4b7d      	ldr	r3, [pc, #500]	@ (801031c <tx_control+0x2c6c>)
 8010128:	801a      	strh	r2, [r3, #0]
		goto end_tx_wifi; // jp			end_tx_wifi
 801012a:	f000 fc78 	bl	8010a1e <tx_control+0x336e>
		goto tx_wifi_eventData;// jp			tx_wifi_eventData
 801012e:	46c0      	nop			@ (mov r8, r8)

//;------------------------------------------------------------
//;------------- Espera retardo para comenzar con rutina Tx logger eventos
//;Verifica si ya se consumio el retardo para comenzar la transmisión
		// tnz		delayTxLoggWifi
		if(delayTxLoggWifi == 0){
 8010130:	4b7c      	ldr	r3, [pc, #496]	@ (8010324 <tx_control+0x2c74>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <tx_control+0x2a8c>
 8010138:	f000 fc6a 	bl	8010a10 <tx_control+0x3360>
			goto tx_wifi_eventData_01;// jreq	tx_wifi_eventData_01
 801013c:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi
tx_wifi_eventData_01:

		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx!=0){
 801013e:	4b8a      	ldr	r3, [pc, #552]	@ (8010368 <tx_control+0x2cb8>)
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d001      	beq.n	801014a <tx_control+0x2a9a>
 8010146:	f000 fc66 	bl	8010a16 <tx_control+0x3366>
		}

//;----------------------------------------------------------
//;										Evento de apertura de puerta
//;----------------------------------------------------------
door_event_WF:
 801014a:	46c0      	nop			@ (mov r8, r8)

		if(flagsEventWF[0]){
 801014c:	4b88      	ldr	r3, [pc, #544]	@ (8010370 <tx_control+0x2cc0>)
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d14d      	bne.n	80101f0 <tx_control+0x2b40>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
		}
ask_DE_start_WF:
 8010154:	46c0      	nop			@ (mov r8, r8)
		if(flagsC[0]){
 8010156:	4b87      	ldr	r3, [pc, #540]	@ (8010374 <tx_control+0x2cc4>)
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d100      	bne.n	8010160 <tx_control+0x2ab0>
 801015e:	e085      	b.n	801026c <tx_control+0x2bbc>
			goto ask_DE_start_01_WF;// btjt	flagsC,#0,ask_DE_start_01_WF; / hay puerta abierta ? Sí, captura inicio de evento
 8010160:	46c0      	nop			@ (mov r8, r8)
		}
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
ask_DE_start_01_WF:
		// ldw		X,#$4082
		BloqEventPuerta[comandoEP_2] = 0x40;// ldw		comandoEP,X
 8010162:	4b85      	ldr	r3, [pc, #532]	@ (8010378 <tx_control+0x2cc8>)
 8010164:	2240      	movs	r2, #64	@ 0x40
 8010166:	701a      	strb	r2, [r3, #0]
		BloqEventPuerta[comandoEP_1] = 0x82;
 8010168:	4b83      	ldr	r3, [pc, #524]	@ (8010378 <tx_control+0x2cc8>)
 801016a:	2282      	movs	r2, #130	@ 0x82
 801016c:	705a      	strb	r2, [r3, #1]
		//BloqEventPuerta[softVersion1EP] = eePlantilla[eeversion1];// mov		softVersion1EP,eeversion1
		//BloqEventPuerta[softVersion2EP] = eePlantilla[eeversion2];
		BloqEventPuerta[softVersion1EP] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 801016e:	4b71      	ldr	r3, [pc, #452]	@ (8010334 <tx_control+0x2c84>)
 8010170:	0018      	movs	r0, r3
 8010172:	f7f2 fd53 	bl	8002c1c <findLastValue>
 8010176:	0003      	movs	r3, r0
 8010178:	b2da      	uxtb	r2, r3
 801017a:	4b7f      	ldr	r3, [pc, #508]	@ (8010378 <tx_control+0x2cc8>)
 801017c:	709a      	strb	r2, [r3, #2]
		BloqEventPuerta[softVersion2EP] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 801017e:	4b6e      	ldr	r3, [pc, #440]	@ (8010338 <tx_control+0x2c88>)
 8010180:	0018      	movs	r0, r3
 8010182:	f7f2 fd4b 	bl	8002c1c <findLastValue>
 8010186:	0003      	movs	r3, r0
 8010188:	b2da      	uxtb	r2, r3
 801018a:	4b7b      	ldr	r3, [pc, #492]	@ (8010378 <tx_control+0x2cc8>)
 801018c:	70da      	strb	r2, [r3, #3]
		// mov		softVersion2EP,eeversion2

		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00) >> 8);// ldw		EP_timeInit_HW,X
 801018e:	4b7b      	ldr	r3, [pc, #492]	@ (801037c <tx_control+0x2ccc>)
 8010190:	881b      	ldrh	r3, [r3, #0]
 8010192:	0a1b      	lsrs	r3, r3, #8
 8010194:	b29b      	uxth	r3, r3
 8010196:	b2da      	uxtb	r2, r3
 8010198:	4b77      	ldr	r3, [pc, #476]	@ (8010378 <tx_control+0x2cc8>)
 801019a:	711a      	strb	r2, [r3, #4]
		BloqEventPuerta[EP_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 801019c:	4b77      	ldr	r3, [pc, #476]	@ (801037c <tx_control+0x2ccc>)
 801019e:	881b      	ldrh	r3, [r3, #0]
 80101a0:	b2da      	uxtb	r2, r3
 80101a2:	4b75      	ldr	r3, [pc, #468]	@ (8010378 <tx_control+0x2cc8>)
 80101a4:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventPuerta[EP_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00) >> 8);// ldw		EP_timeInit_LW,X;				/ guarda el tiempo de inicio
 80101a6:	4b76      	ldr	r3, [pc, #472]	@ (8010380 <tx_control+0x2cd0>)
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	0a1b      	lsrs	r3, r3, #8
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	4b71      	ldr	r3, [pc, #452]	@ (8010378 <tx_control+0x2cc8>)
 80101b2:	719a      	strb	r2, [r3, #6]
		BloqEventPuerta[EP_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 80101b4:	4b72      	ldr	r3, [pc, #456]	@ (8010380 <tx_control+0x2cd0>)
 80101b6:	881b      	ldrh	r3, [r3, #0]
 80101b8:	b2da      	uxtb	r2, r3
 80101ba:	4b6f      	ldr	r3, [pc, #444]	@ (8010378 <tx_control+0x2cc8>)
 80101bc:	71da      	strb	r2, [r3, #7]

		BloqEventPuerta[EP_eventType] = 1; // mov		EP_eventType,#1;				/ carga el tipo de evento (1 para puerta)
 80101be:	4b6e      	ldr	r3, [pc, #440]	@ (8010378 <tx_control+0x2cc8>)
 80101c0:	2201      	movs	r2, #1
 80101c2:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		BloqEventPuerta[EP_tempAmbInit_H] = tdevl;//ldw		EP_tempAmbInit,x;				/ carga temperatura ambiente
 80101c4:	4b6f      	ldr	r3, [pc, #444]	@ (8010384 <tx_control+0x2cd4>)
 80101c6:	781a      	ldrb	r2, [r3, #0]
 80101c8:	4b6b      	ldr	r3, [pc, #428]	@ (8010378 <tx_control+0x2cc8>)
 80101ca:	735a      	strb	r2, [r3, #13]
		BloqEventPuerta[EP_tempAmbInit_L] = tdevf;
 80101cc:	4b6e      	ldr	r3, [pc, #440]	@ (8010388 <tx_control+0x2cd8>)
 80101ce:	781a      	ldrb	r2, [r3, #0]
 80101d0:	4b69      	ldr	r3, [pc, #420]	@ (8010378 <tx_control+0x2cc8>)
 80101d2:	739a      	strb	r2, [r3, #14]
		BloqEventPuerta[EP_voltInit] = voltl;		// mov		EP_voltInit,voltl; /carga voltaje
 80101d4:	4b6d      	ldr	r3, [pc, #436]	@ (801038c <tx_control+0x2cdc>)
 80101d6:	781a      	ldrb	r2, [r3, #0]
 80101d8:	4b67      	ldr	r3, [pc, #412]	@ (8010378 <tx_control+0x2cc8>)
 80101da:	745a      	strb	r2, [r3, #17]
		flagsEventWF[0] = 1;						// bset	flagsEventWF,#0;					/ indica quie el evento puerta ya inició
 80101dc:	4b64      	ldr	r3, [pc, #400]	@ (8010370 <tx_control+0x2cc0>)
 80101de:	2201      	movs	r2, #1
 80101e0:	701a      	strb	r2, [r3, #0]
		// ld		A,#0;
		// ld		xh,A
		// ld		A,tmDoorEvent;					/ carga el tiempo de puerta abierta necesario para considerarlo evento
		// ld		xl,A
		temp_doorEvent = Plantilla[tmDoorEvent];// ldw		temp_doorEvent,X;				/ carga tiempo de duración minima de evento puerta abierta
 80101e2:	4b6b      	ldr	r3, [pc, #428]	@ (8010390 <tx_control+0x2ce0>)
 80101e4:	2250      	movs	r2, #80	@ 0x50
 80101e6:	5c9b      	ldrb	r3, [r3, r2]
 80101e8:	001a      	movs	r2, r3
 80101ea:	4b6a      	ldr	r3, [pc, #424]	@ (8010394 <tx_control+0x2ce4>)
 80101ec:	801a      	strh	r2, [r3, #0]
		goto comp_event_WF;// jp		comp_event_WF;							/ continúa
 80101ee:	e040      	b.n	8010272 <tx_control+0x2bc2>
			goto ask_DE_end_WF;// btjt	flagsEventWF,#0,ask_DE_end_WF;	/ ya había iniciado evento puerta? Sí, checa si ya se termina evento
 80101f0:	46c0      	nop			@ (mov r8, r8)
ask_DE_end_WF:
		if(flagsC[0]){
 80101f2:	4b60      	ldr	r3, [pc, #384]	@ (8010374 <tx_control+0x2cc4>)
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d13a      	bne.n	8010270 <tx_control+0x2bc0>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
		}
		// ldw		X,temp_doorEvent
		// tnzw	X;											/ se cumplió el tiempo minimo de puerta abierta ?
		if(temp_doorEvent==0){
 80101fa:	4b66      	ldr	r3, [pc, #408]	@ (8010394 <tx_control+0x2ce4>)
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d003      	beq.n	801020a <tx_control+0x2b5a>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
		}
		flagsEventWF[0] = 0;// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 8010202:	4b5b      	ldr	r3, [pc, #364]	@ (8010370 <tx_control+0x2cc0>)
 8010204:	2200      	movs	r2, #0
 8010206:	701a      	strb	r2, [r3, #0]
		goto comp_event_WF;// jra		comp_event_WF;							/ continúa sin grabar evento
 8010208:	e033      	b.n	8010272 <tx_control+0x2bc2>
			goto door_event_end_WF;//jreq	door_event_end_WF;					/ sí, ve a finalizar el evento
 801020a:	46c0      	nop			@ (mov r8, r8)
door_event_end_WF:
		// ldw		X,timeSeconds_HW
		BloqEventPuerta[EP_timeEnd_4]=(uint8_t) ((timeSeconds_HW & 0xFF00)>>8);// ldw		EP_timeEnd_HW,X
 801020c:	4b5b      	ldr	r3, [pc, #364]	@ (801037c <tx_control+0x2ccc>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	0a1b      	lsrs	r3, r3, #8
 8010212:	b29b      	uxth	r3, r3
 8010214:	b2da      	uxtb	r2, r3
 8010216:	4b58      	ldr	r3, [pc, #352]	@ (8010378 <tx_control+0x2cc8>)
 8010218:	721a      	strb	r2, [r3, #8]
		BloqEventPuerta[EP_timeEnd_3]=(uint8_t) (timeSeconds_HW & 0xFF);
 801021a:	4b58      	ldr	r3, [pc, #352]	@ (801037c <tx_control+0x2ccc>)
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	b2da      	uxtb	r2, r3
 8010220:	4b55      	ldr	r3, [pc, #340]	@ (8010378 <tx_control+0x2cc8>)
 8010222:	725a      	strb	r2, [r3, #9]
		BloqEventPuerta[EP_timeEnd_2]=(uint8_t) ((timeSeconds_LW & 0xFF00)>>8);// ldw		X,timeSeconds_LW
 8010224:	4b56      	ldr	r3, [pc, #344]	@ (8010380 <tx_control+0x2cd0>)
 8010226:	881b      	ldrh	r3, [r3, #0]
 8010228:	0a1b      	lsrs	r3, r3, #8
 801022a:	b29b      	uxth	r3, r3
 801022c:	b2da      	uxtb	r2, r3
 801022e:	4b52      	ldr	r3, [pc, #328]	@ (8010378 <tx_control+0x2cc8>)
 8010230:	729a      	strb	r2, [r3, #10]
		BloqEventPuerta[EP_timeEnd_1]=(uint8_t) (timeSeconds_LW & 0xFF);// ldw		EP_timeEnd_LW,X;				/ guarda el tiempo final
 8010232:	4b53      	ldr	r3, [pc, #332]	@ (8010380 <tx_control+0x2cd0>)
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	b2da      	uxtb	r2, r3
 8010238:	4b4f      	ldr	r3, [pc, #316]	@ (8010378 <tx_control+0x2cc8>)
 801023a:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		BloqEventPuerta[EP_tempEvaEnd_H]= teval;// ldw		EP_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
 801023c:	4b56      	ldr	r3, [pc, #344]	@ (8010398 <tx_control+0x2ce8>)
 801023e:	781a      	ldrb	r2, [r3, #0]
 8010240:	4b4d      	ldr	r3, [pc, #308]	@ (8010378 <tx_control+0x2cc8>)
 8010242:	73da      	strb	r2, [r3, #15]
		BloqEventPuerta[EP_tempEvaEnd_L]= tevaf;
 8010244:	4b55      	ldr	r3, [pc, #340]	@ (801039c <tx_control+0x2cec>)
 8010246:	781a      	ldrb	r2, [r3, #0]
 8010248:	4b4b      	ldr	r3, [pc, #300]	@ (8010378 <tx_control+0x2cc8>)
 801024a:	741a      	strb	r2, [r3, #16]
		flagsEventWF[0]= 0;		// bres	flagsEventWF,#0;					/ borra inicio de evento puerta
 801024c:	4b48      	ldr	r3, [pc, #288]	@ (8010370 <tx_control+0x2cc0>)
 801024e:	2200      	movs	r2, #0
 8010250:	701a      	strb	r2, [r3, #0]
		// ldw		X,#comandoEP
		pointTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointTx,X
 8010252:	4b3e      	ldr	r3, [pc, #248]	@ (801034c <tx_control+0x2c9c>)
 8010254:	4a52      	ldr	r2, [pc, #328]	@ (80103a0 <tx_control+0x2cf0>)
 8010256:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];// ldw		pointInitTx,X
 8010258:	4b3d      	ldr	r3, [pc, #244]	@ (8010350 <tx_control+0x2ca0>)
 801025a:	4a51      	ldr	r2, [pc, #324]	@ (80103a0 <tx_control+0x2cf0>)
 801025c:	601a      	str	r2, [r3, #0]
		// ldw		X,#EP_voltInit
		pointEndTx = &BloqEventPwrOn[EP_voltInit];// ldw		pointEndTx,X
 801025e:	4b3d      	ldr	r3, [pc, #244]	@ (8010354 <tx_control+0x2ca4>)
 8010260:	4a50      	ldr	r2, [pc, #320]	@ (80103a4 <tx_control+0x2cf4>)
 8010262:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;// mov		blockSizeTX,#18
 8010264:	4b3d      	ldr	r3, [pc, #244]	@ (801035c <tx_control+0x2cac>)
 8010266:	2212      	movs	r2, #18
 8010268:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 801026a:	e1d0      	b.n	801060e <tx_control+0x2f5e>
		goto comp_event_WF;// jp		comp_event_WF;							/ No, checa el evento de compresor
 801026c:	46c0      	nop			@ (mov r8, r8)
 801026e:	e000      	b.n	8010272 <tx_control+0x2bc2>
			goto comp_event_WF;// btjt	flagsC,#0,comp_event_WF;	 	/ ya se cerró la puerta ?
 8010270:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de encendido de compresor
// ;----------------------------------------------------------
comp_event_WF:

		if(flagsEventWF[1]){
 8010272:	4b3f      	ldr	r3, [pc, #252]	@ (8010370 <tx_control+0x2cc0>)
 8010274:	785b      	ldrb	r3, [r3, #1]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d000      	beq.n	801027c <tx_control+0x2bcc>
 801027a:	e099      	b.n	80103b0 <tx_control+0x2d00>
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
		}

ask_CE_start_WF:
 801027c:	46c0      	nop			@ (mov r8, r8)
		if(GPIOR0[0]){
 801027e:	4b4a      	ldr	r3, [pc, #296]	@ (80103a8 <tx_control+0x2cf8>)
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d100      	bne.n	8010288 <tx_control+0x2bd8>
 8010286:	e0c9      	b.n	801041c <tx_control+0x2d6c>
			goto ask_CE_start_01_WF;	// btjt	GPIOR0,#0,ask_CE_start_01_WF; / compresor encendido ? Sí, captura inicio de evento
 8010288:	46c0      	nop			@ (mov r8, r8)
		}
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
ask_CE_start_01_WF:
		// ldw		X,#$4082
		BloqEventComp[comandoEC_2] = 0x40;// ldw		comandoEC,X
 801028a:	4b48      	ldr	r3, [pc, #288]	@ (80103ac <tx_control+0x2cfc>)
 801028c:	2240      	movs	r2, #64	@ 0x40
 801028e:	701a      	strb	r2, [r3, #0]
		BloqEventComp[comandoEC_1] = 0x82;
 8010290:	4b46      	ldr	r3, [pc, #280]	@ (80103ac <tx_control+0x2cfc>)
 8010292:	2282      	movs	r2, #130	@ 0x82
 8010294:	705a      	strb	r2, [r3, #1]
//		BloqEventComp[softVersion1EC] = eePlantilla[eeversion1];// mov		softVersion1EC,eeversion1
//		BloqEventComp[softVersion2EC] = eePlantilla[eeversion2];// mov		softVersion2EC,eeversion2
		BloqEventComp[softVersion1EC] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 8010296:	4b27      	ldr	r3, [pc, #156]	@ (8010334 <tx_control+0x2c84>)
 8010298:	0018      	movs	r0, r3
 801029a:	f7f2 fcbf 	bl	8002c1c <findLastValue>
 801029e:	0003      	movs	r3, r0
 80102a0:	b2da      	uxtb	r2, r3
 80102a2:	4b42      	ldr	r3, [pc, #264]	@ (80103ac <tx_control+0x2cfc>)
 80102a4:	709a      	strb	r2, [r3, #2]
		BloqEventComp[softVersion2EC] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 80102a6:	4b24      	ldr	r3, [pc, #144]	@ (8010338 <tx_control+0x2c88>)
 80102a8:	0018      	movs	r0, r3
 80102aa:	f7f2 fcb7 	bl	8002c1c <findLastValue>
 80102ae:	0003      	movs	r3, r0
 80102b0:	b2da      	uxtb	r2, r3
 80102b2:	4b3e      	ldr	r3, [pc, #248]	@ (80103ac <tx_control+0x2cfc>)
 80102b4:	70da      	strb	r2, [r3, #3]

		// ldw		X,timeSeconds_HW
		// ldw		EC_timeInit_HW,X
		BloqEventComp[EC_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 80102b6:	4b31      	ldr	r3, [pc, #196]	@ (801037c <tx_control+0x2ccc>)
 80102b8:	881b      	ldrh	r3, [r3, #0]
 80102ba:	0a1b      	lsrs	r3, r3, #8
 80102bc:	b29b      	uxth	r3, r3
 80102be:	b2da      	uxtb	r2, r3
 80102c0:	4b3a      	ldr	r3, [pc, #232]	@ (80103ac <tx_control+0x2cfc>)
 80102c2:	711a      	strb	r2, [r3, #4]
		BloqEventComp[EC_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 80102c4:	4b2d      	ldr	r3, [pc, #180]	@ (801037c <tx_control+0x2ccc>)
 80102c6:	881b      	ldrh	r3, [r3, #0]
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	4b38      	ldr	r3, [pc, #224]	@ (80103ac <tx_control+0x2cfc>)
 80102cc:	715a      	strb	r2, [r3, #5]
		// ldw		X,timeSeconds_LW
		BloqEventComp[EC_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);// ldw		EC_timeInit_LW,X;				/ guarda el tiempo de inicio
 80102ce:	4b2c      	ldr	r3, [pc, #176]	@ (8010380 <tx_control+0x2cd0>)
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	0a1b      	lsrs	r3, r3, #8
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	b2da      	uxtb	r2, r3
 80102d8:	4b34      	ldr	r3, [pc, #208]	@ (80103ac <tx_control+0x2cfc>)
 80102da:	719a      	strb	r2, [r3, #6]
		BloqEventComp[EC_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 80102dc:	4b28      	ldr	r3, [pc, #160]	@ (8010380 <tx_control+0x2cd0>)
 80102de:	881b      	ldrh	r3, [r3, #0]
 80102e0:	b2da      	uxtb	r2, r3
 80102e2:	4b32      	ldr	r3, [pc, #200]	@ (80103ac <tx_control+0x2cfc>)
 80102e4:	71da      	strb	r2, [r3, #7]

		BloqEventComp[EC_eventType] = 2;// mov		EC_eventType,#2;				/ carga el tipo de evento (2 para compresor)
 80102e6:	4b31      	ldr	r3, [pc, #196]	@ (80103ac <tx_control+0x2cfc>)
 80102e8:	2202      	movs	r2, #2
 80102ea:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		BloqEventComp[EC_tempAmbInit_H] = tdevl; // ldw		EC_tempAmbInit,x;				/ carga temperatura ambiente
 80102ec:	4b25      	ldr	r3, [pc, #148]	@ (8010384 <tx_control+0x2cd4>)
 80102ee:	781a      	ldrb	r2, [r3, #0]
 80102f0:	4b2e      	ldr	r3, [pc, #184]	@ (80103ac <tx_control+0x2cfc>)
 80102f2:	735a      	strb	r2, [r3, #13]
		BloqEventComp[EC_tempAmbInit_L] = tdevf;
 80102f4:	4b24      	ldr	r3, [pc, #144]	@ (8010388 <tx_control+0x2cd8>)
 80102f6:	781a      	ldrb	r2, [r3, #0]
 80102f8:	4b2c      	ldr	r3, [pc, #176]	@ (80103ac <tx_control+0x2cfc>)
 80102fa:	739a      	strb	r2, [r3, #14]
		BloqEventComp[EC_voltInit] = voltl;// mov		EC_voltInit,voltl; 			/carga voltaje
 80102fc:	4b23      	ldr	r3, [pc, #140]	@ (801038c <tx_control+0x2cdc>)
 80102fe:	781a      	ldrb	r2, [r3, #0]
 8010300:	4b2a      	ldr	r3, [pc, #168]	@ (80103ac <tx_control+0x2cfc>)
 8010302:	745a      	strb	r2, [r3, #17]
		flagsEventWF[1] = 1;// bset	flagsEventWF,#1;					/ indica que el evento compresor ya inició
 8010304:	4b1a      	ldr	r3, [pc, #104]	@ (8010370 <tx_control+0x2cc0>)
 8010306:	2201      	movs	r2, #1
 8010308:	705a      	strb	r2, [r3, #1]
		goto desh_event_WF;	// jp		desh_event_WF;							/ continúa
 801030a:	e08a      	b.n	8010422 <tx_control+0x2d72>
 801030c:	20000f4c 	.word	0x20000f4c
 8010310:	200010fc 	.word	0x200010fc
 8010314:	20000f7a 	.word	0x20000f7a
 8010318:	20001038 	.word	0x20001038
 801031c:	20000f78 	.word	0x20000f78
 8010320:	20000f50 	.word	0x20000f50
 8010324:	20000f7b 	.word	0x20000f7b
 8010328:	20000f76 	.word	0x20000f76
 801032c:	20000f77 	.word	0x20000f77
 8010330:	20000f58 	.word	0x20000f58
 8010334:	0803f07b 	.word	0x0803f07b
 8010338:	0803f07c 	.word	0x0803f07c
 801033c:	20000f6b 	.word	0x20000f6b
 8010340:	08037000 	.word	0x08037000
 8010344:	20000b55 	.word	0x20000b55
 8010348:	20000b54 	.word	0x20000b54
 801034c:	20000e14 	.word	0x20000e14
 8010350:	20000e0c 	.word	0x20000e0c
 8010354:	20000e10 	.word	0x20000e10
 8010358:	20000f6c 	.word	0x20000f6c
 801035c:	20000e30 	.word	0x20000e30
 8010360:	20000e1c 	.word	0x20000e1c
 8010364:	20000e34 	.word	0x20000e34
 8010368:	20000e19 	.word	0x20000e19
 801036c:	20000e24 	.word	0x20000e24
 8010370:	20000f3c 	.word	0x20000f3c
 8010374:	20000c3c 	.word	0x20000c3c
 8010378:	20000eec 	.word	0x20000eec
 801037c:	20000db0 	.word	0x20000db0
 8010380:	20000db2 	.word	0x20000db2
 8010384:	20000bb0 	.word	0x20000bb0
 8010388:	20000bb1 	.word	0x20000bb1
 801038c:	20000bce 	.word	0x20000bce
 8010390:	200000b8 	.word	0x200000b8
 8010394:	20000ed8 	.word	0x20000ed8
 8010398:	20000bb2 	.word	0x20000bb2
 801039c:	20000bb3 	.word	0x20000bb3
 80103a0:	20000f28 	.word	0x20000f28
 80103a4:	20000f39 	.word	0x20000f39
 80103a8:	20000ba4 	.word	0x20000ba4
 80103ac:	20000f00 	.word	0x20000f00
			goto ask_CE_end_WF;// btjt	flagsEventWF,#1,ask_CE_end_WF;	/ ya había iniciado evento compresor? Sí, checa si ya se termina evento
 80103b0:	46c0      	nop			@ (mov r8, r8)
ask_CE_end_WF:
		if(GPIOR0[0]){
 80103b2:	4be4      	ldr	r3, [pc, #912]	@ (8010744 <tx_control+0x3094>)
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d132      	bne.n	8010420 <tx_control+0x2d70>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
		}
comp_event_end_WF:
 80103ba:	46c0      	nop			@ (mov r8, r8)
		// ldw		X,timeSeconds_HW
		// ldw		EC_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EC_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventComp[EC_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 80103bc:	4be2      	ldr	r3, [pc, #904]	@ (8010748 <tx_control+0x3098>)
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	0a1b      	lsrs	r3, r3, #8
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	4be1      	ldr	r3, [pc, #900]	@ (801074c <tx_control+0x309c>)
 80103c8:	721a      	strb	r2, [r3, #8]
		BloqEventComp[EC_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 80103ca:	4bdf      	ldr	r3, [pc, #892]	@ (8010748 <tx_control+0x3098>)
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	b2da      	uxtb	r2, r3
 80103d0:	4bde      	ldr	r3, [pc, #888]	@ (801074c <tx_control+0x309c>)
 80103d2:	725a      	strb	r2, [r3, #9]
		BloqEventComp[EC_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 80103d4:	4bde      	ldr	r3, [pc, #888]	@ (8010750 <tx_control+0x30a0>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	0a1b      	lsrs	r3, r3, #8
 80103da:	b29b      	uxth	r3, r3
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	4bdb      	ldr	r3, [pc, #876]	@ (801074c <tx_control+0x309c>)
 80103e0:	729a      	strb	r2, [r3, #10]
		BloqEventComp[EC_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 80103e2:	4bdb      	ldr	r3, [pc, #876]	@ (8010750 <tx_control+0x30a0>)
 80103e4:	881b      	ldrh	r3, [r3, #0]
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	4bd8      	ldr	r3, [pc, #864]	@ (801074c <tx_control+0x309c>)
 80103ea:	72da      	strb	r2, [r3, #11]

		// ldw		X,teval
		// ldw		EC_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventComp[EC_tempEvaEnd_H] = teval;
 80103ec:	4bd9      	ldr	r3, [pc, #868]	@ (8010754 <tx_control+0x30a4>)
 80103ee:	781a      	ldrb	r2, [r3, #0]
 80103f0:	4bd6      	ldr	r3, [pc, #856]	@ (801074c <tx_control+0x309c>)
 80103f2:	73da      	strb	r2, [r3, #15]
		BloqEventComp[EC_tempEvaEnd_L] = tevaf;
 80103f4:	4bd8      	ldr	r3, [pc, #864]	@ (8010758 <tx_control+0x30a8>)
 80103f6:	781a      	ldrb	r2, [r3, #0]
 80103f8:	4bd4      	ldr	r3, [pc, #848]	@ (801074c <tx_control+0x309c>)
 80103fa:	741a      	strb	r2, [r3, #16]

		flagsEventWF[1] = 0;		// bres	flagsEventWF,#1;					/ borra inicio de evento compresor
 80103fc:	4bd7      	ldr	r3, [pc, #860]	@ (801075c <tx_control+0x30ac>)
 80103fe:	2200      	movs	r2, #0
 8010400:	705a      	strb	r2, [r3, #1]
		// ldw		pointInitTx,X
		// ldw		X,#EC_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventComp[comandoEC_2];
 8010402:	4bd7      	ldr	r3, [pc, #860]	@ (8010760 <tx_control+0x30b0>)
 8010404:	4ad1      	ldr	r2, [pc, #836]	@ (801074c <tx_control+0x309c>)
 8010406:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventComp[comandoEC_2];
 8010408:	4bd6      	ldr	r3, [pc, #856]	@ (8010764 <tx_control+0x30b4>)
 801040a:	4ad0      	ldr	r2, [pc, #832]	@ (801074c <tx_control+0x309c>)
 801040c:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventComp[EC_voltInit];
 801040e:	4bd6      	ldr	r3, [pc, #856]	@ (8010768 <tx_control+0x30b8>)
 8010410:	4ad6      	ldr	r2, [pc, #856]	@ (801076c <tx_control+0x30bc>)
 8010412:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 8010414:	4bd6      	ldr	r3, [pc, #856]	@ (8010770 <tx_control+0x30c0>)
 8010416:	2212      	movs	r2, #18
 8010418:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent; //jp		tx_wifiEvent
 801041a:	e0f8      	b.n	801060e <tx_control+0x2f5e>
		goto desh_event_WF;				//jp		desh_event_WF;							/ No, checa el evento de deshielo
 801041c:	46c0      	nop			@ (mov r8, r8)
 801041e:	e000      	b.n	8010422 <tx_control+0x2d72>
			goto desh_event_WF;// btjt	GPIOR0,#0,desh_event_WF;	 	/ ya se apagó el compresor ?
 8010420:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de deshielo
// ;----------------------------------------------------------
desh_event_WF:
		if(flagsEventWF[2]){
 8010422:	4bce      	ldr	r3, [pc, #824]	@ (801075c <tx_control+0x30ac>)
 8010424:	789b      	ldrb	r3, [r3, #2]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d13f      	bne.n	80104aa <tx_control+0x2dfa>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
		}
ask_DhE_start_WF:
 801042a:	46c0      	nop			@ (mov r8, r8)
		// ld		A,edorefri;					/ Carga el estado del refrigerador
		// cp		A,#3;										/ está en estado de deshielo ?
		if(edorefri != 3){
 801042c:	4bd1      	ldr	r3, [pc, #836]	@ (8010774 <tx_control+0x30c4>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	2b03      	cmp	r3, #3
 8010432:	d170      	bne.n	8010516 <tx_control+0x2e66>
		// ldw		comandoED,X
		//mov		softVersion1ED,eeversion1
		// mov		softVersion2ED,eeversion2
//		BloqEventDesh[softVersion1ED] = eePlantilla[eeversion1];
//		BloqEventDesh[softVersion2ED] = eePlantilla[eeversion2];
		BloqEventDesh[softVersion1ED] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 8010434:	4bd0      	ldr	r3, [pc, #832]	@ (8010778 <tx_control+0x30c8>)
 8010436:	0018      	movs	r0, r3
 8010438:	f7f2 fbf0 	bl	8002c1c <findLastValue>
 801043c:	0003      	movs	r3, r0
 801043e:	b2da      	uxtb	r2, r3
 8010440:	4bce      	ldr	r3, [pc, #824]	@ (801077c <tx_control+0x30cc>)
 8010442:	709a      	strb	r2, [r3, #2]
		BloqEventDesh[softVersion2ED] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 8010444:	4bce      	ldr	r3, [pc, #824]	@ (8010780 <tx_control+0x30d0>)
 8010446:	0018      	movs	r0, r3
 8010448:	f7f2 fbe8 	bl	8002c1c <findLastValue>
 801044c:	0003      	movs	r3, r0
 801044e:	b2da      	uxtb	r2, r3
 8010450:	4bca      	ldr	r3, [pc, #808]	@ (801077c <tx_control+0x30cc>)
 8010452:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		ED_timeInit_HW,X
		// ldw		X,timeSeconds_LW
		//ldw		ED_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventDesh[ED_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 8010454:	4bbc      	ldr	r3, [pc, #752]	@ (8010748 <tx_control+0x3098>)
 8010456:	881b      	ldrh	r3, [r3, #0]
 8010458:	0a1b      	lsrs	r3, r3, #8
 801045a:	b29b      	uxth	r3, r3
 801045c:	b2da      	uxtb	r2, r3
 801045e:	4bc7      	ldr	r3, [pc, #796]	@ (801077c <tx_control+0x30cc>)
 8010460:	711a      	strb	r2, [r3, #4]
		BloqEventDesh[ED_timeInit_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 8010462:	4bb9      	ldr	r3, [pc, #740]	@ (8010748 <tx_control+0x3098>)
 8010464:	881b      	ldrh	r3, [r3, #0]
 8010466:	b2da      	uxtb	r2, r3
 8010468:	4bc4      	ldr	r3, [pc, #784]	@ (801077c <tx_control+0x30cc>)
 801046a:	715a      	strb	r2, [r3, #5]
		BloqEventDesh[ED_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 801046c:	4bb8      	ldr	r3, [pc, #736]	@ (8010750 <tx_control+0x30a0>)
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	0a1b      	lsrs	r3, r3, #8
 8010472:	b29b      	uxth	r3, r3
 8010474:	b2da      	uxtb	r2, r3
 8010476:	4bc1      	ldr	r3, [pc, #772]	@ (801077c <tx_control+0x30cc>)
 8010478:	719a      	strb	r2, [r3, #6]
		BloqEventDesh[ED_timeInit_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 801047a:	4bb5      	ldr	r3, [pc, #724]	@ (8010750 <tx_control+0x30a0>)
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	b2da      	uxtb	r2, r3
 8010480:	4bbe      	ldr	r3, [pc, #760]	@ (801077c <tx_control+0x30cc>)
 8010482:	71da      	strb	r2, [r3, #7]

		BloqEventDesh[ED_eventType] = 3;// mov		ED_eventType,#3;				/ carga el tipo de evento (3 para deshielo)
 8010484:	4bbd      	ldr	r3, [pc, #756]	@ (801077c <tx_control+0x30cc>)
 8010486:	2203      	movs	r2, #3
 8010488:	731a      	strb	r2, [r3, #12]
		//ldw		X,tdevl
		//ldw		ED_tempAmbInit,x;				/ carga temperatura ambiente
		BloqEventDesh[ED_tempAmbInit_H] = tdevl;
 801048a:	4bbe      	ldr	r3, [pc, #760]	@ (8010784 <tx_control+0x30d4>)
 801048c:	781a      	ldrb	r2, [r3, #0]
 801048e:	4bbb      	ldr	r3, [pc, #748]	@ (801077c <tx_control+0x30cc>)
 8010490:	735a      	strb	r2, [r3, #13]
		BloqEventDesh[ED_tempAmbInit_L] = tdevf;
 8010492:	4bbd      	ldr	r3, [pc, #756]	@ (8010788 <tx_control+0x30d8>)
 8010494:	781a      	ldrb	r2, [r3, #0]
 8010496:	4bb9      	ldr	r3, [pc, #740]	@ (801077c <tx_control+0x30cc>)
 8010498:	739a      	strb	r2, [r3, #14]

		BloqEventDesh[ED_voltInit] = voltl;// mov		ED_voltInit,voltl; /carga voltaje
 801049a:	4bbc      	ldr	r3, [pc, #752]	@ (801078c <tx_control+0x30dc>)
 801049c:	781a      	ldrb	r2, [r3, #0]
 801049e:	4bb7      	ldr	r3, [pc, #732]	@ (801077c <tx_control+0x30cc>)
 80104a0:	745a      	strb	r2, [r3, #17]
		flagsEventWF[2] = 1; // bset	flagsEventWF,#2;					/ indica que el evento deshielo ya inició
 80104a2:	4bae      	ldr	r3, [pc, #696]	@ (801075c <tx_control+0x30ac>)
 80104a4:	2201      	movs	r2, #1
 80104a6:	709a      	strb	r2, [r3, #2]
		goto power_event_WF; // jp		power_event_WF;						/ continúa
 80104a8:	e038      	b.n	801051c <tx_control+0x2e6c>
			goto ask_DhE_end_WF;// btjt	flagsEventWF,#2,ask_DhE_end_WF;	/ ya había iniciado evento deshielo? Sí, checa si ya se termina evento
 80104aa:	46c0      	nop			@ (mov r8, r8)
ask_DhE_end_WF:
		/*ld		A,edorefri;					/ Carga el estado del refrigerador
		cp		A,#3;										/ sigue en estado de deshielo ?
		jreq	power_event_WF;						/ Sí, continúa sin terminar evento*/
		if(edorefri==3){
 80104ac:	4bb1      	ldr	r3, [pc, #708]	@ (8010774 <tx_control+0x30c4>)
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	2b03      	cmp	r3, #3
 80104b2:	d032      	beq.n	801051a <tx_control+0x2e6a>
			goto power_event_WF;
		}
desh_event_end_WF:
 80104b4:	46c0      	nop			@ (mov r8, r8)
		/*ldw		X,timeSeconds_HW
		ldw		ED_timeEnd_HW,X
		ldw		X,timeSeconds_LW
		ldw		ED_timeEnd_LW,X;				/ guarda el tiempo final*/
		BloqEventDesh[ED_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>> 8);
 80104b6:	4ba4      	ldr	r3, [pc, #656]	@ (8010748 <tx_control+0x3098>)
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	0a1b      	lsrs	r3, r3, #8
 80104bc:	b29b      	uxth	r3, r3
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	4bae      	ldr	r3, [pc, #696]	@ (801077c <tx_control+0x30cc>)
 80104c2:	721a      	strb	r2, [r3, #8]
		BloqEventDesh[ED_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0xFF);
 80104c4:	4ba0      	ldr	r3, [pc, #640]	@ (8010748 <tx_control+0x3098>)
 80104c6:	881b      	ldrh	r3, [r3, #0]
 80104c8:	b2da      	uxtb	r2, r3
 80104ca:	4bac      	ldr	r3, [pc, #688]	@ (801077c <tx_control+0x30cc>)
 80104cc:	725a      	strb	r2, [r3, #9]
		BloqEventDesh[ED_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>> 8);
 80104ce:	4ba0      	ldr	r3, [pc, #640]	@ (8010750 <tx_control+0x30a0>)
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	0a1b      	lsrs	r3, r3, #8
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	4ba8      	ldr	r3, [pc, #672]	@ (801077c <tx_control+0x30cc>)
 80104da:	729a      	strb	r2, [r3, #10]
		BloqEventDesh[ED_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0xFF);
 80104dc:	4b9c      	ldr	r3, [pc, #624]	@ (8010750 <tx_control+0x30a0>)
 80104de:	881b      	ldrh	r3, [r3, #0]
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	4ba6      	ldr	r3, [pc, #664]	@ (801077c <tx_control+0x30cc>)
 80104e4:	72da      	strb	r2, [r3, #11]
		// ldw		X,teval
		// ldw		ED_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventDesh[ED_tempEvaEnd_H] = teval;
 80104e6:	4b9b      	ldr	r3, [pc, #620]	@ (8010754 <tx_control+0x30a4>)
 80104e8:	781a      	ldrb	r2, [r3, #0]
 80104ea:	4ba4      	ldr	r3, [pc, #656]	@ (801077c <tx_control+0x30cc>)
 80104ec:	73da      	strb	r2, [r3, #15]
		BloqEventDesh[ED_tempEvaEnd_L] = tevaf;
 80104ee:	4b9a      	ldr	r3, [pc, #616]	@ (8010758 <tx_control+0x30a8>)
 80104f0:	781a      	ldrb	r2, [r3, #0]
 80104f2:	4ba2      	ldr	r3, [pc, #648]	@ (801077c <tx_control+0x30cc>)
 80104f4:	741a      	strb	r2, [r3, #16]


		flagsEventWF[2] = 0;	//	bres	flagsEventWF,#2;					/ borra inicio de evento deshielo
 80104f6:	4b99      	ldr	r3, [pc, #612]	@ (801075c <tx_control+0x30ac>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	709a      	strb	r2, [r3, #2]
		ldw		pointTx,X
		ldw		pointInitTx,X
		ldw		X,#ED_voltInit
		ldw		pointEndTx,X
		mov		blockSizeTX,#18*/
		pointTx = &BloqEventDesh[comandoED_2];
 80104fc:	4b98      	ldr	r3, [pc, #608]	@ (8010760 <tx_control+0x30b0>)
 80104fe:	4a9f      	ldr	r2, [pc, #636]	@ (801077c <tx_control+0x30cc>)
 8010500:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventDesh[comandoED_2];
 8010502:	4b98      	ldr	r3, [pc, #608]	@ (8010764 <tx_control+0x30b4>)
 8010504:	4a9d      	ldr	r2, [pc, #628]	@ (801077c <tx_control+0x30cc>)
 8010506:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventDesh[ED_voltInit];
 8010508:	4b97      	ldr	r3, [pc, #604]	@ (8010768 <tx_control+0x30b8>)
 801050a:	4aa1      	ldr	r2, [pc, #644]	@ (8010790 <tx_control+0x30e0>)
 801050c:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 801050e:	4b98      	ldr	r3, [pc, #608]	@ (8010770 <tx_control+0x30c0>)
 8010510:	2212      	movs	r2, #18
 8010512:	701a      	strb	r2, [r3, #0]


		goto tx_wifiEvent;// jp		tx_wifiEvent
 8010514:	e07b      	b.n	801060e <tx_control+0x2f5e>
			goto power_event_WF;//jrne	power_event_WF;						/ No, continúa sin revisar evento deshielo
 8010516:	46c0      	nop			@ (mov r8, r8)
 8010518:	e000      	b.n	801051c <tx_control+0x2e6c>
			goto power_event_WF;
 801051a:	46c0      	nop			@ (mov r8, r8)

// ;										Evento de falla de energía (power-on reset)
// ;----------------------------------------------------------
power_event_WF:
		if(flagsEventWF[3]){
 801051c:	4b8f      	ldr	r3, [pc, #572]	@ (801075c <tx_control+0x30ac>)
 801051e:	78db      	ldrb	r3, [r3, #3]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d06d      	beq.n	8010600 <tx_control+0x2f50>
			goto power_event_end_WF;// btjt	flagsEventWF,#3,power_event_end_WF; Ya inició evento de power-on ?
 8010524:	46c0      	nop			@ (mov r8, r8)

		/*ldw		X,#$4082
		ldw		comandoEPo,X
		mov		softVersion1EPo,eeversion1
		mov		softVersion2EPo,eeversion2*/
		BloqEventPwrOn[comandoEPo_2] = 0x40;
 8010526:	4b9b      	ldr	r3, [pc, #620]	@ (8010794 <tx_control+0x30e4>)
 8010528:	2240      	movs	r2, #64	@ 0x40
 801052a:	701a      	strb	r2, [r3, #0]
		BloqEventPwrOn[comandoEPo_1] = 0x82;
 801052c:	4b99      	ldr	r3, [pc, #612]	@ (8010794 <tx_control+0x30e4>)
 801052e:	2282      	movs	r2, #130	@ 0x82
 8010530:	705a      	strb	r2, [r3, #1]

//		BloqEventPwrOn[softVersion1EPo] = eePlantilla[eeversion1];
//		BloqEventPwrOn[softVersion2EPo] = eePlantilla[eeversion2];

		BloqEventPwrOn[softVersion1EPo] = findLastValue((uint32_t) &eePlantilla[eeversion1]);
 8010532:	4b91      	ldr	r3, [pc, #580]	@ (8010778 <tx_control+0x30c8>)
 8010534:	0018      	movs	r0, r3
 8010536:	f7f2 fb71 	bl	8002c1c <findLastValue>
 801053a:	0003      	movs	r3, r0
 801053c:	b2da      	uxtb	r2, r3
 801053e:	4b95      	ldr	r3, [pc, #596]	@ (8010794 <tx_control+0x30e4>)
 8010540:	709a      	strb	r2, [r3, #2]
		BloqEventPwrOn[softVersion2EPo] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 8010542:	4b8f      	ldr	r3, [pc, #572]	@ (8010780 <tx_control+0x30d0>)
 8010544:	0018      	movs	r0, r3
 8010546:	f7f2 fb69 	bl	8002c1c <findLastValue>
 801054a:	0003      	movs	r3, r0
 801054c:	b2da      	uxtb	r2, r3
 801054e:	4b91      	ldr	r3, [pc, #580]	@ (8010794 <tx_control+0x30e4>)
 8010550:	70da      	strb	r2, [r3, #3]
		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeInit_HW,X

		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeInit_LW,X;				/ guarda el tiempo de inicio
		BloqEventPwrOn[EPo_timeInit_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 8010552:	4b7d      	ldr	r3, [pc, #500]	@ (8010748 <tx_control+0x3098>)
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	0a1b      	lsrs	r3, r3, #8
 8010558:	b29b      	uxth	r3, r3
 801055a:	b2da      	uxtb	r2, r3
 801055c:	4b8d      	ldr	r3, [pc, #564]	@ (8010794 <tx_control+0x30e4>)
 801055e:	711a      	strb	r2, [r3, #4]
		BloqEventPwrOn[EPo_timeInit_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 8010560:	4b79      	ldr	r3, [pc, #484]	@ (8010748 <tx_control+0x3098>)
 8010562:	881b      	ldrh	r3, [r3, #0]
 8010564:	b2da      	uxtb	r2, r3
 8010566:	4b8b      	ldr	r3, [pc, #556]	@ (8010794 <tx_control+0x30e4>)
 8010568:	715a      	strb	r2, [r3, #5]
		BloqEventPwrOn[EPo_timeInit_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 801056a:	4b79      	ldr	r3, [pc, #484]	@ (8010750 <tx_control+0x30a0>)
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	0a1b      	lsrs	r3, r3, #8
 8010570:	b29b      	uxth	r3, r3
 8010572:	b2da      	uxtb	r2, r3
 8010574:	4b87      	ldr	r3, [pc, #540]	@ (8010794 <tx_control+0x30e4>)
 8010576:	719a      	strb	r2, [r3, #6]
		BloqEventPwrOn[EPo_timeInit_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 8010578:	4b75      	ldr	r3, [pc, #468]	@ (8010750 <tx_control+0x30a0>)
 801057a:	881b      	ldrh	r3, [r3, #0]
 801057c:	b2da      	uxtb	r2, r3
 801057e:	4b85      	ldr	r3, [pc, #532]	@ (8010794 <tx_control+0x30e4>)
 8010580:	71da      	strb	r2, [r3, #7]

		BloqEventPwrOn[EPo_eventType] = 4;// mov		EPo_eventType,#4;				/ carga el tipo de evento (3 para falla de energía)
 8010582:	4b84      	ldr	r3, [pc, #528]	@ (8010794 <tx_control+0x30e4>)
 8010584:	2204      	movs	r2, #4
 8010586:	731a      	strb	r2, [r3, #12]
		// ldw		X,tdevl
		// ldw 		EPo_tempAmbInit,x;			/ carga temperatura ambiente
		BloqEventPwrOn[EPo_tempAmbInit_H] = tdevl;
 8010588:	4b7e      	ldr	r3, [pc, #504]	@ (8010784 <tx_control+0x30d4>)
 801058a:	781a      	ldrb	r2, [r3, #0]
 801058c:	4b81      	ldr	r3, [pc, #516]	@ (8010794 <tx_control+0x30e4>)
 801058e:	735a      	strb	r2, [r3, #13]
		BloqEventPwrOn[EPo_tempAmbInit_L] = tdevf;
 8010590:	4b7d      	ldr	r3, [pc, #500]	@ (8010788 <tx_control+0x30d8>)
 8010592:	781a      	ldrb	r2, [r3, #0]
 8010594:	4b7f      	ldr	r3, [pc, #508]	@ (8010794 <tx_control+0x30e4>)
 8010596:	739a      	strb	r2, [r3, #14]
		// mov		EPo_voltInit,voltl; 		/carga voltaje
		BloqEventPwrOn[EPo_voltInit] = voltl;
 8010598:	4b7c      	ldr	r3, [pc, #496]	@ (801078c <tx_control+0x30dc>)
 801059a:	781a      	ldrb	r2, [r3, #0]
 801059c:	4b7d      	ldr	r3, [pc, #500]	@ (8010794 <tx_control+0x30e4>)
 801059e:	745a      	strb	r2, [r3, #17]

		// ldw		X,timeSeconds_HW
		// ldw		EPo_timeEnd_HW,X
		// ldw		X,timeSeconds_LW
		// ldw		EPo_timeEnd_LW,X;				/ guarda el tiempo final
		BloqEventPwrOn[EPo_timeEnd_4] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 80105a0:	4b69      	ldr	r3, [pc, #420]	@ (8010748 <tx_control+0x3098>)
 80105a2:	881b      	ldrh	r3, [r3, #0]
 80105a4:	0a1b      	lsrs	r3, r3, #8
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	4b7a      	ldr	r3, [pc, #488]	@ (8010794 <tx_control+0x30e4>)
 80105ac:	721a      	strb	r2, [r3, #8]
		BloqEventPwrOn[EPo_timeEnd_3] = (uint8_t) (timeSeconds_HW & 0x00FF);
 80105ae:	4b66      	ldr	r3, [pc, #408]	@ (8010748 <tx_control+0x3098>)
 80105b0:	881b      	ldrh	r3, [r3, #0]
 80105b2:	b2da      	uxtb	r2, r3
 80105b4:	4b77      	ldr	r3, [pc, #476]	@ (8010794 <tx_control+0x30e4>)
 80105b6:	725a      	strb	r2, [r3, #9]
		BloqEventPwrOn[EPo_timeEnd_2] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 80105b8:	4b65      	ldr	r3, [pc, #404]	@ (8010750 <tx_control+0x30a0>)
 80105ba:	881b      	ldrh	r3, [r3, #0]
 80105bc:	0a1b      	lsrs	r3, r3, #8
 80105be:	b29b      	uxth	r3, r3
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4b74      	ldr	r3, [pc, #464]	@ (8010794 <tx_control+0x30e4>)
 80105c4:	729a      	strb	r2, [r3, #10]
		BloqEventPwrOn[EPo_timeEnd_1] = (uint8_t) (timeSeconds_LW & 0x00FF);
 80105c6:	4b62      	ldr	r3, [pc, #392]	@ (8010750 <tx_control+0x30a0>)
 80105c8:	881b      	ldrh	r3, [r3, #0]
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	4b71      	ldr	r3, [pc, #452]	@ (8010794 <tx_control+0x30e4>)
 80105ce:	72da      	strb	r2, [r3, #11]


		// ldw		X,teval
		// ldw		EPo_tempEvaEnd,x;				/ copia el dato de temperatura evaporador
		BloqEventPwrOn[EPo_tempEvaEnd_H] = teval;
 80105d0:	4b60      	ldr	r3, [pc, #384]	@ (8010754 <tx_control+0x30a4>)
 80105d2:	781a      	ldrb	r2, [r3, #0]
 80105d4:	4b6f      	ldr	r3, [pc, #444]	@ (8010794 <tx_control+0x30e4>)
 80105d6:	73da      	strb	r2, [r3, #15]
		BloqEventPwrOn[EPo_tempEvaEnd_L] = tevaf;
 80105d8:	4b5f      	ldr	r3, [pc, #380]	@ (8010758 <tx_control+0x30a8>)
 80105da:	781a      	ldrb	r2, [r3, #0]
 80105dc:	4b6d      	ldr	r3, [pc, #436]	@ (8010794 <tx_control+0x30e4>)
 80105de:	741a      	strb	r2, [r3, #16]

		flagsEventWF[3] = 0;// bres	flagsEventWF,#3;					/ borra inicio de evento power-on
 80105e0:	4b5e      	ldr	r3, [pc, #376]	@ (801075c <tx_control+0x30ac>)
 80105e2:	2200      	movs	r2, #0
 80105e4:	70da      	strb	r2, [r3, #3]
		// ldw		pointInitTx,X
		// ldw		X,#EPo_voltInit
		// ldw		pointEndTx,X
		// mov		blockSizeTX,#18

		pointTx = &BloqEventPwrOn[comandoEPo_2];
 80105e6:	4b5e      	ldr	r3, [pc, #376]	@ (8010760 <tx_control+0x30b0>)
 80105e8:	4a6a      	ldr	r2, [pc, #424]	@ (8010794 <tx_control+0x30e4>)
 80105ea:	601a      	str	r2, [r3, #0]
		pointInitTx = &BloqEventPwrOn[comandoEPo_2];
 80105ec:	4b5d      	ldr	r3, [pc, #372]	@ (8010764 <tx_control+0x30b4>)
 80105ee:	4a69      	ldr	r2, [pc, #420]	@ (8010794 <tx_control+0x30e4>)
 80105f0:	601a      	str	r2, [r3, #0]
		pointEndTx =  &BloqEventPwrOn[EPo_voltInit];
 80105f2:	4b5d      	ldr	r3, [pc, #372]	@ (8010768 <tx_control+0x30b8>)
 80105f4:	4a68      	ldr	r2, [pc, #416]	@ (8010798 <tx_control+0x30e8>)
 80105f6:	601a      	str	r2, [r3, #0]
		blockSizeTX = 18;
 80105f8:	4b5d      	ldr	r3, [pc, #372]	@ (8010770 <tx_control+0x30c0>)
 80105fa:	2212      	movs	r2, #18
 80105fc:	701a      	strb	r2, [r3, #0]

		goto tx_wifiEvent;// jp		tx_wifiEvent
 80105fe:	e006      	b.n	801060e <tx_control+0x2f5e>
		goto alarm_event_WF;// jra		alarm_event_WF
 8010600:	46c0      	nop			@ (mov r8, r8)
// ;										Evento de alarma
// ;----------------------------------------------------------
alarm_event_WF:

// ;no hubo evento tansmitir
		goto tx_wifi_timeData;// jra		tx_wifi_timeData
 8010602:	46c0      	nop			@ (mov r8, r8)
//;===========================================================
//;										DATOS
//;===========================================================
tx_wifi_timeData:
		// tnz		keyTx;									/ se está atendiendo alguna transmisión?
		if(keyTx !=0){
 8010604:	4b65      	ldr	r3, [pc, #404]	@ (801079c <tx_control+0x30ec>)
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d04b      	beq.n	80106a4 <tx_control+0x2ff4>
			goto end_tx_wifi; // jrne	end_tx_wifi;						/ espera a que terminé
 801060c:	e207      	b.n	8010a1e <tx_control+0x336e>
		bufferWifiTx[0] = 0x40;
 801060e:	4b64      	ldr	r3, [pc, #400]	@ (80107a0 <tx_control+0x30f0>)
 8010610:	2240      	movs	r2, #64	@ 0x40
 8010612:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x82;
 8010614:	4b62      	ldr	r3, [pc, #392]	@ (80107a0 <tx_control+0x30f0>)
 8010616:	2282      	movs	r2, #130	@ 0x82
 8010618:	705a      	strb	r2, [r3, #1]
		bufferWifiTx[2] = 3;// mov		bufferWifiTx+2,#3
 801061a:	4b61      	ldr	r3, [pc, #388]	@ (80107a0 <tx_control+0x30f0>)
 801061c:	2203      	movs	r2, #3
 801061e:	709a      	strb	r2, [r3, #2]
		bufferWifiTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
 8010620:	4b55      	ldr	r3, [pc, #340]	@ (8010778 <tx_control+0x30c8>)
 8010622:	0018      	movs	r0, r3
 8010624:	f7f2 fafa 	bl	8002c1c <findLastValue>
 8010628:	0003      	movs	r3, r0
 801062a:	b2da      	uxtb	r2, r3
 801062c:	4b5c      	ldr	r3, [pc, #368]	@ (80107a0 <tx_control+0x30f0>)
 801062e:	70da      	strb	r2, [r3, #3]
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);;
 8010630:	4b53      	ldr	r3, [pc, #332]	@ (8010780 <tx_control+0x30d0>)
 8010632:	0018      	movs	r0, r3
 8010634:	f7f2 faf2 	bl	8002c1c <findLastValue>
 8010638:	0003      	movs	r3, r0
 801063a:	b2da      	uxtb	r2, r3
 801063c:	4b58      	ldr	r3, [pc, #352]	@ (80107a0 <tx_control+0x30f0>)
 801063e:	711a      	strb	r2, [r3, #4]
		wreg = 14;// mov		wreg,#14
 8010640:	4b58      	ldr	r3, [pc, #352]	@ (80107a4 <tx_control+0x30f4>)
 8010642:	220e      	movs	r2, #14
 8010644:	701a      	strb	r2, [r3, #0]
		copyVector(pointTx+4,&bufferWifiTx[5]);// call	copyVector
 8010646:	4b46      	ldr	r3, [pc, #280]	@ (8010760 <tx_control+0x30b0>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3304      	adds	r3, #4
 801064c:	4a56      	ldr	r2, [pc, #344]	@ (80107a8 <tx_control+0x30f8>)
 801064e:	0011      	movs	r1, r2
 8010650:	0018      	movs	r0, r3
 8010652:	f7f6 fc3d 	bl	8006ed0 <copyVector>
		waux = bufferWifiTx[18]; // mov		waux,bufferWifiTx+18
 8010656:	4b52      	ldr	r3, [pc, #328]	@ (80107a0 <tx_control+0x30f0>)
 8010658:	7c9a      	ldrb	r2, [r3, #18]
 801065a:	4b54      	ldr	r3, [pc, #336]	@ (80107ac <tx_control+0x30fc>)
 801065c:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[18] = 0; // clr		bufferWifiTx+18
 801065e:	4b50      	ldr	r3, [pc, #320]	@ (80107a0 <tx_control+0x30f0>)
 8010660:	2200      	movs	r2, #0
 8010662:	749a      	strb	r2, [r3, #18]
		bufferWifiTx[19] = waux; //mov		bufferWifiTx+19,waux
 8010664:	4b51      	ldr	r3, [pc, #324]	@ (80107ac <tx_control+0x30fc>)
 8010666:	781a      	ldrb	r2, [r3, #0]
 8010668:	4b4d      	ldr	r3, [pc, #308]	@ (80107a0 <tx_control+0x30f0>)
 801066a:	74da      	strb	r2, [r3, #19]
		pointTx = &bufferWifiTx[0];
 801066c:	4b3c      	ldr	r3, [pc, #240]	@ (8010760 <tx_control+0x30b0>)
 801066e:	4a4c      	ldr	r2, [pc, #304]	@ (80107a0 <tx_control+0x30f0>)
 8010670:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];
 8010672:	4b3c      	ldr	r3, [pc, #240]	@ (8010764 <tx_control+0x30b4>)
 8010674:	4a4a      	ldr	r2, [pc, #296]	@ (80107a0 <tx_control+0x30f0>)
 8010676:	601a      	str	r2, [r3, #0]
		pointEndTx = &bufferWifiTx[20];
 8010678:	4b3b      	ldr	r3, [pc, #236]	@ (8010768 <tx_control+0x30b8>)
 801067a:	4a4d      	ldr	r2, [pc, #308]	@ (80107b0 <tx_control+0x3100>)
 801067c:	601a      	str	r2, [r3, #0]
		blockSizeTX = 20;
 801067e:	4b3c      	ldr	r3, [pc, #240]	@ (8010770 <tx_control+0x30c0>)
 8010680:	2214      	movs	r2, #20
 8010682:	701a      	strb	r2, [r3, #0]
		flagsTX[2] = 0;// bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 8010684:	4b4b      	ldr	r3, [pc, #300]	@ (80107b4 <tx_control+0x3104>)
 8010686:	2200      	movs	r2, #0
 8010688:	709a      	strb	r2, [r3, #2]
		chksum_32_HW_LW = 0;
 801068a:	4b4b      	ldr	r3, [pc, #300]	@ (80107b8 <tx_control+0x3108>)
 801068c:	2200      	movs	r2, #0
 801068e:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;	// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 8010690:	4b48      	ldr	r3, [pc, #288]	@ (80107b4 <tx_control+0x3104>)
 8010692:	2201      	movs	r2, #1
 8010694:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55;	// mov		keyTx,#$55;						/ listo para mandar transmisión
 8010696:	4b41      	ldr	r3, [pc, #260]	@ (801079c <tx_control+0x30ec>)
 8010698:	2255      	movs	r2, #85	@ 0x55
 801069a:	701a      	strb	r2, [r3, #0]
		codeTX = 0;		// clr		codeTX;								/ limpia código de Tx
 801069c:	4b47      	ldr	r3, [pc, #284]	@ (80107bc <tx_control+0x310c>)
 801069e:	2200      	movs	r2, #0
 80106a0:	701a      	strb	r2, [r3, #0]
		goto end_tx_wifi;// jp		end_tx_wifi
 80106a2:	e1bc      	b.n	8010a1e <tx_control+0x336e>
		}

		// ld		A,timeDataWF_H;
		// or		A,timeDataWF_L;					/ Ya es tiempo de tx datos ?
		if(timeDataWF_H == 0){
 80106a4:	4b46      	ldr	r3, [pc, #280]	@ (80107c0 <tx_control+0x3110>)
 80106a6:	881b      	ldrh	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d000      	beq.n	80106ae <tx_control+0x2ffe>
 80106ac:	e1b6      	b.n	8010a1c <tx_control+0x336c>
			goto tx_wifi_timeData_01;// jreq	tx_wifi_timeData_01;		/ sí, continua
 80106ae:	46c0      	nop			@ (mov r8, r8)
		}
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento

tx_wifi_timeData_01:
		wreg = Plantilla[loggerTime]; // mov			wreg,loggerTime;			/ Toma el tiempo de loggeo en minutos
 80106b0:	4b44      	ldr	r3, [pc, #272]	@ (80107c4 <tx_control+0x3114>)
 80106b2:	2251      	movs	r2, #81	@ 0x51
 80106b4:	5c9a      	ldrb	r2, [r3, r2]
 80106b6:	4b3b      	ldr	r3, [pc, #236]	@ (80107a4 <tx_control+0x30f4>)
 80106b8:	701a      	strb	r2, [r3, #0]
		// ldw			Y,#60;								/ Número de segundos por minuto
		// call		mult1x2;							/ Multiplicalos
		 // mov			timeDataWF_L,resull;
		timeDataWF_H = 60 * wreg;//mov			timeDataWF_H,resulh;		/ Carga el Tiempo total en segundos
 80106ba:	4b3a      	ldr	r3, [pc, #232]	@ (80107a4 <tx_control+0x30f4>)
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	001a      	movs	r2, r3
 80106c0:	233c      	movs	r3, #60	@ 0x3c
 80106c2:	4353      	muls	r3, r2
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	4b3e      	ldr	r3, [pc, #248]	@ (80107c0 <tx_control+0x3110>)
 80106c8:	801a      	strh	r2, [r3, #0]

		// ld		A,GPIOR0
		// and		A,#$03;								/ enmascara bits 0 y 1 (banderas de compresor y deshielo)
		// ld		actuadores_TD,A;			/	carga estado de compresor y deshielo, (al mismo tiempo limpia las otras banderas)
		actuadores_TD[0] = GPIOR0[0];
 80106ca:	4b1e      	ldr	r3, [pc, #120]	@ (8010744 <tx_control+0x3094>)
 80106cc:	781a      	ldrb	r2, [r3, #0]
 80106ce:	4b3e      	ldr	r3, [pc, #248]	@ (80107c8 <tx_control+0x3118>)
 80106d0:	701a      	strb	r2, [r3, #0]
		actuadores_TD[1] = GPIOR0[1];
 80106d2:	4b1c      	ldr	r3, [pc, #112]	@ (8010744 <tx_control+0x3094>)
 80106d4:	785a      	ldrb	r2, [r3, #1]
 80106d6:	4b3c      	ldr	r3, [pc, #240]	@ (80107c8 <tx_control+0x3118>)
 80106d8:	705a      	strb	r2, [r3, #1]
		actuadores_TD[2] = 0;
 80106da:	4b3b      	ldr	r3, [pc, #236]	@ (80107c8 <tx_control+0x3118>)
 80106dc:	2200      	movs	r2, #0
 80106de:	709a      	strb	r2, [r3, #2]
		actuadores_TD[3] = 0;
 80106e0:	4b39      	ldr	r3, [pc, #228]	@ (80107c8 <tx_control+0x3118>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	70da      	strb	r2, [r3, #3]
		actuadores_TD[4] = 0;
 80106e6:	4b38      	ldr	r3, [pc, #224]	@ (80107c8 <tx_control+0x3118>)
 80106e8:	2200      	movs	r2, #0
 80106ea:	711a      	strb	r2, [r3, #4]
		actuadores_TD[5] = 0;
 80106ec:	4b36      	ldr	r3, [pc, #216]	@ (80107c8 <tx_control+0x3118>)
 80106ee:	2200      	movs	r2, #0
 80106f0:	715a      	strb	r2, [r3, #5]
		actuadores_TD[6] = 0;
 80106f2:	4b35      	ldr	r3, [pc, #212]	@ (80107c8 <tx_control+0x3118>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	719a      	strb	r2, [r3, #6]
		actuadores_TD[7] = 0;
 80106f8:	4b33      	ldr	r3, [pc, #204]	@ (80107c8 <tx_control+0x3118>)
 80106fa:	2200      	movs	r2, #0
 80106fc:	71da      	strb	r2, [r3, #7]

		if(!flagsC[0]){
 80106fe:	4b33      	ldr	r3, [pc, #204]	@ (80107cc <tx_control+0x311c>)
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	2201      	movs	r2, #1
 8010704:	4053      	eors	r3, r2
 8010706:	b2db      	uxtb	r3, r3
 8010708:	2b00      	cmp	r3, #0
 801070a:	d103      	bne.n	8010714 <tx_control+0x3064>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
		}
		actuadores_TD[2] = 1;		// bset	actuadores_TD,#2;			/ sí, indica puerta abierta
 801070c:	4b2e      	ldr	r3, [pc, #184]	@ (80107c8 <tx_control+0x3118>)
 801070e:	2201      	movs	r2, #1
 8010710:	709a      	strb	r2, [r3, #2]
 8010712:	e000      	b.n	8010716 <tx_control+0x3066>
			goto no_doorOPEN_TD;	// btjf	flagsC,#0,no_doorOPEN_TD; 	/ puerta abierta ?
 8010714:	46c0      	nop			@ (mov r8, r8)
no_doorOPEN_TD:
		if(!flagsC[1]){
 8010716:	4b2d      	ldr	r3, [pc, #180]	@ (80107cc <tx_control+0x311c>)
 8010718:	785b      	ldrb	r3, [r3, #1]
 801071a:	2201      	movs	r2, #1
 801071c:	4053      	eors	r3, r2
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	d103      	bne.n	801072c <tx_control+0x307c>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
		}
		actuadores_TD[3] = 1;		//bset	actuadores_TD,#3;			/ sí, indicalo
 8010724:	4b28      	ldr	r3, [pc, #160]	@ (80107c8 <tx_control+0x3118>)
 8010726:	2201      	movs	r2, #1
 8010728:	70da      	strb	r2, [r3, #3]
 801072a:	e000      	b.n	801072e <tx_control+0x307e>
			goto noFlag_ahorro1_TD;// btjf	flagsC,#1,noFlag_ahorro1_TD; / Modo ahorro 1 activo ?
 801072c:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro1_TD:
		/*btjf	flagsC,#2,noFlag_ahorro2_TD; / Modo ahorro 1 activo ?
		bset	actuadores_TD,#4;			/ sí, indicalo*/
		if(!flagsC[2]){
 801072e:	4b27      	ldr	r3, [pc, #156]	@ (80107cc <tx_control+0x311c>)
 8010730:	789b      	ldrb	r3, [r3, #2]
 8010732:	2201      	movs	r2, #1
 8010734:	4053      	eors	r3, r2
 8010736:	b2db      	uxtb	r3, r3
 8010738:	2b00      	cmp	r3, #0
 801073a:	d149      	bne.n	80107d0 <tx_control+0x3120>
			goto noFlag_ahorro2_TD;
		}
		actuadores_TD[4] = 1;
 801073c:	4b22      	ldr	r3, [pc, #136]	@ (80107c8 <tx_control+0x3118>)
 801073e:	2201      	movs	r2, #1
 8010740:	711a      	strb	r2, [r3, #4]
 8010742:	e046      	b.n	80107d2 <tx_control+0x3122>
 8010744:	20000ba4 	.word	0x20000ba4
 8010748:	20000db0 	.word	0x20000db0
 801074c:	20000f00 	.word	0x20000f00
 8010750:	20000db2 	.word	0x20000db2
 8010754:	20000bb2 	.word	0x20000bb2
 8010758:	20000bb3 	.word	0x20000bb3
 801075c:	20000f3c 	.word	0x20000f3c
 8010760:	20000e14 	.word	0x20000e14
 8010764:	20000e0c 	.word	0x20000e0c
 8010768:	20000e10 	.word	0x20000e10
 801076c:	20000f11 	.word	0x20000f11
 8010770:	20000e30 	.word	0x20000e30
 8010774:	20000b98 	.word	0x20000b98
 8010778:	0803f07b 	.word	0x0803f07b
 801077c:	20000f14 	.word	0x20000f14
 8010780:	0803f07c 	.word	0x0803f07c
 8010784:	20000bb0 	.word	0x20000bb0
 8010788:	20000bb1 	.word	0x20000bb1
 801078c:	20000bce 	.word	0x20000bce
 8010790:	20000f25 	.word	0x20000f25
 8010794:	20000f28 	.word	0x20000f28
 8010798:	20000f39 	.word	0x20000f39
 801079c:	20000e19 	.word	0x20000e19
 80107a0:	20000f58 	.word	0x20000f58
 80107a4:	20000b55 	.word	0x20000b55
 80107a8:	20000f5d 	.word	0x20000f5d
 80107ac:	20000b54 	.word	0x20000b54
 80107b0:	20000f6c 	.word	0x20000f6c
 80107b4:	20000e1c 	.word	0x20000e1c
 80107b8:	20000e34 	.word	0x20000e34
 80107bc:	20000e24 	.word	0x20000e24
 80107c0:	20000f4e 	.word	0x20000f4e
 80107c4:	200000b8 	.word	0x200000b8
 80107c8:	20000dc0 	.word	0x20000dc0
 80107cc:	20000c3c 	.word	0x20000c3c
			goto noFlag_ahorro2_TD;
 80107d0:	46c0      	nop			@ (mov r8, r8)
noFlag_ahorro2_TD:
		/*btjf	flagsa,#nocturno,noFlag_nocturno_TD; / Modo nocturno activo ?
		bset	actuadores_TD,#5;			/ sí, indicalo*/
		if(!flagsa[nocturno]){
 80107d2:	4b97      	ldr	r3, [pc, #604]	@ (8010a30 <tx_control+0x3380>)
 80107d4:	78db      	ldrb	r3, [r3, #3]
 80107d6:	2201      	movs	r2, #1
 80107d8:	4053      	eors	r3, r2
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d103      	bne.n	80107e8 <tx_control+0x3138>
			goto noFlag_nocturno_TD;
		}
		actuadores_TD[5] = 1;
 80107e0:	4b94      	ldr	r3, [pc, #592]	@ (8010a34 <tx_control+0x3384>)
 80107e2:	2201      	movs	r2, #1
 80107e4:	715a      	strb	r2, [r3, #5]
 80107e6:	e000      	b.n	80107ea <tx_control+0x313a>
			goto noFlag_nocturno_TD;
 80107e8:	46c0      	nop			@ (mov r8, r8)
noFlag_nocturno_TD:
		/*btjf	GPIOR1,#f_fan,noFlag_vent_TD; / ventilador activo ?
		bset	actuadores_TD,#6;			/ sí, indicalo*/
		if(!GPIOR1[f_fan]){
 80107ea:	4b93      	ldr	r3, [pc, #588]	@ (8010a38 <tx_control+0x3388>)
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	2201      	movs	r2, #1
 80107f0:	4053      	eors	r3, r2
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d103      	bne.n	8010800 <tx_control+0x3150>
			goto noFlag_vent_TD;
		}
		actuadores_TD[6] = 1;
 80107f8:	4b8e      	ldr	r3, [pc, #568]	@ (8010a34 <tx_control+0x3384>)
 80107fa:	2201      	movs	r2, #1
 80107fc:	719a      	strb	r2, [r3, #6]
 80107fe:	e000      	b.n	8010802 <tx_control+0x3152>
			goto noFlag_vent_TD;
 8010800:	46c0      	nop			@ (mov r8, r8)
noFlag_vent_TD:
		// btjf		GPIOR0,#f_lamp,noFlag_Aux_TD; / rele auxiliar activo ?
		// bset	actuadores_TD,#7;			/ sí, indicalo
		if(!GPIOR0[f_lamp]){
 8010802:	4b8e      	ldr	r3, [pc, #568]	@ (8010a3c <tx_control+0x338c>)
 8010804:	789b      	ldrb	r3, [r3, #2]
 8010806:	2201      	movs	r2, #1
 8010808:	4053      	eors	r3, r2
 801080a:	b2db      	uxtb	r3, r3
 801080c:	2b00      	cmp	r3, #0
 801080e:	d103      	bne.n	8010818 <tx_control+0x3168>
			goto noFlag_Aux_TD;
		}
		actuadores_TD[7] = 1;
 8010810:	4b88      	ldr	r3, [pc, #544]	@ (8010a34 <tx_control+0x3384>)
 8010812:	2201      	movs	r2, #1
 8010814:	71da      	strb	r2, [r3, #7]
 8010816:	e000      	b.n	801081a <tx_control+0x316a>
			goto noFlag_Aux_TD;
 8010818:	46c0      	nop			@ (mov r8, r8)

		/*mov		alarmas2_TD,trefst2
		bres	alarmas2_TD,#0
		mov		alarmas_TD,trefst;		/ copia el resgistro de alarmas trefst*/
		//alarmas2_TD = 0;
		for(uint8_t k=0; k<8;k++){
 801081a:	231b      	movs	r3, #27
 801081c:	18fb      	adds	r3, r7, r3
 801081e:	2200      	movs	r2, #0
 8010820:	701a      	strb	r2, [r3, #0]
 8010822:	e00d      	b.n	8010840 <tx_control+0x3190>
			alarmas2_TD[k] = (trefst2[k]);
 8010824:	201b      	movs	r0, #27
 8010826:	183b      	adds	r3, r7, r0
 8010828:	781a      	ldrb	r2, [r3, #0]
 801082a:	183b      	adds	r3, r7, r0
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	4984      	ldr	r1, [pc, #528]	@ (8010a40 <tx_control+0x3390>)
 8010830:	5c89      	ldrb	r1, [r1, r2]
 8010832:	4a84      	ldr	r2, [pc, #528]	@ (8010a44 <tx_control+0x3394>)
 8010834:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0; k<8;k++){
 8010836:	183b      	adds	r3, r7, r0
 8010838:	781a      	ldrb	r2, [r3, #0]
 801083a:	183b      	adds	r3, r7, r0
 801083c:	3201      	adds	r2, #1
 801083e:	701a      	strb	r2, [r3, #0]
 8010840:	231b      	movs	r3, #27
 8010842:	18fb      	adds	r3, r7, r3
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	2b07      	cmp	r3, #7
 8010848:	d9ec      	bls.n	8010824 <tx_control+0x3174>
		}
		alarmas2_TD[0] = 0;//BitClear(alarmas2_TD,0);
 801084a:	4b7e      	ldr	r3, [pc, #504]	@ (8010a44 <tx_control+0x3394>)
 801084c:	2200      	movs	r2, #0
 801084e:	701a      	strb	r2, [r3, #0]
		alarmas_TD = 0;
 8010850:	4b7d      	ldr	r3, [pc, #500]	@ (8010a48 <tx_control+0x3398>)
 8010852:	2200      	movs	r2, #0
 8010854:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 8010856:	2300      	movs	r3, #0
 8010858:	617b      	str	r3, [r7, #20]
 801085a:	e013      	b.n	8010884 <tx_control+0x31d4>
			alarmas_TD |= (trefst[k] << k);
 801085c:	4a7b      	ldr	r2, [pc, #492]	@ (8010a4c <tx_control+0x339c>)
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	18d3      	adds	r3, r2, r3
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	001a      	movs	r2, r3
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	409a      	lsls	r2, r3
 801086a:	0013      	movs	r3, r2
 801086c:	b25a      	sxtb	r2, r3
 801086e:	4b76      	ldr	r3, [pc, #472]	@ (8010a48 <tx_control+0x3398>)
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	b25b      	sxtb	r3, r3
 8010874:	4313      	orrs	r3, r2
 8010876:	b25b      	sxtb	r3, r3
 8010878:	b2da      	uxtb	r2, r3
 801087a:	4b73      	ldr	r3, [pc, #460]	@ (8010a48 <tx_control+0x3398>)
 801087c:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<8;k++){
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	3301      	adds	r3, #1
 8010882:	617b      	str	r3, [r7, #20]
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	2b07      	cmp	r3, #7
 8010888:	dde8      	ble.n	801085c <tx_control+0x31ac>
		}
		//alarmas_TD = trefst;
		//;Carga de datos
		// ldw		X,#$4081
		// ldw		bufferWifiTx,X
		bufferWifiTx[0] = 0x40;
 801088a:	4b71      	ldr	r3, [pc, #452]	@ (8010a50 <tx_control+0x33a0>)
 801088c:	2240      	movs	r2, #64	@ 0x40
 801088e:	701a      	strb	r2, [r3, #0]
		bufferWifiTx[1] = 0x81;
 8010890:	4b6f      	ldr	r3, [pc, #444]	@ (8010a50 <tx_control+0x33a0>)
 8010892:	2281      	movs	r2, #129	@ 0x81
 8010894:	705a      	strb	r2, [r3, #1]

		// ; manda cantidad de datos de 2 bytes en la Tx
		bufferWifiTx[2] = 7;// mov		bufferWifiTx+2,#7
 8010896:	4b6e      	ldr	r3, [pc, #440]	@ (8010a50 <tx_control+0x33a0>)
 8010898:	2207      	movs	r2, #7
 801089a:	709a      	strb	r2, [r3, #2]
		//; carga versión de firmware
//		// ldw		X,eeversion1
//		bufferWifiTx[3] = eePlantilla[eeversion1];// ldw		bufferWifiTx+3,X
//		bufferWifiTx[4] = eePlantilla[eeveTx[3] = findLastValue((uint32_t) &eePlantilla[eeversion1]);// ldw		bufferWifiTx+3,X
		bufferWifiTx[4] = findLastValue((uint32_t) &eePlantilla[eeversion2]);
 801089c:	4b6d      	ldr	r3, [pc, #436]	@ (8010a54 <tx_control+0x33a4>)
 801089e:	0018      	movs	r0, r3
 80108a0:	f7f2 f9bc 	bl	8002c1c <findLastValue>
 80108a4:	0003      	movs	r3, r0
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	4b69      	ldr	r3, [pc, #420]	@ (8010a50 <tx_control+0x33a0>)
 80108aa:	711a      	strb	r2, [r3, #4]
		//; carga tiempo
		/*ldw		X,timeSeconds_HW
		ldw		bufferWifiTx+5,X
		ldw		X,timeSeconds_LW
		ldw		bufferWifiTx+7,X*/
		bufferWifiTx[5] = (uint8_t) ((timeSeconds_HW & 0xFF00)>>8);
 80108ac:	4b6a      	ldr	r3, [pc, #424]	@ (8010a58 <tx_control+0x33a8>)
 80108ae:	881b      	ldrh	r3, [r3, #0]
 80108b0:	0a1b      	lsrs	r3, r3, #8
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	4b66      	ldr	r3, [pc, #408]	@ (8010a50 <tx_control+0x33a0>)
 80108b8:	715a      	strb	r2, [r3, #5]
		bufferWifiTx[6] = (uint8_t) (timeSeconds_HW & 0xFF);
 80108ba:	4b67      	ldr	r3, [pc, #412]	@ (8010a58 <tx_control+0x33a8>)
 80108bc:	881b      	ldrh	r3, [r3, #0]
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	4b63      	ldr	r3, [pc, #396]	@ (8010a50 <tx_control+0x33a0>)
 80108c2:	719a      	strb	r2, [r3, #6]
		bufferWifiTx[7] = (uint8_t) ((timeSeconds_LW & 0xFF00)>>8);
 80108c4:	4b65      	ldr	r3, [pc, #404]	@ (8010a5c <tx_control+0x33ac>)
 80108c6:	881b      	ldrh	r3, [r3, #0]
 80108c8:	0a1b      	lsrs	r3, r3, #8
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	4b60      	ldr	r3, [pc, #384]	@ (8010a50 <tx_control+0x33a0>)
 80108d0:	71da      	strb	r2, [r3, #7]
		bufferWifiTx[8] = (uint8_t) (timeSeconds_LW & 0xFF);
 80108d2:	4b62      	ldr	r3, [pc, #392]	@ (8010a5c <tx_control+0x33ac>)
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	b2da      	uxtb	r2, r3
 80108d8:	4b5d      	ldr	r3, [pc, #372]	@ (8010a50 <tx_control+0x33a0>)
 80108da:	721a      	strb	r2, [r3, #8]
		//; carga temperatura 1 (ambiente)
		// ldw		X,tdevl
		// ldw		bufferWifiTx+9,X
		bufferWifiTx[9] = tdevl;
 80108dc:	4b60      	ldr	r3, [pc, #384]	@ (8010a60 <tx_control+0x33b0>)
 80108de:	781a      	ldrb	r2, [r3, #0]
 80108e0:	4b5b      	ldr	r3, [pc, #364]	@ (8010a50 <tx_control+0x33a0>)
 80108e2:	725a      	strb	r2, [r3, #9]
		bufferWifiTx[10] = tdevf;
 80108e4:	4b5f      	ldr	r3, [pc, #380]	@ (8010a64 <tx_control+0x33b4>)
 80108e6:	781a      	ldrb	r2, [r3, #0]
 80108e8:	4b59      	ldr	r3, [pc, #356]	@ (8010a50 <tx_control+0x33a0>)
 80108ea:	729a      	strb	r2, [r3, #10]

		//; carga temperatura 2 (evaporador)
		/*ldw		X,teval
		ldw		bufferWifiTx+11,X*/
		bufferWifiTx[11] = teval;
 80108ec:	4b5e      	ldr	r3, [pc, #376]	@ (8010a68 <tx_control+0x33b8>)
 80108ee:	781a      	ldrb	r2, [r3, #0]
 80108f0:	4b57      	ldr	r3, [pc, #348]	@ (8010a50 <tx_control+0x33a0>)
 80108f2:	72da      	strb	r2, [r3, #11]
		bufferWifiTx[12] = tevaf;
 80108f4:	4b5d      	ldr	r3, [pc, #372]	@ (8010a6c <tx_control+0x33bc>)
 80108f6:	781a      	ldrb	r2, [r3, #0]
 80108f8:	4b55      	ldr	r3, [pc, #340]	@ (8010a50 <tx_control+0x33a0>)
 80108fa:	731a      	strb	r2, [r3, #12]
		//; carga voltaje
		// clr		bufferWifiTx+13
		// mov		bufferWifiTx+14,voltl
		bufferWifiTx[13] = 0;
 80108fc:	4b54      	ldr	r3, [pc, #336]	@ (8010a50 <tx_control+0x33a0>)
 80108fe:	2200      	movs	r2, #0
 8010900:	735a      	strb	r2, [r3, #13]
		bufferWifiTx[14] = voltl;
 8010902:	4b5b      	ldr	r3, [pc, #364]	@ (8010a70 <tx_control+0x33c0>)
 8010904:	781a      	ldrb	r2, [r3, #0]
 8010906:	4b52      	ldr	r3, [pc, #328]	@ (8010a50 <tx_control+0x33a0>)
 8010908:	739a      	strb	r2, [r3, #14]
		//;carga estado de actuadores
		// ldw		X,actuadores_TD
		//bufferWifiTx[15] = actuadores_TD;// ldw		bufferWifiTx+15,X
		bufferWifiTx[15]=0;
 801090a:	4b51      	ldr	r3, [pc, #324]	@ (8010a50 <tx_control+0x33a0>)
 801090c:	2200      	movs	r2, #0
 801090e:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 8010910:	2300      	movs	r3, #0
 8010912:	613b      	str	r3, [r7, #16]
 8010914:	e011      	b.n	801093a <tx_control+0x328a>
			bufferWifiTx[15] |= (uint8_t)(actuadores_TD[k]<<k);
 8010916:	4b4e      	ldr	r3, [pc, #312]	@ (8010a50 <tx_control+0x33a0>)
 8010918:	7bda      	ldrb	r2, [r3, #15]
 801091a:	4946      	ldr	r1, [pc, #280]	@ (8010a34 <tx_control+0x3384>)
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	18cb      	adds	r3, r1, r3
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	0019      	movs	r1, r3
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	4099      	lsls	r1, r3
 8010928:	000b      	movs	r3, r1
 801092a:	b2db      	uxtb	r3, r3
 801092c:	4313      	orrs	r3, r2
 801092e:	b2da      	uxtb	r2, r3
 8010930:	4b47      	ldr	r3, [pc, #284]	@ (8010a50 <tx_control+0x33a0>)
 8010932:	73da      	strb	r2, [r3, #15]
		for(int k=0; k<8;k++){
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	3301      	adds	r3, #1
 8010938:	613b      	str	r3, [r7, #16]
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	2b07      	cmp	r3, #7
 801093e:	ddea      	ble.n	8010916 <tx_control+0x3266>
		}
		bufferWifiTx[16] =estados_TD;
 8010940:	4b4c      	ldr	r3, [pc, #304]	@ (8010a74 <tx_control+0x33c4>)
 8010942:	781a      	ldrb	r2, [r3, #0]
 8010944:	4b42      	ldr	r3, [pc, #264]	@ (8010a50 <tx_control+0x33a0>)
 8010946:	741a      	strb	r2, [r3, #16]
		// ;carga estado de alarmas
		// ldw		X,alarmas2_TD
		bufferWifiTx[17]=0;
 8010948:	4b41      	ldr	r3, [pc, #260]	@ (8010a50 <tx_control+0x33a0>)
 801094a:	2200      	movs	r2, #0
 801094c:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 801094e:	230f      	movs	r3, #15
 8010950:	18fb      	adds	r3, r7, r3
 8010952:	2200      	movs	r2, #0
 8010954:	701a      	strb	r2, [r3, #0]
 8010956:	e015      	b.n	8010984 <tx_control+0x32d4>
			bufferWifiTx[17] |= (uint8_t) (alarmas2_TD[k]<<k);//bufferWifiTx[17] = alarmas2_TD;// ldw		bufferWifiTx+17,X
 8010958:	4b3d      	ldr	r3, [pc, #244]	@ (8010a50 <tx_control+0x33a0>)
 801095a:	7c5a      	ldrb	r2, [r3, #17]
 801095c:	200f      	movs	r0, #15
 801095e:	183b      	adds	r3, r7, r0
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	4938      	ldr	r1, [pc, #224]	@ (8010a44 <tx_control+0x3394>)
 8010964:	5ccb      	ldrb	r3, [r1, r3]
 8010966:	0019      	movs	r1, r3
 8010968:	183b      	adds	r3, r7, r0
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	4099      	lsls	r1, r3
 801096e:	000b      	movs	r3, r1
 8010970:	b2db      	uxtb	r3, r3
 8010972:	4313      	orrs	r3, r2
 8010974:	b2da      	uxtb	r2, r3
 8010976:	4b36      	ldr	r3, [pc, #216]	@ (8010a50 <tx_control+0x33a0>)
 8010978:	745a      	strb	r2, [r3, #17]
		for(uint8_t k=0; k<8; k++){
 801097a:	183b      	adds	r3, r7, r0
 801097c:	781a      	ldrb	r2, [r3, #0]
 801097e:	183b      	adds	r3, r7, r0
 8010980:	3201      	adds	r2, #1
 8010982:	701a      	strb	r2, [r3, #0]
 8010984:	230f      	movs	r3, #15
 8010986:	18fb      	adds	r3, r7, r3
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	2b07      	cmp	r3, #7
 801098c:	d9e4      	bls.n	8010958 <tx_control+0x32a8>
		}

		bufferWifiTx[18] = alarmas_TD;
 801098e:	4b2e      	ldr	r3, [pc, #184]	@ (8010a48 <tx_control+0x3398>)
 8010990:	781a      	ldrb	r2, [r3, #0]
 8010992:	4b2f      	ldr	r3, [pc, #188]	@ (8010a50 <tx_control+0x33a0>)
 8010994:	749a      	strb	r2, [r3, #18]
		//;carga sensor vacuna
		// ldw		X,tret_w
		bufferWifiTx[19] =(uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+19,X
 8010996:	4b38      	ldr	r3, [pc, #224]	@ (8010a78 <tx_control+0x33c8>)
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	0a1b      	lsrs	r3, r3, #8
 801099c:	b29b      	uxth	r3, r3
 801099e:	b2da      	uxtb	r2, r3
 80109a0:	4b2b      	ldr	r3, [pc, #172]	@ (8010a50 <tx_control+0x33a0>)
 80109a2:	74da      	strb	r2, [r3, #19]
		bufferWifiTx[20] =(uint8_t) (tret_w&0xFF);
 80109a4:	4b34      	ldr	r3, [pc, #208]	@ (8010a78 <tx_control+0x33c8>)
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	b2da      	uxtb	r2, r3
 80109aa:	4b29      	ldr	r3, [pc, #164]	@ (8010a50 <tx_control+0x33a0>)
 80109ac:	751a      	strb	r2, [r3, #20]
		//;carga cuarto sensor
		// ldw		X,tsac_w
		bufferWifiTx[21] = (uint8_t) ((tret_w&0xFF00)>>8);// ldw		bufferWifiTx+21,X
 80109ae:	4b32      	ldr	r3, [pc, #200]	@ (8010a78 <tx_control+0x33c8>)
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	0a1b      	lsrs	r3, r3, #8
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	b2da      	uxtb	r2, r3
 80109b8:	4b25      	ldr	r3, [pc, #148]	@ (8010a50 <tx_control+0x33a0>)
 80109ba:	755a      	strb	r2, [r3, #21]
		bufferWifiTx[22] = (uint8_t) (tret_w&0xFF);
 80109bc:	4b2e      	ldr	r3, [pc, #184]	@ (8010a78 <tx_control+0x33c8>)
 80109be:	881b      	ldrh	r3, [r3, #0]
 80109c0:	b2da      	uxtb	r2, r3
 80109c2:	4b23      	ldr	r3, [pc, #140]	@ (8010a50 <tx_control+0x33a0>)
 80109c4:	759a      	strb	r2, [r3, #22]

		// ldw		X,#bufferWifiTx
		pointTx = &bufferWifiTx[0];// ldw		pointTx,X
 80109c6:	4b2d      	ldr	r3, [pc, #180]	@ (8010a7c <tx_control+0x33cc>)
 80109c8:	4a21      	ldr	r2, [pc, #132]	@ (8010a50 <tx_control+0x33a0>)
 80109ca:	601a      	str	r2, [r3, #0]
		pointInitTx = &bufferWifiTx[0];// ldw		pointInitTx,X
 80109cc:	4b2c      	ldr	r3, [pc, #176]	@ (8010a80 <tx_control+0x33d0>)
 80109ce:	4a20      	ldr	r2, [pc, #128]	@ (8010a50 <tx_control+0x33a0>)
 80109d0:	601a      	str	r2, [r3, #0]
		// ldw		X,#(bufferWifiTx+23)
		pointEndTx = &bufferWifiTx[23];// ldw		pointEndTx,X
 80109d2:	4b2c      	ldr	r3, [pc, #176]	@ (8010a84 <tx_control+0x33d4>)
 80109d4:	4a2c      	ldr	r2, [pc, #176]	@ (8010a88 <tx_control+0x33d8>)
 80109d6:	601a      	str	r2, [r3, #0]
		blockSizeTX = 23;// mov		blockSizeTX,#23
 80109d8:	4b2c      	ldr	r3, [pc, #176]	@ (8010a8c <tx_control+0x33dc>)
 80109da:	2217      	movs	r2, #23
 80109dc:	701a      	strb	r2, [r3, #0]

		flagsTX[2] = 0; // bres	flagsTX,#2;						/ Indica que no hay que transmitir Header
 80109de:	4b2c      	ldr	r3, [pc, #176]	@ (8010a90 <tx_control+0x33e0>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	709a      	strb	r2, [r3, #2]

		// clrw	X
		// ldw		chksum_HW,X
		chksum_32_HW_LW=0;// ldw		chksum_LW,X;					/ limpia registros de checksum
 80109e4:	4b2b      	ldr	r3, [pc, #172]	@ (8010a94 <tx_control+0x33e4>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	601a      	str	r2, [r3, #0]
		flagsTX[3] = 1;// bset	flagsTX,#3;						/ indica que ya se ha enviado el checksum
 80109ea:	4b29      	ldr	r3, [pc, #164]	@ (8010a90 <tx_control+0x33e0>)
 80109ec:	2201      	movs	r2, #1
 80109ee:	70da      	strb	r2, [r3, #3]
		keyTx = 0x55; // mov		keyTx,#$55;						/ listo para mandar transmisión
 80109f0:	4b29      	ldr	r3, [pc, #164]	@ (8010a98 <tx_control+0x33e8>)
 80109f2:	2255      	movs	r2, #85	@ 0x55
 80109f4:	701a      	strb	r2, [r3, #0]
		codeTX = 0;// clr		codeTX;								/ limpia código de Tx
 80109f6:	4b29      	ldr	r3, [pc, #164]	@ (8010a9c <tx_control+0x33ec>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	701a      	strb	r2, [r3, #0]

		goto end_tx_wifi;// jp		end_tx_wifi
 80109fc:	e00f      	b.n	8010a1e <tx_control+0x336e>
		goto end_tx_wifi;//jp			end_tx_wifi
 80109fe:	46c0      	nop			@ (mov r8, r8)
 8010a00:	f7fe fefd 	bl	800f7fe <tx_control+0x214e>
		goto end_tx_wifi;// jp			end_tx_wifi;  Si ya empezó el intercambio de paquetes de firmware no se ejecutan los procesos wifi
 8010a04:	46c0      	nop			@ (mov r8, r8)
 8010a06:	f7fe fefa 	bl	800f7fe <tx_control+0x214e>
		goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 8010a0a:	46c0      	nop			@ (mov r8, r8)
 8010a0c:	f7fe fef7 	bl	800f7fe <tx_control+0x214e>
		goto end_tx_wifi;// jp		end_tx_wifi
 8010a10:	46c0      	nop			@ (mov r8, r8)
 8010a12:	f7fe fef4 	bl	800f7fe <tx_control+0x214e>
			goto end_tx_wifi;// jrne	end_tx_wifi;						/ espera a que termine
 8010a16:	46c0      	nop			@ (mov r8, r8)
 8010a18:	f7fe fef1 	bl	800f7fe <tx_control+0x214e>
		goto end_tx_wifi;// jp		end_tx_wifi;			/ checa si hay que transmitir algún eevento
 8010a1c:	46c0      	nop			@ (mov r8, r8)


end_tx_wifi:
		goto end_tx_control;//jp		end_tx_control
 8010a1e:	f7fe feee 	bl	800f7fe <tx_control+0x214e>
		goto end_tx_control_b;
 8010a22:	46c0      	nop			@ (mov r8, r8)

end_tx_control_b:
		asm ("nop");
 8010a24:	46c0      	nop			@ (mov r8, r8)

}
 8010a26:	46c0      	nop			@ (mov r8, r8)
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	b013      	add	sp, #76	@ 0x4c
 8010a2c:	bd90      	pop	{r4, r7, pc}
 8010a2e:	46c0      	nop			@ (mov r8, r8)
 8010a30:	20000b78 	.word	0x20000b78
 8010a34:	20000dc0 	.word	0x20000dc0
 8010a38:	20000be0 	.word	0x20000be0
 8010a3c:	20000ba4 	.word	0x20000ba4
 8010a40:	20000b80 	.word	0x20000b80
 8010a44:	20000dcc 	.word	0x20000dcc
 8010a48:	20000dd4 	.word	0x20000dd4
 8010a4c:	20000b88 	.word	0x20000b88
 8010a50:	20000f58 	.word	0x20000f58
 8010a54:	0803f07c 	.word	0x0803f07c
 8010a58:	20000db0 	.word	0x20000db0
 8010a5c:	20000db2 	.word	0x20000db2
 8010a60:	20000bb0 	.word	0x20000bb0
 8010a64:	20000bb1 	.word	0x20000bb1
 8010a68:	20000bb2 	.word	0x20000bb2
 8010a6c:	20000bb3 	.word	0x20000bb3
 8010a70:	20000bce 	.word	0x20000bce
 8010a74:	20000dc8 	.word	0x20000dc8
 8010a78:	20000c54 	.word	0x20000c54
 8010a7c:	20000e14 	.word	0x20000e14
 8010a80:	20000e0c 	.word	0x20000e0c
 8010a84:	20000e10 	.word	0x20000e10
 8010a88:	20000f6f 	.word	0x20000f6f
 8010a8c:	20000e30 	.word	0x20000e30
 8010a90:	20000e1c 	.word	0x20000e1c
 8010a94:	20000e34 	.word	0x20000e34
 8010a98:	20000e19 	.word	0x20000e19
 8010a9c:	20000e24 	.word	0x20000e24

08010aa0 <prepTXlogg_2>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rutina completa Adaptada <<_RGM
void prepTXlogg_2(){
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0

			uint8_t *point_X;
			uint8_t *point_Y;

			//;---- Carga en penúltimo byte del buffer el numero de bytes capturados en el actual buffer
			point_X	=	dirBuffer;		//LDW	X,dirBuffer
 8010aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8010b64 <prepTXlogg_2+0xc4>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	607b      	str	r3, [r7, #4]
			//clr resulh
			//mov	resull,#126
			//addw	X,resulh
			//ld	A,cntByteBlock
			point_X[126] = cntByteBlock;		//ld	(X),A
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	337e      	adds	r3, #126	@ 0x7e
 8010ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8010b68 <prepTXlogg_2+0xc8>)
 8010ab2:	7812      	ldrb	r2, [r2, #0]
 8010ab4:	701a      	strb	r2, [r3, #0]


			//;---- Graba buffer en bloque de flash
			ProgMemCode = 0xAA;//mov		ProgMemCode,#$AA;				/ Indica que se va a grabar bloque de Flash
 8010ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8010b6c <prepTXlogg_2+0xcc>)
 8010ab8:	22aa      	movs	r2, #170	@ 0xaa
 8010aba:	701a      	strb	r2, [r3, #0]
			//ld   A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
			//ldw		X,#128;									/ Carga el tamaño de los bloques (128 bytes)
			STM8_16_X = cntBlockFlash *128;//mul		X,A;										/ Multiplicalos
 8010abc:	4b2c      	ldr	r3, [pc, #176]	@ (8010b70 <prepTXlogg_2+0xd0>)
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	01db      	lsls	r3, r3, #7
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8010b74 <prepTXlogg_2+0xd4>)
 8010ac6:	801a      	strh	r2, [r3, #0]
			//addw	X,dirLogger;						/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			dirPointer = &dirLogger[STM8_16_X];		//LDW		dirPointer,X
 8010ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8010b78 <prepTXlogg_2+0xd8>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4a29      	ldr	r2, [pc, #164]	@ (8010b74 <prepTXlogg_2+0xd4>)
 8010ace:	8812      	ldrh	r2, [r2, #0]
 8010ad0:	189a      	adds	r2, r3, r2
 8010ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8010b7c <prepTXlogg_2+0xdc>)
 8010ad4:	601a      	str	r2, [r3, #0]
			//LDW		X,dirBuffer;						/ apunta al buffer de datos en RAM
			dataPointer = dirBuffer;					//LDW		dataPointer,X
 8010ad6:	4b23      	ldr	r3, [pc, #140]	@ (8010b64 <prepTXlogg_2+0xc4>)
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	4b29      	ldr	r3, [pc, #164]	@ (8010b80 <prepTXlogg_2+0xe0>)
 8010adc:	601a      	str	r2, [r3, #0]
			GRABA_BLOCK();			//	call	GRABA_BLOCK
 8010ade:	f7f6 fa2f 	bl	8006f40 <GRABA_BLOCK>

			save_timeUNIX();			//	call	save_timeUNIX
 8010ae2:	f7f6 f949 	bl	8006d78 <save_timeUNIX>

			save_cntReg();				//	call	save_cntReg
 8010ae6:	f7f6 f90d 	bl	8006d04 <save_cntReg>


			STM8_A = cntBlockFlash;		//ld    A,cntBlockFlash;				/ Toma el número de bloques grabados en Flash
 8010aea:	4b21      	ldr	r3, [pc, #132]	@ (8010b70 <prepTXlogg_2+0xd0>)
 8010aec:	781a      	ldrb	r2, [r3, #0]
 8010aee:	4b25      	ldr	r3, [pc, #148]	@ (8010b84 <prepTXlogg_2+0xe4>)
 8010af0:	701a      	strb	r2, [r3, #0]

			/////  En caso de que no se haya grabado el bloque completo considera un bloque más para el inicio de la Tx
			if( cntByteBlock == 0){//tnz		cntByteBlock
 8010af2:	4b1d      	ldr	r3, [pc, #116]	@ (8010b68 <prepTXlogg_2+0xc8>)
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d006      	beq.n	8010b08 <prepTXlogg_2+0x68>
				goto noIncBlock;//jreq	noIncBlock
			}
			STM8_A++;//inc A
 8010afa:	4b22      	ldr	r3, [pc, #136]	@ (8010b84 <prepTXlogg_2+0xe4>)
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	3301      	adds	r3, #1
 8010b00:	b2da      	uxtb	r2, r3
 8010b02:	4b20      	ldr	r3, [pc, #128]	@ (8010b84 <prepTXlogg_2+0xe4>)
 8010b04:	701a      	strb	r2, [r3, #0]
 8010b06:	e000      	b.n	8010b0a <prepTXlogg_2+0x6a>
				goto noIncBlock;//jreq	noIncBlock
 8010b08:	46c0      	nop			@ (mov r8, r8)
noIncBlock:

			//ldw		X,#128;			/ Carga el tamaño de los bloques (128 bytes)
			//mul		X,A;			/ Multiplicalos
			//addw	X,dirLogger;	/	apunta al inicio de la Flash resevada para Logger de datos + el número de bloques grabados
			STM8_16_X = 128 * STM8_A;
 8010b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8010b84 <prepTXlogg_2+0xe4>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	01db      	lsls	r3, r3, #7
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	4b18      	ldr	r3, [pc, #96]	@ (8010b74 <prepTXlogg_2+0xd4>)
 8010b14:	801a      	strh	r2, [r3, #0]
			point_X = &dirLogger[STM8_16_X];//ldw	 pointInitTx,X;	/ carga puntero inicial para Tx
 8010b16:	4b18      	ldr	r3, [pc, #96]	@ (8010b78 <prepTXlogg_2+0xd8>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4a16      	ldr	r2, [pc, #88]	@ (8010b74 <prepTXlogg_2+0xd4>)
 8010b1c:	8812      	ldrh	r2, [r2, #0]
 8010b1e:	189b      	adds	r3, r3, r2
 8010b20:	607b      	str	r3, [r7, #4]
			pointInitTx = point_X;
 8010b22:	4b19      	ldr	r3, [pc, #100]	@ (8010b88 <prepTXlogg_2+0xe8>)
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	601a      	str	r2, [r3, #0]
			pointTx = point_X;//ldw	pointTx,X
 8010b28:	4b18      	ldr	r3, [pc, #96]	@ (8010b8c <prepTXlogg_2+0xec>)
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]

			flagsTX[0] = 1;//bset	flagsTX,#0;
 8010b2e:	4b18      	ldr	r3, [pc, #96]	@ (8010b90 <prepTXlogg_2+0xf0>)
 8010b30:	2201      	movs	r2, #1
 8010b32:	701a      	strb	r2, [r3, #0]


			if(pointTx != loggerStart){//cpw X,loggerStart;					/ es menor al inicio del logger?
 8010b34:	4b15      	ldr	r3, [pc, #84]	@ (8010b8c <prepTXlogg_2+0xec>)
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	4b16      	ldr	r3, [pc, #88]	@ (8010b94 <prepTXlogg_2+0xf4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d106      	bne.n	8010b4e <prepTXlogg_2+0xae>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
			}

			point_X = loggerEnd;	//ldw X,loggerEnd;						/ el puntero final es el fin del logger
 8010b40:	4b15      	ldr	r3, [pc, #84]	@ (8010b98 <prepTXlogg_2+0xf8>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	607b      	str	r3, [r7, #4]
			flagsTX[0] = 0;			//bres	flagsTX,#0;	/ no esperes a pasar por fin de logger durante transmisión
 8010b46:	4b12      	ldr	r3, [pc, #72]	@ (8010b90 <prepTXlogg_2+0xf0>)
 8010b48:	2200      	movs	r2, #0
 8010b4a:	701a      	strb	r2, [r3, #0]

			goto loadPointEnd;		//jra		loadPointEnd
 8010b4c:	e003      	b.n	8010b56 <prepTXlogg_2+0xb6>
				goto loadPointEnd_0;//jrne	loadPointEnd_0
 8010b4e:	46c0      	nop			@ (mov r8, r8)
loadPointEnd_0:
			point_X--;				//decw X
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	3b01      	subs	r3, #1
 8010b54:	607b      	str	r3, [r7, #4]
loadPointEnd:
			pointEndTx = point_X;//ldw pointEndTx,X;	/ carga puntero final para Tx
 8010b56:	4b11      	ldr	r3, [pc, #68]	@ (8010b9c <prepTXlogg_2+0xfc>)
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	601a      	str	r2, [r3, #0]
			//ret
}
 8010b5c:	46c0      	nop			@ (mov r8, r8)
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	b002      	add	sp, #8
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	20000da4 	.word	0x20000da4
 8010b68:	20000d9b 	.word	0x20000d9b
 8010b6c:	20000d8c 	.word	0x20000d8c
 8010b70:	20000d9a 	.word	0x20000d9a
 8010b74:	200008d2 	.word	0x200008d2
 8010b78:	20000da0 	.word	0x20000da0
 8010b7c:	20000d90 	.word	0x20000d90
 8010b80:	20000d94 	.word	0x20000d94
 8010b84:	200008d0 	.word	0x200008d0
 8010b88:	20000e0c 	.word	0x20000e0c
 8010b8c:	20000e14 	.word	0x20000e14
 8010b90:	20000e1c 	.word	0x20000e1c
 8010b94:	20000e28 	.word	0x20000e28
 8010b98:	20000e2c 	.word	0x20000e2c
 8010b9c:	20000e10 	.word	0x20000e10

08010ba0 <voltmetro>:
#include "voltmetro.h"




void voltmetro(void){
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	af00      	add	r7, sp, #0

				if(GPIOR0[f_volt]){// BTJT   GPIOR0,#f_volt,voltmetro1    ;¿Protección de voltaje activada?
 8010ba4:	4b8b      	ldr	r3, [pc, #556]	@ (8010dd4 <voltmetro+0x234>)
 8010ba6:	799b      	ldrb	r3, [r3, #6]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d100      	bne.n	8010bae <voltmetro+0xe>
 8010bac:	e0fb      	b.n	8010da6 <voltmetro+0x206>
					goto voltmetro1;
 8010bae:	46c0      	nop			@ (mov r8, r8)
				}
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro

voltmetro1:
				cntvolt++; //		INC    cntvolt          ;Un milisegundo más
 8010bb0:	4b89      	ldr	r3, [pc, #548]	@ (8010dd8 <voltmetro+0x238>)
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	4b87      	ldr	r3, [pc, #540]	@ (8010dd8 <voltmetro+0x238>)
 8010bba:	701a      	strb	r2, [r3, #0]
				//LD A,cntvolt
				if(cntvolt >= 25){//CP A,#25
 8010bbc:	4b86      	ldr	r3, [pc, #536]	@ (8010dd8 <voltmetro+0x238>)
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	2b18      	cmp	r3, #24
 8010bc2:	d800      	bhi.n	8010bc6 <voltmetro+0x26>
 8010bc4:	e06f      	b.n	8010ca6 <voltmetro+0x106>
					goto adq_muestra; //JRUGE  adq_muestra
 8010bc6:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior



adq_muestra:
				cntvolt = 0; // CLR    cntvolt          ;limpia contador
 8010bc8:	4b83      	ldr	r3, [pc, #524]	@ (8010dd8 <voltmetro+0x238>)
 8010bca:	2200      	movs	r2, #0
 8010bcc:	701a      	strb	r2, [r3, #0]

				wreg = volt_trms;//	mov     wreg,volt_trms   ;Es el voltaje obtenido del proceso de muestreo
 8010bce:	4b83      	ldr	r3, [pc, #524]	@ (8010ddc <voltmetro+0x23c>)
 8010bd0:	781a      	ldrb	r2, [r3, #0]
 8010bd2:	4b83      	ldr	r3, [pc, #524]	@ (8010de0 <voltmetro+0x240>)
 8010bd4:	701a      	strb	r2, [r3, #0]
	                //ld A,wreg
				if(wreg != 0xFF){//cp A,#$FF
 8010bd6:	4b82      	ldr	r3, [pc, #520]	@ (8010de0 <voltmetro+0x240>)
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	2bff      	cmp	r3, #255	@ 0xff
 8010bdc:	d10a      	bne.n	8010bf4 <voltmetro+0x54>
					goto no_255_dat;//jrne no_255_dat
				}


				//ld A,cm_h255
				if(cm_h255 == 2){//cp A,#2
 8010bde:	4b81      	ldr	r3, [pc, #516]	@ (8010de4 <voltmetro+0x244>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	2b02      	cmp	r3, #2
 8010be4:	d019      	beq.n	8010c1a <voltmetro+0x7a>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_h255++;//inc	cm_h255
 8010be6:	4b7f      	ldr	r3, [pc, #508]	@ (8010de4 <voltmetro+0x244>)
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	3301      	adds	r3, #1
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	4b7d      	ldr	r3, [pc, #500]	@ (8010de4 <voltmetro+0x244>)
 8010bf0:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8010bf2:	e05b      	b.n	8010cac <voltmetro+0x10c>
					goto no_255_dat;//jrne no_255_dat
 8010bf4:	46c0      	nop			@ (mov r8, r8)

no_255_dat:
				cm_h255 = 0;//clr cm_h255
 8010bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8010de4 <voltmetro+0x244>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	701a      	strb	r2, [r3, #0]
				//ld	A,wreg
				if(wreg > 50){//cp	A,#50;
 8010bfc:	4b78      	ldr	r3, [pc, #480]	@ (8010de0 <voltmetro+0x240>)
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	2b32      	cmp	r3, #50	@ 0x32
 8010c02:	d82a      	bhi.n	8010c5a <voltmetro+0xba>
					goto carga_muestra_V;//jrugt carga_muestra_V;
				}
				//ld A,cm_lo50
				if(cm_lo50 == 2){//cp A,#2;
 8010c04:	4b78      	ldr	r3, [pc, #480]	@ (8010de8 <voltmetro+0x248>)
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	2b02      	cmp	r3, #2
 8010c0a:	d008      	beq.n	8010c1e <voltmetro+0x7e>
					goto fail_tvolt;//jreq fail_tvolt
				}
				cm_lo50++;//inc cm_lo50
 8010c0c:	4b76      	ldr	r3, [pc, #472]	@ (8010de8 <voltmetro+0x248>)
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	3301      	adds	r3, #1
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	4b74      	ldr	r3, [pc, #464]	@ (8010de8 <voltmetro+0x248>)
 8010c16:	701a      	strb	r2, [r3, #0]
				goto verifica_limites;//jra verifica_limites;
 8010c18:	e048      	b.n	8010cac <voltmetro+0x10c>
					goto fail_tvolt;//jreq fail_tvolt
 8010c1a:	46c0      	nop			@ (mov r8, r8)
 8010c1c:	e000      	b.n	8010c20 <voltmetro+0x80>
					goto fail_tvolt;//jreq fail_tvolt
 8010c1e:	46c0      	nop			@ (mov r8, r8)

fail_tvolt:
bad_value:
				trefst2[f_tvolt] = 0;	//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8010c20:	4b72      	ldr	r3, [pc, #456]	@ (8010dec <voltmetro+0x24c>)
 8010c22:	2200      	movs	r2, #0
 8010c24:	701a      	strb	r2, [r3, #0]
				//ld A,edorefri
				if(edorefri != 1){//cp A,#1
 8010c26:	4b72      	ldr	r3, [pc, #456]	@ (8010df0 <voltmetro+0x250>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d103      	bne.n	8010c36 <voltmetro+0x96>
					goto hide_fail_eu;//jrne hide_fail_eu
				}
				trefst2[f_tvolt] = 1;//BitSet(trefst2, f_tvolt);	//bset		trefst2,#f_tvolt;		Indica error en la tarjeta de medición de voltaje
 8010c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8010dec <voltmetro+0x24c>)
 8010c30:	2201      	movs	r2, #1
 8010c32:	701a      	strb	r2, [r3, #0]
 8010c34:	e000      	b.n	8010c38 <voltmetro+0x98>
					goto hide_fail_eu;//jrne hide_fail_eu
 8010c36:	46c0      	nop			@ (mov r8, r8)


hide_fail_eu:
				cntmuesv = 0; //clr cntmuesv
 8010c38:	4b6e      	ldr	r3, [pc, #440]	@ (8010df4 <voltmetro+0x254>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	701a      	strb	r2, [r3, #0]
				voltl = 115;//mov voltl,#115;
 8010c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8010df8 <voltmetro+0x258>)
 8010c40:	2273      	movs	r2, #115	@ 0x73
 8010c42:	701a      	strb	r2, [r3, #0]
				//ld A,protype;
				if(Plantilla[protype] != 0x02){//cp A,#$02;
 8010c44:	4b6d      	ldr	r3, [pc, #436]	@ (8010dfc <voltmetro+0x25c>)
 8010c46:	2257      	movs	r2, #87	@ 0x57
 8010c48:	5c9b      	ldrb	r3, [r3, r2]
 8010c4a:	2b02      	cmp	r3, #2
 8010c4c:	d103      	bne.n	8010c56 <voltmetro+0xb6>
					goto no_ld_210; // jrne no_ld_210;
				}
				voltl = 210;//mov			voltl,#210;					Carga el promedio de muestras con 210
 8010c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8010df8 <voltmetro+0x258>)
 8010c50:	22d2      	movs	r2, #210	@ 0xd2
 8010c52:	701a      	strb	r2, [r3, #0]
no_ld_210:
				goto verifica_limites; //jra verifica_limites
 8010c54:	e02a      	b.n	8010cac <voltmetro+0x10c>
					goto no_ld_210; // jrne no_ld_210;
 8010c56:	46c0      	nop			@ (mov r8, r8)
				goto verifica_limites; //jra verifica_limites
 8010c58:	e028      	b.n	8010cac <voltmetro+0x10c>
					goto carga_muestra_V;//jrugt carga_muestra_V;
 8010c5a:	46c0      	nop			@ (mov r8, r8)

carga_muestra_V: //************************************************************
				cm_lo50 = 0; //clr cm_lo50;
 8010c5c:	4b62      	ldr	r3, [pc, #392]	@ (8010de8 <voltmetro+0x248>)
 8010c5e:	2200      	movs	r2, #0
 8010c60:	701a      	strb	r2, [r3, #0]
				trefst2[f_tvolt] = 0;//bres		trefst2,#f_tvolt;		no hay error en la tarjeta de medición de voltaje
 8010c62:	4b62      	ldr	r3, [pc, #392]	@ (8010dec <voltmetro+0x24c>)
 8010c64:	2200      	movs	r2, #0
 8010c66:	701a      	strb	r2, [r3, #0]
	                    //LD A,XL
	                    //ADD A,cntmuesv
	                	//LD XL,A
	                	//LD A,wreg
	                    //LD (X),A
				voltram[cntmuesv] = wreg;
 8010c68:	4b62      	ldr	r3, [pc, #392]	@ (8010df4 <voltmetro+0x254>)
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	001a      	movs	r2, r3
 8010c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8010de0 <voltmetro+0x240>)
 8010c70:	7819      	ldrb	r1, [r3, #0]
 8010c72:	4b63      	ldr	r3, [pc, #396]	@ (8010e00 <voltmetro+0x260>)
 8010c74:	5499      	strb	r1, [r3, r2]
				cntmuesv++;//  INC    cntmuesv         ;Una muestra más, incrementa contador de muestras de voltaje
 8010c76:	4b5f      	ldr	r3, [pc, #380]	@ (8010df4 <voltmetro+0x254>)
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	b2da      	uxtb	r2, r3
 8010c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8010df4 <voltmetro+0x254>)
 8010c80:	701a      	strb	r2, [r3, #0]
	                    //ld A,cntmuesv
				if(cntmuesv >= 8){//cp A,#8
 8010c82:	4b5c      	ldr	r3, [pc, #368]	@ (8010df4 <voltmetro+0x254>)
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	2b07      	cmp	r3, #7
 8010c88:	d90f      	bls.n	8010caa <voltmetro+0x10a>
					goto promedio;//JRUGE promedio
 8010c8a:	46c0      	nop			@ (mov r8, r8)
				}
				goto verifica_limites;//jra verifica_limites
	                    //***********************************************************

promedio:
				cntmuesv = 0;//clr cntmuesv //****************************
 8010c8c:	4b59      	ldr	r3, [pc, #356]	@ (8010df4 <voltmetro+0x254>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	701a      	strb	r2, [r3, #0]
				//LDW X, #voltram
				//call prom8m1b
				voltl = prom8m1b (&voltram[0], 8);//	MOV    voltl,resull     ;Carga el resultado del promedio en su registro
 8010c92:	4b5b      	ldr	r3, [pc, #364]	@ (8010e00 <voltmetro+0x260>)
 8010c94:	2108      	movs	r1, #8
 8010c96:	0018      	movs	r0, r3
 8010c98:	f7f4 fc4a 	bl	8005530 <prom8m1b>
 8010c9c:	0003      	movs	r3, r0
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	4b55      	ldr	r3, [pc, #340]	@ (8010df8 <voltmetro+0x258>)
 8010ca2:	701a      	strb	r2, [r3, #0]
 8010ca4:	e002      	b.n	8010cac <voltmetro+0x10c>
				goto verifica_limites; //  jp     verifica_limites ;NO, Realiza comparaciones con el dato anterior
 8010ca6:	46c0      	nop			@ (mov r8, r8)
 8010ca8:	e000      	b.n	8010cac <voltmetro+0x10c>
				goto verifica_limites;//jra verifica_limites
 8010caa:	46c0      	nop			@ (mov r8, r8)

verifica_limites:

verifica_alto:
				if(trefst[f_hv]){//BTJT trefst,#f_hv,hist_vla
 8010cac:	4b55      	ldr	r3, [pc, #340]	@ (8010e04 <voltmetro+0x264>)
 8010cae:	79db      	ldrb	r3, [r3, #7]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d104      	bne.n	8010cbe <voltmetro+0x11e>
					goto hist_vla;
				}
				STM8_A = volt_max;	//	LD     A,volt_max            ;NO, Carga el dato de límite de alto voltaje
 8010cb4:	4b54      	ldr	r3, [pc, #336]	@ (8010e08 <voltmetro+0x268>)
 8010cb6:	781a      	ldrb	r2, [r3, #0]
 8010cb8:	4b54      	ldr	r3, [pc, #336]	@ (8010e0c <voltmetro+0x26c>)
 8010cba:	701a      	strb	r2, [r3, #0]
				goto comp_vla;//jra comp_vla
 8010cbc:	e004      	b.n	8010cc8 <voltmetro+0x128>
					goto hist_vla;
 8010cbe:	46c0      	nop			@ (mov r8, r8)

hist_vla:		//;-----------------------Falla por ALTO Voltaje activa
				STM8_A = volt_hmax;			 //LD     A,volt_hmax    ;SI, Carga el dato Histeresis Alto para comparar
 8010cc0:	4b53      	ldr	r3, [pc, #332]	@ (8010e10 <voltmetro+0x270>)
 8010cc2:	781a      	ldrb	r2, [r3, #0]
 8010cc4:	4b51      	ldr	r3, [pc, #324]	@ (8010e0c <voltmetro+0x26c>)
 8010cc6:	701a      	strb	r2, [r3, #0]

comp_vla:		//;-----------------Compara para verificar voltaje ALTO
				if(STM8_A > voltl ){ //CP A,voltl
 8010cc8:	4b50      	ldr	r3, [pc, #320]	@ (8010e0c <voltmetro+0x26c>)
 8010cca:	781a      	ldrb	r2, [r3, #0]
 8010ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8010df8 <voltmetro+0x258>)
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d80c      	bhi.n	8010cee <voltmetro+0x14e>
					goto verifica_bajo;//JRUGT verifica_bajo
				}
voltaje_alto:		//;-----------------------------  Voltaje de línea ALTO
 8010cd4:	46c0      	nop			@ (mov r8, r8)
					if(valfhvl == 0){//cp A,#0						// ;¿Ha transcurrido el tiempo para validación de falla
 8010cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8010e14 <voltmetro+0x274>)
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d165      	bne.n	8010daa <voltmetro+0x20a>
						goto falla_VLalto;//JREQ falla_VLalto
 8010cde:	46c0      	nop			@ (mov r8, r8)
					}
					goto fin_voltmetro;//jra fin_voltmetro

falla_VLalto:
				   Bset_Clear_trfst(trefst,trefst,f_hv, f_lv);
 8010ce0:	4948      	ldr	r1, [pc, #288]	@ (8010e04 <voltmetro+0x264>)
 8010ce2:	4848      	ldr	r0, [pc, #288]	@ (8010e04 <voltmetro+0x264>)
 8010ce4:	2306      	movs	r3, #6
 8010ce6:	2207      	movs	r2, #7
 8010ce8:	f7fc f91c 	bl	800cf24 <Bset_Clear_trfst>
//				   BitSet(trefst,f_hv);		//	BSET   trefst,#f_hv       ;Activa bandera por ALTO VOLTAJE
//				   BitClear(trefst,f_lv); 	//	BRES   trefst,#f_lv       ;Cancela bandera por BAJO VOLTAJE
				   goto tiempo_libfalla;// jra     tiempo_libfalla   ;IMPORTANTE: Carga retardo para liberar falla
 8010cec:	e02e      	b.n	8010d4c <voltmetro+0x1ac>
					goto verifica_bajo;//JRUGT verifica_bajo
 8010cee:	46c0      	nop			@ (mov r8, r8)

verifica_bajo:		//;----------------------------  Verifica voltaje BAJO
	               valfhvl =  Plantilla[protval];//MOV    valfhvl,protval
 8010cf0:	4b42      	ldr	r3, [pc, #264]	@ (8010dfc <voltmetro+0x25c>)
 8010cf2:	2245      	movs	r2, #69	@ 0x45
 8010cf4:	5c9a      	ldrb	r2, [r3, r2]
 8010cf6:	4b47      	ldr	r3, [pc, #284]	@ (8010e14 <voltmetro+0x274>)
 8010cf8:	701a      	strb	r2, [r3, #0]
	               if(edorefri != 1){//  ;		/ En autoprueba deja el led como está.
 8010cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8010df0 <voltmetro+0x250>)
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d103      	bne.n	8010d0a <voltmetro+0x16a>
	            	   goto no_auto_00;//jrne no_auto_00
	               }
	               valfhvl = 2;//MOV    valfhvl,#2
 8010d02:	4b44      	ldr	r3, [pc, #272]	@ (8010e14 <voltmetro+0x274>)
 8010d04:	2202      	movs	r2, #2
 8010d06:	701a      	strb	r2, [r3, #0]
 8010d08:	e000      	b.n	8010d0c <voltmetro+0x16c>
	            	   goto no_auto_00;//jrne no_auto_00
 8010d0a:	46c0      	nop			@ (mov r8, r8)

no_auto_00:
					if(trefst[f_lv]){//BTJT trefst,#f_lv,hist_vlb
 8010d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8010e04 <voltmetro+0x264>)
 8010d0e:	799b      	ldrb	r3, [r3, #6]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d104      	bne.n	8010d1e <voltmetro+0x17e>
						goto hist_vlb; //
					}
					STM8_A = volt_min;		//LD     A,volt_min         ;NO, Carga el dato de límite de bajo voltaje
 8010d14:	4b40      	ldr	r3, [pc, #256]	@ (8010e18 <voltmetro+0x278>)
 8010d16:	781a      	ldrb	r2, [r3, #0]
 8010d18:	4b3c      	ldr	r3, [pc, #240]	@ (8010e0c <voltmetro+0x26c>)
 8010d1a:	701a      	strb	r2, [r3, #0]
					goto comp_vlb;//  jra     comp_vlb           ;Realiza comparación con voltaje de línea bajo
 8010d1c:	e004      	b.n	8010d28 <voltmetro+0x188>
						goto hist_vlb; //
 8010d1e:	46c0      	nop			@ (mov r8, r8)

hist_vlb:			//;--------------------  Falla por BAJO Voltaje activa
					STM8_A = volt_hmin;// LD     A,volt_hmin     ;Carga el dato Histeresis Bajo para comparar
 8010d20:	4b3e      	ldr	r3, [pc, #248]	@ (8010e1c <voltmetro+0x27c>)
 8010d22:	781a      	ldrb	r2, [r3, #0]
 8010d24:	4b39      	ldr	r3, [pc, #228]	@ (8010e0c <voltmetro+0x26c>)
 8010d26:	701a      	strb	r2, [r3, #0]

comp_vlb:			//;--------------  Compara para verificar voltaje BAJO
	               if(STM8_A < voltl ){//cp A,voltl
 8010d28:	4b38      	ldr	r3, [pc, #224]	@ (8010e0c <voltmetro+0x26c>)
 8010d2a:	781a      	ldrb	r2, [r3, #0]
 8010d2c:	4b32      	ldr	r3, [pc, #200]	@ (8010df8 <voltmetro+0x258>)
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d31d      	bcc.n	8010d70 <voltmetro+0x1d0>
	            	   goto verifica_rango; //JRULT  verifica_rango
	               }

voltaje_bajo:		//;----------------------------  Voltaje de línea BAJO
 8010d34:	46c0      	nop			@ (mov r8, r8)
	                //ld A,valflvl;
	                if(valflvl == 0){//cp A,#0
 8010d36:	4b3a      	ldr	r3, [pc, #232]	@ (8010e20 <voltmetro+0x280>)
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d137      	bne.n	8010dae <voltmetro+0x20e>
	                	goto falla_VLbajo;//  JREQ   falla_VLbajo       ;SI, Activa Falla por Voltaje de Línea Bajo
 8010d3e:	46c0      	nop			@ (mov r8, r8)
	                }
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO

falla_VLbajo:
					Bset_Clear_trfst(trefst,trefst,f_lv,f_hv);
 8010d40:	4930      	ldr	r1, [pc, #192]	@ (8010e04 <voltmetro+0x264>)
 8010d42:	4830      	ldr	r0, [pc, #192]	@ (8010e04 <voltmetro+0x264>)
 8010d44:	2307      	movs	r3, #7
 8010d46:	2206      	movs	r2, #6
 8010d48:	f7fc f8ec 	bl	800cf24 <Bset_Clear_trfst>
//					BitSet(trefst,f_lv);// BSET   trefst,#f_lv       ;Activa bandera por BAJO VOLTAJE
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;Cancela bandera por ALTO VOLTAJE


tiempo_libfalla:		//;-----  15s de retardo para liberar falla por voltaje
					wreg = Plantilla[rangein]; //mov wreg,rangein
 8010d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8010dfc <voltmetro+0x25c>)
 8010d4e:	2263      	movs	r2, #99	@ 0x63
 8010d50:	5c9a      	ldrb	r2, [r3, r2]
 8010d52:	4b23      	ldr	r3, [pc, #140]	@ (8010de0 <voltmetro+0x240>)
 8010d54:	701a      	strb	r2, [r3, #0]
					BaBentre10_math();  //call BaBentre10_math
 8010d56:	f7f5 fbcb 	bl	80064f0 <BaBentre10_math>
					// retprotl = resull;// mov retprotl,resull
					retproth = (resulh * 256) + resull;//mov retproth,resulh
 8010d5a:	4b32      	ldr	r3, [pc, #200]	@ (8010e24 <voltmetro+0x284>)
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	021b      	lsls	r3, r3, #8
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	4a31      	ldr	r2, [pc, #196]	@ (8010e28 <voltmetro+0x288>)
 8010d64:	7812      	ldrb	r2, [r2, #0]
 8010d66:	189b      	adds	r3, r3, r2
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	4b30      	ldr	r3, [pc, #192]	@ (8010e2c <voltmetro+0x28c>)
 8010d6c:	801a      	strh	r2, [r3, #0]
					goto  fin_voltmetro; //jra  fin_voltmetro
 8010d6e:	e021      	b.n	8010db4 <voltmetro+0x214>
	            	   goto verifica_rango; //JRULT  verifica_rango
 8010d70:	46c0      	nop			@ (mov r8, r8)

verifica_rango:				//;-----------------------------Voltaje dentro de rango
					valflvl = Plantilla[protval]; // MOV    valflvl,protval   ;Refresaca tiempo para validación de falla BAJO Volt
 8010d72:	4b22      	ldr	r3, [pc, #136]	@ (8010dfc <voltmetro+0x25c>)
 8010d74:	2245      	movs	r2, #69	@ 0x45
 8010d76:	5c9a      	ldrb	r2, [r3, r2]
 8010d78:	4b29      	ldr	r3, [pc, #164]	@ (8010e20 <voltmetro+0x280>)
 8010d7a:	701a      	strb	r2, [r3, #0]
					if(edorefri != 1){//cp A,#1;  / En autoprueba deja el led como está.
 8010d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8010df0 <voltmetro+0x250>)
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d103      	bne.n	8010d8c <voltmetro+0x1ec>
						goto no_auto_01;//jrne no_auto_01
					}
					valflvl = 2;//MOV valflvl,#2
 8010d84:	4b26      	ldr	r3, [pc, #152]	@ (8010e20 <voltmetro+0x280>)
 8010d86:	2202      	movs	r2, #2
 8010d88:	701a      	strb	r2, [r3, #0]
 8010d8a:	e000      	b.n	8010d8e <voltmetro+0x1ee>
						goto no_auto_01;//jrne no_auto_01
 8010d8c:	46c0      	nop			@ (mov r8, r8)
no_auto_01:
	                //ld A,retprotl;
	                if(retproth == 0){//or A,retproth;
 8010d8e:	4b27      	ldr	r3, [pc, #156]	@ (8010e2c <voltmetro+0x28c>)
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10d      	bne.n	8010db2 <voltmetro+0x212>
	                	goto vl_rango; //JREQ vl_rango
 8010d96:	46c0      	nop			@ (mov r8, r8)
	                }
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
vl_rango:
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8010d98:	491a      	ldr	r1, [pc, #104]	@ (8010e04 <voltmetro+0x264>)
 8010d9a:	481a      	ldr	r0, [pc, #104]	@ (8010e04 <voltmetro+0x264>)
 8010d9c:	2307      	movs	r3, #7
 8010d9e:	2206      	movs	r2, #6
 8010da0:	f7fc f8db 	bl	800cf5a <Bclear_Clear_trfst>
 8010da4:	e006      	b.n	8010db4 <voltmetro+0x214>
				goto fin_voltmetro; // JP     fin_voltmetro    ;NO, Termina el proceso voltmetro
 8010da6:	46c0      	nop			@ (mov r8, r8)
 8010da8:	e004      	b.n	8010db4 <voltmetro+0x214>
					goto fin_voltmetro;//jra fin_voltmetro
 8010daa:	46c0      	nop			@ (mov r8, r8)
 8010dac:	e002      	b.n	8010db4 <voltmetro+0x214>
					goto fin_voltmetro;// jra     fin_voltmetro      ;NO, Termina el proceso VOLTMETRO
 8010dae:	46c0      	nop			@ (mov r8, r8)
 8010db0:	e000      	b.n	8010db4 <voltmetro+0x214>
	                goto fin_voltmetro;//jra     fin_voltmetro     ;NO, Termina el proceso VOLTMETRO
 8010db2:	46c0      	nop			@ (mov r8, r8)
//					BitClear(trefst, f_lv);// BRES   trefst,#f_lv       ;Voltaje en rango y tiempo transcurrido, cancela
//					BitClear(trefst,f_hv);// BRES   trefst,#f_hv       ;/ banderas de falla por voltaje de línea

fin_voltmetro:
					if(GPIOR0[f_volt]){//BTJT GPIOR0,#f_volt,fin_voltmetro1		//;¿Protección de voltaje activada?
 8010db4:	4b07      	ldr	r3, [pc, #28]	@ (8010dd4 <voltmetro+0x234>)
 8010db6:	799b      	ldrb	r3, [r3, #6]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d106      	bne.n	8010dca <voltmetro+0x22a>
						goto fin_voltmetro1;
					}
					Bclear_Clear_trfst(trefst, trefst,f_lv, f_hv);
 8010dbc:	4911      	ldr	r1, [pc, #68]	@ (8010e04 <voltmetro+0x264>)
 8010dbe:	4811      	ldr	r0, [pc, #68]	@ (8010e04 <voltmetro+0x264>)
 8010dc0:	2307      	movs	r3, #7
 8010dc2:	2206      	movs	r2, #6
 8010dc4:	f7fc f8c9 	bl	800cf5a <Bclear_Clear_trfst>
//					BitClear(trefst,f_lv);//BRES   trefst,#f_lv			//;NO hay protección de voltaje activada
//					BitClear(trefst, f_hv);//BRES   trefst,#f_hv		//;limpia banderas de falla por voltaje

fin_voltmetro1:
					goto main_voltmetro;//jp main_voltmetro
 8010dc8:	e000      	b.n	8010dcc <voltmetro+0x22c>
						goto fin_voltmetro1;
 8010dca:	46c0      	nop			@ (mov r8, r8)
					goto main_voltmetro;//jp main_voltmetro
 8010dcc:	46c0      	nop			@ (mov r8, r8)
main_voltmetro:

}
 8010dce:	46c0      	nop			@ (mov r8, r8)
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	20000ba4 	.word	0x20000ba4
 8010dd8:	20000bcc 	.word	0x20000bcc
 8010ddc:	20000b45 	.word	0x20000b45
 8010de0:	20000b55 	.word	0x20000b55
 8010de4:	20000c2a 	.word	0x20000c2a
 8010de8:	20000c29 	.word	0x20000c29
 8010dec:	20000b80 	.word	0x20000b80
 8010df0:	20000b98 	.word	0x20000b98
 8010df4:	20000bcd 	.word	0x20000bcd
 8010df8:	20000bce 	.word	0x20000bce
 8010dfc:	200000b8 	.word	0x200000b8
 8010e00:	20000c68 	.word	0x20000c68
 8010e04:	20000b88 	.word	0x20000b88
 8010e08:	20000c23 	.word	0x20000c23
 8010e0c:	200008d0 	.word	0x200008d0
 8010e10:	20000c25 	.word	0x20000c25
 8010e14:	20000b71 	.word	0x20000b71
 8010e18:	20000c24 	.word	0x20000c24
 8010e1c:	20000c26 	.word	0x20000c26
 8010e20:	20000b70 	.word	0x20000b70
 8010e24:	20000b47 	.word	0x20000b47
 8010e28:	20000b48 	.word	0x20000b48
 8010e2c:	20000b68 	.word	0x20000b68

08010e30 <watch>:


#include "main.h"
#include "customMain.h"

void watch (void){
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0


			memodriver();		//	call		memodriver	;		/ Refresca los parámetros de operación del refrigerador uno a la vez cada ms
 8010e36:	f7f6 f947 	bl	80070c8 <memodriver>
//;------------------------------------------------------------------------------------------------------------------
//;							supervicion de timeout token wifi - ble
//;------------------------------------------------------------------------------------------------------------------
			//ldw		X,timeoutTBLE;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTBLE == 1)//jreq	resetComMod;					/
 8010e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8010fec <watch+0x1bc>)
 8010e3c:	881b      	ldrh	r3, [r3, #0]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d004      	beq.n	8010e4c <watch+0x1c>
				goto resetComMod;
			//ldw		X,timeoutTWF;					/ No,checa time out
			//cpw		X,#1;
			if(timeoutTWF != 1)//jrne	fallas_temp;					/ No, continúa
 8010e42:	4b6b      	ldr	r3, [pc, #428]	@ (8010ff0 <watch+0x1c0>)
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d143      	bne.n	8010ed2 <watch+0xa2>
				goto fallas_temp;
resetComMod:
 8010e4a:	e000      	b.n	8010e4e <watch+0x1e>
				goto resetComMod;
 8010e4c:	46c0      	nop			@ (mov r8, r8)
			timeTxTBLE = 20;	//mov		timeTxTBLE,#20
 8010e4e:	4b69      	ldr	r3, [pc, #420]	@ (8010ff4 <watch+0x1c4>)
 8010e50:	2214      	movs	r2, #20
 8010e52:	701a      	strb	r2, [r3, #0]
			flagsTX2[2] =0;		//bres	flagsTX2,#2;					/ sí, cancela bandera de token recibido
 8010e54:	4b68      	ldr	r3, [pc, #416]	@ (8010ff8 <watch+0x1c8>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	709a      	strb	r2, [r3, #2]
			//ldw		X,#300;
			timeoutTBLE = 300;	//ldw		timeoutTBLE,X;					/ carga time out de Token BLE (5 min)
 8010e5a:	4b64      	ldr	r3, [pc, #400]	@ (8010fec <watch+0x1bc>)
 8010e5c:	2296      	movs	r2, #150	@ 0x96
 8010e5e:	0052      	lsls	r2, r2, #1
 8010e60:	801a      	strh	r2, [r3, #0]

			timeTxTWF = 30;			//mov		timeTxTWF,#30
 8010e62:	4b66      	ldr	r3, [pc, #408]	@ (8010ffc <watch+0x1cc>)
 8010e64:	221e      	movs	r2, #30
 8010e66:	701a      	strb	r2, [r3, #0]
			flagsTX2 [1] = 0; 		//bres	flagsTX2,#1;					/ sí, cancela bandera de token recibido
 8010e68:	4b63      	ldr	r3, [pc, #396]	@ (8010ff8 <watch+0x1c8>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	705a      	strb	r2, [r3, #1]
			timeRstBLE = 5;			//mov		timeRstBLE,#5;				/ carga 5 segundos de apagado para BLE (reinicia el modulo wifi)
 8010e6e:	4b64      	ldr	r3, [pc, #400]	@ (8011000 <watch+0x1d0>)
 8010e70:	2205      	movs	r2, #5
 8010e72:	701a      	strb	r2, [r3, #0]
			//ldw		X,#300;
			timeoutTWF = 300;		//ldw		timeoutTWF,X;					/ carga time out de Token (5 min)
 8010e74:	4b5e      	ldr	r3, [pc, #376]	@ (8010ff0 <watch+0x1c0>)
 8010e76:	2296      	movs	r2, #150	@ 0x96
 8010e78:	0052      	lsls	r2, r2, #1
 8010e7a:	801a      	strh	r2, [r3, #0]
			keyTx = 0;				//clr		keyTx  ;// en caso de desconexion cancela toda transmisión
 8010e7c:	4b61      	ldr	r3, [pc, #388]	@ (8011004 <watch+0x1d4>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; i<8; i++){
 8010e82:	1dfb      	adds	r3, r7, #7
 8010e84:	2200      	movs	r2, #0
 8010e86:	701a      	strb	r2, [r3, #0]
 8010e88:	e018      	b.n	8010ebc <watch+0x8c>
				flagsTX[i] = 0;		//clr		flagsTX
 8010e8a:	1dfb      	adds	r3, r7, #7
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8011008 <watch+0x1d8>)
 8010e90:	2100      	movs	r1, #0
 8010e92:	54d1      	strb	r1, [r2, r3]
				flagsRxFirm[i]= 0;	//clr		flagsRxFirm
 8010e94:	1dfb      	adds	r3, r7, #7
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	4a5c      	ldr	r2, [pc, #368]	@ (801100c <watch+0x1dc>)
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	54d1      	strb	r1, [r2, r3]
				flagsTxControl[i] = 0; // clr		flagsTxControl
 8010e9e:	1dfb      	adds	r3, r7, #7
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8011010 <watch+0x1e0>)
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	54d1      	strb	r1, [r2, r3]
				flagsWIFI[i] = 0; 		//clr		flagsWIFI
 8010ea8:	1dfb      	adds	r3, r7, #7
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	4a59      	ldr	r2, [pc, #356]	@ (8011014 <watch+0x1e4>)
 8010eae:	2100      	movs	r1, #0
 8010eb0:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<8; i++){
 8010eb2:	1dfb      	adds	r3, r7, #7
 8010eb4:	781a      	ldrb	r2, [r3, #0]
 8010eb6:	1dfb      	adds	r3, r7, #7
 8010eb8:	3201      	adds	r2, #1
 8010eba:	701a      	strb	r2, [r3, #0]
 8010ebc:	1dfb      	adds	r3, r7, #7
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	2b07      	cmp	r3, #7
 8010ec2:	d9e2      	bls.n	8010e8a <watch+0x5a>
			}

			flagsLogger[4] = 0;			//bres	flagsLogger,#4;				// permite loggeo de eventos
 8010ec4:	4b54      	ldr	r3, [pc, #336]	@ (8011018 <watch+0x1e8>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	711a      	strb	r2, [r3, #4]
			flagsLogger[5] = 0;			//bres	flagsLogger,#5;				// permite loggeo de datos
 8010eca:	4b53      	ldr	r3, [pc, #332]	@ (8011018 <watch+0x1e8>)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	715a      	strb	r2, [r3, #5]
 8010ed0:	e000      	b.n	8010ed4 <watch+0xa4>
				goto fallas_temp;
 8010ed2:	46c0      	nop			@ (mov r8, r8)
fallas_temp:

////;------------------------- Control del Activacion de Cargas
watch50:

				portX[rel_co] = 0;			//		bres		puertoa,#rel_co; /Apaga los relevadores    ;RM_20220623  Cambio de puertos para cargas
 8010ed4:	4b51      	ldr	r3, [pc, #324]	@ (801101c <watch+0x1ec>)
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	701a      	strb	r2, [r3, #0]
				portX[rel_dh] = 0;			//		bres		puertoe,#rel_dh;                           ;RM_20220623  Cambio de puertos para cargas
 8010eda:	4b50      	ldr	r3, [pc, #320]	@ (801101c <watch+0x1ec>)
 8010edc:	2200      	movs	r2, #0
 8010ede:	711a      	strb	r2, [r3, #4]
				portX[rel_lz] = 0;			//		bres		puertoe,#rel_lz;		// Manuel 10-MAR-2022  ;RM_20220623  Cambio de puertos para cargas
 8010ee0:	4b4e      	ldr	r3, [pc, #312]	@ (801101c <watch+0x1ec>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	709a      	strb	r2, [r3, #2]
				portX[rel_fn] = 0;			//		bres		puertoa,#rel_fn;		// Manuel 10-feb-2022  ;RM_20220623  Cambio de puertos para cargas
 8010ee6:	4b4d      	ldr	r3, [pc, #308]	@ (801101c <watch+0x1ec>)
 8010ee8:	2200      	movs	r2, #0
 8010eea:	70da      	strb	r2, [r3, #3]
				portX[led_pot] = 0;			//		bres		puertoa,#led_pot;
 8010eec:	4b4b      	ldr	r3, [pc, #300]	@ (801101c <watch+0x1ec>)
 8010eee:	2200      	movs	r2, #0
 8010ef0:	715a      	strb	r2, [r3, #5]

				if(!GPIOR1[f_led]){
 8010ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8011020 <watch+0x1f0>)
 8010ef4:	785b      	ldrb	r3, [r3, #1]
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	4053      	eors	r3, r2
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d103      	bne.n	8010f08 <watch+0xd8>
					goto	jmp_watch_02;
				}
				portX[led_pot] = 1;			// 		bset		puertoa,#led_pot;
 8010f00:	4b46      	ldr	r3, [pc, #280]	@ (801101c <watch+0x1ec>)
 8010f02:	2201      	movs	r2, #1
 8010f04:	715a      	strb	r2, [r3, #5]
 8010f06:	e000      	b.n	8010f0a <watch+0xda>
					goto	jmp_watch_02;
 8010f08:	46c0      	nop			@ (mov r8, r8)
jmp_watch_02:

				if(timerOffManto != 0){
 8010f0a:	4b46      	ldr	r3, [pc, #280]	@ (8011024 <watch+0x1f4>)
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d000      	beq.n	8010f14 <watch+0xe4>
 8010f12:	e064      	b.n	8010fde <watch+0x1ae>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
				}

//;------------------------- Control del retardo Compresor
				if(!GPIOR0[f_comp]){
 8010f14:	4b44      	ldr	r3, [pc, #272]	@ (8011028 <watch+0x1f8>)
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	2201      	movs	r2, #1
 8010f1a:	4053      	eors	r3, r2
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d107      	bne.n	8010f32 <watch+0x102>
					goto	jmp_watch_03_00;
				}
				if(retzc_ms_compresor != 0){
 8010f22:	4b42      	ldr	r3, [pc, #264]	@ (801102c <watch+0x1fc>)
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d108      	bne.n	8010f3c <watch+0x10c>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
				}
				portX[rel_co] = 1;					// bset		puertoa,#rel_co; /Enciende el compresor    ;RM_20220623  Cambio de puertos para cargas
 8010f2a:	4b3c      	ldr	r3, [pc, #240]	@ (801101c <watch+0x1ec>)
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	701a      	strb	r2, [r3, #0]
				goto jmp_watch_03;					// jra			jmp_watch_03
 8010f30:	e005      	b.n	8010f3e <watch+0x10e>
					goto	jmp_watch_03_00;
 8010f32:	46c0      	nop			@ (mov r8, r8)
jmp_watch_03_00:
				retzc_ms_compresor = tms_retcz_compresor;			// 	mov     retzc_ms_compresor,#tms_retcz_compresor       ;Carga retardo para encendido de compresor
 8010f34:	4b3d      	ldr	r3, [pc, #244]	@ (801102c <watch+0x1fc>)
 8010f36:	22a4      	movs	r2, #164	@ 0xa4
 8010f38:	701a      	strb	r2, [r3, #0]
 8010f3a:	e000      	b.n	8010f3e <watch+0x10e>
					goto	jmp_watch_03;				//jrne    jmp_watch_03                    ;NO, espera a que se cumpla
 8010f3c:	46c0      	nop			@ (mov r8, r8)

jmp_watch_03:

				if(GPIOR0[f_comp]){				//btjt  	GPIOR0,#f_comp,jmp_watch_05;
 8010f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8011028 <watch+0x1f8>)
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10c      	bne.n	8010f60 <watch+0x130>
					goto	jmp_watch_05;
				}
				if(GPIOR1[f_fan]){				//btjt		GPIOR1,#f_fan,jmp_watch_04
 8010f46:	4b36      	ldr	r3, [pc, #216]	@ (8011020 <watch+0x1f0>)
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d103      	bne.n	8010f56 <watch+0x126>
					goto	jmp_watch_04;
				}
				ret_fan_co = 15;					//mov			ret_fan_co,#15;	/ Si, el compresor esta apagado carga retard
 8010f4e:	4b38      	ldr	r3, [pc, #224]	@ (8011030 <watch+0x200>)
 8010f50:	220f      	movs	r2, #15
 8010f52:	701a      	strb	r2, [r3, #0]
				goto	jmp_watch_05;				//jra			jmp_watch_05
 8010f54:	e005      	b.n	8010f62 <watch+0x132>
					goto	jmp_watch_04;
 8010f56:	46c0      	nop			@ (mov r8, r8)
jmp_watch_04:
				ret_fan_co = 0;						//clr			ret_fan_co
 8010f58:	4b35      	ldr	r3, [pc, #212]	@ (8011030 <watch+0x200>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	701a      	strb	r2, [r3, #0]
 8010f5e:	e000      	b.n	8010f62 <watch+0x132>
					goto	jmp_watch_05;
 8010f60:	46c0      	nop			@ (mov r8, r8)
jmp_watch_05:

//;------------------------- Control del retardo deshielo
watch55:		if(!GPIOR0[f_dh]){				//btjf		GPIOR0,#f_dh,jmp_watch_07_00;
 8010f62:	4b31      	ldr	r3, [pc, #196]	@ (8011028 <watch+0x1f8>)
 8010f64:	785b      	ldrb	r3, [r3, #1]
 8010f66:	2201      	movs	r2, #1
 8010f68:	4053      	eors	r3, r2
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d107      	bne.n	8010f80 <watch+0x150>
					goto	jmp_watch_07_00;
				}
				if(retzc_ms_deshielo != 0){				// tnz			retzc_ms_deshielo              ;¿Ya se cumplió el retardo al cruce por cero para el deshielo?
 8010f70:	4b30      	ldr	r3, [pc, #192]	@ (8011034 <watch+0x204>)
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d108      	bne.n	8010f8a <watch+0x15a>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
				}
				portX[rel_dh] = 1 ;						// bset		puertoe,#rel_dh; Enciende el deshielo    ;RM_20220623  Cambio de puertos para cargas
 8010f78:	4b28      	ldr	r3, [pc, #160]	@ (801101c <watch+0x1ec>)
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	711a      	strb	r2, [r3, #4]
				goto jmp_watch_07;			    		// jra			jmp_watch_07
 8010f7e:	e005      	b.n	8010f8c <watch+0x15c>
					goto	jmp_watch_07_00;
 8010f80:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07_00:
				retzc_ms_deshielo = tms_retcz_deshielo;	 	//mov     retzc_ms_deshielo,#tms_retcz_deshielo       ;Carga retardo para encendido de deshielo
 8010f82:	4b2c      	ldr	r3, [pc, #176]	@ (8011034 <watch+0x204>)
 8010f84:	2204      	movs	r2, #4
 8010f86:	701a      	strb	r2, [r3, #0]
 8010f88:	e000      	b.n	8010f8c <watch+0x15c>
					goto	jmp_watch_07;				// jrne    jmp_watch_07                    ;NO, espera a que se cumpla
 8010f8a:	46c0      	nop			@ (mov r8, r8)

jmp_watch_07:

//;------------------------- Control del retardo Lampara
watch60:		if(!GPIOR0[f_lamp]){				//btjf		GPIOR0,#f_lamp,jmp_watch_11_00;
 8010f8c:	4b26      	ldr	r3, [pc, #152]	@ (8011028 <watch+0x1f8>)
 8010f8e:	789b      	ldrb	r3, [r3, #2]
 8010f90:	2201      	movs	r2, #1
 8010f92:	4053      	eors	r3, r2
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d107      	bne.n	8010faa <watch+0x17a>
					goto	jmp_watch_11_00;
				}
				if(retzc_ms_lampara != 0){				//;¿Ya se cumplió el retardo al cruce por cero para lampara?
 8010f9a:	4b27      	ldr	r3, [pc, #156]	@ (8011038 <watch+0x208>)
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d108      	bne.n	8010fb4 <watch+0x184>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
				}
				portX[rel_lz] = 1 ;						// bset		puertoe,#rel_lz; // Manuel 10-Mar-2022	Enciende la lampara   ;RM_20220623  Cambio de puertos para cargas
 8010fa2:	4b1e      	ldr	r3, [pc, #120]	@ (801101c <watch+0x1ec>)
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	709a      	strb	r2, [r3, #2]
				goto	jmp_watch_11;					// jra			jmp_watch_11
 8010fa8:	e005      	b.n	8010fb6 <watch+0x186>
					goto	jmp_watch_11_00;
 8010faa:	46c0      	nop			@ (mov r8, r8)

jmp_watch_11_00:
				retzc_ms_lampara = tms_retcz_lampara;		//	mov     retzc_ms_lampara,#tms_retcz_lampara       ;Carga retardo para encendido de lampara
 8010fac:	4b22      	ldr	r3, [pc, #136]	@ (8011038 <watch+0x208>)
 8010fae:	220f      	movs	r2, #15
 8010fb0:	701a      	strb	r2, [r3, #0]
 8010fb2:	e000      	b.n	8010fb6 <watch+0x186>
					goto	jmp_watch_11;				// jrne    jmp_watch_11                    ;NO, espera a que se cumpla
 8010fb4:	46c0      	nop			@ (mov r8, r8)

//;------------------------- Control del retardo Ventilador
jmp_watch_11:
				if(!GPIOR1[f_fan]){
 8010fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8011020 <watch+0x1f0>)
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	4053      	eors	r3, r2
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d107      	bne.n	8010fd4 <watch+0x1a4>
					goto jmp_watch_12_00;
				}
				if(retzc_ms_ventilador != 0){		//tnz			retzc_ms_ventilador              ;¿Ya se cumplió el retardo al cruce por cero para ventilador?
 8010fc4:	4b1d      	ldr	r3, [pc, #116]	@ (801103c <watch+0x20c>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10a      	bne.n	8010fe2 <watch+0x1b2>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
				}
				portX[rel_fn] = 1 ;					// bset		puertoa,#rel_fn; // Manuel 01-feb-2022	Enciende ventilador
 8010fcc:	4b13      	ldr	r3, [pc, #76]	@ (801101c <watch+0x1ec>)
 8010fce:	2201      	movs	r2, #1
 8010fd0:	70da      	strb	r2, [r3, #3]
				goto jmp_watch_12;					// jra			jmp_watch_12
 8010fd2:	e007      	b.n	8010fe4 <watch+0x1b4>
					goto jmp_watch_12_00;
 8010fd4:	46c0      	nop			@ (mov r8, r8)


jmp_watch_12_00:
				retzc_ms_ventilador = tms_retcz_ventilador;			//		mov     retzc_ms_ventilador,#tms_retcz_ventilador       ;Carga retardo para encendido de ventilador
 8010fd6:	4b19      	ldr	r3, [pc, #100]	@ (801103c <watch+0x20c>)
 8010fd8:	22c5      	movs	r2, #197	@ 0xc5
 8010fda:	701a      	strb	r2, [r3, #0]
//;------------------------- Revision de los Option Bytes




}
 8010fdc:	e002      	b.n	8010fe4 <watch+0x1b4>
					goto	jmp_watch_12;			//jrne		jmp_watch_12;			/ si hay tiempo de apagado de mantenimiento manten las cargas apagadas.
 8010fde:	46c0      	nop			@ (mov r8, r8)
 8010fe0:	e000      	b.n	8010fe4 <watch+0x1b4>
					 goto jmp_watch_12;				//	jrne    jmp_watch_12                    ;NO, espera a que se cumpla
 8010fe2:	46c0      	nop			@ (mov r8, r8)
}
 8010fe4:	46c0      	nop			@ (mov r8, r8)
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	b002      	add	sp, #8
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	200010fc 	.word	0x200010fc
 8010ff0:	20000f4c 	.word	0x20000f4c
 8010ff4:	200010fa 	.word	0x200010fa
 8010ff8:	20000f44 	.word	0x20000f44
 8010ffc:	20000f3a 	.word	0x20000f3a
 8011000:	20000ee8 	.word	0x20000ee8
 8011004:	20000e19 	.word	0x20000e19
 8011008:	20000e1c 	.word	0x20000e1c
 801100c:	20000edc 	.word	0x20000edc
 8011010:	200010ec 	.word	0x200010ec
 8011014:	20000f50 	.word	0x20000f50
 8011018:	20000e04 	.word	0x20000e04
 801101c:	20000b58 	.word	0x20000b58
 8011020:	20000be0 	.word	0x20000be0
 8011024:	20000c51 	.word	0x20000c51
 8011028:	20000ba4 	.word	0x20000ba4
 801102c:	20000c56 	.word	0x20000c56
 8011030:	20000b74 	.word	0x20000b74
 8011034:	20000c57 	.word	0x20000c57
 8011038:	20000c59 	.word	0x20000c59
 801103c:	20000c58 	.word	0x20000c58

08011040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011040:	480d      	ldr	r0, [pc, #52]	@ (8011078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011042:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011044:	f7fb f832 	bl	800c0ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011048:	480c      	ldr	r0, [pc, #48]	@ (801107c <LoopForever+0x6>)
  ldr r1, =_edata
 801104a:	490d      	ldr	r1, [pc, #52]	@ (8011080 <LoopForever+0xa>)
  ldr r2, =_sidata
 801104c:	4a0d      	ldr	r2, [pc, #52]	@ (8011084 <LoopForever+0xe>)
  movs r3, #0
 801104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011050:	e002      	b.n	8011058 <LoopCopyDataInit>

08011052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011056:	3304      	adds	r3, #4

08011058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801105c:	d3f9      	bcc.n	8011052 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801105e:	4a0a      	ldr	r2, [pc, #40]	@ (8011088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011060:	4c0a      	ldr	r4, [pc, #40]	@ (801108c <LoopForever+0x16>)
  movs r3, #0
 8011062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011064:	e001      	b.n	801106a <LoopFillZerobss>

08011066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011068:	3204      	adds	r2, #4

0801106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801106c:	d3fb      	bcc.n	8011066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801106e:	f009 febd 	bl	801adec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011072:	f7f8 fa01 	bl	8009478 <main>

08011076 <LoopForever>:

LoopForever:
  b LoopForever
 8011076:	e7fe      	b.n	8011076 <LoopForever>
  ldr   r0, =_estack
 8011078:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 801107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011080:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8011084:	0801b424 	.word	0x0801b424
  ldr r2, =_sbss
 8011088:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 801108c:	200012d4 	.word	0x200012d4

08011090 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011090:	e7fe      	b.n	8011090 <ADC_COMP1_2_IRQHandler>

08011092 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011098:	1dfb      	adds	r3, r7, #7
 801109a:	2200      	movs	r2, #0
 801109c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801109e:	2003      	movs	r0, #3
 80110a0:	f000 f80e 	bl	80110c0 <HAL_InitTick>
 80110a4:	1e03      	subs	r3, r0, #0
 80110a6:	d003      	beq.n	80110b0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80110a8:	1dfb      	adds	r3, r7, #7
 80110aa:	2201      	movs	r2, #1
 80110ac:	701a      	strb	r2, [r3, #0]
 80110ae:	e001      	b.n	80110b4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80110b0:	f7fa fb5a 	bl	800b768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80110b4:	1dfb      	adds	r3, r7, #7
 80110b6:	781b      	ldrb	r3, [r3, #0]
}
 80110b8:	0018      	movs	r0, r3
 80110ba:	46bd      	mov	sp, r7
 80110bc:	b002      	add	sp, #8
 80110be:	bd80      	pop	{r7, pc}

080110c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80110c0:	b590      	push	{r4, r7, lr}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80110c8:	230f      	movs	r3, #15
 80110ca:	18fb      	adds	r3, r7, r3
 80110cc:	2200      	movs	r2, #0
 80110ce:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80110d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011148 <HAL_InitTick+0x88>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d02b      	beq.n	8011130 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80110d8:	4b1c      	ldr	r3, [pc, #112]	@ (801114c <HAL_InitTick+0x8c>)
 80110da:	681c      	ldr	r4, [r3, #0]
 80110dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011148 <HAL_InitTick+0x88>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	0019      	movs	r1, r3
 80110e2:	23fa      	movs	r3, #250	@ 0xfa
 80110e4:	0098      	lsls	r0, r3, #2
 80110e6:	f7ef f817 	bl	8000118 <__udivsi3>
 80110ea:	0003      	movs	r3, r0
 80110ec:	0019      	movs	r1, r3
 80110ee:	0020      	movs	r0, r4
 80110f0:	f7ef f812 	bl	8000118 <__udivsi3>
 80110f4:	0003      	movs	r3, r0
 80110f6:	0018      	movs	r0, r3
 80110f8:	f001 fab7 	bl	801266a <HAL_SYSTICK_Config>
 80110fc:	1e03      	subs	r3, r0, #0
 80110fe:	d112      	bne.n	8011126 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b03      	cmp	r3, #3
 8011104:	d80a      	bhi.n	801111c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011106:	6879      	ldr	r1, [r7, #4]
 8011108:	2301      	movs	r3, #1
 801110a:	425b      	negs	r3, r3
 801110c:	2200      	movs	r2, #0
 801110e:	0018      	movs	r0, r3
 8011110:	f001 fa76 	bl	8012600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011114:	4b0e      	ldr	r3, [pc, #56]	@ (8011150 <HAL_InitTick+0x90>)
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	601a      	str	r2, [r3, #0]
 801111a:	e00d      	b.n	8011138 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 801111c:	230f      	movs	r3, #15
 801111e:	18fb      	adds	r3, r7, r3
 8011120:	2201      	movs	r2, #1
 8011122:	701a      	strb	r2, [r3, #0]
 8011124:	e008      	b.n	8011138 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8011126:	230f      	movs	r3, #15
 8011128:	18fb      	adds	r3, r7, r3
 801112a:	2201      	movs	r2, #1
 801112c:	701a      	strb	r2, [r3, #0]
 801112e:	e003      	b.n	8011138 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8011130:	230f      	movs	r3, #15
 8011132:	18fb      	adds	r3, r7, r3
 8011134:	2201      	movs	r2, #1
 8011136:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8011138:	230f      	movs	r3, #15
 801113a:	18fb      	adds	r3, r7, r3
 801113c:	781b      	ldrb	r3, [r3, #0]
}
 801113e:	0018      	movs	r0, r3
 8011140:	46bd      	mov	sp, r7
 8011142:	b005      	add	sp, #20
 8011144:	bd90      	pop	{r4, r7, pc}
 8011146:	46c0      	nop			@ (mov r8, r8)
 8011148:	20000258 	.word	0x20000258
 801114c:	20000250 	.word	0x20000250
 8011150:	20000254 	.word	0x20000254

08011154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011158:	4b04      	ldr	r3, [pc, #16]	@ (801116c <HAL_IncTick+0x18>)
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	4b04      	ldr	r3, [pc, #16]	@ (8011170 <HAL_IncTick+0x1c>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	18d2      	adds	r2, r2, r3
 8011162:	4b02      	ldr	r3, [pc, #8]	@ (801116c <HAL_IncTick+0x18>)
 8011164:	601a      	str	r2, [r3, #0]
}
 8011166:	46c0      	nop			@ (mov r8, r8)
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	2000116c 	.word	0x2000116c
 8011170:	20000258 	.word	0x20000258

08011174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	af00      	add	r7, sp, #0
  return uwTick;
 8011178:	4b02      	ldr	r3, [pc, #8]	@ (8011184 <HAL_GetTick+0x10>)
 801117a:	681b      	ldr	r3, [r3, #0]
}
 801117c:	0018      	movs	r0, r3
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	46c0      	nop			@ (mov r8, r8)
 8011184:	2000116c 	.word	0x2000116c

08011188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011190:	f7ff fff0 	bl	8011174 <HAL_GetTick>
 8011194:	0003      	movs	r3, r0
 8011196:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	3301      	adds	r3, #1
 80111a0:	d004      	beq.n	80111ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80111a2:	4b09      	ldr	r3, [pc, #36]	@ (80111c8 <HAL_Delay+0x40>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	18d3      	adds	r3, r2, r3
 80111aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80111ac:	46c0      	nop			@ (mov r8, r8)
 80111ae:	f7ff ffe1 	bl	8011174 <HAL_GetTick>
 80111b2:	0002      	movs	r2, r0
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d8f7      	bhi.n	80111ae <HAL_Delay+0x26>
  {
  }
}
 80111be:	46c0      	nop			@ (mov r8, r8)
 80111c0:	46c0      	nop			@ (mov r8, r8)
 80111c2:	46bd      	mov	sp, r7
 80111c4:	b004      	add	sp, #16
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	20000258 	.word	0x20000258

080111cc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4a05      	ldr	r2, [pc, #20]	@ (80111f0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80111dc:	401a      	ands	r2, r3
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	431a      	orrs	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	601a      	str	r2, [r3, #0]
}
 80111e6:	46c0      	nop			@ (mov r8, r8)
 80111e8:	46bd      	mov	sp, r7
 80111ea:	b002      	add	sp, #8
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	46c0      	nop			@ (mov r8, r8)
 80111f0:	fe3fffff 	.word	0xfe3fffff

080111f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	23e0      	movs	r3, #224	@ 0xe0
 8011202:	045b      	lsls	r3, r3, #17
 8011204:	4013      	ands	r3, r2
}
 8011206:	0018      	movs	r0, r3
 8011208:	46bd      	mov	sp, r7
 801120a:	b002      	add	sp, #8
 801120c:	bd80      	pop	{r7, pc}

0801120e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b084      	sub	sp, #16
 8011212:	af00      	add	r7, sp, #0
 8011214:	60f8      	str	r0, [r7, #12]
 8011216:	60b9      	str	r1, [r7, #8]
 8011218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	695b      	ldr	r3, [r3, #20]
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	2104      	movs	r1, #4
 8011222:	400a      	ands	r2, r1
 8011224:	2107      	movs	r1, #7
 8011226:	4091      	lsls	r1, r2
 8011228:	000a      	movs	r2, r1
 801122a:	43d2      	mvns	r2, r2
 801122c:	401a      	ands	r2, r3
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	2104      	movs	r1, #4
 8011232:	400b      	ands	r3, r1
 8011234:	6879      	ldr	r1, [r7, #4]
 8011236:	4099      	lsls	r1, r3
 8011238:	000b      	movs	r3, r1
 801123a:	431a      	orrs	r2, r3
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8011240:	46c0      	nop			@ (mov r8, r8)
 8011242:	46bd      	mov	sp, r7
 8011244:	b004      	add	sp, #16
 8011246:	bd80      	pop	{r7, pc}

08011248 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	683a      	ldr	r2, [r7, #0]
 8011258:	2104      	movs	r1, #4
 801125a:	400a      	ands	r2, r1
 801125c:	2107      	movs	r1, #7
 801125e:	4091      	lsls	r1, r2
 8011260:	000a      	movs	r2, r1
 8011262:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	2104      	movs	r1, #4
 8011268:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 801126a:	40da      	lsrs	r2, r3
 801126c:	0013      	movs	r3, r2
}
 801126e:	0018      	movs	r0, r3
 8011270:	46bd      	mov	sp, r7
 8011272:	b002      	add	sp, #8
 8011274:	bd80      	pop	{r7, pc}

08011276 <LL_ADC_REG_SetSequencerRanks>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	b084      	sub	sp, #16
 801127a:	af00      	add	r7, sp, #0
 801127c:	60f8      	str	r0, [r7, #12]
 801127e:	60b9      	str	r1, [r7, #8]
 8011280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	211f      	movs	r1, #31
 801128a:	400a      	ands	r2, r1
 801128c:	210f      	movs	r1, #15
 801128e:	4091      	lsls	r1, r2
 8011290:	000a      	movs	r2, r1
 8011292:	43d2      	mvns	r2, r2
 8011294:	401a      	ands	r2, r3
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	0e9b      	lsrs	r3, r3, #26
 801129a:	210f      	movs	r1, #15
 801129c:	4019      	ands	r1, r3
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	201f      	movs	r0, #31
 80112a2:	4003      	ands	r3, r0
 80112a4:	4099      	lsls	r1, r3
 80112a6:	000b      	movs	r3, r1
 80112a8:	431a      	orrs	r2, r3
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80112ae:	46c0      	nop			@ (mov r8, r8)
 80112b0:	46bd      	mov	sp, r7
 80112b2:	b004      	add	sp, #16
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <LL_ADC_REG_SetSequencerChAdd>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80112b6:	b580      	push	{r7, lr}
 80112b8:	b082      	sub	sp, #8
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
 80112be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	025b      	lsls	r3, r3, #9
 80112c8:	0a5b      	lsrs	r3, r3, #9
 80112ca:	431a      	orrs	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80112d0:	46c0      	nop			@ (mov r8, r8)
 80112d2:	46bd      	mov	sp, r7
 80112d4:	b002      	add	sp, #8
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <LL_ADC_REG_SetSequencerChRem>:
  *         @arg @ref LL_ADC_CHANNEL_VBAT
  *         @arg @ref LL_ADC_CHANNEL_DACCH1
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112e6:	683a      	ldr	r2, [r7, #0]
 80112e8:	0252      	lsls	r2, r2, #9
 80112ea:	0a52      	lsrs	r2, r2, #9
 80112ec:	43d2      	mvns	r2, r2
 80112ee:	401a      	ands	r2, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80112f4:	46c0      	nop			@ (mov r8, r8)
 80112f6:	46bd      	mov	sp, r7
 80112f8:	b002      	add	sp, #8
 80112fa:	bd80      	pop	{r7, pc}

080112fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	60b9      	str	r1, [r7, #8]
 8011306:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	68ba      	ldr	r2, [r7, #8]
 801130e:	0212      	lsls	r2, r2, #8
 8011310:	43d2      	mvns	r2, r2
 8011312:	401a      	ands	r2, r3
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	021b      	lsls	r3, r3, #8
 8011318:	6879      	ldr	r1, [r7, #4]
 801131a:	400b      	ands	r3, r1
 801131c:	4904      	ldr	r1, [pc, #16]	@ (8011330 <LL_ADC_SetChannelSamplingTime+0x34>)
 801131e:	400b      	ands	r3, r1
 8011320:	431a      	orrs	r2, r3
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8011326:	46c0      	nop			@ (mov r8, r8)
 8011328:	46bd      	mov	sp, r7
 801132a:	b004      	add	sp, #16
 801132c:	bd80      	pop	{r7, pc}
 801132e:	46c0      	nop			@ (mov r8, r8)
 8011330:	7fffff00 	.word	0x7fffff00

08011334 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b086      	sub	sp, #24
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	4a11      	ldr	r2, [pc, #68]	@ (8011388 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 8011344:	4293      	cmp	r3, r2
 8011346:	d103      	bne.n	8011350 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	330c      	adds	r3, #12
 801134c:	617b      	str	r3, [r7, #20]
 801134e:	e009      	b.n	8011364 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	33a0      	adds	r3, #160	@ 0xa0
 8011354:	0019      	movs	r1, r3
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	0d5b      	lsrs	r3, r3, #21
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	2204      	movs	r2, #4
 801135e:	4013      	ands	r3, r2
 8011360:	18cb      	adds	r3, r1, r3
 8011362:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	68ba      	ldr	r2, [r7, #8]
 801136a:	4908      	ldr	r1, [pc, #32]	@ (801138c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 801136c:	400a      	ands	r2, r1
 801136e:	43d2      	mvns	r2, r2
 8011370:	401a      	ands	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	68b9      	ldr	r1, [r7, #8]
 8011376:	400b      	ands	r3, r1
 8011378:	431a      	orrs	r2, r3
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 801137e:	46c0      	nop			@ (mov r8, r8)
 8011380:	46bd      	mov	sp, r7
 8011382:	b006      	add	sp, #24
 8011384:	bd80      	pop	{r7, pc}
 8011386:	46c0      	nop			@ (mov r8, r8)
 8011388:	7cc00000 	.word	0x7cc00000
 801138c:	7cc7ffff 	.word	0x7cc7ffff

08011390 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	607a      	str	r2, [r7, #4]
 801139c:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	3320      	adds	r3, #32
 80113a2:	0018      	movs	r0, r3
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	0d1b      	lsrs	r3, r3, #20
 80113a8:	2203      	movs	r2, #3
 80113aa:	401a      	ands	r2, r3
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	0d5b      	lsrs	r3, r3, #21
 80113b0:	2101      	movs	r1, #1
 80113b2:	400b      	ands	r3, r1
 80113b4:	18d3      	adds	r3, r2, r3
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	18c3      	adds	r3, r0, r3
 80113ba:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a06      	ldr	r2, [pc, #24]	@ (80113dc <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 80113c2:	401a      	ands	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	0419      	lsls	r1, r3, #16
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	430b      	orrs	r3, r1
 80113cc:	431a      	orrs	r2, r3
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80113d2:	46c0      	nop			@ (mov r8, r8)
 80113d4:	46bd      	mov	sp, r7
 80113d6:	b006      	add	sp, #24
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	46c0      	nop			@ (mov r8, r8)
 80113dc:	f000f000 	.word	0xf000f000

080113e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	689b      	ldr	r3, [r3, #8]
 80113ec:	4a05      	ldr	r2, [pc, #20]	@ (8011404 <LL_ADC_EnableInternalRegulator+0x24>)
 80113ee:	4013      	ands	r3, r2
 80113f0:	2280      	movs	r2, #128	@ 0x80
 80113f2:	0552      	lsls	r2, r2, #21
 80113f4:	431a      	orrs	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80113fa:	46c0      	nop			@ (mov r8, r8)
 80113fc:	46bd      	mov	sp, r7
 80113fe:	b002      	add	sp, #8
 8011400:	bd80      	pop	{r7, pc}
 8011402:	46c0      	nop			@ (mov r8, r8)
 8011404:	6fffffe8 	.word	0x6fffffe8

08011408 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	689a      	ldr	r2, [r3, #8]
 8011414:	2380      	movs	r3, #128	@ 0x80
 8011416:	055b      	lsls	r3, r3, #21
 8011418:	401a      	ands	r2, r3
 801141a:	2380      	movs	r3, #128	@ 0x80
 801141c:	055b      	lsls	r3, r3, #21
 801141e:	429a      	cmp	r2, r3
 8011420:	d101      	bne.n	8011426 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8011422:	2301      	movs	r3, #1
 8011424:	e000      	b.n	8011428 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8011426:	2300      	movs	r3, #0
}
 8011428:	0018      	movs	r0, r3
 801142a:	46bd      	mov	sp, r7
 801142c:	b002      	add	sp, #8
 801142e:	bd80      	pop	{r7, pc}

08011430 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	4a04      	ldr	r2, [pc, #16]	@ (8011450 <LL_ADC_Enable+0x20>)
 801143e:	4013      	ands	r3, r2
 8011440:	2201      	movs	r2, #1
 8011442:	431a      	orrs	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8011448:	46c0      	nop			@ (mov r8, r8)
 801144a:	46bd      	mov	sp, r7
 801144c:	b002      	add	sp, #8
 801144e:	bd80      	pop	{r7, pc}
 8011450:	7fffffe8 	.word	0x7fffffe8

08011454 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	689b      	ldr	r3, [r3, #8]
 8011460:	4a04      	ldr	r2, [pc, #16]	@ (8011474 <LL_ADC_Disable+0x20>)
 8011462:	4013      	ands	r3, r2
 8011464:	2202      	movs	r2, #2
 8011466:	431a      	orrs	r2, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 801146c:	46c0      	nop			@ (mov r8, r8)
 801146e:	46bd      	mov	sp, r7
 8011470:	b002      	add	sp, #8
 8011472:	bd80      	pop	{r7, pc}
 8011474:	7fffffe8 	.word	0x7fffffe8

08011478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	689b      	ldr	r3, [r3, #8]
 8011484:	2201      	movs	r2, #1
 8011486:	4013      	ands	r3, r2
 8011488:	2b01      	cmp	r3, #1
 801148a:	d101      	bne.n	8011490 <LL_ADC_IsEnabled+0x18>
 801148c:	2301      	movs	r3, #1
 801148e:	e000      	b.n	8011492 <LL_ADC_IsEnabled+0x1a>
 8011490:	2300      	movs	r3, #0
}
 8011492:	0018      	movs	r0, r3
 8011494:	46bd      	mov	sp, r7
 8011496:	b002      	add	sp, #8
 8011498:	bd80      	pop	{r7, pc}

0801149a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 801149a:	b580      	push	{r7, lr}
 801149c:	b082      	sub	sp, #8
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	2202      	movs	r2, #2
 80114a8:	4013      	ands	r3, r2
 80114aa:	2b02      	cmp	r3, #2
 80114ac:	d101      	bne.n	80114b2 <LL_ADC_IsDisableOngoing+0x18>
 80114ae:	2301      	movs	r3, #1
 80114b0:	e000      	b.n	80114b4 <LL_ADC_IsDisableOngoing+0x1a>
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	0018      	movs	r0, r3
 80114b6:	46bd      	mov	sp, r7
 80114b8:	b002      	add	sp, #8
 80114ba:	bd80      	pop	{r7, pc}

080114bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	689b      	ldr	r3, [r3, #8]
 80114c8:	2204      	movs	r2, #4
 80114ca:	4013      	ands	r3, r2
 80114cc:	2b04      	cmp	r3, #4
 80114ce:	d101      	bne.n	80114d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e000      	b.n	80114d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80114d4:	2300      	movs	r3, #0
}
 80114d6:	0018      	movs	r0, r3
 80114d8:	46bd      	mov	sp, r7
 80114da:	b002      	add	sp, #8
 80114dc:	bd80      	pop	{r7, pc}

080114de <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b082      	sub	sp, #8
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2280      	movs	r2, #128	@ 0x80
 80114ea:	601a      	str	r2, [r3, #0]
}
 80114ec:	46c0      	nop			@ (mov r8, r8)
 80114ee:	46bd      	mov	sp, r7
 80114f0:	b002      	add	sp, #8
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2280      	movs	r2, #128	@ 0x80
 8011500:	0052      	lsls	r2, r2, #1
 8011502:	601a      	str	r2, [r3, #0]
}
 8011504:	46c0      	nop			@ (mov r8, r8)
 8011506:	46bd      	mov	sp, r7
 8011508:	b002      	add	sp, #8
 801150a:	bd80      	pop	{r7, pc}

0801150c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2280      	movs	r2, #128	@ 0x80
 8011518:	0092      	lsls	r2, r2, #2
 801151a:	601a      	str	r2, [r3, #0]
}
 801151c:	46c0      	nop			@ (mov r8, r8)
 801151e:	46bd      	mov	sp, r7
 8011520:	b002      	add	sp, #8
 8011522:	bd80      	pop	{r7, pc}

08011524 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	2280      	movs	r2, #128	@ 0x80
 8011532:	431a      	orrs	r2, r3
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	605a      	str	r2, [r3, #4]
}
 8011538:	46c0      	nop			@ (mov r8, r8)
 801153a:	46bd      	mov	sp, r7
 801153c:	b002      	add	sp, #8
 801153e:	bd80      	pop	{r7, pc}

08011540 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	2280      	movs	r2, #128	@ 0x80
 801154e:	0052      	lsls	r2, r2, #1
 8011550:	431a      	orrs	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	605a      	str	r2, [r3, #4]
}
 8011556:	46c0      	nop			@ (mov r8, r8)
 8011558:	46bd      	mov	sp, r7
 801155a:	b002      	add	sp, #8
 801155c:	bd80      	pop	{r7, pc}

0801155e <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b082      	sub	sp, #8
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	2280      	movs	r2, #128	@ 0x80
 801156c:	0092      	lsls	r2, r2, #2
 801156e:	431a      	orrs	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	605a      	str	r2, [r3, #4]
}
 8011574:	46c0      	nop			@ (mov r8, r8)
 8011576:	46bd      	mov	sp, r7
 8011578:	b002      	add	sp, #8
 801157a:	bd80      	pop	{r7, pc}

0801157c <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	2280      	movs	r2, #128	@ 0x80
 801158a:	4393      	bics	r3, r2
 801158c:	001a      	movs	r2, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	605a      	str	r2, [r3, #4]
}
 8011592:	46c0      	nop			@ (mov r8, r8)
 8011594:	46bd      	mov	sp, r7
 8011596:	b002      	add	sp, #8
 8011598:	bd80      	pop	{r7, pc}
	...

0801159c <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	4a03      	ldr	r2, [pc, #12]	@ (80115b8 <LL_ADC_DisableIT_AWD2+0x1c>)
 80115aa:	401a      	ands	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	605a      	str	r2, [r3, #4]
}
 80115b0:	46c0      	nop			@ (mov r8, r8)
 80115b2:	46bd      	mov	sp, r7
 80115b4:	b002      	add	sp, #8
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	fffffeff 	.word	0xfffffeff

080115bc <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	4a03      	ldr	r2, [pc, #12]	@ (80115d8 <LL_ADC_DisableIT_AWD3+0x1c>)
 80115ca:	401a      	ands	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	605a      	str	r2, [r3, #4]
}
 80115d0:	46c0      	nop			@ (mov r8, r8)
 80115d2:	46bd      	mov	sp, r7
 80115d4:	b002      	add	sp, #8
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	fffffdff 	.word	0xfffffdff

080115dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b088      	sub	sp, #32
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80115e4:	231f      	movs	r3, #31
 80115e6:	18fb      	adds	r3, r7, r3
 80115e8:	2200      	movs	r2, #0
 80115ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80115ec:	2300      	movs	r3, #0
 80115ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80115f0:	2300      	movs	r3, #0
 80115f2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80115f4:	2300      	movs	r3, #0
 80115f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d101      	bne.n	8011602 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80115fe:	2301      	movs	r3, #1
 8011600:	e17f      	b.n	8011902 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011606:	2b00      	cmp	r3, #0
 8011608:	d10a      	bne.n	8011620 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	0018      	movs	r0, r3
 801160e:	f7fa f8cf 	bl	800b7b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2254      	movs	r2, #84	@ 0x54
 801161c:	2100      	movs	r1, #0
 801161e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	0018      	movs	r0, r3
 8011626:	f7ff feef 	bl	8011408 <LL_ADC_IsInternalRegulatorEnabled>
 801162a:	1e03      	subs	r3, r0, #0
 801162c:	d115      	bne.n	801165a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	0018      	movs	r0, r3
 8011634:	f7ff fed4 	bl	80113e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8011638:	4bb4      	ldr	r3, [pc, #720]	@ (801190c <HAL_ADC_Init+0x330>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	49b4      	ldr	r1, [pc, #720]	@ (8011910 <HAL_ADC_Init+0x334>)
 801163e:	0018      	movs	r0, r3
 8011640:	f7ee fd6a 	bl	8000118 <__udivsi3>
 8011644:	0003      	movs	r3, r0
 8011646:	3301      	adds	r3, #1
 8011648:	005b      	lsls	r3, r3, #1
 801164a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 801164c:	e002      	b.n	8011654 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	3b01      	subs	r3, #1
 8011652:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d1f9      	bne.n	801164e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	0018      	movs	r0, r3
 8011660:	f7ff fed2 	bl	8011408 <LL_ADC_IsInternalRegulatorEnabled>
 8011664:	1e03      	subs	r3, r0, #0
 8011666:	d10f      	bne.n	8011688 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801166c:	2210      	movs	r2, #16
 801166e:	431a      	orrs	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011678:	2201      	movs	r2, #1
 801167a:	431a      	orrs	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8011680:	231f      	movs	r3, #31
 8011682:	18fb      	adds	r3, r7, r3
 8011684:	2201      	movs	r2, #1
 8011686:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	0018      	movs	r0, r3
 801168e:	f7ff ff15 	bl	80114bc <LL_ADC_REG_IsConversionOngoing>
 8011692:	0003      	movs	r3, r0
 8011694:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801169a:	2210      	movs	r2, #16
 801169c:	4013      	ands	r3, r2
 801169e:	d000      	beq.n	80116a2 <HAL_ADC_Init+0xc6>
 80116a0:	e122      	b.n	80118e8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d000      	beq.n	80116aa <HAL_ADC_Init+0xce>
 80116a8:	e11e      	b.n	80118e8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116ae:	4a99      	ldr	r2, [pc, #612]	@ (8011914 <HAL_ADC_Init+0x338>)
 80116b0:	4013      	ands	r3, r2
 80116b2:	2202      	movs	r2, #2
 80116b4:	431a      	orrs	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	0018      	movs	r0, r3
 80116c0:	f7ff feda 	bl	8011478 <LL_ADC_IsEnabled>
 80116c4:	1e03      	subs	r3, r0, #0
 80116c6:	d000      	beq.n	80116ca <HAL_ADC_Init+0xee>
 80116c8:	e0ad      	b.n	8011826 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	7e1b      	ldrb	r3, [r3, #24]
 80116d2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80116d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	7e5b      	ldrb	r3, [r3, #25]
 80116da:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80116dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	7e9b      	ldrb	r3, [r3, #26]
 80116e2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80116e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d002      	beq.n	80116f4 <HAL_ADC_Init+0x118>
 80116ee:	2380      	movs	r3, #128	@ 0x80
 80116f0:	015b      	lsls	r3, r3, #5
 80116f2:	e000      	b.n	80116f6 <HAL_ADC_Init+0x11a>
 80116f4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80116f6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80116fc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	691b      	ldr	r3, [r3, #16]
 8011702:	2b00      	cmp	r3, #0
 8011704:	da04      	bge.n	8011710 <HAL_ADC_Init+0x134>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	005b      	lsls	r3, r3, #1
 801170c:	085b      	lsrs	r3, r3, #1
 801170e:	e001      	b.n	8011714 <HAL_ADC_Init+0x138>
 8011710:	2380      	movs	r3, #128	@ 0x80
 8011712:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8011714:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	212c      	movs	r1, #44	@ 0x2c
 801171a:	5c5b      	ldrb	r3, [r3, r1]
 801171c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 801171e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8011720:	69ba      	ldr	r2, [r7, #24]
 8011722:	4313      	orrs	r3, r2
 8011724:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2220      	movs	r2, #32
 801172a:	5c9b      	ldrb	r3, [r3, r2]
 801172c:	2b01      	cmp	r3, #1
 801172e:	d115      	bne.n	801175c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	7e9b      	ldrb	r3, [r3, #26]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d105      	bne.n	8011744 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8011738:	69bb      	ldr	r3, [r7, #24]
 801173a:	2280      	movs	r2, #128	@ 0x80
 801173c:	0252      	lsls	r2, r2, #9
 801173e:	4313      	orrs	r3, r2
 8011740:	61bb      	str	r3, [r7, #24]
 8011742:	e00b      	b.n	801175c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011748:	2220      	movs	r2, #32
 801174a:	431a      	orrs	r2, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011754:	2201      	movs	r2, #1
 8011756:	431a      	orrs	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00a      	beq.n	801177a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011768:	23e0      	movs	r3, #224	@ 0xe0
 801176a:	005b      	lsls	r3, r3, #1
 801176c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8011772:	4313      	orrs	r3, r2
 8011774:	69ba      	ldr	r2, [r7, #24]
 8011776:	4313      	orrs	r3, r2
 8011778:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	4a65      	ldr	r2, [pc, #404]	@ (8011918 <HAL_ADC_Init+0x33c>)
 8011782:	4013      	ands	r3, r2
 8011784:	0019      	movs	r1, r3
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	69ba      	ldr	r2, [r7, #24]
 801178c:	430a      	orrs	r2, r1
 801178e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	0f9b      	lsrs	r3, r3, #30
 8011796:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 801179c:	4313      	orrs	r3, r2
 801179e:	697a      	ldr	r2, [r7, #20]
 80117a0:	4313      	orrs	r3, r2
 80117a2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	223c      	movs	r2, #60	@ 0x3c
 80117a8:	5c9b      	ldrb	r3, [r3, r2]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	d111      	bne.n	80117d2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	0f9b      	lsrs	r3, r3, #30
 80117b4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80117ba:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80117c0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80117c6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	4313      	orrs	r3, r2
 80117cc:	2201      	movs	r2, #1
 80117ce:	4313      	orrs	r3, r2
 80117d0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	691b      	ldr	r3, [r3, #16]
 80117d8:	4a50      	ldr	r2, [pc, #320]	@ (801191c <HAL_ADC_Init+0x340>)
 80117da:	4013      	ands	r3, r2
 80117dc:	0019      	movs	r1, r3
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	697a      	ldr	r2, [r7, #20]
 80117e4:	430a      	orrs	r2, r1
 80117e6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	23c0      	movs	r3, #192	@ 0xc0
 80117ee:	061b      	lsls	r3, r3, #24
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d018      	beq.n	8011826 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80117f8:	2380      	movs	r3, #128	@ 0x80
 80117fa:	05db      	lsls	r3, r3, #23
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d012      	beq.n	8011826 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8011804:	2380      	movs	r3, #128	@ 0x80
 8011806:	061b      	lsls	r3, r3, #24
 8011808:	429a      	cmp	r2, r3
 801180a:	d00c      	beq.n	8011826 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 801180c:	4b44      	ldr	r3, [pc, #272]	@ (8011920 <HAL_ADC_Init+0x344>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4a44      	ldr	r2, [pc, #272]	@ (8011924 <HAL_ADC_Init+0x348>)
 8011812:	4013      	ands	r3, r2
 8011814:	0019      	movs	r1, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	685a      	ldr	r2, [r3, #4]
 801181a:	23f0      	movs	r3, #240	@ 0xf0
 801181c:	039b      	lsls	r3, r3, #14
 801181e:	401a      	ands	r2, r3
 8011820:	4b3f      	ldr	r3, [pc, #252]	@ (8011920 <HAL_ADC_Init+0x344>)
 8011822:	430a      	orrs	r2, r1
 8011824:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6818      	ldr	r0, [r3, #0]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801182e:	001a      	movs	r2, r3
 8011830:	2100      	movs	r1, #0
 8011832:	f7ff fcec 	bl	801120e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6818      	ldr	r0, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801183e:	493a      	ldr	r1, [pc, #232]	@ (8011928 <HAL_ADC_Init+0x34c>)
 8011840:	001a      	movs	r2, r3
 8011842:	f7ff fce4 	bl	801120e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	691b      	ldr	r3, [r3, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d109      	bne.n	8011862 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2110      	movs	r1, #16
 801185a:	4249      	negs	r1, r1
 801185c:	430a      	orrs	r2, r1
 801185e:	629a      	str	r2, [r3, #40]	@ 0x28
 8011860:	e018      	b.n	8011894 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	691a      	ldr	r2, [r3, #16]
 8011866:	2380      	movs	r3, #128	@ 0x80
 8011868:	039b      	lsls	r3, r3, #14
 801186a:	429a      	cmp	r2, r3
 801186c:	d112      	bne.n	8011894 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	3b01      	subs	r3, #1
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	221c      	movs	r2, #28
 801187e:	4013      	ands	r3, r2
 8011880:	2210      	movs	r2, #16
 8011882:	4252      	negs	r2, r2
 8011884:	409a      	lsls	r2, r3
 8011886:	0011      	movs	r1, r2
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	430a      	orrs	r2, r1
 8011892:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2100      	movs	r1, #0
 801189a:	0018      	movs	r0, r3
 801189c:	f7ff fcd4 	bl	8011248 <LL_ADC_GetSamplingTimeCommonChannels>
 80118a0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d10b      	bne.n	80118c2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118b4:	2203      	movs	r2, #3
 80118b6:	4393      	bics	r3, r2
 80118b8:	2201      	movs	r2, #1
 80118ba:	431a      	orrs	r2, r3
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80118c0:	e01c      	b.n	80118fc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118c6:	2212      	movs	r2, #18
 80118c8:	4393      	bics	r3, r2
 80118ca:	2210      	movs	r2, #16
 80118cc:	431a      	orrs	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80118d6:	2201      	movs	r2, #1
 80118d8:	431a      	orrs	r2, r3
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80118de:	231f      	movs	r3, #31
 80118e0:	18fb      	adds	r3, r7, r3
 80118e2:	2201      	movs	r2, #1
 80118e4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80118e6:	e009      	b.n	80118fc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118ec:	2210      	movs	r2, #16
 80118ee:	431a      	orrs	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80118f4:	231f      	movs	r3, #31
 80118f6:	18fb      	adds	r3, r7, r3
 80118f8:	2201      	movs	r2, #1
 80118fa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80118fc:	231f      	movs	r3, #31
 80118fe:	18fb      	adds	r3, r7, r3
 8011900:	781b      	ldrb	r3, [r3, #0]
}
 8011902:	0018      	movs	r0, r3
 8011904:	46bd      	mov	sp, r7
 8011906:	b008      	add	sp, #32
 8011908:	bd80      	pop	{r7, pc}
 801190a:	46c0      	nop			@ (mov r8, r8)
 801190c:	20000250 	.word	0x20000250
 8011910:	00030d40 	.word	0x00030d40
 8011914:	fffffefd 	.word	0xfffffefd
 8011918:	ffde0201 	.word	0xffde0201
 801191c:	1ffffc02 	.word	0x1ffffc02
 8011920:	40012708 	.word	0x40012708
 8011924:	ffc3ffff 	.word	0xffc3ffff
 8011928:	7fffff04 	.word	0x7fffff04

0801192c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 801192c:	b590      	push	{r4, r7, lr}
 801192e:	b08b      	sub	sp, #44	@ 0x2c
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011936:	2327      	movs	r3, #39	@ 0x27
 8011938:	18fb      	adds	r3, r7, r3
 801193a:	2200      	movs	r2, #0
 801193c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801193e:	2300      	movs	r3, #0
 8011940:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2254      	movs	r2, #84	@ 0x54
 8011946:	5c9b      	ldrb	r3, [r3, r2]
 8011948:	2b01      	cmp	r3, #1
 801194a:	d101      	bne.n	8011950 <HAL_ADC_ConfigChannel+0x24>
 801194c:	2302      	movs	r3, #2
 801194e:	e141      	b.n	8011bd4 <HAL_ADC_ConfigChannel+0x2a8>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2254      	movs	r2, #84	@ 0x54
 8011954:	2101      	movs	r1, #1
 8011956:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	0018      	movs	r0, r3
 801195e:	f7ff fdad 	bl	80114bc <LL_ADC_REG_IsConversionOngoing>
 8011962:	1e03      	subs	r3, r0, #0
 8011964:	d000      	beq.n	8011968 <HAL_ADC_ConfigChannel+0x3c>
 8011966:	e124      	b.n	8011bb2 <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	2b02      	cmp	r3, #2
 801196e:	d100      	bne.n	8011972 <HAL_ADC_ConfigChannel+0x46>
 8011970:	e0d8      	b.n	8011b24 <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	691a      	ldr	r2, [r3, #16]
 8011976:	2380      	movs	r3, #128	@ 0x80
 8011978:	061b      	lsls	r3, r3, #24
 801197a:	429a      	cmp	r2, r3
 801197c:	d004      	beq.n	8011988 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011982:	4a96      	ldr	r2, [pc, #600]	@ (8011bdc <HAL_ADC_ConfigChannel+0x2b0>)
 8011984:	4293      	cmp	r3, r2
 8011986:	d108      	bne.n	801199a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	0019      	movs	r1, r3
 8011992:	0010      	movs	r0, r2
 8011994:	f7ff fc8f 	bl	80112b6 <LL_ADC_REG_SetSequencerChAdd>
 8011998:	e060      	b.n	8011a5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	211f      	movs	r1, #31
 80119a4:	400b      	ands	r3, r1
 80119a6:	210f      	movs	r1, #15
 80119a8:	4099      	lsls	r1, r3
 80119aa:	000b      	movs	r3, r1
 80119ac:	43db      	mvns	r3, r3
 80119ae:	4013      	ands	r3, r2
 80119b0:	001c      	movs	r4, r3
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	025b      	lsls	r3, r3, #9
 80119b8:	0a5b      	lsrs	r3, r3, #9
 80119ba:	d105      	bne.n	80119c8 <HAL_ADC_ConfigChannel+0x9c>
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	0e9b      	lsrs	r3, r3, #26
 80119c2:	221f      	movs	r2, #31
 80119c4:	401a      	ands	r2, r3
 80119c6:	e02e      	b.n	8011a26 <HAL_ADC_ConfigChannel+0xfa>
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80119ce:	231f      	movs	r3, #31
 80119d0:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	085b      	lsrs	r3, r3, #1
 80119da:	61bb      	str	r3, [r7, #24]
 80119dc:	e00e      	b.n	80119fc <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	2201      	movs	r2, #1
 80119e8:	4013      	ands	r3, r2
 80119ea:	693a      	ldr	r2, [r7, #16]
 80119ec:	4313      	orrs	r3, r2
 80119ee:	613b      	str	r3, [r7, #16]
    s--;
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	3b01      	subs	r3, #1
 80119f4:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	085b      	lsrs	r3, r3, #1
 80119fa:	61bb      	str	r3, [r7, #24]
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1ed      	bne.n	80119de <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8011a02:	693a      	ldr	r2, [r7, #16]
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	409a      	lsls	r2, r3
 8011a08:	0013      	movs	r3, r2
 8011a0a:	613b      	str	r3, [r7, #16]
  return result;
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8011a10:	69fb      	ldr	r3, [r7, #28]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d101      	bne.n	8011a1a <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 8011a16:	2320      	movs	r3, #32
 8011a18:	e004      	b.n	8011a24 <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8011a1a:	69f8      	ldr	r0, [r7, #28]
 8011a1c:	f7ee fd30 	bl	8000480 <__clzsi2>
 8011a20:	0003      	movs	r3, r0
 8011a22:	b2db      	uxtb	r3, r3
 8011a24:	001a      	movs	r2, r3
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	211f      	movs	r1, #31
 8011a2c:	400b      	ands	r3, r1
 8011a2e:	409a      	lsls	r2, r3
 8011a30:	0013      	movs	r3, r2
 8011a32:	0022      	movs	r2, r4
 8011a34:	431a      	orrs	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	089b      	lsrs	r3, r3, #2
 8011a40:	1c5a      	adds	r2, r3, #1
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	69db      	ldr	r3, [r3, #28]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d808      	bhi.n	8011a5c <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6818      	ldr	r0, [r3, #0]
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	6859      	ldr	r1, [r3, #4]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	001a      	movs	r2, r3
 8011a58:	f7ff fc0d 	bl	8011276 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6818      	ldr	r0, [r3, #0]
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	6819      	ldr	r1, [r3, #0]
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	001a      	movs	r2, r3
 8011a6a:	f7ff fc47 	bl	80112fc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	db00      	blt.n	8011a78 <HAL_ADC_ConfigChannel+0x14c>
 8011a76:	e0a6      	b.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011a78:	4b59      	ldr	r3, [pc, #356]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011a7a:	0018      	movs	r0, r3
 8011a7c:	f7ff fbba 	bl	80111f4 <LL_ADC_GetCommonPathInternalCh>
 8011a80:	0003      	movs	r3, r0
 8011a82:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4a56      	ldr	r2, [pc, #344]	@ (8011be4 <HAL_ADC_ConfigChannel+0x2b8>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d122      	bne.n	8011ad4 <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8011a8e:	6a3a      	ldr	r2, [r7, #32]
 8011a90:	2380      	movs	r3, #128	@ 0x80
 8011a92:	041b      	lsls	r3, r3, #16
 8011a94:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8011a96:	d11d      	bne.n	8011ad4 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	2280      	movs	r2, #128	@ 0x80
 8011a9c:	0412      	lsls	r2, r2, #16
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011aa2:	0019      	movs	r1, r3
 8011aa4:	0010      	movs	r0, r2
 8011aa6:	f7ff fb91 	bl	80111cc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8011aaa:	4b4f      	ldr	r3, [pc, #316]	@ (8011be8 <HAL_ADC_ConfigChannel+0x2bc>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	494f      	ldr	r1, [pc, #316]	@ (8011bec <HAL_ADC_ConfigChannel+0x2c0>)
 8011ab0:	0018      	movs	r0, r3
 8011ab2:	f7ee fb31 	bl	8000118 <__udivsi3>
 8011ab6:	0003      	movs	r3, r0
 8011ab8:	1c5a      	adds	r2, r3, #1
 8011aba:	0013      	movs	r3, r2
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	189b      	adds	r3, r3, r2
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8011ac4:	e002      	b.n	8011acc <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	3b01      	subs	r3, #1
 8011aca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1f9      	bne.n	8011ac6 <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8011ad2:	e078      	b.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4a45      	ldr	r2, [pc, #276]	@ (8011bf0 <HAL_ADC_ConfigChannel+0x2c4>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d10e      	bne.n	8011afc <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8011ade:	6a3a      	ldr	r2, [r7, #32]
 8011ae0:	2380      	movs	r3, #128	@ 0x80
 8011ae2:	045b      	lsls	r3, r3, #17
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	d109      	bne.n	8011afc <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011ae8:	6a3b      	ldr	r3, [r7, #32]
 8011aea:	2280      	movs	r2, #128	@ 0x80
 8011aec:	0452      	lsls	r2, r2, #17
 8011aee:	4313      	orrs	r3, r2
 8011af0:	4a3b      	ldr	r2, [pc, #236]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011af2:	0019      	movs	r1, r3
 8011af4:	0010      	movs	r0, r2
 8011af6:	f7ff fb69 	bl	80111cc <LL_ADC_SetCommonPathInternalCh>
 8011afa:	e064      	b.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	4a3c      	ldr	r2, [pc, #240]	@ (8011bf4 <HAL_ADC_ConfigChannel+0x2c8>)
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d15f      	bne.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8011b06:	6a3a      	ldr	r2, [r7, #32]
 8011b08:	2380      	movs	r3, #128	@ 0x80
 8011b0a:	03db      	lsls	r3, r3, #15
 8011b0c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8011b0e:	d15a      	bne.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011b10:	6a3b      	ldr	r3, [r7, #32]
 8011b12:	2280      	movs	r2, #128	@ 0x80
 8011b14:	03d2      	lsls	r2, r2, #15
 8011b16:	4313      	orrs	r3, r2
 8011b18:	4a31      	ldr	r2, [pc, #196]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011b1a:	0019      	movs	r1, r3
 8011b1c:	0010      	movs	r0, r2
 8011b1e:	f7ff fb55 	bl	80111cc <LL_ADC_SetCommonPathInternalCh>
 8011b22:	e050      	b.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	691a      	ldr	r2, [r3, #16]
 8011b28:	2380      	movs	r3, #128	@ 0x80
 8011b2a:	061b      	lsls	r3, r3, #24
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d004      	beq.n	8011b3a <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8011b34:	4a29      	ldr	r2, [pc, #164]	@ (8011bdc <HAL_ADC_ConfigChannel+0x2b0>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d107      	bne.n	8011b4a <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	0019      	movs	r1, r3
 8011b44:	0010      	movs	r0, r2
 8011b46:	f7ff fbc7 	bl	80112d8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	da39      	bge.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8011b52:	4b23      	ldr	r3, [pc, #140]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011b54:	0018      	movs	r0, r3
 8011b56:	f7ff fb4d 	bl	80111f4 <LL_ADC_GetCommonPathInternalCh>
 8011b5a:	0003      	movs	r3, r0
 8011b5c:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	4a20      	ldr	r2, [pc, #128]	@ (8011be4 <HAL_ADC_ConfigChannel+0x2b8>)
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d108      	bne.n	8011b7a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011b68:	6a3b      	ldr	r3, [r7, #32]
 8011b6a:	4a23      	ldr	r2, [pc, #140]	@ (8011bf8 <HAL_ADC_ConfigChannel+0x2cc>)
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011b70:	0019      	movs	r1, r3
 8011b72:	0010      	movs	r0, r2
 8011b74:	f7ff fb2a 	bl	80111cc <LL_ADC_SetCommonPathInternalCh>
 8011b78:	e025      	b.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8011bf0 <HAL_ADC_ConfigChannel+0x2c4>)
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d108      	bne.n	8011b96 <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011b84:	6a3b      	ldr	r3, [r7, #32]
 8011b86:	4a1d      	ldr	r2, [pc, #116]	@ (8011bfc <HAL_ADC_ConfigChannel+0x2d0>)
 8011b88:	4013      	ands	r3, r2
 8011b8a:	4a15      	ldr	r2, [pc, #84]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011b8c:	0019      	movs	r1, r3
 8011b8e:	0010      	movs	r0, r2
 8011b90:	f7ff fb1c 	bl	80111cc <LL_ADC_SetCommonPathInternalCh>
 8011b94:	e017      	b.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a16      	ldr	r2, [pc, #88]	@ (8011bf4 <HAL_ADC_ConfigChannel+0x2c8>)
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d112      	bne.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8011ba0:	6a3b      	ldr	r3, [r7, #32]
 8011ba2:	4a17      	ldr	r2, [pc, #92]	@ (8011c00 <HAL_ADC_ConfigChannel+0x2d4>)
 8011ba4:	4013      	ands	r3, r2
 8011ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8011be0 <HAL_ADC_ConfigChannel+0x2b4>)
 8011ba8:	0019      	movs	r1, r3
 8011baa:	0010      	movs	r0, r2
 8011bac:	f7ff fb0e 	bl	80111cc <LL_ADC_SetCommonPathInternalCh>
 8011bb0:	e009      	b.n	8011bc6 <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011bb6:	2220      	movs	r2, #32
 8011bb8:	431a      	orrs	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8011bbe:	2327      	movs	r3, #39	@ 0x27
 8011bc0:	18fb      	adds	r3, r7, r3
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2254      	movs	r2, #84	@ 0x54
 8011bca:	2100      	movs	r1, #0
 8011bcc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8011bce:	2327      	movs	r3, #39	@ 0x27
 8011bd0:	18fb      	adds	r3, r7, r3
 8011bd2:	781b      	ldrb	r3, [r3, #0]
}
 8011bd4:	0018      	movs	r0, r3
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	b00b      	add	sp, #44	@ 0x2c
 8011bda:	bd90      	pop	{r4, r7, pc}
 8011bdc:	80000004 	.word	0x80000004
 8011be0:	40012708 	.word	0x40012708
 8011be4:	ac000800 	.word	0xac000800
 8011be8:	20000250 	.word	0x20000250
 8011bec:	00030d40 	.word	0x00030d40
 8011bf0:	b4002000 	.word	0xb4002000
 8011bf4:	b0001000 	.word	0xb0001000
 8011bf8:	ff7fffff 	.word	0xff7fffff
 8011bfc:	feffffff 	.word	0xfeffffff
 8011c00:	ffbfffff 	.word	0xffbfffff

08011c04 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b08f      	sub	sp, #60	@ 0x3c
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011c0e:	2337      	movs	r3, #55	@ 0x37
 8011c10:	18fb      	adds	r3, r7, r3
 8011c12:	2200      	movs	r2, #0
 8011c14:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 8011c16:	2300      	movs	r3, #0
 8011c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2254      	movs	r2, #84	@ 0x54
 8011c1e:	5c9b      	ldrb	r3, [r3, r2]
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d101      	bne.n	8011c28 <HAL_ADC_AnalogWDGConfig+0x24>
 8011c24:	2302      	movs	r3, #2
 8011c26:	e195      	b.n	8011f54 <HAL_ADC_AnalogWDGConfig+0x350>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2254      	movs	r2, #84	@ 0x54
 8011c2c:	2101      	movs	r1, #1
 8011c2e:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	0018      	movs	r0, r3
 8011c36:	f7ff fc41 	bl	80114bc <LL_ADC_REG_IsConversionOngoing>
 8011c3a:	1e03      	subs	r3, r0, #0
 8011c3c:	d000      	beq.n	8011c40 <HAL_ADC_AnalogWDGConfig+0x3c>
 8011c3e:	e156      	b.n	8011eee <HAL_ADC_AnalogWDGConfig+0x2ea>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4ac5      	ldr	r2, [pc, #788]	@ (8011f5c <HAL_ADC_AnalogWDGConfig+0x358>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d162      	bne.n	8011d10 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	0018      	movs	r0, r3
 8011c50:	f7ff fc12 	bl	8011478 <LL_ADC_IsEnabled>
 8011c54:	1e03      	subs	r3, r0, #0
 8011c56:	d009      	beq.n	8011c6c <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 8011c58:	2301      	movs	r3, #1
 8011c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        tmp_hal_status = ADC_Disable(hadc);
 8011c5c:	2337      	movs	r3, #55	@ 0x37
 8011c5e:	18fc      	adds	r4, r7, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	0018      	movs	r0, r3
 8011c64:	f000 fa0e 	bl	8012084 <ADC_Disable>
 8011c68:	0003      	movs	r3, r0
 8011c6a:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	2280      	movs	r2, #128	@ 0x80
 8011c72:	0412      	lsls	r2, r2, #16
 8011c74:	4293      	cmp	r3, r2
 8011c76:	d011      	beq.n	8011c9c <HAL_ADC_AnalogWDGConfig+0x98>
 8011c78:	22c0      	movs	r2, #192	@ 0xc0
 8011c7a:	0412      	lsls	r2, r2, #16
 8011c7c:	4293      	cmp	r3, r2
 8011c7e:	d115      	bne.n	8011cac <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	689b      	ldr	r3, [r3, #8]
 8011c88:	4ab5      	ldr	r2, [pc, #724]	@ (8011f60 <HAL_ADC_AnalogWDGConfig+0x35c>)
 8011c8a:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8011c8c:	22c0      	movs	r2, #192	@ 0xc0
 8011c8e:	0412      	lsls	r2, r2, #16
 8011c90:	4313      	orrs	r3, r2
 8011c92:	49b2      	ldr	r1, [pc, #712]	@ (8011f5c <HAL_ADC_AnalogWDGConfig+0x358>)
 8011c94:	001a      	movs	r2, r3
 8011c96:	f7ff fb4d 	bl	8011334 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8011c9a:	e00f      	b.n	8011cbc <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	4ab0      	ldr	r2, [pc, #704]	@ (8011f64 <HAL_ADC_AnalogWDGConfig+0x360>)
 8011ca2:	49ae      	ldr	r1, [pc, #696]	@ (8011f5c <HAL_ADC_AnalogWDGConfig+0x358>)
 8011ca4:	0018      	movs	r0, r3
 8011ca6:	f7ff fb45 	bl	8011334 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8011caa:	e007      	b.n	8011cbc <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	49aa      	ldr	r1, [pc, #680]	@ (8011f5c <HAL_ADC_AnalogWDGConfig+0x358>)
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	0018      	movs	r0, r3
 8011cb6:	f7ff fb3d 	bl	8011334 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8011cba:	46c0      	nop			@ (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 8011cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d10b      	bne.n	8011cda <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 8011cc2:	2237      	movs	r2, #55	@ 0x37
 8011cc4:	18bb      	adds	r3, r7, r2
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d106      	bne.n	8011cda <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 8011ccc:	18bc      	adds	r4, r7, r2
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	0018      	movs	r0, r3
 8011cd2:	f000 f951 	bl	8011f78 <ADC_Enable>
 8011cd6:	0003      	movs	r3, r0
 8011cd8:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011cde:	4aa2      	ldr	r2, [pc, #648]	@ (8011f68 <HAL_ADC_AnalogWDGConfig+0x364>)
 8011ce0:	401a      	ands	r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	0018      	movs	r0, r3
 8011cec:	f7ff fbf7 	bl	80114de <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	7b1b      	ldrb	r3, [r3, #12]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d105      	bne.n	8011d04 <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	0018      	movs	r0, r3
 8011cfe:	f7ff fc11 	bl	8011524 <LL_ADC_EnableIT_AWD1>
 8011d02:	e0f4      	b.n	8011eee <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	0018      	movs	r0, r3
 8011d0a:	f7ff fc37 	bl	801157c <LL_ADC_DisableIT_AWD1>
 8011d0e:	e0ee      	b.n	8011eee <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	2280      	movs	r2, #128	@ 0x80
 8011d16:	0412      	lsls	r2, r2, #16
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d100      	bne.n	8011d1e <HAL_ADC_AnalogWDGConfig+0x11a>
 8011d1c:	e09b      	b.n	8011e56 <HAL_ADC_AnalogWDGConfig+0x252>
 8011d1e:	22c0      	movs	r2, #192	@ 0xc0
 8011d20:	0412      	lsls	r2, r2, #16
 8011d22:	4293      	cmp	r3, r2
 8011d24:	d000      	beq.n	8011d28 <HAL_ADC_AnalogWDGConfig+0x124>
 8011d26:	e09f      	b.n	8011e68 <HAL_ADC_AnalogWDGConfig+0x264>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a8f      	ldr	r2, [pc, #572]	@ (8011f6c <HAL_ADC_AnalogWDGConfig+0x368>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d148      	bne.n	8011dc4 <HAL_ADC_AnalogWDGConfig+0x1c0>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	025b      	lsls	r3, r3, #9
 8011d38:	0a5b      	lsrs	r3, r3, #9
 8011d3a:	d108      	bne.n	8011d4e <HAL_ADC_AnalogWDGConfig+0x14a>
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	0e9b      	lsrs	r3, r3, #26
 8011d42:	221f      	movs	r2, #31
 8011d44:	4013      	ands	r3, r2
 8011d46:	2201      	movs	r2, #1
 8011d48:	409a      	lsls	r2, r3
 8011d4a:	0013      	movs	r3, r2
 8011d4c:	e030      	b.n	8011db0 <HAL_ADC_AnalogWDGConfig+0x1ac>
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	689b      	ldr	r3, [r3, #8]
 8011d52:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8011d54:	231f      	movs	r3, #31
 8011d56:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011d5c:	6a3b      	ldr	r3, [r7, #32]
 8011d5e:	085b      	lsrs	r3, r3, #1
 8011d60:	623b      	str	r3, [r7, #32]
 8011d62:	e00e      	b.n	8011d82 <HAL_ADC_AnalogWDGConfig+0x17e>
    result <<= 1U;
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	005b      	lsls	r3, r3, #1
 8011d68:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	4013      	ands	r3, r2
 8011d70:	69ba      	ldr	r2, [r7, #24]
 8011d72:	4313      	orrs	r3, r2
 8011d74:	61bb      	str	r3, [r7, #24]
    s--;
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	085b      	lsrs	r3, r3, #1
 8011d80:	623b      	str	r3, [r7, #32]
 8011d82:	6a3b      	ldr	r3, [r7, #32]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1ed      	bne.n	8011d64 <HAL_ADC_AnalogWDGConfig+0x160>
  result <<= s;                        /* shift when v's highest bits are zero */
 8011d88:	69ba      	ldr	r2, [r7, #24]
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	409a      	lsls	r2, r3
 8011d8e:	0013      	movs	r3, r2
 8011d90:	61bb      	str	r3, [r7, #24]
  return result;
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8011d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d101      	bne.n	8011da0 <HAL_ADC_AnalogWDGConfig+0x19c>
    return 32U;
 8011d9c:	2320      	movs	r3, #32
 8011d9e:	e004      	b.n	8011daa <HAL_ADC_AnalogWDGConfig+0x1a6>
  return __builtin_clz(value);
 8011da0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011da2:	f7ee fb6d 	bl	8000480 <__clzsi2>
 8011da6:	0003      	movs	r3, r0
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	001a      	movs	r2, r3
 8011dac:	2301      	movs	r3, #1
 8011dae:	4093      	lsls	r3, r2
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	6812      	ldr	r2, [r2, #0]
 8011db4:	21a0      	movs	r1, #160	@ 0xa0
 8011db6:	5851      	ldr	r1, [r2, r1]
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	6812      	ldr	r2, [r2, #0]
 8011dbc:	430b      	orrs	r3, r1
 8011dbe:	21a0      	movs	r1, #160	@ 0xa0
 8011dc0:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 8011dc2:	e05a      	b.n	8011e7a <HAL_ADC_AnalogWDGConfig+0x276>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	025b      	lsls	r3, r3, #9
 8011dca:	0a5b      	lsrs	r3, r3, #9
 8011dcc:	d108      	bne.n	8011de0 <HAL_ADC_AnalogWDGConfig+0x1dc>
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	0e9b      	lsrs	r3, r3, #26
 8011dd4:	221f      	movs	r2, #31
 8011dd6:	4013      	ands	r3, r2
 8011dd8:	2201      	movs	r2, #1
 8011dda:	409a      	lsls	r2, r3
 8011ddc:	0013      	movs	r3, r2
 8011dde:	e030      	b.n	8011e42 <HAL_ADC_AnalogWDGConfig+0x23e>
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	689b      	ldr	r3, [r3, #8]
 8011de4:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8011de6:	231f      	movs	r3, #31
 8011de8:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	085b      	lsrs	r3, r3, #1
 8011df2:	613b      	str	r3, [r7, #16]
 8011df4:	e00e      	b.n	8011e14 <HAL_ADC_AnalogWDGConfig+0x210>
    result <<= 1U;
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	005b      	lsls	r3, r3, #1
 8011dfa:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	4013      	ands	r3, r2
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	4313      	orrs	r3, r2
 8011e06:	60bb      	str	r3, [r7, #8]
    s--;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	085b      	lsrs	r3, r3, #1
 8011e12:	613b      	str	r3, [r7, #16]
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d1ed      	bne.n	8011df6 <HAL_ADC_AnalogWDGConfig+0x1f2>
  result <<= s;                        /* shift when v's highest bits are zero */
 8011e1a:	68ba      	ldr	r2, [r7, #8]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	409a      	lsls	r2, r3
 8011e20:	0013      	movs	r3, r2
 8011e22:	60bb      	str	r3, [r7, #8]
  return result;
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <HAL_ADC_AnalogWDGConfig+0x22e>
    return 32U;
 8011e2e:	2320      	movs	r3, #32
 8011e30:	e004      	b.n	8011e3c <HAL_ADC_AnalogWDGConfig+0x238>
  return __builtin_clz(value);
 8011e32:	6978      	ldr	r0, [r7, #20]
 8011e34:	f7ee fb24 	bl	8000480 <__clzsi2>
 8011e38:	0003      	movs	r3, r0
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	001a      	movs	r2, r3
 8011e3e:	2301      	movs	r3, #1
 8011e40:	4093      	lsls	r3, r2
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	6812      	ldr	r2, [r2, #0]
 8011e46:	21a4      	movs	r1, #164	@ 0xa4
 8011e48:	5851      	ldr	r1, [r2, r1]
 8011e4a:	687a      	ldr	r2, [r7, #4]
 8011e4c:	6812      	ldr	r2, [r2, #0]
 8011e4e:	430b      	orrs	r3, r1
 8011e50:	21a4      	movs	r1, #164	@ 0xa4
 8011e52:	5053      	str	r3, [r2, r1]
          break;
 8011e54:	e011      	b.n	8011e7a <HAL_ADC_AnalogWDGConfig+0x276>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8011e5e:	4a41      	ldr	r2, [pc, #260]	@ (8011f64 <HAL_ADC_AnalogWDGConfig+0x360>)
 8011e60:	0019      	movs	r1, r3
 8011e62:	f7ff fa67 	bl	8011334 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 8011e66:	e008      	b.n	8011e7a <HAL_ADC_AnalogWDGConfig+0x276>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6818      	ldr	r0, [r3, #0]
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2200      	movs	r2, #0
 8011e72:	0019      	movs	r1, r3
 8011e74:	f7ff fa5e 	bl	8011334 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8011e78:	46c0      	nop			@ (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8011f6c <HAL_ADC_AnalogWDGConfig+0x368>)
 8011e80:	4293      	cmp	r3, r2
 8011e82:	d11a      	bne.n	8011eba <HAL_ADC_AnalogWDGConfig+0x2b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e88:	4a39      	ldr	r2, [pc, #228]	@ (8011f70 <HAL_ADC_AnalogWDGConfig+0x36c>)
 8011e8a:	401a      	ands	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	0018      	movs	r0, r3
 8011e96:	f7ff fb2d 	bl	80114f4 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	7b1b      	ldrb	r3, [r3, #12]
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d105      	bne.n	8011eae <HAL_ADC_AnalogWDGConfig+0x2aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	0018      	movs	r0, r3
 8011ea8:	f7ff fb4a 	bl	8011540 <LL_ADC_EnableIT_AWD2>
 8011eac:	e01f      	b.n	8011eee <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	0018      	movs	r0, r3
 8011eb4:	f7ff fb72 	bl	801159c <LL_ADC_DisableIT_AWD2>
 8011eb8:	e019      	b.n	8011eee <HAL_ADC_AnalogWDGConfig+0x2ea>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8011f74 <HAL_ADC_AnalogWDGConfig+0x370>)
 8011ec0:	401a      	ands	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	0018      	movs	r0, r3
 8011ecc:	f7ff fb1e 	bl	801150c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	7b1b      	ldrb	r3, [r3, #12]
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d105      	bne.n	8011ee4 <HAL_ADC_AnalogWDGConfig+0x2e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	0018      	movs	r0, r3
 8011ede:	f7ff fb3e 	bl	801155e <LL_ADC_EnableIT_AWD3>
 8011ee2:	e004      	b.n	8011eee <HAL_ADC_AnalogWDGConfig+0x2ea>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	0018      	movs	r0, r3
 8011eea:	f7ff fb67 	bl	80115bc <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8011f5c <HAL_ADC_AnalogWDGConfig+0x358>)
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d118      	bne.n	8011f2a <HAL_ADC_AnalogWDGConfig+0x326>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	691a      	ldr	r2, [r3, #16]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	08db      	lsrs	r3, r3, #3
 8011f04:	2103      	movs	r1, #3
 8011f06:	400b      	ands	r3, r1
 8011f08:	005b      	lsls	r3, r3, #1
 8011f0a:	409a      	lsls	r2, r3
 8011f0c:	0013      	movs	r3, r2
 8011f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	695a      	ldr	r2, [r3, #20]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	08db      	lsrs	r3, r3, #3
 8011f1c:	2103      	movs	r1, #3
 8011f1e:	400b      	ands	r3, r1
 8011f20:	005b      	lsls	r3, r3, #1
 8011f22:	409a      	lsls	r2, r3
 8011f24:	0013      	movs	r3, r2
 8011f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f28:	e005      	b.n	8011f36 <HAL_ADC_AnalogWDGConfig+0x332>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	691b      	ldr	r3, [r3, #16]
 8011f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	695b      	ldr	r3, [r3, #20]
 8011f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	6819      	ldr	r1, [r3, #0]
 8011f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f42:	f7ff fa25 	bl	8011390 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2254      	movs	r2, #84	@ 0x54
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8011f4e:	2337      	movs	r3, #55	@ 0x37
 8011f50:	18fb      	adds	r3, r7, r3
 8011f52:	781b      	ldrb	r3, [r3, #0]
}
 8011f54:	0018      	movs	r0, r3
 8011f56:	46bd      	mov	sp, r7
 8011f58:	b00f      	add	sp, #60	@ 0x3c
 8011f5a:	bd90      	pop	{r4, r7, pc}
 8011f5c:	7cc00000 	.word	0x7cc00000
 8011f60:	fc3fffff 	.word	0xfc3fffff
 8011f64:	0087ffff 	.word	0x0087ffff
 8011f68:	fffeffff 	.word	0xfffeffff
 8011f6c:	0017ffff 	.word	0x0017ffff
 8011f70:	fffdffff 	.word	0xfffdffff
 8011f74:	fffbffff 	.word	0xfffbffff

08011f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8011f80:	2300      	movs	r3, #0
 8011f82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	0018      	movs	r0, r3
 8011f8a:	f7ff fa75 	bl	8011478 <LL_ADC_IsEnabled>
 8011f8e:	1e03      	subs	r3, r0, #0
 8011f90:	d000      	beq.n	8011f94 <ADC_Enable+0x1c>
 8011f92:	e069      	b.n	8012068 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	689b      	ldr	r3, [r3, #8]
 8011f9a:	4a36      	ldr	r2, [pc, #216]	@ (8012074 <ADC_Enable+0xfc>)
 8011f9c:	4013      	ands	r3, r2
 8011f9e:	d00d      	beq.n	8011fbc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011fa4:	2210      	movs	r2, #16
 8011fa6:	431a      	orrs	r2, r3
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	431a      	orrs	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e056      	b.n	801206a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	0018      	movs	r0, r3
 8011fc2:	f7ff fa35 	bl	8011430 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8011fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8012078 <ADC_Enable+0x100>)
 8011fc8:	0018      	movs	r0, r3
 8011fca:	f7ff f913 	bl	80111f4 <LL_ADC_GetCommonPathInternalCh>
 8011fce:	0002      	movs	r2, r0
 8011fd0:	2380      	movs	r3, #128	@ 0x80
 8011fd2:	041b      	lsls	r3, r3, #16
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	d00f      	beq.n	8011ff8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8011fd8:	4b28      	ldr	r3, [pc, #160]	@ (801207c <ADC_Enable+0x104>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4928      	ldr	r1, [pc, #160]	@ (8012080 <ADC_Enable+0x108>)
 8011fde:	0018      	movs	r0, r3
 8011fe0:	f7ee f89a 	bl	8000118 <__udivsi3>
 8011fe4:	0003      	movs	r3, r0
 8011fe6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8011fe8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8011fea:	e002      	b.n	8011ff2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d1f9      	bne.n	8011fec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	7e5b      	ldrb	r3, [r3, #25]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d033      	beq.n	8012068 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8012000:	f7ff f8b8 	bl	8011174 <HAL_GetTick>
 8012004:	0003      	movs	r3, r0
 8012006:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012008:	e027      	b.n	801205a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	0018      	movs	r0, r3
 8012010:	f7ff fa32 	bl	8011478 <LL_ADC_IsEnabled>
 8012014:	1e03      	subs	r3, r0, #0
 8012016:	d104      	bne.n	8012022 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	0018      	movs	r0, r3
 801201e:	f7ff fa07 	bl	8011430 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8012022:	f7ff f8a7 	bl	8011174 <HAL_GetTick>
 8012026:	0002      	movs	r2, r0
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	2b02      	cmp	r3, #2
 801202e:	d914      	bls.n	801205a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2201      	movs	r2, #1
 8012038:	4013      	ands	r3, r2
 801203a:	2b01      	cmp	r3, #1
 801203c:	d00d      	beq.n	801205a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012042:	2210      	movs	r2, #16
 8012044:	431a      	orrs	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801204e:	2201      	movs	r2, #1
 8012050:	431a      	orrs	r2, r3
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8012056:	2301      	movs	r3, #1
 8012058:	e007      	b.n	801206a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2201      	movs	r2, #1
 8012062:	4013      	ands	r3, r2
 8012064:	2b01      	cmp	r3, #1
 8012066:	d1d0      	bne.n	801200a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012068:	2300      	movs	r3, #0
}
 801206a:	0018      	movs	r0, r3
 801206c:	46bd      	mov	sp, r7
 801206e:	b004      	add	sp, #16
 8012070:	bd80      	pop	{r7, pc}
 8012072:	46c0      	nop			@ (mov r8, r8)
 8012074:	80000017 	.word	0x80000017
 8012078:	40012708 	.word	0x40012708
 801207c:	20000250 	.word	0x20000250
 8012080:	00030d40 	.word	0x00030d40

08012084 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	0018      	movs	r0, r3
 8012092:	f7ff fa02 	bl	801149a <LL_ADC_IsDisableOngoing>
 8012096:	0003      	movs	r3, r0
 8012098:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	0018      	movs	r0, r3
 80120a0:	f7ff f9ea 	bl	8011478 <LL_ADC_IsEnabled>
 80120a4:	1e03      	subs	r3, r0, #0
 80120a6:	d046      	beq.n	8012136 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d143      	bne.n	8012136 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	2205      	movs	r2, #5
 80120b6:	4013      	ands	r3, r2
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d10d      	bne.n	80120d8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	0018      	movs	r0, r3
 80120c2:	f7ff f9c7 	bl	8011454 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	2203      	movs	r2, #3
 80120cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80120ce:	f7ff f851 	bl	8011174 <HAL_GetTick>
 80120d2:	0003      	movs	r3, r0
 80120d4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80120d6:	e028      	b.n	801212a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120dc:	2210      	movs	r2, #16
 80120de:	431a      	orrs	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80120e8:	2201      	movs	r2, #1
 80120ea:	431a      	orrs	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80120f0:	2301      	movs	r3, #1
 80120f2:	e021      	b.n	8012138 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80120f4:	f7ff f83e 	bl	8011174 <HAL_GetTick>
 80120f8:	0002      	movs	r2, r0
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	1ad3      	subs	r3, r2, r3
 80120fe:	2b02      	cmp	r3, #2
 8012100:	d913      	bls.n	801212a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	2201      	movs	r2, #1
 801210a:	4013      	ands	r3, r2
 801210c:	d00d      	beq.n	801212a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012112:	2210      	movs	r2, #16
 8012114:	431a      	orrs	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801211e:	2201      	movs	r2, #1
 8012120:	431a      	orrs	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8012126:	2301      	movs	r3, #1
 8012128:	e006      	b.n	8012138 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	689b      	ldr	r3, [r3, #8]
 8012130:	2201      	movs	r2, #1
 8012132:	4013      	ands	r3, r2
 8012134:	d1de      	bne.n	80120f4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012136:	2300      	movs	r3, #0
}
 8012138:	0018      	movs	r0, r3
 801213a:	46bd      	mov	sp, r7
 801213c:	b004      	add	sp, #16
 801213e:	bd80      	pop	{r7, pc}

08012140 <LL_ADC_GetCommonClock>:
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	23f0      	movs	r3, #240	@ 0xf0
 801214e:	039b      	lsls	r3, r3, #14
 8012150:	4013      	ands	r3, r2
}
 8012152:	0018      	movs	r0, r3
 8012154:	46bd      	mov	sp, r7
 8012156:	b002      	add	sp, #8
 8012158:	bd80      	pop	{r7, pc}

0801215a <LL_ADC_GetClock>:
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b082      	sub	sp, #8
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	691b      	ldr	r3, [r3, #16]
 8012166:	0f9b      	lsrs	r3, r3, #30
 8012168:	079b      	lsls	r3, r3, #30
}
 801216a:	0018      	movs	r0, r3
 801216c:	46bd      	mov	sp, r7
 801216e:	b002      	add	sp, #8
 8012170:	bd80      	pop	{r7, pc}

08012172 <LL_ADC_SetCalibrationFactor>:
{
 8012172:	b580      	push	{r7, lr}
 8012174:	b082      	sub	sp, #8
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
 801217a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	22b4      	movs	r2, #180	@ 0xb4
 8012180:	589b      	ldr	r3, [r3, r2]
 8012182:	227f      	movs	r2, #127	@ 0x7f
 8012184:	4393      	bics	r3, r2
 8012186:	001a      	movs	r2, r3
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	431a      	orrs	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	21b4      	movs	r1, #180	@ 0xb4
 8012190:	505a      	str	r2, [r3, r1]
}
 8012192:	46c0      	nop			@ (mov r8, r8)
 8012194:	46bd      	mov	sp, r7
 8012196:	b002      	add	sp, #8
 8012198:	bd80      	pop	{r7, pc}

0801219a <LL_ADC_GetCalibrationFactor>:
{
 801219a:	b580      	push	{r7, lr}
 801219c:	b082      	sub	sp, #8
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	22b4      	movs	r2, #180	@ 0xb4
 80121a6:	589b      	ldr	r3, [r3, r2]
 80121a8:	227f      	movs	r2, #127	@ 0x7f
 80121aa:	4013      	ands	r3, r2
}
 80121ac:	0018      	movs	r0, r3
 80121ae:	46bd      	mov	sp, r7
 80121b0:	b002      	add	sp, #8
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <LL_ADC_Enable>:
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	4a04      	ldr	r2, [pc, #16]	@ (80121d4 <LL_ADC_Enable+0x20>)
 80121c2:	4013      	ands	r3, r2
 80121c4:	2201      	movs	r2, #1
 80121c6:	431a      	orrs	r2, r3
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	609a      	str	r2, [r3, #8]
}
 80121cc:	46c0      	nop			@ (mov r8, r8)
 80121ce:	46bd      	mov	sp, r7
 80121d0:	b002      	add	sp, #8
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	7fffffe8 	.word	0x7fffffe8

080121d8 <LL_ADC_Disable>:
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	689b      	ldr	r3, [r3, #8]
 80121e4:	4a04      	ldr	r2, [pc, #16]	@ (80121f8 <LL_ADC_Disable+0x20>)
 80121e6:	4013      	ands	r3, r2
 80121e8:	2202      	movs	r2, #2
 80121ea:	431a      	orrs	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	609a      	str	r2, [r3, #8]
}
 80121f0:	46c0      	nop			@ (mov r8, r8)
 80121f2:	46bd      	mov	sp, r7
 80121f4:	b002      	add	sp, #8
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	7fffffe8 	.word	0x7fffffe8

080121fc <LL_ADC_IsEnabled>:
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	2201      	movs	r2, #1
 801220a:	4013      	ands	r3, r2
 801220c:	2b01      	cmp	r3, #1
 801220e:	d101      	bne.n	8012214 <LL_ADC_IsEnabled+0x18>
 8012210:	2301      	movs	r3, #1
 8012212:	e000      	b.n	8012216 <LL_ADC_IsEnabled+0x1a>
 8012214:	2300      	movs	r3, #0
}
 8012216:	0018      	movs	r0, r3
 8012218:	46bd      	mov	sp, r7
 801221a:	b002      	add	sp, #8
 801221c:	bd80      	pop	{r7, pc}
	...

08012220 <LL_ADC_StartCalibration>:
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	689b      	ldr	r3, [r3, #8]
 801222c:	4a05      	ldr	r2, [pc, #20]	@ (8012244 <LL_ADC_StartCalibration+0x24>)
 801222e:	4013      	ands	r3, r2
 8012230:	2280      	movs	r2, #128	@ 0x80
 8012232:	0612      	lsls	r2, r2, #24
 8012234:	431a      	orrs	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	609a      	str	r2, [r3, #8]
}
 801223a:	46c0      	nop			@ (mov r8, r8)
 801223c:	46bd      	mov	sp, r7
 801223e:	b002      	add	sp, #8
 8012240:	bd80      	pop	{r7, pc}
 8012242:	46c0      	nop			@ (mov r8, r8)
 8012244:	7fffffe8 	.word	0x7fffffe8

08012248 <LL_ADC_IsCalibrationOnGoing>:
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	689b      	ldr	r3, [r3, #8]
 8012254:	0fdb      	lsrs	r3, r3, #31
 8012256:	07da      	lsls	r2, r3, #31
 8012258:	2380      	movs	r3, #128	@ 0x80
 801225a:	061b      	lsls	r3, r3, #24
 801225c:	429a      	cmp	r2, r3
 801225e:	d101      	bne.n	8012264 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8012260:	2301      	movs	r3, #1
 8012262:	e000      	b.n	8012266 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8012264:	2300      	movs	r3, #0
}
 8012266:	0018      	movs	r0, r3
 8012268:	46bd      	mov	sp, r7
 801226a:	b002      	add	sp, #8
 801226c:	bd80      	pop	{r7, pc}
	...

08012270 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8012270:	b590      	push	{r4, r7, lr}
 8012272:	b08b      	sub	sp, #44	@ 0x2c
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8012278:	2300      	movs	r3, #0
 801227a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 801227c:	2300      	movs	r3, #0
 801227e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2254      	movs	r2, #84	@ 0x54
 8012284:	5c9b      	ldrb	r3, [r3, r2]
 8012286:	2b01      	cmp	r3, #1
 8012288:	d101      	bne.n	801228e <HAL_ADCEx_Calibration_Start+0x1e>
 801228a:	2302      	movs	r3, #2
 801228c:	e0de      	b.n	801244c <HAL_ADCEx_Calibration_Start+0x1dc>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2254      	movs	r2, #84	@ 0x54
 8012292:	2101      	movs	r1, #1
 8012294:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8012296:	231f      	movs	r3, #31
 8012298:	18fc      	adds	r4, r7, r3
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	0018      	movs	r0, r3
 801229e:	f7ff fef1 	bl	8012084 <ADC_Disable>
 80122a2:	0003      	movs	r3, r0
 80122a4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	0018      	movs	r0, r3
 80122ac:	f7ff ffa6 	bl	80121fc <LL_ADC_IsEnabled>
 80122b0:	1e03      	subs	r3, r0, #0
 80122b2:	d000      	beq.n	80122b6 <HAL_ADCEx_Calibration_Start+0x46>
 80122b4:	e0bd      	b.n	8012432 <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122ba:	4a66      	ldr	r2, [pc, #408]	@ (8012454 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80122bc:	4013      	ands	r3, r2
 80122be:	2202      	movs	r2, #2
 80122c0:	431a      	orrs	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	4a62      	ldr	r2, [pc, #392]	@ (8012458 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80122ce:	4013      	ands	r3, r2
 80122d0:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68da      	ldr	r2, [r3, #12]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	495f      	ldr	r1, [pc, #380]	@ (801245c <HAL_ADCEx_Calibration_Start+0x1ec>)
 80122de:	400a      	ands	r2, r1
 80122e0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80122e2:	2300      	movs	r3, #0
 80122e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80122e6:	e02e      	b.n	8012346 <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	0018      	movs	r0, r3
 80122ee:	f7ff ff97 	bl	8012220 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80122f2:	e015      	b.n	8012320 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	3301      	adds	r3, #1
 80122f8:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80122fa:	68fa      	ldr	r2, [r7, #12]
 80122fc:	23ae      	movs	r3, #174	@ 0xae
 80122fe:	029b      	lsls	r3, r3, #10
 8012300:	429a      	cmp	r2, r3
 8012302:	d30d      	bcc.n	8012320 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012308:	2212      	movs	r2, #18
 801230a:	4393      	bics	r3, r2
 801230c:	2210      	movs	r2, #16
 801230e:	431a      	orrs	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2254      	movs	r2, #84	@ 0x54
 8012318:	2100      	movs	r1, #0
 801231a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801231c:	2301      	movs	r3, #1
 801231e:	e095      	b.n	801244c <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	0018      	movs	r0, r3
 8012326:	f7ff ff8f 	bl	8012248 <LL_ADC_IsCalibrationOnGoing>
 801232a:	1e03      	subs	r3, r0, #0
 801232c:	d1e2      	bne.n	80122f4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	0018      	movs	r0, r3
 8012334:	f7ff ff31 	bl	801219a <LL_ADC_GetCalibrationFactor>
 8012338:	0002      	movs	r2, r0
 801233a:	6a3b      	ldr	r3, [r7, #32]
 801233c:	189b      	adds	r3, r3, r2
 801233e:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012342:	3301      	adds	r3, #1
 8012344:	627b      	str	r3, [r7, #36]	@ 0x24
 8012346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012348:	2b07      	cmp	r3, #7
 801234a:	d9cd      	bls.n	80122e8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 801234c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801234e:	6a38      	ldr	r0, [r7, #32]
 8012350:	f7ed fee2 	bl	8000118 <__udivsi3>
 8012354:	0003      	movs	r3, r0
 8012356:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	0018      	movs	r0, r3
 801235e:	f7ff ff29 	bl	80121b4 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	0018      	movs	r0, r3
 8012368:	f7ff fef7 	bl	801215a <LL_ADC_GetClock>
 801236c:	1e03      	subs	r3, r0, #0
 801236e:	d11b      	bne.n	80123a8 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012370:	4b3b      	ldr	r3, [pc, #236]	@ (8012460 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8012372:	0018      	movs	r0, r3
 8012374:	f7ff fee4 	bl	8012140 <LL_ADC_GetCommonClock>
 8012378:	0003      	movs	r3, r0
 801237a:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 801237c:	697a      	ldr	r2, [r7, #20]
 801237e:	23e0      	movs	r3, #224	@ 0xe0
 8012380:	035b      	lsls	r3, r3, #13
 8012382:	429a      	cmp	r2, r3
 8012384:	d310      	bcc.n	80123a8 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	0c9b      	lsrs	r3, r3, #18
 801238a:	3b03      	subs	r3, #3
 801238c:	2201      	movs	r2, #1
 801238e:	409a      	lsls	r2, r3
 8012390:	0013      	movs	r3, r2
 8012392:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	085b      	lsrs	r3, r3, #1
 8012398:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 801239a:	e002      	b.n	80123a2 <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	3b01      	subs	r3, #1
 80123a0:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1f9      	bne.n	801239c <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	6a3a      	ldr	r2, [r7, #32]
 80123ae:	0011      	movs	r1, r2
 80123b0:	0018      	movs	r0, r3
 80123b2:	f7ff fede 	bl	8012172 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	0018      	movs	r0, r3
 80123bc:	f7ff ff0c 	bl	80121d8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80123c0:	f7fe fed8 	bl	8011174 <HAL_GetTick>
 80123c4:	0003      	movs	r3, r0
 80123c6:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80123c8:	e01b      	b.n	8012402 <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80123ca:	f7fe fed3 	bl	8011174 <HAL_GetTick>
 80123ce:	0002      	movs	r2, r0
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	2b02      	cmp	r3, #2
 80123d6:	d914      	bls.n	8012402 <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	0018      	movs	r0, r3
 80123de:	f7ff ff0d 	bl	80121fc <LL_ADC_IsEnabled>
 80123e2:	1e03      	subs	r3, r0, #0
 80123e4:	d00d      	beq.n	8012402 <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123ea:	2210      	movs	r2, #16
 80123ec:	431a      	orrs	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80123f6:	2201      	movs	r2, #1
 80123f8:	431a      	orrs	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80123fe:	2301      	movs	r3, #1
 8012400:	e024      	b.n	801244c <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	0018      	movs	r0, r3
 8012408:	f7ff fef8 	bl	80121fc <LL_ADC_IsEnabled>
 801240c:	1e03      	subs	r3, r0, #0
 801240e:	d1dc      	bne.n	80123ca <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	68d9      	ldr	r1, [r3, #12]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	69ba      	ldr	r2, [r7, #24]
 801241c:	430a      	orrs	r2, r1
 801241e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012424:	2203      	movs	r2, #3
 8012426:	4393      	bics	r3, r2
 8012428:	2201      	movs	r2, #1
 801242a:	431a      	orrs	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	659a      	str	r2, [r3, #88]	@ 0x58
 8012430:	e005      	b.n	801243e <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012436:	2210      	movs	r2, #16
 8012438:	431a      	orrs	r2, r3
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2254      	movs	r2, #84	@ 0x54
 8012442:	2100      	movs	r1, #0
 8012444:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8012446:	231f      	movs	r3, #31
 8012448:	18fb      	adds	r3, r7, r3
 801244a:	781b      	ldrb	r3, [r3, #0]
}
 801244c:	0018      	movs	r0, r3
 801244e:	46bd      	mov	sp, r7
 8012450:	b00b      	add	sp, #44	@ 0x2c
 8012452:	bd90      	pop	{r4, r7, pc}
 8012454:	fffffefd 	.word	0xfffffefd
 8012458:	00008003 	.word	0x00008003
 801245c:	ffff7ffc 	.word	0xffff7ffc
 8012460:	40012708 	.word	0x40012708

08012464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	0002      	movs	r2, r0
 801246c:	1dfb      	adds	r3, r7, #7
 801246e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012470:	1dfb      	adds	r3, r7, #7
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	2b7f      	cmp	r3, #127	@ 0x7f
 8012476:	d809      	bhi.n	801248c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012478:	1dfb      	adds	r3, r7, #7
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	001a      	movs	r2, r3
 801247e:	231f      	movs	r3, #31
 8012480:	401a      	ands	r2, r3
 8012482:	4b04      	ldr	r3, [pc, #16]	@ (8012494 <__NVIC_EnableIRQ+0x30>)
 8012484:	2101      	movs	r1, #1
 8012486:	4091      	lsls	r1, r2
 8012488:	000a      	movs	r2, r1
 801248a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 801248c:	46c0      	nop			@ (mov r8, r8)
 801248e:	46bd      	mov	sp, r7
 8012490:	b002      	add	sp, #8
 8012492:	bd80      	pop	{r7, pc}
 8012494:	e000e100 	.word	0xe000e100

08012498 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	0002      	movs	r2, r0
 80124a0:	1dfb      	adds	r3, r7, #7
 80124a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80124a4:	1dfb      	adds	r3, r7, #7
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80124aa:	d810      	bhi.n	80124ce <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80124ac:	1dfb      	adds	r3, r7, #7
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	001a      	movs	r2, r3
 80124b2:	231f      	movs	r3, #31
 80124b4:	4013      	ands	r3, r2
 80124b6:	4908      	ldr	r1, [pc, #32]	@ (80124d8 <__NVIC_DisableIRQ+0x40>)
 80124b8:	2201      	movs	r2, #1
 80124ba:	409a      	lsls	r2, r3
 80124bc:	0013      	movs	r3, r2
 80124be:	2280      	movs	r2, #128	@ 0x80
 80124c0:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80124c2:	f3bf 8f4f 	dsb	sy
}
 80124c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80124c8:	f3bf 8f6f 	isb	sy
}
 80124cc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80124ce:	46c0      	nop			@ (mov r8, r8)
 80124d0:	46bd      	mov	sp, r7
 80124d2:	b002      	add	sp, #8
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	46c0      	nop			@ (mov r8, r8)
 80124d8:	e000e100 	.word	0xe000e100

080124dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80124dc:	b590      	push	{r4, r7, lr}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	0002      	movs	r2, r0
 80124e4:	6039      	str	r1, [r7, #0]
 80124e6:	1dfb      	adds	r3, r7, #7
 80124e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80124ea:	1dfb      	adds	r3, r7, #7
 80124ec:	781b      	ldrb	r3, [r3, #0]
 80124ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80124f0:	d828      	bhi.n	8012544 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80124f2:	4a2f      	ldr	r2, [pc, #188]	@ (80125b0 <__NVIC_SetPriority+0xd4>)
 80124f4:	1dfb      	adds	r3, r7, #7
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	b25b      	sxtb	r3, r3
 80124fa:	089b      	lsrs	r3, r3, #2
 80124fc:	33c0      	adds	r3, #192	@ 0xc0
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	589b      	ldr	r3, [r3, r2]
 8012502:	1dfa      	adds	r2, r7, #7
 8012504:	7812      	ldrb	r2, [r2, #0]
 8012506:	0011      	movs	r1, r2
 8012508:	2203      	movs	r2, #3
 801250a:	400a      	ands	r2, r1
 801250c:	00d2      	lsls	r2, r2, #3
 801250e:	21ff      	movs	r1, #255	@ 0xff
 8012510:	4091      	lsls	r1, r2
 8012512:	000a      	movs	r2, r1
 8012514:	43d2      	mvns	r2, r2
 8012516:	401a      	ands	r2, r3
 8012518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	019b      	lsls	r3, r3, #6
 801251e:	22ff      	movs	r2, #255	@ 0xff
 8012520:	401a      	ands	r2, r3
 8012522:	1dfb      	adds	r3, r7, #7
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	0018      	movs	r0, r3
 8012528:	2303      	movs	r3, #3
 801252a:	4003      	ands	r3, r0
 801252c:	00db      	lsls	r3, r3, #3
 801252e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012530:	481f      	ldr	r0, [pc, #124]	@ (80125b0 <__NVIC_SetPriority+0xd4>)
 8012532:	1dfb      	adds	r3, r7, #7
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	b25b      	sxtb	r3, r3
 8012538:	089b      	lsrs	r3, r3, #2
 801253a:	430a      	orrs	r2, r1
 801253c:	33c0      	adds	r3, #192	@ 0xc0
 801253e:	009b      	lsls	r3, r3, #2
 8012540:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8012542:	e031      	b.n	80125a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012544:	4a1b      	ldr	r2, [pc, #108]	@ (80125b4 <__NVIC_SetPriority+0xd8>)
 8012546:	1dfb      	adds	r3, r7, #7
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	0019      	movs	r1, r3
 801254c:	230f      	movs	r3, #15
 801254e:	400b      	ands	r3, r1
 8012550:	3b08      	subs	r3, #8
 8012552:	089b      	lsrs	r3, r3, #2
 8012554:	3306      	adds	r3, #6
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	18d3      	adds	r3, r2, r3
 801255a:	3304      	adds	r3, #4
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	1dfa      	adds	r2, r7, #7
 8012560:	7812      	ldrb	r2, [r2, #0]
 8012562:	0011      	movs	r1, r2
 8012564:	2203      	movs	r2, #3
 8012566:	400a      	ands	r2, r1
 8012568:	00d2      	lsls	r2, r2, #3
 801256a:	21ff      	movs	r1, #255	@ 0xff
 801256c:	4091      	lsls	r1, r2
 801256e:	000a      	movs	r2, r1
 8012570:	43d2      	mvns	r2, r2
 8012572:	401a      	ands	r2, r3
 8012574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	019b      	lsls	r3, r3, #6
 801257a:	22ff      	movs	r2, #255	@ 0xff
 801257c:	401a      	ands	r2, r3
 801257e:	1dfb      	adds	r3, r7, #7
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	0018      	movs	r0, r3
 8012584:	2303      	movs	r3, #3
 8012586:	4003      	ands	r3, r0
 8012588:	00db      	lsls	r3, r3, #3
 801258a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801258c:	4809      	ldr	r0, [pc, #36]	@ (80125b4 <__NVIC_SetPriority+0xd8>)
 801258e:	1dfb      	adds	r3, r7, #7
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	001c      	movs	r4, r3
 8012594:	230f      	movs	r3, #15
 8012596:	4023      	ands	r3, r4
 8012598:	3b08      	subs	r3, #8
 801259a:	089b      	lsrs	r3, r3, #2
 801259c:	430a      	orrs	r2, r1
 801259e:	3306      	adds	r3, #6
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	18c3      	adds	r3, r0, r3
 80125a4:	3304      	adds	r3, #4
 80125a6:	601a      	str	r2, [r3, #0]
}
 80125a8:	46c0      	nop			@ (mov r8, r8)
 80125aa:	46bd      	mov	sp, r7
 80125ac:	b003      	add	sp, #12
 80125ae:	bd90      	pop	{r4, r7, pc}
 80125b0:	e000e100 	.word	0xe000e100
 80125b4:	e000ed00 	.word	0xe000ed00

080125b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	1e5a      	subs	r2, r3, #1
 80125c4:	2380      	movs	r3, #128	@ 0x80
 80125c6:	045b      	lsls	r3, r3, #17
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d301      	bcc.n	80125d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80125cc:	2301      	movs	r3, #1
 80125ce:	e010      	b.n	80125f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80125d0:	4b0a      	ldr	r3, [pc, #40]	@ (80125fc <SysTick_Config+0x44>)
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	3a01      	subs	r2, #1
 80125d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80125d8:	2301      	movs	r3, #1
 80125da:	425b      	negs	r3, r3
 80125dc:	2103      	movs	r1, #3
 80125de:	0018      	movs	r0, r3
 80125e0:	f7ff ff7c 	bl	80124dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80125e4:	4b05      	ldr	r3, [pc, #20]	@ (80125fc <SysTick_Config+0x44>)
 80125e6:	2200      	movs	r2, #0
 80125e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80125ea:	4b04      	ldr	r3, [pc, #16]	@ (80125fc <SysTick_Config+0x44>)
 80125ec:	2207      	movs	r2, #7
 80125ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80125f0:	2300      	movs	r3, #0
}
 80125f2:	0018      	movs	r0, r3
 80125f4:	46bd      	mov	sp, r7
 80125f6:	b002      	add	sp, #8
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	46c0      	nop			@ (mov r8, r8)
 80125fc:	e000e010 	.word	0xe000e010

08012600 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af00      	add	r7, sp, #0
 8012606:	60b9      	str	r1, [r7, #8]
 8012608:	607a      	str	r2, [r7, #4]
 801260a:	210f      	movs	r1, #15
 801260c:	187b      	adds	r3, r7, r1
 801260e:	1c02      	adds	r2, r0, #0
 8012610:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8012612:	68ba      	ldr	r2, [r7, #8]
 8012614:	187b      	adds	r3, r7, r1
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	b25b      	sxtb	r3, r3
 801261a:	0011      	movs	r1, r2
 801261c:	0018      	movs	r0, r3
 801261e:	f7ff ff5d 	bl	80124dc <__NVIC_SetPriority>
}
 8012622:	46c0      	nop			@ (mov r8, r8)
 8012624:	46bd      	mov	sp, r7
 8012626:	b004      	add	sp, #16
 8012628:	bd80      	pop	{r7, pc}

0801262a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801262a:	b580      	push	{r7, lr}
 801262c:	b082      	sub	sp, #8
 801262e:	af00      	add	r7, sp, #0
 8012630:	0002      	movs	r2, r0
 8012632:	1dfb      	adds	r3, r7, #7
 8012634:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012636:	1dfb      	adds	r3, r7, #7
 8012638:	781b      	ldrb	r3, [r3, #0]
 801263a:	b25b      	sxtb	r3, r3
 801263c:	0018      	movs	r0, r3
 801263e:	f7ff ff11 	bl	8012464 <__NVIC_EnableIRQ>
}
 8012642:	46c0      	nop			@ (mov r8, r8)
 8012644:	46bd      	mov	sp, r7
 8012646:	b002      	add	sp, #8
 8012648:	bd80      	pop	{r7, pc}

0801264a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801264a:	b580      	push	{r7, lr}
 801264c:	b082      	sub	sp, #8
 801264e:	af00      	add	r7, sp, #0
 8012650:	0002      	movs	r2, r0
 8012652:	1dfb      	adds	r3, r7, #7
 8012654:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8012656:	1dfb      	adds	r3, r7, #7
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	b25b      	sxtb	r3, r3
 801265c:	0018      	movs	r0, r3
 801265e:	f7ff ff1b 	bl	8012498 <__NVIC_DisableIRQ>
}
 8012662:	46c0      	nop			@ (mov r8, r8)
 8012664:	46bd      	mov	sp, r7
 8012666:	b002      	add	sp, #8
 8012668:	bd80      	pop	{r7, pc}

0801266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801266a:	b580      	push	{r7, lr}
 801266c:	b082      	sub	sp, #8
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	0018      	movs	r0, r3
 8012676:	f7ff ff9f 	bl	80125b8 <SysTick_Config>
 801267a:	0003      	movs	r3, r0
}
 801267c:	0018      	movs	r0, r3
 801267e:	46bd      	mov	sp, r7
 8012680:	b002      	add	sp, #8
 8012682:	bd80      	pop	{r7, pc}

08012684 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d101      	bne.n	8012696 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8012692:	2301      	movs	r3, #1
 8012694:	e091      	b.n	80127ba <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	001a      	movs	r2, r3
 801269c:	4b49      	ldr	r3, [pc, #292]	@ (80127c4 <HAL_DMA_Init+0x140>)
 801269e:	429a      	cmp	r2, r3
 80126a0:	d810      	bhi.n	80126c4 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4a48      	ldr	r2, [pc, #288]	@ (80127c8 <HAL_DMA_Init+0x144>)
 80126a8:	4694      	mov	ip, r2
 80126aa:	4463      	add	r3, ip
 80126ac:	2114      	movs	r1, #20
 80126ae:	0018      	movs	r0, r3
 80126b0:	f7ed fd32 	bl	8000118 <__udivsi3>
 80126b4:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80126b6:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	4a43      	ldr	r2, [pc, #268]	@ (80127cc <HAL_DMA_Init+0x148>)
 80126c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80126c2:	e00f      	b.n	80126e4 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	4a41      	ldr	r2, [pc, #260]	@ (80127d0 <HAL_DMA_Init+0x14c>)
 80126ca:	4694      	mov	ip, r2
 80126cc:	4463      	add	r3, ip
 80126ce:	2114      	movs	r1, #20
 80126d0:	0018      	movs	r0, r3
 80126d2:	f7ed fd21 	bl	8000118 <__udivsi3>
 80126d6:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80126d8:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4a3c      	ldr	r2, [pc, #240]	@ (80127d4 <HAL_DMA_Init+0x150>)
 80126e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2225      	movs	r2, #37	@ 0x25
 80126e8:	2102      	movs	r1, #2
 80126ea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	4938      	ldr	r1, [pc, #224]	@ (80127d8 <HAL_DMA_Init+0x154>)
 80126f8:	400a      	ands	r2, r1
 80126fa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	6819      	ldr	r1, [r3, #0]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	689a      	ldr	r2, [r3, #8]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	68db      	ldr	r3, [r3, #12]
 801270a:	431a      	orrs	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	691b      	ldr	r3, [r3, #16]
 8012710:	431a      	orrs	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	695b      	ldr	r3, [r3, #20]
 8012716:	431a      	orrs	r2, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	699b      	ldr	r3, [r3, #24]
 801271c:	431a      	orrs	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	69db      	ldr	r3, [r3, #28]
 8012722:	431a      	orrs	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6a1b      	ldr	r3, [r3, #32]
 8012728:	431a      	orrs	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	430a      	orrs	r2, r1
 8012730:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	0018      	movs	r0, r3
 8012736:	f000 fb4d 	bl	8012dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	689a      	ldr	r2, [r3, #8]
 801273e:	2380      	movs	r3, #128	@ 0x80
 8012740:	01db      	lsls	r3, r3, #7
 8012742:	429a      	cmp	r2, r3
 8012744:	d102      	bne.n	801274c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2200      	movs	r2, #0
 801274a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	685a      	ldr	r2, [r3, #4]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012754:	21ff      	movs	r1, #255	@ 0xff
 8012756:	400a      	ands	r2, r1
 8012758:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012762:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d011      	beq.n	8012790 <HAL_DMA_Init+0x10c>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	2b04      	cmp	r3, #4
 8012772:	d80d      	bhi.n	8012790 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	0018      	movs	r0, r3
 8012778:	f000 fb76 	bl	8012e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012780:	2200      	movs	r2, #0
 8012782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801278c:	605a      	str	r2, [r3, #4]
 801278e:	e008      	b.n	80127a2 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2200      	movs	r2, #0
 8012794:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2200      	movs	r2, #0
 801279a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2200      	movs	r2, #0
 80127a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2200      	movs	r2, #0
 80127a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2225      	movs	r2, #37	@ 0x25
 80127ac:	2101      	movs	r1, #1
 80127ae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2224      	movs	r2, #36	@ 0x24
 80127b4:	2100      	movs	r1, #0
 80127b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80127b8:	2300      	movs	r3, #0
}
 80127ba:	0018      	movs	r0, r3
 80127bc:	46bd      	mov	sp, r7
 80127be:	b002      	add	sp, #8
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	46c0      	nop			@ (mov r8, r8)
 80127c4:	40020407 	.word	0x40020407
 80127c8:	bffdfff8 	.word	0xbffdfff8
 80127cc:	40020000 	.word	0x40020000
 80127d0:	bffdfbf8 	.word	0xbffdfbf8
 80127d4:	40020400 	.word	0x40020400
 80127d8:	ffff800f 	.word	0xffff800f

080127dc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d101      	bne.n	80127ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80127ea:	2301      	movs	r3, #1
 80127ec:	e07f      	b.n	80128ee <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2101      	movs	r1, #1
 80127fa:	438a      	bics	r2, r1
 80127fc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	001a      	movs	r2, r3
 8012804:	4b3c      	ldr	r3, [pc, #240]	@ (80128f8 <HAL_DMA_DeInit+0x11c>)
 8012806:	429a      	cmp	r2, r3
 8012808:	d810      	bhi.n	801282c <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4a3b      	ldr	r2, [pc, #236]	@ (80128fc <HAL_DMA_DeInit+0x120>)
 8012810:	4694      	mov	ip, r2
 8012812:	4463      	add	r3, ip
 8012814:	2114      	movs	r1, #20
 8012816:	0018      	movs	r0, r3
 8012818:	f7ed fc7e 	bl	8000118 <__udivsi3>
 801281c:	0003      	movs	r3, r0
                          ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801281e:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4a36      	ldr	r2, [pc, #216]	@ (8012900 <HAL_DMA_DeInit+0x124>)
 8012828:	641a      	str	r2, [r3, #64]	@ 0x40
 801282a:	e00f      	b.n	801284c <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	4a34      	ldr	r2, [pc, #208]	@ (8012904 <HAL_DMA_DeInit+0x128>)
 8012832:	4694      	mov	ip, r2
 8012834:	4463      	add	r3, ip
 8012836:	2114      	movs	r1, #20
 8012838:	0018      	movs	r0, r3
 801283a:	f7ed fc6d 	bl	8000118 <__udivsi3>
 801283e:	0003      	movs	r3, r0
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8012840:	009a      	lsls	r2, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4a2f      	ldr	r2, [pc, #188]	@ (8012908 <HAL_DMA_DeInit+0x12c>)
 801284a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2200      	movs	r2, #0
 8012852:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012858:	221c      	movs	r2, #28
 801285a:	401a      	ands	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012860:	2101      	movs	r1, #1
 8012862:	4091      	lsls	r1, r2
 8012864:	000a      	movs	r2, r1
 8012866:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	0018      	movs	r0, r3
 801286c:	f000 fab2 	bl	8012dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012874:	2200      	movs	r2, #0
 8012876:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012880:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d010      	beq.n	80128ac <HAL_DMA_DeInit+0xd0>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	2b04      	cmp	r3, #4
 8012890:	d80c      	bhi.n	80128ac <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	0018      	movs	r0, r3
 8012896:	f000 fae7 	bl	8012e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801289e:	2200      	movs	r2, #0
 80128a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128a6:	687a      	ldr	r2, [r7, #4]
 80128a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80128aa:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2200      	movs	r2, #0
 80128b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2200      	movs	r2, #0
 80128bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2200      	movs	r2, #0
 80128c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2200      	movs	r2, #0
 80128ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2200      	movs	r2, #0
 80128da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2225      	movs	r2, #37	@ 0x25
 80128e0:	2100      	movs	r1, #0
 80128e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2224      	movs	r2, #36	@ 0x24
 80128e8:	2100      	movs	r1, #0
 80128ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80128ec:	2300      	movs	r3, #0
}
 80128ee:	0018      	movs	r0, r3
 80128f0:	46bd      	mov	sp, r7
 80128f2:	b002      	add	sp, #8
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	46c0      	nop			@ (mov r8, r8)
 80128f8:	40020407 	.word	0x40020407
 80128fc:	bffdfff8 	.word	0xbffdfff8
 8012900:	40020000 	.word	0x40020000
 8012904:	bffdfbf8 	.word	0xbffdfbf8
 8012908:	40020400 	.word	0x40020400

0801290c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
 8012918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801291a:	2317      	movs	r3, #23
 801291c:	18fb      	adds	r3, r7, r3
 801291e:	2200      	movs	r2, #0
 8012920:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2224      	movs	r2, #36	@ 0x24
 8012926:	5c9b      	ldrb	r3, [r3, r2]
 8012928:	2b01      	cmp	r3, #1
 801292a:	d101      	bne.n	8012930 <HAL_DMA_Start_IT+0x24>
 801292c:	2302      	movs	r3, #2
 801292e:	e06f      	b.n	8012a10 <HAL_DMA_Start_IT+0x104>
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2224      	movs	r2, #36	@ 0x24
 8012934:	2101      	movs	r1, #1
 8012936:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2225      	movs	r2, #37	@ 0x25
 801293c:	5c9b      	ldrb	r3, [r3, r2]
 801293e:	b2db      	uxtb	r3, r3
 8012940:	2b01      	cmp	r3, #1
 8012942:	d157      	bne.n	80129f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	2225      	movs	r2, #37	@ 0x25
 8012948:	2102      	movs	r1, #2
 801294a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2200      	movs	r2, #0
 8012950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2101      	movs	r1, #1
 801295e:	438a      	bics	r2, r1
 8012960:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	68b9      	ldr	r1, [r7, #8]
 8012968:	68f8      	ldr	r0, [r7, #12]
 801296a:	f000 f9f7 	bl	8012d5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012972:	2b00      	cmp	r3, #0
 8012974:	d008      	beq.n	8012988 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	210e      	movs	r1, #14
 8012982:	430a      	orrs	r2, r1
 8012984:	601a      	str	r2, [r3, #0]
 8012986:	e00f      	b.n	80129a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	681a      	ldr	r2, [r3, #0]
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2104      	movs	r1, #4
 8012994:	438a      	bics	r2, r1
 8012996:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	681a      	ldr	r2, [r3, #0]
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	210a      	movs	r1, #10
 80129a4:	430a      	orrs	r2, r1
 80129a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	2380      	movs	r3, #128	@ 0x80
 80129b0:	025b      	lsls	r3, r3, #9
 80129b2:	4013      	ands	r3, r2
 80129b4:	d008      	beq.n	80129c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80129c0:	2180      	movs	r1, #128	@ 0x80
 80129c2:	0049      	lsls	r1, r1, #1
 80129c4:	430a      	orrs	r2, r1
 80129c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d008      	beq.n	80129e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129da:	2180      	movs	r1, #128	@ 0x80
 80129dc:	0049      	lsls	r1, r1, #1
 80129de:	430a      	orrs	r2, r1
 80129e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2101      	movs	r1, #1
 80129ee:	430a      	orrs	r2, r1
 80129f0:	601a      	str	r2, [r3, #0]
 80129f2:	e00a      	b.n	8012a0a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	2280      	movs	r2, #128	@ 0x80
 80129f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	2224      	movs	r2, #36	@ 0x24
 80129fe:	2100      	movs	r1, #0
 8012a00:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8012a02:	2317      	movs	r3, #23
 8012a04:	18fb      	adds	r3, r7, r3
 8012a06:	2201      	movs	r2, #1
 8012a08:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012a0a:	2317      	movs	r3, #23
 8012a0c:	18fb      	adds	r3, r7, r3
 8012a0e:	781b      	ldrb	r3, [r3, #0]
}
 8012a10:	0018      	movs	r0, r3
 8012a12:	46bd      	mov	sp, r7
 8012a14:	b006      	add	sp, #24
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d101      	bne.n	8012a2a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8012a26:	2301      	movs	r3, #1
 8012a28:	e04f      	b.n	8012aca <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2225      	movs	r2, #37	@ 0x25
 8012a2e:	5c9b      	ldrb	r3, [r3, r2]
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	d008      	beq.n	8012a48 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2204      	movs	r2, #4
 8012a3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2224      	movs	r2, #36	@ 0x24
 8012a40:	2100      	movs	r1, #0
 8012a42:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8012a44:	2301      	movs	r3, #1
 8012a46:	e040      	b.n	8012aca <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	210e      	movs	r1, #14
 8012a54:	438a      	bics	r2, r1
 8012a56:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a62:	491c      	ldr	r1, [pc, #112]	@ (8012ad4 <HAL_DMA_Abort+0xbc>)
 8012a64:	400a      	ands	r2, r1
 8012a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2101      	movs	r1, #1
 8012a74:	438a      	bics	r2, r1
 8012a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a7c:	221c      	movs	r2, #28
 8012a7e:	401a      	ands	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a84:	2101      	movs	r1, #1
 8012a86:	4091      	lsls	r1, r2
 8012a88:	000a      	movs	r2, r1
 8012a8a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012a94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00c      	beq.n	8012ab8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012aa8:	490a      	ldr	r1, [pc, #40]	@ (8012ad4 <HAL_DMA_Abort+0xbc>)
 8012aaa:	400a      	ands	r2, r1
 8012aac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012ab6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2225      	movs	r2, #37	@ 0x25
 8012abc:	2101      	movs	r1, #1
 8012abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2224      	movs	r2, #36	@ 0x24
 8012ac4:	2100      	movs	r1, #0
 8012ac6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8012ac8:	2300      	movs	r3, #0
}
 8012aca:	0018      	movs	r0, r3
 8012acc:	46bd      	mov	sp, r7
 8012ace:	b002      	add	sp, #8
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	46c0      	nop			@ (mov r8, r8)
 8012ad4:	fffffeff 	.word	0xfffffeff

08012ad8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b084      	sub	sp, #16
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ae0:	210f      	movs	r1, #15
 8012ae2:	187b      	adds	r3, r7, r1
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2225      	movs	r2, #37	@ 0x25
 8012aec:	5c9b      	ldrb	r3, [r3, r2]
 8012aee:	b2db      	uxtb	r3, r3
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	d006      	beq.n	8012b02 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2204      	movs	r2, #4
 8012af8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8012afa:	187b      	adds	r3, r7, r1
 8012afc:	2201      	movs	r2, #1
 8012afe:	701a      	strb	r2, [r3, #0]
 8012b00:	e048      	b.n	8012b94 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	210e      	movs	r1, #14
 8012b0e:	438a      	bics	r2, r1
 8012b10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2101      	movs	r1, #1
 8012b1e:	438a      	bics	r2, r1
 8012b20:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b2c:	491d      	ldr	r1, [pc, #116]	@ (8012ba4 <HAL_DMA_Abort_IT+0xcc>)
 8012b2e:	400a      	ands	r2, r1
 8012b30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b36:	221c      	movs	r2, #28
 8012b38:	401a      	ands	r2, r3
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b3e:	2101      	movs	r1, #1
 8012b40:	4091      	lsls	r1, r2
 8012b42:	000a      	movs	r2, r1
 8012b44:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012b4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00c      	beq.n	8012b72 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b62:	4910      	ldr	r1, [pc, #64]	@ (8012ba4 <HAL_DMA_Abort_IT+0xcc>)
 8012b64:	400a      	ands	r2, r1
 8012b66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012b70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2225      	movs	r2, #37	@ 0x25
 8012b76:	2101      	movs	r1, #1
 8012b78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2224      	movs	r2, #36	@ 0x24
 8012b7e:	2100      	movs	r1, #0
 8012b80:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d004      	beq.n	8012b94 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b8e:	687a      	ldr	r2, [r7, #4]
 8012b90:	0010      	movs	r0, r2
 8012b92:	4798      	blx	r3
    }
  }
  return status;
 8012b94:	230f      	movs	r3, #15
 8012b96:	18fb      	adds	r3, r7, r3
 8012b98:	781b      	ldrb	r3, [r3, #0]
}
 8012b9a:	0018      	movs	r0, r3
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	b004      	add	sp, #16
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	46c0      	nop			@ (mov r8, r8)
 8012ba4:	fffffeff 	.word	0xfffffeff

08012ba8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bc4:	221c      	movs	r2, #28
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	2204      	movs	r2, #4
 8012bca:	409a      	lsls	r2, r3
 8012bcc:	0013      	movs	r3, r2
 8012bce:	68fa      	ldr	r2, [r7, #12]
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	d026      	beq.n	8012c22 <HAL_DMA_IRQHandler+0x7a>
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2204      	movs	r2, #4
 8012bd8:	4013      	ands	r3, r2
 8012bda:	d022      	beq.n	8012c22 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	2220      	movs	r2, #32
 8012be4:	4013      	ands	r3, r2
 8012be6:	d107      	bne.n	8012bf8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	681a      	ldr	r2, [r3, #0]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2104      	movs	r1, #4
 8012bf4:	438a      	bics	r2, r1
 8012bf6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bfc:	221c      	movs	r2, #28
 8012bfe:	401a      	ands	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c04:	2104      	movs	r1, #4
 8012c06:	4091      	lsls	r1, r2
 8012c08:	000a      	movs	r2, r1
 8012c0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d100      	bne.n	8012c16 <HAL_DMA_IRQHandler+0x6e>
 8012c14:	e080      	b.n	8012d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c1a:	687a      	ldr	r2, [r7, #4]
 8012c1c:	0010      	movs	r0, r2
 8012c1e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8012c20:	e07a      	b.n	8012d18 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c26:	221c      	movs	r2, #28
 8012c28:	4013      	ands	r3, r2
 8012c2a:	2202      	movs	r2, #2
 8012c2c:	409a      	lsls	r2, r3
 8012c2e:	0013      	movs	r3, r2
 8012c30:	68fa      	ldr	r2, [r7, #12]
 8012c32:	4013      	ands	r3, r2
 8012c34:	d03c      	beq.n	8012cb0 <HAL_DMA_IRQHandler+0x108>
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	2202      	movs	r2, #2
 8012c3a:	4013      	ands	r3, r2
 8012c3c:	d038      	beq.n	8012cb0 <HAL_DMA_IRQHandler+0x108>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	2220      	movs	r2, #32
 8012c46:	4013      	ands	r3, r2
 8012c48:	d10b      	bne.n	8012c62 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	210a      	movs	r1, #10
 8012c56:	438a      	bics	r2, r1
 8012c58:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2225      	movs	r2, #37	@ 0x25
 8012c5e:	2101      	movs	r1, #1
 8012c60:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	001a      	movs	r2, r3
 8012c68:	4b2e      	ldr	r3, [pc, #184]	@ (8012d24 <HAL_DMA_IRQHandler+0x17c>)
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d909      	bls.n	8012c82 <HAL_DMA_IRQHandler+0xda>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c72:	221c      	movs	r2, #28
 8012c74:	401a      	ands	r2, r3
 8012c76:	4b2c      	ldr	r3, [pc, #176]	@ (8012d28 <HAL_DMA_IRQHandler+0x180>)
 8012c78:	2102      	movs	r1, #2
 8012c7a:	4091      	lsls	r1, r2
 8012c7c:	000a      	movs	r2, r1
 8012c7e:	605a      	str	r2, [r3, #4]
 8012c80:	e008      	b.n	8012c94 <HAL_DMA_IRQHandler+0xec>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c86:	221c      	movs	r2, #28
 8012c88:	401a      	ands	r2, r3
 8012c8a:	4b28      	ldr	r3, [pc, #160]	@ (8012d2c <HAL_DMA_IRQHandler+0x184>)
 8012c8c:	2102      	movs	r1, #2
 8012c8e:	4091      	lsls	r1, r2
 8012c90:	000a      	movs	r2, r1
 8012c92:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2224      	movs	r2, #36	@ 0x24
 8012c98:	2100      	movs	r1, #0
 8012c9a:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d039      	beq.n	8012d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	0010      	movs	r0, r2
 8012cac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8012cae:	e033      	b.n	8012d18 <HAL_DMA_IRQHandler+0x170>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cb4:	221c      	movs	r2, #28
 8012cb6:	4013      	ands	r3, r2
 8012cb8:	2208      	movs	r2, #8
 8012cba:	409a      	lsls	r2, r3
 8012cbc:	0013      	movs	r3, r2
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	4013      	ands	r3, r2
 8012cc2:	d02a      	beq.n	8012d1a <HAL_DMA_IRQHandler+0x172>
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	2208      	movs	r2, #8
 8012cc8:	4013      	ands	r3, r2
 8012cca:	d026      	beq.n	8012d1a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	210e      	movs	r1, #14
 8012cd8:	438a      	bics	r2, r1
 8012cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ce0:	221c      	movs	r2, #28
 8012ce2:	401a      	ands	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ce8:	2101      	movs	r1, #1
 8012cea:	4091      	lsls	r1, r2
 8012cec:	000a      	movs	r2, r1
 8012cee:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2225      	movs	r2, #37	@ 0x25
 8012cfa:	2101      	movs	r1, #1
 8012cfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2224      	movs	r2, #36	@ 0x24
 8012d02:	2100      	movs	r1, #0
 8012d04:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d005      	beq.n	8012d1a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	0010      	movs	r0, r2
 8012d16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012d18:	46c0      	nop			@ (mov r8, r8)
 8012d1a:	46c0      	nop			@ (mov r8, r8)
}
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	b004      	add	sp, #16
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	46c0      	nop			@ (mov r8, r8)
 8012d24:	40020080 	.word	0x40020080
 8012d28:	40020400 	.word	0x40020400
 8012d2c:	40020000 	.word	0x40020000

08012d30 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2225      	movs	r2, #37	@ 0x25
 8012d3c:	5c9b      	ldrb	r3, [r3, r2]
 8012d3e:	b2db      	uxtb	r3, r3
}
 8012d40:	0018      	movs	r0, r3
 8012d42:	46bd      	mov	sp, r7
 8012d44:	b002      	add	sp, #8
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8012d54:	0018      	movs	r0, r3
 8012d56:	46bd      	mov	sp, r7
 8012d58:	b002      	add	sp, #8
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b084      	sub	sp, #16
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	60f8      	str	r0, [r7, #12]
 8012d64:	60b9      	str	r1, [r7, #8]
 8012d66:	607a      	str	r2, [r7, #4]
 8012d68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012d72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d004      	beq.n	8012d86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012d84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d8a:	221c      	movs	r2, #28
 8012d8c:	401a      	ands	r2, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d92:	2101      	movs	r1, #1
 8012d94:	4091      	lsls	r1, r2
 8012d96:	000a      	movs	r2, r1
 8012d98:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	683a      	ldr	r2, [r7, #0]
 8012da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	2b10      	cmp	r3, #16
 8012da8:	d108      	bne.n	8012dbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68ba      	ldr	r2, [r7, #8]
 8012db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012dba:	e007      	b.n	8012dcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	68ba      	ldr	r2, [r7, #8]
 8012dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	60da      	str	r2, [r3, #12]
}
 8012dcc:	46c0      	nop			@ (mov r8, r8)
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	b004      	add	sp, #16
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	001a      	movs	r2, r3
 8012de2:	4b1d      	ldr	r3, [pc, #116]	@ (8012e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d814      	bhi.n	8012e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dec:	089b      	lsrs	r3, r3, #2
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	4a1a      	ldr	r2, [pc, #104]	@ (8012e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8012df2:	189a      	adds	r2, r3, r2
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	001a      	movs	r2, r3
 8012dfe:	23ff      	movs	r3, #255	@ 0xff
 8012e00:	4013      	ands	r3, r2
 8012e02:	3b08      	subs	r3, #8
 8012e04:	2114      	movs	r1, #20
 8012e06:	0018      	movs	r0, r3
 8012e08:	f7ed f986 	bl	8000118 <__udivsi3>
 8012e0c:	0003      	movs	r3, r0
 8012e0e:	60fb      	str	r3, [r7, #12]
 8012e10:	e014      	b.n	8012e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e16:	089b      	lsrs	r3, r3, #2
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	4a11      	ldr	r2, [pc, #68]	@ (8012e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8012e1c:	189a      	adds	r2, r3, r2
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	001a      	movs	r2, r3
 8012e28:	23ff      	movs	r3, #255	@ 0xff
 8012e2a:	4013      	ands	r3, r2
 8012e2c:	3b08      	subs	r3, #8
 8012e2e:	2114      	movs	r1, #20
 8012e30:	0018      	movs	r0, r3
 8012e32:	f7ed f971 	bl	8000118 <__udivsi3>
 8012e36:	0003      	movs	r3, r0
 8012e38:	3307      	adds	r3, #7
 8012e3a:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	4a09      	ldr	r2, [pc, #36]	@ (8012e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8012e40:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	221f      	movs	r2, #31
 8012e46:	4013      	ands	r3, r2
 8012e48:	2201      	movs	r2, #1
 8012e4a:	409a      	lsls	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8012e50:	46c0      	nop			@ (mov r8, r8)
 8012e52:	46bd      	mov	sp, r7
 8012e54:	b004      	add	sp, #16
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	40020407 	.word	0x40020407
 8012e5c:	40020800 	.word	0x40020800
 8012e60:	4002081c 	.word	0x4002081c
 8012e64:	40020880 	.word	0x40020880

08012e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	22ff      	movs	r2, #255	@ 0xff
 8012e76:	4013      	ands	r3, r2
 8012e78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8012ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8012e7e:	4694      	mov	ip, r2
 8012e80:	4463      	add	r3, ip
 8012e82:	009b      	lsls	r3, r3, #2
 8012e84:	001a      	movs	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4a07      	ldr	r2, [pc, #28]	@ (8012eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8012e8e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	3b01      	subs	r3, #1
 8012e94:	2203      	movs	r2, #3
 8012e96:	4013      	ands	r3, r2
 8012e98:	2201      	movs	r2, #1
 8012e9a:	409a      	lsls	r2, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8012ea0:	46c0      	nop			@ (mov r8, r8)
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	b004      	add	sp, #16
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	1000823f 	.word	0x1000823f
 8012eac:	40020940 	.word	0x40020940

08012eb0 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8012eb0:	b5b0      	push	{r4, r5, r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	603a      	str	r2, [r7, #0]
 8012ebc:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012ebe:	4b21      	ldr	r3, [pc, #132]	@ (8012f44 <HAL_FLASH_Program+0x94>)
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	d101      	bne.n	8012eca <HAL_FLASH_Program+0x1a>
 8012ec6:	2302      	movs	r3, #2
 8012ec8:	e038      	b.n	8012f3c <HAL_FLASH_Program+0x8c>
 8012eca:	4b1e      	ldr	r3, [pc, #120]	@ (8012f44 <HAL_FLASH_Program+0x94>)
 8012ecc:	2201      	movs	r2, #1
 8012ece:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8012f44 <HAL_FLASH_Program+0x94>)
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012ed6:	2517      	movs	r5, #23
 8012ed8:	197c      	adds	r4, r7, r5
 8012eda:	23fa      	movs	r3, #250	@ 0xfa
 8012edc:	009b      	lsls	r3, r3, #2
 8012ede:	0018      	movs	r0, r3
 8012ee0:	f000 f874 	bl	8012fcc <FLASH_WaitForLastOperation>
 8012ee4:	0003      	movs	r3, r0
 8012ee6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012ee8:	197b      	adds	r3, r7, r5
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d11f      	bne.n	8012f30 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	d106      	bne.n	8012f04 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8012ef6:	683a      	ldr	r2, [r7, #0]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	0008      	movs	r0, r1
 8012efe:	f000 f8b3 	bl	8013068 <FLASH_Program_DoubleWord>
 8012f02:	e005      	b.n	8012f10 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8012f04:	683a      	ldr	r2, [r7, #0]
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	0011      	movs	r1, r2
 8012f0a:	0018      	movs	r0, r3
 8012f0c:	f008 f904 	bl	801b118 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012f10:	2317      	movs	r3, #23
 8012f12:	18fc      	adds	r4, r7, r3
 8012f14:	23fa      	movs	r3, #250	@ 0xfa
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	0018      	movs	r0, r3
 8012f1a:	f000 f857 	bl	8012fcc <FLASH_WaitForLastOperation>
 8012f1e:	0003      	movs	r3, r0
 8012f20:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8012f22:	4b09      	ldr	r3, [pc, #36]	@ (8012f48 <HAL_FLASH_Program+0x98>)
 8012f24:	695a      	ldr	r2, [r3, #20]
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	43d9      	mvns	r1, r3
 8012f2a:	4b07      	ldr	r3, [pc, #28]	@ (8012f48 <HAL_FLASH_Program+0x98>)
 8012f2c:	400a      	ands	r2, r1
 8012f2e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012f30:	4b04      	ldr	r3, [pc, #16]	@ (8012f44 <HAL_FLASH_Program+0x94>)
 8012f32:	2200      	movs	r2, #0
 8012f34:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8012f36:	2317      	movs	r3, #23
 8012f38:	18fb      	adds	r3, r7, r3
 8012f3a:	781b      	ldrb	r3, [r3, #0]
}
 8012f3c:	0018      	movs	r0, r3
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	b006      	add	sp, #24
 8012f42:	bdb0      	pop	{r4, r5, r7, pc}
 8012f44:	20001170 	.word	0x20001170
 8012f48:	40022000 	.word	0x40022000

08012f4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8012f52:	1dfb      	adds	r3, r7, #7
 8012f54:	2200      	movs	r2, #0
 8012f56:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8012f58:	4b0b      	ldr	r3, [pc, #44]	@ (8012f88 <HAL_FLASH_Unlock+0x3c>)
 8012f5a:	695b      	ldr	r3, [r3, #20]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	da0c      	bge.n	8012f7a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012f60:	4b09      	ldr	r3, [pc, #36]	@ (8012f88 <HAL_FLASH_Unlock+0x3c>)
 8012f62:	4a0a      	ldr	r2, [pc, #40]	@ (8012f8c <HAL_FLASH_Unlock+0x40>)
 8012f64:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012f66:	4b08      	ldr	r3, [pc, #32]	@ (8012f88 <HAL_FLASH_Unlock+0x3c>)
 8012f68:	4a09      	ldr	r2, [pc, #36]	@ (8012f90 <HAL_FLASH_Unlock+0x44>)
 8012f6a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8012f6c:	4b06      	ldr	r3, [pc, #24]	@ (8012f88 <HAL_FLASH_Unlock+0x3c>)
 8012f6e:	695b      	ldr	r3, [r3, #20]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	da02      	bge.n	8012f7a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8012f74:	1dfb      	adds	r3, r7, #7
 8012f76:	2201      	movs	r2, #1
 8012f78:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8012f7a:	1dfb      	adds	r3, r7, #7
 8012f7c:	781b      	ldrb	r3, [r3, #0]
}
 8012f7e:	0018      	movs	r0, r3
 8012f80:	46bd      	mov	sp, r7
 8012f82:	b002      	add	sp, #8
 8012f84:	bd80      	pop	{r7, pc}
 8012f86:	46c0      	nop			@ (mov r8, r8)
 8012f88:	40022000 	.word	0x40022000
 8012f8c:	45670123 	.word	0x45670123
 8012f90:	cdef89ab 	.word	0xcdef89ab

08012f94 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8012f9a:	1dfb      	adds	r3, r7, #7
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8012fa0:	4b09      	ldr	r3, [pc, #36]	@ (8012fc8 <HAL_FLASH_Lock+0x34>)
 8012fa2:	695a      	ldr	r2, [r3, #20]
 8012fa4:	4b08      	ldr	r3, [pc, #32]	@ (8012fc8 <HAL_FLASH_Lock+0x34>)
 8012fa6:	2180      	movs	r1, #128	@ 0x80
 8012fa8:	0609      	lsls	r1, r1, #24
 8012faa:	430a      	orrs	r2, r1
 8012fac:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8012fae:	4b06      	ldr	r3, [pc, #24]	@ (8012fc8 <HAL_FLASH_Lock+0x34>)
 8012fb0:	695b      	ldr	r3, [r3, #20]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	da02      	bge.n	8012fbc <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8012fb6:	1dfb      	adds	r3, r7, #7
 8012fb8:	2200      	movs	r2, #0
 8012fba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012fbc:	1dfb      	adds	r3, r7, #7
 8012fbe:	781b      	ldrb	r3, [r3, #0]
}
 8012fc0:	0018      	movs	r0, r3
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	b002      	add	sp, #8
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	40022000 	.word	0x40022000

08012fcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8012fd4:	f7fe f8ce 	bl	8011174 <HAL_GetTick>
 8012fd8:	0002      	movs	r2, r0
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	189b      	adds	r3, r3, r2
 8012fde:	60fb      	str	r3, [r7, #12]
  error = FLASH_SR_BSY1;
 8012fe0:	2380      	movs	r3, #128	@ 0x80
 8012fe2:	025b      	lsls	r3, r3, #9
 8012fe4:	60bb      	str	r3, [r7, #8]
  while ((FLASH->SR & error) != 0x00U)
 8012fe6:	e007      	b.n	8012ff8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8012fe8:	f7fe f8c4 	bl	8011174 <HAL_GetTick>
 8012fec:	0002      	movs	r2, r0
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	d801      	bhi.n	8012ff8 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8012ff4:	2303      	movs	r3, #3
 8012ff6:	e02a      	b.n	801304e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8012ff8:	4b17      	ldr	r3, [pc, #92]	@ (8013058 <FLASH_WaitForLastOperation+0x8c>)
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	68ba      	ldr	r2, [r7, #8]
 8012ffe:	4013      	ands	r3, r2
 8013000:	d1f2      	bne.n	8012fe8 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8013002:	4b15      	ldr	r3, [pc, #84]	@ (8013058 <FLASH_WaitForLastOperation+0x8c>)
 8013004:	691b      	ldr	r3, [r3, #16]
 8013006:	4a15      	ldr	r2, [pc, #84]	@ (801305c <FLASH_WaitForLastOperation+0x90>)
 8013008:	4013      	ands	r3, r2
 801300a:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 801300c:	4b12      	ldr	r3, [pc, #72]	@ (8013058 <FLASH_WaitForLastOperation+0x8c>)
 801300e:	4a14      	ldr	r2, [pc, #80]	@ (8013060 <FLASH_WaitForLastOperation+0x94>)
 8013010:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d004      	beq.n	8013022 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8013018:	4b12      	ldr	r3, [pc, #72]	@ (8013064 <FLASH_WaitForLastOperation+0x98>)
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 801301e:	2301      	movs	r3, #1
 8013020:	e015      	b.n	801304e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8013022:	f7fe f8a7 	bl	8011174 <HAL_GetTick>
 8013026:	0002      	movs	r2, r0
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	189b      	adds	r3, r3, r2
 801302c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 801302e:	e007      	b.n	8013040 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8013030:	f7fe f8a0 	bl	8011174 <HAL_GetTick>
 8013034:	0002      	movs	r2, r0
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	4293      	cmp	r3, r2
 801303a:	d801      	bhi.n	8013040 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 801303c:	2303      	movs	r3, #3
 801303e:	e006      	b.n	801304e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8013040:	4b05      	ldr	r3, [pc, #20]	@ (8013058 <FLASH_WaitForLastOperation+0x8c>)
 8013042:	691a      	ldr	r2, [r3, #16]
 8013044:	2380      	movs	r3, #128	@ 0x80
 8013046:	02db      	lsls	r3, r3, #11
 8013048:	4013      	ands	r3, r2
 801304a:	d1f1      	bne.n	8013030 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 801304c:	2300      	movs	r3, #0
}
 801304e:	0018      	movs	r0, r3
 8013050:	46bd      	mov	sp, r7
 8013052:	b004      	add	sp, #16
 8013054:	bd80      	pop	{r7, pc}
 8013056:	46c0      	nop			@ (mov r8, r8)
 8013058:	40022000 	.word	0x40022000
 801305c:	000083fa 	.word	0x000083fa
 8013060:	000083fb 	.word	0x000083fb
 8013064:	20001170 	.word	0x20001170

08013068 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013068:	b5b0      	push	{r4, r5, r7, lr}
 801306a:	b084      	sub	sp, #16
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	603a      	str	r2, [r7, #0]
 8013072:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8013074:	4b0b      	ldr	r3, [pc, #44]	@ (80130a4 <FLASH_Program_DoubleWord+0x3c>)
 8013076:	695a      	ldr	r2, [r3, #20]
 8013078:	4b0a      	ldr	r3, [pc, #40]	@ (80130a4 <FLASH_Program_DoubleWord+0x3c>)
 801307a:	2101      	movs	r1, #1
 801307c:	430a      	orrs	r2, r1
 801307e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	683a      	ldr	r2, [r7, #0]
 8013084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8013086:	f3bf 8f6f 	isb	sy
}
 801308a:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	001c      	movs	r4, r3
 8013090:	2300      	movs	r3, #0
 8013092:	001d      	movs	r5, r3
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	3304      	adds	r3, #4
 8013098:	0022      	movs	r2, r4
 801309a:	601a      	str	r2, [r3, #0]
}
 801309c:	46c0      	nop			@ (mov r8, r8)
 801309e:	46bd      	mov	sp, r7
 80130a0:	b004      	add	sp, #16
 80130a2:	bdb0      	pop	{r4, r5, r7, pc}
 80130a4:	40022000 	.word	0x40022000

080130a8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80130a8:	b5b0      	push	{r4, r5, r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80130b2:	4b32      	ldr	r3, [pc, #200]	@ (801317c <HAL_FLASHEx_Erase+0xd4>)
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d101      	bne.n	80130be <HAL_FLASHEx_Erase+0x16>
 80130ba:	2302      	movs	r3, #2
 80130bc:	e059      	b.n	8013172 <HAL_FLASHEx_Erase+0xca>
 80130be:	4b2f      	ldr	r3, [pc, #188]	@ (801317c <HAL_FLASHEx_Erase+0xd4>)
 80130c0:	2201      	movs	r2, #1
 80130c2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80130c4:	4b2d      	ldr	r3, [pc, #180]	@ (801317c <HAL_FLASHEx_Erase+0xd4>)
 80130c6:	2200      	movs	r2, #0
 80130c8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80130ca:	250f      	movs	r5, #15
 80130cc:	197c      	adds	r4, r7, r5
 80130ce:	23fa      	movs	r3, #250	@ 0xfa
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	0018      	movs	r0, r3
 80130d4:	f7ff ff7a 	bl	8012fcc <FLASH_WaitForLastOperation>
 80130d8:	0003      	movs	r3, r0
 80130da:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80130dc:	002c      	movs	r4, r5
 80130de:	193b      	adds	r3, r7, r4
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d13f      	bne.n	8013166 <HAL_FLASHEx_Erase+0xbe>
  {
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2201      	movs	r2, #1
 80130ea:	605a      	str	r2, [r3, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b04      	cmp	r3, #4
 80130f2:	d10a      	bne.n	801310a <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80130f4:	f000 f846 	bl	8013184 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80130f8:	193c      	adds	r4, r7, r4
 80130fa:	23fa      	movs	r3, #250	@ 0xfa
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	0018      	movs	r0, r3
 8013100:	f7ff ff64 	bl	8012fcc <FLASH_WaitForLastOperation>
 8013104:	0003      	movs	r3, r0
 8013106:	7023      	strb	r3, [r4, #0]
 8013108:	e02d      	b.n	8013166 <HAL_FLASHEx_Erase+0xbe>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	2201      	movs	r2, #1
 801310e:	4252      	negs	r2, r2
 8013110:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	689b      	ldr	r3, [r3, #8]
 8013116:	60bb      	str	r3, [r7, #8]
 8013118:	e017      	b.n	801314a <HAL_FLASHEx_Erase+0xa2>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	0018      	movs	r0, r3
 801311e:	f000 f841 	bl	80131a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013122:	250f      	movs	r5, #15
 8013124:	197c      	adds	r4, r7, r5
 8013126:	23fa      	movs	r3, #250	@ 0xfa
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	0018      	movs	r0, r3
 801312c:	f7ff ff4e 	bl	8012fcc <FLASH_WaitForLastOperation>
 8013130:	0003      	movs	r3, r0
 8013132:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8013134:	197b      	adds	r3, r7, r5
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d003      	beq.n	8013144 <HAL_FLASHEx_Erase+0x9c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	68ba      	ldr	r2, [r7, #8]
 8013140:	601a      	str	r2, [r3, #0]
          break;
 8013142:	e00a      	b.n	801315a <HAL_FLASHEx_Erase+0xb2>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	3301      	adds	r3, #1
 8013148:	60bb      	str	r3, [r7, #8]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	689a      	ldr	r2, [r3, #8]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	18d3      	adds	r3, r2, r3
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	429a      	cmp	r2, r3
 8013158:	d3df      	bcc.n	801311a <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 801315a:	4b09      	ldr	r3, [pc, #36]	@ (8013180 <HAL_FLASHEx_Erase+0xd8>)
 801315c:	695a      	ldr	r2, [r3, #20]
 801315e:	4b08      	ldr	r3, [pc, #32]	@ (8013180 <HAL_FLASHEx_Erase+0xd8>)
 8013160:	2102      	movs	r1, #2
 8013162:	438a      	bics	r2, r1
 8013164:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013166:	4b05      	ldr	r3, [pc, #20]	@ (801317c <HAL_FLASHEx_Erase+0xd4>)
 8013168:	2200      	movs	r2, #0
 801316a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801316c:	230f      	movs	r3, #15
 801316e:	18fb      	adds	r3, r7, r3
 8013170:	781b      	ldrb	r3, [r3, #0]
}
 8013172:	0018      	movs	r0, r3
 8013174:	46bd      	mov	sp, r7
 8013176:	b004      	add	sp, #16
 8013178:	bdb0      	pop	{r4, r5, r7, pc}
 801317a:	46c0      	nop			@ (mov r8, r8)
 801317c:	20001170 	.word	0x20001170
 8013180:	40022000 	.word	0x40022000

08013184 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  SET_BIT(FLASH->CR, (FLASH_CR_STRT | FLASH_CR_MER1));
 8013188:	4b04      	ldr	r3, [pc, #16]	@ (801319c <FLASH_MassErase+0x18>)
 801318a:	695a      	ldr	r2, [r3, #20]
 801318c:	4b03      	ldr	r3, [pc, #12]	@ (801319c <FLASH_MassErase+0x18>)
 801318e:	4904      	ldr	r1, [pc, #16]	@ (80131a0 <FLASH_MassErase+0x1c>)
 8013190:	430a      	orrs	r2, r1
 8013192:	615a      	str	r2, [r3, #20]
}
 8013194:	46c0      	nop			@ (mov r8, r8)
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	46c0      	nop			@ (mov r8, r8)
 801319c:	40022000 	.word	0x40022000
 80131a0:	00010004 	.word	0x00010004

080131a4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(FLASH_BANK_1));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80131ac:	4b08      	ldr	r3, [pc, #32]	@ (80131d0 <FLASH_PageErase+0x2c>)
 80131ae:	695b      	ldr	r3, [r3, #20]
 80131b0:	4a08      	ldr	r2, [pc, #32]	@ (80131d4 <FLASH_PageErase+0x30>)
 80131b2:	4013      	ands	r3, r2
 80131b4:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	00da      	lsls	r2, r3, #3
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	431a      	orrs	r2, r3
 80131be:	4b04      	ldr	r3, [pc, #16]	@ (80131d0 <FLASH_PageErase+0x2c>)
 80131c0:	4905      	ldr	r1, [pc, #20]	@ (80131d8 <FLASH_PageErase+0x34>)
 80131c2:	430a      	orrs	r2, r1
 80131c4:	615a      	str	r2, [r3, #20]
}
 80131c6:	46c0      	nop			@ (mov r8, r8)
 80131c8:	46bd      	mov	sp, r7
 80131ca:	b004      	add	sp, #16
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	46c0      	nop			@ (mov r8, r8)
 80131d0:	40022000 	.word	0x40022000
 80131d4:	fffffc07 	.word	0xfffffc07
 80131d8:	00010002 	.word	0x00010002

080131dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b086      	sub	sp, #24
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80131e6:	2300      	movs	r3, #0
 80131e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80131ea:	e153      	b.n	8013494 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	2101      	movs	r1, #1
 80131f2:	697a      	ldr	r2, [r7, #20]
 80131f4:	4091      	lsls	r1, r2
 80131f6:	000a      	movs	r2, r1
 80131f8:	4013      	ands	r3, r2
 80131fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d100      	bne.n	8013204 <HAL_GPIO_Init+0x28>
 8013202:	e144      	b.n	801348e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	2203      	movs	r2, #3
 801320a:	4013      	ands	r3, r2
 801320c:	2b01      	cmp	r3, #1
 801320e:	d005      	beq.n	801321c <HAL_GPIO_Init+0x40>
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	2203      	movs	r2, #3
 8013216:	4013      	ands	r3, r2
 8013218:	2b02      	cmp	r3, #2
 801321a:	d130      	bne.n	801327e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	689b      	ldr	r3, [r3, #8]
 8013220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	005b      	lsls	r3, r3, #1
 8013226:	2203      	movs	r2, #3
 8013228:	409a      	lsls	r2, r3
 801322a:	0013      	movs	r3, r2
 801322c:	43da      	mvns	r2, r3
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	4013      	ands	r3, r2
 8013232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	68da      	ldr	r2, [r3, #12]
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	005b      	lsls	r3, r3, #1
 801323c:	409a      	lsls	r2, r3
 801323e:	0013      	movs	r3, r2
 8013240:	693a      	ldr	r2, [r7, #16]
 8013242:	4313      	orrs	r3, r2
 8013244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	693a      	ldr	r2, [r7, #16]
 801324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013252:	2201      	movs	r2, #1
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	409a      	lsls	r2, r3
 8013258:	0013      	movs	r3, r2
 801325a:	43da      	mvns	r2, r3
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	4013      	ands	r3, r2
 8013260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	091b      	lsrs	r3, r3, #4
 8013268:	2201      	movs	r2, #1
 801326a:	401a      	ands	r2, r3
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	409a      	lsls	r2, r3
 8013270:	0013      	movs	r3, r2
 8013272:	693a      	ldr	r2, [r7, #16]
 8013274:	4313      	orrs	r3, r2
 8013276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	693a      	ldr	r2, [r7, #16]
 801327c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	2203      	movs	r2, #3
 8013284:	4013      	ands	r3, r2
 8013286:	2b03      	cmp	r3, #3
 8013288:	d017      	beq.n	80132ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	2203      	movs	r2, #3
 8013296:	409a      	lsls	r2, r3
 8013298:	0013      	movs	r3, r2
 801329a:	43da      	mvns	r2, r3
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	4013      	ands	r3, r2
 80132a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	689a      	ldr	r2, [r3, #8]
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	005b      	lsls	r3, r3, #1
 80132aa:	409a      	lsls	r2, r3
 80132ac:	0013      	movs	r3, r2
 80132ae:	693a      	ldr	r2, [r7, #16]
 80132b0:	4313      	orrs	r3, r2
 80132b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	693a      	ldr	r2, [r7, #16]
 80132b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	2203      	movs	r2, #3
 80132c0:	4013      	ands	r3, r2
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d123      	bne.n	801330e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	08da      	lsrs	r2, r3, #3
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	3208      	adds	r2, #8
 80132ce:	0092      	lsls	r2, r2, #2
 80132d0:	58d3      	ldr	r3, [r2, r3]
 80132d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	2207      	movs	r2, #7
 80132d8:	4013      	ands	r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	220f      	movs	r2, #15
 80132de:	409a      	lsls	r2, r3
 80132e0:	0013      	movs	r3, r2
 80132e2:	43da      	mvns	r2, r3
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	4013      	ands	r3, r2
 80132e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	691a      	ldr	r2, [r3, #16]
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	2107      	movs	r1, #7
 80132f2:	400b      	ands	r3, r1
 80132f4:	009b      	lsls	r3, r3, #2
 80132f6:	409a      	lsls	r2, r3
 80132f8:	0013      	movs	r3, r2
 80132fa:	693a      	ldr	r2, [r7, #16]
 80132fc:	4313      	orrs	r3, r2
 80132fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	08da      	lsrs	r2, r3, #3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	3208      	adds	r2, #8
 8013308:	0092      	lsls	r2, r2, #2
 801330a:	6939      	ldr	r1, [r7, #16]
 801330c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	005b      	lsls	r3, r3, #1
 8013318:	2203      	movs	r2, #3
 801331a:	409a      	lsls	r2, r3
 801331c:	0013      	movs	r3, r2
 801331e:	43da      	mvns	r2, r3
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	4013      	ands	r3, r2
 8013324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	2203      	movs	r2, #3
 801332c:	401a      	ands	r2, r3
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	409a      	lsls	r2, r3
 8013334:	0013      	movs	r3, r2
 8013336:	693a      	ldr	r2, [r7, #16]
 8013338:	4313      	orrs	r3, r2
 801333a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	693a      	ldr	r2, [r7, #16]
 8013340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	685a      	ldr	r2, [r3, #4]
 8013346:	23c0      	movs	r3, #192	@ 0xc0
 8013348:	029b      	lsls	r3, r3, #10
 801334a:	4013      	ands	r3, r2
 801334c:	d100      	bne.n	8013350 <HAL_GPIO_Init+0x174>
 801334e:	e09e      	b.n	801348e <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8013350:	4a56      	ldr	r2, [pc, #344]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	089b      	lsrs	r3, r3, #2
 8013356:	3318      	adds	r3, #24
 8013358:	009b      	lsls	r3, r3, #2
 801335a:	589b      	ldr	r3, [r3, r2]
 801335c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	2203      	movs	r2, #3
 8013362:	4013      	ands	r3, r2
 8013364:	00db      	lsls	r3, r3, #3
 8013366:	220f      	movs	r2, #15
 8013368:	409a      	lsls	r2, r3
 801336a:	0013      	movs	r3, r2
 801336c:	43da      	mvns	r2, r3
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	4013      	ands	r3, r2
 8013372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	23a0      	movs	r3, #160	@ 0xa0
 8013378:	05db      	lsls	r3, r3, #23
 801337a:	429a      	cmp	r2, r3
 801337c:	d01f      	beq.n	80133be <HAL_GPIO_Init+0x1e2>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	4a4b      	ldr	r2, [pc, #300]	@ (80134b0 <HAL_GPIO_Init+0x2d4>)
 8013382:	4293      	cmp	r3, r2
 8013384:	d019      	beq.n	80133ba <HAL_GPIO_Init+0x1de>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	4a4a      	ldr	r2, [pc, #296]	@ (80134b4 <HAL_GPIO_Init+0x2d8>)
 801338a:	4293      	cmp	r3, r2
 801338c:	d013      	beq.n	80133b6 <HAL_GPIO_Init+0x1da>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	4a49      	ldr	r2, [pc, #292]	@ (80134b8 <HAL_GPIO_Init+0x2dc>)
 8013392:	4293      	cmp	r3, r2
 8013394:	d00d      	beq.n	80133b2 <HAL_GPIO_Init+0x1d6>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	4a48      	ldr	r2, [pc, #288]	@ (80134bc <HAL_GPIO_Init+0x2e0>)
 801339a:	4293      	cmp	r3, r2
 801339c:	d007      	beq.n	80133ae <HAL_GPIO_Init+0x1d2>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	4a47      	ldr	r2, [pc, #284]	@ (80134c0 <HAL_GPIO_Init+0x2e4>)
 80133a2:	4293      	cmp	r3, r2
 80133a4:	d101      	bne.n	80133aa <HAL_GPIO_Init+0x1ce>
 80133a6:	2305      	movs	r3, #5
 80133a8:	e00a      	b.n	80133c0 <HAL_GPIO_Init+0x1e4>
 80133aa:	2306      	movs	r3, #6
 80133ac:	e008      	b.n	80133c0 <HAL_GPIO_Init+0x1e4>
 80133ae:	2304      	movs	r3, #4
 80133b0:	e006      	b.n	80133c0 <HAL_GPIO_Init+0x1e4>
 80133b2:	2303      	movs	r3, #3
 80133b4:	e004      	b.n	80133c0 <HAL_GPIO_Init+0x1e4>
 80133b6:	2302      	movs	r3, #2
 80133b8:	e002      	b.n	80133c0 <HAL_GPIO_Init+0x1e4>
 80133ba:	2301      	movs	r3, #1
 80133bc:	e000      	b.n	80133c0 <HAL_GPIO_Init+0x1e4>
 80133be:	2300      	movs	r3, #0
 80133c0:	697a      	ldr	r2, [r7, #20]
 80133c2:	2103      	movs	r1, #3
 80133c4:	400a      	ands	r2, r1
 80133c6:	00d2      	lsls	r2, r2, #3
 80133c8:	4093      	lsls	r3, r2
 80133ca:	693a      	ldr	r2, [r7, #16]
 80133cc:	4313      	orrs	r3, r2
 80133ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80133d0:	4936      	ldr	r1, [pc, #216]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	089b      	lsrs	r3, r3, #2
 80133d6:	3318      	adds	r3, #24
 80133d8:	009b      	lsls	r3, r3, #2
 80133da:	693a      	ldr	r2, [r7, #16]
 80133dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80133de:	4b33      	ldr	r3, [pc, #204]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	43da      	mvns	r2, r3
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	4013      	ands	r3, r2
 80133ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	685a      	ldr	r2, [r3, #4]
 80133f2:	2380      	movs	r3, #128	@ 0x80
 80133f4:	035b      	lsls	r3, r3, #13
 80133f6:	4013      	ands	r3, r2
 80133f8:	d003      	beq.n	8013402 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80133fa:	693a      	ldr	r2, [r7, #16]
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	4313      	orrs	r3, r2
 8013400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8013402:	4b2a      	ldr	r3, [pc, #168]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 8013404:	693a      	ldr	r2, [r7, #16]
 8013406:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8013408:	4b28      	ldr	r3, [pc, #160]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 801340a:	685b      	ldr	r3, [r3, #4]
 801340c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	43da      	mvns	r2, r3
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	4013      	ands	r3, r2
 8013416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	685a      	ldr	r2, [r3, #4]
 801341c:	2380      	movs	r3, #128	@ 0x80
 801341e:	039b      	lsls	r3, r3, #14
 8013420:	4013      	ands	r3, r2
 8013422:	d003      	beq.n	801342c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8013424:	693a      	ldr	r2, [r7, #16]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	4313      	orrs	r3, r2
 801342a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801342c:	4b1f      	ldr	r3, [pc, #124]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 801342e:	693a      	ldr	r2, [r7, #16]
 8013430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8013432:	4a1e      	ldr	r2, [pc, #120]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 8013434:	2384      	movs	r3, #132	@ 0x84
 8013436:	58d3      	ldr	r3, [r2, r3]
 8013438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	43da      	mvns	r2, r3
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	4013      	ands	r3, r2
 8013442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	685a      	ldr	r2, [r3, #4]
 8013448:	2380      	movs	r3, #128	@ 0x80
 801344a:	029b      	lsls	r3, r3, #10
 801344c:	4013      	ands	r3, r2
 801344e:	d003      	beq.n	8013458 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8013450:	693a      	ldr	r2, [r7, #16]
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	4313      	orrs	r3, r2
 8013456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013458:	4914      	ldr	r1, [pc, #80]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 801345a:	2284      	movs	r2, #132	@ 0x84
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8013460:	4a12      	ldr	r2, [pc, #72]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 8013462:	2380      	movs	r3, #128	@ 0x80
 8013464:	58d3      	ldr	r3, [r2, r3]
 8013466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	43da      	mvns	r2, r3
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	4013      	ands	r3, r2
 8013470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	685a      	ldr	r2, [r3, #4]
 8013476:	2380      	movs	r3, #128	@ 0x80
 8013478:	025b      	lsls	r3, r3, #9
 801347a:	4013      	ands	r3, r2
 801347c:	d003      	beq.n	8013486 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 801347e:	693a      	ldr	r2, [r7, #16]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	4313      	orrs	r3, r2
 8013484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8013486:	4909      	ldr	r1, [pc, #36]	@ (80134ac <HAL_GPIO_Init+0x2d0>)
 8013488:	2280      	movs	r2, #128	@ 0x80
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	3301      	adds	r3, #1
 8013492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	40da      	lsrs	r2, r3
 801349c:	1e13      	subs	r3, r2, #0
 801349e:	d000      	beq.n	80134a2 <HAL_GPIO_Init+0x2c6>
 80134a0:	e6a4      	b.n	80131ec <HAL_GPIO_Init+0x10>
  }
}
 80134a2:	46c0      	nop			@ (mov r8, r8)
 80134a4:	46c0      	nop			@ (mov r8, r8)
 80134a6:	46bd      	mov	sp, r7
 80134a8:	b006      	add	sp, #24
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	40021800 	.word	0x40021800
 80134b0:	50000400 	.word	0x50000400
 80134b4:	50000800 	.word	0x50000800
 80134b8:	50000c00 	.word	0x50000c00
 80134bc:	50001000 	.word	0x50001000
 80134c0:	50001400 	.word	0x50001400

080134c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80134ce:	2300      	movs	r3, #0
 80134d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80134d2:	e0c0      	b.n	8013656 <HAL_GPIO_DeInit+0x192>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80134d4:	2201      	movs	r2, #1
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	409a      	lsls	r2, r3
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	4013      	ands	r3, r2
 80134de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80134e0:	693b      	ldr	r3, [r7, #16]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d100      	bne.n	80134e8 <HAL_GPIO_DeInit+0x24>
 80134e6:	e0b3      	b.n	8013650 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80134e8:	4a60      	ldr	r2, [pc, #384]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	089b      	lsrs	r3, r3, #2
 80134ee:	3318      	adds	r3, #24
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	589b      	ldr	r3, [r3, r2]
 80134f4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	2203      	movs	r2, #3
 80134fa:	4013      	ands	r3, r2
 80134fc:	00db      	lsls	r3, r3, #3
 80134fe:	220f      	movs	r2, #15
 8013500:	409a      	lsls	r2, r3
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	4013      	ands	r3, r2
 8013506:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	23a0      	movs	r3, #160	@ 0xa0
 801350c:	05db      	lsls	r3, r3, #23
 801350e:	429a      	cmp	r2, r3
 8013510:	d01f      	beq.n	8013552 <HAL_GPIO_DeInit+0x8e>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4a56      	ldr	r2, [pc, #344]	@ (8013670 <HAL_GPIO_DeInit+0x1ac>)
 8013516:	4293      	cmp	r3, r2
 8013518:	d019      	beq.n	801354e <HAL_GPIO_DeInit+0x8a>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4a55      	ldr	r2, [pc, #340]	@ (8013674 <HAL_GPIO_DeInit+0x1b0>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d013      	beq.n	801354a <HAL_GPIO_DeInit+0x86>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	4a54      	ldr	r2, [pc, #336]	@ (8013678 <HAL_GPIO_DeInit+0x1b4>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d00d      	beq.n	8013546 <HAL_GPIO_DeInit+0x82>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4a53      	ldr	r2, [pc, #332]	@ (801367c <HAL_GPIO_DeInit+0x1b8>)
 801352e:	4293      	cmp	r3, r2
 8013530:	d007      	beq.n	8013542 <HAL_GPIO_DeInit+0x7e>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4a52      	ldr	r2, [pc, #328]	@ (8013680 <HAL_GPIO_DeInit+0x1bc>)
 8013536:	4293      	cmp	r3, r2
 8013538:	d101      	bne.n	801353e <HAL_GPIO_DeInit+0x7a>
 801353a:	2305      	movs	r3, #5
 801353c:	e00a      	b.n	8013554 <HAL_GPIO_DeInit+0x90>
 801353e:	2306      	movs	r3, #6
 8013540:	e008      	b.n	8013554 <HAL_GPIO_DeInit+0x90>
 8013542:	2304      	movs	r3, #4
 8013544:	e006      	b.n	8013554 <HAL_GPIO_DeInit+0x90>
 8013546:	2303      	movs	r3, #3
 8013548:	e004      	b.n	8013554 <HAL_GPIO_DeInit+0x90>
 801354a:	2302      	movs	r3, #2
 801354c:	e002      	b.n	8013554 <HAL_GPIO_DeInit+0x90>
 801354e:	2301      	movs	r3, #1
 8013550:	e000      	b.n	8013554 <HAL_GPIO_DeInit+0x90>
 8013552:	2300      	movs	r3, #0
 8013554:	697a      	ldr	r2, [r7, #20]
 8013556:	2103      	movs	r1, #3
 8013558:	400a      	ands	r2, r1
 801355a:	00d2      	lsls	r2, r2, #3
 801355c:	4093      	lsls	r3, r2
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	429a      	cmp	r2, r3
 8013562:	d136      	bne.n	80135d2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8013564:	4a41      	ldr	r2, [pc, #260]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 8013566:	2380      	movs	r3, #128	@ 0x80
 8013568:	58d3      	ldr	r3, [r2, r3]
 801356a:	693a      	ldr	r2, [r7, #16]
 801356c:	43d2      	mvns	r2, r2
 801356e:	493f      	ldr	r1, [pc, #252]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 8013570:	4013      	ands	r3, r2
 8013572:	2280      	movs	r2, #128	@ 0x80
 8013574:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8013576:	4a3d      	ldr	r2, [pc, #244]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 8013578:	2384      	movs	r3, #132	@ 0x84
 801357a:	58d3      	ldr	r3, [r2, r3]
 801357c:	693a      	ldr	r2, [r7, #16]
 801357e:	43d2      	mvns	r2, r2
 8013580:	493a      	ldr	r1, [pc, #232]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 8013582:	4013      	ands	r3, r2
 8013584:	2284      	movs	r2, #132	@ 0x84
 8013586:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8013588:	4b38      	ldr	r3, [pc, #224]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 801358a:	685a      	ldr	r2, [r3, #4]
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	43d9      	mvns	r1, r3
 8013590:	4b36      	ldr	r3, [pc, #216]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 8013592:	400a      	ands	r2, r1
 8013594:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8013596:	4b35      	ldr	r3, [pc, #212]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	43d9      	mvns	r1, r3
 801359e:	4b33      	ldr	r3, [pc, #204]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 80135a0:	400a      	ands	r2, r1
 80135a2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	2203      	movs	r2, #3
 80135a8:	4013      	ands	r3, r2
 80135aa:	00db      	lsls	r3, r3, #3
 80135ac:	220f      	movs	r2, #15
 80135ae:	409a      	lsls	r2, r3
 80135b0:	0013      	movs	r3, r2
 80135b2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80135b4:	4a2d      	ldr	r2, [pc, #180]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	089b      	lsrs	r3, r3, #2
 80135ba:	3318      	adds	r3, #24
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	589a      	ldr	r2, [r3, r2]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	43d9      	mvns	r1, r3
 80135c4:	4829      	ldr	r0, [pc, #164]	@ (801366c <HAL_GPIO_DeInit+0x1a8>)
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	089b      	lsrs	r3, r3, #2
 80135ca:	400a      	ands	r2, r1
 80135cc:	3318      	adds	r3, #24
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	005b      	lsls	r3, r3, #1
 80135da:	2103      	movs	r1, #3
 80135dc:	4099      	lsls	r1, r3
 80135de:	000b      	movs	r3, r1
 80135e0:	431a      	orrs	r2, r3
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	08da      	lsrs	r2, r3, #3
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	3208      	adds	r2, #8
 80135ee:	0092      	lsls	r2, r2, #2
 80135f0:	58d3      	ldr	r3, [r2, r3]
 80135f2:	697a      	ldr	r2, [r7, #20]
 80135f4:	2107      	movs	r1, #7
 80135f6:	400a      	ands	r2, r1
 80135f8:	0092      	lsls	r2, r2, #2
 80135fa:	210f      	movs	r1, #15
 80135fc:	4091      	lsls	r1, r2
 80135fe:	000a      	movs	r2, r1
 8013600:	43d1      	mvns	r1, r2
 8013602:	697a      	ldr	r2, [r7, #20]
 8013604:	08d2      	lsrs	r2, r2, #3
 8013606:	4019      	ands	r1, r3
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	3208      	adds	r2, #8
 801360c:	0092      	lsls	r2, r2, #2
 801360e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	697a      	ldr	r2, [r7, #20]
 8013616:	0052      	lsls	r2, r2, #1
 8013618:	2103      	movs	r1, #3
 801361a:	4091      	lsls	r1, r2
 801361c:	000a      	movs	r2, r1
 801361e:	43d2      	mvns	r2, r2
 8013620:	401a      	ands	r2, r3
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	2101      	movs	r1, #1
 801362c:	697a      	ldr	r2, [r7, #20]
 801362e:	4091      	lsls	r1, r2
 8013630:	000a      	movs	r2, r1
 8013632:	43d2      	mvns	r2, r2
 8013634:	401a      	ands	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	68db      	ldr	r3, [r3, #12]
 801363e:	697a      	ldr	r2, [r7, #20]
 8013640:	0052      	lsls	r2, r2, #1
 8013642:	2103      	movs	r1, #3
 8013644:	4091      	lsls	r1, r2
 8013646:	000a      	movs	r2, r1
 8013648:	43d2      	mvns	r2, r2
 801364a:	401a      	ands	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	3301      	adds	r3, #1
 8013654:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8013656:	683a      	ldr	r2, [r7, #0]
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	40da      	lsrs	r2, r3
 801365c:	1e13      	subs	r3, r2, #0
 801365e:	d000      	beq.n	8013662 <HAL_GPIO_DeInit+0x19e>
 8013660:	e738      	b.n	80134d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8013662:	46c0      	nop			@ (mov r8, r8)
 8013664:	46c0      	nop			@ (mov r8, r8)
 8013666:	46bd      	mov	sp, r7
 8013668:	b006      	add	sp, #24
 801366a:	bd80      	pop	{r7, pc}
 801366c:	40021800 	.word	0x40021800
 8013670:	50000400 	.word	0x50000400
 8013674:	50000800 	.word	0x50000800
 8013678:	50000c00 	.word	0x50000c00
 801367c:	50001000 	.word	0x50001000
 8013680:	50001400 	.word	0x50001400

08013684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	000a      	movs	r2, r1
 801368e:	1cbb      	adds	r3, r7, #2
 8013690:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	691b      	ldr	r3, [r3, #16]
 8013696:	1cba      	adds	r2, r7, #2
 8013698:	8812      	ldrh	r2, [r2, #0]
 801369a:	4013      	ands	r3, r2
 801369c:	d004      	beq.n	80136a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801369e:	230f      	movs	r3, #15
 80136a0:	18fb      	adds	r3, r7, r3
 80136a2:	2201      	movs	r2, #1
 80136a4:	701a      	strb	r2, [r3, #0]
 80136a6:	e003      	b.n	80136b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80136a8:	230f      	movs	r3, #15
 80136aa:	18fb      	adds	r3, r7, r3
 80136ac:	2200      	movs	r2, #0
 80136ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80136b0:	230f      	movs	r3, #15
 80136b2:	18fb      	adds	r3, r7, r3
 80136b4:	781b      	ldrb	r3, [r3, #0]
}
 80136b6:	0018      	movs	r0, r3
 80136b8:	46bd      	mov	sp, r7
 80136ba:	b004      	add	sp, #16
 80136bc:	bd80      	pop	{r7, pc}

080136be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b082      	sub	sp, #8
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	0008      	movs	r0, r1
 80136c8:	0011      	movs	r1, r2
 80136ca:	1cbb      	adds	r3, r7, #2
 80136cc:	1c02      	adds	r2, r0, #0
 80136ce:	801a      	strh	r2, [r3, #0]
 80136d0:	1c7b      	adds	r3, r7, #1
 80136d2:	1c0a      	adds	r2, r1, #0
 80136d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80136d6:	1c7b      	adds	r3, r7, #1
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d004      	beq.n	80136e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80136de:	1cbb      	adds	r3, r7, #2
 80136e0:	881a      	ldrh	r2, [r3, #0]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80136e6:	e003      	b.n	80136f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80136e8:	1cbb      	adds	r3, r7, #2
 80136ea:	881a      	ldrh	r2, [r3, #0]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80136f0:	46c0      	nop			@ (mov r8, r8)
 80136f2:	46bd      	mov	sp, r7
 80136f4:	b002      	add	sp, #8
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	000a      	movs	r2, r1
 8013702:	1cbb      	adds	r3, r7, #2
 8013704:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	695b      	ldr	r3, [r3, #20]
 801370a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801370c:	1cbb      	adds	r3, r7, #2
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	4013      	ands	r3, r2
 8013714:	041a      	lsls	r2, r3, #16
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	43db      	mvns	r3, r3
 801371a:	1cb9      	adds	r1, r7, #2
 801371c:	8809      	ldrh	r1, [r1, #0]
 801371e:	400b      	ands	r3, r1
 8013720:	431a      	orrs	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	619a      	str	r2, [r3, #24]
}
 8013726:	46c0      	nop			@ (mov r8, r8)
 8013728:	46bd      	mov	sp, r7
 801372a:	b004      	add	sp, #16
 801372c:	bd80      	pop	{r7, pc}
	...

08013730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
 8013736:	0002      	movs	r2, r0
 8013738:	1dbb      	adds	r3, r7, #6
 801373a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 801373c:	4b10      	ldr	r3, [pc, #64]	@ (8013780 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	1dba      	adds	r2, r7, #6
 8013742:	8812      	ldrh	r2, [r2, #0]
 8013744:	4013      	ands	r3, r2
 8013746:	d008      	beq.n	801375a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8013748:	4b0d      	ldr	r3, [pc, #52]	@ (8013780 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801374a:	1dba      	adds	r2, r7, #6
 801374c:	8812      	ldrh	r2, [r2, #0]
 801374e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8013750:	1dbb      	adds	r3, r7, #6
 8013752:	881b      	ldrh	r3, [r3, #0]
 8013754:	0018      	movs	r0, r3
 8013756:	f000 f815 	bl	8013784 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 801375a:	4b09      	ldr	r3, [pc, #36]	@ (8013780 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 801375c:	691b      	ldr	r3, [r3, #16]
 801375e:	1dba      	adds	r2, r7, #6
 8013760:	8812      	ldrh	r2, [r2, #0]
 8013762:	4013      	ands	r3, r2
 8013764:	d008      	beq.n	8013778 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8013766:	4b06      	ldr	r3, [pc, #24]	@ (8013780 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8013768:	1dba      	adds	r2, r7, #6
 801376a:	8812      	ldrh	r2, [r2, #0]
 801376c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 801376e:	1dbb      	adds	r3, r7, #6
 8013770:	881b      	ldrh	r3, [r3, #0]
 8013772:	0018      	movs	r0, r3
 8013774:	f000 f810 	bl	8013798 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8013778:	46c0      	nop			@ (mov r8, r8)
 801377a:	46bd      	mov	sp, r7
 801377c:	b002      	add	sp, #8
 801377e:	bd80      	pop	{r7, pc}
 8013780:	40021800 	.word	0x40021800

08013784 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	af00      	add	r7, sp, #0
 801378a:	0002      	movs	r2, r0
 801378c:	1dbb      	adds	r3, r7, #6
 801378e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8013790:	46c0      	nop			@ (mov r8, r8)
 8013792:	46bd      	mov	sp, r7
 8013794:	b002      	add	sp, #8
 8013796:	bd80      	pop	{r7, pc}

08013798 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	0002      	movs	r2, r0
 80137a0:	1dbb      	adds	r3, r7, #6
 80137a2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80137a4:	46c0      	nop			@ (mov r8, r8)
 80137a6:	46bd      	mov	sp, r7
 80137a8:	b002      	add	sp, #8
 80137aa:	bd80      	pop	{r7, pc}

080137ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d101      	bne.n	80137be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80137ba:	2301      	movs	r3, #1
 80137bc:	e08f      	b.n	80138de <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2241      	movs	r2, #65	@ 0x41
 80137c2:	5c9b      	ldrb	r3, [r3, r2]
 80137c4:	b2db      	uxtb	r3, r3
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d107      	bne.n	80137da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2240      	movs	r2, #64	@ 0x40
 80137ce:	2100      	movs	r1, #0
 80137d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	0018      	movs	r0, r3
 80137d6:	f7f8 f881 	bl	800b8dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2241      	movs	r2, #65	@ 0x41
 80137de:	2124      	movs	r1, #36	@ 0x24
 80137e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2101      	movs	r1, #1
 80137ee:	438a      	bics	r2, r1
 80137f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	685a      	ldr	r2, [r3, #4]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	493b      	ldr	r1, [pc, #236]	@ (80138e8 <HAL_I2C_Init+0x13c>)
 80137fc:	400a      	ands	r2, r1
 80137fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	689a      	ldr	r2, [r3, #8]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	4938      	ldr	r1, [pc, #224]	@ (80138ec <HAL_I2C_Init+0x140>)
 801380c:	400a      	ands	r2, r1
 801380e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	68db      	ldr	r3, [r3, #12]
 8013814:	2b01      	cmp	r3, #1
 8013816:	d108      	bne.n	801382a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	689a      	ldr	r2, [r3, #8]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	2180      	movs	r1, #128	@ 0x80
 8013822:	0209      	lsls	r1, r1, #8
 8013824:	430a      	orrs	r2, r1
 8013826:	609a      	str	r2, [r3, #8]
 8013828:	e007      	b.n	801383a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	689a      	ldr	r2, [r3, #8]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2184      	movs	r1, #132	@ 0x84
 8013834:	0209      	lsls	r1, r1, #8
 8013836:	430a      	orrs	r2, r1
 8013838:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	2b02      	cmp	r3, #2
 8013840:	d109      	bne.n	8013856 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	685a      	ldr	r2, [r3, #4]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2180      	movs	r1, #128	@ 0x80
 801384e:	0109      	lsls	r1, r1, #4
 8013850:	430a      	orrs	r2, r1
 8013852:	605a      	str	r2, [r3, #4]
 8013854:	e007      	b.n	8013866 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	685a      	ldr	r2, [r3, #4]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4923      	ldr	r1, [pc, #140]	@ (80138f0 <HAL_I2C_Init+0x144>)
 8013862:	400a      	ands	r2, r1
 8013864:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	685a      	ldr	r2, [r3, #4]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	4920      	ldr	r1, [pc, #128]	@ (80138f4 <HAL_I2C_Init+0x148>)
 8013872:	430a      	orrs	r2, r1
 8013874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	68da      	ldr	r2, [r3, #12]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	491a      	ldr	r1, [pc, #104]	@ (80138ec <HAL_I2C_Init+0x140>)
 8013882:	400a      	ands	r2, r1
 8013884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	691a      	ldr	r2, [r3, #16]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	695b      	ldr	r3, [r3, #20]
 801388e:	431a      	orrs	r2, r3
 8013890:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	699b      	ldr	r3, [r3, #24]
 8013896:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	430a      	orrs	r2, r1
 801389e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	69d9      	ldr	r1, [r3, #28]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6a1a      	ldr	r2, [r3, #32]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	430a      	orrs	r2, r1
 80138ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	681a      	ldr	r2, [r3, #0]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2101      	movs	r1, #1
 80138bc:	430a      	orrs	r2, r1
 80138be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2200      	movs	r2, #0
 80138c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2241      	movs	r2, #65	@ 0x41
 80138ca:	2120      	movs	r1, #32
 80138cc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2200      	movs	r2, #0
 80138d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2242      	movs	r2, #66	@ 0x42
 80138d8:	2100      	movs	r1, #0
 80138da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80138dc:	2300      	movs	r3, #0
}
 80138de:	0018      	movs	r0, r3
 80138e0:	46bd      	mov	sp, r7
 80138e2:	b002      	add	sp, #8
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	46c0      	nop			@ (mov r8, r8)
 80138e8:	f0ffffff 	.word	0xf0ffffff
 80138ec:	ffff7fff 	.word	0xffff7fff
 80138f0:	fffff7ff 	.word	0xfffff7ff
 80138f4:	02008000 	.word	0x02008000

080138f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d101      	bne.n	801390a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8013906:	2301      	movs	r3, #1
 8013908:	e022      	b.n	8013950 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2241      	movs	r2, #65	@ 0x41
 801390e:	2124      	movs	r1, #36	@ 0x24
 8013910:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2101      	movs	r1, #1
 801391e:	438a      	bics	r2, r1
 8013920:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	0018      	movs	r0, r3
 8013926:	f7f8 f89f 	bl	800ba68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2200      	movs	r2, #0
 801392e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2241      	movs	r2, #65	@ 0x41
 8013934:	2100      	movs	r1, #0
 8013936:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2200      	movs	r2, #0
 801393c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2242      	movs	r2, #66	@ 0x42
 8013942:	2100      	movs	r1, #0
 8013944:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2240      	movs	r2, #64	@ 0x40
 801394a:	2100      	movs	r1, #0
 801394c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801394e:	2300      	movs	r3, #0
}
 8013950:	0018      	movs	r0, r3
 8013952:	46bd      	mov	sp, r7
 8013954:	b002      	add	sp, #8
 8013956:	bd80      	pop	{r7, pc}

08013958 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8013958:	b5b0      	push	{r4, r5, r7, lr}
 801395a:	b088      	sub	sp, #32
 801395c:	af02      	add	r7, sp, #8
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	0008      	movs	r0, r1
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	0019      	movs	r1, r3
 8013966:	230a      	movs	r3, #10
 8013968:	18fb      	adds	r3, r7, r3
 801396a:	1c02      	adds	r2, r0, #0
 801396c:	801a      	strh	r2, [r3, #0]
 801396e:	2308      	movs	r3, #8
 8013970:	18fb      	adds	r3, r7, r3
 8013972:	1c0a      	adds	r2, r1, #0
 8013974:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2241      	movs	r2, #65	@ 0x41
 801397a:	5c9b      	ldrb	r3, [r3, r2]
 801397c:	b2db      	uxtb	r3, r3
 801397e:	2b20      	cmp	r3, #32
 8013980:	d000      	beq.n	8013984 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8013982:	e0dd      	b.n	8013b40 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	699a      	ldr	r2, [r3, #24]
 801398a:	2380      	movs	r3, #128	@ 0x80
 801398c:	021b      	lsls	r3, r3, #8
 801398e:	401a      	ands	r2, r3
 8013990:	2380      	movs	r3, #128	@ 0x80
 8013992:	021b      	lsls	r3, r3, #8
 8013994:	429a      	cmp	r2, r3
 8013996:	d101      	bne.n	801399c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8013998:	2302      	movs	r3, #2
 801399a:	e0d2      	b.n	8013b42 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2240      	movs	r2, #64	@ 0x40
 80139a0:	5c9b      	ldrb	r3, [r3, r2]
 80139a2:	2b01      	cmp	r3, #1
 80139a4:	d101      	bne.n	80139aa <HAL_I2C_Master_Transmit_DMA+0x52>
 80139a6:	2302      	movs	r3, #2
 80139a8:	e0cb      	b.n	8013b42 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2240      	movs	r2, #64	@ 0x40
 80139ae:	2101      	movs	r1, #1
 80139b0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2241      	movs	r2, #65	@ 0x41
 80139b6:	2121      	movs	r1, #33	@ 0x21
 80139b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	2242      	movs	r2, #66	@ 0x42
 80139be:	2110      	movs	r1, #16
 80139c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	2200      	movs	r2, #0
 80139c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	687a      	ldr	r2, [r7, #4]
 80139cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2208      	movs	r2, #8
 80139d2:	18ba      	adds	r2, r7, r2
 80139d4:	8812      	ldrh	r2, [r2, #0]
 80139d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	4a5c      	ldr	r2, [pc, #368]	@ (8013b4c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80139dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	4a5b      	ldr	r2, [pc, #364]	@ (8013b50 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80139e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	2bff      	cmp	r3, #255	@ 0xff
 80139ec:	d906      	bls.n	80139fc <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	22ff      	movs	r2, #255	@ 0xff
 80139f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80139f4:	2380      	movs	r3, #128	@ 0x80
 80139f6:	045b      	lsls	r3, r3, #17
 80139f8:	617b      	str	r3, [r7, #20]
 80139fa:	e007      	b.n	8013a0c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a00:	b29a      	uxth	r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013a06:	2380      	movs	r3, #128	@ 0x80
 8013a08:	049b      	lsls	r3, r3, #18
 8013a0a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d100      	bne.n	8013a16 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8013a14:	e078      	b.n	8013b08 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d023      	beq.n	8013a66 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a22:	4a4c      	ldr	r2, [pc, #304]	@ (8013b54 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8013a24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a2a:	4a4b      	ldr	r2, [pc, #300]	@ (8013b58 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8013a2c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a32:	2200      	movs	r2, #0
 8013a34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013a42:	6879      	ldr	r1, [r7, #4]
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	3328      	adds	r3, #40	@ 0x28
 8013a4a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013a50:	2513      	movs	r5, #19
 8013a52:	197c      	adds	r4, r7, r5
 8013a54:	f7fe ff5a 	bl	801290c <HAL_DMA_Start_IT>
 8013a58:	0003      	movs	r3, r0
 8013a5a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013a5c:	197b      	adds	r3, r7, r5
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d13d      	bne.n	8013ae0 <HAL_I2C_Master_Transmit_DMA+0x188>
 8013a64:	e013      	b.n	8013a8e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	2241      	movs	r2, #65	@ 0x41
 8013a6a:	2120      	movs	r1, #32
 8013a6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2242      	movs	r2, #66	@ 0x42
 8013a72:	2100      	movs	r1, #0
 8013a74:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a7a:	2280      	movs	r2, #128	@ 0x80
 8013a7c:	431a      	orrs	r2, r3
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2240      	movs	r2, #64	@ 0x40
 8013a86:	2100      	movs	r1, #0
 8013a88:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e059      	b.n	8013b42 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a92:	b2da      	uxtb	r2, r3
 8013a94:	697c      	ldr	r4, [r7, #20]
 8013a96:	230a      	movs	r3, #10
 8013a98:	18fb      	adds	r3, r7, r3
 8013a9a:	8819      	ldrh	r1, [r3, #0]
 8013a9c:	68f8      	ldr	r0, [r7, #12]
 8013a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8013b5c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013aa0:	9300      	str	r3, [sp, #0]
 8013aa2:	0023      	movs	r3, r4
 8013aa4:	f001 fd94 	bl	80155d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013aac:	b29a      	uxth	r2, r3
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ab2:	1ad3      	subs	r3, r2, r3
 8013ab4:	b29a      	uxth	r2, r3
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2240      	movs	r2, #64	@ 0x40
 8013abe:	2100      	movs	r1, #0
 8013ac0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2110      	movs	r1, #16
 8013ac6:	0018      	movs	r0, r3
 8013ac8:	f001 fdbc 	bl	8015644 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	681a      	ldr	r2, [r3, #0]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	2180      	movs	r1, #128	@ 0x80
 8013ad8:	01c9      	lsls	r1, r1, #7
 8013ada:	430a      	orrs	r2, r1
 8013adc:	601a      	str	r2, [r3, #0]
 8013ade:	e02d      	b.n	8013b3c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2241      	movs	r2, #65	@ 0x41
 8013ae4:	2120      	movs	r1, #32
 8013ae6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2242      	movs	r2, #66	@ 0x42
 8013aec:	2100      	movs	r1, #0
 8013aee:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013af4:	2210      	movs	r2, #16
 8013af6:	431a      	orrs	r2, r3
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2240      	movs	r2, #64	@ 0x40
 8013b00:	2100      	movs	r1, #0
 8013b02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013b04:	2301      	movs	r3, #1
 8013b06:	e01c      	b.n	8013b42 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	4a15      	ldr	r2, [pc, #84]	@ (8013b60 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8013b0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b12:	b2da      	uxtb	r2, r3
 8013b14:	2380      	movs	r3, #128	@ 0x80
 8013b16:	049c      	lsls	r4, r3, #18
 8013b18:	230a      	movs	r3, #10
 8013b1a:	18fb      	adds	r3, r7, r3
 8013b1c:	8819      	ldrh	r1, [r3, #0]
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	4b0e      	ldr	r3, [pc, #56]	@ (8013b5c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013b22:	9300      	str	r3, [sp, #0]
 8013b24:	0023      	movs	r3, r4
 8013b26:	f001 fd53 	bl	80155d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2240      	movs	r2, #64	@ 0x40
 8013b2e:	2100      	movs	r1, #0
 8013b30:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	2101      	movs	r1, #1
 8013b36:	0018      	movs	r0, r3
 8013b38:	f001 fd84 	bl	8015644 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	e000      	b.n	8013b42 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013b40:	2302      	movs	r3, #2
  }
}
 8013b42:	0018      	movs	r0, r3
 8013b44:	46bd      	mov	sp, r7
 8013b46:	b006      	add	sp, #24
 8013b48:	bdb0      	pop	{r4, r5, r7, pc}
 8013b4a:	46c0      	nop			@ (mov r8, r8)
 8013b4c:	ffff0000 	.word	0xffff0000
 8013b50:	08014375 	.word	0x08014375
 8013b54:	08015421 	.word	0x08015421
 8013b58:	08015561 	.word	0x08015561
 8013b5c:	80002000 	.word	0x80002000
 8013b60:	08013f21 	.word	0x08013f21

08013b64 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8013b64:	b5b0      	push	{r4, r5, r7, lr}
 8013b66:	b088      	sub	sp, #32
 8013b68:	af02      	add	r7, sp, #8
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	0008      	movs	r0, r1
 8013b6e:	607a      	str	r2, [r7, #4]
 8013b70:	0019      	movs	r1, r3
 8013b72:	230a      	movs	r3, #10
 8013b74:	18fb      	adds	r3, r7, r3
 8013b76:	1c02      	adds	r2, r0, #0
 8013b78:	801a      	strh	r2, [r3, #0]
 8013b7a:	2308      	movs	r3, #8
 8013b7c:	18fb      	adds	r3, r7, r3
 8013b7e:	1c0a      	adds	r2, r1, #0
 8013b80:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2241      	movs	r2, #65	@ 0x41
 8013b86:	5c9b      	ldrb	r3, [r3, r2]
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	2b20      	cmp	r3, #32
 8013b8c:	d000      	beq.n	8013b90 <HAL_I2C_Master_Receive_DMA+0x2c>
 8013b8e:	e0dd      	b.n	8013d4c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	699a      	ldr	r2, [r3, #24]
 8013b96:	2380      	movs	r3, #128	@ 0x80
 8013b98:	021b      	lsls	r3, r3, #8
 8013b9a:	401a      	ands	r2, r3
 8013b9c:	2380      	movs	r3, #128	@ 0x80
 8013b9e:	021b      	lsls	r3, r3, #8
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d101      	bne.n	8013ba8 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8013ba4:	2302      	movs	r3, #2
 8013ba6:	e0d2      	b.n	8013d4e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2240      	movs	r2, #64	@ 0x40
 8013bac:	5c9b      	ldrb	r3, [r3, r2]
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d101      	bne.n	8013bb6 <HAL_I2C_Master_Receive_DMA+0x52>
 8013bb2:	2302      	movs	r3, #2
 8013bb4:	e0cb      	b.n	8013d4e <HAL_I2C_Master_Receive_DMA+0x1ea>
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2240      	movs	r2, #64	@ 0x40
 8013bba:	2101      	movs	r1, #1
 8013bbc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2241      	movs	r2, #65	@ 0x41
 8013bc2:	2122      	movs	r1, #34	@ 0x22
 8013bc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2242      	movs	r2, #66	@ 0x42
 8013bca:	2110      	movs	r1, #16
 8013bcc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	2208      	movs	r2, #8
 8013bde:	18ba      	adds	r2, r7, r2
 8013be0:	8812      	ldrh	r2, [r2, #0]
 8013be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	4a5c      	ldr	r2, [pc, #368]	@ (8013d58 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8013be8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	4a5b      	ldr	r2, [pc, #364]	@ (8013d5c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8013bee:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bf4:	b29b      	uxth	r3, r3
 8013bf6:	2bff      	cmp	r3, #255	@ 0xff
 8013bf8:	d906      	bls.n	8013c08 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	22ff      	movs	r2, #255	@ 0xff
 8013bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013c00:	2380      	movs	r3, #128	@ 0x80
 8013c02:	045b      	lsls	r3, r3, #17
 8013c04:	617b      	str	r3, [r7, #20]
 8013c06:	e007      	b.n	8013c18 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013c12:	2380      	movs	r3, #128	@ 0x80
 8013c14:	049b      	lsls	r3, r3, #18
 8013c16:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d100      	bne.n	8013c22 <HAL_I2C_Master_Receive_DMA+0xbe>
 8013c20:	e078      	b.n	8013d14 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d023      	beq.n	8013c72 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8013d60 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8013c30:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c36:	4a4b      	ldr	r2, [pc, #300]	@ (8013d64 <HAL_I2C_Master_Receive_DMA+0x200>)
 8013c38:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c3e:	2200      	movs	r2, #0
 8013c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c46:	2200      	movs	r2, #0
 8013c48:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	3324      	adds	r3, #36	@ 0x24
 8013c54:	0019      	movs	r1, r3
 8013c56:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013c5c:	2513      	movs	r5, #19
 8013c5e:	197c      	adds	r4, r7, r5
 8013c60:	f7fe fe54 	bl	801290c <HAL_DMA_Start_IT>
 8013c64:	0003      	movs	r3, r0
 8013c66:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013c68:	197b      	adds	r3, r7, r5
 8013c6a:	781b      	ldrb	r3, [r3, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d13d      	bne.n	8013cec <HAL_I2C_Master_Receive_DMA+0x188>
 8013c70:	e013      	b.n	8013c9a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2241      	movs	r2, #65	@ 0x41
 8013c76:	2120      	movs	r1, #32
 8013c78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2242      	movs	r2, #66	@ 0x42
 8013c7e:	2100      	movs	r1, #0
 8013c80:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c86:	2280      	movs	r2, #128	@ 0x80
 8013c88:	431a      	orrs	r2, r3
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2240      	movs	r2, #64	@ 0x40
 8013c92:	2100      	movs	r1, #0
 8013c94:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013c96:	2301      	movs	r3, #1
 8013c98:	e059      	b.n	8013d4e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c9e:	b2da      	uxtb	r2, r3
 8013ca0:	697c      	ldr	r4, [r7, #20]
 8013ca2:	230a      	movs	r3, #10
 8013ca4:	18fb      	adds	r3, r7, r3
 8013ca6:	8819      	ldrh	r1, [r3, #0]
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	4b2f      	ldr	r3, [pc, #188]	@ (8013d68 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013cac:	9300      	str	r3, [sp, #0]
 8013cae:	0023      	movs	r3, r4
 8013cb0:	f001 fc8e 	bl	80155d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013cb8:	b29a      	uxth	r2, r3
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cbe:	1ad3      	subs	r3, r2, r3
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2240      	movs	r2, #64	@ 0x40
 8013cca:	2100      	movs	r1, #0
 8013ccc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	2110      	movs	r1, #16
 8013cd2:	0018      	movs	r0, r3
 8013cd4:	f001 fcb6 	bl	8015644 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	681a      	ldr	r2, [r3, #0]
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2180      	movs	r1, #128	@ 0x80
 8013ce4:	0209      	lsls	r1, r1, #8
 8013ce6:	430a      	orrs	r2, r1
 8013ce8:	601a      	str	r2, [r3, #0]
 8013cea:	e02d      	b.n	8013d48 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	2241      	movs	r2, #65	@ 0x41
 8013cf0:	2120      	movs	r1, #32
 8013cf2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2242      	movs	r2, #66	@ 0x42
 8013cf8:	2100      	movs	r1, #0
 8013cfa:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d00:	2210      	movs	r2, #16
 8013d02:	431a      	orrs	r2, r3
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2240      	movs	r2, #64	@ 0x40
 8013d0c:	2100      	movs	r1, #0
 8013d0e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013d10:	2301      	movs	r3, #1
 8013d12:	e01c      	b.n	8013d4e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	4a15      	ldr	r2, [pc, #84]	@ (8013d6c <HAL_I2C_Master_Receive_DMA+0x208>)
 8013d18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d1e:	b2da      	uxtb	r2, r3
 8013d20:	2380      	movs	r3, #128	@ 0x80
 8013d22:	049c      	lsls	r4, r3, #18
 8013d24:	230a      	movs	r3, #10
 8013d26:	18fb      	adds	r3, r7, r3
 8013d28:	8819      	ldrh	r1, [r3, #0]
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8013d68 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	0023      	movs	r3, r4
 8013d32:	f001 fc4d 	bl	80155d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2240      	movs	r2, #64	@ 0x40
 8013d3a:	2100      	movs	r1, #0
 8013d3c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2102      	movs	r1, #2
 8013d42:	0018      	movs	r0, r3
 8013d44:	f001 fc7e 	bl	8015644 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	e000      	b.n	8013d4e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013d4c:	2302      	movs	r3, #2
  }
}
 8013d4e:	0018      	movs	r0, r3
 8013d50:	46bd      	mov	sp, r7
 8013d52:	b006      	add	sp, #24
 8013d54:	bdb0      	pop	{r4, r5, r7, pc}
 8013d56:	46c0      	nop			@ (mov r8, r8)
 8013d58:	ffff0000 	.word	0xffff0000
 8013d5c:	08014375 	.word	0x08014375
 8013d60:	080154c1 	.word	0x080154c1
 8013d64:	08015561 	.word	0x08015561
 8013d68:	80002400 	.word	0x80002400
 8013d6c:	08013f21 	.word	0x08013f21

08013d70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	699b      	ldr	r3, [r3, #24]
 8013d7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d005      	beq.n	8013d9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d94:	68ba      	ldr	r2, [r7, #8]
 8013d96:	68f9      	ldr	r1, [r7, #12]
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	4798      	blx	r3
  }
}
 8013d9c:	46c0      	nop			@ (mov r8, r8)
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	b004      	add	sp, #16
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b086      	sub	sp, #24
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	699b      	ldr	r3, [r3, #24]
 8013db2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013dbc:	697a      	ldr	r2, [r7, #20]
 8013dbe:	2380      	movs	r3, #128	@ 0x80
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	4013      	ands	r3, r2
 8013dc4:	d00e      	beq.n	8013de4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	2280      	movs	r2, #128	@ 0x80
 8013dca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013dcc:	d00a      	beq.n	8013de4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	431a      	orrs	r2, r3
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	2280      	movs	r2, #128	@ 0x80
 8013de0:	0052      	lsls	r2, r2, #1
 8013de2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013de4:	697a      	ldr	r2, [r7, #20]
 8013de6:	2380      	movs	r3, #128	@ 0x80
 8013de8:	00db      	lsls	r3, r3, #3
 8013dea:	4013      	ands	r3, r2
 8013dec:	d00e      	beq.n	8013e0c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	2280      	movs	r2, #128	@ 0x80
 8013df2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013df4:	d00a      	beq.n	8013e0c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dfa:	2208      	movs	r2, #8
 8013dfc:	431a      	orrs	r2, r3
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2280      	movs	r2, #128	@ 0x80
 8013e08:	00d2      	lsls	r2, r2, #3
 8013e0a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013e0c:	697a      	ldr	r2, [r7, #20]
 8013e0e:	2380      	movs	r3, #128	@ 0x80
 8013e10:	009b      	lsls	r3, r3, #2
 8013e12:	4013      	ands	r3, r2
 8013e14:	d00e      	beq.n	8013e34 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	2280      	movs	r2, #128	@ 0x80
 8013e1a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8013e1c:	d00a      	beq.n	8013e34 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e22:	2202      	movs	r2, #2
 8013e24:	431a      	orrs	r2, r3
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2280      	movs	r2, #128	@ 0x80
 8013e30:	0092      	lsls	r2, r2, #2
 8013e32:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e38:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	220b      	movs	r2, #11
 8013e3e:	4013      	ands	r3, r2
 8013e40:	d005      	beq.n	8013e4e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	0011      	movs	r1, r2
 8013e48:	0018      	movs	r0, r3
 8013e4a:	f001 f99b 	bl	8015184 <I2C_ITError>
  }
}
 8013e4e:	46c0      	nop			@ (mov r8, r8)
 8013e50:	46bd      	mov	sp, r7
 8013e52:	b006      	add	sp, #24
 8013e54:	bd80      	pop	{r7, pc}

08013e56 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013e56:	b580      	push	{r7, lr}
 8013e58:	b082      	sub	sp, #8
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8013e5e:	46c0      	nop			@ (mov r8, r8)
 8013e60:	46bd      	mov	sp, r7
 8013e62:	b002      	add	sp, #8
 8013e64:	bd80      	pop	{r7, pc}

08013e66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013e66:	b580      	push	{r7, lr}
 8013e68:	b082      	sub	sp, #8
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8013e6e:	46c0      	nop			@ (mov r8, r8)
 8013e70:	46bd      	mov	sp, r7
 8013e72:	b002      	add	sp, #8
 8013e74:	bd80      	pop	{r7, pc}

08013e76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013e76:	b580      	push	{r7, lr}
 8013e78:	b082      	sub	sp, #8
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8013e7e:	46c0      	nop			@ (mov r8, r8)
 8013e80:	46bd      	mov	sp, r7
 8013e82:	b002      	add	sp, #8
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b082      	sub	sp, #8
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8013e8e:	46c0      	nop			@ (mov r8, r8)
 8013e90:	46bd      	mov	sp, r7
 8013e92:	b002      	add	sp, #8
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8013e96:	b580      	push	{r7, lr}
 8013e98:	b082      	sub	sp, #8
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
 8013e9e:	0008      	movs	r0, r1
 8013ea0:	0011      	movs	r1, r2
 8013ea2:	1cfb      	adds	r3, r7, #3
 8013ea4:	1c02      	adds	r2, r0, #0
 8013ea6:	701a      	strb	r2, [r3, #0]
 8013ea8:	003b      	movs	r3, r7
 8013eaa:	1c0a      	adds	r2, r1, #0
 8013eac:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8013eae:	46c0      	nop			@ (mov r8, r8)
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	b002      	add	sp, #8
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b082      	sub	sp, #8
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8013ebe:	46c0      	nop			@ (mov r8, r8)
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	b002      	add	sp, #8
 8013ec4:	bd80      	pop	{r7, pc}

08013ec6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013ec6:	b580      	push	{r7, lr}
 8013ec8:	b082      	sub	sp, #8
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8013ece:	46c0      	nop			@ (mov r8, r8)
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	b002      	add	sp, #8
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013ed6:	b580      	push	{r7, lr}
 8013ed8:	b082      	sub	sp, #8
 8013eda:	af00      	add	r7, sp, #0
 8013edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8013ede:	46c0      	nop			@ (mov r8, r8)
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	b002      	add	sp, #8
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b082      	sub	sp, #8
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8013eee:	46c0      	nop			@ (mov r8, r8)
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	b002      	add	sp, #8
 8013ef4:	bd80      	pop	{r7, pc}

08013ef6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013ef6:	b580      	push	{r7, lr}
 8013ef8:	b082      	sub	sp, #8
 8013efa:	af00      	add	r7, sp, #0
 8013efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8013efe:	46c0      	nop			@ (mov r8, r8)
 8013f00:	46bd      	mov	sp, r7
 8013f02:	b002      	add	sp, #8
 8013f04:	bd80      	pop	{r7, pc}

08013f06 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8013f06:	b580      	push	{r7, lr}
 8013f08:	b082      	sub	sp, #8
 8013f0a:	af00      	add	r7, sp, #0
 8013f0c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2241      	movs	r2, #65	@ 0x41
 8013f12:	5c9b      	ldrb	r3, [r3, r2]
 8013f14:	b2db      	uxtb	r3, r3
}
 8013f16:	0018      	movs	r0, r3
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	b002      	add	sp, #8
 8013f1c:	bd80      	pop	{r7, pc}
	...

08013f20 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8013f20:	b590      	push	{r4, r7, lr}
 8013f22:	b089      	sub	sp, #36	@ 0x24
 8013f24:	af02      	add	r7, sp, #8
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	2240      	movs	r2, #64	@ 0x40
 8013f34:	5c9b      	ldrb	r3, [r3, r2]
 8013f36:	2b01      	cmp	r3, #1
 8013f38:	d101      	bne.n	8013f3e <I2C_Master_ISR_IT+0x1e>
 8013f3a:	2302      	movs	r3, #2
 8013f3c:	e113      	b.n	8014166 <I2C_Master_ISR_IT+0x246>
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2240      	movs	r2, #64	@ 0x40
 8013f42:	2101      	movs	r1, #1
 8013f44:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	2210      	movs	r2, #16
 8013f4a:	4013      	ands	r3, r2
 8013f4c:	d012      	beq.n	8013f74 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2210      	movs	r2, #16
 8013f52:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013f54:	d00e      	beq.n	8013f74 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	2210      	movs	r2, #16
 8013f5c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f62:	2204      	movs	r2, #4
 8013f64:	431a      	orrs	r2, r3
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	0018      	movs	r0, r3
 8013f6e:	f001 fa34 	bl	80153da <I2C_Flush_TXDR>
 8013f72:	e0e5      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	2204      	movs	r2, #4
 8013f78:	4013      	ands	r3, r2
 8013f7a:	d021      	beq.n	8013fc0 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2204      	movs	r2, #4
 8013f80:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013f82:	d01d      	beq.n	8013fc0 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	2204      	movs	r2, #4
 8013f88:	4393      	bics	r3, r2
 8013f8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f96:	b2d2      	uxtb	r2, r2
 8013f98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f9e:	1c5a      	adds	r2, r3, #1
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013fa8:	3b01      	subs	r3, #1
 8013faa:	b29a      	uxth	r2, r3
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	b29a      	uxth	r2, r3
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013fbe:	e0bf      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	2202      	movs	r2, #2
 8013fc4:	4013      	ands	r3, r2
 8013fc6:	d01c      	beq.n	8014002 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2202      	movs	r2, #2
 8013fcc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013fce:	d018      	beq.n	8014002 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fd4:	781a      	ldrb	r2, [r3, #0]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fe0:	1c5a      	adds	r2, r3, #1
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013fea:	3b01      	subs	r3, #1
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	b29a      	uxth	r2, r3
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014000:	e09e      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	2280      	movs	r2, #128	@ 0x80
 8014006:	4013      	ands	r3, r2
 8014008:	d100      	bne.n	801400c <I2C_Master_ISR_IT+0xec>
 801400a:	e069      	b.n	80140e0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2240      	movs	r2, #64	@ 0x40
 8014010:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8014012:	d065      	beq.n	80140e0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014018:	b29b      	uxth	r3, r3
 801401a:	2b00      	cmp	r3, #0
 801401c:	d04a      	beq.n	80140b4 <I2C_Master_ISR_IT+0x194>
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014022:	2b00      	cmp	r3, #0
 8014024:	d146      	bne.n	80140b4 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	b29a      	uxth	r2, r3
 801402e:	2112      	movs	r1, #18
 8014030:	187b      	adds	r3, r7, r1
 8014032:	0592      	lsls	r2, r2, #22
 8014034:	0d92      	lsrs	r2, r2, #22
 8014036:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801403c:	b29b      	uxth	r3, r3
 801403e:	2bff      	cmp	r3, #255	@ 0xff
 8014040:	d910      	bls.n	8014064 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	22ff      	movs	r2, #255	@ 0xff
 8014046:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801404c:	b2da      	uxtb	r2, r3
 801404e:	2380      	movs	r3, #128	@ 0x80
 8014050:	045c      	lsls	r4, r3, #17
 8014052:	187b      	adds	r3, r7, r1
 8014054:	8819      	ldrh	r1, [r3, #0]
 8014056:	68f8      	ldr	r0, [r7, #12]
 8014058:	2300      	movs	r3, #0
 801405a:	9300      	str	r3, [sp, #0]
 801405c:	0023      	movs	r3, r4
 801405e:	f001 fab7 	bl	80155d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014062:	e03c      	b.n	80140de <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014068:	b29a      	uxth	r2, r3
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014072:	4a3f      	ldr	r2, [pc, #252]	@ (8014170 <I2C_Master_ISR_IT+0x250>)
 8014074:	4293      	cmp	r3, r2
 8014076:	d00e      	beq.n	8014096 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801407c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014082:	2312      	movs	r3, #18
 8014084:	18fb      	adds	r3, r7, r3
 8014086:	8819      	ldrh	r1, [r3, #0]
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	2300      	movs	r3, #0
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	0023      	movs	r3, r4
 8014090:	f001 fa9e 	bl	80155d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014094:	e023      	b.n	80140de <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801409a:	b2da      	uxtb	r2, r3
 801409c:	2380      	movs	r3, #128	@ 0x80
 801409e:	049c      	lsls	r4, r3, #18
 80140a0:	2312      	movs	r3, #18
 80140a2:	18fb      	adds	r3, r7, r3
 80140a4:	8819      	ldrh	r1, [r3, #0]
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	2300      	movs	r3, #0
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	0023      	movs	r3, r4
 80140ae:	f001 fa8f 	bl	80155d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80140b2:	e014      	b.n	80140de <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	685a      	ldr	r2, [r3, #4]
 80140ba:	2380      	movs	r3, #128	@ 0x80
 80140bc:	049b      	lsls	r3, r3, #18
 80140be:	401a      	ands	r2, r3
 80140c0:	2380      	movs	r3, #128	@ 0x80
 80140c2:	049b      	lsls	r3, r3, #18
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d004      	beq.n	80140d2 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	0018      	movs	r0, r3
 80140cc:	f000 fd06 	bl	8014adc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80140d0:	e036      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	2140      	movs	r1, #64	@ 0x40
 80140d6:	0018      	movs	r0, r3
 80140d8:	f001 f854 	bl	8015184 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80140dc:	e030      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
 80140de:	e02f      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	2240      	movs	r2, #64	@ 0x40
 80140e4:	4013      	ands	r3, r2
 80140e6:	d02b      	beq.n	8014140 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2240      	movs	r2, #64	@ 0x40
 80140ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80140ee:	d027      	beq.n	8014140 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140f4:	b29b      	uxth	r3, r3
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d11d      	bne.n	8014136 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	685a      	ldr	r2, [r3, #4]
 8014100:	2380      	movs	r3, #128	@ 0x80
 8014102:	049b      	lsls	r3, r3, #18
 8014104:	401a      	ands	r2, r3
 8014106:	2380      	movs	r3, #128	@ 0x80
 8014108:	049b      	lsls	r3, r3, #18
 801410a:	429a      	cmp	r2, r3
 801410c:	d018      	beq.n	8014140 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014112:	4a17      	ldr	r2, [pc, #92]	@ (8014170 <I2C_Master_ISR_IT+0x250>)
 8014114:	4293      	cmp	r3, r2
 8014116:	d109      	bne.n	801412c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	685a      	ldr	r2, [r3, #4]
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2180      	movs	r1, #128	@ 0x80
 8014124:	01c9      	lsls	r1, r1, #7
 8014126:	430a      	orrs	r2, r1
 8014128:	605a      	str	r2, [r3, #4]
 801412a:	e009      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	0018      	movs	r0, r3
 8014130:	f000 fcd4 	bl	8014adc <I2C_ITMasterSeqCplt>
 8014134:	e004      	b.n	8014140 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2140      	movs	r1, #64	@ 0x40
 801413a:	0018      	movs	r0, r3
 801413c:	f001 f822 	bl	8015184 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	2220      	movs	r2, #32
 8014144:	4013      	ands	r3, r2
 8014146:	d009      	beq.n	801415c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2220      	movs	r2, #32
 801414c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801414e:	d005      	beq.n	801415c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8014150:	697a      	ldr	r2, [r7, #20]
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	0011      	movs	r1, r2
 8014156:	0018      	movs	r0, r3
 8014158:	f000 fd66 	bl	8014c28 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2240      	movs	r2, #64	@ 0x40
 8014160:	2100      	movs	r1, #0
 8014162:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014164:	2300      	movs	r3, #0
}
 8014166:	0018      	movs	r0, r3
 8014168:	46bd      	mov	sp, r7
 801416a:	b007      	add	sp, #28
 801416c:	bd90      	pop	{r4, r7, pc}
 801416e:	46c0      	nop			@ (mov r8, r8)
 8014170:	ffff0000 	.word	0xffff0000

08014174 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b086      	sub	sp, #24
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014184:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2240      	movs	r2, #64	@ 0x40
 801418e:	5c9b      	ldrb	r3, [r3, r2]
 8014190:	2b01      	cmp	r3, #1
 8014192:	d101      	bne.n	8014198 <I2C_Slave_ISR_IT+0x24>
 8014194:	2302      	movs	r3, #2
 8014196:	e0e7      	b.n	8014368 <I2C_Slave_ISR_IT+0x1f4>
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2240      	movs	r2, #64	@ 0x40
 801419c:	2101      	movs	r1, #1
 801419e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	2220      	movs	r2, #32
 80141a4:	4013      	ands	r3, r2
 80141a6:	d00a      	beq.n	80141be <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2220      	movs	r2, #32
 80141ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80141ae:	d006      	beq.n	80141be <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80141b0:	693a      	ldr	r2, [r7, #16]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	0011      	movs	r1, r2
 80141b6:	0018      	movs	r0, r3
 80141b8:	f000 fe04 	bl	8014dc4 <I2C_ITSlaveCplt>
 80141bc:	e0cf      	b.n	801435e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	2210      	movs	r2, #16
 80141c2:	4013      	ands	r3, r2
 80141c4:	d052      	beq.n	801426c <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2210      	movs	r2, #16
 80141ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80141cc:	d04e      	beq.n	801426c <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d12d      	bne.n	8014234 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2241      	movs	r2, #65	@ 0x41
 80141dc:	5c9b      	ldrb	r3, [r3, r2]
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	2b28      	cmp	r3, #40	@ 0x28
 80141e2:	d10b      	bne.n	80141fc <I2C_Slave_ISR_IT+0x88>
 80141e4:	697a      	ldr	r2, [r7, #20]
 80141e6:	2380      	movs	r3, #128	@ 0x80
 80141e8:	049b      	lsls	r3, r3, #18
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d106      	bne.n	80141fc <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80141ee:	693a      	ldr	r2, [r7, #16]
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	0011      	movs	r1, r2
 80141f4:	0018      	movs	r0, r3
 80141f6:	f000 ff6d 	bl	80150d4 <I2C_ITListenCplt>
 80141fa:	e036      	b.n	801426a <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	2241      	movs	r2, #65	@ 0x41
 8014200:	5c9b      	ldrb	r3, [r3, r2]
 8014202:	b2db      	uxtb	r3, r3
 8014204:	2b29      	cmp	r3, #41	@ 0x29
 8014206:	d110      	bne.n	801422a <I2C_Slave_ISR_IT+0xb6>
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	4a59      	ldr	r2, [pc, #356]	@ (8014370 <I2C_Slave_ISR_IT+0x1fc>)
 801420c:	4293      	cmp	r3, r2
 801420e:	d00c      	beq.n	801422a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2210      	movs	r2, #16
 8014216:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	0018      	movs	r0, r3
 801421c:	f001 f8dd 	bl	80153da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	0018      	movs	r0, r3
 8014224:	f000 fc9c 	bl	8014b60 <I2C_ITSlaveSeqCplt>
 8014228:	e01f      	b.n	801426a <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	2210      	movs	r2, #16
 8014230:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8014232:	e091      	b.n	8014358 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2210      	movs	r2, #16
 801423a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014240:	2204      	movs	r2, #4
 8014242:	431a      	orrs	r2, r3
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d005      	beq.n	801425a <I2C_Slave_ISR_IT+0xe6>
 801424e:	697a      	ldr	r2, [r7, #20]
 8014250:	2380      	movs	r3, #128	@ 0x80
 8014252:	045b      	lsls	r3, r3, #17
 8014254:	429a      	cmp	r2, r3
 8014256:	d000      	beq.n	801425a <I2C_Slave_ISR_IT+0xe6>
 8014258:	e07e      	b.n	8014358 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	0011      	movs	r1, r2
 8014262:	0018      	movs	r0, r3
 8014264:	f000 ff8e 	bl	8015184 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014268:	e076      	b.n	8014358 <I2C_Slave_ISR_IT+0x1e4>
 801426a:	e075      	b.n	8014358 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	2204      	movs	r2, #4
 8014270:	4013      	ands	r3, r2
 8014272:	d02f      	beq.n	80142d4 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2204      	movs	r2, #4
 8014278:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801427a:	d02b      	beq.n	80142d4 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014280:	b29b      	uxth	r3, r3
 8014282:	2b00      	cmp	r3, #0
 8014284:	d018      	beq.n	80142b8 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014290:	b2d2      	uxtb	r2, r2
 8014292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80142a2:	3b01      	subs	r3, #1
 80142a4:	b29a      	uxth	r2, r3
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	3b01      	subs	r3, #1
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80142bc:	b29b      	uxth	r3, r3
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d14c      	bne.n	801435c <I2C_Slave_ISR_IT+0x1e8>
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	4a2a      	ldr	r2, [pc, #168]	@ (8014370 <I2C_Slave_ISR_IT+0x1fc>)
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d048      	beq.n	801435c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	0018      	movs	r0, r3
 80142ce:	f000 fc47 	bl	8014b60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80142d2:	e043      	b.n	801435c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	2208      	movs	r2, #8
 80142d8:	4013      	ands	r3, r2
 80142da:	d00a      	beq.n	80142f2 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2208      	movs	r2, #8
 80142e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80142e2:	d006      	beq.n	80142f2 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80142e4:	693a      	ldr	r2, [r7, #16]
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	0011      	movs	r1, r2
 80142ea:	0018      	movs	r0, r3
 80142ec:	f000 fb52 	bl	8014994 <I2C_ITAddrCplt>
 80142f0:	e035      	b.n	801435e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	2202      	movs	r2, #2
 80142f6:	4013      	ands	r3, r2
 80142f8:	d031      	beq.n	801435e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2202      	movs	r2, #2
 80142fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014300:	d02d      	beq.n	801435e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014306:	b29b      	uxth	r3, r3
 8014308:	2b00      	cmp	r3, #0
 801430a:	d018      	beq.n	801433e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014310:	781a      	ldrb	r2, [r3, #0]
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801431c:	1c5a      	adds	r2, r3, #1
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014326:	b29b      	uxth	r3, r3
 8014328:	3b01      	subs	r3, #1
 801432a:	b29a      	uxth	r2, r3
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014334:	3b01      	subs	r3, #1
 8014336:	b29a      	uxth	r2, r3
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801433c:	e00f      	b.n	801435e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801433e:	697a      	ldr	r2, [r7, #20]
 8014340:	2380      	movs	r3, #128	@ 0x80
 8014342:	045b      	lsls	r3, r3, #17
 8014344:	429a      	cmp	r2, r3
 8014346:	d002      	beq.n	801434e <I2C_Slave_ISR_IT+0x1da>
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d107      	bne.n	801435e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	0018      	movs	r0, r3
 8014352:	f000 fc05 	bl	8014b60 <I2C_ITSlaveSeqCplt>
 8014356:	e002      	b.n	801435e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8014358:	46c0      	nop			@ (mov r8, r8)
 801435a:	e000      	b.n	801435e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 801435c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	2240      	movs	r2, #64	@ 0x40
 8014362:	2100      	movs	r1, #0
 8014364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014366:	2300      	movs	r3, #0
}
 8014368:	0018      	movs	r0, r3
 801436a:	46bd      	mov	sp, r7
 801436c:	b006      	add	sp, #24
 801436e:	bd80      	pop	{r7, pc}
 8014370:	ffff0000 	.word	0xffff0000

08014374 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8014374:	b590      	push	{r4, r7, lr}
 8014376:	b089      	sub	sp, #36	@ 0x24
 8014378:	af02      	add	r7, sp, #8
 801437a:	60f8      	str	r0, [r7, #12]
 801437c:	60b9      	str	r1, [r7, #8]
 801437e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	2240      	movs	r2, #64	@ 0x40
 8014384:	5c9b      	ldrb	r3, [r3, r2]
 8014386:	2b01      	cmp	r3, #1
 8014388:	d101      	bne.n	801438e <I2C_Master_ISR_DMA+0x1a>
 801438a:	2302      	movs	r3, #2
 801438c:	e0e7      	b.n	801455e <I2C_Master_ISR_DMA+0x1ea>
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	2240      	movs	r2, #64	@ 0x40
 8014392:	2101      	movs	r1, #1
 8014394:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	2210      	movs	r2, #16
 801439a:	4013      	ands	r3, r2
 801439c:	d017      	beq.n	80143ce <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2210      	movs	r2, #16
 80143a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80143a4:	d013      	beq.n	80143ce <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	2210      	movs	r2, #16
 80143ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143b2:	2204      	movs	r2, #4
 80143b4:	431a      	orrs	r2, r3
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2120      	movs	r1, #32
 80143be:	0018      	movs	r0, r3
 80143c0:	f001 f940 	bl	8015644 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	0018      	movs	r0, r3
 80143c8:	f001 f807 	bl	80153da <I2C_Flush_TXDR>
 80143cc:	e0c2      	b.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	2280      	movs	r2, #128	@ 0x80
 80143d2:	4013      	ands	r3, r2
 80143d4:	d100      	bne.n	80143d8 <I2C_Master_ISR_DMA+0x64>
 80143d6:	e07c      	b.n	80144d2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2240      	movs	r2, #64	@ 0x40
 80143dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80143de:	d100      	bne.n	80143e2 <I2C_Master_ISR_DMA+0x6e>
 80143e0:	e077      	b.n	80144d2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	681a      	ldr	r2, [r3, #0]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2140      	movs	r1, #64	@ 0x40
 80143ee:	438a      	bics	r2, r1
 80143f0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d055      	beq.n	80144a8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	b29a      	uxth	r2, r3
 8014404:	2312      	movs	r3, #18
 8014406:	18fb      	adds	r3, r7, r3
 8014408:	0592      	lsls	r2, r2, #22
 801440a:	0d92      	lsrs	r2, r2, #22
 801440c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014412:	b29b      	uxth	r3, r3
 8014414:	2bff      	cmp	r3, #255	@ 0xff
 8014416:	d906      	bls.n	8014426 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	22ff      	movs	r2, #255	@ 0xff
 801441c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801441e:	2380      	movs	r3, #128	@ 0x80
 8014420:	045b      	lsls	r3, r3, #17
 8014422:	617b      	str	r3, [r7, #20]
 8014424:	e010      	b.n	8014448 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801442a:	b29a      	uxth	r2, r3
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014434:	4a4c      	ldr	r2, [pc, #304]	@ (8014568 <I2C_Master_ISR_DMA+0x1f4>)
 8014436:	4293      	cmp	r3, r2
 8014438:	d003      	beq.n	8014442 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801443e:	617b      	str	r3, [r7, #20]
 8014440:	e002      	b.n	8014448 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8014442:	2380      	movs	r3, #128	@ 0x80
 8014444:	049b      	lsls	r3, r3, #18
 8014446:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801444c:	b2da      	uxtb	r2, r3
 801444e:	697c      	ldr	r4, [r7, #20]
 8014450:	2312      	movs	r3, #18
 8014452:	18fb      	adds	r3, r7, r3
 8014454:	8819      	ldrh	r1, [r3, #0]
 8014456:	68f8      	ldr	r0, [r7, #12]
 8014458:	2300      	movs	r3, #0
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	0023      	movs	r3, r4
 801445e:	f001 f8b7 	bl	80155d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014466:	b29a      	uxth	r2, r3
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801446c:	1ad3      	subs	r3, r2, r3
 801446e:	b29a      	uxth	r2, r3
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	2241      	movs	r2, #65	@ 0x41
 8014478:	5c9b      	ldrb	r3, [r3, r2]
 801447a:	b2db      	uxtb	r3, r3
 801447c:	2b22      	cmp	r3, #34	@ 0x22
 801447e:	d109      	bne.n	8014494 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	2180      	movs	r1, #128	@ 0x80
 801448c:	0209      	lsls	r1, r1, #8
 801448e:	430a      	orrs	r2, r1
 8014490:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014492:	e05f      	b.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2180      	movs	r1, #128	@ 0x80
 80144a0:	01c9      	lsls	r1, r1, #7
 80144a2:	430a      	orrs	r2, r1
 80144a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80144a6:	e055      	b.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	685a      	ldr	r2, [r3, #4]
 80144ae:	2380      	movs	r3, #128	@ 0x80
 80144b0:	049b      	lsls	r3, r3, #18
 80144b2:	401a      	ands	r2, r3
 80144b4:	2380      	movs	r3, #128	@ 0x80
 80144b6:	049b      	lsls	r3, r3, #18
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d004      	beq.n	80144c6 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	0018      	movs	r0, r3
 80144c0:	f000 fb0c 	bl	8014adc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80144c4:	e046      	b.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2140      	movs	r1, #64	@ 0x40
 80144ca:	0018      	movs	r0, r3
 80144cc:	f000 fe5a 	bl	8015184 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80144d0:	e040      	b.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	2240      	movs	r2, #64	@ 0x40
 80144d6:	4013      	ands	r3, r2
 80144d8:	d02c      	beq.n	8014534 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2240      	movs	r2, #64	@ 0x40
 80144de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80144e0:	d028      	beq.n	8014534 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d11d      	bne.n	8014528 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	685a      	ldr	r2, [r3, #4]
 80144f2:	2380      	movs	r3, #128	@ 0x80
 80144f4:	049b      	lsls	r3, r3, #18
 80144f6:	401a      	ands	r2, r3
 80144f8:	2380      	movs	r3, #128	@ 0x80
 80144fa:	049b      	lsls	r3, r3, #18
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d028      	beq.n	8014552 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014504:	4a18      	ldr	r2, [pc, #96]	@ (8014568 <I2C_Master_ISR_DMA+0x1f4>)
 8014506:	4293      	cmp	r3, r2
 8014508:	d109      	bne.n	801451e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	685a      	ldr	r2, [r3, #4]
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2180      	movs	r1, #128	@ 0x80
 8014516:	01c9      	lsls	r1, r1, #7
 8014518:	430a      	orrs	r2, r1
 801451a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801451c:	e019      	b.n	8014552 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	0018      	movs	r0, r3
 8014522:	f000 fadb 	bl	8014adc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8014526:	e014      	b.n	8014552 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2140      	movs	r1, #64	@ 0x40
 801452c:	0018      	movs	r0, r3
 801452e:	f000 fe29 	bl	8015184 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014532:	e00e      	b.n	8014552 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	2220      	movs	r2, #32
 8014538:	4013      	ands	r3, r2
 801453a:	d00b      	beq.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2220      	movs	r2, #32
 8014540:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014542:	d007      	beq.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014544:	68ba      	ldr	r2, [r7, #8]
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	0011      	movs	r1, r2
 801454a:	0018      	movs	r0, r3
 801454c:	f000 fb6c 	bl	8014c28 <I2C_ITMasterCplt>
 8014550:	e000      	b.n	8014554 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8014552:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	2240      	movs	r2, #64	@ 0x40
 8014558:	2100      	movs	r1, #0
 801455a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801455c:	2300      	movs	r3, #0
}
 801455e:	0018      	movs	r0, r3
 8014560:	46bd      	mov	sp, r7
 8014562:	b007      	add	sp, #28
 8014564:	bd90      	pop	{r4, r7, pc}
 8014566:	46c0      	nop			@ (mov r8, r8)
 8014568:	ffff0000 	.word	0xffff0000

0801456c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801456c:	b590      	push	{r4, r7, lr}
 801456e:	b089      	sub	sp, #36	@ 0x24
 8014570:	af02      	add	r7, sp, #8
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8014578:	4b90      	ldr	r3, [pc, #576]	@ (80147bc <I2C_Mem_ISR_DMA+0x250>)
 801457a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2240      	movs	r2, #64	@ 0x40
 8014580:	5c9b      	ldrb	r3, [r3, r2]
 8014582:	2b01      	cmp	r3, #1
 8014584:	d101      	bne.n	801458a <I2C_Mem_ISR_DMA+0x1e>
 8014586:	2302      	movs	r3, #2
 8014588:	e113      	b.n	80147b2 <I2C_Mem_ISR_DMA+0x246>
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	2240      	movs	r2, #64	@ 0x40
 801458e:	2101      	movs	r1, #1
 8014590:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	2210      	movs	r2, #16
 8014596:	4013      	ands	r3, r2
 8014598:	d017      	beq.n	80145ca <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2210      	movs	r2, #16
 801459e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80145a0:	d013      	beq.n	80145ca <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	2210      	movs	r2, #16
 80145a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145ae:	2204      	movs	r2, #4
 80145b0:	431a      	orrs	r2, r3
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	2120      	movs	r1, #32
 80145ba:	0018      	movs	r0, r3
 80145bc:	f001 f842 	bl	8015644 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	0018      	movs	r0, r3
 80145c4:	f000 ff09 	bl	80153da <I2C_Flush_TXDR>
 80145c8:	e0ee      	b.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	2202      	movs	r2, #2
 80145ce:	4013      	ands	r3, r2
 80145d0:	d00d      	beq.n	80145ee <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2202      	movs	r2, #2
 80145d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80145d8:	d009      	beq.n	80145ee <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	68fa      	ldr	r2, [r7, #12]
 80145e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80145e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	2201      	movs	r2, #1
 80145e8:	4252      	negs	r2, r2
 80145ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80145ec:	e0dc      	b.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	2280      	movs	r2, #128	@ 0x80
 80145f2:	4013      	ands	r3, r2
 80145f4:	d063      	beq.n	80146be <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2240      	movs	r2, #64	@ 0x40
 80145fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80145fc:	d05f      	beq.n	80146be <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	2101      	movs	r1, #1
 8014602:	0018      	movs	r0, r3
 8014604:	f001 f8a8 	bl	8015758 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2110      	movs	r1, #16
 801460c:	0018      	movs	r0, r3
 801460e:	f001 f819 	bl	8015644 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014616:	b29b      	uxth	r3, r3
 8014618:	2b00      	cmp	r3, #0
 801461a:	d04a      	beq.n	80146b2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014620:	b29b      	uxth	r3, r3
 8014622:	2bff      	cmp	r3, #255	@ 0xff
 8014624:	d910      	bls.n	8014648 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	22ff      	movs	r2, #255	@ 0xff
 801462a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014630:	b299      	uxth	r1, r3
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014636:	b2da      	uxtb	r2, r3
 8014638:	2380      	movs	r3, #128	@ 0x80
 801463a:	045b      	lsls	r3, r3, #17
 801463c:	68f8      	ldr	r0, [r7, #12]
 801463e:	2400      	movs	r4, #0
 8014640:	9400      	str	r4, [sp, #0]
 8014642:	f000 ffc5 	bl	80155d0 <I2C_TransferConfig>
 8014646:	e011      	b.n	801466c <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801464c:	b29a      	uxth	r2, r3
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014656:	b299      	uxth	r1, r3
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801465c:	b2da      	uxtb	r2, r3
 801465e:	2380      	movs	r3, #128	@ 0x80
 8014660:	049b      	lsls	r3, r3, #18
 8014662:	68f8      	ldr	r0, [r7, #12]
 8014664:	2400      	movs	r4, #0
 8014666:	9400      	str	r4, [sp, #0]
 8014668:	f000 ffb2 	bl	80155d0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014670:	b29a      	uxth	r2, r3
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014676:	1ad3      	subs	r3, r2, r3
 8014678:	b29a      	uxth	r2, r3
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	2241      	movs	r2, #65	@ 0x41
 8014682:	5c9b      	ldrb	r3, [r3, r2]
 8014684:	b2db      	uxtb	r3, r3
 8014686:	2b22      	cmp	r3, #34	@ 0x22
 8014688:	d109      	bne.n	801469e <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	681a      	ldr	r2, [r3, #0]
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2180      	movs	r1, #128	@ 0x80
 8014696:	0209      	lsls	r1, r1, #8
 8014698:	430a      	orrs	r2, r1
 801469a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801469c:	e084      	b.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	681a      	ldr	r2, [r3, #0]
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	2180      	movs	r1, #128	@ 0x80
 80146aa:	01c9      	lsls	r1, r1, #7
 80146ac:	430a      	orrs	r2, r1
 80146ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80146b0:	e07a      	b.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2140      	movs	r1, #64	@ 0x40
 80146b6:	0018      	movs	r0, r3
 80146b8:	f000 fd64 	bl	8015184 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80146bc:	e074      	b.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	2240      	movs	r2, #64	@ 0x40
 80146c2:	4013      	ands	r3, r2
 80146c4:	d062      	beq.n	801478c <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2240      	movs	r2, #64	@ 0x40
 80146ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80146cc:	d05e      	beq.n	801478c <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	2101      	movs	r1, #1
 80146d2:	0018      	movs	r0, r3
 80146d4:	f001 f840 	bl	8015758 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2110      	movs	r1, #16
 80146dc:	0018      	movs	r0, r3
 80146de:	f000 ffb1 	bl	8015644 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2241      	movs	r2, #65	@ 0x41
 80146e6:	5c9b      	ldrb	r3, [r3, r2]
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	2b22      	cmp	r3, #34	@ 0x22
 80146ec:	d101      	bne.n	80146f2 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 80146ee:	4b34      	ldr	r3, [pc, #208]	@ (80147c0 <I2C_Mem_ISR_DMA+0x254>)
 80146f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	2bff      	cmp	r3, #255	@ 0xff
 80146fa:	d911      	bls.n	8014720 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	22ff      	movs	r2, #255	@ 0xff
 8014700:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014706:	b299      	uxth	r1, r3
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801470c:	b2da      	uxtb	r2, r3
 801470e:	2380      	movs	r3, #128	@ 0x80
 8014710:	045c      	lsls	r4, r3, #17
 8014712:	68f8      	ldr	r0, [r7, #12]
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	9300      	str	r3, [sp, #0]
 8014718:	0023      	movs	r3, r4
 801471a:	f000 ff59 	bl	80155d0 <I2C_TransferConfig>
 801471e:	e012      	b.n	8014746 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014724:	b29a      	uxth	r2, r3
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801472e:	b299      	uxth	r1, r3
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014734:	b2da      	uxtb	r2, r3
 8014736:	2380      	movs	r3, #128	@ 0x80
 8014738:	049c      	lsls	r4, r3, #18
 801473a:	68f8      	ldr	r0, [r7, #12]
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	0023      	movs	r3, r4
 8014742:	f000 ff45 	bl	80155d0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801474a:	b29a      	uxth	r2, r3
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	b29a      	uxth	r2, r3
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2241      	movs	r2, #65	@ 0x41
 801475c:	5c9b      	ldrb	r3, [r3, r2]
 801475e:	b2db      	uxtb	r3, r3
 8014760:	2b22      	cmp	r3, #34	@ 0x22
 8014762:	d109      	bne.n	8014778 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	681a      	ldr	r2, [r3, #0]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2180      	movs	r1, #128	@ 0x80
 8014770:	0209      	lsls	r1, r1, #8
 8014772:	430a      	orrs	r2, r1
 8014774:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014776:	e017      	b.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	2180      	movs	r1, #128	@ 0x80
 8014784:	01c9      	lsls	r1, r1, #7
 8014786:	430a      	orrs	r2, r1
 8014788:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801478a:	e00d      	b.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	2220      	movs	r2, #32
 8014790:	4013      	ands	r3, r2
 8014792:	d009      	beq.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2220      	movs	r2, #32
 8014798:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801479a:	d005      	beq.n	80147a8 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801479c:	68ba      	ldr	r2, [r7, #8]
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	0011      	movs	r1, r2
 80147a2:	0018      	movs	r0, r3
 80147a4:	f000 fa40 	bl	8014c28 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2240      	movs	r2, #64	@ 0x40
 80147ac:	2100      	movs	r1, #0
 80147ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	0018      	movs	r0, r3
 80147b4:	46bd      	mov	sp, r7
 80147b6:	b007      	add	sp, #28
 80147b8:	bd90      	pop	{r4, r7, pc}
 80147ba:	46c0      	nop			@ (mov r8, r8)
 80147bc:	80002000 	.word	0x80002000
 80147c0:	80002400 	.word	0x80002400

080147c4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b088      	sub	sp, #32
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147d4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80147d6:	2300      	movs	r3, #0
 80147d8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2240      	movs	r2, #64	@ 0x40
 80147de:	5c9b      	ldrb	r3, [r3, r2]
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d101      	bne.n	80147e8 <I2C_Slave_ISR_DMA+0x24>
 80147e4:	2302      	movs	r3, #2
 80147e6:	e0ce      	b.n	8014986 <I2C_Slave_ISR_DMA+0x1c2>
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2240      	movs	r2, #64	@ 0x40
 80147ec:	2101      	movs	r1, #1
 80147ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	2220      	movs	r2, #32
 80147f4:	4013      	ands	r3, r2
 80147f6:	d00a      	beq.n	801480e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2220      	movs	r2, #32
 80147fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80147fe:	d006      	beq.n	801480e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8014800:	68ba      	ldr	r2, [r7, #8]
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	0011      	movs	r1, r2
 8014806:	0018      	movs	r0, r3
 8014808:	f000 fadc 	bl	8014dc4 <I2C_ITSlaveCplt>
 801480c:	e0b6      	b.n	801497c <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	2210      	movs	r2, #16
 8014812:	4013      	ands	r3, r2
 8014814:	d100      	bne.n	8014818 <I2C_Slave_ISR_DMA+0x54>
 8014816:	e0a3      	b.n	8014960 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2210      	movs	r2, #16
 801481c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801481e:	d100      	bne.n	8014822 <I2C_Slave_ISR_DMA+0x5e>
 8014820:	e09e      	b.n	8014960 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014822:	687a      	ldr	r2, [r7, #4]
 8014824:	2380      	movs	r3, #128	@ 0x80
 8014826:	01db      	lsls	r3, r3, #7
 8014828:	4013      	ands	r3, r2
 801482a:	d105      	bne.n	8014838 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	2380      	movs	r3, #128	@ 0x80
 8014830:	021b      	lsls	r3, r3, #8
 8014832:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014834:	d100      	bne.n	8014838 <I2C_Slave_ISR_DMA+0x74>
 8014836:	e08c      	b.n	8014952 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801483c:	2b00      	cmp	r3, #0
 801483e:	d00c      	beq.n	801485a <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	2380      	movs	r3, #128	@ 0x80
 8014844:	021b      	lsls	r3, r3, #8
 8014846:	4013      	ands	r3, r2
 8014848:	d007      	beq.n	801485a <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	685b      	ldr	r3, [r3, #4]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d101      	bne.n	801485a <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8014856:	2301      	movs	r3, #1
 8014858:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801485e:	2b00      	cmp	r3, #0
 8014860:	d00c      	beq.n	801487c <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	2380      	movs	r3, #128	@ 0x80
 8014866:	01db      	lsls	r3, r3, #7
 8014868:	4013      	ands	r3, r2
 801486a:	d007      	beq.n	801487c <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d101      	bne.n	801487c <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8014878:	2301      	movs	r3, #1
 801487a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	2b01      	cmp	r3, #1
 8014880:	d12d      	bne.n	80148de <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	2241      	movs	r2, #65	@ 0x41
 8014886:	5c9b      	ldrb	r3, [r3, r2]
 8014888:	b2db      	uxtb	r3, r3
 801488a:	2b28      	cmp	r3, #40	@ 0x28
 801488c:	d10b      	bne.n	80148a6 <I2C_Slave_ISR_DMA+0xe2>
 801488e:	69ba      	ldr	r2, [r7, #24]
 8014890:	2380      	movs	r3, #128	@ 0x80
 8014892:	049b      	lsls	r3, r3, #18
 8014894:	429a      	cmp	r2, r3
 8014896:	d106      	bne.n	80148a6 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8014898:	68ba      	ldr	r2, [r7, #8]
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	0011      	movs	r1, r2
 801489e:	0018      	movs	r0, r3
 80148a0:	f000 fc18 	bl	80150d4 <I2C_ITListenCplt>
 80148a4:	e054      	b.n	8014950 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2241      	movs	r2, #65	@ 0x41
 80148aa:	5c9b      	ldrb	r3, [r3, r2]
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	2b29      	cmp	r3, #41	@ 0x29
 80148b0:	d110      	bne.n	80148d4 <I2C_Slave_ISR_DMA+0x110>
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	4a36      	ldr	r2, [pc, #216]	@ (8014990 <I2C_Slave_ISR_DMA+0x1cc>)
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d00c      	beq.n	80148d4 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2210      	movs	r2, #16
 80148c0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	0018      	movs	r0, r3
 80148c6:	f000 fd88 	bl	80153da <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	0018      	movs	r0, r3
 80148ce:	f000 f947 	bl	8014b60 <I2C_ITSlaveSeqCplt>
 80148d2:	e03d      	b.n	8014950 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2210      	movs	r2, #16
 80148da:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80148dc:	e03e      	b.n	801495c <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2210      	movs	r2, #16
 80148e4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148ea:	2204      	movs	r2, #4
 80148ec:	431a      	orrs	r2, r3
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80148f2:	2317      	movs	r3, #23
 80148f4:	18fb      	adds	r3, r7, r3
 80148f6:	68fa      	ldr	r2, [r7, #12]
 80148f8:	2141      	movs	r1, #65	@ 0x41
 80148fa:	5c52      	ldrb	r2, [r2, r1]
 80148fc:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80148fe:	69bb      	ldr	r3, [r7, #24]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d004      	beq.n	801490e <I2C_Slave_ISR_DMA+0x14a>
 8014904:	69ba      	ldr	r2, [r7, #24]
 8014906:	2380      	movs	r3, #128	@ 0x80
 8014908:	045b      	lsls	r3, r3, #17
 801490a:	429a      	cmp	r2, r3
 801490c:	d126      	bne.n	801495c <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801490e:	2217      	movs	r2, #23
 8014910:	18bb      	adds	r3, r7, r2
 8014912:	781b      	ldrb	r3, [r3, #0]
 8014914:	2b21      	cmp	r3, #33	@ 0x21
 8014916:	d003      	beq.n	8014920 <I2C_Slave_ISR_DMA+0x15c>
 8014918:	18bb      	adds	r3, r7, r2
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	2b29      	cmp	r3, #41	@ 0x29
 801491e:	d103      	bne.n	8014928 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2221      	movs	r2, #33	@ 0x21
 8014924:	631a      	str	r2, [r3, #48]	@ 0x30
 8014926:	e00b      	b.n	8014940 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014928:	2217      	movs	r2, #23
 801492a:	18bb      	adds	r3, r7, r2
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	2b22      	cmp	r3, #34	@ 0x22
 8014930:	d003      	beq.n	801493a <I2C_Slave_ISR_DMA+0x176>
 8014932:	18bb      	adds	r3, r7, r2
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	2b2a      	cmp	r3, #42	@ 0x2a
 8014938:	d102      	bne.n	8014940 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2222      	movs	r2, #34	@ 0x22
 801493e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	0011      	movs	r1, r2
 8014948:	0018      	movs	r0, r3
 801494a:	f000 fc1b 	bl	8015184 <I2C_ITError>
      if (treatdmanack == 1U)
 801494e:	e005      	b.n	801495c <I2C_Slave_ISR_DMA+0x198>
 8014950:	e004      	b.n	801495c <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2210      	movs	r2, #16
 8014958:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801495a:	e00f      	b.n	801497c <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 801495c:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801495e:	e00d      	b.n	801497c <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	2208      	movs	r2, #8
 8014964:	4013      	ands	r3, r2
 8014966:	d009      	beq.n	801497c <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2208      	movs	r2, #8
 801496c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801496e:	d005      	beq.n	801497c <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8014970:	68ba      	ldr	r2, [r7, #8]
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	0011      	movs	r1, r2
 8014976:	0018      	movs	r0, r3
 8014978:	f000 f80c 	bl	8014994 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2240      	movs	r2, #64	@ 0x40
 8014980:	2100      	movs	r1, #0
 8014982:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014984:	2300      	movs	r3, #0
}
 8014986:	0018      	movs	r0, r3
 8014988:	46bd      	mov	sp, r7
 801498a:	b008      	add	sp, #32
 801498c:	bd80      	pop	{r7, pc}
 801498e:	46c0      	nop			@ (mov r8, r8)
 8014990:	ffff0000 	.word	0xffff0000

08014994 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014994:	b5b0      	push	{r4, r5, r7, lr}
 8014996:	b084      	sub	sp, #16
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2241      	movs	r2, #65	@ 0x41
 80149a2:	5c9b      	ldrb	r3, [r3, r2]
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	001a      	movs	r2, r3
 80149a8:	2328      	movs	r3, #40	@ 0x28
 80149aa:	4013      	ands	r3, r2
 80149ac:	2b28      	cmp	r3, #40	@ 0x28
 80149ae:	d000      	beq.n	80149b2 <I2C_ITAddrCplt+0x1e>
 80149b0:	e088      	b.n	8014ac4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	699b      	ldr	r3, [r3, #24]
 80149b8:	0c1b      	lsrs	r3, r3, #16
 80149ba:	b2da      	uxtb	r2, r3
 80149bc:	250f      	movs	r5, #15
 80149be:	197b      	adds	r3, r7, r5
 80149c0:	2101      	movs	r1, #1
 80149c2:	400a      	ands	r2, r1
 80149c4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	699b      	ldr	r3, [r3, #24]
 80149cc:	0c1b      	lsrs	r3, r3, #16
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	200c      	movs	r0, #12
 80149d2:	183b      	adds	r3, r7, r0
 80149d4:	21fe      	movs	r1, #254	@ 0xfe
 80149d6:	400a      	ands	r2, r1
 80149d8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	689b      	ldr	r3, [r3, #8]
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	240a      	movs	r4, #10
 80149e4:	193b      	adds	r3, r7, r4
 80149e6:	0592      	lsls	r2, r2, #22
 80149e8:	0d92      	lsrs	r2, r2, #22
 80149ea:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	b29a      	uxth	r2, r3
 80149f4:	2308      	movs	r3, #8
 80149f6:	18fb      	adds	r3, r7, r3
 80149f8:	21fe      	movs	r1, #254	@ 0xfe
 80149fa:	400a      	ands	r2, r1
 80149fc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	2b02      	cmp	r3, #2
 8014a04:	d148      	bne.n	8014a98 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8014a06:	0021      	movs	r1, r4
 8014a08:	187b      	adds	r3, r7, r1
 8014a0a:	881b      	ldrh	r3, [r3, #0]
 8014a0c:	09db      	lsrs	r3, r3, #7
 8014a0e:	b29a      	uxth	r2, r3
 8014a10:	183b      	adds	r3, r7, r0
 8014a12:	881b      	ldrh	r3, [r3, #0]
 8014a14:	4053      	eors	r3, r2
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	001a      	movs	r2, r3
 8014a1a:	2306      	movs	r3, #6
 8014a1c:	4013      	ands	r3, r2
 8014a1e:	d120      	bne.n	8014a62 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8014a20:	183b      	adds	r3, r7, r0
 8014a22:	187a      	adds	r2, r7, r1
 8014a24:	8812      	ldrh	r2, [r2, #0]
 8014a26:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014a2c:	1c5a      	adds	r2, r3, #1
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d14c      	bne.n	8014ad4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	2208      	movs	r2, #8
 8014a46:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2240      	movs	r2, #64	@ 0x40
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014a50:	183b      	adds	r3, r7, r0
 8014a52:	881a      	ldrh	r2, [r3, #0]
 8014a54:	197b      	adds	r3, r7, r5
 8014a56:	7819      	ldrb	r1, [r3, #0]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	0018      	movs	r0, r3
 8014a5c:	f7ff fa1b 	bl	8013e96 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8014a60:	e038      	b.n	8014ad4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8014a62:	240c      	movs	r4, #12
 8014a64:	193b      	adds	r3, r7, r4
 8014a66:	2208      	movs	r2, #8
 8014a68:	18ba      	adds	r2, r7, r2
 8014a6a:	8812      	ldrh	r2, [r2, #0]
 8014a6c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8014a6e:	2380      	movs	r3, #128	@ 0x80
 8014a70:	021a      	lsls	r2, r3, #8
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	0011      	movs	r1, r2
 8014a76:	0018      	movs	r0, r3
 8014a78:	f000 fe6e 	bl	8015758 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2240      	movs	r2, #64	@ 0x40
 8014a80:	2100      	movs	r1, #0
 8014a82:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014a84:	193b      	adds	r3, r7, r4
 8014a86:	881a      	ldrh	r2, [r3, #0]
 8014a88:	230f      	movs	r3, #15
 8014a8a:	18fb      	adds	r3, r7, r3
 8014a8c:	7819      	ldrb	r1, [r3, #0]
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	0018      	movs	r0, r3
 8014a92:	f7ff fa00 	bl	8013e96 <HAL_I2C_AddrCallback>
}
 8014a96:	e01d      	b.n	8014ad4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8014a98:	2380      	movs	r3, #128	@ 0x80
 8014a9a:	021a      	lsls	r2, r3, #8
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	0011      	movs	r1, r2
 8014aa0:	0018      	movs	r0, r3
 8014aa2:	f000 fe59 	bl	8015758 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2240      	movs	r2, #64	@ 0x40
 8014aaa:	2100      	movs	r1, #0
 8014aac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014aae:	230c      	movs	r3, #12
 8014ab0:	18fb      	adds	r3, r7, r3
 8014ab2:	881a      	ldrh	r2, [r3, #0]
 8014ab4:	230f      	movs	r3, #15
 8014ab6:	18fb      	adds	r3, r7, r3
 8014ab8:	7819      	ldrb	r1, [r3, #0]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	0018      	movs	r0, r3
 8014abe:	f7ff f9ea 	bl	8013e96 <HAL_I2C_AddrCallback>
}
 8014ac2:	e007      	b.n	8014ad4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2208      	movs	r2, #8
 8014aca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2240      	movs	r2, #64	@ 0x40
 8014ad0:	2100      	movs	r1, #0
 8014ad2:	5499      	strb	r1, [r3, r2]
}
 8014ad4:	46c0      	nop			@ (mov r8, r8)
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	b004      	add	sp, #16
 8014ada:	bdb0      	pop	{r4, r5, r7, pc}

08014adc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2242      	movs	r2, #66	@ 0x42
 8014ae8:	2100      	movs	r1, #0
 8014aea:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2241      	movs	r2, #65	@ 0x41
 8014af0:	5c9b      	ldrb	r3, [r3, r2]
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	2b21      	cmp	r3, #33	@ 0x21
 8014af6:	d117      	bne.n	8014b28 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2241      	movs	r2, #65	@ 0x41
 8014afc:	2120      	movs	r1, #32
 8014afe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2211      	movs	r2, #17
 8014b04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2101      	movs	r1, #1
 8014b10:	0018      	movs	r0, r3
 8014b12:	f000 fe21 	bl	8015758 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2240      	movs	r2, #64	@ 0x40
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	0018      	movs	r0, r3
 8014b22:	f7ff f998 	bl	8013e56 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014b26:	e016      	b.n	8014b56 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2241      	movs	r2, #65	@ 0x41
 8014b2c:	2120      	movs	r1, #32
 8014b2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2212      	movs	r2, #18
 8014b34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2102      	movs	r1, #2
 8014b40:	0018      	movs	r0, r3
 8014b42:	f000 fe09 	bl	8015758 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2240      	movs	r2, #64	@ 0x40
 8014b4a:	2100      	movs	r1, #0
 8014b4c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	0018      	movs	r0, r3
 8014b52:	f7ff f988 	bl	8013e66 <HAL_I2C_MasterRxCpltCallback>
}
 8014b56:	46c0      	nop			@ (mov r8, r8)
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	b002      	add	sp, #8
 8014b5c:	bd80      	pop	{r7, pc}
	...

08014b60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2242      	movs	r2, #66	@ 0x42
 8014b74:	2100      	movs	r1, #0
 8014b76:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	2380      	movs	r3, #128	@ 0x80
 8014b7c:	01db      	lsls	r3, r3, #7
 8014b7e:	4013      	ands	r3, r2
 8014b80:	d008      	beq.n	8014b94 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	4924      	ldr	r1, [pc, #144]	@ (8014c20 <I2C_ITSlaveSeqCplt+0xc0>)
 8014b8e:	400a      	ands	r2, r1
 8014b90:	601a      	str	r2, [r3, #0]
 8014b92:	e00c      	b.n	8014bae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8014b94:	68fa      	ldr	r2, [r7, #12]
 8014b96:	2380      	movs	r3, #128	@ 0x80
 8014b98:	021b      	lsls	r3, r3, #8
 8014b9a:	4013      	ands	r3, r2
 8014b9c:	d007      	beq.n	8014bae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	491e      	ldr	r1, [pc, #120]	@ (8014c24 <I2C_ITSlaveSeqCplt+0xc4>)
 8014baa:	400a      	ands	r2, r1
 8014bac:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2241      	movs	r2, #65	@ 0x41
 8014bb2:	5c9b      	ldrb	r3, [r3, r2]
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	2b29      	cmp	r3, #41	@ 0x29
 8014bb8:	d114      	bne.n	8014be4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2241      	movs	r2, #65	@ 0x41
 8014bbe:	2128      	movs	r1, #40	@ 0x28
 8014bc0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2221      	movs	r2, #33	@ 0x21
 8014bc6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2101      	movs	r1, #1
 8014bcc:	0018      	movs	r0, r3
 8014bce:	f000 fdc3 	bl	8015758 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	2240      	movs	r2, #64	@ 0x40
 8014bd6:	2100      	movs	r1, #0
 8014bd8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	0018      	movs	r0, r3
 8014bde:	f7ff f94a 	bl	8013e76 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014be2:	e019      	b.n	8014c18 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2241      	movs	r2, #65	@ 0x41
 8014be8:	5c9b      	ldrb	r3, [r3, r2]
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bee:	d113      	bne.n	8014c18 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2241      	movs	r2, #65	@ 0x41
 8014bf4:	2128      	movs	r1, #40	@ 0x28
 8014bf6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2222      	movs	r2, #34	@ 0x22
 8014bfc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2102      	movs	r1, #2
 8014c02:	0018      	movs	r0, r3
 8014c04:	f000 fda8 	bl	8015758 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2240      	movs	r2, #64	@ 0x40
 8014c0c:	2100      	movs	r1, #0
 8014c0e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	0018      	movs	r0, r3
 8014c14:	f7ff f937 	bl	8013e86 <HAL_I2C_SlaveRxCpltCallback>
}
 8014c18:	46c0      	nop			@ (mov r8, r8)
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	b004      	add	sp, #16
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	ffffbfff 	.word	0xffffbfff
 8014c24:	ffff7fff 	.word	0xffff7fff

08014c28 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	2220      	movs	r2, #32
 8014c3c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2241      	movs	r2, #65	@ 0x41
 8014c42:	5c9b      	ldrb	r3, [r3, r2]
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	2b21      	cmp	r3, #33	@ 0x21
 8014c48:	d108      	bne.n	8014c5c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2101      	movs	r1, #1
 8014c4e:	0018      	movs	r0, r3
 8014c50:	f000 fd82 	bl	8015758 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2211      	movs	r2, #17
 8014c58:	631a      	str	r2, [r3, #48]	@ 0x30
 8014c5a:	e00d      	b.n	8014c78 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2241      	movs	r2, #65	@ 0x41
 8014c60:	5c9b      	ldrb	r3, [r3, r2]
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	2b22      	cmp	r3, #34	@ 0x22
 8014c66:	d107      	bne.n	8014c78 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2102      	movs	r1, #2
 8014c6c:	0018      	movs	r0, r3
 8014c6e:	f000 fd73 	bl	8015758 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2212      	movs	r2, #18
 8014c76:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	685a      	ldr	r2, [r3, #4]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	494e      	ldr	r1, [pc, #312]	@ (8014dbc <I2C_ITMasterCplt+0x194>)
 8014c84:	400a      	ands	r2, r1
 8014c86:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	4a4b      	ldr	r2, [pc, #300]	@ (8014dc0 <I2C_ITMasterCplt+0x198>)
 8014c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	2210      	movs	r2, #16
 8014c98:	4013      	ands	r3, r2
 8014c9a:	d009      	beq.n	8014cb0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	2210      	movs	r2, #16
 8014ca2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ca8:	2204      	movs	r2, #4
 8014caa:	431a      	orrs	r2, r3
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2241      	movs	r2, #65	@ 0x41
 8014cb4:	5c9b      	ldrb	r3, [r3, r2]
 8014cb6:	b2db      	uxtb	r3, r3
 8014cb8:	2b60      	cmp	r3, #96	@ 0x60
 8014cba:	d109      	bne.n	8014cd0 <I2C_ITMasterCplt+0xa8>
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	2204      	movs	r2, #4
 8014cc0:	4013      	ands	r3, r2
 8014cc2:	d005      	beq.n	8014cd0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cca:	b2db      	uxtb	r3, r3
 8014ccc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8014cce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	0018      	movs	r0, r3
 8014cd4:	f000 fb81 	bl	80153da <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cdc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2241      	movs	r2, #65	@ 0x41
 8014ce2:	5c9b      	ldrb	r3, [r3, r2]
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	2b60      	cmp	r3, #96	@ 0x60
 8014ce8:	d002      	beq.n	8014cf0 <I2C_ITMasterCplt+0xc8>
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d007      	beq.n	8014d00 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	0011      	movs	r1, r2
 8014cf8:	0018      	movs	r0, r3
 8014cfa:	f000 fa43 	bl	8015184 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014cfe:	e058      	b.n	8014db2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2241      	movs	r2, #65	@ 0x41
 8014d04:	5c9b      	ldrb	r3, [r3, r2]
 8014d06:	b2db      	uxtb	r3, r3
 8014d08:	2b21      	cmp	r3, #33	@ 0x21
 8014d0a:	d126      	bne.n	8014d5a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2241      	movs	r2, #65	@ 0x41
 8014d10:	2120      	movs	r1, #32
 8014d12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2200      	movs	r2, #0
 8014d18:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2242      	movs	r2, #66	@ 0x42
 8014d1e:	5c9b      	ldrb	r3, [r3, r2]
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	2b40      	cmp	r3, #64	@ 0x40
 8014d24:	d10c      	bne.n	8014d40 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2242      	movs	r2, #66	@ 0x42
 8014d2a:	2100      	movs	r1, #0
 8014d2c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2240      	movs	r2, #64	@ 0x40
 8014d32:	2100      	movs	r1, #0
 8014d34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	0018      	movs	r0, r3
 8014d3a:	f7ff f8c4 	bl	8013ec6 <HAL_I2C_MemTxCpltCallback>
}
 8014d3e:	e038      	b.n	8014db2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2242      	movs	r2, #66	@ 0x42
 8014d44:	2100      	movs	r1, #0
 8014d46:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2240      	movs	r2, #64	@ 0x40
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	0018      	movs	r0, r3
 8014d54:	f7ff f87f 	bl	8013e56 <HAL_I2C_MasterTxCpltCallback>
}
 8014d58:	e02b      	b.n	8014db2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	2241      	movs	r2, #65	@ 0x41
 8014d5e:	5c9b      	ldrb	r3, [r3, r2]
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	2b22      	cmp	r3, #34	@ 0x22
 8014d64:	d125      	bne.n	8014db2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2241      	movs	r2, #65	@ 0x41
 8014d6a:	2120      	movs	r1, #32
 8014d6c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2200      	movs	r2, #0
 8014d72:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2242      	movs	r2, #66	@ 0x42
 8014d78:	5c9b      	ldrb	r3, [r3, r2]
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	2b40      	cmp	r3, #64	@ 0x40
 8014d7e:	d10c      	bne.n	8014d9a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2242      	movs	r2, #66	@ 0x42
 8014d84:	2100      	movs	r1, #0
 8014d86:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2240      	movs	r2, #64	@ 0x40
 8014d8c:	2100      	movs	r1, #0
 8014d8e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	0018      	movs	r0, r3
 8014d94:	f7ff f89f 	bl	8013ed6 <HAL_I2C_MemRxCpltCallback>
}
 8014d98:	e00b      	b.n	8014db2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2242      	movs	r2, #66	@ 0x42
 8014d9e:	2100      	movs	r1, #0
 8014da0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2240      	movs	r2, #64	@ 0x40
 8014da6:	2100      	movs	r1, #0
 8014da8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	0018      	movs	r0, r3
 8014dae:	f7ff f85a 	bl	8013e66 <HAL_I2C_MasterRxCpltCallback>
}
 8014db2:	46c0      	nop			@ (mov r8, r8)
 8014db4:	46bd      	mov	sp, r7
 8014db6:	b006      	add	sp, #24
 8014db8:	bd80      	pop	{r7, pc}
 8014dba:	46c0      	nop			@ (mov r8, r8)
 8014dbc:	fe00e800 	.word	0xfe00e800
 8014dc0:	ffff0000 	.word	0xffff0000

08014dc4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b086      	sub	sp, #24
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dde:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8014de0:	200b      	movs	r0, #11
 8014de2:	183b      	adds	r3, r7, r0
 8014de4:	687a      	ldr	r2, [r7, #4]
 8014de6:	2141      	movs	r1, #65	@ 0x41
 8014de8:	5c52      	ldrb	r2, [r2, r1]
 8014dea:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	2220      	movs	r2, #32
 8014df2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014df4:	183b      	adds	r3, r7, r0
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	2b21      	cmp	r3, #33	@ 0x21
 8014dfa:	d003      	beq.n	8014e04 <I2C_ITSlaveCplt+0x40>
 8014dfc:	183b      	adds	r3, r7, r0
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	2b29      	cmp	r3, #41	@ 0x29
 8014e02:	d109      	bne.n	8014e18 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8014e04:	4aac      	ldr	r2, [pc, #688]	@ (80150b8 <I2C_ITSlaveCplt+0x2f4>)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	0011      	movs	r1, r2
 8014e0a:	0018      	movs	r0, r3
 8014e0c:	f000 fca4 	bl	8015758 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2221      	movs	r2, #33	@ 0x21
 8014e14:	631a      	str	r2, [r3, #48]	@ 0x30
 8014e16:	e020      	b.n	8014e5a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014e18:	220b      	movs	r2, #11
 8014e1a:	18bb      	adds	r3, r7, r2
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	2b22      	cmp	r3, #34	@ 0x22
 8014e20:	d003      	beq.n	8014e2a <I2C_ITSlaveCplt+0x66>
 8014e22:	18bb      	adds	r3, r7, r2
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e28:	d109      	bne.n	8014e3e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8014e2a:	4aa4      	ldr	r2, [pc, #656]	@ (80150bc <I2C_ITSlaveCplt+0x2f8>)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	0011      	movs	r1, r2
 8014e30:	0018      	movs	r0, r3
 8014e32:	f000 fc91 	bl	8015758 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2222      	movs	r2, #34	@ 0x22
 8014e3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014e3c:	e00d      	b.n	8014e5a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8014e3e:	230b      	movs	r3, #11
 8014e40:	18fb      	adds	r3, r7, r3
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	2b28      	cmp	r3, #40	@ 0x28
 8014e46:	d108      	bne.n	8014e5a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8014e48:	4a9d      	ldr	r2, [pc, #628]	@ (80150c0 <I2C_ITSlaveCplt+0x2fc>)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	0011      	movs	r1, r2
 8014e4e:	0018      	movs	r0, r3
 8014e50:	f000 fc82 	bl	8015758 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2200      	movs	r2, #0
 8014e58:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	685a      	ldr	r2, [r3, #4]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2180      	movs	r1, #128	@ 0x80
 8014e66:	0209      	lsls	r1, r1, #8
 8014e68:	430a      	orrs	r2, r1
 8014e6a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	685a      	ldr	r2, [r3, #4]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	4993      	ldr	r1, [pc, #588]	@ (80150c4 <I2C_ITSlaveCplt+0x300>)
 8014e78:	400a      	ands	r2, r1
 8014e7a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	0018      	movs	r0, r3
 8014e80:	f000 faab 	bl	80153da <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014e84:	693a      	ldr	r2, [r7, #16]
 8014e86:	2380      	movs	r3, #128	@ 0x80
 8014e88:	01db      	lsls	r3, r3, #7
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	d013      	beq.n	8014eb6 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	681a      	ldr	r2, [r3, #0]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	498b      	ldr	r1, [pc, #556]	@ (80150c8 <I2C_ITSlaveCplt+0x304>)
 8014e9a:	400a      	ands	r2, r1
 8014e9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d01f      	beq.n	8014ee6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	b29a      	uxth	r2, r3
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014eb4:	e017      	b.n	8014ee6 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8014eb6:	693a      	ldr	r2, [r7, #16]
 8014eb8:	2380      	movs	r3, #128	@ 0x80
 8014eba:	021b      	lsls	r3, r3, #8
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	d012      	beq.n	8014ee6 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	4980      	ldr	r1, [pc, #512]	@ (80150cc <I2C_ITSlaveCplt+0x308>)
 8014ecc:	400a      	ands	r2, r1
 8014ece:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d006      	beq.n	8014ee6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	b29a      	uxth	r2, r3
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	2204      	movs	r2, #4
 8014eea:	4013      	ands	r3, r2
 8014eec:	d020      	beq.n	8014f30 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	2204      	movs	r2, #4
 8014ef2:	4393      	bics	r3, r2
 8014ef4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f00:	b2d2      	uxtb	r2, r2
 8014f02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f08:	1c5a      	adds	r2, r3, #1
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d00c      	beq.n	8014f30 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f1a:	3b01      	subs	r3, #1
 8014f1c:	b29a      	uxth	r2, r3
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d005      	beq.n	8014f46 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f3e:	2204      	movs	r2, #4
 8014f40:	431a      	orrs	r2, r3
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	2210      	movs	r2, #16
 8014f4a:	4013      	ands	r3, r2
 8014f4c:	d04f      	beq.n	8014fee <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	2210      	movs	r2, #16
 8014f52:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014f54:	d04b      	beq.n	8014fee <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f5a:	b29b      	uxth	r3, r3
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d12d      	bne.n	8014fbc <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2241      	movs	r2, #65	@ 0x41
 8014f64:	5c9b      	ldrb	r3, [r3, r2]
 8014f66:	b2db      	uxtb	r3, r3
 8014f68:	2b28      	cmp	r3, #40	@ 0x28
 8014f6a:	d10b      	bne.n	8014f84 <I2C_ITSlaveCplt+0x1c0>
 8014f6c:	68fa      	ldr	r2, [r7, #12]
 8014f6e:	2380      	movs	r3, #128	@ 0x80
 8014f70:	049b      	lsls	r3, r3, #18
 8014f72:	429a      	cmp	r2, r3
 8014f74:	d106      	bne.n	8014f84 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8014f76:	697a      	ldr	r2, [r7, #20]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	0011      	movs	r1, r2
 8014f7c:	0018      	movs	r0, r3
 8014f7e:	f000 f8a9 	bl	80150d4 <I2C_ITListenCplt>
 8014f82:	e034      	b.n	8014fee <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2241      	movs	r2, #65	@ 0x41
 8014f88:	5c9b      	ldrb	r3, [r3, r2]
 8014f8a:	b2db      	uxtb	r3, r3
 8014f8c:	2b29      	cmp	r3, #41	@ 0x29
 8014f8e:	d110      	bne.n	8014fb2 <I2C_ITSlaveCplt+0x1ee>
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	4a4f      	ldr	r2, [pc, #316]	@ (80150d0 <I2C_ITSlaveCplt+0x30c>)
 8014f94:	4293      	cmp	r3, r2
 8014f96:	d00c      	beq.n	8014fb2 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2210      	movs	r2, #16
 8014f9e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	0018      	movs	r0, r3
 8014fa4:	f000 fa19 	bl	80153da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	0018      	movs	r0, r3
 8014fac:	f7ff fdd8 	bl	8014b60 <I2C_ITSlaveSeqCplt>
 8014fb0:	e01d      	b.n	8014fee <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2210      	movs	r2, #16
 8014fb8:	61da      	str	r2, [r3, #28]
 8014fba:	e018      	b.n	8014fee <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2210      	movs	r2, #16
 8014fc2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fc8:	2204      	movs	r2, #4
 8014fca:	431a      	orrs	r2, r3
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d004      	beq.n	8014fe0 <I2C_ITSlaveCplt+0x21c>
 8014fd6:	68fa      	ldr	r2, [r7, #12]
 8014fd8:	2380      	movs	r3, #128	@ 0x80
 8014fda:	045b      	lsls	r3, r3, #17
 8014fdc:	429a      	cmp	r2, r3
 8014fde:	d106      	bne.n	8014fee <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	0011      	movs	r1, r2
 8014fe8:	0018      	movs	r0, r3
 8014fea:	f000 f8cb 	bl	8015184 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2242      	movs	r2, #66	@ 0x42
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015000:	2b00      	cmp	r3, #0
 8015002:	d013      	beq.n	801502c <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	0011      	movs	r1, r2
 801500c:	0018      	movs	r0, r3
 801500e:	f000 f8b9 	bl	8015184 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2241      	movs	r2, #65	@ 0x41
 8015016:	5c9b      	ldrb	r3, [r3, r2]
 8015018:	b2db      	uxtb	r3, r3
 801501a:	2b28      	cmp	r3, #40	@ 0x28
 801501c:	d147      	bne.n	80150ae <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801501e:	697a      	ldr	r2, [r7, #20]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	0011      	movs	r1, r2
 8015024:	0018      	movs	r0, r3
 8015026:	f000 f855 	bl	80150d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801502a:	e040      	b.n	80150ae <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015030:	4a27      	ldr	r2, [pc, #156]	@ (80150d0 <I2C_ITSlaveCplt+0x30c>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d016      	beq.n	8015064 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	0018      	movs	r0, r3
 801503a:	f7ff fd91 	bl	8014b60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	4a23      	ldr	r2, [pc, #140]	@ (80150d0 <I2C_ITSlaveCplt+0x30c>)
 8015042:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2241      	movs	r2, #65	@ 0x41
 8015048:	2120      	movs	r1, #32
 801504a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2200      	movs	r2, #0
 8015050:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2240      	movs	r2, #64	@ 0x40
 8015056:	2100      	movs	r1, #0
 8015058:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	0018      	movs	r0, r3
 801505e:	f7fe ff2a 	bl	8013eb6 <HAL_I2C_ListenCpltCallback>
}
 8015062:	e024      	b.n	80150ae <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2241      	movs	r2, #65	@ 0x41
 8015068:	5c9b      	ldrb	r3, [r3, r2]
 801506a:	b2db      	uxtb	r3, r3
 801506c:	2b22      	cmp	r3, #34	@ 0x22
 801506e:	d10f      	bne.n	8015090 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2241      	movs	r2, #65	@ 0x41
 8015074:	2120      	movs	r1, #32
 8015076:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2200      	movs	r2, #0
 801507c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2240      	movs	r2, #64	@ 0x40
 8015082:	2100      	movs	r1, #0
 8015084:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	0018      	movs	r0, r3
 801508a:	f7fe fefc 	bl	8013e86 <HAL_I2C_SlaveRxCpltCallback>
}
 801508e:	e00e      	b.n	80150ae <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2241      	movs	r2, #65	@ 0x41
 8015094:	2120      	movs	r1, #32
 8015096:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2200      	movs	r2, #0
 801509c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2240      	movs	r2, #64	@ 0x40
 80150a2:	2100      	movs	r1, #0
 80150a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	0018      	movs	r0, r3
 80150aa:	f7fe fee4 	bl	8013e76 <HAL_I2C_SlaveTxCpltCallback>
}
 80150ae:	46c0      	nop			@ (mov r8, r8)
 80150b0:	46bd      	mov	sp, r7
 80150b2:	b006      	add	sp, #24
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	46c0      	nop			@ (mov r8, r8)
 80150b8:	00008001 	.word	0x00008001
 80150bc:	00008002 	.word	0x00008002
 80150c0:	00008003 	.word	0x00008003
 80150c4:	fe00e800 	.word	0xfe00e800
 80150c8:	ffffbfff 	.word	0xffffbfff
 80150cc:	ffff7fff 	.word	0xffff7fff
 80150d0:	ffff0000 	.word	0xffff0000

080150d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b082      	sub	sp, #8
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	4a26      	ldr	r2, [pc, #152]	@ (801517c <I2C_ITListenCplt+0xa8>)
 80150e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2200      	movs	r2, #0
 80150e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2241      	movs	r2, #65	@ 0x41
 80150ee:	2120      	movs	r1, #32
 80150f0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2242      	movs	r2, #66	@ 0x42
 80150f6:	2100      	movs	r1, #0
 80150f8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2200      	movs	r2, #0
 80150fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	2204      	movs	r2, #4
 8015104:	4013      	ands	r3, r2
 8015106:	d022      	beq.n	801514e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015112:	b2d2      	uxtb	r2, r2
 8015114:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801511a:	1c5a      	adds	r2, r3, #1
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015124:	2b00      	cmp	r3, #0
 8015126:	d012      	beq.n	801514e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801512c:	3b01      	subs	r3, #1
 801512e:	b29a      	uxth	r2, r3
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015138:	b29b      	uxth	r3, r3
 801513a:	3b01      	subs	r3, #1
 801513c:	b29a      	uxth	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015146:	2204      	movs	r2, #4
 8015148:	431a      	orrs	r2, r3
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801514e:	4a0c      	ldr	r2, [pc, #48]	@ (8015180 <I2C_ITListenCplt+0xac>)
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	0011      	movs	r1, r2
 8015154:	0018      	movs	r0, r3
 8015156:	f000 faff 	bl	8015758 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2210      	movs	r2, #16
 8015160:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2240      	movs	r2, #64	@ 0x40
 8015166:	2100      	movs	r1, #0
 8015168:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	0018      	movs	r0, r3
 801516e:	f7fe fea2 	bl	8013eb6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8015172:	46c0      	nop			@ (mov r8, r8)
 8015174:	46bd      	mov	sp, r7
 8015176:	b002      	add	sp, #8
 8015178:	bd80      	pop	{r7, pc}
 801517a:	46c0      	nop			@ (mov r8, r8)
 801517c:	ffff0000 	.word	0xffff0000
 8015180:	00008003 	.word	0x00008003

08015184 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b084      	sub	sp, #16
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801518e:	200f      	movs	r0, #15
 8015190:	183b      	adds	r3, r7, r0
 8015192:	687a      	ldr	r2, [r7, #4]
 8015194:	2141      	movs	r1, #65	@ 0x41
 8015196:	5c52      	ldrb	r2, [r2, r1]
 8015198:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2242      	movs	r2, #66	@ 0x42
 801519e:	2100      	movs	r1, #0
 80151a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	4a72      	ldr	r2, [pc, #456]	@ (8015370 <I2C_ITError+0x1ec>)
 80151a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2200      	movs	r2, #0
 80151ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	431a      	orrs	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80151ba:	183b      	adds	r3, r7, r0
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	2b28      	cmp	r3, #40	@ 0x28
 80151c0:	d007      	beq.n	80151d2 <I2C_ITError+0x4e>
 80151c2:	183b      	adds	r3, r7, r0
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	2b29      	cmp	r3, #41	@ 0x29
 80151c8:	d003      	beq.n	80151d2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80151ca:	183b      	adds	r3, r7, r0
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80151d0:	d10c      	bne.n	80151ec <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2103      	movs	r1, #3
 80151d6:	0018      	movs	r0, r3
 80151d8:	f000 fabe 	bl	8015758 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2241      	movs	r2, #65	@ 0x41
 80151e0:	2128      	movs	r1, #40	@ 0x28
 80151e2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	4a63      	ldr	r2, [pc, #396]	@ (8015374 <I2C_ITError+0x1f0>)
 80151e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80151ea:	e032      	b.n	8015252 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80151ec:	4a62      	ldr	r2, [pc, #392]	@ (8015378 <I2C_ITError+0x1f4>)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	0011      	movs	r1, r2
 80151f2:	0018      	movs	r0, r3
 80151f4:	f000 fab0 	bl	8015758 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	0018      	movs	r0, r3
 80151fc:	f000 f8ed 	bl	80153da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2241      	movs	r2, #65	@ 0x41
 8015204:	5c9b      	ldrb	r3, [r3, r2]
 8015206:	b2db      	uxtb	r3, r3
 8015208:	2b60      	cmp	r3, #96	@ 0x60
 801520a:	d01f      	beq.n	801524c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2241      	movs	r2, #65	@ 0x41
 8015210:	2120      	movs	r1, #32
 8015212:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	699b      	ldr	r3, [r3, #24]
 801521a:	2220      	movs	r2, #32
 801521c:	4013      	ands	r3, r2
 801521e:	2b20      	cmp	r3, #32
 8015220:	d114      	bne.n	801524c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	699b      	ldr	r3, [r3, #24]
 8015228:	2210      	movs	r2, #16
 801522a:	4013      	ands	r3, r2
 801522c:	2b10      	cmp	r3, #16
 801522e:	d109      	bne.n	8015244 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	2210      	movs	r2, #16
 8015236:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801523c:	2204      	movs	r2, #4
 801523e:	431a      	orrs	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2220      	movs	r2, #32
 801524a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2200      	movs	r2, #0
 8015250:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015256:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801525c:	2b00      	cmp	r3, #0
 801525e:	d03b      	beq.n	80152d8 <I2C_ITError+0x154>
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	2b11      	cmp	r3, #17
 8015264:	d002      	beq.n	801526c <I2C_ITError+0xe8>
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	2b21      	cmp	r3, #33	@ 0x21
 801526a:	d135      	bne.n	80152d8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	2380      	movs	r3, #128	@ 0x80
 8015274:	01db      	lsls	r3, r3, #7
 8015276:	401a      	ands	r2, r3
 8015278:	2380      	movs	r3, #128	@ 0x80
 801527a:	01db      	lsls	r3, r3, #7
 801527c:	429a      	cmp	r2, r3
 801527e:	d107      	bne.n	8015290 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	493c      	ldr	r1, [pc, #240]	@ (801537c <I2C_ITError+0x1f8>)
 801528c:	400a      	ands	r2, r1
 801528e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015294:	0018      	movs	r0, r3
 8015296:	f7fd fd4b 	bl	8012d30 <HAL_DMA_GetState>
 801529a:	0003      	movs	r3, r0
 801529c:	2b01      	cmp	r3, #1
 801529e:	d016      	beq.n	80152ce <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152a4:	4a36      	ldr	r2, [pc, #216]	@ (8015380 <I2C_ITError+0x1fc>)
 80152a6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2240      	movs	r2, #64	@ 0x40
 80152ac:	2100      	movs	r1, #0
 80152ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152b4:	0018      	movs	r0, r3
 80152b6:	f7fd fc0f 	bl	8012ad8 <HAL_DMA_Abort_IT>
 80152ba:	1e03      	subs	r3, r0, #0
 80152bc:	d051      	beq.n	8015362 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152c8:	0018      	movs	r0, r3
 80152ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80152cc:	e049      	b.n	8015362 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	0018      	movs	r0, r3
 80152d2:	f000 f859 	bl	8015388 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80152d6:	e044      	b.n	8015362 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d03b      	beq.n	8015358 <I2C_ITError+0x1d4>
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	2b12      	cmp	r3, #18
 80152e4:	d002      	beq.n	80152ec <I2C_ITError+0x168>
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	2b22      	cmp	r3, #34	@ 0x22
 80152ea:	d135      	bne.n	8015358 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	681a      	ldr	r2, [r3, #0]
 80152f2:	2380      	movs	r3, #128	@ 0x80
 80152f4:	021b      	lsls	r3, r3, #8
 80152f6:	401a      	ands	r2, r3
 80152f8:	2380      	movs	r3, #128	@ 0x80
 80152fa:	021b      	lsls	r3, r3, #8
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d107      	bne.n	8015310 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	491e      	ldr	r1, [pc, #120]	@ (8015384 <I2C_ITError+0x200>)
 801530c:	400a      	ands	r2, r1
 801530e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015314:	0018      	movs	r0, r3
 8015316:	f7fd fd0b 	bl	8012d30 <HAL_DMA_GetState>
 801531a:	0003      	movs	r3, r0
 801531c:	2b01      	cmp	r3, #1
 801531e:	d016      	beq.n	801534e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015324:	4a16      	ldr	r2, [pc, #88]	@ (8015380 <I2C_ITError+0x1fc>)
 8015326:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2240      	movs	r2, #64	@ 0x40
 801532c:	2100      	movs	r1, #0
 801532e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015334:	0018      	movs	r0, r3
 8015336:	f7fd fbcf 	bl	8012ad8 <HAL_DMA_Abort_IT>
 801533a:	1e03      	subs	r3, r0, #0
 801533c:	d013      	beq.n	8015366 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015348:	0018      	movs	r0, r3
 801534a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801534c:	e00b      	b.n	8015366 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	0018      	movs	r0, r3
 8015352:	f000 f819 	bl	8015388 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015356:	e006      	b.n	8015366 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	0018      	movs	r0, r3
 801535c:	f000 f814 	bl	8015388 <I2C_TreatErrorCallback>
  }
}
 8015360:	e002      	b.n	8015368 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015362:	46c0      	nop			@ (mov r8, r8)
 8015364:	e000      	b.n	8015368 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015366:	46c0      	nop			@ (mov r8, r8)
}
 8015368:	46c0      	nop			@ (mov r8, r8)
 801536a:	46bd      	mov	sp, r7
 801536c:	b004      	add	sp, #16
 801536e:	bd80      	pop	{r7, pc}
 8015370:	ffff0000 	.word	0xffff0000
 8015374:	08014175 	.word	0x08014175
 8015378:	00008003 	.word	0x00008003
 801537c:	ffffbfff 	.word	0xffffbfff
 8015380:	08015593 	.word	0x08015593
 8015384:	ffff7fff 	.word	0xffff7fff

08015388 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	2241      	movs	r2, #65	@ 0x41
 8015394:	5c9b      	ldrb	r3, [r3, r2]
 8015396:	b2db      	uxtb	r3, r3
 8015398:	2b60      	cmp	r3, #96	@ 0x60
 801539a:	d10f      	bne.n	80153bc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2241      	movs	r2, #65	@ 0x41
 80153a0:	2120      	movs	r1, #32
 80153a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2200      	movs	r2, #0
 80153a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2240      	movs	r2, #64	@ 0x40
 80153ae:	2100      	movs	r1, #0
 80153b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	0018      	movs	r0, r3
 80153b6:	f7fe fd9e 	bl	8013ef6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80153ba:	e00a      	b.n	80153d2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2200      	movs	r2, #0
 80153c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2240      	movs	r2, #64	@ 0x40
 80153c6:	2100      	movs	r1, #0
 80153c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	0018      	movs	r0, r3
 80153ce:	f7fe fd8a 	bl	8013ee6 <HAL_I2C_ErrorCallback>
}
 80153d2:	46c0      	nop			@ (mov r8, r8)
 80153d4:	46bd      	mov	sp, r7
 80153d6:	b002      	add	sp, #8
 80153d8:	bd80      	pop	{r7, pc}

080153da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80153da:	b580      	push	{r7, lr}
 80153dc:	b082      	sub	sp, #8
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	699b      	ldr	r3, [r3, #24]
 80153e8:	2202      	movs	r2, #2
 80153ea:	4013      	ands	r3, r2
 80153ec:	2b02      	cmp	r3, #2
 80153ee:	d103      	bne.n	80153f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2200      	movs	r2, #0
 80153f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	699b      	ldr	r3, [r3, #24]
 80153fe:	2201      	movs	r2, #1
 8015400:	4013      	ands	r3, r2
 8015402:	2b01      	cmp	r3, #1
 8015404:	d007      	beq.n	8015416 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	699a      	ldr	r2, [r3, #24]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	2101      	movs	r1, #1
 8015412:	430a      	orrs	r2, r1
 8015414:	619a      	str	r2, [r3, #24]
  }
}
 8015416:	46c0      	nop			@ (mov r8, r8)
 8015418:	46bd      	mov	sp, r7
 801541a:	b002      	add	sp, #8
 801541c:	bd80      	pop	{r7, pc}
	...

08015420 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801542c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	4920      	ldr	r1, [pc, #128]	@ (80154bc <I2C_DMAMasterTransmitCplt+0x9c>)
 801543a:	400a      	ands	r2, r1
 801543c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015442:	b29b      	uxth	r3, r3
 8015444:	2b00      	cmp	r3, #0
 8015446:	d105      	bne.n	8015454 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	2120      	movs	r1, #32
 801544c:	0018      	movs	r0, r3
 801544e:	f000 f8f9 	bl	8015644 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015452:	e02e      	b.n	80154b2 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015458:	68fa      	ldr	r2, [r7, #12]
 801545a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801545c:	189a      	adds	r2, r3, r2
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015466:	b29b      	uxth	r3, r3
 8015468:	2bff      	cmp	r3, #255	@ 0xff
 801546a:	d903      	bls.n	8015474 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	22ff      	movs	r2, #255	@ 0xff
 8015470:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015472:	e004      	b.n	801547e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015478:	b29a      	uxth	r2, r3
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015486:	0019      	movs	r1, r3
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	3328      	adds	r3, #40	@ 0x28
 801548e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015494:	f7fd fa3a 	bl	801290c <HAL_DMA_Start_IT>
 8015498:	1e03      	subs	r3, r0, #0
 801549a:	d005      	beq.n	80154a8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	2110      	movs	r1, #16
 80154a0:	0018      	movs	r0, r3
 80154a2:	f7ff fe6f 	bl	8015184 <I2C_ITError>
}
 80154a6:	e004      	b.n	80154b2 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2140      	movs	r1, #64	@ 0x40
 80154ac:	0018      	movs	r0, r3
 80154ae:	f000 f8c9 	bl	8015644 <I2C_Enable_IRQ>
}
 80154b2:	46c0      	nop			@ (mov r8, r8)
 80154b4:	46bd      	mov	sp, r7
 80154b6:	b004      	add	sp, #16
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	46c0      	nop			@ (mov r8, r8)
 80154bc:	ffffbfff 	.word	0xffffbfff

080154c0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154cc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	4920      	ldr	r1, [pc, #128]	@ (801555c <I2C_DMAMasterReceiveCplt+0x9c>)
 80154da:	400a      	ands	r2, r1
 80154dc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d105      	bne.n	80154f4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	2120      	movs	r1, #32
 80154ec:	0018      	movs	r0, r3
 80154ee:	f000 f8a9 	bl	8015644 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80154f2:	e02e      	b.n	8015552 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154f8:	68fa      	ldr	r2, [r7, #12]
 80154fa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80154fc:	189a      	adds	r2, r3, r2
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015506:	b29b      	uxth	r3, r3
 8015508:	2bff      	cmp	r3, #255	@ 0xff
 801550a:	d903      	bls.n	8015514 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	22ff      	movs	r2, #255	@ 0xff
 8015510:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015512:	e004      	b.n	801551e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015518:	b29a      	uxth	r2, r3
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	3324      	adds	r3, #36	@ 0x24
 8015528:	0019      	movs	r1, r3
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801552e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015534:	f7fd f9ea 	bl	801290c <HAL_DMA_Start_IT>
 8015538:	1e03      	subs	r3, r0, #0
 801553a:	d005      	beq.n	8015548 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2110      	movs	r1, #16
 8015540:	0018      	movs	r0, r3
 8015542:	f7ff fe1f 	bl	8015184 <I2C_ITError>
}
 8015546:	e004      	b.n	8015552 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	2140      	movs	r1, #64	@ 0x40
 801554c:	0018      	movs	r0, r3
 801554e:	f000 f879 	bl	8015644 <I2C_Enable_IRQ>
}
 8015552:	46c0      	nop			@ (mov r8, r8)
 8015554:	46bd      	mov	sp, r7
 8015556:	b004      	add	sp, #16
 8015558:	bd80      	pop	{r7, pc}
 801555a:	46c0      	nop			@ (mov r8, r8)
 801555c:	ffff7fff 	.word	0xffff7fff

08015560 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801556c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	685a      	ldr	r2, [r3, #4]
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	2180      	movs	r1, #128	@ 0x80
 801557a:	0209      	lsls	r1, r1, #8
 801557c:	430a      	orrs	r2, r1
 801557e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2110      	movs	r1, #16
 8015584:	0018      	movs	r0, r3
 8015586:	f7ff fdfd 	bl	8015184 <I2C_ITError>
}
 801558a:	46c0      	nop			@ (mov r8, r8)
 801558c:	46bd      	mov	sp, r7
 801558e:	b004      	add	sp, #16
 8015590:	bd80      	pop	{r7, pc}

08015592 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8015592:	b580      	push	{r7, lr}
 8015594:	b084      	sub	sp, #16
 8015596:	af00      	add	r7, sp, #0
 8015598:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801559e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d003      	beq.n	80155b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155ac:	2200      	movs	r2, #0
 80155ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d003      	beq.n	80155c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155bc:	2200      	movs	r2, #0
 80155be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	0018      	movs	r0, r3
 80155c4:	f7ff fee0 	bl	8015388 <I2C_TreatErrorCallback>
}
 80155c8:	46c0      	nop			@ (mov r8, r8)
 80155ca:	46bd      	mov	sp, r7
 80155cc:	b004      	add	sp, #16
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80155d0:	b590      	push	{r4, r7, lr}
 80155d2:	b087      	sub	sp, #28
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	0008      	movs	r0, r1
 80155da:	0011      	movs	r1, r2
 80155dc:	607b      	str	r3, [r7, #4]
 80155de:	240a      	movs	r4, #10
 80155e0:	193b      	adds	r3, r7, r4
 80155e2:	1c02      	adds	r2, r0, #0
 80155e4:	801a      	strh	r2, [r3, #0]
 80155e6:	2009      	movs	r0, #9
 80155e8:	183b      	adds	r3, r7, r0
 80155ea:	1c0a      	adds	r2, r1, #0
 80155ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80155ee:	193b      	adds	r3, r7, r4
 80155f0:	881b      	ldrh	r3, [r3, #0]
 80155f2:	059b      	lsls	r3, r3, #22
 80155f4:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80155f6:	183b      	adds	r3, r7, r0
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	0419      	lsls	r1, r3, #16
 80155fc:	23ff      	movs	r3, #255	@ 0xff
 80155fe:	041b      	lsls	r3, r3, #16
 8015600:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015602:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801560a:	4313      	orrs	r3, r2
 801560c:	005b      	lsls	r3, r3, #1
 801560e:	085b      	lsrs	r3, r3, #1
 8015610:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801561a:	0d51      	lsrs	r1, r2, #21
 801561c:	2280      	movs	r2, #128	@ 0x80
 801561e:	00d2      	lsls	r2, r2, #3
 8015620:	400a      	ands	r2, r1
 8015622:	4907      	ldr	r1, [pc, #28]	@ (8015640 <I2C_TransferConfig+0x70>)
 8015624:	430a      	orrs	r2, r1
 8015626:	43d2      	mvns	r2, r2
 8015628:	401a      	ands	r2, r3
 801562a:	0011      	movs	r1, r2
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	697a      	ldr	r2, [r7, #20]
 8015632:	430a      	orrs	r2, r1
 8015634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8015636:	46c0      	nop			@ (mov r8, r8)
 8015638:	46bd      	mov	sp, r7
 801563a:	b007      	add	sp, #28
 801563c:	bd90      	pop	{r4, r7, pc}
 801563e:	46c0      	nop			@ (mov r8, r8)
 8015640:	03ff63ff 	.word	0x03ff63ff

08015644 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b084      	sub	sp, #16
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	000a      	movs	r2, r1
 801564e:	1cbb      	adds	r3, r7, #2
 8015650:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8015652:	2300      	movs	r3, #0
 8015654:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801565a:	4b3c      	ldr	r3, [pc, #240]	@ (801574c <I2C_Enable_IRQ+0x108>)
 801565c:	429a      	cmp	r2, r3
 801565e:	d035      	beq.n	80156cc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8015664:	4b3a      	ldr	r3, [pc, #232]	@ (8015750 <I2C_Enable_IRQ+0x10c>)
 8015666:	429a      	cmp	r2, r3
 8015668:	d030      	beq.n	80156cc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801566e:	4b39      	ldr	r3, [pc, #228]	@ (8015754 <I2C_Enable_IRQ+0x110>)
 8015670:	429a      	cmp	r2, r3
 8015672:	d02b      	beq.n	80156cc <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8015674:	1cbb      	adds	r3, r7, #2
 8015676:	2200      	movs	r2, #0
 8015678:	5e9b      	ldrsh	r3, [r3, r2]
 801567a:	2b00      	cmp	r3, #0
 801567c:	da03      	bge.n	8015686 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	22b8      	movs	r2, #184	@ 0xb8
 8015682:	4313      	orrs	r3, r2
 8015684:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8015686:	1cbb      	adds	r3, r7, #2
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	2201      	movs	r2, #1
 801568c:	4013      	ands	r3, r2
 801568e:	d003      	beq.n	8015698 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	22f2      	movs	r2, #242	@ 0xf2
 8015694:	4313      	orrs	r3, r2
 8015696:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8015698:	1cbb      	adds	r3, r7, #2
 801569a:	881b      	ldrh	r3, [r3, #0]
 801569c:	2202      	movs	r2, #2
 801569e:	4013      	ands	r3, r2
 80156a0:	d003      	beq.n	80156aa <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	22f4      	movs	r2, #244	@ 0xf4
 80156a6:	4313      	orrs	r3, r2
 80156a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80156aa:	1cbb      	adds	r3, r7, #2
 80156ac:	881b      	ldrh	r3, [r3, #0]
 80156ae:	2b10      	cmp	r3, #16
 80156b0:	d103      	bne.n	80156ba <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	2290      	movs	r2, #144	@ 0x90
 80156b6:	4313      	orrs	r3, r2
 80156b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80156ba:	1cbb      	adds	r3, r7, #2
 80156bc:	881b      	ldrh	r3, [r3, #0]
 80156be:	2b20      	cmp	r3, #32
 80156c0:	d137      	bne.n	8015732 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2220      	movs	r2, #32
 80156c6:	4313      	orrs	r3, r2
 80156c8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80156ca:	e032      	b.n	8015732 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80156cc:	1cbb      	adds	r3, r7, #2
 80156ce:	2200      	movs	r2, #0
 80156d0:	5e9b      	ldrsh	r3, [r3, r2]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	da03      	bge.n	80156de <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	22b8      	movs	r2, #184	@ 0xb8
 80156da:	4313      	orrs	r3, r2
 80156dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80156de:	1cbb      	adds	r3, r7, #2
 80156e0:	881b      	ldrh	r3, [r3, #0]
 80156e2:	2201      	movs	r2, #1
 80156e4:	4013      	ands	r3, r2
 80156e6:	d003      	beq.n	80156f0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	22f2      	movs	r2, #242	@ 0xf2
 80156ec:	4313      	orrs	r3, r2
 80156ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80156f0:	1cbb      	adds	r3, r7, #2
 80156f2:	881b      	ldrh	r3, [r3, #0]
 80156f4:	2202      	movs	r2, #2
 80156f6:	4013      	ands	r3, r2
 80156f8:	d003      	beq.n	8015702 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	22f4      	movs	r2, #244	@ 0xf4
 80156fe:	4313      	orrs	r3, r2
 8015700:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015702:	1cbb      	adds	r3, r7, #2
 8015704:	881b      	ldrh	r3, [r3, #0]
 8015706:	2b10      	cmp	r3, #16
 8015708:	d103      	bne.n	8015712 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	2290      	movs	r2, #144	@ 0x90
 801570e:	4313      	orrs	r3, r2
 8015710:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015712:	1cbb      	adds	r3, r7, #2
 8015714:	881b      	ldrh	r3, [r3, #0]
 8015716:	2b20      	cmp	r3, #32
 8015718:	d103      	bne.n	8015722 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2260      	movs	r2, #96	@ 0x60
 801571e:	4313      	orrs	r3, r2
 8015720:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8015722:	1cbb      	adds	r3, r7, #2
 8015724:	881b      	ldrh	r3, [r3, #0]
 8015726:	2b40      	cmp	r3, #64	@ 0x40
 8015728:	d103      	bne.n	8015732 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2240      	movs	r2, #64	@ 0x40
 801572e:	4313      	orrs	r3, r2
 8015730:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	6819      	ldr	r1, [r3, #0]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	68fa      	ldr	r2, [r7, #12]
 801573e:	430a      	orrs	r2, r1
 8015740:	601a      	str	r2, [r3, #0]
}
 8015742:	46c0      	nop			@ (mov r8, r8)
 8015744:	46bd      	mov	sp, r7
 8015746:	b004      	add	sp, #16
 8015748:	bd80      	pop	{r7, pc}
 801574a:	46c0      	nop			@ (mov r8, r8)
 801574c:	08014375 	.word	0x08014375
 8015750:	080147c5 	.word	0x080147c5
 8015754:	0801456d 	.word	0x0801456d

08015758 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b084      	sub	sp, #16
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	000a      	movs	r2, r1
 8015762:	1cbb      	adds	r3, r7, #2
 8015764:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8015766:	2300      	movs	r3, #0
 8015768:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801576a:	1cbb      	adds	r3, r7, #2
 801576c:	881b      	ldrh	r3, [r3, #0]
 801576e:	2201      	movs	r2, #1
 8015770:	4013      	ands	r3, r2
 8015772:	d010      	beq.n	8015796 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2242      	movs	r2, #66	@ 0x42
 8015778:	4313      	orrs	r3, r2
 801577a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2241      	movs	r2, #65	@ 0x41
 8015780:	5c9b      	ldrb	r3, [r3, r2]
 8015782:	b2db      	uxtb	r3, r3
 8015784:	001a      	movs	r2, r3
 8015786:	2328      	movs	r3, #40	@ 0x28
 8015788:	4013      	ands	r3, r2
 801578a:	2b28      	cmp	r3, #40	@ 0x28
 801578c:	d003      	beq.n	8015796 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	22b0      	movs	r2, #176	@ 0xb0
 8015792:	4313      	orrs	r3, r2
 8015794:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8015796:	1cbb      	adds	r3, r7, #2
 8015798:	881b      	ldrh	r3, [r3, #0]
 801579a:	2202      	movs	r2, #2
 801579c:	4013      	ands	r3, r2
 801579e:	d010      	beq.n	80157c2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2244      	movs	r2, #68	@ 0x44
 80157a4:	4313      	orrs	r3, r2
 80157a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2241      	movs	r2, #65	@ 0x41
 80157ac:	5c9b      	ldrb	r3, [r3, r2]
 80157ae:	b2db      	uxtb	r3, r3
 80157b0:	001a      	movs	r2, r3
 80157b2:	2328      	movs	r3, #40	@ 0x28
 80157b4:	4013      	ands	r3, r2
 80157b6:	2b28      	cmp	r3, #40	@ 0x28
 80157b8:	d003      	beq.n	80157c2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	22b0      	movs	r2, #176	@ 0xb0
 80157be:	4313      	orrs	r3, r2
 80157c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80157c2:	1cbb      	adds	r3, r7, #2
 80157c4:	2200      	movs	r2, #0
 80157c6:	5e9b      	ldrsh	r3, [r3, r2]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	da03      	bge.n	80157d4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	22b8      	movs	r2, #184	@ 0xb8
 80157d0:	4313      	orrs	r3, r2
 80157d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80157d4:	1cbb      	adds	r3, r7, #2
 80157d6:	881b      	ldrh	r3, [r3, #0]
 80157d8:	2b10      	cmp	r3, #16
 80157da:	d103      	bne.n	80157e4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	2290      	movs	r2, #144	@ 0x90
 80157e0:	4313      	orrs	r3, r2
 80157e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80157e4:	1cbb      	adds	r3, r7, #2
 80157e6:	881b      	ldrh	r3, [r3, #0]
 80157e8:	2b20      	cmp	r3, #32
 80157ea:	d103      	bne.n	80157f4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2220      	movs	r2, #32
 80157f0:	4313      	orrs	r3, r2
 80157f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80157f4:	1cbb      	adds	r3, r7, #2
 80157f6:	881b      	ldrh	r3, [r3, #0]
 80157f8:	2b40      	cmp	r3, #64	@ 0x40
 80157fa:	d103      	bne.n	8015804 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	2240      	movs	r2, #64	@ 0x40
 8015800:	4313      	orrs	r3, r2
 8015802:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	43d9      	mvns	r1, r3
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	400a      	ands	r2, r1
 8015814:	601a      	str	r2, [r3, #0]
}
 8015816:	46c0      	nop			@ (mov r8, r8)
 8015818:	46bd      	mov	sp, r7
 801581a:	b004      	add	sp, #16
 801581c:	bd80      	pop	{r7, pc}
	...

08015820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b082      	sub	sp, #8
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	2241      	movs	r2, #65	@ 0x41
 801582e:	5c9b      	ldrb	r3, [r3, r2]
 8015830:	b2db      	uxtb	r3, r3
 8015832:	2b20      	cmp	r3, #32
 8015834:	d138      	bne.n	80158a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2240      	movs	r2, #64	@ 0x40
 801583a:	5c9b      	ldrb	r3, [r3, r2]
 801583c:	2b01      	cmp	r3, #1
 801583e:	d101      	bne.n	8015844 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8015840:	2302      	movs	r3, #2
 8015842:	e032      	b.n	80158aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2240      	movs	r2, #64	@ 0x40
 8015848:	2101      	movs	r1, #1
 801584a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2241      	movs	r2, #65	@ 0x41
 8015850:	2124      	movs	r1, #36	@ 0x24
 8015852:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2101      	movs	r1, #1
 8015860:	438a      	bics	r2, r1
 8015862:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	681a      	ldr	r2, [r3, #0]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	4911      	ldr	r1, [pc, #68]	@ (80158b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8015870:	400a      	ands	r2, r1
 8015872:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	6819      	ldr	r1, [r3, #0]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	683a      	ldr	r2, [r7, #0]
 8015880:	430a      	orrs	r2, r1
 8015882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	2101      	movs	r1, #1
 8015890:	430a      	orrs	r2, r1
 8015892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2241      	movs	r2, #65	@ 0x41
 8015898:	2120      	movs	r1, #32
 801589a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2240      	movs	r2, #64	@ 0x40
 80158a0:	2100      	movs	r1, #0
 80158a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80158a4:	2300      	movs	r3, #0
 80158a6:	e000      	b.n	80158aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80158a8:	2302      	movs	r3, #2
  }
}
 80158aa:	0018      	movs	r0, r3
 80158ac:	46bd      	mov	sp, r7
 80158ae:	b002      	add	sp, #8
 80158b0:	bd80      	pop	{r7, pc}
 80158b2:	46c0      	nop			@ (mov r8, r8)
 80158b4:	ffffefff 	.word	0xffffefff

080158b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b084      	sub	sp, #16
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2241      	movs	r2, #65	@ 0x41
 80158c6:	5c9b      	ldrb	r3, [r3, r2]
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	2b20      	cmp	r3, #32
 80158cc:	d139      	bne.n	8015942 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	2240      	movs	r2, #64	@ 0x40
 80158d2:	5c9b      	ldrb	r3, [r3, r2]
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d101      	bne.n	80158dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80158d8:	2302      	movs	r3, #2
 80158da:	e033      	b.n	8015944 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2240      	movs	r2, #64	@ 0x40
 80158e0:	2101      	movs	r1, #1
 80158e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2241      	movs	r2, #65	@ 0x41
 80158e8:	2124      	movs	r1, #36	@ 0x24
 80158ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	2101      	movs	r1, #1
 80158f8:	438a      	bics	r2, r1
 80158fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	4a11      	ldr	r2, [pc, #68]	@ (801594c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8015908:	4013      	ands	r3, r2
 801590a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	021b      	lsls	r3, r3, #8
 8015910:	68fa      	ldr	r2, [r7, #12]
 8015912:	4313      	orrs	r3, r2
 8015914:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	68fa      	ldr	r2, [r7, #12]
 801591c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2101      	movs	r1, #1
 801592a:	430a      	orrs	r2, r1
 801592c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	2241      	movs	r2, #65	@ 0x41
 8015932:	2120      	movs	r1, #32
 8015934:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	2240      	movs	r2, #64	@ 0x40
 801593a:	2100      	movs	r1, #0
 801593c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801593e:	2300      	movs	r3, #0
 8015940:	e000      	b.n	8015944 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8015942:	2302      	movs	r3, #2
  }
}
 8015944:	0018      	movs	r0, r3
 8015946:	46bd      	mov	sp, r7
 8015948:	b004      	add	sp, #16
 801594a:	bd80      	pop	{r7, pc}
 801594c:	fffff0ff 	.word	0xfffff0ff

08015950 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d101      	bne.n	8015962 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801595e:	2301      	movs	r3, #1
 8015960:	e06d      	b.n	8015a3e <HAL_IWDG_Init+0xee>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	0018      	movs	r0, r3
 8015966:	f000 f875 	bl	8015a54 <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	4a36      	ldr	r2, [pc, #216]	@ (8015a48 <HAL_IWDG_Init+0xf8>)
 8015970:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	4a35      	ldr	r2, [pc, #212]	@ (8015a4c <HAL_IWDG_Init+0xfc>)
 8015978:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	687a      	ldr	r2, [r7, #4]
 8015980:	6852      	ldr	r2, [r2, #4]
 8015982:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	687a      	ldr	r2, [r7, #4]
 801598a:	6892      	ldr	r2, [r2, #8]
 801598c:	609a      	str	r2, [r3, #8]

  /* Check Reload update flag, before performing any reload of the counter, else previous value
  will be taken. */
  tickstart = HAL_GetTick();
 801598e:	f7fb fbf1 	bl	8011174 <HAL_GetTick>
 8015992:	0003      	movs	r3, r0
 8015994:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 8015996:	e00e      	b.n	80159b6 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015998:	f7fb fbec 	bl	8011174 <HAL_GetTick>
 801599c:	0002      	movs	r2, r0
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	1ad3      	subs	r3, r2, r3
 80159a2:	2b21      	cmp	r3, #33	@ 0x21
 80159a4:	d907      	bls.n	80159b6 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	68db      	ldr	r3, [r3, #12]
 80159ac:	2202      	movs	r2, #2
 80159ae:	4013      	ands	r3, r2
 80159b0:	d001      	beq.n	80159b6 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80159b2:	2303      	movs	r3, #3
 80159b4:	e043      	b.n	8015a3e <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_SR_RVU) != 0x00u)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	2202      	movs	r2, #2
 80159be:	4013      	ands	r3, r2
 80159c0:	d1ea      	bne.n	8015998 <HAL_IWDG_Init+0x48>
      }
    }
  }

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	691b      	ldr	r3, [r3, #16]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d105      	bne.n	80159d6 <HAL_IWDG_Init+0x86>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2280      	movs	r2, #128	@ 0x80
 80159d0:	01d2      	lsls	r2, r2, #7
 80159d2:	615a      	str	r2, [r3, #20]
 80159d4:	e007      	b.n	80159e6 <HAL_IWDG_Init+0x96>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	691a      	ldr	r2, [r3, #16]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	21c0      	movs	r1, #192	@ 0xc0
 80159e0:	0209      	lsls	r1, r1, #8
 80159e2:	430a      	orrs	r2, r1
 80159e4:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80159e6:	f7fb fbc5 	bl	8011174 <HAL_GetTick>
 80159ea:	0003      	movs	r3, r0
 80159ec:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80159ee:	e00e      	b.n	8015a0e <HAL_IWDG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80159f0:	f7fb fbc0 	bl	8011174 <HAL_GetTick>
 80159f4:	0002      	movs	r2, r0
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	1ad3      	subs	r3, r2, r3
 80159fa:	2b21      	cmp	r3, #33	@ 0x21
 80159fc:	d907      	bls.n	8015a0e <HAL_IWDG_Init+0xbe>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	220f      	movs	r2, #15
 8015a06:	4013      	ands	r3, r2
 8015a08:	d001      	beq.n	8015a0e <HAL_IWDG_Init+0xbe>
      {
        return HAL_TIMEOUT;
 8015a0a:	2303      	movs	r3, #3
 8015a0c:	e017      	b.n	8015a3e <HAL_IWDG_Init+0xee>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	220f      	movs	r2, #15
 8015a16:	4013      	ands	r3, r2
 8015a18:	d1ea      	bne.n	80159f0 <HAL_IWDG_Init+0xa0>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	691a      	ldr	r2, [r3, #16]
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d005      	beq.n	8015a34 <HAL_IWDG_Init+0xe4>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	687a      	ldr	r2, [r7, #4]
 8015a2e:	68d2      	ldr	r2, [r2, #12]
 8015a30:	611a      	str	r2, [r3, #16]
 8015a32:	e003      	b.n	8015a3c <HAL_IWDG_Init+0xec>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	4a05      	ldr	r2, [pc, #20]	@ (8015a50 <HAL_IWDG_Init+0x100>)
 8015a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015a3c:	2300      	movs	r3, #0
}
 8015a3e:	0018      	movs	r0, r3
 8015a40:	46bd      	mov	sp, r7
 8015a42:	b004      	add	sp, #16
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	46c0      	nop			@ (mov r8, r8)
 8015a48:	0000cccc 	.word	0x0000cccc
 8015a4c:	00005555 	.word	0x00005555
 8015a50:	0000aaaa 	.word	0x0000aaaa

08015a54 <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 8015a5c:	46c0      	nop			@ (mov r8, r8)
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	b002      	add	sp, #8
 8015a62:	bd80      	pop	{r7, pc}

08015a64 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	4a03      	ldr	r2, [pc, #12]	@ (8015a80 <HAL_IWDG_Refresh+0x1c>)
 8015a72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	0018      	movs	r0, r3
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	b002      	add	sp, #8
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	46c0      	nop			@ (mov r8, r8)
 8015a80:	0000aaaa 	.word	0x0000aaaa

08015a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b084      	sub	sp, #16
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	2380      	movs	r3, #128	@ 0x80
 8015a90:	009b      	lsls	r3, r3, #2
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d137      	bne.n	8015b06 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8015a96:	4b27      	ldr	r3, [pc, #156]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015a98:	681a      	ldr	r2, [r3, #0]
 8015a9a:	23c0      	movs	r3, #192	@ 0xc0
 8015a9c:	00db      	lsls	r3, r3, #3
 8015a9e:	401a      	ands	r2, r3
 8015aa0:	2380      	movs	r3, #128	@ 0x80
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d040      	beq.n	8015b2a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8015aa8:	4b22      	ldr	r3, [pc, #136]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4a22      	ldr	r2, [pc, #136]	@ (8015b38 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8015aae:	401a      	ands	r2, r3
 8015ab0:	4b20      	ldr	r3, [pc, #128]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015ab2:	2180      	movs	r1, #128	@ 0x80
 8015ab4:	0089      	lsls	r1, r1, #2
 8015ab6:	430a      	orrs	r2, r1
 8015ab8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8015aba:	4b20      	ldr	r3, [pc, #128]	@ (8015b3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2232      	movs	r2, #50	@ 0x32
 8015ac0:	4353      	muls	r3, r2
 8015ac2:	491f      	ldr	r1, [pc, #124]	@ (8015b40 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8015ac4:	0018      	movs	r0, r3
 8015ac6:	f7ea fb27 	bl	8000118 <__udivsi3>
 8015aca:	0003      	movs	r3, r0
 8015acc:	3301      	adds	r3, #1
 8015ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015ad0:	e002      	b.n	8015ad8 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015ad8:	4b16      	ldr	r3, [pc, #88]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015ada:	695a      	ldr	r2, [r3, #20]
 8015adc:	2380      	movs	r3, #128	@ 0x80
 8015ade:	00db      	lsls	r3, r3, #3
 8015ae0:	401a      	ands	r2, r3
 8015ae2:	2380      	movs	r3, #128	@ 0x80
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d102      	bne.n	8015af0 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d1f0      	bne.n	8015ad2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8015af0:	4b10      	ldr	r3, [pc, #64]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015af2:	695a      	ldr	r2, [r3, #20]
 8015af4:	2380      	movs	r3, #128	@ 0x80
 8015af6:	00db      	lsls	r3, r3, #3
 8015af8:	401a      	ands	r2, r3
 8015afa:	2380      	movs	r3, #128	@ 0x80
 8015afc:	00db      	lsls	r3, r3, #3
 8015afe:	429a      	cmp	r2, r3
 8015b00:	d113      	bne.n	8015b2a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8015b02:	2303      	movs	r3, #3
 8015b04:	e012      	b.n	8015b2c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8015b06:	4b0b      	ldr	r3, [pc, #44]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	23c0      	movs	r3, #192	@ 0xc0
 8015b0c:	00db      	lsls	r3, r3, #3
 8015b0e:	401a      	ands	r2, r3
 8015b10:	2380      	movs	r3, #128	@ 0x80
 8015b12:	00db      	lsls	r3, r3, #3
 8015b14:	429a      	cmp	r2, r3
 8015b16:	d008      	beq.n	8015b2a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8015b18:	4b06      	ldr	r3, [pc, #24]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	4a06      	ldr	r2, [pc, #24]	@ (8015b38 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8015b1e:	401a      	ands	r2, r3
 8015b20:	4b04      	ldr	r3, [pc, #16]	@ (8015b34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8015b22:	2180      	movs	r1, #128	@ 0x80
 8015b24:	00c9      	lsls	r1, r1, #3
 8015b26:	430a      	orrs	r2, r1
 8015b28:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8015b2a:	2300      	movs	r3, #0
}
 8015b2c:	0018      	movs	r0, r3
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	b004      	add	sp, #16
 8015b32:	bd80      	pop	{r7, pc}
 8015b34:	40007000 	.word	0x40007000
 8015b38:	fffff9ff 	.word	0xfffff9ff
 8015b3c:	20000250 	.word	0x20000250
 8015b40:	000f4240 	.word	0x000f4240

08015b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8015b48:	4b03      	ldr	r3, [pc, #12]	@ (8015b58 <HAL_PWREx_GetVoltageRange+0x14>)
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	23c0      	movs	r3, #192	@ 0xc0
 8015b4e:	00db      	lsls	r3, r3, #3
 8015b50:	4013      	ands	r3, r2
}
 8015b52:	0018      	movs	r0, r3
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}
 8015b58:	40007000 	.word	0x40007000

08015b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015b5c:	b5b0      	push	{r4, r5, r7, lr}
 8015b5e:	b088      	sub	sp, #32
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015b64:	4bc9      	ldr	r3, [pc, #804]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015b66:	689b      	ldr	r3, [r3, #8]
 8015b68:	2238      	movs	r2, #56	@ 0x38
 8015b6a:	4013      	ands	r3, r2
 8015b6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015b6e:	4bc7      	ldr	r3, [pc, #796]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015b70:	68db      	ldr	r3, [r3, #12]
 8015b72:	2203      	movs	r2, #3
 8015b74:	4013      	ands	r3, r2
 8015b76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	2210      	movs	r2, #16
 8015b7e:	4013      	ands	r3, r2
 8015b80:	d100      	bne.n	8015b84 <HAL_RCC_OscConfig+0x28>
 8015b82:	e0ef      	b.n	8015d64 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d007      	beq.n	8015b9a <HAL_RCC_OscConfig+0x3e>
 8015b8a:	69bb      	ldr	r3, [r7, #24]
 8015b8c:	2b18      	cmp	r3, #24
 8015b8e:	d000      	beq.n	8015b92 <HAL_RCC_OscConfig+0x36>
 8015b90:	e093      	b.n	8015cba <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	2b01      	cmp	r3, #1
 8015b96:	d000      	beq.n	8015b9a <HAL_RCC_OscConfig+0x3e>
 8015b98:	e08f      	b.n	8015cba <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015b9a:	4bbc      	ldr	r3, [pc, #752]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	2202      	movs	r2, #2
 8015ba0:	4013      	ands	r3, r2
 8015ba2:	d006      	beq.n	8015bb2 <HAL_RCC_OscConfig+0x56>
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	69db      	ldr	r3, [r3, #28]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d102      	bne.n	8015bb2 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8015bac:	2301      	movs	r3, #1
 8015bae:	f000 fbf2 	bl	8016396 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015bb6:	4bb5      	ldr	r3, [pc, #724]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	2108      	movs	r1, #8
 8015bbc:	400b      	ands	r3, r1
 8015bbe:	d004      	beq.n	8015bca <HAL_RCC_OscConfig+0x6e>
 8015bc0:	4bb2      	ldr	r3, [pc, #712]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	21f0      	movs	r1, #240	@ 0xf0
 8015bc6:	400b      	ands	r3, r1
 8015bc8:	e005      	b.n	8015bd6 <HAL_RCC_OscConfig+0x7a>
 8015bca:	49b0      	ldr	r1, [pc, #704]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015bcc:	2394      	movs	r3, #148	@ 0x94
 8015bce:	58cb      	ldr	r3, [r1, r3]
 8015bd0:	091b      	lsrs	r3, r3, #4
 8015bd2:	21f0      	movs	r1, #240	@ 0xf0
 8015bd4:	400b      	ands	r3, r1
 8015bd6:	4293      	cmp	r3, r2
 8015bd8:	d225      	bcs.n	8015c26 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bde:	0018      	movs	r0, r3
 8015be0:	f000 fd90 	bl	8016704 <RCC_SetFlashLatencyFromMSIRange>
 8015be4:	1e03      	subs	r3, r0, #0
 8015be6:	d002      	beq.n	8015bee <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8015be8:	2301      	movs	r3, #1
 8015bea:	f000 fbd4 	bl	8016396 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015bee:	4ba7      	ldr	r3, [pc, #668]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	4ba6      	ldr	r3, [pc, #664]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015bf4:	2108      	movs	r1, #8
 8015bf6:	430a      	orrs	r2, r1
 8015bf8:	601a      	str	r2, [r3, #0]
 8015bfa:	4ba4      	ldr	r3, [pc, #656]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	22f0      	movs	r2, #240	@ 0xf0
 8015c00:	4393      	bics	r3, r2
 8015c02:	0019      	movs	r1, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c08:	4ba0      	ldr	r3, [pc, #640]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c0a:	430a      	orrs	r2, r1
 8015c0c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015c0e:	4b9f      	ldr	r3, [pc, #636]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	4a9f      	ldr	r2, [pc, #636]	@ (8015e90 <HAL_RCC_OscConfig+0x334>)
 8015c14:	4013      	ands	r3, r2
 8015c16:	0019      	movs	r1, r3
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6a1b      	ldr	r3, [r3, #32]
 8015c1c:	021a      	lsls	r2, r3, #8
 8015c1e:	4b9b      	ldr	r3, [pc, #620]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c20:	430a      	orrs	r2, r1
 8015c22:	605a      	str	r2, [r3, #4]
 8015c24:	e027      	b.n	8015c76 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015c26:	4b99      	ldr	r3, [pc, #612]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	4b98      	ldr	r3, [pc, #608]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c2c:	2108      	movs	r1, #8
 8015c2e:	430a      	orrs	r2, r1
 8015c30:	601a      	str	r2, [r3, #0]
 8015c32:	4b96      	ldr	r3, [pc, #600]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	22f0      	movs	r2, #240	@ 0xf0
 8015c38:	4393      	bics	r3, r2
 8015c3a:	0019      	movs	r1, r3
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c40:	4b92      	ldr	r3, [pc, #584]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c42:	430a      	orrs	r2, r1
 8015c44:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015c46:	4b91      	ldr	r3, [pc, #580]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	4a91      	ldr	r2, [pc, #580]	@ (8015e90 <HAL_RCC_OscConfig+0x334>)
 8015c4c:	4013      	ands	r3, r2
 8015c4e:	0019      	movs	r1, r3
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6a1b      	ldr	r3, [r3, #32]
 8015c54:	021a      	lsls	r2, r3, #8
 8015c56:	4b8d      	ldr	r3, [pc, #564]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c58:	430a      	orrs	r2, r1
 8015c5a:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8015c5c:	69bb      	ldr	r3, [r7, #24]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d109      	bne.n	8015c76 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c66:	0018      	movs	r0, r3
 8015c68:	f000 fd4c 	bl	8016704 <RCC_SetFlashLatencyFromMSIRange>
 8015c6c:	1e03      	subs	r3, r0, #0
 8015c6e:	d002      	beq.n	8015c76 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8015c70:	2301      	movs	r3, #1
 8015c72:	f000 fb90 	bl	8016396 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015c76:	f000 fc87 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 8015c7a:	0001      	movs	r1, r0
 8015c7c:	4b83      	ldr	r3, [pc, #524]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015c7e:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8015c80:	0a1b      	lsrs	r3, r3, #8
 8015c82:	220f      	movs	r2, #15
 8015c84:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015c86:	4a83      	ldr	r2, [pc, #524]	@ (8015e94 <HAL_RCC_OscConfig+0x338>)
 8015c88:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8015c8a:	001a      	movs	r2, r3
 8015c8c:	231f      	movs	r3, #31
 8015c8e:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8015c90:	000a      	movs	r2, r1
 8015c92:	40da      	lsrs	r2, r3
 8015c94:	4b80      	ldr	r3, [pc, #512]	@ (8015e98 <HAL_RCC_OscConfig+0x33c>)
 8015c96:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8015c98:	4b80      	ldr	r3, [pc, #512]	@ (8015e9c <HAL_RCC_OscConfig+0x340>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	250f      	movs	r5, #15
 8015c9e:	197c      	adds	r4, r7, r5
 8015ca0:	0018      	movs	r0, r3
 8015ca2:	f7fb fa0d 	bl	80110c0 <HAL_InitTick>
 8015ca6:	0003      	movs	r3, r0
 8015ca8:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8015caa:	197b      	adds	r3, r7, r5
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d057      	beq.n	8015d62 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8015cb2:	197b      	adds	r3, r7, r5
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	f000 fb6e 	bl	8016396 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	69db      	ldr	r3, [r3, #28]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d035      	beq.n	8015d2e <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015cc2:	4b72      	ldr	r3, [pc, #456]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015cc4:	681a      	ldr	r2, [r3, #0]
 8015cc6:	4b71      	ldr	r3, [pc, #452]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015cc8:	2101      	movs	r1, #1
 8015cca:	430a      	orrs	r2, r1
 8015ccc:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015cce:	f7fb fa51 	bl	8011174 <HAL_GetTick>
 8015cd2:	0003      	movs	r3, r0
 8015cd4:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015cd6:	e009      	b.n	8015cec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8015cd8:	f7fb fa4c 	bl	8011174 <HAL_GetTick>
 8015cdc:	0002      	movs	r2, r0
 8015cde:	693b      	ldr	r3, [r7, #16]
 8015ce0:	1ad3      	subs	r3, r2, r3
 8015ce2:	2b02      	cmp	r3, #2
 8015ce4:	d902      	bls.n	8015cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015ce6:	2303      	movs	r3, #3
 8015ce8:	f000 fb55 	bl	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015cec:	4b67      	ldr	r3, [pc, #412]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	2202      	movs	r2, #2
 8015cf2:	4013      	ands	r3, r2
 8015cf4:	d0f0      	beq.n	8015cd8 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015cf6:	4b65      	ldr	r3, [pc, #404]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	4b64      	ldr	r3, [pc, #400]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015cfc:	2108      	movs	r1, #8
 8015cfe:	430a      	orrs	r2, r1
 8015d00:	601a      	str	r2, [r3, #0]
 8015d02:	4b62      	ldr	r3, [pc, #392]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	22f0      	movs	r2, #240	@ 0xf0
 8015d08:	4393      	bics	r3, r2
 8015d0a:	0019      	movs	r1, r3
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d10:	4b5e      	ldr	r3, [pc, #376]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d12:	430a      	orrs	r2, r1
 8015d14:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015d16:	4b5d      	ldr	r3, [pc, #372]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d18:	685b      	ldr	r3, [r3, #4]
 8015d1a:	4a5d      	ldr	r2, [pc, #372]	@ (8015e90 <HAL_RCC_OscConfig+0x334>)
 8015d1c:	4013      	ands	r3, r2
 8015d1e:	0019      	movs	r1, r3
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	6a1b      	ldr	r3, [r3, #32]
 8015d24:	021a      	lsls	r2, r3, #8
 8015d26:	4b59      	ldr	r3, [pc, #356]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d28:	430a      	orrs	r2, r1
 8015d2a:	605a      	str	r2, [r3, #4]
 8015d2c:	e01a      	b.n	8015d64 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015d2e:	4b57      	ldr	r3, [pc, #348]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d30:	681a      	ldr	r2, [r3, #0]
 8015d32:	4b56      	ldr	r3, [pc, #344]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d34:	2101      	movs	r1, #1
 8015d36:	438a      	bics	r2, r1
 8015d38:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015d3a:	f7fb fa1b 	bl	8011174 <HAL_GetTick>
 8015d3e:	0003      	movs	r3, r0
 8015d40:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015d42:	e008      	b.n	8015d56 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8015d44:	f7fb fa16 	bl	8011174 <HAL_GetTick>
 8015d48:	0002      	movs	r2, r0
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	1ad3      	subs	r3, r2, r3
 8015d4e:	2b02      	cmp	r3, #2
 8015d50:	d901      	bls.n	8015d56 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8015d52:	2303      	movs	r3, #3
 8015d54:	e31f      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015d56:	4b4d      	ldr	r3, [pc, #308]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2202      	movs	r2, #2
 8015d5c:	4013      	ands	r3, r2
 8015d5e:	d1f1      	bne.n	8015d44 <HAL_RCC_OscConfig+0x1e8>
 8015d60:	e000      	b.n	8015d64 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015d62:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	4013      	ands	r3, r2
 8015d6c:	d100      	bne.n	8015d70 <HAL_RCC_OscConfig+0x214>
 8015d6e:	e065      	b.n	8015e3c <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8015d70:	69bb      	ldr	r3, [r7, #24]
 8015d72:	2b10      	cmp	r3, #16
 8015d74:	d005      	beq.n	8015d82 <HAL_RCC_OscConfig+0x226>
 8015d76:	69bb      	ldr	r3, [r7, #24]
 8015d78:	2b18      	cmp	r3, #24
 8015d7a:	d10e      	bne.n	8015d9a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015d7c:	697b      	ldr	r3, [r7, #20]
 8015d7e:	2b03      	cmp	r3, #3
 8015d80:	d10b      	bne.n	8015d9a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015d82:	4b42      	ldr	r3, [pc, #264]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015d84:	681a      	ldr	r2, [r3, #0]
 8015d86:	2380      	movs	r3, #128	@ 0x80
 8015d88:	029b      	lsls	r3, r3, #10
 8015d8a:	4013      	ands	r3, r2
 8015d8c:	d055      	beq.n	8015e3a <HAL_RCC_OscConfig+0x2de>
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d151      	bne.n	8015e3a <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8015d96:	2301      	movs	r3, #1
 8015d98:	e2fd      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	685a      	ldr	r2, [r3, #4]
 8015d9e:	2380      	movs	r3, #128	@ 0x80
 8015da0:	025b      	lsls	r3, r3, #9
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d107      	bne.n	8015db6 <HAL_RCC_OscConfig+0x25a>
 8015da6:	4b39      	ldr	r3, [pc, #228]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	4b38      	ldr	r3, [pc, #224]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015dac:	2180      	movs	r1, #128	@ 0x80
 8015dae:	0249      	lsls	r1, r1, #9
 8015db0:	430a      	orrs	r2, r1
 8015db2:	601a      	str	r2, [r3, #0]
 8015db4:	e013      	b.n	8015dde <HAL_RCC_OscConfig+0x282>
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	685a      	ldr	r2, [r3, #4]
 8015dba:	23a0      	movs	r3, #160	@ 0xa0
 8015dbc:	02db      	lsls	r3, r3, #11
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d107      	bne.n	8015dd2 <HAL_RCC_OscConfig+0x276>
 8015dc2:	4b32      	ldr	r3, [pc, #200]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	4b31      	ldr	r3, [pc, #196]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015dc8:	21a0      	movs	r1, #160	@ 0xa0
 8015dca:	02c9      	lsls	r1, r1, #11
 8015dcc:	430a      	orrs	r2, r1
 8015dce:	601a      	str	r2, [r3, #0]
 8015dd0:	e005      	b.n	8015dde <HAL_RCC_OscConfig+0x282>
 8015dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015dd8:	4931      	ldr	r1, [pc, #196]	@ (8015ea0 <HAL_RCC_OscConfig+0x344>)
 8015dda:	400a      	ands	r2, r1
 8015ddc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d014      	beq.n	8015e10 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015de6:	f7fb f9c5 	bl	8011174 <HAL_GetTick>
 8015dea:	0003      	movs	r3, r0
 8015dec:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015dee:	e008      	b.n	8015e02 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8015df0:	f7fb f9c0 	bl	8011174 <HAL_GetTick>
 8015df4:	0002      	movs	r2, r0
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	1ad3      	subs	r3, r2, r3
 8015dfa:	2b64      	cmp	r3, #100	@ 0x64
 8015dfc:	d901      	bls.n	8015e02 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8015dfe:	2303      	movs	r3, #3
 8015e00:	e2c9      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015e02:	4b22      	ldr	r3, [pc, #136]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015e04:	681a      	ldr	r2, [r3, #0]
 8015e06:	2380      	movs	r3, #128	@ 0x80
 8015e08:	029b      	lsls	r3, r3, #10
 8015e0a:	4013      	ands	r3, r2
 8015e0c:	d0f0      	beq.n	8015df0 <HAL_RCC_OscConfig+0x294>
 8015e0e:	e015      	b.n	8015e3c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015e10:	f7fb f9b0 	bl	8011174 <HAL_GetTick>
 8015e14:	0003      	movs	r3, r0
 8015e16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015e18:	e008      	b.n	8015e2c <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8015e1a:	f7fb f9ab 	bl	8011174 <HAL_GetTick>
 8015e1e:	0002      	movs	r2, r0
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	1ad3      	subs	r3, r2, r3
 8015e24:	2b64      	cmp	r3, #100	@ 0x64
 8015e26:	d901      	bls.n	8015e2c <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	e2b4      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015e2c:	4b17      	ldr	r3, [pc, #92]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015e2e:	681a      	ldr	r2, [r3, #0]
 8015e30:	2380      	movs	r3, #128	@ 0x80
 8015e32:	029b      	lsls	r3, r3, #10
 8015e34:	4013      	ands	r3, r2
 8015e36:	d1f0      	bne.n	8015e1a <HAL_RCC_OscConfig+0x2be>
 8015e38:	e000      	b.n	8015e3c <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015e3a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2202      	movs	r2, #2
 8015e42:	4013      	ands	r3, r2
 8015e44:	d100      	bne.n	8015e48 <HAL_RCC_OscConfig+0x2ec>
 8015e46:	e074      	b.n	8015f32 <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8015e48:	69bb      	ldr	r3, [r7, #24]
 8015e4a:	2b08      	cmp	r3, #8
 8015e4c:	d005      	beq.n	8015e5a <HAL_RCC_OscConfig+0x2fe>
 8015e4e:	69bb      	ldr	r3, [r7, #24]
 8015e50:	2b18      	cmp	r3, #24
 8015e52:	d129      	bne.n	8015ea8 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	2b02      	cmp	r3, #2
 8015e58:	d126      	bne.n	8015ea8 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015e5c:	681a      	ldr	r2, [r3, #0]
 8015e5e:	2380      	movs	r3, #128	@ 0x80
 8015e60:	00db      	lsls	r3, r3, #3
 8015e62:	4013      	ands	r3, r2
 8015e64:	d005      	beq.n	8015e72 <HAL_RCC_OscConfig+0x316>
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	68db      	ldr	r3, [r3, #12]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d101      	bne.n	8015e72 <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 8015e6e:	2301      	movs	r3, #1
 8015e70:	e291      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015e72:	4b06      	ldr	r3, [pc, #24]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	4a0b      	ldr	r2, [pc, #44]	@ (8015ea4 <HAL_RCC_OscConfig+0x348>)
 8015e78:	4013      	ands	r3, r2
 8015e7a:	0019      	movs	r1, r3
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	691b      	ldr	r3, [r3, #16]
 8015e80:	061a      	lsls	r2, r3, #24
 8015e82:	4b02      	ldr	r3, [pc, #8]	@ (8015e8c <HAL_RCC_OscConfig+0x330>)
 8015e84:	430a      	orrs	r2, r1
 8015e86:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015e88:	e053      	b.n	8015f32 <HAL_RCC_OscConfig+0x3d6>
 8015e8a:	46c0      	nop			@ (mov r8, r8)
 8015e8c:	40021000 	.word	0x40021000
 8015e90:	ffff00ff 	.word	0xffff00ff
 8015e94:	0801b2cc 	.word	0x0801b2cc
 8015e98:	20000250 	.word	0x20000250
 8015e9c:	20000254 	.word	0x20000254
 8015ea0:	fffaffff 	.word	0xfffaffff
 8015ea4:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d026      	beq.n	8015efe <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015eb0:	4bc7      	ldr	r3, [pc, #796]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015eb2:	681a      	ldr	r2, [r3, #0]
 8015eb4:	4bc6      	ldr	r3, [pc, #792]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015eb6:	2180      	movs	r1, #128	@ 0x80
 8015eb8:	0049      	lsls	r1, r1, #1
 8015eba:	430a      	orrs	r2, r1
 8015ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015ebe:	f7fb f959 	bl	8011174 <HAL_GetTick>
 8015ec2:	0003      	movs	r3, r0
 8015ec4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015ec6:	e008      	b.n	8015eda <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8015ec8:	f7fb f954 	bl	8011174 <HAL_GetTick>
 8015ecc:	0002      	movs	r2, r0
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	1ad3      	subs	r3, r2, r3
 8015ed2:	2b02      	cmp	r3, #2
 8015ed4:	d901      	bls.n	8015eda <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8015ed6:	2303      	movs	r3, #3
 8015ed8:	e25d      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015eda:	4bbd      	ldr	r3, [pc, #756]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015edc:	681a      	ldr	r2, [r3, #0]
 8015ede:	2380      	movs	r3, #128	@ 0x80
 8015ee0:	00db      	lsls	r3, r3, #3
 8015ee2:	4013      	ands	r3, r2
 8015ee4:	d0f0      	beq.n	8015ec8 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015ee6:	4bba      	ldr	r3, [pc, #744]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	4aba      	ldr	r2, [pc, #744]	@ (80161d4 <HAL_RCC_OscConfig+0x678>)
 8015eec:	4013      	ands	r3, r2
 8015eee:	0019      	movs	r1, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	691b      	ldr	r3, [r3, #16]
 8015ef4:	061a      	lsls	r2, r3, #24
 8015ef6:	4bb6      	ldr	r3, [pc, #728]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015ef8:	430a      	orrs	r2, r1
 8015efa:	605a      	str	r2, [r3, #4]
 8015efc:	e019      	b.n	8015f32 <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015efe:	4bb4      	ldr	r3, [pc, #720]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f00:	681a      	ldr	r2, [r3, #0]
 8015f02:	4bb3      	ldr	r3, [pc, #716]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f04:	49b4      	ldr	r1, [pc, #720]	@ (80161d8 <HAL_RCC_OscConfig+0x67c>)
 8015f06:	400a      	ands	r2, r1
 8015f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015f0a:	f7fb f933 	bl	8011174 <HAL_GetTick>
 8015f0e:	0003      	movs	r3, r0
 8015f10:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015f12:	e008      	b.n	8015f26 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8015f14:	f7fb f92e 	bl	8011174 <HAL_GetTick>
 8015f18:	0002      	movs	r2, r0
 8015f1a:	693b      	ldr	r3, [r7, #16]
 8015f1c:	1ad3      	subs	r3, r2, r3
 8015f1e:	2b02      	cmp	r3, #2
 8015f20:	d901      	bls.n	8015f26 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8015f22:	2303      	movs	r3, #3
 8015f24:	e237      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015f26:	4baa      	ldr	r3, [pc, #680]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	2380      	movs	r3, #128	@ 0x80
 8015f2c:	00db      	lsls	r3, r3, #3
 8015f2e:	4013      	ands	r3, r2
 8015f30:	d1f0      	bne.n	8015f14 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	2208      	movs	r2, #8
 8015f38:	4013      	ands	r3, r2
 8015f3a:	d051      	beq.n	8015fe0 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	695b      	ldr	r3, [r3, #20]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d031      	beq.n	8015fa8 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	699b      	ldr	r3, [r3, #24]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d108      	bne.n	8015f5e <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8015f4c:	4aa0      	ldr	r2, [pc, #640]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f4e:	2394      	movs	r3, #148	@ 0x94
 8015f50:	58d3      	ldr	r3, [r2, r3]
 8015f52:	499f      	ldr	r1, [pc, #636]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f54:	2204      	movs	r2, #4
 8015f56:	4393      	bics	r3, r2
 8015f58:	2294      	movs	r2, #148	@ 0x94
 8015f5a:	508b      	str	r3, [r1, r2]
 8015f5c:	e007      	b.n	8015f6e <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8015f5e:	4a9c      	ldr	r2, [pc, #624]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f60:	2394      	movs	r3, #148	@ 0x94
 8015f62:	58d3      	ldr	r3, [r2, r3]
 8015f64:	499a      	ldr	r1, [pc, #616]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f66:	2204      	movs	r2, #4
 8015f68:	4313      	orrs	r3, r2
 8015f6a:	2294      	movs	r2, #148	@ 0x94
 8015f6c:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015f6e:	4a98      	ldr	r2, [pc, #608]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f70:	2394      	movs	r3, #148	@ 0x94
 8015f72:	58d3      	ldr	r3, [r2, r3]
 8015f74:	4996      	ldr	r1, [pc, #600]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f76:	2201      	movs	r2, #1
 8015f78:	4313      	orrs	r3, r2
 8015f7a:	2294      	movs	r2, #148	@ 0x94
 8015f7c:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015f7e:	f7fb f8f9 	bl	8011174 <HAL_GetTick>
 8015f82:	0003      	movs	r3, r0
 8015f84:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015f86:	e008      	b.n	8015f9a <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015f88:	f7fb f8f4 	bl	8011174 <HAL_GetTick>
 8015f8c:	0002      	movs	r2, r0
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	1ad3      	subs	r3, r2, r3
 8015f92:	2b11      	cmp	r3, #17
 8015f94:	d901      	bls.n	8015f9a <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8015f96:	2303      	movs	r3, #3
 8015f98:	e1fd      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015f9a:	4a8d      	ldr	r2, [pc, #564]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015f9c:	2394      	movs	r3, #148	@ 0x94
 8015f9e:	58d3      	ldr	r3, [r2, r3]
 8015fa0:	2202      	movs	r2, #2
 8015fa2:	4013      	ands	r3, r2
 8015fa4:	d0f0      	beq.n	8015f88 <HAL_RCC_OscConfig+0x42c>
 8015fa6:	e01b      	b.n	8015fe0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015fa8:	4a89      	ldr	r2, [pc, #548]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015faa:	2394      	movs	r3, #148	@ 0x94
 8015fac:	58d3      	ldr	r3, [r2, r3]
 8015fae:	4988      	ldr	r1, [pc, #544]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	4393      	bics	r3, r2
 8015fb4:	2294      	movs	r2, #148	@ 0x94
 8015fb6:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015fb8:	f7fb f8dc 	bl	8011174 <HAL_GetTick>
 8015fbc:	0003      	movs	r3, r0
 8015fbe:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015fc0:	e008      	b.n	8015fd4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015fc2:	f7fb f8d7 	bl	8011174 <HAL_GetTick>
 8015fc6:	0002      	movs	r2, r0
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	1ad3      	subs	r3, r2, r3
 8015fcc:	2b11      	cmp	r3, #17
 8015fce:	d901      	bls.n	8015fd4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8015fd0:	2303      	movs	r3, #3
 8015fd2:	e1e0      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015fd4:	4a7e      	ldr	r2, [pc, #504]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015fd6:	2394      	movs	r3, #148	@ 0x94
 8015fd8:	58d3      	ldr	r3, [r2, r3]
 8015fda:	2202      	movs	r2, #2
 8015fdc:	4013      	ands	r3, r2
 8015fde:	d1f0      	bne.n	8015fc2 <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	2204      	movs	r2, #4
 8015fe6:	4013      	ands	r3, r2
 8015fe8:	d100      	bne.n	8015fec <HAL_RCC_OscConfig+0x490>
 8015fea:	e10d      	b.n	8016208 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015fec:	201f      	movs	r0, #31
 8015fee:	183b      	adds	r3, r7, r0
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8015ff4:	4b76      	ldr	r3, [pc, #472]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8015ff6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015ff8:	2380      	movs	r3, #128	@ 0x80
 8015ffa:	055b      	lsls	r3, r3, #21
 8015ffc:	4013      	ands	r3, r2
 8015ffe:	d110      	bne.n	8016022 <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016000:	4b73      	ldr	r3, [pc, #460]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016002:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016004:	4b72      	ldr	r3, [pc, #456]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016006:	2180      	movs	r1, #128	@ 0x80
 8016008:	0549      	lsls	r1, r1, #21
 801600a:	430a      	orrs	r2, r1
 801600c:	659a      	str	r2, [r3, #88]	@ 0x58
 801600e:	4b70      	ldr	r3, [pc, #448]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016010:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016012:	2380      	movs	r3, #128	@ 0x80
 8016014:	055b      	lsls	r3, r3, #21
 8016016:	4013      	ands	r3, r2
 8016018:	60bb      	str	r3, [r7, #8]
 801601a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801601c:	183b      	adds	r3, r7, r0
 801601e:	2201      	movs	r2, #1
 8016020:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016022:	4b6e      	ldr	r3, [pc, #440]	@ (80161dc <HAL_RCC_OscConfig+0x680>)
 8016024:	681a      	ldr	r2, [r3, #0]
 8016026:	2380      	movs	r3, #128	@ 0x80
 8016028:	005b      	lsls	r3, r3, #1
 801602a:	4013      	ands	r3, r2
 801602c:	d11a      	bne.n	8016064 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801602e:	4b6b      	ldr	r3, [pc, #428]	@ (80161dc <HAL_RCC_OscConfig+0x680>)
 8016030:	681a      	ldr	r2, [r3, #0]
 8016032:	4b6a      	ldr	r3, [pc, #424]	@ (80161dc <HAL_RCC_OscConfig+0x680>)
 8016034:	2180      	movs	r1, #128	@ 0x80
 8016036:	0049      	lsls	r1, r1, #1
 8016038:	430a      	orrs	r2, r1
 801603a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801603c:	f7fb f89a 	bl	8011174 <HAL_GetTick>
 8016040:	0003      	movs	r3, r0
 8016042:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016044:	e008      	b.n	8016058 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016046:	f7fb f895 	bl	8011174 <HAL_GetTick>
 801604a:	0002      	movs	r2, r0
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	1ad3      	subs	r3, r2, r3
 8016050:	2b02      	cmp	r3, #2
 8016052:	d901      	bls.n	8016058 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8016054:	2303      	movs	r3, #3
 8016056:	e19e      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016058:	4b60      	ldr	r3, [pc, #384]	@ (80161dc <HAL_RCC_OscConfig+0x680>)
 801605a:	681a      	ldr	r2, [r3, #0]
 801605c:	2380      	movs	r3, #128	@ 0x80
 801605e:	005b      	lsls	r3, r3, #1
 8016060:	4013      	ands	r3, r2
 8016062:	d0f0      	beq.n	8016046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	689b      	ldr	r3, [r3, #8]
 8016068:	2201      	movs	r2, #1
 801606a:	4013      	ands	r3, r2
 801606c:	d01e      	beq.n	80160ac <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	689b      	ldr	r3, [r3, #8]
 8016072:	2204      	movs	r2, #4
 8016074:	4013      	ands	r3, r2
 8016076:	d010      	beq.n	801609a <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016078:	4a55      	ldr	r2, [pc, #340]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 801607a:	2390      	movs	r3, #144	@ 0x90
 801607c:	58d3      	ldr	r3, [r2, r3]
 801607e:	4954      	ldr	r1, [pc, #336]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016080:	2204      	movs	r2, #4
 8016082:	4313      	orrs	r3, r2
 8016084:	2290      	movs	r2, #144	@ 0x90
 8016086:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016088:	4a51      	ldr	r2, [pc, #324]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 801608a:	2390      	movs	r3, #144	@ 0x90
 801608c:	58d3      	ldr	r3, [r2, r3]
 801608e:	4950      	ldr	r1, [pc, #320]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016090:	2201      	movs	r2, #1
 8016092:	4313      	orrs	r3, r2
 8016094:	2290      	movs	r2, #144	@ 0x90
 8016096:	508b      	str	r3, [r1, r2]
 8016098:	e018      	b.n	80160cc <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801609a:	4a4d      	ldr	r2, [pc, #308]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 801609c:	2390      	movs	r3, #144	@ 0x90
 801609e:	58d3      	ldr	r3, [r2, r3]
 80160a0:	494b      	ldr	r1, [pc, #300]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80160a2:	2201      	movs	r2, #1
 80160a4:	4313      	orrs	r3, r2
 80160a6:	2290      	movs	r2, #144	@ 0x90
 80160a8:	508b      	str	r3, [r1, r2]
 80160aa:	e00f      	b.n	80160cc <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80160ac:	4a48      	ldr	r2, [pc, #288]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80160ae:	2390      	movs	r3, #144	@ 0x90
 80160b0:	58d3      	ldr	r3, [r2, r3]
 80160b2:	4947      	ldr	r1, [pc, #284]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80160b4:	2201      	movs	r2, #1
 80160b6:	4393      	bics	r3, r2
 80160b8:	2290      	movs	r2, #144	@ 0x90
 80160ba:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80160bc:	4a44      	ldr	r2, [pc, #272]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80160be:	2390      	movs	r3, #144	@ 0x90
 80160c0:	58d3      	ldr	r3, [r2, r3]
 80160c2:	4943      	ldr	r1, [pc, #268]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80160c4:	2204      	movs	r2, #4
 80160c6:	4393      	bics	r3, r2
 80160c8:	2290      	movs	r2, #144	@ 0x90
 80160ca:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	689b      	ldr	r3, [r3, #8]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d04f      	beq.n	8016174 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80160d4:	f7fb f84e 	bl	8011174 <HAL_GetTick>
 80160d8:	0003      	movs	r3, r0
 80160da:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80160dc:	e009      	b.n	80160f2 <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80160de:	f7fb f849 	bl	8011174 <HAL_GetTick>
 80160e2:	0002      	movs	r2, r0
 80160e4:	693b      	ldr	r3, [r7, #16]
 80160e6:	1ad3      	subs	r3, r2, r3
 80160e8:	4a3d      	ldr	r2, [pc, #244]	@ (80161e0 <HAL_RCC_OscConfig+0x684>)
 80160ea:	4293      	cmp	r3, r2
 80160ec:	d901      	bls.n	80160f2 <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 80160ee:	2303      	movs	r3, #3
 80160f0:	e151      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80160f2:	4a37      	ldr	r2, [pc, #220]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80160f4:	2390      	movs	r3, #144	@ 0x90
 80160f6:	58d3      	ldr	r3, [r2, r3]
 80160f8:	2202      	movs	r2, #2
 80160fa:	4013      	ands	r3, r2
 80160fc:	d0ef      	beq.n	80160de <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	689b      	ldr	r3, [r3, #8]
 8016102:	2280      	movs	r2, #128	@ 0x80
 8016104:	4013      	ands	r3, r2
 8016106:	d01a      	beq.n	801613e <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8016108:	4a31      	ldr	r2, [pc, #196]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 801610a:	2390      	movs	r3, #144	@ 0x90
 801610c:	58d3      	ldr	r3, [r2, r3]
 801610e:	4930      	ldr	r1, [pc, #192]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016110:	2280      	movs	r2, #128	@ 0x80
 8016112:	4313      	orrs	r3, r2
 8016114:	2290      	movs	r2, #144	@ 0x90
 8016116:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8016118:	e009      	b.n	801612e <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801611a:	f7fb f82b 	bl	8011174 <HAL_GetTick>
 801611e:	0002      	movs	r2, r0
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	1ad3      	subs	r3, r2, r3
 8016124:	4a2e      	ldr	r2, [pc, #184]	@ (80161e0 <HAL_RCC_OscConfig+0x684>)
 8016126:	4293      	cmp	r3, r2
 8016128:	d901      	bls.n	801612e <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 801612a:	2303      	movs	r3, #3
 801612c:	e133      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801612e:	4a28      	ldr	r2, [pc, #160]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016130:	2390      	movs	r3, #144	@ 0x90
 8016132:	58d2      	ldr	r2, [r2, r3]
 8016134:	2380      	movs	r3, #128	@ 0x80
 8016136:	011b      	lsls	r3, r3, #4
 8016138:	4013      	ands	r3, r2
 801613a:	d0ee      	beq.n	801611a <HAL_RCC_OscConfig+0x5be>
 801613c:	e059      	b.n	80161f2 <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801613e:	4a24      	ldr	r2, [pc, #144]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016140:	2390      	movs	r3, #144	@ 0x90
 8016142:	58d3      	ldr	r3, [r2, r3]
 8016144:	4922      	ldr	r1, [pc, #136]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016146:	2280      	movs	r2, #128	@ 0x80
 8016148:	4393      	bics	r3, r2
 801614a:	2290      	movs	r2, #144	@ 0x90
 801614c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801614e:	e009      	b.n	8016164 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016150:	f7fb f810 	bl	8011174 <HAL_GetTick>
 8016154:	0002      	movs	r2, r0
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	1ad3      	subs	r3, r2, r3
 801615a:	4a21      	ldr	r2, [pc, #132]	@ (80161e0 <HAL_RCC_OscConfig+0x684>)
 801615c:	4293      	cmp	r3, r2
 801615e:	d901      	bls.n	8016164 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8016160:	2303      	movs	r3, #3
 8016162:	e118      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8016164:	4a1a      	ldr	r2, [pc, #104]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016166:	2390      	movs	r3, #144	@ 0x90
 8016168:	58d2      	ldr	r2, [r2, r3]
 801616a:	2380      	movs	r3, #128	@ 0x80
 801616c:	011b      	lsls	r3, r3, #4
 801616e:	4013      	ands	r3, r2
 8016170:	d1ee      	bne.n	8016150 <HAL_RCC_OscConfig+0x5f4>
 8016172:	e03e      	b.n	80161f2 <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016174:	f7fa fffe 	bl	8011174 <HAL_GetTick>
 8016178:	0003      	movs	r3, r0
 801617a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801617c:	e009      	b.n	8016192 <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801617e:	f7fa fff9 	bl	8011174 <HAL_GetTick>
 8016182:	0002      	movs	r2, r0
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	1ad3      	subs	r3, r2, r3
 8016188:	4a15      	ldr	r2, [pc, #84]	@ (80161e0 <HAL_RCC_OscConfig+0x684>)
 801618a:	4293      	cmp	r3, r2
 801618c:	d901      	bls.n	8016192 <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 801618e:	2303      	movs	r3, #3
 8016190:	e101      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8016192:	4a0f      	ldr	r2, [pc, #60]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 8016194:	2390      	movs	r3, #144	@ 0x90
 8016196:	58d3      	ldr	r3, [r2, r3]
 8016198:	2202      	movs	r2, #2
 801619a:	4013      	ands	r3, r2
 801619c:	d1ef      	bne.n	801617e <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801619e:	4a0c      	ldr	r2, [pc, #48]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80161a0:	2390      	movs	r3, #144	@ 0x90
 80161a2:	58d3      	ldr	r3, [r2, r3]
 80161a4:	2280      	movs	r2, #128	@ 0x80
 80161a6:	4013      	ands	r3, r2
 80161a8:	d023      	beq.n	80161f2 <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80161aa:	4a09      	ldr	r2, [pc, #36]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80161ac:	2390      	movs	r3, #144	@ 0x90
 80161ae:	58d3      	ldr	r3, [r2, r3]
 80161b0:	4907      	ldr	r1, [pc, #28]	@ (80161d0 <HAL_RCC_OscConfig+0x674>)
 80161b2:	2280      	movs	r2, #128	@ 0x80
 80161b4:	4393      	bics	r3, r2
 80161b6:	2290      	movs	r2, #144	@ 0x90
 80161b8:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80161ba:	e013      	b.n	80161e4 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80161bc:	f7fa ffda 	bl	8011174 <HAL_GetTick>
 80161c0:	0002      	movs	r2, r0
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	4a06      	ldr	r2, [pc, #24]	@ (80161e0 <HAL_RCC_OscConfig+0x684>)
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d90b      	bls.n	80161e4 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80161cc:	2303      	movs	r3, #3
 80161ce:	e0e2      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
 80161d0:	40021000 	.word	0x40021000
 80161d4:	80ffffff 	.word	0x80ffffff
 80161d8:	fffffeff 	.word	0xfffffeff
 80161dc:	40007000 	.word	0x40007000
 80161e0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80161e4:	4a6e      	ldr	r2, [pc, #440]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 80161e6:	2390      	movs	r3, #144	@ 0x90
 80161e8:	58d2      	ldr	r2, [r2, r3]
 80161ea:	2380      	movs	r3, #128	@ 0x80
 80161ec:	011b      	lsls	r3, r3, #4
 80161ee:	4013      	ands	r3, r2
 80161f0:	d1e4      	bne.n	80161bc <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80161f2:	231f      	movs	r3, #31
 80161f4:	18fb      	adds	r3, r7, r3
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d105      	bne.n	8016208 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80161fc:	4b68      	ldr	r3, [pc, #416]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 80161fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016200:	4b67      	ldr	r3, [pc, #412]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016202:	4968      	ldr	r1, [pc, #416]	@ (80163a4 <HAL_RCC_OscConfig+0x848>)
 8016204:	400a      	ands	r2, r1
 8016206:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2220      	movs	r2, #32
 801620e:	4013      	ands	r3, r2
 8016210:	d03c      	beq.n	801628c <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016216:	2b00      	cmp	r3, #0
 8016218:	d01c      	beq.n	8016254 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801621a:	4a61      	ldr	r2, [pc, #388]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 801621c:	2398      	movs	r3, #152	@ 0x98
 801621e:	58d3      	ldr	r3, [r2, r3]
 8016220:	495f      	ldr	r1, [pc, #380]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016222:	2201      	movs	r2, #1
 8016224:	4313      	orrs	r3, r2
 8016226:	2298      	movs	r2, #152	@ 0x98
 8016228:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801622a:	f7fa ffa3 	bl	8011174 <HAL_GetTick>
 801622e:	0003      	movs	r3, r0
 8016230:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8016232:	e008      	b.n	8016246 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8016234:	f7fa ff9e 	bl	8011174 <HAL_GetTick>
 8016238:	0002      	movs	r2, r0
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	1ad3      	subs	r3, r2, r3
 801623e:	2b02      	cmp	r3, #2
 8016240:	d901      	bls.n	8016246 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8016242:	2303      	movs	r3, #3
 8016244:	e0a7      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8016246:	4a56      	ldr	r2, [pc, #344]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016248:	2398      	movs	r3, #152	@ 0x98
 801624a:	58d3      	ldr	r3, [r2, r3]
 801624c:	2202      	movs	r2, #2
 801624e:	4013      	ands	r3, r2
 8016250:	d0f0      	beq.n	8016234 <HAL_RCC_OscConfig+0x6d8>
 8016252:	e01b      	b.n	801628c <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8016254:	4a52      	ldr	r2, [pc, #328]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016256:	2398      	movs	r3, #152	@ 0x98
 8016258:	58d3      	ldr	r3, [r2, r3]
 801625a:	4951      	ldr	r1, [pc, #324]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 801625c:	2201      	movs	r2, #1
 801625e:	4393      	bics	r3, r2
 8016260:	2298      	movs	r2, #152	@ 0x98
 8016262:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016264:	f7fa ff86 	bl	8011174 <HAL_GetTick>
 8016268:	0003      	movs	r3, r0
 801626a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 801626c:	e008      	b.n	8016280 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801626e:	f7fa ff81 	bl	8011174 <HAL_GetTick>
 8016272:	0002      	movs	r2, r0
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	1ad3      	subs	r3, r2, r3
 8016278:	2b02      	cmp	r3, #2
 801627a:	d901      	bls.n	8016280 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 801627c:	2303      	movs	r3, #3
 801627e:	e08a      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8016280:	4a47      	ldr	r2, [pc, #284]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016282:	2398      	movs	r3, #152	@ 0x98
 8016284:	58d3      	ldr	r3, [r2, r3]
 8016286:	2202      	movs	r2, #2
 8016288:	4013      	ands	r3, r2
 801628a:	d1f0      	bne.n	801626e <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016290:	2b00      	cmp	r3, #0
 8016292:	d100      	bne.n	8016296 <HAL_RCC_OscConfig+0x73a>
 8016294:	e07e      	b.n	8016394 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016296:	4b42      	ldr	r3, [pc, #264]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016298:	689b      	ldr	r3, [r3, #8]
 801629a:	2238      	movs	r2, #56	@ 0x38
 801629c:	4013      	ands	r3, r2
 801629e:	2b18      	cmp	r3, #24
 80162a0:	d100      	bne.n	80162a4 <HAL_RCC_OscConfig+0x748>
 80162a2:	e075      	b.n	8016390 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162a8:	2b02      	cmp	r3, #2
 80162aa:	d156      	bne.n	801635a <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80162ac:	4b3c      	ldr	r3, [pc, #240]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 80162ae:	681a      	ldr	r2, [r3, #0]
 80162b0:	4b3b      	ldr	r3, [pc, #236]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 80162b2:	493d      	ldr	r1, [pc, #244]	@ (80163a8 <HAL_RCC_OscConfig+0x84c>)
 80162b4:	400a      	ands	r2, r1
 80162b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80162b8:	f7fa ff5c 	bl	8011174 <HAL_GetTick>
 80162bc:	0003      	movs	r3, r0
 80162be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80162c0:	e008      	b.n	80162d4 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80162c2:	f7fa ff57 	bl	8011174 <HAL_GetTick>
 80162c6:	0002      	movs	r2, r0
 80162c8:	693b      	ldr	r3, [r7, #16]
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	2b02      	cmp	r3, #2
 80162ce:	d901      	bls.n	80162d4 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80162d0:	2303      	movs	r3, #3
 80162d2:	e060      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80162d4:	4b32      	ldr	r3, [pc, #200]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 80162d6:	681a      	ldr	r2, [r3, #0]
 80162d8:	2380      	movs	r3, #128	@ 0x80
 80162da:	049b      	lsls	r3, r3, #18
 80162dc:	4013      	ands	r3, r2
 80162de:	d1f0      	bne.n	80162c2 <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80162e0:	4b2f      	ldr	r3, [pc, #188]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	4a31      	ldr	r2, [pc, #196]	@ (80163ac <HAL_RCC_OscConfig+0x850>)
 80162e6:	4013      	ands	r3, r2
 80162e8:	0019      	movs	r1, r3
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80162f2:	431a      	orrs	r2, r3
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80162f8:	021b      	lsls	r3, r3, #8
 80162fa:	431a      	orrs	r2, r3
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016300:	431a      	orrs	r2, r3
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016306:	431a      	orrs	r2, r3
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801630c:	431a      	orrs	r2, r3
 801630e:	4b24      	ldr	r3, [pc, #144]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016310:	430a      	orrs	r2, r1
 8016312:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8016314:	4b22      	ldr	r3, [pc, #136]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016316:	68da      	ldr	r2, [r3, #12]
 8016318:	4b21      	ldr	r3, [pc, #132]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 801631a:	2180      	movs	r1, #128	@ 0x80
 801631c:	0549      	lsls	r1, r1, #21
 801631e:	430a      	orrs	r2, r1
 8016320:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8016322:	4b1f      	ldr	r3, [pc, #124]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016324:	681a      	ldr	r2, [r3, #0]
 8016326:	4b1e      	ldr	r3, [pc, #120]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016328:	2180      	movs	r1, #128	@ 0x80
 801632a:	0449      	lsls	r1, r1, #17
 801632c:	430a      	orrs	r2, r1
 801632e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016330:	f7fa ff20 	bl	8011174 <HAL_GetTick>
 8016334:	0003      	movs	r3, r0
 8016336:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8016338:	e008      	b.n	801634c <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801633a:	f7fa ff1b 	bl	8011174 <HAL_GetTick>
 801633e:	0002      	movs	r2, r0
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	2b02      	cmp	r3, #2
 8016346:	d901      	bls.n	801634c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8016348:	2303      	movs	r3, #3
 801634a:	e024      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801634c:	4b14      	ldr	r3, [pc, #80]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 801634e:	681a      	ldr	r2, [r3, #0]
 8016350:	2380      	movs	r3, #128	@ 0x80
 8016352:	049b      	lsls	r3, r3, #18
 8016354:	4013      	ands	r3, r2
 8016356:	d0f0      	beq.n	801633a <HAL_RCC_OscConfig+0x7de>
 8016358:	e01c      	b.n	8016394 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801635a:	4b11      	ldr	r3, [pc, #68]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 801635c:	681a      	ldr	r2, [r3, #0]
 801635e:	4b10      	ldr	r3, [pc, #64]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016360:	4911      	ldr	r1, [pc, #68]	@ (80163a8 <HAL_RCC_OscConfig+0x84c>)
 8016362:	400a      	ands	r2, r1
 8016364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016366:	f7fa ff05 	bl	8011174 <HAL_GetTick>
 801636a:	0003      	movs	r3, r0
 801636c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801636e:	e008      	b.n	8016382 <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016370:	f7fa ff00 	bl	8011174 <HAL_GetTick>
 8016374:	0002      	movs	r2, r0
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	1ad3      	subs	r3, r2, r3
 801637a:	2b02      	cmp	r3, #2
 801637c:	d901      	bls.n	8016382 <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 801637e:	2303      	movs	r3, #3
 8016380:	e009      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8016382:	4b07      	ldr	r3, [pc, #28]	@ (80163a0 <HAL_RCC_OscConfig+0x844>)
 8016384:	681a      	ldr	r2, [r3, #0]
 8016386:	2380      	movs	r3, #128	@ 0x80
 8016388:	049b      	lsls	r3, r3, #18
 801638a:	4013      	ands	r3, r2
 801638c:	d1f0      	bne.n	8016370 <HAL_RCC_OscConfig+0x814>
 801638e:	e001      	b.n	8016394 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8016390:	2301      	movs	r3, #1
 8016392:	e000      	b.n	8016396 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8016394:	2300      	movs	r3, #0
}
 8016396:	0018      	movs	r0, r3
 8016398:	46bd      	mov	sp, r7
 801639a:	b008      	add	sp, #32
 801639c:	bdb0      	pop	{r4, r5, r7, pc}
 801639e:	46c0      	nop			@ (mov r8, r8)
 80163a0:	40021000 	.word	0x40021000
 80163a4:	efffffff 	.word	0xefffffff
 80163a8:	feffffff 	.word	0xfeffffff
 80163ac:	11c1808c 	.word	0x11c1808c

080163b0 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80163b0:	b5b0      	push	{r4, r5, r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80163ba:	4b6c      	ldr	r3, [pc, #432]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2207      	movs	r2, #7
 80163c0:	4013      	ands	r3, r2
 80163c2:	683a      	ldr	r2, [r7, #0]
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d911      	bls.n	80163ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80163c8:	4b68      	ldr	r3, [pc, #416]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	2207      	movs	r2, #7
 80163ce:	4393      	bics	r3, r2
 80163d0:	0019      	movs	r1, r3
 80163d2:	4b66      	ldr	r3, [pc, #408]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 80163d4:	683a      	ldr	r2, [r7, #0]
 80163d6:	430a      	orrs	r2, r1
 80163d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80163da:	4b64      	ldr	r3, [pc, #400]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	2207      	movs	r2, #7
 80163e0:	4013      	ands	r3, r2
 80163e2:	683a      	ldr	r2, [r7, #0]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d001      	beq.n	80163ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e0bb      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2201      	movs	r2, #1
 80163f2:	4013      	ands	r3, r2
 80163f4:	d100      	bne.n	80163f8 <HAL_RCC_ClockConfig+0x48>
 80163f6:	e064      	b.n	80164c2 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	2b03      	cmp	r3, #3
 80163fe:	d107      	bne.n	8016410 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8016400:	4b5b      	ldr	r3, [pc, #364]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	2380      	movs	r3, #128	@ 0x80
 8016406:	049b      	lsls	r3, r3, #18
 8016408:	4013      	ands	r3, r2
 801640a:	d138      	bne.n	801647e <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 801640c:	2301      	movs	r3, #1
 801640e:	e0a9      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	2b02      	cmp	r3, #2
 8016416:	d107      	bne.n	8016428 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016418:	4b55      	ldr	r3, [pc, #340]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 801641a:	681a      	ldr	r2, [r3, #0]
 801641c:	2380      	movs	r3, #128	@ 0x80
 801641e:	029b      	lsls	r3, r3, #10
 8016420:	4013      	ands	r3, r2
 8016422:	d12c      	bne.n	801647e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8016424:	2301      	movs	r3, #1
 8016426:	e09d      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	685b      	ldr	r3, [r3, #4]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d106      	bne.n	801643e <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016430:	4b4f      	ldr	r3, [pc, #316]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	2202      	movs	r2, #2
 8016436:	4013      	ands	r3, r2
 8016438:	d121      	bne.n	801647e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801643a:	2301      	movs	r3, #1
 801643c:	e092      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	685b      	ldr	r3, [r3, #4]
 8016442:	2b01      	cmp	r3, #1
 8016444:	d107      	bne.n	8016456 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016446:	4b4a      	ldr	r3, [pc, #296]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 8016448:	681a      	ldr	r2, [r3, #0]
 801644a:	2380      	movs	r3, #128	@ 0x80
 801644c:	00db      	lsls	r3, r3, #3
 801644e:	4013      	ands	r3, r2
 8016450:	d115      	bne.n	801647e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8016452:	2301      	movs	r3, #1
 8016454:	e086      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	2b04      	cmp	r3, #4
 801645c:	d107      	bne.n	801646e <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801645e:	4a44      	ldr	r2, [pc, #272]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 8016460:	2394      	movs	r3, #148	@ 0x94
 8016462:	58d3      	ldr	r3, [r2, r3]
 8016464:	2202      	movs	r2, #2
 8016466:	4013      	ands	r3, r2
 8016468:	d109      	bne.n	801647e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801646a:	2301      	movs	r3, #1
 801646c:	e07a      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801646e:	4a40      	ldr	r2, [pc, #256]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 8016470:	2390      	movs	r3, #144	@ 0x90
 8016472:	58d3      	ldr	r3, [r2, r3]
 8016474:	2202      	movs	r2, #2
 8016476:	4013      	ands	r3, r2
 8016478:	d101      	bne.n	801647e <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 801647a:	2301      	movs	r3, #1
 801647c:	e072      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801647e:	4b3c      	ldr	r3, [pc, #240]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 8016480:	689b      	ldr	r3, [r3, #8]
 8016482:	2207      	movs	r2, #7
 8016484:	4393      	bics	r3, r2
 8016486:	0019      	movs	r1, r3
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	685a      	ldr	r2, [r3, #4]
 801648c:	4b38      	ldr	r3, [pc, #224]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 801648e:	430a      	orrs	r2, r1
 8016490:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016492:	f7fa fe6f 	bl	8011174 <HAL_GetTick>
 8016496:	0003      	movs	r3, r0
 8016498:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801649a:	e009      	b.n	80164b0 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801649c:	f7fa fe6a 	bl	8011174 <HAL_GetTick>
 80164a0:	0002      	movs	r2, r0
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	1ad3      	subs	r3, r2, r3
 80164a6:	4a33      	ldr	r2, [pc, #204]	@ (8016574 <HAL_RCC_ClockConfig+0x1c4>)
 80164a8:	4293      	cmp	r3, r2
 80164aa:	d901      	bls.n	80164b0 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80164ac:	2303      	movs	r3, #3
 80164ae:	e059      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80164b0:	4b2f      	ldr	r3, [pc, #188]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 80164b2:	689b      	ldr	r3, [r3, #8]
 80164b4:	2238      	movs	r2, #56	@ 0x38
 80164b6:	401a      	ands	r2, r3
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	00db      	lsls	r3, r3, #3
 80164be:	429a      	cmp	r2, r3
 80164c0:	d1ec      	bne.n	801649c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2202      	movs	r2, #2
 80164c8:	4013      	ands	r3, r2
 80164ca:	d009      	beq.n	80164e0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80164cc:	4b28      	ldr	r3, [pc, #160]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 80164ce:	689b      	ldr	r3, [r3, #8]
 80164d0:	4a29      	ldr	r2, [pc, #164]	@ (8016578 <HAL_RCC_ClockConfig+0x1c8>)
 80164d2:	4013      	ands	r3, r2
 80164d4:	0019      	movs	r1, r3
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	689a      	ldr	r2, [r3, #8]
 80164da:	4b25      	ldr	r3, [pc, #148]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 80164dc:	430a      	orrs	r2, r1
 80164de:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80164e0:	4b22      	ldr	r3, [pc, #136]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	2207      	movs	r2, #7
 80164e6:	4013      	ands	r3, r2
 80164e8:	683a      	ldr	r2, [r7, #0]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d211      	bcs.n	8016512 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80164ee:	4b1f      	ldr	r3, [pc, #124]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	2207      	movs	r2, #7
 80164f4:	4393      	bics	r3, r2
 80164f6:	0019      	movs	r1, r3
 80164f8:	4b1c      	ldr	r3, [pc, #112]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 80164fa:	683a      	ldr	r2, [r7, #0]
 80164fc:	430a      	orrs	r2, r1
 80164fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016500:	4b1a      	ldr	r3, [pc, #104]	@ (801656c <HAL_RCC_ClockConfig+0x1bc>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	2207      	movs	r2, #7
 8016506:	4013      	ands	r3, r2
 8016508:	683a      	ldr	r2, [r7, #0]
 801650a:	429a      	cmp	r2, r3
 801650c:	d001      	beq.n	8016512 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 801650e:	2301      	movs	r3, #1
 8016510:	e028      	b.n	8016564 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	2204      	movs	r2, #4
 8016518:	4013      	ands	r3, r2
 801651a:	d009      	beq.n	8016530 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801651c:	4b14      	ldr	r3, [pc, #80]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 801651e:	689b      	ldr	r3, [r3, #8]
 8016520:	4a16      	ldr	r2, [pc, #88]	@ (801657c <HAL_RCC_ClockConfig+0x1cc>)
 8016522:	4013      	ands	r3, r2
 8016524:	0019      	movs	r1, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	68da      	ldr	r2, [r3, #12]
 801652a:	4b11      	ldr	r3, [pc, #68]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 801652c:	430a      	orrs	r2, r1
 801652e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016530:	f000 f82a 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 8016534:	0001      	movs	r1, r0
 8016536:	4b0e      	ldr	r3, [pc, #56]	@ (8016570 <HAL_RCC_ClockConfig+0x1c0>)
 8016538:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801653a:	0a1b      	lsrs	r3, r3, #8
 801653c:	220f      	movs	r2, #15
 801653e:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8016540:	4a0f      	ldr	r2, [pc, #60]	@ (8016580 <HAL_RCC_ClockConfig+0x1d0>)
 8016542:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8016544:	001a      	movs	r2, r3
 8016546:	231f      	movs	r3, #31
 8016548:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 801654a:	000a      	movs	r2, r1
 801654c:	40da      	lsrs	r2, r3
 801654e:	4b0d      	ldr	r3, [pc, #52]	@ (8016584 <HAL_RCC_ClockConfig+0x1d4>)
 8016550:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8016552:	250b      	movs	r5, #11
 8016554:	197c      	adds	r4, r7, r5
 8016556:	2003      	movs	r0, #3
 8016558:	f7fa fdb2 	bl	80110c0 <HAL_InitTick>
 801655c:	0003      	movs	r3, r0
 801655e:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8016560:	197b      	adds	r3, r7, r5
 8016562:	781b      	ldrb	r3, [r3, #0]
}
 8016564:	0018      	movs	r0, r3
 8016566:	46bd      	mov	sp, r7
 8016568:	b004      	add	sp, #16
 801656a:	bdb0      	pop	{r4, r5, r7, pc}
 801656c:	40022000 	.word	0x40022000
 8016570:	40021000 	.word	0x40021000
 8016574:	00001388 	.word	0x00001388
 8016578:	fffff0ff 	.word	0xfffff0ff
 801657c:	ffff8fff 	.word	0xffff8fff
 8016580:	0801b2cc 	.word	0x0801b2cc
 8016584:	20000250 	.word	0x20000250

08016588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b08a      	sub	sp, #40	@ 0x28
 801658c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 801658e:	2300      	movs	r3, #0
 8016590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8016592:	2300      	movs	r3, #0
 8016594:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016596:	4b46      	ldr	r3, [pc, #280]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 8016598:	689b      	ldr	r3, [r3, #8]
 801659a:	2238      	movs	r2, #56	@ 0x38
 801659c:	4013      	ands	r3, r2
 801659e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80165a0:	4b43      	ldr	r3, [pc, #268]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 80165a2:	68db      	ldr	r3, [r3, #12]
 80165a4:	2203      	movs	r2, #3
 80165a6:	4013      	ands	r3, r2
 80165a8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d005      	beq.n	80165bc <HAL_RCC_GetSysClockFreq+0x34>
 80165b0:	69bb      	ldr	r3, [r7, #24]
 80165b2:	2b18      	cmp	r3, #24
 80165b4:	d125      	bne.n	8016602 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	2b01      	cmp	r3, #1
 80165ba:	d122      	bne.n	8016602 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80165bc:	4b3c      	ldr	r3, [pc, #240]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2208      	movs	r2, #8
 80165c2:	4013      	ands	r3, r2
 80165c4:	d107      	bne.n	80165d6 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80165c6:	4a3a      	ldr	r2, [pc, #232]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 80165c8:	2394      	movs	r3, #148	@ 0x94
 80165ca:	58d3      	ldr	r3, [r2, r3]
 80165cc:	0a1b      	lsrs	r3, r3, #8
 80165ce:	220f      	movs	r2, #15
 80165d0:	4013      	ands	r3, r2
 80165d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80165d4:	e005      	b.n	80165e2 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80165d6:	4b36      	ldr	r3, [pc, #216]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	091b      	lsrs	r3, r3, #4
 80165dc:	220f      	movs	r2, #15
 80165de:	4013      	ands	r3, r2
 80165e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80165e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e4:	2b0b      	cmp	r3, #11
 80165e6:	d901      	bls.n	80165ec <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80165e8:	2300      	movs	r3, #0
 80165ea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80165ec:	4b31      	ldr	r3, [pc, #196]	@ (80166b4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80165ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165f0:	0092      	lsls	r2, r2, #2
 80165f2:	58d3      	ldr	r3, [r2, r3]
 80165f4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d11b      	bne.n	8016634 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80165fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165fe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016600:	e018      	b.n	8016634 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8016602:	69bb      	ldr	r3, [r7, #24]
 8016604:	2b08      	cmp	r3, #8
 8016606:	d102      	bne.n	801660e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8016608:	4b2b      	ldr	r3, [pc, #172]	@ (80166b8 <HAL_RCC_GetSysClockFreq+0x130>)
 801660a:	623b      	str	r3, [r7, #32]
 801660c:	e012      	b.n	8016634 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801660e:	69bb      	ldr	r3, [r7, #24]
 8016610:	2b10      	cmp	r3, #16
 8016612:	d102      	bne.n	801661a <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8016614:	4b29      	ldr	r3, [pc, #164]	@ (80166bc <HAL_RCC_GetSysClockFreq+0x134>)
 8016616:	623b      	str	r3, [r7, #32]
 8016618:	e00c      	b.n	8016634 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 801661a:	69bb      	ldr	r3, [r7, #24]
 801661c:	2b20      	cmp	r3, #32
 801661e:	d103      	bne.n	8016628 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8016620:	23fa      	movs	r3, #250	@ 0xfa
 8016622:	01db      	lsls	r3, r3, #7
 8016624:	623b      	str	r3, [r7, #32]
 8016626:	e005      	b.n	8016634 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8016628:	69bb      	ldr	r3, [r7, #24]
 801662a:	2b28      	cmp	r3, #40	@ 0x28
 801662c:	d102      	bne.n	8016634 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 801662e:	2380      	movs	r3, #128	@ 0x80
 8016630:	021b      	lsls	r3, r3, #8
 8016632:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016634:	69bb      	ldr	r3, [r7, #24]
 8016636:	2b18      	cmp	r3, #24
 8016638:	d135      	bne.n	80166a6 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801663a:	4b1d      	ldr	r3, [pc, #116]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 801663c:	68db      	ldr	r3, [r3, #12]
 801663e:	2203      	movs	r2, #3
 8016640:	4013      	ands	r3, r2
 8016642:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8016644:	4b1a      	ldr	r3, [pc, #104]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 8016646:	68db      	ldr	r3, [r3, #12]
 8016648:	091b      	lsrs	r3, r3, #4
 801664a:	2207      	movs	r2, #7
 801664c:	4013      	ands	r3, r2
 801664e:	3301      	adds	r3, #1
 8016650:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	2b02      	cmp	r3, #2
 8016656:	d003      	beq.n	8016660 <HAL_RCC_GetSysClockFreq+0xd8>
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	2b03      	cmp	r3, #3
 801665c:	d003      	beq.n	8016666 <HAL_RCC_GetSysClockFreq+0xde>
 801665e:	e005      	b.n	801666c <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8016660:	4b15      	ldr	r3, [pc, #84]	@ (80166b8 <HAL_RCC_GetSysClockFreq+0x130>)
 8016662:	61fb      	str	r3, [r7, #28]
        break;
 8016664:	e005      	b.n	8016672 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8016666:	4b15      	ldr	r3, [pc, #84]	@ (80166bc <HAL_RCC_GetSysClockFreq+0x134>)
 8016668:	61fb      	str	r3, [r7, #28]
        break;
 801666a:	e002      	b.n	8016672 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 801666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801666e:	61fb      	str	r3, [r7, #28]
        break;
 8016670:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8016672:	4b0f      	ldr	r3, [pc, #60]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 8016674:	68db      	ldr	r3, [r3, #12]
 8016676:	0a1b      	lsrs	r3, r3, #8
 8016678:	227f      	movs	r2, #127	@ 0x7f
 801667a:	4013      	ands	r3, r2
 801667c:	69fa      	ldr	r2, [r7, #28]
 801667e:	4353      	muls	r3, r2
 8016680:	68f9      	ldr	r1, [r7, #12]
 8016682:	0018      	movs	r0, r3
 8016684:	f7e9 fd48 	bl	8000118 <__udivsi3>
 8016688:	0003      	movs	r3, r0
 801668a:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 801668c:	4b08      	ldr	r3, [pc, #32]	@ (80166b0 <HAL_RCC_GetSysClockFreq+0x128>)
 801668e:	68db      	ldr	r3, [r3, #12]
 8016690:	0f5b      	lsrs	r3, r3, #29
 8016692:	2207      	movs	r2, #7
 8016694:	4013      	ands	r3, r2
 8016696:	3301      	adds	r3, #1
 8016698:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 801669a:	6879      	ldr	r1, [r7, #4]
 801669c:	68b8      	ldr	r0, [r7, #8]
 801669e:	f7e9 fd3b 	bl	8000118 <__udivsi3>
 80166a2:	0003      	movs	r3, r0
 80166a4:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80166a6:	6a3b      	ldr	r3, [r7, #32]
}
 80166a8:	0018      	movs	r0, r3
 80166aa:	46bd      	mov	sp, r7
 80166ac:	b00a      	add	sp, #40	@ 0x28
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	40021000 	.word	0x40021000
 80166b4:	0801b2e4 	.word	0x0801b2e4
 80166b8:	00f42400 	.word	0x00f42400
 80166bc:	003d0900 	.word	0x003d0900

080166c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80166c4:	4b02      	ldr	r3, [pc, #8]	@ (80166d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80166c6:	681b      	ldr	r3, [r3, #0]
}
 80166c8:	0018      	movs	r0, r3
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	46c0      	nop			@ (mov r8, r8)
 80166d0:	20000250 	.word	0x20000250

080166d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80166d8:	f7ff fff2 	bl	80166c0 <HAL_RCC_GetHCLKFreq>
 80166dc:	0001      	movs	r1, r0
 80166de:	4b07      	ldr	r3, [pc, #28]	@ (80166fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80166e0:	689b      	ldr	r3, [r3, #8]
 80166e2:	0b1b      	lsrs	r3, r3, #12
 80166e4:	2207      	movs	r2, #7
 80166e6:	4013      	ands	r3, r2
 80166e8:	4a05      	ldr	r2, [pc, #20]	@ (8016700 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80166ea:	5cd3      	ldrb	r3, [r2, r3]
 80166ec:	001a      	movs	r2, r3
 80166ee:	231f      	movs	r3, #31
 80166f0:	4013      	ands	r3, r2
 80166f2:	40d9      	lsrs	r1, r3
 80166f4:	000b      	movs	r3, r1
}
 80166f6:	0018      	movs	r0, r3
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	40021000 	.word	0x40021000
 8016700:	0801b2dc 	.word	0x0801b2dc

08016704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801670c:	2300      	movs	r3, #0
 801670e:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8016710:	4b2f      	ldr	r3, [pc, #188]	@ (80167d0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8016712:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016714:	2380      	movs	r3, #128	@ 0x80
 8016716:	055b      	lsls	r3, r3, #21
 8016718:	4013      	ands	r3, r2
 801671a:	d004      	beq.n	8016726 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801671c:	f7ff fa12 	bl	8015b44 <HAL_PWREx_GetVoltageRange>
 8016720:	0003      	movs	r3, r0
 8016722:	617b      	str	r3, [r7, #20]
 8016724:	e017      	b.n	8016756 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8016726:	4b2a      	ldr	r3, [pc, #168]	@ (80167d0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8016728:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801672a:	4b29      	ldr	r3, [pc, #164]	@ (80167d0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801672c:	2180      	movs	r1, #128	@ 0x80
 801672e:	0549      	lsls	r1, r1, #21
 8016730:	430a      	orrs	r2, r1
 8016732:	659a      	str	r2, [r3, #88]	@ 0x58
 8016734:	4b26      	ldr	r3, [pc, #152]	@ (80167d0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8016736:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016738:	2380      	movs	r3, #128	@ 0x80
 801673a:	055b      	lsls	r3, r3, #21
 801673c:	4013      	ands	r3, r2
 801673e:	60fb      	str	r3, [r7, #12]
 8016740:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8016742:	f7ff f9ff 	bl	8015b44 <HAL_PWREx_GetVoltageRange>
 8016746:	0003      	movs	r3, r0
 8016748:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801674a:	4b21      	ldr	r3, [pc, #132]	@ (80167d0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 801674c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801674e:	4b20      	ldr	r3, [pc, #128]	@ (80167d0 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8016750:	4920      	ldr	r1, [pc, #128]	@ (80167d4 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8016752:	400a      	ands	r2, r1
 8016754:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8016756:	697a      	ldr	r2, [r7, #20]
 8016758:	2380      	movs	r3, #128	@ 0x80
 801675a:	009b      	lsls	r3, r3, #2
 801675c:	429a      	cmp	r2, r3
 801675e:	d111      	bne.n	8016784 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2b80      	cmp	r3, #128	@ 0x80
 8016764:	d91c      	bls.n	80167a0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2bb0      	cmp	r3, #176	@ 0xb0
 801676a:	d902      	bls.n	8016772 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801676c:	2302      	movs	r3, #2
 801676e:	613b      	str	r3, [r7, #16]
 8016770:	e016      	b.n	80167a0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2b90      	cmp	r3, #144	@ 0x90
 8016776:	d902      	bls.n	801677e <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8016778:	2301      	movs	r3, #1
 801677a:	613b      	str	r3, [r7, #16]
 801677c:	e010      	b.n	80167a0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 801677e:	2300      	movs	r3, #0
 8016780:	613b      	str	r3, [r7, #16]
 8016782:	e00d      	b.n	80167a0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2b7f      	cmp	r3, #127	@ 0x7f
 8016788:	d902      	bls.n	8016790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 801678a:	2302      	movs	r3, #2
 801678c:	613b      	str	r3, [r7, #16]
 801678e:	e007      	b.n	80167a0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2b70      	cmp	r3, #112	@ 0x70
 8016794:	d102      	bne.n	801679c <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8016796:	2301      	movs	r3, #1
 8016798:	613b      	str	r3, [r7, #16]
 801679a:	e001      	b.n	80167a0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 801679c:	2300      	movs	r3, #0
 801679e:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80167a0:	4b0d      	ldr	r3, [pc, #52]	@ (80167d8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	2207      	movs	r2, #7
 80167a6:	4393      	bics	r3, r2
 80167a8:	0019      	movs	r1, r3
 80167aa:	4b0b      	ldr	r3, [pc, #44]	@ (80167d8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80167ac:	693a      	ldr	r2, [r7, #16]
 80167ae:	430a      	orrs	r2, r1
 80167b0:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80167b2:	4b09      	ldr	r3, [pc, #36]	@ (80167d8 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2207      	movs	r2, #7
 80167b8:	4013      	ands	r3, r2
 80167ba:	693a      	ldr	r2, [r7, #16]
 80167bc:	429a      	cmp	r2, r3
 80167be:	d001      	beq.n	80167c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80167c0:	2301      	movs	r3, #1
 80167c2:	e000      	b.n	80167c6 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80167c4:	2300      	movs	r3, #0
}
 80167c6:	0018      	movs	r0, r3
 80167c8:	46bd      	mov	sp, r7
 80167ca:	b006      	add	sp, #24
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	46c0      	nop			@ (mov r8, r8)
 80167d0:	40021000 	.word	0x40021000
 80167d4:	efffffff 	.word	0xefffffff
 80167d8:	40022000 	.word	0x40022000

080167dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b086      	sub	sp, #24
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80167e4:	2313      	movs	r3, #19
 80167e6:	18fb      	adds	r3, r7, r3
 80167e8:	2200      	movs	r2, #0
 80167ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80167ec:	2312      	movs	r3, #18
 80167ee:	18fb      	adds	r3, r7, r3
 80167f0:	2200      	movs	r2, #0
 80167f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	2380      	movs	r3, #128	@ 0x80
 80167fa:	021b      	lsls	r3, r3, #8
 80167fc:	4013      	ands	r3, r2
 80167fe:	d100      	bne.n	8016802 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8016800:	e0b7      	b.n	8016972 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016802:	2011      	movs	r0, #17
 8016804:	183b      	adds	r3, r7, r0
 8016806:	2200      	movs	r2, #0
 8016808:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801680a:	4b4c      	ldr	r3, [pc, #304]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801680c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801680e:	2380      	movs	r3, #128	@ 0x80
 8016810:	055b      	lsls	r3, r3, #21
 8016812:	4013      	ands	r3, r2
 8016814:	d110      	bne.n	8016838 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016816:	4b49      	ldr	r3, [pc, #292]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016818:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801681a:	4b48      	ldr	r3, [pc, #288]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801681c:	2180      	movs	r1, #128	@ 0x80
 801681e:	0549      	lsls	r1, r1, #21
 8016820:	430a      	orrs	r2, r1
 8016822:	659a      	str	r2, [r3, #88]	@ 0x58
 8016824:	4b45      	ldr	r3, [pc, #276]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016826:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016828:	2380      	movs	r3, #128	@ 0x80
 801682a:	055b      	lsls	r3, r3, #21
 801682c:	4013      	ands	r3, r2
 801682e:	60bb      	str	r3, [r7, #8]
 8016830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016832:	183b      	adds	r3, r7, r0
 8016834:	2201      	movs	r2, #1
 8016836:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016838:	4b41      	ldr	r3, [pc, #260]	@ (8016940 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801683a:	681a      	ldr	r2, [r3, #0]
 801683c:	4b40      	ldr	r3, [pc, #256]	@ (8016940 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801683e:	2180      	movs	r1, #128	@ 0x80
 8016840:	0049      	lsls	r1, r1, #1
 8016842:	430a      	orrs	r2, r1
 8016844:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8016846:	f7fa fc95 	bl	8011174 <HAL_GetTick>
 801684a:	0003      	movs	r3, r0
 801684c:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801684e:	e00b      	b.n	8016868 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016850:	f7fa fc90 	bl	8011174 <HAL_GetTick>
 8016854:	0002      	movs	r2, r0
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	1ad3      	subs	r3, r2, r3
 801685a:	2b02      	cmp	r3, #2
 801685c:	d904      	bls.n	8016868 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 801685e:	2313      	movs	r3, #19
 8016860:	18fb      	adds	r3, r7, r3
 8016862:	2203      	movs	r2, #3
 8016864:	701a      	strb	r2, [r3, #0]
        break;
 8016866:	e005      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8016868:	4b35      	ldr	r3, [pc, #212]	@ (8016940 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	2380      	movs	r3, #128	@ 0x80
 801686e:	005b      	lsls	r3, r3, #1
 8016870:	4013      	ands	r3, r2
 8016872:	d0ed      	beq.n	8016850 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8016874:	2313      	movs	r3, #19
 8016876:	18fb      	adds	r3, r7, r3
 8016878:	781b      	ldrb	r3, [r3, #0]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d168      	bne.n	8016950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801687e:	4a2f      	ldr	r2, [pc, #188]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016880:	2390      	movs	r3, #144	@ 0x90
 8016882:	58d2      	ldr	r2, [r2, r3]
 8016884:	23c0      	movs	r3, #192	@ 0xc0
 8016886:	009b      	lsls	r3, r3, #2
 8016888:	4013      	ands	r3, r2
 801688a:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d01f      	beq.n	80168d2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016896:	697a      	ldr	r2, [r7, #20]
 8016898:	429a      	cmp	r2, r3
 801689a:	d01a      	beq.n	80168d2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801689c:	4a27      	ldr	r2, [pc, #156]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801689e:	2390      	movs	r3, #144	@ 0x90
 80168a0:	58d3      	ldr	r3, [r2, r3]
 80168a2:	4a28      	ldr	r2, [pc, #160]	@ (8016944 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80168a4:	4013      	ands	r3, r2
 80168a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80168a8:	4a24      	ldr	r2, [pc, #144]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80168aa:	2390      	movs	r3, #144	@ 0x90
 80168ac:	58d3      	ldr	r3, [r2, r3]
 80168ae:	4923      	ldr	r1, [pc, #140]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80168b0:	2280      	movs	r2, #128	@ 0x80
 80168b2:	0252      	lsls	r2, r2, #9
 80168b4:	4313      	orrs	r3, r2
 80168b6:	2290      	movs	r2, #144	@ 0x90
 80168b8:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80168ba:	4a20      	ldr	r2, [pc, #128]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80168bc:	2390      	movs	r3, #144	@ 0x90
 80168be:	58d3      	ldr	r3, [r2, r3]
 80168c0:	491e      	ldr	r1, [pc, #120]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80168c2:	4a21      	ldr	r2, [pc, #132]	@ (8016948 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80168c4:	4013      	ands	r3, r2
 80168c6:	2290      	movs	r2, #144	@ 0x90
 80168c8:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80168ca:	491c      	ldr	r1, [pc, #112]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80168cc:	2290      	movs	r2, #144	@ 0x90
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	2201      	movs	r2, #1
 80168d6:	4013      	ands	r3, r2
 80168d8:	d017      	beq.n	801690a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80168da:	f7fa fc4b 	bl	8011174 <HAL_GetTick>
 80168de:	0003      	movs	r3, r0
 80168e0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80168e2:	e00c      	b.n	80168fe <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80168e4:	f7fa fc46 	bl	8011174 <HAL_GetTick>
 80168e8:	0002      	movs	r2, r0
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	1ad3      	subs	r3, r2, r3
 80168ee:	4a17      	ldr	r2, [pc, #92]	@ (801694c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80168f0:	4293      	cmp	r3, r2
 80168f2:	d904      	bls.n	80168fe <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80168f4:	2313      	movs	r3, #19
 80168f6:	18fb      	adds	r3, r7, r3
 80168f8:	2203      	movs	r2, #3
 80168fa:	701a      	strb	r2, [r3, #0]
            break;
 80168fc:	e005      	b.n	801690a <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80168fe:	4a0f      	ldr	r2, [pc, #60]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016900:	2390      	movs	r3, #144	@ 0x90
 8016902:	58d3      	ldr	r3, [r2, r3]
 8016904:	2202      	movs	r2, #2
 8016906:	4013      	ands	r3, r2
 8016908:	d0ec      	beq.n	80168e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 801690a:	2313      	movs	r3, #19
 801690c:	18fb      	adds	r3, r7, r3
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d10b      	bne.n	801692c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8016914:	4a09      	ldr	r2, [pc, #36]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016916:	2390      	movs	r3, #144	@ 0x90
 8016918:	58d3      	ldr	r3, [r2, r3]
 801691a:	4a0a      	ldr	r2, [pc, #40]	@ (8016944 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801691c:	401a      	ands	r2, r3
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016922:	4906      	ldr	r1, [pc, #24]	@ (801693c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8016924:	4313      	orrs	r3, r2
 8016926:	2290      	movs	r2, #144	@ 0x90
 8016928:	508b      	str	r3, [r1, r2]
 801692a:	e017      	b.n	801695c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801692c:	2312      	movs	r3, #18
 801692e:	18fb      	adds	r3, r7, r3
 8016930:	2213      	movs	r2, #19
 8016932:	18ba      	adds	r2, r7, r2
 8016934:	7812      	ldrb	r2, [r2, #0]
 8016936:	701a      	strb	r2, [r3, #0]
 8016938:	e010      	b.n	801695c <HAL_RCCEx_PeriphCLKConfig+0x180>
 801693a:	46c0      	nop			@ (mov r8, r8)
 801693c:	40021000 	.word	0x40021000
 8016940:	40007000 	.word	0x40007000
 8016944:	fffffcff 	.word	0xfffffcff
 8016948:	fffeffff 	.word	0xfffeffff
 801694c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016950:	2312      	movs	r3, #18
 8016952:	18fb      	adds	r3, r7, r3
 8016954:	2213      	movs	r2, #19
 8016956:	18ba      	adds	r2, r7, r2
 8016958:	7812      	ldrb	r2, [r2, #0]
 801695a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801695c:	2311      	movs	r3, #17
 801695e:	18fb      	adds	r3, r7, r3
 8016960:	781b      	ldrb	r3, [r3, #0]
 8016962:	2b01      	cmp	r3, #1
 8016964:	d105      	bne.n	8016972 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016966:	4ba4      	ldr	r3, [pc, #656]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016968:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801696a:	4ba3      	ldr	r3, [pc, #652]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801696c:	49a3      	ldr	r1, [pc, #652]	@ (8016bfc <HAL_RCCEx_PeriphCLKConfig+0x420>)
 801696e:	400a      	ands	r2, r1
 8016970:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	2201      	movs	r2, #1
 8016978:	4013      	ands	r3, r2
 801697a:	d00b      	beq.n	8016994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801697c:	4a9e      	ldr	r2, [pc, #632]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801697e:	2388      	movs	r3, #136	@ 0x88
 8016980:	58d3      	ldr	r3, [r2, r3]
 8016982:	2203      	movs	r2, #3
 8016984:	4393      	bics	r3, r2
 8016986:	001a      	movs	r2, r3
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	685b      	ldr	r3, [r3, #4]
 801698c:	499a      	ldr	r1, [pc, #616]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 801698e:	4313      	orrs	r3, r2
 8016990:	2288      	movs	r2, #136	@ 0x88
 8016992:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2202      	movs	r2, #2
 801699a:	4013      	ands	r3, r2
 801699c:	d00b      	beq.n	80169b6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801699e:	4a96      	ldr	r2, [pc, #600]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80169a0:	2388      	movs	r3, #136	@ 0x88
 80169a2:	58d3      	ldr	r3, [r2, r3]
 80169a4:	220c      	movs	r2, #12
 80169a6:	4393      	bics	r3, r2
 80169a8:	001a      	movs	r2, r3
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	689b      	ldr	r3, [r3, #8]
 80169ae:	4992      	ldr	r1, [pc, #584]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80169b0:	4313      	orrs	r3, r2
 80169b2:	2288      	movs	r2, #136	@ 0x88
 80169b4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	2210      	movs	r2, #16
 80169bc:	4013      	ands	r3, r2
 80169be:	d00a      	beq.n	80169d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80169c0:	4a8d      	ldr	r2, [pc, #564]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80169c2:	2388      	movs	r3, #136	@ 0x88
 80169c4:	58d3      	ldr	r3, [r2, r3]
 80169c6:	4a8e      	ldr	r2, [pc, #568]	@ (8016c00 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80169c8:	401a      	ands	r2, r3
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	695b      	ldr	r3, [r3, #20]
 80169ce:	498a      	ldr	r1, [pc, #552]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80169d0:	4313      	orrs	r3, r2
 80169d2:	2288      	movs	r2, #136	@ 0x88
 80169d4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	2208      	movs	r2, #8
 80169dc:	4013      	ands	r3, r2
 80169de:	d00a      	beq.n	80169f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80169e0:	4a85      	ldr	r2, [pc, #532]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80169e2:	2388      	movs	r3, #136	@ 0x88
 80169e4:	58d3      	ldr	r3, [r2, r3]
 80169e6:	4a87      	ldr	r2, [pc, #540]	@ (8016c04 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80169e8:	401a      	ands	r2, r3
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	691b      	ldr	r3, [r3, #16]
 80169ee:	4982      	ldr	r1, [pc, #520]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80169f0:	4313      	orrs	r3, r2
 80169f2:	2288      	movs	r2, #136	@ 0x88
 80169f4:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	2204      	movs	r2, #4
 80169fc:	4013      	ands	r3, r2
 80169fe:	d00b      	beq.n	8016a18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8016a00:	4a7d      	ldr	r2, [pc, #500]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a02:	2388      	movs	r3, #136	@ 0x88
 8016a04:	58d3      	ldr	r3, [r2, r3]
 8016a06:	22c0      	movs	r2, #192	@ 0xc0
 8016a08:	4393      	bics	r3, r2
 8016a0a:	001a      	movs	r2, r3
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	68db      	ldr	r3, [r3, #12]
 8016a10:	4979      	ldr	r1, [pc, #484]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a12:	4313      	orrs	r3, r2
 8016a14:	2288      	movs	r2, #136	@ 0x88
 8016a16:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2220      	movs	r2, #32
 8016a1e:	4013      	ands	r3, r2
 8016a20:	d00a      	beq.n	8016a38 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8016a22:	4a75      	ldr	r2, [pc, #468]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a24:	2388      	movs	r3, #136	@ 0x88
 8016a26:	58d3      	ldr	r3, [r2, r3]
 8016a28:	4a77      	ldr	r2, [pc, #476]	@ (8016c08 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8016a2a:	401a      	ands	r2, r3
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	699b      	ldr	r3, [r3, #24]
 8016a30:	4971      	ldr	r1, [pc, #452]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a32:	4313      	orrs	r3, r2
 8016a34:	2288      	movs	r2, #136	@ 0x88
 8016a36:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	2240      	movs	r2, #64	@ 0x40
 8016a3e:	4013      	ands	r3, r2
 8016a40:	d00a      	beq.n	8016a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8016a42:	4a6d      	ldr	r2, [pc, #436]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a44:	2388      	movs	r3, #136	@ 0x88
 8016a46:	58d3      	ldr	r3, [r2, r3]
 8016a48:	4a70      	ldr	r2, [pc, #448]	@ (8016c0c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8016a4a:	401a      	ands	r2, r3
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	69db      	ldr	r3, [r3, #28]
 8016a50:	4969      	ldr	r1, [pc, #420]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a52:	4313      	orrs	r3, r2
 8016a54:	2288      	movs	r2, #136	@ 0x88
 8016a56:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	2280      	movs	r2, #128	@ 0x80
 8016a5e:	4013      	ands	r3, r2
 8016a60:	d00a      	beq.n	8016a78 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016a62:	4a65      	ldr	r2, [pc, #404]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a64:	2388      	movs	r3, #136	@ 0x88
 8016a66:	58d3      	ldr	r3, [r2, r3]
 8016a68:	4a69      	ldr	r2, [pc, #420]	@ (8016c10 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8016a6a:	401a      	ands	r2, r3
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	6a1b      	ldr	r3, [r3, #32]
 8016a70:	4961      	ldr	r1, [pc, #388]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a72:	4313      	orrs	r3, r2
 8016a74:	2288      	movs	r2, #136	@ 0x88
 8016a76:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681a      	ldr	r2, [r3, #0]
 8016a7c:	2380      	movs	r3, #128	@ 0x80
 8016a7e:	005b      	lsls	r3, r3, #1
 8016a80:	4013      	ands	r3, r2
 8016a82:	d00a      	beq.n	8016a9a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016a84:	4a5c      	ldr	r2, [pc, #368]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a86:	2388      	movs	r3, #136	@ 0x88
 8016a88:	58d3      	ldr	r3, [r2, r3]
 8016a8a:	4a62      	ldr	r2, [pc, #392]	@ (8016c14 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8016a8c:	401a      	ands	r2, r3
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a92:	4959      	ldr	r1, [pc, #356]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016a94:	4313      	orrs	r3, r2
 8016a96:	2288      	movs	r2, #136	@ 0x88
 8016a98:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681a      	ldr	r2, [r3, #0]
 8016a9e:	2380      	movs	r3, #128	@ 0x80
 8016aa0:	009b      	lsls	r3, r3, #2
 8016aa2:	4013      	ands	r3, r2
 8016aa4:	d00a      	beq.n	8016abc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8016aa6:	4a54      	ldr	r2, [pc, #336]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016aa8:	2388      	movs	r3, #136	@ 0x88
 8016aaa:	58d3      	ldr	r3, [r2, r3]
 8016aac:	4a5a      	ldr	r2, [pc, #360]	@ (8016c18 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8016aae:	401a      	ands	r2, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ab4:	4950      	ldr	r1, [pc, #320]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016ab6:	4313      	orrs	r3, r2
 8016ab8:	2288      	movs	r2, #136	@ 0x88
 8016aba:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	2380      	movs	r3, #128	@ 0x80
 8016ac2:	01db      	lsls	r3, r3, #7
 8016ac4:	4013      	ands	r3, r2
 8016ac6:	d017      	beq.n	8016af8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016acc:	2380      	movs	r3, #128	@ 0x80
 8016ace:	055b      	lsls	r3, r3, #21
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d106      	bne.n	8016ae2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8016ad4:	4b48      	ldr	r3, [pc, #288]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016ad6:	68da      	ldr	r2, [r3, #12]
 8016ad8:	4b47      	ldr	r3, [pc, #284]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016ada:	2180      	movs	r1, #128	@ 0x80
 8016adc:	0249      	lsls	r1, r1, #9
 8016ade:	430a      	orrs	r2, r1
 8016ae0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016ae2:	4a45      	ldr	r2, [pc, #276]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016ae4:	2388      	movs	r3, #136	@ 0x88
 8016ae6:	58d3      	ldr	r3, [r2, r3]
 8016ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8016c1c <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8016aea:	401a      	ands	r2, r3
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016af0:	4941      	ldr	r1, [pc, #260]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016af2:	4313      	orrs	r3, r2
 8016af4:	2288      	movs	r2, #136	@ 0x88
 8016af6:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	2380      	movs	r3, #128	@ 0x80
 8016afe:	015b      	lsls	r3, r3, #5
 8016b00:	4013      	ands	r3, r2
 8016b02:	d017      	beq.n	8016b34 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016b08:	2380      	movs	r3, #128	@ 0x80
 8016b0a:	051b      	lsls	r3, r3, #20
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d106      	bne.n	8016b1e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016b10:	4b39      	ldr	r3, [pc, #228]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b12:	68da      	ldr	r2, [r3, #12]
 8016b14:	4b38      	ldr	r3, [pc, #224]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b16:	2180      	movs	r1, #128	@ 0x80
 8016b18:	0449      	lsls	r1, r1, #17
 8016b1a:	430a      	orrs	r2, r1
 8016b1c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016b1e:	4a36      	ldr	r2, [pc, #216]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b20:	2388      	movs	r3, #136	@ 0x88
 8016b22:	58d3      	ldr	r3, [r2, r3]
 8016b24:	4a3e      	ldr	r2, [pc, #248]	@ (8016c20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8016b26:	401a      	ands	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b2c:	4932      	ldr	r1, [pc, #200]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	2288      	movs	r2, #136	@ 0x88
 8016b32:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	681a      	ldr	r2, [r3, #0]
 8016b38:	2380      	movs	r3, #128	@ 0x80
 8016b3a:	019b      	lsls	r3, r3, #6
 8016b3c:	4013      	ands	r3, r2
 8016b3e:	d017      	beq.n	8016b70 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016b44:	2380      	movs	r3, #128	@ 0x80
 8016b46:	051b      	lsls	r3, r3, #20
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d106      	bne.n	8016b5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b4e:	68da      	ldr	r2, [r3, #12]
 8016b50:	4b29      	ldr	r3, [pc, #164]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b52:	2180      	movs	r1, #128	@ 0x80
 8016b54:	0449      	lsls	r1, r1, #17
 8016b56:	430a      	orrs	r2, r1
 8016b58:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016b5a:	4a27      	ldr	r2, [pc, #156]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b5c:	2388      	movs	r3, #136	@ 0x88
 8016b5e:	58d3      	ldr	r3, [r2, r3]
 8016b60:	4a2f      	ldr	r2, [pc, #188]	@ (8016c20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8016b62:	401a      	ands	r2, r3
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b68:	4923      	ldr	r1, [pc, #140]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b6a:	4313      	orrs	r3, r2
 8016b6c:	2288      	movs	r2, #136	@ 0x88
 8016b6e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	681a      	ldr	r2, [r3, #0]
 8016b74:	2380      	movs	r3, #128	@ 0x80
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	4013      	ands	r3, r2
 8016b7a:	d017      	beq.n	8016bac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b80:	2380      	movs	r3, #128	@ 0x80
 8016b82:	045b      	lsls	r3, r3, #17
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d106      	bne.n	8016b96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016b88:	4b1b      	ldr	r3, [pc, #108]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b8a:	68da      	ldr	r2, [r3, #12]
 8016b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b8e:	2180      	movs	r1, #128	@ 0x80
 8016b90:	0449      	lsls	r1, r1, #17
 8016b92:	430a      	orrs	r2, r1
 8016b94:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8016b96:	4a18      	ldr	r2, [pc, #96]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016b98:	2388      	movs	r3, #136	@ 0x88
 8016b9a:	58d3      	ldr	r3, [r2, r3]
 8016b9c:	4a21      	ldr	r2, [pc, #132]	@ (8016c24 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8016b9e:	401a      	ands	r2, r3
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ba4:	4914      	ldr	r1, [pc, #80]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016ba6:	4313      	orrs	r3, r2
 8016ba8:	2288      	movs	r2, #136	@ 0x88
 8016baa:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	681a      	ldr	r2, [r3, #0]
 8016bb0:	2380      	movs	r3, #128	@ 0x80
 8016bb2:	011b      	lsls	r3, r3, #4
 8016bb4:	4013      	ands	r3, r2
 8016bb6:	d017      	beq.n	8016be8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016bbc:	2380      	movs	r3, #128	@ 0x80
 8016bbe:	049b      	lsls	r3, r3, #18
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d106      	bne.n	8016bd2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8016bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bc6:	68da      	ldr	r2, [r3, #12]
 8016bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bca:	2180      	movs	r1, #128	@ 0x80
 8016bcc:	0449      	lsls	r1, r1, #17
 8016bce:	430a      	orrs	r2, r1
 8016bd0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8016bd2:	4a09      	ldr	r2, [pc, #36]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016bd4:	2388      	movs	r3, #136	@ 0x88
 8016bd6:	58d3      	ldr	r3, [r2, r3]
 8016bd8:	4a12      	ldr	r2, [pc, #72]	@ (8016c24 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8016bda:	401a      	ands	r2, r3
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016be0:	4905      	ldr	r1, [pc, #20]	@ (8016bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8016be2:	4313      	orrs	r3, r2
 8016be4:	2288      	movs	r2, #136	@ 0x88
 8016be6:	508b      	str	r3, [r1, r2]

  }

  return status;
 8016be8:	2312      	movs	r3, #18
 8016bea:	18fb      	adds	r3, r7, r3
 8016bec:	781b      	ldrb	r3, [r3, #0]
}
 8016bee:	0018      	movs	r0, r3
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	b006      	add	sp, #24
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	46c0      	nop			@ (mov r8, r8)
 8016bf8:	40021000 	.word	0x40021000
 8016bfc:	efffffff 	.word	0xefffffff
 8016c00:	fffff3ff 	.word	0xfffff3ff
 8016c04:	fffffcff 	.word	0xfffffcff
 8016c08:	ffffcfff 	.word	0xffffcfff
 8016c0c:	fffcffff 	.word	0xfffcffff
 8016c10:	fff3ffff 	.word	0xfff3ffff
 8016c14:	ffcfffff 	.word	0xffcfffff
 8016c18:	ff3fffff 	.word	0xff3fffff
 8016c1c:	cfffffff 	.word	0xcfffffff
 8016c20:	f3ffffff 	.word	0xf3ffffff
 8016c24:	feffffff 	.word	0xfeffffff

08016c28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8016c28:	b590      	push	{r4, r7, lr}
 8016c2a:	b089      	sub	sp, #36	@ 0x24
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8016c30:	2300      	movs	r3, #0
 8016c32:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8016c34:	687a      	ldr	r2, [r7, #4]
 8016c36:	2380      	movs	r3, #128	@ 0x80
 8016c38:	021b      	lsls	r3, r3, #8
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d154      	bne.n	8016ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8016c3e:	4ad5      	ldr	r2, [pc, #852]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016c40:	2390      	movs	r3, #144	@ 0x90
 8016c42:	58d2      	ldr	r2, [r2, r3]
 8016c44:	23c0      	movs	r3, #192	@ 0xc0
 8016c46:	009b      	lsls	r3, r3, #2
 8016c48:	4013      	ands	r3, r2
 8016c4a:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8016c4c:	697a      	ldr	r2, [r7, #20]
 8016c4e:	23c0      	movs	r3, #192	@ 0xc0
 8016c50:	009b      	lsls	r3, r3, #2
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d039      	beq.n	8016cca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8016c56:	697a      	ldr	r2, [r7, #20]
 8016c58:	23c0      	movs	r3, #192	@ 0xc0
 8016c5a:	009b      	lsls	r3, r3, #2
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	d901      	bls.n	8016c64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8016c60:	f000 fd1a 	bl	8017698 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8016c64:	697a      	ldr	r2, [r7, #20]
 8016c66:	2380      	movs	r3, #128	@ 0x80
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d006      	beq.n	8016c7c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8016c6e:	697a      	ldr	r2, [r7, #20]
 8016c70:	2380      	movs	r3, #128	@ 0x80
 8016c72:	009b      	lsls	r3, r3, #2
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d00f      	beq.n	8016c98 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8016c78:	f000 fd0e 	bl	8017698 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016c7c:	4ac5      	ldr	r2, [pc, #788]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016c7e:	2390      	movs	r3, #144	@ 0x90
 8016c80:	58d3      	ldr	r3, [r2, r3]
 8016c82:	2202      	movs	r2, #2
 8016c84:	4013      	ands	r3, r2
 8016c86:	2b02      	cmp	r3, #2
 8016c88:	d001      	beq.n	8016c8e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8016c8a:	f000 fd07 	bl	801769c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8016c8e:	2380      	movs	r3, #128	@ 0x80
 8016c90:	021b      	lsls	r3, r3, #8
 8016c92:	61fb      	str	r3, [r7, #28]
        break;
 8016c94:	f000 fd02 	bl	801769c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8016c98:	4abe      	ldr	r2, [pc, #760]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016c9a:	2394      	movs	r3, #148	@ 0x94
 8016c9c:	58d3      	ldr	r3, [r2, r3]
 8016c9e:	2202      	movs	r2, #2
 8016ca0:	4013      	ands	r3, r2
 8016ca2:	2b02      	cmp	r3, #2
 8016ca4:	d001      	beq.n	8016caa <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8016ca6:	f000 fcfb 	bl	80176a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8016caa:	4aba      	ldr	r2, [pc, #744]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016cac:	2394      	movs	r3, #148	@ 0x94
 8016cae:	58d3      	ldr	r3, [r2, r3]
 8016cb0:	2204      	movs	r2, #4
 8016cb2:	4013      	ands	r3, r2
 8016cb4:	2b04      	cmp	r3, #4
 8016cb6:	d103      	bne.n	8016cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8016cb8:	23fa      	movs	r3, #250	@ 0xfa
 8016cba:	61fb      	str	r3, [r7, #28]
        break;
 8016cbc:	f000 fcf0 	bl	80176a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8016cc0:	23fa      	movs	r3, #250	@ 0xfa
 8016cc2:	01db      	lsls	r3, r3, #7
 8016cc4:	61fb      	str	r3, [r7, #28]
        break;
 8016cc6:	f000 fceb 	bl	80176a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016cca:	4bb2      	ldr	r3, [pc, #712]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016ccc:	681a      	ldr	r2, [r3, #0]
 8016cce:	2380      	movs	r3, #128	@ 0x80
 8016cd0:	029b      	lsls	r3, r3, #10
 8016cd2:	401a      	ands	r2, r3
 8016cd4:	2380      	movs	r3, #128	@ 0x80
 8016cd6:	029b      	lsls	r3, r3, #10
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	d001      	beq.n	8016ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8016cdc:	f000 fce2 	bl	80176a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8016ce0:	4bad      	ldr	r3, [pc, #692]	@ (8016f98 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8016ce2:	61fb      	str	r3, [r7, #28]
        break;
 8016ce4:	f000 fcde 	bl	80176a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8016ce8:	687a      	ldr	r2, [r7, #4]
 8016cea:	2380      	movs	r3, #128	@ 0x80
 8016cec:	029b      	lsls	r3, r3, #10
 8016cee:	429a      	cmp	r2, r3
 8016cf0:	d100      	bne.n	8016cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8016cf2:	e11a      	b.n	8016f2a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	2380      	movs	r3, #128	@ 0x80
 8016cf8:	029b      	lsls	r3, r3, #10
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d901      	bls.n	8016d02 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8016cfe:	f000 fcd3 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	2380      	movs	r3, #128	@ 0x80
 8016d06:	025b      	lsls	r3, r3, #9
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d100      	bne.n	8016d0e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8016d0c:	e10d      	b.n	8016f2a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	2380      	movs	r3, #128	@ 0x80
 8016d12:	025b      	lsls	r3, r3, #9
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d901      	bls.n	8016d1c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8016d18:	f000 fcc6 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	2380      	movs	r3, #128	@ 0x80
 8016d20:	01db      	lsls	r3, r3, #7
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d100      	bne.n	8016d28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8016d26:	e1eb      	b.n	8017100 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8016d28:	687a      	ldr	r2, [r7, #4]
 8016d2a:	2380      	movs	r3, #128	@ 0x80
 8016d2c:	01db      	lsls	r3, r3, #7
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	d901      	bls.n	8016d36 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8016d32:	f000 fcb9 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016d36:	687a      	ldr	r2, [r7, #4]
 8016d38:	2380      	movs	r3, #128	@ 0x80
 8016d3a:	019b      	lsls	r3, r3, #6
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d101      	bne.n	8016d44 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8016d40:	f000 fc50 	bl	80175e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	2380      	movs	r3, #128	@ 0x80
 8016d48:	019b      	lsls	r3, r3, #6
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d901      	bls.n	8016d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8016d4e:	f000 fcab 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016d52:	687a      	ldr	r2, [r7, #4]
 8016d54:	2380      	movs	r3, #128	@ 0x80
 8016d56:	015b      	lsls	r3, r3, #5
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d101      	bne.n	8016d60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8016d5c:	f000 fbe2 	bl	8017524 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	2380      	movs	r3, #128	@ 0x80
 8016d64:	015b      	lsls	r3, r3, #5
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d901      	bls.n	8016d6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8016d6a:	f000 fc9d 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	2380      	movs	r3, #128	@ 0x80
 8016d72:	011b      	lsls	r3, r3, #4
 8016d74:	429a      	cmp	r2, r3
 8016d76:	d101      	bne.n	8016d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8016d78:	f000 fba9 	bl	80174ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8016d7c:	687a      	ldr	r2, [r7, #4]
 8016d7e:	2380      	movs	r3, #128	@ 0x80
 8016d80:	011b      	lsls	r3, r3, #4
 8016d82:	429a      	cmp	r2, r3
 8016d84:	d901      	bls.n	8016d8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8016d86:	f000 fc8f 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016d8a:	687a      	ldr	r2, [r7, #4]
 8016d8c:	2380      	movs	r3, #128	@ 0x80
 8016d8e:	00db      	lsls	r3, r3, #3
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d101      	bne.n	8016d98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8016d94:	f000 fb70 	bl	8017478 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8016d98:	687a      	ldr	r2, [r7, #4]
 8016d9a:	2380      	movs	r3, #128	@ 0x80
 8016d9c:	00db      	lsls	r3, r3, #3
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d901      	bls.n	8016da6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8016da2:	f000 fc81 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016da6:	687a      	ldr	r2, [r7, #4]
 8016da8:	2380      	movs	r3, #128	@ 0x80
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d100      	bne.n	8016db2 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8016db0:	e305      	b.n	80173be <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8016db2:	687a      	ldr	r2, [r7, #4]
 8016db4:	2380      	movs	r3, #128	@ 0x80
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	429a      	cmp	r2, r3
 8016dba:	d901      	bls.n	8016dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8016dbc:	f000 fc74 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016dc0:	687a      	ldr	r2, [r7, #4]
 8016dc2:	2380      	movs	r3, #128	@ 0x80
 8016dc4:	005b      	lsls	r3, r3, #1
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d100      	bne.n	8016dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8016dca:	e29b      	b.n	8017304 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8016dcc:	687a      	ldr	r2, [r7, #4]
 8016dce:	2380      	movs	r3, #128	@ 0x80
 8016dd0:	005b      	lsls	r3, r3, #1
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d901      	bls.n	8016dda <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8016dd6:	f000 fc67 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2b80      	cmp	r3, #128	@ 0x80
 8016dde:	d100      	bne.n	8016de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8016de0:	e22f      	b.n	8017242 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	2b80      	cmp	r3, #128	@ 0x80
 8016de6:	d901      	bls.n	8016dec <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8016de8:	f000 fc5e 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2b20      	cmp	r3, #32
 8016df0:	d80f      	bhi.n	8016e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d101      	bne.n	8016dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8016df8:	f000 fc56 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2b20      	cmp	r3, #32
 8016e00:	d901      	bls.n	8016e06 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8016e02:	f000 fc51 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	009a      	lsls	r2, r3, #2
 8016e0a:	4b64      	ldr	r3, [pc, #400]	@ (8016f9c <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8016e0c:	18d3      	adds	r3, r2, r3
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	469f      	mov	pc, r3
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2b40      	cmp	r3, #64	@ 0x40
 8016e16:	d100      	bne.n	8016e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8016e18:	e1df      	b.n	80171da <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8016e1a:	f000 fc45 	bl	80176a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8016e1e:	4a5d      	ldr	r2, [pc, #372]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016e20:	2388      	movs	r3, #136	@ 0x88
 8016e22:	58d3      	ldr	r3, [r2, r3]
 8016e24:	2203      	movs	r2, #3
 8016e26:	4013      	ands	r3, r2
 8016e28:	617b      	str	r3, [r7, #20]
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	2b03      	cmp	r3, #3
 8016e2e:	d025      	beq.n	8016e7c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8016e30:	697b      	ldr	r3, [r7, #20]
 8016e32:	2b03      	cmp	r3, #3
 8016e34:	d82d      	bhi.n	8016e92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	2b02      	cmp	r3, #2
 8016e3a:	d013      	beq.n	8016e64 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	2b02      	cmp	r3, #2
 8016e40:	d827      	bhi.n	8016e92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d003      	beq.n	8016e50 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8016e48:	697b      	ldr	r3, [r7, #20]
 8016e4a:	2b01      	cmp	r3, #1
 8016e4c:	d005      	beq.n	8016e5a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 8016e4e:	e020      	b.n	8016e92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016e50:	f7ff fc40 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8016e54:	0003      	movs	r3, r0
 8016e56:	61fb      	str	r3, [r7, #28]
            break;
 8016e58:	e022      	b.n	8016ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8016e5a:	f7ff fb95 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 8016e5e:	0003      	movs	r3, r0
 8016e60:	61fb      	str	r3, [r7, #28]
            break;
 8016e62:	e01d      	b.n	8016ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016e64:	4b4b      	ldr	r3, [pc, #300]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016e66:	681a      	ldr	r2, [r3, #0]
 8016e68:	2380      	movs	r3, #128	@ 0x80
 8016e6a:	00db      	lsls	r3, r3, #3
 8016e6c:	401a      	ands	r2, r3
 8016e6e:	2380      	movs	r3, #128	@ 0x80
 8016e70:	00db      	lsls	r3, r3, #3
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d110      	bne.n	8016e98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8016e76:	4b4a      	ldr	r3, [pc, #296]	@ (8016fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8016e78:	61fb      	str	r3, [r7, #28]
            break;
 8016e7a:	e00d      	b.n	8016e98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016e7c:	4a45      	ldr	r2, [pc, #276]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016e7e:	2390      	movs	r3, #144	@ 0x90
 8016e80:	58d3      	ldr	r3, [r2, r3]
 8016e82:	2202      	movs	r2, #2
 8016e84:	4013      	ands	r3, r2
 8016e86:	2b02      	cmp	r3, #2
 8016e88:	d109      	bne.n	8016e9e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8016e8a:	2380      	movs	r3, #128	@ 0x80
 8016e8c:	021b      	lsls	r3, r3, #8
 8016e8e:	61fb      	str	r3, [r7, #28]
            break;
 8016e90:	e005      	b.n	8016e9e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 8016e92:	46c0      	nop			@ (mov r8, r8)
 8016e94:	f000 fc09 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016e98:	46c0      	nop			@ (mov r8, r8)
 8016e9a:	f000 fc06 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016e9e:	46c0      	nop			@ (mov r8, r8)
        break;
 8016ea0:	f000 fc03 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8016ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016ea6:	2388      	movs	r3, #136	@ 0x88
 8016ea8:	58d3      	ldr	r3, [r2, r3]
 8016eaa:	220c      	movs	r2, #12
 8016eac:	4013      	ands	r3, r2
 8016eae:	617b      	str	r3, [r7, #20]
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	2b0c      	cmp	r3, #12
 8016eb4:	d025      	beq.n	8016f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 8016eb6:	697b      	ldr	r3, [r7, #20]
 8016eb8:	2b0c      	cmp	r3, #12
 8016eba:	d82d      	bhi.n	8016f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8016ebc:	697b      	ldr	r3, [r7, #20]
 8016ebe:	2b08      	cmp	r3, #8
 8016ec0:	d013      	beq.n	8016eea <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	2b08      	cmp	r3, #8
 8016ec6:	d827      	bhi.n	8016f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8016ec8:	697b      	ldr	r3, [r7, #20]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d003      	beq.n	8016ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	2b04      	cmp	r3, #4
 8016ed2:	d005      	beq.n	8016ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8016ed4:	e020      	b.n	8016f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016ed6:	f7ff fbfd 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8016eda:	0003      	movs	r3, r0
 8016edc:	61fb      	str	r3, [r7, #28]
            break;
 8016ede:	e022      	b.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8016ee0:	f7ff fb52 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 8016ee4:	0003      	movs	r3, r0
 8016ee6:	61fb      	str	r3, [r7, #28]
            break;
 8016ee8:	e01d      	b.n	8016f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016eea:	4b2a      	ldr	r3, [pc, #168]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	2380      	movs	r3, #128	@ 0x80
 8016ef0:	00db      	lsls	r3, r3, #3
 8016ef2:	401a      	ands	r2, r3
 8016ef4:	2380      	movs	r3, #128	@ 0x80
 8016ef6:	00db      	lsls	r3, r3, #3
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	d110      	bne.n	8016f1e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8016efc:	4b28      	ldr	r3, [pc, #160]	@ (8016fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8016efe:	61fb      	str	r3, [r7, #28]
            break;
 8016f00:	e00d      	b.n	8016f1e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016f02:	4a24      	ldr	r2, [pc, #144]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016f04:	2390      	movs	r3, #144	@ 0x90
 8016f06:	58d3      	ldr	r3, [r2, r3]
 8016f08:	2202      	movs	r2, #2
 8016f0a:	4013      	ands	r3, r2
 8016f0c:	2b02      	cmp	r3, #2
 8016f0e:	d109      	bne.n	8016f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8016f10:	2380      	movs	r3, #128	@ 0x80
 8016f12:	021b      	lsls	r3, r3, #8
 8016f14:	61fb      	str	r3, [r7, #28]
            break;
 8016f16:	e005      	b.n	8016f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8016f18:	46c0      	nop			@ (mov r8, r8)
 8016f1a:	f000 fbc6 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016f1e:	46c0      	nop			@ (mov r8, r8)
 8016f20:	f000 fbc3 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016f24:	46c0      	nop			@ (mov r8, r8)
        break;
 8016f26:	f000 fbc0 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8016f2a:	f7ff fbd3 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8016f2e:	0003      	movs	r3, r0
 8016f30:	61fb      	str	r3, [r7, #28]
        break;
 8016f32:	f000 fbba 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8016f36:	4a17      	ldr	r2, [pc, #92]	@ (8016f94 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8016f38:	2388      	movs	r3, #136	@ 0x88
 8016f3a:	58d2      	ldr	r2, [r2, r3]
 8016f3c:	23c0      	movs	r3, #192	@ 0xc0
 8016f3e:	011b      	lsls	r3, r3, #4
 8016f40:	4013      	ands	r3, r2
 8016f42:	617b      	str	r3, [r7, #20]
 8016f44:	697a      	ldr	r2, [r7, #20]
 8016f46:	23c0      	movs	r3, #192	@ 0xc0
 8016f48:	011b      	lsls	r3, r3, #4
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d036      	beq.n	8016fbc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8016f4e:	697a      	ldr	r2, [r7, #20]
 8016f50:	23c0      	movs	r3, #192	@ 0xc0
 8016f52:	011b      	lsls	r3, r3, #4
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d83c      	bhi.n	8016fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8016f58:	697a      	ldr	r2, [r7, #20]
 8016f5a:	2380      	movs	r3, #128	@ 0x80
 8016f5c:	011b      	lsls	r3, r3, #4
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d020      	beq.n	8016fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8016f62:	697a      	ldr	r2, [r7, #20]
 8016f64:	2380      	movs	r3, #128	@ 0x80
 8016f66:	011b      	lsls	r3, r3, #4
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d832      	bhi.n	8016fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8016f6c:	697b      	ldr	r3, [r7, #20]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d005      	beq.n	8016f7e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8016f72:	697a      	ldr	r2, [r7, #20]
 8016f74:	2380      	movs	r3, #128	@ 0x80
 8016f76:	00db      	lsls	r3, r3, #3
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d005      	beq.n	8016f88 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8016f7c:	e029      	b.n	8016fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8016f7e:	f7ff fba9 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8016f82:	0003      	movs	r3, r0
 8016f84:	61fb      	str	r3, [r7, #28]
            break;
 8016f86:	e02b      	b.n	8016fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8016f88:	f7ff fafe 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 8016f8c:	0003      	movs	r3, r0
 8016f8e:	61fb      	str	r3, [r7, #28]
            break;
 8016f90:	e026      	b.n	8016fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8016f92:	46c0      	nop			@ (mov r8, r8)
 8016f94:	40021000 	.word	0x40021000
 8016f98:	0001e848 	.word	0x0001e848
 8016f9c:	0801b314 	.word	0x0801b314
 8016fa0:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8016fa4:	4bbb      	ldr	r3, [pc, #748]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	2380      	movs	r3, #128	@ 0x80
 8016faa:	00db      	lsls	r3, r3, #3
 8016fac:	401a      	ands	r2, r3
 8016fae:	2380      	movs	r3, #128	@ 0x80
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d110      	bne.n	8016fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8016fb6:	4bb8      	ldr	r3, [pc, #736]	@ (8017298 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8016fb8:	61fb      	str	r3, [r7, #28]
            break;
 8016fba:	e00d      	b.n	8016fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8016fbc:	4ab5      	ldr	r2, [pc, #724]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016fbe:	2390      	movs	r3, #144	@ 0x90
 8016fc0:	58d3      	ldr	r3, [r2, r3]
 8016fc2:	2202      	movs	r2, #2
 8016fc4:	4013      	ands	r3, r2
 8016fc6:	2b02      	cmp	r3, #2
 8016fc8:	d109      	bne.n	8016fde <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8016fca:	2380      	movs	r3, #128	@ 0x80
 8016fcc:	021b      	lsls	r3, r3, #8
 8016fce:	61fb      	str	r3, [r7, #28]
            break;
 8016fd0:	e005      	b.n	8016fde <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8016fd2:	46c0      	nop			@ (mov r8, r8)
 8016fd4:	f000 fb69 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016fd8:	46c0      	nop			@ (mov r8, r8)
 8016fda:	f000 fb66 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8016fde:	46c0      	nop			@ (mov r8, r8)
        break;
 8016fe0:	f000 fb63 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8016fe4:	4aab      	ldr	r2, [pc, #684]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8016fe6:	2388      	movs	r3, #136	@ 0x88
 8016fe8:	58d2      	ldr	r2, [r2, r3]
 8016fea:	23c0      	movs	r3, #192	@ 0xc0
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	4013      	ands	r3, r2
 8016ff0:	617b      	str	r3, [r7, #20]
 8016ff2:	697a      	ldr	r2, [r7, #20]
 8016ff4:	23c0      	movs	r3, #192	@ 0xc0
 8016ff6:	009b      	lsls	r3, r3, #2
 8016ff8:	429a      	cmp	r2, r3
 8016ffa:	d02d      	beq.n	8017058 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8016ffc:	697a      	ldr	r2, [r7, #20]
 8016ffe:	23c0      	movs	r3, #192	@ 0xc0
 8017000:	009b      	lsls	r3, r3, #2
 8017002:	429a      	cmp	r2, r3
 8017004:	d833      	bhi.n	801706e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8017006:	697a      	ldr	r2, [r7, #20]
 8017008:	2380      	movs	r3, #128	@ 0x80
 801700a:	009b      	lsls	r3, r3, #2
 801700c:	429a      	cmp	r2, r3
 801700e:	d017      	beq.n	8017040 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8017010:	697a      	ldr	r2, [r7, #20]
 8017012:	2380      	movs	r3, #128	@ 0x80
 8017014:	009b      	lsls	r3, r3, #2
 8017016:	429a      	cmp	r2, r3
 8017018:	d829      	bhi.n	801706e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 801701a:	697b      	ldr	r3, [r7, #20]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d005      	beq.n	801702c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8017020:	697a      	ldr	r2, [r7, #20]
 8017022:	2380      	movs	r3, #128	@ 0x80
 8017024:	005b      	lsls	r3, r3, #1
 8017026:	429a      	cmp	r2, r3
 8017028:	d005      	beq.n	8017036 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 801702a:	e020      	b.n	801706e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 801702c:	f7ff fb52 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8017030:	0003      	movs	r3, r0
 8017032:	61fb      	str	r3, [r7, #28]
            break;
 8017034:	e022      	b.n	801707c <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8017036:	f7ff faa7 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 801703a:	0003      	movs	r3, r0
 801703c:	61fb      	str	r3, [r7, #28]
            break;
 801703e:	e01d      	b.n	801707c <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017040:	4b94      	ldr	r3, [pc, #592]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017042:	681a      	ldr	r2, [r3, #0]
 8017044:	2380      	movs	r3, #128	@ 0x80
 8017046:	00db      	lsls	r3, r3, #3
 8017048:	401a      	ands	r2, r3
 801704a:	2380      	movs	r3, #128	@ 0x80
 801704c:	00db      	lsls	r3, r3, #3
 801704e:	429a      	cmp	r2, r3
 8017050:	d110      	bne.n	8017074 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8017052:	4b91      	ldr	r3, [pc, #580]	@ (8017298 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017054:	61fb      	str	r3, [r7, #28]
            break;
 8017056:	e00d      	b.n	8017074 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017058:	4a8e      	ldr	r2, [pc, #568]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 801705a:	2390      	movs	r3, #144	@ 0x90
 801705c:	58d3      	ldr	r3, [r2, r3]
 801705e:	2202      	movs	r2, #2
 8017060:	4013      	ands	r3, r2
 8017062:	2b02      	cmp	r3, #2
 8017064:	d109      	bne.n	801707a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8017066:	2380      	movs	r3, #128	@ 0x80
 8017068:	021b      	lsls	r3, r3, #8
 801706a:	61fb      	str	r3, [r7, #28]
            break;
 801706c:	e005      	b.n	801707a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 801706e:	46c0      	nop			@ (mov r8, r8)
 8017070:	f000 fb1b 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017074:	46c0      	nop			@ (mov r8, r8)
 8017076:	f000 fb18 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801707a:	46c0      	nop			@ (mov r8, r8)
        break;
 801707c:	f000 fb15 	bl	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8017080:	4a84      	ldr	r2, [pc, #528]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017082:	2388      	movs	r3, #136	@ 0x88
 8017084:	58d3      	ldr	r3, [r2, r3]
 8017086:	22c0      	movs	r2, #192	@ 0xc0
 8017088:	4013      	ands	r3, r2
 801708a:	617b      	str	r3, [r7, #20]
 801708c:	697b      	ldr	r3, [r7, #20]
 801708e:	2bc0      	cmp	r3, #192	@ 0xc0
 8017090:	d025      	beq.n	80170de <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8017092:	697b      	ldr	r3, [r7, #20]
 8017094:	2bc0      	cmp	r3, #192	@ 0xc0
 8017096:	d82d      	bhi.n	80170f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	2b80      	cmp	r3, #128	@ 0x80
 801709c:	d013      	beq.n	80170c6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	2b80      	cmp	r3, #128	@ 0x80
 80170a2:	d827      	bhi.n	80170f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d003      	beq.n	80170b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	2b40      	cmp	r3, #64	@ 0x40
 80170ae:	d005      	beq.n	80170bc <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80170b0:	e020      	b.n	80170f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80170b2:	f7ff fb0f 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 80170b6:	0003      	movs	r3, r0
 80170b8:	61fb      	str	r3, [r7, #28]
            break;
 80170ba:	e020      	b.n	80170fe <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 80170bc:	f7ff fa64 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 80170c0:	0003      	movs	r3, r0
 80170c2:	61fb      	str	r3, [r7, #28]
            break;
 80170c4:	e01b      	b.n	80170fe <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80170c6:	4b73      	ldr	r3, [pc, #460]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	2380      	movs	r3, #128	@ 0x80
 80170cc:	00db      	lsls	r3, r3, #3
 80170ce:	401a      	ands	r2, r3
 80170d0:	2380      	movs	r3, #128	@ 0x80
 80170d2:	00db      	lsls	r3, r3, #3
 80170d4:	429a      	cmp	r2, r3
 80170d6:	d10f      	bne.n	80170f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 80170d8:	4b6f      	ldr	r3, [pc, #444]	@ (8017298 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80170da:	61fb      	str	r3, [r7, #28]
            break;
 80170dc:	e00c      	b.n	80170f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80170de:	4a6d      	ldr	r2, [pc, #436]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80170e0:	2390      	movs	r3, #144	@ 0x90
 80170e2:	58d3      	ldr	r3, [r2, r3]
 80170e4:	2202      	movs	r2, #2
 80170e6:	4013      	ands	r3, r2
 80170e8:	2b02      	cmp	r3, #2
 80170ea:	d107      	bne.n	80170fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 80170ec:	2380      	movs	r3, #128	@ 0x80
 80170ee:	021b      	lsls	r3, r3, #8
 80170f0:	61fb      	str	r3, [r7, #28]
            break;
 80170f2:	e003      	b.n	80170fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 80170f4:	46c0      	nop			@ (mov r8, r8)
 80170f6:	e2d8      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80170f8:	46c0      	nop			@ (mov r8, r8)
 80170fa:	e2d6      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80170fc:	46c0      	nop			@ (mov r8, r8)
        break;
 80170fe:	e2d4      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8017100:	4a64      	ldr	r2, [pc, #400]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017102:	2388      	movs	r3, #136	@ 0x88
 8017104:	58d2      	ldr	r2, [r2, r3]
 8017106:	23c0      	movs	r3, #192	@ 0xc0
 8017108:	059b      	lsls	r3, r3, #22
 801710a:	4013      	ands	r3, r2
 801710c:	617b      	str	r3, [r7, #20]
 801710e:	697a      	ldr	r2, [r7, #20]
 8017110:	2380      	movs	r3, #128	@ 0x80
 8017112:	059b      	lsls	r3, r3, #22
 8017114:	429a      	cmp	r2, r3
 8017116:	d012      	beq.n	801713e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8017118:	697a      	ldr	r2, [r7, #20]
 801711a:	2380      	movs	r3, #128	@ 0x80
 801711c:	059b      	lsls	r3, r3, #22
 801711e:	429a      	cmp	r2, r3
 8017120:	d825      	bhi.n	801716e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d005      	beq.n	8017134 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8017128:	697a      	ldr	r2, [r7, #20]
 801712a:	2380      	movs	r3, #128	@ 0x80
 801712c:	055b      	lsls	r3, r3, #21
 801712e:	429a      	cmp	r2, r3
 8017130:	d014      	beq.n	801715c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8017132:	e01c      	b.n	801716e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8017134:	f7ff fa28 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 8017138:	0003      	movs	r3, r0
 801713a:	61fb      	str	r3, [r7, #28]
            break;
 801713c:	e018      	b.n	8017170 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801713e:	4b55      	ldr	r3, [pc, #340]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017140:	681a      	ldr	r2, [r3, #0]
 8017142:	2380      	movs	r3, #128	@ 0x80
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	401a      	ands	r2, r3
 8017148:	2380      	movs	r3, #128	@ 0x80
 801714a:	00db      	lsls	r3, r3, #3
 801714c:	429a      	cmp	r2, r3
 801714e:	d102      	bne.n	8017156 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8017150:	4b51      	ldr	r3, [pc, #324]	@ (8017298 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017152:	61fb      	str	r3, [r7, #28]
            break;
 8017154:	e00c      	b.n	8017170 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8017156:	2300      	movs	r3, #0
 8017158:	61fb      	str	r3, [r7, #28]
            break;
 801715a:	e009      	b.n	8017170 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 801715c:	2408      	movs	r4, #8
 801715e:	193b      	adds	r3, r7, r4
 8017160:	0018      	movs	r0, r3
 8017162:	f000 faad 	bl	80176c0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8017166:	193b      	adds	r3, r7, r4
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	61fb      	str	r3, [r7, #28]
            break;
 801716c:	e000      	b.n	8017170 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 801716e:	46c0      	nop			@ (mov r8, r8)
        break;
 8017170:	e29b      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8017172:	4a48      	ldr	r2, [pc, #288]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017174:	2388      	movs	r3, #136	@ 0x88
 8017176:	58d2      	ldr	r2, [r2, r3]
 8017178:	23c0      	movs	r3, #192	@ 0xc0
 801717a:	019b      	lsls	r3, r3, #6
 801717c:	4013      	ands	r3, r2
 801717e:	617b      	str	r3, [r7, #20]
 8017180:	697a      	ldr	r2, [r7, #20]
 8017182:	2380      	movs	r3, #128	@ 0x80
 8017184:	019b      	lsls	r3, r3, #6
 8017186:	429a      	cmp	r2, r3
 8017188:	d017      	beq.n	80171ba <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 801718a:	697a      	ldr	r2, [r7, #20]
 801718c:	2380      	movs	r3, #128	@ 0x80
 801718e:	019b      	lsls	r3, r3, #6
 8017190:	429a      	cmp	r2, r3
 8017192:	d81e      	bhi.n	80171d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d005      	beq.n	80171a6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 801719a:	697a      	ldr	r2, [r7, #20]
 801719c:	2380      	movs	r3, #128	@ 0x80
 801719e:	015b      	lsls	r3, r3, #5
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d005      	beq.n	80171b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80171a4:	e015      	b.n	80171d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80171a6:	f7ff fa95 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 80171aa:	0003      	movs	r3, r0
 80171ac:	61fb      	str	r3, [r7, #28]
            break;
 80171ae:	e013      	b.n	80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80171b0:	f7ff f9ea 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 80171b4:	0003      	movs	r3, r0
 80171b6:	61fb      	str	r3, [r7, #28]
            break;
 80171b8:	e00e      	b.n	80171d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80171ba:	4b36      	ldr	r3, [pc, #216]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	2380      	movs	r3, #128	@ 0x80
 80171c0:	00db      	lsls	r3, r3, #3
 80171c2:	401a      	ands	r2, r3
 80171c4:	2380      	movs	r3, #128	@ 0x80
 80171c6:	00db      	lsls	r3, r3, #3
 80171c8:	429a      	cmp	r2, r3
 80171ca:	d104      	bne.n	80171d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80171cc:	4b32      	ldr	r3, [pc, #200]	@ (8017298 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80171ce:	61fb      	str	r3, [r7, #28]
            break;
 80171d0:	e001      	b.n	80171d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80171d2:	46c0      	nop			@ (mov r8, r8)
 80171d4:	e269      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80171d6:	46c0      	nop			@ (mov r8, r8)
        break;
 80171d8:	e267      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80171da:	4a2e      	ldr	r2, [pc, #184]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80171dc:	2388      	movs	r3, #136	@ 0x88
 80171de:	58d2      	ldr	r2, [r2, r3]
 80171e0:	23c0      	movs	r3, #192	@ 0xc0
 80171e2:	029b      	lsls	r3, r3, #10
 80171e4:	4013      	ands	r3, r2
 80171e6:	617b      	str	r3, [r7, #20]
 80171e8:	697a      	ldr	r2, [r7, #20]
 80171ea:	2380      	movs	r3, #128	@ 0x80
 80171ec:	029b      	lsls	r3, r3, #10
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d017      	beq.n	8017222 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 80171f2:	697a      	ldr	r2, [r7, #20]
 80171f4:	2380      	movs	r3, #128	@ 0x80
 80171f6:	029b      	lsls	r3, r3, #10
 80171f8:	429a      	cmp	r2, r3
 80171fa:	d81e      	bhi.n	801723a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d005      	beq.n	801720e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8017202:	697a      	ldr	r2, [r7, #20]
 8017204:	2380      	movs	r3, #128	@ 0x80
 8017206:	025b      	lsls	r3, r3, #9
 8017208:	429a      	cmp	r2, r3
 801720a:	d005      	beq.n	8017218 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 801720c:	e015      	b.n	801723a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 801720e:	f7ff fa61 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8017212:	0003      	movs	r3, r0
 8017214:	61fb      	str	r3, [r7, #28]
            break;
 8017216:	e013      	b.n	8017240 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8017218:	f7ff f9b6 	bl	8016588 <HAL_RCC_GetSysClockFreq>
 801721c:	0003      	movs	r3, r0
 801721e:	61fb      	str	r3, [r7, #28]
            break;
 8017220:	e00e      	b.n	8017240 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017222:	4b1c      	ldr	r3, [pc, #112]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017224:	681a      	ldr	r2, [r3, #0]
 8017226:	2380      	movs	r3, #128	@ 0x80
 8017228:	00db      	lsls	r3, r3, #3
 801722a:	401a      	ands	r2, r3
 801722c:	2380      	movs	r3, #128	@ 0x80
 801722e:	00db      	lsls	r3, r3, #3
 8017230:	429a      	cmp	r2, r3
 8017232:	d104      	bne.n	801723e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8017234:	4b18      	ldr	r3, [pc, #96]	@ (8017298 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8017236:	61fb      	str	r3, [r7, #28]
            break;
 8017238:	e001      	b.n	801723e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 801723a:	46c0      	nop			@ (mov r8, r8)
 801723c:	e235      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801723e:	46c0      	nop			@ (mov r8, r8)
        break;
 8017240:	e233      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8017242:	4a14      	ldr	r2, [pc, #80]	@ (8017294 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8017244:	2388      	movs	r3, #136	@ 0x88
 8017246:	58d2      	ldr	r2, [r2, r3]
 8017248:	23c0      	movs	r3, #192	@ 0xc0
 801724a:	031b      	lsls	r3, r3, #12
 801724c:	4013      	ands	r3, r2
 801724e:	617b      	str	r3, [r7, #20]
 8017250:	697a      	ldr	r2, [r7, #20]
 8017252:	23c0      	movs	r3, #192	@ 0xc0
 8017254:	031b      	lsls	r3, r3, #12
 8017256:	429a      	cmp	r2, r3
 8017258:	d041      	beq.n	80172de <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 801725a:	697a      	ldr	r2, [r7, #20]
 801725c:	23c0      	movs	r3, #192	@ 0xc0
 801725e:	031b      	lsls	r3, r3, #12
 8017260:	429a      	cmp	r2, r3
 8017262:	d847      	bhi.n	80172f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8017264:	697a      	ldr	r2, [r7, #20]
 8017266:	2380      	movs	r3, #128	@ 0x80
 8017268:	031b      	lsls	r3, r3, #12
 801726a:	429a      	cmp	r2, r3
 801726c:	d02b      	beq.n	80172c6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 801726e:	697a      	ldr	r2, [r7, #20]
 8017270:	2380      	movs	r3, #128	@ 0x80
 8017272:	031b      	lsls	r3, r3, #12
 8017274:	429a      	cmp	r2, r3
 8017276:	d83d      	bhi.n	80172f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d005      	beq.n	801728a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 801727e:	697a      	ldr	r2, [r7, #20]
 8017280:	2380      	movs	r3, #128	@ 0x80
 8017282:	02db      	lsls	r3, r3, #11
 8017284:	429a      	cmp	r2, r3
 8017286:	d009      	beq.n	801729c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8017288:	e034      	b.n	80172f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 801728a:	f7ff fa23 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 801728e:	0003      	movs	r3, r0
 8017290:	61fb      	str	r3, [r7, #28]
            break;
 8017292:	e036      	b.n	8017302 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8017294:	40021000 	.word	0x40021000
 8017298:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801729c:	4abd      	ldr	r2, [pc, #756]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801729e:	2394      	movs	r3, #148	@ 0x94
 80172a0:	58d3      	ldr	r3, [r2, r3]
 80172a2:	2202      	movs	r2, #2
 80172a4:	4013      	ands	r3, r2
 80172a6:	2b02      	cmp	r3, #2
 80172a8:	d126      	bne.n	80172f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80172aa:	4aba      	ldr	r2, [pc, #744]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80172ac:	2394      	movs	r3, #148	@ 0x94
 80172ae:	58d3      	ldr	r3, [r2, r3]
 80172b0:	2204      	movs	r2, #4
 80172b2:	4013      	ands	r3, r2
 80172b4:	2b04      	cmp	r3, #4
 80172b6:	d102      	bne.n	80172be <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 80172b8:	23fa      	movs	r3, #250	@ 0xfa
 80172ba:	61fb      	str	r3, [r7, #28]
            break;
 80172bc:	e01c      	b.n	80172f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 80172be:	23fa      	movs	r3, #250	@ 0xfa
 80172c0:	01db      	lsls	r3, r3, #7
 80172c2:	61fb      	str	r3, [r7, #28]
            break;
 80172c4:	e018      	b.n	80172f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80172c6:	4bb3      	ldr	r3, [pc, #716]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	2380      	movs	r3, #128	@ 0x80
 80172cc:	00db      	lsls	r3, r3, #3
 80172ce:	401a      	ands	r2, r3
 80172d0:	2380      	movs	r3, #128	@ 0x80
 80172d2:	00db      	lsls	r3, r3, #3
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d111      	bne.n	80172fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 80172d8:	4baf      	ldr	r3, [pc, #700]	@ (8017598 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80172da:	61fb      	str	r3, [r7, #28]
            break;
 80172dc:	e00e      	b.n	80172fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80172de:	4aad      	ldr	r2, [pc, #692]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80172e0:	2390      	movs	r3, #144	@ 0x90
 80172e2:	58d3      	ldr	r3, [r2, r3]
 80172e4:	2202      	movs	r2, #2
 80172e6:	4013      	ands	r3, r2
 80172e8:	2b02      	cmp	r3, #2
 80172ea:	d109      	bne.n	8017300 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 80172ec:	2380      	movs	r3, #128	@ 0x80
 80172ee:	021b      	lsls	r3, r3, #8
 80172f0:	61fb      	str	r3, [r7, #28]
            break;
 80172f2:	e005      	b.n	8017300 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 80172f4:	46c0      	nop			@ (mov r8, r8)
 80172f6:	e1d8      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80172f8:	46c0      	nop			@ (mov r8, r8)
 80172fa:	e1d6      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80172fc:	46c0      	nop			@ (mov r8, r8)
 80172fe:	e1d4      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017300:	46c0      	nop			@ (mov r8, r8)
        break;
 8017302:	e1d2      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8017304:	4aa3      	ldr	r2, [pc, #652]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017306:	2388      	movs	r3, #136	@ 0x88
 8017308:	58d2      	ldr	r2, [r2, r3]
 801730a:	23c0      	movs	r3, #192	@ 0xc0
 801730c:	039b      	lsls	r3, r3, #14
 801730e:	4013      	ands	r3, r2
 8017310:	617b      	str	r3, [r7, #20]
 8017312:	697a      	ldr	r2, [r7, #20]
 8017314:	23c0      	movs	r3, #192	@ 0xc0
 8017316:	039b      	lsls	r3, r3, #14
 8017318:	429a      	cmp	r2, r3
 801731a:	d03d      	beq.n	8017398 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801731c:	697a      	ldr	r2, [r7, #20]
 801731e:	23c0      	movs	r3, #192	@ 0xc0
 8017320:	039b      	lsls	r3, r3, #14
 8017322:	429a      	cmp	r2, r3
 8017324:	d843      	bhi.n	80173ae <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8017326:	697a      	ldr	r2, [r7, #20]
 8017328:	2380      	movs	r3, #128	@ 0x80
 801732a:	039b      	lsls	r3, r3, #14
 801732c:	429a      	cmp	r2, r3
 801732e:	d027      	beq.n	8017380 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8017330:	697a      	ldr	r2, [r7, #20]
 8017332:	2380      	movs	r3, #128	@ 0x80
 8017334:	039b      	lsls	r3, r3, #14
 8017336:	429a      	cmp	r2, r3
 8017338:	d839      	bhi.n	80173ae <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 801733a:	697b      	ldr	r3, [r7, #20]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d005      	beq.n	801734c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8017340:	697a      	ldr	r2, [r7, #20]
 8017342:	2380      	movs	r3, #128	@ 0x80
 8017344:	035b      	lsls	r3, r3, #13
 8017346:	429a      	cmp	r2, r3
 8017348:	d005      	beq.n	8017356 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 801734a:	e030      	b.n	80173ae <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 801734c:	f7ff f9c2 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8017350:	0003      	movs	r3, r0
 8017352:	61fb      	str	r3, [r7, #28]
            break;
 8017354:	e032      	b.n	80173bc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8017356:	4a8f      	ldr	r2, [pc, #572]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017358:	2394      	movs	r3, #148	@ 0x94
 801735a:	58d3      	ldr	r3, [r2, r3]
 801735c:	2202      	movs	r2, #2
 801735e:	4013      	ands	r3, r2
 8017360:	2b02      	cmp	r3, #2
 8017362:	d126      	bne.n	80173b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8017364:	4a8b      	ldr	r2, [pc, #556]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017366:	2394      	movs	r3, #148	@ 0x94
 8017368:	58d3      	ldr	r3, [r2, r3]
 801736a:	2204      	movs	r2, #4
 801736c:	4013      	ands	r3, r2
 801736e:	2b04      	cmp	r3, #4
 8017370:	d102      	bne.n	8017378 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8017372:	23fa      	movs	r3, #250	@ 0xfa
 8017374:	61fb      	str	r3, [r7, #28]
            break;
 8017376:	e01c      	b.n	80173b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8017378:	23fa      	movs	r3, #250	@ 0xfa
 801737a:	01db      	lsls	r3, r3, #7
 801737c:	61fb      	str	r3, [r7, #28]
            break;
 801737e:	e018      	b.n	80173b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017380:	4b84      	ldr	r3, [pc, #528]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	2380      	movs	r3, #128	@ 0x80
 8017386:	00db      	lsls	r3, r3, #3
 8017388:	401a      	ands	r2, r3
 801738a:	2380      	movs	r3, #128	@ 0x80
 801738c:	00db      	lsls	r3, r3, #3
 801738e:	429a      	cmp	r2, r3
 8017390:	d111      	bne.n	80173b6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8017392:	4b81      	ldr	r3, [pc, #516]	@ (8017598 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8017394:	61fb      	str	r3, [r7, #28]
            break;
 8017396:	e00e      	b.n	80173b6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017398:	4a7e      	ldr	r2, [pc, #504]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801739a:	2390      	movs	r3, #144	@ 0x90
 801739c:	58d3      	ldr	r3, [r2, r3]
 801739e:	2202      	movs	r2, #2
 80173a0:	4013      	ands	r3, r2
 80173a2:	2b02      	cmp	r3, #2
 80173a4:	d109      	bne.n	80173ba <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80173a6:	2380      	movs	r3, #128	@ 0x80
 80173a8:	021b      	lsls	r3, r3, #8
 80173aa:	61fb      	str	r3, [r7, #28]
            break;
 80173ac:	e005      	b.n	80173ba <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80173ae:	46c0      	nop			@ (mov r8, r8)
 80173b0:	e17b      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80173b2:	46c0      	nop			@ (mov r8, r8)
 80173b4:	e179      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80173b6:	46c0      	nop			@ (mov r8, r8)
 80173b8:	e177      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80173ba:	46c0      	nop			@ (mov r8, r8)
        break;
 80173bc:	e175      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80173be:	4a75      	ldr	r2, [pc, #468]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80173c0:	2388      	movs	r3, #136	@ 0x88
 80173c2:	58d2      	ldr	r2, [r2, r3]
 80173c4:	23c0      	movs	r3, #192	@ 0xc0
 80173c6:	041b      	lsls	r3, r3, #16
 80173c8:	4013      	ands	r3, r2
 80173ca:	617b      	str	r3, [r7, #20]
 80173cc:	697a      	ldr	r2, [r7, #20]
 80173ce:	23c0      	movs	r3, #192	@ 0xc0
 80173d0:	041b      	lsls	r3, r3, #16
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d03d      	beq.n	8017452 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80173d6:	697a      	ldr	r2, [r7, #20]
 80173d8:	23c0      	movs	r3, #192	@ 0xc0
 80173da:	041b      	lsls	r3, r3, #16
 80173dc:	429a      	cmp	r2, r3
 80173de:	d843      	bhi.n	8017468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80173e0:	697a      	ldr	r2, [r7, #20]
 80173e2:	2380      	movs	r3, #128	@ 0x80
 80173e4:	041b      	lsls	r3, r3, #16
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d027      	beq.n	801743a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80173ea:	697a      	ldr	r2, [r7, #20]
 80173ec:	2380      	movs	r3, #128	@ 0x80
 80173ee:	041b      	lsls	r3, r3, #16
 80173f0:	429a      	cmp	r2, r3
 80173f2:	d839      	bhi.n	8017468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d005      	beq.n	8017406 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80173fa:	697a      	ldr	r2, [r7, #20]
 80173fc:	2380      	movs	r3, #128	@ 0x80
 80173fe:	03db      	lsls	r3, r3, #15
 8017400:	429a      	cmp	r2, r3
 8017402:	d005      	beq.n	8017410 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8017404:	e030      	b.n	8017468 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8017406:	f7ff f965 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 801740a:	0003      	movs	r3, r0
 801740c:	61fb      	str	r3, [r7, #28]
            break;
 801740e:	e032      	b.n	8017476 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8017410:	4a60      	ldr	r2, [pc, #384]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017412:	2394      	movs	r3, #148	@ 0x94
 8017414:	58d3      	ldr	r3, [r2, r3]
 8017416:	2202      	movs	r2, #2
 8017418:	4013      	ands	r3, r2
 801741a:	2b02      	cmp	r3, #2
 801741c:	d126      	bne.n	801746c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 801741e:	4a5d      	ldr	r2, [pc, #372]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017420:	2394      	movs	r3, #148	@ 0x94
 8017422:	58d3      	ldr	r3, [r2, r3]
 8017424:	2204      	movs	r2, #4
 8017426:	4013      	ands	r3, r2
 8017428:	2b04      	cmp	r3, #4
 801742a:	d102      	bne.n	8017432 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 801742c:	23fa      	movs	r3, #250	@ 0xfa
 801742e:	61fb      	str	r3, [r7, #28]
            break;
 8017430:	e01c      	b.n	801746c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8017432:	23fa      	movs	r3, #250	@ 0xfa
 8017434:	01db      	lsls	r3, r3, #7
 8017436:	61fb      	str	r3, [r7, #28]
            break;
 8017438:	e018      	b.n	801746c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801743a:	4b56      	ldr	r3, [pc, #344]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801743c:	681a      	ldr	r2, [r3, #0]
 801743e:	2380      	movs	r3, #128	@ 0x80
 8017440:	00db      	lsls	r3, r3, #3
 8017442:	401a      	ands	r2, r3
 8017444:	2380      	movs	r3, #128	@ 0x80
 8017446:	00db      	lsls	r3, r3, #3
 8017448:	429a      	cmp	r2, r3
 801744a:	d111      	bne.n	8017470 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 801744c:	4b52      	ldr	r3, [pc, #328]	@ (8017598 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 801744e:	61fb      	str	r3, [r7, #28]
            break;
 8017450:	e00e      	b.n	8017470 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8017452:	4a50      	ldr	r2, [pc, #320]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017454:	2390      	movs	r3, #144	@ 0x90
 8017456:	58d3      	ldr	r3, [r2, r3]
 8017458:	2202      	movs	r2, #2
 801745a:	4013      	ands	r3, r2
 801745c:	2b02      	cmp	r3, #2
 801745e:	d109      	bne.n	8017474 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8017460:	2380      	movs	r3, #128	@ 0x80
 8017462:	021b      	lsls	r3, r3, #8
 8017464:	61fb      	str	r3, [r7, #28]
            break;
 8017466:	e005      	b.n	8017474 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8017468:	46c0      	nop			@ (mov r8, r8)
 801746a:	e11e      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 801746c:	46c0      	nop			@ (mov r8, r8)
 801746e:	e11c      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017470:	46c0      	nop			@ (mov r8, r8)
 8017472:	e11a      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017474:	46c0      	nop			@ (mov r8, r8)
        break;
 8017476:	e118      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8017478:	4a46      	ldr	r2, [pc, #280]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801747a:	2388      	movs	r3, #136	@ 0x88
 801747c:	58d2      	ldr	r2, [r2, r3]
 801747e:	2380      	movs	r3, #128	@ 0x80
 8017480:	045b      	lsls	r3, r3, #17
 8017482:	4013      	ands	r3, r2
 8017484:	617b      	str	r3, [r7, #20]
 8017486:	697b      	ldr	r3, [r7, #20]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d005      	beq.n	8017498 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 801748c:	697a      	ldr	r2, [r7, #20]
 801748e:	2380      	movs	r3, #128	@ 0x80
 8017490:	045b      	lsls	r3, r3, #17
 8017492:	429a      	cmp	r2, r3
 8017494:	d011      	beq.n	80174ba <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8017496:	e019      	b.n	80174cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8017498:	4b3e      	ldr	r3, [pc, #248]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801749a:	689a      	ldr	r2, [r3, #8]
 801749c:	23e0      	movs	r3, #224	@ 0xe0
 801749e:	01db      	lsls	r3, r3, #7
 80174a0:	4013      	ands	r3, r2
 80174a2:	d104      	bne.n	80174ae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80174a4:	f7ff f916 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 80174a8:	0003      	movs	r3, r0
 80174aa:	61fb      	str	r3, [r7, #28]
            break;
 80174ac:	e00e      	b.n	80174cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80174ae:	f7ff f911 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 80174b2:	0003      	movs	r3, r0
 80174b4:	005b      	lsls	r3, r3, #1
 80174b6:	61fb      	str	r3, [r7, #28]
            break;
 80174b8:	e008      	b.n	80174cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80174ba:	2408      	movs	r4, #8
 80174bc:	193b      	adds	r3, r7, r4
 80174be:	0018      	movs	r0, r3
 80174c0:	f000 f8fe 	bl	80176c0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80174c4:	193b      	adds	r3, r7, r4
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	61fb      	str	r3, [r7, #28]
            break;
 80174ca:	46c0      	nop			@ (mov r8, r8)
        break;
 80174cc:	e0ed      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80174ce:	4a31      	ldr	r2, [pc, #196]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80174d0:	2388      	movs	r3, #136	@ 0x88
 80174d2:	58d2      	ldr	r2, [r2, r3]
 80174d4:	2380      	movs	r3, #128	@ 0x80
 80174d6:	049b      	lsls	r3, r3, #18
 80174d8:	4013      	ands	r3, r2
 80174da:	617b      	str	r3, [r7, #20]
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d005      	beq.n	80174ee <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80174e2:	697a      	ldr	r2, [r7, #20]
 80174e4:	2380      	movs	r3, #128	@ 0x80
 80174e6:	049b      	lsls	r3, r3, #18
 80174e8:	429a      	cmp	r2, r3
 80174ea:	d011      	beq.n	8017510 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 80174ec:	e019      	b.n	8017522 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80174ee:	4b29      	ldr	r3, [pc, #164]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80174f0:	689a      	ldr	r2, [r3, #8]
 80174f2:	23e0      	movs	r3, #224	@ 0xe0
 80174f4:	01db      	lsls	r3, r3, #7
 80174f6:	4013      	ands	r3, r2
 80174f8:	d104      	bne.n	8017504 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 80174fa:	f7ff f8eb 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 80174fe:	0003      	movs	r3, r0
 8017500:	61fb      	str	r3, [r7, #28]
            break;
 8017502:	e00e      	b.n	8017522 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8017504:	f7ff f8e6 	bl	80166d4 <HAL_RCC_GetPCLK1Freq>
 8017508:	0003      	movs	r3, r0
 801750a:	005b      	lsls	r3, r3, #1
 801750c:	61fb      	str	r3, [r7, #28]
            break;
 801750e:	e008      	b.n	8017522 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8017510:	2408      	movs	r4, #8
 8017512:	193b      	adds	r3, r7, r4
 8017514:	0018      	movs	r0, r3
 8017516:	f000 f8d3 	bl	80176c0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 801751a:	193b      	adds	r3, r7, r4
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	61fb      	str	r3, [r7, #28]
            break;
 8017520:	46c0      	nop			@ (mov r8, r8)
        break;
 8017522:	e0c2      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8017524:	4a1b      	ldr	r2, [pc, #108]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017526:	2388      	movs	r3, #136	@ 0x88
 8017528:	58d2      	ldr	r2, [r2, r3]
 801752a:	23c0      	movs	r3, #192	@ 0xc0
 801752c:	051b      	lsls	r3, r3, #20
 801752e:	4013      	ands	r3, r2
 8017530:	617b      	str	r3, [r7, #20]
 8017532:	697a      	ldr	r2, [r7, #20]
 8017534:	23c0      	movs	r3, #192	@ 0xc0
 8017536:	051b      	lsls	r3, r3, #20
 8017538:	429a      	cmp	r2, r3
 801753a:	d017      	beq.n	801756c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 801753c:	697a      	ldr	r2, [r7, #20]
 801753e:	23c0      	movs	r3, #192	@ 0xc0
 8017540:	051b      	lsls	r3, r3, #20
 8017542:	429a      	cmp	r2, r3
 8017544:	d84a      	bhi.n	80175dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8017546:	697a      	ldr	r2, [r7, #20]
 8017548:	2380      	movs	r3, #128	@ 0x80
 801754a:	051b      	lsls	r3, r3, #20
 801754c:	429a      	cmp	r2, r3
 801754e:	d039      	beq.n	80175c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8017550:	697a      	ldr	r2, [r7, #20]
 8017552:	2380      	movs	r3, #128	@ 0x80
 8017554:	051b      	lsls	r3, r3, #20
 8017556:	429a      	cmp	r2, r3
 8017558:	d840      	bhi.n	80175dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 801755a:	697b      	ldr	r3, [r7, #20]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d03a      	beq.n	80175d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8017560:	697a      	ldr	r2, [r7, #20]
 8017562:	2380      	movs	r3, #128	@ 0x80
 8017564:	04db      	lsls	r3, r3, #19
 8017566:	429a      	cmp	r2, r3
 8017568:	d003      	beq.n	8017572 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 801756a:	e037      	b.n	80175dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 801756c:	4b0b      	ldr	r3, [pc, #44]	@ (801759c <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 801756e:	61fb      	str	r3, [r7, #28]
            break;
 8017570:	e037      	b.n	80175e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8017572:	4b08      	ldr	r3, [pc, #32]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	2202      	movs	r2, #2
 8017578:	4013      	ands	r3, r2
 801757a:	2b02      	cmp	r3, #2
 801757c:	d130      	bne.n	80175e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 801757e:	4b05      	ldr	r3, [pc, #20]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2208      	movs	r2, #8
 8017584:	4013      	ands	r3, r2
 8017586:	d00b      	beq.n	80175a0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8017588:	4b02      	ldr	r3, [pc, #8]	@ (8017594 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	091b      	lsrs	r3, r3, #4
 801758e:	220f      	movs	r2, #15
 8017590:	4013      	ands	r3, r2
 8017592:	e00b      	b.n	80175ac <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8017594:	40021000 	.word	0x40021000
 8017598:	00f42400 	.word	0x00f42400
 801759c:	02dc6c00 	.word	0x02dc6c00
 80175a0:	4a44      	ldr	r2, [pc, #272]	@ (80176b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80175a2:	2394      	movs	r3, #148	@ 0x94
 80175a4:	58d3      	ldr	r3, [r2, r3]
 80175a6:	0a1b      	lsrs	r3, r3, #8
 80175a8:	220f      	movs	r2, #15
 80175aa:	4013      	ands	r3, r2
 80175ac:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80175ae:	69bb      	ldr	r3, [r7, #24]
 80175b0:	2b0b      	cmp	r3, #11
 80175b2:	d901      	bls.n	80175b8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80175b4:	230b      	movs	r3, #11
 80175b6:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80175b8:	4b3f      	ldr	r3, [pc, #252]	@ (80176b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80175ba:	69ba      	ldr	r2, [r7, #24]
 80175bc:	0092      	lsls	r2, r2, #2
 80175be:	58d3      	ldr	r3, [r2, r3]
 80175c0:	61fb      	str	r3, [r7, #28]
            break;
 80175c2:	e00d      	b.n	80175e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80175c4:	2408      	movs	r4, #8
 80175c6:	193b      	adds	r3, r7, r4
 80175c8:	0018      	movs	r0, r3
 80175ca:	f000 f879 	bl	80176c0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80175ce:	193b      	adds	r3, r7, r4
 80175d0:	685b      	ldr	r3, [r3, #4]
 80175d2:	61fb      	str	r3, [r7, #28]
            break;
 80175d4:	e005      	b.n	80175e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80175d6:	2300      	movs	r3, #0
 80175d8:	61fb      	str	r3, [r7, #28]
            break;
 80175da:	e002      	b.n	80175e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80175dc:	46c0      	nop			@ (mov r8, r8)
 80175de:	e064      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80175e0:	46c0      	nop			@ (mov r8, r8)
        break;
 80175e2:	e062      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80175e4:	4a33      	ldr	r2, [pc, #204]	@ (80176b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80175e6:	2388      	movs	r3, #136	@ 0x88
 80175e8:	58d2      	ldr	r2, [r2, r3]
 80175ea:	23c0      	movs	r3, #192	@ 0xc0
 80175ec:	051b      	lsls	r3, r3, #20
 80175ee:	4013      	ands	r3, r2
 80175f0:	617b      	str	r3, [r7, #20]
 80175f2:	697a      	ldr	r2, [r7, #20]
 80175f4:	23c0      	movs	r3, #192	@ 0xc0
 80175f6:	051b      	lsls	r3, r3, #20
 80175f8:	429a      	cmp	r2, r3
 80175fa:	d017      	beq.n	801762c <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80175fc:	697a      	ldr	r2, [r7, #20]
 80175fe:	23c0      	movs	r3, #192	@ 0xc0
 8017600:	051b      	lsls	r3, r3, #20
 8017602:	429a      	cmp	r2, r3
 8017604:	d844      	bhi.n	8017690 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8017606:	697a      	ldr	r2, [r7, #20]
 8017608:	2380      	movs	r3, #128	@ 0x80
 801760a:	051b      	lsls	r3, r3, #20
 801760c:	429a      	cmp	r2, r3
 801760e:	d033      	beq.n	8017678 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8017610:	697a      	ldr	r2, [r7, #20]
 8017612:	2380      	movs	r3, #128	@ 0x80
 8017614:	051b      	lsls	r3, r3, #20
 8017616:	429a      	cmp	r2, r3
 8017618:	d83a      	bhi.n	8017690 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d034      	beq.n	801768a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8017620:	697a      	ldr	r2, [r7, #20]
 8017622:	2380      	movs	r3, #128	@ 0x80
 8017624:	04db      	lsls	r3, r3, #19
 8017626:	429a      	cmp	r2, r3
 8017628:	d003      	beq.n	8017632 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 801762a:	e031      	b.n	8017690 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 801762c:	4b23      	ldr	r3, [pc, #140]	@ (80176bc <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 801762e:	61fb      	str	r3, [r7, #28]
            break;
 8017630:	e031      	b.n	8017696 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8017632:	4b20      	ldr	r3, [pc, #128]	@ (80176b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2202      	movs	r2, #2
 8017638:	4013      	ands	r3, r2
 801763a:	2b02      	cmp	r3, #2
 801763c:	d12a      	bne.n	8017694 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 801763e:	4b1d      	ldr	r3, [pc, #116]	@ (80176b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2208      	movs	r2, #8
 8017644:	4013      	ands	r3, r2
 8017646:	d005      	beq.n	8017654 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8017648:	4b1a      	ldr	r3, [pc, #104]	@ (80176b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	091b      	lsrs	r3, r3, #4
 801764e:	220f      	movs	r2, #15
 8017650:	4013      	ands	r3, r2
 8017652:	e005      	b.n	8017660 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8017654:	4a17      	ldr	r2, [pc, #92]	@ (80176b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8017656:	2394      	movs	r3, #148	@ 0x94
 8017658:	58d3      	ldr	r3, [r2, r3]
 801765a:	0a1b      	lsrs	r3, r3, #8
 801765c:	220f      	movs	r2, #15
 801765e:	4013      	ands	r3, r2
 8017660:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	2b0b      	cmp	r3, #11
 8017666:	d901      	bls.n	801766c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8017668:	230b      	movs	r3, #11
 801766a:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 801766c:	4b12      	ldr	r3, [pc, #72]	@ (80176b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 801766e:	69ba      	ldr	r2, [r7, #24]
 8017670:	0092      	lsls	r2, r2, #2
 8017672:	58d3      	ldr	r3, [r2, r3]
 8017674:	61fb      	str	r3, [r7, #28]
            break;
 8017676:	e00d      	b.n	8017694 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8017678:	2408      	movs	r4, #8
 801767a:	193b      	adds	r3, r7, r4
 801767c:	0018      	movs	r0, r3
 801767e:	f000 f81f 	bl	80176c0 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8017682:	193b      	adds	r3, r7, r4
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	61fb      	str	r3, [r7, #28]
            break;
 8017688:	e005      	b.n	8017696 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 801768a:	2300      	movs	r3, #0
 801768c:	61fb      	str	r3, [r7, #28]
            break;
 801768e:	e002      	b.n	8017696 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8017690:	46c0      	nop			@ (mov r8, r8)
 8017692:	e00a      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8017694:	46c0      	nop			@ (mov r8, r8)
        break;
 8017696:	e008      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8017698:	46c0      	nop			@ (mov r8, r8)
 801769a:	e006      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 801769c:	46c0      	nop			@ (mov r8, r8)
 801769e:	e004      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80176a0:	46c0      	nop			@ (mov r8, r8)
 80176a2:	e002      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80176a4:	46c0      	nop			@ (mov r8, r8)
 80176a6:	e000      	b.n	80176aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80176a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80176aa:	69fb      	ldr	r3, [r7, #28]
}
 80176ac:	0018      	movs	r0, r3
 80176ae:	46bd      	mov	sp, r7
 80176b0:	b009      	add	sp, #36	@ 0x24
 80176b2:	bd90      	pop	{r4, r7, pc}
 80176b4:	40021000 	.word	0x40021000
 80176b8:	0801b2e4 	.word	0x0801b2e4
 80176bc:	02dc6c00 	.word	0x02dc6c00

080176c0 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b088      	sub	sp, #32
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80176c8:	4b58      	ldr	r3, [pc, #352]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	0a1b      	lsrs	r3, r3, #8
 80176ce:	227f      	movs	r2, #127	@ 0x7f
 80176d0:	4013      	ands	r3, r2
 80176d2:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80176d4:	4b55      	ldr	r3, [pc, #340]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80176d6:	68db      	ldr	r3, [r3, #12]
 80176d8:	2203      	movs	r2, #3
 80176da:	4013      	ands	r3, r2
 80176dc:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80176de:	4b53      	ldr	r3, [pc, #332]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80176e0:	68db      	ldr	r3, [r3, #12]
 80176e2:	091b      	lsrs	r3, r3, #4
 80176e4:	2207      	movs	r2, #7
 80176e6:	4013      	ands	r3, r2
 80176e8:	3301      	adds	r3, #1
 80176ea:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80176ec:	4b4f      	ldr	r3, [pc, #316]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	2208      	movs	r2, #8
 80176f2:	4013      	ands	r3, r2
 80176f4:	d005      	beq.n	8017702 <HAL_RCCEx_GetPLLClockFreq+0x42>
 80176f6:	4b4d      	ldr	r3, [pc, #308]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	091b      	lsrs	r3, r3, #4
 80176fc:	220f      	movs	r2, #15
 80176fe:	4013      	ands	r3, r2
 8017700:	e005      	b.n	801770e <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8017702:	4a4a      	ldr	r2, [pc, #296]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017704:	2394      	movs	r3, #148	@ 0x94
 8017706:	58d3      	ldr	r3, [r2, r3]
 8017708:	0a1b      	lsrs	r3, r3, #8
 801770a:	220f      	movs	r2, #15
 801770c:	4013      	ands	r3, r2
 801770e:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8017710:	69bb      	ldr	r3, [r7, #24]
 8017712:	2b0b      	cmp	r3, #11
 8017714:	d901      	bls.n	801771a <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8017716:	230b      	movs	r3, #11
 8017718:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 801771a:	693b      	ldr	r3, [r7, #16]
 801771c:	2b03      	cmp	r3, #3
 801771e:	d020      	beq.n	8017762 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8017720:	693b      	ldr	r3, [r7, #16]
 8017722:	2b03      	cmp	r3, #3
 8017724:	d827      	bhi.n	8017776 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8017726:	693b      	ldr	r3, [r7, #16]
 8017728:	2b01      	cmp	r3, #1
 801772a:	d00c      	beq.n	8017746 <HAL_RCCEx_GetPLLClockFreq+0x86>
 801772c:	693b      	ldr	r3, [r7, #16]
 801772e:	2b02      	cmp	r3, #2
 8017730:	d121      	bne.n	8017776 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8017732:	68f9      	ldr	r1, [r7, #12]
 8017734:	483e      	ldr	r0, [pc, #248]	@ (8017830 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8017736:	f7e8 fcef 	bl	8000118 <__udivsi3>
 801773a:	0003      	movs	r3, r0
 801773c:	001a      	movs	r2, r3
 801773e:	697b      	ldr	r3, [r7, #20]
 8017740:	4353      	muls	r3, r2
 8017742:	61fb      	str	r3, [r7, #28]
      break;
 8017744:	e025      	b.n	8017792 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8017746:	4b3b      	ldr	r3, [pc, #236]	@ (8017834 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8017748:	69ba      	ldr	r2, [r7, #24]
 801774a:	0092      	lsls	r2, r2, #2
 801774c:	58d3      	ldr	r3, [r2, r3]
 801774e:	68f9      	ldr	r1, [r7, #12]
 8017750:	0018      	movs	r0, r3
 8017752:	f7e8 fce1 	bl	8000118 <__udivsi3>
 8017756:	0003      	movs	r3, r0
 8017758:	001a      	movs	r2, r3
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	4353      	muls	r3, r2
 801775e:	61fb      	str	r3, [r7, #28]
      break;
 8017760:	e017      	b.n	8017792 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8017762:	68f9      	ldr	r1, [r7, #12]
 8017764:	4834      	ldr	r0, [pc, #208]	@ (8017838 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8017766:	f7e8 fcd7 	bl	8000118 <__udivsi3>
 801776a:	0003      	movs	r3, r0
 801776c:	001a      	movs	r2, r3
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	4353      	muls	r3, r2
 8017772:	61fb      	str	r3, [r7, #28]
      break;
 8017774:	e00d      	b.n	8017792 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8017776:	4b2f      	ldr	r3, [pc, #188]	@ (8017834 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8017778:	69ba      	ldr	r2, [r7, #24]
 801777a:	0092      	lsls	r2, r2, #2
 801777c:	58d3      	ldr	r3, [r2, r3]
 801777e:	68f9      	ldr	r1, [r7, #12]
 8017780:	0018      	movs	r0, r3
 8017782:	f7e8 fcc9 	bl	8000118 <__udivsi3>
 8017786:	0003      	movs	r3, r0
 8017788:	001a      	movs	r2, r3
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	4353      	muls	r3, r2
 801778e:	61fb      	str	r3, [r7, #28]
      break;
 8017790:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8017792:	4b26      	ldr	r3, [pc, #152]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017794:	68da      	ldr	r2, [r3, #12]
 8017796:	2380      	movs	r3, #128	@ 0x80
 8017798:	025b      	lsls	r3, r3, #9
 801779a:	4013      	ands	r3, r2
 801779c:	d00e      	beq.n	80177bc <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 801779e:	4b23      	ldr	r3, [pc, #140]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80177a0:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 80177a2:	0c5b      	lsrs	r3, r3, #17
 80177a4:	221f      	movs	r2, #31
 80177a6:	4013      	ands	r3, r2
 80177a8:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80177aa:	0019      	movs	r1, r3
 80177ac:	69f8      	ldr	r0, [r7, #28]
 80177ae:	f7e8 fcb3 	bl	8000118 <__udivsi3>
 80177b2:	0003      	movs	r3, r0
 80177b4:	001a      	movs	r2, r3
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	601a      	str	r2, [r3, #0]
 80177ba:	e002      	b.n	80177c2 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2200      	movs	r2, #0
 80177c0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80177c2:	4b1a      	ldr	r3, [pc, #104]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80177c4:	68da      	ldr	r2, [r3, #12]
 80177c6:	2380      	movs	r3, #128	@ 0x80
 80177c8:	045b      	lsls	r3, r3, #17
 80177ca:	4013      	ands	r3, r2
 80177cc:	d00e      	beq.n	80177ec <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80177ce:	4b17      	ldr	r3, [pc, #92]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80177d0:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80177d2:	0e5b      	lsrs	r3, r3, #25
 80177d4:	2207      	movs	r2, #7
 80177d6:	4013      	ands	r3, r2
 80177d8:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80177da:	0019      	movs	r1, r3
 80177dc:	69f8      	ldr	r0, [r7, #28]
 80177de:	f7e8 fc9b 	bl	8000118 <__udivsi3>
 80177e2:	0003      	movs	r3, r0
 80177e4:	001a      	movs	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	605a      	str	r2, [r3, #4]
 80177ea:	e002      	b.n	80177f2 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2200      	movs	r2, #0
 80177f0:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80177f2:	4b0e      	ldr	r3, [pc, #56]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80177f4:	68da      	ldr	r2, [r3, #12]
 80177f6:	2380      	movs	r3, #128	@ 0x80
 80177f8:	055b      	lsls	r3, r3, #21
 80177fa:	4013      	ands	r3, r2
 80177fc:	d00e      	beq.n	801781c <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80177fe:	4b0b      	ldr	r3, [pc, #44]	@ (801782c <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8017800:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8017802:	0f5b      	lsrs	r3, r3, #29
 8017804:	2207      	movs	r2, #7
 8017806:	4013      	ands	r3, r2
 8017808:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 801780a:	0019      	movs	r1, r3
 801780c:	69f8      	ldr	r0, [r7, #28]
 801780e:	f7e8 fc83 	bl	8000118 <__udivsi3>
 8017812:	0003      	movs	r3, r0
 8017814:	001a      	movs	r2, r3
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 801781a:	e002      	b.n	8017822 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2200      	movs	r2, #0
 8017820:	609a      	str	r2, [r3, #8]
}
 8017822:	46c0      	nop			@ (mov r8, r8)
 8017824:	46bd      	mov	sp, r7
 8017826:	b008      	add	sp, #32
 8017828:	bd80      	pop	{r7, pc}
 801782a:	46c0      	nop			@ (mov r8, r8)
 801782c:	40021000 	.word	0x40021000
 8017830:	00f42400 	.word	0x00f42400
 8017834:	0801b2e4 	.word	0x0801b2e4
 8017838:	003d0900 	.word	0x003d0900

0801783c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b084      	sub	sp, #16
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8017844:	210f      	movs	r1, #15
 8017846:	187b      	adds	r3, r7, r1
 8017848:	2201      	movs	r2, #1
 801784a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d100      	bne.n	8017854 <HAL_RTC_Init+0x18>
 8017852:	e08b      	b.n	801796c <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8017854:	187b      	adds	r3, r7, r1
 8017856:	2200      	movs	r2, #0
 8017858:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	222d      	movs	r2, #45	@ 0x2d
 801785e:	5c9b      	ldrb	r3, [r3, r2]
 8017860:	b2db      	uxtb	r3, r3
 8017862:	2b00      	cmp	r3, #0
 8017864:	d107      	bne.n	8017876 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	222c      	movs	r2, #44	@ 0x2c
 801786a:	2100      	movs	r1, #0
 801786c:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	0018      	movs	r0, r3
 8017872:	f7f4 f92f 	bl	800bad4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	222d      	movs	r2, #45	@ 0x2d
 801787a:	2102      	movs	r1, #2
 801787c:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801787e:	4b3f      	ldr	r3, [pc, #252]	@ (801797c <HAL_RTC_Init+0x140>)
 8017880:	22ca      	movs	r2, #202	@ 0xca
 8017882:	625a      	str	r2, [r3, #36]	@ 0x24
 8017884:	4b3d      	ldr	r3, [pc, #244]	@ (801797c <HAL_RTC_Init+0x140>)
 8017886:	2253      	movs	r2, #83	@ 0x53
 8017888:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	0018      	movs	r0, r3
 801788e:	f000 fab9 	bl	8017e04 <RTC_EnterInitMode>
 8017892:	1e03      	subs	r3, r0, #0
 8017894:	d00b      	beq.n	80178ae <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017896:	4b39      	ldr	r3, [pc, #228]	@ (801797c <HAL_RTC_Init+0x140>)
 8017898:	22ff      	movs	r2, #255	@ 0xff
 801789a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	222d      	movs	r2, #45	@ 0x2d
 80178a0:	2104      	movs	r1, #4
 80178a2:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 80178a4:	230f      	movs	r3, #15
 80178a6:	18fb      	adds	r3, r7, r3
 80178a8:	2201      	movs	r2, #1
 80178aa:	701a      	strb	r2, [r3, #0]
 80178ac:	e05e      	b.n	801796c <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80178ae:	4b33      	ldr	r3, [pc, #204]	@ (801797c <HAL_RTC_Init+0x140>)
 80178b0:	699a      	ldr	r2, [r3, #24]
 80178b2:	4b32      	ldr	r3, [pc, #200]	@ (801797c <HAL_RTC_Init+0x140>)
 80178b4:	4932      	ldr	r1, [pc, #200]	@ (8017980 <HAL_RTC_Init+0x144>)
 80178b6:	400a      	ands	r2, r1
 80178b8:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80178ba:	4b30      	ldr	r3, [pc, #192]	@ (801797c <HAL_RTC_Init+0x140>)
 80178bc:	6999      	ldr	r1, [r3, #24]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	685a      	ldr	r2, [r3, #4]
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	691b      	ldr	r3, [r3, #16]
 80178c6:	431a      	orrs	r2, r3
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	699b      	ldr	r3, [r3, #24]
 80178cc:	431a      	orrs	r2, r3
 80178ce:	4b2b      	ldr	r3, [pc, #172]	@ (801797c <HAL_RTC_Init+0x140>)
 80178d0:	430a      	orrs	r2, r1
 80178d2:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	68d9      	ldr	r1, [r3, #12]
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	689b      	ldr	r3, [r3, #8]
 80178dc:	041a      	lsls	r2, r3, #16
 80178de:	4b27      	ldr	r3, [pc, #156]	@ (801797c <HAL_RTC_Init+0x140>)
 80178e0:	430a      	orrs	r2, r1
 80178e2:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80178e4:	4b25      	ldr	r3, [pc, #148]	@ (801797c <HAL_RTC_Init+0x140>)
 80178e6:	68db      	ldr	r3, [r3, #12]
 80178e8:	4a26      	ldr	r2, [pc, #152]	@ (8017984 <HAL_RTC_Init+0x148>)
 80178ea:	4013      	ands	r3, r2
 80178ec:	0019      	movs	r1, r3
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178f6:	431a      	orrs	r2, r3
 80178f8:	4b20      	ldr	r3, [pc, #128]	@ (801797c <HAL_RTC_Init+0x140>)
 80178fa:	430a      	orrs	r2, r1
 80178fc:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80178fe:	4b1f      	ldr	r3, [pc, #124]	@ (801797c <HAL_RTC_Init+0x140>)
 8017900:	68da      	ldr	r2, [r3, #12]
 8017902:	4b1e      	ldr	r3, [pc, #120]	@ (801797c <HAL_RTC_Init+0x140>)
 8017904:	2180      	movs	r1, #128	@ 0x80
 8017906:	438a      	bics	r2, r1
 8017908:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801790a:	4b1c      	ldr	r3, [pc, #112]	@ (801797c <HAL_RTC_Init+0x140>)
 801790c:	699b      	ldr	r3, [r3, #24]
 801790e:	2220      	movs	r2, #32
 8017910:	4013      	ands	r3, r2
 8017912:	d110      	bne.n	8017936 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	0018      	movs	r0, r3
 8017918:	f000 fa4e 	bl	8017db8 <HAL_RTC_WaitForSynchro>
 801791c:	1e03      	subs	r3, r0, #0
 801791e:	d00a      	beq.n	8017936 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017920:	4b16      	ldr	r3, [pc, #88]	@ (801797c <HAL_RTC_Init+0x140>)
 8017922:	22ff      	movs	r2, #255	@ 0xff
 8017924:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	222d      	movs	r2, #45	@ 0x2d
 801792a:	2104      	movs	r1, #4
 801792c:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 801792e:	230f      	movs	r3, #15
 8017930:	18fb      	adds	r3, r7, r3
 8017932:	2201      	movs	r2, #1
 8017934:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8017936:	230f      	movs	r3, #15
 8017938:	18fb      	adds	r3, r7, r3
 801793a:	781b      	ldrb	r3, [r3, #0]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d115      	bne.n	801796c <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8017940:	4b0e      	ldr	r3, [pc, #56]	@ (801797c <HAL_RTC_Init+0x140>)
 8017942:	699b      	ldr	r3, [r3, #24]
 8017944:	00db      	lsls	r3, r3, #3
 8017946:	08d9      	lsrs	r1, r3, #3
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6a1a      	ldr	r2, [r3, #32]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	69db      	ldr	r3, [r3, #28]
 8017950:	431a      	orrs	r2, r3
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	695b      	ldr	r3, [r3, #20]
 8017956:	431a      	orrs	r2, r3
 8017958:	4b08      	ldr	r3, [pc, #32]	@ (801797c <HAL_RTC_Init+0x140>)
 801795a:	430a      	orrs	r2, r1
 801795c:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801795e:	4b07      	ldr	r3, [pc, #28]	@ (801797c <HAL_RTC_Init+0x140>)
 8017960:	22ff      	movs	r2, #255	@ 0xff
 8017962:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	222d      	movs	r2, #45	@ 0x2d
 8017968:	2101      	movs	r1, #1
 801796a:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 801796c:	230f      	movs	r3, #15
 801796e:	18fb      	adds	r3, r7, r3
 8017970:	781b      	ldrb	r3, [r3, #0]
}
 8017972:	0018      	movs	r0, r3
 8017974:	46bd      	mov	sp, r7
 8017976:	b004      	add	sp, #16
 8017978:	bd80      	pop	{r7, pc}
 801797a:	46c0      	nop			@ (mov r8, r8)
 801797c:	40002800 	.word	0x40002800
 8017980:	fb8fffbf 	.word	0xfb8fffbf
 8017984:	ffffe0ff 	.word	0xffffe0ff

08017988 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017988:	b590      	push	{r4, r7, lr}
 801798a:	b087      	sub	sp, #28
 801798c:	af00      	add	r7, sp, #0
 801798e:	60f8      	str	r0, [r7, #12]
 8017990:	60b9      	str	r1, [r7, #8]
 8017992:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	222c      	movs	r2, #44	@ 0x2c
 8017998:	5c9b      	ldrb	r3, [r3, r2]
 801799a:	2b01      	cmp	r3, #1
 801799c:	d101      	bne.n	80179a2 <HAL_RTC_SetTime+0x1a>
 801799e:	2302      	movs	r3, #2
 80179a0:	e0a7      	b.n	8017af2 <HAL_RTC_SetTime+0x16a>
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	222c      	movs	r2, #44	@ 0x2c
 80179a6:	2101      	movs	r1, #1
 80179a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	222d      	movs	r2, #45	@ 0x2d
 80179ae:	2102      	movs	r1, #2
 80179b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80179b2:	4b52      	ldr	r3, [pc, #328]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 80179b4:	22ca      	movs	r2, #202	@ 0xca
 80179b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80179b8:	4b50      	ldr	r3, [pc, #320]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 80179ba:	2253      	movs	r2, #83	@ 0x53
 80179bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	0018      	movs	r0, r3
 80179c2:	f000 fa1f 	bl	8017e04 <RTC_EnterInitMode>
 80179c6:	1e03      	subs	r3, r0, #0
 80179c8:	d00c      	beq.n	80179e4 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80179ca:	4b4c      	ldr	r3, [pc, #304]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 80179cc:	22ff      	movs	r2, #255	@ 0xff
 80179ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	222d      	movs	r2, #45	@ 0x2d
 80179d4:	2104      	movs	r1, #4
 80179d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	222c      	movs	r2, #44	@ 0x2c
 80179dc:	2100      	movs	r1, #0
 80179de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80179e0:	2301      	movs	r3, #1
 80179e2:	e086      	b.n	8017af2 <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80179e4:	4b45      	ldr	r3, [pc, #276]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 80179e6:	68da      	ldr	r2, [r3, #12]
 80179e8:	23c0      	movs	r3, #192	@ 0xc0
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	401a      	ands	r2, r3
 80179ee:	2380      	movs	r3, #128	@ 0x80
 80179f0:	005b      	lsls	r3, r3, #1
 80179f2:	429a      	cmp	r2, r3
 80179f4:	d053      	beq.n	8017a9e <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d124      	bne.n	8017a46 <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80179fc:	4b3f      	ldr	r3, [pc, #252]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 80179fe:	699b      	ldr	r3, [r3, #24]
 8017a00:	2240      	movs	r2, #64	@ 0x40
 8017a02:	4013      	ands	r3, r2
 8017a04:	d102      	bne.n	8017a0c <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	0018      	movs	r0, r3
 8017a12:	f000 fa23 	bl	8017e5c <RTC_ByteToBcd2>
 8017a16:	0003      	movs	r3, r0
 8017a18:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017a1a:	68bb      	ldr	r3, [r7, #8]
 8017a1c:	785b      	ldrb	r3, [r3, #1]
 8017a1e:	0018      	movs	r0, r3
 8017a20:	f000 fa1c 	bl	8017e5c <RTC_ByteToBcd2>
 8017a24:	0003      	movs	r3, r0
 8017a26:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017a28:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	789b      	ldrb	r3, [r3, #2]
 8017a2e:	0018      	movs	r0, r3
 8017a30:	f000 fa14 	bl	8017e5c <RTC_ByteToBcd2>
 8017a34:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017a36:	0022      	movs	r2, r4
 8017a38:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	78db      	ldrb	r3, [r3, #3]
 8017a3e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017a40:	4313      	orrs	r3, r2
 8017a42:	617b      	str	r3, [r7, #20]
 8017a44:	e016      	b.n	8017a74 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8017a46:	4b2d      	ldr	r3, [pc, #180]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017a48:	699b      	ldr	r3, [r3, #24]
 8017a4a:	2240      	movs	r2, #64	@ 0x40
 8017a4c:	4013      	ands	r3, r2
 8017a4e:	d102      	bne.n	8017a56 <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	2200      	movs	r2, #0
 8017a54:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017a56:	68bb      	ldr	r3, [r7, #8]
 8017a58:	781b      	ldrb	r3, [r3, #0]
 8017a5a:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	785b      	ldrb	r3, [r3, #1]
 8017a60:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017a62:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8017a64:	68ba      	ldr	r2, [r7, #8]
 8017a66:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8017a68:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	78db      	ldrb	r3, [r3, #3]
 8017a6e:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8017a70:	4313      	orrs	r3, r2
 8017a72:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8017a74:	4b21      	ldr	r3, [pc, #132]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017a76:	697a      	ldr	r2, [r7, #20]
 8017a78:	4921      	ldr	r1, [pc, #132]	@ (8017b00 <HAL_RTC_SetTime+0x178>)
 8017a7a:	400a      	ands	r2, r1
 8017a7c:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8017a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017a80:	699a      	ldr	r2, [r3, #24]
 8017a82:	4b1e      	ldr	r3, [pc, #120]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017a84:	491f      	ldr	r1, [pc, #124]	@ (8017b04 <HAL_RTC_SetTime+0x17c>)
 8017a86:	400a      	ands	r2, r1
 8017a88:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8017a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017a8c:	6999      	ldr	r1, [r3, #24]
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	68da      	ldr	r2, [r3, #12]
 8017a92:	68bb      	ldr	r3, [r7, #8]
 8017a94:	691b      	ldr	r3, [r3, #16]
 8017a96:	431a      	orrs	r2, r3
 8017a98:	4b18      	ldr	r3, [pc, #96]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017a9a:	430a      	orrs	r2, r1
 8017a9c:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017a9e:	4b17      	ldr	r3, [pc, #92]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017aa0:	68da      	ldr	r2, [r3, #12]
 8017aa2:	4b16      	ldr	r3, [pc, #88]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017aa4:	2180      	movs	r1, #128	@ 0x80
 8017aa6:	438a      	bics	r2, r1
 8017aa8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8017aaa:	4b14      	ldr	r3, [pc, #80]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017aac:	699b      	ldr	r3, [r3, #24]
 8017aae:	2220      	movs	r2, #32
 8017ab0:	4013      	ands	r3, r2
 8017ab2:	d112      	bne.n	8017ada <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	0018      	movs	r0, r3
 8017ab8:	f000 f97e 	bl	8017db8 <HAL_RTC_WaitForSynchro>
 8017abc:	1e03      	subs	r3, r0, #0
 8017abe:	d00c      	beq.n	8017ada <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017ac2:	22ff      	movs	r2, #255	@ 0xff
 8017ac4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	222d      	movs	r2, #45	@ 0x2d
 8017aca:	2104      	movs	r1, #4
 8017acc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	222c      	movs	r2, #44	@ 0x2c
 8017ad2:	2100      	movs	r1, #0
 8017ad4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017ad6:	2301      	movs	r3, #1
 8017ad8:	e00b      	b.n	8017af2 <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017ada:	4b08      	ldr	r3, [pc, #32]	@ (8017afc <HAL_RTC_SetTime+0x174>)
 8017adc:	22ff      	movs	r2, #255	@ 0xff
 8017ade:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	222d      	movs	r2, #45	@ 0x2d
 8017ae4:	2101      	movs	r1, #1
 8017ae6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	222c      	movs	r2, #44	@ 0x2c
 8017aec:	2100      	movs	r1, #0
 8017aee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017af0:	2300      	movs	r3, #0
  }
}
 8017af2:	0018      	movs	r0, r3
 8017af4:	46bd      	mov	sp, r7
 8017af6:	b007      	add	sp, #28
 8017af8:	bd90      	pop	{r4, r7, pc}
 8017afa:	46c0      	nop			@ (mov r8, r8)
 8017afc:	40002800 	.word	0x40002800
 8017b00:	007f7f7f 	.word	0x007f7f7f
 8017b04:	fffbffff 	.word	0xfffbffff

08017b08 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b086      	sub	sp, #24
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	60f8      	str	r0, [r7, #12]
 8017b10:	60b9      	str	r1, [r7, #8]
 8017b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8017b14:	4b2c      	ldr	r3, [pc, #176]	@ (8017bc8 <HAL_RTC_GetTime+0xc0>)
 8017b16:	689a      	ldr	r2, [r3, #8]
 8017b18:	68bb      	ldr	r3, [r7, #8]
 8017b1a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8017b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8017bc8 <HAL_RTC_GetTime+0xc0>)
 8017b1e:	68da      	ldr	r2, [r3, #12]
 8017b20:	23c0      	movs	r3, #192	@ 0xc0
 8017b22:	009b      	lsls	r3, r3, #2
 8017b24:	401a      	ands	r2, r3
 8017b26:	2380      	movs	r3, #128	@ 0x80
 8017b28:	005b      	lsls	r3, r3, #1
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d047      	beq.n	8017bbe <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8017b2e:	4b26      	ldr	r3, [pc, #152]	@ (8017bc8 <HAL_RTC_GetTime+0xc0>)
 8017b30:	691b      	ldr	r3, [r3, #16]
 8017b32:	045b      	lsls	r3, r3, #17
 8017b34:	0c5a      	lsrs	r2, r3, #17
 8017b36:	68bb      	ldr	r3, [r7, #8]
 8017b38:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8017b3a:	4b23      	ldr	r3, [pc, #140]	@ (8017bc8 <HAL_RTC_GetTime+0xc0>)
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	4a23      	ldr	r2, [pc, #140]	@ (8017bcc <HAL_RTC_GetTime+0xc4>)
 8017b40:	4013      	ands	r3, r2
 8017b42:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8017b44:	697b      	ldr	r3, [r7, #20]
 8017b46:	0c1b      	lsrs	r3, r3, #16
 8017b48:	b2db      	uxtb	r3, r3
 8017b4a:	223f      	movs	r2, #63	@ 0x3f
 8017b4c:	4013      	ands	r3, r2
 8017b4e:	b2da      	uxtb	r2, r3
 8017b50:	68bb      	ldr	r3, [r7, #8]
 8017b52:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8017b54:	697b      	ldr	r3, [r7, #20]
 8017b56:	0a1b      	lsrs	r3, r3, #8
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	227f      	movs	r2, #127	@ 0x7f
 8017b5c:	4013      	ands	r3, r2
 8017b5e:	b2da      	uxtb	r2, r3
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8017b64:	697b      	ldr	r3, [r7, #20]
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	227f      	movs	r2, #127	@ 0x7f
 8017b6a:	4013      	ands	r3, r2
 8017b6c:	b2da      	uxtb	r2, r3
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8017b72:	697b      	ldr	r3, [r7, #20]
 8017b74:	0d9b      	lsrs	r3, r3, #22
 8017b76:	b2db      	uxtb	r3, r3
 8017b78:	2201      	movs	r2, #1
 8017b7a:	4013      	ands	r3, r2
 8017b7c:	b2da      	uxtb	r2, r3
 8017b7e:	68bb      	ldr	r3, [r7, #8]
 8017b80:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d11a      	bne.n	8017bbe <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8017b88:	68bb      	ldr	r3, [r7, #8]
 8017b8a:	781b      	ldrb	r3, [r3, #0]
 8017b8c:	0018      	movs	r0, r3
 8017b8e:	f000 f98d 	bl	8017eac <RTC_Bcd2ToByte>
 8017b92:	0003      	movs	r3, r0
 8017b94:	001a      	movs	r2, r3
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	785b      	ldrb	r3, [r3, #1]
 8017b9e:	0018      	movs	r0, r3
 8017ba0:	f000 f984 	bl	8017eac <RTC_Bcd2ToByte>
 8017ba4:	0003      	movs	r3, r0
 8017ba6:	001a      	movs	r2, r3
 8017ba8:	68bb      	ldr	r3, [r7, #8]
 8017baa:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8017bac:	68bb      	ldr	r3, [r7, #8]
 8017bae:	789b      	ldrb	r3, [r3, #2]
 8017bb0:	0018      	movs	r0, r3
 8017bb2:	f000 f97b 	bl	8017eac <RTC_Bcd2ToByte>
 8017bb6:	0003      	movs	r3, r0
 8017bb8:	001a      	movs	r2, r3
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8017bbe:	2300      	movs	r3, #0
}
 8017bc0:	0018      	movs	r0, r3
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	b006      	add	sp, #24
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	40002800 	.word	0x40002800
 8017bcc:	007f7f7f 	.word	0x007f7f7f

08017bd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017bd0:	b590      	push	{r4, r7, lr}
 8017bd2:	b087      	sub	sp, #28
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	60b9      	str	r1, [r7, #8]
 8017bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	222c      	movs	r2, #44	@ 0x2c
 8017be0:	5c9b      	ldrb	r3, [r3, r2]
 8017be2:	2b01      	cmp	r3, #1
 8017be4:	d101      	bne.n	8017bea <HAL_RTC_SetDate+0x1a>
 8017be6:	2302      	movs	r3, #2
 8017be8:	e090      	b.n	8017d0c <HAL_RTC_SetDate+0x13c>
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	222c      	movs	r2, #44	@ 0x2c
 8017bee:	2101      	movs	r1, #1
 8017bf0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	222d      	movs	r2, #45	@ 0x2d
 8017bf6:	2102      	movs	r1, #2
 8017bf8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d10e      	bne.n	8017c1e <HAL_RTC_SetDate+0x4e>
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	785b      	ldrb	r3, [r3, #1]
 8017c04:	001a      	movs	r2, r3
 8017c06:	2310      	movs	r3, #16
 8017c08:	4013      	ands	r3, r2
 8017c0a:	d008      	beq.n	8017c1e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8017c0c:	68bb      	ldr	r3, [r7, #8]
 8017c0e:	785b      	ldrb	r3, [r3, #1]
 8017c10:	2210      	movs	r2, #16
 8017c12:	4393      	bics	r3, r2
 8017c14:	b2db      	uxtb	r3, r3
 8017c16:	330a      	adds	r3, #10
 8017c18:	b2da      	uxtb	r2, r3
 8017c1a:	68bb      	ldr	r3, [r7, #8]
 8017c1c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d11c      	bne.n	8017c5e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017c24:	68bb      	ldr	r3, [r7, #8]
 8017c26:	78db      	ldrb	r3, [r3, #3]
 8017c28:	0018      	movs	r0, r3
 8017c2a:	f000 f917 	bl	8017e5c <RTC_ByteToBcd2>
 8017c2e:	0003      	movs	r3, r0
 8017c30:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	785b      	ldrb	r3, [r3, #1]
 8017c36:	0018      	movs	r0, r3
 8017c38:	f000 f910 	bl	8017e5c <RTC_ByteToBcd2>
 8017c3c:	0003      	movs	r3, r0
 8017c3e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017c40:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	789b      	ldrb	r3, [r3, #2]
 8017c46:	0018      	movs	r0, r3
 8017c48:	f000 f908 	bl	8017e5c <RTC_ByteToBcd2>
 8017c4c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8017c4e:	0022      	movs	r2, r4
 8017c50:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8017c52:	68bb      	ldr	r3, [r7, #8]
 8017c54:	781b      	ldrb	r3, [r3, #0]
 8017c56:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8017c58:	4313      	orrs	r3, r2
 8017c5a:	617b      	str	r3, [r7, #20]
 8017c5c:	e00e      	b.n	8017c7c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	78db      	ldrb	r3, [r3, #3]
 8017c62:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	785b      	ldrb	r3, [r3, #1]
 8017c68:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8017c6a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8017c6c:	68ba      	ldr	r2, [r7, #8]
 8017c6e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8017c70:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8017c78:	4313      	orrs	r3, r2
 8017c7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017c7c:	4b25      	ldr	r3, [pc, #148]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017c7e:	22ca      	movs	r2, #202	@ 0xca
 8017c80:	625a      	str	r2, [r3, #36]	@ 0x24
 8017c82:	4b24      	ldr	r3, [pc, #144]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017c84:	2253      	movs	r2, #83	@ 0x53
 8017c86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	0018      	movs	r0, r3
 8017c8c:	f000 f8ba 	bl	8017e04 <RTC_EnterInitMode>
 8017c90:	1e03      	subs	r3, r0, #0
 8017c92:	d00c      	beq.n	8017cae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017c94:	4b1f      	ldr	r3, [pc, #124]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017c96:	22ff      	movs	r2, #255	@ 0xff
 8017c98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	222d      	movs	r2, #45	@ 0x2d
 8017c9e:	2104      	movs	r1, #4
 8017ca0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	222c      	movs	r2, #44	@ 0x2c
 8017ca6:	2100      	movs	r1, #0
 8017ca8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8017caa:	2301      	movs	r3, #1
 8017cac:	e02e      	b.n	8017d0c <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8017cae:	4b19      	ldr	r3, [pc, #100]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017cb0:	697a      	ldr	r2, [r7, #20]
 8017cb2:	4919      	ldr	r1, [pc, #100]	@ (8017d18 <HAL_RTC_SetDate+0x148>)
 8017cb4:	400a      	ands	r2, r1
 8017cb6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017cb8:	4b16      	ldr	r3, [pc, #88]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017cba:	68da      	ldr	r2, [r3, #12]
 8017cbc:	4b15      	ldr	r3, [pc, #84]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017cbe:	2180      	movs	r1, #128	@ 0x80
 8017cc0:	438a      	bics	r2, r1
 8017cc2:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8017cc4:	4b13      	ldr	r3, [pc, #76]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017cc6:	699b      	ldr	r3, [r3, #24]
 8017cc8:	2220      	movs	r2, #32
 8017cca:	4013      	ands	r3, r2
 8017ccc:	d112      	bne.n	8017cf4 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	0018      	movs	r0, r3
 8017cd2:	f000 f871 	bl	8017db8 <HAL_RTC_WaitForSynchro>
 8017cd6:	1e03      	subs	r3, r0, #0
 8017cd8:	d00c      	beq.n	8017cf4 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017cda:	4b0e      	ldr	r3, [pc, #56]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017cdc:	22ff      	movs	r2, #255	@ 0xff
 8017cde:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	222d      	movs	r2, #45	@ 0x2d
 8017ce4:	2104      	movs	r1, #4
 8017ce6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	222c      	movs	r2, #44	@ 0x2c
 8017cec:	2100      	movs	r1, #0
 8017cee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	e00b      	b.n	8017d0c <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017cf4:	4b07      	ldr	r3, [pc, #28]	@ (8017d14 <HAL_RTC_SetDate+0x144>)
 8017cf6:	22ff      	movs	r2, #255	@ 0xff
 8017cf8:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	222d      	movs	r2, #45	@ 0x2d
 8017cfe:	2101      	movs	r1, #1
 8017d00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	222c      	movs	r2, #44	@ 0x2c
 8017d06:	2100      	movs	r1, #0
 8017d08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017d0a:	2300      	movs	r3, #0
  }
}
 8017d0c:	0018      	movs	r0, r3
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	b007      	add	sp, #28
 8017d12:	bd90      	pop	{r4, r7, pc}
 8017d14:	40002800 	.word	0x40002800
 8017d18:	00ffff3f 	.word	0x00ffff3f

08017d1c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b086      	sub	sp, #24
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	60f8      	str	r0, [r7, #12]
 8017d24:	60b9      	str	r1, [r7, #8]
 8017d26:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8017d28:	4b21      	ldr	r3, [pc, #132]	@ (8017db0 <HAL_RTC_GetDate+0x94>)
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	4a21      	ldr	r2, [pc, #132]	@ (8017db4 <HAL_RTC_GetDate+0x98>)
 8017d2e:	4013      	ands	r3, r2
 8017d30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8017d32:	697b      	ldr	r3, [r7, #20]
 8017d34:	0c1b      	lsrs	r3, r3, #16
 8017d36:	b2da      	uxtb	r2, r3
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	0a1b      	lsrs	r3, r3, #8
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	221f      	movs	r2, #31
 8017d44:	4013      	ands	r3, r2
 8017d46:	b2da      	uxtb	r2, r3
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8017d4c:	697b      	ldr	r3, [r7, #20]
 8017d4e:	b2db      	uxtb	r3, r3
 8017d50:	223f      	movs	r2, #63	@ 0x3f
 8017d52:	4013      	ands	r3, r2
 8017d54:	b2da      	uxtb	r2, r3
 8017d56:	68bb      	ldr	r3, [r7, #8]
 8017d58:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8017d5a:	697b      	ldr	r3, [r7, #20]
 8017d5c:	0b5b      	lsrs	r3, r3, #13
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	2207      	movs	r2, #7
 8017d62:	4013      	ands	r3, r2
 8017d64:	b2da      	uxtb	r2, r3
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d11a      	bne.n	8017da6 <HAL_RTC_GetDate+0x8a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	78db      	ldrb	r3, [r3, #3]
 8017d74:	0018      	movs	r0, r3
 8017d76:	f000 f899 	bl	8017eac <RTC_Bcd2ToByte>
 8017d7a:	0003      	movs	r3, r0
 8017d7c:	001a      	movs	r2, r3
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	785b      	ldrb	r3, [r3, #1]
 8017d86:	0018      	movs	r0, r3
 8017d88:	f000 f890 	bl	8017eac <RTC_Bcd2ToByte>
 8017d8c:	0003      	movs	r3, r0
 8017d8e:	001a      	movs	r2, r3
 8017d90:	68bb      	ldr	r3, [r7, #8]
 8017d92:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	789b      	ldrb	r3, [r3, #2]
 8017d98:	0018      	movs	r0, r3
 8017d9a:	f000 f887 	bl	8017eac <RTC_Bcd2ToByte>
 8017d9e:	0003      	movs	r3, r0
 8017da0:	001a      	movs	r2, r3
 8017da2:	68bb      	ldr	r3, [r7, #8]
 8017da4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8017da6:	2300      	movs	r3, #0
}
 8017da8:	0018      	movs	r0, r3
 8017daa:	46bd      	mov	sp, r7
 8017dac:	b006      	add	sp, #24
 8017dae:	bd80      	pop	{r7, pc}
 8017db0:	40002800 	.word	0x40002800
 8017db4:	00ffff3f 	.word	0x00ffff3f

08017db8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b084      	sub	sp, #16
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8017dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8017e00 <HAL_RTC_WaitForSynchro+0x48>)
 8017dc2:	68da      	ldr	r2, [r3, #12]
 8017dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8017e00 <HAL_RTC_WaitForSynchro+0x48>)
 8017dc6:	2120      	movs	r1, #32
 8017dc8:	438a      	bics	r2, r1
 8017dca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8017dcc:	f7f9 f9d2 	bl	8011174 <HAL_GetTick>
 8017dd0:	0003      	movs	r3, r0
 8017dd2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8017dd4:	e00a      	b.n	8017dec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017dd6:	f7f9 f9cd 	bl	8011174 <HAL_GetTick>
 8017dda:	0002      	movs	r2, r0
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	1ad2      	subs	r2, r2, r3
 8017de0:	23fa      	movs	r3, #250	@ 0xfa
 8017de2:	009b      	lsls	r3, r3, #2
 8017de4:	429a      	cmp	r2, r3
 8017de6:	d901      	bls.n	8017dec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8017de8:	2303      	movs	r3, #3
 8017dea:	e005      	b.n	8017df8 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8017dec:	4b04      	ldr	r3, [pc, #16]	@ (8017e00 <HAL_RTC_WaitForSynchro+0x48>)
 8017dee:	68db      	ldr	r3, [r3, #12]
 8017df0:	2220      	movs	r2, #32
 8017df2:	4013      	ands	r3, r2
 8017df4:	d0ef      	beq.n	8017dd6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8017df6:	2300      	movs	r3, #0
}
 8017df8:	0018      	movs	r0, r3
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	b004      	add	sp, #16
 8017dfe:	bd80      	pop	{r7, pc}
 8017e00:	40002800 	.word	0x40002800

08017e04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017e0c:	4b12      	ldr	r3, [pc, #72]	@ (8017e58 <RTC_EnterInitMode+0x54>)
 8017e0e:	68db      	ldr	r3, [r3, #12]
 8017e10:	2240      	movs	r2, #64	@ 0x40
 8017e12:	4013      	ands	r3, r2
 8017e14:	d11a      	bne.n	8017e4c <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017e16:	4b10      	ldr	r3, [pc, #64]	@ (8017e58 <RTC_EnterInitMode+0x54>)
 8017e18:	68da      	ldr	r2, [r3, #12]
 8017e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8017e58 <RTC_EnterInitMode+0x54>)
 8017e1c:	2180      	movs	r1, #128	@ 0x80
 8017e1e:	430a      	orrs	r2, r1
 8017e20:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8017e22:	f7f9 f9a7 	bl	8011174 <HAL_GetTick>
 8017e26:	0003      	movs	r3, r0
 8017e28:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017e2a:	e00a      	b.n	8017e42 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8017e2c:	f7f9 f9a2 	bl	8011174 <HAL_GetTick>
 8017e30:	0002      	movs	r2, r0
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	1ad2      	subs	r2, r2, r3
 8017e36:	23fa      	movs	r3, #250	@ 0xfa
 8017e38:	009b      	lsls	r3, r3, #2
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d901      	bls.n	8017e42 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8017e3e:	2303      	movs	r3, #3
 8017e40:	e005      	b.n	8017e4e <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8017e42:	4b05      	ldr	r3, [pc, #20]	@ (8017e58 <RTC_EnterInitMode+0x54>)
 8017e44:	68db      	ldr	r3, [r3, #12]
 8017e46:	2240      	movs	r2, #64	@ 0x40
 8017e48:	4013      	ands	r3, r2
 8017e4a:	d0ef      	beq.n	8017e2c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8017e4c:	2300      	movs	r3, #0
}
 8017e4e:	0018      	movs	r0, r3
 8017e50:	46bd      	mov	sp, r7
 8017e52:	b004      	add	sp, #16
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	46c0      	nop			@ (mov r8, r8)
 8017e58:	40002800 	.word	0x40002800

08017e5c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b084      	sub	sp, #16
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	0002      	movs	r2, r0
 8017e64:	1dfb      	adds	r3, r7, #7
 8017e66:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8017e6c:	230b      	movs	r3, #11
 8017e6e:	18fb      	adds	r3, r7, r3
 8017e70:	1dfa      	adds	r2, r7, #7
 8017e72:	7812      	ldrb	r2, [r2, #0]
 8017e74:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8017e76:	e008      	b.n	8017e8a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8017e7e:	220b      	movs	r2, #11
 8017e80:	18bb      	adds	r3, r7, r2
 8017e82:	18ba      	adds	r2, r7, r2
 8017e84:	7812      	ldrb	r2, [r2, #0]
 8017e86:	3a0a      	subs	r2, #10
 8017e88:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8017e8a:	210b      	movs	r1, #11
 8017e8c:	187b      	adds	r3, r7, r1
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	2b09      	cmp	r3, #9
 8017e92:	d8f1      	bhi.n	8017e78 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	011b      	lsls	r3, r3, #4
 8017e9a:	b2da      	uxtb	r2, r3
 8017e9c:	187b      	adds	r3, r7, r1
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	4313      	orrs	r3, r2
 8017ea2:	b2db      	uxtb	r3, r3
}
 8017ea4:	0018      	movs	r0, r3
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	b004      	add	sp, #16
 8017eaa:	bd80      	pop	{r7, pc}

08017eac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b084      	sub	sp, #16
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	0002      	movs	r2, r0
 8017eb4:	1dfb      	adds	r3, r7, #7
 8017eb6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8017eb8:	1dfb      	adds	r3, r7, #7
 8017eba:	781b      	ldrb	r3, [r3, #0]
 8017ebc:	091b      	lsrs	r3, r3, #4
 8017ebe:	b2db      	uxtb	r3, r3
 8017ec0:	001a      	movs	r2, r3
 8017ec2:	0013      	movs	r3, r2
 8017ec4:	009b      	lsls	r3, r3, #2
 8017ec6:	189b      	adds	r3, r3, r2
 8017ec8:	005b      	lsls	r3, r3, #1
 8017eca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	b2da      	uxtb	r2, r3
 8017ed0:	1dfb      	adds	r3, r7, #7
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	210f      	movs	r1, #15
 8017ed6:	400b      	ands	r3, r1
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	18d3      	adds	r3, r2, r3
 8017edc:	b2db      	uxtb	r3, r3
}
 8017ede:	0018      	movs	r0, r3
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	b004      	add	sp, #16
 8017ee4:	bd80      	pop	{r7, pc}
	...

08017ee8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b086      	sub	sp, #24
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
 8017ef4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	222c      	movs	r2, #44	@ 0x2c
 8017efa:	5c9b      	ldrb	r3, [r3, r2]
 8017efc:	2b01      	cmp	r3, #1
 8017efe:	d101      	bne.n	8017f04 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8017f00:	2302      	movs	r3, #2
 8017f02:	e088      	b.n	8018016 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	222c      	movs	r2, #44	@ 0x2c
 8017f08:	2101      	movs	r1, #1
 8017f0a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	222d      	movs	r2, #45	@ 0x2d
 8017f10:	2102      	movs	r1, #2
 8017f12:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8017f14:	4b42      	ldr	r3, [pc, #264]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017f16:	699a      	ldr	r2, [r3, #24]
 8017f18:	2380      	movs	r3, #128	@ 0x80
 8017f1a:	00db      	lsls	r3, r3, #3
 8017f1c:	4013      	ands	r3, r2
 8017f1e:	d01c      	beq.n	8017f5a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8017f20:	f7f9 f928 	bl	8011174 <HAL_GetTick>
 8017f24:	0003      	movs	r3, r0
 8017f26:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8017f28:	e012      	b.n	8017f50 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017f2a:	f7f9 f923 	bl	8011174 <HAL_GetTick>
 8017f2e:	0002      	movs	r2, r0
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	1ad2      	subs	r2, r2, r3
 8017f34:	23fa      	movs	r3, #250	@ 0xfa
 8017f36:	009b      	lsls	r3, r3, #2
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d909      	bls.n	8017f50 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	222d      	movs	r2, #45	@ 0x2d
 8017f40:	2103      	movs	r1, #3
 8017f42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	222c      	movs	r2, #44	@ 0x2c
 8017f48:	2100      	movs	r1, #0
 8017f4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8017f4c:	2303      	movs	r3, #3
 8017f4e:	e062      	b.n	8018016 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8017f50:	4b33      	ldr	r3, [pc, #204]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017f52:	68db      	ldr	r3, [r3, #12]
 8017f54:	2204      	movs	r2, #4
 8017f56:	4013      	ands	r3, r2
 8017f58:	d1e7      	bne.n	8017f2a <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8017f5a:	4b31      	ldr	r3, [pc, #196]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017f5c:	699a      	ldr	r2, [r3, #24]
 8017f5e:	4b30      	ldr	r3, [pc, #192]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017f60:	4930      	ldr	r1, [pc, #192]	@ (8018024 <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 8017f62:	400a      	ands	r2, r1
 8017f64:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8017f66:	4b2e      	ldr	r3, [pc, #184]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017f68:	2204      	movs	r2, #4
 8017f6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8017f6c:	f7f9 f902 	bl	8011174 <HAL_GetTick>
 8017f70:	0003      	movs	r3, r0
 8017f72:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8017f74:	e015      	b.n	8017fa2 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017f76:	f7f9 f8fd 	bl	8011174 <HAL_GetTick>
 8017f7a:	0002      	movs	r2, r0
 8017f7c:	697b      	ldr	r3, [r7, #20]
 8017f7e:	1ad2      	subs	r2, r2, r3
 8017f80:	23fa      	movs	r3, #250	@ 0xfa
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d90c      	bls.n	8017fa2 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017f88:	4b25      	ldr	r3, [pc, #148]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017f8a:	22ff      	movs	r2, #255	@ 0xff
 8017f8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	222d      	movs	r2, #45	@ 0x2d
 8017f92:	2103      	movs	r1, #3
 8017f94:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	222c      	movs	r2, #44	@ 0x2c
 8017f9a:	2100      	movs	r1, #0
 8017f9c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8017f9e:	2303      	movs	r3, #3
 8017fa0:	e039      	b.n	8018016 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8017fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017fa4:	68db      	ldr	r3, [r3, #12]
 8017fa6:	2204      	movs	r2, #4
 8017fa8:	4013      	ands	r3, r2
 8017faa:	d0e4      	beq.n	8017f76 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	0419      	lsls	r1, r3, #16
 8017fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017fb2:	68ba      	ldr	r2, [r7, #8]
 8017fb4:	430a      	orrs	r2, r1
 8017fb6:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8017fb8:	4b19      	ldr	r3, [pc, #100]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017fba:	699b      	ldr	r3, [r3, #24]
 8017fbc:	2207      	movs	r2, #7
 8017fbe:	4393      	bics	r3, r2
 8017fc0:	0019      	movs	r1, r3
 8017fc2:	4b17      	ldr	r3, [pc, #92]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017fc4:	687a      	ldr	r2, [r7, #4]
 8017fc6:	430a      	orrs	r2, r1
 8017fc8:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d009      	beq.n	8017fe4 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8017fd0:	4a15      	ldr	r2, [pc, #84]	@ (8018028 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017fd2:	2384      	movs	r3, #132	@ 0x84
 8017fd4:	58d3      	ldr	r3, [r2, r3]
 8017fd6:	4914      	ldr	r1, [pc, #80]	@ (8018028 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017fd8:	2280      	movs	r2, #128	@ 0x80
 8017fda:	0552      	lsls	r2, r2, #21
 8017fdc:	4313      	orrs	r3, r2
 8017fde:	2284      	movs	r2, #132	@ 0x84
 8017fe0:	508b      	str	r3, [r1, r2]
 8017fe2:	e008      	b.n	8017ff6 <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8017fe4:	4a10      	ldr	r2, [pc, #64]	@ (8018028 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017fe6:	2380      	movs	r3, #128	@ 0x80
 8017fe8:	58d3      	ldr	r3, [r2, r3]
 8017fea:	490f      	ldr	r1, [pc, #60]	@ (8018028 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8017fec:	2280      	movs	r2, #128	@ 0x80
 8017fee:	0552      	lsls	r2, r2, #21
 8017ff0:	4313      	orrs	r3, r2
 8017ff2:	2280      	movs	r2, #128	@ 0x80
 8017ff4:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8017ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017ff8:	699a      	ldr	r2, [r3, #24]
 8017ffa:	4b09      	ldr	r3, [pc, #36]	@ (8018020 <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8017ffc:	2188      	movs	r1, #136	@ 0x88
 8017ffe:	01c9      	lsls	r1, r1, #7
 8018000:	430a      	orrs	r2, r1
 8018002:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	222d      	movs	r2, #45	@ 0x2d
 8018008:	2101      	movs	r1, #1
 801800a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	222c      	movs	r2, #44	@ 0x2c
 8018010:	2100      	movs	r1, #0
 8018012:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018014:	2300      	movs	r3, #0
}
 8018016:	0018      	movs	r0, r3
 8018018:	46bd      	mov	sp, r7
 801801a:	b006      	add	sp, #24
 801801c:	bd80      	pop	{r7, pc}
 801801e:	46c0      	nop			@ (mov r8, r8)
 8018020:	40002800 	.word	0x40002800
 8018024:	fffffbff 	.word	0xfffffbff
 8018028:	40021800 	.word	0x40021800

0801802c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b082      	sub	sp, #8
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	222c      	movs	r2, #44	@ 0x2c
 8018038:	5c9b      	ldrb	r3, [r3, r2]
 801803a:	2b01      	cmp	r3, #1
 801803c:	d101      	bne.n	8018042 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 801803e:	2302      	movs	r3, #2
 8018040:	e016      	b.n	8018070 <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	222c      	movs	r2, #44	@ 0x2c
 8018046:	2101      	movs	r1, #1
 8018048:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	222d      	movs	r2, #45	@ 0x2d
 801804e:	2102      	movs	r1, #2
 8018050:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8018052:	4b09      	ldr	r3, [pc, #36]	@ (8018078 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8018054:	699a      	ldr	r2, [r3, #24]
 8018056:	4b08      	ldr	r3, [pc, #32]	@ (8018078 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8018058:	4908      	ldr	r1, [pc, #32]	@ (801807c <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 801805a:	400a      	ands	r2, r1
 801805c:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	222d      	movs	r2, #45	@ 0x2d
 8018062:	2101      	movs	r1, #1
 8018064:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	222c      	movs	r2, #44	@ 0x2c
 801806a:	2100      	movs	r1, #0
 801806c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801806e:	2300      	movs	r3, #0
}
 8018070:	0018      	movs	r0, r3
 8018072:	46bd      	mov	sp, r7
 8018074:	b002      	add	sp, #8
 8018076:	bd80      	pop	{r7, pc}
 8018078:	40002800 	.word	0x40002800
 801807c:	ffffbbff 	.word	0xffffbbff

08018080 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b082      	sub	sp, #8
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8018088:	4b09      	ldr	r3, [pc, #36]	@ (80180b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 801808a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801808c:	2204      	movs	r2, #4
 801808e:	4013      	ands	r3, r2
 8018090:	d006      	beq.n	80180a0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8018092:	4b07      	ldr	r3, [pc, #28]	@ (80180b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8018094:	2204      	movs	r2, #4
 8018096:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	0018      	movs	r0, r3
 801809c:	f000 f80a 	bl	80180b4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	222d      	movs	r2, #45	@ 0x2d
 80180a4:	2101      	movs	r1, #1
 80180a6:	5499      	strb	r1, [r3, r2]
}
 80180a8:	46c0      	nop			@ (mov r8, r8)
 80180aa:	46bd      	mov	sp, r7
 80180ac:	b002      	add	sp, #8
 80180ae:	bd80      	pop	{r7, pc}
 80180b0:	40002800 	.word	0x40002800

080180b4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80180bc:	46c0      	nop			@ (mov r8, r8)
 80180be:	46bd      	mov	sp, r7
 80180c0:	b002      	add	sp, #8
 80180c2:	bd80      	pop	{r7, pc}

080180c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d101      	bne.n	80180d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80180d2:	2301      	movs	r3, #1
 80180d4:	e04a      	b.n	801816c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	223d      	movs	r2, #61	@ 0x3d
 80180da:	5c9b      	ldrb	r3, [r3, r2]
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d107      	bne.n	80180f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	223c      	movs	r2, #60	@ 0x3c
 80180e6:	2100      	movs	r1, #0
 80180e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	0018      	movs	r0, r3
 80180ee:	f7f3 fd39 	bl	800bb64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	223d      	movs	r2, #61	@ 0x3d
 80180f6:	2102      	movs	r1, #2
 80180f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681a      	ldr	r2, [r3, #0]
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	3304      	adds	r3, #4
 8018102:	0019      	movs	r1, r3
 8018104:	0010      	movs	r0, r2
 8018106:	f000 fbd9 	bl	80188bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	2248      	movs	r2, #72	@ 0x48
 801810e:	2101      	movs	r1, #1
 8018110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	223e      	movs	r2, #62	@ 0x3e
 8018116:	2101      	movs	r1, #1
 8018118:	5499      	strb	r1, [r3, r2]
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	223f      	movs	r2, #63	@ 0x3f
 801811e:	2101      	movs	r1, #1
 8018120:	5499      	strb	r1, [r3, r2]
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2240      	movs	r2, #64	@ 0x40
 8018126:	2101      	movs	r1, #1
 8018128:	5499      	strb	r1, [r3, r2]
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	2241      	movs	r2, #65	@ 0x41
 801812e:	2101      	movs	r1, #1
 8018130:	5499      	strb	r1, [r3, r2]
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	2242      	movs	r2, #66	@ 0x42
 8018136:	2101      	movs	r1, #1
 8018138:	5499      	strb	r1, [r3, r2]
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	2243      	movs	r2, #67	@ 0x43
 801813e:	2101      	movs	r1, #1
 8018140:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	2244      	movs	r2, #68	@ 0x44
 8018146:	2101      	movs	r1, #1
 8018148:	5499      	strb	r1, [r3, r2]
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	2245      	movs	r2, #69	@ 0x45
 801814e:	2101      	movs	r1, #1
 8018150:	5499      	strb	r1, [r3, r2]
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2246      	movs	r2, #70	@ 0x46
 8018156:	2101      	movs	r1, #1
 8018158:	5499      	strb	r1, [r3, r2]
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	2247      	movs	r2, #71	@ 0x47
 801815e:	2101      	movs	r1, #1
 8018160:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	223d      	movs	r2, #61	@ 0x3d
 8018166:	2101      	movs	r1, #1
 8018168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801816a:	2300      	movs	r3, #0
}
 801816c:	0018      	movs	r0, r3
 801816e:	46bd      	mov	sp, r7
 8018170:	b002      	add	sp, #8
 8018172:	bd80      	pop	{r7, pc}

08018174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d101      	bne.n	8018186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8018182:	2301      	movs	r3, #1
 8018184:	e04a      	b.n	801821c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	223d      	movs	r2, #61	@ 0x3d
 801818a:	5c9b      	ldrb	r3, [r3, r2]
 801818c:	b2db      	uxtb	r3, r3
 801818e:	2b00      	cmp	r3, #0
 8018190:	d107      	bne.n	80181a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	223c      	movs	r2, #60	@ 0x3c
 8018196:	2100      	movs	r1, #0
 8018198:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	0018      	movs	r0, r3
 801819e:	f000 f841 	bl	8018224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	223d      	movs	r2, #61	@ 0x3d
 80181a6:	2102      	movs	r1, #2
 80181a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681a      	ldr	r2, [r3, #0]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	3304      	adds	r3, #4
 80181b2:	0019      	movs	r1, r3
 80181b4:	0010      	movs	r0, r2
 80181b6:	f000 fb81 	bl	80188bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	2248      	movs	r2, #72	@ 0x48
 80181be:	2101      	movs	r1, #1
 80181c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	223e      	movs	r2, #62	@ 0x3e
 80181c6:	2101      	movs	r1, #1
 80181c8:	5499      	strb	r1, [r3, r2]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	223f      	movs	r2, #63	@ 0x3f
 80181ce:	2101      	movs	r1, #1
 80181d0:	5499      	strb	r1, [r3, r2]
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	2240      	movs	r2, #64	@ 0x40
 80181d6:	2101      	movs	r1, #1
 80181d8:	5499      	strb	r1, [r3, r2]
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2241      	movs	r2, #65	@ 0x41
 80181de:	2101      	movs	r1, #1
 80181e0:	5499      	strb	r1, [r3, r2]
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	2242      	movs	r2, #66	@ 0x42
 80181e6:	2101      	movs	r1, #1
 80181e8:	5499      	strb	r1, [r3, r2]
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2243      	movs	r2, #67	@ 0x43
 80181ee:	2101      	movs	r1, #1
 80181f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	2244      	movs	r2, #68	@ 0x44
 80181f6:	2101      	movs	r1, #1
 80181f8:	5499      	strb	r1, [r3, r2]
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	2245      	movs	r2, #69	@ 0x45
 80181fe:	2101      	movs	r1, #1
 8018200:	5499      	strb	r1, [r3, r2]
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2246      	movs	r2, #70	@ 0x46
 8018206:	2101      	movs	r1, #1
 8018208:	5499      	strb	r1, [r3, r2]
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	2247      	movs	r2, #71	@ 0x47
 801820e:	2101      	movs	r1, #1
 8018210:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	223d      	movs	r2, #61	@ 0x3d
 8018216:	2101      	movs	r1, #1
 8018218:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801821a:	2300      	movs	r3, #0
}
 801821c:	0018      	movs	r0, r3
 801821e:	46bd      	mov	sp, r7
 8018220:	b002      	add	sp, #8
 8018222:	bd80      	pop	{r7, pc}

08018224 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b082      	sub	sp, #8
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801822c:	46c0      	nop			@ (mov r8, r8)
 801822e:	46bd      	mov	sp, r7
 8018230:	b002      	add	sp, #8
 8018232:	bd80      	pop	{r7, pc}

08018234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b084      	sub	sp, #16
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d108      	bne.n	8018256 <HAL_TIM_PWM_Start+0x22>
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	223e      	movs	r2, #62	@ 0x3e
 8018248:	5c9b      	ldrb	r3, [r3, r2]
 801824a:	b2db      	uxtb	r3, r3
 801824c:	3b01      	subs	r3, #1
 801824e:	1e5a      	subs	r2, r3, #1
 8018250:	4193      	sbcs	r3, r2
 8018252:	b2db      	uxtb	r3, r3
 8018254:	e037      	b.n	80182c6 <HAL_TIM_PWM_Start+0x92>
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	2b04      	cmp	r3, #4
 801825a:	d108      	bne.n	801826e <HAL_TIM_PWM_Start+0x3a>
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	223f      	movs	r2, #63	@ 0x3f
 8018260:	5c9b      	ldrb	r3, [r3, r2]
 8018262:	b2db      	uxtb	r3, r3
 8018264:	3b01      	subs	r3, #1
 8018266:	1e5a      	subs	r2, r3, #1
 8018268:	4193      	sbcs	r3, r2
 801826a:	b2db      	uxtb	r3, r3
 801826c:	e02b      	b.n	80182c6 <HAL_TIM_PWM_Start+0x92>
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	2b08      	cmp	r3, #8
 8018272:	d108      	bne.n	8018286 <HAL_TIM_PWM_Start+0x52>
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2240      	movs	r2, #64	@ 0x40
 8018278:	5c9b      	ldrb	r3, [r3, r2]
 801827a:	b2db      	uxtb	r3, r3
 801827c:	3b01      	subs	r3, #1
 801827e:	1e5a      	subs	r2, r3, #1
 8018280:	4193      	sbcs	r3, r2
 8018282:	b2db      	uxtb	r3, r3
 8018284:	e01f      	b.n	80182c6 <HAL_TIM_PWM_Start+0x92>
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	2b0c      	cmp	r3, #12
 801828a:	d108      	bne.n	801829e <HAL_TIM_PWM_Start+0x6a>
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	2241      	movs	r2, #65	@ 0x41
 8018290:	5c9b      	ldrb	r3, [r3, r2]
 8018292:	b2db      	uxtb	r3, r3
 8018294:	3b01      	subs	r3, #1
 8018296:	1e5a      	subs	r2, r3, #1
 8018298:	4193      	sbcs	r3, r2
 801829a:	b2db      	uxtb	r3, r3
 801829c:	e013      	b.n	80182c6 <HAL_TIM_PWM_Start+0x92>
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	2b10      	cmp	r3, #16
 80182a2:	d108      	bne.n	80182b6 <HAL_TIM_PWM_Start+0x82>
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2242      	movs	r2, #66	@ 0x42
 80182a8:	5c9b      	ldrb	r3, [r3, r2]
 80182aa:	b2db      	uxtb	r3, r3
 80182ac:	3b01      	subs	r3, #1
 80182ae:	1e5a      	subs	r2, r3, #1
 80182b0:	4193      	sbcs	r3, r2
 80182b2:	b2db      	uxtb	r3, r3
 80182b4:	e007      	b.n	80182c6 <HAL_TIM_PWM_Start+0x92>
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2243      	movs	r2, #67	@ 0x43
 80182ba:	5c9b      	ldrb	r3, [r3, r2]
 80182bc:	b2db      	uxtb	r3, r3
 80182be:	3b01      	subs	r3, #1
 80182c0:	1e5a      	subs	r2, r3, #1
 80182c2:	4193      	sbcs	r3, r2
 80182c4:	b2db      	uxtb	r3, r3
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d001      	beq.n	80182ce <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80182ca:	2301      	movs	r3, #1
 80182cc:	e086      	b.n	80183dc <HAL_TIM_PWM_Start+0x1a8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d104      	bne.n	80182de <HAL_TIM_PWM_Start+0xaa>
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	223e      	movs	r2, #62	@ 0x3e
 80182d8:	2102      	movs	r1, #2
 80182da:	5499      	strb	r1, [r3, r2]
 80182dc:	e023      	b.n	8018326 <HAL_TIM_PWM_Start+0xf2>
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	2b04      	cmp	r3, #4
 80182e2:	d104      	bne.n	80182ee <HAL_TIM_PWM_Start+0xba>
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	223f      	movs	r2, #63	@ 0x3f
 80182e8:	2102      	movs	r1, #2
 80182ea:	5499      	strb	r1, [r3, r2]
 80182ec:	e01b      	b.n	8018326 <HAL_TIM_PWM_Start+0xf2>
 80182ee:	683b      	ldr	r3, [r7, #0]
 80182f0:	2b08      	cmp	r3, #8
 80182f2:	d104      	bne.n	80182fe <HAL_TIM_PWM_Start+0xca>
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2240      	movs	r2, #64	@ 0x40
 80182f8:	2102      	movs	r1, #2
 80182fa:	5499      	strb	r1, [r3, r2]
 80182fc:	e013      	b.n	8018326 <HAL_TIM_PWM_Start+0xf2>
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	2b0c      	cmp	r3, #12
 8018302:	d104      	bne.n	801830e <HAL_TIM_PWM_Start+0xda>
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	2241      	movs	r2, #65	@ 0x41
 8018308:	2102      	movs	r1, #2
 801830a:	5499      	strb	r1, [r3, r2]
 801830c:	e00b      	b.n	8018326 <HAL_TIM_PWM_Start+0xf2>
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	2b10      	cmp	r3, #16
 8018312:	d104      	bne.n	801831e <HAL_TIM_PWM_Start+0xea>
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	2242      	movs	r2, #66	@ 0x42
 8018318:	2102      	movs	r1, #2
 801831a:	5499      	strb	r1, [r3, r2]
 801831c:	e003      	b.n	8018326 <HAL_TIM_PWM_Start+0xf2>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2243      	movs	r2, #67	@ 0x43
 8018322:	2102      	movs	r1, #2
 8018324:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	6839      	ldr	r1, [r7, #0]
 801832c:	2201      	movs	r2, #1
 801832e:	0018      	movs	r0, r3
 8018330:	f000 fe7a 	bl	8019028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	4a2a      	ldr	r2, [pc, #168]	@ (80183e4 <HAL_TIM_PWM_Start+0x1b0>)
 801833a:	4293      	cmp	r3, r2
 801833c:	d009      	beq.n	8018352 <HAL_TIM_PWM_Start+0x11e>
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	4a29      	ldr	r2, [pc, #164]	@ (80183e8 <HAL_TIM_PWM_Start+0x1b4>)
 8018344:	4293      	cmp	r3, r2
 8018346:	d004      	beq.n	8018352 <HAL_TIM_PWM_Start+0x11e>
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	4a27      	ldr	r2, [pc, #156]	@ (80183ec <HAL_TIM_PWM_Start+0x1b8>)
 801834e:	4293      	cmp	r3, r2
 8018350:	d101      	bne.n	8018356 <HAL_TIM_PWM_Start+0x122>
 8018352:	2301      	movs	r3, #1
 8018354:	e000      	b.n	8018358 <HAL_TIM_PWM_Start+0x124>
 8018356:	2300      	movs	r3, #0
 8018358:	2b00      	cmp	r3, #0
 801835a:	d008      	beq.n	801836e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	2180      	movs	r1, #128	@ 0x80
 8018368:	0209      	lsls	r1, r1, #8
 801836a:	430a      	orrs	r2, r1
 801836c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a1c      	ldr	r2, [pc, #112]	@ (80183e4 <HAL_TIM_PWM_Start+0x1b0>)
 8018374:	4293      	cmp	r3, r2
 8018376:	d00f      	beq.n	8018398 <HAL_TIM_PWM_Start+0x164>
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	2380      	movs	r3, #128	@ 0x80
 801837e:	05db      	lsls	r3, r3, #23
 8018380:	429a      	cmp	r2, r3
 8018382:	d009      	beq.n	8018398 <HAL_TIM_PWM_Start+0x164>
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	4a19      	ldr	r2, [pc, #100]	@ (80183f0 <HAL_TIM_PWM_Start+0x1bc>)
 801838a:	4293      	cmp	r3, r2
 801838c:	d004      	beq.n	8018398 <HAL_TIM_PWM_Start+0x164>
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	4a15      	ldr	r2, [pc, #84]	@ (80183e8 <HAL_TIM_PWM_Start+0x1b4>)
 8018394:	4293      	cmp	r3, r2
 8018396:	d116      	bne.n	80183c6 <HAL_TIM_PWM_Start+0x192>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	689b      	ldr	r3, [r3, #8]
 801839e:	4a15      	ldr	r2, [pc, #84]	@ (80183f4 <HAL_TIM_PWM_Start+0x1c0>)
 80183a0:	4013      	ands	r3, r2
 80183a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	2b06      	cmp	r3, #6
 80183a8:	d016      	beq.n	80183d8 <HAL_TIM_PWM_Start+0x1a4>
 80183aa:	68fa      	ldr	r2, [r7, #12]
 80183ac:	2380      	movs	r3, #128	@ 0x80
 80183ae:	025b      	lsls	r3, r3, #9
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d011      	beq.n	80183d8 <HAL_TIM_PWM_Start+0x1a4>
    {
      __HAL_TIM_ENABLE(htim);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	681a      	ldr	r2, [r3, #0]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	2101      	movs	r1, #1
 80183c0:	430a      	orrs	r2, r1
 80183c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80183c4:	e008      	b.n	80183d8 <HAL_TIM_PWM_Start+0x1a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	2101      	movs	r1, #1
 80183d2:	430a      	orrs	r2, r1
 80183d4:	601a      	str	r2, [r3, #0]
 80183d6:	e000      	b.n	80183da <HAL_TIM_PWM_Start+0x1a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80183d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80183da:	2300      	movs	r3, #0
}
 80183dc:	0018      	movs	r0, r3
 80183de:	46bd      	mov	sp, r7
 80183e0:	b004      	add	sp, #16
 80183e2:	bd80      	pop	{r7, pc}
 80183e4:	40012c00 	.word	0x40012c00
 80183e8:	40014000 	.word	0x40014000
 80183ec:	40014400 	.word	0x40014400
 80183f0:	40000400 	.word	0x40000400
 80183f4:	00010007 	.word	0x00010007

080183f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
 8018400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	6839      	ldr	r1, [r7, #0]
 8018408:	2200      	movs	r2, #0
 801840a:	0018      	movs	r0, r3
 801840c:	f000 fe0c 	bl	8019028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	4a35      	ldr	r2, [pc, #212]	@ (80184ec <HAL_TIM_PWM_Stop+0xf4>)
 8018416:	4293      	cmp	r3, r2
 8018418:	d009      	beq.n	801842e <HAL_TIM_PWM_Stop+0x36>
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	4a34      	ldr	r2, [pc, #208]	@ (80184f0 <HAL_TIM_PWM_Stop+0xf8>)
 8018420:	4293      	cmp	r3, r2
 8018422:	d004      	beq.n	801842e <HAL_TIM_PWM_Stop+0x36>
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	4a32      	ldr	r2, [pc, #200]	@ (80184f4 <HAL_TIM_PWM_Stop+0xfc>)
 801842a:	4293      	cmp	r3, r2
 801842c:	d101      	bne.n	8018432 <HAL_TIM_PWM_Stop+0x3a>
 801842e:	2301      	movs	r3, #1
 8018430:	e000      	b.n	8018434 <HAL_TIM_PWM_Stop+0x3c>
 8018432:	2300      	movs	r3, #0
 8018434:	2b00      	cmp	r3, #0
 8018436:	d013      	beq.n	8018460 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	6a1b      	ldr	r3, [r3, #32]
 801843e:	4a2e      	ldr	r2, [pc, #184]	@ (80184f8 <HAL_TIM_PWM_Stop+0x100>)
 8018440:	4013      	ands	r3, r2
 8018442:	d10d      	bne.n	8018460 <HAL_TIM_PWM_Stop+0x68>
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	6a1b      	ldr	r3, [r3, #32]
 801844a:	4a2c      	ldr	r2, [pc, #176]	@ (80184fc <HAL_TIM_PWM_Stop+0x104>)
 801844c:	4013      	ands	r3, r2
 801844e:	d107      	bne.n	8018460 <HAL_TIM_PWM_Stop+0x68>
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	4929      	ldr	r1, [pc, #164]	@ (8018500 <HAL_TIM_PWM_Stop+0x108>)
 801845c:	400a      	ands	r2, r1
 801845e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	6a1b      	ldr	r3, [r3, #32]
 8018466:	4a24      	ldr	r2, [pc, #144]	@ (80184f8 <HAL_TIM_PWM_Stop+0x100>)
 8018468:	4013      	ands	r3, r2
 801846a:	d10d      	bne.n	8018488 <HAL_TIM_PWM_Stop+0x90>
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	6a1b      	ldr	r3, [r3, #32]
 8018472:	4a22      	ldr	r2, [pc, #136]	@ (80184fc <HAL_TIM_PWM_Stop+0x104>)
 8018474:	4013      	ands	r3, r2
 8018476:	d107      	bne.n	8018488 <HAL_TIM_PWM_Stop+0x90>
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	681a      	ldr	r2, [r3, #0]
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	2101      	movs	r1, #1
 8018484:	438a      	bics	r2, r1
 8018486:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8018488:	683b      	ldr	r3, [r7, #0]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d104      	bne.n	8018498 <HAL_TIM_PWM_Stop+0xa0>
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	223e      	movs	r2, #62	@ 0x3e
 8018492:	2101      	movs	r1, #1
 8018494:	5499      	strb	r1, [r3, r2]
 8018496:	e023      	b.n	80184e0 <HAL_TIM_PWM_Stop+0xe8>
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	2b04      	cmp	r3, #4
 801849c:	d104      	bne.n	80184a8 <HAL_TIM_PWM_Stop+0xb0>
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	223f      	movs	r2, #63	@ 0x3f
 80184a2:	2101      	movs	r1, #1
 80184a4:	5499      	strb	r1, [r3, r2]
 80184a6:	e01b      	b.n	80184e0 <HAL_TIM_PWM_Stop+0xe8>
 80184a8:	683b      	ldr	r3, [r7, #0]
 80184aa:	2b08      	cmp	r3, #8
 80184ac:	d104      	bne.n	80184b8 <HAL_TIM_PWM_Stop+0xc0>
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	2240      	movs	r2, #64	@ 0x40
 80184b2:	2101      	movs	r1, #1
 80184b4:	5499      	strb	r1, [r3, r2]
 80184b6:	e013      	b.n	80184e0 <HAL_TIM_PWM_Stop+0xe8>
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	2b0c      	cmp	r3, #12
 80184bc:	d104      	bne.n	80184c8 <HAL_TIM_PWM_Stop+0xd0>
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	2241      	movs	r2, #65	@ 0x41
 80184c2:	2101      	movs	r1, #1
 80184c4:	5499      	strb	r1, [r3, r2]
 80184c6:	e00b      	b.n	80184e0 <HAL_TIM_PWM_Stop+0xe8>
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	2b10      	cmp	r3, #16
 80184cc:	d104      	bne.n	80184d8 <HAL_TIM_PWM_Stop+0xe0>
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	2242      	movs	r2, #66	@ 0x42
 80184d2:	2101      	movs	r1, #1
 80184d4:	5499      	strb	r1, [r3, r2]
 80184d6:	e003      	b.n	80184e0 <HAL_TIM_PWM_Stop+0xe8>
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	2243      	movs	r2, #67	@ 0x43
 80184dc:	2101      	movs	r1, #1
 80184de:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80184e0:	2300      	movs	r3, #0
}
 80184e2:	0018      	movs	r0, r3
 80184e4:	46bd      	mov	sp, r7
 80184e6:	b002      	add	sp, #8
 80184e8:	bd80      	pop	{r7, pc}
 80184ea:	46c0      	nop			@ (mov r8, r8)
 80184ec:	40012c00 	.word	0x40012c00
 80184f0:	40014000 	.word	0x40014000
 80184f4:	40014400 	.word	0x40014400
 80184f8:	00001111 	.word	0x00001111
 80184fc:	00000444 	.word	0x00000444
 8018500:	ffff7fff 	.word	0xffff7fff

08018504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b086      	sub	sp, #24
 8018508:	af00      	add	r7, sp, #0
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018510:	2317      	movs	r3, #23
 8018512:	18fb      	adds	r3, r7, r3
 8018514:	2200      	movs	r2, #0
 8018516:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	223c      	movs	r2, #60	@ 0x3c
 801851c:	5c9b      	ldrb	r3, [r3, r2]
 801851e:	2b01      	cmp	r3, #1
 8018520:	d101      	bne.n	8018526 <HAL_TIM_PWM_ConfigChannel+0x22>
 8018522:	2302      	movs	r3, #2
 8018524:	e0e5      	b.n	80186f2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	223c      	movs	r2, #60	@ 0x3c
 801852a:	2101      	movs	r1, #1
 801852c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2b14      	cmp	r3, #20
 8018532:	d900      	bls.n	8018536 <HAL_TIM_PWM_ConfigChannel+0x32>
 8018534:	e0d1      	b.n	80186da <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	009a      	lsls	r2, r3, #2
 801853a:	4b70      	ldr	r3, [pc, #448]	@ (80186fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 801853c:	18d3      	adds	r3, r2, r3
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	68ba      	ldr	r2, [r7, #8]
 8018548:	0011      	movs	r1, r2
 801854a:	0018      	movs	r0, r3
 801854c:	f000 fa34 	bl	80189b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	699a      	ldr	r2, [r3, #24]
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	2108      	movs	r1, #8
 801855c:	430a      	orrs	r2, r1
 801855e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	699a      	ldr	r2, [r3, #24]
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	2104      	movs	r1, #4
 801856c:	438a      	bics	r2, r1
 801856e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	6999      	ldr	r1, [r3, #24]
 8018576:	68bb      	ldr	r3, [r7, #8]
 8018578:	691a      	ldr	r2, [r3, #16]
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	430a      	orrs	r2, r1
 8018580:	619a      	str	r2, [r3, #24]
      break;
 8018582:	e0af      	b.n	80186e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	68ba      	ldr	r2, [r7, #8]
 801858a:	0011      	movs	r1, r2
 801858c:	0018      	movs	r0, r3
 801858e:	f000 fa93 	bl	8018ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	699a      	ldr	r2, [r3, #24]
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	2180      	movs	r1, #128	@ 0x80
 801859e:	0109      	lsls	r1, r1, #4
 80185a0:	430a      	orrs	r2, r1
 80185a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	699a      	ldr	r2, [r3, #24]
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	4954      	ldr	r1, [pc, #336]	@ (8018700 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80185b0:	400a      	ands	r2, r1
 80185b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6999      	ldr	r1, [r3, #24]
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	691b      	ldr	r3, [r3, #16]
 80185be:	021a      	lsls	r2, r3, #8
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	430a      	orrs	r2, r1
 80185c6:	619a      	str	r2, [r3, #24]
      break;
 80185c8:	e08c      	b.n	80186e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	68ba      	ldr	r2, [r7, #8]
 80185d0:	0011      	movs	r1, r2
 80185d2:	0018      	movs	r0, r3
 80185d4:	f000 faee 	bl	8018bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	69da      	ldr	r2, [r3, #28]
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	2108      	movs	r1, #8
 80185e4:	430a      	orrs	r2, r1
 80185e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	69da      	ldr	r2, [r3, #28]
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	2104      	movs	r1, #4
 80185f4:	438a      	bics	r2, r1
 80185f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	69d9      	ldr	r1, [r3, #28]
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	691a      	ldr	r2, [r3, #16]
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	430a      	orrs	r2, r1
 8018608:	61da      	str	r2, [r3, #28]
      break;
 801860a:	e06b      	b.n	80186e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	68ba      	ldr	r2, [r7, #8]
 8018612:	0011      	movs	r1, r2
 8018614:	0018      	movs	r0, r3
 8018616:	f000 fb4f 	bl	8018cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	69da      	ldr	r2, [r3, #28]
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	2180      	movs	r1, #128	@ 0x80
 8018626:	0109      	lsls	r1, r1, #4
 8018628:	430a      	orrs	r2, r1
 801862a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	69da      	ldr	r2, [r3, #28]
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	4932      	ldr	r1, [pc, #200]	@ (8018700 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8018638:	400a      	ands	r2, r1
 801863a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	69d9      	ldr	r1, [r3, #28]
 8018642:	68bb      	ldr	r3, [r7, #8]
 8018644:	691b      	ldr	r3, [r3, #16]
 8018646:	021a      	lsls	r2, r3, #8
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	430a      	orrs	r2, r1
 801864e:	61da      	str	r2, [r3, #28]
      break;
 8018650:	e048      	b.n	80186e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	68ba      	ldr	r2, [r7, #8]
 8018658:	0011      	movs	r1, r2
 801865a:	0018      	movs	r0, r3
 801865c:	f000 fb90 	bl	8018d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	2108      	movs	r1, #8
 801866c:	430a      	orrs	r2, r1
 801866e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	2104      	movs	r1, #4
 801867c:	438a      	bics	r2, r1
 801867e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	691a      	ldr	r2, [r3, #16]
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	430a      	orrs	r2, r1
 8018690:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8018692:	e027      	b.n	80186e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	68ba      	ldr	r2, [r7, #8]
 801869a:	0011      	movs	r1, r2
 801869c:	0018      	movs	r0, r3
 801869e:	f000 fbc9 	bl	8018e34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	2180      	movs	r1, #128	@ 0x80
 80186ae:	0109      	lsls	r1, r1, #4
 80186b0:	430a      	orrs	r2, r1
 80186b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4910      	ldr	r1, [pc, #64]	@ (8018700 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80186c0:	400a      	ands	r2, r1
 80186c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	691b      	ldr	r3, [r3, #16]
 80186ce:	021a      	lsls	r2, r3, #8
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	430a      	orrs	r2, r1
 80186d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80186d8:	e004      	b.n	80186e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80186da:	2317      	movs	r3, #23
 80186dc:	18fb      	adds	r3, r7, r3
 80186de:	2201      	movs	r2, #1
 80186e0:	701a      	strb	r2, [r3, #0]
      break;
 80186e2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	223c      	movs	r2, #60	@ 0x3c
 80186e8:	2100      	movs	r1, #0
 80186ea:	5499      	strb	r1, [r3, r2]

  return status;
 80186ec:	2317      	movs	r3, #23
 80186ee:	18fb      	adds	r3, r7, r3
 80186f0:	781b      	ldrb	r3, [r3, #0]
}
 80186f2:	0018      	movs	r0, r3
 80186f4:	46bd      	mov	sp, r7
 80186f6:	b006      	add	sp, #24
 80186f8:	bd80      	pop	{r7, pc}
 80186fa:	46c0      	nop			@ (mov r8, r8)
 80186fc:	0801b398 	.word	0x0801b398
 8018700:	fffffbff 	.word	0xfffffbff

08018704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b084      	sub	sp, #16
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
 801870c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801870e:	230f      	movs	r3, #15
 8018710:	18fb      	adds	r3, r7, r3
 8018712:	2200      	movs	r2, #0
 8018714:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	223c      	movs	r2, #60	@ 0x3c
 801871a:	5c9b      	ldrb	r3, [r3, r2]
 801871c:	2b01      	cmp	r3, #1
 801871e:	d101      	bne.n	8018724 <HAL_TIM_ConfigClockSource+0x20>
 8018720:	2302      	movs	r3, #2
 8018722:	e0c0      	b.n	80188a6 <HAL_TIM_ConfigClockSource+0x1a2>
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	223c      	movs	r2, #60	@ 0x3c
 8018728:	2101      	movs	r1, #1
 801872a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	223d      	movs	r2, #61	@ 0x3d
 8018730:	2102      	movs	r1, #2
 8018732:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	689b      	ldr	r3, [r3, #8]
 801873a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	4a5c      	ldr	r2, [pc, #368]	@ (80188b0 <HAL_TIM_ConfigClockSource+0x1ac>)
 8018740:	4013      	ands	r3, r2
 8018742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018744:	68bb      	ldr	r3, [r7, #8]
 8018746:	4a5b      	ldr	r2, [pc, #364]	@ (80188b4 <HAL_TIM_ConfigClockSource+0x1b0>)
 8018748:	4013      	ands	r3, r2
 801874a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	68ba      	ldr	r2, [r7, #8]
 8018752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	4a57      	ldr	r2, [pc, #348]	@ (80188b8 <HAL_TIM_ConfigClockSource+0x1b4>)
 801875a:	4293      	cmp	r3, r2
 801875c:	d100      	bne.n	8018760 <HAL_TIM_ConfigClockSource+0x5c>
 801875e:	e088      	b.n	8018872 <HAL_TIM_ConfigClockSource+0x16e>
 8018760:	4a55      	ldr	r2, [pc, #340]	@ (80188b8 <HAL_TIM_ConfigClockSource+0x1b4>)
 8018762:	4293      	cmp	r3, r2
 8018764:	d900      	bls.n	8018768 <HAL_TIM_ConfigClockSource+0x64>
 8018766:	e08d      	b.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 8018768:	2280      	movs	r2, #128	@ 0x80
 801876a:	0192      	lsls	r2, r2, #6
 801876c:	4293      	cmp	r3, r2
 801876e:	d03c      	beq.n	80187ea <HAL_TIM_ConfigClockSource+0xe6>
 8018770:	2280      	movs	r2, #128	@ 0x80
 8018772:	0192      	lsls	r2, r2, #6
 8018774:	4293      	cmp	r3, r2
 8018776:	d900      	bls.n	801877a <HAL_TIM_ConfigClockSource+0x76>
 8018778:	e084      	b.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 801877a:	2280      	movs	r2, #128	@ 0x80
 801877c:	0152      	lsls	r2, r2, #5
 801877e:	4293      	cmp	r3, r2
 8018780:	d100      	bne.n	8018784 <HAL_TIM_ConfigClockSource+0x80>
 8018782:	e084      	b.n	801888e <HAL_TIM_ConfigClockSource+0x18a>
 8018784:	2280      	movs	r2, #128	@ 0x80
 8018786:	0152      	lsls	r2, r2, #5
 8018788:	4293      	cmp	r3, r2
 801878a:	d900      	bls.n	801878e <HAL_TIM_ConfigClockSource+0x8a>
 801878c:	e07a      	b.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 801878e:	2b70      	cmp	r3, #112	@ 0x70
 8018790:	d014      	beq.n	80187bc <HAL_TIM_ConfigClockSource+0xb8>
 8018792:	d900      	bls.n	8018796 <HAL_TIM_ConfigClockSource+0x92>
 8018794:	e076      	b.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 8018796:	2b60      	cmp	r3, #96	@ 0x60
 8018798:	d04b      	beq.n	8018832 <HAL_TIM_ConfigClockSource+0x12e>
 801879a:	d900      	bls.n	801879e <HAL_TIM_ConfigClockSource+0x9a>
 801879c:	e072      	b.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 801879e:	2b50      	cmp	r3, #80	@ 0x50
 80187a0:	d037      	beq.n	8018812 <HAL_TIM_ConfigClockSource+0x10e>
 80187a2:	d900      	bls.n	80187a6 <HAL_TIM_ConfigClockSource+0xa2>
 80187a4:	e06e      	b.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 80187a6:	2b40      	cmp	r3, #64	@ 0x40
 80187a8:	d053      	beq.n	8018852 <HAL_TIM_ConfigClockSource+0x14e>
 80187aa:	d86b      	bhi.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 80187ac:	2b20      	cmp	r3, #32
 80187ae:	d060      	beq.n	8018872 <HAL_TIM_ConfigClockSource+0x16e>
 80187b0:	d868      	bhi.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d05d      	beq.n	8018872 <HAL_TIM_ConfigClockSource+0x16e>
 80187b6:	2b10      	cmp	r3, #16
 80187b8:	d05b      	beq.n	8018872 <HAL_TIM_ConfigClockSource+0x16e>
 80187ba:	e063      	b.n	8018884 <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80187c8:	683b      	ldr	r3, [r7, #0]
 80187ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80187cc:	f000 fc0c 	bl	8018fe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	689b      	ldr	r3, [r3, #8]
 80187d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80187d8:	68bb      	ldr	r3, [r7, #8]
 80187da:	2277      	movs	r2, #119	@ 0x77
 80187dc:	4313      	orrs	r3, r2
 80187de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	68ba      	ldr	r2, [r7, #8]
 80187e6:	609a      	str	r2, [r3, #8]
      break;
 80187e8:	e052      	b.n	8018890 <HAL_TIM_ConfigClockSource+0x18c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80187fa:	f000 fbf5 	bl	8018fe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	689a      	ldr	r2, [r3, #8]
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	2180      	movs	r1, #128	@ 0x80
 801880a:	01c9      	lsls	r1, r1, #7
 801880c:	430a      	orrs	r2, r1
 801880e:	609a      	str	r2, [r3, #8]
      break;
 8018810:	e03e      	b.n	8018890 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8018816:	683b      	ldr	r3, [r7, #0]
 8018818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801881e:	001a      	movs	r2, r3
 8018820:	f000 fb66 	bl	8018ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	2150      	movs	r1, #80	@ 0x50
 801882a:	0018      	movs	r0, r3
 801882c:	f000 fbc0 	bl	8018fb0 <TIM_ITRx_SetConfig>
      break;
 8018830:	e02e      	b.n	8018890 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801883a:	683b      	ldr	r3, [r7, #0]
 801883c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801883e:	001a      	movs	r2, r3
 8018840:	f000 fb84 	bl	8018f4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	2160      	movs	r1, #96	@ 0x60
 801884a:	0018      	movs	r0, r3
 801884c:	f000 fbb0 	bl	8018fb0 <TIM_ITRx_SetConfig>
      break;
 8018850:	e01e      	b.n	8018890 <HAL_TIM_ConfigClockSource+0x18c>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801885a:	683b      	ldr	r3, [r7, #0]
 801885c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801885e:	001a      	movs	r2, r3
 8018860:	f000 fb46 	bl	8018ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	2140      	movs	r1, #64	@ 0x40
 801886a:	0018      	movs	r0, r3
 801886c:	f000 fba0 	bl	8018fb0 <TIM_ITRx_SetConfig>
      break;
 8018870:	e00e      	b.n	8018890 <HAL_TIM_ConfigClockSource+0x18c>
    case TIM_CLOCKSOURCE_ITR7:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681a      	ldr	r2, [r3, #0]
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	0019      	movs	r1, r3
 801887c:	0010      	movs	r0, r2
 801887e:	f000 fb97 	bl	8018fb0 <TIM_ITRx_SetConfig>
      break;
 8018882:	e005      	b.n	8018890 <HAL_TIM_ConfigClockSource+0x18c>
    }

    default:
      status = HAL_ERROR;
 8018884:	230f      	movs	r3, #15
 8018886:	18fb      	adds	r3, r7, r3
 8018888:	2201      	movs	r2, #1
 801888a:	701a      	strb	r2, [r3, #0]
      break;
 801888c:	e000      	b.n	8018890 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 801888e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	223d      	movs	r2, #61	@ 0x3d
 8018894:	2101      	movs	r1, #1
 8018896:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	223c      	movs	r2, #60	@ 0x3c
 801889c:	2100      	movs	r1, #0
 801889e:	5499      	strb	r1, [r3, r2]

  return status;
 80188a0:	230f      	movs	r3, #15
 80188a2:	18fb      	adds	r3, r7, r3
 80188a4:	781b      	ldrb	r3, [r3, #0]
}
 80188a6:	0018      	movs	r0, r3
 80188a8:	46bd      	mov	sp, r7
 80188aa:	b004      	add	sp, #16
 80188ac:	bd80      	pop	{r7, pc}
 80188ae:	46c0      	nop			@ (mov r8, r8)
 80188b0:	ffceff88 	.word	0xffceff88
 80188b4:	ffff00ff 	.word	0xffff00ff
 80188b8:	00100030 	.word	0x00100030

080188bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b084      	sub	sp, #16
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
 80188c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	4a35      	ldr	r2, [pc, #212]	@ (80189a4 <TIM_Base_SetConfig+0xe8>)
 80188d0:	4293      	cmp	r3, r2
 80188d2:	d008      	beq.n	80188e6 <TIM_Base_SetConfig+0x2a>
 80188d4:	687a      	ldr	r2, [r7, #4]
 80188d6:	2380      	movs	r3, #128	@ 0x80
 80188d8:	05db      	lsls	r3, r3, #23
 80188da:	429a      	cmp	r2, r3
 80188dc:	d003      	beq.n	80188e6 <TIM_Base_SetConfig+0x2a>
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	4a31      	ldr	r2, [pc, #196]	@ (80189a8 <TIM_Base_SetConfig+0xec>)
 80188e2:	4293      	cmp	r3, r2
 80188e4:	d108      	bne.n	80188f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	2270      	movs	r2, #112	@ 0x70
 80188ea:	4393      	bics	r3, r2
 80188ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	685b      	ldr	r3, [r3, #4]
 80188f2:	68fa      	ldr	r2, [r7, #12]
 80188f4:	4313      	orrs	r3, r2
 80188f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	4a2a      	ldr	r2, [pc, #168]	@ (80189a4 <TIM_Base_SetConfig+0xe8>)
 80188fc:	4293      	cmp	r3, r2
 80188fe:	d010      	beq.n	8018922 <TIM_Base_SetConfig+0x66>
 8018900:	687a      	ldr	r2, [r7, #4]
 8018902:	2380      	movs	r3, #128	@ 0x80
 8018904:	05db      	lsls	r3, r3, #23
 8018906:	429a      	cmp	r2, r3
 8018908:	d00b      	beq.n	8018922 <TIM_Base_SetConfig+0x66>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	4a26      	ldr	r2, [pc, #152]	@ (80189a8 <TIM_Base_SetConfig+0xec>)
 801890e:	4293      	cmp	r3, r2
 8018910:	d007      	beq.n	8018922 <TIM_Base_SetConfig+0x66>
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	4a25      	ldr	r2, [pc, #148]	@ (80189ac <TIM_Base_SetConfig+0xf0>)
 8018916:	4293      	cmp	r3, r2
 8018918:	d003      	beq.n	8018922 <TIM_Base_SetConfig+0x66>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	4a24      	ldr	r2, [pc, #144]	@ (80189b0 <TIM_Base_SetConfig+0xf4>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d108      	bne.n	8018934 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	4a23      	ldr	r2, [pc, #140]	@ (80189b4 <TIM_Base_SetConfig+0xf8>)
 8018926:	4013      	ands	r3, r2
 8018928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801892a:	683b      	ldr	r3, [r7, #0]
 801892c:	68db      	ldr	r3, [r3, #12]
 801892e:	68fa      	ldr	r2, [r7, #12]
 8018930:	4313      	orrs	r3, r2
 8018932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	2280      	movs	r2, #128	@ 0x80
 8018938:	4393      	bics	r3, r2
 801893a:	001a      	movs	r2, r3
 801893c:	683b      	ldr	r3, [r7, #0]
 801893e:	695b      	ldr	r3, [r3, #20]
 8018940:	4313      	orrs	r3, r2
 8018942:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	68fa      	ldr	r2, [r7, #12]
 8018948:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	689a      	ldr	r2, [r3, #8]
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	681a      	ldr	r2, [r3, #0]
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	4a11      	ldr	r2, [pc, #68]	@ (80189a4 <TIM_Base_SetConfig+0xe8>)
 801895e:	4293      	cmp	r3, r2
 8018960:	d007      	beq.n	8018972 <TIM_Base_SetConfig+0xb6>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	4a11      	ldr	r2, [pc, #68]	@ (80189ac <TIM_Base_SetConfig+0xf0>)
 8018966:	4293      	cmp	r3, r2
 8018968:	d003      	beq.n	8018972 <TIM_Base_SetConfig+0xb6>
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	4a10      	ldr	r2, [pc, #64]	@ (80189b0 <TIM_Base_SetConfig+0xf4>)
 801896e:	4293      	cmp	r3, r2
 8018970:	d103      	bne.n	801897a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	691a      	ldr	r2, [r3, #16]
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2201      	movs	r2, #1
 801897e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	691b      	ldr	r3, [r3, #16]
 8018984:	2201      	movs	r2, #1
 8018986:	4013      	ands	r3, r2
 8018988:	2b01      	cmp	r3, #1
 801898a:	d106      	bne.n	801899a <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	691b      	ldr	r3, [r3, #16]
 8018990:	2201      	movs	r2, #1
 8018992:	4393      	bics	r3, r2
 8018994:	001a      	movs	r2, r3
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	611a      	str	r2, [r3, #16]
  }
}
 801899a:	46c0      	nop			@ (mov r8, r8)
 801899c:	46bd      	mov	sp, r7
 801899e:	b004      	add	sp, #16
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	46c0      	nop			@ (mov r8, r8)
 80189a4:	40012c00 	.word	0x40012c00
 80189a8:	40000400 	.word	0x40000400
 80189ac:	40014000 	.word	0x40014000
 80189b0:	40014400 	.word	0x40014400
 80189b4:	fffffcff 	.word	0xfffffcff

080189b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
 80189c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	6a1b      	ldr	r3, [r3, #32]
 80189c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	6a1b      	ldr	r3, [r3, #32]
 80189cc:	2201      	movs	r2, #1
 80189ce:	4393      	bics	r3, r2
 80189d0:	001a      	movs	r2, r3
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	685b      	ldr	r3, [r3, #4]
 80189da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	699b      	ldr	r3, [r3, #24]
 80189e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	4a2e      	ldr	r2, [pc, #184]	@ (8018aa0 <TIM_OC1_SetConfig+0xe8>)
 80189e6:	4013      	ands	r3, r2
 80189e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	2203      	movs	r2, #3
 80189ee:	4393      	bics	r3, r2
 80189f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	68fa      	ldr	r2, [r7, #12]
 80189f8:	4313      	orrs	r3, r2
 80189fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80189fc:	697b      	ldr	r3, [r7, #20]
 80189fe:	2202      	movs	r2, #2
 8018a00:	4393      	bics	r3, r2
 8018a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8018a04:	683b      	ldr	r3, [r7, #0]
 8018a06:	689b      	ldr	r3, [r3, #8]
 8018a08:	697a      	ldr	r2, [r7, #20]
 8018a0a:	4313      	orrs	r3, r2
 8018a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	4a24      	ldr	r2, [pc, #144]	@ (8018aa4 <TIM_OC1_SetConfig+0xec>)
 8018a12:	4293      	cmp	r3, r2
 8018a14:	d007      	beq.n	8018a26 <TIM_OC1_SetConfig+0x6e>
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	4a23      	ldr	r2, [pc, #140]	@ (8018aa8 <TIM_OC1_SetConfig+0xf0>)
 8018a1a:	4293      	cmp	r3, r2
 8018a1c:	d003      	beq.n	8018a26 <TIM_OC1_SetConfig+0x6e>
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	4a22      	ldr	r2, [pc, #136]	@ (8018aac <TIM_OC1_SetConfig+0xf4>)
 8018a22:	4293      	cmp	r3, r2
 8018a24:	d10c      	bne.n	8018a40 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8018a26:	697b      	ldr	r3, [r7, #20]
 8018a28:	2208      	movs	r2, #8
 8018a2a:	4393      	bics	r3, r2
 8018a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	68db      	ldr	r3, [r3, #12]
 8018a32:	697a      	ldr	r2, [r7, #20]
 8018a34:	4313      	orrs	r3, r2
 8018a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8018a38:	697b      	ldr	r3, [r7, #20]
 8018a3a:	2204      	movs	r2, #4
 8018a3c:	4393      	bics	r3, r2
 8018a3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	4a18      	ldr	r2, [pc, #96]	@ (8018aa4 <TIM_OC1_SetConfig+0xec>)
 8018a44:	4293      	cmp	r3, r2
 8018a46:	d007      	beq.n	8018a58 <TIM_OC1_SetConfig+0xa0>
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	4a17      	ldr	r2, [pc, #92]	@ (8018aa8 <TIM_OC1_SetConfig+0xf0>)
 8018a4c:	4293      	cmp	r3, r2
 8018a4e:	d003      	beq.n	8018a58 <TIM_OC1_SetConfig+0xa0>
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	4a16      	ldr	r2, [pc, #88]	@ (8018aac <TIM_OC1_SetConfig+0xf4>)
 8018a54:	4293      	cmp	r3, r2
 8018a56:	d111      	bne.n	8018a7c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	4a15      	ldr	r2, [pc, #84]	@ (8018ab0 <TIM_OC1_SetConfig+0xf8>)
 8018a5c:	4013      	ands	r3, r2
 8018a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8018a60:	693b      	ldr	r3, [r7, #16]
 8018a62:	4a14      	ldr	r2, [pc, #80]	@ (8018ab4 <TIM_OC1_SetConfig+0xfc>)
 8018a64:	4013      	ands	r3, r2
 8018a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	695b      	ldr	r3, [r3, #20]
 8018a6c:	693a      	ldr	r2, [r7, #16]
 8018a6e:	4313      	orrs	r3, r2
 8018a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	699b      	ldr	r3, [r3, #24]
 8018a76:	693a      	ldr	r2, [r7, #16]
 8018a78:	4313      	orrs	r3, r2
 8018a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	693a      	ldr	r2, [r7, #16]
 8018a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	68fa      	ldr	r2, [r7, #12]
 8018a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	685a      	ldr	r2, [r3, #4]
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	697a      	ldr	r2, [r7, #20]
 8018a94:	621a      	str	r2, [r3, #32]
}
 8018a96:	46c0      	nop			@ (mov r8, r8)
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	b006      	add	sp, #24
 8018a9c:	bd80      	pop	{r7, pc}
 8018a9e:	46c0      	nop			@ (mov r8, r8)
 8018aa0:	fffeff8f 	.word	0xfffeff8f
 8018aa4:	40012c00 	.word	0x40012c00
 8018aa8:	40014000 	.word	0x40014000
 8018aac:	40014400 	.word	0x40014400
 8018ab0:	fffffeff 	.word	0xfffffeff
 8018ab4:	fffffdff 	.word	0xfffffdff

08018ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b086      	sub	sp, #24
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
 8018ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	6a1b      	ldr	r3, [r3, #32]
 8018ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6a1b      	ldr	r3, [r3, #32]
 8018acc:	2210      	movs	r2, #16
 8018ace:	4393      	bics	r3, r2
 8018ad0:	001a      	movs	r2, r3
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	685b      	ldr	r3, [r3, #4]
 8018ada:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	699b      	ldr	r3, [r3, #24]
 8018ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8018b98 <TIM_OC2_SetConfig+0xe0>)
 8018ae6:	4013      	ands	r3, r2
 8018ae8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	4a2b      	ldr	r2, [pc, #172]	@ (8018b9c <TIM_OC2_SetConfig+0xe4>)
 8018aee:	4013      	ands	r3, r2
 8018af0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	021b      	lsls	r3, r3, #8
 8018af8:	68fa      	ldr	r2, [r7, #12]
 8018afa:	4313      	orrs	r3, r2
 8018afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8018afe:	697b      	ldr	r3, [r7, #20]
 8018b00:	2220      	movs	r2, #32
 8018b02:	4393      	bics	r3, r2
 8018b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	689b      	ldr	r3, [r3, #8]
 8018b0a:	011b      	lsls	r3, r3, #4
 8018b0c:	697a      	ldr	r2, [r7, #20]
 8018b0e:	4313      	orrs	r3, r2
 8018b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	4a22      	ldr	r2, [pc, #136]	@ (8018ba0 <TIM_OC2_SetConfig+0xe8>)
 8018b16:	4293      	cmp	r3, r2
 8018b18:	d10d      	bne.n	8018b36 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	2280      	movs	r2, #128	@ 0x80
 8018b1e:	4393      	bics	r3, r2
 8018b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	68db      	ldr	r3, [r3, #12]
 8018b26:	011b      	lsls	r3, r3, #4
 8018b28:	697a      	ldr	r2, [r7, #20]
 8018b2a:	4313      	orrs	r3, r2
 8018b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8018b2e:	697b      	ldr	r3, [r7, #20]
 8018b30:	2240      	movs	r2, #64	@ 0x40
 8018b32:	4393      	bics	r3, r2
 8018b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	4a19      	ldr	r2, [pc, #100]	@ (8018ba0 <TIM_OC2_SetConfig+0xe8>)
 8018b3a:	4293      	cmp	r3, r2
 8018b3c:	d007      	beq.n	8018b4e <TIM_OC2_SetConfig+0x96>
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	4a18      	ldr	r2, [pc, #96]	@ (8018ba4 <TIM_OC2_SetConfig+0xec>)
 8018b42:	4293      	cmp	r3, r2
 8018b44:	d003      	beq.n	8018b4e <TIM_OC2_SetConfig+0x96>
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	4a17      	ldr	r2, [pc, #92]	@ (8018ba8 <TIM_OC2_SetConfig+0xf0>)
 8018b4a:	4293      	cmp	r3, r2
 8018b4c:	d113      	bne.n	8018b76 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8018b4e:	693b      	ldr	r3, [r7, #16]
 8018b50:	4a16      	ldr	r2, [pc, #88]	@ (8018bac <TIM_OC2_SetConfig+0xf4>)
 8018b52:	4013      	ands	r3, r2
 8018b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	4a15      	ldr	r2, [pc, #84]	@ (8018bb0 <TIM_OC2_SetConfig+0xf8>)
 8018b5a:	4013      	ands	r3, r2
 8018b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8018b5e:	683b      	ldr	r3, [r7, #0]
 8018b60:	695b      	ldr	r3, [r3, #20]
 8018b62:	009b      	lsls	r3, r3, #2
 8018b64:	693a      	ldr	r2, [r7, #16]
 8018b66:	4313      	orrs	r3, r2
 8018b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8018b6a:	683b      	ldr	r3, [r7, #0]
 8018b6c:	699b      	ldr	r3, [r3, #24]
 8018b6e:	009b      	lsls	r3, r3, #2
 8018b70:	693a      	ldr	r2, [r7, #16]
 8018b72:	4313      	orrs	r3, r2
 8018b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	693a      	ldr	r2, [r7, #16]
 8018b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	68fa      	ldr	r2, [r7, #12]
 8018b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8018b82:	683b      	ldr	r3, [r7, #0]
 8018b84:	685a      	ldr	r2, [r3, #4]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	697a      	ldr	r2, [r7, #20]
 8018b8e:	621a      	str	r2, [r3, #32]
}
 8018b90:	46c0      	nop			@ (mov r8, r8)
 8018b92:	46bd      	mov	sp, r7
 8018b94:	b006      	add	sp, #24
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	feff8fff 	.word	0xfeff8fff
 8018b9c:	fffffcff 	.word	0xfffffcff
 8018ba0:	40012c00 	.word	0x40012c00
 8018ba4:	40014000 	.word	0x40014000
 8018ba8:	40014400 	.word	0x40014400
 8018bac:	fffffbff 	.word	0xfffffbff
 8018bb0:	fffff7ff 	.word	0xfffff7ff

08018bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b086      	sub	sp, #24
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
 8018bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	6a1b      	ldr	r3, [r3, #32]
 8018bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	6a1b      	ldr	r3, [r3, #32]
 8018bc8:	4a31      	ldr	r2, [pc, #196]	@ (8018c90 <TIM_OC3_SetConfig+0xdc>)
 8018bca:	401a      	ands	r2, r3
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	69db      	ldr	r3, [r3, #28]
 8018bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	4a2d      	ldr	r2, [pc, #180]	@ (8018c94 <TIM_OC3_SetConfig+0xe0>)
 8018be0:	4013      	ands	r3, r2
 8018be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2203      	movs	r2, #3
 8018be8:	4393      	bics	r3, r2
 8018bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018bec:	683b      	ldr	r3, [r7, #0]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	68fa      	ldr	r2, [r7, #12]
 8018bf2:	4313      	orrs	r3, r2
 8018bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8018bf6:	697b      	ldr	r3, [r7, #20]
 8018bf8:	4a27      	ldr	r2, [pc, #156]	@ (8018c98 <TIM_OC3_SetConfig+0xe4>)
 8018bfa:	4013      	ands	r3, r2
 8018bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	689b      	ldr	r3, [r3, #8]
 8018c02:	021b      	lsls	r3, r3, #8
 8018c04:	697a      	ldr	r2, [r7, #20]
 8018c06:	4313      	orrs	r3, r2
 8018c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	4a23      	ldr	r2, [pc, #140]	@ (8018c9c <TIM_OC3_SetConfig+0xe8>)
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	d10d      	bne.n	8018c2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	4a22      	ldr	r2, [pc, #136]	@ (8018ca0 <TIM_OC3_SetConfig+0xec>)
 8018c16:	4013      	ands	r3, r2
 8018c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8018c1a:	683b      	ldr	r3, [r7, #0]
 8018c1c:	68db      	ldr	r3, [r3, #12]
 8018c1e:	021b      	lsls	r3, r3, #8
 8018c20:	697a      	ldr	r2, [r7, #20]
 8018c22:	4313      	orrs	r3, r2
 8018c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8018c26:	697b      	ldr	r3, [r7, #20]
 8018c28:	4a1e      	ldr	r2, [pc, #120]	@ (8018ca4 <TIM_OC3_SetConfig+0xf0>)
 8018c2a:	4013      	ands	r3, r2
 8018c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	4a1a      	ldr	r2, [pc, #104]	@ (8018c9c <TIM_OC3_SetConfig+0xe8>)
 8018c32:	4293      	cmp	r3, r2
 8018c34:	d007      	beq.n	8018c46 <TIM_OC3_SetConfig+0x92>
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	4a1b      	ldr	r2, [pc, #108]	@ (8018ca8 <TIM_OC3_SetConfig+0xf4>)
 8018c3a:	4293      	cmp	r3, r2
 8018c3c:	d003      	beq.n	8018c46 <TIM_OC3_SetConfig+0x92>
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	4a1a      	ldr	r2, [pc, #104]	@ (8018cac <TIM_OC3_SetConfig+0xf8>)
 8018c42:	4293      	cmp	r3, r2
 8018c44:	d113      	bne.n	8018c6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8018c46:	693b      	ldr	r3, [r7, #16]
 8018c48:	4a19      	ldr	r2, [pc, #100]	@ (8018cb0 <TIM_OC3_SetConfig+0xfc>)
 8018c4a:	4013      	ands	r3, r2
 8018c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8018c4e:	693b      	ldr	r3, [r7, #16]
 8018c50:	4a18      	ldr	r2, [pc, #96]	@ (8018cb4 <TIM_OC3_SetConfig+0x100>)
 8018c52:	4013      	ands	r3, r2
 8018c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	695b      	ldr	r3, [r3, #20]
 8018c5a:	011b      	lsls	r3, r3, #4
 8018c5c:	693a      	ldr	r2, [r7, #16]
 8018c5e:	4313      	orrs	r3, r2
 8018c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	699b      	ldr	r3, [r3, #24]
 8018c66:	011b      	lsls	r3, r3, #4
 8018c68:	693a      	ldr	r2, [r7, #16]
 8018c6a:	4313      	orrs	r3, r2
 8018c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	693a      	ldr	r2, [r7, #16]
 8018c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	68fa      	ldr	r2, [r7, #12]
 8018c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	685a      	ldr	r2, [r3, #4]
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	697a      	ldr	r2, [r7, #20]
 8018c86:	621a      	str	r2, [r3, #32]
}
 8018c88:	46c0      	nop			@ (mov r8, r8)
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	b006      	add	sp, #24
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	fffffeff 	.word	0xfffffeff
 8018c94:	fffeff8f 	.word	0xfffeff8f
 8018c98:	fffffdff 	.word	0xfffffdff
 8018c9c:	40012c00 	.word	0x40012c00
 8018ca0:	fffff7ff 	.word	0xfffff7ff
 8018ca4:	fffffbff 	.word	0xfffffbff
 8018ca8:	40014000 	.word	0x40014000
 8018cac:	40014400 	.word	0x40014400
 8018cb0:	ffffefff 	.word	0xffffefff
 8018cb4:	ffffdfff 	.word	0xffffdfff

08018cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b086      	sub	sp, #24
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6a1b      	ldr	r3, [r3, #32]
 8018cc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	6a1b      	ldr	r3, [r3, #32]
 8018ccc:	4a24      	ldr	r2, [pc, #144]	@ (8018d60 <TIM_OC4_SetConfig+0xa8>)
 8018cce:	401a      	ands	r2, r3
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	685b      	ldr	r3, [r3, #4]
 8018cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	69db      	ldr	r3, [r3, #28]
 8018cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	4a20      	ldr	r2, [pc, #128]	@ (8018d64 <TIM_OC4_SetConfig+0xac>)
 8018ce4:	4013      	ands	r3, r2
 8018ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	4a1f      	ldr	r2, [pc, #124]	@ (8018d68 <TIM_OC4_SetConfig+0xb0>)
 8018cec:	4013      	ands	r3, r2
 8018cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018cf0:	683b      	ldr	r3, [r7, #0]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	021b      	lsls	r3, r3, #8
 8018cf6:	68fa      	ldr	r2, [r7, #12]
 8018cf8:	4313      	orrs	r3, r2
 8018cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8018cfc:	693b      	ldr	r3, [r7, #16]
 8018cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8018d6c <TIM_OC4_SetConfig+0xb4>)
 8018d00:	4013      	ands	r3, r2
 8018d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	689b      	ldr	r3, [r3, #8]
 8018d08:	031b      	lsls	r3, r3, #12
 8018d0a:	693a      	ldr	r2, [r7, #16]
 8018d0c:	4313      	orrs	r3, r2
 8018d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	4a17      	ldr	r2, [pc, #92]	@ (8018d70 <TIM_OC4_SetConfig+0xb8>)
 8018d14:	4293      	cmp	r3, r2
 8018d16:	d007      	beq.n	8018d28 <TIM_OC4_SetConfig+0x70>
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	4a16      	ldr	r2, [pc, #88]	@ (8018d74 <TIM_OC4_SetConfig+0xbc>)
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	d003      	beq.n	8018d28 <TIM_OC4_SetConfig+0x70>
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	4a15      	ldr	r2, [pc, #84]	@ (8018d78 <TIM_OC4_SetConfig+0xc0>)
 8018d24:	4293      	cmp	r3, r2
 8018d26:	d109      	bne.n	8018d3c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	4a14      	ldr	r2, [pc, #80]	@ (8018d7c <TIM_OC4_SetConfig+0xc4>)
 8018d2c:	4013      	ands	r3, r2
 8018d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8018d30:	683b      	ldr	r3, [r7, #0]
 8018d32:	695b      	ldr	r3, [r3, #20]
 8018d34:	019b      	lsls	r3, r3, #6
 8018d36:	697a      	ldr	r2, [r7, #20]
 8018d38:	4313      	orrs	r3, r2
 8018d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	697a      	ldr	r2, [r7, #20]
 8018d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	68fa      	ldr	r2, [r7, #12]
 8018d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	685a      	ldr	r2, [r3, #4]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	693a      	ldr	r2, [r7, #16]
 8018d54:	621a      	str	r2, [r3, #32]
}
 8018d56:	46c0      	nop			@ (mov r8, r8)
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	b006      	add	sp, #24
 8018d5c:	bd80      	pop	{r7, pc}
 8018d5e:	46c0      	nop			@ (mov r8, r8)
 8018d60:	ffffefff 	.word	0xffffefff
 8018d64:	feff8fff 	.word	0xfeff8fff
 8018d68:	fffffcff 	.word	0xfffffcff
 8018d6c:	ffffdfff 	.word	0xffffdfff
 8018d70:	40012c00 	.word	0x40012c00
 8018d74:	40014000 	.word	0x40014000
 8018d78:	40014400 	.word	0x40014400
 8018d7c:	ffffbfff 	.word	0xffffbfff

08018d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b086      	sub	sp, #24
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6a1b      	ldr	r3, [r3, #32]
 8018d8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6a1b      	ldr	r3, [r3, #32]
 8018d94:	4a21      	ldr	r2, [pc, #132]	@ (8018e1c <TIM_OC5_SetConfig+0x9c>)
 8018d96:	401a      	ands	r2, r3
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	685b      	ldr	r3, [r3, #4]
 8018da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	4a1d      	ldr	r2, [pc, #116]	@ (8018e20 <TIM_OC5_SetConfig+0xa0>)
 8018dac:	4013      	ands	r3, r2
 8018dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	68fa      	ldr	r2, [r7, #12]
 8018db6:	4313      	orrs	r3, r2
 8018db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8018dba:	693b      	ldr	r3, [r7, #16]
 8018dbc:	4a19      	ldr	r2, [pc, #100]	@ (8018e24 <TIM_OC5_SetConfig+0xa4>)
 8018dbe:	4013      	ands	r3, r2
 8018dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8018dc2:	683b      	ldr	r3, [r7, #0]
 8018dc4:	689b      	ldr	r3, [r3, #8]
 8018dc6:	041b      	lsls	r3, r3, #16
 8018dc8:	693a      	ldr	r2, [r7, #16]
 8018dca:	4313      	orrs	r3, r2
 8018dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	4a15      	ldr	r2, [pc, #84]	@ (8018e28 <TIM_OC5_SetConfig+0xa8>)
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	d007      	beq.n	8018de6 <TIM_OC5_SetConfig+0x66>
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	4a14      	ldr	r2, [pc, #80]	@ (8018e2c <TIM_OC5_SetConfig+0xac>)
 8018dda:	4293      	cmp	r3, r2
 8018ddc:	d003      	beq.n	8018de6 <TIM_OC5_SetConfig+0x66>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	4a13      	ldr	r2, [pc, #76]	@ (8018e30 <TIM_OC5_SetConfig+0xb0>)
 8018de2:	4293      	cmp	r3, r2
 8018de4:	d109      	bne.n	8018dfa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8018de6:	697b      	ldr	r3, [r7, #20]
 8018de8:	4a0c      	ldr	r2, [pc, #48]	@ (8018e1c <TIM_OC5_SetConfig+0x9c>)
 8018dea:	4013      	ands	r3, r2
 8018dec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	695b      	ldr	r3, [r3, #20]
 8018df2:	021b      	lsls	r3, r3, #8
 8018df4:	697a      	ldr	r2, [r7, #20]
 8018df6:	4313      	orrs	r3, r2
 8018df8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	697a      	ldr	r2, [r7, #20]
 8018dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	68fa      	ldr	r2, [r7, #12]
 8018e04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	685a      	ldr	r2, [r3, #4]
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	693a      	ldr	r2, [r7, #16]
 8018e12:	621a      	str	r2, [r3, #32]
}
 8018e14:	46c0      	nop			@ (mov r8, r8)
 8018e16:	46bd      	mov	sp, r7
 8018e18:	b006      	add	sp, #24
 8018e1a:	bd80      	pop	{r7, pc}
 8018e1c:	fffeffff 	.word	0xfffeffff
 8018e20:	fffeff8f 	.word	0xfffeff8f
 8018e24:	fffdffff 	.word	0xfffdffff
 8018e28:	40012c00 	.word	0x40012c00
 8018e2c:	40014000 	.word	0x40014000
 8018e30:	40014400 	.word	0x40014400

08018e34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b086      	sub	sp, #24
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
 8018e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6a1b      	ldr	r3, [r3, #32]
 8018e42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	6a1b      	ldr	r3, [r3, #32]
 8018e48:	4a22      	ldr	r2, [pc, #136]	@ (8018ed4 <TIM_OC6_SetConfig+0xa0>)
 8018e4a:	401a      	ands	r2, r3
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	685b      	ldr	r3, [r3, #4]
 8018e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8018ed8 <TIM_OC6_SetConfig+0xa4>)
 8018e60:	4013      	ands	r3, r2
 8018e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018e64:	683b      	ldr	r3, [r7, #0]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	021b      	lsls	r3, r3, #8
 8018e6a:	68fa      	ldr	r2, [r7, #12]
 8018e6c:	4313      	orrs	r3, r2
 8018e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8018e70:	693b      	ldr	r3, [r7, #16]
 8018e72:	4a1a      	ldr	r2, [pc, #104]	@ (8018edc <TIM_OC6_SetConfig+0xa8>)
 8018e74:	4013      	ands	r3, r2
 8018e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8018e78:	683b      	ldr	r3, [r7, #0]
 8018e7a:	689b      	ldr	r3, [r3, #8]
 8018e7c:	051b      	lsls	r3, r3, #20
 8018e7e:	693a      	ldr	r2, [r7, #16]
 8018e80:	4313      	orrs	r3, r2
 8018e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	4a16      	ldr	r2, [pc, #88]	@ (8018ee0 <TIM_OC6_SetConfig+0xac>)
 8018e88:	4293      	cmp	r3, r2
 8018e8a:	d007      	beq.n	8018e9c <TIM_OC6_SetConfig+0x68>
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	4a15      	ldr	r2, [pc, #84]	@ (8018ee4 <TIM_OC6_SetConfig+0xb0>)
 8018e90:	4293      	cmp	r3, r2
 8018e92:	d003      	beq.n	8018e9c <TIM_OC6_SetConfig+0x68>
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	4a14      	ldr	r2, [pc, #80]	@ (8018ee8 <TIM_OC6_SetConfig+0xb4>)
 8018e98:	4293      	cmp	r3, r2
 8018e9a:	d109      	bne.n	8018eb0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8018e9c:	697b      	ldr	r3, [r7, #20]
 8018e9e:	4a13      	ldr	r2, [pc, #76]	@ (8018eec <TIM_OC6_SetConfig+0xb8>)
 8018ea0:	4013      	ands	r3, r2
 8018ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8018ea4:	683b      	ldr	r3, [r7, #0]
 8018ea6:	695b      	ldr	r3, [r3, #20]
 8018ea8:	029b      	lsls	r3, r3, #10
 8018eaa:	697a      	ldr	r2, [r7, #20]
 8018eac:	4313      	orrs	r3, r2
 8018eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	697a      	ldr	r2, [r7, #20]
 8018eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	68fa      	ldr	r2, [r7, #12]
 8018eba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8018ebc:	683b      	ldr	r3, [r7, #0]
 8018ebe:	685a      	ldr	r2, [r3, #4]
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	693a      	ldr	r2, [r7, #16]
 8018ec8:	621a      	str	r2, [r3, #32]
}
 8018eca:	46c0      	nop			@ (mov r8, r8)
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	b006      	add	sp, #24
 8018ed0:	bd80      	pop	{r7, pc}
 8018ed2:	46c0      	nop			@ (mov r8, r8)
 8018ed4:	ffefffff 	.word	0xffefffff
 8018ed8:	feff8fff 	.word	0xfeff8fff
 8018edc:	ffdfffff 	.word	0xffdfffff
 8018ee0:	40012c00 	.word	0x40012c00
 8018ee4:	40014000 	.word	0x40014000
 8018ee8:	40014400 	.word	0x40014400
 8018eec:	fffbffff 	.word	0xfffbffff

08018ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b086      	sub	sp, #24
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	60f8      	str	r0, [r7, #12]
 8018ef8:	60b9      	str	r1, [r7, #8]
 8018efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	6a1b      	ldr	r3, [r3, #32]
 8018f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	6a1b      	ldr	r3, [r3, #32]
 8018f06:	2201      	movs	r2, #1
 8018f08:	4393      	bics	r3, r2
 8018f0a:	001a      	movs	r2, r3
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	699b      	ldr	r3, [r3, #24]
 8018f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8018f16:	693b      	ldr	r3, [r7, #16]
 8018f18:	22f0      	movs	r2, #240	@ 0xf0
 8018f1a:	4393      	bics	r3, r2
 8018f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	011b      	lsls	r3, r3, #4
 8018f22:	693a      	ldr	r2, [r7, #16]
 8018f24:	4313      	orrs	r3, r2
 8018f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	220a      	movs	r2, #10
 8018f2c:	4393      	bics	r3, r2
 8018f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8018f30:	697a      	ldr	r2, [r7, #20]
 8018f32:	68bb      	ldr	r3, [r7, #8]
 8018f34:	4313      	orrs	r3, r2
 8018f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	693a      	ldr	r2, [r7, #16]
 8018f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	697a      	ldr	r2, [r7, #20]
 8018f42:	621a      	str	r2, [r3, #32]
}
 8018f44:	46c0      	nop			@ (mov r8, r8)
 8018f46:	46bd      	mov	sp, r7
 8018f48:	b006      	add	sp, #24
 8018f4a:	bd80      	pop	{r7, pc}

08018f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b086      	sub	sp, #24
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	6a1b      	ldr	r3, [r3, #32]
 8018f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	6a1b      	ldr	r3, [r3, #32]
 8018f62:	2210      	movs	r2, #16
 8018f64:	4393      	bics	r3, r2
 8018f66:	001a      	movs	r2, r3
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	699b      	ldr	r3, [r3, #24]
 8018f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	4a0d      	ldr	r2, [pc, #52]	@ (8018fac <TIM_TI2_ConfigInputStage+0x60>)
 8018f76:	4013      	ands	r3, r2
 8018f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	031b      	lsls	r3, r3, #12
 8018f7e:	693a      	ldr	r2, [r7, #16]
 8018f80:	4313      	orrs	r3, r2
 8018f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8018f84:	697b      	ldr	r3, [r7, #20]
 8018f86:	22a0      	movs	r2, #160	@ 0xa0
 8018f88:	4393      	bics	r3, r2
 8018f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8018f8c:	68bb      	ldr	r3, [r7, #8]
 8018f8e:	011b      	lsls	r3, r3, #4
 8018f90:	697a      	ldr	r2, [r7, #20]
 8018f92:	4313      	orrs	r3, r2
 8018f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	693a      	ldr	r2, [r7, #16]
 8018f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	697a      	ldr	r2, [r7, #20]
 8018fa0:	621a      	str	r2, [r3, #32]
}
 8018fa2:	46c0      	nop			@ (mov r8, r8)
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	b006      	add	sp, #24
 8018fa8:	bd80      	pop	{r7, pc}
 8018faa:	46c0      	nop			@ (mov r8, r8)
 8018fac:	ffff0fff 	.word	0xffff0fff

08018fb0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b084      	sub	sp, #16
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	689b      	ldr	r3, [r3, #8]
 8018fbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	4a08      	ldr	r2, [pc, #32]	@ (8018fe4 <TIM_ITRx_SetConfig+0x34>)
 8018fc4:	4013      	ands	r3, r2
 8018fc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8018fc8:	683a      	ldr	r2, [r7, #0]
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	4313      	orrs	r3, r2
 8018fce:	2207      	movs	r2, #7
 8018fd0:	4313      	orrs	r3, r2
 8018fd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	68fa      	ldr	r2, [r7, #12]
 8018fd8:	609a      	str	r2, [r3, #8]
}
 8018fda:	46c0      	nop			@ (mov r8, r8)
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	b004      	add	sp, #16
 8018fe0:	bd80      	pop	{r7, pc}
 8018fe2:	46c0      	nop			@ (mov r8, r8)
 8018fe4:	ffcfff8f 	.word	0xffcfff8f

08018fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b086      	sub	sp, #24
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	60f8      	str	r0, [r7, #12]
 8018ff0:	60b9      	str	r1, [r7, #8]
 8018ff2:	607a      	str	r2, [r7, #4]
 8018ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	689b      	ldr	r3, [r3, #8]
 8018ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018ffc:	697b      	ldr	r3, [r7, #20]
 8018ffe:	4a09      	ldr	r2, [pc, #36]	@ (8019024 <TIM_ETR_SetConfig+0x3c>)
 8019000:	4013      	ands	r3, r2
 8019002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8019004:	683b      	ldr	r3, [r7, #0]
 8019006:	021a      	lsls	r2, r3, #8
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	431a      	orrs	r2, r3
 801900c:	68bb      	ldr	r3, [r7, #8]
 801900e:	4313      	orrs	r3, r2
 8019010:	697a      	ldr	r2, [r7, #20]
 8019012:	4313      	orrs	r3, r2
 8019014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	697a      	ldr	r2, [r7, #20]
 801901a:	609a      	str	r2, [r3, #8]
}
 801901c:	46c0      	nop			@ (mov r8, r8)
 801901e:	46bd      	mov	sp, r7
 8019020:	b006      	add	sp, #24
 8019022:	bd80      	pop	{r7, pc}
 8019024:	ffff00ff 	.word	0xffff00ff

08019028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b086      	sub	sp, #24
 801902c:	af00      	add	r7, sp, #0
 801902e:	60f8      	str	r0, [r7, #12]
 8019030:	60b9      	str	r1, [r7, #8]
 8019032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8019034:	68bb      	ldr	r3, [r7, #8]
 8019036:	221f      	movs	r2, #31
 8019038:	4013      	ands	r3, r2
 801903a:	2201      	movs	r2, #1
 801903c:	409a      	lsls	r2, r3
 801903e:	0013      	movs	r3, r2
 8019040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	6a1b      	ldr	r3, [r3, #32]
 8019046:	697a      	ldr	r2, [r7, #20]
 8019048:	43d2      	mvns	r2, r2
 801904a:	401a      	ands	r2, r3
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	6a1a      	ldr	r2, [r3, #32]
 8019054:	68bb      	ldr	r3, [r7, #8]
 8019056:	211f      	movs	r1, #31
 8019058:	400b      	ands	r3, r1
 801905a:	6879      	ldr	r1, [r7, #4]
 801905c:	4099      	lsls	r1, r3
 801905e:	000b      	movs	r3, r1
 8019060:	431a      	orrs	r2, r3
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	621a      	str	r2, [r3, #32]
}
 8019066:	46c0      	nop			@ (mov r8, r8)
 8019068:	46bd      	mov	sp, r7
 801906a:	b006      	add	sp, #24
 801906c:	bd80      	pop	{r7, pc}
	...

08019070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b084      	sub	sp, #16
 8019074:	af00      	add	r7, sp, #0
 8019076:	6078      	str	r0, [r7, #4]
 8019078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	223c      	movs	r2, #60	@ 0x3c
 801907e:	5c9b      	ldrb	r3, [r3, r2]
 8019080:	2b01      	cmp	r3, #1
 8019082:	d101      	bne.n	8019088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8019084:	2302      	movs	r3, #2
 8019086:	e055      	b.n	8019134 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	223c      	movs	r2, #60	@ 0x3c
 801908c:	2101      	movs	r1, #1
 801908e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	223d      	movs	r2, #61	@ 0x3d
 8019094:	2102      	movs	r1, #2
 8019096:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	685b      	ldr	r3, [r3, #4]
 801909e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	689b      	ldr	r3, [r3, #8]
 80190a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	4a23      	ldr	r2, [pc, #140]	@ (801913c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80190ae:	4293      	cmp	r3, r2
 80190b0:	d108      	bne.n	80190c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	4a22      	ldr	r2, [pc, #136]	@ (8019140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80190b6:	4013      	ands	r3, r2
 80190b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	685b      	ldr	r3, [r3, #4]
 80190be:	68fa      	ldr	r2, [r7, #12]
 80190c0:	4313      	orrs	r3, r2
 80190c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	2270      	movs	r2, #112	@ 0x70
 80190c8:	4393      	bics	r3, r2
 80190ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80190cc:	683b      	ldr	r3, [r7, #0]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	68fa      	ldr	r2, [r7, #12]
 80190d2:	4313      	orrs	r3, r2
 80190d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	68fa      	ldr	r2, [r7, #12]
 80190dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	4a16      	ldr	r2, [pc, #88]	@ (801913c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d00f      	beq.n	8019108 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681a      	ldr	r2, [r3, #0]
 80190ec:	2380      	movs	r3, #128	@ 0x80
 80190ee:	05db      	lsls	r3, r3, #23
 80190f0:	429a      	cmp	r2, r3
 80190f2:	d009      	beq.n	8019108 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	4a12      	ldr	r2, [pc, #72]	@ (8019144 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80190fa:	4293      	cmp	r3, r2
 80190fc:	d004      	beq.n	8019108 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	4a11      	ldr	r2, [pc, #68]	@ (8019148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8019104:	4293      	cmp	r3, r2
 8019106:	d10c      	bne.n	8019122 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8019108:	68bb      	ldr	r3, [r7, #8]
 801910a:	2280      	movs	r2, #128	@ 0x80
 801910c:	4393      	bics	r3, r2
 801910e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	689b      	ldr	r3, [r3, #8]
 8019114:	68ba      	ldr	r2, [r7, #8]
 8019116:	4313      	orrs	r3, r2
 8019118:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	68ba      	ldr	r2, [r7, #8]
 8019120:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	223d      	movs	r2, #61	@ 0x3d
 8019126:	2101      	movs	r1, #1
 8019128:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	223c      	movs	r2, #60	@ 0x3c
 801912e:	2100      	movs	r1, #0
 8019130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019132:	2300      	movs	r3, #0
}
 8019134:	0018      	movs	r0, r3
 8019136:	46bd      	mov	sp, r7
 8019138:	b004      	add	sp, #16
 801913a:	bd80      	pop	{r7, pc}
 801913c:	40012c00 	.word	0x40012c00
 8019140:	ff0fffff 	.word	0xff0fffff
 8019144:	40000400 	.word	0x40000400
 8019148:	40014000 	.word	0x40014000

0801914c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b082      	sub	sp, #8
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d101      	bne.n	801915e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801915a:	2301      	movs	r3, #1
 801915c:	e046      	b.n	80191ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2288      	movs	r2, #136	@ 0x88
 8019162:	589b      	ldr	r3, [r3, r2]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d107      	bne.n	8019178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2284      	movs	r2, #132	@ 0x84
 801916c:	2100      	movs	r1, #0
 801916e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	0018      	movs	r0, r3
 8019174:	f7f2 fd66 	bl	800bc44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2288      	movs	r2, #136	@ 0x88
 801917c:	2124      	movs	r1, #36	@ 0x24
 801917e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	681a      	ldr	r2, [r3, #0]
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	2101      	movs	r1, #1
 801918c:	438a      	bics	r2, r1
 801918e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019194:	2b00      	cmp	r3, #0
 8019196:	d003      	beq.n	80191a0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	0018      	movs	r0, r3
 801919c:	f000 ff2a 	bl	8019ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	0018      	movs	r0, r3
 80191a4:	f000 fd54 	bl	8019c50 <UART_SetConfig>
 80191a8:	0003      	movs	r3, r0
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	d101      	bne.n	80191b2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80191ae:	2301      	movs	r3, #1
 80191b0:	e01c      	b.n	80191ec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	685a      	ldr	r2, [r3, #4]
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	490d      	ldr	r1, [pc, #52]	@ (80191f4 <HAL_UART_Init+0xa8>)
 80191be:	400a      	ands	r2, r1
 80191c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	689a      	ldr	r2, [r3, #8]
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	212a      	movs	r1, #42	@ 0x2a
 80191ce:	438a      	bics	r2, r1
 80191d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	681a      	ldr	r2, [r3, #0]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	2101      	movs	r1, #1
 80191de:	430a      	orrs	r2, r1
 80191e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	0018      	movs	r0, r3
 80191e6:	f000 ffb9 	bl	801a15c <UART_CheckIdleState>
 80191ea:	0003      	movs	r3, r0
}
 80191ec:	0018      	movs	r0, r3
 80191ee:	46bd      	mov	sp, r7
 80191f0:	b002      	add	sp, #8
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	ffffb7ff 	.word	0xffffb7ff

080191f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b088      	sub	sp, #32
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	60f8      	str	r0, [r7, #12]
 8019200:	60b9      	str	r1, [r7, #8]
 8019202:	1dbb      	adds	r3, r7, #6
 8019204:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	2288      	movs	r2, #136	@ 0x88
 801920a:	589b      	ldr	r3, [r3, r2]
 801920c:	2b20      	cmp	r3, #32
 801920e:	d000      	beq.n	8019212 <HAL_UART_Transmit_DMA+0x1a>
 8019210:	e079      	b.n	8019306 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8019212:	68bb      	ldr	r3, [r7, #8]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d003      	beq.n	8019220 <HAL_UART_Transmit_DMA+0x28>
 8019218:	1dbb      	adds	r3, r7, #6
 801921a:	881b      	ldrh	r3, [r3, #0]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d101      	bne.n	8019224 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8019220:	2301      	movs	r3, #1
 8019222:	e071      	b.n	8019308 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	689a      	ldr	r2, [r3, #8]
 8019228:	2380      	movs	r3, #128	@ 0x80
 801922a:	015b      	lsls	r3, r3, #5
 801922c:	429a      	cmp	r2, r3
 801922e:	d109      	bne.n	8019244 <HAL_UART_Transmit_DMA+0x4c>
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	691b      	ldr	r3, [r3, #16]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d105      	bne.n	8019244 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019238:	68bb      	ldr	r3, [r7, #8]
 801923a:	2201      	movs	r2, #1
 801923c:	4013      	ands	r3, r2
 801923e:	d001      	beq.n	8019244 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8019240:	2301      	movs	r3, #1
 8019242:	e061      	b.n	8019308 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	68ba      	ldr	r2, [r7, #8]
 8019248:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	1dba      	adds	r2, r7, #6
 801924e:	2154      	movs	r1, #84	@ 0x54
 8019250:	8812      	ldrh	r2, [r2, #0]
 8019252:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	1dba      	adds	r2, r7, #6
 8019258:	2156      	movs	r1, #86	@ 0x56
 801925a:	8812      	ldrh	r2, [r2, #0]
 801925c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	2290      	movs	r2, #144	@ 0x90
 8019262:	2100      	movs	r1, #0
 8019264:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	2288      	movs	r2, #136	@ 0x88
 801926a:	2121      	movs	r1, #33	@ 0x21
 801926c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019272:	2b00      	cmp	r3, #0
 8019274:	d028      	beq.n	80192c8 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801927a:	4a25      	ldr	r2, [pc, #148]	@ (8019310 <HAL_UART_Transmit_DMA+0x118>)
 801927c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019282:	4a24      	ldr	r2, [pc, #144]	@ (8019314 <HAL_UART_Transmit_DMA+0x11c>)
 8019284:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801928a:	4a23      	ldr	r2, [pc, #140]	@ (8019318 <HAL_UART_Transmit_DMA+0x120>)
 801928c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019292:	2200      	movs	r2, #0
 8019294:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801929e:	0019      	movs	r1, r3
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	3328      	adds	r3, #40	@ 0x28
 80192a6:	001a      	movs	r2, r3
 80192a8:	1dbb      	adds	r3, r7, #6
 80192aa:	881b      	ldrh	r3, [r3, #0]
 80192ac:	f7f9 fb2e 	bl	801290c <HAL_DMA_Start_IT>
 80192b0:	1e03      	subs	r3, r0, #0
 80192b2:	d009      	beq.n	80192c8 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	2290      	movs	r2, #144	@ 0x90
 80192b8:	2110      	movs	r1, #16
 80192ba:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	2288      	movs	r2, #136	@ 0x88
 80192c0:	2120      	movs	r1, #32
 80192c2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80192c4:	2301      	movs	r3, #1
 80192c6:	e01f      	b.n	8019308 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	2240      	movs	r2, #64	@ 0x40
 80192ce:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80192d0:	f3ef 8310 	mrs	r3, PRIMASK
 80192d4:	613b      	str	r3, [r7, #16]
  return(result);
 80192d6:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80192d8:	61fb      	str	r3, [r7, #28]
 80192da:	2301      	movs	r3, #1
 80192dc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192de:	697b      	ldr	r3, [r7, #20]
 80192e0:	f383 8810 	msr	PRIMASK, r3
}
 80192e4:	46c0      	nop			@ (mov r8, r8)
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	689a      	ldr	r2, [r3, #8]
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	2180      	movs	r1, #128	@ 0x80
 80192f2:	430a      	orrs	r2, r1
 80192f4:	609a      	str	r2, [r3, #8]
 80192f6:	69fb      	ldr	r3, [r7, #28]
 80192f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192fa:	69bb      	ldr	r3, [r7, #24]
 80192fc:	f383 8810 	msr	PRIMASK, r3
}
 8019300:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8019302:	2300      	movs	r3, #0
 8019304:	e000      	b.n	8019308 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8019306:	2302      	movs	r3, #2
  }
}
 8019308:	0018      	movs	r0, r3
 801930a:	46bd      	mov	sp, r7
 801930c:	b008      	add	sp, #32
 801930e:	bd80      	pop	{r7, pc}
 8019310:	0801a629 	.word	0x0801a629
 8019314:	0801a6c1 	.word	0x0801a6c1
 8019318:	0801a853 	.word	0x0801a853

0801931c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b088      	sub	sp, #32
 8019320:	af00      	add	r7, sp, #0
 8019322:	60f8      	str	r0, [r7, #12]
 8019324:	60b9      	str	r1, [r7, #8]
 8019326:	1dbb      	adds	r3, r7, #6
 8019328:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	228c      	movs	r2, #140	@ 0x8c
 801932e:	589b      	ldr	r3, [r3, r2]
 8019330:	2b20      	cmp	r3, #32
 8019332:	d154      	bne.n	80193de <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8019334:	68bb      	ldr	r3, [r7, #8]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d003      	beq.n	8019342 <HAL_UART_Receive_DMA+0x26>
 801933a:	1dbb      	adds	r3, r7, #6
 801933c:	881b      	ldrh	r3, [r3, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d101      	bne.n	8019346 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8019342:	2301      	movs	r3, #1
 8019344:	e04c      	b.n	80193e0 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	689a      	ldr	r2, [r3, #8]
 801934a:	2380      	movs	r3, #128	@ 0x80
 801934c:	015b      	lsls	r3, r3, #5
 801934e:	429a      	cmp	r2, r3
 8019350:	d109      	bne.n	8019366 <HAL_UART_Receive_DMA+0x4a>
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	691b      	ldr	r3, [r3, #16]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d105      	bne.n	8019366 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	2201      	movs	r2, #1
 801935e:	4013      	ands	r3, r2
 8019360:	d001      	beq.n	8019366 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019362:	2301      	movs	r3, #1
 8019364:	e03c      	b.n	80193e0 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	2200      	movs	r2, #0
 801936a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	4a1d      	ldr	r2, [pc, #116]	@ (80193e8 <HAL_UART_Receive_DMA+0xcc>)
 8019372:	4293      	cmp	r3, r2
 8019374:	d02a      	beq.n	80193cc <HAL_UART_Receive_DMA+0xb0>
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	4a1c      	ldr	r2, [pc, #112]	@ (80193ec <HAL_UART_Receive_DMA+0xd0>)
 801937c:	4293      	cmp	r3, r2
 801937e:	d025      	beq.n	80193cc <HAL_UART_Receive_DMA+0xb0>
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	4a1a      	ldr	r2, [pc, #104]	@ (80193f0 <HAL_UART_Receive_DMA+0xd4>)
 8019386:	4293      	cmp	r3, r2
 8019388:	d020      	beq.n	80193cc <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	685a      	ldr	r2, [r3, #4]
 8019390:	2380      	movs	r3, #128	@ 0x80
 8019392:	041b      	lsls	r3, r3, #16
 8019394:	4013      	ands	r3, r2
 8019396:	d019      	beq.n	80193cc <HAL_UART_Receive_DMA+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019398:	f3ef 8310 	mrs	r3, PRIMASK
 801939c:	613b      	str	r3, [r7, #16]
  return(result);
 801939e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80193a0:	61fb      	str	r3, [r7, #28]
 80193a2:	2301      	movs	r3, #1
 80193a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193a6:	697b      	ldr	r3, [r7, #20]
 80193a8:	f383 8810 	msr	PRIMASK, r3
}
 80193ac:	46c0      	nop			@ (mov r8, r8)
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	681a      	ldr	r2, [r3, #0]
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	2180      	movs	r1, #128	@ 0x80
 80193ba:	04c9      	lsls	r1, r1, #19
 80193bc:	430a      	orrs	r2, r1
 80193be:	601a      	str	r2, [r3, #0]
 80193c0:	69fb      	ldr	r3, [r7, #28]
 80193c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193c4:	69bb      	ldr	r3, [r7, #24]
 80193c6:	f383 8810 	msr	PRIMASK, r3
}
 80193ca:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80193cc:	1dbb      	adds	r3, r7, #6
 80193ce:	881a      	ldrh	r2, [r3, #0]
 80193d0:	68b9      	ldr	r1, [r7, #8]
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	0018      	movs	r0, r3
 80193d6:	f000 ffdb 	bl	801a390 <UART_Start_Receive_DMA>
 80193da:	0003      	movs	r3, r0
 80193dc:	e000      	b.n	80193e0 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80193de:	2302      	movs	r3, #2
  }
}
 80193e0:	0018      	movs	r0, r3
 80193e2:	46bd      	mov	sp, r7
 80193e4:	b008      	add	sp, #32
 80193e6:	bd80      	pop	{r7, pc}
 80193e8:	40008000 	.word	0x40008000
 80193ec:	40008400 	.word	0x40008400
 80193f0:	40008c00 	.word	0x40008c00

080193f4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b092      	sub	sp, #72	@ 0x48
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80193fc:	f3ef 8310 	mrs	r3, PRIMASK
 8019400:	623b      	str	r3, [r7, #32]
  return(result);
 8019402:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8019404:	647b      	str	r3, [r7, #68]	@ 0x44
 8019406:	2301      	movs	r3, #1
 8019408:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801940c:	f383 8810 	msr	PRIMASK, r3
}
 8019410:	46c0      	nop			@ (mov r8, r8)
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	681a      	ldr	r2, [r3, #0]
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	494d      	ldr	r1, [pc, #308]	@ (8019554 <HAL_UART_AbortReceive+0x160>)
 801941e:	400a      	ands	r2, r1
 8019420:	601a      	str	r2, [r3, #0]
 8019422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019424:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019428:	f383 8810 	msr	PRIMASK, r3
}
 801942c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801942e:	f3ef 8310 	mrs	r3, PRIMASK
 8019432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8019434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8019436:	643b      	str	r3, [r7, #64]	@ 0x40
 8019438:	2301      	movs	r3, #1
 801943a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801943c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801943e:	f383 8810 	msr	PRIMASK, r3
}
 8019442:	46c0      	nop			@ (mov r8, r8)
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	689a      	ldr	r2, [r3, #8]
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	4942      	ldr	r1, [pc, #264]	@ (8019558 <HAL_UART_AbortReceive+0x164>)
 8019450:	400a      	ands	r2, r1
 8019452:	609a      	str	r2, [r3, #8]
 8019454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019456:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801945a:	f383 8810 	msr	PRIMASK, r3
}
 801945e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019464:	2b01      	cmp	r3, #1
 8019466:	d118      	bne.n	801949a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019468:	f3ef 8310 	mrs	r3, PRIMASK
 801946c:	617b      	str	r3, [r7, #20]
  return(result);
 801946e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8019470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019472:	2301      	movs	r3, #1
 8019474:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019476:	69bb      	ldr	r3, [r7, #24]
 8019478:	f383 8810 	msr	PRIMASK, r3
}
 801947c:	46c0      	nop			@ (mov r8, r8)
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	681a      	ldr	r2, [r3, #0]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	2110      	movs	r1, #16
 801948a:	438a      	bics	r2, r1
 801948c:	601a      	str	r2, [r3, #0]
 801948e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019492:	69fb      	ldr	r3, [r7, #28]
 8019494:	f383 8810 	msr	PRIMASK, r3
}
 8019498:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	689b      	ldr	r3, [r3, #8]
 80194a0:	2240      	movs	r2, #64	@ 0x40
 80194a2:	4013      	ands	r3, r2
 80194a4:	2b40      	cmp	r3, #64	@ 0x40
 80194a6:	d139      	bne.n	801951c <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80194a8:	f3ef 8310 	mrs	r3, PRIMASK
 80194ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80194ae:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80194b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80194b2:	2301      	movs	r3, #1
 80194b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	f383 8810 	msr	PRIMASK, r3
}
 80194bc:	46c0      	nop			@ (mov r8, r8)
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	689a      	ldr	r2, [r3, #8]
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	2140      	movs	r1, #64	@ 0x40
 80194ca:	438a      	bics	r2, r1
 80194cc:	609a      	str	r2, [r3, #8]
 80194ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	f383 8810 	msr	PRIMASK, r3
}
 80194d8:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	2280      	movs	r2, #128	@ 0x80
 80194de:	589b      	ldr	r3, [r3, r2]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d01b      	beq.n	801951c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	2280      	movs	r2, #128	@ 0x80
 80194e8:	589b      	ldr	r3, [r3, r2]
 80194ea:	2200      	movs	r2, #0
 80194ec:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	2280      	movs	r2, #128	@ 0x80
 80194f2:	589b      	ldr	r3, [r3, r2]
 80194f4:	0018      	movs	r0, r3
 80194f6:	f7f9 fa8f 	bl	8012a18 <HAL_DMA_Abort>
 80194fa:	1e03      	subs	r3, r0, #0
 80194fc:	d00e      	beq.n	801951c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2280      	movs	r2, #128	@ 0x80
 8019502:	589b      	ldr	r3, [r3, r2]
 8019504:	0018      	movs	r0, r3
 8019506:	f7f9 fc1f 	bl	8012d48 <HAL_DMA_GetError>
 801950a:	0003      	movs	r3, r0
 801950c:	2b20      	cmp	r3, #32
 801950e:	d105      	bne.n	801951c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	2290      	movs	r2, #144	@ 0x90
 8019514:	2110      	movs	r1, #16
 8019516:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8019518:	2303      	movs	r3, #3
 801951a:	e017      	b.n	801954c <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	225e      	movs	r2, #94	@ 0x5e
 8019520:	2100      	movs	r1, #0
 8019522:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	220f      	movs	r2, #15
 801952a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	699a      	ldr	r2, [r3, #24]
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	2108      	movs	r1, #8
 8019538:	430a      	orrs	r2, r1
 801953a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	228c      	movs	r2, #140	@ 0x8c
 8019540:	2120      	movs	r1, #32
 8019542:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	2200      	movs	r2, #0
 8019548:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 801954a:	2300      	movs	r3, #0
}
 801954c:	0018      	movs	r0, r3
 801954e:	46bd      	mov	sp, r7
 8019550:	b012      	add	sp, #72	@ 0x48
 8019552:	bd80      	pop	{r7, pc}
 8019554:	fffffedf 	.word	0xfffffedf
 8019558:	effffffe 	.word	0xeffffffe

0801955c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801955c:	b5b0      	push	{r4, r5, r7, lr}
 801955e:	b0aa      	sub	sp, #168	@ 0xa8
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	69db      	ldr	r3, [r3, #28]
 801956a:	22a4      	movs	r2, #164	@ 0xa4
 801956c:	18b9      	adds	r1, r7, r2
 801956e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	20a0      	movs	r0, #160	@ 0xa0
 8019578:	1839      	adds	r1, r7, r0
 801957a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	689b      	ldr	r3, [r3, #8]
 8019582:	249c      	movs	r4, #156	@ 0x9c
 8019584:	1939      	adds	r1, r7, r4
 8019586:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019588:	0011      	movs	r1, r2
 801958a:	18bb      	adds	r3, r7, r2
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	4aa2      	ldr	r2, [pc, #648]	@ (8019818 <HAL_UART_IRQHandler+0x2bc>)
 8019590:	4013      	ands	r3, r2
 8019592:	2298      	movs	r2, #152	@ 0x98
 8019594:	18bd      	adds	r5, r7, r2
 8019596:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8019598:	18bb      	adds	r3, r7, r2
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	2b00      	cmp	r3, #0
 801959e:	d11a      	bne.n	80195d6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80195a0:	187b      	adds	r3, r7, r1
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2220      	movs	r2, #32
 80195a6:	4013      	ands	r3, r2
 80195a8:	d015      	beq.n	80195d6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80195aa:	183b      	adds	r3, r7, r0
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	2220      	movs	r2, #32
 80195b0:	4013      	ands	r3, r2
 80195b2:	d105      	bne.n	80195c0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80195b4:	193b      	adds	r3, r7, r4
 80195b6:	681a      	ldr	r2, [r3, #0]
 80195b8:	2380      	movs	r3, #128	@ 0x80
 80195ba:	055b      	lsls	r3, r3, #21
 80195bc:	4013      	ands	r3, r2
 80195be:	d00a      	beq.n	80195d6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d100      	bne.n	80195ca <HAL_UART_IRQHandler+0x6e>
 80195c8:	e2fb      	b.n	8019bc2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80195ce:	687a      	ldr	r2, [r7, #4]
 80195d0:	0010      	movs	r0, r2
 80195d2:	4798      	blx	r3
      }
      return;
 80195d4:	e2f5      	b.n	8019bc2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80195d6:	2398      	movs	r3, #152	@ 0x98
 80195d8:	18fb      	adds	r3, r7, r3
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d100      	bne.n	80195e2 <HAL_UART_IRQHandler+0x86>
 80195e0:	e122      	b.n	8019828 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80195e2:	239c      	movs	r3, #156	@ 0x9c
 80195e4:	18fb      	adds	r3, r7, r3
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	4a8c      	ldr	r2, [pc, #560]	@ (801981c <HAL_UART_IRQHandler+0x2c0>)
 80195ea:	4013      	ands	r3, r2
 80195ec:	d106      	bne.n	80195fc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80195ee:	23a0      	movs	r3, #160	@ 0xa0
 80195f0:	18fb      	adds	r3, r7, r3
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	4a8a      	ldr	r2, [pc, #552]	@ (8019820 <HAL_UART_IRQHandler+0x2c4>)
 80195f6:	4013      	ands	r3, r2
 80195f8:	d100      	bne.n	80195fc <HAL_UART_IRQHandler+0xa0>
 80195fa:	e115      	b.n	8019828 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80195fc:	23a4      	movs	r3, #164	@ 0xa4
 80195fe:	18fb      	adds	r3, r7, r3
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	2201      	movs	r2, #1
 8019604:	4013      	ands	r3, r2
 8019606:	d012      	beq.n	801962e <HAL_UART_IRQHandler+0xd2>
 8019608:	23a0      	movs	r3, #160	@ 0xa0
 801960a:	18fb      	adds	r3, r7, r3
 801960c:	681a      	ldr	r2, [r3, #0]
 801960e:	2380      	movs	r3, #128	@ 0x80
 8019610:	005b      	lsls	r3, r3, #1
 8019612:	4013      	ands	r3, r2
 8019614:	d00b      	beq.n	801962e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	2201      	movs	r2, #1
 801961c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	2290      	movs	r2, #144	@ 0x90
 8019622:	589b      	ldr	r3, [r3, r2]
 8019624:	2201      	movs	r2, #1
 8019626:	431a      	orrs	r2, r3
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2190      	movs	r1, #144	@ 0x90
 801962c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801962e:	23a4      	movs	r3, #164	@ 0xa4
 8019630:	18fb      	adds	r3, r7, r3
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	2202      	movs	r2, #2
 8019636:	4013      	ands	r3, r2
 8019638:	d011      	beq.n	801965e <HAL_UART_IRQHandler+0x102>
 801963a:	239c      	movs	r3, #156	@ 0x9c
 801963c:	18fb      	adds	r3, r7, r3
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2201      	movs	r2, #1
 8019642:	4013      	ands	r3, r2
 8019644:	d00b      	beq.n	801965e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	2202      	movs	r2, #2
 801964c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	2290      	movs	r2, #144	@ 0x90
 8019652:	589b      	ldr	r3, [r3, r2]
 8019654:	2204      	movs	r2, #4
 8019656:	431a      	orrs	r2, r3
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2190      	movs	r1, #144	@ 0x90
 801965c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801965e:	23a4      	movs	r3, #164	@ 0xa4
 8019660:	18fb      	adds	r3, r7, r3
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	2204      	movs	r2, #4
 8019666:	4013      	ands	r3, r2
 8019668:	d011      	beq.n	801968e <HAL_UART_IRQHandler+0x132>
 801966a:	239c      	movs	r3, #156	@ 0x9c
 801966c:	18fb      	adds	r3, r7, r3
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	2201      	movs	r2, #1
 8019672:	4013      	ands	r3, r2
 8019674:	d00b      	beq.n	801968e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	2204      	movs	r2, #4
 801967c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	2290      	movs	r2, #144	@ 0x90
 8019682:	589b      	ldr	r3, [r3, r2]
 8019684:	2202      	movs	r2, #2
 8019686:	431a      	orrs	r2, r3
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2190      	movs	r1, #144	@ 0x90
 801968c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801968e:	23a4      	movs	r3, #164	@ 0xa4
 8019690:	18fb      	adds	r3, r7, r3
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	2208      	movs	r2, #8
 8019696:	4013      	ands	r3, r2
 8019698:	d017      	beq.n	80196ca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801969a:	23a0      	movs	r3, #160	@ 0xa0
 801969c:	18fb      	adds	r3, r7, r3
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	2220      	movs	r2, #32
 80196a2:	4013      	ands	r3, r2
 80196a4:	d105      	bne.n	80196b2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80196a6:	239c      	movs	r3, #156	@ 0x9c
 80196a8:	18fb      	adds	r3, r7, r3
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	4a5b      	ldr	r2, [pc, #364]	@ (801981c <HAL_UART_IRQHandler+0x2c0>)
 80196ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80196b0:	d00b      	beq.n	80196ca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	2208      	movs	r2, #8
 80196b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	2290      	movs	r2, #144	@ 0x90
 80196be:	589b      	ldr	r3, [r3, r2]
 80196c0:	2208      	movs	r2, #8
 80196c2:	431a      	orrs	r2, r3
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	2190      	movs	r1, #144	@ 0x90
 80196c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80196ca:	23a4      	movs	r3, #164	@ 0xa4
 80196cc:	18fb      	adds	r3, r7, r3
 80196ce:	681a      	ldr	r2, [r3, #0]
 80196d0:	2380      	movs	r3, #128	@ 0x80
 80196d2:	011b      	lsls	r3, r3, #4
 80196d4:	4013      	ands	r3, r2
 80196d6:	d013      	beq.n	8019700 <HAL_UART_IRQHandler+0x1a4>
 80196d8:	23a0      	movs	r3, #160	@ 0xa0
 80196da:	18fb      	adds	r3, r7, r3
 80196dc:	681a      	ldr	r2, [r3, #0]
 80196de:	2380      	movs	r3, #128	@ 0x80
 80196e0:	04db      	lsls	r3, r3, #19
 80196e2:	4013      	ands	r3, r2
 80196e4:	d00c      	beq.n	8019700 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	2280      	movs	r2, #128	@ 0x80
 80196ec:	0112      	lsls	r2, r2, #4
 80196ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	2290      	movs	r2, #144	@ 0x90
 80196f4:	589b      	ldr	r3, [r3, r2]
 80196f6:	2220      	movs	r2, #32
 80196f8:	431a      	orrs	r2, r3
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	2190      	movs	r1, #144	@ 0x90
 80196fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2290      	movs	r2, #144	@ 0x90
 8019704:	589b      	ldr	r3, [r3, r2]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d100      	bne.n	801970c <HAL_UART_IRQHandler+0x1b0>
 801970a:	e25c      	b.n	8019bc6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801970c:	23a4      	movs	r3, #164	@ 0xa4
 801970e:	18fb      	adds	r3, r7, r3
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	2220      	movs	r2, #32
 8019714:	4013      	ands	r3, r2
 8019716:	d015      	beq.n	8019744 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019718:	23a0      	movs	r3, #160	@ 0xa0
 801971a:	18fb      	adds	r3, r7, r3
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	2220      	movs	r2, #32
 8019720:	4013      	ands	r3, r2
 8019722:	d106      	bne.n	8019732 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019724:	239c      	movs	r3, #156	@ 0x9c
 8019726:	18fb      	adds	r3, r7, r3
 8019728:	681a      	ldr	r2, [r3, #0]
 801972a:	2380      	movs	r3, #128	@ 0x80
 801972c:	055b      	lsls	r3, r3, #21
 801972e:	4013      	ands	r3, r2
 8019730:	d008      	beq.n	8019744 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019736:	2b00      	cmp	r3, #0
 8019738:	d004      	beq.n	8019744 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801973e:	687a      	ldr	r2, [r7, #4]
 8019740:	0010      	movs	r0, r2
 8019742:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2290      	movs	r2, #144	@ 0x90
 8019748:	589b      	ldr	r3, [r3, r2]
 801974a:	2194      	movs	r1, #148	@ 0x94
 801974c:	187a      	adds	r2, r7, r1
 801974e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	689b      	ldr	r3, [r3, #8]
 8019756:	2240      	movs	r2, #64	@ 0x40
 8019758:	4013      	ands	r3, r2
 801975a:	2b40      	cmp	r3, #64	@ 0x40
 801975c:	d004      	beq.n	8019768 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801975e:	187b      	adds	r3, r7, r1
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	2228      	movs	r2, #40	@ 0x28
 8019764:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019766:	d04c      	beq.n	8019802 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	0018      	movs	r0, r3
 801976c:	f000 fef6 	bl	801a55c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	689b      	ldr	r3, [r3, #8]
 8019776:	2240      	movs	r2, #64	@ 0x40
 8019778:	4013      	ands	r3, r2
 801977a:	2b40      	cmp	r3, #64	@ 0x40
 801977c:	d13c      	bne.n	80197f8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801977e:	f3ef 8310 	mrs	r3, PRIMASK
 8019782:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8019784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019786:	2090      	movs	r0, #144	@ 0x90
 8019788:	183a      	adds	r2, r7, r0
 801978a:	6013      	str	r3, [r2, #0]
 801978c:	2301      	movs	r3, #1
 801978e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019792:	f383 8810 	msr	PRIMASK, r3
}
 8019796:	46c0      	nop			@ (mov r8, r8)
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	689a      	ldr	r2, [r3, #8]
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	2140      	movs	r1, #64	@ 0x40
 80197a4:	438a      	bics	r2, r1
 80197a6:	609a      	str	r2, [r3, #8]
 80197a8:	183b      	adds	r3, r7, r0
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80197b0:	f383 8810 	msr	PRIMASK, r3
}
 80197b4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	2280      	movs	r2, #128	@ 0x80
 80197ba:	589b      	ldr	r3, [r3, r2]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d016      	beq.n	80197ee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	2280      	movs	r2, #128	@ 0x80
 80197c4:	589b      	ldr	r3, [r3, r2]
 80197c6:	4a17      	ldr	r2, [pc, #92]	@ (8019824 <HAL_UART_IRQHandler+0x2c8>)
 80197c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2280      	movs	r2, #128	@ 0x80
 80197ce:	589b      	ldr	r3, [r3, r2]
 80197d0:	0018      	movs	r0, r3
 80197d2:	f7f9 f981 	bl	8012ad8 <HAL_DMA_Abort_IT>
 80197d6:	1e03      	subs	r3, r0, #0
 80197d8:	d01c      	beq.n	8019814 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	2280      	movs	r2, #128	@ 0x80
 80197de:	589b      	ldr	r3, [r3, r2]
 80197e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80197e2:	687a      	ldr	r2, [r7, #4]
 80197e4:	2180      	movs	r1, #128	@ 0x80
 80197e6:	5852      	ldr	r2, [r2, r1]
 80197e8:	0010      	movs	r0, r2
 80197ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80197ec:	e012      	b.n	8019814 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	0018      	movs	r0, r3
 80197f2:	f000 fa19 	bl	8019c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80197f6:	e00d      	b.n	8019814 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	0018      	movs	r0, r3
 80197fc:	f000 fa14 	bl	8019c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019800:	e008      	b.n	8019814 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	0018      	movs	r0, r3
 8019806:	f000 fa0f 	bl	8019c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	2290      	movs	r2, #144	@ 0x90
 801980e:	2100      	movs	r1, #0
 8019810:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8019812:	e1d8      	b.n	8019bc6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019814:	46c0      	nop			@ (mov r8, r8)
    return;
 8019816:	e1d6      	b.n	8019bc6 <HAL_UART_IRQHandler+0x66a>
 8019818:	0000080f 	.word	0x0000080f
 801981c:	10000001 	.word	0x10000001
 8019820:	04000120 	.word	0x04000120
 8019824:	0801a8d9 	.word	0x0801a8d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801982c:	2b01      	cmp	r3, #1
 801982e:	d000      	beq.n	8019832 <HAL_UART_IRQHandler+0x2d6>
 8019830:	e15d      	b.n	8019aee <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019832:	23a4      	movs	r3, #164	@ 0xa4
 8019834:	18fb      	adds	r3, r7, r3
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	2210      	movs	r2, #16
 801983a:	4013      	ands	r3, r2
 801983c:	d100      	bne.n	8019840 <HAL_UART_IRQHandler+0x2e4>
 801983e:	e156      	b.n	8019aee <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019840:	23a0      	movs	r3, #160	@ 0xa0
 8019842:	18fb      	adds	r3, r7, r3
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	2210      	movs	r2, #16
 8019848:	4013      	ands	r3, r2
 801984a:	d100      	bne.n	801984e <HAL_UART_IRQHandler+0x2f2>
 801984c:	e14f      	b.n	8019aee <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	2210      	movs	r2, #16
 8019854:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	689b      	ldr	r3, [r3, #8]
 801985c:	2240      	movs	r2, #64	@ 0x40
 801985e:	4013      	ands	r3, r2
 8019860:	2b40      	cmp	r3, #64	@ 0x40
 8019862:	d000      	beq.n	8019866 <HAL_UART_IRQHandler+0x30a>
 8019864:	e0c3      	b.n	80199ee <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	2280      	movs	r2, #128	@ 0x80
 801986a:	589b      	ldr	r3, [r3, r2]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	685a      	ldr	r2, [r3, #4]
 8019870:	217e      	movs	r1, #126	@ 0x7e
 8019872:	187b      	adds	r3, r7, r1
 8019874:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8019876:	187b      	adds	r3, r7, r1
 8019878:	881b      	ldrh	r3, [r3, #0]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d100      	bne.n	8019880 <HAL_UART_IRQHandler+0x324>
 801987e:	e097      	b.n	80199b0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	225c      	movs	r2, #92	@ 0x5c
 8019884:	5a9b      	ldrh	r3, [r3, r2]
 8019886:	187a      	adds	r2, r7, r1
 8019888:	8812      	ldrh	r2, [r2, #0]
 801988a:	429a      	cmp	r2, r3
 801988c:	d300      	bcc.n	8019890 <HAL_UART_IRQHandler+0x334>
 801988e:	e08f      	b.n	80199b0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	187a      	adds	r2, r7, r1
 8019894:	215e      	movs	r1, #94	@ 0x5e
 8019896:	8812      	ldrh	r2, [r2, #0]
 8019898:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	2280      	movs	r2, #128	@ 0x80
 801989e:	589b      	ldr	r3, [r3, r2]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	2220      	movs	r2, #32
 80198a6:	4013      	ands	r3, r2
 80198a8:	d170      	bne.n	801998c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80198aa:	f3ef 8310 	mrs	r3, PRIMASK
 80198ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80198b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80198b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80198b4:	2301      	movs	r3, #1
 80198b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198ba:	f383 8810 	msr	PRIMASK, r3
}
 80198be:	46c0      	nop			@ (mov r8, r8)
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	681a      	ldr	r2, [r3, #0]
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	49c4      	ldr	r1, [pc, #784]	@ (8019bdc <HAL_UART_IRQHandler+0x680>)
 80198cc:	400a      	ands	r2, r1
 80198ce:	601a      	str	r2, [r3, #0]
 80198d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80198d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198d6:	f383 8810 	msr	PRIMASK, r3
}
 80198da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80198dc:	f3ef 8310 	mrs	r3, PRIMASK
 80198e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80198e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80198e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80198e6:	2301      	movs	r3, #1
 80198e8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198ec:	f383 8810 	msr	PRIMASK, r3
}
 80198f0:	46c0      	nop			@ (mov r8, r8)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	689a      	ldr	r2, [r3, #8]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	2101      	movs	r1, #1
 80198fe:	438a      	bics	r2, r1
 8019900:	609a      	str	r2, [r3, #8]
 8019902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019904:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019908:	f383 8810 	msr	PRIMASK, r3
}
 801990c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801990e:	f3ef 8310 	mrs	r3, PRIMASK
 8019912:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8019914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019916:	673b      	str	r3, [r7, #112]	@ 0x70
 8019918:	2301      	movs	r3, #1
 801991a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801991c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801991e:	f383 8810 	msr	PRIMASK, r3
}
 8019922:	46c0      	nop			@ (mov r8, r8)
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	689a      	ldr	r2, [r3, #8]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	2140      	movs	r1, #64	@ 0x40
 8019930:	438a      	bics	r2, r1
 8019932:	609a      	str	r2, [r3, #8]
 8019934:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019936:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801993a:	f383 8810 	msr	PRIMASK, r3
}
 801993e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	228c      	movs	r2, #140	@ 0x8c
 8019944:	2120      	movs	r1, #32
 8019946:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2200      	movs	r2, #0
 801994c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801994e:	f3ef 8310 	mrs	r3, PRIMASK
 8019952:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8019954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019958:	2301      	movs	r3, #1
 801995a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801995c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801995e:	f383 8810 	msr	PRIMASK, r3
}
 8019962:	46c0      	nop			@ (mov r8, r8)
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	681a      	ldr	r2, [r3, #0]
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	2110      	movs	r1, #16
 8019970:	438a      	bics	r2, r1
 8019972:	601a      	str	r2, [r3, #0]
 8019974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019976:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801997a:	f383 8810 	msr	PRIMASK, r3
}
 801997e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	2280      	movs	r2, #128	@ 0x80
 8019984:	589b      	ldr	r3, [r3, r2]
 8019986:	0018      	movs	r0, r3
 8019988:	f7f9 f846 	bl	8012a18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	2202      	movs	r2, #2
 8019990:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	225c      	movs	r2, #92	@ 0x5c
 8019996:	5a9a      	ldrh	r2, [r3, r2]
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	215e      	movs	r1, #94	@ 0x5e
 801999c:	5a5b      	ldrh	r3, [r3, r1]
 801999e:	b29b      	uxth	r3, r3
 80199a0:	1ad3      	subs	r3, r2, r3
 80199a2:	b29a      	uxth	r2, r3
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	0011      	movs	r1, r2
 80199a8:	0018      	movs	r0, r3
 80199aa:	f000 f945 	bl	8019c38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80199ae:	e10c      	b.n	8019bca <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	225c      	movs	r2, #92	@ 0x5c
 80199b4:	5a9b      	ldrh	r3, [r3, r2]
 80199b6:	227e      	movs	r2, #126	@ 0x7e
 80199b8:	18ba      	adds	r2, r7, r2
 80199ba:	8812      	ldrh	r2, [r2, #0]
 80199bc:	429a      	cmp	r2, r3
 80199be:	d000      	beq.n	80199c2 <HAL_UART_IRQHandler+0x466>
 80199c0:	e103      	b.n	8019bca <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	2280      	movs	r2, #128	@ 0x80
 80199c6:	589b      	ldr	r3, [r3, r2]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	2220      	movs	r2, #32
 80199ce:	4013      	ands	r3, r2
 80199d0:	2b20      	cmp	r3, #32
 80199d2:	d000      	beq.n	80199d6 <HAL_UART_IRQHandler+0x47a>
 80199d4:	e0f9      	b.n	8019bca <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2202      	movs	r2, #2
 80199da:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	225c      	movs	r2, #92	@ 0x5c
 80199e0:	5a9a      	ldrh	r2, [r3, r2]
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	0011      	movs	r1, r2
 80199e6:	0018      	movs	r0, r3
 80199e8:	f000 f926 	bl	8019c38 <HAL_UARTEx_RxEventCallback>
      return;
 80199ec:	e0ed      	b.n	8019bca <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	225c      	movs	r2, #92	@ 0x5c
 80199f2:	5a99      	ldrh	r1, [r3, r2]
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	225e      	movs	r2, #94	@ 0x5e
 80199f8:	5a9b      	ldrh	r3, [r3, r2]
 80199fa:	b29a      	uxth	r2, r3
 80199fc:	208e      	movs	r0, #142	@ 0x8e
 80199fe:	183b      	adds	r3, r7, r0
 8019a00:	1a8a      	subs	r2, r1, r2
 8019a02:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	225e      	movs	r2, #94	@ 0x5e
 8019a08:	5a9b      	ldrh	r3, [r3, r2]
 8019a0a:	b29b      	uxth	r3, r3
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d100      	bne.n	8019a12 <HAL_UART_IRQHandler+0x4b6>
 8019a10:	e0dd      	b.n	8019bce <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8019a12:	183b      	adds	r3, r7, r0
 8019a14:	881b      	ldrh	r3, [r3, #0]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d100      	bne.n	8019a1c <HAL_UART_IRQHandler+0x4c0>
 8019a1a:	e0d8      	b.n	8019bce <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8019a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a22:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019a24:	2488      	movs	r4, #136	@ 0x88
 8019a26:	193a      	adds	r2, r7, r4
 8019a28:	6013      	str	r3, [r2, #0]
 8019a2a:	2301      	movs	r3, #1
 8019a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a2e:	693b      	ldr	r3, [r7, #16]
 8019a30:	f383 8810 	msr	PRIMASK, r3
}
 8019a34:	46c0      	nop			@ (mov r8, r8)
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	681a      	ldr	r2, [r3, #0]
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	4967      	ldr	r1, [pc, #412]	@ (8019be0 <HAL_UART_IRQHandler+0x684>)
 8019a42:	400a      	ands	r2, r1
 8019a44:	601a      	str	r2, [r3, #0]
 8019a46:	193b      	adds	r3, r7, r4
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a4c:	697b      	ldr	r3, [r7, #20]
 8019a4e:	f383 8810 	msr	PRIMASK, r3
}
 8019a52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019a54:	f3ef 8310 	mrs	r3, PRIMASK
 8019a58:	61bb      	str	r3, [r7, #24]
  return(result);
 8019a5a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019a5c:	2484      	movs	r4, #132	@ 0x84
 8019a5e:	193a      	adds	r2, r7, r4
 8019a60:	6013      	str	r3, [r2, #0]
 8019a62:	2301      	movs	r3, #1
 8019a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a66:	69fb      	ldr	r3, [r7, #28]
 8019a68:	f383 8810 	msr	PRIMASK, r3
}
 8019a6c:	46c0      	nop			@ (mov r8, r8)
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	689a      	ldr	r2, [r3, #8]
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	495a      	ldr	r1, [pc, #360]	@ (8019be4 <HAL_UART_IRQHandler+0x688>)
 8019a7a:	400a      	ands	r2, r1
 8019a7c:	609a      	str	r2, [r3, #8]
 8019a7e:	193b      	adds	r3, r7, r4
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a84:	6a3b      	ldr	r3, [r7, #32]
 8019a86:	f383 8810 	msr	PRIMASK, r3
}
 8019a8a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	228c      	movs	r2, #140	@ 0x8c
 8019a90:	2120      	movs	r1, #32
 8019a92:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	2200      	movs	r2, #0
 8019a98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8019aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8019aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019aa8:	2480      	movs	r4, #128	@ 0x80
 8019aaa:	193a      	adds	r2, r7, r4
 8019aac:	6013      	str	r3, [r2, #0]
 8019aae:	2301      	movs	r3, #1
 8019ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ab4:	f383 8810 	msr	PRIMASK, r3
}
 8019ab8:	46c0      	nop			@ (mov r8, r8)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	681a      	ldr	r2, [r3, #0]
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	2110      	movs	r1, #16
 8019ac6:	438a      	bics	r2, r1
 8019ac8:	601a      	str	r2, [r3, #0]
 8019aca:	193b      	adds	r3, r7, r4
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ad2:	f383 8810 	msr	PRIMASK, r3
}
 8019ad6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2202      	movs	r2, #2
 8019adc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8019ade:	183b      	adds	r3, r7, r0
 8019ae0:	881a      	ldrh	r2, [r3, #0]
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	0011      	movs	r1, r2
 8019ae6:	0018      	movs	r0, r3
 8019ae8:	f000 f8a6 	bl	8019c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8019aec:	e06f      	b.n	8019bce <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8019aee:	23a4      	movs	r3, #164	@ 0xa4
 8019af0:	18fb      	adds	r3, r7, r3
 8019af2:	681a      	ldr	r2, [r3, #0]
 8019af4:	2380      	movs	r3, #128	@ 0x80
 8019af6:	035b      	lsls	r3, r3, #13
 8019af8:	4013      	ands	r3, r2
 8019afa:	d010      	beq.n	8019b1e <HAL_UART_IRQHandler+0x5c2>
 8019afc:	239c      	movs	r3, #156	@ 0x9c
 8019afe:	18fb      	adds	r3, r7, r3
 8019b00:	681a      	ldr	r2, [r3, #0]
 8019b02:	2380      	movs	r3, #128	@ 0x80
 8019b04:	03db      	lsls	r3, r3, #15
 8019b06:	4013      	ands	r3, r2
 8019b08:	d009      	beq.n	8019b1e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	2280      	movs	r2, #128	@ 0x80
 8019b10:	0352      	lsls	r2, r2, #13
 8019b12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	0018      	movs	r0, r3
 8019b18:	f000 ff1d 	bl	801a956 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019b1c:	e05a      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8019b1e:	23a4      	movs	r3, #164	@ 0xa4
 8019b20:	18fb      	adds	r3, r7, r3
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	2280      	movs	r2, #128	@ 0x80
 8019b26:	4013      	ands	r3, r2
 8019b28:	d016      	beq.n	8019b58 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8019b2a:	23a0      	movs	r3, #160	@ 0xa0
 8019b2c:	18fb      	adds	r3, r7, r3
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	2280      	movs	r2, #128	@ 0x80
 8019b32:	4013      	ands	r3, r2
 8019b34:	d106      	bne.n	8019b44 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8019b36:	239c      	movs	r3, #156	@ 0x9c
 8019b38:	18fb      	adds	r3, r7, r3
 8019b3a:	681a      	ldr	r2, [r3, #0]
 8019b3c:	2380      	movs	r3, #128	@ 0x80
 8019b3e:	041b      	lsls	r3, r3, #16
 8019b40:	4013      	ands	r3, r2
 8019b42:	d009      	beq.n	8019b58 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d042      	beq.n	8019bd2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	0010      	movs	r0, r2
 8019b54:	4798      	blx	r3
    }
    return;
 8019b56:	e03c      	b.n	8019bd2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8019b58:	23a4      	movs	r3, #164	@ 0xa4
 8019b5a:	18fb      	adds	r3, r7, r3
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	2240      	movs	r2, #64	@ 0x40
 8019b60:	4013      	ands	r3, r2
 8019b62:	d00a      	beq.n	8019b7a <HAL_UART_IRQHandler+0x61e>
 8019b64:	23a0      	movs	r3, #160	@ 0xa0
 8019b66:	18fb      	adds	r3, r7, r3
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	2240      	movs	r2, #64	@ 0x40
 8019b6c:	4013      	ands	r3, r2
 8019b6e:	d004      	beq.n	8019b7a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	0018      	movs	r0, r3
 8019b74:	f000 fec3 	bl	801a8fe <UART_EndTransmit_IT>
    return;
 8019b78:	e02c      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8019b7a:	23a4      	movs	r3, #164	@ 0xa4
 8019b7c:	18fb      	adds	r3, r7, r3
 8019b7e:	681a      	ldr	r2, [r3, #0]
 8019b80:	2380      	movs	r3, #128	@ 0x80
 8019b82:	041b      	lsls	r3, r3, #16
 8019b84:	4013      	ands	r3, r2
 8019b86:	d00b      	beq.n	8019ba0 <HAL_UART_IRQHandler+0x644>
 8019b88:	23a0      	movs	r3, #160	@ 0xa0
 8019b8a:	18fb      	adds	r3, r7, r3
 8019b8c:	681a      	ldr	r2, [r3, #0]
 8019b8e:	2380      	movs	r3, #128	@ 0x80
 8019b90:	05db      	lsls	r3, r3, #23
 8019b92:	4013      	ands	r3, r2
 8019b94:	d004      	beq.n	8019ba0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	0018      	movs	r0, r3
 8019b9a:	f000 feec 	bl	801a976 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019b9e:	e019      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8019ba0:	23a4      	movs	r3, #164	@ 0xa4
 8019ba2:	18fb      	adds	r3, r7, r3
 8019ba4:	681a      	ldr	r2, [r3, #0]
 8019ba6:	2380      	movs	r3, #128	@ 0x80
 8019ba8:	045b      	lsls	r3, r3, #17
 8019baa:	4013      	ands	r3, r2
 8019bac:	d012      	beq.n	8019bd4 <HAL_UART_IRQHandler+0x678>
 8019bae:	23a0      	movs	r3, #160	@ 0xa0
 8019bb0:	18fb      	adds	r3, r7, r3
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	da0d      	bge.n	8019bd4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	0018      	movs	r0, r3
 8019bbc:	f000 fed3 	bl	801a966 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019bc0:	e008      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
      return;
 8019bc2:	46c0      	nop			@ (mov r8, r8)
 8019bc4:	e006      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
    return;
 8019bc6:	46c0      	nop			@ (mov r8, r8)
 8019bc8:	e004      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
      return;
 8019bca:	46c0      	nop			@ (mov r8, r8)
 8019bcc:	e002      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
      return;
 8019bce:	46c0      	nop			@ (mov r8, r8)
 8019bd0:	e000      	b.n	8019bd4 <HAL_UART_IRQHandler+0x678>
    return;
 8019bd2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	b02a      	add	sp, #168	@ 0xa8
 8019bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8019bda:	46c0      	nop			@ (mov r8, r8)
 8019bdc:	fffffeff 	.word	0xfffffeff
 8019be0:	fffffedf 	.word	0xfffffedf
 8019be4:	effffffe 	.word	0xeffffffe

08019be8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b082      	sub	sp, #8
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8019bf0:	46c0      	nop			@ (mov r8, r8)
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	b002      	add	sp, #8
 8019bf6:	bd80      	pop	{r7, pc}

08019bf8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b082      	sub	sp, #8
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8019c00:	46c0      	nop			@ (mov r8, r8)
 8019c02:	46bd      	mov	sp, r7
 8019c04:	b002      	add	sp, #8
 8019c06:	bd80      	pop	{r7, pc}

08019c08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b082      	sub	sp, #8
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8019c10:	46c0      	nop			@ (mov r8, r8)
 8019c12:	46bd      	mov	sp, r7
 8019c14:	b002      	add	sp, #8
 8019c16:	bd80      	pop	{r7, pc}

08019c18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b082      	sub	sp, #8
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8019c20:	46c0      	nop			@ (mov r8, r8)
 8019c22:	46bd      	mov	sp, r7
 8019c24:	b002      	add	sp, #8
 8019c26:	bd80      	pop	{r7, pc}

08019c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b082      	sub	sp, #8
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8019c30:	46c0      	nop			@ (mov r8, r8)
 8019c32:	46bd      	mov	sp, r7
 8019c34:	b002      	add	sp, #8
 8019c36:	bd80      	pop	{r7, pc}

08019c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	000a      	movs	r2, r1
 8019c42:	1cbb      	adds	r3, r7, #2
 8019c44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8019c46:	46c0      	nop			@ (mov r8, r8)
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	b002      	add	sp, #8
 8019c4c:	bd80      	pop	{r7, pc}
	...

08019c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019c50:	b5b0      	push	{r4, r5, r7, lr}
 8019c52:	b092      	sub	sp, #72	@ 0x48
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8019c58:	231f      	movs	r3, #31
 8019c5a:	2220      	movs	r2, #32
 8019c5c:	189b      	adds	r3, r3, r2
 8019c5e:	19db      	adds	r3, r3, r7
 8019c60:	2200      	movs	r2, #0
 8019c62:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8019c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	4ac8      	ldr	r2, [pc, #800]	@ (8019f8c <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8019c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c6c:	689a      	ldr	r2, [r3, #8]
 8019c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c70:	691b      	ldr	r3, [r3, #16]
 8019c72:	431a      	orrs	r2, r3
 8019c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c76:	695b      	ldr	r3, [r3, #20]
 8019c78:	431a      	orrs	r2, r3
 8019c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c7c:	69db      	ldr	r3, [r3, #28]
 8019c7e:	4313      	orrs	r3, r2
 8019c80:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8019c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	4ac1      	ldr	r2, [pc, #772]	@ (8019f90 <UART_SetConfig+0x340>)
 8019c8a:	4013      	ands	r3, r2
 8019c8c:	0019      	movs	r1, r3
 8019c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c90:	681a      	ldr	r2, [r3, #0]
 8019c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019c94:	430b      	orrs	r3, r1
 8019c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	685b      	ldr	r3, [r3, #4]
 8019c9e:	4abd      	ldr	r2, [pc, #756]	@ (8019f94 <UART_SetConfig+0x344>)
 8019ca0:	4013      	ands	r3, r2
 8019ca2:	0018      	movs	r0, r3
 8019ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ca6:	68d9      	ldr	r1, [r3, #12]
 8019ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019caa:	681a      	ldr	r2, [r3, #0]
 8019cac:	0003      	movs	r3, r0
 8019cae:	430b      	orrs	r3, r1
 8019cb0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cb4:	699b      	ldr	r3, [r3, #24]
 8019cb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	4ab3      	ldr	r2, [pc, #716]	@ (8019f8c <UART_SetConfig+0x33c>)
 8019cbe:	4293      	cmp	r3, r2
 8019cc0:	d00e      	beq.n	8019ce0 <UART_SetConfig+0x90>
 8019cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	4ab4      	ldr	r2, [pc, #720]	@ (8019f98 <UART_SetConfig+0x348>)
 8019cc8:	4293      	cmp	r3, r2
 8019cca:	d009      	beq.n	8019ce0 <UART_SetConfig+0x90>
 8019ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	4ab2      	ldr	r2, [pc, #712]	@ (8019f9c <UART_SetConfig+0x34c>)
 8019cd2:	4293      	cmp	r3, r2
 8019cd4:	d004      	beq.n	8019ce0 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cd8:	6a1b      	ldr	r3, [r3, #32]
 8019cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019cdc:	4313      	orrs	r3, r2
 8019cde:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	689b      	ldr	r3, [r3, #8]
 8019ce6:	4aae      	ldr	r2, [pc, #696]	@ (8019fa0 <UART_SetConfig+0x350>)
 8019ce8:	4013      	ands	r3, r2
 8019cea:	0019      	movs	r1, r3
 8019cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cee:	681a      	ldr	r2, [r3, #0]
 8019cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019cf2:	430b      	orrs	r3, r1
 8019cf4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8019cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cfc:	220f      	movs	r2, #15
 8019cfe:	4393      	bics	r3, r2
 8019d00:	0018      	movs	r0, r3
 8019d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8019d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d08:	681a      	ldr	r2, [r3, #0]
 8019d0a:	0003      	movs	r3, r0
 8019d0c:	430b      	orrs	r3, r1
 8019d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	4aa3      	ldr	r2, [pc, #652]	@ (8019fa4 <UART_SetConfig+0x354>)
 8019d16:	4293      	cmp	r3, r2
 8019d18:	d102      	bne.n	8019d20 <UART_SetConfig+0xd0>
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d1e:	e033      	b.n	8019d88 <UART_SetConfig+0x138>
 8019d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	4aa0      	ldr	r2, [pc, #640]	@ (8019fa8 <UART_SetConfig+0x358>)
 8019d26:	4293      	cmp	r3, r2
 8019d28:	d102      	bne.n	8019d30 <UART_SetConfig+0xe0>
 8019d2a:	2302      	movs	r3, #2
 8019d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d2e:	e02b      	b.n	8019d88 <UART_SetConfig+0x138>
 8019d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	4a9d      	ldr	r2, [pc, #628]	@ (8019fac <UART_SetConfig+0x35c>)
 8019d36:	4293      	cmp	r3, r2
 8019d38:	d103      	bne.n	8019d42 <UART_SetConfig+0xf2>
 8019d3a:	2380      	movs	r3, #128	@ 0x80
 8019d3c:	025b      	lsls	r3, r3, #9
 8019d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d40:	e022      	b.n	8019d88 <UART_SetConfig+0x138>
 8019d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	4a9a      	ldr	r2, [pc, #616]	@ (8019fb0 <UART_SetConfig+0x360>)
 8019d48:	4293      	cmp	r3, r2
 8019d4a:	d103      	bne.n	8019d54 <UART_SetConfig+0x104>
 8019d4c:	2380      	movs	r3, #128	@ 0x80
 8019d4e:	029b      	lsls	r3, r3, #10
 8019d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d52:	e019      	b.n	8019d88 <UART_SetConfig+0x138>
 8019d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	4a8c      	ldr	r2, [pc, #560]	@ (8019f8c <UART_SetConfig+0x33c>)
 8019d5a:	4293      	cmp	r3, r2
 8019d5c:	d102      	bne.n	8019d64 <UART_SetConfig+0x114>
 8019d5e:	2310      	movs	r3, #16
 8019d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d62:	e011      	b.n	8019d88 <UART_SetConfig+0x138>
 8019d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	4a8b      	ldr	r2, [pc, #556]	@ (8019f98 <UART_SetConfig+0x348>)
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	d102      	bne.n	8019d74 <UART_SetConfig+0x124>
 8019d6e:	2308      	movs	r3, #8
 8019d70:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d72:	e009      	b.n	8019d88 <UART_SetConfig+0x138>
 8019d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	4a88      	ldr	r2, [pc, #544]	@ (8019f9c <UART_SetConfig+0x34c>)
 8019d7a:	4293      	cmp	r3, r2
 8019d7c:	d102      	bne.n	8019d84 <UART_SetConfig+0x134>
 8019d7e:	2304      	movs	r3, #4
 8019d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d82:	e001      	b.n	8019d88 <UART_SetConfig+0x138>
 8019d84:	2300      	movs	r3, #0
 8019d86:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	4a7f      	ldr	r2, [pc, #508]	@ (8019f8c <UART_SetConfig+0x33c>)
 8019d8e:	4293      	cmp	r3, r2
 8019d90:	d00a      	beq.n	8019da8 <UART_SetConfig+0x158>
 8019d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4a80      	ldr	r2, [pc, #512]	@ (8019f98 <UART_SetConfig+0x348>)
 8019d98:	4293      	cmp	r3, r2
 8019d9a:	d005      	beq.n	8019da8 <UART_SetConfig+0x158>
 8019d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	4a7e      	ldr	r2, [pc, #504]	@ (8019f9c <UART_SetConfig+0x34c>)
 8019da2:	4293      	cmp	r3, r2
 8019da4:	d000      	beq.n	8019da8 <UART_SetConfig+0x158>
 8019da6:	e06f      	b.n	8019e88 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019daa:	0018      	movs	r0, r3
 8019dac:	f7fc ff3c 	bl	8016c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8019db0:	0003      	movs	r3, r0
 8019db2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8019db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d100      	bne.n	8019dbc <UART_SetConfig+0x16c>
 8019dba:	e103      	b.n	8019fc4 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019dc0:	4b7c      	ldr	r3, [pc, #496]	@ (8019fb4 <UART_SetConfig+0x364>)
 8019dc2:	0052      	lsls	r2, r2, #1
 8019dc4:	5ad3      	ldrh	r3, [r2, r3]
 8019dc6:	0019      	movs	r1, r3
 8019dc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019dca:	f7e6 f9a5 	bl	8000118 <__udivsi3>
 8019dce:	0003      	movs	r3, r0
 8019dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dd4:	685a      	ldr	r2, [r3, #4]
 8019dd6:	0013      	movs	r3, r2
 8019dd8:	005b      	lsls	r3, r3, #1
 8019dda:	189b      	adds	r3, r3, r2
 8019ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019dde:	429a      	cmp	r2, r3
 8019de0:	d305      	bcc.n	8019dee <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de4:	685b      	ldr	r3, [r3, #4]
 8019de6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019de8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019dea:	429a      	cmp	r2, r3
 8019dec:	d906      	bls.n	8019dfc <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8019dee:	231f      	movs	r3, #31
 8019df0:	2220      	movs	r2, #32
 8019df2:	189b      	adds	r3, r3, r2
 8019df4:	19db      	adds	r3, r3, r7
 8019df6:	2201      	movs	r2, #1
 8019df8:	701a      	strb	r2, [r3, #0]
 8019dfa:	e044      	b.n	8019e86 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dfe:	61bb      	str	r3, [r7, #24]
 8019e00:	2300      	movs	r3, #0
 8019e02:	61fb      	str	r3, [r7, #28]
 8019e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019e08:	4b6a      	ldr	r3, [pc, #424]	@ (8019fb4 <UART_SetConfig+0x364>)
 8019e0a:	0052      	lsls	r2, r2, #1
 8019e0c:	5ad3      	ldrh	r3, [r2, r3]
 8019e0e:	613b      	str	r3, [r7, #16]
 8019e10:	2300      	movs	r3, #0
 8019e12:	617b      	str	r3, [r7, #20]
 8019e14:	693a      	ldr	r2, [r7, #16]
 8019e16:	697b      	ldr	r3, [r7, #20]
 8019e18:	69b8      	ldr	r0, [r7, #24]
 8019e1a:	69f9      	ldr	r1, [r7, #28]
 8019e1c:	f7e6 fb4e 	bl	80004bc <__aeabi_uldivmod>
 8019e20:	0002      	movs	r2, r0
 8019e22:	000b      	movs	r3, r1
 8019e24:	0e11      	lsrs	r1, r2, #24
 8019e26:	021d      	lsls	r5, r3, #8
 8019e28:	430d      	orrs	r5, r1
 8019e2a:	0214      	lsls	r4, r2, #8
 8019e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e2e:	685b      	ldr	r3, [r3, #4]
 8019e30:	085b      	lsrs	r3, r3, #1
 8019e32:	60bb      	str	r3, [r7, #8]
 8019e34:	2300      	movs	r3, #0
 8019e36:	60fb      	str	r3, [r7, #12]
 8019e38:	68b8      	ldr	r0, [r7, #8]
 8019e3a:	68f9      	ldr	r1, [r7, #12]
 8019e3c:	1900      	adds	r0, r0, r4
 8019e3e:	4169      	adcs	r1, r5
 8019e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e42:	685b      	ldr	r3, [r3, #4]
 8019e44:	603b      	str	r3, [r7, #0]
 8019e46:	2300      	movs	r3, #0
 8019e48:	607b      	str	r3, [r7, #4]
 8019e4a:	683a      	ldr	r2, [r7, #0]
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	f7e6 fb35 	bl	80004bc <__aeabi_uldivmod>
 8019e52:	0002      	movs	r2, r0
 8019e54:	000b      	movs	r3, r1
 8019e56:	0013      	movs	r3, r2
 8019e58:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019e5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019e5c:	23c0      	movs	r3, #192	@ 0xc0
 8019e5e:	009b      	lsls	r3, r3, #2
 8019e60:	429a      	cmp	r2, r3
 8019e62:	d309      	bcc.n	8019e78 <UART_SetConfig+0x228>
 8019e64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019e66:	2380      	movs	r3, #128	@ 0x80
 8019e68:	035b      	lsls	r3, r3, #13
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	d204      	bcs.n	8019e78 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8019e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019e74:	60da      	str	r2, [r3, #12]
 8019e76:	e006      	b.n	8019e86 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8019e78:	231f      	movs	r3, #31
 8019e7a:	2220      	movs	r2, #32
 8019e7c:	189b      	adds	r3, r3, r2
 8019e7e:	19db      	adds	r3, r3, r7
 8019e80:	2201      	movs	r2, #1
 8019e82:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8019e84:	e09e      	b.n	8019fc4 <UART_SetConfig+0x374>
 8019e86:	e09d      	b.n	8019fc4 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e8a:	69da      	ldr	r2, [r3, #28]
 8019e8c:	2380      	movs	r3, #128	@ 0x80
 8019e8e:	021b      	lsls	r3, r3, #8
 8019e90:	429a      	cmp	r2, r3
 8019e92:	d14c      	bne.n	8019f2e <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019e96:	0018      	movs	r0, r3
 8019e98:	f7fc fec6 	bl	8016c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8019e9c:	0003      	movs	r3, r0
 8019e9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d100      	bne.n	8019ea8 <UART_SetConfig+0x258>
 8019ea6:	e08d      	b.n	8019fc4 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019eac:	4b41      	ldr	r3, [pc, #260]	@ (8019fb4 <UART_SetConfig+0x364>)
 8019eae:	0052      	lsls	r2, r2, #1
 8019eb0:	5ad3      	ldrh	r3, [r2, r3]
 8019eb2:	0019      	movs	r1, r3
 8019eb4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019eb6:	f7e6 f92f 	bl	8000118 <__udivsi3>
 8019eba:	0003      	movs	r3, r0
 8019ebc:	005a      	lsls	r2, r3, #1
 8019ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ec0:	685b      	ldr	r3, [r3, #4]
 8019ec2:	085b      	lsrs	r3, r3, #1
 8019ec4:	18d2      	adds	r2, r2, r3
 8019ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ec8:	685b      	ldr	r3, [r3, #4]
 8019eca:	0019      	movs	r1, r3
 8019ecc:	0010      	movs	r0, r2
 8019ece:	f7e6 f923 	bl	8000118 <__udivsi3>
 8019ed2:	0003      	movs	r3, r0
 8019ed4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ed8:	2b0f      	cmp	r3, #15
 8019eda:	d921      	bls.n	8019f20 <UART_SetConfig+0x2d0>
 8019edc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019ede:	2380      	movs	r3, #128	@ 0x80
 8019ee0:	025b      	lsls	r3, r3, #9
 8019ee2:	429a      	cmp	r2, r3
 8019ee4:	d21c      	bcs.n	8019f20 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ee8:	b29a      	uxth	r2, r3
 8019eea:	2012      	movs	r0, #18
 8019eec:	2420      	movs	r4, #32
 8019eee:	1903      	adds	r3, r0, r4
 8019ef0:	19db      	adds	r3, r3, r7
 8019ef2:	210f      	movs	r1, #15
 8019ef4:	438a      	bics	r2, r1
 8019ef6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019efa:	085b      	lsrs	r3, r3, #1
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	2207      	movs	r2, #7
 8019f00:	4013      	ands	r3, r2
 8019f02:	b299      	uxth	r1, r3
 8019f04:	1903      	adds	r3, r0, r4
 8019f06:	19db      	adds	r3, r3, r7
 8019f08:	1902      	adds	r2, r0, r4
 8019f0a:	19d2      	adds	r2, r2, r7
 8019f0c:	8812      	ldrh	r2, [r2, #0]
 8019f0e:	430a      	orrs	r2, r1
 8019f10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8019f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	1902      	adds	r2, r0, r4
 8019f18:	19d2      	adds	r2, r2, r7
 8019f1a:	8812      	ldrh	r2, [r2, #0]
 8019f1c:	60da      	str	r2, [r3, #12]
 8019f1e:	e051      	b.n	8019fc4 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8019f20:	231f      	movs	r3, #31
 8019f22:	2220      	movs	r2, #32
 8019f24:	189b      	adds	r3, r3, r2
 8019f26:	19db      	adds	r3, r3, r7
 8019f28:	2201      	movs	r2, #1
 8019f2a:	701a      	strb	r2, [r3, #0]
 8019f2c:	e04a      	b.n	8019fc4 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8019f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019f30:	0018      	movs	r0, r3
 8019f32:	f7fc fe79 	bl	8016c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8019f36:	0003      	movs	r3, r0
 8019f38:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8019f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d041      	beq.n	8019fc4 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019f44:	4b1b      	ldr	r3, [pc, #108]	@ (8019fb4 <UART_SetConfig+0x364>)
 8019f46:	0052      	lsls	r2, r2, #1
 8019f48:	5ad3      	ldrh	r3, [r2, r3]
 8019f4a:	0019      	movs	r1, r3
 8019f4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019f4e:	f7e6 f8e3 	bl	8000118 <__udivsi3>
 8019f52:	0003      	movs	r3, r0
 8019f54:	001a      	movs	r2, r3
 8019f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f58:	685b      	ldr	r3, [r3, #4]
 8019f5a:	085b      	lsrs	r3, r3, #1
 8019f5c:	18d2      	adds	r2, r2, r3
 8019f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f60:	685b      	ldr	r3, [r3, #4]
 8019f62:	0019      	movs	r1, r3
 8019f64:	0010      	movs	r0, r2
 8019f66:	f7e6 f8d7 	bl	8000118 <__udivsi3>
 8019f6a:	0003      	movs	r3, r0
 8019f6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f70:	2b0f      	cmp	r3, #15
 8019f72:	d921      	bls.n	8019fb8 <UART_SetConfig+0x368>
 8019f74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019f76:	2380      	movs	r3, #128	@ 0x80
 8019f78:	025b      	lsls	r3, r3, #9
 8019f7a:	429a      	cmp	r2, r3
 8019f7c:	d21c      	bcs.n	8019fb8 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f80:	b29a      	uxth	r2, r3
 8019f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	60da      	str	r2, [r3, #12]
 8019f88:	e01c      	b.n	8019fc4 <UART_SetConfig+0x374>
 8019f8a:	46c0      	nop			@ (mov r8, r8)
 8019f8c:	40008000 	.word	0x40008000
 8019f90:	cfff69f3 	.word	0xcfff69f3
 8019f94:	ffffcfff 	.word	0xffffcfff
 8019f98:	40008400 	.word	0x40008400
 8019f9c:	40008c00 	.word	0x40008c00
 8019fa0:	11fff4ff 	.word	0x11fff4ff
 8019fa4:	40013800 	.word	0x40013800
 8019fa8:	40004400 	.word	0x40004400
 8019fac:	40004800 	.word	0x40004800
 8019fb0:	40004c00 	.word	0x40004c00
 8019fb4:	0801b3ec 	.word	0x0801b3ec
      }
      else
      {
        ret = HAL_ERROR;
 8019fb8:	231f      	movs	r3, #31
 8019fba:	2220      	movs	r2, #32
 8019fbc:	189b      	adds	r3, r3, r2
 8019fbe:	19db      	adds	r3, r3, r7
 8019fc0:	2201      	movs	r2, #1
 8019fc2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fc6:	226a      	movs	r2, #106	@ 0x6a
 8019fc8:	2101      	movs	r1, #1
 8019fca:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8019fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fce:	2268      	movs	r2, #104	@ 0x68
 8019fd0:	2101      	movs	r1, #1
 8019fd2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fdc:	2200      	movs	r2, #0
 8019fde:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019fe0:	231f      	movs	r3, #31
 8019fe2:	2220      	movs	r2, #32
 8019fe4:	189b      	adds	r3, r3, r2
 8019fe6:	19db      	adds	r3, r3, r7
 8019fe8:	781b      	ldrb	r3, [r3, #0]
}
 8019fea:	0018      	movs	r0, r3
 8019fec:	46bd      	mov	sp, r7
 8019fee:	b012      	add	sp, #72	@ 0x48
 8019ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8019ff2:	46c0      	nop			@ (mov r8, r8)

08019ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b082      	sub	sp, #8
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a000:	2208      	movs	r2, #8
 801a002:	4013      	ands	r3, r2
 801a004:	d00b      	beq.n	801a01e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	685b      	ldr	r3, [r3, #4]
 801a00c:	4a4a      	ldr	r2, [pc, #296]	@ (801a138 <UART_AdvFeatureConfig+0x144>)
 801a00e:	4013      	ands	r3, r2
 801a010:	0019      	movs	r1, r3
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	430a      	orrs	r2, r1
 801a01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a022:	2201      	movs	r2, #1
 801a024:	4013      	ands	r3, r2
 801a026:	d00b      	beq.n	801a040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	685b      	ldr	r3, [r3, #4]
 801a02e:	4a43      	ldr	r2, [pc, #268]	@ (801a13c <UART_AdvFeatureConfig+0x148>)
 801a030:	4013      	ands	r3, r2
 801a032:	0019      	movs	r1, r3
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	430a      	orrs	r2, r1
 801a03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a044:	2202      	movs	r2, #2
 801a046:	4013      	ands	r3, r2
 801a048:	d00b      	beq.n	801a062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	685b      	ldr	r3, [r3, #4]
 801a050:	4a3b      	ldr	r2, [pc, #236]	@ (801a140 <UART_AdvFeatureConfig+0x14c>)
 801a052:	4013      	ands	r3, r2
 801a054:	0019      	movs	r1, r3
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	430a      	orrs	r2, r1
 801a060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a066:	2204      	movs	r2, #4
 801a068:	4013      	ands	r3, r2
 801a06a:	d00b      	beq.n	801a084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	685b      	ldr	r3, [r3, #4]
 801a072:	4a34      	ldr	r2, [pc, #208]	@ (801a144 <UART_AdvFeatureConfig+0x150>)
 801a074:	4013      	ands	r3, r2
 801a076:	0019      	movs	r1, r3
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	430a      	orrs	r2, r1
 801a082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a088:	2210      	movs	r2, #16
 801a08a:	4013      	ands	r3, r2
 801a08c:	d00b      	beq.n	801a0a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	689b      	ldr	r3, [r3, #8]
 801a094:	4a2c      	ldr	r2, [pc, #176]	@ (801a148 <UART_AdvFeatureConfig+0x154>)
 801a096:	4013      	ands	r3, r2
 801a098:	0019      	movs	r1, r3
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	430a      	orrs	r2, r1
 801a0a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a0aa:	2220      	movs	r2, #32
 801a0ac:	4013      	ands	r3, r2
 801a0ae:	d00b      	beq.n	801a0c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	689b      	ldr	r3, [r3, #8]
 801a0b6:	4a25      	ldr	r2, [pc, #148]	@ (801a14c <UART_AdvFeatureConfig+0x158>)
 801a0b8:	4013      	ands	r3, r2
 801a0ba:	0019      	movs	r1, r3
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	430a      	orrs	r2, r1
 801a0c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a0cc:	2240      	movs	r2, #64	@ 0x40
 801a0ce:	4013      	ands	r3, r2
 801a0d0:	d01d      	beq.n	801a10e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	685b      	ldr	r3, [r3, #4]
 801a0d8:	4a1d      	ldr	r2, [pc, #116]	@ (801a150 <UART_AdvFeatureConfig+0x15c>)
 801a0da:	4013      	ands	r3, r2
 801a0dc:	0019      	movs	r1, r3
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	430a      	orrs	r2, r1
 801a0e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a0ee:	2380      	movs	r3, #128	@ 0x80
 801a0f0:	035b      	lsls	r3, r3, #13
 801a0f2:	429a      	cmp	r2, r3
 801a0f4:	d10b      	bne.n	801a10e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	4a15      	ldr	r2, [pc, #84]	@ (801a154 <UART_AdvFeatureConfig+0x160>)
 801a0fe:	4013      	ands	r3, r2
 801a100:	0019      	movs	r1, r3
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	430a      	orrs	r2, r1
 801a10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a112:	2280      	movs	r2, #128	@ 0x80
 801a114:	4013      	ands	r3, r2
 801a116:	d00b      	beq.n	801a130 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	685b      	ldr	r3, [r3, #4]
 801a11e:	4a0e      	ldr	r2, [pc, #56]	@ (801a158 <UART_AdvFeatureConfig+0x164>)
 801a120:	4013      	ands	r3, r2
 801a122:	0019      	movs	r1, r3
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	430a      	orrs	r2, r1
 801a12e:	605a      	str	r2, [r3, #4]
  }
}
 801a130:	46c0      	nop			@ (mov r8, r8)
 801a132:	46bd      	mov	sp, r7
 801a134:	b002      	add	sp, #8
 801a136:	bd80      	pop	{r7, pc}
 801a138:	ffff7fff 	.word	0xffff7fff
 801a13c:	fffdffff 	.word	0xfffdffff
 801a140:	fffeffff 	.word	0xfffeffff
 801a144:	fffbffff 	.word	0xfffbffff
 801a148:	ffffefff 	.word	0xffffefff
 801a14c:	ffffdfff 	.word	0xffffdfff
 801a150:	ffefffff 	.word	0xffefffff
 801a154:	ff9fffff 	.word	0xff9fffff
 801a158:	fff7ffff 	.word	0xfff7ffff

0801a15c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b092      	sub	sp, #72	@ 0x48
 801a160:	af02      	add	r7, sp, #8
 801a162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	2290      	movs	r2, #144	@ 0x90
 801a168:	2100      	movs	r1, #0
 801a16a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a16c:	f7f7 f802 	bl	8011174 <HAL_GetTick>
 801a170:	0003      	movs	r3, r0
 801a172:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	2208      	movs	r2, #8
 801a17c:	4013      	ands	r3, r2
 801a17e:	2b08      	cmp	r3, #8
 801a180:	d12d      	bne.n	801a1de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a184:	2280      	movs	r2, #128	@ 0x80
 801a186:	0391      	lsls	r1, r2, #14
 801a188:	6878      	ldr	r0, [r7, #4]
 801a18a:	4a47      	ldr	r2, [pc, #284]	@ (801a2a8 <UART_CheckIdleState+0x14c>)
 801a18c:	9200      	str	r2, [sp, #0]
 801a18e:	2200      	movs	r2, #0
 801a190:	f000 f88e 	bl	801a2b0 <UART_WaitOnFlagUntilTimeout>
 801a194:	1e03      	subs	r3, r0, #0
 801a196:	d022      	beq.n	801a1de <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a198:	f3ef 8310 	mrs	r3, PRIMASK
 801a19c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801a1a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1a8:	f383 8810 	msr	PRIMASK, r3
}
 801a1ac:	46c0      	nop			@ (mov r8, r8)
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	681a      	ldr	r2, [r3, #0]
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	2180      	movs	r1, #128	@ 0x80
 801a1ba:	438a      	bics	r2, r1
 801a1bc:	601a      	str	r2, [r3, #0]
 801a1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1c4:	f383 8810 	msr	PRIMASK, r3
}
 801a1c8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	2288      	movs	r2, #136	@ 0x88
 801a1ce:	2120      	movs	r1, #32
 801a1d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2284      	movs	r2, #132	@ 0x84
 801a1d6:	2100      	movs	r1, #0
 801a1d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a1da:	2303      	movs	r3, #3
 801a1dc:	e060      	b.n	801a2a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	2204      	movs	r2, #4
 801a1e6:	4013      	ands	r3, r2
 801a1e8:	2b04      	cmp	r3, #4
 801a1ea:	d146      	bne.n	801a27a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a1ee:	2280      	movs	r2, #128	@ 0x80
 801a1f0:	03d1      	lsls	r1, r2, #15
 801a1f2:	6878      	ldr	r0, [r7, #4]
 801a1f4:	4a2c      	ldr	r2, [pc, #176]	@ (801a2a8 <UART_CheckIdleState+0x14c>)
 801a1f6:	9200      	str	r2, [sp, #0]
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	f000 f859 	bl	801a2b0 <UART_WaitOnFlagUntilTimeout>
 801a1fe:	1e03      	subs	r3, r0, #0
 801a200:	d03b      	beq.n	801a27a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a202:	f3ef 8310 	mrs	r3, PRIMASK
 801a206:	60fb      	str	r3, [r7, #12]
  return(result);
 801a208:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a20a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a20c:	2301      	movs	r3, #1
 801a20e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a210:	693b      	ldr	r3, [r7, #16]
 801a212:	f383 8810 	msr	PRIMASK, r3
}
 801a216:	46c0      	nop			@ (mov r8, r8)
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	681a      	ldr	r2, [r3, #0]
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	4922      	ldr	r1, [pc, #136]	@ (801a2ac <UART_CheckIdleState+0x150>)
 801a224:	400a      	ands	r2, r1
 801a226:	601a      	str	r2, [r3, #0]
 801a228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a22a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	f383 8810 	msr	PRIMASK, r3
}
 801a232:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a234:	f3ef 8310 	mrs	r3, PRIMASK
 801a238:	61bb      	str	r3, [r7, #24]
  return(result);
 801a23a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a23c:	633b      	str	r3, [r7, #48]	@ 0x30
 801a23e:	2301      	movs	r3, #1
 801a240:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a242:	69fb      	ldr	r3, [r7, #28]
 801a244:	f383 8810 	msr	PRIMASK, r3
}
 801a248:	46c0      	nop			@ (mov r8, r8)
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	689a      	ldr	r2, [r3, #8]
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	2101      	movs	r1, #1
 801a256:	438a      	bics	r2, r1
 801a258:	609a      	str	r2, [r3, #8]
 801a25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a25c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a25e:	6a3b      	ldr	r3, [r7, #32]
 801a260:	f383 8810 	msr	PRIMASK, r3
}
 801a264:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	228c      	movs	r2, #140	@ 0x8c
 801a26a:	2120      	movs	r1, #32
 801a26c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	2284      	movs	r2, #132	@ 0x84
 801a272:	2100      	movs	r1, #0
 801a274:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a276:	2303      	movs	r3, #3
 801a278:	e012      	b.n	801a2a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	2288      	movs	r2, #136	@ 0x88
 801a27e:	2120      	movs	r1, #32
 801a280:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	228c      	movs	r2, #140	@ 0x8c
 801a286:	2120      	movs	r1, #32
 801a288:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2200      	movs	r2, #0
 801a28e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	2200      	movs	r2, #0
 801a294:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	2284      	movs	r2, #132	@ 0x84
 801a29a:	2100      	movs	r1, #0
 801a29c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a29e:	2300      	movs	r3, #0
}
 801a2a0:	0018      	movs	r0, r3
 801a2a2:	46bd      	mov	sp, r7
 801a2a4:	b010      	add	sp, #64	@ 0x40
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	01ffffff 	.word	0x01ffffff
 801a2ac:	fffffedf 	.word	0xfffffedf

0801a2b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b084      	sub	sp, #16
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	60f8      	str	r0, [r7, #12]
 801a2b8:	60b9      	str	r1, [r7, #8]
 801a2ba:	603b      	str	r3, [r7, #0]
 801a2bc:	1dfb      	adds	r3, r7, #7
 801a2be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a2c0:	e051      	b.n	801a366 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a2c2:	69bb      	ldr	r3, [r7, #24]
 801a2c4:	3301      	adds	r3, #1
 801a2c6:	d04e      	beq.n	801a366 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a2c8:	f7f6 ff54 	bl	8011174 <HAL_GetTick>
 801a2cc:	0002      	movs	r2, r0
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	1ad3      	subs	r3, r2, r3
 801a2d2:	69ba      	ldr	r2, [r7, #24]
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	d302      	bcc.n	801a2de <UART_WaitOnFlagUntilTimeout+0x2e>
 801a2d8:	69bb      	ldr	r3, [r7, #24]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d101      	bne.n	801a2e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801a2de:	2303      	movs	r3, #3
 801a2e0:	e051      	b.n	801a386 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	2204      	movs	r2, #4
 801a2ea:	4013      	ands	r3, r2
 801a2ec:	d03b      	beq.n	801a366 <UART_WaitOnFlagUntilTimeout+0xb6>
 801a2ee:	68bb      	ldr	r3, [r7, #8]
 801a2f0:	2b80      	cmp	r3, #128	@ 0x80
 801a2f2:	d038      	beq.n	801a366 <UART_WaitOnFlagUntilTimeout+0xb6>
 801a2f4:	68bb      	ldr	r3, [r7, #8]
 801a2f6:	2b40      	cmp	r3, #64	@ 0x40
 801a2f8:	d035      	beq.n	801a366 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	69db      	ldr	r3, [r3, #28]
 801a300:	2208      	movs	r2, #8
 801a302:	4013      	ands	r3, r2
 801a304:	2b08      	cmp	r3, #8
 801a306:	d111      	bne.n	801a32c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	2208      	movs	r2, #8
 801a30e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	0018      	movs	r0, r3
 801a314:	f000 f922 	bl	801a55c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	2290      	movs	r2, #144	@ 0x90
 801a31c:	2108      	movs	r1, #8
 801a31e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	2284      	movs	r2, #132	@ 0x84
 801a324:	2100      	movs	r1, #0
 801a326:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801a328:	2301      	movs	r3, #1
 801a32a:	e02c      	b.n	801a386 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	69da      	ldr	r2, [r3, #28]
 801a332:	2380      	movs	r3, #128	@ 0x80
 801a334:	011b      	lsls	r3, r3, #4
 801a336:	401a      	ands	r2, r3
 801a338:	2380      	movs	r3, #128	@ 0x80
 801a33a:	011b      	lsls	r3, r3, #4
 801a33c:	429a      	cmp	r2, r3
 801a33e:	d112      	bne.n	801a366 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	2280      	movs	r2, #128	@ 0x80
 801a346:	0112      	lsls	r2, r2, #4
 801a348:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	0018      	movs	r0, r3
 801a34e:	f000 f905 	bl	801a55c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	2290      	movs	r2, #144	@ 0x90
 801a356:	2120      	movs	r1, #32
 801a358:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	2284      	movs	r2, #132	@ 0x84
 801a35e:	2100      	movs	r1, #0
 801a360:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801a362:	2303      	movs	r3, #3
 801a364:	e00f      	b.n	801a386 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	69db      	ldr	r3, [r3, #28]
 801a36c:	68ba      	ldr	r2, [r7, #8]
 801a36e:	4013      	ands	r3, r2
 801a370:	68ba      	ldr	r2, [r7, #8]
 801a372:	1ad3      	subs	r3, r2, r3
 801a374:	425a      	negs	r2, r3
 801a376:	4153      	adcs	r3, r2
 801a378:	b2db      	uxtb	r3, r3
 801a37a:	001a      	movs	r2, r3
 801a37c:	1dfb      	adds	r3, r7, #7
 801a37e:	781b      	ldrb	r3, [r3, #0]
 801a380:	429a      	cmp	r2, r3
 801a382:	d09e      	beq.n	801a2c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a384:	2300      	movs	r3, #0
}
 801a386:	0018      	movs	r0, r3
 801a388:	46bd      	mov	sp, r7
 801a38a:	b004      	add	sp, #16
 801a38c:	bd80      	pop	{r7, pc}
	...

0801a390 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b090      	sub	sp, #64	@ 0x40
 801a394:	af00      	add	r7, sp, #0
 801a396:	60f8      	str	r0, [r7, #12]
 801a398:	60b9      	str	r1, [r7, #8]
 801a39a:	1dbb      	adds	r3, r7, #6
 801a39c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	68ba      	ldr	r2, [r7, #8]
 801a3a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	1dba      	adds	r2, r7, #6
 801a3a8:	215c      	movs	r1, #92	@ 0x5c
 801a3aa:	8812      	ldrh	r2, [r2, #0]
 801a3ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	2290      	movs	r2, #144	@ 0x90
 801a3b2:	2100      	movs	r1, #0
 801a3b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	228c      	movs	r2, #140	@ 0x8c
 801a3ba:	2122      	movs	r1, #34	@ 0x22
 801a3bc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	2280      	movs	r2, #128	@ 0x80
 801a3c2:	589b      	ldr	r3, [r3, r2]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d02d      	beq.n	801a424 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	2280      	movs	r2, #128	@ 0x80
 801a3cc:	589b      	ldr	r3, [r3, r2]
 801a3ce:	4a40      	ldr	r2, [pc, #256]	@ (801a4d0 <UART_Start_Receive_DMA+0x140>)
 801a3d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	2280      	movs	r2, #128	@ 0x80
 801a3d6:	589b      	ldr	r3, [r3, r2]
 801a3d8:	4a3e      	ldr	r2, [pc, #248]	@ (801a4d4 <UART_Start_Receive_DMA+0x144>)
 801a3da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	2280      	movs	r2, #128	@ 0x80
 801a3e0:	589b      	ldr	r3, [r3, r2]
 801a3e2:	4a3d      	ldr	r2, [pc, #244]	@ (801a4d8 <UART_Start_Receive_DMA+0x148>)
 801a3e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	2280      	movs	r2, #128	@ 0x80
 801a3ea:	589b      	ldr	r3, [r3, r2]
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	2280      	movs	r2, #128	@ 0x80
 801a3f4:	5898      	ldr	r0, [r3, r2]
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	3324      	adds	r3, #36	@ 0x24
 801a3fc:	0019      	movs	r1, r3
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a402:	001a      	movs	r2, r3
 801a404:	1dbb      	adds	r3, r7, #6
 801a406:	881b      	ldrh	r3, [r3, #0]
 801a408:	f7f8 fa80 	bl	801290c <HAL_DMA_Start_IT>
 801a40c:	1e03      	subs	r3, r0, #0
 801a40e:	d009      	beq.n	801a424 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	2290      	movs	r2, #144	@ 0x90
 801a414:	2110      	movs	r1, #16
 801a416:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	228c      	movs	r2, #140	@ 0x8c
 801a41c:	2120      	movs	r1, #32
 801a41e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801a420:	2301      	movs	r3, #1
 801a422:	e050      	b.n	801a4c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	691b      	ldr	r3, [r3, #16]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d019      	beq.n	801a460 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a42c:	f3ef 8310 	mrs	r3, PRIMASK
 801a430:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801a432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a436:	2301      	movs	r3, #1
 801a438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a43c:	f383 8810 	msr	PRIMASK, r3
}
 801a440:	46c0      	nop			@ (mov r8, r8)
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	681a      	ldr	r2, [r3, #0]
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	2180      	movs	r1, #128	@ 0x80
 801a44e:	0049      	lsls	r1, r1, #1
 801a450:	430a      	orrs	r2, r1
 801a452:	601a      	str	r2, [r3, #0]
 801a454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a456:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a45a:	f383 8810 	msr	PRIMASK, r3
}
 801a45e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a460:	f3ef 8310 	mrs	r3, PRIMASK
 801a464:	613b      	str	r3, [r7, #16]
  return(result);
 801a466:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a468:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a46a:	2301      	movs	r3, #1
 801a46c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a46e:	697b      	ldr	r3, [r7, #20]
 801a470:	f383 8810 	msr	PRIMASK, r3
}
 801a474:	46c0      	nop			@ (mov r8, r8)
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	689a      	ldr	r2, [r3, #8]
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	2101      	movs	r1, #1
 801a482:	430a      	orrs	r2, r1
 801a484:	609a      	str	r2, [r3, #8]
 801a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a488:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a48a:	69bb      	ldr	r3, [r7, #24]
 801a48c:	f383 8810 	msr	PRIMASK, r3
}
 801a490:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a492:	f3ef 8310 	mrs	r3, PRIMASK
 801a496:	61fb      	str	r3, [r7, #28]
  return(result);
 801a498:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a49a:	637b      	str	r3, [r7, #52]	@ 0x34
 801a49c:	2301      	movs	r3, #1
 801a49e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4a0:	6a3b      	ldr	r3, [r7, #32]
 801a4a2:	f383 8810 	msr	PRIMASK, r3
}
 801a4a6:	46c0      	nop			@ (mov r8, r8)
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	689a      	ldr	r2, [r3, #8]
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	2140      	movs	r1, #64	@ 0x40
 801a4b4:	430a      	orrs	r2, r1
 801a4b6:	609a      	str	r2, [r3, #8]
 801a4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4be:	f383 8810 	msr	PRIMASK, r3
}
 801a4c2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801a4c4:	2300      	movs	r3, #0
}
 801a4c6:	0018      	movs	r0, r3
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	b010      	add	sp, #64	@ 0x40
 801a4cc:	bd80      	pop	{r7, pc}
 801a4ce:	46c0      	nop			@ (mov r8, r8)
 801a4d0:	0801a6e1 	.word	0x0801a6e1
 801a4d4:	0801a811 	.word	0x0801a811
 801a4d8:	0801a853 	.word	0x0801a853

0801a4dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	b08a      	sub	sp, #40	@ 0x28
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a4e4:	f3ef 8310 	mrs	r3, PRIMASK
 801a4e8:	60bb      	str	r3, [r7, #8]
  return(result);
 801a4ea:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801a4ec:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	f383 8810 	msr	PRIMASK, r3
}
 801a4f8:	46c0      	nop			@ (mov r8, r8)
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	681a      	ldr	r2, [r3, #0]
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	21c0      	movs	r1, #192	@ 0xc0
 801a506:	438a      	bics	r2, r1
 801a508:	601a      	str	r2, [r3, #0]
 801a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a50c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a50e:	693b      	ldr	r3, [r7, #16]
 801a510:	f383 8810 	msr	PRIMASK, r3
}
 801a514:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a516:	f3ef 8310 	mrs	r3, PRIMASK
 801a51a:	617b      	str	r3, [r7, #20]
  return(result);
 801a51c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801a51e:	623b      	str	r3, [r7, #32]
 801a520:	2301      	movs	r3, #1
 801a522:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a524:	69bb      	ldr	r3, [r7, #24]
 801a526:	f383 8810 	msr	PRIMASK, r3
}
 801a52a:	46c0      	nop			@ (mov r8, r8)
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	689a      	ldr	r2, [r3, #8]
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	4908      	ldr	r1, [pc, #32]	@ (801a558 <UART_EndTxTransfer+0x7c>)
 801a538:	400a      	ands	r2, r1
 801a53a:	609a      	str	r2, [r3, #8]
 801a53c:	6a3b      	ldr	r3, [r7, #32]
 801a53e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a540:	69fb      	ldr	r3, [r7, #28]
 801a542:	f383 8810 	msr	PRIMASK, r3
}
 801a546:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	2288      	movs	r2, #136	@ 0x88
 801a54c:	2120      	movs	r1, #32
 801a54e:	5099      	str	r1, [r3, r2]
}
 801a550:	46c0      	nop			@ (mov r8, r8)
 801a552:	46bd      	mov	sp, r7
 801a554:	b00a      	add	sp, #40	@ 0x28
 801a556:	bd80      	pop	{r7, pc}
 801a558:	ff7fffff 	.word	0xff7fffff

0801a55c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b08e      	sub	sp, #56	@ 0x38
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a564:	f3ef 8310 	mrs	r3, PRIMASK
 801a568:	617b      	str	r3, [r7, #20]
  return(result);
 801a56a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a56c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a56e:	2301      	movs	r3, #1
 801a570:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a572:	69bb      	ldr	r3, [r7, #24]
 801a574:	f383 8810 	msr	PRIMASK, r3
}
 801a578:	46c0      	nop			@ (mov r8, r8)
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	681a      	ldr	r2, [r3, #0]
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	4926      	ldr	r1, [pc, #152]	@ (801a620 <UART_EndRxTransfer+0xc4>)
 801a586:	400a      	ands	r2, r1
 801a588:	601a      	str	r2, [r3, #0]
 801a58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a58c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a58e:	69fb      	ldr	r3, [r7, #28]
 801a590:	f383 8810 	msr	PRIMASK, r3
}
 801a594:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a596:	f3ef 8310 	mrs	r3, PRIMASK
 801a59a:	623b      	str	r3, [r7, #32]
  return(result);
 801a59c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a59e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5a6:	f383 8810 	msr	PRIMASK, r3
}
 801a5aa:	46c0      	nop			@ (mov r8, r8)
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	689a      	ldr	r2, [r3, #8]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	491b      	ldr	r1, [pc, #108]	@ (801a624 <UART_EndRxTransfer+0xc8>)
 801a5b8:	400a      	ands	r2, r1
 801a5ba:	609a      	str	r2, [r3, #8]
 801a5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5c2:	f383 8810 	msr	PRIMASK, r3
}
 801a5c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5cc:	2b01      	cmp	r3, #1
 801a5ce:	d118      	bne.n	801a602 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a5d0:	f3ef 8310 	mrs	r3, PRIMASK
 801a5d4:	60bb      	str	r3, [r7, #8]
  return(result);
 801a5d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a5da:	2301      	movs	r3, #1
 801a5dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	f383 8810 	msr	PRIMASK, r3
}
 801a5e4:	46c0      	nop			@ (mov r8, r8)
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	681a      	ldr	r2, [r3, #0]
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	2110      	movs	r1, #16
 801a5f2:	438a      	bics	r2, r1
 801a5f4:	601a      	str	r2, [r3, #0]
 801a5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5fa:	693b      	ldr	r3, [r7, #16]
 801a5fc:	f383 8810 	msr	PRIMASK, r3
}
 801a600:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	228c      	movs	r2, #140	@ 0x8c
 801a606:	2120      	movs	r1, #32
 801a608:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	2200      	movs	r2, #0
 801a60e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	2200      	movs	r2, #0
 801a614:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801a616:	46c0      	nop			@ (mov r8, r8)
 801a618:	46bd      	mov	sp, r7
 801a61a:	b00e      	add	sp, #56	@ 0x38
 801a61c:	bd80      	pop	{r7, pc}
 801a61e:	46c0      	nop			@ (mov r8, r8)
 801a620:	fffffedf 	.word	0xfffffedf
 801a624:	effffffe 	.word	0xeffffffe

0801a628 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b08c      	sub	sp, #48	@ 0x30
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a634:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	2220      	movs	r2, #32
 801a63e:	4013      	ands	r3, r2
 801a640:	d135      	bne.n	801a6ae <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801a642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a644:	2256      	movs	r2, #86	@ 0x56
 801a646:	2100      	movs	r1, #0
 801a648:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a64a:	f3ef 8310 	mrs	r3, PRIMASK
 801a64e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a650:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801a652:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a654:	2301      	movs	r3, #1
 801a656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a658:	693b      	ldr	r3, [r7, #16]
 801a65a:	f383 8810 	msr	PRIMASK, r3
}
 801a65e:	46c0      	nop			@ (mov r8, r8)
 801a660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	689a      	ldr	r2, [r3, #8]
 801a666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	2180      	movs	r1, #128	@ 0x80
 801a66c:	438a      	bics	r2, r1
 801a66e:	609a      	str	r2, [r3, #8]
 801a670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a672:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	f383 8810 	msr	PRIMASK, r3
}
 801a67a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a67c:	f3ef 8310 	mrs	r3, PRIMASK
 801a680:	61bb      	str	r3, [r7, #24]
  return(result);
 801a682:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a684:	627b      	str	r3, [r7, #36]	@ 0x24
 801a686:	2301      	movs	r3, #1
 801a688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a68a:	69fb      	ldr	r3, [r7, #28]
 801a68c:	f383 8810 	msr	PRIMASK, r3
}
 801a690:	46c0      	nop			@ (mov r8, r8)
 801a692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	681a      	ldr	r2, [r3, #0]
 801a698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	2140      	movs	r1, #64	@ 0x40
 801a69e:	430a      	orrs	r2, r1
 801a6a0:	601a      	str	r2, [r3, #0]
 801a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6a6:	6a3b      	ldr	r3, [r7, #32]
 801a6a8:	f383 8810 	msr	PRIMASK, r3
}
 801a6ac:	e004      	b.n	801a6b8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 801a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6b0:	0018      	movs	r0, r3
 801a6b2:	f7ff fa99 	bl	8019be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a6b6:	46c0      	nop			@ (mov r8, r8)
 801a6b8:	46c0      	nop			@ (mov r8, r8)
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	b00c      	add	sp, #48	@ 0x30
 801a6be:	bd80      	pop	{r7, pc}

0801a6c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b084      	sub	sp, #16
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	0018      	movs	r0, r3
 801a6d2:	f7ff fa91 	bl	8019bf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a6d6:	46c0      	nop			@ (mov r8, r8)
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	b004      	add	sp, #16
 801a6dc:	bd80      	pop	{r7, pc}
	...

0801a6e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b094      	sub	sp, #80	@ 0x50
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	2220      	movs	r2, #32
 801a6f6:	4013      	ands	r3, r2
 801a6f8:	d16f      	bne.n	801a7da <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801a6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6fc:	225e      	movs	r2, #94	@ 0x5e
 801a6fe:	2100      	movs	r1, #0
 801a700:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a702:	f3ef 8310 	mrs	r3, PRIMASK
 801a706:	61bb      	str	r3, [r7, #24]
  return(result);
 801a708:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a70a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a70c:	2301      	movs	r3, #1
 801a70e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a710:	69fb      	ldr	r3, [r7, #28]
 801a712:	f383 8810 	msr	PRIMASK, r3
}
 801a716:	46c0      	nop			@ (mov r8, r8)
 801a718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	681a      	ldr	r2, [r3, #0]
 801a71e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	493a      	ldr	r1, [pc, #232]	@ (801a80c <UART_DMAReceiveCplt+0x12c>)
 801a724:	400a      	ands	r2, r1
 801a726:	601a      	str	r2, [r3, #0]
 801a728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a72a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a72c:	6a3b      	ldr	r3, [r7, #32]
 801a72e:	f383 8810 	msr	PRIMASK, r3
}
 801a732:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a734:	f3ef 8310 	mrs	r3, PRIMASK
 801a738:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a73c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a73e:	2301      	movs	r3, #1
 801a740:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a744:	f383 8810 	msr	PRIMASK, r3
}
 801a748:	46c0      	nop			@ (mov r8, r8)
 801a74a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	689a      	ldr	r2, [r3, #8]
 801a750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	2101      	movs	r1, #1
 801a756:	438a      	bics	r2, r1
 801a758:	609a      	str	r2, [r3, #8]
 801a75a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a760:	f383 8810 	msr	PRIMASK, r3
}
 801a764:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a766:	f3ef 8310 	mrs	r3, PRIMASK
 801a76a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a76e:	643b      	str	r3, [r7, #64]	@ 0x40
 801a770:	2301      	movs	r3, #1
 801a772:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a776:	f383 8810 	msr	PRIMASK, r3
}
 801a77a:	46c0      	nop			@ (mov r8, r8)
 801a77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	689a      	ldr	r2, [r3, #8]
 801a782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	2140      	movs	r1, #64	@ 0x40
 801a788:	438a      	bics	r2, r1
 801a78a:	609a      	str	r2, [r3, #8]
 801a78c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a78e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a792:	f383 8810 	msr	PRIMASK, r3
}
 801a796:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801a798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a79a:	228c      	movs	r2, #140	@ 0x8c
 801a79c:	2120      	movs	r1, #32
 801a79e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a7a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a7a4:	2b01      	cmp	r3, #1
 801a7a6:	d118      	bne.n	801a7da <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a7a8:	f3ef 8310 	mrs	r3, PRIMASK
 801a7ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801a7ae:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7b6:	693b      	ldr	r3, [r7, #16]
 801a7b8:	f383 8810 	msr	PRIMASK, r3
}
 801a7bc:	46c0      	nop			@ (mov r8, r8)
 801a7be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	681a      	ldr	r2, [r3, #0]
 801a7c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	2110      	movs	r1, #16
 801a7ca:	438a      	bics	r2, r1
 801a7cc:	601a      	str	r2, [r3, #0]
 801a7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a7d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7d2:	697b      	ldr	r3, [r7, #20]
 801a7d4:	f383 8810 	msr	PRIMASK, r3
}
 801a7d8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a7da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7dc:	2200      	movs	r2, #0
 801a7de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a7e4:	2b01      	cmp	r3, #1
 801a7e6:	d108      	bne.n	801a7fa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7ea:	225c      	movs	r2, #92	@ 0x5c
 801a7ec:	5a9a      	ldrh	r2, [r3, r2]
 801a7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7f0:	0011      	movs	r1, r2
 801a7f2:	0018      	movs	r0, r3
 801a7f4:	f7ff fa20 	bl	8019c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a7f8:	e003      	b.n	801a802 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 801a7fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a7fc:	0018      	movs	r0, r3
 801a7fe:	f7ff fa03 	bl	8019c08 <HAL_UART_RxCpltCallback>
}
 801a802:	46c0      	nop			@ (mov r8, r8)
 801a804:	46bd      	mov	sp, r7
 801a806:	b014      	add	sp, #80	@ 0x50
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	46c0      	nop			@ (mov r8, r8)
 801a80c:	fffffeff 	.word	0xfffffeff

0801a810 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b084      	sub	sp, #16
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a81c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	2201      	movs	r2, #1
 801a822:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a828:	2b01      	cmp	r3, #1
 801a82a:	d10a      	bne.n	801a842 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	225c      	movs	r2, #92	@ 0x5c
 801a830:	5a9b      	ldrh	r3, [r3, r2]
 801a832:	085b      	lsrs	r3, r3, #1
 801a834:	b29a      	uxth	r2, r3
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	0011      	movs	r1, r2
 801a83a:	0018      	movs	r0, r3
 801a83c:	f7ff f9fc 	bl	8019c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801a840:	e003      	b.n	801a84a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	0018      	movs	r0, r3
 801a846:	f7ff f9e7 	bl	8019c18 <HAL_UART_RxHalfCpltCallback>
}
 801a84a:	46c0      	nop			@ (mov r8, r8)
 801a84c:	46bd      	mov	sp, r7
 801a84e:	b004      	add	sp, #16
 801a850:	bd80      	pop	{r7, pc}

0801a852 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801a852:	b580      	push	{r7, lr}
 801a854:	b086      	sub	sp, #24
 801a856:	af00      	add	r7, sp, #0
 801a858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a85e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801a860:	697b      	ldr	r3, [r7, #20]
 801a862:	2288      	movs	r2, #136	@ 0x88
 801a864:	589b      	ldr	r3, [r3, r2]
 801a866:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801a868:	697b      	ldr	r3, [r7, #20]
 801a86a:	228c      	movs	r2, #140	@ 0x8c
 801a86c:	589b      	ldr	r3, [r3, r2]
 801a86e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801a870:	697b      	ldr	r3, [r7, #20]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	689b      	ldr	r3, [r3, #8]
 801a876:	2280      	movs	r2, #128	@ 0x80
 801a878:	4013      	ands	r3, r2
 801a87a:	2b80      	cmp	r3, #128	@ 0x80
 801a87c:	d10a      	bne.n	801a894 <UART_DMAError+0x42>
 801a87e:	693b      	ldr	r3, [r7, #16]
 801a880:	2b21      	cmp	r3, #33	@ 0x21
 801a882:	d107      	bne.n	801a894 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801a884:	697b      	ldr	r3, [r7, #20]
 801a886:	2256      	movs	r2, #86	@ 0x56
 801a888:	2100      	movs	r1, #0
 801a88a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801a88c:	697b      	ldr	r3, [r7, #20]
 801a88e:	0018      	movs	r0, r3
 801a890:	f7ff fe24 	bl	801a4dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	689b      	ldr	r3, [r3, #8]
 801a89a:	2240      	movs	r2, #64	@ 0x40
 801a89c:	4013      	ands	r3, r2
 801a89e:	2b40      	cmp	r3, #64	@ 0x40
 801a8a0:	d10a      	bne.n	801a8b8 <UART_DMAError+0x66>
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	2b22      	cmp	r3, #34	@ 0x22
 801a8a6:	d107      	bne.n	801a8b8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801a8a8:	697b      	ldr	r3, [r7, #20]
 801a8aa:	225e      	movs	r2, #94	@ 0x5e
 801a8ac:	2100      	movs	r1, #0
 801a8ae:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801a8b0:	697b      	ldr	r3, [r7, #20]
 801a8b2:	0018      	movs	r0, r3
 801a8b4:	f7ff fe52 	bl	801a55c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	2290      	movs	r2, #144	@ 0x90
 801a8bc:	589b      	ldr	r3, [r3, r2]
 801a8be:	2210      	movs	r2, #16
 801a8c0:	431a      	orrs	r2, r3
 801a8c2:	697b      	ldr	r3, [r7, #20]
 801a8c4:	2190      	movs	r1, #144	@ 0x90
 801a8c6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a8c8:	697b      	ldr	r3, [r7, #20]
 801a8ca:	0018      	movs	r0, r3
 801a8cc:	f7ff f9ac 	bl	8019c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a8d0:	46c0      	nop			@ (mov r8, r8)
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	b006      	add	sp, #24
 801a8d6:	bd80      	pop	{r7, pc}

0801a8d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b084      	sub	sp, #16
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a8e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	225e      	movs	r2, #94	@ 0x5e
 801a8ea:	2100      	movs	r1, #0
 801a8ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	0018      	movs	r0, r3
 801a8f2:	f7ff f999 	bl	8019c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a8f6:	46c0      	nop			@ (mov r8, r8)
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	b004      	add	sp, #16
 801a8fc:	bd80      	pop	{r7, pc}

0801a8fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a8fe:	b580      	push	{r7, lr}
 801a900:	b086      	sub	sp, #24
 801a902:	af00      	add	r7, sp, #0
 801a904:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a906:	f3ef 8310 	mrs	r3, PRIMASK
 801a90a:	60bb      	str	r3, [r7, #8]
  return(result);
 801a90c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a90e:	617b      	str	r3, [r7, #20]
 801a910:	2301      	movs	r3, #1
 801a912:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	f383 8810 	msr	PRIMASK, r3
}
 801a91a:	46c0      	nop			@ (mov r8, r8)
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	681a      	ldr	r2, [r3, #0]
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	2140      	movs	r1, #64	@ 0x40
 801a928:	438a      	bics	r2, r1
 801a92a:	601a      	str	r2, [r3, #0]
 801a92c:	697b      	ldr	r3, [r7, #20]
 801a92e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a930:	693b      	ldr	r3, [r7, #16]
 801a932:	f383 8810 	msr	PRIMASK, r3
}
 801a936:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2288      	movs	r2, #136	@ 0x88
 801a93c:	2120      	movs	r1, #32
 801a93e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	2200      	movs	r2, #0
 801a944:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	0018      	movs	r0, r3
 801a94a:	f7ff f94d 	bl	8019be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a94e:	46c0      	nop			@ (mov r8, r8)
 801a950:	46bd      	mov	sp, r7
 801a952:	b006      	add	sp, #24
 801a954:	bd80      	pop	{r7, pc}

0801a956 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a956:	b580      	push	{r7, lr}
 801a958:	b082      	sub	sp, #8
 801a95a:	af00      	add	r7, sp, #0
 801a95c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a95e:	46c0      	nop			@ (mov r8, r8)
 801a960:	46bd      	mov	sp, r7
 801a962:	b002      	add	sp, #8
 801a964:	bd80      	pop	{r7, pc}

0801a966 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a966:	b580      	push	{r7, lr}
 801a968:	b082      	sub	sp, #8
 801a96a:	af00      	add	r7, sp, #0
 801a96c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a96e:	46c0      	nop			@ (mov r8, r8)
 801a970:	46bd      	mov	sp, r7
 801a972:	b002      	add	sp, #8
 801a974:	bd80      	pop	{r7, pc}

0801a976 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a976:	b580      	push	{r7, lr}
 801a978:	b082      	sub	sp, #8
 801a97a:	af00      	add	r7, sp, #0
 801a97c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a97e:	46c0      	nop			@ (mov r8, r8)
 801a980:	46bd      	mov	sp, r7
 801a982:	b002      	add	sp, #8
 801a984:	bd80      	pop	{r7, pc}
	...

0801a988 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b084      	sub	sp, #16
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	2284      	movs	r2, #132	@ 0x84
 801a994:	5c9b      	ldrb	r3, [r3, r2]
 801a996:	2b01      	cmp	r3, #1
 801a998:	d101      	bne.n	801a99e <HAL_UARTEx_DisableFifoMode+0x16>
 801a99a:	2302      	movs	r3, #2
 801a99c:	e027      	b.n	801a9ee <HAL_UARTEx_DisableFifoMode+0x66>
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	2284      	movs	r2, #132	@ 0x84
 801a9a2:	2101      	movs	r1, #1
 801a9a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	2288      	movs	r2, #136	@ 0x88
 801a9aa:	2124      	movs	r1, #36	@ 0x24
 801a9ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	681a      	ldr	r2, [r3, #0]
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	2101      	movs	r1, #1
 801a9c2:	438a      	bics	r2, r1
 801a9c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	4a0b      	ldr	r2, [pc, #44]	@ (801a9f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 801a9ca:	4013      	ands	r3, r2
 801a9cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	68fa      	ldr	r2, [r7, #12]
 801a9da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	2288      	movs	r2, #136	@ 0x88
 801a9e0:	2120      	movs	r1, #32
 801a9e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2284      	movs	r2, #132	@ 0x84
 801a9e8:	2100      	movs	r1, #0
 801a9ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a9ec:	2300      	movs	r3, #0
}
 801a9ee:	0018      	movs	r0, r3
 801a9f0:	46bd      	mov	sp, r7
 801a9f2:	b004      	add	sp, #16
 801a9f4:	bd80      	pop	{r7, pc}
 801a9f6:	46c0      	nop			@ (mov r8, r8)
 801a9f8:	dfffffff 	.word	0xdfffffff

0801a9fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b084      	sub	sp, #16
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
 801aa04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	2284      	movs	r2, #132	@ 0x84
 801aa0a:	5c9b      	ldrb	r3, [r3, r2]
 801aa0c:	2b01      	cmp	r3, #1
 801aa0e:	d101      	bne.n	801aa14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801aa10:	2302      	movs	r3, #2
 801aa12:	e02e      	b.n	801aa72 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2284      	movs	r2, #132	@ 0x84
 801aa18:	2101      	movs	r1, #1
 801aa1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	2288      	movs	r2, #136	@ 0x88
 801aa20:	2124      	movs	r1, #36	@ 0x24
 801aa22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	681a      	ldr	r2, [r3, #0]
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	2101      	movs	r1, #1
 801aa38:	438a      	bics	r2, r1
 801aa3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	689b      	ldr	r3, [r3, #8]
 801aa42:	00db      	lsls	r3, r3, #3
 801aa44:	08d9      	lsrs	r1, r3, #3
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	683a      	ldr	r2, [r7, #0]
 801aa4c:	430a      	orrs	r2, r1
 801aa4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	0018      	movs	r0, r3
 801aa54:	f000 f854 	bl	801ab00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	68fa      	ldr	r2, [r7, #12]
 801aa5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	2288      	movs	r2, #136	@ 0x88
 801aa64:	2120      	movs	r1, #32
 801aa66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2284      	movs	r2, #132	@ 0x84
 801aa6c:	2100      	movs	r1, #0
 801aa6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801aa70:	2300      	movs	r3, #0
}
 801aa72:	0018      	movs	r0, r3
 801aa74:	46bd      	mov	sp, r7
 801aa76:	b004      	add	sp, #16
 801aa78:	bd80      	pop	{r7, pc}
	...

0801aa7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b084      	sub	sp, #16
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	2284      	movs	r2, #132	@ 0x84
 801aa8a:	5c9b      	ldrb	r3, [r3, r2]
 801aa8c:	2b01      	cmp	r3, #1
 801aa8e:	d101      	bne.n	801aa94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801aa90:	2302      	movs	r3, #2
 801aa92:	e02f      	b.n	801aaf4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	2284      	movs	r2, #132	@ 0x84
 801aa98:	2101      	movs	r1, #1
 801aa9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	2288      	movs	r2, #136	@ 0x88
 801aaa0:	2124      	movs	r1, #36	@ 0x24
 801aaa2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	681a      	ldr	r2, [r3, #0]
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	2101      	movs	r1, #1
 801aab8:	438a      	bics	r2, r1
 801aaba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	689b      	ldr	r3, [r3, #8]
 801aac2:	4a0e      	ldr	r2, [pc, #56]	@ (801aafc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 801aac4:	4013      	ands	r3, r2
 801aac6:	0019      	movs	r1, r3
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	683a      	ldr	r2, [r7, #0]
 801aace:	430a      	orrs	r2, r1
 801aad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	0018      	movs	r0, r3
 801aad6:	f000 f813 	bl	801ab00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	68fa      	ldr	r2, [r7, #12]
 801aae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	2288      	movs	r2, #136	@ 0x88
 801aae6:	2120      	movs	r1, #32
 801aae8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	2284      	movs	r2, #132	@ 0x84
 801aaee:	2100      	movs	r1, #0
 801aaf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801aaf2:	2300      	movs	r3, #0
}
 801aaf4:	0018      	movs	r0, r3
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	b004      	add	sp, #16
 801aafa:	bd80      	pop	{r7, pc}
 801aafc:	f1ffffff 	.word	0xf1ffffff

0801ab00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab02:	b085      	sub	sp, #20
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d108      	bne.n	801ab22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	226a      	movs	r2, #106	@ 0x6a
 801ab14:	2101      	movs	r1, #1
 801ab16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	2268      	movs	r2, #104	@ 0x68
 801ab1c:	2101      	movs	r1, #1
 801ab1e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ab20:	e043      	b.n	801abaa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ab22:	260f      	movs	r6, #15
 801ab24:	19bb      	adds	r3, r7, r6
 801ab26:	2208      	movs	r2, #8
 801ab28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ab2a:	200e      	movs	r0, #14
 801ab2c:	183b      	adds	r3, r7, r0
 801ab2e:	2208      	movs	r2, #8
 801ab30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	689b      	ldr	r3, [r3, #8]
 801ab38:	0e5b      	lsrs	r3, r3, #25
 801ab3a:	b2da      	uxtb	r2, r3
 801ab3c:	240d      	movs	r4, #13
 801ab3e:	193b      	adds	r3, r7, r4
 801ab40:	2107      	movs	r1, #7
 801ab42:	400a      	ands	r2, r1
 801ab44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	689b      	ldr	r3, [r3, #8]
 801ab4c:	0f5b      	lsrs	r3, r3, #29
 801ab4e:	b2da      	uxtb	r2, r3
 801ab50:	250c      	movs	r5, #12
 801ab52:	197b      	adds	r3, r7, r5
 801ab54:	2107      	movs	r1, #7
 801ab56:	400a      	ands	r2, r1
 801ab58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ab5a:	183b      	adds	r3, r7, r0
 801ab5c:	781b      	ldrb	r3, [r3, #0]
 801ab5e:	197a      	adds	r2, r7, r5
 801ab60:	7812      	ldrb	r2, [r2, #0]
 801ab62:	4914      	ldr	r1, [pc, #80]	@ (801abb4 <UARTEx_SetNbDataToProcess+0xb4>)
 801ab64:	5c8a      	ldrb	r2, [r1, r2]
 801ab66:	435a      	muls	r2, r3
 801ab68:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 801ab6a:	197b      	adds	r3, r7, r5
 801ab6c:	781b      	ldrb	r3, [r3, #0]
 801ab6e:	4a12      	ldr	r2, [pc, #72]	@ (801abb8 <UARTEx_SetNbDataToProcess+0xb8>)
 801ab70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ab72:	0019      	movs	r1, r3
 801ab74:	f7e5 fb5a 	bl	800022c <__divsi3>
 801ab78:	0003      	movs	r3, r0
 801ab7a:	b299      	uxth	r1, r3
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	226a      	movs	r2, #106	@ 0x6a
 801ab80:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ab82:	19bb      	adds	r3, r7, r6
 801ab84:	781b      	ldrb	r3, [r3, #0]
 801ab86:	193a      	adds	r2, r7, r4
 801ab88:	7812      	ldrb	r2, [r2, #0]
 801ab8a:	490a      	ldr	r1, [pc, #40]	@ (801abb4 <UARTEx_SetNbDataToProcess+0xb4>)
 801ab8c:	5c8a      	ldrb	r2, [r1, r2]
 801ab8e:	435a      	muls	r2, r3
 801ab90:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 801ab92:	193b      	adds	r3, r7, r4
 801ab94:	781b      	ldrb	r3, [r3, #0]
 801ab96:	4a08      	ldr	r2, [pc, #32]	@ (801abb8 <UARTEx_SetNbDataToProcess+0xb8>)
 801ab98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ab9a:	0019      	movs	r1, r3
 801ab9c:	f7e5 fb46 	bl	800022c <__divsi3>
 801aba0:	0003      	movs	r3, r0
 801aba2:	b299      	uxth	r1, r3
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	2268      	movs	r2, #104	@ 0x68
 801aba8:	5299      	strh	r1, [r3, r2]
}
 801abaa:	46c0      	nop			@ (mov r8, r8)
 801abac:	46bd      	mov	sp, r7
 801abae:	b005      	add	sp, #20
 801abb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abb2:	46c0      	nop			@ (mov r8, r8)
 801abb4:	0801b404 	.word	0x0801b404
 801abb8:	0801b40c 	.word	0x0801b40c

0801abbc <malloc>:
 801abbc:	b510      	push	{r4, lr}
 801abbe:	4b03      	ldr	r3, [pc, #12]	@ (801abcc <malloc+0x10>)
 801abc0:	0001      	movs	r1, r0
 801abc2:	6818      	ldr	r0, [r3, #0]
 801abc4:	f000 f830 	bl	801ac28 <_malloc_r>
 801abc8:	bd10      	pop	{r4, pc}
 801abca:	46c0      	nop			@ (mov r8, r8)
 801abcc:	2000025c 	.word	0x2000025c

0801abd0 <free>:
 801abd0:	b510      	push	{r4, lr}
 801abd2:	4b03      	ldr	r3, [pc, #12]	@ (801abe0 <free+0x10>)
 801abd4:	0001      	movs	r1, r0
 801abd6:	6818      	ldr	r0, [r3, #0]
 801abd8:	f000 f938 	bl	801ae4c <_free_r>
 801abdc:	bd10      	pop	{r4, pc}
 801abde:	46c0      	nop			@ (mov r8, r8)
 801abe0:	2000025c 	.word	0x2000025c

0801abe4 <sbrk_aligned>:
 801abe4:	b570      	push	{r4, r5, r6, lr}
 801abe6:	4e0f      	ldr	r6, [pc, #60]	@ (801ac24 <sbrk_aligned+0x40>)
 801abe8:	000d      	movs	r5, r1
 801abea:	6831      	ldr	r1, [r6, #0]
 801abec:	0004      	movs	r4, r0
 801abee:	2900      	cmp	r1, #0
 801abf0:	d102      	bne.n	801abf8 <sbrk_aligned+0x14>
 801abf2:	f000 f8e3 	bl	801adbc <_sbrk_r>
 801abf6:	6030      	str	r0, [r6, #0]
 801abf8:	0029      	movs	r1, r5
 801abfa:	0020      	movs	r0, r4
 801abfc:	f000 f8de 	bl	801adbc <_sbrk_r>
 801ac00:	1c43      	adds	r3, r0, #1
 801ac02:	d103      	bne.n	801ac0c <sbrk_aligned+0x28>
 801ac04:	2501      	movs	r5, #1
 801ac06:	426d      	negs	r5, r5
 801ac08:	0028      	movs	r0, r5
 801ac0a:	bd70      	pop	{r4, r5, r6, pc}
 801ac0c:	2303      	movs	r3, #3
 801ac0e:	1cc5      	adds	r5, r0, #3
 801ac10:	439d      	bics	r5, r3
 801ac12:	42a8      	cmp	r0, r5
 801ac14:	d0f8      	beq.n	801ac08 <sbrk_aligned+0x24>
 801ac16:	1a29      	subs	r1, r5, r0
 801ac18:	0020      	movs	r0, r4
 801ac1a:	f000 f8cf 	bl	801adbc <_sbrk_r>
 801ac1e:	3001      	adds	r0, #1
 801ac20:	d1f2      	bne.n	801ac08 <sbrk_aligned+0x24>
 801ac22:	e7ef      	b.n	801ac04 <sbrk_aligned+0x20>
 801ac24:	2000118c 	.word	0x2000118c

0801ac28 <_malloc_r>:
 801ac28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac2a:	2203      	movs	r2, #3
 801ac2c:	1ccb      	adds	r3, r1, #3
 801ac2e:	4393      	bics	r3, r2
 801ac30:	3308      	adds	r3, #8
 801ac32:	0005      	movs	r5, r0
 801ac34:	001f      	movs	r7, r3
 801ac36:	2b0c      	cmp	r3, #12
 801ac38:	d234      	bcs.n	801aca4 <_malloc_r+0x7c>
 801ac3a:	270c      	movs	r7, #12
 801ac3c:	42b9      	cmp	r1, r7
 801ac3e:	d833      	bhi.n	801aca8 <_malloc_r+0x80>
 801ac40:	0028      	movs	r0, r5
 801ac42:	f000 f871 	bl	801ad28 <__malloc_lock>
 801ac46:	4e37      	ldr	r6, [pc, #220]	@ (801ad24 <_malloc_r+0xfc>)
 801ac48:	6833      	ldr	r3, [r6, #0]
 801ac4a:	001c      	movs	r4, r3
 801ac4c:	2c00      	cmp	r4, #0
 801ac4e:	d12f      	bne.n	801acb0 <_malloc_r+0x88>
 801ac50:	0039      	movs	r1, r7
 801ac52:	0028      	movs	r0, r5
 801ac54:	f7ff ffc6 	bl	801abe4 <sbrk_aligned>
 801ac58:	0004      	movs	r4, r0
 801ac5a:	1c43      	adds	r3, r0, #1
 801ac5c:	d15f      	bne.n	801ad1e <_malloc_r+0xf6>
 801ac5e:	6834      	ldr	r4, [r6, #0]
 801ac60:	9400      	str	r4, [sp, #0]
 801ac62:	9b00      	ldr	r3, [sp, #0]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d14a      	bne.n	801acfe <_malloc_r+0xd6>
 801ac68:	2c00      	cmp	r4, #0
 801ac6a:	d052      	beq.n	801ad12 <_malloc_r+0xea>
 801ac6c:	6823      	ldr	r3, [r4, #0]
 801ac6e:	0028      	movs	r0, r5
 801ac70:	18e3      	adds	r3, r4, r3
 801ac72:	9900      	ldr	r1, [sp, #0]
 801ac74:	9301      	str	r3, [sp, #4]
 801ac76:	f000 f8a1 	bl	801adbc <_sbrk_r>
 801ac7a:	9b01      	ldr	r3, [sp, #4]
 801ac7c:	4283      	cmp	r3, r0
 801ac7e:	d148      	bne.n	801ad12 <_malloc_r+0xea>
 801ac80:	6823      	ldr	r3, [r4, #0]
 801ac82:	0028      	movs	r0, r5
 801ac84:	1aff      	subs	r7, r7, r3
 801ac86:	0039      	movs	r1, r7
 801ac88:	f7ff ffac 	bl	801abe4 <sbrk_aligned>
 801ac8c:	3001      	adds	r0, #1
 801ac8e:	d040      	beq.n	801ad12 <_malloc_r+0xea>
 801ac90:	6823      	ldr	r3, [r4, #0]
 801ac92:	19db      	adds	r3, r3, r7
 801ac94:	6023      	str	r3, [r4, #0]
 801ac96:	6833      	ldr	r3, [r6, #0]
 801ac98:	685a      	ldr	r2, [r3, #4]
 801ac9a:	2a00      	cmp	r2, #0
 801ac9c:	d133      	bne.n	801ad06 <_malloc_r+0xde>
 801ac9e:	9b00      	ldr	r3, [sp, #0]
 801aca0:	6033      	str	r3, [r6, #0]
 801aca2:	e019      	b.n	801acd8 <_malloc_r+0xb0>
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	dac9      	bge.n	801ac3c <_malloc_r+0x14>
 801aca8:	230c      	movs	r3, #12
 801acaa:	602b      	str	r3, [r5, #0]
 801acac:	2000      	movs	r0, #0
 801acae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801acb0:	6821      	ldr	r1, [r4, #0]
 801acb2:	1bc9      	subs	r1, r1, r7
 801acb4:	d420      	bmi.n	801acf8 <_malloc_r+0xd0>
 801acb6:	290b      	cmp	r1, #11
 801acb8:	d90a      	bls.n	801acd0 <_malloc_r+0xa8>
 801acba:	19e2      	adds	r2, r4, r7
 801acbc:	6027      	str	r7, [r4, #0]
 801acbe:	42a3      	cmp	r3, r4
 801acc0:	d104      	bne.n	801accc <_malloc_r+0xa4>
 801acc2:	6032      	str	r2, [r6, #0]
 801acc4:	6863      	ldr	r3, [r4, #4]
 801acc6:	6011      	str	r1, [r2, #0]
 801acc8:	6053      	str	r3, [r2, #4]
 801acca:	e005      	b.n	801acd8 <_malloc_r+0xb0>
 801accc:	605a      	str	r2, [r3, #4]
 801acce:	e7f9      	b.n	801acc4 <_malloc_r+0x9c>
 801acd0:	6862      	ldr	r2, [r4, #4]
 801acd2:	42a3      	cmp	r3, r4
 801acd4:	d10e      	bne.n	801acf4 <_malloc_r+0xcc>
 801acd6:	6032      	str	r2, [r6, #0]
 801acd8:	0028      	movs	r0, r5
 801acda:	f000 f82d 	bl	801ad38 <__malloc_unlock>
 801acde:	0020      	movs	r0, r4
 801ace0:	2207      	movs	r2, #7
 801ace2:	300b      	adds	r0, #11
 801ace4:	1d23      	adds	r3, r4, #4
 801ace6:	4390      	bics	r0, r2
 801ace8:	1ac2      	subs	r2, r0, r3
 801acea:	4298      	cmp	r0, r3
 801acec:	d0df      	beq.n	801acae <_malloc_r+0x86>
 801acee:	1a1b      	subs	r3, r3, r0
 801acf0:	50a3      	str	r3, [r4, r2]
 801acf2:	e7dc      	b.n	801acae <_malloc_r+0x86>
 801acf4:	605a      	str	r2, [r3, #4]
 801acf6:	e7ef      	b.n	801acd8 <_malloc_r+0xb0>
 801acf8:	0023      	movs	r3, r4
 801acfa:	6864      	ldr	r4, [r4, #4]
 801acfc:	e7a6      	b.n	801ac4c <_malloc_r+0x24>
 801acfe:	9c00      	ldr	r4, [sp, #0]
 801ad00:	6863      	ldr	r3, [r4, #4]
 801ad02:	9300      	str	r3, [sp, #0]
 801ad04:	e7ad      	b.n	801ac62 <_malloc_r+0x3a>
 801ad06:	001a      	movs	r2, r3
 801ad08:	685b      	ldr	r3, [r3, #4]
 801ad0a:	42a3      	cmp	r3, r4
 801ad0c:	d1fb      	bne.n	801ad06 <_malloc_r+0xde>
 801ad0e:	2300      	movs	r3, #0
 801ad10:	e7da      	b.n	801acc8 <_malloc_r+0xa0>
 801ad12:	230c      	movs	r3, #12
 801ad14:	0028      	movs	r0, r5
 801ad16:	602b      	str	r3, [r5, #0]
 801ad18:	f000 f80e 	bl	801ad38 <__malloc_unlock>
 801ad1c:	e7c6      	b.n	801acac <_malloc_r+0x84>
 801ad1e:	6007      	str	r7, [r0, #0]
 801ad20:	e7da      	b.n	801acd8 <_malloc_r+0xb0>
 801ad22:	46c0      	nop			@ (mov r8, r8)
 801ad24:	20001190 	.word	0x20001190

0801ad28 <__malloc_lock>:
 801ad28:	b510      	push	{r4, lr}
 801ad2a:	4802      	ldr	r0, [pc, #8]	@ (801ad34 <__malloc_lock+0xc>)
 801ad2c:	f000 f882 	bl	801ae34 <__retarget_lock_acquire_recursive>
 801ad30:	bd10      	pop	{r4, pc}
 801ad32:	46c0      	nop			@ (mov r8, r8)
 801ad34:	200012d0 	.word	0x200012d0

0801ad38 <__malloc_unlock>:
 801ad38:	b510      	push	{r4, lr}
 801ad3a:	4802      	ldr	r0, [pc, #8]	@ (801ad44 <__malloc_unlock+0xc>)
 801ad3c:	f000 f87b 	bl	801ae36 <__retarget_lock_release_recursive>
 801ad40:	bd10      	pop	{r4, pc}
 801ad42:	46c0      	nop			@ (mov r8, r8)
 801ad44:	200012d0 	.word	0x200012d0

0801ad48 <memcmp>:
 801ad48:	b530      	push	{r4, r5, lr}
 801ad4a:	2400      	movs	r4, #0
 801ad4c:	3901      	subs	r1, #1
 801ad4e:	42a2      	cmp	r2, r4
 801ad50:	d101      	bne.n	801ad56 <memcmp+0xe>
 801ad52:	2000      	movs	r0, #0
 801ad54:	e005      	b.n	801ad62 <memcmp+0x1a>
 801ad56:	5d03      	ldrb	r3, [r0, r4]
 801ad58:	3401      	adds	r4, #1
 801ad5a:	5d0d      	ldrb	r5, [r1, r4]
 801ad5c:	42ab      	cmp	r3, r5
 801ad5e:	d0f6      	beq.n	801ad4e <memcmp+0x6>
 801ad60:	1b58      	subs	r0, r3, r5
 801ad62:	bd30      	pop	{r4, r5, pc}

0801ad64 <memset>:
 801ad64:	0003      	movs	r3, r0
 801ad66:	1882      	adds	r2, r0, r2
 801ad68:	4293      	cmp	r3, r2
 801ad6a:	d100      	bne.n	801ad6e <memset+0xa>
 801ad6c:	4770      	bx	lr
 801ad6e:	7019      	strb	r1, [r3, #0]
 801ad70:	3301      	adds	r3, #1
 801ad72:	e7f9      	b.n	801ad68 <memset+0x4>

0801ad74 <strchr>:
 801ad74:	b2c9      	uxtb	r1, r1
 801ad76:	7803      	ldrb	r3, [r0, #0]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d004      	beq.n	801ad86 <strchr+0x12>
 801ad7c:	428b      	cmp	r3, r1
 801ad7e:	d100      	bne.n	801ad82 <strchr+0xe>
 801ad80:	4770      	bx	lr
 801ad82:	3001      	adds	r0, #1
 801ad84:	e7f7      	b.n	801ad76 <strchr+0x2>
 801ad86:	424b      	negs	r3, r1
 801ad88:	4159      	adcs	r1, r3
 801ad8a:	4249      	negs	r1, r1
 801ad8c:	4008      	ands	r0, r1
 801ad8e:	e7f7      	b.n	801ad80 <strchr+0xc>

0801ad90 <strstr>:
 801ad90:	780a      	ldrb	r2, [r1, #0]
 801ad92:	b530      	push	{r4, r5, lr}
 801ad94:	2a00      	cmp	r2, #0
 801ad96:	d10c      	bne.n	801adb2 <strstr+0x22>
 801ad98:	bd30      	pop	{r4, r5, pc}
 801ad9a:	429a      	cmp	r2, r3
 801ad9c:	d108      	bne.n	801adb0 <strstr+0x20>
 801ad9e:	2301      	movs	r3, #1
 801ada0:	5ccc      	ldrb	r4, [r1, r3]
 801ada2:	2c00      	cmp	r4, #0
 801ada4:	d0f8      	beq.n	801ad98 <strstr+0x8>
 801ada6:	5cc5      	ldrb	r5, [r0, r3]
 801ada8:	42a5      	cmp	r5, r4
 801adaa:	d101      	bne.n	801adb0 <strstr+0x20>
 801adac:	3301      	adds	r3, #1
 801adae:	e7f7      	b.n	801ada0 <strstr+0x10>
 801adb0:	3001      	adds	r0, #1
 801adb2:	7803      	ldrb	r3, [r0, #0]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d1f0      	bne.n	801ad9a <strstr+0xa>
 801adb8:	0018      	movs	r0, r3
 801adba:	e7ed      	b.n	801ad98 <strstr+0x8>

0801adbc <_sbrk_r>:
 801adbc:	2300      	movs	r3, #0
 801adbe:	b570      	push	{r4, r5, r6, lr}
 801adc0:	4d06      	ldr	r5, [pc, #24]	@ (801addc <_sbrk_r+0x20>)
 801adc2:	0004      	movs	r4, r0
 801adc4:	0008      	movs	r0, r1
 801adc6:	602b      	str	r3, [r5, #0]
 801adc8:	f7f1 f93a 	bl	800c040 <_sbrk>
 801adcc:	1c43      	adds	r3, r0, #1
 801adce:	d103      	bne.n	801add8 <_sbrk_r+0x1c>
 801add0:	682b      	ldr	r3, [r5, #0]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d000      	beq.n	801add8 <_sbrk_r+0x1c>
 801add6:	6023      	str	r3, [r4, #0]
 801add8:	bd70      	pop	{r4, r5, r6, pc}
 801adda:	46c0      	nop			@ (mov r8, r8)
 801addc:	200012cc 	.word	0x200012cc

0801ade0 <__errno>:
 801ade0:	4b01      	ldr	r3, [pc, #4]	@ (801ade8 <__errno+0x8>)
 801ade2:	6818      	ldr	r0, [r3, #0]
 801ade4:	4770      	bx	lr
 801ade6:	46c0      	nop			@ (mov r8, r8)
 801ade8:	2000025c 	.word	0x2000025c

0801adec <__libc_init_array>:
 801adec:	b570      	push	{r4, r5, r6, lr}
 801adee:	2600      	movs	r6, #0
 801adf0:	4c0c      	ldr	r4, [pc, #48]	@ (801ae24 <__libc_init_array+0x38>)
 801adf2:	4d0d      	ldr	r5, [pc, #52]	@ (801ae28 <__libc_init_array+0x3c>)
 801adf4:	1b64      	subs	r4, r4, r5
 801adf6:	10a4      	asrs	r4, r4, #2
 801adf8:	42a6      	cmp	r6, r4
 801adfa:	d109      	bne.n	801ae10 <__libc_init_array+0x24>
 801adfc:	2600      	movs	r6, #0
 801adfe:	f000 f97d 	bl	801b0fc <_init>
 801ae02:	4c0a      	ldr	r4, [pc, #40]	@ (801ae2c <__libc_init_array+0x40>)
 801ae04:	4d0a      	ldr	r5, [pc, #40]	@ (801ae30 <__libc_init_array+0x44>)
 801ae06:	1b64      	subs	r4, r4, r5
 801ae08:	10a4      	asrs	r4, r4, #2
 801ae0a:	42a6      	cmp	r6, r4
 801ae0c:	d105      	bne.n	801ae1a <__libc_init_array+0x2e>
 801ae0e:	bd70      	pop	{r4, r5, r6, pc}
 801ae10:	00b3      	lsls	r3, r6, #2
 801ae12:	58eb      	ldr	r3, [r5, r3]
 801ae14:	4798      	blx	r3
 801ae16:	3601      	adds	r6, #1
 801ae18:	e7ee      	b.n	801adf8 <__libc_init_array+0xc>
 801ae1a:	00b3      	lsls	r3, r6, #2
 801ae1c:	58eb      	ldr	r3, [r5, r3]
 801ae1e:	4798      	blx	r3
 801ae20:	3601      	adds	r6, #1
 801ae22:	e7f2      	b.n	801ae0a <__libc_init_array+0x1e>
 801ae24:	0801b41c 	.word	0x0801b41c
 801ae28:	0801b41c 	.word	0x0801b41c
 801ae2c:	0801b420 	.word	0x0801b420
 801ae30:	0801b41c 	.word	0x0801b41c

0801ae34 <__retarget_lock_acquire_recursive>:
 801ae34:	4770      	bx	lr

0801ae36 <__retarget_lock_release_recursive>:
 801ae36:	4770      	bx	lr

0801ae38 <memcpy>:
 801ae38:	2300      	movs	r3, #0
 801ae3a:	b510      	push	{r4, lr}
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	d100      	bne.n	801ae42 <memcpy+0xa>
 801ae40:	bd10      	pop	{r4, pc}
 801ae42:	5ccc      	ldrb	r4, [r1, r3]
 801ae44:	54c4      	strb	r4, [r0, r3]
 801ae46:	3301      	adds	r3, #1
 801ae48:	e7f8      	b.n	801ae3c <memcpy+0x4>
	...

0801ae4c <_free_r>:
 801ae4c:	b570      	push	{r4, r5, r6, lr}
 801ae4e:	0005      	movs	r5, r0
 801ae50:	1e0c      	subs	r4, r1, #0
 801ae52:	d010      	beq.n	801ae76 <_free_r+0x2a>
 801ae54:	3c04      	subs	r4, #4
 801ae56:	6823      	ldr	r3, [r4, #0]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	da00      	bge.n	801ae5e <_free_r+0x12>
 801ae5c:	18e4      	adds	r4, r4, r3
 801ae5e:	0028      	movs	r0, r5
 801ae60:	f7ff ff62 	bl	801ad28 <__malloc_lock>
 801ae64:	4a1d      	ldr	r2, [pc, #116]	@ (801aedc <_free_r+0x90>)
 801ae66:	6813      	ldr	r3, [r2, #0]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d105      	bne.n	801ae78 <_free_r+0x2c>
 801ae6c:	6063      	str	r3, [r4, #4]
 801ae6e:	6014      	str	r4, [r2, #0]
 801ae70:	0028      	movs	r0, r5
 801ae72:	f7ff ff61 	bl	801ad38 <__malloc_unlock>
 801ae76:	bd70      	pop	{r4, r5, r6, pc}
 801ae78:	42a3      	cmp	r3, r4
 801ae7a:	d908      	bls.n	801ae8e <_free_r+0x42>
 801ae7c:	6820      	ldr	r0, [r4, #0]
 801ae7e:	1821      	adds	r1, r4, r0
 801ae80:	428b      	cmp	r3, r1
 801ae82:	d1f3      	bne.n	801ae6c <_free_r+0x20>
 801ae84:	6819      	ldr	r1, [r3, #0]
 801ae86:	685b      	ldr	r3, [r3, #4]
 801ae88:	1809      	adds	r1, r1, r0
 801ae8a:	6021      	str	r1, [r4, #0]
 801ae8c:	e7ee      	b.n	801ae6c <_free_r+0x20>
 801ae8e:	001a      	movs	r2, r3
 801ae90:	685b      	ldr	r3, [r3, #4]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d001      	beq.n	801ae9a <_free_r+0x4e>
 801ae96:	42a3      	cmp	r3, r4
 801ae98:	d9f9      	bls.n	801ae8e <_free_r+0x42>
 801ae9a:	6811      	ldr	r1, [r2, #0]
 801ae9c:	1850      	adds	r0, r2, r1
 801ae9e:	42a0      	cmp	r0, r4
 801aea0:	d10b      	bne.n	801aeba <_free_r+0x6e>
 801aea2:	6820      	ldr	r0, [r4, #0]
 801aea4:	1809      	adds	r1, r1, r0
 801aea6:	1850      	adds	r0, r2, r1
 801aea8:	6011      	str	r1, [r2, #0]
 801aeaa:	4283      	cmp	r3, r0
 801aeac:	d1e0      	bne.n	801ae70 <_free_r+0x24>
 801aeae:	6818      	ldr	r0, [r3, #0]
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	1841      	adds	r1, r0, r1
 801aeb4:	6011      	str	r1, [r2, #0]
 801aeb6:	6053      	str	r3, [r2, #4]
 801aeb8:	e7da      	b.n	801ae70 <_free_r+0x24>
 801aeba:	42a0      	cmp	r0, r4
 801aebc:	d902      	bls.n	801aec4 <_free_r+0x78>
 801aebe:	230c      	movs	r3, #12
 801aec0:	602b      	str	r3, [r5, #0]
 801aec2:	e7d5      	b.n	801ae70 <_free_r+0x24>
 801aec4:	6820      	ldr	r0, [r4, #0]
 801aec6:	1821      	adds	r1, r4, r0
 801aec8:	428b      	cmp	r3, r1
 801aeca:	d103      	bne.n	801aed4 <_free_r+0x88>
 801aecc:	6819      	ldr	r1, [r3, #0]
 801aece:	685b      	ldr	r3, [r3, #4]
 801aed0:	1809      	adds	r1, r1, r0
 801aed2:	6021      	str	r1, [r4, #0]
 801aed4:	6063      	str	r3, [r4, #4]
 801aed6:	6054      	str	r4, [r2, #4]
 801aed8:	e7ca      	b.n	801ae70 <_free_r+0x24>
 801aeda:	46c0      	nop			@ (mov r8, r8)
 801aedc:	20001190 	.word	0x20001190

0801aee0 <sqrt>:
 801aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aee2:	0004      	movs	r4, r0
 801aee4:	000d      	movs	r5, r1
 801aee6:	f000 f821 	bl	801af2c <__ieee754_sqrt>
 801aeea:	0022      	movs	r2, r4
 801aeec:	0006      	movs	r6, r0
 801aeee:	000f      	movs	r7, r1
 801aef0:	002b      	movs	r3, r5
 801aef2:	0020      	movs	r0, r4
 801aef4:	0029      	movs	r1, r5
 801aef6:	f7e7 f9f7 	bl	80022e8 <__aeabi_dcmpun>
 801aefa:	2800      	cmp	r0, #0
 801aefc:	d113      	bne.n	801af26 <sqrt+0x46>
 801aefe:	2200      	movs	r2, #0
 801af00:	2300      	movs	r3, #0
 801af02:	0020      	movs	r0, r4
 801af04:	0029      	movs	r1, r5
 801af06:	f7e5 fa93 	bl	8000430 <__aeabi_dcmplt>
 801af0a:	2800      	cmp	r0, #0
 801af0c:	d00b      	beq.n	801af26 <sqrt+0x46>
 801af0e:	f7ff ff67 	bl	801ade0 <__errno>
 801af12:	2321      	movs	r3, #33	@ 0x21
 801af14:	2200      	movs	r2, #0
 801af16:	6003      	str	r3, [r0, #0]
 801af18:	2300      	movs	r3, #0
 801af1a:	0010      	movs	r0, r2
 801af1c:	0019      	movs	r1, r3
 801af1e:	f7e5 ff3b 	bl	8000d98 <__aeabi_ddiv>
 801af22:	0006      	movs	r6, r0
 801af24:	000f      	movs	r7, r1
 801af26:	0030      	movs	r0, r6
 801af28:	0039      	movs	r1, r7
 801af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af2c <__ieee754_sqrt>:
 801af2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af2e:	000a      	movs	r2, r1
 801af30:	000d      	movs	r5, r1
 801af32:	496d      	ldr	r1, [pc, #436]	@ (801b0e8 <__ieee754_sqrt+0x1bc>)
 801af34:	0004      	movs	r4, r0
 801af36:	0003      	movs	r3, r0
 801af38:	0008      	movs	r0, r1
 801af3a:	b087      	sub	sp, #28
 801af3c:	4028      	ands	r0, r5
 801af3e:	4288      	cmp	r0, r1
 801af40:	d111      	bne.n	801af66 <__ieee754_sqrt+0x3a>
 801af42:	0022      	movs	r2, r4
 801af44:	002b      	movs	r3, r5
 801af46:	0020      	movs	r0, r4
 801af48:	0029      	movs	r1, r5
 801af4a:	f7e6 fb69 	bl	8001620 <__aeabi_dmul>
 801af4e:	0002      	movs	r2, r0
 801af50:	000b      	movs	r3, r1
 801af52:	0020      	movs	r0, r4
 801af54:	0029      	movs	r1, r5
 801af56:	f7e5 fbbb 	bl	80006d0 <__aeabi_dadd>
 801af5a:	0004      	movs	r4, r0
 801af5c:	000d      	movs	r5, r1
 801af5e:	0020      	movs	r0, r4
 801af60:	0029      	movs	r1, r5
 801af62:	b007      	add	sp, #28
 801af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af66:	2d00      	cmp	r5, #0
 801af68:	dc11      	bgt.n	801af8e <__ieee754_sqrt+0x62>
 801af6a:	0069      	lsls	r1, r5, #1
 801af6c:	0849      	lsrs	r1, r1, #1
 801af6e:	4321      	orrs	r1, r4
 801af70:	d0f5      	beq.n	801af5e <__ieee754_sqrt+0x32>
 801af72:	2000      	movs	r0, #0
 801af74:	4285      	cmp	r5, r0
 801af76:	d010      	beq.n	801af9a <__ieee754_sqrt+0x6e>
 801af78:	0022      	movs	r2, r4
 801af7a:	002b      	movs	r3, r5
 801af7c:	0020      	movs	r0, r4
 801af7e:	0029      	movs	r1, r5
 801af80:	f7e6 fe16 	bl	8001bb0 <__aeabi_dsub>
 801af84:	0002      	movs	r2, r0
 801af86:	000b      	movs	r3, r1
 801af88:	f7e5 ff06 	bl	8000d98 <__aeabi_ddiv>
 801af8c:	e7e5      	b.n	801af5a <__ieee754_sqrt+0x2e>
 801af8e:	1528      	asrs	r0, r5, #20
 801af90:	d115      	bne.n	801afbe <__ieee754_sqrt+0x92>
 801af92:	2480      	movs	r4, #128	@ 0x80
 801af94:	2100      	movs	r1, #0
 801af96:	0364      	lsls	r4, r4, #13
 801af98:	e007      	b.n	801afaa <__ieee754_sqrt+0x7e>
 801af9a:	0ada      	lsrs	r2, r3, #11
 801af9c:	3815      	subs	r0, #21
 801af9e:	055b      	lsls	r3, r3, #21
 801afa0:	2a00      	cmp	r2, #0
 801afa2:	d0fa      	beq.n	801af9a <__ieee754_sqrt+0x6e>
 801afa4:	e7f5      	b.n	801af92 <__ieee754_sqrt+0x66>
 801afa6:	0052      	lsls	r2, r2, #1
 801afa8:	3101      	adds	r1, #1
 801afaa:	4222      	tst	r2, r4
 801afac:	d0fb      	beq.n	801afa6 <__ieee754_sqrt+0x7a>
 801afae:	1e4c      	subs	r4, r1, #1
 801afb0:	1b00      	subs	r0, r0, r4
 801afb2:	2420      	movs	r4, #32
 801afb4:	001d      	movs	r5, r3
 801afb6:	1a64      	subs	r4, r4, r1
 801afb8:	40e5      	lsrs	r5, r4
 801afba:	408b      	lsls	r3, r1
 801afbc:	432a      	orrs	r2, r5
 801afbe:	494b      	ldr	r1, [pc, #300]	@ (801b0ec <__ieee754_sqrt+0x1c0>)
 801afc0:	0312      	lsls	r2, r2, #12
 801afc2:	1844      	adds	r4, r0, r1
 801afc4:	2180      	movs	r1, #128	@ 0x80
 801afc6:	0b12      	lsrs	r2, r2, #12
 801afc8:	0349      	lsls	r1, r1, #13
 801afca:	4311      	orrs	r1, r2
 801afcc:	07c0      	lsls	r0, r0, #31
 801afce:	d403      	bmi.n	801afd8 <__ieee754_sqrt+0xac>
 801afd0:	0fda      	lsrs	r2, r3, #31
 801afd2:	0049      	lsls	r1, r1, #1
 801afd4:	1851      	adds	r1, r2, r1
 801afd6:	005b      	lsls	r3, r3, #1
 801afd8:	2500      	movs	r5, #0
 801afda:	1062      	asrs	r2, r4, #1
 801afdc:	0049      	lsls	r1, r1, #1
 801afde:	2480      	movs	r4, #128	@ 0x80
 801afe0:	9205      	str	r2, [sp, #20]
 801afe2:	0fda      	lsrs	r2, r3, #31
 801afe4:	1852      	adds	r2, r2, r1
 801afe6:	2016      	movs	r0, #22
 801afe8:	0029      	movs	r1, r5
 801afea:	005b      	lsls	r3, r3, #1
 801afec:	03a4      	lsls	r4, r4, #14
 801afee:	190e      	adds	r6, r1, r4
 801aff0:	4296      	cmp	r6, r2
 801aff2:	dc02      	bgt.n	801affa <__ieee754_sqrt+0xce>
 801aff4:	1931      	adds	r1, r6, r4
 801aff6:	1b92      	subs	r2, r2, r6
 801aff8:	192d      	adds	r5, r5, r4
 801affa:	0fde      	lsrs	r6, r3, #31
 801affc:	0052      	lsls	r2, r2, #1
 801affe:	3801      	subs	r0, #1
 801b000:	1992      	adds	r2, r2, r6
 801b002:	005b      	lsls	r3, r3, #1
 801b004:	0864      	lsrs	r4, r4, #1
 801b006:	2800      	cmp	r0, #0
 801b008:	d1f1      	bne.n	801afee <__ieee754_sqrt+0xc2>
 801b00a:	2620      	movs	r6, #32
 801b00c:	2780      	movs	r7, #128	@ 0x80
 801b00e:	0004      	movs	r4, r0
 801b010:	9604      	str	r6, [sp, #16]
 801b012:	063f      	lsls	r7, r7, #24
 801b014:	19c6      	adds	r6, r0, r7
 801b016:	46b4      	mov	ip, r6
 801b018:	4291      	cmp	r1, r2
 801b01a:	db02      	blt.n	801b022 <__ieee754_sqrt+0xf6>
 801b01c:	d114      	bne.n	801b048 <__ieee754_sqrt+0x11c>
 801b01e:	429e      	cmp	r6, r3
 801b020:	d812      	bhi.n	801b048 <__ieee754_sqrt+0x11c>
 801b022:	4660      	mov	r0, ip
 801b024:	4666      	mov	r6, ip
 801b026:	19c0      	adds	r0, r0, r7
 801b028:	9100      	str	r1, [sp, #0]
 801b02a:	2e00      	cmp	r6, #0
 801b02c:	da03      	bge.n	801b036 <__ieee754_sqrt+0x10a>
 801b02e:	43c6      	mvns	r6, r0
 801b030:	0ff6      	lsrs	r6, r6, #31
 801b032:	198e      	adds	r6, r1, r6
 801b034:	9600      	str	r6, [sp, #0]
 801b036:	1a52      	subs	r2, r2, r1
 801b038:	4563      	cmp	r3, ip
 801b03a:	4189      	sbcs	r1, r1
 801b03c:	4249      	negs	r1, r1
 801b03e:	1a52      	subs	r2, r2, r1
 801b040:	4661      	mov	r1, ip
 801b042:	1a5b      	subs	r3, r3, r1
 801b044:	9900      	ldr	r1, [sp, #0]
 801b046:	19e4      	adds	r4, r4, r7
 801b048:	0fde      	lsrs	r6, r3, #31
 801b04a:	0052      	lsls	r2, r2, #1
 801b04c:	1992      	adds	r2, r2, r6
 801b04e:	9e04      	ldr	r6, [sp, #16]
 801b050:	005b      	lsls	r3, r3, #1
 801b052:	3e01      	subs	r6, #1
 801b054:	087f      	lsrs	r7, r7, #1
 801b056:	9604      	str	r6, [sp, #16]
 801b058:	2e00      	cmp	r6, #0
 801b05a:	d1db      	bne.n	801b014 <__ieee754_sqrt+0xe8>
 801b05c:	431a      	orrs	r2, r3
 801b05e:	d01f      	beq.n	801b0a0 <__ieee754_sqrt+0x174>
 801b060:	4e23      	ldr	r6, [pc, #140]	@ (801b0f0 <__ieee754_sqrt+0x1c4>)
 801b062:	4f24      	ldr	r7, [pc, #144]	@ (801b0f4 <__ieee754_sqrt+0x1c8>)
 801b064:	6830      	ldr	r0, [r6, #0]
 801b066:	6871      	ldr	r1, [r6, #4]
 801b068:	683a      	ldr	r2, [r7, #0]
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	9200      	str	r2, [sp, #0]
 801b06e:	9301      	str	r3, [sp, #4]
 801b070:	6832      	ldr	r2, [r6, #0]
 801b072:	6873      	ldr	r3, [r6, #4]
 801b074:	9202      	str	r2, [sp, #8]
 801b076:	9303      	str	r3, [sp, #12]
 801b078:	9a00      	ldr	r2, [sp, #0]
 801b07a:	9b01      	ldr	r3, [sp, #4]
 801b07c:	f7e6 fd98 	bl	8001bb0 <__aeabi_dsub>
 801b080:	0002      	movs	r2, r0
 801b082:	000b      	movs	r3, r1
 801b084:	9802      	ldr	r0, [sp, #8]
 801b086:	9903      	ldr	r1, [sp, #12]
 801b088:	f7e5 f9dc 	bl	8000444 <__aeabi_dcmple>
 801b08c:	2800      	cmp	r0, #0
 801b08e:	d007      	beq.n	801b0a0 <__ieee754_sqrt+0x174>
 801b090:	6830      	ldr	r0, [r6, #0]
 801b092:	6871      	ldr	r1, [r6, #4]
 801b094:	683a      	ldr	r2, [r7, #0]
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	1c67      	adds	r7, r4, #1
 801b09a:	d10f      	bne.n	801b0bc <__ieee754_sqrt+0x190>
 801b09c:	9c04      	ldr	r4, [sp, #16]
 801b09e:	3501      	adds	r5, #1
 801b0a0:	4b15      	ldr	r3, [pc, #84]	@ (801b0f8 <__ieee754_sqrt+0x1cc>)
 801b0a2:	106a      	asrs	r2, r5, #1
 801b0a4:	18d2      	adds	r2, r2, r3
 801b0a6:	0863      	lsrs	r3, r4, #1
 801b0a8:	07ed      	lsls	r5, r5, #31
 801b0aa:	d502      	bpl.n	801b0b2 <__ieee754_sqrt+0x186>
 801b0ac:	2180      	movs	r1, #128	@ 0x80
 801b0ae:	0609      	lsls	r1, r1, #24
 801b0b0:	430b      	orrs	r3, r1
 801b0b2:	9905      	ldr	r1, [sp, #20]
 801b0b4:	001c      	movs	r4, r3
 801b0b6:	0509      	lsls	r1, r1, #20
 801b0b8:	188d      	adds	r5, r1, r2
 801b0ba:	e750      	b.n	801af5e <__ieee754_sqrt+0x32>
 801b0bc:	f7e5 fb08 	bl	80006d0 <__aeabi_dadd>
 801b0c0:	6877      	ldr	r7, [r6, #4]
 801b0c2:	6836      	ldr	r6, [r6, #0]
 801b0c4:	0002      	movs	r2, r0
 801b0c6:	000b      	movs	r3, r1
 801b0c8:	0030      	movs	r0, r6
 801b0ca:	0039      	movs	r1, r7
 801b0cc:	f7e5 f9b0 	bl	8000430 <__aeabi_dcmplt>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	d004      	beq.n	801b0de <__ieee754_sqrt+0x1b2>
 801b0d4:	3402      	adds	r4, #2
 801b0d6:	4263      	negs	r3, r4
 801b0d8:	4163      	adcs	r3, r4
 801b0da:	18ed      	adds	r5, r5, r3
 801b0dc:	e7e0      	b.n	801b0a0 <__ieee754_sqrt+0x174>
 801b0de:	2301      	movs	r3, #1
 801b0e0:	3401      	adds	r4, #1
 801b0e2:	439c      	bics	r4, r3
 801b0e4:	e7dc      	b.n	801b0a0 <__ieee754_sqrt+0x174>
 801b0e6:	46c0      	nop			@ (mov r8, r8)
 801b0e8:	7ff00000 	.word	0x7ff00000
 801b0ec:	fffffc01 	.word	0xfffffc01
 801b0f0:	200002b8 	.word	0x200002b8
 801b0f4:	200002b0 	.word	0x200002b0
 801b0f8:	3fe00000 	.word	0x3fe00000

0801b0fc <_init>:
 801b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0fe:	46c0      	nop			@ (mov r8, r8)
 801b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b102:	bc08      	pop	{r3}
 801b104:	469e      	mov	lr, r3
 801b106:	4770      	bx	lr

0801b108 <_fini>:
 801b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b10a:	46c0      	nop			@ (mov r8, r8)
 801b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b10e:	bc08      	pop	{r3}
 801b110:	469e      	mov	lr, r3
 801b112:	4770      	bx	lr
 801b114:	0000      	movs	r0, r0
	...

0801b118 <__FLASH_Program_Fast_veneer>:
 801b118:	b401      	push	{r0}
 801b11a:	4802      	ldr	r0, [pc, #8]	@ (801b124 <__FLASH_Program_Fast_veneer+0xc>)
 801b11c:	4684      	mov	ip, r0
 801b11e:	bc01      	pop	{r0}
 801b120:	4760      	bx	ip
 801b122:	bf00      	nop
 801b124:	200002c1 	.word	0x200002c1

Disassembly of section .data:

20000000 <ParamItem>:
20000000:	00000001                                ....

20000004 <aTxBuffer>:
20000004:	ff000007 00080000                       ........

2000000c <dpytab>:
2000000c:	9892bd81 9dc0c8ac e0848880 c6c2b0c3     ................
2000001c:	a4e2e3f0 f5af80f7 daaef4da ff86f4da     ................
2000002c:	c3e384e2 a1fe86c6 ffff8ef6 f1ffffff     ................
2000003c:	c3e384e2 ffffffc6 ffffffff ffffffff     ................

2000004c <BluetoothState>:
2000004c:	00000001                                ....

20000050 <Eventos>:
20000050:	12221111 14441333 16661555 00001777     ..".3.D.U.f.w...
	...

2000006c <Mediciones>:
2000006c:	12222111 00001333                       .!".3...

20000074 <Alarmas>:
20000074:	32223111 34443333 36663555 38883777     .1"233D4U5f6w7.8
20000084:	00000000                                ....

20000088 <DatosMAC>:
20000088:	56781234 00009999                       4.xV....

20000090 <DatosFirmware>:
20000090:	                                         ..

20000092 <PNU_0x3000>:
20000092:	                                         ..

20000094 <PNU_0x3004>:
20000094:	                                         (.

20000096 <PNU_0x3006>:
20000096:	                                         ..

20000098 <PNU_0x3008>:
20000098:	                                         ..

2000009a <PNU_0x300C>:
2000009a:	                                         ..

2000009c <PNU_0x3010>:
2000009c:	                                         ..

2000009e <PNU_0x3012>:
2000009e:	                                         (.

200000a0 <PNU_0x3014>:
200000a0:	                                         ..

200000a2 <PNU_0x3016>:
200000a2:	                                         ..

200000a4 <PNU_0x3018>:
200000a4:	                                         ..

200000a6 <PNU_0x301A>:
200000a6:	                                         2.

200000a8 <PNU_0x301C>:
200000a8:	                                         Z.

200000aa <PNU_0x301E>:
200000aa:	                                         ..

200000ac <PNU_0x3104>:
200000ac:	                                         ..

200000ae <PNU_0x3106>:
200000ae:	                                         ..

200000b0 <PNU_0x3108>:
200000b0:	                                         ..

200000b2 <PNU_0x310A>:
200000b2:	                                         ..

200000b4 <PNU_0x310C>:
200000b4:	                                         _.

200000b6 <PNU_0x310E>:
200000b6:	                                         d.

200000b8 <Plantilla>:
	...
20000100:	00000001 00000000 00000000 00000000     ................
	...

20000138 <copiaPlantilla>:
	...
20000180:	00000100 00000000 00000000 00000000     ................
	...

200001b8 <daysToMonth>:
200001b8:	00000000 0000001f 0000003b 0000005a     ........;...Z...
200001c8:	00000078 00000097 000000b6 000000d5     x...............
200001d8:	000000f3 00000111 00000130 0000014e     ........0...N...

200001e8 <PFULLDEF_Px_PORT>:
200001e8:	50000400 50000400 50000400 50000400     ...P...P...P...P
200001f8:	50000400                                ...P

200001fc <PFULLDEF_Px_PIN>:
200001fc:	40101010 00000010                       ...@....

20000204 <PFULLDEF_MPx_PORT>:
20000204:	50000400 50000400 50000400 50000400     ...P...P...P...P

20000214 <PFULLDEF_MPx_PIN>:
20000214:	08080808                                ....

20000218 <firstFlagPuerta1>:
20000218:	00000001                                ....

2000021c <difName>:
2000021c:	5f454c42 4e2b5441 49454d41 5245424d     BLE_AT+NAMEIMBER
2000022c:	54432d41 462d464f 00000a0d 00000000     A-CTOF-F........
	...

20000250 <SystemCoreClock>:
20000250:	003d0900                                ..=.

20000254 <uwTickPrio>:
20000254:	00000004                                ....

20000258 <uwTickFreq>:
20000258:	00000001                                ....

2000025c <_impure_ptr>:
2000025c:	20000260                                `.. 

20000260 <_impure_data>:
20000260:	00000000 20001194 200011fc 20001264     ....... ... d.. 
	...

200002b0 <tiny>:
200002b0:	c2f8f359 01a56e1f                       Y....n..

200002b8 <one>:
200002b8:	00000000 3ff00000                       .......?

200002c0 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200002c0:	b580      	push	{r7, lr}
200002c2:	b088      	sub	sp, #32
200002c4:	af00      	add	r7, sp, #0
200002c6:	6078      	str	r0, [r7, #4]
200002c8:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200002ca:	231f      	movs	r3, #31
200002cc:	18fb      	adds	r3, r7, r3
200002ce:	2200      	movs	r2, #0
200002d0:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200002d2:	687b      	ldr	r3, [r7, #4]
200002d4:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200002d6:	683b      	ldr	r3, [r7, #0]
200002d8:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200002da:	4b1a      	ldr	r3, [pc, #104]	@ (20000344 <FLASH_Program_Fast+0x84>)
200002dc:	695a      	ldr	r2, [r3, #20]
200002de:	4b19      	ldr	r3, [pc, #100]	@ (20000344 <FLASH_Program_Fast+0x84>)
200002e0:	2180      	movs	r1, #128	@ 0x80
200002e2:	02c9      	lsls	r1, r1, #11
200002e4:	430a      	orrs	r2, r1
200002e6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200002e8:	f3ef 8310 	mrs	r3, PRIMASK
200002ec:	60fb      	str	r3, [r7, #12]
  return(result);
200002ee:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200002f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200002f2:	b672      	cpsid	i
}
200002f4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200002f6:	e00f      	b.n	20000318 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200002f8:	697a      	ldr	r2, [r7, #20]
200002fa:	69bb      	ldr	r3, [r7, #24]
200002fc:	6812      	ldr	r2, [r2, #0]
200002fe:	601a      	str	r2, [r3, #0]
    src += 4U;
20000300:	697b      	ldr	r3, [r7, #20]
20000302:	3304      	adds	r3, #4
20000304:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000306:	69bb      	ldr	r3, [r7, #24]
20000308:	3304      	adds	r3, #4
2000030a:	61bb      	str	r3, [r7, #24]
    index++;
2000030c:	211f      	movs	r1, #31
2000030e:	187b      	adds	r3, r7, r1
20000310:	781a      	ldrb	r2, [r3, #0]
20000312:	187b      	adds	r3, r7, r1
20000314:	3201      	adds	r2, #1
20000316:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000318:	231f      	movs	r3, #31
2000031a:	18fb      	adds	r3, r7, r3
2000031c:	781b      	ldrb	r3, [r3, #0]
2000031e:	2b3f      	cmp	r3, #63	@ 0x3f
20000320:	d9ea      	bls.n	200002f8 <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000322:	46c0      	nop			@ (mov r8, r8)
20000324:	4b07      	ldr	r3, [pc, #28]	@ (20000344 <FLASH_Program_Fast+0x84>)
20000326:	691a      	ldr	r2, [r3, #16]
20000328:	2380      	movs	r3, #128	@ 0x80
2000032a:	025b      	lsls	r3, r3, #9
2000032c:	4013      	ands	r3, r2
2000032e:	d1f9      	bne.n	20000324 <FLASH_Program_Fast+0x64>
20000330:	693b      	ldr	r3, [r7, #16]
20000332:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000334:	68bb      	ldr	r3, [r7, #8]
20000336:	f383 8810 	msr	PRIMASK, r3
}
2000033a:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000033c:	46c0      	nop			@ (mov r8, r8)
2000033e:	46bd      	mov	sp, r7
20000340:	b008      	add	sp, #32
20000342:	bd80      	pop	{r7, pc}
20000344:	40022000 	.word	0x40022000
